
XploreAvionics_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000122bc  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001094  08112560  08112560  00022560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081135f4  081135f4  000235f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  081135fc  081135fc  000235fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08113608  08113608  00023608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  10000000  08113610  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a17c  1000020c  0811381c  0003020c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  1000a388  0811381c  0003a388  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0008f89e  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000d8ee  00000000  00000000  000bfada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a78  00000000  00000000  000cd3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000026b0  00000000  00000000  000cfe40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004dc66  00000000  00000000  000d24f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000441c0  00000000  00000000  00120156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001abc5d  00000000  00000000  00164316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0030ff73  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c790  00000000  00000000  0030ffc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000020c 	.word	0x1000020c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08112544 	.word	0x08112544

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000210 	.word	0x10000210
 81002dc:	08112544 	.word	0x08112544

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	; 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	3c01      	subs	r4, #1
 81004ec:	bf28      	it	cs
 81004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004f2:	d2e9      	bcs.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2f>:
 8100cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100ce0:	bf24      	itt	cs
 8100ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100cea:	d90d      	bls.n	8100d08 <__aeabi_d2f+0x30>
 8100cec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d00:	bf08      	it	eq
 8100d02:	f020 0001 	biceq.w	r0, r0, #1
 8100d06:	4770      	bx	lr
 8100d08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d0c:	d121      	bne.n	8100d52 <__aeabi_d2f+0x7a>
 8100d0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d12:	bfbc      	itt	lt
 8100d14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d18:	4770      	bxlt	lr
 8100d1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d22:	f1c2 0218 	rsb	r2, r2, #24
 8100d26:	f1c2 0c20 	rsb	ip, r2, #32
 8100d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d32:	bf18      	it	ne
 8100d34:	f040 0001 	orrne.w	r0, r0, #1
 8100d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d44:	ea40 000c 	orr.w	r0, r0, ip
 8100d48:	fa23 f302 	lsr.w	r3, r3, r2
 8100d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d50:	e7cc      	b.n	8100cec <__aeabi_d2f+0x14>
 8100d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d56:	d107      	bne.n	8100d68 <__aeabi_d2f+0x90>
 8100d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d5c:	bf1e      	ittt	ne
 8100d5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d66:	4770      	bxne	lr
 8100d68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d74:	4770      	bx	lr
 8100d76:	bf00      	nop

08100d78 <__aeabi_ldivmod>:
 8100d78:	b97b      	cbnz	r3, 8100d9a <__aeabi_ldivmod+0x22>
 8100d7a:	b972      	cbnz	r2, 8100d9a <__aeabi_ldivmod+0x22>
 8100d7c:	2900      	cmp	r1, #0
 8100d7e:	bfbe      	ittt	lt
 8100d80:	2000      	movlt	r0, #0
 8100d82:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100d86:	e006      	blt.n	8100d96 <__aeabi_ldivmod+0x1e>
 8100d88:	bf08      	it	eq
 8100d8a:	2800      	cmpeq	r0, #0
 8100d8c:	bf1c      	itt	ne
 8100d8e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100d92:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100d96:	f000 b9b9 	b.w	810110c <__aeabi_idiv0>
 8100d9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100da2:	2900      	cmp	r1, #0
 8100da4:	db09      	blt.n	8100dba <__aeabi_ldivmod+0x42>
 8100da6:	2b00      	cmp	r3, #0
 8100da8:	db1a      	blt.n	8100de0 <__aeabi_ldivmod+0x68>
 8100daa:	f000 f84d 	bl	8100e48 <__udivmoddi4>
 8100dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100db6:	b004      	add	sp, #16
 8100db8:	4770      	bx	lr
 8100dba:	4240      	negs	r0, r0
 8100dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dc0:	2b00      	cmp	r3, #0
 8100dc2:	db1b      	blt.n	8100dfc <__aeabi_ldivmod+0x84>
 8100dc4:	f000 f840 	bl	8100e48 <__udivmoddi4>
 8100dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dd0:	b004      	add	sp, #16
 8100dd2:	4240      	negs	r0, r0
 8100dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dd8:	4252      	negs	r2, r2
 8100dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100dde:	4770      	bx	lr
 8100de0:	4252      	negs	r2, r2
 8100de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100de6:	f000 f82f 	bl	8100e48 <__udivmoddi4>
 8100dea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100df2:	b004      	add	sp, #16
 8100df4:	4240      	negs	r0, r0
 8100df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dfa:	4770      	bx	lr
 8100dfc:	4252      	negs	r2, r2
 8100dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100e02:	f000 f821 	bl	8100e48 <__udivmoddi4>
 8100e06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100e0e:	b004      	add	sp, #16
 8100e10:	4252      	negs	r2, r2
 8100e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100e16:	4770      	bx	lr

08100e18 <__aeabi_uldivmod>:
 8100e18:	b953      	cbnz	r3, 8100e30 <__aeabi_uldivmod+0x18>
 8100e1a:	b94a      	cbnz	r2, 8100e30 <__aeabi_uldivmod+0x18>
 8100e1c:	2900      	cmp	r1, #0
 8100e1e:	bf08      	it	eq
 8100e20:	2800      	cmpeq	r0, #0
 8100e22:	bf1c      	itt	ne
 8100e24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100e28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100e2c:	f000 b96e 	b.w	810110c <__aeabi_idiv0>
 8100e30:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e38:	f000 f806 	bl	8100e48 <__udivmoddi4>
 8100e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100e44:	b004      	add	sp, #16
 8100e46:	4770      	bx	lr

08100e48 <__udivmoddi4>:
 8100e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e4c:	9d08      	ldr	r5, [sp, #32]
 8100e4e:	4604      	mov	r4, r0
 8100e50:	468c      	mov	ip, r1
 8100e52:	2b00      	cmp	r3, #0
 8100e54:	f040 8083 	bne.w	8100f5e <__udivmoddi4+0x116>
 8100e58:	428a      	cmp	r2, r1
 8100e5a:	4617      	mov	r7, r2
 8100e5c:	d947      	bls.n	8100eee <__udivmoddi4+0xa6>
 8100e5e:	fab2 f282 	clz	r2, r2
 8100e62:	b142      	cbz	r2, 8100e76 <__udivmoddi4+0x2e>
 8100e64:	f1c2 0020 	rsb	r0, r2, #32
 8100e68:	fa24 f000 	lsr.w	r0, r4, r0
 8100e6c:	4091      	lsls	r1, r2
 8100e6e:	4097      	lsls	r7, r2
 8100e70:	ea40 0c01 	orr.w	ip, r0, r1
 8100e74:	4094      	lsls	r4, r2
 8100e76:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100e7a:	0c23      	lsrs	r3, r4, #16
 8100e7c:	fbbc f6f8 	udiv	r6, ip, r8
 8100e80:	fa1f fe87 	uxth.w	lr, r7
 8100e84:	fb08 c116 	mls	r1, r8, r6, ip
 8100e88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e8c:	fb06 f10e 	mul.w	r1, r6, lr
 8100e90:	4299      	cmp	r1, r3
 8100e92:	d909      	bls.n	8100ea8 <__udivmoddi4+0x60>
 8100e94:	18fb      	adds	r3, r7, r3
 8100e96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8100e9a:	f080 8119 	bcs.w	81010d0 <__udivmoddi4+0x288>
 8100e9e:	4299      	cmp	r1, r3
 8100ea0:	f240 8116 	bls.w	81010d0 <__udivmoddi4+0x288>
 8100ea4:	3e02      	subs	r6, #2
 8100ea6:	443b      	add	r3, r7
 8100ea8:	1a5b      	subs	r3, r3, r1
 8100eaa:	b2a4      	uxth	r4, r4
 8100eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8100eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8100eb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100eb8:	fb00 fe0e 	mul.w	lr, r0, lr
 8100ebc:	45a6      	cmp	lr, r4
 8100ebe:	d909      	bls.n	8100ed4 <__udivmoddi4+0x8c>
 8100ec0:	193c      	adds	r4, r7, r4
 8100ec2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100ec6:	f080 8105 	bcs.w	81010d4 <__udivmoddi4+0x28c>
 8100eca:	45a6      	cmp	lr, r4
 8100ecc:	f240 8102 	bls.w	81010d4 <__udivmoddi4+0x28c>
 8100ed0:	3802      	subs	r0, #2
 8100ed2:	443c      	add	r4, r7
 8100ed4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100ed8:	eba4 040e 	sub.w	r4, r4, lr
 8100edc:	2600      	movs	r6, #0
 8100ede:	b11d      	cbz	r5, 8100ee8 <__udivmoddi4+0xa0>
 8100ee0:	40d4      	lsrs	r4, r2
 8100ee2:	2300      	movs	r3, #0
 8100ee4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ee8:	4631      	mov	r1, r6
 8100eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eee:	b902      	cbnz	r2, 8100ef2 <__udivmoddi4+0xaa>
 8100ef0:	deff      	udf	#255	; 0xff
 8100ef2:	fab2 f282 	clz	r2, r2
 8100ef6:	2a00      	cmp	r2, #0
 8100ef8:	d150      	bne.n	8100f9c <__udivmoddi4+0x154>
 8100efa:	1bcb      	subs	r3, r1, r7
 8100efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100f00:	fa1f f887 	uxth.w	r8, r7
 8100f04:	2601      	movs	r6, #1
 8100f06:	fbb3 fcfe 	udiv	ip, r3, lr
 8100f0a:	0c21      	lsrs	r1, r4, #16
 8100f0c:	fb0e 331c 	mls	r3, lr, ip, r3
 8100f10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100f14:	fb08 f30c 	mul.w	r3, r8, ip
 8100f18:	428b      	cmp	r3, r1
 8100f1a:	d907      	bls.n	8100f2c <__udivmoddi4+0xe4>
 8100f1c:	1879      	adds	r1, r7, r1
 8100f1e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8100f22:	d202      	bcs.n	8100f2a <__udivmoddi4+0xe2>
 8100f24:	428b      	cmp	r3, r1
 8100f26:	f200 80e9 	bhi.w	81010fc <__udivmoddi4+0x2b4>
 8100f2a:	4684      	mov	ip, r0
 8100f2c:	1ac9      	subs	r1, r1, r3
 8100f2e:	b2a3      	uxth	r3, r4
 8100f30:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f34:	fb0e 1110 	mls	r1, lr, r0, r1
 8100f38:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100f3c:	fb08 f800 	mul.w	r8, r8, r0
 8100f40:	45a0      	cmp	r8, r4
 8100f42:	d907      	bls.n	8100f54 <__udivmoddi4+0x10c>
 8100f44:	193c      	adds	r4, r7, r4
 8100f46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100f4a:	d202      	bcs.n	8100f52 <__udivmoddi4+0x10a>
 8100f4c:	45a0      	cmp	r8, r4
 8100f4e:	f200 80d9 	bhi.w	8101104 <__udivmoddi4+0x2bc>
 8100f52:	4618      	mov	r0, r3
 8100f54:	eba4 0408 	sub.w	r4, r4, r8
 8100f58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100f5c:	e7bf      	b.n	8100ede <__udivmoddi4+0x96>
 8100f5e:	428b      	cmp	r3, r1
 8100f60:	d909      	bls.n	8100f76 <__udivmoddi4+0x12e>
 8100f62:	2d00      	cmp	r5, #0
 8100f64:	f000 80b1 	beq.w	81010ca <__udivmoddi4+0x282>
 8100f68:	2600      	movs	r6, #0
 8100f6a:	e9c5 0100 	strd	r0, r1, [r5]
 8100f6e:	4630      	mov	r0, r6
 8100f70:	4631      	mov	r1, r6
 8100f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f76:	fab3 f683 	clz	r6, r3
 8100f7a:	2e00      	cmp	r6, #0
 8100f7c:	d14a      	bne.n	8101014 <__udivmoddi4+0x1cc>
 8100f7e:	428b      	cmp	r3, r1
 8100f80:	d302      	bcc.n	8100f88 <__udivmoddi4+0x140>
 8100f82:	4282      	cmp	r2, r0
 8100f84:	f200 80b8 	bhi.w	81010f8 <__udivmoddi4+0x2b0>
 8100f88:	1a84      	subs	r4, r0, r2
 8100f8a:	eb61 0103 	sbc.w	r1, r1, r3
 8100f8e:	2001      	movs	r0, #1
 8100f90:	468c      	mov	ip, r1
 8100f92:	2d00      	cmp	r5, #0
 8100f94:	d0a8      	beq.n	8100ee8 <__udivmoddi4+0xa0>
 8100f96:	e9c5 4c00 	strd	r4, ip, [r5]
 8100f9a:	e7a5      	b.n	8100ee8 <__udivmoddi4+0xa0>
 8100f9c:	f1c2 0320 	rsb	r3, r2, #32
 8100fa0:	fa20 f603 	lsr.w	r6, r0, r3
 8100fa4:	4097      	lsls	r7, r2
 8100fa6:	fa01 f002 	lsl.w	r0, r1, r2
 8100faa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100fae:	40d9      	lsrs	r1, r3
 8100fb0:	4330      	orrs	r0, r6
 8100fb2:	0c03      	lsrs	r3, r0, #16
 8100fb4:	fbb1 f6fe 	udiv	r6, r1, lr
 8100fb8:	fa1f f887 	uxth.w	r8, r7
 8100fbc:	fb0e 1116 	mls	r1, lr, r6, r1
 8100fc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100fc4:	fb06 f108 	mul.w	r1, r6, r8
 8100fc8:	4299      	cmp	r1, r3
 8100fca:	fa04 f402 	lsl.w	r4, r4, r2
 8100fce:	d909      	bls.n	8100fe4 <__udivmoddi4+0x19c>
 8100fd0:	18fb      	adds	r3, r7, r3
 8100fd2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8100fd6:	f080 808d 	bcs.w	81010f4 <__udivmoddi4+0x2ac>
 8100fda:	4299      	cmp	r1, r3
 8100fdc:	f240 808a 	bls.w	81010f4 <__udivmoddi4+0x2ac>
 8100fe0:	3e02      	subs	r6, #2
 8100fe2:	443b      	add	r3, r7
 8100fe4:	1a5b      	subs	r3, r3, r1
 8100fe6:	b281      	uxth	r1, r0
 8100fe8:	fbb3 f0fe 	udiv	r0, r3, lr
 8100fec:	fb0e 3310 	mls	r3, lr, r0, r3
 8100ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100ff4:	fb00 f308 	mul.w	r3, r0, r8
 8100ff8:	428b      	cmp	r3, r1
 8100ffa:	d907      	bls.n	810100c <__udivmoddi4+0x1c4>
 8100ffc:	1879      	adds	r1, r7, r1
 8100ffe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8101002:	d273      	bcs.n	81010ec <__udivmoddi4+0x2a4>
 8101004:	428b      	cmp	r3, r1
 8101006:	d971      	bls.n	81010ec <__udivmoddi4+0x2a4>
 8101008:	3802      	subs	r0, #2
 810100a:	4439      	add	r1, r7
 810100c:	1acb      	subs	r3, r1, r3
 810100e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8101012:	e778      	b.n	8100f06 <__udivmoddi4+0xbe>
 8101014:	f1c6 0c20 	rsb	ip, r6, #32
 8101018:	fa03 f406 	lsl.w	r4, r3, r6
 810101c:	fa22 f30c 	lsr.w	r3, r2, ip
 8101020:	431c      	orrs	r4, r3
 8101022:	fa20 f70c 	lsr.w	r7, r0, ip
 8101026:	fa01 f306 	lsl.w	r3, r1, r6
 810102a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 810102e:	fa21 f10c 	lsr.w	r1, r1, ip
 8101032:	431f      	orrs	r7, r3
 8101034:	0c3b      	lsrs	r3, r7, #16
 8101036:	fbb1 f9fe 	udiv	r9, r1, lr
 810103a:	fa1f f884 	uxth.w	r8, r4
 810103e:	fb0e 1119 	mls	r1, lr, r9, r1
 8101042:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8101046:	fb09 fa08 	mul.w	sl, r9, r8
 810104a:	458a      	cmp	sl, r1
 810104c:	fa02 f206 	lsl.w	r2, r2, r6
 8101050:	fa00 f306 	lsl.w	r3, r0, r6
 8101054:	d908      	bls.n	8101068 <__udivmoddi4+0x220>
 8101056:	1861      	adds	r1, r4, r1
 8101058:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 810105c:	d248      	bcs.n	81010f0 <__udivmoddi4+0x2a8>
 810105e:	458a      	cmp	sl, r1
 8101060:	d946      	bls.n	81010f0 <__udivmoddi4+0x2a8>
 8101062:	f1a9 0902 	sub.w	r9, r9, #2
 8101066:	4421      	add	r1, r4
 8101068:	eba1 010a 	sub.w	r1, r1, sl
 810106c:	b2bf      	uxth	r7, r7
 810106e:	fbb1 f0fe 	udiv	r0, r1, lr
 8101072:	fb0e 1110 	mls	r1, lr, r0, r1
 8101076:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810107a:	fb00 f808 	mul.w	r8, r0, r8
 810107e:	45b8      	cmp	r8, r7
 8101080:	d907      	bls.n	8101092 <__udivmoddi4+0x24a>
 8101082:	19e7      	adds	r7, r4, r7
 8101084:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8101088:	d22e      	bcs.n	81010e8 <__udivmoddi4+0x2a0>
 810108a:	45b8      	cmp	r8, r7
 810108c:	d92c      	bls.n	81010e8 <__udivmoddi4+0x2a0>
 810108e:	3802      	subs	r0, #2
 8101090:	4427      	add	r7, r4
 8101092:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8101096:	eba7 0708 	sub.w	r7, r7, r8
 810109a:	fba0 8902 	umull	r8, r9, r0, r2
 810109e:	454f      	cmp	r7, r9
 81010a0:	46c6      	mov	lr, r8
 81010a2:	4649      	mov	r1, r9
 81010a4:	d31a      	bcc.n	81010dc <__udivmoddi4+0x294>
 81010a6:	d017      	beq.n	81010d8 <__udivmoddi4+0x290>
 81010a8:	b15d      	cbz	r5, 81010c2 <__udivmoddi4+0x27a>
 81010aa:	ebb3 020e 	subs.w	r2, r3, lr
 81010ae:	eb67 0701 	sbc.w	r7, r7, r1
 81010b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 81010b6:	40f2      	lsrs	r2, r6
 81010b8:	ea4c 0202 	orr.w	r2, ip, r2
 81010bc:	40f7      	lsrs	r7, r6
 81010be:	e9c5 2700 	strd	r2, r7, [r5]
 81010c2:	2600      	movs	r6, #0
 81010c4:	4631      	mov	r1, r6
 81010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81010ca:	462e      	mov	r6, r5
 81010cc:	4628      	mov	r0, r5
 81010ce:	e70b      	b.n	8100ee8 <__udivmoddi4+0xa0>
 81010d0:	4606      	mov	r6, r0
 81010d2:	e6e9      	b.n	8100ea8 <__udivmoddi4+0x60>
 81010d4:	4618      	mov	r0, r3
 81010d6:	e6fd      	b.n	8100ed4 <__udivmoddi4+0x8c>
 81010d8:	4543      	cmp	r3, r8
 81010da:	d2e5      	bcs.n	81010a8 <__udivmoddi4+0x260>
 81010dc:	ebb8 0e02 	subs.w	lr, r8, r2
 81010e0:	eb69 0104 	sbc.w	r1, r9, r4
 81010e4:	3801      	subs	r0, #1
 81010e6:	e7df      	b.n	81010a8 <__udivmoddi4+0x260>
 81010e8:	4608      	mov	r0, r1
 81010ea:	e7d2      	b.n	8101092 <__udivmoddi4+0x24a>
 81010ec:	4660      	mov	r0, ip
 81010ee:	e78d      	b.n	810100c <__udivmoddi4+0x1c4>
 81010f0:	4681      	mov	r9, r0
 81010f2:	e7b9      	b.n	8101068 <__udivmoddi4+0x220>
 81010f4:	4666      	mov	r6, ip
 81010f6:	e775      	b.n	8100fe4 <__udivmoddi4+0x19c>
 81010f8:	4630      	mov	r0, r6
 81010fa:	e74a      	b.n	8100f92 <__udivmoddi4+0x14a>
 81010fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8101100:	4439      	add	r1, r7
 8101102:	e713      	b.n	8100f2c <__udivmoddi4+0xe4>
 8101104:	3802      	subs	r0, #2
 8101106:	443c      	add	r4, r7
 8101108:	e724      	b.n	8100f54 <__udivmoddi4+0x10c>
 810110a:	bf00      	nop

0810110c <__aeabi_idiv0>:
 810110c:	4770      	bx	lr
 810110e:	bf00      	nop

08101110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101110:	b480      	push	{r7}
 8101112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101114:	4b0b      	ldr	r3, [pc, #44]	; (8101144 <SystemInit+0x34>)
 8101116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810111a:	4a0a      	ldr	r2, [pc, #40]	; (8101144 <SystemInit+0x34>)
 810111c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101124:	4b07      	ldr	r3, [pc, #28]	; (8101144 <SystemInit+0x34>)
 8101126:	691b      	ldr	r3, [r3, #16]
 8101128:	4a06      	ldr	r2, [pc, #24]	; (8101144 <SystemInit+0x34>)
 810112a:	f043 0310 	orr.w	r3, r3, #16
 810112e:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101130:	4b04      	ldr	r3, [pc, #16]	; (8101144 <SystemInit+0x34>)
 8101132:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8101136:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101138:	bf00      	nop
 810113a:	46bd      	mov	sp, r7
 810113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101140:	4770      	bx	lr
 8101142:	bf00      	nop
 8101144:	e000ed00 	.word	0xe000ed00

08101148 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101148:	b580      	push	{r7, lr}
 810114a:	b082      	sub	sp, #8
 810114c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810114e:	4b21      	ldr	r3, [pc, #132]	; (81011d4 <MX_DMA_Init+0x8c>)
 8101150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101154:	4a1f      	ldr	r2, [pc, #124]	; (81011d4 <MX_DMA_Init+0x8c>)
 8101156:	f043 0301 	orr.w	r3, r3, #1
 810115a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810115e:	4b1d      	ldr	r3, [pc, #116]	; (81011d4 <MX_DMA_Init+0x8c>)
 8101160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101164:	f003 0301 	and.w	r3, r3, #1
 8101168:	607b      	str	r3, [r7, #4]
 810116a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 810116c:	4b19      	ldr	r3, [pc, #100]	; (81011d4 <MX_DMA_Init+0x8c>)
 810116e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101172:	4a18      	ldr	r2, [pc, #96]	; (81011d4 <MX_DMA_Init+0x8c>)
 8101174:	f043 0302 	orr.w	r3, r3, #2
 8101178:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810117c:	4b15      	ldr	r3, [pc, #84]	; (81011d4 <MX_DMA_Init+0x8c>)
 810117e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101182:	f003 0302 	and.w	r3, r3, #2
 8101186:	603b      	str	r3, [r7, #0]
 8101188:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 810118a:	2200      	movs	r2, #0
 810118c:	2105      	movs	r1, #5
 810118e:	200b      	movs	r0, #11
 8101190:	f001 f95b 	bl	810244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101194:	200b      	movs	r0, #11
 8101196:	f001 f972 	bl	810247e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 810119a:	2200      	movs	r2, #0
 810119c:	2105      	movs	r1, #5
 810119e:	200c      	movs	r0, #12
 81011a0:	f001 f953 	bl	810244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 81011a4:	200c      	movs	r0, #12
 81011a6:	f001 f96a 	bl	810247e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 81011aa:	2200      	movs	r2, #0
 81011ac:	2105      	movs	r1, #5
 81011ae:	203a      	movs	r0, #58	; 0x3a
 81011b0:	f001 f94b 	bl	810244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 81011b4:	203a      	movs	r0, #58	; 0x3a
 81011b6:	f001 f962 	bl	810247e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 81011ba:	2200      	movs	r2, #0
 81011bc:	2105      	movs	r1, #5
 81011be:	203b      	movs	r0, #59	; 0x3b
 81011c0:	f001 f943 	bl	810244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 81011c4:	203b      	movs	r0, #59	; 0x3b
 81011c6:	f001 f95a 	bl	810247e <HAL_NVIC_EnableIRQ>

}
 81011ca:	bf00      	nop
 81011cc:	3708      	adds	r7, #8
 81011ce:	46bd      	mov	sp, r7
 81011d0:	bd80      	pop	{r7, pc}
 81011d2:	bf00      	nop
 81011d4:	58024400 	.word	0x58024400

081011d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 81011d8:	b480      	push	{r7}
 81011da:	b085      	sub	sp, #20
 81011dc:	af00      	add	r7, sp, #0
 81011de:	60f8      	str	r0, [r7, #12]
 81011e0:	60b9      	str	r1, [r7, #8]
 81011e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 81011e4:	68fb      	ldr	r3, [r7, #12]
 81011e6:	4a07      	ldr	r2, [pc, #28]	; (8101204 <vApplicationGetIdleTaskMemory+0x2c>)
 81011e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 81011ea:	68bb      	ldr	r3, [r7, #8]
 81011ec:	4a06      	ldr	r2, [pc, #24]	; (8101208 <vApplicationGetIdleTaskMemory+0x30>)
 81011ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 81011f0:	687b      	ldr	r3, [r7, #4]
 81011f2:	2280      	movs	r2, #128	; 0x80
 81011f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 81011f6:	bf00      	nop
 81011f8:	3714      	adds	r7, #20
 81011fa:	46bd      	mov	sp, r7
 81011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101200:	4770      	bx	lr
 8101202:	bf00      	nop
 8101204:	10000228 	.word	0x10000228
 8101208:	1000027c 	.word	0x1000027c

0810120c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 810120c:	b5b0      	push	{r4, r5, r7, lr}
 810120e:	b088      	sub	sp, #32
 8101210:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of watchdog */
  osThreadDef(watchdog, watchdogTask, osPriorityNormal, 0, 128);
 8101212:	4b0b      	ldr	r3, [pc, #44]	; (8101240 <MX_FREERTOS_Init+0x34>)
 8101214:	1d3c      	adds	r4, r7, #4
 8101216:	461d      	mov	r5, r3
 8101218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810121a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810121c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8101220:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 8101224:	1d3b      	adds	r3, r7, #4
 8101226:	2100      	movs	r1, #0
 8101228:	4618      	mov	r0, r3
 810122a:	f007 fb1d 	bl	8108868 <osThreadCreate>
 810122e:	4603      	mov	r3, r0
 8101230:	4a04      	ldr	r2, [pc, #16]	; (8101244 <MX_FREERTOS_Init+0x38>)
 8101232:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	initCortexM4();
 8101234:	f00d fbd6 	bl	810e9e4 <initCortexM4>
  /* USER CODE END RTOS_THREADS */

}
 8101238:	bf00      	nop
 810123a:	3720      	adds	r7, #32
 810123c:	46bd      	mov	sp, r7
 810123e:	bdb0      	pop	{r4, r5, r7, pc}
 8101240:	0811256c 	.word	0x0811256c
 8101244:	100099ac 	.word	0x100099ac

08101248 <watchdogTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_watchdogTask */
void watchdogTask(void const * argument)
{
 8101248:	b580      	push	{r7, lr}
 810124a:	b082      	sub	sp, #8
 810124c:	af00      	add	r7, sp, #0
 810124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchdogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8101250:	2001      	movs	r0, #1
 8101252:	f007 fb55 	bl	8108900 <osDelay>
 8101256:	e7fb      	b.n	8101250 <watchdogTask+0x8>

08101258 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8101258:	b480      	push	{r7}
 810125a:	b087      	sub	sp, #28
 810125c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810125e:	4b28      	ldr	r3, [pc, #160]	; (8101300 <MX_GPIO_Init+0xa8>)
 8101260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101264:	4a26      	ldr	r2, [pc, #152]	; (8101300 <MX_GPIO_Init+0xa8>)
 8101266:	f043 0310 	orr.w	r3, r3, #16
 810126a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810126e:	4b24      	ldr	r3, [pc, #144]	; (8101300 <MX_GPIO_Init+0xa8>)
 8101270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101274:	f003 0310 	and.w	r3, r3, #16
 8101278:	617b      	str	r3, [r7, #20]
 810127a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810127c:	4b20      	ldr	r3, [pc, #128]	; (8101300 <MX_GPIO_Init+0xa8>)
 810127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101282:	4a1f      	ldr	r2, [pc, #124]	; (8101300 <MX_GPIO_Init+0xa8>)
 8101284:	f043 0301 	orr.w	r3, r3, #1
 8101288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810128c:	4b1c      	ldr	r3, [pc, #112]	; (8101300 <MX_GPIO_Init+0xa8>)
 810128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101292:	f003 0301 	and.w	r3, r3, #1
 8101296:	613b      	str	r3, [r7, #16]
 8101298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810129a:	4b19      	ldr	r3, [pc, #100]	; (8101300 <MX_GPIO_Init+0xa8>)
 810129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a0:	4a17      	ldr	r2, [pc, #92]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012a2:	f043 0302 	orr.w	r3, r3, #2
 81012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012aa:	4b15      	ldr	r3, [pc, #84]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b0:	f003 0302 	and.w	r3, r3, #2
 81012b4:	60fb      	str	r3, [r7, #12]
 81012b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81012b8:	4b11      	ldr	r3, [pc, #68]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012be:	4a10      	ldr	r2, [pc, #64]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012c0:	f043 0308 	orr.w	r3, r3, #8
 81012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012c8:	4b0d      	ldr	r3, [pc, #52]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ce:	f003 0308 	and.w	r3, r3, #8
 81012d2:	60bb      	str	r3, [r7, #8]
 81012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81012d6:	4b0a      	ldr	r3, [pc, #40]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012dc:	4a08      	ldr	r2, [pc, #32]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012de:	f043 0304 	orr.w	r3, r3, #4
 81012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012e6:	4b06      	ldr	r3, [pc, #24]	; (8101300 <MX_GPIO_Init+0xa8>)
 81012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ec:	f003 0304 	and.w	r3, r3, #4
 81012f0:	607b      	str	r3, [r7, #4]
 81012f2:	687b      	ldr	r3, [r7, #4]

}
 81012f4:	bf00      	nop
 81012f6:	371c      	adds	r7, #28
 81012f8:	46bd      	mov	sp, r7
 81012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012fe:	4770      	bx	lr
 8101300:	58024400 	.word	0x58024400

08101304 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101304:	b580      	push	{r7, lr}
 8101306:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8101308:	4b1c      	ldr	r3, [pc, #112]	; (810137c <MX_I2C1_Init+0x78>)
 810130a:	4a1d      	ldr	r2, [pc, #116]	; (8101380 <MX_I2C1_Init+0x7c>)
 810130c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 810130e:	4b1b      	ldr	r3, [pc, #108]	; (810137c <MX_I2C1_Init+0x78>)
 8101310:	4a1c      	ldr	r2, [pc, #112]	; (8101384 <MX_I2C1_Init+0x80>)
 8101312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101314:	4b19      	ldr	r3, [pc, #100]	; (810137c <MX_I2C1_Init+0x78>)
 8101316:	2200      	movs	r2, #0
 8101318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810131a:	4b18      	ldr	r3, [pc, #96]	; (810137c <MX_I2C1_Init+0x78>)
 810131c:	2201      	movs	r2, #1
 810131e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101320:	4b16      	ldr	r3, [pc, #88]	; (810137c <MX_I2C1_Init+0x78>)
 8101322:	2200      	movs	r2, #0
 8101324:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101326:	4b15      	ldr	r3, [pc, #84]	; (810137c <MX_I2C1_Init+0x78>)
 8101328:	2200      	movs	r2, #0
 810132a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810132c:	4b13      	ldr	r3, [pc, #76]	; (810137c <MX_I2C1_Init+0x78>)
 810132e:	2200      	movs	r2, #0
 8101330:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101332:	4b12      	ldr	r3, [pc, #72]	; (810137c <MX_I2C1_Init+0x78>)
 8101334:	2200      	movs	r2, #0
 8101336:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101338:	4b10      	ldr	r3, [pc, #64]	; (810137c <MX_I2C1_Init+0x78>)
 810133a:	2200      	movs	r2, #0
 810133c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810133e:	480f      	ldr	r0, [pc, #60]	; (810137c <MX_I2C1_Init+0x78>)
 8101340:	f003 fe20 	bl	8104f84 <HAL_I2C_Init>
 8101344:	4603      	mov	r3, r0
 8101346:	2b00      	cmp	r3, #0
 8101348:	d001      	beq.n	810134e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810134a:	f000 fa01 	bl	8101750 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810134e:	2100      	movs	r1, #0
 8101350:	480a      	ldr	r0, [pc, #40]	; (810137c <MX_I2C1_Init+0x78>)
 8101352:	f004 fa8b 	bl	810586c <HAL_I2CEx_ConfigAnalogFilter>
 8101356:	4603      	mov	r3, r0
 8101358:	2b00      	cmp	r3, #0
 810135a:	d001      	beq.n	8101360 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 810135c:	f000 f9f8 	bl	8101750 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101360:	2100      	movs	r1, #0
 8101362:	4806      	ldr	r0, [pc, #24]	; (810137c <MX_I2C1_Init+0x78>)
 8101364:	f004 facd 	bl	8105902 <HAL_I2CEx_ConfigDigitalFilter>
 8101368:	4603      	mov	r3, r0
 810136a:	2b00      	cmp	r3, #0
 810136c:	d001      	beq.n	8101372 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810136e:	f000 f9ef 	bl	8101750 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8101372:	2001      	movs	r0, #1
 8101374:	f004 fb12 	bl	810599c <HAL_I2CEx_EnableFastModePlus>

}
 8101378:	bf00      	nop
 810137a:	bd80      	pop	{r7, pc}
 810137c:	100099fc 	.word	0x100099fc
 8101380:	40005400 	.word	0x40005400
 8101384:	00401242 	.word	0x00401242

08101388 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8101388:	b580      	push	{r7, lr}
 810138a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 810138c:	4b1b      	ldr	r3, [pc, #108]	; (81013fc <MX_I2C2_Init+0x74>)
 810138e:	4a1c      	ldr	r2, [pc, #112]	; (8101400 <MX_I2C2_Init+0x78>)
 8101390:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8101392:	4b1a      	ldr	r3, [pc, #104]	; (81013fc <MX_I2C2_Init+0x74>)
 8101394:	4a1b      	ldr	r2, [pc, #108]	; (8101404 <MX_I2C2_Init+0x7c>)
 8101396:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8101398:	4b18      	ldr	r3, [pc, #96]	; (81013fc <MX_I2C2_Init+0x74>)
 810139a:	2200      	movs	r2, #0
 810139c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810139e:	4b17      	ldr	r3, [pc, #92]	; (81013fc <MX_I2C2_Init+0x74>)
 81013a0:	2201      	movs	r2, #1
 81013a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81013a4:	4b15      	ldr	r3, [pc, #84]	; (81013fc <MX_I2C2_Init+0x74>)
 81013a6:	2200      	movs	r2, #0
 81013a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 81013aa:	4b14      	ldr	r3, [pc, #80]	; (81013fc <MX_I2C2_Init+0x74>)
 81013ac:	2200      	movs	r2, #0
 81013ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81013b0:	4b12      	ldr	r3, [pc, #72]	; (81013fc <MX_I2C2_Init+0x74>)
 81013b2:	2200      	movs	r2, #0
 81013b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81013b6:	4b11      	ldr	r3, [pc, #68]	; (81013fc <MX_I2C2_Init+0x74>)
 81013b8:	2200      	movs	r2, #0
 81013ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81013bc:	4b0f      	ldr	r3, [pc, #60]	; (81013fc <MX_I2C2_Init+0x74>)
 81013be:	2200      	movs	r2, #0
 81013c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 81013c2:	480e      	ldr	r0, [pc, #56]	; (81013fc <MX_I2C2_Init+0x74>)
 81013c4:	f003 fdde 	bl	8104f84 <HAL_I2C_Init>
 81013c8:	4603      	mov	r3, r0
 81013ca:	2b00      	cmp	r3, #0
 81013cc:	d001      	beq.n	81013d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81013ce:	f000 f9bf 	bl	8101750 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81013d2:	2100      	movs	r1, #0
 81013d4:	4809      	ldr	r0, [pc, #36]	; (81013fc <MX_I2C2_Init+0x74>)
 81013d6:	f004 fa49 	bl	810586c <HAL_I2CEx_ConfigAnalogFilter>
 81013da:	4603      	mov	r3, r0
 81013dc:	2b00      	cmp	r3, #0
 81013de:	d001      	beq.n	81013e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 81013e0:	f000 f9b6 	bl	8101750 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81013e4:	2100      	movs	r1, #0
 81013e6:	4805      	ldr	r0, [pc, #20]	; (81013fc <MX_I2C2_Init+0x74>)
 81013e8:	f004 fa8b 	bl	8105902 <HAL_I2CEx_ConfigDigitalFilter>
 81013ec:	4603      	mov	r3, r0
 81013ee:	2b00      	cmp	r3, #0
 81013f0:	d001      	beq.n	81013f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81013f2:	f000 f9ad 	bl	8101750 <Error_Handler>
  }

}
 81013f6:	bf00      	nop
 81013f8:	bd80      	pop	{r7, pc}
 81013fa:	bf00      	nop
 81013fc:	10009a48 	.word	0x10009a48
 8101400:	40005800 	.word	0x40005800
 8101404:	10c0ecff 	.word	0x10c0ecff

08101408 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8101408:	b580      	push	{r7, lr}
 810140a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 810140c:	4b1b      	ldr	r3, [pc, #108]	; (810147c <MX_I2C3_Init+0x74>)
 810140e:	4a1c      	ldr	r2, [pc, #112]	; (8101480 <MX_I2C3_Init+0x78>)
 8101410:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 8101412:	4b1a      	ldr	r3, [pc, #104]	; (810147c <MX_I2C3_Init+0x74>)
 8101414:	4a1b      	ldr	r2, [pc, #108]	; (8101484 <MX_I2C3_Init+0x7c>)
 8101416:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8101418:	4b18      	ldr	r3, [pc, #96]	; (810147c <MX_I2C3_Init+0x74>)
 810141a:	2200      	movs	r2, #0
 810141c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810141e:	4b17      	ldr	r3, [pc, #92]	; (810147c <MX_I2C3_Init+0x74>)
 8101420:	2201      	movs	r2, #1
 8101422:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101424:	4b15      	ldr	r3, [pc, #84]	; (810147c <MX_I2C3_Init+0x74>)
 8101426:	2200      	movs	r2, #0
 8101428:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 810142a:	4b14      	ldr	r3, [pc, #80]	; (810147c <MX_I2C3_Init+0x74>)
 810142c:	2200      	movs	r2, #0
 810142e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101430:	4b12      	ldr	r3, [pc, #72]	; (810147c <MX_I2C3_Init+0x74>)
 8101432:	2200      	movs	r2, #0
 8101434:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101436:	4b11      	ldr	r3, [pc, #68]	; (810147c <MX_I2C3_Init+0x74>)
 8101438:	2200      	movs	r2, #0
 810143a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 810143c:	4b0f      	ldr	r3, [pc, #60]	; (810147c <MX_I2C3_Init+0x74>)
 810143e:	2200      	movs	r2, #0
 8101440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8101442:	480e      	ldr	r0, [pc, #56]	; (810147c <MX_I2C3_Init+0x74>)
 8101444:	f003 fd9e 	bl	8104f84 <HAL_I2C_Init>
 8101448:	4603      	mov	r3, r0
 810144a:	2b00      	cmp	r3, #0
 810144c:	d001      	beq.n	8101452 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 810144e:	f000 f97f 	bl	8101750 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101452:	2100      	movs	r1, #0
 8101454:	4809      	ldr	r0, [pc, #36]	; (810147c <MX_I2C3_Init+0x74>)
 8101456:	f004 fa09 	bl	810586c <HAL_I2CEx_ConfigAnalogFilter>
 810145a:	4603      	mov	r3, r0
 810145c:	2b00      	cmp	r3, #0
 810145e:	d001      	beq.n	8101464 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8101460:	f000 f976 	bl	8101750 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8101464:	2100      	movs	r1, #0
 8101466:	4805      	ldr	r0, [pc, #20]	; (810147c <MX_I2C3_Init+0x74>)
 8101468:	f004 fa4b 	bl	8105902 <HAL_I2CEx_ConfigDigitalFilter>
 810146c:	4603      	mov	r3, r0
 810146e:	2b00      	cmp	r3, #0
 8101470:	d001      	beq.n	8101476 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8101472:	f000 f96d 	bl	8101750 <Error_Handler>
  }

}
 8101476:	bf00      	nop
 8101478:	bd80      	pop	{r7, pc}
 810147a:	bf00      	nop
 810147c:	100099b0 	.word	0x100099b0
 8101480:	40005c00 	.word	0x40005c00
 8101484:	10c0ecff 	.word	0x10c0ecff

08101488 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101488:	b580      	push	{r7, lr}
 810148a:	b08e      	sub	sp, #56	; 0x38
 810148c:	af00      	add	r7, sp, #0
 810148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101494:	2200      	movs	r2, #0
 8101496:	601a      	str	r2, [r3, #0]
 8101498:	605a      	str	r2, [r3, #4]
 810149a:	609a      	str	r2, [r3, #8]
 810149c:	60da      	str	r2, [r3, #12]
 810149e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 81014a0:	687b      	ldr	r3, [r7, #4]
 81014a2:	681b      	ldr	r3, [r3, #0]
 81014a4:	4a5f      	ldr	r2, [pc, #380]	; (8101624 <HAL_I2C_MspInit+0x19c>)
 81014a6:	4293      	cmp	r3, r2
 81014a8:	d12e      	bne.n	8101508 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81014aa:	4b5f      	ldr	r3, [pc, #380]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014b0:	4a5d      	ldr	r2, [pc, #372]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81014b2:	f043 0302 	orr.w	r3, r3, #2
 81014b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014ba:	4b5b      	ldr	r3, [pc, #364]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014c0:	f003 0302 	and.w	r3, r3, #2
 81014c4:	623b      	str	r3, [r7, #32]
 81014c6:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81014c8:	23c0      	movs	r3, #192	; 0xc0
 81014ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81014cc:	2312      	movs	r3, #18
 81014ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014d0:	2300      	movs	r3, #0
 81014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014d4:	2300      	movs	r3, #0
 81014d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81014d8:	2304      	movs	r3, #4
 81014da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81014e0:	4619      	mov	r1, r3
 81014e2:	4852      	ldr	r0, [pc, #328]	; (810162c <HAL_I2C_MspInit+0x1a4>)
 81014e4:	f003 fb0c 	bl	8104b00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81014e8:	4b4f      	ldr	r3, [pc, #316]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81014ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81014ee:	4a4e      	ldr	r2, [pc, #312]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81014f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81014f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81014f8:	4b4b      	ldr	r3, [pc, #300]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81014fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81014fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101502:	61fb      	str	r3, [r7, #28]
 8101504:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8101506:	e088      	b.n	810161a <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C2)
 8101508:	687b      	ldr	r3, [r7, #4]
 810150a:	681b      	ldr	r3, [r3, #0]
 810150c:	4a48      	ldr	r2, [pc, #288]	; (8101630 <HAL_I2C_MspInit+0x1a8>)
 810150e:	4293      	cmp	r3, r2
 8101510:	d12f      	bne.n	8101572 <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101512:	4b45      	ldr	r3, [pc, #276]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 8101514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101518:	4a43      	ldr	r2, [pc, #268]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 810151a:	f043 0302 	orr.w	r3, r3, #2
 810151e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101522:	4b41      	ldr	r3, [pc, #260]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 8101524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101528:	f003 0302 	and.w	r3, r3, #2
 810152c:	61bb      	str	r3, [r7, #24]
 810152e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101530:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101536:	2312      	movs	r3, #18
 8101538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810153a:	2300      	movs	r3, #0
 810153c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810153e:	2300      	movs	r3, #0
 8101540:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8101542:	2304      	movs	r3, #4
 8101544:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810154a:	4619      	mov	r1, r3
 810154c:	4837      	ldr	r0, [pc, #220]	; (810162c <HAL_I2C_MspInit+0x1a4>)
 810154e:	f003 fad7 	bl	8104b00 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8101552:	4b35      	ldr	r3, [pc, #212]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 8101554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101558:	4a33      	ldr	r2, [pc, #204]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 810155a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810155e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101562:	4b31      	ldr	r3, [pc, #196]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 8101564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810156c:	617b      	str	r3, [r7, #20]
 810156e:	697b      	ldr	r3, [r7, #20]
}
 8101570:	e053      	b.n	810161a <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8101572:	687b      	ldr	r3, [r7, #4]
 8101574:	681b      	ldr	r3, [r3, #0]
 8101576:	4a2f      	ldr	r2, [pc, #188]	; (8101634 <HAL_I2C_MspInit+0x1ac>)
 8101578:	4293      	cmp	r3, r2
 810157a:	d14e      	bne.n	810161a <HAL_I2C_MspInit+0x192>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810157c:	4b2a      	ldr	r3, [pc, #168]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 810157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101582:	4a29      	ldr	r2, [pc, #164]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 8101584:	f043 0304 	orr.w	r3, r3, #4
 8101588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810158c:	4b26      	ldr	r3, [pc, #152]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 810158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101592:	f003 0304 	and.w	r3, r3, #4
 8101596:	613b      	str	r3, [r7, #16]
 8101598:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810159a:	4b23      	ldr	r3, [pc, #140]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 810159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015a0:	4a21      	ldr	r2, [pc, #132]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81015a2:	f043 0301 	orr.w	r3, r3, #1
 81015a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015aa:	4b1f      	ldr	r3, [pc, #124]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015b0:	f003 0301 	and.w	r3, r3, #1
 81015b4:	60fb      	str	r3, [r7, #12]
 81015b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81015b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 81015bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015be:	2312      	movs	r3, #18
 81015c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015c2:	2300      	movs	r3, #0
 81015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015c6:	2300      	movs	r3, #0
 81015c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 81015ca:	2304      	movs	r3, #4
 81015cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015d2:	4619      	mov	r1, r3
 81015d4:	4818      	ldr	r0, [pc, #96]	; (8101638 <HAL_I2C_MspInit+0x1b0>)
 81015d6:	f003 fa93 	bl	8104b00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 81015da:	f44f 7380 	mov.w	r3, #256	; 0x100
 81015de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015e0:	2312      	movs	r3, #18
 81015e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015e4:	2300      	movs	r3, #0
 81015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015e8:	2300      	movs	r3, #0
 81015ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 81015ec:	2304      	movs	r3, #4
 81015ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015f4:	4619      	mov	r1, r3
 81015f6:	4811      	ldr	r0, [pc, #68]	; (810163c <HAL_I2C_MspInit+0x1b4>)
 81015f8:	f003 fa82 	bl	8104b00 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 81015fc:	4b0a      	ldr	r3, [pc, #40]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 81015fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101602:	4a09      	ldr	r2, [pc, #36]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 8101604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101608:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810160c:	4b06      	ldr	r3, [pc, #24]	; (8101628 <HAL_I2C_MspInit+0x1a0>)
 810160e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101616:	60bb      	str	r3, [r7, #8]
 8101618:	68bb      	ldr	r3, [r7, #8]
}
 810161a:	bf00      	nop
 810161c:	3738      	adds	r7, #56	; 0x38
 810161e:	46bd      	mov	sp, r7
 8101620:	bd80      	pop	{r7, pc}
 8101622:	bf00      	nop
 8101624:	40005400 	.word	0x40005400
 8101628:	58024400 	.word	0x58024400
 810162c:	58020400 	.word	0x58020400
 8101630:	40005800 	.word	0x40005800
 8101634:	40005c00 	.word	0x40005c00
 8101638:	58020800 	.word	0x58020800
 810163c:	58020000 	.word	0x58020000

08101640 <MX_IWDG2_Init>:

IWDG_HandleTypeDef hiwdg2;

/* IWDG2 init function */
void MX_IWDG2_Init(void)
{
 8101640:	b580      	push	{r7, lr}
 8101642:	af00      	add	r7, sp, #0

  hiwdg2.Instance = IWDG2;
 8101644:	4b0b      	ldr	r3, [pc, #44]	; (8101674 <MX_IWDG2_Init+0x34>)
 8101646:	4a0c      	ldr	r2, [pc, #48]	; (8101678 <MX_IWDG2_Init+0x38>)
 8101648:	601a      	str	r2, [r3, #0]
  hiwdg2.Init.Prescaler = IWDG_PRESCALER_4;
 810164a:	4b0a      	ldr	r3, [pc, #40]	; (8101674 <MX_IWDG2_Init+0x34>)
 810164c:	2200      	movs	r2, #0
 810164e:	605a      	str	r2, [r3, #4]
  hiwdg2.Init.Window = 4095;
 8101650:	4b08      	ldr	r3, [pc, #32]	; (8101674 <MX_IWDG2_Init+0x34>)
 8101652:	f640 72ff 	movw	r2, #4095	; 0xfff
 8101656:	60da      	str	r2, [r3, #12]
  hiwdg2.Init.Reload = 4095;
 8101658:	4b06      	ldr	r3, [pc, #24]	; (8101674 <MX_IWDG2_Init+0x34>)
 810165a:	f640 72ff 	movw	r2, #4095	; 0xfff
 810165e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg2) != HAL_OK)
 8101660:	4804      	ldr	r0, [pc, #16]	; (8101674 <MX_IWDG2_Init+0x34>)
 8101662:	f004 f9bf 	bl	81059e4 <HAL_IWDG_Init>
 8101666:	4603      	mov	r3, r0
 8101668:	2b00      	cmp	r3, #0
 810166a:	d001      	beq.n	8101670 <MX_IWDG2_Init+0x30>
  {
    Error_Handler();
 810166c:	f000 f870 	bl	8101750 <Error_Handler>
  }

}
 8101670:	bf00      	nop
 8101672:	bd80      	pop	{r7, pc}
 8101674:	10009a94 	.word	0x10009a94
 8101678:	58004c00 	.word	0x58004c00

0810167c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810167c:	b580      	push	{r7, lr}
 810167e:	b082      	sub	sp, #8
 8101680:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101682:	4b27      	ldr	r3, [pc, #156]	; (8101720 <main+0xa4>)
 8101684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101688:	4a25      	ldr	r2, [pc, #148]	; (8101720 <main+0xa4>)
 810168a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810168e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101692:	4b23      	ldr	r3, [pc, #140]	; (8101720 <main+0xa4>)
 8101694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810169c:	607b      	str	r3, [r7, #4]
 810169e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016a0:	2001      	movs	r0, #1
 81016a2:	f003 fc5d 	bl	8104f60 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81016a6:	f004 fa6d 	bl	8105b84 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81016aa:	2201      	movs	r2, #1
 81016ac:	2102      	movs	r1, #2
 81016ae:	2000      	movs	r0, #0
 81016b0:	f004 f9ee 	bl	8105a90 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016b4:	4b1b      	ldr	r3, [pc, #108]	; (8101724 <main+0xa8>)
 81016b6:	681b      	ldr	r3, [r3, #0]
 81016b8:	091b      	lsrs	r3, r3, #4
 81016ba:	f003 030f 	and.w	r3, r3, #15
 81016be:	2b07      	cmp	r3, #7
 81016c0:	d108      	bne.n	81016d4 <main+0x58>
 81016c2:	4b19      	ldr	r3, [pc, #100]	; (8101728 <main+0xac>)
 81016c4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81016c8:	4a17      	ldr	r2, [pc, #92]	; (8101728 <main+0xac>)
 81016ca:	f043 0301 	orr.w	r3, r3, #1
 81016ce:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81016d2:	e007      	b.n	81016e4 <main+0x68>
 81016d4:	4b14      	ldr	r3, [pc, #80]	; (8101728 <main+0xac>)
 81016d6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81016da:	4a13      	ldr	r2, [pc, #76]	; (8101728 <main+0xac>)
 81016dc:	f043 0301 	orr.w	r3, r3, #1
 81016e0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81016e4:	f000 fd64 	bl	81021b0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81016e8:	f7ff fdb6 	bl	8101258 <MX_GPIO_Init>
  MX_DMA_Init();
 81016ec:	f7ff fd2c 	bl	8101148 <MX_DMA_Init>
  MX_IWDG2_Init();
 81016f0:	f7ff ffa6 	bl	8101640 <MX_IWDG2_Init>
  MX_FATFS_Init();
 81016f4:	f006 ffd4 	bl	81086a0 <MX_FATFS_Init>
  MX_I2C1_Init();
 81016f8:	f7ff fe04 	bl	8101304 <MX_I2C1_Init>
  MX_SPI1_Init();
 81016fc:	f000 f82e 	bl	810175c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8101700:	f000 fc30 	bl	8101f64 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8101704:	f7ff fe40 	bl	8101388 <MX_I2C2_Init>
  MX_I2C3_Init();
 8101708:	f7ff fe7e 	bl	8101408 <MX_I2C3_Init>
  MX_SPI3_Init();
 810170c:	f000 f87c 	bl	8101808 <MX_SPI3_Init>
  MX_SPI4_Init();
 8101710:	f000 f8d0 	bl	81018b4 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8101714:	f7ff fd7a 	bl	810120c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8101718:	f007 f89f 	bl	810885a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810171c:	e7fe      	b.n	810171c <main+0xa0>
 810171e:	bf00      	nop
 8101720:	58024400 	.word	0x58024400
 8101724:	e000ed00 	.word	0xe000ed00
 8101728:	58026400 	.word	0x58026400

0810172c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 810172c:	b580      	push	{r7, lr}
 810172e:	b082      	sub	sp, #8
 8101730:	af00      	add	r7, sp, #0
 8101732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8101734:	687b      	ldr	r3, [r7, #4]
 8101736:	681b      	ldr	r3, [r3, #0]
 8101738:	4a04      	ldr	r2, [pc, #16]	; (810174c <HAL_TIM_PeriodElapsedCallback+0x20>)
 810173a:	4293      	cmp	r3, r2
 810173c:	d101      	bne.n	8101742 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810173e:	f000 fd95 	bl	810226c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101742:	bf00      	nop
 8101744:	3708      	adds	r7, #8
 8101746:	46bd      	mov	sp, r7
 8101748:	bd80      	pop	{r7, pc}
 810174a:	bf00      	nop
 810174c:	40010400 	.word	0x40010400

08101750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101750:	b480      	push	{r7}
 8101752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101754:	b672      	cpsid	i
}
 8101756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101758:	e7fe      	b.n	8101758 <Error_Handler+0x8>
	...

0810175c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 810175c:	b580      	push	{r7, lr}
 810175e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8101760:	4b27      	ldr	r3, [pc, #156]	; (8101800 <MX_SPI1_Init+0xa4>)
 8101762:	4a28      	ldr	r2, [pc, #160]	; (8101804 <MX_SPI1_Init+0xa8>)
 8101764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8101766:	4b26      	ldr	r3, [pc, #152]	; (8101800 <MX_SPI1_Init+0xa4>)
 8101768:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 810176c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 810176e:	4b24      	ldr	r3, [pc, #144]	; (8101800 <MX_SPI1_Init+0xa4>)
 8101770:	2200      	movs	r2, #0
 8101772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8101774:	4b22      	ldr	r3, [pc, #136]	; (8101800 <MX_SPI1_Init+0xa4>)
 8101776:	2203      	movs	r2, #3
 8101778:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810177a:	4b21      	ldr	r3, [pc, #132]	; (8101800 <MX_SPI1_Init+0xa4>)
 810177c:	2200      	movs	r2, #0
 810177e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101780:	4b1f      	ldr	r3, [pc, #124]	; (8101800 <MX_SPI1_Init+0xa4>)
 8101782:	2200      	movs	r2, #0
 8101784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8101786:	4b1e      	ldr	r3, [pc, #120]	; (8101800 <MX_SPI1_Init+0xa4>)
 8101788:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810178c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 810178e:	4b1c      	ldr	r3, [pc, #112]	; (8101800 <MX_SPI1_Init+0xa4>)
 8101790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101794:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101796:	4b1a      	ldr	r3, [pc, #104]	; (8101800 <MX_SPI1_Init+0xa4>)
 8101798:	2200      	movs	r2, #0
 810179a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 810179c:	4b18      	ldr	r3, [pc, #96]	; (8101800 <MX_SPI1_Init+0xa4>)
 810179e:	2200      	movs	r2, #0
 81017a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81017a2:	4b17      	ldr	r3, [pc, #92]	; (8101800 <MX_SPI1_Init+0xa4>)
 81017a4:	2200      	movs	r2, #0
 81017a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 81017a8:	4b15      	ldr	r3, [pc, #84]	; (8101800 <MX_SPI1_Init+0xa4>)
 81017aa:	2200      	movs	r2, #0
 81017ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81017ae:	4b14      	ldr	r3, [pc, #80]	; (8101800 <MX_SPI1_Init+0xa4>)
 81017b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81017b4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81017b6:	4b12      	ldr	r3, [pc, #72]	; (8101800 <MX_SPI1_Init+0xa4>)
 81017b8:	2200      	movs	r2, #0
 81017ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81017bc:	4b10      	ldr	r3, [pc, #64]	; (8101800 <MX_SPI1_Init+0xa4>)
 81017be:	2200      	movs	r2, #0
 81017c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81017c2:	4b0f      	ldr	r3, [pc, #60]	; (8101800 <MX_SPI1_Init+0xa4>)
 81017c4:	2200      	movs	r2, #0
 81017c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81017c8:	4b0d      	ldr	r3, [pc, #52]	; (8101800 <MX_SPI1_Init+0xa4>)
 81017ca:	2200      	movs	r2, #0
 81017cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81017ce:	4b0c      	ldr	r3, [pc, #48]	; (8101800 <MX_SPI1_Init+0xa4>)
 81017d0:	2200      	movs	r2, #0
 81017d2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81017d4:	4b0a      	ldr	r3, [pc, #40]	; (8101800 <MX_SPI1_Init+0xa4>)
 81017d6:	2200      	movs	r2, #0
 81017d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81017da:	4b09      	ldr	r3, [pc, #36]	; (8101800 <MX_SPI1_Init+0xa4>)
 81017dc:	2200      	movs	r2, #0
 81017de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81017e0:	4b07      	ldr	r3, [pc, #28]	; (8101800 <MX_SPI1_Init+0xa4>)
 81017e2:	2200      	movs	r2, #0
 81017e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81017e6:	4b06      	ldr	r3, [pc, #24]	; (8101800 <MX_SPI1_Init+0xa4>)
 81017e8:	2200      	movs	r2, #0
 81017ea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81017ec:	4804      	ldr	r0, [pc, #16]	; (8101800 <MX_SPI1_Init+0xa4>)
 81017ee:	f004 feaf 	bl	8106550 <HAL_SPI_Init>
 81017f2:	4603      	mov	r3, r0
 81017f4:	2b00      	cmp	r3, #0
 81017f6:	d001      	beq.n	81017fc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 81017f8:	f7ff ffaa 	bl	8101750 <Error_Handler>
  }

}
 81017fc:	bf00      	nop
 81017fe:	bd80      	pop	{r7, pc}
 8101800:	10009bb4 	.word	0x10009bb4
 8101804:	40013000 	.word	0x40013000

08101808 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8101808:	b580      	push	{r7, lr}
 810180a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 810180c:	4b27      	ldr	r3, [pc, #156]	; (81018ac <MX_SPI3_Init+0xa4>)
 810180e:	4a28      	ldr	r2, [pc, #160]	; (81018b0 <MX_SPI3_Init+0xa8>)
 8101810:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8101812:	4b26      	ldr	r3, [pc, #152]	; (81018ac <MX_SPI3_Init+0xa4>)
 8101814:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101818:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 810181a:	4b24      	ldr	r3, [pc, #144]	; (81018ac <MX_SPI3_Init+0xa4>)
 810181c:	2200      	movs	r2, #0
 810181e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8101820:	4b22      	ldr	r3, [pc, #136]	; (81018ac <MX_SPI3_Init+0xa4>)
 8101822:	2203      	movs	r2, #3
 8101824:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101826:	4b21      	ldr	r3, [pc, #132]	; (81018ac <MX_SPI3_Init+0xa4>)
 8101828:	2200      	movs	r2, #0
 810182a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 810182c:	4b1f      	ldr	r3, [pc, #124]	; (81018ac <MX_SPI3_Init+0xa4>)
 810182e:	2200      	movs	r2, #0
 8101830:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8101832:	4b1e      	ldr	r3, [pc, #120]	; (81018ac <MX_SPI3_Init+0xa4>)
 8101834:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101838:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 810183a:	4b1c      	ldr	r3, [pc, #112]	; (81018ac <MX_SPI3_Init+0xa4>)
 810183c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8101840:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101842:	4b1a      	ldr	r3, [pc, #104]	; (81018ac <MX_SPI3_Init+0xa4>)
 8101844:	2200      	movs	r2, #0
 8101846:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8101848:	4b18      	ldr	r3, [pc, #96]	; (81018ac <MX_SPI3_Init+0xa4>)
 810184a:	2200      	movs	r2, #0
 810184c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810184e:	4b17      	ldr	r3, [pc, #92]	; (81018ac <MX_SPI3_Init+0xa4>)
 8101850:	2200      	movs	r2, #0
 8101852:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8101854:	4b15      	ldr	r3, [pc, #84]	; (81018ac <MX_SPI3_Init+0xa4>)
 8101856:	2200      	movs	r2, #0
 8101858:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810185a:	4b14      	ldr	r3, [pc, #80]	; (81018ac <MX_SPI3_Init+0xa4>)
 810185c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101860:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101862:	4b12      	ldr	r3, [pc, #72]	; (81018ac <MX_SPI3_Init+0xa4>)
 8101864:	2200      	movs	r2, #0
 8101866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101868:	4b10      	ldr	r3, [pc, #64]	; (81018ac <MX_SPI3_Init+0xa4>)
 810186a:	2200      	movs	r2, #0
 810186c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810186e:	4b0f      	ldr	r3, [pc, #60]	; (81018ac <MX_SPI3_Init+0xa4>)
 8101870:	2200      	movs	r2, #0
 8101872:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101874:	4b0d      	ldr	r3, [pc, #52]	; (81018ac <MX_SPI3_Init+0xa4>)
 8101876:	2200      	movs	r2, #0
 8101878:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 810187a:	4b0c      	ldr	r3, [pc, #48]	; (81018ac <MX_SPI3_Init+0xa4>)
 810187c:	2200      	movs	r2, #0
 810187e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101880:	4b0a      	ldr	r3, [pc, #40]	; (81018ac <MX_SPI3_Init+0xa4>)
 8101882:	2200      	movs	r2, #0
 8101884:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101886:	4b09      	ldr	r3, [pc, #36]	; (81018ac <MX_SPI3_Init+0xa4>)
 8101888:	2200      	movs	r2, #0
 810188a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810188c:	4b07      	ldr	r3, [pc, #28]	; (81018ac <MX_SPI3_Init+0xa4>)
 810188e:	2200      	movs	r2, #0
 8101890:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101892:	4b06      	ldr	r3, [pc, #24]	; (81018ac <MX_SPI3_Init+0xa4>)
 8101894:	2200      	movs	r2, #0
 8101896:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8101898:	4804      	ldr	r0, [pc, #16]	; (81018ac <MX_SPI3_Init+0xa4>)
 810189a:	f004 fe59 	bl	8106550 <HAL_SPI_Init>
 810189e:	4603      	mov	r3, r0
 81018a0:	2b00      	cmp	r3, #0
 81018a2:	d001      	beq.n	81018a8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 81018a4:	f7ff ff54 	bl	8101750 <Error_Handler>
  }

}
 81018a8:	bf00      	nop
 81018aa:	bd80      	pop	{r7, pc}
 81018ac:	10009aa4 	.word	0x10009aa4
 81018b0:	40003c00 	.word	0x40003c00

081018b4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 81018b4:	b580      	push	{r7, lr}
 81018b6:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 81018b8:	4b27      	ldr	r3, [pc, #156]	; (8101958 <MX_SPI4_Init+0xa4>)
 81018ba:	4a28      	ldr	r2, [pc, #160]	; (810195c <MX_SPI4_Init+0xa8>)
 81018bc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 81018be:	4b26      	ldr	r3, [pc, #152]	; (8101958 <MX_SPI4_Init+0xa4>)
 81018c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81018c4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 81018c6:	4b24      	ldr	r3, [pc, #144]	; (8101958 <MX_SPI4_Init+0xa4>)
 81018c8:	2200      	movs	r2, #0
 81018ca:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 81018cc:	4b22      	ldr	r3, [pc, #136]	; (8101958 <MX_SPI4_Init+0xa4>)
 81018ce:	2203      	movs	r2, #3
 81018d0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 81018d2:	4b21      	ldr	r3, [pc, #132]	; (8101958 <MX_SPI4_Init+0xa4>)
 81018d4:	2200      	movs	r2, #0
 81018d6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 81018d8:	4b1f      	ldr	r3, [pc, #124]	; (8101958 <MX_SPI4_Init+0xa4>)
 81018da:	2200      	movs	r2, #0
 81018dc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 81018de:	4b1e      	ldr	r3, [pc, #120]	; (8101958 <MX_SPI4_Init+0xa4>)
 81018e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81018e4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 81018e6:	4b1c      	ldr	r3, [pc, #112]	; (8101958 <MX_SPI4_Init+0xa4>)
 81018e8:	2200      	movs	r2, #0
 81018ea:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81018ec:	4b1a      	ldr	r3, [pc, #104]	; (8101958 <MX_SPI4_Init+0xa4>)
 81018ee:	2200      	movs	r2, #0
 81018f0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 81018f2:	4b19      	ldr	r3, [pc, #100]	; (8101958 <MX_SPI4_Init+0xa4>)
 81018f4:	2200      	movs	r2, #0
 81018f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81018f8:	4b17      	ldr	r3, [pc, #92]	; (8101958 <MX_SPI4_Init+0xa4>)
 81018fa:	2200      	movs	r2, #0
 81018fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 81018fe:	4b16      	ldr	r3, [pc, #88]	; (8101958 <MX_SPI4_Init+0xa4>)
 8101900:	2200      	movs	r2, #0
 8101902:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101904:	4b14      	ldr	r3, [pc, #80]	; (8101958 <MX_SPI4_Init+0xa4>)
 8101906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810190a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810190c:	4b12      	ldr	r3, [pc, #72]	; (8101958 <MX_SPI4_Init+0xa4>)
 810190e:	2200      	movs	r2, #0
 8101910:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101912:	4b11      	ldr	r3, [pc, #68]	; (8101958 <MX_SPI4_Init+0xa4>)
 8101914:	2200      	movs	r2, #0
 8101916:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101918:	4b0f      	ldr	r3, [pc, #60]	; (8101958 <MX_SPI4_Init+0xa4>)
 810191a:	2200      	movs	r2, #0
 810191c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810191e:	4b0e      	ldr	r3, [pc, #56]	; (8101958 <MX_SPI4_Init+0xa4>)
 8101920:	2200      	movs	r2, #0
 8101922:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101924:	4b0c      	ldr	r3, [pc, #48]	; (8101958 <MX_SPI4_Init+0xa4>)
 8101926:	2200      	movs	r2, #0
 8101928:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810192a:	4b0b      	ldr	r3, [pc, #44]	; (8101958 <MX_SPI4_Init+0xa4>)
 810192c:	2200      	movs	r2, #0
 810192e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101930:	4b09      	ldr	r3, [pc, #36]	; (8101958 <MX_SPI4_Init+0xa4>)
 8101932:	2200      	movs	r2, #0
 8101934:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101936:	4b08      	ldr	r3, [pc, #32]	; (8101958 <MX_SPI4_Init+0xa4>)
 8101938:	2200      	movs	r2, #0
 810193a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810193c:	4b06      	ldr	r3, [pc, #24]	; (8101958 <MX_SPI4_Init+0xa4>)
 810193e:	2200      	movs	r2, #0
 8101940:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8101942:	4805      	ldr	r0, [pc, #20]	; (8101958 <MX_SPI4_Init+0xa4>)
 8101944:	f004 fe04 	bl	8106550 <HAL_SPI_Init>
 8101948:	4603      	mov	r3, r0
 810194a:	2b00      	cmp	r3, #0
 810194c:	d001      	beq.n	8101952 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 810194e:	f7ff feff 	bl	8101750 <Error_Handler>
  }

}
 8101952:	bf00      	nop
 8101954:	bd80      	pop	{r7, pc}
 8101956:	bf00      	nop
 8101958:	10009b2c 	.word	0x10009b2c
 810195c:	40013400 	.word	0x40013400

08101960 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101960:	b580      	push	{r7, lr}
 8101962:	b090      	sub	sp, #64	; 0x40
 8101964:	af00      	add	r7, sp, #0
 8101966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 810196c:	2200      	movs	r2, #0
 810196e:	601a      	str	r2, [r3, #0]
 8101970:	605a      	str	r2, [r3, #4]
 8101972:	609a      	str	r2, [r3, #8]
 8101974:	60da      	str	r2, [r3, #12]
 8101976:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8101978:	687b      	ldr	r3, [r7, #4]
 810197a:	681b      	ldr	r3, [r3, #0]
 810197c:	4aa0      	ldr	r2, [pc, #640]	; (8101c00 <HAL_SPI_MspInit+0x2a0>)
 810197e:	4293      	cmp	r3, r2
 8101980:	f040 80b2 	bne.w	8101ae8 <HAL_SPI_MspInit+0x188>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101984:	4b9f      	ldr	r3, [pc, #636]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101986:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810198a:	4a9e      	ldr	r2, [pc, #632]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 810198c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101990:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101994:	4b9b      	ldr	r3, [pc, #620]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810199a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810199e:	62bb      	str	r3, [r7, #40]	; 0x28
 81019a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81019a2:	4b98      	ldr	r3, [pc, #608]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 81019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019a8:	4a96      	ldr	r2, [pc, #600]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 81019aa:	f043 0301 	orr.w	r3, r3, #1
 81019ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019b2:	4b94      	ldr	r3, [pc, #592]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 81019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019b8:	f003 0301 	and.w	r3, r3, #1
 81019bc:	627b      	str	r3, [r7, #36]	; 0x24
 81019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81019c0:	4b90      	ldr	r3, [pc, #576]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 81019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019c6:	4a8f      	ldr	r2, [pc, #572]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 81019c8:	f043 0308 	orr.w	r3, r3, #8
 81019cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019d0:	4b8c      	ldr	r3, [pc, #560]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 81019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019d6:	f003 0308 	and.w	r3, r3, #8
 81019da:	623b      	str	r3, [r7, #32]
 81019dc:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 81019de:	2360      	movs	r3, #96	; 0x60
 81019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019e2:	2302      	movs	r3, #2
 81019e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019e6:	2300      	movs	r3, #0
 81019e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019ea:	2300      	movs	r3, #0
 81019ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81019ee:	2305      	movs	r3, #5
 81019f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81019f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81019f6:	4619      	mov	r1, r3
 81019f8:	4883      	ldr	r0, [pc, #524]	; (8101c08 <HAL_SPI_MspInit+0x2a8>)
 81019fa:	f003 f881 	bl	8104b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 81019fe:	2380      	movs	r3, #128	; 0x80
 8101a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a02:	2302      	movs	r3, #2
 8101a04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a06:	2300      	movs	r3, #0
 8101a08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a0a:	2300      	movs	r3, #0
 8101a0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101a0e:	2305      	movs	r3, #5
 8101a10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101a16:	4619      	mov	r1, r3
 8101a18:	487c      	ldr	r0, [pc, #496]	; (8101c0c <HAL_SPI_MspInit+0x2ac>)
 8101a1a:	f003 f871 	bl	8104b00 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101a1e:	4b7c      	ldr	r3, [pc, #496]	; (8101c10 <HAL_SPI_MspInit+0x2b0>)
 8101a20:	4a7c      	ldr	r2, [pc, #496]	; (8101c14 <HAL_SPI_MspInit+0x2b4>)
 8101a22:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101a24:	4b7a      	ldr	r3, [pc, #488]	; (8101c10 <HAL_SPI_MspInit+0x2b0>)
 8101a26:	2225      	movs	r2, #37	; 0x25
 8101a28:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101a2a:	4b79      	ldr	r3, [pc, #484]	; (8101c10 <HAL_SPI_MspInit+0x2b0>)
 8101a2c:	2200      	movs	r2, #0
 8101a2e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101a30:	4b77      	ldr	r3, [pc, #476]	; (8101c10 <HAL_SPI_MspInit+0x2b0>)
 8101a32:	2200      	movs	r2, #0
 8101a34:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101a36:	4b76      	ldr	r3, [pc, #472]	; (8101c10 <HAL_SPI_MspInit+0x2b0>)
 8101a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101a3c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101a3e:	4b74      	ldr	r3, [pc, #464]	; (8101c10 <HAL_SPI_MspInit+0x2b0>)
 8101a40:	2200      	movs	r2, #0
 8101a42:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101a44:	4b72      	ldr	r3, [pc, #456]	; (8101c10 <HAL_SPI_MspInit+0x2b0>)
 8101a46:	2200      	movs	r2, #0
 8101a48:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8101a4a:	4b71      	ldr	r3, [pc, #452]	; (8101c10 <HAL_SPI_MspInit+0x2b0>)
 8101a4c:	2200      	movs	r2, #0
 8101a4e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101a50:	4b6f      	ldr	r3, [pc, #444]	; (8101c10 <HAL_SPI_MspInit+0x2b0>)
 8101a52:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101a56:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101a58:	4b6d      	ldr	r3, [pc, #436]	; (8101c10 <HAL_SPI_MspInit+0x2b0>)
 8101a5a:	2200      	movs	r2, #0
 8101a5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8101a5e:	486c      	ldr	r0, [pc, #432]	; (8101c10 <HAL_SPI_MspInit+0x2b0>)
 8101a60:	f000 fd34 	bl	81024cc <HAL_DMA_Init>
 8101a64:	4603      	mov	r3, r0
 8101a66:	2b00      	cmp	r3, #0
 8101a68:	d001      	beq.n	8101a6e <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8101a6a:	f7ff fe71 	bl	8101750 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8101a6e:	687b      	ldr	r3, [r7, #4]
 8101a70:	4a67      	ldr	r2, [pc, #412]	; (8101c10 <HAL_SPI_MspInit+0x2b0>)
 8101a72:	67da      	str	r2, [r3, #124]	; 0x7c
 8101a74:	4a66      	ldr	r2, [pc, #408]	; (8101c10 <HAL_SPI_MspInit+0x2b0>)
 8101a76:	687b      	ldr	r3, [r7, #4]
 8101a78:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8101a7a:	4b67      	ldr	r3, [pc, #412]	; (8101c18 <HAL_SPI_MspInit+0x2b8>)
 8101a7c:	4a67      	ldr	r2, [pc, #412]	; (8101c1c <HAL_SPI_MspInit+0x2bc>)
 8101a7e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8101a80:	4b65      	ldr	r3, [pc, #404]	; (8101c18 <HAL_SPI_MspInit+0x2b8>)
 8101a82:	2226      	movs	r2, #38	; 0x26
 8101a84:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101a86:	4b64      	ldr	r3, [pc, #400]	; (8101c18 <HAL_SPI_MspInit+0x2b8>)
 8101a88:	2240      	movs	r2, #64	; 0x40
 8101a8a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101a8c:	4b62      	ldr	r3, [pc, #392]	; (8101c18 <HAL_SPI_MspInit+0x2b8>)
 8101a8e:	2200      	movs	r2, #0
 8101a90:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101a92:	4b61      	ldr	r3, [pc, #388]	; (8101c18 <HAL_SPI_MspInit+0x2b8>)
 8101a94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101a98:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101a9a:	4b5f      	ldr	r3, [pc, #380]	; (8101c18 <HAL_SPI_MspInit+0x2b8>)
 8101a9c:	2200      	movs	r2, #0
 8101a9e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101aa0:	4b5d      	ldr	r3, [pc, #372]	; (8101c18 <HAL_SPI_MspInit+0x2b8>)
 8101aa2:	2200      	movs	r2, #0
 8101aa4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8101aa6:	4b5c      	ldr	r3, [pc, #368]	; (8101c18 <HAL_SPI_MspInit+0x2b8>)
 8101aa8:	2200      	movs	r2, #0
 8101aaa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8101aac:	4b5a      	ldr	r3, [pc, #360]	; (8101c18 <HAL_SPI_MspInit+0x2b8>)
 8101aae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101ab2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101ab4:	4b58      	ldr	r3, [pc, #352]	; (8101c18 <HAL_SPI_MspInit+0x2b8>)
 8101ab6:	2200      	movs	r2, #0
 8101ab8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8101aba:	4857      	ldr	r0, [pc, #348]	; (8101c18 <HAL_SPI_MspInit+0x2b8>)
 8101abc:	f000 fd06 	bl	81024cc <HAL_DMA_Init>
 8101ac0:	4603      	mov	r3, r0
 8101ac2:	2b00      	cmp	r3, #0
 8101ac4:	d001      	beq.n	8101aca <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 8101ac6:	f7ff fe43 	bl	8101750 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	4a52      	ldr	r2, [pc, #328]	; (8101c18 <HAL_SPI_MspInit+0x2b8>)
 8101ace:	679a      	str	r2, [r3, #120]	; 0x78
 8101ad0:	4a51      	ldr	r2, [pc, #324]	; (8101c18 <HAL_SPI_MspInit+0x2b8>)
 8101ad2:	687b      	ldr	r3, [r7, #4]
 8101ad4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8101ad6:	2200      	movs	r2, #0
 8101ad8:	2105      	movs	r1, #5
 8101ada:	2023      	movs	r0, #35	; 0x23
 8101adc:	f000 fcb5 	bl	810244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8101ae0:	2023      	movs	r0, #35	; 0x23
 8101ae2:	f000 fccc 	bl	810247e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8101ae6:	e086      	b.n	8101bf6 <HAL_SPI_MspInit+0x296>
  else if(spiHandle->Instance==SPI3)
 8101ae8:	687b      	ldr	r3, [r7, #4]
 8101aea:	681b      	ldr	r3, [r3, #0]
 8101aec:	4a4c      	ldr	r2, [pc, #304]	; (8101c20 <HAL_SPI_MspInit+0x2c0>)
 8101aee:	4293      	cmp	r3, r2
 8101af0:	d14e      	bne.n	8101b90 <HAL_SPI_MspInit+0x230>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8101af2:	4b44      	ldr	r3, [pc, #272]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101af8:	4a42      	ldr	r2, [pc, #264]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101afe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101b02:	4b40      	ldr	r3, [pc, #256]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101b0c:	61fb      	str	r3, [r7, #28]
 8101b0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b10:	4b3c      	ldr	r3, [pc, #240]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b16:	4a3b      	ldr	r2, [pc, #236]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101b18:	f043 0302 	orr.w	r3, r3, #2
 8101b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b20:	4b38      	ldr	r3, [pc, #224]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b26:	f003 0302 	and.w	r3, r3, #2
 8101b2a:	61bb      	str	r3, [r7, #24]
 8101b2c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101b2e:	4b35      	ldr	r3, [pc, #212]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b34:	4a33      	ldr	r2, [pc, #204]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101b36:	f043 0304 	orr.w	r3, r3, #4
 8101b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b3e:	4b31      	ldr	r3, [pc, #196]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b44:	f003 0304 	and.w	r3, r3, #4
 8101b48:	617b      	str	r3, [r7, #20]
 8101b4a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101b4c:	2304      	movs	r3, #4
 8101b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b50:	2302      	movs	r3, #2
 8101b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b54:	2300      	movs	r3, #0
 8101b56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b58:	2300      	movs	r3, #0
 8101b5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8101b5c:	2307      	movs	r3, #7
 8101b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101b64:	4619      	mov	r1, r3
 8101b66:	482f      	ldr	r0, [pc, #188]	; (8101c24 <HAL_SPI_MspInit+0x2c4>)
 8101b68:	f002 ffca 	bl	8104b00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101b6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b72:	2302      	movs	r3, #2
 8101b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b76:	2300      	movs	r3, #0
 8101b78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b7a:	2300      	movs	r3, #0
 8101b7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8101b7e:	2306      	movs	r3, #6
 8101b80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101b86:	4619      	mov	r1, r3
 8101b88:	4827      	ldr	r0, [pc, #156]	; (8101c28 <HAL_SPI_MspInit+0x2c8>)
 8101b8a:	f002 ffb9 	bl	8104b00 <HAL_GPIO_Init>
}
 8101b8e:	e032      	b.n	8101bf6 <HAL_SPI_MspInit+0x296>
  else if(spiHandle->Instance==SPI4)
 8101b90:	687b      	ldr	r3, [r7, #4]
 8101b92:	681b      	ldr	r3, [r3, #0]
 8101b94:	4a25      	ldr	r2, [pc, #148]	; (8101c2c <HAL_SPI_MspInit+0x2cc>)
 8101b96:	4293      	cmp	r3, r2
 8101b98:	d12d      	bne.n	8101bf6 <HAL_SPI_MspInit+0x296>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8101b9a:	4b1a      	ldr	r3, [pc, #104]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101ba0:	4a18      	ldr	r2, [pc, #96]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101ba2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8101ba6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101baa:	4b16      	ldr	r3, [pc, #88]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101bb4:	613b      	str	r3, [r7, #16]
 8101bb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101bb8:	4b12      	ldr	r3, [pc, #72]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bbe:	4a11      	ldr	r2, [pc, #68]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101bc0:	f043 0310 	orr.w	r3, r3, #16
 8101bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bc8:	4b0e      	ldr	r3, [pc, #56]	; (8101c04 <HAL_SPI_MspInit+0x2a4>)
 8101bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bce:	f003 0310 	and.w	r3, r3, #16
 8101bd2:	60fb      	str	r3, [r7, #12]
 8101bd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8101bd6:	2364      	movs	r3, #100	; 0x64
 8101bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bda:	2302      	movs	r3, #2
 8101bdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bde:	2300      	movs	r3, #0
 8101be0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101be2:	2300      	movs	r3, #0
 8101be4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8101be6:	2305      	movs	r3, #5
 8101be8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101bee:	4619      	mov	r1, r3
 8101bf0:	480f      	ldr	r0, [pc, #60]	; (8101c30 <HAL_SPI_MspInit+0x2d0>)
 8101bf2:	f002 ff85 	bl	8104b00 <HAL_GPIO_Init>
}
 8101bf6:	bf00      	nop
 8101bf8:	3740      	adds	r7, #64	; 0x40
 8101bfa:	46bd      	mov	sp, r7
 8101bfc:	bd80      	pop	{r7, pc}
 8101bfe:	bf00      	nop
 8101c00:	40013000 	.word	0x40013000
 8101c04:	58024400 	.word	0x58024400
 8101c08:	58020000 	.word	0x58020000
 8101c0c:	58020c00 	.word	0x58020c00
 8101c10:	10009c3c 	.word	0x10009c3c
 8101c14:	40020010 	.word	0x40020010
 8101c18:	10009cb4 	.word	0x10009cb4
 8101c1c:	40020028 	.word	0x40020028
 8101c20:	40003c00 	.word	0x40003c00
 8101c24:	58020400 	.word	0x58020400
 8101c28:	58020800 	.word	0x58020800
 8101c2c:	40013400 	.word	0x40013400
 8101c30:	58021000 	.word	0x58021000

08101c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101c34:	b580      	push	{r7, lr}
 8101c36:	b082      	sub	sp, #8
 8101c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101c3a:	4b0c      	ldr	r3, [pc, #48]	; (8101c6c <HAL_MspInit+0x38>)
 8101c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c40:	4a0a      	ldr	r2, [pc, #40]	; (8101c6c <HAL_MspInit+0x38>)
 8101c42:	f043 0302 	orr.w	r3, r3, #2
 8101c46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101c4a:	4b08      	ldr	r3, [pc, #32]	; (8101c6c <HAL_MspInit+0x38>)
 8101c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c50:	f003 0302 	and.w	r3, r3, #2
 8101c54:	607b      	str	r3, [r7, #4]
 8101c56:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101c58:	2200      	movs	r2, #0
 8101c5a:	210f      	movs	r1, #15
 8101c5c:	f06f 0001 	mvn.w	r0, #1
 8101c60:	f000 fbf3 	bl	810244a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101c64:	bf00      	nop
 8101c66:	3708      	adds	r7, #8
 8101c68:	46bd      	mov	sp, r7
 8101c6a:	bd80      	pop	{r7, pc}
 8101c6c:	58024400 	.word	0x58024400

08101c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101c70:	b580      	push	{r7, lr}
 8101c72:	b08e      	sub	sp, #56	; 0x38
 8101c74:	af00      	add	r7, sp, #0
 8101c76:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM8 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101c78:	687b      	ldr	r3, [r7, #4]
 8101c7a:	2b0f      	cmp	r3, #15
 8101c7c:	d844      	bhi.n	8101d08 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0U);
 8101c7e:	2200      	movs	r2, #0
 8101c80:	6879      	ldr	r1, [r7, #4]
 8101c82:	202c      	movs	r0, #44	; 0x2c
 8101c84:	f000 fbe1 	bl	810244a <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8101c88:	202c      	movs	r0, #44	; 0x2c
 8101c8a:	f000 fbf8 	bl	810247e <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8101c8e:	4a24      	ldr	r2, [pc, #144]	; (8101d20 <HAL_InitTick+0xb0>)
 8101c90:	687b      	ldr	r3, [r7, #4]
 8101c92:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8101c94:	4b23      	ldr	r3, [pc, #140]	; (8101d24 <HAL_InitTick+0xb4>)
 8101c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c9a:	4a22      	ldr	r2, [pc, #136]	; (8101d24 <HAL_InitTick+0xb4>)
 8101c9c:	f043 0302 	orr.w	r3, r3, #2
 8101ca0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101ca4:	4b1f      	ldr	r3, [pc, #124]	; (8101d24 <HAL_InitTick+0xb4>)
 8101ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101caa:	f003 0302 	and.w	r3, r3, #2
 8101cae:	60bb      	str	r3, [r7, #8]
 8101cb0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101cb2:	f107 020c 	add.w	r2, r7, #12
 8101cb6:	f107 0310 	add.w	r3, r7, #16
 8101cba:	4611      	mov	r1, r2
 8101cbc:	4618      	mov	r0, r3
 8101cbe:	f004 f947 	bl	8105f50 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8101cc2:	f004 f92f 	bl	8105f24 <HAL_RCC_GetPCLK2Freq>
 8101cc6:	4603      	mov	r3, r0
 8101cc8:	005b      	lsls	r3, r3, #1
 8101cca:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101cce:	4a16      	ldr	r2, [pc, #88]	; (8101d28 <HAL_InitTick+0xb8>)
 8101cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8101cd4:	0c9b      	lsrs	r3, r3, #18
 8101cd6:	3b01      	subs	r3, #1
 8101cd8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8101cda:	4b14      	ldr	r3, [pc, #80]	; (8101d2c <HAL_InitTick+0xbc>)
 8101cdc:	4a14      	ldr	r2, [pc, #80]	; (8101d30 <HAL_InitTick+0xc0>)
 8101cde:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8101ce0:	4b12      	ldr	r3, [pc, #72]	; (8101d2c <HAL_InitTick+0xbc>)
 8101ce2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101ce6:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8101ce8:	4a10      	ldr	r2, [pc, #64]	; (8101d2c <HAL_InitTick+0xbc>)
 8101cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101cec:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8101cee:	4b0f      	ldr	r3, [pc, #60]	; (8101d2c <HAL_InitTick+0xbc>)
 8101cf0:	2200      	movs	r2, #0
 8101cf2:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101cf4:	4b0d      	ldr	r3, [pc, #52]	; (8101d2c <HAL_InitTick+0xbc>)
 8101cf6:	2200      	movs	r2, #0
 8101cf8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8101cfa:	480c      	ldr	r0, [pc, #48]	; (8101d2c <HAL_InitTick+0xbc>)
 8101cfc:	f004 fffd 	bl	8106cfa <HAL_TIM_Base_Init>
 8101d00:	4603      	mov	r3, r0
 8101d02:	2b00      	cmp	r3, #0
 8101d04:	d107      	bne.n	8101d16 <HAL_InitTick+0xa6>
 8101d06:	e001      	b.n	8101d0c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8101d08:	2301      	movs	r3, #1
 8101d0a:	e005      	b.n	8101d18 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8101d0c:	4807      	ldr	r0, [pc, #28]	; (8101d2c <HAL_InitTick+0xbc>)
 8101d0e:	f005 f855 	bl	8106dbc <HAL_TIM_Base_Start_IT>
 8101d12:	4603      	mov	r3, r0
 8101d14:	e000      	b.n	8101d18 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8101d16:	2301      	movs	r3, #1
}
 8101d18:	4618      	mov	r0, r3
 8101d1a:	3738      	adds	r7, #56	; 0x38
 8101d1c:	46bd      	mov	sp, r7
 8101d1e:	bd80      	pop	{r7, pc}
 8101d20:	10000008 	.word	0x10000008
 8101d24:	58024400 	.word	0x58024400
 8101d28:	431bde83 	.word	0x431bde83
 8101d2c:	10009d2c 	.word	0x10009d2c
 8101d30:	40010400 	.word	0x40010400

08101d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101d34:	b480      	push	{r7}
 8101d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101d38:	e7fe      	b.n	8101d38 <NMI_Handler+0x4>

08101d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101d3a:	b480      	push	{r7}
 8101d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101d3e:	e7fe      	b.n	8101d3e <HardFault_Handler+0x4>

08101d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101d40:	b480      	push	{r7}
 8101d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101d44:	e7fe      	b.n	8101d44 <MemManage_Handler+0x4>

08101d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101d46:	b480      	push	{r7}
 8101d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101d4a:	e7fe      	b.n	8101d4a <BusFault_Handler+0x4>

08101d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101d4c:	b480      	push	{r7}
 8101d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101d50:	e7fe      	b.n	8101d50 <UsageFault_Handler+0x4>

08101d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101d52:	b480      	push	{r7}
 8101d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101d56:	bf00      	nop
 8101d58:	46bd      	mov	sp, r7
 8101d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d5e:	4770      	bx	lr

08101d60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101d60:	b580      	push	{r7, lr}
 8101d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8101d64:	4802      	ldr	r0, [pc, #8]	; (8101d70 <DMA1_Stream0_IRQHandler+0x10>)
 8101d66:	f001 fbb9 	bl	81034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8101d6a:	bf00      	nop
 8101d6c:	bd80      	pop	{r7, pc}
 8101d6e:	bf00      	nop
 8101d70:	10009c3c 	.word	0x10009c3c

08101d74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101d74:	b580      	push	{r7, lr}
 8101d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8101d78:	4802      	ldr	r0, [pc, #8]	; (8101d84 <DMA1_Stream1_IRQHandler+0x10>)
 8101d7a:	f001 fbaf 	bl	81034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8101d7e:	bf00      	nop
 8101d80:	bd80      	pop	{r7, pc}
 8101d82:	bf00      	nop
 8101d84:	10009cb4 	.word	0x10009cb4

08101d88 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8101d88:	b580      	push	{r7, lr}
 8101d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8101d8c:	4802      	ldr	r0, [pc, #8]	; (8101d98 <SPI1_IRQHandler+0x10>)
 8101d8e:	f004 fcd7 	bl	8106740 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8101d92:	bf00      	nop
 8101d94:	bd80      	pop	{r7, pc}
 8101d96:	bf00      	nop
 8101d98:	10009bb4 	.word	0x10009bb4

08101d9c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8101d9c:	b580      	push	{r7, lr}
 8101d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8101da0:	4802      	ldr	r0, [pc, #8]	; (8101dac <TIM8_UP_TIM13_IRQHandler+0x10>)
 8101da2:	f005 f841 	bl	8106e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8101da6:	bf00      	nop
 8101da8:	bd80      	pop	{r7, pc}
 8101daa:	bf00      	nop
 8101dac:	10009d2c 	.word	0x10009d2c

08101db0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8101db0:	b580      	push	{r7, lr}
 8101db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8101db4:	4802      	ldr	r0, [pc, #8]	; (8101dc0 <DMA2_Stream2_IRQHandler+0x10>)
 8101db6:	f001 fb91 	bl	81034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8101dba:	bf00      	nop
 8101dbc:	bd80      	pop	{r7, pc}
 8101dbe:	bf00      	nop
 8101dc0:	10009d78 	.word	0x10009d78

08101dc4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8101dc4:	b580      	push	{r7, lr}
 8101dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8101dc8:	4802      	ldr	r0, [pc, #8]	; (8101dd4 <DMA2_Stream3_IRQHandler+0x10>)
 8101dca:	f001 fb87 	bl	81034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8101dce:	bf00      	nop
 8101dd0:	bd80      	pop	{r7, pc}
 8101dd2:	bf00      	nop
 8101dd4:	10009e7c 	.word	0x10009e7c

08101dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101dd8:	b480      	push	{r7}
 8101dda:	af00      	add	r7, sp, #0
	return 1;
 8101ddc:	2301      	movs	r3, #1
}
 8101dde:	4618      	mov	r0, r3
 8101de0:	46bd      	mov	sp, r7
 8101de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101de6:	4770      	bx	lr

08101de8 <_kill>:

int _kill(int pid, int sig)
{
 8101de8:	b580      	push	{r7, lr}
 8101dea:	b082      	sub	sp, #8
 8101dec:	af00      	add	r7, sp, #0
 8101dee:	6078      	str	r0, [r7, #4]
 8101df0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101df2:	f00d fb49 	bl	810f488 <__errno>
 8101df6:	4603      	mov	r3, r0
 8101df8:	2216      	movs	r2, #22
 8101dfa:	601a      	str	r2, [r3, #0]
	return -1;
 8101dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101e00:	4618      	mov	r0, r3
 8101e02:	3708      	adds	r7, #8
 8101e04:	46bd      	mov	sp, r7
 8101e06:	bd80      	pop	{r7, pc}

08101e08 <_exit>:

void _exit (int status)
{
 8101e08:	b580      	push	{r7, lr}
 8101e0a:	b082      	sub	sp, #8
 8101e0c:	af00      	add	r7, sp, #0
 8101e0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8101e14:	6878      	ldr	r0, [r7, #4]
 8101e16:	f7ff ffe7 	bl	8101de8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101e1a:	e7fe      	b.n	8101e1a <_exit+0x12>

08101e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101e1c:	b580      	push	{r7, lr}
 8101e1e:	b086      	sub	sp, #24
 8101e20:	af00      	add	r7, sp, #0
 8101e22:	60f8      	str	r0, [r7, #12]
 8101e24:	60b9      	str	r1, [r7, #8]
 8101e26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e28:	2300      	movs	r3, #0
 8101e2a:	617b      	str	r3, [r7, #20]
 8101e2c:	e00a      	b.n	8101e44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101e2e:	f3af 8000 	nop.w
 8101e32:	4601      	mov	r1, r0
 8101e34:	68bb      	ldr	r3, [r7, #8]
 8101e36:	1c5a      	adds	r2, r3, #1
 8101e38:	60ba      	str	r2, [r7, #8]
 8101e3a:	b2ca      	uxtb	r2, r1
 8101e3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e3e:	697b      	ldr	r3, [r7, #20]
 8101e40:	3301      	adds	r3, #1
 8101e42:	617b      	str	r3, [r7, #20]
 8101e44:	697a      	ldr	r2, [r7, #20]
 8101e46:	687b      	ldr	r3, [r7, #4]
 8101e48:	429a      	cmp	r2, r3
 8101e4a:	dbf0      	blt.n	8101e2e <_read+0x12>
	}

return len;
 8101e4c:	687b      	ldr	r3, [r7, #4]
}
 8101e4e:	4618      	mov	r0, r3
 8101e50:	3718      	adds	r7, #24
 8101e52:	46bd      	mov	sp, r7
 8101e54:	bd80      	pop	{r7, pc}

08101e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101e56:	b580      	push	{r7, lr}
 8101e58:	b086      	sub	sp, #24
 8101e5a:	af00      	add	r7, sp, #0
 8101e5c:	60f8      	str	r0, [r7, #12]
 8101e5e:	60b9      	str	r1, [r7, #8]
 8101e60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e62:	2300      	movs	r3, #0
 8101e64:	617b      	str	r3, [r7, #20]
 8101e66:	e009      	b.n	8101e7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101e68:	68bb      	ldr	r3, [r7, #8]
 8101e6a:	1c5a      	adds	r2, r3, #1
 8101e6c:	60ba      	str	r2, [r7, #8]
 8101e6e:	781b      	ldrb	r3, [r3, #0]
 8101e70:	4618      	mov	r0, r3
 8101e72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e76:	697b      	ldr	r3, [r7, #20]
 8101e78:	3301      	adds	r3, #1
 8101e7a:	617b      	str	r3, [r7, #20]
 8101e7c:	697a      	ldr	r2, [r7, #20]
 8101e7e:	687b      	ldr	r3, [r7, #4]
 8101e80:	429a      	cmp	r2, r3
 8101e82:	dbf1      	blt.n	8101e68 <_write+0x12>
	}
	return len;
 8101e84:	687b      	ldr	r3, [r7, #4]
}
 8101e86:	4618      	mov	r0, r3
 8101e88:	3718      	adds	r7, #24
 8101e8a:	46bd      	mov	sp, r7
 8101e8c:	bd80      	pop	{r7, pc}

08101e8e <_close>:

int _close(int file)
{
 8101e8e:	b480      	push	{r7}
 8101e90:	b083      	sub	sp, #12
 8101e92:	af00      	add	r7, sp, #0
 8101e94:	6078      	str	r0, [r7, #4]
	return -1;
 8101e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101e9a:	4618      	mov	r0, r3
 8101e9c:	370c      	adds	r7, #12
 8101e9e:	46bd      	mov	sp, r7
 8101ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ea4:	4770      	bx	lr

08101ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101ea6:	b480      	push	{r7}
 8101ea8:	b083      	sub	sp, #12
 8101eaa:	af00      	add	r7, sp, #0
 8101eac:	6078      	str	r0, [r7, #4]
 8101eae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101eb0:	683b      	ldr	r3, [r7, #0]
 8101eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101eb6:	605a      	str	r2, [r3, #4]
	return 0;
 8101eb8:	2300      	movs	r3, #0
}
 8101eba:	4618      	mov	r0, r3
 8101ebc:	370c      	adds	r7, #12
 8101ebe:	46bd      	mov	sp, r7
 8101ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ec4:	4770      	bx	lr

08101ec6 <_isatty>:

int _isatty(int file)
{
 8101ec6:	b480      	push	{r7}
 8101ec8:	b083      	sub	sp, #12
 8101eca:	af00      	add	r7, sp, #0
 8101ecc:	6078      	str	r0, [r7, #4]
	return 1;
 8101ece:	2301      	movs	r3, #1
}
 8101ed0:	4618      	mov	r0, r3
 8101ed2:	370c      	adds	r7, #12
 8101ed4:	46bd      	mov	sp, r7
 8101ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eda:	4770      	bx	lr

08101edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101edc:	b480      	push	{r7}
 8101ede:	b085      	sub	sp, #20
 8101ee0:	af00      	add	r7, sp, #0
 8101ee2:	60f8      	str	r0, [r7, #12]
 8101ee4:	60b9      	str	r1, [r7, #8]
 8101ee6:	607a      	str	r2, [r7, #4]
	return 0;
 8101ee8:	2300      	movs	r3, #0
}
 8101eea:	4618      	mov	r0, r3
 8101eec:	3714      	adds	r7, #20
 8101eee:	46bd      	mov	sp, r7
 8101ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ef4:	4770      	bx	lr
	...

08101ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101ef8:	b580      	push	{r7, lr}
 8101efa:	b086      	sub	sp, #24
 8101efc:	af00      	add	r7, sp, #0
 8101efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101f00:	4a14      	ldr	r2, [pc, #80]	; (8101f54 <_sbrk+0x5c>)
 8101f02:	4b15      	ldr	r3, [pc, #84]	; (8101f58 <_sbrk+0x60>)
 8101f04:	1ad3      	subs	r3, r2, r3
 8101f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101f08:	697b      	ldr	r3, [r7, #20]
 8101f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101f0c:	4b13      	ldr	r3, [pc, #76]	; (8101f5c <_sbrk+0x64>)
 8101f0e:	681b      	ldr	r3, [r3, #0]
 8101f10:	2b00      	cmp	r3, #0
 8101f12:	d102      	bne.n	8101f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101f14:	4b11      	ldr	r3, [pc, #68]	; (8101f5c <_sbrk+0x64>)
 8101f16:	4a12      	ldr	r2, [pc, #72]	; (8101f60 <_sbrk+0x68>)
 8101f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101f1a:	4b10      	ldr	r3, [pc, #64]	; (8101f5c <_sbrk+0x64>)
 8101f1c:	681a      	ldr	r2, [r3, #0]
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	4413      	add	r3, r2
 8101f22:	693a      	ldr	r2, [r7, #16]
 8101f24:	429a      	cmp	r2, r3
 8101f26:	d207      	bcs.n	8101f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101f28:	f00d faae 	bl	810f488 <__errno>
 8101f2c:	4603      	mov	r3, r0
 8101f2e:	220c      	movs	r2, #12
 8101f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8101f36:	e009      	b.n	8101f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101f38:	4b08      	ldr	r3, [pc, #32]	; (8101f5c <_sbrk+0x64>)
 8101f3a:	681b      	ldr	r3, [r3, #0]
 8101f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101f3e:	4b07      	ldr	r3, [pc, #28]	; (8101f5c <_sbrk+0x64>)
 8101f40:	681a      	ldr	r2, [r3, #0]
 8101f42:	687b      	ldr	r3, [r7, #4]
 8101f44:	4413      	add	r3, r2
 8101f46:	4a05      	ldr	r2, [pc, #20]	; (8101f5c <_sbrk+0x64>)
 8101f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101f4a:	68fb      	ldr	r3, [r7, #12]
}
 8101f4c:	4618      	mov	r0, r3
 8101f4e:	3718      	adds	r7, #24
 8101f50:	46bd      	mov	sp, r7
 8101f52:	bd80      	pop	{r7, pc}
 8101f54:	10048000 	.word	0x10048000
 8101f58:	00000400 	.word	0x00000400
 8101f5c:	1000047c 	.word	0x1000047c
 8101f60:	1000a388 	.word	0x1000a388

08101f64 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101f64:	b580      	push	{r7, lr}
 8101f66:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8101f68:	4b22      	ldr	r3, [pc, #136]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101f6a:	4a23      	ldr	r2, [pc, #140]	; (8101ff8 <MX_USART3_UART_Init+0x94>)
 8101f6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101f6e:	4b21      	ldr	r3, [pc, #132]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101f74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101f76:	4b1f      	ldr	r3, [pc, #124]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101f78:	2200      	movs	r2, #0
 8101f7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101f7c:	4b1d      	ldr	r3, [pc, #116]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101f7e:	2200      	movs	r2, #0
 8101f80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101f82:	4b1c      	ldr	r3, [pc, #112]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101f84:	2200      	movs	r2, #0
 8101f86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101f88:	4b1a      	ldr	r3, [pc, #104]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101f8a:	220c      	movs	r2, #12
 8101f8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101f8e:	4b19      	ldr	r3, [pc, #100]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101f90:	2200      	movs	r2, #0
 8101f92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101f94:	4b17      	ldr	r3, [pc, #92]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101f96:	2200      	movs	r2, #0
 8101f98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101f9a:	4b16      	ldr	r3, [pc, #88]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101f9c:	2200      	movs	r2, #0
 8101f9e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101fa0:	4b14      	ldr	r3, [pc, #80]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101fa2:	2200      	movs	r2, #0
 8101fa4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101fa6:	4b13      	ldr	r3, [pc, #76]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101fa8:	2200      	movs	r2, #0
 8101faa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101fac:	4811      	ldr	r0, [pc, #68]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101fae:	f005 f93b 	bl	8107228 <HAL_UART_Init>
 8101fb2:	4603      	mov	r3, r0
 8101fb4:	2b00      	cmp	r3, #0
 8101fb6:	d001      	beq.n	8101fbc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101fb8:	f7ff fbca 	bl	8101750 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101fbc:	2100      	movs	r1, #0
 8101fbe:	480d      	ldr	r0, [pc, #52]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101fc0:	f006 fa89 	bl	81084d6 <HAL_UARTEx_SetTxFifoThreshold>
 8101fc4:	4603      	mov	r3, r0
 8101fc6:	2b00      	cmp	r3, #0
 8101fc8:	d001      	beq.n	8101fce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101fca:	f7ff fbc1 	bl	8101750 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101fce:	2100      	movs	r1, #0
 8101fd0:	4808      	ldr	r0, [pc, #32]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101fd2:	f006 fabe 	bl	8108552 <HAL_UARTEx_SetRxFifoThreshold>
 8101fd6:	4603      	mov	r3, r0
 8101fd8:	2b00      	cmp	r3, #0
 8101fda:	d001      	beq.n	8101fe0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101fdc:	f7ff fbb8 	bl	8101750 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101fe0:	4804      	ldr	r0, [pc, #16]	; (8101ff4 <MX_USART3_UART_Init+0x90>)
 8101fe2:	f006 fa3f 	bl	8108464 <HAL_UARTEx_DisableFifoMode>
 8101fe6:	4603      	mov	r3, r0
 8101fe8:	2b00      	cmp	r3, #0
 8101fea:	d001      	beq.n	8101ff0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101fec:	f7ff fbb0 	bl	8101750 <Error_Handler>
  }

}
 8101ff0:	bf00      	nop
 8101ff2:	bd80      	pop	{r7, pc}
 8101ff4:	10009df0 	.word	0x10009df0
 8101ff8:	40004800 	.word	0x40004800

08101ffc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8101ffc:	b580      	push	{r7, lr}
 8101ffe:	b08a      	sub	sp, #40	; 0x28
 8102000:	af00      	add	r7, sp, #0
 8102002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102004:	f107 0314 	add.w	r3, r7, #20
 8102008:	2200      	movs	r2, #0
 810200a:	601a      	str	r2, [r3, #0]
 810200c:	605a      	str	r2, [r3, #4]
 810200e:	609a      	str	r2, [r3, #8]
 8102010:	60da      	str	r2, [r3, #12]
 8102012:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	681b      	ldr	r3, [r3, #0]
 8102018:	4a49      	ldr	r2, [pc, #292]	; (8102140 <HAL_UART_MspInit+0x144>)
 810201a:	4293      	cmp	r3, r2
 810201c:	f040 808b 	bne.w	8102136 <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102020:	4b48      	ldr	r3, [pc, #288]	; (8102144 <HAL_UART_MspInit+0x148>)
 8102022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102026:	4a47      	ldr	r2, [pc, #284]	; (8102144 <HAL_UART_MspInit+0x148>)
 8102028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810202c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102030:	4b44      	ldr	r3, [pc, #272]	; (8102144 <HAL_UART_MspInit+0x148>)
 8102032:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810203a:	613b      	str	r3, [r7, #16]
 810203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 810203e:	4b41      	ldr	r3, [pc, #260]	; (8102144 <HAL_UART_MspInit+0x148>)
 8102040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102044:	4a3f      	ldr	r2, [pc, #252]	; (8102144 <HAL_UART_MspInit+0x148>)
 8102046:	f043 0308 	orr.w	r3, r3, #8
 810204a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810204e:	4b3d      	ldr	r3, [pc, #244]	; (8102144 <HAL_UART_MspInit+0x148>)
 8102050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102054:	f003 0308 	and.w	r3, r3, #8
 8102058:	60fb      	str	r3, [r7, #12]
 810205a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 810205c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102062:	2302      	movs	r3, #2
 8102064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102066:	2300      	movs	r3, #0
 8102068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810206a:	2300      	movs	r3, #0
 810206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810206e:	2307      	movs	r3, #7
 8102070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102072:	f107 0314 	add.w	r3, r7, #20
 8102076:	4619      	mov	r1, r3
 8102078:	4833      	ldr	r0, [pc, #204]	; (8102148 <HAL_UART_MspInit+0x14c>)
 810207a:	f002 fd41 	bl	8104b00 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA2_Stream2;
 810207e:	4b33      	ldr	r3, [pc, #204]	; (810214c <HAL_UART_MspInit+0x150>)
 8102080:	4a33      	ldr	r2, [pc, #204]	; (8102150 <HAL_UART_MspInit+0x154>)
 8102082:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8102084:	4b31      	ldr	r3, [pc, #196]	; (810214c <HAL_UART_MspInit+0x150>)
 8102086:	222d      	movs	r2, #45	; 0x2d
 8102088:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810208a:	4b30      	ldr	r3, [pc, #192]	; (810214c <HAL_UART_MspInit+0x150>)
 810208c:	2200      	movs	r2, #0
 810208e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102090:	4b2e      	ldr	r3, [pc, #184]	; (810214c <HAL_UART_MspInit+0x150>)
 8102092:	2200      	movs	r2, #0
 8102094:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102096:	4b2d      	ldr	r3, [pc, #180]	; (810214c <HAL_UART_MspInit+0x150>)
 8102098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810209c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810209e:	4b2b      	ldr	r3, [pc, #172]	; (810214c <HAL_UART_MspInit+0x150>)
 81020a0:	2200      	movs	r2, #0
 81020a2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81020a4:	4b29      	ldr	r3, [pc, #164]	; (810214c <HAL_UART_MspInit+0x150>)
 81020a6:	2200      	movs	r2, #0
 81020a8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 81020aa:	4b28      	ldr	r3, [pc, #160]	; (810214c <HAL_UART_MspInit+0x150>)
 81020ac:	2200      	movs	r2, #0
 81020ae:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 81020b0:	4b26      	ldr	r3, [pc, #152]	; (810214c <HAL_UART_MspInit+0x150>)
 81020b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 81020b6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81020b8:	4b24      	ldr	r3, [pc, #144]	; (810214c <HAL_UART_MspInit+0x150>)
 81020ba:	2200      	movs	r2, #0
 81020bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81020be:	4823      	ldr	r0, [pc, #140]	; (810214c <HAL_UART_MspInit+0x150>)
 81020c0:	f000 fa04 	bl	81024cc <HAL_DMA_Init>
 81020c4:	4603      	mov	r3, r0
 81020c6:	2b00      	cmp	r3, #0
 81020c8:	d001      	beq.n	81020ce <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 81020ca:	f7ff fb41 	bl	8101750 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 81020ce:	687b      	ldr	r3, [r7, #4]
 81020d0:	4a1e      	ldr	r2, [pc, #120]	; (810214c <HAL_UART_MspInit+0x150>)
 81020d2:	679a      	str	r2, [r3, #120]	; 0x78
 81020d4:	4a1d      	ldr	r2, [pc, #116]	; (810214c <HAL_UART_MspInit+0x150>)
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream3;
 81020da:	4b1e      	ldr	r3, [pc, #120]	; (8102154 <HAL_UART_MspInit+0x158>)
 81020dc:	4a1e      	ldr	r2, [pc, #120]	; (8102158 <HAL_UART_MspInit+0x15c>)
 81020de:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 81020e0:	4b1c      	ldr	r3, [pc, #112]	; (8102154 <HAL_UART_MspInit+0x158>)
 81020e2:	222e      	movs	r2, #46	; 0x2e
 81020e4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81020e6:	4b1b      	ldr	r3, [pc, #108]	; (8102154 <HAL_UART_MspInit+0x158>)
 81020e8:	2240      	movs	r2, #64	; 0x40
 81020ea:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81020ec:	4b19      	ldr	r3, [pc, #100]	; (8102154 <HAL_UART_MspInit+0x158>)
 81020ee:	2200      	movs	r2, #0
 81020f0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 81020f2:	4b18      	ldr	r3, [pc, #96]	; (8102154 <HAL_UART_MspInit+0x158>)
 81020f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81020f8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81020fa:	4b16      	ldr	r3, [pc, #88]	; (8102154 <HAL_UART_MspInit+0x158>)
 81020fc:	2200      	movs	r2, #0
 81020fe:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102100:	4b14      	ldr	r3, [pc, #80]	; (8102154 <HAL_UART_MspInit+0x158>)
 8102102:	2200      	movs	r2, #0
 8102104:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8102106:	4b13      	ldr	r3, [pc, #76]	; (8102154 <HAL_UART_MspInit+0x158>)
 8102108:	2200      	movs	r2, #0
 810210a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 810210c:	4b11      	ldr	r3, [pc, #68]	; (8102154 <HAL_UART_MspInit+0x158>)
 810210e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8102112:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102114:	4b0f      	ldr	r3, [pc, #60]	; (8102154 <HAL_UART_MspInit+0x158>)
 8102116:	2200      	movs	r2, #0
 8102118:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 810211a:	480e      	ldr	r0, [pc, #56]	; (8102154 <HAL_UART_MspInit+0x158>)
 810211c:	f000 f9d6 	bl	81024cc <HAL_DMA_Init>
 8102120:	4603      	mov	r3, r0
 8102122:	2b00      	cmp	r3, #0
 8102124:	d001      	beq.n	810212a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8102126:	f7ff fb13 	bl	8101750 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 810212a:	687b      	ldr	r3, [r7, #4]
 810212c:	4a09      	ldr	r2, [pc, #36]	; (8102154 <HAL_UART_MspInit+0x158>)
 810212e:	675a      	str	r2, [r3, #116]	; 0x74
 8102130:	4a08      	ldr	r2, [pc, #32]	; (8102154 <HAL_UART_MspInit+0x158>)
 8102132:	687b      	ldr	r3, [r7, #4]
 8102134:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8102136:	bf00      	nop
 8102138:	3728      	adds	r7, #40	; 0x28
 810213a:	46bd      	mov	sp, r7
 810213c:	bd80      	pop	{r7, pc}
 810213e:	bf00      	nop
 8102140:	40004800 	.word	0x40004800
 8102144:	58024400 	.word	0x58024400
 8102148:	58020c00 	.word	0x58020c00
 810214c:	10009d78 	.word	0x10009d78
 8102150:	40020440 	.word	0x40020440
 8102154:	10009e7c 	.word	0x10009e7c
 8102158:	40020458 	.word	0x40020458

0810215c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 810215c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102194 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8102160:	f7fe ffd6 	bl	8101110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8102164:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8102166:	e003      	b.n	8102170 <LoopCopyDataInit>

08102168 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8102168:	4b0b      	ldr	r3, [pc, #44]	; (8102198 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 810216a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 810216c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 810216e:	3104      	adds	r1, #4

08102170 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8102170:	480a      	ldr	r0, [pc, #40]	; (810219c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8102172:	4b0b      	ldr	r3, [pc, #44]	; (81021a0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8102174:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8102176:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8102178:	d3f6      	bcc.n	8102168 <CopyDataInit>
  ldr  r2, =_sbss
 810217a:	4a0a      	ldr	r2, [pc, #40]	; (81021a4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 810217c:	e002      	b.n	8102184 <LoopFillZerobss>

0810217e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 810217e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8102180:	f842 3b04 	str.w	r3, [r2], #4

08102184 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8102184:	4b08      	ldr	r3, [pc, #32]	; (81021a8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8102186:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8102188:	d3f9      	bcc.n	810217e <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 810218a:	f00d f983 	bl	810f494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810218e:	f7ff fa75 	bl	810167c <main>
  bx  lr    
 8102192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102194:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8102198:	08113610 	.word	0x08113610
  ldr  r0, =_sdata
 810219c:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 81021a0:	1000020c 	.word	0x1000020c
  ldr  r2, =_sbss
 81021a4:	1000020c 	.word	0x1000020c
  ldr  r3, = _ebss
 81021a8:	1000a388 	.word	0x1000a388

081021ac <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81021ac:	e7fe      	b.n	81021ac <ADC3_IRQHandler>
	...

081021b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81021b0:	b580      	push	{r7, lr}
 81021b2:	b082      	sub	sp, #8
 81021b4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81021b6:	4b28      	ldr	r3, [pc, #160]	; (8102258 <HAL_Init+0xa8>)
 81021b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81021bc:	4a26      	ldr	r2, [pc, #152]	; (8102258 <HAL_Init+0xa8>)
 81021be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81021c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81021c6:	4b24      	ldr	r3, [pc, #144]	; (8102258 <HAL_Init+0xa8>)
 81021c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81021cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81021d0:	603b      	str	r3, [r7, #0]
 81021d2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81021d4:	4b21      	ldr	r3, [pc, #132]	; (810225c <HAL_Init+0xac>)
 81021d6:	681b      	ldr	r3, [r3, #0]
 81021d8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81021dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81021e0:	4a1e      	ldr	r2, [pc, #120]	; (810225c <HAL_Init+0xac>)
 81021e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81021e6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81021e8:	4b1c      	ldr	r3, [pc, #112]	; (810225c <HAL_Init+0xac>)
 81021ea:	681b      	ldr	r3, [r3, #0]
 81021ec:	4a1b      	ldr	r2, [pc, #108]	; (810225c <HAL_Init+0xac>)
 81021ee:	f043 0301 	orr.w	r3, r3, #1
 81021f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81021f4:	2003      	movs	r0, #3
 81021f6:	f000 f91d 	bl	8102434 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81021fa:	f003 fcd1 	bl	8105ba0 <HAL_RCC_GetSysClockFreq>
 81021fe:	4602      	mov	r2, r0
 8102200:	4b15      	ldr	r3, [pc, #84]	; (8102258 <HAL_Init+0xa8>)
 8102202:	699b      	ldr	r3, [r3, #24]
 8102204:	0a1b      	lsrs	r3, r3, #8
 8102206:	f003 030f 	and.w	r3, r3, #15
 810220a:	4915      	ldr	r1, [pc, #84]	; (8102260 <HAL_Init+0xb0>)
 810220c:	5ccb      	ldrb	r3, [r1, r3]
 810220e:	f003 031f 	and.w	r3, r3, #31
 8102212:	fa22 f303 	lsr.w	r3, r2, r3
 8102216:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102218:	4b0f      	ldr	r3, [pc, #60]	; (8102258 <HAL_Init+0xa8>)
 810221a:	699b      	ldr	r3, [r3, #24]
 810221c:	f003 030f 	and.w	r3, r3, #15
 8102220:	4a0f      	ldr	r2, [pc, #60]	; (8102260 <HAL_Init+0xb0>)
 8102222:	5cd3      	ldrb	r3, [r2, r3]
 8102224:	f003 031f 	and.w	r3, r3, #31
 8102228:	687a      	ldr	r2, [r7, #4]
 810222a:	fa22 f303 	lsr.w	r3, r2, r3
 810222e:	4a0d      	ldr	r2, [pc, #52]	; (8102264 <HAL_Init+0xb4>)
 8102230:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102232:	4b0c      	ldr	r3, [pc, #48]	; (8102264 <HAL_Init+0xb4>)
 8102234:	681b      	ldr	r3, [r3, #0]
 8102236:	4a0c      	ldr	r2, [pc, #48]	; (8102268 <HAL_Init+0xb8>)
 8102238:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810223a:	2000      	movs	r0, #0
 810223c:	f7ff fd18 	bl	8101c70 <HAL_InitTick>
 8102240:	4603      	mov	r3, r0
 8102242:	2b00      	cmp	r3, #0
 8102244:	d001      	beq.n	810224a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102246:	2301      	movs	r3, #1
 8102248:	e002      	b.n	8102250 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810224a:	f7ff fcf3 	bl	8101c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810224e:	2300      	movs	r3, #0
}
 8102250:	4618      	mov	r0, r3
 8102252:	3708      	adds	r7, #8
 8102254:	46bd      	mov	sp, r7
 8102256:	bd80      	pop	{r7, pc}
 8102258:	58024400 	.word	0x58024400
 810225c:	40024400 	.word	0x40024400
 8102260:	08112c74 	.word	0x08112c74
 8102264:	10000004 	.word	0x10000004
 8102268:	10000000 	.word	0x10000000

0810226c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810226c:	b480      	push	{r7}
 810226e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102270:	4b06      	ldr	r3, [pc, #24]	; (810228c <HAL_IncTick+0x20>)
 8102272:	781b      	ldrb	r3, [r3, #0]
 8102274:	461a      	mov	r2, r3
 8102276:	4b06      	ldr	r3, [pc, #24]	; (8102290 <HAL_IncTick+0x24>)
 8102278:	681b      	ldr	r3, [r3, #0]
 810227a:	4413      	add	r3, r2
 810227c:	4a04      	ldr	r2, [pc, #16]	; (8102290 <HAL_IncTick+0x24>)
 810227e:	6013      	str	r3, [r2, #0]
}
 8102280:	bf00      	nop
 8102282:	46bd      	mov	sp, r7
 8102284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102288:	4770      	bx	lr
 810228a:	bf00      	nop
 810228c:	1000000c 	.word	0x1000000c
 8102290:	10009ef4 	.word	0x10009ef4

08102294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102294:	b480      	push	{r7}
 8102296:	af00      	add	r7, sp, #0
  return uwTick;
 8102298:	4b03      	ldr	r3, [pc, #12]	; (81022a8 <HAL_GetTick+0x14>)
 810229a:	681b      	ldr	r3, [r3, #0]
}
 810229c:	4618      	mov	r0, r3
 810229e:	46bd      	mov	sp, r7
 81022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022a4:	4770      	bx	lr
 81022a6:	bf00      	nop
 81022a8:	10009ef4 	.word	0x10009ef4

081022ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81022ac:	b480      	push	{r7}
 81022ae:	b085      	sub	sp, #20
 81022b0:	af00      	add	r7, sp, #0
 81022b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81022b4:	687b      	ldr	r3, [r7, #4]
 81022b6:	f003 0307 	and.w	r3, r3, #7
 81022ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81022bc:	4b0c      	ldr	r3, [pc, #48]	; (81022f0 <__NVIC_SetPriorityGrouping+0x44>)
 81022be:	68db      	ldr	r3, [r3, #12]
 81022c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81022c2:	68ba      	ldr	r2, [r7, #8]
 81022c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81022c8:	4013      	ands	r3, r2
 81022ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81022cc:	68fb      	ldr	r3, [r7, #12]
 81022ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81022d0:	68bb      	ldr	r3, [r7, #8]
 81022d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81022d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81022d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81022dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81022de:	4a04      	ldr	r2, [pc, #16]	; (81022f0 <__NVIC_SetPriorityGrouping+0x44>)
 81022e0:	68bb      	ldr	r3, [r7, #8]
 81022e2:	60d3      	str	r3, [r2, #12]
}
 81022e4:	bf00      	nop
 81022e6:	3714      	adds	r7, #20
 81022e8:	46bd      	mov	sp, r7
 81022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ee:	4770      	bx	lr
 81022f0:	e000ed00 	.word	0xe000ed00

081022f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81022f4:	b480      	push	{r7}
 81022f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81022f8:	4b04      	ldr	r3, [pc, #16]	; (810230c <__NVIC_GetPriorityGrouping+0x18>)
 81022fa:	68db      	ldr	r3, [r3, #12]
 81022fc:	0a1b      	lsrs	r3, r3, #8
 81022fe:	f003 0307 	and.w	r3, r3, #7
}
 8102302:	4618      	mov	r0, r3
 8102304:	46bd      	mov	sp, r7
 8102306:	f85d 7b04 	ldr.w	r7, [sp], #4
 810230a:	4770      	bx	lr
 810230c:	e000ed00 	.word	0xe000ed00

08102310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102310:	b480      	push	{r7}
 8102312:	b083      	sub	sp, #12
 8102314:	af00      	add	r7, sp, #0
 8102316:	4603      	mov	r3, r0
 8102318:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810231a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810231e:	2b00      	cmp	r3, #0
 8102320:	db0b      	blt.n	810233a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102322:	88fb      	ldrh	r3, [r7, #6]
 8102324:	f003 021f 	and.w	r2, r3, #31
 8102328:	4907      	ldr	r1, [pc, #28]	; (8102348 <__NVIC_EnableIRQ+0x38>)
 810232a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810232e:	095b      	lsrs	r3, r3, #5
 8102330:	2001      	movs	r0, #1
 8102332:	fa00 f202 	lsl.w	r2, r0, r2
 8102336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 810233a:	bf00      	nop
 810233c:	370c      	adds	r7, #12
 810233e:	46bd      	mov	sp, r7
 8102340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102344:	4770      	bx	lr
 8102346:	bf00      	nop
 8102348:	e000e100 	.word	0xe000e100

0810234c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810234c:	b480      	push	{r7}
 810234e:	b083      	sub	sp, #12
 8102350:	af00      	add	r7, sp, #0
 8102352:	4603      	mov	r3, r0
 8102354:	6039      	str	r1, [r7, #0]
 8102356:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810235c:	2b00      	cmp	r3, #0
 810235e:	db0a      	blt.n	8102376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102360:	683b      	ldr	r3, [r7, #0]
 8102362:	b2da      	uxtb	r2, r3
 8102364:	490c      	ldr	r1, [pc, #48]	; (8102398 <__NVIC_SetPriority+0x4c>)
 8102366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810236a:	0112      	lsls	r2, r2, #4
 810236c:	b2d2      	uxtb	r2, r2
 810236e:	440b      	add	r3, r1
 8102370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102374:	e00a      	b.n	810238c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102376:	683b      	ldr	r3, [r7, #0]
 8102378:	b2da      	uxtb	r2, r3
 810237a:	4908      	ldr	r1, [pc, #32]	; (810239c <__NVIC_SetPriority+0x50>)
 810237c:	88fb      	ldrh	r3, [r7, #6]
 810237e:	f003 030f 	and.w	r3, r3, #15
 8102382:	3b04      	subs	r3, #4
 8102384:	0112      	lsls	r2, r2, #4
 8102386:	b2d2      	uxtb	r2, r2
 8102388:	440b      	add	r3, r1
 810238a:	761a      	strb	r2, [r3, #24]
}
 810238c:	bf00      	nop
 810238e:	370c      	adds	r7, #12
 8102390:	46bd      	mov	sp, r7
 8102392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102396:	4770      	bx	lr
 8102398:	e000e100 	.word	0xe000e100
 810239c:	e000ed00 	.word	0xe000ed00

081023a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81023a0:	b480      	push	{r7}
 81023a2:	b089      	sub	sp, #36	; 0x24
 81023a4:	af00      	add	r7, sp, #0
 81023a6:	60f8      	str	r0, [r7, #12]
 81023a8:	60b9      	str	r1, [r7, #8]
 81023aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81023ac:	68fb      	ldr	r3, [r7, #12]
 81023ae:	f003 0307 	and.w	r3, r3, #7
 81023b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81023b4:	69fb      	ldr	r3, [r7, #28]
 81023b6:	f1c3 0307 	rsb	r3, r3, #7
 81023ba:	2b04      	cmp	r3, #4
 81023bc:	bf28      	it	cs
 81023be:	2304      	movcs	r3, #4
 81023c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81023c2:	69fb      	ldr	r3, [r7, #28]
 81023c4:	3304      	adds	r3, #4
 81023c6:	2b06      	cmp	r3, #6
 81023c8:	d902      	bls.n	81023d0 <NVIC_EncodePriority+0x30>
 81023ca:	69fb      	ldr	r3, [r7, #28]
 81023cc:	3b03      	subs	r3, #3
 81023ce:	e000      	b.n	81023d2 <NVIC_EncodePriority+0x32>
 81023d0:	2300      	movs	r3, #0
 81023d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81023d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81023d8:	69bb      	ldr	r3, [r7, #24]
 81023da:	fa02 f303 	lsl.w	r3, r2, r3
 81023de:	43da      	mvns	r2, r3
 81023e0:	68bb      	ldr	r3, [r7, #8]
 81023e2:	401a      	ands	r2, r3
 81023e4:	697b      	ldr	r3, [r7, #20]
 81023e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81023e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 81023ec:	697b      	ldr	r3, [r7, #20]
 81023ee:	fa01 f303 	lsl.w	r3, r1, r3
 81023f2:	43d9      	mvns	r1, r3
 81023f4:	687b      	ldr	r3, [r7, #4]
 81023f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81023f8:	4313      	orrs	r3, r2
         );
}
 81023fa:	4618      	mov	r0, r3
 81023fc:	3724      	adds	r7, #36	; 0x24
 81023fe:	46bd      	mov	sp, r7
 8102400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102404:	4770      	bx	lr
	...

08102408 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8102408:	b480      	push	{r7}
 810240a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810240c:	f3bf 8f4f 	dsb	sy
}
 8102410:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8102412:	4b06      	ldr	r3, [pc, #24]	; (810242c <__NVIC_SystemReset+0x24>)
 8102414:	68db      	ldr	r3, [r3, #12]
 8102416:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 810241a:	4904      	ldr	r1, [pc, #16]	; (810242c <__NVIC_SystemReset+0x24>)
 810241c:	4b04      	ldr	r3, [pc, #16]	; (8102430 <__NVIC_SystemReset+0x28>)
 810241e:	4313      	orrs	r3, r2
 8102420:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8102422:	f3bf 8f4f 	dsb	sy
}
 8102426:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8102428:	bf00      	nop
 810242a:	e7fd      	b.n	8102428 <__NVIC_SystemReset+0x20>
 810242c:	e000ed00 	.word	0xe000ed00
 8102430:	05fa0004 	.word	0x05fa0004

08102434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102434:	b580      	push	{r7, lr}
 8102436:	b082      	sub	sp, #8
 8102438:	af00      	add	r7, sp, #0
 810243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810243c:	6878      	ldr	r0, [r7, #4]
 810243e:	f7ff ff35 	bl	81022ac <__NVIC_SetPriorityGrouping>
}
 8102442:	bf00      	nop
 8102444:	3708      	adds	r7, #8
 8102446:	46bd      	mov	sp, r7
 8102448:	bd80      	pop	{r7, pc}

0810244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810244a:	b580      	push	{r7, lr}
 810244c:	b086      	sub	sp, #24
 810244e:	af00      	add	r7, sp, #0
 8102450:	4603      	mov	r3, r0
 8102452:	60b9      	str	r1, [r7, #8]
 8102454:	607a      	str	r2, [r7, #4]
 8102456:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102458:	f7ff ff4c 	bl	81022f4 <__NVIC_GetPriorityGrouping>
 810245c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810245e:	687a      	ldr	r2, [r7, #4]
 8102460:	68b9      	ldr	r1, [r7, #8]
 8102462:	6978      	ldr	r0, [r7, #20]
 8102464:	f7ff ff9c 	bl	81023a0 <NVIC_EncodePriority>
 8102468:	4602      	mov	r2, r0
 810246a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810246e:	4611      	mov	r1, r2
 8102470:	4618      	mov	r0, r3
 8102472:	f7ff ff6b 	bl	810234c <__NVIC_SetPriority>
}
 8102476:	bf00      	nop
 8102478:	3718      	adds	r7, #24
 810247a:	46bd      	mov	sp, r7
 810247c:	bd80      	pop	{r7, pc}

0810247e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810247e:	b580      	push	{r7, lr}
 8102480:	b082      	sub	sp, #8
 8102482:	af00      	add	r7, sp, #0
 8102484:	4603      	mov	r3, r0
 8102486:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810248c:	4618      	mov	r0, r3
 810248e:	f7ff ff3f 	bl	8102310 <__NVIC_EnableIRQ>
}
 8102492:	bf00      	nop
 8102494:	3708      	adds	r7, #8
 8102496:	46bd      	mov	sp, r7
 8102498:	bd80      	pop	{r7, pc}

0810249a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 810249a:	b580      	push	{r7, lr}
 810249c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 810249e:	f7ff ffb3 	bl	8102408 <__NVIC_SystemReset>
	...

081024a4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81024a4:	b480      	push	{r7}
 81024a6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81024a8:	4b07      	ldr	r3, [pc, #28]	; (81024c8 <HAL_GetCurrentCPUID+0x24>)
 81024aa:	681b      	ldr	r3, [r3, #0]
 81024ac:	091b      	lsrs	r3, r3, #4
 81024ae:	f003 030f 	and.w	r3, r3, #15
 81024b2:	2b07      	cmp	r3, #7
 81024b4:	d101      	bne.n	81024ba <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81024b6:	2303      	movs	r3, #3
 81024b8:	e000      	b.n	81024bc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81024ba:	2301      	movs	r3, #1
  }
}
 81024bc:	4618      	mov	r0, r3
 81024be:	46bd      	mov	sp, r7
 81024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024c4:	4770      	bx	lr
 81024c6:	bf00      	nop
 81024c8:	e000ed00 	.word	0xe000ed00

081024cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81024cc:	b580      	push	{r7, lr}
 81024ce:	b086      	sub	sp, #24
 81024d0:	af00      	add	r7, sp, #0
 81024d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81024d4:	f7ff fede 	bl	8102294 <HAL_GetTick>
 81024d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	2b00      	cmp	r3, #0
 81024de:	d101      	bne.n	81024e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81024e0:	2301      	movs	r3, #1
 81024e2:	e314      	b.n	8102b0e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	4a66      	ldr	r2, [pc, #408]	; (8102684 <HAL_DMA_Init+0x1b8>)
 81024ea:	4293      	cmp	r3, r2
 81024ec:	d04a      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	681b      	ldr	r3, [r3, #0]
 81024f2:	4a65      	ldr	r2, [pc, #404]	; (8102688 <HAL_DMA_Init+0x1bc>)
 81024f4:	4293      	cmp	r3, r2
 81024f6:	d045      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 81024f8:	687b      	ldr	r3, [r7, #4]
 81024fa:	681b      	ldr	r3, [r3, #0]
 81024fc:	4a63      	ldr	r2, [pc, #396]	; (810268c <HAL_DMA_Init+0x1c0>)
 81024fe:	4293      	cmp	r3, r2
 8102500:	d040      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	681b      	ldr	r3, [r3, #0]
 8102506:	4a62      	ldr	r2, [pc, #392]	; (8102690 <HAL_DMA_Init+0x1c4>)
 8102508:	4293      	cmp	r3, r2
 810250a:	d03b      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	681b      	ldr	r3, [r3, #0]
 8102510:	4a60      	ldr	r2, [pc, #384]	; (8102694 <HAL_DMA_Init+0x1c8>)
 8102512:	4293      	cmp	r3, r2
 8102514:	d036      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	681b      	ldr	r3, [r3, #0]
 810251a:	4a5f      	ldr	r2, [pc, #380]	; (8102698 <HAL_DMA_Init+0x1cc>)
 810251c:	4293      	cmp	r3, r2
 810251e:	d031      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	681b      	ldr	r3, [r3, #0]
 8102524:	4a5d      	ldr	r2, [pc, #372]	; (810269c <HAL_DMA_Init+0x1d0>)
 8102526:	4293      	cmp	r3, r2
 8102528:	d02c      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810252a:	687b      	ldr	r3, [r7, #4]
 810252c:	681b      	ldr	r3, [r3, #0]
 810252e:	4a5c      	ldr	r2, [pc, #368]	; (81026a0 <HAL_DMA_Init+0x1d4>)
 8102530:	4293      	cmp	r3, r2
 8102532:	d027      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102534:	687b      	ldr	r3, [r7, #4]
 8102536:	681b      	ldr	r3, [r3, #0]
 8102538:	4a5a      	ldr	r2, [pc, #360]	; (81026a4 <HAL_DMA_Init+0x1d8>)
 810253a:	4293      	cmp	r3, r2
 810253c:	d022      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	681b      	ldr	r3, [r3, #0]
 8102542:	4a59      	ldr	r2, [pc, #356]	; (81026a8 <HAL_DMA_Init+0x1dc>)
 8102544:	4293      	cmp	r3, r2
 8102546:	d01d      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	681b      	ldr	r3, [r3, #0]
 810254c:	4a57      	ldr	r2, [pc, #348]	; (81026ac <HAL_DMA_Init+0x1e0>)
 810254e:	4293      	cmp	r3, r2
 8102550:	d018      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	4a56      	ldr	r2, [pc, #344]	; (81026b0 <HAL_DMA_Init+0x1e4>)
 8102558:	4293      	cmp	r3, r2
 810255a:	d013      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810255c:	687b      	ldr	r3, [r7, #4]
 810255e:	681b      	ldr	r3, [r3, #0]
 8102560:	4a54      	ldr	r2, [pc, #336]	; (81026b4 <HAL_DMA_Init+0x1e8>)
 8102562:	4293      	cmp	r3, r2
 8102564:	d00e      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	681b      	ldr	r3, [r3, #0]
 810256a:	4a53      	ldr	r2, [pc, #332]	; (81026b8 <HAL_DMA_Init+0x1ec>)
 810256c:	4293      	cmp	r3, r2
 810256e:	d009      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 8102570:	687b      	ldr	r3, [r7, #4]
 8102572:	681b      	ldr	r3, [r3, #0]
 8102574:	4a51      	ldr	r2, [pc, #324]	; (81026bc <HAL_DMA_Init+0x1f0>)
 8102576:	4293      	cmp	r3, r2
 8102578:	d004      	beq.n	8102584 <HAL_DMA_Init+0xb8>
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	681b      	ldr	r3, [r3, #0]
 810257e:	4a50      	ldr	r2, [pc, #320]	; (81026c0 <HAL_DMA_Init+0x1f4>)
 8102580:	4293      	cmp	r3, r2
 8102582:	d101      	bne.n	8102588 <HAL_DMA_Init+0xbc>
 8102584:	2301      	movs	r3, #1
 8102586:	e000      	b.n	810258a <HAL_DMA_Init+0xbe>
 8102588:	2300      	movs	r3, #0
 810258a:	2b00      	cmp	r3, #0
 810258c:	f000 813b 	beq.w	8102806 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	2200      	movs	r2, #0
 8102594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102598:	687b      	ldr	r3, [r7, #4]
 810259a:	2202      	movs	r2, #2
 810259c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81025a0:	687b      	ldr	r3, [r7, #4]
 81025a2:	681b      	ldr	r3, [r3, #0]
 81025a4:	4a37      	ldr	r2, [pc, #220]	; (8102684 <HAL_DMA_Init+0x1b8>)
 81025a6:	4293      	cmp	r3, r2
 81025a8:	d04a      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	681b      	ldr	r3, [r3, #0]
 81025ae:	4a36      	ldr	r2, [pc, #216]	; (8102688 <HAL_DMA_Init+0x1bc>)
 81025b0:	4293      	cmp	r3, r2
 81025b2:	d045      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	4a34      	ldr	r2, [pc, #208]	; (810268c <HAL_DMA_Init+0x1c0>)
 81025ba:	4293      	cmp	r3, r2
 81025bc:	d040      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	681b      	ldr	r3, [r3, #0]
 81025c2:	4a33      	ldr	r2, [pc, #204]	; (8102690 <HAL_DMA_Init+0x1c4>)
 81025c4:	4293      	cmp	r3, r2
 81025c6:	d03b      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	681b      	ldr	r3, [r3, #0]
 81025cc:	4a31      	ldr	r2, [pc, #196]	; (8102694 <HAL_DMA_Init+0x1c8>)
 81025ce:	4293      	cmp	r3, r2
 81025d0:	d036      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	4a30      	ldr	r2, [pc, #192]	; (8102698 <HAL_DMA_Init+0x1cc>)
 81025d8:	4293      	cmp	r3, r2
 81025da:	d031      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	681b      	ldr	r3, [r3, #0]
 81025e0:	4a2e      	ldr	r2, [pc, #184]	; (810269c <HAL_DMA_Init+0x1d0>)
 81025e2:	4293      	cmp	r3, r2
 81025e4:	d02c      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	681b      	ldr	r3, [r3, #0]
 81025ea:	4a2d      	ldr	r2, [pc, #180]	; (81026a0 <HAL_DMA_Init+0x1d4>)
 81025ec:	4293      	cmp	r3, r2
 81025ee:	d027      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025f0:	687b      	ldr	r3, [r7, #4]
 81025f2:	681b      	ldr	r3, [r3, #0]
 81025f4:	4a2b      	ldr	r2, [pc, #172]	; (81026a4 <HAL_DMA_Init+0x1d8>)
 81025f6:	4293      	cmp	r3, r2
 81025f8:	d022      	beq.n	8102640 <HAL_DMA_Init+0x174>
 81025fa:	687b      	ldr	r3, [r7, #4]
 81025fc:	681b      	ldr	r3, [r3, #0]
 81025fe:	4a2a      	ldr	r2, [pc, #168]	; (81026a8 <HAL_DMA_Init+0x1dc>)
 8102600:	4293      	cmp	r3, r2
 8102602:	d01d      	beq.n	8102640 <HAL_DMA_Init+0x174>
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	681b      	ldr	r3, [r3, #0]
 8102608:	4a28      	ldr	r2, [pc, #160]	; (81026ac <HAL_DMA_Init+0x1e0>)
 810260a:	4293      	cmp	r3, r2
 810260c:	d018      	beq.n	8102640 <HAL_DMA_Init+0x174>
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	681b      	ldr	r3, [r3, #0]
 8102612:	4a27      	ldr	r2, [pc, #156]	; (81026b0 <HAL_DMA_Init+0x1e4>)
 8102614:	4293      	cmp	r3, r2
 8102616:	d013      	beq.n	8102640 <HAL_DMA_Init+0x174>
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	681b      	ldr	r3, [r3, #0]
 810261c:	4a25      	ldr	r2, [pc, #148]	; (81026b4 <HAL_DMA_Init+0x1e8>)
 810261e:	4293      	cmp	r3, r2
 8102620:	d00e      	beq.n	8102640 <HAL_DMA_Init+0x174>
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	681b      	ldr	r3, [r3, #0]
 8102626:	4a24      	ldr	r2, [pc, #144]	; (81026b8 <HAL_DMA_Init+0x1ec>)
 8102628:	4293      	cmp	r3, r2
 810262a:	d009      	beq.n	8102640 <HAL_DMA_Init+0x174>
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	681b      	ldr	r3, [r3, #0]
 8102630:	4a22      	ldr	r2, [pc, #136]	; (81026bc <HAL_DMA_Init+0x1f0>)
 8102632:	4293      	cmp	r3, r2
 8102634:	d004      	beq.n	8102640 <HAL_DMA_Init+0x174>
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	681b      	ldr	r3, [r3, #0]
 810263a:	4a21      	ldr	r2, [pc, #132]	; (81026c0 <HAL_DMA_Init+0x1f4>)
 810263c:	4293      	cmp	r3, r2
 810263e:	d108      	bne.n	8102652 <HAL_DMA_Init+0x186>
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	681b      	ldr	r3, [r3, #0]
 8102644:	681a      	ldr	r2, [r3, #0]
 8102646:	687b      	ldr	r3, [r7, #4]
 8102648:	681b      	ldr	r3, [r3, #0]
 810264a:	f022 0201 	bic.w	r2, r2, #1
 810264e:	601a      	str	r2, [r3, #0]
 8102650:	e007      	b.n	8102662 <HAL_DMA_Init+0x196>
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	681b      	ldr	r3, [r3, #0]
 8102656:	681a      	ldr	r2, [r3, #0]
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	681b      	ldr	r3, [r3, #0]
 810265c:	f022 0201 	bic.w	r2, r2, #1
 8102660:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102662:	e02f      	b.n	81026c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102664:	f7ff fe16 	bl	8102294 <HAL_GetTick>
 8102668:	4602      	mov	r2, r0
 810266a:	693b      	ldr	r3, [r7, #16]
 810266c:	1ad3      	subs	r3, r2, r3
 810266e:	2b05      	cmp	r3, #5
 8102670:	d928      	bls.n	81026c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	2220      	movs	r2, #32
 8102676:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8102678:	687b      	ldr	r3, [r7, #4]
 810267a:	2203      	movs	r2, #3
 810267c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8102680:	2301      	movs	r3, #1
 8102682:	e244      	b.n	8102b0e <HAL_DMA_Init+0x642>
 8102684:	40020010 	.word	0x40020010
 8102688:	40020028 	.word	0x40020028
 810268c:	40020040 	.word	0x40020040
 8102690:	40020058 	.word	0x40020058
 8102694:	40020070 	.word	0x40020070
 8102698:	40020088 	.word	0x40020088
 810269c:	400200a0 	.word	0x400200a0
 81026a0:	400200b8 	.word	0x400200b8
 81026a4:	40020410 	.word	0x40020410
 81026a8:	40020428 	.word	0x40020428
 81026ac:	40020440 	.word	0x40020440
 81026b0:	40020458 	.word	0x40020458
 81026b4:	40020470 	.word	0x40020470
 81026b8:	40020488 	.word	0x40020488
 81026bc:	400204a0 	.word	0x400204a0
 81026c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	681b      	ldr	r3, [r3, #0]
 81026c8:	681b      	ldr	r3, [r3, #0]
 81026ca:	f003 0301 	and.w	r3, r3, #1
 81026ce:	2b00      	cmp	r3, #0
 81026d0:	d1c8      	bne.n	8102664 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81026d2:	687b      	ldr	r3, [r7, #4]
 81026d4:	681b      	ldr	r3, [r3, #0]
 81026d6:	681b      	ldr	r3, [r3, #0]
 81026d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81026da:	697a      	ldr	r2, [r7, #20]
 81026dc:	4b84      	ldr	r3, [pc, #528]	; (81028f0 <HAL_DMA_Init+0x424>)
 81026de:	4013      	ands	r3, r2
 81026e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81026e2:	687b      	ldr	r3, [r7, #4]
 81026e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81026ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81026ec:	687b      	ldr	r3, [r7, #4]
 81026ee:	691b      	ldr	r3, [r3, #16]
 81026f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81026f2:	687b      	ldr	r3, [r7, #4]
 81026f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81026f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81026f8:	687b      	ldr	r3, [r7, #4]
 81026fa:	699b      	ldr	r3, [r3, #24]
 81026fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102702:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102704:	687b      	ldr	r3, [r7, #4]
 8102706:	6a1b      	ldr	r3, [r3, #32]
 8102708:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810270a:	697a      	ldr	r2, [r7, #20]
 810270c:	4313      	orrs	r3, r2
 810270e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102710:	687b      	ldr	r3, [r7, #4]
 8102712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102714:	2b04      	cmp	r3, #4
 8102716:	d107      	bne.n	8102728 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810271c:	687b      	ldr	r3, [r7, #4]
 810271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102720:	4313      	orrs	r3, r2
 8102722:	697a      	ldr	r2, [r7, #20]
 8102724:	4313      	orrs	r3, r2
 8102726:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102728:	4b72      	ldr	r3, [pc, #456]	; (81028f4 <HAL_DMA_Init+0x428>)
 810272a:	681b      	ldr	r3, [r3, #0]
 810272c:	0c1b      	lsrs	r3, r3, #16
 810272e:	041b      	lsls	r3, r3, #16
 8102730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102734:	d328      	bcc.n	8102788 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	685b      	ldr	r3, [r3, #4]
 810273a:	2b28      	cmp	r3, #40	; 0x28
 810273c:	d903      	bls.n	8102746 <HAL_DMA_Init+0x27a>
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	685b      	ldr	r3, [r3, #4]
 8102742:	2b2e      	cmp	r3, #46	; 0x2e
 8102744:	d917      	bls.n	8102776 <HAL_DMA_Init+0x2aa>
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	685b      	ldr	r3, [r3, #4]
 810274a:	2b3e      	cmp	r3, #62	; 0x3e
 810274c:	d903      	bls.n	8102756 <HAL_DMA_Init+0x28a>
 810274e:	687b      	ldr	r3, [r7, #4]
 8102750:	685b      	ldr	r3, [r3, #4]
 8102752:	2b42      	cmp	r3, #66	; 0x42
 8102754:	d90f      	bls.n	8102776 <HAL_DMA_Init+0x2aa>
 8102756:	687b      	ldr	r3, [r7, #4]
 8102758:	685b      	ldr	r3, [r3, #4]
 810275a:	2b46      	cmp	r3, #70	; 0x46
 810275c:	d903      	bls.n	8102766 <HAL_DMA_Init+0x29a>
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	685b      	ldr	r3, [r3, #4]
 8102762:	2b48      	cmp	r3, #72	; 0x48
 8102764:	d907      	bls.n	8102776 <HAL_DMA_Init+0x2aa>
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	685b      	ldr	r3, [r3, #4]
 810276a:	2b4e      	cmp	r3, #78	; 0x4e
 810276c:	d905      	bls.n	810277a <HAL_DMA_Init+0x2ae>
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	685b      	ldr	r3, [r3, #4]
 8102772:	2b52      	cmp	r3, #82	; 0x52
 8102774:	d801      	bhi.n	810277a <HAL_DMA_Init+0x2ae>
 8102776:	2301      	movs	r3, #1
 8102778:	e000      	b.n	810277c <HAL_DMA_Init+0x2b0>
 810277a:	2300      	movs	r3, #0
 810277c:	2b00      	cmp	r3, #0
 810277e:	d003      	beq.n	8102788 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8102780:	697b      	ldr	r3, [r7, #20]
 8102782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102786:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	681b      	ldr	r3, [r3, #0]
 810278c:	697a      	ldr	r2, [r7, #20]
 810278e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	695b      	ldr	r3, [r3, #20]
 8102796:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8102798:	697b      	ldr	r3, [r7, #20]
 810279a:	f023 0307 	bic.w	r3, r3, #7
 810279e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81027a4:	697a      	ldr	r2, [r7, #20]
 81027a6:	4313      	orrs	r3, r2
 81027a8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81027ae:	2b04      	cmp	r3, #4
 81027b0:	d117      	bne.n	81027e2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81027b6:	697a      	ldr	r2, [r7, #20]
 81027b8:	4313      	orrs	r3, r2
 81027ba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81027bc:	687b      	ldr	r3, [r7, #4]
 81027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81027c0:	2b00      	cmp	r3, #0
 81027c2:	d00e      	beq.n	81027e2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81027c4:	6878      	ldr	r0, [r7, #4]
 81027c6:	f002 f811 	bl	81047ec <DMA_CheckFifoParam>
 81027ca:	4603      	mov	r3, r0
 81027cc:	2b00      	cmp	r3, #0
 81027ce:	d008      	beq.n	81027e2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81027d0:	687b      	ldr	r3, [r7, #4]
 81027d2:	2240      	movs	r2, #64	; 0x40
 81027d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	2201      	movs	r2, #1
 81027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 81027de:	2301      	movs	r3, #1
 81027e0:	e195      	b.n	8102b0e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81027e2:	687b      	ldr	r3, [r7, #4]
 81027e4:	681b      	ldr	r3, [r3, #0]
 81027e6:	697a      	ldr	r2, [r7, #20]
 81027e8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81027ea:	6878      	ldr	r0, [r7, #4]
 81027ec:	f001 ff4c 	bl	8104688 <DMA_CalcBaseAndBitshift>
 81027f0:	4603      	mov	r3, r0
 81027f2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81027f8:	f003 031f 	and.w	r3, r3, #31
 81027fc:	223f      	movs	r2, #63	; 0x3f
 81027fe:	409a      	lsls	r2, r3
 8102800:	68bb      	ldr	r3, [r7, #8]
 8102802:	609a      	str	r2, [r3, #8]
 8102804:	e0cb      	b.n	810299e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	681b      	ldr	r3, [r3, #0]
 810280a:	4a3b      	ldr	r2, [pc, #236]	; (81028f8 <HAL_DMA_Init+0x42c>)
 810280c:	4293      	cmp	r3, r2
 810280e:	d022      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	681b      	ldr	r3, [r3, #0]
 8102814:	4a39      	ldr	r2, [pc, #228]	; (81028fc <HAL_DMA_Init+0x430>)
 8102816:	4293      	cmp	r3, r2
 8102818:	d01d      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	681b      	ldr	r3, [r3, #0]
 810281e:	4a38      	ldr	r2, [pc, #224]	; (8102900 <HAL_DMA_Init+0x434>)
 8102820:	4293      	cmp	r3, r2
 8102822:	d018      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	681b      	ldr	r3, [r3, #0]
 8102828:	4a36      	ldr	r2, [pc, #216]	; (8102904 <HAL_DMA_Init+0x438>)
 810282a:	4293      	cmp	r3, r2
 810282c:	d013      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	681b      	ldr	r3, [r3, #0]
 8102832:	4a35      	ldr	r2, [pc, #212]	; (8102908 <HAL_DMA_Init+0x43c>)
 8102834:	4293      	cmp	r3, r2
 8102836:	d00e      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	681b      	ldr	r3, [r3, #0]
 810283c:	4a33      	ldr	r2, [pc, #204]	; (810290c <HAL_DMA_Init+0x440>)
 810283e:	4293      	cmp	r3, r2
 8102840:	d009      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	4a32      	ldr	r2, [pc, #200]	; (8102910 <HAL_DMA_Init+0x444>)
 8102848:	4293      	cmp	r3, r2
 810284a:	d004      	beq.n	8102856 <HAL_DMA_Init+0x38a>
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	681b      	ldr	r3, [r3, #0]
 8102850:	4a30      	ldr	r2, [pc, #192]	; (8102914 <HAL_DMA_Init+0x448>)
 8102852:	4293      	cmp	r3, r2
 8102854:	d101      	bne.n	810285a <HAL_DMA_Init+0x38e>
 8102856:	2301      	movs	r3, #1
 8102858:	e000      	b.n	810285c <HAL_DMA_Init+0x390>
 810285a:	2300      	movs	r3, #0
 810285c:	2b00      	cmp	r3, #0
 810285e:	f000 8095 	beq.w	810298c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	681b      	ldr	r3, [r3, #0]
 8102866:	4a24      	ldr	r2, [pc, #144]	; (81028f8 <HAL_DMA_Init+0x42c>)
 8102868:	4293      	cmp	r3, r2
 810286a:	d021      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 810286c:	687b      	ldr	r3, [r7, #4]
 810286e:	681b      	ldr	r3, [r3, #0]
 8102870:	4a22      	ldr	r2, [pc, #136]	; (81028fc <HAL_DMA_Init+0x430>)
 8102872:	4293      	cmp	r3, r2
 8102874:	d01c      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	681b      	ldr	r3, [r3, #0]
 810287a:	4a21      	ldr	r2, [pc, #132]	; (8102900 <HAL_DMA_Init+0x434>)
 810287c:	4293      	cmp	r3, r2
 810287e:	d017      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 8102880:	687b      	ldr	r3, [r7, #4]
 8102882:	681b      	ldr	r3, [r3, #0]
 8102884:	4a1f      	ldr	r2, [pc, #124]	; (8102904 <HAL_DMA_Init+0x438>)
 8102886:	4293      	cmp	r3, r2
 8102888:	d012      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 810288a:	687b      	ldr	r3, [r7, #4]
 810288c:	681b      	ldr	r3, [r3, #0]
 810288e:	4a1e      	ldr	r2, [pc, #120]	; (8102908 <HAL_DMA_Init+0x43c>)
 8102890:	4293      	cmp	r3, r2
 8102892:	d00d      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 8102894:	687b      	ldr	r3, [r7, #4]
 8102896:	681b      	ldr	r3, [r3, #0]
 8102898:	4a1c      	ldr	r2, [pc, #112]	; (810290c <HAL_DMA_Init+0x440>)
 810289a:	4293      	cmp	r3, r2
 810289c:	d008      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 810289e:	687b      	ldr	r3, [r7, #4]
 81028a0:	681b      	ldr	r3, [r3, #0]
 81028a2:	4a1b      	ldr	r2, [pc, #108]	; (8102910 <HAL_DMA_Init+0x444>)
 81028a4:	4293      	cmp	r3, r2
 81028a6:	d003      	beq.n	81028b0 <HAL_DMA_Init+0x3e4>
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	681b      	ldr	r3, [r3, #0]
 81028ac:	4a19      	ldr	r2, [pc, #100]	; (8102914 <HAL_DMA_Init+0x448>)
 81028ae:	4293      	cmp	r3, r2
 81028b0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81028b2:	687b      	ldr	r3, [r7, #4]
 81028b4:	2200      	movs	r2, #0
 81028b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81028ba:	687b      	ldr	r3, [r7, #4]
 81028bc:	2202      	movs	r2, #2
 81028be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	681b      	ldr	r3, [r3, #0]
 81028c8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81028ca:	697b      	ldr	r3, [r7, #20]
 81028cc:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81028d0:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81028d4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	689b      	ldr	r3, [r3, #8]
 81028da:	2b40      	cmp	r3, #64	; 0x40
 81028dc:	d01c      	beq.n	8102918 <HAL_DMA_Init+0x44c>
 81028de:	687b      	ldr	r3, [r7, #4]
 81028e0:	689b      	ldr	r3, [r3, #8]
 81028e2:	2b80      	cmp	r3, #128	; 0x80
 81028e4:	d102      	bne.n	81028ec <HAL_DMA_Init+0x420>
 81028e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81028ea:	e016      	b.n	810291a <HAL_DMA_Init+0x44e>
 81028ec:	2300      	movs	r3, #0
 81028ee:	e014      	b.n	810291a <HAL_DMA_Init+0x44e>
 81028f0:	fe10803f 	.word	0xfe10803f
 81028f4:	5c001000 	.word	0x5c001000
 81028f8:	58025408 	.word	0x58025408
 81028fc:	5802541c 	.word	0x5802541c
 8102900:	58025430 	.word	0x58025430
 8102904:	58025444 	.word	0x58025444
 8102908:	58025458 	.word	0x58025458
 810290c:	5802546c 	.word	0x5802546c
 8102910:	58025480 	.word	0x58025480
 8102914:	58025494 	.word	0x58025494
 8102918:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810291a:	687a      	ldr	r2, [r7, #4]
 810291c:	68d2      	ldr	r2, [r2, #12]
 810291e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102920:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102922:	687b      	ldr	r3, [r7, #4]
 8102924:	691b      	ldr	r3, [r3, #16]
 8102926:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102928:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	695b      	ldr	r3, [r3, #20]
 810292e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102930:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102932:	687b      	ldr	r3, [r7, #4]
 8102934:	699b      	ldr	r3, [r3, #24]
 8102936:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102938:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810293a:	687b      	ldr	r3, [r7, #4]
 810293c:	69db      	ldr	r3, [r3, #28]
 810293e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102940:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102942:	687b      	ldr	r3, [r7, #4]
 8102944:	6a1b      	ldr	r3, [r3, #32]
 8102946:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102948:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810294a:	697a      	ldr	r2, [r7, #20]
 810294c:	4313      	orrs	r3, r2
 810294e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102950:	687b      	ldr	r3, [r7, #4]
 8102952:	681b      	ldr	r3, [r3, #0]
 8102954:	697a      	ldr	r2, [r7, #20]
 8102956:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	461a      	mov	r2, r3
 810295e:	4b6e      	ldr	r3, [pc, #440]	; (8102b18 <HAL_DMA_Init+0x64c>)
 8102960:	4413      	add	r3, r2
 8102962:	4a6e      	ldr	r2, [pc, #440]	; (8102b1c <HAL_DMA_Init+0x650>)
 8102964:	fba2 2303 	umull	r2, r3, r2, r3
 8102968:	091b      	lsrs	r3, r3, #4
 810296a:	009a      	lsls	r2, r3, #2
 810296c:	687b      	ldr	r3, [r7, #4]
 810296e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102970:	6878      	ldr	r0, [r7, #4]
 8102972:	f001 fe89 	bl	8104688 <DMA_CalcBaseAndBitshift>
 8102976:	4603      	mov	r3, r0
 8102978:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810297e:	f003 031f 	and.w	r3, r3, #31
 8102982:	2201      	movs	r2, #1
 8102984:	409a      	lsls	r2, r3
 8102986:	68fb      	ldr	r3, [r7, #12]
 8102988:	605a      	str	r2, [r3, #4]
 810298a:	e008      	b.n	810299e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 810298c:	687b      	ldr	r3, [r7, #4]
 810298e:	2240      	movs	r2, #64	; 0x40
 8102990:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	2203      	movs	r2, #3
 8102996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 810299a:	2301      	movs	r3, #1
 810299c:	e0b7      	b.n	8102b0e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	681b      	ldr	r3, [r3, #0]
 81029a2:	4a5f      	ldr	r2, [pc, #380]	; (8102b20 <HAL_DMA_Init+0x654>)
 81029a4:	4293      	cmp	r3, r2
 81029a6:	d072      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	4a5d      	ldr	r2, [pc, #372]	; (8102b24 <HAL_DMA_Init+0x658>)
 81029ae:	4293      	cmp	r3, r2
 81029b0:	d06d      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029b2:	687b      	ldr	r3, [r7, #4]
 81029b4:	681b      	ldr	r3, [r3, #0]
 81029b6:	4a5c      	ldr	r2, [pc, #368]	; (8102b28 <HAL_DMA_Init+0x65c>)
 81029b8:	4293      	cmp	r3, r2
 81029ba:	d068      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029bc:	687b      	ldr	r3, [r7, #4]
 81029be:	681b      	ldr	r3, [r3, #0]
 81029c0:	4a5a      	ldr	r2, [pc, #360]	; (8102b2c <HAL_DMA_Init+0x660>)
 81029c2:	4293      	cmp	r3, r2
 81029c4:	d063      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	681b      	ldr	r3, [r3, #0]
 81029ca:	4a59      	ldr	r2, [pc, #356]	; (8102b30 <HAL_DMA_Init+0x664>)
 81029cc:	4293      	cmp	r3, r2
 81029ce:	d05e      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	681b      	ldr	r3, [r3, #0]
 81029d4:	4a57      	ldr	r2, [pc, #348]	; (8102b34 <HAL_DMA_Init+0x668>)
 81029d6:	4293      	cmp	r3, r2
 81029d8:	d059      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	681b      	ldr	r3, [r3, #0]
 81029de:	4a56      	ldr	r2, [pc, #344]	; (8102b38 <HAL_DMA_Init+0x66c>)
 81029e0:	4293      	cmp	r3, r2
 81029e2:	d054      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029e4:	687b      	ldr	r3, [r7, #4]
 81029e6:	681b      	ldr	r3, [r3, #0]
 81029e8:	4a54      	ldr	r2, [pc, #336]	; (8102b3c <HAL_DMA_Init+0x670>)
 81029ea:	4293      	cmp	r3, r2
 81029ec:	d04f      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029ee:	687b      	ldr	r3, [r7, #4]
 81029f0:	681b      	ldr	r3, [r3, #0]
 81029f2:	4a53      	ldr	r2, [pc, #332]	; (8102b40 <HAL_DMA_Init+0x674>)
 81029f4:	4293      	cmp	r3, r2
 81029f6:	d04a      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 81029f8:	687b      	ldr	r3, [r7, #4]
 81029fa:	681b      	ldr	r3, [r3, #0]
 81029fc:	4a51      	ldr	r2, [pc, #324]	; (8102b44 <HAL_DMA_Init+0x678>)
 81029fe:	4293      	cmp	r3, r2
 8102a00:	d045      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	681b      	ldr	r3, [r3, #0]
 8102a06:	4a50      	ldr	r2, [pc, #320]	; (8102b48 <HAL_DMA_Init+0x67c>)
 8102a08:	4293      	cmp	r3, r2
 8102a0a:	d040      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	681b      	ldr	r3, [r3, #0]
 8102a10:	4a4e      	ldr	r2, [pc, #312]	; (8102b4c <HAL_DMA_Init+0x680>)
 8102a12:	4293      	cmp	r3, r2
 8102a14:	d03b      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a16:	687b      	ldr	r3, [r7, #4]
 8102a18:	681b      	ldr	r3, [r3, #0]
 8102a1a:	4a4d      	ldr	r2, [pc, #308]	; (8102b50 <HAL_DMA_Init+0x684>)
 8102a1c:	4293      	cmp	r3, r2
 8102a1e:	d036      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a20:	687b      	ldr	r3, [r7, #4]
 8102a22:	681b      	ldr	r3, [r3, #0]
 8102a24:	4a4b      	ldr	r2, [pc, #300]	; (8102b54 <HAL_DMA_Init+0x688>)
 8102a26:	4293      	cmp	r3, r2
 8102a28:	d031      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	681b      	ldr	r3, [r3, #0]
 8102a2e:	4a4a      	ldr	r2, [pc, #296]	; (8102b58 <HAL_DMA_Init+0x68c>)
 8102a30:	4293      	cmp	r3, r2
 8102a32:	d02c      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	681b      	ldr	r3, [r3, #0]
 8102a38:	4a48      	ldr	r2, [pc, #288]	; (8102b5c <HAL_DMA_Init+0x690>)
 8102a3a:	4293      	cmp	r3, r2
 8102a3c:	d027      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	4a47      	ldr	r2, [pc, #284]	; (8102b60 <HAL_DMA_Init+0x694>)
 8102a44:	4293      	cmp	r3, r2
 8102a46:	d022      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	681b      	ldr	r3, [r3, #0]
 8102a4c:	4a45      	ldr	r2, [pc, #276]	; (8102b64 <HAL_DMA_Init+0x698>)
 8102a4e:	4293      	cmp	r3, r2
 8102a50:	d01d      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	681b      	ldr	r3, [r3, #0]
 8102a56:	4a44      	ldr	r2, [pc, #272]	; (8102b68 <HAL_DMA_Init+0x69c>)
 8102a58:	4293      	cmp	r3, r2
 8102a5a:	d018      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a5c:	687b      	ldr	r3, [r7, #4]
 8102a5e:	681b      	ldr	r3, [r3, #0]
 8102a60:	4a42      	ldr	r2, [pc, #264]	; (8102b6c <HAL_DMA_Init+0x6a0>)
 8102a62:	4293      	cmp	r3, r2
 8102a64:	d013      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	681b      	ldr	r3, [r3, #0]
 8102a6a:	4a41      	ldr	r2, [pc, #260]	; (8102b70 <HAL_DMA_Init+0x6a4>)
 8102a6c:	4293      	cmp	r3, r2
 8102a6e:	d00e      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a70:	687b      	ldr	r3, [r7, #4]
 8102a72:	681b      	ldr	r3, [r3, #0]
 8102a74:	4a3f      	ldr	r2, [pc, #252]	; (8102b74 <HAL_DMA_Init+0x6a8>)
 8102a76:	4293      	cmp	r3, r2
 8102a78:	d009      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a7a:	687b      	ldr	r3, [r7, #4]
 8102a7c:	681b      	ldr	r3, [r3, #0]
 8102a7e:	4a3e      	ldr	r2, [pc, #248]	; (8102b78 <HAL_DMA_Init+0x6ac>)
 8102a80:	4293      	cmp	r3, r2
 8102a82:	d004      	beq.n	8102a8e <HAL_DMA_Init+0x5c2>
 8102a84:	687b      	ldr	r3, [r7, #4]
 8102a86:	681b      	ldr	r3, [r3, #0]
 8102a88:	4a3c      	ldr	r2, [pc, #240]	; (8102b7c <HAL_DMA_Init+0x6b0>)
 8102a8a:	4293      	cmp	r3, r2
 8102a8c:	d101      	bne.n	8102a92 <HAL_DMA_Init+0x5c6>
 8102a8e:	2301      	movs	r3, #1
 8102a90:	e000      	b.n	8102a94 <HAL_DMA_Init+0x5c8>
 8102a92:	2300      	movs	r3, #0
 8102a94:	2b00      	cmp	r3, #0
 8102a96:	d032      	beq.n	8102afe <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102a98:	6878      	ldr	r0, [r7, #4]
 8102a9a:	f001 ff23 	bl	81048e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	689b      	ldr	r3, [r3, #8]
 8102aa2:	2b80      	cmp	r3, #128	; 0x80
 8102aa4:	d102      	bne.n	8102aac <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8102aa6:	687b      	ldr	r3, [r7, #4]
 8102aa8:	2200      	movs	r2, #0
 8102aaa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102aac:	687b      	ldr	r3, [r7, #4]
 8102aae:	685a      	ldr	r2, [r3, #4]
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ab4:	b2d2      	uxtb	r2, r2
 8102ab6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102abc:	687a      	ldr	r2, [r7, #4]
 8102abe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102ac0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	685b      	ldr	r3, [r3, #4]
 8102ac6:	2b00      	cmp	r3, #0
 8102ac8:	d010      	beq.n	8102aec <HAL_DMA_Init+0x620>
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	685b      	ldr	r3, [r3, #4]
 8102ace:	2b08      	cmp	r3, #8
 8102ad0:	d80c      	bhi.n	8102aec <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8102ad2:	6878      	ldr	r0, [r7, #4]
 8102ad4:	f001 ffa0 	bl	8104a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102ad8:	687b      	ldr	r3, [r7, #4]
 8102ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102adc:	2200      	movs	r2, #0
 8102ade:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102ae0:	687b      	ldr	r3, [r7, #4]
 8102ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102ae4:	687a      	ldr	r2, [r7, #4]
 8102ae6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102ae8:	605a      	str	r2, [r3, #4]
 8102aea:	e008      	b.n	8102afe <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	2200      	movs	r2, #0
 8102af0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102af2:	687b      	ldr	r3, [r7, #4]
 8102af4:	2200      	movs	r2, #0
 8102af6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	2200      	movs	r2, #0
 8102afc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102afe:	687b      	ldr	r3, [r7, #4]
 8102b00:	2200      	movs	r2, #0
 8102b02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102b04:	687b      	ldr	r3, [r7, #4]
 8102b06:	2201      	movs	r2, #1
 8102b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102b0c:	2300      	movs	r3, #0
}
 8102b0e:	4618      	mov	r0, r3
 8102b10:	3718      	adds	r7, #24
 8102b12:	46bd      	mov	sp, r7
 8102b14:	bd80      	pop	{r7, pc}
 8102b16:	bf00      	nop
 8102b18:	a7fdabf8 	.word	0xa7fdabf8
 8102b1c:	cccccccd 	.word	0xcccccccd
 8102b20:	40020010 	.word	0x40020010
 8102b24:	40020028 	.word	0x40020028
 8102b28:	40020040 	.word	0x40020040
 8102b2c:	40020058 	.word	0x40020058
 8102b30:	40020070 	.word	0x40020070
 8102b34:	40020088 	.word	0x40020088
 8102b38:	400200a0 	.word	0x400200a0
 8102b3c:	400200b8 	.word	0x400200b8
 8102b40:	40020410 	.word	0x40020410
 8102b44:	40020428 	.word	0x40020428
 8102b48:	40020440 	.word	0x40020440
 8102b4c:	40020458 	.word	0x40020458
 8102b50:	40020470 	.word	0x40020470
 8102b54:	40020488 	.word	0x40020488
 8102b58:	400204a0 	.word	0x400204a0
 8102b5c:	400204b8 	.word	0x400204b8
 8102b60:	58025408 	.word	0x58025408
 8102b64:	5802541c 	.word	0x5802541c
 8102b68:	58025430 	.word	0x58025430
 8102b6c:	58025444 	.word	0x58025444
 8102b70:	58025458 	.word	0x58025458
 8102b74:	5802546c 	.word	0x5802546c
 8102b78:	58025480 	.word	0x58025480
 8102b7c:	58025494 	.word	0x58025494

08102b80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102b80:	b580      	push	{r7, lr}
 8102b82:	b086      	sub	sp, #24
 8102b84:	af00      	add	r7, sp, #0
 8102b86:	60f8      	str	r0, [r7, #12]
 8102b88:	60b9      	str	r1, [r7, #8]
 8102b8a:	607a      	str	r2, [r7, #4]
 8102b8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8102b8e:	2300      	movs	r3, #0
 8102b90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102b92:	68fb      	ldr	r3, [r7, #12]
 8102b94:	2b00      	cmp	r3, #0
 8102b96:	d101      	bne.n	8102b9c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8102b98:	2301      	movs	r3, #1
 8102b9a:	e226      	b.n	8102fea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8102b9c:	68fb      	ldr	r3, [r7, #12]
 8102b9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102ba2:	2b01      	cmp	r3, #1
 8102ba4:	d101      	bne.n	8102baa <HAL_DMA_Start_IT+0x2a>
 8102ba6:	2302      	movs	r3, #2
 8102ba8:	e21f      	b.n	8102fea <HAL_DMA_Start_IT+0x46a>
 8102baa:	68fb      	ldr	r3, [r7, #12]
 8102bac:	2201      	movs	r2, #1
 8102bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8102bb2:	68fb      	ldr	r3, [r7, #12]
 8102bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102bb8:	b2db      	uxtb	r3, r3
 8102bba:	2b01      	cmp	r3, #1
 8102bbc:	f040 820a 	bne.w	8102fd4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102bc0:	68fb      	ldr	r3, [r7, #12]
 8102bc2:	2202      	movs	r2, #2
 8102bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102bc8:	68fb      	ldr	r3, [r7, #12]
 8102bca:	2200      	movs	r2, #0
 8102bcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102bce:	68fb      	ldr	r3, [r7, #12]
 8102bd0:	681b      	ldr	r3, [r3, #0]
 8102bd2:	4a68      	ldr	r2, [pc, #416]	; (8102d74 <HAL_DMA_Start_IT+0x1f4>)
 8102bd4:	4293      	cmp	r3, r2
 8102bd6:	d04a      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102bd8:	68fb      	ldr	r3, [r7, #12]
 8102bda:	681b      	ldr	r3, [r3, #0]
 8102bdc:	4a66      	ldr	r2, [pc, #408]	; (8102d78 <HAL_DMA_Start_IT+0x1f8>)
 8102bde:	4293      	cmp	r3, r2
 8102be0:	d045      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102be2:	68fb      	ldr	r3, [r7, #12]
 8102be4:	681b      	ldr	r3, [r3, #0]
 8102be6:	4a65      	ldr	r2, [pc, #404]	; (8102d7c <HAL_DMA_Start_IT+0x1fc>)
 8102be8:	4293      	cmp	r3, r2
 8102bea:	d040      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102bec:	68fb      	ldr	r3, [r7, #12]
 8102bee:	681b      	ldr	r3, [r3, #0]
 8102bf0:	4a63      	ldr	r2, [pc, #396]	; (8102d80 <HAL_DMA_Start_IT+0x200>)
 8102bf2:	4293      	cmp	r3, r2
 8102bf4:	d03b      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102bf6:	68fb      	ldr	r3, [r7, #12]
 8102bf8:	681b      	ldr	r3, [r3, #0]
 8102bfa:	4a62      	ldr	r2, [pc, #392]	; (8102d84 <HAL_DMA_Start_IT+0x204>)
 8102bfc:	4293      	cmp	r3, r2
 8102bfe:	d036      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c00:	68fb      	ldr	r3, [r7, #12]
 8102c02:	681b      	ldr	r3, [r3, #0]
 8102c04:	4a60      	ldr	r2, [pc, #384]	; (8102d88 <HAL_DMA_Start_IT+0x208>)
 8102c06:	4293      	cmp	r3, r2
 8102c08:	d031      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c0a:	68fb      	ldr	r3, [r7, #12]
 8102c0c:	681b      	ldr	r3, [r3, #0]
 8102c0e:	4a5f      	ldr	r2, [pc, #380]	; (8102d8c <HAL_DMA_Start_IT+0x20c>)
 8102c10:	4293      	cmp	r3, r2
 8102c12:	d02c      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c14:	68fb      	ldr	r3, [r7, #12]
 8102c16:	681b      	ldr	r3, [r3, #0]
 8102c18:	4a5d      	ldr	r2, [pc, #372]	; (8102d90 <HAL_DMA_Start_IT+0x210>)
 8102c1a:	4293      	cmp	r3, r2
 8102c1c:	d027      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c1e:	68fb      	ldr	r3, [r7, #12]
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	4a5c      	ldr	r2, [pc, #368]	; (8102d94 <HAL_DMA_Start_IT+0x214>)
 8102c24:	4293      	cmp	r3, r2
 8102c26:	d022      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c28:	68fb      	ldr	r3, [r7, #12]
 8102c2a:	681b      	ldr	r3, [r3, #0]
 8102c2c:	4a5a      	ldr	r2, [pc, #360]	; (8102d98 <HAL_DMA_Start_IT+0x218>)
 8102c2e:	4293      	cmp	r3, r2
 8102c30:	d01d      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c32:	68fb      	ldr	r3, [r7, #12]
 8102c34:	681b      	ldr	r3, [r3, #0]
 8102c36:	4a59      	ldr	r2, [pc, #356]	; (8102d9c <HAL_DMA_Start_IT+0x21c>)
 8102c38:	4293      	cmp	r3, r2
 8102c3a:	d018      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c3c:	68fb      	ldr	r3, [r7, #12]
 8102c3e:	681b      	ldr	r3, [r3, #0]
 8102c40:	4a57      	ldr	r2, [pc, #348]	; (8102da0 <HAL_DMA_Start_IT+0x220>)
 8102c42:	4293      	cmp	r3, r2
 8102c44:	d013      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c46:	68fb      	ldr	r3, [r7, #12]
 8102c48:	681b      	ldr	r3, [r3, #0]
 8102c4a:	4a56      	ldr	r2, [pc, #344]	; (8102da4 <HAL_DMA_Start_IT+0x224>)
 8102c4c:	4293      	cmp	r3, r2
 8102c4e:	d00e      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c50:	68fb      	ldr	r3, [r7, #12]
 8102c52:	681b      	ldr	r3, [r3, #0]
 8102c54:	4a54      	ldr	r2, [pc, #336]	; (8102da8 <HAL_DMA_Start_IT+0x228>)
 8102c56:	4293      	cmp	r3, r2
 8102c58:	d009      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c5a:	68fb      	ldr	r3, [r7, #12]
 8102c5c:	681b      	ldr	r3, [r3, #0]
 8102c5e:	4a53      	ldr	r2, [pc, #332]	; (8102dac <HAL_DMA_Start_IT+0x22c>)
 8102c60:	4293      	cmp	r3, r2
 8102c62:	d004      	beq.n	8102c6e <HAL_DMA_Start_IT+0xee>
 8102c64:	68fb      	ldr	r3, [r7, #12]
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	4a51      	ldr	r2, [pc, #324]	; (8102db0 <HAL_DMA_Start_IT+0x230>)
 8102c6a:	4293      	cmp	r3, r2
 8102c6c:	d108      	bne.n	8102c80 <HAL_DMA_Start_IT+0x100>
 8102c6e:	68fb      	ldr	r3, [r7, #12]
 8102c70:	681b      	ldr	r3, [r3, #0]
 8102c72:	681a      	ldr	r2, [r3, #0]
 8102c74:	68fb      	ldr	r3, [r7, #12]
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	f022 0201 	bic.w	r2, r2, #1
 8102c7c:	601a      	str	r2, [r3, #0]
 8102c7e:	e007      	b.n	8102c90 <HAL_DMA_Start_IT+0x110>
 8102c80:	68fb      	ldr	r3, [r7, #12]
 8102c82:	681b      	ldr	r3, [r3, #0]
 8102c84:	681a      	ldr	r2, [r3, #0]
 8102c86:	68fb      	ldr	r3, [r7, #12]
 8102c88:	681b      	ldr	r3, [r3, #0]
 8102c8a:	f022 0201 	bic.w	r2, r2, #1
 8102c8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8102c90:	683b      	ldr	r3, [r7, #0]
 8102c92:	687a      	ldr	r2, [r7, #4]
 8102c94:	68b9      	ldr	r1, [r7, #8]
 8102c96:	68f8      	ldr	r0, [r7, #12]
 8102c98:	f001 fb4a 	bl	8104330 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102c9c:	68fb      	ldr	r3, [r7, #12]
 8102c9e:	681b      	ldr	r3, [r3, #0]
 8102ca0:	4a34      	ldr	r2, [pc, #208]	; (8102d74 <HAL_DMA_Start_IT+0x1f4>)
 8102ca2:	4293      	cmp	r3, r2
 8102ca4:	d04a      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102ca6:	68fb      	ldr	r3, [r7, #12]
 8102ca8:	681b      	ldr	r3, [r3, #0]
 8102caa:	4a33      	ldr	r2, [pc, #204]	; (8102d78 <HAL_DMA_Start_IT+0x1f8>)
 8102cac:	4293      	cmp	r3, r2
 8102cae:	d045      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cb0:	68fb      	ldr	r3, [r7, #12]
 8102cb2:	681b      	ldr	r3, [r3, #0]
 8102cb4:	4a31      	ldr	r2, [pc, #196]	; (8102d7c <HAL_DMA_Start_IT+0x1fc>)
 8102cb6:	4293      	cmp	r3, r2
 8102cb8:	d040      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cba:	68fb      	ldr	r3, [r7, #12]
 8102cbc:	681b      	ldr	r3, [r3, #0]
 8102cbe:	4a30      	ldr	r2, [pc, #192]	; (8102d80 <HAL_DMA_Start_IT+0x200>)
 8102cc0:	4293      	cmp	r3, r2
 8102cc2:	d03b      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cc4:	68fb      	ldr	r3, [r7, #12]
 8102cc6:	681b      	ldr	r3, [r3, #0]
 8102cc8:	4a2e      	ldr	r2, [pc, #184]	; (8102d84 <HAL_DMA_Start_IT+0x204>)
 8102cca:	4293      	cmp	r3, r2
 8102ccc:	d036      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cce:	68fb      	ldr	r3, [r7, #12]
 8102cd0:	681b      	ldr	r3, [r3, #0]
 8102cd2:	4a2d      	ldr	r2, [pc, #180]	; (8102d88 <HAL_DMA_Start_IT+0x208>)
 8102cd4:	4293      	cmp	r3, r2
 8102cd6:	d031      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cd8:	68fb      	ldr	r3, [r7, #12]
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	4a2b      	ldr	r2, [pc, #172]	; (8102d8c <HAL_DMA_Start_IT+0x20c>)
 8102cde:	4293      	cmp	r3, r2
 8102ce0:	d02c      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102ce2:	68fb      	ldr	r3, [r7, #12]
 8102ce4:	681b      	ldr	r3, [r3, #0]
 8102ce6:	4a2a      	ldr	r2, [pc, #168]	; (8102d90 <HAL_DMA_Start_IT+0x210>)
 8102ce8:	4293      	cmp	r3, r2
 8102cea:	d027      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	681b      	ldr	r3, [r3, #0]
 8102cf0:	4a28      	ldr	r2, [pc, #160]	; (8102d94 <HAL_DMA_Start_IT+0x214>)
 8102cf2:	4293      	cmp	r3, r2
 8102cf4:	d022      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102cf6:	68fb      	ldr	r3, [r7, #12]
 8102cf8:	681b      	ldr	r3, [r3, #0]
 8102cfa:	4a27      	ldr	r2, [pc, #156]	; (8102d98 <HAL_DMA_Start_IT+0x218>)
 8102cfc:	4293      	cmp	r3, r2
 8102cfe:	d01d      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d00:	68fb      	ldr	r3, [r7, #12]
 8102d02:	681b      	ldr	r3, [r3, #0]
 8102d04:	4a25      	ldr	r2, [pc, #148]	; (8102d9c <HAL_DMA_Start_IT+0x21c>)
 8102d06:	4293      	cmp	r3, r2
 8102d08:	d018      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d0a:	68fb      	ldr	r3, [r7, #12]
 8102d0c:	681b      	ldr	r3, [r3, #0]
 8102d0e:	4a24      	ldr	r2, [pc, #144]	; (8102da0 <HAL_DMA_Start_IT+0x220>)
 8102d10:	4293      	cmp	r3, r2
 8102d12:	d013      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d14:	68fb      	ldr	r3, [r7, #12]
 8102d16:	681b      	ldr	r3, [r3, #0]
 8102d18:	4a22      	ldr	r2, [pc, #136]	; (8102da4 <HAL_DMA_Start_IT+0x224>)
 8102d1a:	4293      	cmp	r3, r2
 8102d1c:	d00e      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d1e:	68fb      	ldr	r3, [r7, #12]
 8102d20:	681b      	ldr	r3, [r3, #0]
 8102d22:	4a21      	ldr	r2, [pc, #132]	; (8102da8 <HAL_DMA_Start_IT+0x228>)
 8102d24:	4293      	cmp	r3, r2
 8102d26:	d009      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d28:	68fb      	ldr	r3, [r7, #12]
 8102d2a:	681b      	ldr	r3, [r3, #0]
 8102d2c:	4a1f      	ldr	r2, [pc, #124]	; (8102dac <HAL_DMA_Start_IT+0x22c>)
 8102d2e:	4293      	cmp	r3, r2
 8102d30:	d004      	beq.n	8102d3c <HAL_DMA_Start_IT+0x1bc>
 8102d32:	68fb      	ldr	r3, [r7, #12]
 8102d34:	681b      	ldr	r3, [r3, #0]
 8102d36:	4a1e      	ldr	r2, [pc, #120]	; (8102db0 <HAL_DMA_Start_IT+0x230>)
 8102d38:	4293      	cmp	r3, r2
 8102d3a:	d101      	bne.n	8102d40 <HAL_DMA_Start_IT+0x1c0>
 8102d3c:	2301      	movs	r3, #1
 8102d3e:	e000      	b.n	8102d42 <HAL_DMA_Start_IT+0x1c2>
 8102d40:	2300      	movs	r3, #0
 8102d42:	2b00      	cmp	r3, #0
 8102d44:	d036      	beq.n	8102db4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102d46:	68fb      	ldr	r3, [r7, #12]
 8102d48:	681b      	ldr	r3, [r3, #0]
 8102d4a:	681b      	ldr	r3, [r3, #0]
 8102d4c:	f023 021e 	bic.w	r2, r3, #30
 8102d50:	68fb      	ldr	r3, [r7, #12]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	f042 0216 	orr.w	r2, r2, #22
 8102d58:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102d5a:	68fb      	ldr	r3, [r7, #12]
 8102d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d5e:	2b00      	cmp	r3, #0
 8102d60:	d03e      	beq.n	8102de0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102d62:	68fb      	ldr	r3, [r7, #12]
 8102d64:	681b      	ldr	r3, [r3, #0]
 8102d66:	681a      	ldr	r2, [r3, #0]
 8102d68:	68fb      	ldr	r3, [r7, #12]
 8102d6a:	681b      	ldr	r3, [r3, #0]
 8102d6c:	f042 0208 	orr.w	r2, r2, #8
 8102d70:	601a      	str	r2, [r3, #0]
 8102d72:	e035      	b.n	8102de0 <HAL_DMA_Start_IT+0x260>
 8102d74:	40020010 	.word	0x40020010
 8102d78:	40020028 	.word	0x40020028
 8102d7c:	40020040 	.word	0x40020040
 8102d80:	40020058 	.word	0x40020058
 8102d84:	40020070 	.word	0x40020070
 8102d88:	40020088 	.word	0x40020088
 8102d8c:	400200a0 	.word	0x400200a0
 8102d90:	400200b8 	.word	0x400200b8
 8102d94:	40020410 	.word	0x40020410
 8102d98:	40020428 	.word	0x40020428
 8102d9c:	40020440 	.word	0x40020440
 8102da0:	40020458 	.word	0x40020458
 8102da4:	40020470 	.word	0x40020470
 8102da8:	40020488 	.word	0x40020488
 8102dac:	400204a0 	.word	0x400204a0
 8102db0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8102db4:	68fb      	ldr	r3, [r7, #12]
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	f023 020e 	bic.w	r2, r3, #14
 8102dbe:	68fb      	ldr	r3, [r7, #12]
 8102dc0:	681b      	ldr	r3, [r3, #0]
 8102dc2:	f042 020a 	orr.w	r2, r2, #10
 8102dc6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102dc8:	68fb      	ldr	r3, [r7, #12]
 8102dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102dcc:	2b00      	cmp	r3, #0
 8102dce:	d007      	beq.n	8102de0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8102dd0:	68fb      	ldr	r3, [r7, #12]
 8102dd2:	681b      	ldr	r3, [r3, #0]
 8102dd4:	681a      	ldr	r2, [r3, #0]
 8102dd6:	68fb      	ldr	r3, [r7, #12]
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	f042 0204 	orr.w	r2, r2, #4
 8102dde:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102de0:	68fb      	ldr	r3, [r7, #12]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	4a83      	ldr	r2, [pc, #524]	; (8102ff4 <HAL_DMA_Start_IT+0x474>)
 8102de6:	4293      	cmp	r3, r2
 8102de8:	d072      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102dea:	68fb      	ldr	r3, [r7, #12]
 8102dec:	681b      	ldr	r3, [r3, #0]
 8102dee:	4a82      	ldr	r2, [pc, #520]	; (8102ff8 <HAL_DMA_Start_IT+0x478>)
 8102df0:	4293      	cmp	r3, r2
 8102df2:	d06d      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102df4:	68fb      	ldr	r3, [r7, #12]
 8102df6:	681b      	ldr	r3, [r3, #0]
 8102df8:	4a80      	ldr	r2, [pc, #512]	; (8102ffc <HAL_DMA_Start_IT+0x47c>)
 8102dfa:	4293      	cmp	r3, r2
 8102dfc:	d068      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102dfe:	68fb      	ldr	r3, [r7, #12]
 8102e00:	681b      	ldr	r3, [r3, #0]
 8102e02:	4a7f      	ldr	r2, [pc, #508]	; (8103000 <HAL_DMA_Start_IT+0x480>)
 8102e04:	4293      	cmp	r3, r2
 8102e06:	d063      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e08:	68fb      	ldr	r3, [r7, #12]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	4a7d      	ldr	r2, [pc, #500]	; (8103004 <HAL_DMA_Start_IT+0x484>)
 8102e0e:	4293      	cmp	r3, r2
 8102e10:	d05e      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e12:	68fb      	ldr	r3, [r7, #12]
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	4a7c      	ldr	r2, [pc, #496]	; (8103008 <HAL_DMA_Start_IT+0x488>)
 8102e18:	4293      	cmp	r3, r2
 8102e1a:	d059      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e1c:	68fb      	ldr	r3, [r7, #12]
 8102e1e:	681b      	ldr	r3, [r3, #0]
 8102e20:	4a7a      	ldr	r2, [pc, #488]	; (810300c <HAL_DMA_Start_IT+0x48c>)
 8102e22:	4293      	cmp	r3, r2
 8102e24:	d054      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e26:	68fb      	ldr	r3, [r7, #12]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	4a79      	ldr	r2, [pc, #484]	; (8103010 <HAL_DMA_Start_IT+0x490>)
 8102e2c:	4293      	cmp	r3, r2
 8102e2e:	d04f      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e30:	68fb      	ldr	r3, [r7, #12]
 8102e32:	681b      	ldr	r3, [r3, #0]
 8102e34:	4a77      	ldr	r2, [pc, #476]	; (8103014 <HAL_DMA_Start_IT+0x494>)
 8102e36:	4293      	cmp	r3, r2
 8102e38:	d04a      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e3a:	68fb      	ldr	r3, [r7, #12]
 8102e3c:	681b      	ldr	r3, [r3, #0]
 8102e3e:	4a76      	ldr	r2, [pc, #472]	; (8103018 <HAL_DMA_Start_IT+0x498>)
 8102e40:	4293      	cmp	r3, r2
 8102e42:	d045      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e44:	68fb      	ldr	r3, [r7, #12]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	4a74      	ldr	r2, [pc, #464]	; (810301c <HAL_DMA_Start_IT+0x49c>)
 8102e4a:	4293      	cmp	r3, r2
 8102e4c:	d040      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e4e:	68fb      	ldr	r3, [r7, #12]
 8102e50:	681b      	ldr	r3, [r3, #0]
 8102e52:	4a73      	ldr	r2, [pc, #460]	; (8103020 <HAL_DMA_Start_IT+0x4a0>)
 8102e54:	4293      	cmp	r3, r2
 8102e56:	d03b      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e58:	68fb      	ldr	r3, [r7, #12]
 8102e5a:	681b      	ldr	r3, [r3, #0]
 8102e5c:	4a71      	ldr	r2, [pc, #452]	; (8103024 <HAL_DMA_Start_IT+0x4a4>)
 8102e5e:	4293      	cmp	r3, r2
 8102e60:	d036      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e62:	68fb      	ldr	r3, [r7, #12]
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	4a70      	ldr	r2, [pc, #448]	; (8103028 <HAL_DMA_Start_IT+0x4a8>)
 8102e68:	4293      	cmp	r3, r2
 8102e6a:	d031      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e6c:	68fb      	ldr	r3, [r7, #12]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	4a6e      	ldr	r2, [pc, #440]	; (810302c <HAL_DMA_Start_IT+0x4ac>)
 8102e72:	4293      	cmp	r3, r2
 8102e74:	d02c      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e76:	68fb      	ldr	r3, [r7, #12]
 8102e78:	681b      	ldr	r3, [r3, #0]
 8102e7a:	4a6d      	ldr	r2, [pc, #436]	; (8103030 <HAL_DMA_Start_IT+0x4b0>)
 8102e7c:	4293      	cmp	r3, r2
 8102e7e:	d027      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	4a6b      	ldr	r2, [pc, #428]	; (8103034 <HAL_DMA_Start_IT+0x4b4>)
 8102e86:	4293      	cmp	r3, r2
 8102e88:	d022      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e8a:	68fb      	ldr	r3, [r7, #12]
 8102e8c:	681b      	ldr	r3, [r3, #0]
 8102e8e:	4a6a      	ldr	r2, [pc, #424]	; (8103038 <HAL_DMA_Start_IT+0x4b8>)
 8102e90:	4293      	cmp	r3, r2
 8102e92:	d01d      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e94:	68fb      	ldr	r3, [r7, #12]
 8102e96:	681b      	ldr	r3, [r3, #0]
 8102e98:	4a68      	ldr	r2, [pc, #416]	; (810303c <HAL_DMA_Start_IT+0x4bc>)
 8102e9a:	4293      	cmp	r3, r2
 8102e9c:	d018      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102e9e:	68fb      	ldr	r3, [r7, #12]
 8102ea0:	681b      	ldr	r3, [r3, #0]
 8102ea2:	4a67      	ldr	r2, [pc, #412]	; (8103040 <HAL_DMA_Start_IT+0x4c0>)
 8102ea4:	4293      	cmp	r3, r2
 8102ea6:	d013      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102ea8:	68fb      	ldr	r3, [r7, #12]
 8102eaa:	681b      	ldr	r3, [r3, #0]
 8102eac:	4a65      	ldr	r2, [pc, #404]	; (8103044 <HAL_DMA_Start_IT+0x4c4>)
 8102eae:	4293      	cmp	r3, r2
 8102eb0:	d00e      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102eb2:	68fb      	ldr	r3, [r7, #12]
 8102eb4:	681b      	ldr	r3, [r3, #0]
 8102eb6:	4a64      	ldr	r2, [pc, #400]	; (8103048 <HAL_DMA_Start_IT+0x4c8>)
 8102eb8:	4293      	cmp	r3, r2
 8102eba:	d009      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102ebc:	68fb      	ldr	r3, [r7, #12]
 8102ebe:	681b      	ldr	r3, [r3, #0]
 8102ec0:	4a62      	ldr	r2, [pc, #392]	; (810304c <HAL_DMA_Start_IT+0x4cc>)
 8102ec2:	4293      	cmp	r3, r2
 8102ec4:	d004      	beq.n	8102ed0 <HAL_DMA_Start_IT+0x350>
 8102ec6:	68fb      	ldr	r3, [r7, #12]
 8102ec8:	681b      	ldr	r3, [r3, #0]
 8102eca:	4a61      	ldr	r2, [pc, #388]	; (8103050 <HAL_DMA_Start_IT+0x4d0>)
 8102ecc:	4293      	cmp	r3, r2
 8102ece:	d101      	bne.n	8102ed4 <HAL_DMA_Start_IT+0x354>
 8102ed0:	2301      	movs	r3, #1
 8102ed2:	e000      	b.n	8102ed6 <HAL_DMA_Start_IT+0x356>
 8102ed4:	2300      	movs	r3, #0
 8102ed6:	2b00      	cmp	r3, #0
 8102ed8:	d01a      	beq.n	8102f10 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8102eda:	68fb      	ldr	r3, [r7, #12]
 8102edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ede:	681b      	ldr	r3, [r3, #0]
 8102ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d007      	beq.n	8102ef8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8102ee8:	68fb      	ldr	r3, [r7, #12]
 8102eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102eec:	681a      	ldr	r2, [r3, #0]
 8102eee:	68fb      	ldr	r3, [r7, #12]
 8102ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102ef6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8102ef8:	68fb      	ldr	r3, [r7, #12]
 8102efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102efc:	2b00      	cmp	r3, #0
 8102efe:	d007      	beq.n	8102f10 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8102f00:	68fb      	ldr	r3, [r7, #12]
 8102f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f04:	681a      	ldr	r2, [r3, #0]
 8102f06:	68fb      	ldr	r3, [r7, #12]
 8102f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102f0e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8102f10:	68fb      	ldr	r3, [r7, #12]
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	4a37      	ldr	r2, [pc, #220]	; (8102ff4 <HAL_DMA_Start_IT+0x474>)
 8102f16:	4293      	cmp	r3, r2
 8102f18:	d04a      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f1a:	68fb      	ldr	r3, [r7, #12]
 8102f1c:	681b      	ldr	r3, [r3, #0]
 8102f1e:	4a36      	ldr	r2, [pc, #216]	; (8102ff8 <HAL_DMA_Start_IT+0x478>)
 8102f20:	4293      	cmp	r3, r2
 8102f22:	d045      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f24:	68fb      	ldr	r3, [r7, #12]
 8102f26:	681b      	ldr	r3, [r3, #0]
 8102f28:	4a34      	ldr	r2, [pc, #208]	; (8102ffc <HAL_DMA_Start_IT+0x47c>)
 8102f2a:	4293      	cmp	r3, r2
 8102f2c:	d040      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f2e:	68fb      	ldr	r3, [r7, #12]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	4a33      	ldr	r2, [pc, #204]	; (8103000 <HAL_DMA_Start_IT+0x480>)
 8102f34:	4293      	cmp	r3, r2
 8102f36:	d03b      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f38:	68fb      	ldr	r3, [r7, #12]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	4a31      	ldr	r2, [pc, #196]	; (8103004 <HAL_DMA_Start_IT+0x484>)
 8102f3e:	4293      	cmp	r3, r2
 8102f40:	d036      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f42:	68fb      	ldr	r3, [r7, #12]
 8102f44:	681b      	ldr	r3, [r3, #0]
 8102f46:	4a30      	ldr	r2, [pc, #192]	; (8103008 <HAL_DMA_Start_IT+0x488>)
 8102f48:	4293      	cmp	r3, r2
 8102f4a:	d031      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f4c:	68fb      	ldr	r3, [r7, #12]
 8102f4e:	681b      	ldr	r3, [r3, #0]
 8102f50:	4a2e      	ldr	r2, [pc, #184]	; (810300c <HAL_DMA_Start_IT+0x48c>)
 8102f52:	4293      	cmp	r3, r2
 8102f54:	d02c      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f56:	68fb      	ldr	r3, [r7, #12]
 8102f58:	681b      	ldr	r3, [r3, #0]
 8102f5a:	4a2d      	ldr	r2, [pc, #180]	; (8103010 <HAL_DMA_Start_IT+0x490>)
 8102f5c:	4293      	cmp	r3, r2
 8102f5e:	d027      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f60:	68fb      	ldr	r3, [r7, #12]
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	4a2b      	ldr	r2, [pc, #172]	; (8103014 <HAL_DMA_Start_IT+0x494>)
 8102f66:	4293      	cmp	r3, r2
 8102f68:	d022      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f6a:	68fb      	ldr	r3, [r7, #12]
 8102f6c:	681b      	ldr	r3, [r3, #0]
 8102f6e:	4a2a      	ldr	r2, [pc, #168]	; (8103018 <HAL_DMA_Start_IT+0x498>)
 8102f70:	4293      	cmp	r3, r2
 8102f72:	d01d      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f74:	68fb      	ldr	r3, [r7, #12]
 8102f76:	681b      	ldr	r3, [r3, #0]
 8102f78:	4a28      	ldr	r2, [pc, #160]	; (810301c <HAL_DMA_Start_IT+0x49c>)
 8102f7a:	4293      	cmp	r3, r2
 8102f7c:	d018      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f7e:	68fb      	ldr	r3, [r7, #12]
 8102f80:	681b      	ldr	r3, [r3, #0]
 8102f82:	4a27      	ldr	r2, [pc, #156]	; (8103020 <HAL_DMA_Start_IT+0x4a0>)
 8102f84:	4293      	cmp	r3, r2
 8102f86:	d013      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f88:	68fb      	ldr	r3, [r7, #12]
 8102f8a:	681b      	ldr	r3, [r3, #0]
 8102f8c:	4a25      	ldr	r2, [pc, #148]	; (8103024 <HAL_DMA_Start_IT+0x4a4>)
 8102f8e:	4293      	cmp	r3, r2
 8102f90:	d00e      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f92:	68fb      	ldr	r3, [r7, #12]
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	4a24      	ldr	r2, [pc, #144]	; (8103028 <HAL_DMA_Start_IT+0x4a8>)
 8102f98:	4293      	cmp	r3, r2
 8102f9a:	d009      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102f9c:	68fb      	ldr	r3, [r7, #12]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	4a22      	ldr	r2, [pc, #136]	; (810302c <HAL_DMA_Start_IT+0x4ac>)
 8102fa2:	4293      	cmp	r3, r2
 8102fa4:	d004      	beq.n	8102fb0 <HAL_DMA_Start_IT+0x430>
 8102fa6:	68fb      	ldr	r3, [r7, #12]
 8102fa8:	681b      	ldr	r3, [r3, #0]
 8102faa:	4a21      	ldr	r2, [pc, #132]	; (8103030 <HAL_DMA_Start_IT+0x4b0>)
 8102fac:	4293      	cmp	r3, r2
 8102fae:	d108      	bne.n	8102fc2 <HAL_DMA_Start_IT+0x442>
 8102fb0:	68fb      	ldr	r3, [r7, #12]
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	681a      	ldr	r2, [r3, #0]
 8102fb6:	68fb      	ldr	r3, [r7, #12]
 8102fb8:	681b      	ldr	r3, [r3, #0]
 8102fba:	f042 0201 	orr.w	r2, r2, #1
 8102fbe:	601a      	str	r2, [r3, #0]
 8102fc0:	e012      	b.n	8102fe8 <HAL_DMA_Start_IT+0x468>
 8102fc2:	68fb      	ldr	r3, [r7, #12]
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	681a      	ldr	r2, [r3, #0]
 8102fc8:	68fb      	ldr	r3, [r7, #12]
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	f042 0201 	orr.w	r2, r2, #1
 8102fd0:	601a      	str	r2, [r3, #0]
 8102fd2:	e009      	b.n	8102fe8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8102fd4:	68fb      	ldr	r3, [r7, #12]
 8102fd6:	2200      	movs	r2, #0
 8102fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8102fdc:	68fb      	ldr	r3, [r7, #12]
 8102fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102fe2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8102fe4:	2301      	movs	r3, #1
 8102fe6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8102fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8102fea:	4618      	mov	r0, r3
 8102fec:	3718      	adds	r7, #24
 8102fee:	46bd      	mov	sp, r7
 8102ff0:	bd80      	pop	{r7, pc}
 8102ff2:	bf00      	nop
 8102ff4:	40020010 	.word	0x40020010
 8102ff8:	40020028 	.word	0x40020028
 8102ffc:	40020040 	.word	0x40020040
 8103000:	40020058 	.word	0x40020058
 8103004:	40020070 	.word	0x40020070
 8103008:	40020088 	.word	0x40020088
 810300c:	400200a0 	.word	0x400200a0
 8103010:	400200b8 	.word	0x400200b8
 8103014:	40020410 	.word	0x40020410
 8103018:	40020428 	.word	0x40020428
 810301c:	40020440 	.word	0x40020440
 8103020:	40020458 	.word	0x40020458
 8103024:	40020470 	.word	0x40020470
 8103028:	40020488 	.word	0x40020488
 810302c:	400204a0 	.word	0x400204a0
 8103030:	400204b8 	.word	0x400204b8
 8103034:	58025408 	.word	0x58025408
 8103038:	5802541c 	.word	0x5802541c
 810303c:	58025430 	.word	0x58025430
 8103040:	58025444 	.word	0x58025444
 8103044:	58025458 	.word	0x58025458
 8103048:	5802546c 	.word	0x5802546c
 810304c:	58025480 	.word	0x58025480
 8103050:	58025494 	.word	0x58025494

08103054 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8103054:	b580      	push	{r7, lr}
 8103056:	b084      	sub	sp, #16
 8103058:	af00      	add	r7, sp, #0
 810305a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	2b00      	cmp	r3, #0
 8103060:	d101      	bne.n	8103066 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8103062:	2301      	movs	r3, #1
 8103064:	e205      	b.n	8103472 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810306c:	b2db      	uxtb	r3, r3
 810306e:	2b02      	cmp	r3, #2
 8103070:	d004      	beq.n	810307c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	2280      	movs	r2, #128	; 0x80
 8103076:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8103078:	2301      	movs	r3, #1
 810307a:	e1fa      	b.n	8103472 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	681b      	ldr	r3, [r3, #0]
 8103080:	4a8c      	ldr	r2, [pc, #560]	; (81032b4 <HAL_DMA_Abort_IT+0x260>)
 8103082:	4293      	cmp	r3, r2
 8103084:	d04a      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 8103086:	687b      	ldr	r3, [r7, #4]
 8103088:	681b      	ldr	r3, [r3, #0]
 810308a:	4a8b      	ldr	r2, [pc, #556]	; (81032b8 <HAL_DMA_Abort_IT+0x264>)
 810308c:	4293      	cmp	r3, r2
 810308e:	d045      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 8103090:	687b      	ldr	r3, [r7, #4]
 8103092:	681b      	ldr	r3, [r3, #0]
 8103094:	4a89      	ldr	r2, [pc, #548]	; (81032bc <HAL_DMA_Abort_IT+0x268>)
 8103096:	4293      	cmp	r3, r2
 8103098:	d040      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	681b      	ldr	r3, [r3, #0]
 810309e:	4a88      	ldr	r2, [pc, #544]	; (81032c0 <HAL_DMA_Abort_IT+0x26c>)
 81030a0:	4293      	cmp	r3, r2
 81030a2:	d03b      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	4a86      	ldr	r2, [pc, #536]	; (81032c4 <HAL_DMA_Abort_IT+0x270>)
 81030aa:	4293      	cmp	r3, r2
 81030ac:	d036      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	681b      	ldr	r3, [r3, #0]
 81030b2:	4a85      	ldr	r2, [pc, #532]	; (81032c8 <HAL_DMA_Abort_IT+0x274>)
 81030b4:	4293      	cmp	r3, r2
 81030b6:	d031      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	681b      	ldr	r3, [r3, #0]
 81030bc:	4a83      	ldr	r2, [pc, #524]	; (81032cc <HAL_DMA_Abort_IT+0x278>)
 81030be:	4293      	cmp	r3, r2
 81030c0:	d02c      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	681b      	ldr	r3, [r3, #0]
 81030c6:	4a82      	ldr	r2, [pc, #520]	; (81032d0 <HAL_DMA_Abort_IT+0x27c>)
 81030c8:	4293      	cmp	r3, r2
 81030ca:	d027      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	681b      	ldr	r3, [r3, #0]
 81030d0:	4a80      	ldr	r2, [pc, #512]	; (81032d4 <HAL_DMA_Abort_IT+0x280>)
 81030d2:	4293      	cmp	r3, r2
 81030d4:	d022      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	681b      	ldr	r3, [r3, #0]
 81030da:	4a7f      	ldr	r2, [pc, #508]	; (81032d8 <HAL_DMA_Abort_IT+0x284>)
 81030dc:	4293      	cmp	r3, r2
 81030de:	d01d      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	681b      	ldr	r3, [r3, #0]
 81030e4:	4a7d      	ldr	r2, [pc, #500]	; (81032dc <HAL_DMA_Abort_IT+0x288>)
 81030e6:	4293      	cmp	r3, r2
 81030e8:	d018      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	681b      	ldr	r3, [r3, #0]
 81030ee:	4a7c      	ldr	r2, [pc, #496]	; (81032e0 <HAL_DMA_Abort_IT+0x28c>)
 81030f0:	4293      	cmp	r3, r2
 81030f2:	d013      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	4a7a      	ldr	r2, [pc, #488]	; (81032e4 <HAL_DMA_Abort_IT+0x290>)
 81030fa:	4293      	cmp	r3, r2
 81030fc:	d00e      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 81030fe:	687b      	ldr	r3, [r7, #4]
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	4a79      	ldr	r2, [pc, #484]	; (81032e8 <HAL_DMA_Abort_IT+0x294>)
 8103104:	4293      	cmp	r3, r2
 8103106:	d009      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 8103108:	687b      	ldr	r3, [r7, #4]
 810310a:	681b      	ldr	r3, [r3, #0]
 810310c:	4a77      	ldr	r2, [pc, #476]	; (81032ec <HAL_DMA_Abort_IT+0x298>)
 810310e:	4293      	cmp	r3, r2
 8103110:	d004      	beq.n	810311c <HAL_DMA_Abort_IT+0xc8>
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	681b      	ldr	r3, [r3, #0]
 8103116:	4a76      	ldr	r2, [pc, #472]	; (81032f0 <HAL_DMA_Abort_IT+0x29c>)
 8103118:	4293      	cmp	r3, r2
 810311a:	d101      	bne.n	8103120 <HAL_DMA_Abort_IT+0xcc>
 810311c:	2301      	movs	r3, #1
 810311e:	e000      	b.n	8103122 <HAL_DMA_Abort_IT+0xce>
 8103120:	2300      	movs	r3, #0
 8103122:	2b00      	cmp	r3, #0
 8103124:	d065      	beq.n	81031f2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	2204      	movs	r2, #4
 810312a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810312e:	687b      	ldr	r3, [r7, #4]
 8103130:	681b      	ldr	r3, [r3, #0]
 8103132:	4a60      	ldr	r2, [pc, #384]	; (81032b4 <HAL_DMA_Abort_IT+0x260>)
 8103134:	4293      	cmp	r3, r2
 8103136:	d04a      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	681b      	ldr	r3, [r3, #0]
 810313c:	4a5e      	ldr	r2, [pc, #376]	; (81032b8 <HAL_DMA_Abort_IT+0x264>)
 810313e:	4293      	cmp	r3, r2
 8103140:	d045      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	681b      	ldr	r3, [r3, #0]
 8103146:	4a5d      	ldr	r2, [pc, #372]	; (81032bc <HAL_DMA_Abort_IT+0x268>)
 8103148:	4293      	cmp	r3, r2
 810314a:	d040      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	4a5b      	ldr	r2, [pc, #364]	; (81032c0 <HAL_DMA_Abort_IT+0x26c>)
 8103152:	4293      	cmp	r3, r2
 8103154:	d03b      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	681b      	ldr	r3, [r3, #0]
 810315a:	4a5a      	ldr	r2, [pc, #360]	; (81032c4 <HAL_DMA_Abort_IT+0x270>)
 810315c:	4293      	cmp	r3, r2
 810315e:	d036      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	4a58      	ldr	r2, [pc, #352]	; (81032c8 <HAL_DMA_Abort_IT+0x274>)
 8103166:	4293      	cmp	r3, r2
 8103168:	d031      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	4a57      	ldr	r2, [pc, #348]	; (81032cc <HAL_DMA_Abort_IT+0x278>)
 8103170:	4293      	cmp	r3, r2
 8103172:	d02c      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	681b      	ldr	r3, [r3, #0]
 8103178:	4a55      	ldr	r2, [pc, #340]	; (81032d0 <HAL_DMA_Abort_IT+0x27c>)
 810317a:	4293      	cmp	r3, r2
 810317c:	d027      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	681b      	ldr	r3, [r3, #0]
 8103182:	4a54      	ldr	r2, [pc, #336]	; (81032d4 <HAL_DMA_Abort_IT+0x280>)
 8103184:	4293      	cmp	r3, r2
 8103186:	d022      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103188:	687b      	ldr	r3, [r7, #4]
 810318a:	681b      	ldr	r3, [r3, #0]
 810318c:	4a52      	ldr	r2, [pc, #328]	; (81032d8 <HAL_DMA_Abort_IT+0x284>)
 810318e:	4293      	cmp	r3, r2
 8103190:	d01d      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 8103192:	687b      	ldr	r3, [r7, #4]
 8103194:	681b      	ldr	r3, [r3, #0]
 8103196:	4a51      	ldr	r2, [pc, #324]	; (81032dc <HAL_DMA_Abort_IT+0x288>)
 8103198:	4293      	cmp	r3, r2
 810319a:	d018      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	681b      	ldr	r3, [r3, #0]
 81031a0:	4a4f      	ldr	r2, [pc, #316]	; (81032e0 <HAL_DMA_Abort_IT+0x28c>)
 81031a2:	4293      	cmp	r3, r2
 81031a4:	d013      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	681b      	ldr	r3, [r3, #0]
 81031aa:	4a4e      	ldr	r2, [pc, #312]	; (81032e4 <HAL_DMA_Abort_IT+0x290>)
 81031ac:	4293      	cmp	r3, r2
 81031ae:	d00e      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	681b      	ldr	r3, [r3, #0]
 81031b4:	4a4c      	ldr	r2, [pc, #304]	; (81032e8 <HAL_DMA_Abort_IT+0x294>)
 81031b6:	4293      	cmp	r3, r2
 81031b8:	d009      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 81031ba:	687b      	ldr	r3, [r7, #4]
 81031bc:	681b      	ldr	r3, [r3, #0]
 81031be:	4a4b      	ldr	r2, [pc, #300]	; (81032ec <HAL_DMA_Abort_IT+0x298>)
 81031c0:	4293      	cmp	r3, r2
 81031c2:	d004      	beq.n	81031ce <HAL_DMA_Abort_IT+0x17a>
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	681b      	ldr	r3, [r3, #0]
 81031c8:	4a49      	ldr	r2, [pc, #292]	; (81032f0 <HAL_DMA_Abort_IT+0x29c>)
 81031ca:	4293      	cmp	r3, r2
 81031cc:	d108      	bne.n	81031e0 <HAL_DMA_Abort_IT+0x18c>
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	681b      	ldr	r3, [r3, #0]
 81031d2:	681a      	ldr	r2, [r3, #0]
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	681b      	ldr	r3, [r3, #0]
 81031d8:	f022 0201 	bic.w	r2, r2, #1
 81031dc:	601a      	str	r2, [r3, #0]
 81031de:	e147      	b.n	8103470 <HAL_DMA_Abort_IT+0x41c>
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	681a      	ldr	r2, [r3, #0]
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	681b      	ldr	r3, [r3, #0]
 81031ea:	f022 0201 	bic.w	r2, r2, #1
 81031ee:	601a      	str	r2, [r3, #0]
 81031f0:	e13e      	b.n	8103470 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	681b      	ldr	r3, [r3, #0]
 81031f6:	681a      	ldr	r2, [r3, #0]
 81031f8:	687b      	ldr	r3, [r7, #4]
 81031fa:	681b      	ldr	r3, [r3, #0]
 81031fc:	f022 020e 	bic.w	r2, r2, #14
 8103200:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	681b      	ldr	r3, [r3, #0]
 8103206:	4a2b      	ldr	r2, [pc, #172]	; (81032b4 <HAL_DMA_Abort_IT+0x260>)
 8103208:	4293      	cmp	r3, r2
 810320a:	d04a      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	4a29      	ldr	r2, [pc, #164]	; (81032b8 <HAL_DMA_Abort_IT+0x264>)
 8103212:	4293      	cmp	r3, r2
 8103214:	d045      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	681b      	ldr	r3, [r3, #0]
 810321a:	4a28      	ldr	r2, [pc, #160]	; (81032bc <HAL_DMA_Abort_IT+0x268>)
 810321c:	4293      	cmp	r3, r2
 810321e:	d040      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	681b      	ldr	r3, [r3, #0]
 8103224:	4a26      	ldr	r2, [pc, #152]	; (81032c0 <HAL_DMA_Abort_IT+0x26c>)
 8103226:	4293      	cmp	r3, r2
 8103228:	d03b      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	4a25      	ldr	r2, [pc, #148]	; (81032c4 <HAL_DMA_Abort_IT+0x270>)
 8103230:	4293      	cmp	r3, r2
 8103232:	d036      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	4a23      	ldr	r2, [pc, #140]	; (81032c8 <HAL_DMA_Abort_IT+0x274>)
 810323a:	4293      	cmp	r3, r2
 810323c:	d031      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	4a22      	ldr	r2, [pc, #136]	; (81032cc <HAL_DMA_Abort_IT+0x278>)
 8103244:	4293      	cmp	r3, r2
 8103246:	d02c      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	4a20      	ldr	r2, [pc, #128]	; (81032d0 <HAL_DMA_Abort_IT+0x27c>)
 810324e:	4293      	cmp	r3, r2
 8103250:	d027      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	681b      	ldr	r3, [r3, #0]
 8103256:	4a1f      	ldr	r2, [pc, #124]	; (81032d4 <HAL_DMA_Abort_IT+0x280>)
 8103258:	4293      	cmp	r3, r2
 810325a:	d022      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	4a1d      	ldr	r2, [pc, #116]	; (81032d8 <HAL_DMA_Abort_IT+0x284>)
 8103262:	4293      	cmp	r3, r2
 8103264:	d01d      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	681b      	ldr	r3, [r3, #0]
 810326a:	4a1c      	ldr	r2, [pc, #112]	; (81032dc <HAL_DMA_Abort_IT+0x288>)
 810326c:	4293      	cmp	r3, r2
 810326e:	d018      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	681b      	ldr	r3, [r3, #0]
 8103274:	4a1a      	ldr	r2, [pc, #104]	; (81032e0 <HAL_DMA_Abort_IT+0x28c>)
 8103276:	4293      	cmp	r3, r2
 8103278:	d013      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	681b      	ldr	r3, [r3, #0]
 810327e:	4a19      	ldr	r2, [pc, #100]	; (81032e4 <HAL_DMA_Abort_IT+0x290>)
 8103280:	4293      	cmp	r3, r2
 8103282:	d00e      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	681b      	ldr	r3, [r3, #0]
 8103288:	4a17      	ldr	r2, [pc, #92]	; (81032e8 <HAL_DMA_Abort_IT+0x294>)
 810328a:	4293      	cmp	r3, r2
 810328c:	d009      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	681b      	ldr	r3, [r3, #0]
 8103292:	4a16      	ldr	r2, [pc, #88]	; (81032ec <HAL_DMA_Abort_IT+0x298>)
 8103294:	4293      	cmp	r3, r2
 8103296:	d004      	beq.n	81032a2 <HAL_DMA_Abort_IT+0x24e>
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	4a14      	ldr	r2, [pc, #80]	; (81032f0 <HAL_DMA_Abort_IT+0x29c>)
 810329e:	4293      	cmp	r3, r2
 81032a0:	d128      	bne.n	81032f4 <HAL_DMA_Abort_IT+0x2a0>
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	681b      	ldr	r3, [r3, #0]
 81032a6:	681a      	ldr	r2, [r3, #0]
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	681b      	ldr	r3, [r3, #0]
 81032ac:	f022 0201 	bic.w	r2, r2, #1
 81032b0:	601a      	str	r2, [r3, #0]
 81032b2:	e027      	b.n	8103304 <HAL_DMA_Abort_IT+0x2b0>
 81032b4:	40020010 	.word	0x40020010
 81032b8:	40020028 	.word	0x40020028
 81032bc:	40020040 	.word	0x40020040
 81032c0:	40020058 	.word	0x40020058
 81032c4:	40020070 	.word	0x40020070
 81032c8:	40020088 	.word	0x40020088
 81032cc:	400200a0 	.word	0x400200a0
 81032d0:	400200b8 	.word	0x400200b8
 81032d4:	40020410 	.word	0x40020410
 81032d8:	40020428 	.word	0x40020428
 81032dc:	40020440 	.word	0x40020440
 81032e0:	40020458 	.word	0x40020458
 81032e4:	40020470 	.word	0x40020470
 81032e8:	40020488 	.word	0x40020488
 81032ec:	400204a0 	.word	0x400204a0
 81032f0:	400204b8 	.word	0x400204b8
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	681b      	ldr	r3, [r3, #0]
 81032f8:	681a      	ldr	r2, [r3, #0]
 81032fa:	687b      	ldr	r3, [r7, #4]
 81032fc:	681b      	ldr	r3, [r3, #0]
 81032fe:	f022 0201 	bic.w	r2, r2, #1
 8103302:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103304:	687b      	ldr	r3, [r7, #4]
 8103306:	681b      	ldr	r3, [r3, #0]
 8103308:	4a5c      	ldr	r2, [pc, #368]	; (810347c <HAL_DMA_Abort_IT+0x428>)
 810330a:	4293      	cmp	r3, r2
 810330c:	d072      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	4a5b      	ldr	r2, [pc, #364]	; (8103480 <HAL_DMA_Abort_IT+0x42c>)
 8103314:	4293      	cmp	r3, r2
 8103316:	d06d      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	681b      	ldr	r3, [r3, #0]
 810331c:	4a59      	ldr	r2, [pc, #356]	; (8103484 <HAL_DMA_Abort_IT+0x430>)
 810331e:	4293      	cmp	r3, r2
 8103320:	d068      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103322:	687b      	ldr	r3, [r7, #4]
 8103324:	681b      	ldr	r3, [r3, #0]
 8103326:	4a58      	ldr	r2, [pc, #352]	; (8103488 <HAL_DMA_Abort_IT+0x434>)
 8103328:	4293      	cmp	r3, r2
 810332a:	d063      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	681b      	ldr	r3, [r3, #0]
 8103330:	4a56      	ldr	r2, [pc, #344]	; (810348c <HAL_DMA_Abort_IT+0x438>)
 8103332:	4293      	cmp	r3, r2
 8103334:	d05e      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103336:	687b      	ldr	r3, [r7, #4]
 8103338:	681b      	ldr	r3, [r3, #0]
 810333a:	4a55      	ldr	r2, [pc, #340]	; (8103490 <HAL_DMA_Abort_IT+0x43c>)
 810333c:	4293      	cmp	r3, r2
 810333e:	d059      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103340:	687b      	ldr	r3, [r7, #4]
 8103342:	681b      	ldr	r3, [r3, #0]
 8103344:	4a53      	ldr	r2, [pc, #332]	; (8103494 <HAL_DMA_Abort_IT+0x440>)
 8103346:	4293      	cmp	r3, r2
 8103348:	d054      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810334a:	687b      	ldr	r3, [r7, #4]
 810334c:	681b      	ldr	r3, [r3, #0]
 810334e:	4a52      	ldr	r2, [pc, #328]	; (8103498 <HAL_DMA_Abort_IT+0x444>)
 8103350:	4293      	cmp	r3, r2
 8103352:	d04f      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103354:	687b      	ldr	r3, [r7, #4]
 8103356:	681b      	ldr	r3, [r3, #0]
 8103358:	4a50      	ldr	r2, [pc, #320]	; (810349c <HAL_DMA_Abort_IT+0x448>)
 810335a:	4293      	cmp	r3, r2
 810335c:	d04a      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810335e:	687b      	ldr	r3, [r7, #4]
 8103360:	681b      	ldr	r3, [r3, #0]
 8103362:	4a4f      	ldr	r2, [pc, #316]	; (81034a0 <HAL_DMA_Abort_IT+0x44c>)
 8103364:	4293      	cmp	r3, r2
 8103366:	d045      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	681b      	ldr	r3, [r3, #0]
 810336c:	4a4d      	ldr	r2, [pc, #308]	; (81034a4 <HAL_DMA_Abort_IT+0x450>)
 810336e:	4293      	cmp	r3, r2
 8103370:	d040      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	681b      	ldr	r3, [r3, #0]
 8103376:	4a4c      	ldr	r2, [pc, #304]	; (81034a8 <HAL_DMA_Abort_IT+0x454>)
 8103378:	4293      	cmp	r3, r2
 810337a:	d03b      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	681b      	ldr	r3, [r3, #0]
 8103380:	4a4a      	ldr	r2, [pc, #296]	; (81034ac <HAL_DMA_Abort_IT+0x458>)
 8103382:	4293      	cmp	r3, r2
 8103384:	d036      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	681b      	ldr	r3, [r3, #0]
 810338a:	4a49      	ldr	r2, [pc, #292]	; (81034b0 <HAL_DMA_Abort_IT+0x45c>)
 810338c:	4293      	cmp	r3, r2
 810338e:	d031      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	681b      	ldr	r3, [r3, #0]
 8103394:	4a47      	ldr	r2, [pc, #284]	; (81034b4 <HAL_DMA_Abort_IT+0x460>)
 8103396:	4293      	cmp	r3, r2
 8103398:	d02c      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	681b      	ldr	r3, [r3, #0]
 810339e:	4a46      	ldr	r2, [pc, #280]	; (81034b8 <HAL_DMA_Abort_IT+0x464>)
 81033a0:	4293      	cmp	r3, r2
 81033a2:	d027      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	4a44      	ldr	r2, [pc, #272]	; (81034bc <HAL_DMA_Abort_IT+0x468>)
 81033aa:	4293      	cmp	r3, r2
 81033ac:	d022      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	4a43      	ldr	r2, [pc, #268]	; (81034c0 <HAL_DMA_Abort_IT+0x46c>)
 81033b4:	4293      	cmp	r3, r2
 81033b6:	d01d      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	681b      	ldr	r3, [r3, #0]
 81033bc:	4a41      	ldr	r2, [pc, #260]	; (81034c4 <HAL_DMA_Abort_IT+0x470>)
 81033be:	4293      	cmp	r3, r2
 81033c0:	d018      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033c2:	687b      	ldr	r3, [r7, #4]
 81033c4:	681b      	ldr	r3, [r3, #0]
 81033c6:	4a40      	ldr	r2, [pc, #256]	; (81034c8 <HAL_DMA_Abort_IT+0x474>)
 81033c8:	4293      	cmp	r3, r2
 81033ca:	d013      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	681b      	ldr	r3, [r3, #0]
 81033d0:	4a3e      	ldr	r2, [pc, #248]	; (81034cc <HAL_DMA_Abort_IT+0x478>)
 81033d2:	4293      	cmp	r3, r2
 81033d4:	d00e      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	4a3d      	ldr	r2, [pc, #244]	; (81034d0 <HAL_DMA_Abort_IT+0x47c>)
 81033dc:	4293      	cmp	r3, r2
 81033de:	d009      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	681b      	ldr	r3, [r3, #0]
 81033e4:	4a3b      	ldr	r2, [pc, #236]	; (81034d4 <HAL_DMA_Abort_IT+0x480>)
 81033e6:	4293      	cmp	r3, r2
 81033e8:	d004      	beq.n	81033f4 <HAL_DMA_Abort_IT+0x3a0>
 81033ea:	687b      	ldr	r3, [r7, #4]
 81033ec:	681b      	ldr	r3, [r3, #0]
 81033ee:	4a3a      	ldr	r2, [pc, #232]	; (81034d8 <HAL_DMA_Abort_IT+0x484>)
 81033f0:	4293      	cmp	r3, r2
 81033f2:	d101      	bne.n	81033f8 <HAL_DMA_Abort_IT+0x3a4>
 81033f4:	2301      	movs	r3, #1
 81033f6:	e000      	b.n	81033fa <HAL_DMA_Abort_IT+0x3a6>
 81033f8:	2300      	movs	r3, #0
 81033fa:	2b00      	cmp	r3, #0
 81033fc:	d028      	beq.n	8103450 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103402:	681a      	ldr	r2, [r3, #0]
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810340c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103412:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103418:	f003 031f 	and.w	r3, r3, #31
 810341c:	2201      	movs	r2, #1
 810341e:	409a      	lsls	r2, r3
 8103420:	68fb      	ldr	r3, [r7, #12]
 8103422:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103428:	687a      	ldr	r2, [r7, #4]
 810342a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810342c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103432:	2b00      	cmp	r3, #0
 8103434:	d00c      	beq.n	8103450 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810343a:	681a      	ldr	r2, [r3, #0]
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103444:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810344a:	687a      	ldr	r2, [r7, #4]
 810344c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810344e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	2200      	movs	r2, #0
 8103454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	2201      	movs	r2, #1
 810345c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8103460:	687b      	ldr	r3, [r7, #4]
 8103462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103464:	2b00      	cmp	r3, #0
 8103466:	d003      	beq.n	8103470 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810346c:	6878      	ldr	r0, [r7, #4]
 810346e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8103470:	2300      	movs	r3, #0
}
 8103472:	4618      	mov	r0, r3
 8103474:	3710      	adds	r7, #16
 8103476:	46bd      	mov	sp, r7
 8103478:	bd80      	pop	{r7, pc}
 810347a:	bf00      	nop
 810347c:	40020010 	.word	0x40020010
 8103480:	40020028 	.word	0x40020028
 8103484:	40020040 	.word	0x40020040
 8103488:	40020058 	.word	0x40020058
 810348c:	40020070 	.word	0x40020070
 8103490:	40020088 	.word	0x40020088
 8103494:	400200a0 	.word	0x400200a0
 8103498:	400200b8 	.word	0x400200b8
 810349c:	40020410 	.word	0x40020410
 81034a0:	40020428 	.word	0x40020428
 81034a4:	40020440 	.word	0x40020440
 81034a8:	40020458 	.word	0x40020458
 81034ac:	40020470 	.word	0x40020470
 81034b0:	40020488 	.word	0x40020488
 81034b4:	400204a0 	.word	0x400204a0
 81034b8:	400204b8 	.word	0x400204b8
 81034bc:	58025408 	.word	0x58025408
 81034c0:	5802541c 	.word	0x5802541c
 81034c4:	58025430 	.word	0x58025430
 81034c8:	58025444 	.word	0x58025444
 81034cc:	58025458 	.word	0x58025458
 81034d0:	5802546c 	.word	0x5802546c
 81034d4:	58025480 	.word	0x58025480
 81034d8:	58025494 	.word	0x58025494

081034dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81034dc:	b580      	push	{r7, lr}
 81034de:	b08a      	sub	sp, #40	; 0x28
 81034e0:	af00      	add	r7, sp, #0
 81034e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81034e4:	2300      	movs	r3, #0
 81034e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81034e8:	4b67      	ldr	r3, [pc, #412]	; (8103688 <HAL_DMA_IRQHandler+0x1ac>)
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	4a67      	ldr	r2, [pc, #412]	; (810368c <HAL_DMA_IRQHandler+0x1b0>)
 81034ee:	fba2 2303 	umull	r2, r3, r2, r3
 81034f2:	0a9b      	lsrs	r3, r3, #10
 81034f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81034f6:	687b      	ldr	r3, [r7, #4]
 81034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81034fc:	687b      	ldr	r3, [r7, #4]
 81034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103500:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8103502:	6a3b      	ldr	r3, [r7, #32]
 8103504:	681b      	ldr	r3, [r3, #0]
 8103506:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8103508:	69fb      	ldr	r3, [r7, #28]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	4a5f      	ldr	r2, [pc, #380]	; (8103690 <HAL_DMA_IRQHandler+0x1b4>)
 8103514:	4293      	cmp	r3, r2
 8103516:	d04a      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	681b      	ldr	r3, [r3, #0]
 810351c:	4a5d      	ldr	r2, [pc, #372]	; (8103694 <HAL_DMA_IRQHandler+0x1b8>)
 810351e:	4293      	cmp	r3, r2
 8103520:	d045      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	681b      	ldr	r3, [r3, #0]
 8103526:	4a5c      	ldr	r2, [pc, #368]	; (8103698 <HAL_DMA_IRQHandler+0x1bc>)
 8103528:	4293      	cmp	r3, r2
 810352a:	d040      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	681b      	ldr	r3, [r3, #0]
 8103530:	4a5a      	ldr	r2, [pc, #360]	; (810369c <HAL_DMA_IRQHandler+0x1c0>)
 8103532:	4293      	cmp	r3, r2
 8103534:	d03b      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	681b      	ldr	r3, [r3, #0]
 810353a:	4a59      	ldr	r2, [pc, #356]	; (81036a0 <HAL_DMA_IRQHandler+0x1c4>)
 810353c:	4293      	cmp	r3, r2
 810353e:	d036      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	681b      	ldr	r3, [r3, #0]
 8103544:	4a57      	ldr	r2, [pc, #348]	; (81036a4 <HAL_DMA_IRQHandler+0x1c8>)
 8103546:	4293      	cmp	r3, r2
 8103548:	d031      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	4a56      	ldr	r2, [pc, #344]	; (81036a8 <HAL_DMA_IRQHandler+0x1cc>)
 8103550:	4293      	cmp	r3, r2
 8103552:	d02c      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	681b      	ldr	r3, [r3, #0]
 8103558:	4a54      	ldr	r2, [pc, #336]	; (81036ac <HAL_DMA_IRQHandler+0x1d0>)
 810355a:	4293      	cmp	r3, r2
 810355c:	d027      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	4a53      	ldr	r2, [pc, #332]	; (81036b0 <HAL_DMA_IRQHandler+0x1d4>)
 8103564:	4293      	cmp	r3, r2
 8103566:	d022      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	681b      	ldr	r3, [r3, #0]
 810356c:	4a51      	ldr	r2, [pc, #324]	; (81036b4 <HAL_DMA_IRQHandler+0x1d8>)
 810356e:	4293      	cmp	r3, r2
 8103570:	d01d      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103572:	687b      	ldr	r3, [r7, #4]
 8103574:	681b      	ldr	r3, [r3, #0]
 8103576:	4a50      	ldr	r2, [pc, #320]	; (81036b8 <HAL_DMA_IRQHandler+0x1dc>)
 8103578:	4293      	cmp	r3, r2
 810357a:	d018      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	681b      	ldr	r3, [r3, #0]
 8103580:	4a4e      	ldr	r2, [pc, #312]	; (81036bc <HAL_DMA_IRQHandler+0x1e0>)
 8103582:	4293      	cmp	r3, r2
 8103584:	d013      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	4a4d      	ldr	r2, [pc, #308]	; (81036c0 <HAL_DMA_IRQHandler+0x1e4>)
 810358c:	4293      	cmp	r3, r2
 810358e:	d00e      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	681b      	ldr	r3, [r3, #0]
 8103594:	4a4b      	ldr	r2, [pc, #300]	; (81036c4 <HAL_DMA_IRQHandler+0x1e8>)
 8103596:	4293      	cmp	r3, r2
 8103598:	d009      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	681b      	ldr	r3, [r3, #0]
 810359e:	4a4a      	ldr	r2, [pc, #296]	; (81036c8 <HAL_DMA_IRQHandler+0x1ec>)
 81035a0:	4293      	cmp	r3, r2
 81035a2:	d004      	beq.n	81035ae <HAL_DMA_IRQHandler+0xd2>
 81035a4:	687b      	ldr	r3, [r7, #4]
 81035a6:	681b      	ldr	r3, [r3, #0]
 81035a8:	4a48      	ldr	r2, [pc, #288]	; (81036cc <HAL_DMA_IRQHandler+0x1f0>)
 81035aa:	4293      	cmp	r3, r2
 81035ac:	d101      	bne.n	81035b2 <HAL_DMA_IRQHandler+0xd6>
 81035ae:	2301      	movs	r3, #1
 81035b0:	e000      	b.n	81035b4 <HAL_DMA_IRQHandler+0xd8>
 81035b2:	2300      	movs	r3, #0
 81035b4:	2b00      	cmp	r3, #0
 81035b6:	f000 842b 	beq.w	8103e10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81035be:	f003 031f 	and.w	r3, r3, #31
 81035c2:	2208      	movs	r2, #8
 81035c4:	409a      	lsls	r2, r3
 81035c6:	69bb      	ldr	r3, [r7, #24]
 81035c8:	4013      	ands	r3, r2
 81035ca:	2b00      	cmp	r3, #0
 81035cc:	f000 80a2 	beq.w	8103714 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	681b      	ldr	r3, [r3, #0]
 81035d4:	4a2e      	ldr	r2, [pc, #184]	; (8103690 <HAL_DMA_IRQHandler+0x1b4>)
 81035d6:	4293      	cmp	r3, r2
 81035d8:	d04a      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	681b      	ldr	r3, [r3, #0]
 81035de:	4a2d      	ldr	r2, [pc, #180]	; (8103694 <HAL_DMA_IRQHandler+0x1b8>)
 81035e0:	4293      	cmp	r3, r2
 81035e2:	d045      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	681b      	ldr	r3, [r3, #0]
 81035e8:	4a2b      	ldr	r2, [pc, #172]	; (8103698 <HAL_DMA_IRQHandler+0x1bc>)
 81035ea:	4293      	cmp	r3, r2
 81035ec:	d040      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	681b      	ldr	r3, [r3, #0]
 81035f2:	4a2a      	ldr	r2, [pc, #168]	; (810369c <HAL_DMA_IRQHandler+0x1c0>)
 81035f4:	4293      	cmp	r3, r2
 81035f6:	d03b      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	681b      	ldr	r3, [r3, #0]
 81035fc:	4a28      	ldr	r2, [pc, #160]	; (81036a0 <HAL_DMA_IRQHandler+0x1c4>)
 81035fe:	4293      	cmp	r3, r2
 8103600:	d036      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	681b      	ldr	r3, [r3, #0]
 8103606:	4a27      	ldr	r2, [pc, #156]	; (81036a4 <HAL_DMA_IRQHandler+0x1c8>)
 8103608:	4293      	cmp	r3, r2
 810360a:	d031      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	4a25      	ldr	r2, [pc, #148]	; (81036a8 <HAL_DMA_IRQHandler+0x1cc>)
 8103612:	4293      	cmp	r3, r2
 8103614:	d02c      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	681b      	ldr	r3, [r3, #0]
 810361a:	4a24      	ldr	r2, [pc, #144]	; (81036ac <HAL_DMA_IRQHandler+0x1d0>)
 810361c:	4293      	cmp	r3, r2
 810361e:	d027      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	681b      	ldr	r3, [r3, #0]
 8103624:	4a22      	ldr	r2, [pc, #136]	; (81036b0 <HAL_DMA_IRQHandler+0x1d4>)
 8103626:	4293      	cmp	r3, r2
 8103628:	d022      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	681b      	ldr	r3, [r3, #0]
 810362e:	4a21      	ldr	r2, [pc, #132]	; (81036b4 <HAL_DMA_IRQHandler+0x1d8>)
 8103630:	4293      	cmp	r3, r2
 8103632:	d01d      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	4a1f      	ldr	r2, [pc, #124]	; (81036b8 <HAL_DMA_IRQHandler+0x1dc>)
 810363a:	4293      	cmp	r3, r2
 810363c:	d018      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	4a1e      	ldr	r2, [pc, #120]	; (81036bc <HAL_DMA_IRQHandler+0x1e0>)
 8103644:	4293      	cmp	r3, r2
 8103646:	d013      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	4a1c      	ldr	r2, [pc, #112]	; (81036c0 <HAL_DMA_IRQHandler+0x1e4>)
 810364e:	4293      	cmp	r3, r2
 8103650:	d00e      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103652:	687b      	ldr	r3, [r7, #4]
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	4a1b      	ldr	r2, [pc, #108]	; (81036c4 <HAL_DMA_IRQHandler+0x1e8>)
 8103658:	4293      	cmp	r3, r2
 810365a:	d009      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	681b      	ldr	r3, [r3, #0]
 8103660:	4a19      	ldr	r2, [pc, #100]	; (81036c8 <HAL_DMA_IRQHandler+0x1ec>)
 8103662:	4293      	cmp	r3, r2
 8103664:	d004      	beq.n	8103670 <HAL_DMA_IRQHandler+0x194>
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	681b      	ldr	r3, [r3, #0]
 810366a:	4a18      	ldr	r2, [pc, #96]	; (81036cc <HAL_DMA_IRQHandler+0x1f0>)
 810366c:	4293      	cmp	r3, r2
 810366e:	d12f      	bne.n	81036d0 <HAL_DMA_IRQHandler+0x1f4>
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	681b      	ldr	r3, [r3, #0]
 8103674:	681b      	ldr	r3, [r3, #0]
 8103676:	f003 0304 	and.w	r3, r3, #4
 810367a:	2b00      	cmp	r3, #0
 810367c:	bf14      	ite	ne
 810367e:	2301      	movne	r3, #1
 8103680:	2300      	moveq	r3, #0
 8103682:	b2db      	uxtb	r3, r3
 8103684:	e02e      	b.n	81036e4 <HAL_DMA_IRQHandler+0x208>
 8103686:	bf00      	nop
 8103688:	10000000 	.word	0x10000000
 810368c:	1b4e81b5 	.word	0x1b4e81b5
 8103690:	40020010 	.word	0x40020010
 8103694:	40020028 	.word	0x40020028
 8103698:	40020040 	.word	0x40020040
 810369c:	40020058 	.word	0x40020058
 81036a0:	40020070 	.word	0x40020070
 81036a4:	40020088 	.word	0x40020088
 81036a8:	400200a0 	.word	0x400200a0
 81036ac:	400200b8 	.word	0x400200b8
 81036b0:	40020410 	.word	0x40020410
 81036b4:	40020428 	.word	0x40020428
 81036b8:	40020440 	.word	0x40020440
 81036bc:	40020458 	.word	0x40020458
 81036c0:	40020470 	.word	0x40020470
 81036c4:	40020488 	.word	0x40020488
 81036c8:	400204a0 	.word	0x400204a0
 81036cc:	400204b8 	.word	0x400204b8
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	681b      	ldr	r3, [r3, #0]
 81036d4:	681b      	ldr	r3, [r3, #0]
 81036d6:	f003 0308 	and.w	r3, r3, #8
 81036da:	2b00      	cmp	r3, #0
 81036dc:	bf14      	ite	ne
 81036de:	2301      	movne	r3, #1
 81036e0:	2300      	moveq	r3, #0
 81036e2:	b2db      	uxtb	r3, r3
 81036e4:	2b00      	cmp	r3, #0
 81036e6:	d015      	beq.n	8103714 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	681a      	ldr	r2, [r3, #0]
 81036ee:	687b      	ldr	r3, [r7, #4]
 81036f0:	681b      	ldr	r3, [r3, #0]
 81036f2:	f022 0204 	bic.w	r2, r2, #4
 81036f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81036fc:	f003 031f 	and.w	r3, r3, #31
 8103700:	2208      	movs	r2, #8
 8103702:	409a      	lsls	r2, r3
 8103704:	6a3b      	ldr	r3, [r7, #32]
 8103706:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8103708:	687b      	ldr	r3, [r7, #4]
 810370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810370c:	f043 0201 	orr.w	r2, r3, #1
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103714:	687b      	ldr	r3, [r7, #4]
 8103716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103718:	f003 031f 	and.w	r3, r3, #31
 810371c:	69ba      	ldr	r2, [r7, #24]
 810371e:	fa22 f303 	lsr.w	r3, r2, r3
 8103722:	f003 0301 	and.w	r3, r3, #1
 8103726:	2b00      	cmp	r3, #0
 8103728:	d06e      	beq.n	8103808 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810372a:	687b      	ldr	r3, [r7, #4]
 810372c:	681b      	ldr	r3, [r3, #0]
 810372e:	4a69      	ldr	r2, [pc, #420]	; (81038d4 <HAL_DMA_IRQHandler+0x3f8>)
 8103730:	4293      	cmp	r3, r2
 8103732:	d04a      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103734:	687b      	ldr	r3, [r7, #4]
 8103736:	681b      	ldr	r3, [r3, #0]
 8103738:	4a67      	ldr	r2, [pc, #412]	; (81038d8 <HAL_DMA_IRQHandler+0x3fc>)
 810373a:	4293      	cmp	r3, r2
 810373c:	d045      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	4a66      	ldr	r2, [pc, #408]	; (81038dc <HAL_DMA_IRQHandler+0x400>)
 8103744:	4293      	cmp	r3, r2
 8103746:	d040      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103748:	687b      	ldr	r3, [r7, #4]
 810374a:	681b      	ldr	r3, [r3, #0]
 810374c:	4a64      	ldr	r2, [pc, #400]	; (81038e0 <HAL_DMA_IRQHandler+0x404>)
 810374e:	4293      	cmp	r3, r2
 8103750:	d03b      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103752:	687b      	ldr	r3, [r7, #4]
 8103754:	681b      	ldr	r3, [r3, #0]
 8103756:	4a63      	ldr	r2, [pc, #396]	; (81038e4 <HAL_DMA_IRQHandler+0x408>)
 8103758:	4293      	cmp	r3, r2
 810375a:	d036      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 810375c:	687b      	ldr	r3, [r7, #4]
 810375e:	681b      	ldr	r3, [r3, #0]
 8103760:	4a61      	ldr	r2, [pc, #388]	; (81038e8 <HAL_DMA_IRQHandler+0x40c>)
 8103762:	4293      	cmp	r3, r2
 8103764:	d031      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103766:	687b      	ldr	r3, [r7, #4]
 8103768:	681b      	ldr	r3, [r3, #0]
 810376a:	4a60      	ldr	r2, [pc, #384]	; (81038ec <HAL_DMA_IRQHandler+0x410>)
 810376c:	4293      	cmp	r3, r2
 810376e:	d02c      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103770:	687b      	ldr	r3, [r7, #4]
 8103772:	681b      	ldr	r3, [r3, #0]
 8103774:	4a5e      	ldr	r2, [pc, #376]	; (81038f0 <HAL_DMA_IRQHandler+0x414>)
 8103776:	4293      	cmp	r3, r2
 8103778:	d027      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 810377a:	687b      	ldr	r3, [r7, #4]
 810377c:	681b      	ldr	r3, [r3, #0]
 810377e:	4a5d      	ldr	r2, [pc, #372]	; (81038f4 <HAL_DMA_IRQHandler+0x418>)
 8103780:	4293      	cmp	r3, r2
 8103782:	d022      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	681b      	ldr	r3, [r3, #0]
 8103788:	4a5b      	ldr	r2, [pc, #364]	; (81038f8 <HAL_DMA_IRQHandler+0x41c>)
 810378a:	4293      	cmp	r3, r2
 810378c:	d01d      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 810378e:	687b      	ldr	r3, [r7, #4]
 8103790:	681b      	ldr	r3, [r3, #0]
 8103792:	4a5a      	ldr	r2, [pc, #360]	; (81038fc <HAL_DMA_IRQHandler+0x420>)
 8103794:	4293      	cmp	r3, r2
 8103796:	d018      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	681b      	ldr	r3, [r3, #0]
 810379c:	4a58      	ldr	r2, [pc, #352]	; (8103900 <HAL_DMA_IRQHandler+0x424>)
 810379e:	4293      	cmp	r3, r2
 81037a0:	d013      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	681b      	ldr	r3, [r3, #0]
 81037a6:	4a57      	ldr	r2, [pc, #348]	; (8103904 <HAL_DMA_IRQHandler+0x428>)
 81037a8:	4293      	cmp	r3, r2
 81037aa:	d00e      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	4a55      	ldr	r2, [pc, #340]	; (8103908 <HAL_DMA_IRQHandler+0x42c>)
 81037b2:	4293      	cmp	r3, r2
 81037b4:	d009      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	681b      	ldr	r3, [r3, #0]
 81037ba:	4a54      	ldr	r2, [pc, #336]	; (810390c <HAL_DMA_IRQHandler+0x430>)
 81037bc:	4293      	cmp	r3, r2
 81037be:	d004      	beq.n	81037ca <HAL_DMA_IRQHandler+0x2ee>
 81037c0:	687b      	ldr	r3, [r7, #4]
 81037c2:	681b      	ldr	r3, [r3, #0]
 81037c4:	4a52      	ldr	r2, [pc, #328]	; (8103910 <HAL_DMA_IRQHandler+0x434>)
 81037c6:	4293      	cmp	r3, r2
 81037c8:	d10a      	bne.n	81037e0 <HAL_DMA_IRQHandler+0x304>
 81037ca:	687b      	ldr	r3, [r7, #4]
 81037cc:	681b      	ldr	r3, [r3, #0]
 81037ce:	695b      	ldr	r3, [r3, #20]
 81037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81037d4:	2b00      	cmp	r3, #0
 81037d6:	bf14      	ite	ne
 81037d8:	2301      	movne	r3, #1
 81037da:	2300      	moveq	r3, #0
 81037dc:	b2db      	uxtb	r3, r3
 81037de:	e003      	b.n	81037e8 <HAL_DMA_IRQHandler+0x30c>
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	681b      	ldr	r3, [r3, #0]
 81037e6:	2300      	movs	r3, #0
 81037e8:	2b00      	cmp	r3, #0
 81037ea:	d00d      	beq.n	8103808 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81037f0:	f003 031f 	and.w	r3, r3, #31
 81037f4:	2201      	movs	r2, #1
 81037f6:	409a      	lsls	r2, r3
 81037f8:	6a3b      	ldr	r3, [r7, #32]
 81037fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81037fc:	687b      	ldr	r3, [r7, #4]
 81037fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103800:	f043 0202 	orr.w	r2, r3, #2
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810380c:	f003 031f 	and.w	r3, r3, #31
 8103810:	2204      	movs	r2, #4
 8103812:	409a      	lsls	r2, r3
 8103814:	69bb      	ldr	r3, [r7, #24]
 8103816:	4013      	ands	r3, r2
 8103818:	2b00      	cmp	r3, #0
 810381a:	f000 808f 	beq.w	810393c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	681b      	ldr	r3, [r3, #0]
 8103822:	4a2c      	ldr	r2, [pc, #176]	; (81038d4 <HAL_DMA_IRQHandler+0x3f8>)
 8103824:	4293      	cmp	r3, r2
 8103826:	d04a      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	681b      	ldr	r3, [r3, #0]
 810382c:	4a2a      	ldr	r2, [pc, #168]	; (81038d8 <HAL_DMA_IRQHandler+0x3fc>)
 810382e:	4293      	cmp	r3, r2
 8103830:	d045      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	4a29      	ldr	r2, [pc, #164]	; (81038dc <HAL_DMA_IRQHandler+0x400>)
 8103838:	4293      	cmp	r3, r2
 810383a:	d040      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	681b      	ldr	r3, [r3, #0]
 8103840:	4a27      	ldr	r2, [pc, #156]	; (81038e0 <HAL_DMA_IRQHandler+0x404>)
 8103842:	4293      	cmp	r3, r2
 8103844:	d03b      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103846:	687b      	ldr	r3, [r7, #4]
 8103848:	681b      	ldr	r3, [r3, #0]
 810384a:	4a26      	ldr	r2, [pc, #152]	; (81038e4 <HAL_DMA_IRQHandler+0x408>)
 810384c:	4293      	cmp	r3, r2
 810384e:	d036      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103850:	687b      	ldr	r3, [r7, #4]
 8103852:	681b      	ldr	r3, [r3, #0]
 8103854:	4a24      	ldr	r2, [pc, #144]	; (81038e8 <HAL_DMA_IRQHandler+0x40c>)
 8103856:	4293      	cmp	r3, r2
 8103858:	d031      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	681b      	ldr	r3, [r3, #0]
 810385e:	4a23      	ldr	r2, [pc, #140]	; (81038ec <HAL_DMA_IRQHandler+0x410>)
 8103860:	4293      	cmp	r3, r2
 8103862:	d02c      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103864:	687b      	ldr	r3, [r7, #4]
 8103866:	681b      	ldr	r3, [r3, #0]
 8103868:	4a21      	ldr	r2, [pc, #132]	; (81038f0 <HAL_DMA_IRQHandler+0x414>)
 810386a:	4293      	cmp	r3, r2
 810386c:	d027      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 810386e:	687b      	ldr	r3, [r7, #4]
 8103870:	681b      	ldr	r3, [r3, #0]
 8103872:	4a20      	ldr	r2, [pc, #128]	; (81038f4 <HAL_DMA_IRQHandler+0x418>)
 8103874:	4293      	cmp	r3, r2
 8103876:	d022      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103878:	687b      	ldr	r3, [r7, #4]
 810387a:	681b      	ldr	r3, [r3, #0]
 810387c:	4a1e      	ldr	r2, [pc, #120]	; (81038f8 <HAL_DMA_IRQHandler+0x41c>)
 810387e:	4293      	cmp	r3, r2
 8103880:	d01d      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	681b      	ldr	r3, [r3, #0]
 8103886:	4a1d      	ldr	r2, [pc, #116]	; (81038fc <HAL_DMA_IRQHandler+0x420>)
 8103888:	4293      	cmp	r3, r2
 810388a:	d018      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 810388c:	687b      	ldr	r3, [r7, #4]
 810388e:	681b      	ldr	r3, [r3, #0]
 8103890:	4a1b      	ldr	r2, [pc, #108]	; (8103900 <HAL_DMA_IRQHandler+0x424>)
 8103892:	4293      	cmp	r3, r2
 8103894:	d013      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	681b      	ldr	r3, [r3, #0]
 810389a:	4a1a      	ldr	r2, [pc, #104]	; (8103904 <HAL_DMA_IRQHandler+0x428>)
 810389c:	4293      	cmp	r3, r2
 810389e:	d00e      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 81038a0:	687b      	ldr	r3, [r7, #4]
 81038a2:	681b      	ldr	r3, [r3, #0]
 81038a4:	4a18      	ldr	r2, [pc, #96]	; (8103908 <HAL_DMA_IRQHandler+0x42c>)
 81038a6:	4293      	cmp	r3, r2
 81038a8:	d009      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	681b      	ldr	r3, [r3, #0]
 81038ae:	4a17      	ldr	r2, [pc, #92]	; (810390c <HAL_DMA_IRQHandler+0x430>)
 81038b0:	4293      	cmp	r3, r2
 81038b2:	d004      	beq.n	81038be <HAL_DMA_IRQHandler+0x3e2>
 81038b4:	687b      	ldr	r3, [r7, #4]
 81038b6:	681b      	ldr	r3, [r3, #0]
 81038b8:	4a15      	ldr	r2, [pc, #84]	; (8103910 <HAL_DMA_IRQHandler+0x434>)
 81038ba:	4293      	cmp	r3, r2
 81038bc:	d12a      	bne.n	8103914 <HAL_DMA_IRQHandler+0x438>
 81038be:	687b      	ldr	r3, [r7, #4]
 81038c0:	681b      	ldr	r3, [r3, #0]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	f003 0302 	and.w	r3, r3, #2
 81038c8:	2b00      	cmp	r3, #0
 81038ca:	bf14      	ite	ne
 81038cc:	2301      	movne	r3, #1
 81038ce:	2300      	moveq	r3, #0
 81038d0:	b2db      	uxtb	r3, r3
 81038d2:	e023      	b.n	810391c <HAL_DMA_IRQHandler+0x440>
 81038d4:	40020010 	.word	0x40020010
 81038d8:	40020028 	.word	0x40020028
 81038dc:	40020040 	.word	0x40020040
 81038e0:	40020058 	.word	0x40020058
 81038e4:	40020070 	.word	0x40020070
 81038e8:	40020088 	.word	0x40020088
 81038ec:	400200a0 	.word	0x400200a0
 81038f0:	400200b8 	.word	0x400200b8
 81038f4:	40020410 	.word	0x40020410
 81038f8:	40020428 	.word	0x40020428
 81038fc:	40020440 	.word	0x40020440
 8103900:	40020458 	.word	0x40020458
 8103904:	40020470 	.word	0x40020470
 8103908:	40020488 	.word	0x40020488
 810390c:	400204a0 	.word	0x400204a0
 8103910:	400204b8 	.word	0x400204b8
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	681b      	ldr	r3, [r3, #0]
 810391a:	2300      	movs	r3, #0
 810391c:	2b00      	cmp	r3, #0
 810391e:	d00d      	beq.n	810393c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103920:	687b      	ldr	r3, [r7, #4]
 8103922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103924:	f003 031f 	and.w	r3, r3, #31
 8103928:	2204      	movs	r2, #4
 810392a:	409a      	lsls	r2, r3
 810392c:	6a3b      	ldr	r3, [r7, #32]
 810392e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103934:	f043 0204 	orr.w	r2, r3, #4
 8103938:	687b      	ldr	r3, [r7, #4]
 810393a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810393c:	687b      	ldr	r3, [r7, #4]
 810393e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103940:	f003 031f 	and.w	r3, r3, #31
 8103944:	2210      	movs	r2, #16
 8103946:	409a      	lsls	r2, r3
 8103948:	69bb      	ldr	r3, [r7, #24]
 810394a:	4013      	ands	r3, r2
 810394c:	2b00      	cmp	r3, #0
 810394e:	f000 80a6 	beq.w	8103a9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	681b      	ldr	r3, [r3, #0]
 8103956:	4a85      	ldr	r2, [pc, #532]	; (8103b6c <HAL_DMA_IRQHandler+0x690>)
 8103958:	4293      	cmp	r3, r2
 810395a:	d04a      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	681b      	ldr	r3, [r3, #0]
 8103960:	4a83      	ldr	r2, [pc, #524]	; (8103b70 <HAL_DMA_IRQHandler+0x694>)
 8103962:	4293      	cmp	r3, r2
 8103964:	d045      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	681b      	ldr	r3, [r3, #0]
 810396a:	4a82      	ldr	r2, [pc, #520]	; (8103b74 <HAL_DMA_IRQHandler+0x698>)
 810396c:	4293      	cmp	r3, r2
 810396e:	d040      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	681b      	ldr	r3, [r3, #0]
 8103974:	4a80      	ldr	r2, [pc, #512]	; (8103b78 <HAL_DMA_IRQHandler+0x69c>)
 8103976:	4293      	cmp	r3, r2
 8103978:	d03b      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	681b      	ldr	r3, [r3, #0]
 810397e:	4a7f      	ldr	r2, [pc, #508]	; (8103b7c <HAL_DMA_IRQHandler+0x6a0>)
 8103980:	4293      	cmp	r3, r2
 8103982:	d036      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	4a7d      	ldr	r2, [pc, #500]	; (8103b80 <HAL_DMA_IRQHandler+0x6a4>)
 810398a:	4293      	cmp	r3, r2
 810398c:	d031      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	4a7c      	ldr	r2, [pc, #496]	; (8103b84 <HAL_DMA_IRQHandler+0x6a8>)
 8103994:	4293      	cmp	r3, r2
 8103996:	d02c      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	681b      	ldr	r3, [r3, #0]
 810399c:	4a7a      	ldr	r2, [pc, #488]	; (8103b88 <HAL_DMA_IRQHandler+0x6ac>)
 810399e:	4293      	cmp	r3, r2
 81039a0:	d027      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	4a79      	ldr	r2, [pc, #484]	; (8103b8c <HAL_DMA_IRQHandler+0x6b0>)
 81039a8:	4293      	cmp	r3, r2
 81039aa:	d022      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	681b      	ldr	r3, [r3, #0]
 81039b0:	4a77      	ldr	r2, [pc, #476]	; (8103b90 <HAL_DMA_IRQHandler+0x6b4>)
 81039b2:	4293      	cmp	r3, r2
 81039b4:	d01d      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	681b      	ldr	r3, [r3, #0]
 81039ba:	4a76      	ldr	r2, [pc, #472]	; (8103b94 <HAL_DMA_IRQHandler+0x6b8>)
 81039bc:	4293      	cmp	r3, r2
 81039be:	d018      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	4a74      	ldr	r2, [pc, #464]	; (8103b98 <HAL_DMA_IRQHandler+0x6bc>)
 81039c6:	4293      	cmp	r3, r2
 81039c8:	d013      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	681b      	ldr	r3, [r3, #0]
 81039ce:	4a73      	ldr	r2, [pc, #460]	; (8103b9c <HAL_DMA_IRQHandler+0x6c0>)
 81039d0:	4293      	cmp	r3, r2
 81039d2:	d00e      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039d4:	687b      	ldr	r3, [r7, #4]
 81039d6:	681b      	ldr	r3, [r3, #0]
 81039d8:	4a71      	ldr	r2, [pc, #452]	; (8103ba0 <HAL_DMA_IRQHandler+0x6c4>)
 81039da:	4293      	cmp	r3, r2
 81039dc:	d009      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	681b      	ldr	r3, [r3, #0]
 81039e2:	4a70      	ldr	r2, [pc, #448]	; (8103ba4 <HAL_DMA_IRQHandler+0x6c8>)
 81039e4:	4293      	cmp	r3, r2
 81039e6:	d004      	beq.n	81039f2 <HAL_DMA_IRQHandler+0x516>
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	4a6e      	ldr	r2, [pc, #440]	; (8103ba8 <HAL_DMA_IRQHandler+0x6cc>)
 81039ee:	4293      	cmp	r3, r2
 81039f0:	d10a      	bne.n	8103a08 <HAL_DMA_IRQHandler+0x52c>
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	681b      	ldr	r3, [r3, #0]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	f003 0308 	and.w	r3, r3, #8
 81039fc:	2b00      	cmp	r3, #0
 81039fe:	bf14      	ite	ne
 8103a00:	2301      	movne	r3, #1
 8103a02:	2300      	moveq	r3, #0
 8103a04:	b2db      	uxtb	r3, r3
 8103a06:	e009      	b.n	8103a1c <HAL_DMA_IRQHandler+0x540>
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	681b      	ldr	r3, [r3, #0]
 8103a0e:	f003 0304 	and.w	r3, r3, #4
 8103a12:	2b00      	cmp	r3, #0
 8103a14:	bf14      	ite	ne
 8103a16:	2301      	movne	r3, #1
 8103a18:	2300      	moveq	r3, #0
 8103a1a:	b2db      	uxtb	r3, r3
 8103a1c:	2b00      	cmp	r3, #0
 8103a1e:	d03e      	beq.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a24:	f003 031f 	and.w	r3, r3, #31
 8103a28:	2210      	movs	r2, #16
 8103a2a:	409a      	lsls	r2, r3
 8103a2c:	6a3b      	ldr	r3, [r7, #32]
 8103a2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	681b      	ldr	r3, [r3, #0]
 8103a34:	681b      	ldr	r3, [r3, #0]
 8103a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103a3a:	2b00      	cmp	r3, #0
 8103a3c:	d018      	beq.n	8103a70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	681b      	ldr	r3, [r3, #0]
 8103a42:	681b      	ldr	r3, [r3, #0]
 8103a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103a48:	2b00      	cmp	r3, #0
 8103a4a:	d108      	bne.n	8103a5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a50:	2b00      	cmp	r3, #0
 8103a52:	d024      	beq.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103a54:	687b      	ldr	r3, [r7, #4]
 8103a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a58:	6878      	ldr	r0, [r7, #4]
 8103a5a:	4798      	blx	r3
 8103a5c:	e01f      	b.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8103a5e:	687b      	ldr	r3, [r7, #4]
 8103a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103a62:	2b00      	cmp	r3, #0
 8103a64:	d01b      	beq.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103a6a:	6878      	ldr	r0, [r7, #4]
 8103a6c:	4798      	blx	r3
 8103a6e:	e016      	b.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	681b      	ldr	r3, [r3, #0]
 8103a74:	681b      	ldr	r3, [r3, #0]
 8103a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103a7a:	2b00      	cmp	r3, #0
 8103a7c:	d107      	bne.n	8103a8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103a7e:	687b      	ldr	r3, [r7, #4]
 8103a80:	681b      	ldr	r3, [r3, #0]
 8103a82:	681a      	ldr	r2, [r3, #0]
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	f022 0208 	bic.w	r2, r2, #8
 8103a8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a92:	2b00      	cmp	r3, #0
 8103a94:	d003      	beq.n	8103a9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a9a:	6878      	ldr	r0, [r7, #4]
 8103a9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103aa2:	f003 031f 	and.w	r3, r3, #31
 8103aa6:	2220      	movs	r2, #32
 8103aa8:	409a      	lsls	r2, r3
 8103aaa:	69bb      	ldr	r3, [r7, #24]
 8103aac:	4013      	ands	r3, r2
 8103aae:	2b00      	cmp	r3, #0
 8103ab0:	f000 8110 	beq.w	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	4a2c      	ldr	r2, [pc, #176]	; (8103b6c <HAL_DMA_IRQHandler+0x690>)
 8103aba:	4293      	cmp	r3, r2
 8103abc:	d04a      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	4a2b      	ldr	r2, [pc, #172]	; (8103b70 <HAL_DMA_IRQHandler+0x694>)
 8103ac4:	4293      	cmp	r3, r2
 8103ac6:	d045      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	4a29      	ldr	r2, [pc, #164]	; (8103b74 <HAL_DMA_IRQHandler+0x698>)
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d040      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	4a28      	ldr	r2, [pc, #160]	; (8103b78 <HAL_DMA_IRQHandler+0x69c>)
 8103ad8:	4293      	cmp	r3, r2
 8103ada:	d03b      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	4a26      	ldr	r2, [pc, #152]	; (8103b7c <HAL_DMA_IRQHandler+0x6a0>)
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d036      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	681b      	ldr	r3, [r3, #0]
 8103aea:	4a25      	ldr	r2, [pc, #148]	; (8103b80 <HAL_DMA_IRQHandler+0x6a4>)
 8103aec:	4293      	cmp	r3, r2
 8103aee:	d031      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	4a23      	ldr	r2, [pc, #140]	; (8103b84 <HAL_DMA_IRQHandler+0x6a8>)
 8103af6:	4293      	cmp	r3, r2
 8103af8:	d02c      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	681b      	ldr	r3, [r3, #0]
 8103afe:	4a22      	ldr	r2, [pc, #136]	; (8103b88 <HAL_DMA_IRQHandler+0x6ac>)
 8103b00:	4293      	cmp	r3, r2
 8103b02:	d027      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	4a20      	ldr	r2, [pc, #128]	; (8103b8c <HAL_DMA_IRQHandler+0x6b0>)
 8103b0a:	4293      	cmp	r3, r2
 8103b0c:	d022      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	4a1f      	ldr	r2, [pc, #124]	; (8103b90 <HAL_DMA_IRQHandler+0x6b4>)
 8103b14:	4293      	cmp	r3, r2
 8103b16:	d01d      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	681b      	ldr	r3, [r3, #0]
 8103b1c:	4a1d      	ldr	r2, [pc, #116]	; (8103b94 <HAL_DMA_IRQHandler+0x6b8>)
 8103b1e:	4293      	cmp	r3, r2
 8103b20:	d018      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	681b      	ldr	r3, [r3, #0]
 8103b26:	4a1c      	ldr	r2, [pc, #112]	; (8103b98 <HAL_DMA_IRQHandler+0x6bc>)
 8103b28:	4293      	cmp	r3, r2
 8103b2a:	d013      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	4a1a      	ldr	r2, [pc, #104]	; (8103b9c <HAL_DMA_IRQHandler+0x6c0>)
 8103b32:	4293      	cmp	r3, r2
 8103b34:	d00e      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	4a19      	ldr	r2, [pc, #100]	; (8103ba0 <HAL_DMA_IRQHandler+0x6c4>)
 8103b3c:	4293      	cmp	r3, r2
 8103b3e:	d009      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	681b      	ldr	r3, [r3, #0]
 8103b44:	4a17      	ldr	r2, [pc, #92]	; (8103ba4 <HAL_DMA_IRQHandler+0x6c8>)
 8103b46:	4293      	cmp	r3, r2
 8103b48:	d004      	beq.n	8103b54 <HAL_DMA_IRQHandler+0x678>
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	681b      	ldr	r3, [r3, #0]
 8103b4e:	4a16      	ldr	r2, [pc, #88]	; (8103ba8 <HAL_DMA_IRQHandler+0x6cc>)
 8103b50:	4293      	cmp	r3, r2
 8103b52:	d12b      	bne.n	8103bac <HAL_DMA_IRQHandler+0x6d0>
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	681b      	ldr	r3, [r3, #0]
 8103b58:	681b      	ldr	r3, [r3, #0]
 8103b5a:	f003 0310 	and.w	r3, r3, #16
 8103b5e:	2b00      	cmp	r3, #0
 8103b60:	bf14      	ite	ne
 8103b62:	2301      	movne	r3, #1
 8103b64:	2300      	moveq	r3, #0
 8103b66:	b2db      	uxtb	r3, r3
 8103b68:	e02a      	b.n	8103bc0 <HAL_DMA_IRQHandler+0x6e4>
 8103b6a:	bf00      	nop
 8103b6c:	40020010 	.word	0x40020010
 8103b70:	40020028 	.word	0x40020028
 8103b74:	40020040 	.word	0x40020040
 8103b78:	40020058 	.word	0x40020058
 8103b7c:	40020070 	.word	0x40020070
 8103b80:	40020088 	.word	0x40020088
 8103b84:	400200a0 	.word	0x400200a0
 8103b88:	400200b8 	.word	0x400200b8
 8103b8c:	40020410 	.word	0x40020410
 8103b90:	40020428 	.word	0x40020428
 8103b94:	40020440 	.word	0x40020440
 8103b98:	40020458 	.word	0x40020458
 8103b9c:	40020470 	.word	0x40020470
 8103ba0:	40020488 	.word	0x40020488
 8103ba4:	400204a0 	.word	0x400204a0
 8103ba8:	400204b8 	.word	0x400204b8
 8103bac:	687b      	ldr	r3, [r7, #4]
 8103bae:	681b      	ldr	r3, [r3, #0]
 8103bb0:	681b      	ldr	r3, [r3, #0]
 8103bb2:	f003 0302 	and.w	r3, r3, #2
 8103bb6:	2b00      	cmp	r3, #0
 8103bb8:	bf14      	ite	ne
 8103bba:	2301      	movne	r3, #1
 8103bbc:	2300      	moveq	r3, #0
 8103bbe:	b2db      	uxtb	r3, r3
 8103bc0:	2b00      	cmp	r3, #0
 8103bc2:	f000 8087 	beq.w	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103bca:	f003 031f 	and.w	r3, r3, #31
 8103bce:	2220      	movs	r2, #32
 8103bd0:	409a      	lsls	r2, r3
 8103bd2:	6a3b      	ldr	r3, [r7, #32]
 8103bd4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8103bd6:	687b      	ldr	r3, [r7, #4]
 8103bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103bdc:	b2db      	uxtb	r3, r3
 8103bde:	2b04      	cmp	r3, #4
 8103be0:	d139      	bne.n	8103c56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	681b      	ldr	r3, [r3, #0]
 8103be6:	681a      	ldr	r2, [r3, #0]
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	681b      	ldr	r3, [r3, #0]
 8103bec:	f022 0216 	bic.w	r2, r2, #22
 8103bf0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	695a      	ldr	r2, [r3, #20]
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	681b      	ldr	r3, [r3, #0]
 8103bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103c00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103c06:	2b00      	cmp	r3, #0
 8103c08:	d103      	bne.n	8103c12 <HAL_DMA_IRQHandler+0x736>
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103c0e:	2b00      	cmp	r3, #0
 8103c10:	d007      	beq.n	8103c22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	681b      	ldr	r3, [r3, #0]
 8103c16:	681a      	ldr	r2, [r3, #0]
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	f022 0208 	bic.w	r2, r2, #8
 8103c20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c26:	f003 031f 	and.w	r3, r3, #31
 8103c2a:	223f      	movs	r2, #63	; 0x3f
 8103c2c:	409a      	lsls	r2, r3
 8103c2e:	6a3b      	ldr	r3, [r7, #32]
 8103c30:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	2200      	movs	r2, #0
 8103c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	2201      	movs	r2, #1
 8103c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103c46:	2b00      	cmp	r3, #0
 8103c48:	f000 834a 	beq.w	81042e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103c50:	6878      	ldr	r0, [r7, #4]
 8103c52:	4798      	blx	r3
          }
          return;
 8103c54:	e344      	b.n	81042e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	681b      	ldr	r3, [r3, #0]
 8103c5a:	681b      	ldr	r3, [r3, #0]
 8103c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103c60:	2b00      	cmp	r3, #0
 8103c62:	d018      	beq.n	8103c96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	681b      	ldr	r3, [r3, #0]
 8103c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103c6e:	2b00      	cmp	r3, #0
 8103c70:	d108      	bne.n	8103c84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103c76:	2b00      	cmp	r3, #0
 8103c78:	d02c      	beq.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103c7e:	6878      	ldr	r0, [r7, #4]
 8103c80:	4798      	blx	r3
 8103c82:	e027      	b.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103c88:	2b00      	cmp	r3, #0
 8103c8a:	d023      	beq.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103c90:	6878      	ldr	r0, [r7, #4]
 8103c92:	4798      	blx	r3
 8103c94:	e01e      	b.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103c96:	687b      	ldr	r3, [r7, #4]
 8103c98:	681b      	ldr	r3, [r3, #0]
 8103c9a:	681b      	ldr	r3, [r3, #0]
 8103c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103ca0:	2b00      	cmp	r3, #0
 8103ca2:	d10f      	bne.n	8103cc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	681a      	ldr	r2, [r3, #0]
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	681b      	ldr	r3, [r3, #0]
 8103cae:	f022 0210 	bic.w	r2, r2, #16
 8103cb2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	2200      	movs	r2, #0
 8103cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	2201      	movs	r2, #1
 8103cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103cc8:	2b00      	cmp	r3, #0
 8103cca:	d003      	beq.n	8103cd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103cd0:	6878      	ldr	r0, [r7, #4]
 8103cd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103cd8:	2b00      	cmp	r3, #0
 8103cda:	f000 8306 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ce2:	f003 0301 	and.w	r3, r3, #1
 8103ce6:	2b00      	cmp	r3, #0
 8103ce8:	f000 8088 	beq.w	8103dfc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8103cec:	687b      	ldr	r3, [r7, #4]
 8103cee:	2204      	movs	r2, #4
 8103cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8103cf4:	687b      	ldr	r3, [r7, #4]
 8103cf6:	681b      	ldr	r3, [r3, #0]
 8103cf8:	4a7a      	ldr	r2, [pc, #488]	; (8103ee4 <HAL_DMA_IRQHandler+0xa08>)
 8103cfa:	4293      	cmp	r3, r2
 8103cfc:	d04a      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	681b      	ldr	r3, [r3, #0]
 8103d02:	4a79      	ldr	r2, [pc, #484]	; (8103ee8 <HAL_DMA_IRQHandler+0xa0c>)
 8103d04:	4293      	cmp	r3, r2
 8103d06:	d045      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	681b      	ldr	r3, [r3, #0]
 8103d0c:	4a77      	ldr	r2, [pc, #476]	; (8103eec <HAL_DMA_IRQHandler+0xa10>)
 8103d0e:	4293      	cmp	r3, r2
 8103d10:	d040      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d12:	687b      	ldr	r3, [r7, #4]
 8103d14:	681b      	ldr	r3, [r3, #0]
 8103d16:	4a76      	ldr	r2, [pc, #472]	; (8103ef0 <HAL_DMA_IRQHandler+0xa14>)
 8103d18:	4293      	cmp	r3, r2
 8103d1a:	d03b      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d1c:	687b      	ldr	r3, [r7, #4]
 8103d1e:	681b      	ldr	r3, [r3, #0]
 8103d20:	4a74      	ldr	r2, [pc, #464]	; (8103ef4 <HAL_DMA_IRQHandler+0xa18>)
 8103d22:	4293      	cmp	r3, r2
 8103d24:	d036      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d26:	687b      	ldr	r3, [r7, #4]
 8103d28:	681b      	ldr	r3, [r3, #0]
 8103d2a:	4a73      	ldr	r2, [pc, #460]	; (8103ef8 <HAL_DMA_IRQHandler+0xa1c>)
 8103d2c:	4293      	cmp	r3, r2
 8103d2e:	d031      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	681b      	ldr	r3, [r3, #0]
 8103d34:	4a71      	ldr	r2, [pc, #452]	; (8103efc <HAL_DMA_IRQHandler+0xa20>)
 8103d36:	4293      	cmp	r3, r2
 8103d38:	d02c      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	681b      	ldr	r3, [r3, #0]
 8103d3e:	4a70      	ldr	r2, [pc, #448]	; (8103f00 <HAL_DMA_IRQHandler+0xa24>)
 8103d40:	4293      	cmp	r3, r2
 8103d42:	d027      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	681b      	ldr	r3, [r3, #0]
 8103d48:	4a6e      	ldr	r2, [pc, #440]	; (8103f04 <HAL_DMA_IRQHandler+0xa28>)
 8103d4a:	4293      	cmp	r3, r2
 8103d4c:	d022      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	681b      	ldr	r3, [r3, #0]
 8103d52:	4a6d      	ldr	r2, [pc, #436]	; (8103f08 <HAL_DMA_IRQHandler+0xa2c>)
 8103d54:	4293      	cmp	r3, r2
 8103d56:	d01d      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	4a6b      	ldr	r2, [pc, #428]	; (8103f0c <HAL_DMA_IRQHandler+0xa30>)
 8103d5e:	4293      	cmp	r3, r2
 8103d60:	d018      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	681b      	ldr	r3, [r3, #0]
 8103d66:	4a6a      	ldr	r2, [pc, #424]	; (8103f10 <HAL_DMA_IRQHandler+0xa34>)
 8103d68:	4293      	cmp	r3, r2
 8103d6a:	d013      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	681b      	ldr	r3, [r3, #0]
 8103d70:	4a68      	ldr	r2, [pc, #416]	; (8103f14 <HAL_DMA_IRQHandler+0xa38>)
 8103d72:	4293      	cmp	r3, r2
 8103d74:	d00e      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	681b      	ldr	r3, [r3, #0]
 8103d7a:	4a67      	ldr	r2, [pc, #412]	; (8103f18 <HAL_DMA_IRQHandler+0xa3c>)
 8103d7c:	4293      	cmp	r3, r2
 8103d7e:	d009      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	4a65      	ldr	r2, [pc, #404]	; (8103f1c <HAL_DMA_IRQHandler+0xa40>)
 8103d86:	4293      	cmp	r3, r2
 8103d88:	d004      	beq.n	8103d94 <HAL_DMA_IRQHandler+0x8b8>
 8103d8a:	687b      	ldr	r3, [r7, #4]
 8103d8c:	681b      	ldr	r3, [r3, #0]
 8103d8e:	4a64      	ldr	r2, [pc, #400]	; (8103f20 <HAL_DMA_IRQHandler+0xa44>)
 8103d90:	4293      	cmp	r3, r2
 8103d92:	d108      	bne.n	8103da6 <HAL_DMA_IRQHandler+0x8ca>
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	681b      	ldr	r3, [r3, #0]
 8103d98:	681a      	ldr	r2, [r3, #0]
 8103d9a:	687b      	ldr	r3, [r7, #4]
 8103d9c:	681b      	ldr	r3, [r3, #0]
 8103d9e:	f022 0201 	bic.w	r2, r2, #1
 8103da2:	601a      	str	r2, [r3, #0]
 8103da4:	e007      	b.n	8103db6 <HAL_DMA_IRQHandler+0x8da>
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	681b      	ldr	r3, [r3, #0]
 8103daa:	681a      	ldr	r2, [r3, #0]
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	681b      	ldr	r3, [r3, #0]
 8103db0:	f022 0201 	bic.w	r2, r2, #1
 8103db4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8103db6:	68fb      	ldr	r3, [r7, #12]
 8103db8:	3301      	adds	r3, #1
 8103dba:	60fb      	str	r3, [r7, #12]
 8103dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103dbe:	429a      	cmp	r2, r3
 8103dc0:	d307      	bcc.n	8103dd2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	681b      	ldr	r3, [r3, #0]
 8103dc6:	681b      	ldr	r3, [r3, #0]
 8103dc8:	f003 0301 	and.w	r3, r3, #1
 8103dcc:	2b00      	cmp	r3, #0
 8103dce:	d1f2      	bne.n	8103db6 <HAL_DMA_IRQHandler+0x8da>
 8103dd0:	e000      	b.n	8103dd4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8103dd2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8103dd4:	687b      	ldr	r3, [r7, #4]
 8103dd6:	2200      	movs	r2, #0
 8103dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103ddc:	687b      	ldr	r3, [r7, #4]
 8103dde:	681b      	ldr	r3, [r3, #0]
 8103de0:	681b      	ldr	r3, [r3, #0]
 8103de2:	f003 0301 	and.w	r3, r3, #1
 8103de6:	2b00      	cmp	r3, #0
 8103de8:	d004      	beq.n	8103df4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	2203      	movs	r2, #3
 8103dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8103df2:	e003      	b.n	8103dfc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	2201      	movs	r2, #1
 8103df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e00:	2b00      	cmp	r3, #0
 8103e02:	f000 8272 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e0a:	6878      	ldr	r0, [r7, #4]
 8103e0c:	4798      	blx	r3
 8103e0e:	e26c      	b.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	681b      	ldr	r3, [r3, #0]
 8103e14:	4a43      	ldr	r2, [pc, #268]	; (8103f24 <HAL_DMA_IRQHandler+0xa48>)
 8103e16:	4293      	cmp	r3, r2
 8103e18:	d022      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	681b      	ldr	r3, [r3, #0]
 8103e1e:	4a42      	ldr	r2, [pc, #264]	; (8103f28 <HAL_DMA_IRQHandler+0xa4c>)
 8103e20:	4293      	cmp	r3, r2
 8103e22:	d01d      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	681b      	ldr	r3, [r3, #0]
 8103e28:	4a40      	ldr	r2, [pc, #256]	; (8103f2c <HAL_DMA_IRQHandler+0xa50>)
 8103e2a:	4293      	cmp	r3, r2
 8103e2c:	d018      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	4a3f      	ldr	r2, [pc, #252]	; (8103f30 <HAL_DMA_IRQHandler+0xa54>)
 8103e34:	4293      	cmp	r3, r2
 8103e36:	d013      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e38:	687b      	ldr	r3, [r7, #4]
 8103e3a:	681b      	ldr	r3, [r3, #0]
 8103e3c:	4a3d      	ldr	r2, [pc, #244]	; (8103f34 <HAL_DMA_IRQHandler+0xa58>)
 8103e3e:	4293      	cmp	r3, r2
 8103e40:	d00e      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	681b      	ldr	r3, [r3, #0]
 8103e46:	4a3c      	ldr	r2, [pc, #240]	; (8103f38 <HAL_DMA_IRQHandler+0xa5c>)
 8103e48:	4293      	cmp	r3, r2
 8103e4a:	d009      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	681b      	ldr	r3, [r3, #0]
 8103e50:	4a3a      	ldr	r2, [pc, #232]	; (8103f3c <HAL_DMA_IRQHandler+0xa60>)
 8103e52:	4293      	cmp	r3, r2
 8103e54:	d004      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x984>
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	681b      	ldr	r3, [r3, #0]
 8103e5a:	4a39      	ldr	r2, [pc, #228]	; (8103f40 <HAL_DMA_IRQHandler+0xa64>)
 8103e5c:	4293      	cmp	r3, r2
 8103e5e:	d101      	bne.n	8103e64 <HAL_DMA_IRQHandler+0x988>
 8103e60:	2301      	movs	r3, #1
 8103e62:	e000      	b.n	8103e66 <HAL_DMA_IRQHandler+0x98a>
 8103e64:	2300      	movs	r3, #0
 8103e66:	2b00      	cmp	r3, #0
 8103e68:	f000 823f 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	681b      	ldr	r3, [r3, #0]
 8103e72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e78:	f003 031f 	and.w	r3, r3, #31
 8103e7c:	2204      	movs	r2, #4
 8103e7e:	409a      	lsls	r2, r3
 8103e80:	697b      	ldr	r3, [r7, #20]
 8103e82:	4013      	ands	r3, r2
 8103e84:	2b00      	cmp	r3, #0
 8103e86:	f000 80cd 	beq.w	8104024 <HAL_DMA_IRQHandler+0xb48>
 8103e8a:	693b      	ldr	r3, [r7, #16]
 8103e8c:	f003 0304 	and.w	r3, r3, #4
 8103e90:	2b00      	cmp	r3, #0
 8103e92:	f000 80c7 	beq.w	8104024 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103e96:	687b      	ldr	r3, [r7, #4]
 8103e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e9a:	f003 031f 	and.w	r3, r3, #31
 8103e9e:	2204      	movs	r2, #4
 8103ea0:	409a      	lsls	r2, r3
 8103ea2:	69fb      	ldr	r3, [r7, #28]
 8103ea4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ea6:	693b      	ldr	r3, [r7, #16]
 8103ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103eac:	2b00      	cmp	r3, #0
 8103eae:	d049      	beq.n	8103f44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103eb0:	693b      	ldr	r3, [r7, #16]
 8103eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103eb6:	2b00      	cmp	r3, #0
 8103eb8:	d109      	bne.n	8103ece <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ebe:	2b00      	cmp	r3, #0
 8103ec0:	f000 8210 	beq.w	81042e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ec8:	6878      	ldr	r0, [r7, #4]
 8103eca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ecc:	e20a      	b.n	81042e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ed2:	2b00      	cmp	r3, #0
 8103ed4:	f000 8206 	beq.w	81042e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8103ed8:	687b      	ldr	r3, [r7, #4]
 8103eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103edc:	6878      	ldr	r0, [r7, #4]
 8103ede:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ee0:	e200      	b.n	81042e4 <HAL_DMA_IRQHandler+0xe08>
 8103ee2:	bf00      	nop
 8103ee4:	40020010 	.word	0x40020010
 8103ee8:	40020028 	.word	0x40020028
 8103eec:	40020040 	.word	0x40020040
 8103ef0:	40020058 	.word	0x40020058
 8103ef4:	40020070 	.word	0x40020070
 8103ef8:	40020088 	.word	0x40020088
 8103efc:	400200a0 	.word	0x400200a0
 8103f00:	400200b8 	.word	0x400200b8
 8103f04:	40020410 	.word	0x40020410
 8103f08:	40020428 	.word	0x40020428
 8103f0c:	40020440 	.word	0x40020440
 8103f10:	40020458 	.word	0x40020458
 8103f14:	40020470 	.word	0x40020470
 8103f18:	40020488 	.word	0x40020488
 8103f1c:	400204a0 	.word	0x400204a0
 8103f20:	400204b8 	.word	0x400204b8
 8103f24:	58025408 	.word	0x58025408
 8103f28:	5802541c 	.word	0x5802541c
 8103f2c:	58025430 	.word	0x58025430
 8103f30:	58025444 	.word	0x58025444
 8103f34:	58025458 	.word	0x58025458
 8103f38:	5802546c 	.word	0x5802546c
 8103f3c:	58025480 	.word	0x58025480
 8103f40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103f44:	693b      	ldr	r3, [r7, #16]
 8103f46:	f003 0320 	and.w	r3, r3, #32
 8103f4a:	2b00      	cmp	r3, #0
 8103f4c:	d160      	bne.n	8104010 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	4a8c      	ldr	r2, [pc, #560]	; (8104184 <HAL_DMA_IRQHandler+0xca8>)
 8103f54:	4293      	cmp	r3, r2
 8103f56:	d04a      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	4a8a      	ldr	r2, [pc, #552]	; (8104188 <HAL_DMA_IRQHandler+0xcac>)
 8103f5e:	4293      	cmp	r3, r2
 8103f60:	d045      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	681b      	ldr	r3, [r3, #0]
 8103f66:	4a89      	ldr	r2, [pc, #548]	; (810418c <HAL_DMA_IRQHandler+0xcb0>)
 8103f68:	4293      	cmp	r3, r2
 8103f6a:	d040      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f6c:	687b      	ldr	r3, [r7, #4]
 8103f6e:	681b      	ldr	r3, [r3, #0]
 8103f70:	4a87      	ldr	r2, [pc, #540]	; (8104190 <HAL_DMA_IRQHandler+0xcb4>)
 8103f72:	4293      	cmp	r3, r2
 8103f74:	d03b      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f76:	687b      	ldr	r3, [r7, #4]
 8103f78:	681b      	ldr	r3, [r3, #0]
 8103f7a:	4a86      	ldr	r2, [pc, #536]	; (8104194 <HAL_DMA_IRQHandler+0xcb8>)
 8103f7c:	4293      	cmp	r3, r2
 8103f7e:	d036      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f80:	687b      	ldr	r3, [r7, #4]
 8103f82:	681b      	ldr	r3, [r3, #0]
 8103f84:	4a84      	ldr	r2, [pc, #528]	; (8104198 <HAL_DMA_IRQHandler+0xcbc>)
 8103f86:	4293      	cmp	r3, r2
 8103f88:	d031      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f8a:	687b      	ldr	r3, [r7, #4]
 8103f8c:	681b      	ldr	r3, [r3, #0]
 8103f8e:	4a83      	ldr	r2, [pc, #524]	; (810419c <HAL_DMA_IRQHandler+0xcc0>)
 8103f90:	4293      	cmp	r3, r2
 8103f92:	d02c      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	681b      	ldr	r3, [r3, #0]
 8103f98:	4a81      	ldr	r2, [pc, #516]	; (81041a0 <HAL_DMA_IRQHandler+0xcc4>)
 8103f9a:	4293      	cmp	r3, r2
 8103f9c:	d027      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103f9e:	687b      	ldr	r3, [r7, #4]
 8103fa0:	681b      	ldr	r3, [r3, #0]
 8103fa2:	4a80      	ldr	r2, [pc, #512]	; (81041a4 <HAL_DMA_IRQHandler+0xcc8>)
 8103fa4:	4293      	cmp	r3, r2
 8103fa6:	d022      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	681b      	ldr	r3, [r3, #0]
 8103fac:	4a7e      	ldr	r2, [pc, #504]	; (81041a8 <HAL_DMA_IRQHandler+0xccc>)
 8103fae:	4293      	cmp	r3, r2
 8103fb0:	d01d      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fb2:	687b      	ldr	r3, [r7, #4]
 8103fb4:	681b      	ldr	r3, [r3, #0]
 8103fb6:	4a7d      	ldr	r2, [pc, #500]	; (81041ac <HAL_DMA_IRQHandler+0xcd0>)
 8103fb8:	4293      	cmp	r3, r2
 8103fba:	d018      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	681b      	ldr	r3, [r3, #0]
 8103fc0:	4a7b      	ldr	r2, [pc, #492]	; (81041b0 <HAL_DMA_IRQHandler+0xcd4>)
 8103fc2:	4293      	cmp	r3, r2
 8103fc4:	d013      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fc6:	687b      	ldr	r3, [r7, #4]
 8103fc8:	681b      	ldr	r3, [r3, #0]
 8103fca:	4a7a      	ldr	r2, [pc, #488]	; (81041b4 <HAL_DMA_IRQHandler+0xcd8>)
 8103fcc:	4293      	cmp	r3, r2
 8103fce:	d00e      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fd0:	687b      	ldr	r3, [r7, #4]
 8103fd2:	681b      	ldr	r3, [r3, #0]
 8103fd4:	4a78      	ldr	r2, [pc, #480]	; (81041b8 <HAL_DMA_IRQHandler+0xcdc>)
 8103fd6:	4293      	cmp	r3, r2
 8103fd8:	d009      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fda:	687b      	ldr	r3, [r7, #4]
 8103fdc:	681b      	ldr	r3, [r3, #0]
 8103fde:	4a77      	ldr	r2, [pc, #476]	; (81041bc <HAL_DMA_IRQHandler+0xce0>)
 8103fe0:	4293      	cmp	r3, r2
 8103fe2:	d004      	beq.n	8103fee <HAL_DMA_IRQHandler+0xb12>
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	681b      	ldr	r3, [r3, #0]
 8103fe8:	4a75      	ldr	r2, [pc, #468]	; (81041c0 <HAL_DMA_IRQHandler+0xce4>)
 8103fea:	4293      	cmp	r3, r2
 8103fec:	d108      	bne.n	8104000 <HAL_DMA_IRQHandler+0xb24>
 8103fee:	687b      	ldr	r3, [r7, #4]
 8103ff0:	681b      	ldr	r3, [r3, #0]
 8103ff2:	681a      	ldr	r2, [r3, #0]
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	681b      	ldr	r3, [r3, #0]
 8103ff8:	f022 0208 	bic.w	r2, r2, #8
 8103ffc:	601a      	str	r2, [r3, #0]
 8103ffe:	e007      	b.n	8104010 <HAL_DMA_IRQHandler+0xb34>
 8104000:	687b      	ldr	r3, [r7, #4]
 8104002:	681b      	ldr	r3, [r3, #0]
 8104004:	681a      	ldr	r2, [r3, #0]
 8104006:	687b      	ldr	r3, [r7, #4]
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	f022 0204 	bic.w	r2, r2, #4
 810400e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104014:	2b00      	cmp	r3, #0
 8104016:	f000 8165 	beq.w	81042e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810401a:	687b      	ldr	r3, [r7, #4]
 810401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810401e:	6878      	ldr	r0, [r7, #4]
 8104020:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104022:	e15f      	b.n	81042e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104028:	f003 031f 	and.w	r3, r3, #31
 810402c:	2202      	movs	r2, #2
 810402e:	409a      	lsls	r2, r3
 8104030:	697b      	ldr	r3, [r7, #20]
 8104032:	4013      	ands	r3, r2
 8104034:	2b00      	cmp	r3, #0
 8104036:	f000 80c5 	beq.w	81041c4 <HAL_DMA_IRQHandler+0xce8>
 810403a:	693b      	ldr	r3, [r7, #16]
 810403c:	f003 0302 	and.w	r3, r3, #2
 8104040:	2b00      	cmp	r3, #0
 8104042:	f000 80bf 	beq.w	81041c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810404a:	f003 031f 	and.w	r3, r3, #31
 810404e:	2202      	movs	r2, #2
 8104050:	409a      	lsls	r2, r3
 8104052:	69fb      	ldr	r3, [r7, #28]
 8104054:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104056:	693b      	ldr	r3, [r7, #16]
 8104058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810405c:	2b00      	cmp	r3, #0
 810405e:	d018      	beq.n	8104092 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104060:	693b      	ldr	r3, [r7, #16]
 8104062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104066:	2b00      	cmp	r3, #0
 8104068:	d109      	bne.n	810407e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810406e:	2b00      	cmp	r3, #0
 8104070:	f000 813a 	beq.w	81042e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104078:	6878      	ldr	r0, [r7, #4]
 810407a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810407c:	e134      	b.n	81042e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104082:	2b00      	cmp	r3, #0
 8104084:	f000 8130 	beq.w	81042e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8104088:	687b      	ldr	r3, [r7, #4]
 810408a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810408c:	6878      	ldr	r0, [r7, #4]
 810408e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104090:	e12a      	b.n	81042e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104092:	693b      	ldr	r3, [r7, #16]
 8104094:	f003 0320 	and.w	r3, r3, #32
 8104098:	2b00      	cmp	r3, #0
 810409a:	d168      	bne.n	810416e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	4a38      	ldr	r2, [pc, #224]	; (8104184 <HAL_DMA_IRQHandler+0xca8>)
 81040a2:	4293      	cmp	r3, r2
 81040a4:	d04a      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	4a37      	ldr	r2, [pc, #220]	; (8104188 <HAL_DMA_IRQHandler+0xcac>)
 81040ac:	4293      	cmp	r3, r2
 81040ae:	d045      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	4a35      	ldr	r2, [pc, #212]	; (810418c <HAL_DMA_IRQHandler+0xcb0>)
 81040b6:	4293      	cmp	r3, r2
 81040b8:	d040      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	4a34      	ldr	r2, [pc, #208]	; (8104190 <HAL_DMA_IRQHandler+0xcb4>)
 81040c0:	4293      	cmp	r3, r2
 81040c2:	d03b      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040c4:	687b      	ldr	r3, [r7, #4]
 81040c6:	681b      	ldr	r3, [r3, #0]
 81040c8:	4a32      	ldr	r2, [pc, #200]	; (8104194 <HAL_DMA_IRQHandler+0xcb8>)
 81040ca:	4293      	cmp	r3, r2
 81040cc:	d036      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	681b      	ldr	r3, [r3, #0]
 81040d2:	4a31      	ldr	r2, [pc, #196]	; (8104198 <HAL_DMA_IRQHandler+0xcbc>)
 81040d4:	4293      	cmp	r3, r2
 81040d6:	d031      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040d8:	687b      	ldr	r3, [r7, #4]
 81040da:	681b      	ldr	r3, [r3, #0]
 81040dc:	4a2f      	ldr	r2, [pc, #188]	; (810419c <HAL_DMA_IRQHandler+0xcc0>)
 81040de:	4293      	cmp	r3, r2
 81040e0:	d02c      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	681b      	ldr	r3, [r3, #0]
 81040e6:	4a2e      	ldr	r2, [pc, #184]	; (81041a0 <HAL_DMA_IRQHandler+0xcc4>)
 81040e8:	4293      	cmp	r3, r2
 81040ea:	d027      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	4a2c      	ldr	r2, [pc, #176]	; (81041a4 <HAL_DMA_IRQHandler+0xcc8>)
 81040f2:	4293      	cmp	r3, r2
 81040f4:	d022      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 81040f6:	687b      	ldr	r3, [r7, #4]
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	4a2b      	ldr	r2, [pc, #172]	; (81041a8 <HAL_DMA_IRQHandler+0xccc>)
 81040fc:	4293      	cmp	r3, r2
 81040fe:	d01d      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	681b      	ldr	r3, [r3, #0]
 8104104:	4a29      	ldr	r2, [pc, #164]	; (81041ac <HAL_DMA_IRQHandler+0xcd0>)
 8104106:	4293      	cmp	r3, r2
 8104108:	d018      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	681b      	ldr	r3, [r3, #0]
 810410e:	4a28      	ldr	r2, [pc, #160]	; (81041b0 <HAL_DMA_IRQHandler+0xcd4>)
 8104110:	4293      	cmp	r3, r2
 8104112:	d013      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	681b      	ldr	r3, [r3, #0]
 8104118:	4a26      	ldr	r2, [pc, #152]	; (81041b4 <HAL_DMA_IRQHandler+0xcd8>)
 810411a:	4293      	cmp	r3, r2
 810411c:	d00e      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 810411e:	687b      	ldr	r3, [r7, #4]
 8104120:	681b      	ldr	r3, [r3, #0]
 8104122:	4a25      	ldr	r2, [pc, #148]	; (81041b8 <HAL_DMA_IRQHandler+0xcdc>)
 8104124:	4293      	cmp	r3, r2
 8104126:	d009      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	681b      	ldr	r3, [r3, #0]
 810412c:	4a23      	ldr	r2, [pc, #140]	; (81041bc <HAL_DMA_IRQHandler+0xce0>)
 810412e:	4293      	cmp	r3, r2
 8104130:	d004      	beq.n	810413c <HAL_DMA_IRQHandler+0xc60>
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	4a22      	ldr	r2, [pc, #136]	; (81041c0 <HAL_DMA_IRQHandler+0xce4>)
 8104138:	4293      	cmp	r3, r2
 810413a:	d108      	bne.n	810414e <HAL_DMA_IRQHandler+0xc72>
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	681a      	ldr	r2, [r3, #0]
 8104142:	687b      	ldr	r3, [r7, #4]
 8104144:	681b      	ldr	r3, [r3, #0]
 8104146:	f022 0214 	bic.w	r2, r2, #20
 810414a:	601a      	str	r2, [r3, #0]
 810414c:	e007      	b.n	810415e <HAL_DMA_IRQHandler+0xc82>
 810414e:	687b      	ldr	r3, [r7, #4]
 8104150:	681b      	ldr	r3, [r3, #0]
 8104152:	681a      	ldr	r2, [r3, #0]
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	681b      	ldr	r3, [r3, #0]
 8104158:	f022 020a 	bic.w	r2, r2, #10
 810415c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	2200      	movs	r2, #0
 8104162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	2201      	movs	r2, #1
 810416a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104172:	2b00      	cmp	r3, #0
 8104174:	f000 80b8 	beq.w	81042e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810417c:	6878      	ldr	r0, [r7, #4]
 810417e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104180:	e0b2      	b.n	81042e8 <HAL_DMA_IRQHandler+0xe0c>
 8104182:	bf00      	nop
 8104184:	40020010 	.word	0x40020010
 8104188:	40020028 	.word	0x40020028
 810418c:	40020040 	.word	0x40020040
 8104190:	40020058 	.word	0x40020058
 8104194:	40020070 	.word	0x40020070
 8104198:	40020088 	.word	0x40020088
 810419c:	400200a0 	.word	0x400200a0
 81041a0:	400200b8 	.word	0x400200b8
 81041a4:	40020410 	.word	0x40020410
 81041a8:	40020428 	.word	0x40020428
 81041ac:	40020440 	.word	0x40020440
 81041b0:	40020458 	.word	0x40020458
 81041b4:	40020470 	.word	0x40020470
 81041b8:	40020488 	.word	0x40020488
 81041bc:	400204a0 	.word	0x400204a0
 81041c0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81041c8:	f003 031f 	and.w	r3, r3, #31
 81041cc:	2208      	movs	r2, #8
 81041ce:	409a      	lsls	r2, r3
 81041d0:	697b      	ldr	r3, [r7, #20]
 81041d2:	4013      	ands	r3, r2
 81041d4:	2b00      	cmp	r3, #0
 81041d6:	f000 8088 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
 81041da:	693b      	ldr	r3, [r7, #16]
 81041dc:	f003 0308 	and.w	r3, r3, #8
 81041e0:	2b00      	cmp	r3, #0
 81041e2:	f000 8082 	beq.w	81042ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81041e6:	687b      	ldr	r3, [r7, #4]
 81041e8:	681b      	ldr	r3, [r3, #0]
 81041ea:	4a41      	ldr	r2, [pc, #260]	; (81042f0 <HAL_DMA_IRQHandler+0xe14>)
 81041ec:	4293      	cmp	r3, r2
 81041ee:	d04a      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	681b      	ldr	r3, [r3, #0]
 81041f4:	4a3f      	ldr	r2, [pc, #252]	; (81042f4 <HAL_DMA_IRQHandler+0xe18>)
 81041f6:	4293      	cmp	r3, r2
 81041f8:	d045      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	4a3e      	ldr	r2, [pc, #248]	; (81042f8 <HAL_DMA_IRQHandler+0xe1c>)
 8104200:	4293      	cmp	r3, r2
 8104202:	d040      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	4a3c      	ldr	r2, [pc, #240]	; (81042fc <HAL_DMA_IRQHandler+0xe20>)
 810420a:	4293      	cmp	r3, r2
 810420c:	d03b      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	681b      	ldr	r3, [r3, #0]
 8104212:	4a3b      	ldr	r2, [pc, #236]	; (8104300 <HAL_DMA_IRQHandler+0xe24>)
 8104214:	4293      	cmp	r3, r2
 8104216:	d036      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104218:	687b      	ldr	r3, [r7, #4]
 810421a:	681b      	ldr	r3, [r3, #0]
 810421c:	4a39      	ldr	r2, [pc, #228]	; (8104304 <HAL_DMA_IRQHandler+0xe28>)
 810421e:	4293      	cmp	r3, r2
 8104220:	d031      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104222:	687b      	ldr	r3, [r7, #4]
 8104224:	681b      	ldr	r3, [r3, #0]
 8104226:	4a38      	ldr	r2, [pc, #224]	; (8104308 <HAL_DMA_IRQHandler+0xe2c>)
 8104228:	4293      	cmp	r3, r2
 810422a:	d02c      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810422c:	687b      	ldr	r3, [r7, #4]
 810422e:	681b      	ldr	r3, [r3, #0]
 8104230:	4a36      	ldr	r2, [pc, #216]	; (810430c <HAL_DMA_IRQHandler+0xe30>)
 8104232:	4293      	cmp	r3, r2
 8104234:	d027      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104236:	687b      	ldr	r3, [r7, #4]
 8104238:	681b      	ldr	r3, [r3, #0]
 810423a:	4a35      	ldr	r2, [pc, #212]	; (8104310 <HAL_DMA_IRQHandler+0xe34>)
 810423c:	4293      	cmp	r3, r2
 810423e:	d022      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	681b      	ldr	r3, [r3, #0]
 8104244:	4a33      	ldr	r2, [pc, #204]	; (8104314 <HAL_DMA_IRQHandler+0xe38>)
 8104246:	4293      	cmp	r3, r2
 8104248:	d01d      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810424a:	687b      	ldr	r3, [r7, #4]
 810424c:	681b      	ldr	r3, [r3, #0]
 810424e:	4a32      	ldr	r2, [pc, #200]	; (8104318 <HAL_DMA_IRQHandler+0xe3c>)
 8104250:	4293      	cmp	r3, r2
 8104252:	d018      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104254:	687b      	ldr	r3, [r7, #4]
 8104256:	681b      	ldr	r3, [r3, #0]
 8104258:	4a30      	ldr	r2, [pc, #192]	; (810431c <HAL_DMA_IRQHandler+0xe40>)
 810425a:	4293      	cmp	r3, r2
 810425c:	d013      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	681b      	ldr	r3, [r3, #0]
 8104262:	4a2f      	ldr	r2, [pc, #188]	; (8104320 <HAL_DMA_IRQHandler+0xe44>)
 8104264:	4293      	cmp	r3, r2
 8104266:	d00e      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	681b      	ldr	r3, [r3, #0]
 810426c:	4a2d      	ldr	r2, [pc, #180]	; (8104324 <HAL_DMA_IRQHandler+0xe48>)
 810426e:	4293      	cmp	r3, r2
 8104270:	d009      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 8104272:	687b      	ldr	r3, [r7, #4]
 8104274:	681b      	ldr	r3, [r3, #0]
 8104276:	4a2c      	ldr	r2, [pc, #176]	; (8104328 <HAL_DMA_IRQHandler+0xe4c>)
 8104278:	4293      	cmp	r3, r2
 810427a:	d004      	beq.n	8104286 <HAL_DMA_IRQHandler+0xdaa>
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	4a2a      	ldr	r2, [pc, #168]	; (810432c <HAL_DMA_IRQHandler+0xe50>)
 8104282:	4293      	cmp	r3, r2
 8104284:	d108      	bne.n	8104298 <HAL_DMA_IRQHandler+0xdbc>
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	681a      	ldr	r2, [r3, #0]
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	681b      	ldr	r3, [r3, #0]
 8104290:	f022 021c 	bic.w	r2, r2, #28
 8104294:	601a      	str	r2, [r3, #0]
 8104296:	e007      	b.n	81042a8 <HAL_DMA_IRQHandler+0xdcc>
 8104298:	687b      	ldr	r3, [r7, #4]
 810429a:	681b      	ldr	r3, [r3, #0]
 810429c:	681a      	ldr	r2, [r3, #0]
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	681b      	ldr	r3, [r3, #0]
 81042a2:	f022 020e 	bic.w	r2, r2, #14
 81042a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81042a8:	687b      	ldr	r3, [r7, #4]
 81042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81042ac:	f003 031f 	and.w	r3, r3, #31
 81042b0:	2201      	movs	r2, #1
 81042b2:	409a      	lsls	r2, r3
 81042b4:	69fb      	ldr	r3, [r7, #28]
 81042b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	2201      	movs	r2, #1
 81042bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81042be:	687b      	ldr	r3, [r7, #4]
 81042c0:	2200      	movs	r2, #0
 81042c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	2201      	movs	r2, #1
 81042ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81042d2:	2b00      	cmp	r3, #0
 81042d4:	d009      	beq.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81042da:	6878      	ldr	r0, [r7, #4]
 81042dc:	4798      	blx	r3
 81042de:	e004      	b.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 81042e0:	bf00      	nop
 81042e2:	e002      	b.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81042e4:	bf00      	nop
 81042e6:	e000      	b.n	81042ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81042e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 81042ea:	3728      	adds	r7, #40	; 0x28
 81042ec:	46bd      	mov	sp, r7
 81042ee:	bd80      	pop	{r7, pc}
 81042f0:	40020010 	.word	0x40020010
 81042f4:	40020028 	.word	0x40020028
 81042f8:	40020040 	.word	0x40020040
 81042fc:	40020058 	.word	0x40020058
 8104300:	40020070 	.word	0x40020070
 8104304:	40020088 	.word	0x40020088
 8104308:	400200a0 	.word	0x400200a0
 810430c:	400200b8 	.word	0x400200b8
 8104310:	40020410 	.word	0x40020410
 8104314:	40020428 	.word	0x40020428
 8104318:	40020440 	.word	0x40020440
 810431c:	40020458 	.word	0x40020458
 8104320:	40020470 	.word	0x40020470
 8104324:	40020488 	.word	0x40020488
 8104328:	400204a0 	.word	0x400204a0
 810432c:	400204b8 	.word	0x400204b8

08104330 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8104330:	b480      	push	{r7}
 8104332:	b087      	sub	sp, #28
 8104334:	af00      	add	r7, sp, #0
 8104336:	60f8      	str	r0, [r7, #12]
 8104338:	60b9      	str	r1, [r7, #8]
 810433a:	607a      	str	r2, [r7, #4]
 810433c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810433e:	68fb      	ldr	r3, [r7, #12]
 8104340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104342:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104344:	68fb      	ldr	r3, [r7, #12]
 8104346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104348:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810434a:	68fb      	ldr	r3, [r7, #12]
 810434c:	681b      	ldr	r3, [r3, #0]
 810434e:	4a84      	ldr	r2, [pc, #528]	; (8104560 <DMA_SetConfig+0x230>)
 8104350:	4293      	cmp	r3, r2
 8104352:	d072      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104354:	68fb      	ldr	r3, [r7, #12]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	4a82      	ldr	r2, [pc, #520]	; (8104564 <DMA_SetConfig+0x234>)
 810435a:	4293      	cmp	r3, r2
 810435c:	d06d      	beq.n	810443a <DMA_SetConfig+0x10a>
 810435e:	68fb      	ldr	r3, [r7, #12]
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	4a81      	ldr	r2, [pc, #516]	; (8104568 <DMA_SetConfig+0x238>)
 8104364:	4293      	cmp	r3, r2
 8104366:	d068      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104368:	68fb      	ldr	r3, [r7, #12]
 810436a:	681b      	ldr	r3, [r3, #0]
 810436c:	4a7f      	ldr	r2, [pc, #508]	; (810456c <DMA_SetConfig+0x23c>)
 810436e:	4293      	cmp	r3, r2
 8104370:	d063      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104372:	68fb      	ldr	r3, [r7, #12]
 8104374:	681b      	ldr	r3, [r3, #0]
 8104376:	4a7e      	ldr	r2, [pc, #504]	; (8104570 <DMA_SetConfig+0x240>)
 8104378:	4293      	cmp	r3, r2
 810437a:	d05e      	beq.n	810443a <DMA_SetConfig+0x10a>
 810437c:	68fb      	ldr	r3, [r7, #12]
 810437e:	681b      	ldr	r3, [r3, #0]
 8104380:	4a7c      	ldr	r2, [pc, #496]	; (8104574 <DMA_SetConfig+0x244>)
 8104382:	4293      	cmp	r3, r2
 8104384:	d059      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104386:	68fb      	ldr	r3, [r7, #12]
 8104388:	681b      	ldr	r3, [r3, #0]
 810438a:	4a7b      	ldr	r2, [pc, #492]	; (8104578 <DMA_SetConfig+0x248>)
 810438c:	4293      	cmp	r3, r2
 810438e:	d054      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104390:	68fb      	ldr	r3, [r7, #12]
 8104392:	681b      	ldr	r3, [r3, #0]
 8104394:	4a79      	ldr	r2, [pc, #484]	; (810457c <DMA_SetConfig+0x24c>)
 8104396:	4293      	cmp	r3, r2
 8104398:	d04f      	beq.n	810443a <DMA_SetConfig+0x10a>
 810439a:	68fb      	ldr	r3, [r7, #12]
 810439c:	681b      	ldr	r3, [r3, #0]
 810439e:	4a78      	ldr	r2, [pc, #480]	; (8104580 <DMA_SetConfig+0x250>)
 81043a0:	4293      	cmp	r3, r2
 81043a2:	d04a      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043a4:	68fb      	ldr	r3, [r7, #12]
 81043a6:	681b      	ldr	r3, [r3, #0]
 81043a8:	4a76      	ldr	r2, [pc, #472]	; (8104584 <DMA_SetConfig+0x254>)
 81043aa:	4293      	cmp	r3, r2
 81043ac:	d045      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043ae:	68fb      	ldr	r3, [r7, #12]
 81043b0:	681b      	ldr	r3, [r3, #0]
 81043b2:	4a75      	ldr	r2, [pc, #468]	; (8104588 <DMA_SetConfig+0x258>)
 81043b4:	4293      	cmp	r3, r2
 81043b6:	d040      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043b8:	68fb      	ldr	r3, [r7, #12]
 81043ba:	681b      	ldr	r3, [r3, #0]
 81043bc:	4a73      	ldr	r2, [pc, #460]	; (810458c <DMA_SetConfig+0x25c>)
 81043be:	4293      	cmp	r3, r2
 81043c0:	d03b      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043c2:	68fb      	ldr	r3, [r7, #12]
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	4a72      	ldr	r2, [pc, #456]	; (8104590 <DMA_SetConfig+0x260>)
 81043c8:	4293      	cmp	r3, r2
 81043ca:	d036      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043cc:	68fb      	ldr	r3, [r7, #12]
 81043ce:	681b      	ldr	r3, [r3, #0]
 81043d0:	4a70      	ldr	r2, [pc, #448]	; (8104594 <DMA_SetConfig+0x264>)
 81043d2:	4293      	cmp	r3, r2
 81043d4:	d031      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043d6:	68fb      	ldr	r3, [r7, #12]
 81043d8:	681b      	ldr	r3, [r3, #0]
 81043da:	4a6f      	ldr	r2, [pc, #444]	; (8104598 <DMA_SetConfig+0x268>)
 81043dc:	4293      	cmp	r3, r2
 81043de:	d02c      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043e0:	68fb      	ldr	r3, [r7, #12]
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	4a6d      	ldr	r2, [pc, #436]	; (810459c <DMA_SetConfig+0x26c>)
 81043e6:	4293      	cmp	r3, r2
 81043e8:	d027      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043ea:	68fb      	ldr	r3, [r7, #12]
 81043ec:	681b      	ldr	r3, [r3, #0]
 81043ee:	4a6c      	ldr	r2, [pc, #432]	; (81045a0 <DMA_SetConfig+0x270>)
 81043f0:	4293      	cmp	r3, r2
 81043f2:	d022      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043f4:	68fb      	ldr	r3, [r7, #12]
 81043f6:	681b      	ldr	r3, [r3, #0]
 81043f8:	4a6a      	ldr	r2, [pc, #424]	; (81045a4 <DMA_SetConfig+0x274>)
 81043fa:	4293      	cmp	r3, r2
 81043fc:	d01d      	beq.n	810443a <DMA_SetConfig+0x10a>
 81043fe:	68fb      	ldr	r3, [r7, #12]
 8104400:	681b      	ldr	r3, [r3, #0]
 8104402:	4a69      	ldr	r2, [pc, #420]	; (81045a8 <DMA_SetConfig+0x278>)
 8104404:	4293      	cmp	r3, r2
 8104406:	d018      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	681b      	ldr	r3, [r3, #0]
 810440c:	4a67      	ldr	r2, [pc, #412]	; (81045ac <DMA_SetConfig+0x27c>)
 810440e:	4293      	cmp	r3, r2
 8104410:	d013      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104412:	68fb      	ldr	r3, [r7, #12]
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	4a66      	ldr	r2, [pc, #408]	; (81045b0 <DMA_SetConfig+0x280>)
 8104418:	4293      	cmp	r3, r2
 810441a:	d00e      	beq.n	810443a <DMA_SetConfig+0x10a>
 810441c:	68fb      	ldr	r3, [r7, #12]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	4a64      	ldr	r2, [pc, #400]	; (81045b4 <DMA_SetConfig+0x284>)
 8104422:	4293      	cmp	r3, r2
 8104424:	d009      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104426:	68fb      	ldr	r3, [r7, #12]
 8104428:	681b      	ldr	r3, [r3, #0]
 810442a:	4a63      	ldr	r2, [pc, #396]	; (81045b8 <DMA_SetConfig+0x288>)
 810442c:	4293      	cmp	r3, r2
 810442e:	d004      	beq.n	810443a <DMA_SetConfig+0x10a>
 8104430:	68fb      	ldr	r3, [r7, #12]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	4a61      	ldr	r2, [pc, #388]	; (81045bc <DMA_SetConfig+0x28c>)
 8104436:	4293      	cmp	r3, r2
 8104438:	d101      	bne.n	810443e <DMA_SetConfig+0x10e>
 810443a:	2301      	movs	r3, #1
 810443c:	e000      	b.n	8104440 <DMA_SetConfig+0x110>
 810443e:	2300      	movs	r3, #0
 8104440:	2b00      	cmp	r3, #0
 8104442:	d00d      	beq.n	8104460 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104444:	68fb      	ldr	r3, [r7, #12]
 8104446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104448:	68fa      	ldr	r2, [r7, #12]
 810444a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810444c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 810444e:	68fb      	ldr	r3, [r7, #12]
 8104450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104452:	2b00      	cmp	r3, #0
 8104454:	d004      	beq.n	8104460 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104456:	68fb      	ldr	r3, [r7, #12]
 8104458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810445a:	68fa      	ldr	r2, [r7, #12]
 810445c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810445e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104460:	68fb      	ldr	r3, [r7, #12]
 8104462:	681b      	ldr	r3, [r3, #0]
 8104464:	4a3e      	ldr	r2, [pc, #248]	; (8104560 <DMA_SetConfig+0x230>)
 8104466:	4293      	cmp	r3, r2
 8104468:	d04a      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 810446a:	68fb      	ldr	r3, [r7, #12]
 810446c:	681b      	ldr	r3, [r3, #0]
 810446e:	4a3d      	ldr	r2, [pc, #244]	; (8104564 <DMA_SetConfig+0x234>)
 8104470:	4293      	cmp	r3, r2
 8104472:	d045      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 8104474:	68fb      	ldr	r3, [r7, #12]
 8104476:	681b      	ldr	r3, [r3, #0]
 8104478:	4a3b      	ldr	r2, [pc, #236]	; (8104568 <DMA_SetConfig+0x238>)
 810447a:	4293      	cmp	r3, r2
 810447c:	d040      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 810447e:	68fb      	ldr	r3, [r7, #12]
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	4a3a      	ldr	r2, [pc, #232]	; (810456c <DMA_SetConfig+0x23c>)
 8104484:	4293      	cmp	r3, r2
 8104486:	d03b      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 8104488:	68fb      	ldr	r3, [r7, #12]
 810448a:	681b      	ldr	r3, [r3, #0]
 810448c:	4a38      	ldr	r2, [pc, #224]	; (8104570 <DMA_SetConfig+0x240>)
 810448e:	4293      	cmp	r3, r2
 8104490:	d036      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 8104492:	68fb      	ldr	r3, [r7, #12]
 8104494:	681b      	ldr	r3, [r3, #0]
 8104496:	4a37      	ldr	r2, [pc, #220]	; (8104574 <DMA_SetConfig+0x244>)
 8104498:	4293      	cmp	r3, r2
 810449a:	d031      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 810449c:	68fb      	ldr	r3, [r7, #12]
 810449e:	681b      	ldr	r3, [r3, #0]
 81044a0:	4a35      	ldr	r2, [pc, #212]	; (8104578 <DMA_SetConfig+0x248>)
 81044a2:	4293      	cmp	r3, r2
 81044a4:	d02c      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044a6:	68fb      	ldr	r3, [r7, #12]
 81044a8:	681b      	ldr	r3, [r3, #0]
 81044aa:	4a34      	ldr	r2, [pc, #208]	; (810457c <DMA_SetConfig+0x24c>)
 81044ac:	4293      	cmp	r3, r2
 81044ae:	d027      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044b0:	68fb      	ldr	r3, [r7, #12]
 81044b2:	681b      	ldr	r3, [r3, #0]
 81044b4:	4a32      	ldr	r2, [pc, #200]	; (8104580 <DMA_SetConfig+0x250>)
 81044b6:	4293      	cmp	r3, r2
 81044b8:	d022      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044ba:	68fb      	ldr	r3, [r7, #12]
 81044bc:	681b      	ldr	r3, [r3, #0]
 81044be:	4a31      	ldr	r2, [pc, #196]	; (8104584 <DMA_SetConfig+0x254>)
 81044c0:	4293      	cmp	r3, r2
 81044c2:	d01d      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044c4:	68fb      	ldr	r3, [r7, #12]
 81044c6:	681b      	ldr	r3, [r3, #0]
 81044c8:	4a2f      	ldr	r2, [pc, #188]	; (8104588 <DMA_SetConfig+0x258>)
 81044ca:	4293      	cmp	r3, r2
 81044cc:	d018      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044ce:	68fb      	ldr	r3, [r7, #12]
 81044d0:	681b      	ldr	r3, [r3, #0]
 81044d2:	4a2e      	ldr	r2, [pc, #184]	; (810458c <DMA_SetConfig+0x25c>)
 81044d4:	4293      	cmp	r3, r2
 81044d6:	d013      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044d8:	68fb      	ldr	r3, [r7, #12]
 81044da:	681b      	ldr	r3, [r3, #0]
 81044dc:	4a2c      	ldr	r2, [pc, #176]	; (8104590 <DMA_SetConfig+0x260>)
 81044de:	4293      	cmp	r3, r2
 81044e0:	d00e      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044e2:	68fb      	ldr	r3, [r7, #12]
 81044e4:	681b      	ldr	r3, [r3, #0]
 81044e6:	4a2b      	ldr	r2, [pc, #172]	; (8104594 <DMA_SetConfig+0x264>)
 81044e8:	4293      	cmp	r3, r2
 81044ea:	d009      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044ec:	68fb      	ldr	r3, [r7, #12]
 81044ee:	681b      	ldr	r3, [r3, #0]
 81044f0:	4a29      	ldr	r2, [pc, #164]	; (8104598 <DMA_SetConfig+0x268>)
 81044f2:	4293      	cmp	r3, r2
 81044f4:	d004      	beq.n	8104500 <DMA_SetConfig+0x1d0>
 81044f6:	68fb      	ldr	r3, [r7, #12]
 81044f8:	681b      	ldr	r3, [r3, #0]
 81044fa:	4a28      	ldr	r2, [pc, #160]	; (810459c <DMA_SetConfig+0x26c>)
 81044fc:	4293      	cmp	r3, r2
 81044fe:	d101      	bne.n	8104504 <DMA_SetConfig+0x1d4>
 8104500:	2301      	movs	r3, #1
 8104502:	e000      	b.n	8104506 <DMA_SetConfig+0x1d6>
 8104504:	2300      	movs	r3, #0
 8104506:	2b00      	cmp	r3, #0
 8104508:	d05a      	beq.n	81045c0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810450a:	68fb      	ldr	r3, [r7, #12]
 810450c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810450e:	f003 031f 	and.w	r3, r3, #31
 8104512:	223f      	movs	r2, #63	; 0x3f
 8104514:	409a      	lsls	r2, r3
 8104516:	697b      	ldr	r3, [r7, #20]
 8104518:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 810451a:	68fb      	ldr	r3, [r7, #12]
 810451c:	681b      	ldr	r3, [r3, #0]
 810451e:	681a      	ldr	r2, [r3, #0]
 8104520:	68fb      	ldr	r3, [r7, #12]
 8104522:	681b      	ldr	r3, [r3, #0]
 8104524:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8104528:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 810452a:	68fb      	ldr	r3, [r7, #12]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	683a      	ldr	r2, [r7, #0]
 8104530:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8104532:	68fb      	ldr	r3, [r7, #12]
 8104534:	689b      	ldr	r3, [r3, #8]
 8104536:	2b40      	cmp	r3, #64	; 0x40
 8104538:	d108      	bne.n	810454c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 810453a:	68fb      	ldr	r3, [r7, #12]
 810453c:	681b      	ldr	r3, [r3, #0]
 810453e:	687a      	ldr	r2, [r7, #4]
 8104540:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8104542:	68fb      	ldr	r3, [r7, #12]
 8104544:	681b      	ldr	r3, [r3, #0]
 8104546:	68ba      	ldr	r2, [r7, #8]
 8104548:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 810454a:	e087      	b.n	810465c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 810454c:	68fb      	ldr	r3, [r7, #12]
 810454e:	681b      	ldr	r3, [r3, #0]
 8104550:	68ba      	ldr	r2, [r7, #8]
 8104552:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8104554:	68fb      	ldr	r3, [r7, #12]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	687a      	ldr	r2, [r7, #4]
 810455a:	60da      	str	r2, [r3, #12]
}
 810455c:	e07e      	b.n	810465c <DMA_SetConfig+0x32c>
 810455e:	bf00      	nop
 8104560:	40020010 	.word	0x40020010
 8104564:	40020028 	.word	0x40020028
 8104568:	40020040 	.word	0x40020040
 810456c:	40020058 	.word	0x40020058
 8104570:	40020070 	.word	0x40020070
 8104574:	40020088 	.word	0x40020088
 8104578:	400200a0 	.word	0x400200a0
 810457c:	400200b8 	.word	0x400200b8
 8104580:	40020410 	.word	0x40020410
 8104584:	40020428 	.word	0x40020428
 8104588:	40020440 	.word	0x40020440
 810458c:	40020458 	.word	0x40020458
 8104590:	40020470 	.word	0x40020470
 8104594:	40020488 	.word	0x40020488
 8104598:	400204a0 	.word	0x400204a0
 810459c:	400204b8 	.word	0x400204b8
 81045a0:	58025408 	.word	0x58025408
 81045a4:	5802541c 	.word	0x5802541c
 81045a8:	58025430 	.word	0x58025430
 81045ac:	58025444 	.word	0x58025444
 81045b0:	58025458 	.word	0x58025458
 81045b4:	5802546c 	.word	0x5802546c
 81045b8:	58025480 	.word	0x58025480
 81045bc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81045c0:	68fb      	ldr	r3, [r7, #12]
 81045c2:	681b      	ldr	r3, [r3, #0]
 81045c4:	4a28      	ldr	r2, [pc, #160]	; (8104668 <DMA_SetConfig+0x338>)
 81045c6:	4293      	cmp	r3, r2
 81045c8:	d022      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045ca:	68fb      	ldr	r3, [r7, #12]
 81045cc:	681b      	ldr	r3, [r3, #0]
 81045ce:	4a27      	ldr	r2, [pc, #156]	; (810466c <DMA_SetConfig+0x33c>)
 81045d0:	4293      	cmp	r3, r2
 81045d2:	d01d      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045d4:	68fb      	ldr	r3, [r7, #12]
 81045d6:	681b      	ldr	r3, [r3, #0]
 81045d8:	4a25      	ldr	r2, [pc, #148]	; (8104670 <DMA_SetConfig+0x340>)
 81045da:	4293      	cmp	r3, r2
 81045dc:	d018      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045de:	68fb      	ldr	r3, [r7, #12]
 81045e0:	681b      	ldr	r3, [r3, #0]
 81045e2:	4a24      	ldr	r2, [pc, #144]	; (8104674 <DMA_SetConfig+0x344>)
 81045e4:	4293      	cmp	r3, r2
 81045e6:	d013      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045e8:	68fb      	ldr	r3, [r7, #12]
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	4a22      	ldr	r2, [pc, #136]	; (8104678 <DMA_SetConfig+0x348>)
 81045ee:	4293      	cmp	r3, r2
 81045f0:	d00e      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045f2:	68fb      	ldr	r3, [r7, #12]
 81045f4:	681b      	ldr	r3, [r3, #0]
 81045f6:	4a21      	ldr	r2, [pc, #132]	; (810467c <DMA_SetConfig+0x34c>)
 81045f8:	4293      	cmp	r3, r2
 81045fa:	d009      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 81045fc:	68fb      	ldr	r3, [r7, #12]
 81045fe:	681b      	ldr	r3, [r3, #0]
 8104600:	4a1f      	ldr	r2, [pc, #124]	; (8104680 <DMA_SetConfig+0x350>)
 8104602:	4293      	cmp	r3, r2
 8104604:	d004      	beq.n	8104610 <DMA_SetConfig+0x2e0>
 8104606:	68fb      	ldr	r3, [r7, #12]
 8104608:	681b      	ldr	r3, [r3, #0]
 810460a:	4a1e      	ldr	r2, [pc, #120]	; (8104684 <DMA_SetConfig+0x354>)
 810460c:	4293      	cmp	r3, r2
 810460e:	d101      	bne.n	8104614 <DMA_SetConfig+0x2e4>
 8104610:	2301      	movs	r3, #1
 8104612:	e000      	b.n	8104616 <DMA_SetConfig+0x2e6>
 8104614:	2300      	movs	r3, #0
 8104616:	2b00      	cmp	r3, #0
 8104618:	d020      	beq.n	810465c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810461a:	68fb      	ldr	r3, [r7, #12]
 810461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810461e:	f003 031f 	and.w	r3, r3, #31
 8104622:	2201      	movs	r2, #1
 8104624:	409a      	lsls	r2, r3
 8104626:	693b      	ldr	r3, [r7, #16]
 8104628:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 810462a:	68fb      	ldr	r3, [r7, #12]
 810462c:	681b      	ldr	r3, [r3, #0]
 810462e:	683a      	ldr	r2, [r7, #0]
 8104630:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8104632:	68fb      	ldr	r3, [r7, #12]
 8104634:	689b      	ldr	r3, [r3, #8]
 8104636:	2b40      	cmp	r3, #64	; 0x40
 8104638:	d108      	bne.n	810464c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 810463a:	68fb      	ldr	r3, [r7, #12]
 810463c:	681b      	ldr	r3, [r3, #0]
 810463e:	687a      	ldr	r2, [r7, #4]
 8104640:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8104642:	68fb      	ldr	r3, [r7, #12]
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	68ba      	ldr	r2, [r7, #8]
 8104648:	60da      	str	r2, [r3, #12]
}
 810464a:	e007      	b.n	810465c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 810464c:	68fb      	ldr	r3, [r7, #12]
 810464e:	681b      	ldr	r3, [r3, #0]
 8104650:	68ba      	ldr	r2, [r7, #8]
 8104652:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8104654:	68fb      	ldr	r3, [r7, #12]
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	687a      	ldr	r2, [r7, #4]
 810465a:	60da      	str	r2, [r3, #12]
}
 810465c:	bf00      	nop
 810465e:	371c      	adds	r7, #28
 8104660:	46bd      	mov	sp, r7
 8104662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104666:	4770      	bx	lr
 8104668:	58025408 	.word	0x58025408
 810466c:	5802541c 	.word	0x5802541c
 8104670:	58025430 	.word	0x58025430
 8104674:	58025444 	.word	0x58025444
 8104678:	58025458 	.word	0x58025458
 810467c:	5802546c 	.word	0x5802546c
 8104680:	58025480 	.word	0x58025480
 8104684:	58025494 	.word	0x58025494

08104688 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8104688:	b480      	push	{r7}
 810468a:	b085      	sub	sp, #20
 810468c:	af00      	add	r7, sp, #0
 810468e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	4a43      	ldr	r2, [pc, #268]	; (81047a4 <DMA_CalcBaseAndBitshift+0x11c>)
 8104696:	4293      	cmp	r3, r2
 8104698:	d04a      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	4a42      	ldr	r2, [pc, #264]	; (81047a8 <DMA_CalcBaseAndBitshift+0x120>)
 81046a0:	4293      	cmp	r3, r2
 81046a2:	d045      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	681b      	ldr	r3, [r3, #0]
 81046a8:	4a40      	ldr	r2, [pc, #256]	; (81047ac <DMA_CalcBaseAndBitshift+0x124>)
 81046aa:	4293      	cmp	r3, r2
 81046ac:	d040      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	681b      	ldr	r3, [r3, #0]
 81046b2:	4a3f      	ldr	r2, [pc, #252]	; (81047b0 <DMA_CalcBaseAndBitshift+0x128>)
 81046b4:	4293      	cmp	r3, r2
 81046b6:	d03b      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	681b      	ldr	r3, [r3, #0]
 81046bc:	4a3d      	ldr	r2, [pc, #244]	; (81047b4 <DMA_CalcBaseAndBitshift+0x12c>)
 81046be:	4293      	cmp	r3, r2
 81046c0:	d036      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	681b      	ldr	r3, [r3, #0]
 81046c6:	4a3c      	ldr	r2, [pc, #240]	; (81047b8 <DMA_CalcBaseAndBitshift+0x130>)
 81046c8:	4293      	cmp	r3, r2
 81046ca:	d031      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046cc:	687b      	ldr	r3, [r7, #4]
 81046ce:	681b      	ldr	r3, [r3, #0]
 81046d0:	4a3a      	ldr	r2, [pc, #232]	; (81047bc <DMA_CalcBaseAndBitshift+0x134>)
 81046d2:	4293      	cmp	r3, r2
 81046d4:	d02c      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046d6:	687b      	ldr	r3, [r7, #4]
 81046d8:	681b      	ldr	r3, [r3, #0]
 81046da:	4a39      	ldr	r2, [pc, #228]	; (81047c0 <DMA_CalcBaseAndBitshift+0x138>)
 81046dc:	4293      	cmp	r3, r2
 81046de:	d027      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	681b      	ldr	r3, [r3, #0]
 81046e4:	4a37      	ldr	r2, [pc, #220]	; (81047c4 <DMA_CalcBaseAndBitshift+0x13c>)
 81046e6:	4293      	cmp	r3, r2
 81046e8:	d022      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046ea:	687b      	ldr	r3, [r7, #4]
 81046ec:	681b      	ldr	r3, [r3, #0]
 81046ee:	4a36      	ldr	r2, [pc, #216]	; (81047c8 <DMA_CalcBaseAndBitshift+0x140>)
 81046f0:	4293      	cmp	r3, r2
 81046f2:	d01d      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	681b      	ldr	r3, [r3, #0]
 81046f8:	4a34      	ldr	r2, [pc, #208]	; (81047cc <DMA_CalcBaseAndBitshift+0x144>)
 81046fa:	4293      	cmp	r3, r2
 81046fc:	d018      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	4a33      	ldr	r2, [pc, #204]	; (81047d0 <DMA_CalcBaseAndBitshift+0x148>)
 8104704:	4293      	cmp	r3, r2
 8104706:	d013      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 8104708:	687b      	ldr	r3, [r7, #4]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	4a31      	ldr	r2, [pc, #196]	; (81047d4 <DMA_CalcBaseAndBitshift+0x14c>)
 810470e:	4293      	cmp	r3, r2
 8104710:	d00e      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 8104712:	687b      	ldr	r3, [r7, #4]
 8104714:	681b      	ldr	r3, [r3, #0]
 8104716:	4a30      	ldr	r2, [pc, #192]	; (81047d8 <DMA_CalcBaseAndBitshift+0x150>)
 8104718:	4293      	cmp	r3, r2
 810471a:	d009      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	681b      	ldr	r3, [r3, #0]
 8104720:	4a2e      	ldr	r2, [pc, #184]	; (81047dc <DMA_CalcBaseAndBitshift+0x154>)
 8104722:	4293      	cmp	r3, r2
 8104724:	d004      	beq.n	8104730 <DMA_CalcBaseAndBitshift+0xa8>
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	681b      	ldr	r3, [r3, #0]
 810472a:	4a2d      	ldr	r2, [pc, #180]	; (81047e0 <DMA_CalcBaseAndBitshift+0x158>)
 810472c:	4293      	cmp	r3, r2
 810472e:	d101      	bne.n	8104734 <DMA_CalcBaseAndBitshift+0xac>
 8104730:	2301      	movs	r3, #1
 8104732:	e000      	b.n	8104736 <DMA_CalcBaseAndBitshift+0xae>
 8104734:	2300      	movs	r3, #0
 8104736:	2b00      	cmp	r3, #0
 8104738:	d026      	beq.n	8104788 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	681b      	ldr	r3, [r3, #0]
 810473e:	b2db      	uxtb	r3, r3
 8104740:	3b10      	subs	r3, #16
 8104742:	4a28      	ldr	r2, [pc, #160]	; (81047e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8104744:	fba2 2303 	umull	r2, r3, r2, r3
 8104748:	091b      	lsrs	r3, r3, #4
 810474a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 810474c:	68fb      	ldr	r3, [r7, #12]
 810474e:	f003 0307 	and.w	r3, r3, #7
 8104752:	4a25      	ldr	r2, [pc, #148]	; (81047e8 <DMA_CalcBaseAndBitshift+0x160>)
 8104754:	5cd3      	ldrb	r3, [r2, r3]
 8104756:	461a      	mov	r2, r3
 8104758:	687b      	ldr	r3, [r7, #4]
 810475a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 810475c:	68fb      	ldr	r3, [r7, #12]
 810475e:	2b03      	cmp	r3, #3
 8104760:	d909      	bls.n	8104776 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8104762:	687b      	ldr	r3, [r7, #4]
 8104764:	681b      	ldr	r3, [r3, #0]
 8104766:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810476a:	f023 0303 	bic.w	r3, r3, #3
 810476e:	1d1a      	adds	r2, r3, #4
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	659a      	str	r2, [r3, #88]	; 0x58
 8104774:	e00e      	b.n	8104794 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8104776:	687b      	ldr	r3, [r7, #4]
 8104778:	681b      	ldr	r3, [r3, #0]
 810477a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810477e:	f023 0303 	bic.w	r3, r3, #3
 8104782:	687a      	ldr	r2, [r7, #4]
 8104784:	6593      	str	r3, [r2, #88]	; 0x58
 8104786:	e005      	b.n	8104794 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	681b      	ldr	r3, [r3, #0]
 810478c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104790:	687b      	ldr	r3, [r7, #4]
 8104792:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8104794:	687b      	ldr	r3, [r7, #4]
 8104796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8104798:	4618      	mov	r0, r3
 810479a:	3714      	adds	r7, #20
 810479c:	46bd      	mov	sp, r7
 810479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047a2:	4770      	bx	lr
 81047a4:	40020010 	.word	0x40020010
 81047a8:	40020028 	.word	0x40020028
 81047ac:	40020040 	.word	0x40020040
 81047b0:	40020058 	.word	0x40020058
 81047b4:	40020070 	.word	0x40020070
 81047b8:	40020088 	.word	0x40020088
 81047bc:	400200a0 	.word	0x400200a0
 81047c0:	400200b8 	.word	0x400200b8
 81047c4:	40020410 	.word	0x40020410
 81047c8:	40020428 	.word	0x40020428
 81047cc:	40020440 	.word	0x40020440
 81047d0:	40020458 	.word	0x40020458
 81047d4:	40020470 	.word	0x40020470
 81047d8:	40020488 	.word	0x40020488
 81047dc:	400204a0 	.word	0x400204a0
 81047e0:	400204b8 	.word	0x400204b8
 81047e4:	aaaaaaab 	.word	0xaaaaaaab
 81047e8:	08112c84 	.word	0x08112c84

081047ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 81047ec:	b480      	push	{r7}
 81047ee:	b085      	sub	sp, #20
 81047f0:	af00      	add	r7, sp, #0
 81047f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81047f4:	2300      	movs	r3, #0
 81047f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81047f8:	687b      	ldr	r3, [r7, #4]
 81047fa:	699b      	ldr	r3, [r3, #24]
 81047fc:	2b00      	cmp	r3, #0
 81047fe:	d120      	bne.n	8104842 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104804:	2b03      	cmp	r3, #3
 8104806:	d858      	bhi.n	81048ba <DMA_CheckFifoParam+0xce>
 8104808:	a201      	add	r2, pc, #4	; (adr r2, 8104810 <DMA_CheckFifoParam+0x24>)
 810480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810480e:	bf00      	nop
 8104810:	08104821 	.word	0x08104821
 8104814:	08104833 	.word	0x08104833
 8104818:	08104821 	.word	0x08104821
 810481c:	081048bb 	.word	0x081048bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104820:	687b      	ldr	r3, [r7, #4]
 8104822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104828:	2b00      	cmp	r3, #0
 810482a:	d048      	beq.n	81048be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 810482c:	2301      	movs	r3, #1
 810482e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104830:	e045      	b.n	81048be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104836:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810483a:	d142      	bne.n	81048c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 810483c:	2301      	movs	r3, #1
 810483e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104840:	e03f      	b.n	81048c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	699b      	ldr	r3, [r3, #24]
 8104846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810484a:	d123      	bne.n	8104894 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104850:	2b03      	cmp	r3, #3
 8104852:	d838      	bhi.n	81048c6 <DMA_CheckFifoParam+0xda>
 8104854:	a201      	add	r2, pc, #4	; (adr r2, 810485c <DMA_CheckFifoParam+0x70>)
 8104856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810485a:	bf00      	nop
 810485c:	0810486d 	.word	0x0810486d
 8104860:	08104873 	.word	0x08104873
 8104864:	0810486d 	.word	0x0810486d
 8104868:	08104885 	.word	0x08104885
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 810486c:	2301      	movs	r3, #1
 810486e:	73fb      	strb	r3, [r7, #15]
        break;
 8104870:	e030      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104872:	687b      	ldr	r3, [r7, #4]
 8104874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810487a:	2b00      	cmp	r3, #0
 810487c:	d025      	beq.n	81048ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 810487e:	2301      	movs	r3, #1
 8104880:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104882:	e022      	b.n	81048ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104884:	687b      	ldr	r3, [r7, #4]
 8104886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104888:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810488c:	d11f      	bne.n	81048ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 810488e:	2301      	movs	r3, #1
 8104890:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104892:	e01c      	b.n	81048ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104898:	2b02      	cmp	r3, #2
 810489a:	d902      	bls.n	81048a2 <DMA_CheckFifoParam+0xb6>
 810489c:	2b03      	cmp	r3, #3
 810489e:	d003      	beq.n	81048a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81048a0:	e018      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81048a2:	2301      	movs	r3, #1
 81048a4:	73fb      	strb	r3, [r7, #15]
        break;
 81048a6:	e015      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81048b0:	2b00      	cmp	r3, #0
 81048b2:	d00e      	beq.n	81048d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81048b4:	2301      	movs	r3, #1
 81048b6:	73fb      	strb	r3, [r7, #15]
    break;
 81048b8:	e00b      	b.n	81048d2 <DMA_CheckFifoParam+0xe6>
        break;
 81048ba:	bf00      	nop
 81048bc:	e00a      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048be:	bf00      	nop
 81048c0:	e008      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048c2:	bf00      	nop
 81048c4:	e006      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048c6:	bf00      	nop
 81048c8:	e004      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048ca:	bf00      	nop
 81048cc:	e002      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
        break;
 81048ce:	bf00      	nop
 81048d0:	e000      	b.n	81048d4 <DMA_CheckFifoParam+0xe8>
    break;
 81048d2:	bf00      	nop
    }
  }

  return status;
 81048d4:	7bfb      	ldrb	r3, [r7, #15]
}
 81048d6:	4618      	mov	r0, r3
 81048d8:	3714      	adds	r7, #20
 81048da:	46bd      	mov	sp, r7
 81048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048e0:	4770      	bx	lr
 81048e2:	bf00      	nop

081048e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81048e4:	b480      	push	{r7}
 81048e6:	b085      	sub	sp, #20
 81048e8:	af00      	add	r7, sp, #0
 81048ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	681b      	ldr	r3, [r3, #0]
 81048f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81048f2:	687b      	ldr	r3, [r7, #4]
 81048f4:	681b      	ldr	r3, [r3, #0]
 81048f6:	4a3a      	ldr	r2, [pc, #232]	; (81049e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81048f8:	4293      	cmp	r3, r2
 81048fa:	d022      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81048fc:	687b      	ldr	r3, [r7, #4]
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	4a38      	ldr	r2, [pc, #224]	; (81049e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104902:	4293      	cmp	r3, r2
 8104904:	d01d      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	4a37      	ldr	r2, [pc, #220]	; (81049e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 810490c:	4293      	cmp	r3, r2
 810490e:	d018      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104910:	687b      	ldr	r3, [r7, #4]
 8104912:	681b      	ldr	r3, [r3, #0]
 8104914:	4a35      	ldr	r2, [pc, #212]	; (81049ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104916:	4293      	cmp	r3, r2
 8104918:	d013      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810491a:	687b      	ldr	r3, [r7, #4]
 810491c:	681b      	ldr	r3, [r3, #0]
 810491e:	4a34      	ldr	r2, [pc, #208]	; (81049f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104920:	4293      	cmp	r3, r2
 8104922:	d00e      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	681b      	ldr	r3, [r3, #0]
 8104928:	4a32      	ldr	r2, [pc, #200]	; (81049f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810492a:	4293      	cmp	r3, r2
 810492c:	d009      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810492e:	687b      	ldr	r3, [r7, #4]
 8104930:	681b      	ldr	r3, [r3, #0]
 8104932:	4a31      	ldr	r2, [pc, #196]	; (81049f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104934:	4293      	cmp	r3, r2
 8104936:	d004      	beq.n	8104942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104938:	687b      	ldr	r3, [r7, #4]
 810493a:	681b      	ldr	r3, [r3, #0]
 810493c:	4a2f      	ldr	r2, [pc, #188]	; (81049fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 810493e:	4293      	cmp	r3, r2
 8104940:	d101      	bne.n	8104946 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104942:	2301      	movs	r3, #1
 8104944:	e000      	b.n	8104948 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104946:	2300      	movs	r3, #0
 8104948:	2b00      	cmp	r3, #0
 810494a:	d01c      	beq.n	8104986 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	681b      	ldr	r3, [r3, #0]
 8104950:	b2db      	uxtb	r3, r3
 8104952:	3b08      	subs	r3, #8
 8104954:	4a2a      	ldr	r2, [pc, #168]	; (8104a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104956:	fba2 2303 	umull	r2, r3, r2, r3
 810495a:	091b      	lsrs	r3, r3, #4
 810495c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810495e:	68fb      	ldr	r3, [r7, #12]
 8104960:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104964:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8104968:	009b      	lsls	r3, r3, #2
 810496a:	461a      	mov	r2, r3
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	4a24      	ldr	r2, [pc, #144]	; (8104a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104974:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104976:	68fb      	ldr	r3, [r7, #12]
 8104978:	f003 031f 	and.w	r3, r3, #31
 810497c:	2201      	movs	r2, #1
 810497e:	409a      	lsls	r2, r3
 8104980:	687b      	ldr	r3, [r7, #4]
 8104982:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8104984:	e026      	b.n	81049d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	681b      	ldr	r3, [r3, #0]
 810498a:	b2db      	uxtb	r3, r3
 810498c:	3b10      	subs	r3, #16
 810498e:	4a1e      	ldr	r2, [pc, #120]	; (8104a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104990:	fba2 2303 	umull	r2, r3, r2, r3
 8104994:	091b      	lsrs	r3, r3, #4
 8104996:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104998:	68bb      	ldr	r3, [r7, #8]
 810499a:	4a1c      	ldr	r2, [pc, #112]	; (8104a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 810499c:	4293      	cmp	r3, r2
 810499e:	d806      	bhi.n	81049ae <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81049a0:	68bb      	ldr	r3, [r7, #8]
 81049a2:	4a1b      	ldr	r2, [pc, #108]	; (8104a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81049a4:	4293      	cmp	r3, r2
 81049a6:	d902      	bls.n	81049ae <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81049a8:	68fb      	ldr	r3, [r7, #12]
 81049aa:	3308      	adds	r3, #8
 81049ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81049ae:	68fb      	ldr	r3, [r7, #12]
 81049b0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81049b4:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81049b8:	009b      	lsls	r3, r3, #2
 81049ba:	461a      	mov	r2, r3
 81049bc:	687b      	ldr	r3, [r7, #4]
 81049be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	4a14      	ldr	r2, [pc, #80]	; (8104a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81049c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81049c6:	68fb      	ldr	r3, [r7, #12]
 81049c8:	f003 031f 	and.w	r3, r3, #31
 81049cc:	2201      	movs	r2, #1
 81049ce:	409a      	lsls	r2, r3
 81049d0:	687b      	ldr	r3, [r7, #4]
 81049d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 81049d4:	bf00      	nop
 81049d6:	3714      	adds	r7, #20
 81049d8:	46bd      	mov	sp, r7
 81049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049de:	4770      	bx	lr
 81049e0:	58025408 	.word	0x58025408
 81049e4:	5802541c 	.word	0x5802541c
 81049e8:	58025430 	.word	0x58025430
 81049ec:	58025444 	.word	0x58025444
 81049f0:	58025458 	.word	0x58025458
 81049f4:	5802546c 	.word	0x5802546c
 81049f8:	58025480 	.word	0x58025480
 81049fc:	58025494 	.word	0x58025494
 8104a00:	cccccccd 	.word	0xcccccccd
 8104a04:	58025880 	.word	0x58025880
 8104a08:	aaaaaaab 	.word	0xaaaaaaab
 8104a0c:	400204b8 	.word	0x400204b8
 8104a10:	4002040f 	.word	0x4002040f
 8104a14:	40020880 	.word	0x40020880

08104a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104a18:	b480      	push	{r7}
 8104a1a:	b085      	sub	sp, #20
 8104a1c:	af00      	add	r7, sp, #0
 8104a1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8104a20:	687b      	ldr	r3, [r7, #4]
 8104a22:	685b      	ldr	r3, [r3, #4]
 8104a24:	b2db      	uxtb	r3, r3
 8104a26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104a28:	68fb      	ldr	r3, [r7, #12]
 8104a2a:	2b00      	cmp	r3, #0
 8104a2c:	d04a      	beq.n	8104ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104a2e:	68fb      	ldr	r3, [r7, #12]
 8104a30:	2b08      	cmp	r3, #8
 8104a32:	d847      	bhi.n	8104ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104a34:	687b      	ldr	r3, [r7, #4]
 8104a36:	681b      	ldr	r3, [r3, #0]
 8104a38:	4a25      	ldr	r2, [pc, #148]	; (8104ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104a3a:	4293      	cmp	r3, r2
 8104a3c:	d022      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a3e:	687b      	ldr	r3, [r7, #4]
 8104a40:	681b      	ldr	r3, [r3, #0]
 8104a42:	4a24      	ldr	r2, [pc, #144]	; (8104ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104a44:	4293      	cmp	r3, r2
 8104a46:	d01d      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	681b      	ldr	r3, [r3, #0]
 8104a4c:	4a22      	ldr	r2, [pc, #136]	; (8104ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104a4e:	4293      	cmp	r3, r2
 8104a50:	d018      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a52:	687b      	ldr	r3, [r7, #4]
 8104a54:	681b      	ldr	r3, [r3, #0]
 8104a56:	4a21      	ldr	r2, [pc, #132]	; (8104adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104a58:	4293      	cmp	r3, r2
 8104a5a:	d013      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a5c:	687b      	ldr	r3, [r7, #4]
 8104a5e:	681b      	ldr	r3, [r3, #0]
 8104a60:	4a1f      	ldr	r2, [pc, #124]	; (8104ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104a62:	4293      	cmp	r3, r2
 8104a64:	d00e      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a66:	687b      	ldr	r3, [r7, #4]
 8104a68:	681b      	ldr	r3, [r3, #0]
 8104a6a:	4a1e      	ldr	r2, [pc, #120]	; (8104ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104a6c:	4293      	cmp	r3, r2
 8104a6e:	d009      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	681b      	ldr	r3, [r3, #0]
 8104a74:	4a1c      	ldr	r2, [pc, #112]	; (8104ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104a76:	4293      	cmp	r3, r2
 8104a78:	d004      	beq.n	8104a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a7a:	687b      	ldr	r3, [r7, #4]
 8104a7c:	681b      	ldr	r3, [r3, #0]
 8104a7e:	4a1b      	ldr	r2, [pc, #108]	; (8104aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104a80:	4293      	cmp	r3, r2
 8104a82:	d101      	bne.n	8104a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104a84:	2301      	movs	r3, #1
 8104a86:	e000      	b.n	8104a8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104a88:	2300      	movs	r3, #0
 8104a8a:	2b00      	cmp	r3, #0
 8104a8c:	d00a      	beq.n	8104aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8104a8e:	68fa      	ldr	r2, [r7, #12]
 8104a90:	4b17      	ldr	r3, [pc, #92]	; (8104af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8104a92:	4413      	add	r3, r2
 8104a94:	009b      	lsls	r3, r3, #2
 8104a96:	461a      	mov	r2, r3
 8104a98:	687b      	ldr	r3, [r7, #4]
 8104a9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	4a15      	ldr	r2, [pc, #84]	; (8104af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8104aa0:	671a      	str	r2, [r3, #112]	; 0x70
 8104aa2:	e009      	b.n	8104ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8104aa4:	68fa      	ldr	r2, [r7, #12]
 8104aa6:	4b14      	ldr	r3, [pc, #80]	; (8104af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8104aa8:	4413      	add	r3, r2
 8104aaa:	009b      	lsls	r3, r3, #2
 8104aac:	461a      	mov	r2, r3
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8104ab2:	687b      	ldr	r3, [r7, #4]
 8104ab4:	4a11      	ldr	r2, [pc, #68]	; (8104afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8104ab6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8104ab8:	68fb      	ldr	r3, [r7, #12]
 8104aba:	3b01      	subs	r3, #1
 8104abc:	2201      	movs	r2, #1
 8104abe:	409a      	lsls	r2, r3
 8104ac0:	687b      	ldr	r3, [r7, #4]
 8104ac2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8104ac4:	bf00      	nop
 8104ac6:	3714      	adds	r7, #20
 8104ac8:	46bd      	mov	sp, r7
 8104aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ace:	4770      	bx	lr
 8104ad0:	58025408 	.word	0x58025408
 8104ad4:	5802541c 	.word	0x5802541c
 8104ad8:	58025430 	.word	0x58025430
 8104adc:	58025444 	.word	0x58025444
 8104ae0:	58025458 	.word	0x58025458
 8104ae4:	5802546c 	.word	0x5802546c
 8104ae8:	58025480 	.word	0x58025480
 8104aec:	58025494 	.word	0x58025494
 8104af0:	1600963f 	.word	0x1600963f
 8104af4:	58025940 	.word	0x58025940
 8104af8:	1000823f 	.word	0x1000823f
 8104afc:	40020940 	.word	0x40020940

08104b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104b00:	b480      	push	{r7}
 8104b02:	b089      	sub	sp, #36	; 0x24
 8104b04:	af00      	add	r7, sp, #0
 8104b06:	6078      	str	r0, [r7, #4]
 8104b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104b0a:	2300      	movs	r3, #0
 8104b0c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104b0e:	4b89      	ldr	r3, [pc, #548]	; (8104d34 <HAL_GPIO_Init+0x234>)
 8104b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104b12:	e194      	b.n	8104e3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104b14:	683b      	ldr	r3, [r7, #0]
 8104b16:	681a      	ldr	r2, [r3, #0]
 8104b18:	2101      	movs	r1, #1
 8104b1a:	69fb      	ldr	r3, [r7, #28]
 8104b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8104b20:	4013      	ands	r3, r2
 8104b22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104b24:	693b      	ldr	r3, [r7, #16]
 8104b26:	2b00      	cmp	r3, #0
 8104b28:	f000 8186 	beq.w	8104e38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104b2c:	683b      	ldr	r3, [r7, #0]
 8104b2e:	685b      	ldr	r3, [r3, #4]
 8104b30:	2b01      	cmp	r3, #1
 8104b32:	d00b      	beq.n	8104b4c <HAL_GPIO_Init+0x4c>
 8104b34:	683b      	ldr	r3, [r7, #0]
 8104b36:	685b      	ldr	r3, [r3, #4]
 8104b38:	2b02      	cmp	r3, #2
 8104b3a:	d007      	beq.n	8104b4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104b3c:	683b      	ldr	r3, [r7, #0]
 8104b3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104b40:	2b11      	cmp	r3, #17
 8104b42:	d003      	beq.n	8104b4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104b44:	683b      	ldr	r3, [r7, #0]
 8104b46:	685b      	ldr	r3, [r3, #4]
 8104b48:	2b12      	cmp	r3, #18
 8104b4a:	d130      	bne.n	8104bae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	689b      	ldr	r3, [r3, #8]
 8104b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104b52:	69fb      	ldr	r3, [r7, #28]
 8104b54:	005b      	lsls	r3, r3, #1
 8104b56:	2203      	movs	r2, #3
 8104b58:	fa02 f303 	lsl.w	r3, r2, r3
 8104b5c:	43db      	mvns	r3, r3
 8104b5e:	69ba      	ldr	r2, [r7, #24]
 8104b60:	4013      	ands	r3, r2
 8104b62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104b64:	683b      	ldr	r3, [r7, #0]
 8104b66:	68da      	ldr	r2, [r3, #12]
 8104b68:	69fb      	ldr	r3, [r7, #28]
 8104b6a:	005b      	lsls	r3, r3, #1
 8104b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8104b70:	69ba      	ldr	r2, [r7, #24]
 8104b72:	4313      	orrs	r3, r2
 8104b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104b76:	687b      	ldr	r3, [r7, #4]
 8104b78:	69ba      	ldr	r2, [r7, #24]
 8104b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	685b      	ldr	r3, [r3, #4]
 8104b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104b82:	2201      	movs	r2, #1
 8104b84:	69fb      	ldr	r3, [r7, #28]
 8104b86:	fa02 f303 	lsl.w	r3, r2, r3
 8104b8a:	43db      	mvns	r3, r3
 8104b8c:	69ba      	ldr	r2, [r7, #24]
 8104b8e:	4013      	ands	r3, r2
 8104b90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8104b92:	683b      	ldr	r3, [r7, #0]
 8104b94:	685b      	ldr	r3, [r3, #4]
 8104b96:	091b      	lsrs	r3, r3, #4
 8104b98:	f003 0201 	and.w	r2, r3, #1
 8104b9c:	69fb      	ldr	r3, [r7, #28]
 8104b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8104ba2:	69ba      	ldr	r2, [r7, #24]
 8104ba4:	4313      	orrs	r3, r2
 8104ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	69ba      	ldr	r2, [r7, #24]
 8104bac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104bae:	687b      	ldr	r3, [r7, #4]
 8104bb0:	68db      	ldr	r3, [r3, #12]
 8104bb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104bb4:	69fb      	ldr	r3, [r7, #28]
 8104bb6:	005b      	lsls	r3, r3, #1
 8104bb8:	2203      	movs	r2, #3
 8104bba:	fa02 f303 	lsl.w	r3, r2, r3
 8104bbe:	43db      	mvns	r3, r3
 8104bc0:	69ba      	ldr	r2, [r7, #24]
 8104bc2:	4013      	ands	r3, r2
 8104bc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104bc6:	683b      	ldr	r3, [r7, #0]
 8104bc8:	689a      	ldr	r2, [r3, #8]
 8104bca:	69fb      	ldr	r3, [r7, #28]
 8104bcc:	005b      	lsls	r3, r3, #1
 8104bce:	fa02 f303 	lsl.w	r3, r2, r3
 8104bd2:	69ba      	ldr	r2, [r7, #24]
 8104bd4:	4313      	orrs	r3, r2
 8104bd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104bd8:	687b      	ldr	r3, [r7, #4]
 8104bda:	69ba      	ldr	r2, [r7, #24]
 8104bdc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104bde:	683b      	ldr	r3, [r7, #0]
 8104be0:	685b      	ldr	r3, [r3, #4]
 8104be2:	2b02      	cmp	r3, #2
 8104be4:	d003      	beq.n	8104bee <HAL_GPIO_Init+0xee>
 8104be6:	683b      	ldr	r3, [r7, #0]
 8104be8:	685b      	ldr	r3, [r3, #4]
 8104bea:	2b12      	cmp	r3, #18
 8104bec:	d123      	bne.n	8104c36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104bee:	69fb      	ldr	r3, [r7, #28]
 8104bf0:	08da      	lsrs	r2, r3, #3
 8104bf2:	687b      	ldr	r3, [r7, #4]
 8104bf4:	3208      	adds	r2, #8
 8104bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104bfc:	69fb      	ldr	r3, [r7, #28]
 8104bfe:	f003 0307 	and.w	r3, r3, #7
 8104c02:	009b      	lsls	r3, r3, #2
 8104c04:	220f      	movs	r2, #15
 8104c06:	fa02 f303 	lsl.w	r3, r2, r3
 8104c0a:	43db      	mvns	r3, r3
 8104c0c:	69ba      	ldr	r2, [r7, #24]
 8104c0e:	4013      	ands	r3, r2
 8104c10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104c12:	683b      	ldr	r3, [r7, #0]
 8104c14:	691a      	ldr	r2, [r3, #16]
 8104c16:	69fb      	ldr	r3, [r7, #28]
 8104c18:	f003 0307 	and.w	r3, r3, #7
 8104c1c:	009b      	lsls	r3, r3, #2
 8104c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8104c22:	69ba      	ldr	r2, [r7, #24]
 8104c24:	4313      	orrs	r3, r2
 8104c26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104c28:	69fb      	ldr	r3, [r7, #28]
 8104c2a:	08da      	lsrs	r2, r3, #3
 8104c2c:	687b      	ldr	r3, [r7, #4]
 8104c2e:	3208      	adds	r2, #8
 8104c30:	69b9      	ldr	r1, [r7, #24]
 8104c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104c36:	687b      	ldr	r3, [r7, #4]
 8104c38:	681b      	ldr	r3, [r3, #0]
 8104c3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104c3c:	69fb      	ldr	r3, [r7, #28]
 8104c3e:	005b      	lsls	r3, r3, #1
 8104c40:	2203      	movs	r2, #3
 8104c42:	fa02 f303 	lsl.w	r3, r2, r3
 8104c46:	43db      	mvns	r3, r3
 8104c48:	69ba      	ldr	r2, [r7, #24]
 8104c4a:	4013      	ands	r3, r2
 8104c4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104c4e:	683b      	ldr	r3, [r7, #0]
 8104c50:	685b      	ldr	r3, [r3, #4]
 8104c52:	f003 0203 	and.w	r2, r3, #3
 8104c56:	69fb      	ldr	r3, [r7, #28]
 8104c58:	005b      	lsls	r3, r3, #1
 8104c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8104c5e:	69ba      	ldr	r2, [r7, #24]
 8104c60:	4313      	orrs	r3, r2
 8104c62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104c64:	687b      	ldr	r3, [r7, #4]
 8104c66:	69ba      	ldr	r2, [r7, #24]
 8104c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8104c6a:	683b      	ldr	r3, [r7, #0]
 8104c6c:	685b      	ldr	r3, [r3, #4]
 8104c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104c72:	2b00      	cmp	r3, #0
 8104c74:	f000 80e0 	beq.w	8104e38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104c78:	4b2f      	ldr	r3, [pc, #188]	; (8104d38 <HAL_GPIO_Init+0x238>)
 8104c7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104c7e:	4a2e      	ldr	r2, [pc, #184]	; (8104d38 <HAL_GPIO_Init+0x238>)
 8104c80:	f043 0302 	orr.w	r3, r3, #2
 8104c84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104c88:	4b2b      	ldr	r3, [pc, #172]	; (8104d38 <HAL_GPIO_Init+0x238>)
 8104c8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104c8e:	f003 0302 	and.w	r3, r3, #2
 8104c92:	60fb      	str	r3, [r7, #12]
 8104c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104c96:	4a29      	ldr	r2, [pc, #164]	; (8104d3c <HAL_GPIO_Init+0x23c>)
 8104c98:	69fb      	ldr	r3, [r7, #28]
 8104c9a:	089b      	lsrs	r3, r3, #2
 8104c9c:	3302      	adds	r3, #2
 8104c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104ca4:	69fb      	ldr	r3, [r7, #28]
 8104ca6:	f003 0303 	and.w	r3, r3, #3
 8104caa:	009b      	lsls	r3, r3, #2
 8104cac:	220f      	movs	r2, #15
 8104cae:	fa02 f303 	lsl.w	r3, r2, r3
 8104cb2:	43db      	mvns	r3, r3
 8104cb4:	69ba      	ldr	r2, [r7, #24]
 8104cb6:	4013      	ands	r3, r2
 8104cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104cba:	687b      	ldr	r3, [r7, #4]
 8104cbc:	4a20      	ldr	r2, [pc, #128]	; (8104d40 <HAL_GPIO_Init+0x240>)
 8104cbe:	4293      	cmp	r3, r2
 8104cc0:	d052      	beq.n	8104d68 <HAL_GPIO_Init+0x268>
 8104cc2:	687b      	ldr	r3, [r7, #4]
 8104cc4:	4a1f      	ldr	r2, [pc, #124]	; (8104d44 <HAL_GPIO_Init+0x244>)
 8104cc6:	4293      	cmp	r3, r2
 8104cc8:	d031      	beq.n	8104d2e <HAL_GPIO_Init+0x22e>
 8104cca:	687b      	ldr	r3, [r7, #4]
 8104ccc:	4a1e      	ldr	r2, [pc, #120]	; (8104d48 <HAL_GPIO_Init+0x248>)
 8104cce:	4293      	cmp	r3, r2
 8104cd0:	d02b      	beq.n	8104d2a <HAL_GPIO_Init+0x22a>
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	4a1d      	ldr	r2, [pc, #116]	; (8104d4c <HAL_GPIO_Init+0x24c>)
 8104cd6:	4293      	cmp	r3, r2
 8104cd8:	d025      	beq.n	8104d26 <HAL_GPIO_Init+0x226>
 8104cda:	687b      	ldr	r3, [r7, #4]
 8104cdc:	4a1c      	ldr	r2, [pc, #112]	; (8104d50 <HAL_GPIO_Init+0x250>)
 8104cde:	4293      	cmp	r3, r2
 8104ce0:	d01f      	beq.n	8104d22 <HAL_GPIO_Init+0x222>
 8104ce2:	687b      	ldr	r3, [r7, #4]
 8104ce4:	4a1b      	ldr	r2, [pc, #108]	; (8104d54 <HAL_GPIO_Init+0x254>)
 8104ce6:	4293      	cmp	r3, r2
 8104ce8:	d019      	beq.n	8104d1e <HAL_GPIO_Init+0x21e>
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	4a1a      	ldr	r2, [pc, #104]	; (8104d58 <HAL_GPIO_Init+0x258>)
 8104cee:	4293      	cmp	r3, r2
 8104cf0:	d013      	beq.n	8104d1a <HAL_GPIO_Init+0x21a>
 8104cf2:	687b      	ldr	r3, [r7, #4]
 8104cf4:	4a19      	ldr	r2, [pc, #100]	; (8104d5c <HAL_GPIO_Init+0x25c>)
 8104cf6:	4293      	cmp	r3, r2
 8104cf8:	d00d      	beq.n	8104d16 <HAL_GPIO_Init+0x216>
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	4a18      	ldr	r2, [pc, #96]	; (8104d60 <HAL_GPIO_Init+0x260>)
 8104cfe:	4293      	cmp	r3, r2
 8104d00:	d007      	beq.n	8104d12 <HAL_GPIO_Init+0x212>
 8104d02:	687b      	ldr	r3, [r7, #4]
 8104d04:	4a17      	ldr	r2, [pc, #92]	; (8104d64 <HAL_GPIO_Init+0x264>)
 8104d06:	4293      	cmp	r3, r2
 8104d08:	d101      	bne.n	8104d0e <HAL_GPIO_Init+0x20e>
 8104d0a:	2309      	movs	r3, #9
 8104d0c:	e02d      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d0e:	230a      	movs	r3, #10
 8104d10:	e02b      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d12:	2308      	movs	r3, #8
 8104d14:	e029      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d16:	2307      	movs	r3, #7
 8104d18:	e027      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d1a:	2306      	movs	r3, #6
 8104d1c:	e025      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d1e:	2305      	movs	r3, #5
 8104d20:	e023      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d22:	2304      	movs	r3, #4
 8104d24:	e021      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d26:	2303      	movs	r3, #3
 8104d28:	e01f      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d2a:	2302      	movs	r3, #2
 8104d2c:	e01d      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d2e:	2301      	movs	r3, #1
 8104d30:	e01b      	b.n	8104d6a <HAL_GPIO_Init+0x26a>
 8104d32:	bf00      	nop
 8104d34:	580000c0 	.word	0x580000c0
 8104d38:	58024400 	.word	0x58024400
 8104d3c:	58000400 	.word	0x58000400
 8104d40:	58020000 	.word	0x58020000
 8104d44:	58020400 	.word	0x58020400
 8104d48:	58020800 	.word	0x58020800
 8104d4c:	58020c00 	.word	0x58020c00
 8104d50:	58021000 	.word	0x58021000
 8104d54:	58021400 	.word	0x58021400
 8104d58:	58021800 	.word	0x58021800
 8104d5c:	58021c00 	.word	0x58021c00
 8104d60:	58022000 	.word	0x58022000
 8104d64:	58022400 	.word	0x58022400
 8104d68:	2300      	movs	r3, #0
 8104d6a:	69fa      	ldr	r2, [r7, #28]
 8104d6c:	f002 0203 	and.w	r2, r2, #3
 8104d70:	0092      	lsls	r2, r2, #2
 8104d72:	4093      	lsls	r3, r2
 8104d74:	69ba      	ldr	r2, [r7, #24]
 8104d76:	4313      	orrs	r3, r2
 8104d78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104d7a:	4938      	ldr	r1, [pc, #224]	; (8104e5c <HAL_GPIO_Init+0x35c>)
 8104d7c:	69fb      	ldr	r3, [r7, #28]
 8104d7e:	089b      	lsrs	r3, r3, #2
 8104d80:	3302      	adds	r3, #2
 8104d82:	69ba      	ldr	r2, [r7, #24]
 8104d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104d88:	697b      	ldr	r3, [r7, #20]
 8104d8a:	681b      	ldr	r3, [r3, #0]
 8104d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104d8e:	693b      	ldr	r3, [r7, #16]
 8104d90:	43db      	mvns	r3, r3
 8104d92:	69ba      	ldr	r2, [r7, #24]
 8104d94:	4013      	ands	r3, r2
 8104d96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8104d98:	683b      	ldr	r3, [r7, #0]
 8104d9a:	685b      	ldr	r3, [r3, #4]
 8104d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104da0:	2b00      	cmp	r3, #0
 8104da2:	d003      	beq.n	8104dac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8104da4:	69ba      	ldr	r2, [r7, #24]
 8104da6:	693b      	ldr	r3, [r7, #16]
 8104da8:	4313      	orrs	r3, r2
 8104daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104dac:	697b      	ldr	r3, [r7, #20]
 8104dae:	69ba      	ldr	r2, [r7, #24]
 8104db0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8104db2:	697b      	ldr	r3, [r7, #20]
 8104db4:	685b      	ldr	r3, [r3, #4]
 8104db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104db8:	693b      	ldr	r3, [r7, #16]
 8104dba:	43db      	mvns	r3, r3
 8104dbc:	69ba      	ldr	r2, [r7, #24]
 8104dbe:	4013      	ands	r3, r2
 8104dc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8104dc2:	683b      	ldr	r3, [r7, #0]
 8104dc4:	685b      	ldr	r3, [r3, #4]
 8104dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104dca:	2b00      	cmp	r3, #0
 8104dcc:	d003      	beq.n	8104dd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8104dce:	69ba      	ldr	r2, [r7, #24]
 8104dd0:	693b      	ldr	r3, [r7, #16]
 8104dd2:	4313      	orrs	r3, r2
 8104dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104dd6:	697b      	ldr	r3, [r7, #20]
 8104dd8:	69ba      	ldr	r2, [r7, #24]
 8104dda:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104de4:	693b      	ldr	r3, [r7, #16]
 8104de6:	43db      	mvns	r3, r3
 8104de8:	69ba      	ldr	r2, [r7, #24]
 8104dea:	4013      	ands	r3, r2
 8104dec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8104dee:	683b      	ldr	r3, [r7, #0]
 8104df0:	685b      	ldr	r3, [r3, #4]
 8104df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104df6:	2b00      	cmp	r3, #0
 8104df8:	d003      	beq.n	8104e02 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8104dfa:	69ba      	ldr	r2, [r7, #24]
 8104dfc:	693b      	ldr	r3, [r7, #16]
 8104dfe:	4313      	orrs	r3, r2
 8104e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104e06:	69bb      	ldr	r3, [r7, #24]
 8104e08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104e0e:	685b      	ldr	r3, [r3, #4]
 8104e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104e12:	693b      	ldr	r3, [r7, #16]
 8104e14:	43db      	mvns	r3, r3
 8104e16:	69ba      	ldr	r2, [r7, #24]
 8104e18:	4013      	ands	r3, r2
 8104e1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8104e1c:	683b      	ldr	r3, [r7, #0]
 8104e1e:	685b      	ldr	r3, [r3, #4]
 8104e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104e24:	2b00      	cmp	r3, #0
 8104e26:	d003      	beq.n	8104e30 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8104e28:	69ba      	ldr	r2, [r7, #24]
 8104e2a:	693b      	ldr	r3, [r7, #16]
 8104e2c:	4313      	orrs	r3, r2
 8104e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104e34:	69bb      	ldr	r3, [r7, #24]
 8104e36:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8104e38:	69fb      	ldr	r3, [r7, #28]
 8104e3a:	3301      	adds	r3, #1
 8104e3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104e3e:	683b      	ldr	r3, [r7, #0]
 8104e40:	681a      	ldr	r2, [r3, #0]
 8104e42:	69fb      	ldr	r3, [r7, #28]
 8104e44:	fa22 f303 	lsr.w	r3, r2, r3
 8104e48:	2b00      	cmp	r3, #0
 8104e4a:	f47f ae63 	bne.w	8104b14 <HAL_GPIO_Init+0x14>
  }
}
 8104e4e:	bf00      	nop
 8104e50:	bf00      	nop
 8104e52:	3724      	adds	r7, #36	; 0x24
 8104e54:	46bd      	mov	sp, r7
 8104e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e5a:	4770      	bx	lr
 8104e5c:	58000400 	.word	0x58000400

08104e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8104e60:	b480      	push	{r7}
 8104e62:	b085      	sub	sp, #20
 8104e64:	af00      	add	r7, sp, #0
 8104e66:	6078      	str	r0, [r7, #4]
 8104e68:	460b      	mov	r3, r1
 8104e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8104e6c:	687b      	ldr	r3, [r7, #4]
 8104e6e:	691a      	ldr	r2, [r3, #16]
 8104e70:	887b      	ldrh	r3, [r7, #2]
 8104e72:	4013      	ands	r3, r2
 8104e74:	2b00      	cmp	r3, #0
 8104e76:	d002      	beq.n	8104e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8104e78:	2301      	movs	r3, #1
 8104e7a:	73fb      	strb	r3, [r7, #15]
 8104e7c:	e001      	b.n	8104e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8104e7e:	2300      	movs	r3, #0
 8104e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8104e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8104e84:	4618      	mov	r0, r3
 8104e86:	3714      	adds	r7, #20
 8104e88:	46bd      	mov	sp, r7
 8104e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e8e:	4770      	bx	lr

08104e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8104e90:	b480      	push	{r7}
 8104e92:	b083      	sub	sp, #12
 8104e94:	af00      	add	r7, sp, #0
 8104e96:	6078      	str	r0, [r7, #4]
 8104e98:	460b      	mov	r3, r1
 8104e9a:	807b      	strh	r3, [r7, #2]
 8104e9c:	4613      	mov	r3, r2
 8104e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104ea0:	787b      	ldrb	r3, [r7, #1]
 8104ea2:	2b00      	cmp	r3, #0
 8104ea4:	d003      	beq.n	8104eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8104ea6:	887a      	ldrh	r2, [r7, #2]
 8104ea8:	687b      	ldr	r3, [r7, #4]
 8104eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8104eac:	e003      	b.n	8104eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104eae:	887b      	ldrh	r3, [r7, #2]
 8104eb0:	041a      	lsls	r2, r3, #16
 8104eb2:	687b      	ldr	r3, [r7, #4]
 8104eb4:	619a      	str	r2, [r3, #24]
}
 8104eb6:	bf00      	nop
 8104eb8:	370c      	adds	r7, #12
 8104eba:	46bd      	mov	sp, r7
 8104ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ec0:	4770      	bx	lr
	...

08104ec4 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8104ec4:	b480      	push	{r7}
 8104ec6:	b083      	sub	sp, #12
 8104ec8:	af00      	add	r7, sp, #0
 8104eca:	6078      	str	r0, [r7, #4]
 8104ecc:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8104ece:	490e      	ldr	r1, [pc, #56]	; (8104f08 <HAL_HSEM_Take+0x44>)
 8104ed0:	683b      	ldr	r3, [r7, #0]
 8104ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104eda:	687a      	ldr	r2, [r7, #4]
 8104edc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8104ee0:	4a09      	ldr	r2, [pc, #36]	; (8104f08 <HAL_HSEM_Take+0x44>)
 8104ee2:	687b      	ldr	r3, [r7, #4]
 8104ee4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8104ee8:	683b      	ldr	r3, [r7, #0]
 8104eea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104ef2:	429a      	cmp	r2, r3
 8104ef4:	d101      	bne.n	8104efa <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8104ef6:	2300      	movs	r3, #0
 8104ef8:	e000      	b.n	8104efc <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8104efa:	2301      	movs	r3, #1
}
 8104efc:	4618      	mov	r0, r3
 8104efe:	370c      	adds	r7, #12
 8104f00:	46bd      	mov	sp, r7
 8104f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f06:	4770      	bx	lr
 8104f08:	58026400 	.word	0x58026400

08104f0c <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 8104f0c:	b480      	push	{r7}
 8104f0e:	b083      	sub	sp, #12
 8104f10:	af00      	add	r7, sp, #0
 8104f12:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 8104f14:	4a07      	ldr	r2, [pc, #28]	; (8104f34 <HAL_HSEM_IsSemTaken+0x28>)
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104f1c:	2b00      	cmp	r3, #0
 8104f1e:	da01      	bge.n	8104f24 <HAL_HSEM_IsSemTaken+0x18>
 8104f20:	2301      	movs	r3, #1
 8104f22:	e000      	b.n	8104f26 <HAL_HSEM_IsSemTaken+0x1a>
 8104f24:	2300      	movs	r3, #0
}
 8104f26:	4618      	mov	r0, r3
 8104f28:	370c      	adds	r7, #12
 8104f2a:	46bd      	mov	sp, r7
 8104f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f30:	4770      	bx	lr
 8104f32:	bf00      	nop
 8104f34:	58026400 	.word	0x58026400

08104f38 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8104f38:	b480      	push	{r7}
 8104f3a:	b083      	sub	sp, #12
 8104f3c:	af00      	add	r7, sp, #0
 8104f3e:	6078      	str	r0, [r7, #4]
 8104f40:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8104f42:	4906      	ldr	r1, [pc, #24]	; (8104f5c <HAL_HSEM_Release+0x24>)
 8104f44:	683b      	ldr	r3, [r7, #0]
 8104f46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104f4a:	687b      	ldr	r3, [r7, #4]
 8104f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8104f50:	bf00      	nop
 8104f52:	370c      	adds	r7, #12
 8104f54:	46bd      	mov	sp, r7
 8104f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f5a:	4770      	bx	lr
 8104f5c:	58026400 	.word	0x58026400

08104f60 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104f60:	b480      	push	{r7}
 8104f62:	b083      	sub	sp, #12
 8104f64:	af00      	add	r7, sp, #0
 8104f66:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104f68:	4b05      	ldr	r3, [pc, #20]	; (8104f80 <HAL_HSEM_ActivateNotification+0x20>)
 8104f6a:	681a      	ldr	r2, [r3, #0]
 8104f6c:	4904      	ldr	r1, [pc, #16]	; (8104f80 <HAL_HSEM_ActivateNotification+0x20>)
 8104f6e:	687b      	ldr	r3, [r7, #4]
 8104f70:	4313      	orrs	r3, r2
 8104f72:	600b      	str	r3, [r1, #0]
#endif
}
 8104f74:	bf00      	nop
 8104f76:	370c      	adds	r7, #12
 8104f78:	46bd      	mov	sp, r7
 8104f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f7e:	4770      	bx	lr
 8104f80:	58026510 	.word	0x58026510

08104f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104f84:	b580      	push	{r7, lr}
 8104f86:	b082      	sub	sp, #8
 8104f88:	af00      	add	r7, sp, #0
 8104f8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104f8c:	687b      	ldr	r3, [r7, #4]
 8104f8e:	2b00      	cmp	r3, #0
 8104f90:	d101      	bne.n	8104f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8104f92:	2301      	movs	r3, #1
 8104f94:	e081      	b.n	810509a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104f9c:	b2db      	uxtb	r3, r3
 8104f9e:	2b00      	cmp	r3, #0
 8104fa0:	d106      	bne.n	8104fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104fa2:	687b      	ldr	r3, [r7, #4]
 8104fa4:	2200      	movs	r2, #0
 8104fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104faa:	6878      	ldr	r0, [r7, #4]
 8104fac:	f7fc fa6c 	bl	8101488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	2224      	movs	r2, #36	; 0x24
 8104fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	681b      	ldr	r3, [r3, #0]
 8104fbc:	681a      	ldr	r2, [r3, #0]
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	f022 0201 	bic.w	r2, r2, #1
 8104fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104fc8:	687b      	ldr	r3, [r7, #4]
 8104fca:	685a      	ldr	r2, [r3, #4]
 8104fcc:	687b      	ldr	r3, [r7, #4]
 8104fce:	681b      	ldr	r3, [r3, #0]
 8104fd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104fd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104fd6:	687b      	ldr	r3, [r7, #4]
 8104fd8:	681b      	ldr	r3, [r3, #0]
 8104fda:	689a      	ldr	r2, [r3, #8]
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	681b      	ldr	r3, [r3, #0]
 8104fe0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104fe4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8104fe6:	687b      	ldr	r3, [r7, #4]
 8104fe8:	68db      	ldr	r3, [r3, #12]
 8104fea:	2b01      	cmp	r3, #1
 8104fec:	d107      	bne.n	8104ffe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	689a      	ldr	r2, [r3, #8]
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104ffa:	609a      	str	r2, [r3, #8]
 8104ffc:	e006      	b.n	810500c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104ffe:	687b      	ldr	r3, [r7, #4]
 8105000:	689a      	ldr	r2, [r3, #8]
 8105002:	687b      	ldr	r3, [r7, #4]
 8105004:	681b      	ldr	r3, [r3, #0]
 8105006:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810500a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	68db      	ldr	r3, [r3, #12]
 8105010:	2b02      	cmp	r3, #2
 8105012:	d104      	bne.n	810501e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8105014:	687b      	ldr	r3, [r7, #4]
 8105016:	681b      	ldr	r3, [r3, #0]
 8105018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810501c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810501e:	687b      	ldr	r3, [r7, #4]
 8105020:	681b      	ldr	r3, [r3, #0]
 8105022:	685b      	ldr	r3, [r3, #4]
 8105024:	687a      	ldr	r2, [r7, #4]
 8105026:	6812      	ldr	r2, [r2, #0]
 8105028:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810502c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8105030:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8105032:	687b      	ldr	r3, [r7, #4]
 8105034:	681b      	ldr	r3, [r3, #0]
 8105036:	68da      	ldr	r2, [r3, #12]
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	681b      	ldr	r3, [r3, #0]
 810503c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8105040:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	691a      	ldr	r2, [r3, #16]
 8105046:	687b      	ldr	r3, [r7, #4]
 8105048:	695b      	ldr	r3, [r3, #20]
 810504a:	ea42 0103 	orr.w	r1, r2, r3
 810504e:	687b      	ldr	r3, [r7, #4]
 8105050:	699b      	ldr	r3, [r3, #24]
 8105052:	021a      	lsls	r2, r3, #8
 8105054:	687b      	ldr	r3, [r7, #4]
 8105056:	681b      	ldr	r3, [r3, #0]
 8105058:	430a      	orrs	r2, r1
 810505a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810505c:	687b      	ldr	r3, [r7, #4]
 810505e:	69d9      	ldr	r1, [r3, #28]
 8105060:	687b      	ldr	r3, [r7, #4]
 8105062:	6a1a      	ldr	r2, [r3, #32]
 8105064:	687b      	ldr	r3, [r7, #4]
 8105066:	681b      	ldr	r3, [r3, #0]
 8105068:	430a      	orrs	r2, r1
 810506a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810506c:	687b      	ldr	r3, [r7, #4]
 810506e:	681b      	ldr	r3, [r3, #0]
 8105070:	681a      	ldr	r2, [r3, #0]
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	681b      	ldr	r3, [r3, #0]
 8105076:	f042 0201 	orr.w	r2, r2, #1
 810507a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	2200      	movs	r2, #0
 8105080:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8105082:	687b      	ldr	r3, [r7, #4]
 8105084:	2220      	movs	r2, #32
 8105086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810508a:	687b      	ldr	r3, [r7, #4]
 810508c:	2200      	movs	r2, #0
 810508e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105090:	687b      	ldr	r3, [r7, #4]
 8105092:	2200      	movs	r2, #0
 8105094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8105098:	2300      	movs	r3, #0
}
 810509a:	4618      	mov	r0, r3
 810509c:	3708      	adds	r7, #8
 810509e:	46bd      	mov	sp, r7
 81050a0:	bd80      	pop	{r7, pc}
	...

081050a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81050a4:	b580      	push	{r7, lr}
 81050a6:	b088      	sub	sp, #32
 81050a8:	af02      	add	r7, sp, #8
 81050aa:	60f8      	str	r0, [r7, #12]
 81050ac:	607a      	str	r2, [r7, #4]
 81050ae:	461a      	mov	r2, r3
 81050b0:	460b      	mov	r3, r1
 81050b2:	817b      	strh	r3, [r7, #10]
 81050b4:	4613      	mov	r3, r2
 81050b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 81050b8:	68fb      	ldr	r3, [r7, #12]
 81050ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81050be:	b2db      	uxtb	r3, r3
 81050c0:	2b20      	cmp	r3, #32
 81050c2:	f040 80da 	bne.w	810527a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81050c6:	68fb      	ldr	r3, [r7, #12]
 81050c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81050cc:	2b01      	cmp	r3, #1
 81050ce:	d101      	bne.n	81050d4 <HAL_I2C_Master_Transmit+0x30>
 81050d0:	2302      	movs	r3, #2
 81050d2:	e0d3      	b.n	810527c <HAL_I2C_Master_Transmit+0x1d8>
 81050d4:	68fb      	ldr	r3, [r7, #12]
 81050d6:	2201      	movs	r2, #1
 81050d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81050dc:	f7fd f8da 	bl	8102294 <HAL_GetTick>
 81050e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81050e2:	697b      	ldr	r3, [r7, #20]
 81050e4:	9300      	str	r3, [sp, #0]
 81050e6:	2319      	movs	r3, #25
 81050e8:	2201      	movs	r2, #1
 81050ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81050ee:	68f8      	ldr	r0, [r7, #12]
 81050f0:	f000 fa00 	bl	81054f4 <I2C_WaitOnFlagUntilTimeout>
 81050f4:	4603      	mov	r3, r0
 81050f6:	2b00      	cmp	r3, #0
 81050f8:	d001      	beq.n	81050fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 81050fa:	2301      	movs	r3, #1
 81050fc:	e0be      	b.n	810527c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81050fe:	68fb      	ldr	r3, [r7, #12]
 8105100:	2221      	movs	r2, #33	; 0x21
 8105102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8105106:	68fb      	ldr	r3, [r7, #12]
 8105108:	2210      	movs	r2, #16
 810510a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810510e:	68fb      	ldr	r3, [r7, #12]
 8105110:	2200      	movs	r2, #0
 8105112:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105114:	68fb      	ldr	r3, [r7, #12]
 8105116:	687a      	ldr	r2, [r7, #4]
 8105118:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810511a:	68fb      	ldr	r3, [r7, #12]
 810511c:	893a      	ldrh	r2, [r7, #8]
 810511e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8105120:	68fb      	ldr	r3, [r7, #12]
 8105122:	2200      	movs	r2, #0
 8105124:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105126:	68fb      	ldr	r3, [r7, #12]
 8105128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810512a:	b29b      	uxth	r3, r3
 810512c:	2bff      	cmp	r3, #255	; 0xff
 810512e:	d90e      	bls.n	810514e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105130:	68fb      	ldr	r3, [r7, #12]
 8105132:	22ff      	movs	r2, #255	; 0xff
 8105134:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8105136:	68fb      	ldr	r3, [r7, #12]
 8105138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810513a:	b2da      	uxtb	r2, r3
 810513c:	8979      	ldrh	r1, [r7, #10]
 810513e:	4b51      	ldr	r3, [pc, #324]	; (8105284 <HAL_I2C_Master_Transmit+0x1e0>)
 8105140:	9300      	str	r3, [sp, #0]
 8105142:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105146:	68f8      	ldr	r0, [r7, #12]
 8105148:	f000 fb62 	bl	8105810 <I2C_TransferConfig>
 810514c:	e06c      	b.n	8105228 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810514e:	68fb      	ldr	r3, [r7, #12]
 8105150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105152:	b29a      	uxth	r2, r3
 8105154:	68fb      	ldr	r3, [r7, #12]
 8105156:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8105158:	68fb      	ldr	r3, [r7, #12]
 810515a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810515c:	b2da      	uxtb	r2, r3
 810515e:	8979      	ldrh	r1, [r7, #10]
 8105160:	4b48      	ldr	r3, [pc, #288]	; (8105284 <HAL_I2C_Master_Transmit+0x1e0>)
 8105162:	9300      	str	r3, [sp, #0]
 8105164:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105168:	68f8      	ldr	r0, [r7, #12]
 810516a:	f000 fb51 	bl	8105810 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 810516e:	e05b      	b.n	8105228 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105170:	697a      	ldr	r2, [r7, #20]
 8105172:	6a39      	ldr	r1, [r7, #32]
 8105174:	68f8      	ldr	r0, [r7, #12]
 8105176:	f000 f9fd 	bl	8105574 <I2C_WaitOnTXISFlagUntilTimeout>
 810517a:	4603      	mov	r3, r0
 810517c:	2b00      	cmp	r3, #0
 810517e:	d001      	beq.n	8105184 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8105180:	2301      	movs	r3, #1
 8105182:	e07b      	b.n	810527c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105184:	68fb      	ldr	r3, [r7, #12]
 8105186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105188:	781a      	ldrb	r2, [r3, #0]
 810518a:	68fb      	ldr	r3, [r7, #12]
 810518c:	681b      	ldr	r3, [r3, #0]
 810518e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105190:	68fb      	ldr	r3, [r7, #12]
 8105192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105194:	1c5a      	adds	r2, r3, #1
 8105196:	68fb      	ldr	r3, [r7, #12]
 8105198:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810519a:	68fb      	ldr	r3, [r7, #12]
 810519c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810519e:	b29b      	uxth	r3, r3
 81051a0:	3b01      	subs	r3, #1
 81051a2:	b29a      	uxth	r2, r3
 81051a4:	68fb      	ldr	r3, [r7, #12]
 81051a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81051a8:	68fb      	ldr	r3, [r7, #12]
 81051aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81051ac:	3b01      	subs	r3, #1
 81051ae:	b29a      	uxth	r2, r3
 81051b0:	68fb      	ldr	r3, [r7, #12]
 81051b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81051b4:	68fb      	ldr	r3, [r7, #12]
 81051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81051b8:	b29b      	uxth	r3, r3
 81051ba:	2b00      	cmp	r3, #0
 81051bc:	d034      	beq.n	8105228 <HAL_I2C_Master_Transmit+0x184>
 81051be:	68fb      	ldr	r3, [r7, #12]
 81051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81051c2:	2b00      	cmp	r3, #0
 81051c4:	d130      	bne.n	8105228 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81051c6:	697b      	ldr	r3, [r7, #20]
 81051c8:	9300      	str	r3, [sp, #0]
 81051ca:	6a3b      	ldr	r3, [r7, #32]
 81051cc:	2200      	movs	r2, #0
 81051ce:	2180      	movs	r1, #128	; 0x80
 81051d0:	68f8      	ldr	r0, [r7, #12]
 81051d2:	f000 f98f 	bl	81054f4 <I2C_WaitOnFlagUntilTimeout>
 81051d6:	4603      	mov	r3, r0
 81051d8:	2b00      	cmp	r3, #0
 81051da:	d001      	beq.n	81051e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 81051dc:	2301      	movs	r3, #1
 81051de:	e04d      	b.n	810527c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81051e0:	68fb      	ldr	r3, [r7, #12]
 81051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81051e4:	b29b      	uxth	r3, r3
 81051e6:	2bff      	cmp	r3, #255	; 0xff
 81051e8:	d90e      	bls.n	8105208 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81051ea:	68fb      	ldr	r3, [r7, #12]
 81051ec:	22ff      	movs	r2, #255	; 0xff
 81051ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81051f0:	68fb      	ldr	r3, [r7, #12]
 81051f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81051f4:	b2da      	uxtb	r2, r3
 81051f6:	8979      	ldrh	r1, [r7, #10]
 81051f8:	2300      	movs	r3, #0
 81051fa:	9300      	str	r3, [sp, #0]
 81051fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105200:	68f8      	ldr	r0, [r7, #12]
 8105202:	f000 fb05 	bl	8105810 <I2C_TransferConfig>
 8105206:	e00f      	b.n	8105228 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105208:	68fb      	ldr	r3, [r7, #12]
 810520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810520c:	b29a      	uxth	r2, r3
 810520e:	68fb      	ldr	r3, [r7, #12]
 8105210:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105212:	68fb      	ldr	r3, [r7, #12]
 8105214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105216:	b2da      	uxtb	r2, r3
 8105218:	8979      	ldrh	r1, [r7, #10]
 810521a:	2300      	movs	r3, #0
 810521c:	9300      	str	r3, [sp, #0]
 810521e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105222:	68f8      	ldr	r0, [r7, #12]
 8105224:	f000 faf4 	bl	8105810 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8105228:	68fb      	ldr	r3, [r7, #12]
 810522a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810522c:	b29b      	uxth	r3, r3
 810522e:	2b00      	cmp	r3, #0
 8105230:	d19e      	bne.n	8105170 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105232:	697a      	ldr	r2, [r7, #20]
 8105234:	6a39      	ldr	r1, [r7, #32]
 8105236:	68f8      	ldr	r0, [r7, #12]
 8105238:	f000 f9dc 	bl	81055f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 810523c:	4603      	mov	r3, r0
 810523e:	2b00      	cmp	r3, #0
 8105240:	d001      	beq.n	8105246 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8105242:	2301      	movs	r3, #1
 8105244:	e01a      	b.n	810527c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105246:	68fb      	ldr	r3, [r7, #12]
 8105248:	681b      	ldr	r3, [r3, #0]
 810524a:	2220      	movs	r2, #32
 810524c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810524e:	68fb      	ldr	r3, [r7, #12]
 8105250:	681b      	ldr	r3, [r3, #0]
 8105252:	6859      	ldr	r1, [r3, #4]
 8105254:	68fb      	ldr	r3, [r7, #12]
 8105256:	681a      	ldr	r2, [r3, #0]
 8105258:	4b0b      	ldr	r3, [pc, #44]	; (8105288 <HAL_I2C_Master_Transmit+0x1e4>)
 810525a:	400b      	ands	r3, r1
 810525c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810525e:	68fb      	ldr	r3, [r7, #12]
 8105260:	2220      	movs	r2, #32
 8105262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105266:	68fb      	ldr	r3, [r7, #12]
 8105268:	2200      	movs	r2, #0
 810526a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810526e:	68fb      	ldr	r3, [r7, #12]
 8105270:	2200      	movs	r2, #0
 8105272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105276:	2300      	movs	r3, #0
 8105278:	e000      	b.n	810527c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 810527a:	2302      	movs	r3, #2
  }
}
 810527c:	4618      	mov	r0, r3
 810527e:	3718      	adds	r7, #24
 8105280:	46bd      	mov	sp, r7
 8105282:	bd80      	pop	{r7, pc}
 8105284:	80002000 	.word	0x80002000
 8105288:	fe00e800 	.word	0xfe00e800

0810528c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810528c:	b580      	push	{r7, lr}
 810528e:	b088      	sub	sp, #32
 8105290:	af02      	add	r7, sp, #8
 8105292:	60f8      	str	r0, [r7, #12]
 8105294:	607a      	str	r2, [r7, #4]
 8105296:	461a      	mov	r2, r3
 8105298:	460b      	mov	r3, r1
 810529a:	817b      	strh	r3, [r7, #10]
 810529c:	4613      	mov	r3, r2
 810529e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 81052a0:	68fb      	ldr	r3, [r7, #12]
 81052a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81052a6:	b2db      	uxtb	r3, r3
 81052a8:	2b20      	cmp	r3, #32
 81052aa:	f040 80db 	bne.w	8105464 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81052ae:	68fb      	ldr	r3, [r7, #12]
 81052b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81052b4:	2b01      	cmp	r3, #1
 81052b6:	d101      	bne.n	81052bc <HAL_I2C_Master_Receive+0x30>
 81052b8:	2302      	movs	r3, #2
 81052ba:	e0d4      	b.n	8105466 <HAL_I2C_Master_Receive+0x1da>
 81052bc:	68fb      	ldr	r3, [r7, #12]
 81052be:	2201      	movs	r2, #1
 81052c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81052c4:	f7fc ffe6 	bl	8102294 <HAL_GetTick>
 81052c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81052ca:	697b      	ldr	r3, [r7, #20]
 81052cc:	9300      	str	r3, [sp, #0]
 81052ce:	2319      	movs	r3, #25
 81052d0:	2201      	movs	r2, #1
 81052d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81052d6:	68f8      	ldr	r0, [r7, #12]
 81052d8:	f000 f90c 	bl	81054f4 <I2C_WaitOnFlagUntilTimeout>
 81052dc:	4603      	mov	r3, r0
 81052de:	2b00      	cmp	r3, #0
 81052e0:	d001      	beq.n	81052e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 81052e2:	2301      	movs	r3, #1
 81052e4:	e0bf      	b.n	8105466 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81052e6:	68fb      	ldr	r3, [r7, #12]
 81052e8:	2222      	movs	r2, #34	; 0x22
 81052ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81052ee:	68fb      	ldr	r3, [r7, #12]
 81052f0:	2210      	movs	r2, #16
 81052f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81052f6:	68fb      	ldr	r3, [r7, #12]
 81052f8:	2200      	movs	r2, #0
 81052fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81052fc:	68fb      	ldr	r3, [r7, #12]
 81052fe:	687a      	ldr	r2, [r7, #4]
 8105300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8105302:	68fb      	ldr	r3, [r7, #12]
 8105304:	893a      	ldrh	r2, [r7, #8]
 8105306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8105308:	68fb      	ldr	r3, [r7, #12]
 810530a:	2200      	movs	r2, #0
 810530c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810530e:	68fb      	ldr	r3, [r7, #12]
 8105310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105312:	b29b      	uxth	r3, r3
 8105314:	2bff      	cmp	r3, #255	; 0xff
 8105316:	d90e      	bls.n	8105336 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105318:	68fb      	ldr	r3, [r7, #12]
 810531a:	22ff      	movs	r2, #255	; 0xff
 810531c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 810531e:	68fb      	ldr	r3, [r7, #12]
 8105320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105322:	b2da      	uxtb	r2, r3
 8105324:	8979      	ldrh	r1, [r7, #10]
 8105326:	4b52      	ldr	r3, [pc, #328]	; (8105470 <HAL_I2C_Master_Receive+0x1e4>)
 8105328:	9300      	str	r3, [sp, #0]
 810532a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810532e:	68f8      	ldr	r0, [r7, #12]
 8105330:	f000 fa6e 	bl	8105810 <I2C_TransferConfig>
 8105334:	e06d      	b.n	8105412 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105336:	68fb      	ldr	r3, [r7, #12]
 8105338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810533a:	b29a      	uxth	r2, r3
 810533c:	68fb      	ldr	r3, [r7, #12]
 810533e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8105340:	68fb      	ldr	r3, [r7, #12]
 8105342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105344:	b2da      	uxtb	r2, r3
 8105346:	8979      	ldrh	r1, [r7, #10]
 8105348:	4b49      	ldr	r3, [pc, #292]	; (8105470 <HAL_I2C_Master_Receive+0x1e4>)
 810534a:	9300      	str	r3, [sp, #0]
 810534c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105350:	68f8      	ldr	r0, [r7, #12]
 8105352:	f000 fa5d 	bl	8105810 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8105356:	e05c      	b.n	8105412 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105358:	697a      	ldr	r2, [r7, #20]
 810535a:	6a39      	ldr	r1, [r7, #32]
 810535c:	68f8      	ldr	r0, [r7, #12]
 810535e:	f000 f985 	bl	810566c <I2C_WaitOnRXNEFlagUntilTimeout>
 8105362:	4603      	mov	r3, r0
 8105364:	2b00      	cmp	r3, #0
 8105366:	d001      	beq.n	810536c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8105368:	2301      	movs	r3, #1
 810536a:	e07c      	b.n	8105466 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810536c:	68fb      	ldr	r3, [r7, #12]
 810536e:	681b      	ldr	r3, [r3, #0]
 8105370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105372:	68fb      	ldr	r3, [r7, #12]
 8105374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105376:	b2d2      	uxtb	r2, r2
 8105378:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810537a:	68fb      	ldr	r3, [r7, #12]
 810537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810537e:	1c5a      	adds	r2, r3, #1
 8105380:	68fb      	ldr	r3, [r7, #12]
 8105382:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8105384:	68fb      	ldr	r3, [r7, #12]
 8105386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105388:	3b01      	subs	r3, #1
 810538a:	b29a      	uxth	r2, r3
 810538c:	68fb      	ldr	r3, [r7, #12]
 810538e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8105390:	68fb      	ldr	r3, [r7, #12]
 8105392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105394:	b29b      	uxth	r3, r3
 8105396:	3b01      	subs	r3, #1
 8105398:	b29a      	uxth	r2, r3
 810539a:	68fb      	ldr	r3, [r7, #12]
 810539c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810539e:	68fb      	ldr	r3, [r7, #12]
 81053a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81053a2:	b29b      	uxth	r3, r3
 81053a4:	2b00      	cmp	r3, #0
 81053a6:	d034      	beq.n	8105412 <HAL_I2C_Master_Receive+0x186>
 81053a8:	68fb      	ldr	r3, [r7, #12]
 81053aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81053ac:	2b00      	cmp	r3, #0
 81053ae:	d130      	bne.n	8105412 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81053b0:	697b      	ldr	r3, [r7, #20]
 81053b2:	9300      	str	r3, [sp, #0]
 81053b4:	6a3b      	ldr	r3, [r7, #32]
 81053b6:	2200      	movs	r2, #0
 81053b8:	2180      	movs	r1, #128	; 0x80
 81053ba:	68f8      	ldr	r0, [r7, #12]
 81053bc:	f000 f89a 	bl	81054f4 <I2C_WaitOnFlagUntilTimeout>
 81053c0:	4603      	mov	r3, r0
 81053c2:	2b00      	cmp	r3, #0
 81053c4:	d001      	beq.n	81053ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 81053c6:	2301      	movs	r3, #1
 81053c8:	e04d      	b.n	8105466 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81053ca:	68fb      	ldr	r3, [r7, #12]
 81053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81053ce:	b29b      	uxth	r3, r3
 81053d0:	2bff      	cmp	r3, #255	; 0xff
 81053d2:	d90e      	bls.n	81053f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81053d4:	68fb      	ldr	r3, [r7, #12]
 81053d6:	22ff      	movs	r2, #255	; 0xff
 81053d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81053da:	68fb      	ldr	r3, [r7, #12]
 81053dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81053de:	b2da      	uxtb	r2, r3
 81053e0:	8979      	ldrh	r1, [r7, #10]
 81053e2:	2300      	movs	r3, #0
 81053e4:	9300      	str	r3, [sp, #0]
 81053e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81053ea:	68f8      	ldr	r0, [r7, #12]
 81053ec:	f000 fa10 	bl	8105810 <I2C_TransferConfig>
 81053f0:	e00f      	b.n	8105412 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81053f2:	68fb      	ldr	r3, [r7, #12]
 81053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81053f6:	b29a      	uxth	r2, r3
 81053f8:	68fb      	ldr	r3, [r7, #12]
 81053fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81053fc:	68fb      	ldr	r3, [r7, #12]
 81053fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105400:	b2da      	uxtb	r2, r3
 8105402:	8979      	ldrh	r1, [r7, #10]
 8105404:	2300      	movs	r3, #0
 8105406:	9300      	str	r3, [sp, #0]
 8105408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810540c:	68f8      	ldr	r0, [r7, #12]
 810540e:	f000 f9ff 	bl	8105810 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8105412:	68fb      	ldr	r3, [r7, #12]
 8105414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105416:	b29b      	uxth	r3, r3
 8105418:	2b00      	cmp	r3, #0
 810541a:	d19d      	bne.n	8105358 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810541c:	697a      	ldr	r2, [r7, #20]
 810541e:	6a39      	ldr	r1, [r7, #32]
 8105420:	68f8      	ldr	r0, [r7, #12]
 8105422:	f000 f8e7 	bl	81055f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105426:	4603      	mov	r3, r0
 8105428:	2b00      	cmp	r3, #0
 810542a:	d001      	beq.n	8105430 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 810542c:	2301      	movs	r3, #1
 810542e:	e01a      	b.n	8105466 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105430:	68fb      	ldr	r3, [r7, #12]
 8105432:	681b      	ldr	r3, [r3, #0]
 8105434:	2220      	movs	r2, #32
 8105436:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105438:	68fb      	ldr	r3, [r7, #12]
 810543a:	681b      	ldr	r3, [r3, #0]
 810543c:	6859      	ldr	r1, [r3, #4]
 810543e:	68fb      	ldr	r3, [r7, #12]
 8105440:	681a      	ldr	r2, [r3, #0]
 8105442:	4b0c      	ldr	r3, [pc, #48]	; (8105474 <HAL_I2C_Master_Receive+0x1e8>)
 8105444:	400b      	ands	r3, r1
 8105446:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105448:	68fb      	ldr	r3, [r7, #12]
 810544a:	2220      	movs	r2, #32
 810544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105450:	68fb      	ldr	r3, [r7, #12]
 8105452:	2200      	movs	r2, #0
 8105454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105458:	68fb      	ldr	r3, [r7, #12]
 810545a:	2200      	movs	r2, #0
 810545c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105460:	2300      	movs	r3, #0
 8105462:	e000      	b.n	8105466 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8105464:	2302      	movs	r3, #2
  }
}
 8105466:	4618      	mov	r0, r3
 8105468:	3718      	adds	r7, #24
 810546a:	46bd      	mov	sp, r7
 810546c:	bd80      	pop	{r7, pc}
 810546e:	bf00      	nop
 8105470:	80002400 	.word	0x80002400
 8105474:	fe00e800 	.word	0xfe00e800

08105478 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8105478:	b480      	push	{r7}
 810547a:	b083      	sub	sp, #12
 810547c:	af00      	add	r7, sp, #0
 810547e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8105480:	687b      	ldr	r3, [r7, #4]
 8105482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105486:	b2db      	uxtb	r3, r3
}
 8105488:	4618      	mov	r0, r3
 810548a:	370c      	adds	r7, #12
 810548c:	46bd      	mov	sp, r7
 810548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105492:	4770      	bx	lr

08105494 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8105494:	b480      	push	{r7}
 8105496:	b083      	sub	sp, #12
 8105498:	af00      	add	r7, sp, #0
 810549a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 810549c:	687b      	ldr	r3, [r7, #4]
 810549e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 81054a0:	4618      	mov	r0, r3
 81054a2:	370c      	adds	r7, #12
 81054a4:	46bd      	mov	sp, r7
 81054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054aa:	4770      	bx	lr

081054ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81054ac:	b480      	push	{r7}
 81054ae:	b083      	sub	sp, #12
 81054b0:	af00      	add	r7, sp, #0
 81054b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81054b4:	687b      	ldr	r3, [r7, #4]
 81054b6:	681b      	ldr	r3, [r3, #0]
 81054b8:	699b      	ldr	r3, [r3, #24]
 81054ba:	f003 0302 	and.w	r3, r3, #2
 81054be:	2b02      	cmp	r3, #2
 81054c0:	d103      	bne.n	81054ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81054c2:	687b      	ldr	r3, [r7, #4]
 81054c4:	681b      	ldr	r3, [r3, #0]
 81054c6:	2200      	movs	r2, #0
 81054c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	681b      	ldr	r3, [r3, #0]
 81054ce:	699b      	ldr	r3, [r3, #24]
 81054d0:	f003 0301 	and.w	r3, r3, #1
 81054d4:	2b01      	cmp	r3, #1
 81054d6:	d007      	beq.n	81054e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	699a      	ldr	r2, [r3, #24]
 81054de:	687b      	ldr	r3, [r7, #4]
 81054e0:	681b      	ldr	r3, [r3, #0]
 81054e2:	f042 0201 	orr.w	r2, r2, #1
 81054e6:	619a      	str	r2, [r3, #24]
  }
}
 81054e8:	bf00      	nop
 81054ea:	370c      	adds	r7, #12
 81054ec:	46bd      	mov	sp, r7
 81054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054f2:	4770      	bx	lr

081054f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 81054f4:	b580      	push	{r7, lr}
 81054f6:	b084      	sub	sp, #16
 81054f8:	af00      	add	r7, sp, #0
 81054fa:	60f8      	str	r0, [r7, #12]
 81054fc:	60b9      	str	r1, [r7, #8]
 81054fe:	603b      	str	r3, [r7, #0]
 8105500:	4613      	mov	r3, r2
 8105502:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105504:	e022      	b.n	810554c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105506:	683b      	ldr	r3, [r7, #0]
 8105508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810550c:	d01e      	beq.n	810554c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810550e:	f7fc fec1 	bl	8102294 <HAL_GetTick>
 8105512:	4602      	mov	r2, r0
 8105514:	69bb      	ldr	r3, [r7, #24]
 8105516:	1ad3      	subs	r3, r2, r3
 8105518:	683a      	ldr	r2, [r7, #0]
 810551a:	429a      	cmp	r2, r3
 810551c:	d302      	bcc.n	8105524 <I2C_WaitOnFlagUntilTimeout+0x30>
 810551e:	683b      	ldr	r3, [r7, #0]
 8105520:	2b00      	cmp	r3, #0
 8105522:	d113      	bne.n	810554c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105524:	68fb      	ldr	r3, [r7, #12]
 8105526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105528:	f043 0220 	orr.w	r2, r3, #32
 810552c:	68fb      	ldr	r3, [r7, #12]
 810552e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105530:	68fb      	ldr	r3, [r7, #12]
 8105532:	2220      	movs	r2, #32
 8105534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105538:	68fb      	ldr	r3, [r7, #12]
 810553a:	2200      	movs	r2, #0
 810553c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105540:	68fb      	ldr	r3, [r7, #12]
 8105542:	2200      	movs	r2, #0
 8105544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8105548:	2301      	movs	r3, #1
 810554a:	e00f      	b.n	810556c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810554c:	68fb      	ldr	r3, [r7, #12]
 810554e:	681b      	ldr	r3, [r3, #0]
 8105550:	699a      	ldr	r2, [r3, #24]
 8105552:	68bb      	ldr	r3, [r7, #8]
 8105554:	4013      	ands	r3, r2
 8105556:	68ba      	ldr	r2, [r7, #8]
 8105558:	429a      	cmp	r2, r3
 810555a:	bf0c      	ite	eq
 810555c:	2301      	moveq	r3, #1
 810555e:	2300      	movne	r3, #0
 8105560:	b2db      	uxtb	r3, r3
 8105562:	461a      	mov	r2, r3
 8105564:	79fb      	ldrb	r3, [r7, #7]
 8105566:	429a      	cmp	r2, r3
 8105568:	d0cd      	beq.n	8105506 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 810556a:	2300      	movs	r3, #0
}
 810556c:	4618      	mov	r0, r3
 810556e:	3710      	adds	r7, #16
 8105570:	46bd      	mov	sp, r7
 8105572:	bd80      	pop	{r7, pc}

08105574 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105574:	b580      	push	{r7, lr}
 8105576:	b084      	sub	sp, #16
 8105578:	af00      	add	r7, sp, #0
 810557a:	60f8      	str	r0, [r7, #12]
 810557c:	60b9      	str	r1, [r7, #8]
 810557e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105580:	e02c      	b.n	81055dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8105582:	687a      	ldr	r2, [r7, #4]
 8105584:	68b9      	ldr	r1, [r7, #8]
 8105586:	68f8      	ldr	r0, [r7, #12]
 8105588:	f000 f8dc 	bl	8105744 <I2C_IsAcknowledgeFailed>
 810558c:	4603      	mov	r3, r0
 810558e:	2b00      	cmp	r3, #0
 8105590:	d001      	beq.n	8105596 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105592:	2301      	movs	r3, #1
 8105594:	e02a      	b.n	81055ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105596:	68bb      	ldr	r3, [r7, #8]
 8105598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810559c:	d01e      	beq.n	81055dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810559e:	f7fc fe79 	bl	8102294 <HAL_GetTick>
 81055a2:	4602      	mov	r2, r0
 81055a4:	687b      	ldr	r3, [r7, #4]
 81055a6:	1ad3      	subs	r3, r2, r3
 81055a8:	68ba      	ldr	r2, [r7, #8]
 81055aa:	429a      	cmp	r2, r3
 81055ac:	d302      	bcc.n	81055b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81055ae:	68bb      	ldr	r3, [r7, #8]
 81055b0:	2b00      	cmp	r3, #0
 81055b2:	d113      	bne.n	81055dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81055b4:	68fb      	ldr	r3, [r7, #12]
 81055b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81055b8:	f043 0220 	orr.w	r2, r3, #32
 81055bc:	68fb      	ldr	r3, [r7, #12]
 81055be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81055c0:	68fb      	ldr	r3, [r7, #12]
 81055c2:	2220      	movs	r2, #32
 81055c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81055c8:	68fb      	ldr	r3, [r7, #12]
 81055ca:	2200      	movs	r2, #0
 81055cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81055d0:	68fb      	ldr	r3, [r7, #12]
 81055d2:	2200      	movs	r2, #0
 81055d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81055d8:	2301      	movs	r3, #1
 81055da:	e007      	b.n	81055ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81055dc:	68fb      	ldr	r3, [r7, #12]
 81055de:	681b      	ldr	r3, [r3, #0]
 81055e0:	699b      	ldr	r3, [r3, #24]
 81055e2:	f003 0302 	and.w	r3, r3, #2
 81055e6:	2b02      	cmp	r3, #2
 81055e8:	d1cb      	bne.n	8105582 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81055ea:	2300      	movs	r3, #0
}
 81055ec:	4618      	mov	r0, r3
 81055ee:	3710      	adds	r7, #16
 81055f0:	46bd      	mov	sp, r7
 81055f2:	bd80      	pop	{r7, pc}

081055f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81055f4:	b580      	push	{r7, lr}
 81055f6:	b084      	sub	sp, #16
 81055f8:	af00      	add	r7, sp, #0
 81055fa:	60f8      	str	r0, [r7, #12]
 81055fc:	60b9      	str	r1, [r7, #8]
 81055fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105600:	e028      	b.n	8105654 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8105602:	687a      	ldr	r2, [r7, #4]
 8105604:	68b9      	ldr	r1, [r7, #8]
 8105606:	68f8      	ldr	r0, [r7, #12]
 8105608:	f000 f89c 	bl	8105744 <I2C_IsAcknowledgeFailed>
 810560c:	4603      	mov	r3, r0
 810560e:	2b00      	cmp	r3, #0
 8105610:	d001      	beq.n	8105616 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105612:	2301      	movs	r3, #1
 8105614:	e026      	b.n	8105664 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105616:	f7fc fe3d 	bl	8102294 <HAL_GetTick>
 810561a:	4602      	mov	r2, r0
 810561c:	687b      	ldr	r3, [r7, #4]
 810561e:	1ad3      	subs	r3, r2, r3
 8105620:	68ba      	ldr	r2, [r7, #8]
 8105622:	429a      	cmp	r2, r3
 8105624:	d302      	bcc.n	810562c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8105626:	68bb      	ldr	r3, [r7, #8]
 8105628:	2b00      	cmp	r3, #0
 810562a:	d113      	bne.n	8105654 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810562c:	68fb      	ldr	r3, [r7, #12]
 810562e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105630:	f043 0220 	orr.w	r2, r3, #32
 8105634:	68fb      	ldr	r3, [r7, #12]
 8105636:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8105638:	68fb      	ldr	r3, [r7, #12]
 810563a:	2220      	movs	r2, #32
 810563c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8105640:	68fb      	ldr	r3, [r7, #12]
 8105642:	2200      	movs	r2, #0
 8105644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105648:	68fb      	ldr	r3, [r7, #12]
 810564a:	2200      	movs	r2, #0
 810564c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8105650:	2301      	movs	r3, #1
 8105652:	e007      	b.n	8105664 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105654:	68fb      	ldr	r3, [r7, #12]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	699b      	ldr	r3, [r3, #24]
 810565a:	f003 0320 	and.w	r3, r3, #32
 810565e:	2b20      	cmp	r3, #32
 8105660:	d1cf      	bne.n	8105602 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8105662:	2300      	movs	r3, #0
}
 8105664:	4618      	mov	r0, r3
 8105666:	3710      	adds	r7, #16
 8105668:	46bd      	mov	sp, r7
 810566a:	bd80      	pop	{r7, pc}

0810566c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810566c:	b580      	push	{r7, lr}
 810566e:	b084      	sub	sp, #16
 8105670:	af00      	add	r7, sp, #0
 8105672:	60f8      	str	r0, [r7, #12]
 8105674:	60b9      	str	r1, [r7, #8]
 8105676:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8105678:	e055      	b.n	8105726 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 810567a:	687a      	ldr	r2, [r7, #4]
 810567c:	68b9      	ldr	r1, [r7, #8]
 810567e:	68f8      	ldr	r0, [r7, #12]
 8105680:	f000 f860 	bl	8105744 <I2C_IsAcknowledgeFailed>
 8105684:	4603      	mov	r3, r0
 8105686:	2b00      	cmp	r3, #0
 8105688:	d001      	beq.n	810568e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810568a:	2301      	movs	r3, #1
 810568c:	e053      	b.n	8105736 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 810568e:	68fb      	ldr	r3, [r7, #12]
 8105690:	681b      	ldr	r3, [r3, #0]
 8105692:	699b      	ldr	r3, [r3, #24]
 8105694:	f003 0320 	and.w	r3, r3, #32
 8105698:	2b20      	cmp	r3, #32
 810569a:	d129      	bne.n	81056f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 810569c:	68fb      	ldr	r3, [r7, #12]
 810569e:	681b      	ldr	r3, [r3, #0]
 81056a0:	699b      	ldr	r3, [r3, #24]
 81056a2:	f003 0304 	and.w	r3, r3, #4
 81056a6:	2b04      	cmp	r3, #4
 81056a8:	d105      	bne.n	81056b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 81056aa:	68fb      	ldr	r3, [r7, #12]
 81056ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81056ae:	2b00      	cmp	r3, #0
 81056b0:	d001      	beq.n	81056b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 81056b2:	2300      	movs	r3, #0
 81056b4:	e03f      	b.n	8105736 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81056b6:	68fb      	ldr	r3, [r7, #12]
 81056b8:	681b      	ldr	r3, [r3, #0]
 81056ba:	2220      	movs	r2, #32
 81056bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 81056be:	68fb      	ldr	r3, [r7, #12]
 81056c0:	681b      	ldr	r3, [r3, #0]
 81056c2:	6859      	ldr	r1, [r3, #4]
 81056c4:	68fb      	ldr	r3, [r7, #12]
 81056c6:	681a      	ldr	r2, [r3, #0]
 81056c8:	4b1d      	ldr	r3, [pc, #116]	; (8105740 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 81056ca:	400b      	ands	r3, r1
 81056cc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81056ce:	68fb      	ldr	r3, [r7, #12]
 81056d0:	2200      	movs	r2, #0
 81056d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81056d4:	68fb      	ldr	r3, [r7, #12]
 81056d6:	2220      	movs	r2, #32
 81056d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81056dc:	68fb      	ldr	r3, [r7, #12]
 81056de:	2200      	movs	r2, #0
 81056e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81056e4:	68fb      	ldr	r3, [r7, #12]
 81056e6:	2200      	movs	r2, #0
 81056e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81056ec:	2301      	movs	r3, #1
 81056ee:	e022      	b.n	8105736 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81056f0:	f7fc fdd0 	bl	8102294 <HAL_GetTick>
 81056f4:	4602      	mov	r2, r0
 81056f6:	687b      	ldr	r3, [r7, #4]
 81056f8:	1ad3      	subs	r3, r2, r3
 81056fa:	68ba      	ldr	r2, [r7, #8]
 81056fc:	429a      	cmp	r2, r3
 81056fe:	d302      	bcc.n	8105706 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8105700:	68bb      	ldr	r3, [r7, #8]
 8105702:	2b00      	cmp	r3, #0
 8105704:	d10f      	bne.n	8105726 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105706:	68fb      	ldr	r3, [r7, #12]
 8105708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810570a:	f043 0220 	orr.w	r2, r3, #32
 810570e:	68fb      	ldr	r3, [r7, #12]
 8105710:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8105712:	68fb      	ldr	r3, [r7, #12]
 8105714:	2220      	movs	r2, #32
 8105716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810571a:	68fb      	ldr	r3, [r7, #12]
 810571c:	2200      	movs	r2, #0
 810571e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8105722:	2301      	movs	r3, #1
 8105724:	e007      	b.n	8105736 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8105726:	68fb      	ldr	r3, [r7, #12]
 8105728:	681b      	ldr	r3, [r3, #0]
 810572a:	699b      	ldr	r3, [r3, #24]
 810572c:	f003 0304 	and.w	r3, r3, #4
 8105730:	2b04      	cmp	r3, #4
 8105732:	d1a2      	bne.n	810567a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8105734:	2300      	movs	r3, #0
}
 8105736:	4618      	mov	r0, r3
 8105738:	3710      	adds	r7, #16
 810573a:	46bd      	mov	sp, r7
 810573c:	bd80      	pop	{r7, pc}
 810573e:	bf00      	nop
 8105740:	fe00e800 	.word	0xfe00e800

08105744 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105744:	b580      	push	{r7, lr}
 8105746:	b084      	sub	sp, #16
 8105748:	af00      	add	r7, sp, #0
 810574a:	60f8      	str	r0, [r7, #12]
 810574c:	60b9      	str	r1, [r7, #8]
 810574e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8105750:	68fb      	ldr	r3, [r7, #12]
 8105752:	681b      	ldr	r3, [r3, #0]
 8105754:	699b      	ldr	r3, [r3, #24]
 8105756:	f003 0310 	and.w	r3, r3, #16
 810575a:	2b10      	cmp	r3, #16
 810575c:	d151      	bne.n	8105802 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810575e:	e022      	b.n	81057a6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8105760:	68bb      	ldr	r3, [r7, #8]
 8105762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8105766:	d01e      	beq.n	81057a6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105768:	f7fc fd94 	bl	8102294 <HAL_GetTick>
 810576c:	4602      	mov	r2, r0
 810576e:	687b      	ldr	r3, [r7, #4]
 8105770:	1ad3      	subs	r3, r2, r3
 8105772:	68ba      	ldr	r2, [r7, #8]
 8105774:	429a      	cmp	r2, r3
 8105776:	d302      	bcc.n	810577e <I2C_IsAcknowledgeFailed+0x3a>
 8105778:	68bb      	ldr	r3, [r7, #8]
 810577a:	2b00      	cmp	r3, #0
 810577c:	d113      	bne.n	81057a6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810577e:	68fb      	ldr	r3, [r7, #12]
 8105780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105782:	f043 0220 	orr.w	r2, r3, #32
 8105786:	68fb      	ldr	r3, [r7, #12]
 8105788:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810578a:	68fb      	ldr	r3, [r7, #12]
 810578c:	2220      	movs	r2, #32
 810578e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8105792:	68fb      	ldr	r3, [r7, #12]
 8105794:	2200      	movs	r2, #0
 8105796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810579a:	68fb      	ldr	r3, [r7, #12]
 810579c:	2200      	movs	r2, #0
 810579e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 81057a2:	2301      	movs	r3, #1
 81057a4:	e02e      	b.n	8105804 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81057a6:	68fb      	ldr	r3, [r7, #12]
 81057a8:	681b      	ldr	r3, [r3, #0]
 81057aa:	699b      	ldr	r3, [r3, #24]
 81057ac:	f003 0320 	and.w	r3, r3, #32
 81057b0:	2b20      	cmp	r3, #32
 81057b2:	d1d5      	bne.n	8105760 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81057b4:	68fb      	ldr	r3, [r7, #12]
 81057b6:	681b      	ldr	r3, [r3, #0]
 81057b8:	2210      	movs	r2, #16
 81057ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81057bc:	68fb      	ldr	r3, [r7, #12]
 81057be:	681b      	ldr	r3, [r3, #0]
 81057c0:	2220      	movs	r2, #32
 81057c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81057c4:	68f8      	ldr	r0, [r7, #12]
 81057c6:	f7ff fe71 	bl	81054ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81057ca:	68fb      	ldr	r3, [r7, #12]
 81057cc:	681b      	ldr	r3, [r3, #0]
 81057ce:	6859      	ldr	r1, [r3, #4]
 81057d0:	68fb      	ldr	r3, [r7, #12]
 81057d2:	681a      	ldr	r2, [r3, #0]
 81057d4:	4b0d      	ldr	r3, [pc, #52]	; (810580c <I2C_IsAcknowledgeFailed+0xc8>)
 81057d6:	400b      	ands	r3, r1
 81057d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81057da:	68fb      	ldr	r3, [r7, #12]
 81057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81057de:	f043 0204 	orr.w	r2, r3, #4
 81057e2:	68fb      	ldr	r3, [r7, #12]
 81057e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81057e6:	68fb      	ldr	r3, [r7, #12]
 81057e8:	2220      	movs	r2, #32
 81057ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81057ee:	68fb      	ldr	r3, [r7, #12]
 81057f0:	2200      	movs	r2, #0
 81057f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81057f6:	68fb      	ldr	r3, [r7, #12]
 81057f8:	2200      	movs	r2, #0
 81057fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 81057fe:	2301      	movs	r3, #1
 8105800:	e000      	b.n	8105804 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8105802:	2300      	movs	r3, #0
}
 8105804:	4618      	mov	r0, r3
 8105806:	3710      	adds	r7, #16
 8105808:	46bd      	mov	sp, r7
 810580a:	bd80      	pop	{r7, pc}
 810580c:	fe00e800 	.word	0xfe00e800

08105810 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8105810:	b480      	push	{r7}
 8105812:	b085      	sub	sp, #20
 8105814:	af00      	add	r7, sp, #0
 8105816:	60f8      	str	r0, [r7, #12]
 8105818:	607b      	str	r3, [r7, #4]
 810581a:	460b      	mov	r3, r1
 810581c:	817b      	strh	r3, [r7, #10]
 810581e:	4613      	mov	r3, r2
 8105820:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8105822:	68fb      	ldr	r3, [r7, #12]
 8105824:	681b      	ldr	r3, [r3, #0]
 8105826:	685a      	ldr	r2, [r3, #4]
 8105828:	69bb      	ldr	r3, [r7, #24]
 810582a:	0d5b      	lsrs	r3, r3, #21
 810582c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8105830:	4b0d      	ldr	r3, [pc, #52]	; (8105868 <I2C_TransferConfig+0x58>)
 8105832:	430b      	orrs	r3, r1
 8105834:	43db      	mvns	r3, r3
 8105836:	ea02 0103 	and.w	r1, r2, r3
 810583a:	897b      	ldrh	r3, [r7, #10]
 810583c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8105840:	7a7b      	ldrb	r3, [r7, #9]
 8105842:	041b      	lsls	r3, r3, #16
 8105844:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8105848:	431a      	orrs	r2, r3
 810584a:	687b      	ldr	r3, [r7, #4]
 810584c:	431a      	orrs	r2, r3
 810584e:	69bb      	ldr	r3, [r7, #24]
 8105850:	431a      	orrs	r2, r3
 8105852:	68fb      	ldr	r3, [r7, #12]
 8105854:	681b      	ldr	r3, [r3, #0]
 8105856:	430a      	orrs	r2, r1
 8105858:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 810585a:	bf00      	nop
 810585c:	3714      	adds	r7, #20
 810585e:	46bd      	mov	sp, r7
 8105860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105864:	4770      	bx	lr
 8105866:	bf00      	nop
 8105868:	03ff63ff 	.word	0x03ff63ff

0810586c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810586c:	b480      	push	{r7}
 810586e:	b083      	sub	sp, #12
 8105870:	af00      	add	r7, sp, #0
 8105872:	6078      	str	r0, [r7, #4]
 8105874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105876:	687b      	ldr	r3, [r7, #4]
 8105878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810587c:	b2db      	uxtb	r3, r3
 810587e:	2b20      	cmp	r3, #32
 8105880:	d138      	bne.n	81058f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105882:	687b      	ldr	r3, [r7, #4]
 8105884:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105888:	2b01      	cmp	r3, #1
 810588a:	d101      	bne.n	8105890 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810588c:	2302      	movs	r3, #2
 810588e:	e032      	b.n	81058f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8105890:	687b      	ldr	r3, [r7, #4]
 8105892:	2201      	movs	r2, #1
 8105894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105898:	687b      	ldr	r3, [r7, #4]
 810589a:	2224      	movs	r2, #36	; 0x24
 810589c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	681b      	ldr	r3, [r3, #0]
 81058a4:	681a      	ldr	r2, [r3, #0]
 81058a6:	687b      	ldr	r3, [r7, #4]
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	f022 0201 	bic.w	r2, r2, #1
 81058ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81058b0:	687b      	ldr	r3, [r7, #4]
 81058b2:	681b      	ldr	r3, [r3, #0]
 81058b4:	681a      	ldr	r2, [r3, #0]
 81058b6:	687b      	ldr	r3, [r7, #4]
 81058b8:	681b      	ldr	r3, [r3, #0]
 81058ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81058be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81058c0:	687b      	ldr	r3, [r7, #4]
 81058c2:	681b      	ldr	r3, [r3, #0]
 81058c4:	6819      	ldr	r1, [r3, #0]
 81058c6:	687b      	ldr	r3, [r7, #4]
 81058c8:	681b      	ldr	r3, [r3, #0]
 81058ca:	683a      	ldr	r2, [r7, #0]
 81058cc:	430a      	orrs	r2, r1
 81058ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	681b      	ldr	r3, [r3, #0]
 81058d4:	681a      	ldr	r2, [r3, #0]
 81058d6:	687b      	ldr	r3, [r7, #4]
 81058d8:	681b      	ldr	r3, [r3, #0]
 81058da:	f042 0201 	orr.w	r2, r2, #1
 81058de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	2220      	movs	r2, #32
 81058e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81058e8:	687b      	ldr	r3, [r7, #4]
 81058ea:	2200      	movs	r2, #0
 81058ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81058f0:	2300      	movs	r3, #0
 81058f2:	e000      	b.n	81058f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81058f4:	2302      	movs	r3, #2
  }
}
 81058f6:	4618      	mov	r0, r3
 81058f8:	370c      	adds	r7, #12
 81058fa:	46bd      	mov	sp, r7
 81058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105900:	4770      	bx	lr

08105902 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8105902:	b480      	push	{r7}
 8105904:	b085      	sub	sp, #20
 8105906:	af00      	add	r7, sp, #0
 8105908:	6078      	str	r0, [r7, #4]
 810590a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810590c:	687b      	ldr	r3, [r7, #4]
 810590e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105912:	b2db      	uxtb	r3, r3
 8105914:	2b20      	cmp	r3, #32
 8105916:	d139      	bne.n	810598c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105918:	687b      	ldr	r3, [r7, #4]
 810591a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810591e:	2b01      	cmp	r3, #1
 8105920:	d101      	bne.n	8105926 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8105922:	2302      	movs	r3, #2
 8105924:	e033      	b.n	810598e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8105926:	687b      	ldr	r3, [r7, #4]
 8105928:	2201      	movs	r2, #1
 810592a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810592e:	687b      	ldr	r3, [r7, #4]
 8105930:	2224      	movs	r2, #36	; 0x24
 8105932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105936:	687b      	ldr	r3, [r7, #4]
 8105938:	681b      	ldr	r3, [r3, #0]
 810593a:	681a      	ldr	r2, [r3, #0]
 810593c:	687b      	ldr	r3, [r7, #4]
 810593e:	681b      	ldr	r3, [r3, #0]
 8105940:	f022 0201 	bic.w	r2, r2, #1
 8105944:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	681b      	ldr	r3, [r3, #0]
 810594a:	681b      	ldr	r3, [r3, #0]
 810594c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810594e:	68fb      	ldr	r3, [r7, #12]
 8105950:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8105954:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8105956:	683b      	ldr	r3, [r7, #0]
 8105958:	021b      	lsls	r3, r3, #8
 810595a:	68fa      	ldr	r2, [r7, #12]
 810595c:	4313      	orrs	r3, r2
 810595e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8105960:	687b      	ldr	r3, [r7, #4]
 8105962:	681b      	ldr	r3, [r3, #0]
 8105964:	68fa      	ldr	r2, [r7, #12]
 8105966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105968:	687b      	ldr	r3, [r7, #4]
 810596a:	681b      	ldr	r3, [r3, #0]
 810596c:	681a      	ldr	r2, [r3, #0]
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	681b      	ldr	r3, [r3, #0]
 8105972:	f042 0201 	orr.w	r2, r2, #1
 8105976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	2220      	movs	r2, #32
 810597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	2200      	movs	r2, #0
 8105984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105988:	2300      	movs	r3, #0
 810598a:	e000      	b.n	810598e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810598c:	2302      	movs	r3, #2
  }
}
 810598e:	4618      	mov	r0, r3
 8105990:	3714      	adds	r7, #20
 8105992:	46bd      	mov	sp, r7
 8105994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105998:	4770      	bx	lr
	...

0810599c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 810599c:	b480      	push	{r7}
 810599e:	b085      	sub	sp, #20
 81059a0:	af00      	add	r7, sp, #0
 81059a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81059a4:	4b0d      	ldr	r3, [pc, #52]	; (81059dc <HAL_I2CEx_EnableFastModePlus+0x40>)
 81059a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81059aa:	4a0c      	ldr	r2, [pc, #48]	; (81059dc <HAL_I2CEx_EnableFastModePlus+0x40>)
 81059ac:	f043 0302 	orr.w	r3, r3, #2
 81059b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81059b4:	4b09      	ldr	r3, [pc, #36]	; (81059dc <HAL_I2CEx_EnableFastModePlus+0x40>)
 81059b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81059ba:	f003 0302 	and.w	r3, r3, #2
 81059be:	60fb      	str	r3, [r7, #12]
 81059c0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 81059c2:	4b07      	ldr	r3, [pc, #28]	; (81059e0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 81059c4:	685a      	ldr	r2, [r3, #4]
 81059c6:	4906      	ldr	r1, [pc, #24]	; (81059e0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	4313      	orrs	r3, r2
 81059cc:	604b      	str	r3, [r1, #4]
}
 81059ce:	bf00      	nop
 81059d0:	3714      	adds	r7, #20
 81059d2:	46bd      	mov	sp, r7
 81059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059d8:	4770      	bx	lr
 81059da:	bf00      	nop
 81059dc:	58024400 	.word	0x58024400
 81059e0:	58000400 	.word	0x58000400

081059e4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 81059e4:	b580      	push	{r7, lr}
 81059e6:	b084      	sub	sp, #16
 81059e8:	af00      	add	r7, sp, #0
 81059ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 81059ec:	687b      	ldr	r3, [r7, #4]
 81059ee:	2b00      	cmp	r3, #0
 81059f0:	d101      	bne.n	81059f6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 81059f2:	2301      	movs	r3, #1
 81059f4:	e038      	b.n	8105a68 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 81059f6:	687b      	ldr	r3, [r7, #4]
 81059f8:	681b      	ldr	r3, [r3, #0]
 81059fa:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 81059fe:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8105a00:	687b      	ldr	r3, [r7, #4]
 8105a02:	681b      	ldr	r3, [r3, #0]
 8105a04:	f245 5255 	movw	r2, #21845	; 0x5555
 8105a08:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8105a0a:	687b      	ldr	r3, [r7, #4]
 8105a0c:	681b      	ldr	r3, [r3, #0]
 8105a0e:	687a      	ldr	r2, [r7, #4]
 8105a10:	6852      	ldr	r2, [r2, #4]
 8105a12:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	681b      	ldr	r3, [r3, #0]
 8105a18:	687a      	ldr	r2, [r7, #4]
 8105a1a:	6892      	ldr	r2, [r2, #8]
 8105a1c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8105a1e:	f7fc fc39 	bl	8102294 <HAL_GetTick>
 8105a22:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8105a24:	e008      	b.n	8105a38 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8105a26:	f7fc fc35 	bl	8102294 <HAL_GetTick>
 8105a2a:	4602      	mov	r2, r0
 8105a2c:	68fb      	ldr	r3, [r7, #12]
 8105a2e:	1ad3      	subs	r3, r2, r3
 8105a30:	2b30      	cmp	r3, #48	; 0x30
 8105a32:	d901      	bls.n	8105a38 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8105a34:	2303      	movs	r3, #3
 8105a36:	e017      	b.n	8105a68 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	681b      	ldr	r3, [r3, #0]
 8105a3c:	68db      	ldr	r3, [r3, #12]
 8105a3e:	2b00      	cmp	r3, #0
 8105a40:	d1f1      	bne.n	8105a26 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8105a42:	687b      	ldr	r3, [r7, #4]
 8105a44:	681b      	ldr	r3, [r3, #0]
 8105a46:	691a      	ldr	r2, [r3, #16]
 8105a48:	687b      	ldr	r3, [r7, #4]
 8105a4a:	68db      	ldr	r3, [r3, #12]
 8105a4c:	429a      	cmp	r2, r3
 8105a4e:	d005      	beq.n	8105a5c <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	681b      	ldr	r3, [r3, #0]
 8105a54:	687a      	ldr	r2, [r7, #4]
 8105a56:	68d2      	ldr	r2, [r2, #12]
 8105a58:	611a      	str	r2, [r3, #16]
 8105a5a:	e004      	b.n	8105a66 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	681b      	ldr	r3, [r3, #0]
 8105a60:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8105a64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8105a66:	2300      	movs	r3, #0
}
 8105a68:	4618      	mov	r0, r3
 8105a6a:	3710      	adds	r7, #16
 8105a6c:	46bd      	mov	sp, r7
 8105a6e:	bd80      	pop	{r7, pc}

08105a70 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8105a70:	b480      	push	{r7}
 8105a72:	b083      	sub	sp, #12
 8105a74:	af00      	add	r7, sp, #0
 8105a76:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	681b      	ldr	r3, [r3, #0]
 8105a7c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8105a80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8105a82:	2300      	movs	r3, #0
}
 8105a84:	4618      	mov	r0, r3
 8105a86:	370c      	adds	r7, #12
 8105a88:	46bd      	mov	sp, r7
 8105a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a8e:	4770      	bx	lr

08105a90 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105a90:	b580      	push	{r7, lr}
 8105a92:	b084      	sub	sp, #16
 8105a94:	af00      	add	r7, sp, #0
 8105a96:	60f8      	str	r0, [r7, #12]
 8105a98:	460b      	mov	r3, r1
 8105a9a:	607a      	str	r2, [r7, #4]
 8105a9c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105a9e:	4b37      	ldr	r3, [pc, #220]	; (8105b7c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105aa0:	681b      	ldr	r3, [r3, #0]
 8105aa2:	f023 0201 	bic.w	r2, r3, #1
 8105aa6:	4935      	ldr	r1, [pc, #212]	; (8105b7c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105aa8:	68fb      	ldr	r3, [r7, #12]
 8105aaa:	4313      	orrs	r3, r2
 8105aac:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105aae:	687b      	ldr	r3, [r7, #4]
 8105ab0:	2b00      	cmp	r3, #0
 8105ab2:	d123      	bne.n	8105afc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105ab4:	f7fc fcf6 	bl	81024a4 <HAL_GetCurrentCPUID>
 8105ab8:	4603      	mov	r3, r0
 8105aba:	2b03      	cmp	r3, #3
 8105abc:	d158      	bne.n	8105b70 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105abe:	4b2f      	ldr	r3, [pc, #188]	; (8105b7c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105ac0:	691b      	ldr	r3, [r3, #16]
 8105ac2:	4a2e      	ldr	r2, [pc, #184]	; (8105b7c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105ac4:	f023 0301 	bic.w	r3, r3, #1
 8105ac8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105aca:	4b2d      	ldr	r3, [pc, #180]	; (8105b80 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105acc:	691b      	ldr	r3, [r3, #16]
 8105ace:	4a2c      	ldr	r2, [pc, #176]	; (8105b80 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105ad0:	f043 0304 	orr.w	r3, r3, #4
 8105ad4:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105ad6:	f3bf 8f4f 	dsb	sy
}
 8105ada:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105adc:	f3bf 8f6f 	isb	sy
}
 8105ae0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105ae2:	7afb      	ldrb	r3, [r7, #11]
 8105ae4:	2b01      	cmp	r3, #1
 8105ae6:	d101      	bne.n	8105aec <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105ae8:	bf30      	wfi
 8105aea:	e000      	b.n	8105aee <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105aec:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105aee:	4b24      	ldr	r3, [pc, #144]	; (8105b80 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105af0:	691b      	ldr	r3, [r3, #16]
 8105af2:	4a23      	ldr	r2, [pc, #140]	; (8105b80 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105af4:	f023 0304 	bic.w	r3, r3, #4
 8105af8:	6113      	str	r3, [r2, #16]
 8105afa:	e03c      	b.n	8105b76 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	2b01      	cmp	r3, #1
 8105b00:	d123      	bne.n	8105b4a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105b02:	f7fc fccf 	bl	81024a4 <HAL_GetCurrentCPUID>
 8105b06:	4603      	mov	r3, r0
 8105b08:	2b01      	cmp	r3, #1
 8105b0a:	d133      	bne.n	8105b74 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105b0c:	4b1b      	ldr	r3, [pc, #108]	; (8105b7c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105b0e:	695b      	ldr	r3, [r3, #20]
 8105b10:	4a1a      	ldr	r2, [pc, #104]	; (8105b7c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105b12:	f023 0302 	bic.w	r3, r3, #2
 8105b16:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105b18:	4b19      	ldr	r3, [pc, #100]	; (8105b80 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105b1a:	691b      	ldr	r3, [r3, #16]
 8105b1c:	4a18      	ldr	r2, [pc, #96]	; (8105b80 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105b1e:	f043 0304 	orr.w	r3, r3, #4
 8105b22:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105b24:	f3bf 8f4f 	dsb	sy
}
 8105b28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105b2a:	f3bf 8f6f 	isb	sy
}
 8105b2e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105b30:	7afb      	ldrb	r3, [r7, #11]
 8105b32:	2b01      	cmp	r3, #1
 8105b34:	d101      	bne.n	8105b3a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105b36:	bf30      	wfi
 8105b38:	e000      	b.n	8105b3c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105b3a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105b3c:	4b10      	ldr	r3, [pc, #64]	; (8105b80 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105b3e:	691b      	ldr	r3, [r3, #16]
 8105b40:	4a0f      	ldr	r2, [pc, #60]	; (8105b80 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105b42:	f023 0304 	bic.w	r3, r3, #4
 8105b46:	6113      	str	r3, [r2, #16]
 8105b48:	e015      	b.n	8105b76 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105b4a:	f7fc fcab 	bl	81024a4 <HAL_GetCurrentCPUID>
 8105b4e:	4603      	mov	r3, r0
 8105b50:	2b03      	cmp	r3, #3
 8105b52:	d106      	bne.n	8105b62 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105b54:	4b09      	ldr	r3, [pc, #36]	; (8105b7c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105b56:	691b      	ldr	r3, [r3, #16]
 8105b58:	4a08      	ldr	r2, [pc, #32]	; (8105b7c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105b5a:	f023 0304 	bic.w	r3, r3, #4
 8105b5e:	6113      	str	r3, [r2, #16]
 8105b60:	e009      	b.n	8105b76 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105b62:	4b06      	ldr	r3, [pc, #24]	; (8105b7c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105b64:	695b      	ldr	r3, [r3, #20]
 8105b66:	4a05      	ldr	r2, [pc, #20]	; (8105b7c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105b68:	f023 0304 	bic.w	r3, r3, #4
 8105b6c:	6153      	str	r3, [r2, #20]
 8105b6e:	e002      	b.n	8105b76 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105b70:	bf00      	nop
 8105b72:	e000      	b.n	8105b76 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105b74:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105b76:	3710      	adds	r7, #16
 8105b78:	46bd      	mov	sp, r7
 8105b7a:	bd80      	pop	{r7, pc}
 8105b7c:	58024800 	.word	0x58024800
 8105b80:	e000ed00 	.word	0xe000ed00

08105b84 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105b84:	b580      	push	{r7, lr}
 8105b86:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105b88:	f7fc fc8c 	bl	81024a4 <HAL_GetCurrentCPUID>
 8105b8c:	4603      	mov	r3, r0
 8105b8e:	2b03      	cmp	r3, #3
 8105b90:	d101      	bne.n	8105b96 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8105b92:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105b94:	e001      	b.n	8105b9a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105b96:	bf40      	sev
    __WFE ();
 8105b98:	bf20      	wfe
}
 8105b9a:	bf00      	nop
 8105b9c:	bd80      	pop	{r7, pc}
	...

08105ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105ba0:	b480      	push	{r7}
 8105ba2:	b089      	sub	sp, #36	; 0x24
 8105ba4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105ba6:	4bb3      	ldr	r3, [pc, #716]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105ba8:	691b      	ldr	r3, [r3, #16]
 8105baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105bae:	2b18      	cmp	r3, #24
 8105bb0:	f200 8155 	bhi.w	8105e5e <HAL_RCC_GetSysClockFreq+0x2be>
 8105bb4:	a201      	add	r2, pc, #4	; (adr r2, 8105bbc <HAL_RCC_GetSysClockFreq+0x1c>)
 8105bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105bba:	bf00      	nop
 8105bbc:	08105c21 	.word	0x08105c21
 8105bc0:	08105e5f 	.word	0x08105e5f
 8105bc4:	08105e5f 	.word	0x08105e5f
 8105bc8:	08105e5f 	.word	0x08105e5f
 8105bcc:	08105e5f 	.word	0x08105e5f
 8105bd0:	08105e5f 	.word	0x08105e5f
 8105bd4:	08105e5f 	.word	0x08105e5f
 8105bd8:	08105e5f 	.word	0x08105e5f
 8105bdc:	08105c47 	.word	0x08105c47
 8105be0:	08105e5f 	.word	0x08105e5f
 8105be4:	08105e5f 	.word	0x08105e5f
 8105be8:	08105e5f 	.word	0x08105e5f
 8105bec:	08105e5f 	.word	0x08105e5f
 8105bf0:	08105e5f 	.word	0x08105e5f
 8105bf4:	08105e5f 	.word	0x08105e5f
 8105bf8:	08105e5f 	.word	0x08105e5f
 8105bfc:	08105c4d 	.word	0x08105c4d
 8105c00:	08105e5f 	.word	0x08105e5f
 8105c04:	08105e5f 	.word	0x08105e5f
 8105c08:	08105e5f 	.word	0x08105e5f
 8105c0c:	08105e5f 	.word	0x08105e5f
 8105c10:	08105e5f 	.word	0x08105e5f
 8105c14:	08105e5f 	.word	0x08105e5f
 8105c18:	08105e5f 	.word	0x08105e5f
 8105c1c:	08105c53 	.word	0x08105c53
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105c20:	4b94      	ldr	r3, [pc, #592]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105c22:	681b      	ldr	r3, [r3, #0]
 8105c24:	f003 0320 	and.w	r3, r3, #32
 8105c28:	2b00      	cmp	r3, #0
 8105c2a:	d009      	beq.n	8105c40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105c2c:	4b91      	ldr	r3, [pc, #580]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105c2e:	681b      	ldr	r3, [r3, #0]
 8105c30:	08db      	lsrs	r3, r3, #3
 8105c32:	f003 0303 	and.w	r3, r3, #3
 8105c36:	4a90      	ldr	r2, [pc, #576]	; (8105e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105c38:	fa22 f303 	lsr.w	r3, r2, r3
 8105c3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8105c3e:	e111      	b.n	8105e64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105c40:	4b8d      	ldr	r3, [pc, #564]	; (8105e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105c42:	61bb      	str	r3, [r7, #24]
    break;
 8105c44:	e10e      	b.n	8105e64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8105c46:	4b8d      	ldr	r3, [pc, #564]	; (8105e7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105c48:	61bb      	str	r3, [r7, #24]
    break;
 8105c4a:	e10b      	b.n	8105e64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8105c4c:	4b8c      	ldr	r3, [pc, #560]	; (8105e80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8105c4e:	61bb      	str	r3, [r7, #24]
    break;
 8105c50:	e108      	b.n	8105e64 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105c52:	4b88      	ldr	r3, [pc, #544]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105c56:	f003 0303 	and.w	r3, r3, #3
 8105c5a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8105c5c:	4b85      	ldr	r3, [pc, #532]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105c60:	091b      	lsrs	r3, r3, #4
 8105c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105c66:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105c68:	4b82      	ldr	r3, [pc, #520]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c6c:	f003 0301 	and.w	r3, r3, #1
 8105c70:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105c72:	4b80      	ldr	r3, [pc, #512]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105c76:	08db      	lsrs	r3, r3, #3
 8105c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105c7c:	68fa      	ldr	r2, [r7, #12]
 8105c7e:	fb02 f303 	mul.w	r3, r2, r3
 8105c82:	ee07 3a90 	vmov	s15, r3
 8105c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c8a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8105c8e:	693b      	ldr	r3, [r7, #16]
 8105c90:	2b00      	cmp	r3, #0
 8105c92:	f000 80e1 	beq.w	8105e58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8105c96:	697b      	ldr	r3, [r7, #20]
 8105c98:	2b02      	cmp	r3, #2
 8105c9a:	f000 8083 	beq.w	8105da4 <HAL_RCC_GetSysClockFreq+0x204>
 8105c9e:	697b      	ldr	r3, [r7, #20]
 8105ca0:	2b02      	cmp	r3, #2
 8105ca2:	f200 80a1 	bhi.w	8105de8 <HAL_RCC_GetSysClockFreq+0x248>
 8105ca6:	697b      	ldr	r3, [r7, #20]
 8105ca8:	2b00      	cmp	r3, #0
 8105caa:	d003      	beq.n	8105cb4 <HAL_RCC_GetSysClockFreq+0x114>
 8105cac:	697b      	ldr	r3, [r7, #20]
 8105cae:	2b01      	cmp	r3, #1
 8105cb0:	d056      	beq.n	8105d60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8105cb2:	e099      	b.n	8105de8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105cb4:	4b6f      	ldr	r3, [pc, #444]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105cb6:	681b      	ldr	r3, [r3, #0]
 8105cb8:	f003 0320 	and.w	r3, r3, #32
 8105cbc:	2b00      	cmp	r3, #0
 8105cbe:	d02d      	beq.n	8105d1c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105cc0:	4b6c      	ldr	r3, [pc, #432]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105cc2:	681b      	ldr	r3, [r3, #0]
 8105cc4:	08db      	lsrs	r3, r3, #3
 8105cc6:	f003 0303 	and.w	r3, r3, #3
 8105cca:	4a6b      	ldr	r2, [pc, #428]	; (8105e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8105cd0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105cd2:	687b      	ldr	r3, [r7, #4]
 8105cd4:	ee07 3a90 	vmov	s15, r3
 8105cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105cdc:	693b      	ldr	r3, [r7, #16]
 8105cde:	ee07 3a90 	vmov	s15, r3
 8105ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105cea:	4b62      	ldr	r3, [pc, #392]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105cf2:	ee07 3a90 	vmov	s15, r3
 8105cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105cfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8105cfe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8105e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8105d1a:	e087      	b.n	8105e2c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105d1c:	693b      	ldr	r3, [r7, #16]
 8105d1e:	ee07 3a90 	vmov	s15, r3
 8105d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d26:	eddf 6a58 	vldr	s13, [pc, #352]	; 8105e88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d2e:	4b51      	ldr	r3, [pc, #324]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d36:	ee07 3a90 	vmov	s15, r3
 8105d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105d42:	eddf 5a50 	vldr	s11, [pc, #320]	; 8105e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105d5e:	e065      	b.n	8105e2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105d60:	693b      	ldr	r3, [r7, #16]
 8105d62:	ee07 3a90 	vmov	s15, r3
 8105d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8105e8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8105d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d72:	4b40      	ldr	r3, [pc, #256]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d7a:	ee07 3a90 	vmov	s15, r3
 8105d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8105d86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8105e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105da2:	e043      	b.n	8105e2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105da4:	693b      	ldr	r3, [r7, #16]
 8105da6:	ee07 3a90 	vmov	s15, r3
 8105daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105dae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8105e90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8105db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105db6:	4b2f      	ldr	r3, [pc, #188]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105dbe:	ee07 3a90 	vmov	s15, r3
 8105dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8105dca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8105e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105de6:	e021      	b.n	8105e2c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105de8:	693b      	ldr	r3, [r7, #16]
 8105dea:	ee07 3a90 	vmov	s15, r3
 8105dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105df2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8105e8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8105df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105dfa:	4b1e      	ldr	r3, [pc, #120]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e02:	ee07 3a90 	vmov	s15, r3
 8105e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8105e0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8105e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105e2a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8105e2c:	4b11      	ldr	r3, [pc, #68]	; (8105e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105e30:	0a5b      	lsrs	r3, r3, #9
 8105e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105e36:	3301      	adds	r3, #1
 8105e38:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8105e3a:	683b      	ldr	r3, [r7, #0]
 8105e3c:	ee07 3a90 	vmov	s15, r3
 8105e40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8105e44:	edd7 6a07 	vldr	s13, [r7, #28]
 8105e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105e50:	ee17 3a90 	vmov	r3, s15
 8105e54:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8105e56:	e005      	b.n	8105e64 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8105e58:	2300      	movs	r3, #0
 8105e5a:	61bb      	str	r3, [r7, #24]
    break;
 8105e5c:	e002      	b.n	8105e64 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8105e5e:	4b07      	ldr	r3, [pc, #28]	; (8105e7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105e60:	61bb      	str	r3, [r7, #24]
    break;
 8105e62:	bf00      	nop
  }

  return sysclockfreq;
 8105e64:	69bb      	ldr	r3, [r7, #24]
}
 8105e66:	4618      	mov	r0, r3
 8105e68:	3724      	adds	r7, #36	; 0x24
 8105e6a:	46bd      	mov	sp, r7
 8105e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e70:	4770      	bx	lr
 8105e72:	bf00      	nop
 8105e74:	58024400 	.word	0x58024400
 8105e78:	03d09000 	.word	0x03d09000
 8105e7c:	003d0900 	.word	0x003d0900
 8105e80:	017d7840 	.word	0x017d7840
 8105e84:	46000000 	.word	0x46000000
 8105e88:	4c742400 	.word	0x4c742400
 8105e8c:	4a742400 	.word	0x4a742400
 8105e90:	4bbebc20 	.word	0x4bbebc20

08105e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8105e94:	b580      	push	{r7, lr}
 8105e96:	b082      	sub	sp, #8
 8105e98:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105e9a:	f7ff fe81 	bl	8105ba0 <HAL_RCC_GetSysClockFreq>
 8105e9e:	4602      	mov	r2, r0
 8105ea0:	4b11      	ldr	r3, [pc, #68]	; (8105ee8 <HAL_RCC_GetHCLKFreq+0x54>)
 8105ea2:	699b      	ldr	r3, [r3, #24]
 8105ea4:	0a1b      	lsrs	r3, r3, #8
 8105ea6:	f003 030f 	and.w	r3, r3, #15
 8105eaa:	4910      	ldr	r1, [pc, #64]	; (8105eec <HAL_RCC_GetHCLKFreq+0x58>)
 8105eac:	5ccb      	ldrb	r3, [r1, r3]
 8105eae:	f003 031f 	and.w	r3, r3, #31
 8105eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8105eb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105eb8:	4b0b      	ldr	r3, [pc, #44]	; (8105ee8 <HAL_RCC_GetHCLKFreq+0x54>)
 8105eba:	699b      	ldr	r3, [r3, #24]
 8105ebc:	f003 030f 	and.w	r3, r3, #15
 8105ec0:	4a0a      	ldr	r2, [pc, #40]	; (8105eec <HAL_RCC_GetHCLKFreq+0x58>)
 8105ec2:	5cd3      	ldrb	r3, [r2, r3]
 8105ec4:	f003 031f 	and.w	r3, r3, #31
 8105ec8:	687a      	ldr	r2, [r7, #4]
 8105eca:	fa22 f303 	lsr.w	r3, r2, r3
 8105ece:	4a08      	ldr	r2, [pc, #32]	; (8105ef0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105ed0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105ed2:	4b07      	ldr	r3, [pc, #28]	; (8105ef0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105ed4:	681b      	ldr	r3, [r3, #0]
 8105ed6:	4a07      	ldr	r2, [pc, #28]	; (8105ef4 <HAL_RCC_GetHCLKFreq+0x60>)
 8105ed8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105eda:	4b05      	ldr	r3, [pc, #20]	; (8105ef0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105edc:	681b      	ldr	r3, [r3, #0]
}
 8105ede:	4618      	mov	r0, r3
 8105ee0:	3708      	adds	r7, #8
 8105ee2:	46bd      	mov	sp, r7
 8105ee4:	bd80      	pop	{r7, pc}
 8105ee6:	bf00      	nop
 8105ee8:	58024400 	.word	0x58024400
 8105eec:	08112c74 	.word	0x08112c74
 8105ef0:	10000004 	.word	0x10000004
 8105ef4:	10000000 	.word	0x10000000

08105ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105ef8:	b580      	push	{r7, lr}
 8105efa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105efc:	f7ff ffca 	bl	8105e94 <HAL_RCC_GetHCLKFreq>
 8105f00:	4602      	mov	r2, r0
 8105f02:	4b06      	ldr	r3, [pc, #24]	; (8105f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8105f04:	69db      	ldr	r3, [r3, #28]
 8105f06:	091b      	lsrs	r3, r3, #4
 8105f08:	f003 0307 	and.w	r3, r3, #7
 8105f0c:	4904      	ldr	r1, [pc, #16]	; (8105f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8105f0e:	5ccb      	ldrb	r3, [r1, r3]
 8105f10:	f003 031f 	and.w	r3, r3, #31
 8105f14:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105f18:	4618      	mov	r0, r3
 8105f1a:	bd80      	pop	{r7, pc}
 8105f1c:	58024400 	.word	0x58024400
 8105f20:	08112c74 	.word	0x08112c74

08105f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105f24:	b580      	push	{r7, lr}
 8105f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105f28:	f7ff ffb4 	bl	8105e94 <HAL_RCC_GetHCLKFreq>
 8105f2c:	4602      	mov	r2, r0
 8105f2e:	4b06      	ldr	r3, [pc, #24]	; (8105f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8105f30:	69db      	ldr	r3, [r3, #28]
 8105f32:	0a1b      	lsrs	r3, r3, #8
 8105f34:	f003 0307 	and.w	r3, r3, #7
 8105f38:	4904      	ldr	r1, [pc, #16]	; (8105f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8105f3a:	5ccb      	ldrb	r3, [r1, r3]
 8105f3c:	f003 031f 	and.w	r3, r3, #31
 8105f40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105f44:	4618      	mov	r0, r3
 8105f46:	bd80      	pop	{r7, pc}
 8105f48:	58024400 	.word	0x58024400
 8105f4c:	08112c74 	.word	0x08112c74

08105f50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8105f50:	b480      	push	{r7}
 8105f52:	b083      	sub	sp, #12
 8105f54:	af00      	add	r7, sp, #0
 8105f56:	6078      	str	r0, [r7, #4]
 8105f58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8105f5a:	687b      	ldr	r3, [r7, #4]
 8105f5c:	223f      	movs	r2, #63	; 0x3f
 8105f5e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8105f60:	4b1a      	ldr	r3, [pc, #104]	; (8105fcc <HAL_RCC_GetClockConfig+0x7c>)
 8105f62:	691b      	ldr	r3, [r3, #16]
 8105f64:	f003 0207 	and.w	r2, r3, #7
 8105f68:	687b      	ldr	r3, [r7, #4]
 8105f6a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8105f6c:	4b17      	ldr	r3, [pc, #92]	; (8105fcc <HAL_RCC_GetClockConfig+0x7c>)
 8105f6e:	699b      	ldr	r3, [r3, #24]
 8105f70:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8105f74:	687b      	ldr	r3, [r7, #4]
 8105f76:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8105f78:	4b14      	ldr	r3, [pc, #80]	; (8105fcc <HAL_RCC_GetClockConfig+0x7c>)
 8105f7a:	699b      	ldr	r3, [r3, #24]
 8105f7c:	f003 020f 	and.w	r2, r3, #15
 8105f80:	687b      	ldr	r3, [r7, #4]
 8105f82:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8105f84:	4b11      	ldr	r3, [pc, #68]	; (8105fcc <HAL_RCC_GetClockConfig+0x7c>)
 8105f86:	699b      	ldr	r3, [r3, #24]
 8105f88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8105f90:	4b0e      	ldr	r3, [pc, #56]	; (8105fcc <HAL_RCC_GetClockConfig+0x7c>)
 8105f92:	69db      	ldr	r3, [r3, #28]
 8105f94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8105f9c:	4b0b      	ldr	r3, [pc, #44]	; (8105fcc <HAL_RCC_GetClockConfig+0x7c>)
 8105f9e:	69db      	ldr	r3, [r3, #28]
 8105fa0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8105fa4:	687b      	ldr	r3, [r7, #4]
 8105fa6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8105fa8:	4b08      	ldr	r3, [pc, #32]	; (8105fcc <HAL_RCC_GetClockConfig+0x7c>)
 8105faa:	6a1b      	ldr	r3, [r3, #32]
 8105fac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8105fb4:	4b06      	ldr	r3, [pc, #24]	; (8105fd0 <HAL_RCC_GetClockConfig+0x80>)
 8105fb6:	681b      	ldr	r3, [r3, #0]
 8105fb8:	f003 020f 	and.w	r2, r3, #15
 8105fbc:	683b      	ldr	r3, [r7, #0]
 8105fbe:	601a      	str	r2, [r3, #0]
}
 8105fc0:	bf00      	nop
 8105fc2:	370c      	adds	r7, #12
 8105fc4:	46bd      	mov	sp, r7
 8105fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fca:	4770      	bx	lr
 8105fcc:	58024400 	.word	0x58024400
 8105fd0:	52002000 	.word	0x52002000

08105fd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105fd4:	b580      	push	{r7, lr}
 8105fd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105fd8:	f7ff ff5c 	bl	8105e94 <HAL_RCC_GetHCLKFreq>
 8105fdc:	4602      	mov	r2, r0
 8105fde:	4b06      	ldr	r3, [pc, #24]	; (8105ff8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105fe0:	6a1b      	ldr	r3, [r3, #32]
 8105fe2:	091b      	lsrs	r3, r3, #4
 8105fe4:	f003 0307 	and.w	r3, r3, #7
 8105fe8:	4904      	ldr	r1, [pc, #16]	; (8105ffc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8105fea:	5ccb      	ldrb	r3, [r1, r3]
 8105fec:	f003 031f 	and.w	r3, r3, #31
 8105ff0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105ff4:	4618      	mov	r0, r3
 8105ff6:	bd80      	pop	{r7, pc}
 8105ff8:	58024400 	.word	0x58024400
 8105ffc:	08112c74 	.word	0x08112c74

08106000 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106000:	b480      	push	{r7}
 8106002:	b089      	sub	sp, #36	; 0x24
 8106004:	af00      	add	r7, sp, #0
 8106006:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106008:	4ba1      	ldr	r3, [pc, #644]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810600c:	f003 0303 	and.w	r3, r3, #3
 8106010:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8106012:	4b9f      	ldr	r3, [pc, #636]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106016:	0b1b      	lsrs	r3, r3, #12
 8106018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810601c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810601e:	4b9c      	ldr	r3, [pc, #624]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106022:	091b      	lsrs	r3, r3, #4
 8106024:	f003 0301 	and.w	r3, r3, #1
 8106028:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810602a:	4b99      	ldr	r3, [pc, #612]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810602c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810602e:	08db      	lsrs	r3, r3, #3
 8106030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106034:	693a      	ldr	r2, [r7, #16]
 8106036:	fb02 f303 	mul.w	r3, r2, r3
 810603a:	ee07 3a90 	vmov	s15, r3
 810603e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106042:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8106046:	697b      	ldr	r3, [r7, #20]
 8106048:	2b00      	cmp	r3, #0
 810604a:	f000 8111 	beq.w	8106270 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810604e:	69bb      	ldr	r3, [r7, #24]
 8106050:	2b02      	cmp	r3, #2
 8106052:	f000 8083 	beq.w	810615c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8106056:	69bb      	ldr	r3, [r7, #24]
 8106058:	2b02      	cmp	r3, #2
 810605a:	f200 80a1 	bhi.w	81061a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810605e:	69bb      	ldr	r3, [r7, #24]
 8106060:	2b00      	cmp	r3, #0
 8106062:	d003      	beq.n	810606c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106064:	69bb      	ldr	r3, [r7, #24]
 8106066:	2b01      	cmp	r3, #1
 8106068:	d056      	beq.n	8106118 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810606a:	e099      	b.n	81061a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810606c:	4b88      	ldr	r3, [pc, #544]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810606e:	681b      	ldr	r3, [r3, #0]
 8106070:	f003 0320 	and.w	r3, r3, #32
 8106074:	2b00      	cmp	r3, #0
 8106076:	d02d      	beq.n	81060d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106078:	4b85      	ldr	r3, [pc, #532]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810607a:	681b      	ldr	r3, [r3, #0]
 810607c:	08db      	lsrs	r3, r3, #3
 810607e:	f003 0303 	and.w	r3, r3, #3
 8106082:	4a84      	ldr	r2, [pc, #528]	; (8106294 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8106084:	fa22 f303 	lsr.w	r3, r2, r3
 8106088:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810608a:	68bb      	ldr	r3, [r7, #8]
 810608c:	ee07 3a90 	vmov	s15, r3
 8106090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106094:	697b      	ldr	r3, [r7, #20]
 8106096:	ee07 3a90 	vmov	s15, r3
 810609a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810609e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060a2:	4b7b      	ldr	r3, [pc, #492]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81060a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060aa:	ee07 3a90 	vmov	s15, r3
 81060ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81060b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81060ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81060c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81060c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81060ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81060d2:	e087      	b.n	81061e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81060d4:	697b      	ldr	r3, [r7, #20]
 81060d6:	ee07 3a90 	vmov	s15, r3
 81060da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810629c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81060e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060e6:	4b6a      	ldr	r3, [pc, #424]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81060ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060ee:	ee07 3a90 	vmov	s15, r3
 81060f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81060fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81060fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810610a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810610e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106116:	e065      	b.n	81061e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106118:	697b      	ldr	r3, [r7, #20]
 810611a:	ee07 3a90 	vmov	s15, r3
 810611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106122:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810612a:	4b59      	ldr	r3, [pc, #356]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810612e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106132:	ee07 3a90 	vmov	s15, r3
 8106136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810613a:	ed97 6a03 	vldr	s12, [r7, #12]
 810613e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810614a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810614e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810615a:	e043      	b.n	81061e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810615c:	697b      	ldr	r3, [r7, #20]
 810615e:	ee07 3a90 	vmov	s15, r3
 8106162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106166:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810616a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810616e:	4b48      	ldr	r3, [pc, #288]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106176:	ee07 3a90 	vmov	s15, r3
 810617a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810617e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106182:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810618a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810618e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106196:	ee67 7a27 	vmul.f32	s15, s14, s15
 810619a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810619e:	e021      	b.n	81061e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81061a0:	697b      	ldr	r3, [r7, #20]
 81061a2:	ee07 3a90 	vmov	s15, r3
 81061a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81061ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81061b2:	4b37      	ldr	r3, [pc, #220]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81061b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81061ba:	ee07 3a90 	vmov	s15, r3
 81061be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81061c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81061c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81061ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81061ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81061d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81061d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81061da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81061de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81061e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81061e4:	4b2a      	ldr	r3, [pc, #168]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81061e8:	0a5b      	lsrs	r3, r3, #9
 81061ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81061ee:	ee07 3a90 	vmov	s15, r3
 81061f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81061fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 81061fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8106202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810620a:	ee17 2a90 	vmov	r2, s15
 810620e:	687b      	ldr	r3, [r7, #4]
 8106210:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8106212:	4b1f      	ldr	r3, [pc, #124]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106216:	0c1b      	lsrs	r3, r3, #16
 8106218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810621c:	ee07 3a90 	vmov	s15, r3
 8106220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106228:	ee37 7a87 	vadd.f32	s14, s15, s14
 810622c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106238:	ee17 2a90 	vmov	r2, s15
 810623c:	687b      	ldr	r3, [r7, #4]
 810623e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8106240:	4b13      	ldr	r3, [pc, #76]	; (8106290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106244:	0e1b      	lsrs	r3, r3, #24
 8106246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810624a:	ee07 3a90 	vmov	s15, r3
 810624e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106256:	ee37 7a87 	vadd.f32	s14, s15, s14
 810625a:	edd7 6a07 	vldr	s13, [r7, #28]
 810625e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106266:	ee17 2a90 	vmov	r2, s15
 810626a:	687b      	ldr	r3, [r7, #4]
 810626c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810626e:	e008      	b.n	8106282 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	2200      	movs	r2, #0
 8106274:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8106276:	687b      	ldr	r3, [r7, #4]
 8106278:	2200      	movs	r2, #0
 810627a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810627c:	687b      	ldr	r3, [r7, #4]
 810627e:	2200      	movs	r2, #0
 8106280:	609a      	str	r2, [r3, #8]
}
 8106282:	bf00      	nop
 8106284:	3724      	adds	r7, #36	; 0x24
 8106286:	46bd      	mov	sp, r7
 8106288:	f85d 7b04 	ldr.w	r7, [sp], #4
 810628c:	4770      	bx	lr
 810628e:	bf00      	nop
 8106290:	58024400 	.word	0x58024400
 8106294:	03d09000 	.word	0x03d09000
 8106298:	46000000 	.word	0x46000000
 810629c:	4c742400 	.word	0x4c742400
 81062a0:	4a742400 	.word	0x4a742400
 81062a4:	4bbebc20 	.word	0x4bbebc20

081062a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81062a8:	b480      	push	{r7}
 81062aa:	b089      	sub	sp, #36	; 0x24
 81062ac:	af00      	add	r7, sp, #0
 81062ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81062b0:	4ba1      	ldr	r3, [pc, #644]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81062b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81062b4:	f003 0303 	and.w	r3, r3, #3
 81062b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81062ba:	4b9f      	ldr	r3, [pc, #636]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81062bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81062be:	0d1b      	lsrs	r3, r3, #20
 81062c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81062c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81062c6:	4b9c      	ldr	r3, [pc, #624]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062ca:	0a1b      	lsrs	r3, r3, #8
 81062cc:	f003 0301 	and.w	r3, r3, #1
 81062d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81062d2:	4b99      	ldr	r3, [pc, #612]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81062d6:	08db      	lsrs	r3, r3, #3
 81062d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81062dc:	693a      	ldr	r2, [r7, #16]
 81062de:	fb02 f303 	mul.w	r3, r2, r3
 81062e2:	ee07 3a90 	vmov	s15, r3
 81062e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81062ee:	697b      	ldr	r3, [r7, #20]
 81062f0:	2b00      	cmp	r3, #0
 81062f2:	f000 8111 	beq.w	8106518 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81062f6:	69bb      	ldr	r3, [r7, #24]
 81062f8:	2b02      	cmp	r3, #2
 81062fa:	f000 8083 	beq.w	8106404 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81062fe:	69bb      	ldr	r3, [r7, #24]
 8106300:	2b02      	cmp	r3, #2
 8106302:	f200 80a1 	bhi.w	8106448 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8106306:	69bb      	ldr	r3, [r7, #24]
 8106308:	2b00      	cmp	r3, #0
 810630a:	d003      	beq.n	8106314 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810630c:	69bb      	ldr	r3, [r7, #24]
 810630e:	2b01      	cmp	r3, #1
 8106310:	d056      	beq.n	81063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106312:	e099      	b.n	8106448 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106314:	4b88      	ldr	r3, [pc, #544]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106316:	681b      	ldr	r3, [r3, #0]
 8106318:	f003 0320 	and.w	r3, r3, #32
 810631c:	2b00      	cmp	r3, #0
 810631e:	d02d      	beq.n	810637c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106320:	4b85      	ldr	r3, [pc, #532]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106322:	681b      	ldr	r3, [r3, #0]
 8106324:	08db      	lsrs	r3, r3, #3
 8106326:	f003 0303 	and.w	r3, r3, #3
 810632a:	4a84      	ldr	r2, [pc, #528]	; (810653c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810632c:	fa22 f303 	lsr.w	r3, r2, r3
 8106330:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106332:	68bb      	ldr	r3, [r7, #8]
 8106334:	ee07 3a90 	vmov	s15, r3
 8106338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810633c:	697b      	ldr	r3, [r7, #20]
 810633e:	ee07 3a90 	vmov	s15, r3
 8106342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810634a:	4b7b      	ldr	r3, [pc, #492]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810634e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106352:	ee07 3a90 	vmov	s15, r3
 8106356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810635a:	ed97 6a03 	vldr	s12, [r7, #12]
 810635e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810636a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810636e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106376:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810637a:	e087      	b.n	810648c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810637c:	697b      	ldr	r3, [r7, #20]
 810637e:	ee07 3a90 	vmov	s15, r3
 8106382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106386:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106544 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810638a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810638e:	4b6a      	ldr	r3, [pc, #424]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106396:	ee07 3a90 	vmov	s15, r3
 810639a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810639e:	ed97 6a03 	vldr	s12, [r7, #12]
 81063a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81063a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81063b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81063be:	e065      	b.n	810648c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81063c0:	697b      	ldr	r3, [r7, #20]
 81063c2:	ee07 3a90 	vmov	s15, r3
 81063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81063ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81063d2:	4b59      	ldr	r3, [pc, #356]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81063d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063da:	ee07 3a90 	vmov	s15, r3
 81063de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81063e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81063ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81063f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106402:	e043      	b.n	810648c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106404:	697b      	ldr	r3, [r7, #20]
 8106406:	ee07 3a90 	vmov	s15, r3
 810640a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810640e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810654c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106416:	4b48      	ldr	r3, [pc, #288]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810641e:	ee07 3a90 	vmov	s15, r3
 8106422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106426:	ed97 6a03 	vldr	s12, [r7, #12]
 810642a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810642e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810643a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810643e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106442:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106446:	e021      	b.n	810648c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106448:	697b      	ldr	r3, [r7, #20]
 810644a:	ee07 3a90 	vmov	s15, r3
 810644e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106452:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810645a:	4b37      	ldr	r3, [pc, #220]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810645e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106462:	ee07 3a90 	vmov	s15, r3
 8106466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810646a:	ed97 6a03 	vldr	s12, [r7, #12]
 810646e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810647a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810647e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106486:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810648a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810648c:	4b2a      	ldr	r3, [pc, #168]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106490:	0a5b      	lsrs	r3, r3, #9
 8106492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106496:	ee07 3a90 	vmov	s15, r3
 810649a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810649e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81064a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81064a6:	edd7 6a07 	vldr	s13, [r7, #28]
 81064aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81064ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81064b2:	ee17 2a90 	vmov	r2, s15
 81064b6:	687b      	ldr	r3, [r7, #4]
 81064b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81064ba:	4b1f      	ldr	r3, [pc, #124]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81064be:	0c1b      	lsrs	r3, r3, #16
 81064c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81064c4:	ee07 3a90 	vmov	s15, r3
 81064c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81064d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81064d4:	edd7 6a07 	vldr	s13, [r7, #28]
 81064d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81064dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81064e0:	ee17 2a90 	vmov	r2, s15
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81064e8:	4b13      	ldr	r3, [pc, #76]	; (8106538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81064ec:	0e1b      	lsrs	r3, r3, #24
 81064ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81064f2:	ee07 3a90 	vmov	s15, r3
 81064f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81064fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106502:	edd7 6a07 	vldr	s13, [r7, #28]
 8106506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810650a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810650e:	ee17 2a90 	vmov	r2, s15
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106516:	e008      	b.n	810652a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106518:	687b      	ldr	r3, [r7, #4]
 810651a:	2200      	movs	r2, #0
 810651c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810651e:	687b      	ldr	r3, [r7, #4]
 8106520:	2200      	movs	r2, #0
 8106522:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106524:	687b      	ldr	r3, [r7, #4]
 8106526:	2200      	movs	r2, #0
 8106528:	609a      	str	r2, [r3, #8]
}
 810652a:	bf00      	nop
 810652c:	3724      	adds	r7, #36	; 0x24
 810652e:	46bd      	mov	sp, r7
 8106530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106534:	4770      	bx	lr
 8106536:	bf00      	nop
 8106538:	58024400 	.word	0x58024400
 810653c:	03d09000 	.word	0x03d09000
 8106540:	46000000 	.word	0x46000000
 8106544:	4c742400 	.word	0x4c742400
 8106548:	4a742400 	.word	0x4a742400
 810654c:	4bbebc20 	.word	0x4bbebc20

08106550 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8106550:	b580      	push	{r7, lr}
 8106552:	b084      	sub	sp, #16
 8106554:	af00      	add	r7, sp, #0
 8106556:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8106558:	2300      	movs	r3, #0
 810655a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810655c:	687b      	ldr	r3, [r7, #4]
 810655e:	2b00      	cmp	r3, #0
 8106560:	d101      	bne.n	8106566 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8106562:	2301      	movs	r3, #1
 8106564:	e0e2      	b.n	810672c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8106566:	687b      	ldr	r3, [r7, #4]
 8106568:	2200      	movs	r2, #0
 810656a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810656c:	687b      	ldr	r3, [r7, #4]
 810656e:	681b      	ldr	r3, [r3, #0]
 8106570:	4a70      	ldr	r2, [pc, #448]	; (8106734 <HAL_SPI_Init+0x1e4>)
 8106572:	4293      	cmp	r3, r2
 8106574:	d00f      	beq.n	8106596 <HAL_SPI_Init+0x46>
 8106576:	687b      	ldr	r3, [r7, #4]
 8106578:	681b      	ldr	r3, [r3, #0]
 810657a:	4a6f      	ldr	r2, [pc, #444]	; (8106738 <HAL_SPI_Init+0x1e8>)
 810657c:	4293      	cmp	r3, r2
 810657e:	d00a      	beq.n	8106596 <HAL_SPI_Init+0x46>
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	681b      	ldr	r3, [r3, #0]
 8106584:	4a6d      	ldr	r2, [pc, #436]	; (810673c <HAL_SPI_Init+0x1ec>)
 8106586:	4293      	cmp	r3, r2
 8106588:	d005      	beq.n	8106596 <HAL_SPI_Init+0x46>
 810658a:	687b      	ldr	r3, [r7, #4]
 810658c:	68db      	ldr	r3, [r3, #12]
 810658e:	2b0f      	cmp	r3, #15
 8106590:	d901      	bls.n	8106596 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8106592:	2301      	movs	r3, #1
 8106594:	e0ca      	b.n	810672c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8106596:	6878      	ldr	r0, [r7, #4]
 8106598:	f000 fb94 	bl	8106cc4 <SPI_GetPacketSize>
 810659c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810659e:	687b      	ldr	r3, [r7, #4]
 81065a0:	681b      	ldr	r3, [r3, #0]
 81065a2:	4a64      	ldr	r2, [pc, #400]	; (8106734 <HAL_SPI_Init+0x1e4>)
 81065a4:	4293      	cmp	r3, r2
 81065a6:	d00c      	beq.n	81065c2 <HAL_SPI_Init+0x72>
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	681b      	ldr	r3, [r3, #0]
 81065ac:	4a62      	ldr	r2, [pc, #392]	; (8106738 <HAL_SPI_Init+0x1e8>)
 81065ae:	4293      	cmp	r3, r2
 81065b0:	d007      	beq.n	81065c2 <HAL_SPI_Init+0x72>
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	681b      	ldr	r3, [r3, #0]
 81065b6:	4a61      	ldr	r2, [pc, #388]	; (810673c <HAL_SPI_Init+0x1ec>)
 81065b8:	4293      	cmp	r3, r2
 81065ba:	d002      	beq.n	81065c2 <HAL_SPI_Init+0x72>
 81065bc:	68bb      	ldr	r3, [r7, #8]
 81065be:	2b08      	cmp	r3, #8
 81065c0:	d811      	bhi.n	81065e6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81065c2:	687b      	ldr	r3, [r7, #4]
 81065c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81065c6:	4a5b      	ldr	r2, [pc, #364]	; (8106734 <HAL_SPI_Init+0x1e4>)
 81065c8:	4293      	cmp	r3, r2
 81065ca:	d009      	beq.n	81065e0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81065cc:	687b      	ldr	r3, [r7, #4]
 81065ce:	681b      	ldr	r3, [r3, #0]
 81065d0:	4a59      	ldr	r2, [pc, #356]	; (8106738 <HAL_SPI_Init+0x1e8>)
 81065d2:	4293      	cmp	r3, r2
 81065d4:	d004      	beq.n	81065e0 <HAL_SPI_Init+0x90>
 81065d6:	687b      	ldr	r3, [r7, #4]
 81065d8:	681b      	ldr	r3, [r3, #0]
 81065da:	4a58      	ldr	r2, [pc, #352]	; (810673c <HAL_SPI_Init+0x1ec>)
 81065dc:	4293      	cmp	r3, r2
 81065de:	d104      	bne.n	81065ea <HAL_SPI_Init+0x9a>
 81065e0:	68bb      	ldr	r3, [r7, #8]
 81065e2:	2b10      	cmp	r3, #16
 81065e4:	d901      	bls.n	81065ea <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 81065e6:	2301      	movs	r3, #1
 81065e8:	e0a0      	b.n	810672c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81065ea:	687b      	ldr	r3, [r7, #4]
 81065ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81065f0:	b2db      	uxtb	r3, r3
 81065f2:	2b00      	cmp	r3, #0
 81065f4:	d106      	bne.n	8106604 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	2200      	movs	r2, #0
 81065fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81065fe:	6878      	ldr	r0, [r7, #4]
 8106600:	f7fb f9ae 	bl	8101960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8106604:	687b      	ldr	r3, [r7, #4]
 8106606:	2202      	movs	r2, #2
 8106608:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810660c:	687b      	ldr	r3, [r7, #4]
 810660e:	681b      	ldr	r3, [r3, #0]
 8106610:	681a      	ldr	r2, [r3, #0]
 8106612:	687b      	ldr	r3, [r7, #4]
 8106614:	681b      	ldr	r3, [r3, #0]
 8106616:	f022 0201 	bic.w	r2, r2, #1
 810661a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 810661c:	687b      	ldr	r3, [r7, #4]
 810661e:	699b      	ldr	r3, [r3, #24]
 8106620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106624:	d110      	bne.n	8106648 <HAL_SPI_Init+0xf8>
 8106626:	687b      	ldr	r3, [r7, #4]
 8106628:	685b      	ldr	r3, [r3, #4]
 810662a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810662e:	d10b      	bne.n	8106648 <HAL_SPI_Init+0xf8>
 8106630:	687b      	ldr	r3, [r7, #4]
 8106632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106634:	2b00      	cmp	r3, #0
 8106636:	d107      	bne.n	8106648 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8106638:	687b      	ldr	r3, [r7, #4]
 810663a:	681b      	ldr	r3, [r3, #0]
 810663c:	681a      	ldr	r2, [r3, #0]
 810663e:	687b      	ldr	r3, [r7, #4]
 8106640:	681b      	ldr	r3, [r3, #0]
 8106642:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8106646:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8106648:	687b      	ldr	r3, [r7, #4]
 810664a:	69da      	ldr	r2, [r3, #28]
 810664c:	687b      	ldr	r3, [r7, #4]
 810664e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106650:	431a      	orrs	r2, r3
 8106652:	68fb      	ldr	r3, [r7, #12]
 8106654:	431a      	orrs	r2, r3
 8106656:	687b      	ldr	r3, [r7, #4]
 8106658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810665a:	ea42 0103 	orr.w	r1, r2, r3
 810665e:	687b      	ldr	r3, [r7, #4]
 8106660:	68da      	ldr	r2, [r3, #12]
 8106662:	687b      	ldr	r3, [r7, #4]
 8106664:	681b      	ldr	r3, [r3, #0]
 8106666:	430a      	orrs	r2, r1
 8106668:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810666a:	687b      	ldr	r3, [r7, #4]
 810666c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810666e:	687b      	ldr	r3, [r7, #4]
 8106670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106672:	431a      	orrs	r2, r3
 8106674:	687b      	ldr	r3, [r7, #4]
 8106676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106678:	431a      	orrs	r2, r3
 810667a:	687b      	ldr	r3, [r7, #4]
 810667c:	699b      	ldr	r3, [r3, #24]
 810667e:	431a      	orrs	r2, r3
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	691b      	ldr	r3, [r3, #16]
 8106684:	431a      	orrs	r2, r3
 8106686:	687b      	ldr	r3, [r7, #4]
 8106688:	695b      	ldr	r3, [r3, #20]
 810668a:	431a      	orrs	r2, r3
 810668c:	687b      	ldr	r3, [r7, #4]
 810668e:	6a1b      	ldr	r3, [r3, #32]
 8106690:	431a      	orrs	r2, r3
 8106692:	687b      	ldr	r3, [r7, #4]
 8106694:	685b      	ldr	r3, [r3, #4]
 8106696:	431a      	orrs	r2, r3
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810669c:	431a      	orrs	r2, r3
 810669e:	687b      	ldr	r3, [r7, #4]
 81066a0:	689b      	ldr	r3, [r3, #8]
 81066a2:	431a      	orrs	r2, r3
 81066a4:	687b      	ldr	r3, [r7, #4]
 81066a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81066a8:	ea42 0103 	orr.w	r1, r2, r3
 81066ac:	687b      	ldr	r3, [r7, #4]
 81066ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81066b0:	687b      	ldr	r3, [r7, #4]
 81066b2:	681b      	ldr	r3, [r3, #0]
 81066b4:	430a      	orrs	r2, r1
 81066b6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81066b8:	687b      	ldr	r3, [r7, #4]
 81066ba:	685b      	ldr	r3, [r3, #4]
 81066bc:	2b00      	cmp	r3, #0
 81066be:	d113      	bne.n	81066e8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	681b      	ldr	r3, [r3, #0]
 81066c4:	689b      	ldr	r3, [r3, #8]
 81066c6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 81066ca:	687b      	ldr	r3, [r7, #4]
 81066cc:	681b      	ldr	r3, [r3, #0]
 81066ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81066d2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81066d4:	687b      	ldr	r3, [r7, #4]
 81066d6:	681b      	ldr	r3, [r3, #0]
 81066d8:	689b      	ldr	r3, [r3, #8]
 81066da:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	681b      	ldr	r3, [r3, #0]
 81066e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 81066e6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81066e8:	687b      	ldr	r3, [r7, #4]
 81066ea:	681b      	ldr	r3, [r3, #0]
 81066ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81066ee:	687b      	ldr	r3, [r7, #4]
 81066f0:	681b      	ldr	r3, [r3, #0]
 81066f2:	f022 0201 	bic.w	r2, r2, #1
 81066f6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81066f8:	687b      	ldr	r3, [r7, #4]
 81066fa:	685b      	ldr	r3, [r3, #4]
 81066fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8106700:	2b00      	cmp	r3, #0
 8106702:	d00a      	beq.n	810671a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8106704:	687b      	ldr	r3, [r7, #4]
 8106706:	681b      	ldr	r3, [r3, #0]
 8106708:	68db      	ldr	r3, [r3, #12]
 810670a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810670e:	687b      	ldr	r3, [r7, #4]
 8106710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106712:	687b      	ldr	r3, [r7, #4]
 8106714:	681b      	ldr	r3, [r3, #0]
 8106716:	430a      	orrs	r2, r1
 8106718:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	2200      	movs	r2, #0
 810671e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8106722:	687b      	ldr	r3, [r7, #4]
 8106724:	2201      	movs	r2, #1
 8106726:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810672a:	2300      	movs	r3, #0
}
 810672c:	4618      	mov	r0, r3
 810672e:	3710      	adds	r7, #16
 8106730:	46bd      	mov	sp, r7
 8106732:	bd80      	pop	{r7, pc}
 8106734:	40013000 	.word	0x40013000
 8106738:	40003800 	.word	0x40003800
 810673c:	40003c00 	.word	0x40003c00

08106740 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8106740:	b580      	push	{r7, lr}
 8106742:	b08a      	sub	sp, #40	; 0x28
 8106744:	af00      	add	r7, sp, #0
 8106746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	681b      	ldr	r3, [r3, #0]
 810674c:	691b      	ldr	r3, [r3, #16]
 810674e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8106750:	687b      	ldr	r3, [r7, #4]
 8106752:	681b      	ldr	r3, [r3, #0]
 8106754:	695b      	ldr	r3, [r3, #20]
 8106756:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8106758:	6a3a      	ldr	r2, [r7, #32]
 810675a:	69fb      	ldr	r3, [r7, #28]
 810675c:	4013      	ands	r3, r2
 810675e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8106760:	687b      	ldr	r3, [r7, #4]
 8106762:	681b      	ldr	r3, [r3, #0]
 8106764:	689b      	ldr	r3, [r3, #8]
 8106766:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8106768:	2300      	movs	r3, #0
 810676a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810676c:	687b      	ldr	r3, [r7, #4]
 810676e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106772:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8106774:	687b      	ldr	r3, [r7, #4]
 8106776:	681b      	ldr	r3, [r3, #0]
 8106778:	3330      	adds	r3, #48	; 0x30
 810677a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810677c:	69bb      	ldr	r3, [r7, #24]
 810677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106782:	2b00      	cmp	r3, #0
 8106784:	d113      	bne.n	81067ae <HAL_SPI_IRQHandler+0x6e>
 8106786:	69bb      	ldr	r3, [r7, #24]
 8106788:	f003 0320 	and.w	r3, r3, #32
 810678c:	2b00      	cmp	r3, #0
 810678e:	d10e      	bne.n	81067ae <HAL_SPI_IRQHandler+0x6e>
 8106790:	69bb      	ldr	r3, [r7, #24]
 8106792:	f003 0304 	and.w	r3, r3, #4
 8106796:	2b00      	cmp	r3, #0
 8106798:	d009      	beq.n	81067ae <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810679a:	687b      	ldr	r3, [r7, #4]
 810679c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810679e:	6878      	ldr	r0, [r7, #4]
 81067a0:	4798      	blx	r3
    hspi->RxISR(hspi);
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81067a6:	6878      	ldr	r0, [r7, #4]
 81067a8:	4798      	blx	r3
    handled = 1UL;
 81067aa:	2301      	movs	r3, #1
 81067ac:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 81067ae:	69bb      	ldr	r3, [r7, #24]
 81067b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81067b4:	2b00      	cmp	r3, #0
 81067b6:	d10f      	bne.n	81067d8 <HAL_SPI_IRQHandler+0x98>
 81067b8:	69bb      	ldr	r3, [r7, #24]
 81067ba:	f003 0301 	and.w	r3, r3, #1
 81067be:	2b00      	cmp	r3, #0
 81067c0:	d00a      	beq.n	81067d8 <HAL_SPI_IRQHandler+0x98>
 81067c2:	69bb      	ldr	r3, [r7, #24]
 81067c4:	f003 0304 	and.w	r3, r3, #4
 81067c8:	2b00      	cmp	r3, #0
 81067ca:	d105      	bne.n	81067d8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 81067cc:	687b      	ldr	r3, [r7, #4]
 81067ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81067d0:	6878      	ldr	r0, [r7, #4]
 81067d2:	4798      	blx	r3
    handled = 1UL;
 81067d4:	2301      	movs	r3, #1
 81067d6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 81067d8:	69bb      	ldr	r3, [r7, #24]
 81067da:	f003 0320 	and.w	r3, r3, #32
 81067de:	2b00      	cmp	r3, #0
 81067e0:	d10f      	bne.n	8106802 <HAL_SPI_IRQHandler+0xc2>
 81067e2:	69bb      	ldr	r3, [r7, #24]
 81067e4:	f003 0302 	and.w	r3, r3, #2
 81067e8:	2b00      	cmp	r3, #0
 81067ea:	d00a      	beq.n	8106802 <HAL_SPI_IRQHandler+0xc2>
 81067ec:	69bb      	ldr	r3, [r7, #24]
 81067ee:	f003 0304 	and.w	r3, r3, #4
 81067f2:	2b00      	cmp	r3, #0
 81067f4:	d105      	bne.n	8106802 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 81067f6:	687b      	ldr	r3, [r7, #4]
 81067f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81067fa:	6878      	ldr	r0, [r7, #4]
 81067fc:	4798      	blx	r3
    handled = 1UL;
 81067fe:	2301      	movs	r3, #1
 8106800:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8106802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106804:	2b00      	cmp	r3, #0
 8106806:	f040 8171 	bne.w	8106aec <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810680a:	69bb      	ldr	r3, [r7, #24]
 810680c:	f003 0308 	and.w	r3, r3, #8
 8106810:	2b00      	cmp	r3, #0
 8106812:	f000 80a0 	beq.w	8106956 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8106816:	687b      	ldr	r3, [r7, #4]
 8106818:	681b      	ldr	r3, [r3, #0]
 810681a:	699a      	ldr	r2, [r3, #24]
 810681c:	687b      	ldr	r3, [r7, #4]
 810681e:	681b      	ldr	r3, [r3, #0]
 8106820:	f042 0208 	orr.w	r2, r2, #8
 8106824:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	681b      	ldr	r3, [r3, #0]
 810682a:	699a      	ldr	r2, [r3, #24]
 810682c:	687b      	ldr	r3, [r7, #4]
 810682e:	681b      	ldr	r3, [r3, #0]
 8106830:	f042 0210 	orr.w	r2, r2, #16
 8106834:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	681b      	ldr	r3, [r3, #0]
 810683a:	699a      	ldr	r2, [r3, #24]
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	681b      	ldr	r3, [r3, #0]
 8106840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106844:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	681b      	ldr	r3, [r3, #0]
 810684a:	691a      	ldr	r2, [r3, #16]
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	681b      	ldr	r3, [r3, #0]
 8106850:	f022 0208 	bic.w	r2, r2, #8
 8106854:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8106856:	697b      	ldr	r3, [r7, #20]
 8106858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810685c:	2b00      	cmp	r3, #0
 810685e:	d00f      	beq.n	8106880 <HAL_SPI_IRQHandler+0x140>
 8106860:	7cfb      	ldrb	r3, [r7, #19]
 8106862:	2b04      	cmp	r3, #4
 8106864:	d004      	beq.n	8106870 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8106866:	687b      	ldr	r3, [r7, #4]
 8106868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810686a:	69db      	ldr	r3, [r3, #28]
 810686c:	2b00      	cmp	r3, #0
 810686e:	d007      	beq.n	8106880 <HAL_SPI_IRQHandler+0x140>
 8106870:	7cfb      	ldrb	r3, [r7, #19]
 8106872:	2b03      	cmp	r3, #3
 8106874:	d059      	beq.n	810692a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8106876:	687b      	ldr	r3, [r7, #4]
 8106878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810687a:	69db      	ldr	r3, [r3, #28]
 810687c:	2b00      	cmp	r3, #0
 810687e:	d154      	bne.n	810692a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8106880:	687b      	ldr	r3, [r7, #4]
 8106882:	681b      	ldr	r3, [r3, #0]
 8106884:	689b      	ldr	r3, [r3, #8]
 8106886:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810688a:	2b00      	cmp	r3, #0
 810688c:	d13d      	bne.n	810690a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810688e:	e036      	b.n	81068fe <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8106890:	687b      	ldr	r3, [r7, #4]
 8106892:	68db      	ldr	r3, [r3, #12]
 8106894:	2b0f      	cmp	r3, #15
 8106896:	d90b      	bls.n	81068b0 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	681a      	ldr	r2, [r3, #0]
 810689c:	687b      	ldr	r3, [r7, #4]
 810689e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81068a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81068a2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 81068a4:	687b      	ldr	r3, [r7, #4]
 81068a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81068a8:	1d1a      	adds	r2, r3, #4
 81068aa:	687b      	ldr	r3, [r7, #4]
 81068ac:	665a      	str	r2, [r3, #100]	; 0x64
 81068ae:	e01d      	b.n	81068ec <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81068b0:	687b      	ldr	r3, [r7, #4]
 81068b2:	68db      	ldr	r3, [r3, #12]
 81068b4:	2b07      	cmp	r3, #7
 81068b6:	d90b      	bls.n	81068d0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81068b8:	687b      	ldr	r3, [r7, #4]
 81068ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81068bc:	68fa      	ldr	r2, [r7, #12]
 81068be:	8812      	ldrh	r2, [r2, #0]
 81068c0:	b292      	uxth	r2, r2
 81068c2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81068c8:	1c9a      	adds	r2, r3, #2
 81068ca:	687b      	ldr	r3, [r7, #4]
 81068cc:	665a      	str	r2, [r3, #100]	; 0x64
 81068ce:	e00d      	b.n	81068ec <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81068d0:	687b      	ldr	r3, [r7, #4]
 81068d2:	681b      	ldr	r3, [r3, #0]
 81068d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81068dc:	7812      	ldrb	r2, [r2, #0]
 81068de:	b2d2      	uxtb	r2, r2
 81068e0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 81068e2:	687b      	ldr	r3, [r7, #4]
 81068e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81068e6:	1c5a      	adds	r2, r3, #1
 81068e8:	687b      	ldr	r3, [r7, #4]
 81068ea:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 81068ec:	687b      	ldr	r3, [r7, #4]
 81068ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81068f2:	b29b      	uxth	r3, r3
 81068f4:	3b01      	subs	r3, #1
 81068f6:	b29a      	uxth	r2, r3
 81068f8:	687b      	ldr	r3, [r7, #4]
 81068fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 81068fe:	687b      	ldr	r3, [r7, #4]
 8106900:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106904:	b29b      	uxth	r3, r3
 8106906:	2b00      	cmp	r3, #0
 8106908:	d1c2      	bne.n	8106890 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810690a:	6878      	ldr	r0, [r7, #4]
 810690c:	f000 f93a 	bl	8106b84 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8106910:	687b      	ldr	r3, [r7, #4]
 8106912:	2201      	movs	r2, #1
 8106914:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8106918:	687b      	ldr	r3, [r7, #4]
 810691a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810691e:	2b00      	cmp	r3, #0
 8106920:	d003      	beq.n	810692a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8106922:	6878      	ldr	r0, [r7, #4]
 8106924:	f000 f90a 	bl	8106b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8106928:	e0e5      	b.n	8106af6 <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810692a:	7cfb      	ldrb	r3, [r7, #19]
 810692c:	2b05      	cmp	r3, #5
 810692e:	d103      	bne.n	8106938 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8106930:	6878      	ldr	r0, [r7, #4]
 8106932:	f000 f8f9 	bl	8106b28 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8106936:	e0db      	b.n	8106af0 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8106938:	7cfb      	ldrb	r3, [r7, #19]
 810693a:	2b04      	cmp	r3, #4
 810693c:	d103      	bne.n	8106946 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810693e:	6878      	ldr	r0, [r7, #4]
 8106940:	f000 f8e8 	bl	8106b14 <HAL_SPI_RxCpltCallback>
    return;
 8106944:	e0d4      	b.n	8106af0 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8106946:	7cfb      	ldrb	r3, [r7, #19]
 8106948:	2b03      	cmp	r3, #3
 810694a:	f040 80d1 	bne.w	8106af0 <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810694e:	6878      	ldr	r0, [r7, #4]
 8106950:	f000 f8d6 	bl	8106b00 <HAL_SPI_TxCpltCallback>
    return;
 8106954:	e0cc      	b.n	8106af0 <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8106956:	69fb      	ldr	r3, [r7, #28]
 8106958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810695c:	2b00      	cmp	r3, #0
 810695e:	d00d      	beq.n	810697c <HAL_SPI_IRQHandler+0x23c>
 8106960:	6a3b      	ldr	r3, [r7, #32]
 8106962:	f003 0308 	and.w	r3, r3, #8
 8106966:	2b00      	cmp	r3, #0
 8106968:	d008      	beq.n	810697c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810696a:	687b      	ldr	r3, [r7, #4]
 810696c:	681b      	ldr	r3, [r3, #0]
 810696e:	699a      	ldr	r2, [r3, #24]
 8106970:	687b      	ldr	r3, [r7, #4]
 8106972:	681b      	ldr	r3, [r3, #0]
 8106974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106978:	619a      	str	r2, [r3, #24]

    return;
 810697a:	e0bc      	b.n	8106af6 <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810697c:	69bb      	ldr	r3, [r7, #24]
 810697e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8106982:	2b00      	cmp	r3, #0
 8106984:	f000 80b7 	beq.w	8106af6 <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8106988:	69bb      	ldr	r3, [r7, #24]
 810698a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810698e:	2b00      	cmp	r3, #0
 8106990:	d00f      	beq.n	81069b2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8106992:	687b      	ldr	r3, [r7, #4]
 8106994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106998:	f043 0204 	orr.w	r2, r3, #4
 810699c:	687b      	ldr	r3, [r7, #4]
 810699e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81069a2:	687b      	ldr	r3, [r7, #4]
 81069a4:	681b      	ldr	r3, [r3, #0]
 81069a6:	699a      	ldr	r2, [r3, #24]
 81069a8:	687b      	ldr	r3, [r7, #4]
 81069aa:	681b      	ldr	r3, [r3, #0]
 81069ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81069b0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 81069b2:	69bb      	ldr	r3, [r7, #24]
 81069b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81069b8:	2b00      	cmp	r3, #0
 81069ba:	d00f      	beq.n	81069dc <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 81069bc:	687b      	ldr	r3, [r7, #4]
 81069be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81069c2:	f043 0201 	orr.w	r2, r3, #1
 81069c6:	687b      	ldr	r3, [r7, #4]
 81069c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 81069cc:	687b      	ldr	r3, [r7, #4]
 81069ce:	681b      	ldr	r3, [r3, #0]
 81069d0:	699a      	ldr	r2, [r3, #24]
 81069d2:	687b      	ldr	r3, [r7, #4]
 81069d4:	681b      	ldr	r3, [r3, #0]
 81069d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81069da:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 81069dc:	69bb      	ldr	r3, [r7, #24]
 81069de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81069e2:	2b00      	cmp	r3, #0
 81069e4:	d00f      	beq.n	8106a06 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81069e6:	687b      	ldr	r3, [r7, #4]
 81069e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81069ec:	f043 0208 	orr.w	r2, r3, #8
 81069f0:	687b      	ldr	r3, [r7, #4]
 81069f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 81069f6:	687b      	ldr	r3, [r7, #4]
 81069f8:	681b      	ldr	r3, [r3, #0]
 81069fa:	699a      	ldr	r2, [r3, #24]
 81069fc:	687b      	ldr	r3, [r7, #4]
 81069fe:	681b      	ldr	r3, [r3, #0]
 8106a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106a04:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8106a06:	69bb      	ldr	r3, [r7, #24]
 8106a08:	f003 0320 	and.w	r3, r3, #32
 8106a0c:	2b00      	cmp	r3, #0
 8106a0e:	d00f      	beq.n	8106a30 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8106a10:	687b      	ldr	r3, [r7, #4]
 8106a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106a16:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8106a1a:	687b      	ldr	r3, [r7, #4]
 8106a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	699a      	ldr	r2, [r3, #24]
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	681b      	ldr	r3, [r3, #0]
 8106a2a:	f042 0220 	orr.w	r2, r2, #32
 8106a2e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106a36:	2b00      	cmp	r3, #0
 8106a38:	d05c      	beq.n	8106af4 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8106a3a:	687b      	ldr	r3, [r7, #4]
 8106a3c:	681b      	ldr	r3, [r3, #0]
 8106a3e:	681a      	ldr	r2, [r3, #0]
 8106a40:	687b      	ldr	r3, [r7, #4]
 8106a42:	681b      	ldr	r3, [r3, #0]
 8106a44:	f022 0201 	bic.w	r2, r2, #1
 8106a48:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8106a4a:	687b      	ldr	r3, [r7, #4]
 8106a4c:	681b      	ldr	r3, [r3, #0]
 8106a4e:	691b      	ldr	r3, [r3, #16]
 8106a50:	687a      	ldr	r2, [r7, #4]
 8106a52:	6812      	ldr	r2, [r2, #0]
 8106a54:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8106a58:	f023 0303 	bic.w	r3, r3, #3
 8106a5c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8106a5e:	697b      	ldr	r3, [r7, #20]
 8106a60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8106a64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8106a68:	d138      	bne.n	8106adc <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8106a6a:	687b      	ldr	r3, [r7, #4]
 8106a6c:	681b      	ldr	r3, [r3, #0]
 8106a6e:	689a      	ldr	r2, [r3, #8]
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	681b      	ldr	r3, [r3, #0]
 8106a74:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8106a78:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8106a7a:	687b      	ldr	r3, [r7, #4]
 8106a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106a7e:	2b00      	cmp	r3, #0
 8106a80:	d013      	beq.n	8106aaa <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8106a82:	687b      	ldr	r3, [r7, #4]
 8106a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106a86:	4a1d      	ldr	r2, [pc, #116]	; (8106afc <HAL_SPI_IRQHandler+0x3bc>)
 8106a88:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8106a8a:	687b      	ldr	r3, [r7, #4]
 8106a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106a8e:	4618      	mov	r0, r3
 8106a90:	f7fc fae0 	bl	8103054 <HAL_DMA_Abort_IT>
 8106a94:	4603      	mov	r3, r0
 8106a96:	2b00      	cmp	r3, #0
 8106a98:	d007      	beq.n	8106aaa <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8106a9a:	687b      	ldr	r3, [r7, #4]
 8106a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106aa0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8106aa4:	687b      	ldr	r3, [r7, #4]
 8106aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8106aaa:	687b      	ldr	r3, [r7, #4]
 8106aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106aae:	2b00      	cmp	r3, #0
 8106ab0:	d020      	beq.n	8106af4 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8106ab2:	687b      	ldr	r3, [r7, #4]
 8106ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106ab6:	4a11      	ldr	r2, [pc, #68]	; (8106afc <HAL_SPI_IRQHandler+0x3bc>)
 8106ab8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106abe:	4618      	mov	r0, r3
 8106ac0:	f7fc fac8 	bl	8103054 <HAL_DMA_Abort_IT>
 8106ac4:	4603      	mov	r3, r0
 8106ac6:	2b00      	cmp	r3, #0
 8106ac8:	d014      	beq.n	8106af4 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8106aca:	687b      	ldr	r3, [r7, #4]
 8106acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106ad0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8106ad4:	687b      	ldr	r3, [r7, #4]
 8106ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8106ada:	e00b      	b.n	8106af4 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 8106adc:	687b      	ldr	r3, [r7, #4]
 8106ade:	2201      	movs	r2, #1
 8106ae0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8106ae4:	6878      	ldr	r0, [r7, #4]
 8106ae6:	f000 f829 	bl	8106b3c <HAL_SPI_ErrorCallback>
    return;
 8106aea:	e003      	b.n	8106af4 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8106aec:	bf00      	nop
 8106aee:	e002      	b.n	8106af6 <HAL_SPI_IRQHandler+0x3b6>
    return;
 8106af0:	bf00      	nop
 8106af2:	e000      	b.n	8106af6 <HAL_SPI_IRQHandler+0x3b6>
    return;
 8106af4:	bf00      	nop
  }
}
 8106af6:	3728      	adds	r7, #40	; 0x28
 8106af8:	46bd      	mov	sp, r7
 8106afa:	bd80      	pop	{r7, pc}
 8106afc:	08106b51 	.word	0x08106b51

08106b00 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8106b00:	b480      	push	{r7}
 8106b02:	b083      	sub	sp, #12
 8106b04:	af00      	add	r7, sp, #0
 8106b06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8106b08:	bf00      	nop
 8106b0a:	370c      	adds	r7, #12
 8106b0c:	46bd      	mov	sp, r7
 8106b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b12:	4770      	bx	lr

08106b14 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8106b14:	b480      	push	{r7}
 8106b16:	b083      	sub	sp, #12
 8106b18:	af00      	add	r7, sp, #0
 8106b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8106b1c:	bf00      	nop
 8106b1e:	370c      	adds	r7, #12
 8106b20:	46bd      	mov	sp, r7
 8106b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b26:	4770      	bx	lr

08106b28 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8106b28:	b480      	push	{r7}
 8106b2a:	b083      	sub	sp, #12
 8106b2c:	af00      	add	r7, sp, #0
 8106b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8106b30:	bf00      	nop
 8106b32:	370c      	adds	r7, #12
 8106b34:	46bd      	mov	sp, r7
 8106b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b3a:	4770      	bx	lr

08106b3c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8106b3c:	b480      	push	{r7}
 8106b3e:	b083      	sub	sp, #12
 8106b40:	af00      	add	r7, sp, #0
 8106b42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8106b44:	bf00      	nop
 8106b46:	370c      	adds	r7, #12
 8106b48:	46bd      	mov	sp, r7
 8106b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b4e:	4770      	bx	lr

08106b50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8106b50:	b580      	push	{r7, lr}
 8106b52:	b084      	sub	sp, #16
 8106b54:	af00      	add	r7, sp, #0
 8106b56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8106b58:	687b      	ldr	r3, [r7, #4]
 8106b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106b5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8106b5e:	68fb      	ldr	r3, [r7, #12]
 8106b60:	2200      	movs	r2, #0
 8106b62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8106b66:	68fb      	ldr	r3, [r7, #12]
 8106b68:	2200      	movs	r2, #0
 8106b6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8106b6e:	68fb      	ldr	r3, [r7, #12]
 8106b70:	2201      	movs	r2, #1
 8106b72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8106b76:	68f8      	ldr	r0, [r7, #12]
 8106b78:	f7ff ffe0 	bl	8106b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8106b7c:	bf00      	nop
 8106b7e:	3710      	adds	r7, #16
 8106b80:	46bd      	mov	sp, r7
 8106b82:	bd80      	pop	{r7, pc}

08106b84 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8106b84:	b480      	push	{r7}
 8106b86:	b085      	sub	sp, #20
 8106b88:	af00      	add	r7, sp, #0
 8106b8a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8106b8c:	687b      	ldr	r3, [r7, #4]
 8106b8e:	681b      	ldr	r3, [r3, #0]
 8106b90:	695b      	ldr	r3, [r3, #20]
 8106b92:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8106b94:	687b      	ldr	r3, [r7, #4]
 8106b96:	681b      	ldr	r3, [r3, #0]
 8106b98:	699a      	ldr	r2, [r3, #24]
 8106b9a:	687b      	ldr	r3, [r7, #4]
 8106b9c:	681b      	ldr	r3, [r3, #0]
 8106b9e:	f042 0208 	orr.w	r2, r2, #8
 8106ba2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8106ba4:	687b      	ldr	r3, [r7, #4]
 8106ba6:	681b      	ldr	r3, [r3, #0]
 8106ba8:	699a      	ldr	r2, [r3, #24]
 8106baa:	687b      	ldr	r3, [r7, #4]
 8106bac:	681b      	ldr	r3, [r3, #0]
 8106bae:	f042 0210 	orr.w	r2, r2, #16
 8106bb2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8106bb4:	687b      	ldr	r3, [r7, #4]
 8106bb6:	681b      	ldr	r3, [r3, #0]
 8106bb8:	681a      	ldr	r2, [r3, #0]
 8106bba:	687b      	ldr	r3, [r7, #4]
 8106bbc:	681b      	ldr	r3, [r3, #0]
 8106bbe:	f022 0201 	bic.w	r2, r2, #1
 8106bc2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8106bc4:	687b      	ldr	r3, [r7, #4]
 8106bc6:	681b      	ldr	r3, [r3, #0]
 8106bc8:	691b      	ldr	r3, [r3, #16]
 8106bca:	687a      	ldr	r2, [r7, #4]
 8106bcc:	6812      	ldr	r2, [r2, #0]
 8106bce:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8106bd2:	f023 0303 	bic.w	r3, r3, #3
 8106bd6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8106bd8:	687b      	ldr	r3, [r7, #4]
 8106bda:	681b      	ldr	r3, [r3, #0]
 8106bdc:	689a      	ldr	r2, [r3, #8]
 8106bde:	687b      	ldr	r3, [r7, #4]
 8106be0:	681b      	ldr	r3, [r3, #0]
 8106be2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8106be6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106bee:	b2db      	uxtb	r3, r3
 8106bf0:	2b04      	cmp	r3, #4
 8106bf2:	d014      	beq.n	8106c1e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8106bf4:	68fb      	ldr	r3, [r7, #12]
 8106bf6:	f003 0320 	and.w	r3, r3, #32
 8106bfa:	2b00      	cmp	r3, #0
 8106bfc:	d00f      	beq.n	8106c1e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106c04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8106c08:	687b      	ldr	r3, [r7, #4]
 8106c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8106c0e:	687b      	ldr	r3, [r7, #4]
 8106c10:	681b      	ldr	r3, [r3, #0]
 8106c12:	699a      	ldr	r2, [r3, #24]
 8106c14:	687b      	ldr	r3, [r7, #4]
 8106c16:	681b      	ldr	r3, [r3, #0]
 8106c18:	f042 0220 	orr.w	r2, r2, #32
 8106c1c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8106c1e:	687b      	ldr	r3, [r7, #4]
 8106c20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106c24:	b2db      	uxtb	r3, r3
 8106c26:	2b03      	cmp	r3, #3
 8106c28:	d014      	beq.n	8106c54 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8106c2a:	68fb      	ldr	r3, [r7, #12]
 8106c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106c30:	2b00      	cmp	r3, #0
 8106c32:	d00f      	beq.n	8106c54 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8106c34:	687b      	ldr	r3, [r7, #4]
 8106c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106c3a:	f043 0204 	orr.w	r2, r3, #4
 8106c3e:	687b      	ldr	r3, [r7, #4]
 8106c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8106c44:	687b      	ldr	r3, [r7, #4]
 8106c46:	681b      	ldr	r3, [r3, #0]
 8106c48:	699a      	ldr	r2, [r3, #24]
 8106c4a:	687b      	ldr	r3, [r7, #4]
 8106c4c:	681b      	ldr	r3, [r3, #0]
 8106c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8106c52:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8106c54:	68fb      	ldr	r3, [r7, #12]
 8106c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8106c5a:	2b00      	cmp	r3, #0
 8106c5c:	d00f      	beq.n	8106c7e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8106c5e:	687b      	ldr	r3, [r7, #4]
 8106c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106c64:	f043 0201 	orr.w	r2, r3, #1
 8106c68:	687b      	ldr	r3, [r7, #4]
 8106c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8106c6e:	687b      	ldr	r3, [r7, #4]
 8106c70:	681b      	ldr	r3, [r3, #0]
 8106c72:	699a      	ldr	r2, [r3, #24]
 8106c74:	687b      	ldr	r3, [r7, #4]
 8106c76:	681b      	ldr	r3, [r3, #0]
 8106c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8106c7c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8106c7e:	68fb      	ldr	r3, [r7, #12]
 8106c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106c84:	2b00      	cmp	r3, #0
 8106c86:	d00f      	beq.n	8106ca8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8106c88:	687b      	ldr	r3, [r7, #4]
 8106c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106c8e:	f043 0208 	orr.w	r2, r3, #8
 8106c92:	687b      	ldr	r3, [r7, #4]
 8106c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8106c98:	687b      	ldr	r3, [r7, #4]
 8106c9a:	681b      	ldr	r3, [r3, #0]
 8106c9c:	699a      	ldr	r2, [r3, #24]
 8106c9e:	687b      	ldr	r3, [r7, #4]
 8106ca0:	681b      	ldr	r3, [r3, #0]
 8106ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106ca6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8106ca8:	687b      	ldr	r3, [r7, #4]
 8106caa:	2200      	movs	r2, #0
 8106cac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	2200      	movs	r2, #0
 8106cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8106cb8:	bf00      	nop
 8106cba:	3714      	adds	r7, #20
 8106cbc:	46bd      	mov	sp, r7
 8106cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cc2:	4770      	bx	lr

08106cc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8106cc4:	b480      	push	{r7}
 8106cc6:	b085      	sub	sp, #20
 8106cc8:	af00      	add	r7, sp, #0
 8106cca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106cd0:	095b      	lsrs	r3, r3, #5
 8106cd2:	3301      	adds	r3, #1
 8106cd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	68db      	ldr	r3, [r3, #12]
 8106cda:	3301      	adds	r3, #1
 8106cdc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8106cde:	68bb      	ldr	r3, [r7, #8]
 8106ce0:	3307      	adds	r3, #7
 8106ce2:	08db      	lsrs	r3, r3, #3
 8106ce4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8106ce6:	68bb      	ldr	r3, [r7, #8]
 8106ce8:	68fa      	ldr	r2, [r7, #12]
 8106cea:	fb02 f303 	mul.w	r3, r2, r3
}
 8106cee:	4618      	mov	r0, r3
 8106cf0:	3714      	adds	r7, #20
 8106cf2:	46bd      	mov	sp, r7
 8106cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cf8:	4770      	bx	lr

08106cfa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106cfa:	b580      	push	{r7, lr}
 8106cfc:	b082      	sub	sp, #8
 8106cfe:	af00      	add	r7, sp, #0
 8106d00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106d02:	687b      	ldr	r3, [r7, #4]
 8106d04:	2b00      	cmp	r3, #0
 8106d06:	d101      	bne.n	8106d0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106d08:	2301      	movs	r3, #1
 8106d0a:	e049      	b.n	8106da0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106d0c:	687b      	ldr	r3, [r7, #4]
 8106d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106d12:	b2db      	uxtb	r3, r3
 8106d14:	2b00      	cmp	r3, #0
 8106d16:	d106      	bne.n	8106d26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106d18:	687b      	ldr	r3, [r7, #4]
 8106d1a:	2200      	movs	r2, #0
 8106d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106d20:	6878      	ldr	r0, [r7, #4]
 8106d22:	f000 f841 	bl	8106da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	2202      	movs	r2, #2
 8106d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106d2e:	687b      	ldr	r3, [r7, #4]
 8106d30:	681a      	ldr	r2, [r3, #0]
 8106d32:	687b      	ldr	r3, [r7, #4]
 8106d34:	3304      	adds	r3, #4
 8106d36:	4619      	mov	r1, r3
 8106d38:	4610      	mov	r0, r2
 8106d3a:	f000 f9bd 	bl	81070b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106d3e:	687b      	ldr	r3, [r7, #4]
 8106d40:	2201      	movs	r2, #1
 8106d42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106d46:	687b      	ldr	r3, [r7, #4]
 8106d48:	2201      	movs	r2, #1
 8106d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106d4e:	687b      	ldr	r3, [r7, #4]
 8106d50:	2201      	movs	r2, #1
 8106d52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106d56:	687b      	ldr	r3, [r7, #4]
 8106d58:	2201      	movs	r2, #1
 8106d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106d5e:	687b      	ldr	r3, [r7, #4]
 8106d60:	2201      	movs	r2, #1
 8106d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106d66:	687b      	ldr	r3, [r7, #4]
 8106d68:	2201      	movs	r2, #1
 8106d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106d6e:	687b      	ldr	r3, [r7, #4]
 8106d70:	2201      	movs	r2, #1
 8106d72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106d76:	687b      	ldr	r3, [r7, #4]
 8106d78:	2201      	movs	r2, #1
 8106d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106d7e:	687b      	ldr	r3, [r7, #4]
 8106d80:	2201      	movs	r2, #1
 8106d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106d86:	687b      	ldr	r3, [r7, #4]
 8106d88:	2201      	movs	r2, #1
 8106d8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106d8e:	687b      	ldr	r3, [r7, #4]
 8106d90:	2201      	movs	r2, #1
 8106d92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106d96:	687b      	ldr	r3, [r7, #4]
 8106d98:	2201      	movs	r2, #1
 8106d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106d9e:	2300      	movs	r3, #0
}
 8106da0:	4618      	mov	r0, r3
 8106da2:	3708      	adds	r7, #8
 8106da4:	46bd      	mov	sp, r7
 8106da6:	bd80      	pop	{r7, pc}

08106da8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8106da8:	b480      	push	{r7}
 8106daa:	b083      	sub	sp, #12
 8106dac:	af00      	add	r7, sp, #0
 8106dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8106db0:	bf00      	nop
 8106db2:	370c      	adds	r7, #12
 8106db4:	46bd      	mov	sp, r7
 8106db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dba:	4770      	bx	lr

08106dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8106dbc:	b480      	push	{r7}
 8106dbe:	b085      	sub	sp, #20
 8106dc0:	af00      	add	r7, sp, #0
 8106dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106dca:	b2db      	uxtb	r3, r3
 8106dcc:	2b01      	cmp	r3, #1
 8106dce:	d001      	beq.n	8106dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8106dd0:	2301      	movs	r3, #1
 8106dd2:	e021      	b.n	8106e18 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106dd4:	687b      	ldr	r3, [r7, #4]
 8106dd6:	2202      	movs	r2, #2
 8106dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106ddc:	687b      	ldr	r3, [r7, #4]
 8106dde:	681b      	ldr	r3, [r3, #0]
 8106de0:	68da      	ldr	r2, [r3, #12]
 8106de2:	687b      	ldr	r3, [r7, #4]
 8106de4:	681b      	ldr	r3, [r3, #0]
 8106de6:	f042 0201 	orr.w	r2, r2, #1
 8106dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106dec:	687b      	ldr	r3, [r7, #4]
 8106dee:	681b      	ldr	r3, [r3, #0]
 8106df0:	689a      	ldr	r2, [r3, #8]
 8106df2:	4b0c      	ldr	r3, [pc, #48]	; (8106e24 <HAL_TIM_Base_Start_IT+0x68>)
 8106df4:	4013      	ands	r3, r2
 8106df6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106df8:	68fb      	ldr	r3, [r7, #12]
 8106dfa:	2b06      	cmp	r3, #6
 8106dfc:	d00b      	beq.n	8106e16 <HAL_TIM_Base_Start_IT+0x5a>
 8106dfe:	68fb      	ldr	r3, [r7, #12]
 8106e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106e04:	d007      	beq.n	8106e16 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8106e06:	687b      	ldr	r3, [r7, #4]
 8106e08:	681b      	ldr	r3, [r3, #0]
 8106e0a:	681a      	ldr	r2, [r3, #0]
 8106e0c:	687b      	ldr	r3, [r7, #4]
 8106e0e:	681b      	ldr	r3, [r3, #0]
 8106e10:	f042 0201 	orr.w	r2, r2, #1
 8106e14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8106e16:	2300      	movs	r3, #0
}
 8106e18:	4618      	mov	r0, r3
 8106e1a:	3714      	adds	r7, #20
 8106e1c:	46bd      	mov	sp, r7
 8106e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e22:	4770      	bx	lr
 8106e24:	00010007 	.word	0x00010007

08106e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106e28:	b580      	push	{r7, lr}
 8106e2a:	b082      	sub	sp, #8
 8106e2c:	af00      	add	r7, sp, #0
 8106e2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8106e30:	687b      	ldr	r3, [r7, #4]
 8106e32:	681b      	ldr	r3, [r3, #0]
 8106e34:	691b      	ldr	r3, [r3, #16]
 8106e36:	f003 0302 	and.w	r3, r3, #2
 8106e3a:	2b02      	cmp	r3, #2
 8106e3c:	d122      	bne.n	8106e84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8106e3e:	687b      	ldr	r3, [r7, #4]
 8106e40:	681b      	ldr	r3, [r3, #0]
 8106e42:	68db      	ldr	r3, [r3, #12]
 8106e44:	f003 0302 	and.w	r3, r3, #2
 8106e48:	2b02      	cmp	r3, #2
 8106e4a:	d11b      	bne.n	8106e84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8106e4c:	687b      	ldr	r3, [r7, #4]
 8106e4e:	681b      	ldr	r3, [r3, #0]
 8106e50:	f06f 0202 	mvn.w	r2, #2
 8106e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8106e56:	687b      	ldr	r3, [r7, #4]
 8106e58:	2201      	movs	r2, #1
 8106e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106e5c:	687b      	ldr	r3, [r7, #4]
 8106e5e:	681b      	ldr	r3, [r3, #0]
 8106e60:	699b      	ldr	r3, [r3, #24]
 8106e62:	f003 0303 	and.w	r3, r3, #3
 8106e66:	2b00      	cmp	r3, #0
 8106e68:	d003      	beq.n	8106e72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8106e6a:	6878      	ldr	r0, [r7, #4]
 8106e6c:	f000 f905 	bl	810707a <HAL_TIM_IC_CaptureCallback>
 8106e70:	e005      	b.n	8106e7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106e72:	6878      	ldr	r0, [r7, #4]
 8106e74:	f000 f8f7 	bl	8107066 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106e78:	6878      	ldr	r0, [r7, #4]
 8106e7a:	f000 f908 	bl	810708e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106e7e:	687b      	ldr	r3, [r7, #4]
 8106e80:	2200      	movs	r2, #0
 8106e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8106e84:	687b      	ldr	r3, [r7, #4]
 8106e86:	681b      	ldr	r3, [r3, #0]
 8106e88:	691b      	ldr	r3, [r3, #16]
 8106e8a:	f003 0304 	and.w	r3, r3, #4
 8106e8e:	2b04      	cmp	r3, #4
 8106e90:	d122      	bne.n	8106ed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8106e92:	687b      	ldr	r3, [r7, #4]
 8106e94:	681b      	ldr	r3, [r3, #0]
 8106e96:	68db      	ldr	r3, [r3, #12]
 8106e98:	f003 0304 	and.w	r3, r3, #4
 8106e9c:	2b04      	cmp	r3, #4
 8106e9e:	d11b      	bne.n	8106ed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8106ea0:	687b      	ldr	r3, [r7, #4]
 8106ea2:	681b      	ldr	r3, [r3, #0]
 8106ea4:	f06f 0204 	mvn.w	r2, #4
 8106ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8106eaa:	687b      	ldr	r3, [r7, #4]
 8106eac:	2202      	movs	r2, #2
 8106eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8106eb0:	687b      	ldr	r3, [r7, #4]
 8106eb2:	681b      	ldr	r3, [r3, #0]
 8106eb4:	699b      	ldr	r3, [r3, #24]
 8106eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106eba:	2b00      	cmp	r3, #0
 8106ebc:	d003      	beq.n	8106ec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106ebe:	6878      	ldr	r0, [r7, #4]
 8106ec0:	f000 f8db 	bl	810707a <HAL_TIM_IC_CaptureCallback>
 8106ec4:	e005      	b.n	8106ed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106ec6:	6878      	ldr	r0, [r7, #4]
 8106ec8:	f000 f8cd 	bl	8107066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106ecc:	6878      	ldr	r0, [r7, #4]
 8106ece:	f000 f8de 	bl	810708e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106ed2:	687b      	ldr	r3, [r7, #4]
 8106ed4:	2200      	movs	r2, #0
 8106ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8106ed8:	687b      	ldr	r3, [r7, #4]
 8106eda:	681b      	ldr	r3, [r3, #0]
 8106edc:	691b      	ldr	r3, [r3, #16]
 8106ede:	f003 0308 	and.w	r3, r3, #8
 8106ee2:	2b08      	cmp	r3, #8
 8106ee4:	d122      	bne.n	8106f2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8106ee6:	687b      	ldr	r3, [r7, #4]
 8106ee8:	681b      	ldr	r3, [r3, #0]
 8106eea:	68db      	ldr	r3, [r3, #12]
 8106eec:	f003 0308 	and.w	r3, r3, #8
 8106ef0:	2b08      	cmp	r3, #8
 8106ef2:	d11b      	bne.n	8106f2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8106ef4:	687b      	ldr	r3, [r7, #4]
 8106ef6:	681b      	ldr	r3, [r3, #0]
 8106ef8:	f06f 0208 	mvn.w	r2, #8
 8106efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106efe:	687b      	ldr	r3, [r7, #4]
 8106f00:	2204      	movs	r2, #4
 8106f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8106f04:	687b      	ldr	r3, [r7, #4]
 8106f06:	681b      	ldr	r3, [r3, #0]
 8106f08:	69db      	ldr	r3, [r3, #28]
 8106f0a:	f003 0303 	and.w	r3, r3, #3
 8106f0e:	2b00      	cmp	r3, #0
 8106f10:	d003      	beq.n	8106f1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106f12:	6878      	ldr	r0, [r7, #4]
 8106f14:	f000 f8b1 	bl	810707a <HAL_TIM_IC_CaptureCallback>
 8106f18:	e005      	b.n	8106f26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106f1a:	6878      	ldr	r0, [r7, #4]
 8106f1c:	f000 f8a3 	bl	8107066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106f20:	6878      	ldr	r0, [r7, #4]
 8106f22:	f000 f8b4 	bl	810708e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	2200      	movs	r2, #0
 8106f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	681b      	ldr	r3, [r3, #0]
 8106f30:	691b      	ldr	r3, [r3, #16]
 8106f32:	f003 0310 	and.w	r3, r3, #16
 8106f36:	2b10      	cmp	r3, #16
 8106f38:	d122      	bne.n	8106f80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8106f3a:	687b      	ldr	r3, [r7, #4]
 8106f3c:	681b      	ldr	r3, [r3, #0]
 8106f3e:	68db      	ldr	r3, [r3, #12]
 8106f40:	f003 0310 	and.w	r3, r3, #16
 8106f44:	2b10      	cmp	r3, #16
 8106f46:	d11b      	bne.n	8106f80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8106f48:	687b      	ldr	r3, [r7, #4]
 8106f4a:	681b      	ldr	r3, [r3, #0]
 8106f4c:	f06f 0210 	mvn.w	r2, #16
 8106f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8106f52:	687b      	ldr	r3, [r7, #4]
 8106f54:	2208      	movs	r2, #8
 8106f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8106f58:	687b      	ldr	r3, [r7, #4]
 8106f5a:	681b      	ldr	r3, [r3, #0]
 8106f5c:	69db      	ldr	r3, [r3, #28]
 8106f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106f62:	2b00      	cmp	r3, #0
 8106f64:	d003      	beq.n	8106f6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106f66:	6878      	ldr	r0, [r7, #4]
 8106f68:	f000 f887 	bl	810707a <HAL_TIM_IC_CaptureCallback>
 8106f6c:	e005      	b.n	8106f7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106f6e:	6878      	ldr	r0, [r7, #4]
 8106f70:	f000 f879 	bl	8107066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106f74:	6878      	ldr	r0, [r7, #4]
 8106f76:	f000 f88a 	bl	810708e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106f7a:	687b      	ldr	r3, [r7, #4]
 8106f7c:	2200      	movs	r2, #0
 8106f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8106f80:	687b      	ldr	r3, [r7, #4]
 8106f82:	681b      	ldr	r3, [r3, #0]
 8106f84:	691b      	ldr	r3, [r3, #16]
 8106f86:	f003 0301 	and.w	r3, r3, #1
 8106f8a:	2b01      	cmp	r3, #1
 8106f8c:	d10e      	bne.n	8106fac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8106f8e:	687b      	ldr	r3, [r7, #4]
 8106f90:	681b      	ldr	r3, [r3, #0]
 8106f92:	68db      	ldr	r3, [r3, #12]
 8106f94:	f003 0301 	and.w	r3, r3, #1
 8106f98:	2b01      	cmp	r3, #1
 8106f9a:	d107      	bne.n	8106fac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	681b      	ldr	r3, [r3, #0]
 8106fa0:	f06f 0201 	mvn.w	r2, #1
 8106fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8106fa6:	6878      	ldr	r0, [r7, #4]
 8106fa8:	f7fa fbc0 	bl	810172c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	681b      	ldr	r3, [r3, #0]
 8106fb0:	691b      	ldr	r3, [r3, #16]
 8106fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106fb6:	2b80      	cmp	r3, #128	; 0x80
 8106fb8:	d10e      	bne.n	8106fd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8106fba:	687b      	ldr	r3, [r7, #4]
 8106fbc:	681b      	ldr	r3, [r3, #0]
 8106fbe:	68db      	ldr	r3, [r3, #12]
 8106fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106fc4:	2b80      	cmp	r3, #128	; 0x80
 8106fc6:	d107      	bne.n	8106fd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8106fc8:	687b      	ldr	r3, [r7, #4]
 8106fca:	681b      	ldr	r3, [r3, #0]
 8106fcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8106fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8106fd2:	6878      	ldr	r0, [r7, #4]
 8106fd4:	f000 f914 	bl	8107200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	681b      	ldr	r3, [r3, #0]
 8106fdc:	691b      	ldr	r3, [r3, #16]
 8106fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106fe6:	d10e      	bne.n	8107006 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8106fe8:	687b      	ldr	r3, [r7, #4]
 8106fea:	681b      	ldr	r3, [r3, #0]
 8106fec:	68db      	ldr	r3, [r3, #12]
 8106fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106ff2:	2b80      	cmp	r3, #128	; 0x80
 8106ff4:	d107      	bne.n	8107006 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8106ff6:	687b      	ldr	r3, [r7, #4]
 8106ff8:	681b      	ldr	r3, [r3, #0]
 8106ffa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8106ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8107000:	6878      	ldr	r0, [r7, #4]
 8107002:	f000 f907 	bl	8107214 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8107006:	687b      	ldr	r3, [r7, #4]
 8107008:	681b      	ldr	r3, [r3, #0]
 810700a:	691b      	ldr	r3, [r3, #16]
 810700c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107010:	2b40      	cmp	r3, #64	; 0x40
 8107012:	d10e      	bne.n	8107032 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	681b      	ldr	r3, [r3, #0]
 8107018:	68db      	ldr	r3, [r3, #12]
 810701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810701e:	2b40      	cmp	r3, #64	; 0x40
 8107020:	d107      	bne.n	8107032 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8107022:	687b      	ldr	r3, [r7, #4]
 8107024:	681b      	ldr	r3, [r3, #0]
 8107026:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810702a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810702c:	6878      	ldr	r0, [r7, #4]
 810702e:	f000 f838 	bl	81070a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8107032:	687b      	ldr	r3, [r7, #4]
 8107034:	681b      	ldr	r3, [r3, #0]
 8107036:	691b      	ldr	r3, [r3, #16]
 8107038:	f003 0320 	and.w	r3, r3, #32
 810703c:	2b20      	cmp	r3, #32
 810703e:	d10e      	bne.n	810705e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8107040:	687b      	ldr	r3, [r7, #4]
 8107042:	681b      	ldr	r3, [r3, #0]
 8107044:	68db      	ldr	r3, [r3, #12]
 8107046:	f003 0320 	and.w	r3, r3, #32
 810704a:	2b20      	cmp	r3, #32
 810704c:	d107      	bne.n	810705e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	681b      	ldr	r3, [r3, #0]
 8107052:	f06f 0220 	mvn.w	r2, #32
 8107056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8107058:	6878      	ldr	r0, [r7, #4]
 810705a:	f000 f8c7 	bl	81071ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810705e:	bf00      	nop
 8107060:	3708      	adds	r7, #8
 8107062:	46bd      	mov	sp, r7
 8107064:	bd80      	pop	{r7, pc}

08107066 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107066:	b480      	push	{r7}
 8107068:	b083      	sub	sp, #12
 810706a:	af00      	add	r7, sp, #0
 810706c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810706e:	bf00      	nop
 8107070:	370c      	adds	r7, #12
 8107072:	46bd      	mov	sp, r7
 8107074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107078:	4770      	bx	lr

0810707a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810707a:	b480      	push	{r7}
 810707c:	b083      	sub	sp, #12
 810707e:	af00      	add	r7, sp, #0
 8107080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8107082:	bf00      	nop
 8107084:	370c      	adds	r7, #12
 8107086:	46bd      	mov	sp, r7
 8107088:	f85d 7b04 	ldr.w	r7, [sp], #4
 810708c:	4770      	bx	lr

0810708e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810708e:	b480      	push	{r7}
 8107090:	b083      	sub	sp, #12
 8107092:	af00      	add	r7, sp, #0
 8107094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8107096:	bf00      	nop
 8107098:	370c      	adds	r7, #12
 810709a:	46bd      	mov	sp, r7
 810709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070a0:	4770      	bx	lr

081070a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81070a2:	b480      	push	{r7}
 81070a4:	b083      	sub	sp, #12
 81070a6:	af00      	add	r7, sp, #0
 81070a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81070aa:	bf00      	nop
 81070ac:	370c      	adds	r7, #12
 81070ae:	46bd      	mov	sp, r7
 81070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070b4:	4770      	bx	lr
	...

081070b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81070b8:	b480      	push	{r7}
 81070ba:	b085      	sub	sp, #20
 81070bc:	af00      	add	r7, sp, #0
 81070be:	6078      	str	r0, [r7, #4]
 81070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81070c2:	687b      	ldr	r3, [r7, #4]
 81070c4:	681b      	ldr	r3, [r3, #0]
 81070c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81070c8:	687b      	ldr	r3, [r7, #4]
 81070ca:	4a40      	ldr	r2, [pc, #256]	; (81071cc <TIM_Base_SetConfig+0x114>)
 81070cc:	4293      	cmp	r3, r2
 81070ce:	d013      	beq.n	81070f8 <TIM_Base_SetConfig+0x40>
 81070d0:	687b      	ldr	r3, [r7, #4]
 81070d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81070d6:	d00f      	beq.n	81070f8 <TIM_Base_SetConfig+0x40>
 81070d8:	687b      	ldr	r3, [r7, #4]
 81070da:	4a3d      	ldr	r2, [pc, #244]	; (81071d0 <TIM_Base_SetConfig+0x118>)
 81070dc:	4293      	cmp	r3, r2
 81070de:	d00b      	beq.n	81070f8 <TIM_Base_SetConfig+0x40>
 81070e0:	687b      	ldr	r3, [r7, #4]
 81070e2:	4a3c      	ldr	r2, [pc, #240]	; (81071d4 <TIM_Base_SetConfig+0x11c>)
 81070e4:	4293      	cmp	r3, r2
 81070e6:	d007      	beq.n	81070f8 <TIM_Base_SetConfig+0x40>
 81070e8:	687b      	ldr	r3, [r7, #4]
 81070ea:	4a3b      	ldr	r2, [pc, #236]	; (81071d8 <TIM_Base_SetConfig+0x120>)
 81070ec:	4293      	cmp	r3, r2
 81070ee:	d003      	beq.n	81070f8 <TIM_Base_SetConfig+0x40>
 81070f0:	687b      	ldr	r3, [r7, #4]
 81070f2:	4a3a      	ldr	r2, [pc, #232]	; (81071dc <TIM_Base_SetConfig+0x124>)
 81070f4:	4293      	cmp	r3, r2
 81070f6:	d108      	bne.n	810710a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81070f8:	68fb      	ldr	r3, [r7, #12]
 81070fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81070fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107100:	683b      	ldr	r3, [r7, #0]
 8107102:	685b      	ldr	r3, [r3, #4]
 8107104:	68fa      	ldr	r2, [r7, #12]
 8107106:	4313      	orrs	r3, r2
 8107108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810710a:	687b      	ldr	r3, [r7, #4]
 810710c:	4a2f      	ldr	r2, [pc, #188]	; (81071cc <TIM_Base_SetConfig+0x114>)
 810710e:	4293      	cmp	r3, r2
 8107110:	d01f      	beq.n	8107152 <TIM_Base_SetConfig+0x9a>
 8107112:	687b      	ldr	r3, [r7, #4]
 8107114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107118:	d01b      	beq.n	8107152 <TIM_Base_SetConfig+0x9a>
 810711a:	687b      	ldr	r3, [r7, #4]
 810711c:	4a2c      	ldr	r2, [pc, #176]	; (81071d0 <TIM_Base_SetConfig+0x118>)
 810711e:	4293      	cmp	r3, r2
 8107120:	d017      	beq.n	8107152 <TIM_Base_SetConfig+0x9a>
 8107122:	687b      	ldr	r3, [r7, #4]
 8107124:	4a2b      	ldr	r2, [pc, #172]	; (81071d4 <TIM_Base_SetConfig+0x11c>)
 8107126:	4293      	cmp	r3, r2
 8107128:	d013      	beq.n	8107152 <TIM_Base_SetConfig+0x9a>
 810712a:	687b      	ldr	r3, [r7, #4]
 810712c:	4a2a      	ldr	r2, [pc, #168]	; (81071d8 <TIM_Base_SetConfig+0x120>)
 810712e:	4293      	cmp	r3, r2
 8107130:	d00f      	beq.n	8107152 <TIM_Base_SetConfig+0x9a>
 8107132:	687b      	ldr	r3, [r7, #4]
 8107134:	4a29      	ldr	r2, [pc, #164]	; (81071dc <TIM_Base_SetConfig+0x124>)
 8107136:	4293      	cmp	r3, r2
 8107138:	d00b      	beq.n	8107152 <TIM_Base_SetConfig+0x9a>
 810713a:	687b      	ldr	r3, [r7, #4]
 810713c:	4a28      	ldr	r2, [pc, #160]	; (81071e0 <TIM_Base_SetConfig+0x128>)
 810713e:	4293      	cmp	r3, r2
 8107140:	d007      	beq.n	8107152 <TIM_Base_SetConfig+0x9a>
 8107142:	687b      	ldr	r3, [r7, #4]
 8107144:	4a27      	ldr	r2, [pc, #156]	; (81071e4 <TIM_Base_SetConfig+0x12c>)
 8107146:	4293      	cmp	r3, r2
 8107148:	d003      	beq.n	8107152 <TIM_Base_SetConfig+0x9a>
 810714a:	687b      	ldr	r3, [r7, #4]
 810714c:	4a26      	ldr	r2, [pc, #152]	; (81071e8 <TIM_Base_SetConfig+0x130>)
 810714e:	4293      	cmp	r3, r2
 8107150:	d108      	bne.n	8107164 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107152:	68fb      	ldr	r3, [r7, #12]
 8107154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810715a:	683b      	ldr	r3, [r7, #0]
 810715c:	68db      	ldr	r3, [r3, #12]
 810715e:	68fa      	ldr	r2, [r7, #12]
 8107160:	4313      	orrs	r3, r2
 8107162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107164:	68fb      	ldr	r3, [r7, #12]
 8107166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810716a:	683b      	ldr	r3, [r7, #0]
 810716c:	695b      	ldr	r3, [r3, #20]
 810716e:	4313      	orrs	r3, r2
 8107170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107172:	687b      	ldr	r3, [r7, #4]
 8107174:	68fa      	ldr	r2, [r7, #12]
 8107176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107178:	683b      	ldr	r3, [r7, #0]
 810717a:	689a      	ldr	r2, [r3, #8]
 810717c:	687b      	ldr	r3, [r7, #4]
 810717e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107180:	683b      	ldr	r3, [r7, #0]
 8107182:	681a      	ldr	r2, [r3, #0]
 8107184:	687b      	ldr	r3, [r7, #4]
 8107186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107188:	687b      	ldr	r3, [r7, #4]
 810718a:	4a10      	ldr	r2, [pc, #64]	; (81071cc <TIM_Base_SetConfig+0x114>)
 810718c:	4293      	cmp	r3, r2
 810718e:	d00f      	beq.n	81071b0 <TIM_Base_SetConfig+0xf8>
 8107190:	687b      	ldr	r3, [r7, #4]
 8107192:	4a12      	ldr	r2, [pc, #72]	; (81071dc <TIM_Base_SetConfig+0x124>)
 8107194:	4293      	cmp	r3, r2
 8107196:	d00b      	beq.n	81071b0 <TIM_Base_SetConfig+0xf8>
 8107198:	687b      	ldr	r3, [r7, #4]
 810719a:	4a11      	ldr	r2, [pc, #68]	; (81071e0 <TIM_Base_SetConfig+0x128>)
 810719c:	4293      	cmp	r3, r2
 810719e:	d007      	beq.n	81071b0 <TIM_Base_SetConfig+0xf8>
 81071a0:	687b      	ldr	r3, [r7, #4]
 81071a2:	4a10      	ldr	r2, [pc, #64]	; (81071e4 <TIM_Base_SetConfig+0x12c>)
 81071a4:	4293      	cmp	r3, r2
 81071a6:	d003      	beq.n	81071b0 <TIM_Base_SetConfig+0xf8>
 81071a8:	687b      	ldr	r3, [r7, #4]
 81071aa:	4a0f      	ldr	r2, [pc, #60]	; (81071e8 <TIM_Base_SetConfig+0x130>)
 81071ac:	4293      	cmp	r3, r2
 81071ae:	d103      	bne.n	81071b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81071b0:	683b      	ldr	r3, [r7, #0]
 81071b2:	691a      	ldr	r2, [r3, #16]
 81071b4:	687b      	ldr	r3, [r7, #4]
 81071b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81071b8:	687b      	ldr	r3, [r7, #4]
 81071ba:	2201      	movs	r2, #1
 81071bc:	615a      	str	r2, [r3, #20]
}
 81071be:	bf00      	nop
 81071c0:	3714      	adds	r7, #20
 81071c2:	46bd      	mov	sp, r7
 81071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071c8:	4770      	bx	lr
 81071ca:	bf00      	nop
 81071cc:	40010000 	.word	0x40010000
 81071d0:	40000400 	.word	0x40000400
 81071d4:	40000800 	.word	0x40000800
 81071d8:	40000c00 	.word	0x40000c00
 81071dc:	40010400 	.word	0x40010400
 81071e0:	40014000 	.word	0x40014000
 81071e4:	40014400 	.word	0x40014400
 81071e8:	40014800 	.word	0x40014800

081071ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81071ec:	b480      	push	{r7}
 81071ee:	b083      	sub	sp, #12
 81071f0:	af00      	add	r7, sp, #0
 81071f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81071f4:	bf00      	nop
 81071f6:	370c      	adds	r7, #12
 81071f8:	46bd      	mov	sp, r7
 81071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071fe:	4770      	bx	lr

08107200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107200:	b480      	push	{r7}
 8107202:	b083      	sub	sp, #12
 8107204:	af00      	add	r7, sp, #0
 8107206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8107208:	bf00      	nop
 810720a:	370c      	adds	r7, #12
 810720c:	46bd      	mov	sp, r7
 810720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107212:	4770      	bx	lr

08107214 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107214:	b480      	push	{r7}
 8107216:	b083      	sub	sp, #12
 8107218:	af00      	add	r7, sp, #0
 810721a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810721c:	bf00      	nop
 810721e:	370c      	adds	r7, #12
 8107220:	46bd      	mov	sp, r7
 8107222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107226:	4770      	bx	lr

08107228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8107228:	b580      	push	{r7, lr}
 810722a:	b082      	sub	sp, #8
 810722c:	af00      	add	r7, sp, #0
 810722e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107230:	687b      	ldr	r3, [r7, #4]
 8107232:	2b00      	cmp	r3, #0
 8107234:	d101      	bne.n	810723a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8107236:	2301      	movs	r3, #1
 8107238:	e042      	b.n	81072c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810723a:	687b      	ldr	r3, [r7, #4]
 810723c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107240:	2b00      	cmp	r3, #0
 8107242:	d106      	bne.n	8107252 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8107244:	687b      	ldr	r3, [r7, #4]
 8107246:	2200      	movs	r2, #0
 8107248:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810724c:	6878      	ldr	r0, [r7, #4]
 810724e:	f7fa fed5 	bl	8101ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8107252:	687b      	ldr	r3, [r7, #4]
 8107254:	2224      	movs	r2, #36	; 0x24
 8107256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 810725a:	687b      	ldr	r3, [r7, #4]
 810725c:	681b      	ldr	r3, [r3, #0]
 810725e:	681a      	ldr	r2, [r3, #0]
 8107260:	687b      	ldr	r3, [r7, #4]
 8107262:	681b      	ldr	r3, [r3, #0]
 8107264:	f022 0201 	bic.w	r2, r2, #1
 8107268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810726a:	6878      	ldr	r0, [r7, #4]
 810726c:	f000 f968 	bl	8107540 <UART_SetConfig>
 8107270:	4603      	mov	r3, r0
 8107272:	2b01      	cmp	r3, #1
 8107274:	d101      	bne.n	810727a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8107276:	2301      	movs	r3, #1
 8107278:	e022      	b.n	81072c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810727a:	687b      	ldr	r3, [r7, #4]
 810727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810727e:	2b00      	cmp	r3, #0
 8107280:	d002      	beq.n	8107288 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8107282:	6878      	ldr	r0, [r7, #4]
 8107284:	f000 fec2 	bl	810800c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107288:	687b      	ldr	r3, [r7, #4]
 810728a:	681b      	ldr	r3, [r3, #0]
 810728c:	685a      	ldr	r2, [r3, #4]
 810728e:	687b      	ldr	r3, [r7, #4]
 8107290:	681b      	ldr	r3, [r3, #0]
 8107292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107298:	687b      	ldr	r3, [r7, #4]
 810729a:	681b      	ldr	r3, [r3, #0]
 810729c:	689a      	ldr	r2, [r3, #8]
 810729e:	687b      	ldr	r3, [r7, #4]
 81072a0:	681b      	ldr	r3, [r3, #0]
 81072a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81072a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81072a8:	687b      	ldr	r3, [r7, #4]
 81072aa:	681b      	ldr	r3, [r3, #0]
 81072ac:	681a      	ldr	r2, [r3, #0]
 81072ae:	687b      	ldr	r3, [r7, #4]
 81072b0:	681b      	ldr	r3, [r3, #0]
 81072b2:	f042 0201 	orr.w	r2, r2, #1
 81072b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81072b8:	6878      	ldr	r0, [r7, #4]
 81072ba:	f000 ff49 	bl	8108150 <UART_CheckIdleState>
 81072be:	4603      	mov	r3, r0
}
 81072c0:	4618      	mov	r0, r3
 81072c2:	3708      	adds	r7, #8
 81072c4:	46bd      	mov	sp, r7
 81072c6:	bd80      	pop	{r7, pc}

081072c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81072c8:	b580      	push	{r7, lr}
 81072ca:	b08a      	sub	sp, #40	; 0x28
 81072cc:	af02      	add	r7, sp, #8
 81072ce:	60f8      	str	r0, [r7, #12]
 81072d0:	60b9      	str	r1, [r7, #8]
 81072d2:	603b      	str	r3, [r7, #0]
 81072d4:	4613      	mov	r3, r2
 81072d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81072d8:	68fb      	ldr	r3, [r7, #12]
 81072da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81072de:	2b20      	cmp	r3, #32
 81072e0:	f040 8083 	bne.w	81073ea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 81072e4:	68bb      	ldr	r3, [r7, #8]
 81072e6:	2b00      	cmp	r3, #0
 81072e8:	d002      	beq.n	81072f0 <HAL_UART_Transmit+0x28>
 81072ea:	88fb      	ldrh	r3, [r7, #6]
 81072ec:	2b00      	cmp	r3, #0
 81072ee:	d101      	bne.n	81072f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 81072f0:	2301      	movs	r3, #1
 81072f2:	e07b      	b.n	81073ec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 81072f4:	68fb      	ldr	r3, [r7, #12]
 81072f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 81072fa:	2b01      	cmp	r3, #1
 81072fc:	d101      	bne.n	8107302 <HAL_UART_Transmit+0x3a>
 81072fe:	2302      	movs	r3, #2
 8107300:	e074      	b.n	81073ec <HAL_UART_Transmit+0x124>
 8107302:	68fb      	ldr	r3, [r7, #12]
 8107304:	2201      	movs	r2, #1
 8107306:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810730a:	68fb      	ldr	r3, [r7, #12]
 810730c:	2200      	movs	r2, #0
 810730e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8107312:	68fb      	ldr	r3, [r7, #12]
 8107314:	2221      	movs	r2, #33	; 0x21
 8107316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 810731a:	f7fa ffbb 	bl	8102294 <HAL_GetTick>
 810731e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8107320:	68fb      	ldr	r3, [r7, #12]
 8107322:	88fa      	ldrh	r2, [r7, #6]
 8107324:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8107328:	68fb      	ldr	r3, [r7, #12]
 810732a:	88fa      	ldrh	r2, [r7, #6]
 810732c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107330:	68fb      	ldr	r3, [r7, #12]
 8107332:	689b      	ldr	r3, [r3, #8]
 8107334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107338:	d108      	bne.n	810734c <HAL_UART_Transmit+0x84>
 810733a:	68fb      	ldr	r3, [r7, #12]
 810733c:	691b      	ldr	r3, [r3, #16]
 810733e:	2b00      	cmp	r3, #0
 8107340:	d104      	bne.n	810734c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8107342:	2300      	movs	r3, #0
 8107344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8107346:	68bb      	ldr	r3, [r7, #8]
 8107348:	61bb      	str	r3, [r7, #24]
 810734a:	e003      	b.n	8107354 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 810734c:	68bb      	ldr	r3, [r7, #8]
 810734e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8107350:	2300      	movs	r3, #0
 8107352:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8107354:	68fb      	ldr	r3, [r7, #12]
 8107356:	2200      	movs	r2, #0
 8107358:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 810735c:	e02c      	b.n	81073b8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810735e:	683b      	ldr	r3, [r7, #0]
 8107360:	9300      	str	r3, [sp, #0]
 8107362:	697b      	ldr	r3, [r7, #20]
 8107364:	2200      	movs	r2, #0
 8107366:	2180      	movs	r1, #128	; 0x80
 8107368:	68f8      	ldr	r0, [r7, #12]
 810736a:	f000 ff39 	bl	81081e0 <UART_WaitOnFlagUntilTimeout>
 810736e:	4603      	mov	r3, r0
 8107370:	2b00      	cmp	r3, #0
 8107372:	d001      	beq.n	8107378 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8107374:	2303      	movs	r3, #3
 8107376:	e039      	b.n	81073ec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8107378:	69fb      	ldr	r3, [r7, #28]
 810737a:	2b00      	cmp	r3, #0
 810737c:	d10b      	bne.n	8107396 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810737e:	69bb      	ldr	r3, [r7, #24]
 8107380:	881b      	ldrh	r3, [r3, #0]
 8107382:	461a      	mov	r2, r3
 8107384:	68fb      	ldr	r3, [r7, #12]
 8107386:	681b      	ldr	r3, [r3, #0]
 8107388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810738c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 810738e:	69bb      	ldr	r3, [r7, #24]
 8107390:	3302      	adds	r3, #2
 8107392:	61bb      	str	r3, [r7, #24]
 8107394:	e007      	b.n	81073a6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8107396:	69fb      	ldr	r3, [r7, #28]
 8107398:	781a      	ldrb	r2, [r3, #0]
 810739a:	68fb      	ldr	r3, [r7, #12]
 810739c:	681b      	ldr	r3, [r3, #0]
 810739e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 81073a0:	69fb      	ldr	r3, [r7, #28]
 81073a2:	3301      	adds	r3, #1
 81073a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81073a6:	68fb      	ldr	r3, [r7, #12]
 81073a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81073ac:	b29b      	uxth	r3, r3
 81073ae:	3b01      	subs	r3, #1
 81073b0:	b29a      	uxth	r2, r3
 81073b2:	68fb      	ldr	r3, [r7, #12]
 81073b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 81073b8:	68fb      	ldr	r3, [r7, #12]
 81073ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81073be:	b29b      	uxth	r3, r3
 81073c0:	2b00      	cmp	r3, #0
 81073c2:	d1cc      	bne.n	810735e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81073c4:	683b      	ldr	r3, [r7, #0]
 81073c6:	9300      	str	r3, [sp, #0]
 81073c8:	697b      	ldr	r3, [r7, #20]
 81073ca:	2200      	movs	r2, #0
 81073cc:	2140      	movs	r1, #64	; 0x40
 81073ce:	68f8      	ldr	r0, [r7, #12]
 81073d0:	f000 ff06 	bl	81081e0 <UART_WaitOnFlagUntilTimeout>
 81073d4:	4603      	mov	r3, r0
 81073d6:	2b00      	cmp	r3, #0
 81073d8:	d001      	beq.n	81073de <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 81073da:	2303      	movs	r3, #3
 81073dc:	e006      	b.n	81073ec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81073de:	68fb      	ldr	r3, [r7, #12]
 81073e0:	2220      	movs	r2, #32
 81073e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 81073e6:	2300      	movs	r3, #0
 81073e8:	e000      	b.n	81073ec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 81073ea:	2302      	movs	r3, #2
  }
}
 81073ec:	4618      	mov	r0, r3
 81073ee:	3720      	adds	r7, #32
 81073f0:	46bd      	mov	sp, r7
 81073f2:	bd80      	pop	{r7, pc}

081073f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 81073f4:	b580      	push	{r7, lr}
 81073f6:	b084      	sub	sp, #16
 81073f8:	af00      	add	r7, sp, #0
 81073fa:	60f8      	str	r0, [r7, #12]
 81073fc:	60b9      	str	r1, [r7, #8]
 81073fe:	4613      	mov	r3, r2
 8107400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8107402:	68fb      	ldr	r3, [r7, #12]
 8107404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107408:	2b20      	cmp	r3, #32
 810740a:	d170      	bne.n	81074ee <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 810740c:	68bb      	ldr	r3, [r7, #8]
 810740e:	2b00      	cmp	r3, #0
 8107410:	d002      	beq.n	8107418 <HAL_UART_Receive_DMA+0x24>
 8107412:	88fb      	ldrh	r3, [r7, #6]
 8107414:	2b00      	cmp	r3, #0
 8107416:	d101      	bne.n	810741c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8107418:	2301      	movs	r3, #1
 810741a:	e069      	b.n	81074f0 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 810741c:	68fb      	ldr	r3, [r7, #12]
 810741e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107422:	2b01      	cmp	r3, #1
 8107424:	d101      	bne.n	810742a <HAL_UART_Receive_DMA+0x36>
 8107426:	2302      	movs	r3, #2
 8107428:	e062      	b.n	81074f0 <HAL_UART_Receive_DMA+0xfc>
 810742a:	68fb      	ldr	r3, [r7, #12]
 810742c:	2201      	movs	r2, #1
 810742e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8107432:	68fb      	ldr	r3, [r7, #12]
 8107434:	68ba      	ldr	r2, [r7, #8]
 8107436:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8107438:	68fb      	ldr	r3, [r7, #12]
 810743a:	88fa      	ldrh	r2, [r7, #6]
 810743c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107440:	68fb      	ldr	r3, [r7, #12]
 8107442:	2200      	movs	r2, #0
 8107444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8107448:	68fb      	ldr	r3, [r7, #12]
 810744a:	2222      	movs	r2, #34	; 0x22
 810744c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8107450:	68fb      	ldr	r3, [r7, #12]
 8107452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107454:	2b00      	cmp	r3, #0
 8107456:	d02c      	beq.n	81074b2 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8107458:	68fb      	ldr	r3, [r7, #12]
 810745a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810745c:	4a26      	ldr	r2, [pc, #152]	; (81074f8 <HAL_UART_Receive_DMA+0x104>)
 810745e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8107460:	68fb      	ldr	r3, [r7, #12]
 8107462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107464:	4a25      	ldr	r2, [pc, #148]	; (81074fc <HAL_UART_Receive_DMA+0x108>)
 8107466:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8107468:	68fb      	ldr	r3, [r7, #12]
 810746a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810746c:	4a24      	ldr	r2, [pc, #144]	; (8107500 <HAL_UART_Receive_DMA+0x10c>)
 810746e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8107470:	68fb      	ldr	r3, [r7, #12]
 8107472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107474:	2200      	movs	r2, #0
 8107476:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8107478:	68fb      	ldr	r3, [r7, #12]
 810747a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810747c:	68fb      	ldr	r3, [r7, #12]
 810747e:	681b      	ldr	r3, [r3, #0]
 8107480:	3324      	adds	r3, #36	; 0x24
 8107482:	4619      	mov	r1, r3
 8107484:	68fb      	ldr	r3, [r7, #12]
 8107486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107488:	461a      	mov	r2, r3
 810748a:	88fb      	ldrh	r3, [r7, #6]
 810748c:	f7fb fb78 	bl	8102b80 <HAL_DMA_Start_IT>
 8107490:	4603      	mov	r3, r0
 8107492:	2b00      	cmp	r3, #0
 8107494:	d00d      	beq.n	81074b2 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8107496:	68fb      	ldr	r3, [r7, #12]
 8107498:	2210      	movs	r2, #16
 810749a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810749e:	68fb      	ldr	r3, [r7, #12]
 81074a0:	2200      	movs	r2, #0
 81074a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 81074a6:	68fb      	ldr	r3, [r7, #12]
 81074a8:	2220      	movs	r2, #32
 81074aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 81074ae:	2301      	movs	r3, #1
 81074b0:	e01e      	b.n	81074f0 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 81074b2:	68fb      	ldr	r3, [r7, #12]
 81074b4:	2200      	movs	r2, #0
 81074b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81074ba:	68fb      	ldr	r3, [r7, #12]
 81074bc:	681b      	ldr	r3, [r3, #0]
 81074be:	681a      	ldr	r2, [r3, #0]
 81074c0:	68fb      	ldr	r3, [r7, #12]
 81074c2:	681b      	ldr	r3, [r3, #0]
 81074c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81074c8:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81074ca:	68fb      	ldr	r3, [r7, #12]
 81074cc:	681b      	ldr	r3, [r3, #0]
 81074ce:	689a      	ldr	r2, [r3, #8]
 81074d0:	68fb      	ldr	r3, [r7, #12]
 81074d2:	681b      	ldr	r3, [r3, #0]
 81074d4:	f042 0201 	orr.w	r2, r2, #1
 81074d8:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81074da:	68fb      	ldr	r3, [r7, #12]
 81074dc:	681b      	ldr	r3, [r3, #0]
 81074de:	689a      	ldr	r2, [r3, #8]
 81074e0:	68fb      	ldr	r3, [r7, #12]
 81074e2:	681b      	ldr	r3, [r3, #0]
 81074e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81074e8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 81074ea:	2300      	movs	r3, #0
 81074ec:	e000      	b.n	81074f0 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 81074ee:	2302      	movs	r3, #2
  }
}
 81074f0:	4618      	mov	r0, r3
 81074f2:	3710      	adds	r7, #16
 81074f4:	46bd      	mov	sp, r7
 81074f6:	bd80      	pop	{r7, pc}
 81074f8:	08108363 	.word	0x08108363
 81074fc:	081083c9 	.word	0x081083c9
 8107500:	081083e5 	.word	0x081083e5

08107504 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8107504:	b480      	push	{r7}
 8107506:	b083      	sub	sp, #12
 8107508:	af00      	add	r7, sp, #0
 810750a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 810750c:	bf00      	nop
 810750e:	370c      	adds	r7, #12
 8107510:	46bd      	mov	sp, r7
 8107512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107516:	4770      	bx	lr

08107518 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8107518:	b480      	push	{r7}
 810751a:	b083      	sub	sp, #12
 810751c:	af00      	add	r7, sp, #0
 810751e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8107520:	bf00      	nop
 8107522:	370c      	adds	r7, #12
 8107524:	46bd      	mov	sp, r7
 8107526:	f85d 7b04 	ldr.w	r7, [sp], #4
 810752a:	4770      	bx	lr

0810752c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810752c:	b480      	push	{r7}
 810752e:	b083      	sub	sp, #12
 8107530:	af00      	add	r7, sp, #0
 8107532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8107534:	bf00      	nop
 8107536:	370c      	adds	r7, #12
 8107538:	46bd      	mov	sp, r7
 810753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810753e:	4770      	bx	lr

08107540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107540:	b5b0      	push	{r4, r5, r7, lr}
 8107542:	b08e      	sub	sp, #56	; 0x38
 8107544:	af00      	add	r7, sp, #0
 8107546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8107548:	2300      	movs	r3, #0
 810754a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810754e:	687b      	ldr	r3, [r7, #4]
 8107550:	689a      	ldr	r2, [r3, #8]
 8107552:	687b      	ldr	r3, [r7, #4]
 8107554:	691b      	ldr	r3, [r3, #16]
 8107556:	431a      	orrs	r2, r3
 8107558:	687b      	ldr	r3, [r7, #4]
 810755a:	695b      	ldr	r3, [r3, #20]
 810755c:	431a      	orrs	r2, r3
 810755e:	687b      	ldr	r3, [r7, #4]
 8107560:	69db      	ldr	r3, [r3, #28]
 8107562:	4313      	orrs	r3, r2
 8107564:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8107566:	687b      	ldr	r3, [r7, #4]
 8107568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810756a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810756c:	4313      	orrs	r3, r2
 810756e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107570:	687b      	ldr	r3, [r7, #4]
 8107572:	681b      	ldr	r3, [r3, #0]
 8107574:	681a      	ldr	r2, [r3, #0]
 8107576:	4bc1      	ldr	r3, [pc, #772]	; (810787c <UART_SetConfig+0x33c>)
 8107578:	4013      	ands	r3, r2
 810757a:	687a      	ldr	r2, [r7, #4]
 810757c:	6812      	ldr	r2, [r2, #0]
 810757e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8107580:	430b      	orrs	r3, r1
 8107582:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107584:	687b      	ldr	r3, [r7, #4]
 8107586:	681b      	ldr	r3, [r3, #0]
 8107588:	685b      	ldr	r3, [r3, #4]
 810758a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810758e:	687b      	ldr	r3, [r7, #4]
 8107590:	68da      	ldr	r2, [r3, #12]
 8107592:	687b      	ldr	r3, [r7, #4]
 8107594:	681b      	ldr	r3, [r3, #0]
 8107596:	430a      	orrs	r2, r1
 8107598:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	699b      	ldr	r3, [r3, #24]
 810759e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81075a0:	687b      	ldr	r3, [r7, #4]
 81075a2:	681b      	ldr	r3, [r3, #0]
 81075a4:	4ab6      	ldr	r2, [pc, #728]	; (8107880 <UART_SetConfig+0x340>)
 81075a6:	4293      	cmp	r3, r2
 81075a8:	d004      	beq.n	81075b4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81075aa:	687b      	ldr	r3, [r7, #4]
 81075ac:	6a1b      	ldr	r3, [r3, #32]
 81075ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81075b0:	4313      	orrs	r3, r2
 81075b2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81075b4:	687b      	ldr	r3, [r7, #4]
 81075b6:	681b      	ldr	r3, [r3, #0]
 81075b8:	689b      	ldr	r3, [r3, #8]
 81075ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81075be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81075c2:	687a      	ldr	r2, [r7, #4]
 81075c4:	6812      	ldr	r2, [r2, #0]
 81075c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81075c8:	430b      	orrs	r3, r1
 81075ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81075cc:	687b      	ldr	r3, [r7, #4]
 81075ce:	681b      	ldr	r3, [r3, #0]
 81075d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81075d2:	f023 010f 	bic.w	r1, r3, #15
 81075d6:	687b      	ldr	r3, [r7, #4]
 81075d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81075da:	687b      	ldr	r3, [r7, #4]
 81075dc:	681b      	ldr	r3, [r3, #0]
 81075de:	430a      	orrs	r2, r1
 81075e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81075e2:	687b      	ldr	r3, [r7, #4]
 81075e4:	681b      	ldr	r3, [r3, #0]
 81075e6:	4aa7      	ldr	r2, [pc, #668]	; (8107884 <UART_SetConfig+0x344>)
 81075e8:	4293      	cmp	r3, r2
 81075ea:	d177      	bne.n	81076dc <UART_SetConfig+0x19c>
 81075ec:	4ba6      	ldr	r3, [pc, #664]	; (8107888 <UART_SetConfig+0x348>)
 81075ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81075f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81075f4:	2b28      	cmp	r3, #40	; 0x28
 81075f6:	d86d      	bhi.n	81076d4 <UART_SetConfig+0x194>
 81075f8:	a201      	add	r2, pc, #4	; (adr r2, 8107600 <UART_SetConfig+0xc0>)
 81075fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81075fe:	bf00      	nop
 8107600:	081076a5 	.word	0x081076a5
 8107604:	081076d5 	.word	0x081076d5
 8107608:	081076d5 	.word	0x081076d5
 810760c:	081076d5 	.word	0x081076d5
 8107610:	081076d5 	.word	0x081076d5
 8107614:	081076d5 	.word	0x081076d5
 8107618:	081076d5 	.word	0x081076d5
 810761c:	081076d5 	.word	0x081076d5
 8107620:	081076ad 	.word	0x081076ad
 8107624:	081076d5 	.word	0x081076d5
 8107628:	081076d5 	.word	0x081076d5
 810762c:	081076d5 	.word	0x081076d5
 8107630:	081076d5 	.word	0x081076d5
 8107634:	081076d5 	.word	0x081076d5
 8107638:	081076d5 	.word	0x081076d5
 810763c:	081076d5 	.word	0x081076d5
 8107640:	081076b5 	.word	0x081076b5
 8107644:	081076d5 	.word	0x081076d5
 8107648:	081076d5 	.word	0x081076d5
 810764c:	081076d5 	.word	0x081076d5
 8107650:	081076d5 	.word	0x081076d5
 8107654:	081076d5 	.word	0x081076d5
 8107658:	081076d5 	.word	0x081076d5
 810765c:	081076d5 	.word	0x081076d5
 8107660:	081076bd 	.word	0x081076bd
 8107664:	081076d5 	.word	0x081076d5
 8107668:	081076d5 	.word	0x081076d5
 810766c:	081076d5 	.word	0x081076d5
 8107670:	081076d5 	.word	0x081076d5
 8107674:	081076d5 	.word	0x081076d5
 8107678:	081076d5 	.word	0x081076d5
 810767c:	081076d5 	.word	0x081076d5
 8107680:	081076c5 	.word	0x081076c5
 8107684:	081076d5 	.word	0x081076d5
 8107688:	081076d5 	.word	0x081076d5
 810768c:	081076d5 	.word	0x081076d5
 8107690:	081076d5 	.word	0x081076d5
 8107694:	081076d5 	.word	0x081076d5
 8107698:	081076d5 	.word	0x081076d5
 810769c:	081076d5 	.word	0x081076d5
 81076a0:	081076cd 	.word	0x081076cd
 81076a4:	2301      	movs	r3, #1
 81076a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076aa:	e220      	b.n	8107aee <UART_SetConfig+0x5ae>
 81076ac:	2304      	movs	r3, #4
 81076ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076b2:	e21c      	b.n	8107aee <UART_SetConfig+0x5ae>
 81076b4:	2308      	movs	r3, #8
 81076b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076ba:	e218      	b.n	8107aee <UART_SetConfig+0x5ae>
 81076bc:	2310      	movs	r3, #16
 81076be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076c2:	e214      	b.n	8107aee <UART_SetConfig+0x5ae>
 81076c4:	2320      	movs	r3, #32
 81076c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076ca:	e210      	b.n	8107aee <UART_SetConfig+0x5ae>
 81076cc:	2340      	movs	r3, #64	; 0x40
 81076ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076d2:	e20c      	b.n	8107aee <UART_SetConfig+0x5ae>
 81076d4:	2380      	movs	r3, #128	; 0x80
 81076d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81076da:	e208      	b.n	8107aee <UART_SetConfig+0x5ae>
 81076dc:	687b      	ldr	r3, [r7, #4]
 81076de:	681b      	ldr	r3, [r3, #0]
 81076e0:	4a6a      	ldr	r2, [pc, #424]	; (810788c <UART_SetConfig+0x34c>)
 81076e2:	4293      	cmp	r3, r2
 81076e4:	d130      	bne.n	8107748 <UART_SetConfig+0x208>
 81076e6:	4b68      	ldr	r3, [pc, #416]	; (8107888 <UART_SetConfig+0x348>)
 81076e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81076ea:	f003 0307 	and.w	r3, r3, #7
 81076ee:	2b05      	cmp	r3, #5
 81076f0:	d826      	bhi.n	8107740 <UART_SetConfig+0x200>
 81076f2:	a201      	add	r2, pc, #4	; (adr r2, 81076f8 <UART_SetConfig+0x1b8>)
 81076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076f8:	08107711 	.word	0x08107711
 81076fc:	08107719 	.word	0x08107719
 8107700:	08107721 	.word	0x08107721
 8107704:	08107729 	.word	0x08107729
 8107708:	08107731 	.word	0x08107731
 810770c:	08107739 	.word	0x08107739
 8107710:	2300      	movs	r3, #0
 8107712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107716:	e1ea      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107718:	2304      	movs	r3, #4
 810771a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810771e:	e1e6      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107720:	2308      	movs	r3, #8
 8107722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107726:	e1e2      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107728:	2310      	movs	r3, #16
 810772a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810772e:	e1de      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107730:	2320      	movs	r3, #32
 8107732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107736:	e1da      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107738:	2340      	movs	r3, #64	; 0x40
 810773a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810773e:	e1d6      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107740:	2380      	movs	r3, #128	; 0x80
 8107742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107746:	e1d2      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107748:	687b      	ldr	r3, [r7, #4]
 810774a:	681b      	ldr	r3, [r3, #0]
 810774c:	4a50      	ldr	r2, [pc, #320]	; (8107890 <UART_SetConfig+0x350>)
 810774e:	4293      	cmp	r3, r2
 8107750:	d130      	bne.n	81077b4 <UART_SetConfig+0x274>
 8107752:	4b4d      	ldr	r3, [pc, #308]	; (8107888 <UART_SetConfig+0x348>)
 8107754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107756:	f003 0307 	and.w	r3, r3, #7
 810775a:	2b05      	cmp	r3, #5
 810775c:	d826      	bhi.n	81077ac <UART_SetConfig+0x26c>
 810775e:	a201      	add	r2, pc, #4	; (adr r2, 8107764 <UART_SetConfig+0x224>)
 8107760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107764:	0810777d 	.word	0x0810777d
 8107768:	08107785 	.word	0x08107785
 810776c:	0810778d 	.word	0x0810778d
 8107770:	08107795 	.word	0x08107795
 8107774:	0810779d 	.word	0x0810779d
 8107778:	081077a5 	.word	0x081077a5
 810777c:	2300      	movs	r3, #0
 810777e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107782:	e1b4      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107784:	2304      	movs	r3, #4
 8107786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810778a:	e1b0      	b.n	8107aee <UART_SetConfig+0x5ae>
 810778c:	2308      	movs	r3, #8
 810778e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107792:	e1ac      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107794:	2310      	movs	r3, #16
 8107796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810779a:	e1a8      	b.n	8107aee <UART_SetConfig+0x5ae>
 810779c:	2320      	movs	r3, #32
 810779e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077a2:	e1a4      	b.n	8107aee <UART_SetConfig+0x5ae>
 81077a4:	2340      	movs	r3, #64	; 0x40
 81077a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077aa:	e1a0      	b.n	8107aee <UART_SetConfig+0x5ae>
 81077ac:	2380      	movs	r3, #128	; 0x80
 81077ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077b2:	e19c      	b.n	8107aee <UART_SetConfig+0x5ae>
 81077b4:	687b      	ldr	r3, [r7, #4]
 81077b6:	681b      	ldr	r3, [r3, #0]
 81077b8:	4a36      	ldr	r2, [pc, #216]	; (8107894 <UART_SetConfig+0x354>)
 81077ba:	4293      	cmp	r3, r2
 81077bc:	d130      	bne.n	8107820 <UART_SetConfig+0x2e0>
 81077be:	4b32      	ldr	r3, [pc, #200]	; (8107888 <UART_SetConfig+0x348>)
 81077c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81077c2:	f003 0307 	and.w	r3, r3, #7
 81077c6:	2b05      	cmp	r3, #5
 81077c8:	d826      	bhi.n	8107818 <UART_SetConfig+0x2d8>
 81077ca:	a201      	add	r2, pc, #4	; (adr r2, 81077d0 <UART_SetConfig+0x290>)
 81077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81077d0:	081077e9 	.word	0x081077e9
 81077d4:	081077f1 	.word	0x081077f1
 81077d8:	081077f9 	.word	0x081077f9
 81077dc:	08107801 	.word	0x08107801
 81077e0:	08107809 	.word	0x08107809
 81077e4:	08107811 	.word	0x08107811
 81077e8:	2300      	movs	r3, #0
 81077ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077ee:	e17e      	b.n	8107aee <UART_SetConfig+0x5ae>
 81077f0:	2304      	movs	r3, #4
 81077f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077f6:	e17a      	b.n	8107aee <UART_SetConfig+0x5ae>
 81077f8:	2308      	movs	r3, #8
 81077fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077fe:	e176      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107800:	2310      	movs	r3, #16
 8107802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107806:	e172      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107808:	2320      	movs	r3, #32
 810780a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810780e:	e16e      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107810:	2340      	movs	r3, #64	; 0x40
 8107812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107816:	e16a      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107818:	2380      	movs	r3, #128	; 0x80
 810781a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810781e:	e166      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107820:	687b      	ldr	r3, [r7, #4]
 8107822:	681b      	ldr	r3, [r3, #0]
 8107824:	4a1c      	ldr	r2, [pc, #112]	; (8107898 <UART_SetConfig+0x358>)
 8107826:	4293      	cmp	r3, r2
 8107828:	d140      	bne.n	81078ac <UART_SetConfig+0x36c>
 810782a:	4b17      	ldr	r3, [pc, #92]	; (8107888 <UART_SetConfig+0x348>)
 810782c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810782e:	f003 0307 	and.w	r3, r3, #7
 8107832:	2b05      	cmp	r3, #5
 8107834:	d836      	bhi.n	81078a4 <UART_SetConfig+0x364>
 8107836:	a201      	add	r2, pc, #4	; (adr r2, 810783c <UART_SetConfig+0x2fc>)
 8107838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810783c:	08107855 	.word	0x08107855
 8107840:	0810785d 	.word	0x0810785d
 8107844:	08107865 	.word	0x08107865
 8107848:	0810786d 	.word	0x0810786d
 810784c:	08107875 	.word	0x08107875
 8107850:	0810789d 	.word	0x0810789d
 8107854:	2300      	movs	r3, #0
 8107856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810785a:	e148      	b.n	8107aee <UART_SetConfig+0x5ae>
 810785c:	2304      	movs	r3, #4
 810785e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107862:	e144      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107864:	2308      	movs	r3, #8
 8107866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810786a:	e140      	b.n	8107aee <UART_SetConfig+0x5ae>
 810786c:	2310      	movs	r3, #16
 810786e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107872:	e13c      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107874:	2320      	movs	r3, #32
 8107876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810787a:	e138      	b.n	8107aee <UART_SetConfig+0x5ae>
 810787c:	cfff69f3 	.word	0xcfff69f3
 8107880:	58000c00 	.word	0x58000c00
 8107884:	40011000 	.word	0x40011000
 8107888:	58024400 	.word	0x58024400
 810788c:	40004400 	.word	0x40004400
 8107890:	40004800 	.word	0x40004800
 8107894:	40004c00 	.word	0x40004c00
 8107898:	40005000 	.word	0x40005000
 810789c:	2340      	movs	r3, #64	; 0x40
 810789e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81078a2:	e124      	b.n	8107aee <UART_SetConfig+0x5ae>
 81078a4:	2380      	movs	r3, #128	; 0x80
 81078a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81078aa:	e120      	b.n	8107aee <UART_SetConfig+0x5ae>
 81078ac:	687b      	ldr	r3, [r7, #4]
 81078ae:	681b      	ldr	r3, [r3, #0]
 81078b0:	4acc      	ldr	r2, [pc, #816]	; (8107be4 <UART_SetConfig+0x6a4>)
 81078b2:	4293      	cmp	r3, r2
 81078b4:	d176      	bne.n	81079a4 <UART_SetConfig+0x464>
 81078b6:	4bcc      	ldr	r3, [pc, #816]	; (8107be8 <UART_SetConfig+0x6a8>)
 81078b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81078ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81078be:	2b28      	cmp	r3, #40	; 0x28
 81078c0:	d86c      	bhi.n	810799c <UART_SetConfig+0x45c>
 81078c2:	a201      	add	r2, pc, #4	; (adr r2, 81078c8 <UART_SetConfig+0x388>)
 81078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81078c8:	0810796d 	.word	0x0810796d
 81078cc:	0810799d 	.word	0x0810799d
 81078d0:	0810799d 	.word	0x0810799d
 81078d4:	0810799d 	.word	0x0810799d
 81078d8:	0810799d 	.word	0x0810799d
 81078dc:	0810799d 	.word	0x0810799d
 81078e0:	0810799d 	.word	0x0810799d
 81078e4:	0810799d 	.word	0x0810799d
 81078e8:	08107975 	.word	0x08107975
 81078ec:	0810799d 	.word	0x0810799d
 81078f0:	0810799d 	.word	0x0810799d
 81078f4:	0810799d 	.word	0x0810799d
 81078f8:	0810799d 	.word	0x0810799d
 81078fc:	0810799d 	.word	0x0810799d
 8107900:	0810799d 	.word	0x0810799d
 8107904:	0810799d 	.word	0x0810799d
 8107908:	0810797d 	.word	0x0810797d
 810790c:	0810799d 	.word	0x0810799d
 8107910:	0810799d 	.word	0x0810799d
 8107914:	0810799d 	.word	0x0810799d
 8107918:	0810799d 	.word	0x0810799d
 810791c:	0810799d 	.word	0x0810799d
 8107920:	0810799d 	.word	0x0810799d
 8107924:	0810799d 	.word	0x0810799d
 8107928:	08107985 	.word	0x08107985
 810792c:	0810799d 	.word	0x0810799d
 8107930:	0810799d 	.word	0x0810799d
 8107934:	0810799d 	.word	0x0810799d
 8107938:	0810799d 	.word	0x0810799d
 810793c:	0810799d 	.word	0x0810799d
 8107940:	0810799d 	.word	0x0810799d
 8107944:	0810799d 	.word	0x0810799d
 8107948:	0810798d 	.word	0x0810798d
 810794c:	0810799d 	.word	0x0810799d
 8107950:	0810799d 	.word	0x0810799d
 8107954:	0810799d 	.word	0x0810799d
 8107958:	0810799d 	.word	0x0810799d
 810795c:	0810799d 	.word	0x0810799d
 8107960:	0810799d 	.word	0x0810799d
 8107964:	0810799d 	.word	0x0810799d
 8107968:	08107995 	.word	0x08107995
 810796c:	2301      	movs	r3, #1
 810796e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107972:	e0bc      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107974:	2304      	movs	r3, #4
 8107976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810797a:	e0b8      	b.n	8107aee <UART_SetConfig+0x5ae>
 810797c:	2308      	movs	r3, #8
 810797e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107982:	e0b4      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107984:	2310      	movs	r3, #16
 8107986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810798a:	e0b0      	b.n	8107aee <UART_SetConfig+0x5ae>
 810798c:	2320      	movs	r3, #32
 810798e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107992:	e0ac      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107994:	2340      	movs	r3, #64	; 0x40
 8107996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810799a:	e0a8      	b.n	8107aee <UART_SetConfig+0x5ae>
 810799c:	2380      	movs	r3, #128	; 0x80
 810799e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81079a2:	e0a4      	b.n	8107aee <UART_SetConfig+0x5ae>
 81079a4:	687b      	ldr	r3, [r7, #4]
 81079a6:	681b      	ldr	r3, [r3, #0]
 81079a8:	4a90      	ldr	r2, [pc, #576]	; (8107bec <UART_SetConfig+0x6ac>)
 81079aa:	4293      	cmp	r3, r2
 81079ac:	d130      	bne.n	8107a10 <UART_SetConfig+0x4d0>
 81079ae:	4b8e      	ldr	r3, [pc, #568]	; (8107be8 <UART_SetConfig+0x6a8>)
 81079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81079b2:	f003 0307 	and.w	r3, r3, #7
 81079b6:	2b05      	cmp	r3, #5
 81079b8:	d826      	bhi.n	8107a08 <UART_SetConfig+0x4c8>
 81079ba:	a201      	add	r2, pc, #4	; (adr r2, 81079c0 <UART_SetConfig+0x480>)
 81079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81079c0:	081079d9 	.word	0x081079d9
 81079c4:	081079e1 	.word	0x081079e1
 81079c8:	081079e9 	.word	0x081079e9
 81079cc:	081079f1 	.word	0x081079f1
 81079d0:	081079f9 	.word	0x081079f9
 81079d4:	08107a01 	.word	0x08107a01
 81079d8:	2300      	movs	r3, #0
 81079da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81079de:	e086      	b.n	8107aee <UART_SetConfig+0x5ae>
 81079e0:	2304      	movs	r3, #4
 81079e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81079e6:	e082      	b.n	8107aee <UART_SetConfig+0x5ae>
 81079e8:	2308      	movs	r3, #8
 81079ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81079ee:	e07e      	b.n	8107aee <UART_SetConfig+0x5ae>
 81079f0:	2310      	movs	r3, #16
 81079f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81079f6:	e07a      	b.n	8107aee <UART_SetConfig+0x5ae>
 81079f8:	2320      	movs	r3, #32
 81079fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81079fe:	e076      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107a00:	2340      	movs	r3, #64	; 0x40
 8107a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a06:	e072      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107a08:	2380      	movs	r3, #128	; 0x80
 8107a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a0e:	e06e      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107a10:	687b      	ldr	r3, [r7, #4]
 8107a12:	681b      	ldr	r3, [r3, #0]
 8107a14:	4a76      	ldr	r2, [pc, #472]	; (8107bf0 <UART_SetConfig+0x6b0>)
 8107a16:	4293      	cmp	r3, r2
 8107a18:	d130      	bne.n	8107a7c <UART_SetConfig+0x53c>
 8107a1a:	4b73      	ldr	r3, [pc, #460]	; (8107be8 <UART_SetConfig+0x6a8>)
 8107a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107a1e:	f003 0307 	and.w	r3, r3, #7
 8107a22:	2b05      	cmp	r3, #5
 8107a24:	d826      	bhi.n	8107a74 <UART_SetConfig+0x534>
 8107a26:	a201      	add	r2, pc, #4	; (adr r2, 8107a2c <UART_SetConfig+0x4ec>)
 8107a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107a2c:	08107a45 	.word	0x08107a45
 8107a30:	08107a4d 	.word	0x08107a4d
 8107a34:	08107a55 	.word	0x08107a55
 8107a38:	08107a5d 	.word	0x08107a5d
 8107a3c:	08107a65 	.word	0x08107a65
 8107a40:	08107a6d 	.word	0x08107a6d
 8107a44:	2300      	movs	r3, #0
 8107a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a4a:	e050      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107a4c:	2304      	movs	r3, #4
 8107a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a52:	e04c      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107a54:	2308      	movs	r3, #8
 8107a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a5a:	e048      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107a5c:	2310      	movs	r3, #16
 8107a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a62:	e044      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107a64:	2320      	movs	r3, #32
 8107a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a6a:	e040      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107a6c:	2340      	movs	r3, #64	; 0x40
 8107a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a72:	e03c      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107a74:	2380      	movs	r3, #128	; 0x80
 8107a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107a7a:	e038      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	681b      	ldr	r3, [r3, #0]
 8107a80:	4a5c      	ldr	r2, [pc, #368]	; (8107bf4 <UART_SetConfig+0x6b4>)
 8107a82:	4293      	cmp	r3, r2
 8107a84:	d130      	bne.n	8107ae8 <UART_SetConfig+0x5a8>
 8107a86:	4b58      	ldr	r3, [pc, #352]	; (8107be8 <UART_SetConfig+0x6a8>)
 8107a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107a8a:	f003 0307 	and.w	r3, r3, #7
 8107a8e:	2b05      	cmp	r3, #5
 8107a90:	d826      	bhi.n	8107ae0 <UART_SetConfig+0x5a0>
 8107a92:	a201      	add	r2, pc, #4	; (adr r2, 8107a98 <UART_SetConfig+0x558>)
 8107a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107a98:	08107ab1 	.word	0x08107ab1
 8107a9c:	08107ab9 	.word	0x08107ab9
 8107aa0:	08107ac1 	.word	0x08107ac1
 8107aa4:	08107ac9 	.word	0x08107ac9
 8107aa8:	08107ad1 	.word	0x08107ad1
 8107aac:	08107ad9 	.word	0x08107ad9
 8107ab0:	2302      	movs	r3, #2
 8107ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ab6:	e01a      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107ab8:	2304      	movs	r3, #4
 8107aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107abe:	e016      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107ac0:	2308      	movs	r3, #8
 8107ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ac6:	e012      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107ac8:	2310      	movs	r3, #16
 8107aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ace:	e00e      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107ad0:	2320      	movs	r3, #32
 8107ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ad6:	e00a      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107ad8:	2340      	movs	r3, #64	; 0x40
 8107ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ade:	e006      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107ae0:	2380      	movs	r3, #128	; 0x80
 8107ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107ae6:	e002      	b.n	8107aee <UART_SetConfig+0x5ae>
 8107ae8:	2380      	movs	r3, #128	; 0x80
 8107aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8107aee:	687b      	ldr	r3, [r7, #4]
 8107af0:	681b      	ldr	r3, [r3, #0]
 8107af2:	4a40      	ldr	r2, [pc, #256]	; (8107bf4 <UART_SetConfig+0x6b4>)
 8107af4:	4293      	cmp	r3, r2
 8107af6:	f040 80ef 	bne.w	8107cd8 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8107afa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8107afe:	2b20      	cmp	r3, #32
 8107b00:	dc46      	bgt.n	8107b90 <UART_SetConfig+0x650>
 8107b02:	2b02      	cmp	r3, #2
 8107b04:	f2c0 8081 	blt.w	8107c0a <UART_SetConfig+0x6ca>
 8107b08:	3b02      	subs	r3, #2
 8107b0a:	2b1e      	cmp	r3, #30
 8107b0c:	d87d      	bhi.n	8107c0a <UART_SetConfig+0x6ca>
 8107b0e:	a201      	add	r2, pc, #4	; (adr r2, 8107b14 <UART_SetConfig+0x5d4>)
 8107b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b14:	08107b97 	.word	0x08107b97
 8107b18:	08107c0b 	.word	0x08107c0b
 8107b1c:	08107b9f 	.word	0x08107b9f
 8107b20:	08107c0b 	.word	0x08107c0b
 8107b24:	08107c0b 	.word	0x08107c0b
 8107b28:	08107c0b 	.word	0x08107c0b
 8107b2c:	08107baf 	.word	0x08107baf
 8107b30:	08107c0b 	.word	0x08107c0b
 8107b34:	08107c0b 	.word	0x08107c0b
 8107b38:	08107c0b 	.word	0x08107c0b
 8107b3c:	08107c0b 	.word	0x08107c0b
 8107b40:	08107c0b 	.word	0x08107c0b
 8107b44:	08107c0b 	.word	0x08107c0b
 8107b48:	08107c0b 	.word	0x08107c0b
 8107b4c:	08107bbf 	.word	0x08107bbf
 8107b50:	08107c0b 	.word	0x08107c0b
 8107b54:	08107c0b 	.word	0x08107c0b
 8107b58:	08107c0b 	.word	0x08107c0b
 8107b5c:	08107c0b 	.word	0x08107c0b
 8107b60:	08107c0b 	.word	0x08107c0b
 8107b64:	08107c0b 	.word	0x08107c0b
 8107b68:	08107c0b 	.word	0x08107c0b
 8107b6c:	08107c0b 	.word	0x08107c0b
 8107b70:	08107c0b 	.word	0x08107c0b
 8107b74:	08107c0b 	.word	0x08107c0b
 8107b78:	08107c0b 	.word	0x08107c0b
 8107b7c:	08107c0b 	.word	0x08107c0b
 8107b80:	08107c0b 	.word	0x08107c0b
 8107b84:	08107c0b 	.word	0x08107c0b
 8107b88:	08107c0b 	.word	0x08107c0b
 8107b8c:	08107bfd 	.word	0x08107bfd
 8107b90:	2b40      	cmp	r3, #64	; 0x40
 8107b92:	d036      	beq.n	8107c02 <UART_SetConfig+0x6c2>
 8107b94:	e039      	b.n	8107c0a <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8107b96:	f7fe fa1d 	bl	8105fd4 <HAL_RCCEx_GetD3PCLK1Freq>
 8107b9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107b9c:	e03b      	b.n	8107c16 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107b9e:	f107 0314 	add.w	r3, r7, #20
 8107ba2:	4618      	mov	r0, r3
 8107ba4:	f7fe fa2c 	bl	8106000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107ba8:	69bb      	ldr	r3, [r7, #24]
 8107baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107bac:	e033      	b.n	8107c16 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107bae:	f107 0308 	add.w	r3, r7, #8
 8107bb2:	4618      	mov	r0, r3
 8107bb4:	f7fe fb78 	bl	81062a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107bb8:	68fb      	ldr	r3, [r7, #12]
 8107bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107bbc:	e02b      	b.n	8107c16 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107bbe:	4b0a      	ldr	r3, [pc, #40]	; (8107be8 <UART_SetConfig+0x6a8>)
 8107bc0:	681b      	ldr	r3, [r3, #0]
 8107bc2:	f003 0320 	and.w	r3, r3, #32
 8107bc6:	2b00      	cmp	r3, #0
 8107bc8:	d009      	beq.n	8107bde <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107bca:	4b07      	ldr	r3, [pc, #28]	; (8107be8 <UART_SetConfig+0x6a8>)
 8107bcc:	681b      	ldr	r3, [r3, #0]
 8107bce:	08db      	lsrs	r3, r3, #3
 8107bd0:	f003 0303 	and.w	r3, r3, #3
 8107bd4:	4a08      	ldr	r2, [pc, #32]	; (8107bf8 <UART_SetConfig+0x6b8>)
 8107bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8107bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107bdc:	e01b      	b.n	8107c16 <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 8107bde:	4b06      	ldr	r3, [pc, #24]	; (8107bf8 <UART_SetConfig+0x6b8>)
 8107be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107be2:	e018      	b.n	8107c16 <UART_SetConfig+0x6d6>
 8107be4:	40011400 	.word	0x40011400
 8107be8:	58024400 	.word	0x58024400
 8107bec:	40007800 	.word	0x40007800
 8107bf0:	40007c00 	.word	0x40007c00
 8107bf4:	58000c00 	.word	0x58000c00
 8107bf8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107bfc:	4bc4      	ldr	r3, [pc, #784]	; (8107f10 <UART_SetConfig+0x9d0>)
 8107bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107c00:	e009      	b.n	8107c16 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107c08:	e005      	b.n	8107c16 <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 8107c0a:	2300      	movs	r3, #0
 8107c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8107c0e:	2301      	movs	r3, #1
 8107c10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8107c14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8107c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107c18:	2b00      	cmp	r3, #0
 8107c1a:	f000 81da 	beq.w	8107fd2 <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107c1e:	687b      	ldr	r3, [r7, #4]
 8107c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107c22:	4abc      	ldr	r2, [pc, #752]	; (8107f14 <UART_SetConfig+0x9d4>)
 8107c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107c28:	461a      	mov	r2, r3
 8107c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8107c30:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107c32:	687b      	ldr	r3, [r7, #4]
 8107c34:	685a      	ldr	r2, [r3, #4]
 8107c36:	4613      	mov	r3, r2
 8107c38:	005b      	lsls	r3, r3, #1
 8107c3a:	4413      	add	r3, r2
 8107c3c:	6a3a      	ldr	r2, [r7, #32]
 8107c3e:	429a      	cmp	r2, r3
 8107c40:	d305      	bcc.n	8107c4e <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8107c42:	687b      	ldr	r3, [r7, #4]
 8107c44:	685b      	ldr	r3, [r3, #4]
 8107c46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107c48:	6a3a      	ldr	r2, [r7, #32]
 8107c4a:	429a      	cmp	r2, r3
 8107c4c:	d903      	bls.n	8107c56 <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 8107c4e:	2301      	movs	r3, #1
 8107c50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8107c54:	e1bd      	b.n	8107fd2 <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107c58:	4618      	mov	r0, r3
 8107c5a:	f04f 0100 	mov.w	r1, #0
 8107c5e:	687b      	ldr	r3, [r7, #4]
 8107c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107c62:	4aac      	ldr	r2, [pc, #688]	; (8107f14 <UART_SetConfig+0x9d4>)
 8107c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107c68:	b29a      	uxth	r2, r3
 8107c6a:	f04f 0300 	mov.w	r3, #0
 8107c6e:	f7f9 f8d3 	bl	8100e18 <__aeabi_uldivmod>
 8107c72:	4602      	mov	r2, r0
 8107c74:	460b      	mov	r3, r1
 8107c76:	4610      	mov	r0, r2
 8107c78:	4619      	mov	r1, r3
 8107c7a:	f04f 0200 	mov.w	r2, #0
 8107c7e:	f04f 0300 	mov.w	r3, #0
 8107c82:	020b      	lsls	r3, r1, #8
 8107c84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8107c88:	0202      	lsls	r2, r0, #8
 8107c8a:	6879      	ldr	r1, [r7, #4]
 8107c8c:	6849      	ldr	r1, [r1, #4]
 8107c8e:	0849      	lsrs	r1, r1, #1
 8107c90:	4608      	mov	r0, r1
 8107c92:	f04f 0100 	mov.w	r1, #0
 8107c96:	1814      	adds	r4, r2, r0
 8107c98:	eb43 0501 	adc.w	r5, r3, r1
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	685b      	ldr	r3, [r3, #4]
 8107ca0:	461a      	mov	r2, r3
 8107ca2:	f04f 0300 	mov.w	r3, #0
 8107ca6:	4620      	mov	r0, r4
 8107ca8:	4629      	mov	r1, r5
 8107caa:	f7f9 f8b5 	bl	8100e18 <__aeabi_uldivmod>
 8107cae:	4602      	mov	r2, r0
 8107cb0:	460b      	mov	r3, r1
 8107cb2:	4613      	mov	r3, r2
 8107cb4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107cb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107cbc:	d308      	bcc.n	8107cd0 <UART_SetConfig+0x790>
 8107cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107cc4:	d204      	bcs.n	8107cd0 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 8107cc6:	687b      	ldr	r3, [r7, #4]
 8107cc8:	681b      	ldr	r3, [r3, #0]
 8107cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8107ccc:	60da      	str	r2, [r3, #12]
 8107cce:	e180      	b.n	8107fd2 <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 8107cd0:	2301      	movs	r3, #1
 8107cd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8107cd6:	e17c      	b.n	8107fd2 <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8107cd8:	687b      	ldr	r3, [r7, #4]
 8107cda:	69db      	ldr	r3, [r3, #28]
 8107cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107ce0:	f040 80bf 	bne.w	8107e62 <UART_SetConfig+0x922>
  {
    switch (clocksource)
 8107ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8107ce8:	2b20      	cmp	r3, #32
 8107cea:	dc49      	bgt.n	8107d80 <UART_SetConfig+0x840>
 8107cec:	2b00      	cmp	r3, #0
 8107cee:	db7c      	blt.n	8107dea <UART_SetConfig+0x8aa>
 8107cf0:	2b20      	cmp	r3, #32
 8107cf2:	d87a      	bhi.n	8107dea <UART_SetConfig+0x8aa>
 8107cf4:	a201      	add	r2, pc, #4	; (adr r2, 8107cfc <UART_SetConfig+0x7bc>)
 8107cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107cfa:	bf00      	nop
 8107cfc:	08107d87 	.word	0x08107d87
 8107d00:	08107d8f 	.word	0x08107d8f
 8107d04:	08107deb 	.word	0x08107deb
 8107d08:	08107deb 	.word	0x08107deb
 8107d0c:	08107d97 	.word	0x08107d97
 8107d10:	08107deb 	.word	0x08107deb
 8107d14:	08107deb 	.word	0x08107deb
 8107d18:	08107deb 	.word	0x08107deb
 8107d1c:	08107da7 	.word	0x08107da7
 8107d20:	08107deb 	.word	0x08107deb
 8107d24:	08107deb 	.word	0x08107deb
 8107d28:	08107deb 	.word	0x08107deb
 8107d2c:	08107deb 	.word	0x08107deb
 8107d30:	08107deb 	.word	0x08107deb
 8107d34:	08107deb 	.word	0x08107deb
 8107d38:	08107deb 	.word	0x08107deb
 8107d3c:	08107db7 	.word	0x08107db7
 8107d40:	08107deb 	.word	0x08107deb
 8107d44:	08107deb 	.word	0x08107deb
 8107d48:	08107deb 	.word	0x08107deb
 8107d4c:	08107deb 	.word	0x08107deb
 8107d50:	08107deb 	.word	0x08107deb
 8107d54:	08107deb 	.word	0x08107deb
 8107d58:	08107deb 	.word	0x08107deb
 8107d5c:	08107deb 	.word	0x08107deb
 8107d60:	08107deb 	.word	0x08107deb
 8107d64:	08107deb 	.word	0x08107deb
 8107d68:	08107deb 	.word	0x08107deb
 8107d6c:	08107deb 	.word	0x08107deb
 8107d70:	08107deb 	.word	0x08107deb
 8107d74:	08107deb 	.word	0x08107deb
 8107d78:	08107deb 	.word	0x08107deb
 8107d7c:	08107ddd 	.word	0x08107ddd
 8107d80:	2b40      	cmp	r3, #64	; 0x40
 8107d82:	d02e      	beq.n	8107de2 <UART_SetConfig+0x8a2>
 8107d84:	e031      	b.n	8107dea <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107d86:	f7fe f8b7 	bl	8105ef8 <HAL_RCC_GetPCLK1Freq>
 8107d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107d8c:	e033      	b.n	8107df6 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107d8e:	f7fe f8c9 	bl	8105f24 <HAL_RCC_GetPCLK2Freq>
 8107d92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107d94:	e02f      	b.n	8107df6 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107d96:	f107 0314 	add.w	r3, r7, #20
 8107d9a:	4618      	mov	r0, r3
 8107d9c:	f7fe f930 	bl	8106000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107da0:	69bb      	ldr	r3, [r7, #24]
 8107da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107da4:	e027      	b.n	8107df6 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107da6:	f107 0308 	add.w	r3, r7, #8
 8107daa:	4618      	mov	r0, r3
 8107dac:	f7fe fa7c 	bl	81062a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107db0:	68fb      	ldr	r3, [r7, #12]
 8107db2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107db4:	e01f      	b.n	8107df6 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107db6:	4b58      	ldr	r3, [pc, #352]	; (8107f18 <UART_SetConfig+0x9d8>)
 8107db8:	681b      	ldr	r3, [r3, #0]
 8107dba:	f003 0320 	and.w	r3, r3, #32
 8107dbe:	2b00      	cmp	r3, #0
 8107dc0:	d009      	beq.n	8107dd6 <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107dc2:	4b55      	ldr	r3, [pc, #340]	; (8107f18 <UART_SetConfig+0x9d8>)
 8107dc4:	681b      	ldr	r3, [r3, #0]
 8107dc6:	08db      	lsrs	r3, r3, #3
 8107dc8:	f003 0303 	and.w	r3, r3, #3
 8107dcc:	4a53      	ldr	r2, [pc, #332]	; (8107f1c <UART_SetConfig+0x9dc>)
 8107dce:	fa22 f303 	lsr.w	r3, r2, r3
 8107dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107dd4:	e00f      	b.n	8107df6 <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 8107dd6:	4b51      	ldr	r3, [pc, #324]	; (8107f1c <UART_SetConfig+0x9dc>)
 8107dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107dda:	e00c      	b.n	8107df6 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107ddc:	4b4c      	ldr	r3, [pc, #304]	; (8107f10 <UART_SetConfig+0x9d0>)
 8107dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107de0:	e009      	b.n	8107df6 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107de8:	e005      	b.n	8107df6 <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 8107dea:	2300      	movs	r3, #0
 8107dec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8107dee:	2301      	movs	r3, #1
 8107df0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8107df4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8107df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107df8:	2b00      	cmp	r3, #0
 8107dfa:	f000 80ea 	beq.w	8107fd2 <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107dfe:	687b      	ldr	r3, [r7, #4]
 8107e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107e02:	4a44      	ldr	r2, [pc, #272]	; (8107f14 <UART_SetConfig+0x9d4>)
 8107e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107e08:	461a      	mov	r2, r3
 8107e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8107e10:	005a      	lsls	r2, r3, #1
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	685b      	ldr	r3, [r3, #4]
 8107e16:	085b      	lsrs	r3, r3, #1
 8107e18:	441a      	add	r2, r3
 8107e1a:	687b      	ldr	r3, [r7, #4]
 8107e1c:	685b      	ldr	r3, [r3, #4]
 8107e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8107e22:	b29b      	uxth	r3, r3
 8107e24:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e28:	2b0f      	cmp	r3, #15
 8107e2a:	d916      	bls.n	8107e5a <UART_SetConfig+0x91a>
 8107e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107e32:	d212      	bcs.n	8107e5a <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8107e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e36:	b29b      	uxth	r3, r3
 8107e38:	f023 030f 	bic.w	r3, r3, #15
 8107e3c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e40:	085b      	lsrs	r3, r3, #1
 8107e42:	b29b      	uxth	r3, r3
 8107e44:	f003 0307 	and.w	r3, r3, #7
 8107e48:	b29a      	uxth	r2, r3
 8107e4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8107e4c:	4313      	orrs	r3, r2
 8107e4e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8107e50:	687b      	ldr	r3, [r7, #4]
 8107e52:	681b      	ldr	r3, [r3, #0]
 8107e54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8107e56:	60da      	str	r2, [r3, #12]
 8107e58:	e0bb      	b.n	8107fd2 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8107e5a:	2301      	movs	r3, #1
 8107e5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8107e60:	e0b7      	b.n	8107fd2 <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 8107e62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8107e66:	2b20      	cmp	r3, #32
 8107e68:	dc4a      	bgt.n	8107f00 <UART_SetConfig+0x9c0>
 8107e6a:	2b00      	cmp	r3, #0
 8107e6c:	f2c0 8086 	blt.w	8107f7c <UART_SetConfig+0xa3c>
 8107e70:	2b20      	cmp	r3, #32
 8107e72:	f200 8083 	bhi.w	8107f7c <UART_SetConfig+0xa3c>
 8107e76:	a201      	add	r2, pc, #4	; (adr r2, 8107e7c <UART_SetConfig+0x93c>)
 8107e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107e7c:	08107f07 	.word	0x08107f07
 8107e80:	08107f21 	.word	0x08107f21
 8107e84:	08107f7d 	.word	0x08107f7d
 8107e88:	08107f7d 	.word	0x08107f7d
 8107e8c:	08107f29 	.word	0x08107f29
 8107e90:	08107f7d 	.word	0x08107f7d
 8107e94:	08107f7d 	.word	0x08107f7d
 8107e98:	08107f7d 	.word	0x08107f7d
 8107e9c:	08107f39 	.word	0x08107f39
 8107ea0:	08107f7d 	.word	0x08107f7d
 8107ea4:	08107f7d 	.word	0x08107f7d
 8107ea8:	08107f7d 	.word	0x08107f7d
 8107eac:	08107f7d 	.word	0x08107f7d
 8107eb0:	08107f7d 	.word	0x08107f7d
 8107eb4:	08107f7d 	.word	0x08107f7d
 8107eb8:	08107f7d 	.word	0x08107f7d
 8107ebc:	08107f49 	.word	0x08107f49
 8107ec0:	08107f7d 	.word	0x08107f7d
 8107ec4:	08107f7d 	.word	0x08107f7d
 8107ec8:	08107f7d 	.word	0x08107f7d
 8107ecc:	08107f7d 	.word	0x08107f7d
 8107ed0:	08107f7d 	.word	0x08107f7d
 8107ed4:	08107f7d 	.word	0x08107f7d
 8107ed8:	08107f7d 	.word	0x08107f7d
 8107edc:	08107f7d 	.word	0x08107f7d
 8107ee0:	08107f7d 	.word	0x08107f7d
 8107ee4:	08107f7d 	.word	0x08107f7d
 8107ee8:	08107f7d 	.word	0x08107f7d
 8107eec:	08107f7d 	.word	0x08107f7d
 8107ef0:	08107f7d 	.word	0x08107f7d
 8107ef4:	08107f7d 	.word	0x08107f7d
 8107ef8:	08107f7d 	.word	0x08107f7d
 8107efc:	08107f6f 	.word	0x08107f6f
 8107f00:	2b40      	cmp	r3, #64	; 0x40
 8107f02:	d037      	beq.n	8107f74 <UART_SetConfig+0xa34>
 8107f04:	e03a      	b.n	8107f7c <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107f06:	f7fd fff7 	bl	8105ef8 <HAL_RCC_GetPCLK1Freq>
 8107f0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107f0c:	e03c      	b.n	8107f88 <UART_SetConfig+0xa48>
 8107f0e:	bf00      	nop
 8107f10:	003d0900 	.word	0x003d0900
 8107f14:	08112c8c 	.word	0x08112c8c
 8107f18:	58024400 	.word	0x58024400
 8107f1c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107f20:	f7fe f800 	bl	8105f24 <HAL_RCC_GetPCLK2Freq>
 8107f24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107f26:	e02f      	b.n	8107f88 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107f28:	f107 0314 	add.w	r3, r7, #20
 8107f2c:	4618      	mov	r0, r3
 8107f2e:	f7fe f867 	bl	8106000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107f32:	69bb      	ldr	r3, [r7, #24]
 8107f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107f36:	e027      	b.n	8107f88 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107f38:	f107 0308 	add.w	r3, r7, #8
 8107f3c:	4618      	mov	r0, r3
 8107f3e:	f7fe f9b3 	bl	81062a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107f42:	68fb      	ldr	r3, [r7, #12]
 8107f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107f46:	e01f      	b.n	8107f88 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107f48:	4b2c      	ldr	r3, [pc, #176]	; (8107ffc <UART_SetConfig+0xabc>)
 8107f4a:	681b      	ldr	r3, [r3, #0]
 8107f4c:	f003 0320 	and.w	r3, r3, #32
 8107f50:	2b00      	cmp	r3, #0
 8107f52:	d009      	beq.n	8107f68 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107f54:	4b29      	ldr	r3, [pc, #164]	; (8107ffc <UART_SetConfig+0xabc>)
 8107f56:	681b      	ldr	r3, [r3, #0]
 8107f58:	08db      	lsrs	r3, r3, #3
 8107f5a:	f003 0303 	and.w	r3, r3, #3
 8107f5e:	4a28      	ldr	r2, [pc, #160]	; (8108000 <UART_SetConfig+0xac0>)
 8107f60:	fa22 f303 	lsr.w	r3, r2, r3
 8107f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107f66:	e00f      	b.n	8107f88 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 8107f68:	4b25      	ldr	r3, [pc, #148]	; (8108000 <UART_SetConfig+0xac0>)
 8107f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107f6c:	e00c      	b.n	8107f88 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107f6e:	4b25      	ldr	r3, [pc, #148]	; (8108004 <UART_SetConfig+0xac4>)
 8107f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107f72:	e009      	b.n	8107f88 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107f7a:	e005      	b.n	8107f88 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 8107f7c:	2300      	movs	r3, #0
 8107f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8107f80:	2301      	movs	r3, #1
 8107f82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8107f86:	bf00      	nop
    }

    if (pclk != 0U)
 8107f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107f8a:	2b00      	cmp	r3, #0
 8107f8c:	d021      	beq.n	8107fd2 <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107f8e:	687b      	ldr	r3, [r7, #4]
 8107f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107f92:	4a1d      	ldr	r2, [pc, #116]	; (8108008 <UART_SetConfig+0xac8>)
 8107f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107f98:	461a      	mov	r2, r3
 8107f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107f9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8107fa0:	687b      	ldr	r3, [r7, #4]
 8107fa2:	685b      	ldr	r3, [r3, #4]
 8107fa4:	085b      	lsrs	r3, r3, #1
 8107fa6:	441a      	add	r2, r3
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	685b      	ldr	r3, [r3, #4]
 8107fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8107fb0:	b29b      	uxth	r3, r3
 8107fb2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107fb6:	2b0f      	cmp	r3, #15
 8107fb8:	d908      	bls.n	8107fcc <UART_SetConfig+0xa8c>
 8107fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107fc0:	d204      	bcs.n	8107fcc <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 8107fc2:	687b      	ldr	r3, [r7, #4]
 8107fc4:	681b      	ldr	r3, [r3, #0]
 8107fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8107fc8:	60da      	str	r2, [r3, #12]
 8107fca:	e002      	b.n	8107fd2 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8107fcc:	2301      	movs	r3, #1
 8107fce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8107fd2:	687b      	ldr	r3, [r7, #4]
 8107fd4:	2201      	movs	r2, #1
 8107fd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8107fda:	687b      	ldr	r3, [r7, #4]
 8107fdc:	2201      	movs	r2, #1
 8107fde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8107fe2:	687b      	ldr	r3, [r7, #4]
 8107fe4:	2200      	movs	r2, #0
 8107fe6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8107fe8:	687b      	ldr	r3, [r7, #4]
 8107fea:	2200      	movs	r2, #0
 8107fec:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8107fee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8107ff2:	4618      	mov	r0, r3
 8107ff4:	3738      	adds	r7, #56	; 0x38
 8107ff6:	46bd      	mov	sp, r7
 8107ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8107ffa:	bf00      	nop
 8107ffc:	58024400 	.word	0x58024400
 8108000:	03d09000 	.word	0x03d09000
 8108004:	003d0900 	.word	0x003d0900
 8108008:	08112c8c 	.word	0x08112c8c

0810800c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810800c:	b480      	push	{r7}
 810800e:	b083      	sub	sp, #12
 8108010:	af00      	add	r7, sp, #0
 8108012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108018:	f003 0301 	and.w	r3, r3, #1
 810801c:	2b00      	cmp	r3, #0
 810801e:	d00a      	beq.n	8108036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108020:	687b      	ldr	r3, [r7, #4]
 8108022:	681b      	ldr	r3, [r3, #0]
 8108024:	685b      	ldr	r3, [r3, #4]
 8108026:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810802e:	687b      	ldr	r3, [r7, #4]
 8108030:	681b      	ldr	r3, [r3, #0]
 8108032:	430a      	orrs	r2, r1
 8108034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108036:	687b      	ldr	r3, [r7, #4]
 8108038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810803a:	f003 0302 	and.w	r3, r3, #2
 810803e:	2b00      	cmp	r3, #0
 8108040:	d00a      	beq.n	8108058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108042:	687b      	ldr	r3, [r7, #4]
 8108044:	681b      	ldr	r3, [r3, #0]
 8108046:	685b      	ldr	r3, [r3, #4]
 8108048:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810804c:	687b      	ldr	r3, [r7, #4]
 810804e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108050:	687b      	ldr	r3, [r7, #4]
 8108052:	681b      	ldr	r3, [r3, #0]
 8108054:	430a      	orrs	r2, r1
 8108056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108058:	687b      	ldr	r3, [r7, #4]
 810805a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810805c:	f003 0304 	and.w	r3, r3, #4
 8108060:	2b00      	cmp	r3, #0
 8108062:	d00a      	beq.n	810807a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108064:	687b      	ldr	r3, [r7, #4]
 8108066:	681b      	ldr	r3, [r3, #0]
 8108068:	685b      	ldr	r3, [r3, #4]
 810806a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810806e:	687b      	ldr	r3, [r7, #4]
 8108070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108072:	687b      	ldr	r3, [r7, #4]
 8108074:	681b      	ldr	r3, [r3, #0]
 8108076:	430a      	orrs	r2, r1
 8108078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810807a:	687b      	ldr	r3, [r7, #4]
 810807c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810807e:	f003 0308 	and.w	r3, r3, #8
 8108082:	2b00      	cmp	r3, #0
 8108084:	d00a      	beq.n	810809c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108086:	687b      	ldr	r3, [r7, #4]
 8108088:	681b      	ldr	r3, [r3, #0]
 810808a:	685b      	ldr	r3, [r3, #4]
 810808c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108090:	687b      	ldr	r3, [r7, #4]
 8108092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108094:	687b      	ldr	r3, [r7, #4]
 8108096:	681b      	ldr	r3, [r3, #0]
 8108098:	430a      	orrs	r2, r1
 810809a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810809c:	687b      	ldr	r3, [r7, #4]
 810809e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81080a0:	f003 0310 	and.w	r3, r3, #16
 81080a4:	2b00      	cmp	r3, #0
 81080a6:	d00a      	beq.n	81080be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81080a8:	687b      	ldr	r3, [r7, #4]
 81080aa:	681b      	ldr	r3, [r3, #0]
 81080ac:	689b      	ldr	r3, [r3, #8]
 81080ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81080b2:	687b      	ldr	r3, [r7, #4]
 81080b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81080b6:	687b      	ldr	r3, [r7, #4]
 81080b8:	681b      	ldr	r3, [r3, #0]
 81080ba:	430a      	orrs	r2, r1
 81080bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81080be:	687b      	ldr	r3, [r7, #4]
 81080c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81080c2:	f003 0320 	and.w	r3, r3, #32
 81080c6:	2b00      	cmp	r3, #0
 81080c8:	d00a      	beq.n	81080e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81080ca:	687b      	ldr	r3, [r7, #4]
 81080cc:	681b      	ldr	r3, [r3, #0]
 81080ce:	689b      	ldr	r3, [r3, #8]
 81080d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81080d4:	687b      	ldr	r3, [r7, #4]
 81080d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81080d8:	687b      	ldr	r3, [r7, #4]
 81080da:	681b      	ldr	r3, [r3, #0]
 81080dc:	430a      	orrs	r2, r1
 81080de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81080e0:	687b      	ldr	r3, [r7, #4]
 81080e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81080e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81080e8:	2b00      	cmp	r3, #0
 81080ea:	d01a      	beq.n	8108122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81080ec:	687b      	ldr	r3, [r7, #4]
 81080ee:	681b      	ldr	r3, [r3, #0]
 81080f0:	685b      	ldr	r3, [r3, #4]
 81080f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81080f6:	687b      	ldr	r3, [r7, #4]
 81080f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81080fa:	687b      	ldr	r3, [r7, #4]
 81080fc:	681b      	ldr	r3, [r3, #0]
 81080fe:	430a      	orrs	r2, r1
 8108100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108102:	687b      	ldr	r3, [r7, #4]
 8108104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810810a:	d10a      	bne.n	8108122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810810c:	687b      	ldr	r3, [r7, #4]
 810810e:	681b      	ldr	r3, [r3, #0]
 8108110:	685b      	ldr	r3, [r3, #4]
 8108112:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8108116:	687b      	ldr	r3, [r7, #4]
 8108118:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810811a:	687b      	ldr	r3, [r7, #4]
 810811c:	681b      	ldr	r3, [r3, #0]
 810811e:	430a      	orrs	r2, r1
 8108120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108122:	687b      	ldr	r3, [r7, #4]
 8108124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810812a:	2b00      	cmp	r3, #0
 810812c:	d00a      	beq.n	8108144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810812e:	687b      	ldr	r3, [r7, #4]
 8108130:	681b      	ldr	r3, [r3, #0]
 8108132:	685b      	ldr	r3, [r3, #4]
 8108134:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108138:	687b      	ldr	r3, [r7, #4]
 810813a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810813c:	687b      	ldr	r3, [r7, #4]
 810813e:	681b      	ldr	r3, [r3, #0]
 8108140:	430a      	orrs	r2, r1
 8108142:	605a      	str	r2, [r3, #4]
  }
}
 8108144:	bf00      	nop
 8108146:	370c      	adds	r7, #12
 8108148:	46bd      	mov	sp, r7
 810814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810814e:	4770      	bx	lr

08108150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108150:	b580      	push	{r7, lr}
 8108152:	b086      	sub	sp, #24
 8108154:	af02      	add	r7, sp, #8
 8108156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108158:	687b      	ldr	r3, [r7, #4]
 810815a:	2200      	movs	r2, #0
 810815c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8108160:	f7fa f898 	bl	8102294 <HAL_GetTick>
 8108164:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108166:	687b      	ldr	r3, [r7, #4]
 8108168:	681b      	ldr	r3, [r3, #0]
 810816a:	681b      	ldr	r3, [r3, #0]
 810816c:	f003 0308 	and.w	r3, r3, #8
 8108170:	2b08      	cmp	r3, #8
 8108172:	d10e      	bne.n	8108192 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108178:	9300      	str	r3, [sp, #0]
 810817a:	68fb      	ldr	r3, [r7, #12]
 810817c:	2200      	movs	r2, #0
 810817e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8108182:	6878      	ldr	r0, [r7, #4]
 8108184:	f000 f82c 	bl	81081e0 <UART_WaitOnFlagUntilTimeout>
 8108188:	4603      	mov	r3, r0
 810818a:	2b00      	cmp	r3, #0
 810818c:	d001      	beq.n	8108192 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810818e:	2303      	movs	r3, #3
 8108190:	e022      	b.n	81081d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108192:	687b      	ldr	r3, [r7, #4]
 8108194:	681b      	ldr	r3, [r3, #0]
 8108196:	681b      	ldr	r3, [r3, #0]
 8108198:	f003 0304 	and.w	r3, r3, #4
 810819c:	2b04      	cmp	r3, #4
 810819e:	d10e      	bne.n	81081be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81081a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81081a4:	9300      	str	r3, [sp, #0]
 81081a6:	68fb      	ldr	r3, [r7, #12]
 81081a8:	2200      	movs	r2, #0
 81081aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81081ae:	6878      	ldr	r0, [r7, #4]
 81081b0:	f000 f816 	bl	81081e0 <UART_WaitOnFlagUntilTimeout>
 81081b4:	4603      	mov	r3, r0
 81081b6:	2b00      	cmp	r3, #0
 81081b8:	d001      	beq.n	81081be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81081ba:	2303      	movs	r3, #3
 81081bc:	e00c      	b.n	81081d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81081be:	687b      	ldr	r3, [r7, #4]
 81081c0:	2220      	movs	r2, #32
 81081c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 81081c6:	687b      	ldr	r3, [r7, #4]
 81081c8:	2220      	movs	r2, #32
 81081ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 81081ce:	687b      	ldr	r3, [r7, #4]
 81081d0:	2200      	movs	r2, #0
 81081d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81081d6:	2300      	movs	r3, #0
}
 81081d8:	4618      	mov	r0, r3
 81081da:	3710      	adds	r7, #16
 81081dc:	46bd      	mov	sp, r7
 81081de:	bd80      	pop	{r7, pc}

081081e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81081e0:	b580      	push	{r7, lr}
 81081e2:	b084      	sub	sp, #16
 81081e4:	af00      	add	r7, sp, #0
 81081e6:	60f8      	str	r0, [r7, #12]
 81081e8:	60b9      	str	r1, [r7, #8]
 81081ea:	603b      	str	r3, [r7, #0]
 81081ec:	4613      	mov	r3, r2
 81081ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81081f0:	e062      	b.n	81082b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81081f2:	69bb      	ldr	r3, [r7, #24]
 81081f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81081f8:	d05e      	beq.n	81082b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81081fa:	f7fa f84b 	bl	8102294 <HAL_GetTick>
 81081fe:	4602      	mov	r2, r0
 8108200:	683b      	ldr	r3, [r7, #0]
 8108202:	1ad3      	subs	r3, r2, r3
 8108204:	69ba      	ldr	r2, [r7, #24]
 8108206:	429a      	cmp	r2, r3
 8108208:	d302      	bcc.n	8108210 <UART_WaitOnFlagUntilTimeout+0x30>
 810820a:	69bb      	ldr	r3, [r7, #24]
 810820c:	2b00      	cmp	r3, #0
 810820e:	d11d      	bne.n	810824c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8108210:	68fb      	ldr	r3, [r7, #12]
 8108212:	681b      	ldr	r3, [r3, #0]
 8108214:	681a      	ldr	r2, [r3, #0]
 8108216:	68fb      	ldr	r3, [r7, #12]
 8108218:	681b      	ldr	r3, [r3, #0]
 810821a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810821e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108220:	68fb      	ldr	r3, [r7, #12]
 8108222:	681b      	ldr	r3, [r3, #0]
 8108224:	689a      	ldr	r2, [r3, #8]
 8108226:	68fb      	ldr	r3, [r7, #12]
 8108228:	681b      	ldr	r3, [r3, #0]
 810822a:	f022 0201 	bic.w	r2, r2, #1
 810822e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8108230:	68fb      	ldr	r3, [r7, #12]
 8108232:	2220      	movs	r2, #32
 8108234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8108238:	68fb      	ldr	r3, [r7, #12]
 810823a:	2220      	movs	r2, #32
 810823c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8108240:	68fb      	ldr	r3, [r7, #12]
 8108242:	2200      	movs	r2, #0
 8108244:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8108248:	2303      	movs	r3, #3
 810824a:	e045      	b.n	81082d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810824c:	68fb      	ldr	r3, [r7, #12]
 810824e:	681b      	ldr	r3, [r3, #0]
 8108250:	681b      	ldr	r3, [r3, #0]
 8108252:	f003 0304 	and.w	r3, r3, #4
 8108256:	2b00      	cmp	r3, #0
 8108258:	d02e      	beq.n	81082b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810825a:	68fb      	ldr	r3, [r7, #12]
 810825c:	681b      	ldr	r3, [r3, #0]
 810825e:	69db      	ldr	r3, [r3, #28]
 8108260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108268:	d126      	bne.n	81082b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810826a:	68fb      	ldr	r3, [r7, #12]
 810826c:	681b      	ldr	r3, [r3, #0]
 810826e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108272:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8108274:	68fb      	ldr	r3, [r7, #12]
 8108276:	681b      	ldr	r3, [r3, #0]
 8108278:	681a      	ldr	r2, [r3, #0]
 810827a:	68fb      	ldr	r3, [r7, #12]
 810827c:	681b      	ldr	r3, [r3, #0]
 810827e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8108282:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108284:	68fb      	ldr	r3, [r7, #12]
 8108286:	681b      	ldr	r3, [r3, #0]
 8108288:	689a      	ldr	r2, [r3, #8]
 810828a:	68fb      	ldr	r3, [r7, #12]
 810828c:	681b      	ldr	r3, [r3, #0]
 810828e:	f022 0201 	bic.w	r2, r2, #1
 8108292:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8108294:	68fb      	ldr	r3, [r7, #12]
 8108296:	2220      	movs	r2, #32
 8108298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 810829c:	68fb      	ldr	r3, [r7, #12]
 810829e:	2220      	movs	r2, #32
 81082a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81082a4:	68fb      	ldr	r3, [r7, #12]
 81082a6:	2220      	movs	r2, #32
 81082a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81082ac:	68fb      	ldr	r3, [r7, #12]
 81082ae:	2200      	movs	r2, #0
 81082b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 81082b4:	2303      	movs	r3, #3
 81082b6:	e00f      	b.n	81082d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81082b8:	68fb      	ldr	r3, [r7, #12]
 81082ba:	681b      	ldr	r3, [r3, #0]
 81082bc:	69da      	ldr	r2, [r3, #28]
 81082be:	68bb      	ldr	r3, [r7, #8]
 81082c0:	4013      	ands	r3, r2
 81082c2:	68ba      	ldr	r2, [r7, #8]
 81082c4:	429a      	cmp	r2, r3
 81082c6:	bf0c      	ite	eq
 81082c8:	2301      	moveq	r3, #1
 81082ca:	2300      	movne	r3, #0
 81082cc:	b2db      	uxtb	r3, r3
 81082ce:	461a      	mov	r2, r3
 81082d0:	79fb      	ldrb	r3, [r7, #7]
 81082d2:	429a      	cmp	r2, r3
 81082d4:	d08d      	beq.n	81081f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81082d6:	2300      	movs	r3, #0
}
 81082d8:	4618      	mov	r0, r3
 81082da:	3710      	adds	r7, #16
 81082dc:	46bd      	mov	sp, r7
 81082de:	bd80      	pop	{r7, pc}

081082e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 81082e0:	b480      	push	{r7}
 81082e2:	b083      	sub	sp, #12
 81082e4:	af00      	add	r7, sp, #0
 81082e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 81082e8:	687b      	ldr	r3, [r7, #4]
 81082ea:	681b      	ldr	r3, [r3, #0]
 81082ec:	681a      	ldr	r2, [r3, #0]
 81082ee:	687b      	ldr	r3, [r7, #4]
 81082f0:	681b      	ldr	r3, [r3, #0]
 81082f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 81082f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 81082f8:	687b      	ldr	r3, [r7, #4]
 81082fa:	681b      	ldr	r3, [r3, #0]
 81082fc:	689a      	ldr	r2, [r3, #8]
 81082fe:	687b      	ldr	r3, [r7, #4]
 8108300:	681b      	ldr	r3, [r3, #0]
 8108302:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8108306:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8108308:	687b      	ldr	r3, [r7, #4]
 810830a:	2220      	movs	r2, #32
 810830c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8108310:	bf00      	nop
 8108312:	370c      	adds	r7, #12
 8108314:	46bd      	mov	sp, r7
 8108316:	f85d 7b04 	ldr.w	r7, [sp], #4
 810831a:	4770      	bx	lr

0810831c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810831c:	b480      	push	{r7}
 810831e:	b083      	sub	sp, #12
 8108320:	af00      	add	r7, sp, #0
 8108322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108324:	687b      	ldr	r3, [r7, #4]
 8108326:	681b      	ldr	r3, [r3, #0]
 8108328:	681a      	ldr	r2, [r3, #0]
 810832a:	687b      	ldr	r3, [r7, #4]
 810832c:	681b      	ldr	r3, [r3, #0]
 810832e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8108332:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108334:	687b      	ldr	r3, [r7, #4]
 8108336:	681b      	ldr	r3, [r3, #0]
 8108338:	689b      	ldr	r3, [r3, #8]
 810833a:	687a      	ldr	r2, [r7, #4]
 810833c:	6812      	ldr	r2, [r2, #0]
 810833e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108342:	f023 0301 	bic.w	r3, r3, #1
 8108346:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8108348:	687b      	ldr	r3, [r7, #4]
 810834a:	2220      	movs	r2, #32
 810834c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8108350:	687b      	ldr	r3, [r7, #4]
 8108352:	2200      	movs	r2, #0
 8108354:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8108356:	bf00      	nop
 8108358:	370c      	adds	r7, #12
 810835a:	46bd      	mov	sp, r7
 810835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108360:	4770      	bx	lr

08108362 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8108362:	b580      	push	{r7, lr}
 8108364:	b084      	sub	sp, #16
 8108366:	af00      	add	r7, sp, #0
 8108368:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810836a:	687b      	ldr	r3, [r7, #4]
 810836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810836e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8108370:	687b      	ldr	r3, [r7, #4]
 8108372:	69db      	ldr	r3, [r3, #28]
 8108374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108378:	d01f      	beq.n	81083ba <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 810837a:	68fb      	ldr	r3, [r7, #12]
 810837c:	2200      	movs	r2, #0
 810837e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8108382:	68fb      	ldr	r3, [r7, #12]
 8108384:	681b      	ldr	r3, [r3, #0]
 8108386:	681a      	ldr	r2, [r3, #0]
 8108388:	68fb      	ldr	r3, [r7, #12]
 810838a:	681b      	ldr	r3, [r3, #0]
 810838c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8108390:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108392:	68fb      	ldr	r3, [r7, #12]
 8108394:	681b      	ldr	r3, [r3, #0]
 8108396:	689a      	ldr	r2, [r3, #8]
 8108398:	68fb      	ldr	r3, [r7, #12]
 810839a:	681b      	ldr	r3, [r3, #0]
 810839c:	f022 0201 	bic.w	r2, r2, #1
 81083a0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81083a2:	68fb      	ldr	r3, [r7, #12]
 81083a4:	681b      	ldr	r3, [r3, #0]
 81083a6:	689a      	ldr	r2, [r3, #8]
 81083a8:	68fb      	ldr	r3, [r7, #12]
 81083aa:	681b      	ldr	r3, [r3, #0]
 81083ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 81083b0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 81083b2:	68fb      	ldr	r3, [r7, #12]
 81083b4:	2220      	movs	r2, #32
 81083b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 81083ba:	68f8      	ldr	r0, [r7, #12]
 81083bc:	f7ff f8a2 	bl	8107504 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81083c0:	bf00      	nop
 81083c2:	3710      	adds	r7, #16
 81083c4:	46bd      	mov	sp, r7
 81083c6:	bd80      	pop	{r7, pc}

081083c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 81083c8:	b580      	push	{r7, lr}
 81083ca:	b084      	sub	sp, #16
 81083cc:	af00      	add	r7, sp, #0
 81083ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81083d0:	687b      	ldr	r3, [r7, #4]
 81083d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81083d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 81083d6:	68f8      	ldr	r0, [r7, #12]
 81083d8:	f7ff f89e 	bl	8107518 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81083dc:	bf00      	nop
 81083de:	3710      	adds	r7, #16
 81083e0:	46bd      	mov	sp, r7
 81083e2:	bd80      	pop	{r7, pc}

081083e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 81083e4:	b580      	push	{r7, lr}
 81083e6:	b086      	sub	sp, #24
 81083e8:	af00      	add	r7, sp, #0
 81083ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81083ec:	687b      	ldr	r3, [r7, #4]
 81083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81083f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 81083f2:	697b      	ldr	r3, [r7, #20]
 81083f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81083f8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 81083fa:	697b      	ldr	r3, [r7, #20]
 81083fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108400:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8108402:	697b      	ldr	r3, [r7, #20]
 8108404:	681b      	ldr	r3, [r3, #0]
 8108406:	689b      	ldr	r3, [r3, #8]
 8108408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810840c:	2b80      	cmp	r3, #128	; 0x80
 810840e:	d109      	bne.n	8108424 <UART_DMAError+0x40>
 8108410:	693b      	ldr	r3, [r7, #16]
 8108412:	2b21      	cmp	r3, #33	; 0x21
 8108414:	d106      	bne.n	8108424 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8108416:	697b      	ldr	r3, [r7, #20]
 8108418:	2200      	movs	r2, #0
 810841a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810841e:	6978      	ldr	r0, [r7, #20]
 8108420:	f7ff ff5e 	bl	81082e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8108424:	697b      	ldr	r3, [r7, #20]
 8108426:	681b      	ldr	r3, [r3, #0]
 8108428:	689b      	ldr	r3, [r3, #8]
 810842a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810842e:	2b40      	cmp	r3, #64	; 0x40
 8108430:	d109      	bne.n	8108446 <UART_DMAError+0x62>
 8108432:	68fb      	ldr	r3, [r7, #12]
 8108434:	2b22      	cmp	r3, #34	; 0x22
 8108436:	d106      	bne.n	8108446 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8108438:	697b      	ldr	r3, [r7, #20]
 810843a:	2200      	movs	r2, #0
 810843c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8108440:	6978      	ldr	r0, [r7, #20]
 8108442:	f7ff ff6b 	bl	810831c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8108446:	697b      	ldr	r3, [r7, #20]
 8108448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810844c:	f043 0210 	orr.w	r2, r3, #16
 8108450:	697b      	ldr	r3, [r7, #20]
 8108452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8108456:	6978      	ldr	r0, [r7, #20]
 8108458:	f7ff f868 	bl	810752c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810845c:	bf00      	nop
 810845e:	3718      	adds	r7, #24
 8108460:	46bd      	mov	sp, r7
 8108462:	bd80      	pop	{r7, pc}

08108464 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108464:	b480      	push	{r7}
 8108466:	b085      	sub	sp, #20
 8108468:	af00      	add	r7, sp, #0
 810846a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810846c:	687b      	ldr	r3, [r7, #4]
 810846e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108472:	2b01      	cmp	r3, #1
 8108474:	d101      	bne.n	810847a <HAL_UARTEx_DisableFifoMode+0x16>
 8108476:	2302      	movs	r3, #2
 8108478:	e027      	b.n	81084ca <HAL_UARTEx_DisableFifoMode+0x66>
 810847a:	687b      	ldr	r3, [r7, #4]
 810847c:	2201      	movs	r2, #1
 810847e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8108482:	687b      	ldr	r3, [r7, #4]
 8108484:	2224      	movs	r2, #36	; 0x24
 8108486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810848a:	687b      	ldr	r3, [r7, #4]
 810848c:	681b      	ldr	r3, [r3, #0]
 810848e:	681b      	ldr	r3, [r3, #0]
 8108490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108492:	687b      	ldr	r3, [r7, #4]
 8108494:	681b      	ldr	r3, [r3, #0]
 8108496:	681a      	ldr	r2, [r3, #0]
 8108498:	687b      	ldr	r3, [r7, #4]
 810849a:	681b      	ldr	r3, [r3, #0]
 810849c:	f022 0201 	bic.w	r2, r2, #1
 81084a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81084a2:	68fb      	ldr	r3, [r7, #12]
 81084a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81084a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81084aa:	687b      	ldr	r3, [r7, #4]
 81084ac:	2200      	movs	r2, #0
 81084ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81084b0:	687b      	ldr	r3, [r7, #4]
 81084b2:	681b      	ldr	r3, [r3, #0]
 81084b4:	68fa      	ldr	r2, [r7, #12]
 81084b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81084b8:	687b      	ldr	r3, [r7, #4]
 81084ba:	2220      	movs	r2, #32
 81084bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81084c0:	687b      	ldr	r3, [r7, #4]
 81084c2:	2200      	movs	r2, #0
 81084c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81084c8:	2300      	movs	r3, #0
}
 81084ca:	4618      	mov	r0, r3
 81084cc:	3714      	adds	r7, #20
 81084ce:	46bd      	mov	sp, r7
 81084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084d4:	4770      	bx	lr

081084d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81084d6:	b580      	push	{r7, lr}
 81084d8:	b084      	sub	sp, #16
 81084da:	af00      	add	r7, sp, #0
 81084dc:	6078      	str	r0, [r7, #4]
 81084de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81084e0:	687b      	ldr	r3, [r7, #4]
 81084e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 81084e6:	2b01      	cmp	r3, #1
 81084e8:	d101      	bne.n	81084ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81084ea:	2302      	movs	r3, #2
 81084ec:	e02d      	b.n	810854a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81084ee:	687b      	ldr	r3, [r7, #4]
 81084f0:	2201      	movs	r2, #1
 81084f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 81084f6:	687b      	ldr	r3, [r7, #4]
 81084f8:	2224      	movs	r2, #36	; 0x24
 81084fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81084fe:	687b      	ldr	r3, [r7, #4]
 8108500:	681b      	ldr	r3, [r3, #0]
 8108502:	681b      	ldr	r3, [r3, #0]
 8108504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108506:	687b      	ldr	r3, [r7, #4]
 8108508:	681b      	ldr	r3, [r3, #0]
 810850a:	681a      	ldr	r2, [r3, #0]
 810850c:	687b      	ldr	r3, [r7, #4]
 810850e:	681b      	ldr	r3, [r3, #0]
 8108510:	f022 0201 	bic.w	r2, r2, #1
 8108514:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108516:	687b      	ldr	r3, [r7, #4]
 8108518:	681b      	ldr	r3, [r3, #0]
 810851a:	689b      	ldr	r3, [r3, #8]
 810851c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108520:	687b      	ldr	r3, [r7, #4]
 8108522:	681b      	ldr	r3, [r3, #0]
 8108524:	683a      	ldr	r2, [r7, #0]
 8108526:	430a      	orrs	r2, r1
 8108528:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810852a:	6878      	ldr	r0, [r7, #4]
 810852c:	f000 f850 	bl	81085d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108530:	687b      	ldr	r3, [r7, #4]
 8108532:	681b      	ldr	r3, [r3, #0]
 8108534:	68fa      	ldr	r2, [r7, #12]
 8108536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108538:	687b      	ldr	r3, [r7, #4]
 810853a:	2220      	movs	r2, #32
 810853c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108540:	687b      	ldr	r3, [r7, #4]
 8108542:	2200      	movs	r2, #0
 8108544:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108548:	2300      	movs	r3, #0
}
 810854a:	4618      	mov	r0, r3
 810854c:	3710      	adds	r7, #16
 810854e:	46bd      	mov	sp, r7
 8108550:	bd80      	pop	{r7, pc}

08108552 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108552:	b580      	push	{r7, lr}
 8108554:	b084      	sub	sp, #16
 8108556:	af00      	add	r7, sp, #0
 8108558:	6078      	str	r0, [r7, #4]
 810855a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810855c:	687b      	ldr	r3, [r7, #4]
 810855e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8108562:	2b01      	cmp	r3, #1
 8108564:	d101      	bne.n	810856a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8108566:	2302      	movs	r3, #2
 8108568:	e02d      	b.n	81085c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810856a:	687b      	ldr	r3, [r7, #4]
 810856c:	2201      	movs	r2, #1
 810856e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8108572:	687b      	ldr	r3, [r7, #4]
 8108574:	2224      	movs	r2, #36	; 0x24
 8108576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810857a:	687b      	ldr	r3, [r7, #4]
 810857c:	681b      	ldr	r3, [r3, #0]
 810857e:	681b      	ldr	r3, [r3, #0]
 8108580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108582:	687b      	ldr	r3, [r7, #4]
 8108584:	681b      	ldr	r3, [r3, #0]
 8108586:	681a      	ldr	r2, [r3, #0]
 8108588:	687b      	ldr	r3, [r7, #4]
 810858a:	681b      	ldr	r3, [r3, #0]
 810858c:	f022 0201 	bic.w	r2, r2, #1
 8108590:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8108592:	687b      	ldr	r3, [r7, #4]
 8108594:	681b      	ldr	r3, [r3, #0]
 8108596:	689b      	ldr	r3, [r3, #8]
 8108598:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810859c:	687b      	ldr	r3, [r7, #4]
 810859e:	681b      	ldr	r3, [r3, #0]
 81085a0:	683a      	ldr	r2, [r7, #0]
 81085a2:	430a      	orrs	r2, r1
 81085a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81085a6:	6878      	ldr	r0, [r7, #4]
 81085a8:	f000 f812 	bl	81085d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81085ac:	687b      	ldr	r3, [r7, #4]
 81085ae:	681b      	ldr	r3, [r3, #0]
 81085b0:	68fa      	ldr	r2, [r7, #12]
 81085b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81085b4:	687b      	ldr	r3, [r7, #4]
 81085b6:	2220      	movs	r2, #32
 81085b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81085bc:	687b      	ldr	r3, [r7, #4]
 81085be:	2200      	movs	r2, #0
 81085c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81085c4:	2300      	movs	r3, #0
}
 81085c6:	4618      	mov	r0, r3
 81085c8:	3710      	adds	r7, #16
 81085ca:	46bd      	mov	sp, r7
 81085cc:	bd80      	pop	{r7, pc}
	...

081085d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81085d0:	b480      	push	{r7}
 81085d2:	b089      	sub	sp, #36	; 0x24
 81085d4:	af00      	add	r7, sp, #0
 81085d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 81085d8:	4a2f      	ldr	r2, [pc, #188]	; (8108698 <UARTEx_SetNbDataToProcess+0xc8>)
 81085da:	f107 0314 	add.w	r3, r7, #20
 81085de:	e892 0003 	ldmia.w	r2, {r0, r1}
 81085e2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 81085e6:	4a2d      	ldr	r2, [pc, #180]	; (810869c <UARTEx_SetNbDataToProcess+0xcc>)
 81085e8:	f107 030c 	add.w	r3, r7, #12
 81085ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 81085f0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81085f4:	687b      	ldr	r3, [r7, #4]
 81085f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81085f8:	2b00      	cmp	r3, #0
 81085fa:	d108      	bne.n	810860e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 81085fc:	687b      	ldr	r3, [r7, #4]
 81085fe:	2201      	movs	r2, #1
 8108600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8108604:	687b      	ldr	r3, [r7, #4]
 8108606:	2201      	movs	r2, #1
 8108608:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810860c:	e03d      	b.n	810868a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810860e:	2310      	movs	r3, #16
 8108610:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8108612:	2310      	movs	r3, #16
 8108614:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8108616:	687b      	ldr	r3, [r7, #4]
 8108618:	681b      	ldr	r3, [r3, #0]
 810861a:	689b      	ldr	r3, [r3, #8]
 810861c:	0e5b      	lsrs	r3, r3, #25
 810861e:	b2db      	uxtb	r3, r3
 8108620:	f003 0307 	and.w	r3, r3, #7
 8108624:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108626:	687b      	ldr	r3, [r7, #4]
 8108628:	681b      	ldr	r3, [r3, #0]
 810862a:	689b      	ldr	r3, [r3, #8]
 810862c:	0f5b      	lsrs	r3, r3, #29
 810862e:	b2db      	uxtb	r3, r3
 8108630:	f003 0307 	and.w	r3, r3, #7
 8108634:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8108636:	7fbb      	ldrb	r3, [r7, #30]
 8108638:	7f3a      	ldrb	r2, [r7, #28]
 810863a:	f107 0120 	add.w	r1, r7, #32
 810863e:	440a      	add	r2, r1
 8108640:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8108644:	fb02 f303 	mul.w	r3, r2, r3
 8108648:	7f3a      	ldrb	r2, [r7, #28]
 810864a:	f107 0120 	add.w	r1, r7, #32
 810864e:	440a      	add	r2, r1
 8108650:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8108654:	fb93 f3f2 	sdiv	r3, r3, r2
 8108658:	b29a      	uxth	r2, r3
 810865a:	687b      	ldr	r3, [r7, #4]
 810865c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8108660:	7ffb      	ldrb	r3, [r7, #31]
 8108662:	7f7a      	ldrb	r2, [r7, #29]
 8108664:	f107 0120 	add.w	r1, r7, #32
 8108668:	440a      	add	r2, r1
 810866a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 810866e:	fb02 f303 	mul.w	r3, r2, r3
 8108672:	7f7a      	ldrb	r2, [r7, #29]
 8108674:	f107 0120 	add.w	r1, r7, #32
 8108678:	440a      	add	r2, r1
 810867a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 810867e:	fb93 f3f2 	sdiv	r3, r3, r2
 8108682:	b29a      	uxth	r2, r3
 8108684:	687b      	ldr	r3, [r7, #4]
 8108686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810868a:	bf00      	nop
 810868c:	3724      	adds	r7, #36	; 0x24
 810868e:	46bd      	mov	sp, r7
 8108690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108694:	4770      	bx	lr
 8108696:	bf00      	nop
 8108698:	08112588 	.word	0x08112588
 810869c:	08112590 	.word	0x08112590

081086a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 81086a0:	b580      	push	{r7, lr}
 81086a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 81086a4:	4904      	ldr	r1, [pc, #16]	; (81086b8 <MX_FATFS_Init+0x18>)
 81086a6:	4805      	ldr	r0, [pc, #20]	; (81086bc <MX_FATFS_Init+0x1c>)
 81086a8:	f000 f8b0 	bl	810880c <FATFS_LinkDriver>
 81086ac:	4603      	mov	r3, r0
 81086ae:	461a      	mov	r2, r3
 81086b0:	4b03      	ldr	r3, [pc, #12]	; (81086c0 <MX_FATFS_Init+0x20>)
 81086b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 81086b4:	bf00      	nop
 81086b6:	bd80      	pop	{r7, pc}
 81086b8:	10009ef8 	.word	0x10009ef8
 81086bc:	10000010 	.word	0x10000010
 81086c0:	10009efc 	.word	0x10009efc

081086c4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 81086c4:	b480      	push	{r7}
 81086c6:	b083      	sub	sp, #12
 81086c8:	af00      	add	r7, sp, #0
 81086ca:	4603      	mov	r3, r0
 81086cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 81086ce:	4b06      	ldr	r3, [pc, #24]	; (81086e8 <USER_initialize+0x24>)
 81086d0:	2201      	movs	r2, #1
 81086d2:	701a      	strb	r2, [r3, #0]
    return Stat;
 81086d4:	4b04      	ldr	r3, [pc, #16]	; (81086e8 <USER_initialize+0x24>)
 81086d6:	781b      	ldrb	r3, [r3, #0]
 81086d8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 81086da:	4618      	mov	r0, r3
 81086dc:	370c      	adds	r7, #12
 81086de:	46bd      	mov	sp, r7
 81086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086e4:	4770      	bx	lr
 81086e6:	bf00      	nop
 81086e8:	1000000d 	.word	0x1000000d

081086ec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 81086ec:	b480      	push	{r7}
 81086ee:	b083      	sub	sp, #12
 81086f0:	af00      	add	r7, sp, #0
 81086f2:	4603      	mov	r3, r0
 81086f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 81086f6:	4b06      	ldr	r3, [pc, #24]	; (8108710 <USER_status+0x24>)
 81086f8:	2201      	movs	r2, #1
 81086fa:	701a      	strb	r2, [r3, #0]
    return Stat;
 81086fc:	4b04      	ldr	r3, [pc, #16]	; (8108710 <USER_status+0x24>)
 81086fe:	781b      	ldrb	r3, [r3, #0]
 8108700:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8108702:	4618      	mov	r0, r3
 8108704:	370c      	adds	r7, #12
 8108706:	46bd      	mov	sp, r7
 8108708:	f85d 7b04 	ldr.w	r7, [sp], #4
 810870c:	4770      	bx	lr
 810870e:	bf00      	nop
 8108710:	1000000d 	.word	0x1000000d

08108714 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8108714:	b480      	push	{r7}
 8108716:	b085      	sub	sp, #20
 8108718:	af00      	add	r7, sp, #0
 810871a:	60b9      	str	r1, [r7, #8]
 810871c:	607a      	str	r2, [r7, #4]
 810871e:	603b      	str	r3, [r7, #0]
 8108720:	4603      	mov	r3, r0
 8108722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8108724:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8108726:	4618      	mov	r0, r3
 8108728:	3714      	adds	r7, #20
 810872a:	46bd      	mov	sp, r7
 810872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108730:	4770      	bx	lr

08108732 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8108732:	b480      	push	{r7}
 8108734:	b085      	sub	sp, #20
 8108736:	af00      	add	r7, sp, #0
 8108738:	60b9      	str	r1, [r7, #8]
 810873a:	607a      	str	r2, [r7, #4]
 810873c:	603b      	str	r3, [r7, #0]
 810873e:	4603      	mov	r3, r0
 8108740:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8108742:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8108744:	4618      	mov	r0, r3
 8108746:	3714      	adds	r7, #20
 8108748:	46bd      	mov	sp, r7
 810874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810874e:	4770      	bx	lr

08108750 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8108750:	b480      	push	{r7}
 8108752:	b085      	sub	sp, #20
 8108754:	af00      	add	r7, sp, #0
 8108756:	4603      	mov	r3, r0
 8108758:	603a      	str	r2, [r7, #0]
 810875a:	71fb      	strb	r3, [r7, #7]
 810875c:	460b      	mov	r3, r1
 810875e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8108760:	2301      	movs	r3, #1
 8108762:	73fb      	strb	r3, [r7, #15]
    return res;
 8108764:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8108766:	4618      	mov	r0, r3
 8108768:	3714      	adds	r7, #20
 810876a:	46bd      	mov	sp, r7
 810876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108770:	4770      	bx	lr
	...

08108774 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8108774:	b480      	push	{r7}
 8108776:	b087      	sub	sp, #28
 8108778:	af00      	add	r7, sp, #0
 810877a:	60f8      	str	r0, [r7, #12]
 810877c:	60b9      	str	r1, [r7, #8]
 810877e:	4613      	mov	r3, r2
 8108780:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8108782:	2301      	movs	r3, #1
 8108784:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8108786:	2300      	movs	r3, #0
 8108788:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 810878a:	4b1f      	ldr	r3, [pc, #124]	; (8108808 <FATFS_LinkDriverEx+0x94>)
 810878c:	7a5b      	ldrb	r3, [r3, #9]
 810878e:	b2db      	uxtb	r3, r3
 8108790:	2b00      	cmp	r3, #0
 8108792:	d131      	bne.n	81087f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8108794:	4b1c      	ldr	r3, [pc, #112]	; (8108808 <FATFS_LinkDriverEx+0x94>)
 8108796:	7a5b      	ldrb	r3, [r3, #9]
 8108798:	b2db      	uxtb	r3, r3
 810879a:	461a      	mov	r2, r3
 810879c:	4b1a      	ldr	r3, [pc, #104]	; (8108808 <FATFS_LinkDriverEx+0x94>)
 810879e:	2100      	movs	r1, #0
 81087a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 81087a2:	4b19      	ldr	r3, [pc, #100]	; (8108808 <FATFS_LinkDriverEx+0x94>)
 81087a4:	7a5b      	ldrb	r3, [r3, #9]
 81087a6:	b2db      	uxtb	r3, r3
 81087a8:	4a17      	ldr	r2, [pc, #92]	; (8108808 <FATFS_LinkDriverEx+0x94>)
 81087aa:	009b      	lsls	r3, r3, #2
 81087ac:	4413      	add	r3, r2
 81087ae:	68fa      	ldr	r2, [r7, #12]
 81087b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 81087b2:	4b15      	ldr	r3, [pc, #84]	; (8108808 <FATFS_LinkDriverEx+0x94>)
 81087b4:	7a5b      	ldrb	r3, [r3, #9]
 81087b6:	b2db      	uxtb	r3, r3
 81087b8:	461a      	mov	r2, r3
 81087ba:	4b13      	ldr	r3, [pc, #76]	; (8108808 <FATFS_LinkDriverEx+0x94>)
 81087bc:	4413      	add	r3, r2
 81087be:	79fa      	ldrb	r2, [r7, #7]
 81087c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 81087c2:	4b11      	ldr	r3, [pc, #68]	; (8108808 <FATFS_LinkDriverEx+0x94>)
 81087c4:	7a5b      	ldrb	r3, [r3, #9]
 81087c6:	b2db      	uxtb	r3, r3
 81087c8:	1c5a      	adds	r2, r3, #1
 81087ca:	b2d1      	uxtb	r1, r2
 81087cc:	4a0e      	ldr	r2, [pc, #56]	; (8108808 <FATFS_LinkDriverEx+0x94>)
 81087ce:	7251      	strb	r1, [r2, #9]
 81087d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 81087d2:	7dbb      	ldrb	r3, [r7, #22]
 81087d4:	3330      	adds	r3, #48	; 0x30
 81087d6:	b2da      	uxtb	r2, r3
 81087d8:	68bb      	ldr	r3, [r7, #8]
 81087da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 81087dc:	68bb      	ldr	r3, [r7, #8]
 81087de:	3301      	adds	r3, #1
 81087e0:	223a      	movs	r2, #58	; 0x3a
 81087e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 81087e4:	68bb      	ldr	r3, [r7, #8]
 81087e6:	3302      	adds	r3, #2
 81087e8:	222f      	movs	r2, #47	; 0x2f
 81087ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 81087ec:	68bb      	ldr	r3, [r7, #8]
 81087ee:	3303      	adds	r3, #3
 81087f0:	2200      	movs	r2, #0
 81087f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 81087f4:	2300      	movs	r3, #0
 81087f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 81087f8:	7dfb      	ldrb	r3, [r7, #23]
}
 81087fa:	4618      	mov	r0, r3
 81087fc:	371c      	adds	r7, #28
 81087fe:	46bd      	mov	sp, r7
 8108800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108804:	4770      	bx	lr
 8108806:	bf00      	nop
 8108808:	10000480 	.word	0x10000480

0810880c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 810880c:	b580      	push	{r7, lr}
 810880e:	b082      	sub	sp, #8
 8108810:	af00      	add	r7, sp, #0
 8108812:	6078      	str	r0, [r7, #4]
 8108814:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8108816:	2200      	movs	r2, #0
 8108818:	6839      	ldr	r1, [r7, #0]
 810881a:	6878      	ldr	r0, [r7, #4]
 810881c:	f7ff ffaa 	bl	8108774 <FATFS_LinkDriverEx>
 8108820:	4603      	mov	r3, r0
}
 8108822:	4618      	mov	r0, r3
 8108824:	3708      	adds	r7, #8
 8108826:	46bd      	mov	sp, r7
 8108828:	bd80      	pop	{r7, pc}

0810882a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 810882a:	b480      	push	{r7}
 810882c:	b085      	sub	sp, #20
 810882e:	af00      	add	r7, sp, #0
 8108830:	4603      	mov	r3, r0
 8108832:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8108834:	2300      	movs	r3, #0
 8108836:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8108838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810883c:	2b84      	cmp	r3, #132	; 0x84
 810883e:	d005      	beq.n	810884c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8108840:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8108844:	68fb      	ldr	r3, [r7, #12]
 8108846:	4413      	add	r3, r2
 8108848:	3303      	adds	r3, #3
 810884a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 810884c:	68fb      	ldr	r3, [r7, #12]
}
 810884e:	4618      	mov	r0, r3
 8108850:	3714      	adds	r7, #20
 8108852:	46bd      	mov	sp, r7
 8108854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108858:	4770      	bx	lr

0810885a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 810885a:	b580      	push	{r7, lr}
 810885c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 810885e:	f001 fc77 	bl	810a150 <vTaskStartScheduler>
  
  return osOK;
 8108862:	2300      	movs	r3, #0
}
 8108864:	4618      	mov	r0, r3
 8108866:	bd80      	pop	{r7, pc}

08108868 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8108868:	b5f0      	push	{r4, r5, r6, r7, lr}
 810886a:	b089      	sub	sp, #36	; 0x24
 810886c:	af04      	add	r7, sp, #16
 810886e:	6078      	str	r0, [r7, #4]
 8108870:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8108872:	687b      	ldr	r3, [r7, #4]
 8108874:	695b      	ldr	r3, [r3, #20]
 8108876:	2b00      	cmp	r3, #0
 8108878:	d020      	beq.n	81088bc <osThreadCreate+0x54>
 810887a:	687b      	ldr	r3, [r7, #4]
 810887c:	699b      	ldr	r3, [r3, #24]
 810887e:	2b00      	cmp	r3, #0
 8108880:	d01c      	beq.n	81088bc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8108882:	687b      	ldr	r3, [r7, #4]
 8108884:	685c      	ldr	r4, [r3, #4]
 8108886:	687b      	ldr	r3, [r7, #4]
 8108888:	681d      	ldr	r5, [r3, #0]
 810888a:	687b      	ldr	r3, [r7, #4]
 810888c:	691e      	ldr	r6, [r3, #16]
 810888e:	687b      	ldr	r3, [r7, #4]
 8108890:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8108894:	4618      	mov	r0, r3
 8108896:	f7ff ffc8 	bl	810882a <makeFreeRtosPriority>
 810889a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 810889c:	687b      	ldr	r3, [r7, #4]
 810889e:	695b      	ldr	r3, [r3, #20]
 81088a0:	687a      	ldr	r2, [r7, #4]
 81088a2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 81088a4:	9202      	str	r2, [sp, #8]
 81088a6:	9301      	str	r3, [sp, #4]
 81088a8:	9100      	str	r1, [sp, #0]
 81088aa:	683b      	ldr	r3, [r7, #0]
 81088ac:	4632      	mov	r2, r6
 81088ae:	4629      	mov	r1, r5
 81088b0:	4620      	mov	r0, r4
 81088b2:	f001 fa86 	bl	8109dc2 <xTaskCreateStatic>
 81088b6:	4603      	mov	r3, r0
 81088b8:	60fb      	str	r3, [r7, #12]
 81088ba:	e01c      	b.n	81088f6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 81088bc:	687b      	ldr	r3, [r7, #4]
 81088be:	685c      	ldr	r4, [r3, #4]
 81088c0:	687b      	ldr	r3, [r7, #4]
 81088c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 81088c4:	687b      	ldr	r3, [r7, #4]
 81088c6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 81088c8:	b29e      	uxth	r6, r3
 81088ca:	687b      	ldr	r3, [r7, #4]
 81088cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 81088d0:	4618      	mov	r0, r3
 81088d2:	f7ff ffaa 	bl	810882a <makeFreeRtosPriority>
 81088d6:	4602      	mov	r2, r0
 81088d8:	f107 030c 	add.w	r3, r7, #12
 81088dc:	9301      	str	r3, [sp, #4]
 81088de:	9200      	str	r2, [sp, #0]
 81088e0:	683b      	ldr	r3, [r7, #0]
 81088e2:	4632      	mov	r2, r6
 81088e4:	4629      	mov	r1, r5
 81088e6:	4620      	mov	r0, r4
 81088e8:	f001 fac8 	bl	8109e7c <xTaskCreate>
 81088ec:	4603      	mov	r3, r0
 81088ee:	2b01      	cmp	r3, #1
 81088f0:	d001      	beq.n	81088f6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 81088f2:	2300      	movs	r3, #0
 81088f4:	e000      	b.n	81088f8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 81088f6:	68fb      	ldr	r3, [r7, #12]
}
 81088f8:	4618      	mov	r0, r3
 81088fa:	3714      	adds	r7, #20
 81088fc:	46bd      	mov	sp, r7
 81088fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08108900 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8108900:	b580      	push	{r7, lr}
 8108902:	b084      	sub	sp, #16
 8108904:	af00      	add	r7, sp, #0
 8108906:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8108908:	687b      	ldr	r3, [r7, #4]
 810890a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 810890c:	68fb      	ldr	r3, [r7, #12]
 810890e:	2b00      	cmp	r3, #0
 8108910:	d001      	beq.n	8108916 <osDelay+0x16>
 8108912:	68fb      	ldr	r3, [r7, #12]
 8108914:	e000      	b.n	8108918 <osDelay+0x18>
 8108916:	2301      	movs	r3, #1
 8108918:	4618      	mov	r0, r3
 810891a:	f001 fbe5 	bl	810a0e8 <vTaskDelay>
  
  return osOK;
 810891e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8108920:	4618      	mov	r0, r3
 8108922:	3710      	adds	r7, #16
 8108924:	46bd      	mov	sp, r7
 8108926:	bd80      	pop	{r7, pc}

08108928 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8108928:	b580      	push	{r7, lr}
 810892a:	b086      	sub	sp, #24
 810892c:	af02      	add	r7, sp, #8
 810892e:	6078      	str	r0, [r7, #4]
 8108930:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8108932:	687b      	ldr	r3, [r7, #4]
 8108934:	685b      	ldr	r3, [r3, #4]
 8108936:	2b00      	cmp	r3, #0
 8108938:	d00f      	beq.n	810895a <osSemaphoreCreate+0x32>
    if (count == 1) {
 810893a:	683b      	ldr	r3, [r7, #0]
 810893c:	2b01      	cmp	r3, #1
 810893e:	d10a      	bne.n	8108956 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8108940:	687b      	ldr	r3, [r7, #4]
 8108942:	685b      	ldr	r3, [r3, #4]
 8108944:	2203      	movs	r2, #3
 8108946:	9200      	str	r2, [sp, #0]
 8108948:	2200      	movs	r2, #0
 810894a:	2100      	movs	r1, #0
 810894c:	2001      	movs	r0, #1
 810894e:	f000 fd23 	bl	8109398 <xQueueGenericCreateStatic>
 8108952:	4603      	mov	r3, r0
 8108954:	e016      	b.n	8108984 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8108956:	2300      	movs	r3, #0
 8108958:	e014      	b.n	8108984 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 810895a:	683b      	ldr	r3, [r7, #0]
 810895c:	2b01      	cmp	r3, #1
 810895e:	d110      	bne.n	8108982 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8108960:	2203      	movs	r2, #3
 8108962:	2100      	movs	r1, #0
 8108964:	2001      	movs	r0, #1
 8108966:	f000 fd8f 	bl	8109488 <xQueueGenericCreate>
 810896a:	60f8      	str	r0, [r7, #12]
 810896c:	68fb      	ldr	r3, [r7, #12]
 810896e:	2b00      	cmp	r3, #0
 8108970:	d005      	beq.n	810897e <osSemaphoreCreate+0x56>
 8108972:	2300      	movs	r3, #0
 8108974:	2200      	movs	r2, #0
 8108976:	2100      	movs	r1, #0
 8108978:	68f8      	ldr	r0, [r7, #12]
 810897a:	f000 fde5 	bl	8109548 <xQueueGenericSend>
      return sema;
 810897e:	68fb      	ldr	r3, [r7, #12]
 8108980:	e000      	b.n	8108984 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8108982:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8108984:	4618      	mov	r0, r3
 8108986:	3710      	adds	r7, #16
 8108988:	46bd      	mov	sp, r7
 810898a:	bd80      	pop	{r7, pc}

0810898c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810898c:	b580      	push	{r7, lr}
 810898e:	b08a      	sub	sp, #40	; 0x28
 8108990:	af00      	add	r7, sp, #0
 8108992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8108994:	2300      	movs	r3, #0
 8108996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8108998:	f001 fc3a 	bl	810a210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810899c:	4b58      	ldr	r3, [pc, #352]	; (8108b00 <pvPortMalloc+0x174>)
 810899e:	681b      	ldr	r3, [r3, #0]
 81089a0:	2b00      	cmp	r3, #0
 81089a2:	d101      	bne.n	81089a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81089a4:	f000 f910 	bl	8108bc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81089a8:	4b56      	ldr	r3, [pc, #344]	; (8108b04 <pvPortMalloc+0x178>)
 81089aa:	681a      	ldr	r2, [r3, #0]
 81089ac:	687b      	ldr	r3, [r7, #4]
 81089ae:	4013      	ands	r3, r2
 81089b0:	2b00      	cmp	r3, #0
 81089b2:	f040 808e 	bne.w	8108ad2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81089b6:	687b      	ldr	r3, [r7, #4]
 81089b8:	2b00      	cmp	r3, #0
 81089ba:	d01d      	beq.n	81089f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 81089bc:	2208      	movs	r2, #8
 81089be:	687b      	ldr	r3, [r7, #4]
 81089c0:	4413      	add	r3, r2
 81089c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81089c4:	687b      	ldr	r3, [r7, #4]
 81089c6:	f003 0307 	and.w	r3, r3, #7
 81089ca:	2b00      	cmp	r3, #0
 81089cc:	d014      	beq.n	81089f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81089ce:	687b      	ldr	r3, [r7, #4]
 81089d0:	f023 0307 	bic.w	r3, r3, #7
 81089d4:	3308      	adds	r3, #8
 81089d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81089d8:	687b      	ldr	r3, [r7, #4]
 81089da:	f003 0307 	and.w	r3, r3, #7
 81089de:	2b00      	cmp	r3, #0
 81089e0:	d00a      	beq.n	81089f8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81089e6:	f383 8811 	msr	BASEPRI, r3
 81089ea:	f3bf 8f6f 	isb	sy
 81089ee:	f3bf 8f4f 	dsb	sy
 81089f2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 81089f4:	bf00      	nop
 81089f6:	e7fe      	b.n	81089f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81089f8:	687b      	ldr	r3, [r7, #4]
 81089fa:	2b00      	cmp	r3, #0
 81089fc:	d069      	beq.n	8108ad2 <pvPortMalloc+0x146>
 81089fe:	4b42      	ldr	r3, [pc, #264]	; (8108b08 <pvPortMalloc+0x17c>)
 8108a00:	681b      	ldr	r3, [r3, #0]
 8108a02:	687a      	ldr	r2, [r7, #4]
 8108a04:	429a      	cmp	r2, r3
 8108a06:	d864      	bhi.n	8108ad2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8108a08:	4b40      	ldr	r3, [pc, #256]	; (8108b0c <pvPortMalloc+0x180>)
 8108a0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8108a0c:	4b3f      	ldr	r3, [pc, #252]	; (8108b0c <pvPortMalloc+0x180>)
 8108a0e:	681b      	ldr	r3, [r3, #0]
 8108a10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8108a12:	e004      	b.n	8108a1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8108a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8108a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a1a:	681b      	ldr	r3, [r3, #0]
 8108a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8108a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a20:	685b      	ldr	r3, [r3, #4]
 8108a22:	687a      	ldr	r2, [r7, #4]
 8108a24:	429a      	cmp	r2, r3
 8108a26:	d903      	bls.n	8108a30 <pvPortMalloc+0xa4>
 8108a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a2a:	681b      	ldr	r3, [r3, #0]
 8108a2c:	2b00      	cmp	r3, #0
 8108a2e:	d1f1      	bne.n	8108a14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8108a30:	4b33      	ldr	r3, [pc, #204]	; (8108b00 <pvPortMalloc+0x174>)
 8108a32:	681b      	ldr	r3, [r3, #0]
 8108a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108a36:	429a      	cmp	r2, r3
 8108a38:	d04b      	beq.n	8108ad2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8108a3a:	6a3b      	ldr	r3, [r7, #32]
 8108a3c:	681b      	ldr	r3, [r3, #0]
 8108a3e:	2208      	movs	r2, #8
 8108a40:	4413      	add	r3, r2
 8108a42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8108a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a46:	681a      	ldr	r2, [r3, #0]
 8108a48:	6a3b      	ldr	r3, [r7, #32]
 8108a4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8108a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a4e:	685a      	ldr	r2, [r3, #4]
 8108a50:	687b      	ldr	r3, [r7, #4]
 8108a52:	1ad2      	subs	r2, r2, r3
 8108a54:	2308      	movs	r3, #8
 8108a56:	005b      	lsls	r3, r3, #1
 8108a58:	429a      	cmp	r2, r3
 8108a5a:	d91f      	bls.n	8108a9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8108a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108a5e:	687b      	ldr	r3, [r7, #4]
 8108a60:	4413      	add	r3, r2
 8108a62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8108a64:	69bb      	ldr	r3, [r7, #24]
 8108a66:	f003 0307 	and.w	r3, r3, #7
 8108a6a:	2b00      	cmp	r3, #0
 8108a6c:	d00a      	beq.n	8108a84 <pvPortMalloc+0xf8>
	__asm volatile
 8108a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108a72:	f383 8811 	msr	BASEPRI, r3
 8108a76:	f3bf 8f6f 	isb	sy
 8108a7a:	f3bf 8f4f 	dsb	sy
 8108a7e:	613b      	str	r3, [r7, #16]
}
 8108a80:	bf00      	nop
 8108a82:	e7fe      	b.n	8108a82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8108a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a86:	685a      	ldr	r2, [r3, #4]
 8108a88:	687b      	ldr	r3, [r7, #4]
 8108a8a:	1ad2      	subs	r2, r2, r3
 8108a8c:	69bb      	ldr	r3, [r7, #24]
 8108a8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8108a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a92:	687a      	ldr	r2, [r7, #4]
 8108a94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8108a96:	69b8      	ldr	r0, [r7, #24]
 8108a98:	f000 f8f8 	bl	8108c8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8108a9c:	4b1a      	ldr	r3, [pc, #104]	; (8108b08 <pvPortMalloc+0x17c>)
 8108a9e:	681a      	ldr	r2, [r3, #0]
 8108aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108aa2:	685b      	ldr	r3, [r3, #4]
 8108aa4:	1ad3      	subs	r3, r2, r3
 8108aa6:	4a18      	ldr	r2, [pc, #96]	; (8108b08 <pvPortMalloc+0x17c>)
 8108aa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8108aaa:	4b17      	ldr	r3, [pc, #92]	; (8108b08 <pvPortMalloc+0x17c>)
 8108aac:	681a      	ldr	r2, [r3, #0]
 8108aae:	4b18      	ldr	r3, [pc, #96]	; (8108b10 <pvPortMalloc+0x184>)
 8108ab0:	681b      	ldr	r3, [r3, #0]
 8108ab2:	429a      	cmp	r2, r3
 8108ab4:	d203      	bcs.n	8108abe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8108ab6:	4b14      	ldr	r3, [pc, #80]	; (8108b08 <pvPortMalloc+0x17c>)
 8108ab8:	681b      	ldr	r3, [r3, #0]
 8108aba:	4a15      	ldr	r2, [pc, #84]	; (8108b10 <pvPortMalloc+0x184>)
 8108abc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8108abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108ac0:	685a      	ldr	r2, [r3, #4]
 8108ac2:	4b10      	ldr	r3, [pc, #64]	; (8108b04 <pvPortMalloc+0x178>)
 8108ac4:	681b      	ldr	r3, [r3, #0]
 8108ac6:	431a      	orrs	r2, r3
 8108ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108aca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8108acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108ace:	2200      	movs	r2, #0
 8108ad0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8108ad2:	f001 fbab 	bl	810a22c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8108ad6:	69fb      	ldr	r3, [r7, #28]
 8108ad8:	f003 0307 	and.w	r3, r3, #7
 8108adc:	2b00      	cmp	r3, #0
 8108ade:	d00a      	beq.n	8108af6 <pvPortMalloc+0x16a>
	__asm volatile
 8108ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108ae4:	f383 8811 	msr	BASEPRI, r3
 8108ae8:	f3bf 8f6f 	isb	sy
 8108aec:	f3bf 8f4f 	dsb	sy
 8108af0:	60fb      	str	r3, [r7, #12]
}
 8108af2:	bf00      	nop
 8108af4:	e7fe      	b.n	8108af4 <pvPortMalloc+0x168>
	return pvReturn;
 8108af6:	69fb      	ldr	r3, [r7, #28]
}
 8108af8:	4618      	mov	r0, r3
 8108afa:	3728      	adds	r7, #40	; 0x28
 8108afc:	46bd      	mov	sp, r7
 8108afe:	bd80      	pop	{r7, pc}
 8108b00:	10004094 	.word	0x10004094
 8108b04:	100040a0 	.word	0x100040a0
 8108b08:	10004098 	.word	0x10004098
 8108b0c:	1000408c 	.word	0x1000408c
 8108b10:	1000409c 	.word	0x1000409c

08108b14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8108b14:	b580      	push	{r7, lr}
 8108b16:	b086      	sub	sp, #24
 8108b18:	af00      	add	r7, sp, #0
 8108b1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8108b1c:	687b      	ldr	r3, [r7, #4]
 8108b1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8108b20:	687b      	ldr	r3, [r7, #4]
 8108b22:	2b00      	cmp	r3, #0
 8108b24:	d048      	beq.n	8108bb8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8108b26:	2308      	movs	r3, #8
 8108b28:	425b      	negs	r3, r3
 8108b2a:	697a      	ldr	r2, [r7, #20]
 8108b2c:	4413      	add	r3, r2
 8108b2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8108b30:	697b      	ldr	r3, [r7, #20]
 8108b32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8108b34:	693b      	ldr	r3, [r7, #16]
 8108b36:	685a      	ldr	r2, [r3, #4]
 8108b38:	4b21      	ldr	r3, [pc, #132]	; (8108bc0 <vPortFree+0xac>)
 8108b3a:	681b      	ldr	r3, [r3, #0]
 8108b3c:	4013      	ands	r3, r2
 8108b3e:	2b00      	cmp	r3, #0
 8108b40:	d10a      	bne.n	8108b58 <vPortFree+0x44>
	__asm volatile
 8108b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108b46:	f383 8811 	msr	BASEPRI, r3
 8108b4a:	f3bf 8f6f 	isb	sy
 8108b4e:	f3bf 8f4f 	dsb	sy
 8108b52:	60fb      	str	r3, [r7, #12]
}
 8108b54:	bf00      	nop
 8108b56:	e7fe      	b.n	8108b56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8108b58:	693b      	ldr	r3, [r7, #16]
 8108b5a:	681b      	ldr	r3, [r3, #0]
 8108b5c:	2b00      	cmp	r3, #0
 8108b5e:	d00a      	beq.n	8108b76 <vPortFree+0x62>
	__asm volatile
 8108b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108b64:	f383 8811 	msr	BASEPRI, r3
 8108b68:	f3bf 8f6f 	isb	sy
 8108b6c:	f3bf 8f4f 	dsb	sy
 8108b70:	60bb      	str	r3, [r7, #8]
}
 8108b72:	bf00      	nop
 8108b74:	e7fe      	b.n	8108b74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8108b76:	693b      	ldr	r3, [r7, #16]
 8108b78:	685a      	ldr	r2, [r3, #4]
 8108b7a:	4b11      	ldr	r3, [pc, #68]	; (8108bc0 <vPortFree+0xac>)
 8108b7c:	681b      	ldr	r3, [r3, #0]
 8108b7e:	4013      	ands	r3, r2
 8108b80:	2b00      	cmp	r3, #0
 8108b82:	d019      	beq.n	8108bb8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8108b84:	693b      	ldr	r3, [r7, #16]
 8108b86:	681b      	ldr	r3, [r3, #0]
 8108b88:	2b00      	cmp	r3, #0
 8108b8a:	d115      	bne.n	8108bb8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8108b8c:	693b      	ldr	r3, [r7, #16]
 8108b8e:	685a      	ldr	r2, [r3, #4]
 8108b90:	4b0b      	ldr	r3, [pc, #44]	; (8108bc0 <vPortFree+0xac>)
 8108b92:	681b      	ldr	r3, [r3, #0]
 8108b94:	43db      	mvns	r3, r3
 8108b96:	401a      	ands	r2, r3
 8108b98:	693b      	ldr	r3, [r7, #16]
 8108b9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8108b9c:	f001 fb38 	bl	810a210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8108ba0:	693b      	ldr	r3, [r7, #16]
 8108ba2:	685a      	ldr	r2, [r3, #4]
 8108ba4:	4b07      	ldr	r3, [pc, #28]	; (8108bc4 <vPortFree+0xb0>)
 8108ba6:	681b      	ldr	r3, [r3, #0]
 8108ba8:	4413      	add	r3, r2
 8108baa:	4a06      	ldr	r2, [pc, #24]	; (8108bc4 <vPortFree+0xb0>)
 8108bac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8108bae:	6938      	ldr	r0, [r7, #16]
 8108bb0:	f000 f86c 	bl	8108c8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8108bb4:	f001 fb3a 	bl	810a22c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8108bb8:	bf00      	nop
 8108bba:	3718      	adds	r7, #24
 8108bbc:	46bd      	mov	sp, r7
 8108bbe:	bd80      	pop	{r7, pc}
 8108bc0:	100040a0 	.word	0x100040a0
 8108bc4:	10004098 	.word	0x10004098

08108bc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8108bc8:	b480      	push	{r7}
 8108bca:	b085      	sub	sp, #20
 8108bcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8108bce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8108bd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8108bd4:	4b27      	ldr	r3, [pc, #156]	; (8108c74 <prvHeapInit+0xac>)
 8108bd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8108bd8:	68fb      	ldr	r3, [r7, #12]
 8108bda:	f003 0307 	and.w	r3, r3, #7
 8108bde:	2b00      	cmp	r3, #0
 8108be0:	d00c      	beq.n	8108bfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8108be2:	68fb      	ldr	r3, [r7, #12]
 8108be4:	3307      	adds	r3, #7
 8108be6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8108be8:	68fb      	ldr	r3, [r7, #12]
 8108bea:	f023 0307 	bic.w	r3, r3, #7
 8108bee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8108bf0:	68ba      	ldr	r2, [r7, #8]
 8108bf2:	68fb      	ldr	r3, [r7, #12]
 8108bf4:	1ad3      	subs	r3, r2, r3
 8108bf6:	4a1f      	ldr	r2, [pc, #124]	; (8108c74 <prvHeapInit+0xac>)
 8108bf8:	4413      	add	r3, r2
 8108bfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8108bfc:	68fb      	ldr	r3, [r7, #12]
 8108bfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8108c00:	4a1d      	ldr	r2, [pc, #116]	; (8108c78 <prvHeapInit+0xb0>)
 8108c02:	687b      	ldr	r3, [r7, #4]
 8108c04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8108c06:	4b1c      	ldr	r3, [pc, #112]	; (8108c78 <prvHeapInit+0xb0>)
 8108c08:	2200      	movs	r2, #0
 8108c0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8108c0c:	687b      	ldr	r3, [r7, #4]
 8108c0e:	68ba      	ldr	r2, [r7, #8]
 8108c10:	4413      	add	r3, r2
 8108c12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8108c14:	2208      	movs	r2, #8
 8108c16:	68fb      	ldr	r3, [r7, #12]
 8108c18:	1a9b      	subs	r3, r3, r2
 8108c1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8108c1c:	68fb      	ldr	r3, [r7, #12]
 8108c1e:	f023 0307 	bic.w	r3, r3, #7
 8108c22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8108c24:	68fb      	ldr	r3, [r7, #12]
 8108c26:	4a15      	ldr	r2, [pc, #84]	; (8108c7c <prvHeapInit+0xb4>)
 8108c28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8108c2a:	4b14      	ldr	r3, [pc, #80]	; (8108c7c <prvHeapInit+0xb4>)
 8108c2c:	681b      	ldr	r3, [r3, #0]
 8108c2e:	2200      	movs	r2, #0
 8108c30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8108c32:	4b12      	ldr	r3, [pc, #72]	; (8108c7c <prvHeapInit+0xb4>)
 8108c34:	681b      	ldr	r3, [r3, #0]
 8108c36:	2200      	movs	r2, #0
 8108c38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8108c3a:	687b      	ldr	r3, [r7, #4]
 8108c3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8108c3e:	683b      	ldr	r3, [r7, #0]
 8108c40:	68fa      	ldr	r2, [r7, #12]
 8108c42:	1ad2      	subs	r2, r2, r3
 8108c44:	683b      	ldr	r3, [r7, #0]
 8108c46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8108c48:	4b0c      	ldr	r3, [pc, #48]	; (8108c7c <prvHeapInit+0xb4>)
 8108c4a:	681a      	ldr	r2, [r3, #0]
 8108c4c:	683b      	ldr	r3, [r7, #0]
 8108c4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8108c50:	683b      	ldr	r3, [r7, #0]
 8108c52:	685b      	ldr	r3, [r3, #4]
 8108c54:	4a0a      	ldr	r2, [pc, #40]	; (8108c80 <prvHeapInit+0xb8>)
 8108c56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8108c58:	683b      	ldr	r3, [r7, #0]
 8108c5a:	685b      	ldr	r3, [r3, #4]
 8108c5c:	4a09      	ldr	r2, [pc, #36]	; (8108c84 <prvHeapInit+0xbc>)
 8108c5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8108c60:	4b09      	ldr	r3, [pc, #36]	; (8108c88 <prvHeapInit+0xc0>)
 8108c62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8108c66:	601a      	str	r2, [r3, #0]
}
 8108c68:	bf00      	nop
 8108c6a:	3714      	adds	r7, #20
 8108c6c:	46bd      	mov	sp, r7
 8108c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c72:	4770      	bx	lr
 8108c74:	1000048c 	.word	0x1000048c
 8108c78:	1000408c 	.word	0x1000408c
 8108c7c:	10004094 	.word	0x10004094
 8108c80:	1000409c 	.word	0x1000409c
 8108c84:	10004098 	.word	0x10004098
 8108c88:	100040a0 	.word	0x100040a0

08108c8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8108c8c:	b480      	push	{r7}
 8108c8e:	b085      	sub	sp, #20
 8108c90:	af00      	add	r7, sp, #0
 8108c92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8108c94:	4b28      	ldr	r3, [pc, #160]	; (8108d38 <prvInsertBlockIntoFreeList+0xac>)
 8108c96:	60fb      	str	r3, [r7, #12]
 8108c98:	e002      	b.n	8108ca0 <prvInsertBlockIntoFreeList+0x14>
 8108c9a:	68fb      	ldr	r3, [r7, #12]
 8108c9c:	681b      	ldr	r3, [r3, #0]
 8108c9e:	60fb      	str	r3, [r7, #12]
 8108ca0:	68fb      	ldr	r3, [r7, #12]
 8108ca2:	681b      	ldr	r3, [r3, #0]
 8108ca4:	687a      	ldr	r2, [r7, #4]
 8108ca6:	429a      	cmp	r2, r3
 8108ca8:	d8f7      	bhi.n	8108c9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8108caa:	68fb      	ldr	r3, [r7, #12]
 8108cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8108cae:	68fb      	ldr	r3, [r7, #12]
 8108cb0:	685b      	ldr	r3, [r3, #4]
 8108cb2:	68ba      	ldr	r2, [r7, #8]
 8108cb4:	4413      	add	r3, r2
 8108cb6:	687a      	ldr	r2, [r7, #4]
 8108cb8:	429a      	cmp	r2, r3
 8108cba:	d108      	bne.n	8108cce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8108cbc:	68fb      	ldr	r3, [r7, #12]
 8108cbe:	685a      	ldr	r2, [r3, #4]
 8108cc0:	687b      	ldr	r3, [r7, #4]
 8108cc2:	685b      	ldr	r3, [r3, #4]
 8108cc4:	441a      	add	r2, r3
 8108cc6:	68fb      	ldr	r3, [r7, #12]
 8108cc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8108cca:	68fb      	ldr	r3, [r7, #12]
 8108ccc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8108cce:	687b      	ldr	r3, [r7, #4]
 8108cd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8108cd2:	687b      	ldr	r3, [r7, #4]
 8108cd4:	685b      	ldr	r3, [r3, #4]
 8108cd6:	68ba      	ldr	r2, [r7, #8]
 8108cd8:	441a      	add	r2, r3
 8108cda:	68fb      	ldr	r3, [r7, #12]
 8108cdc:	681b      	ldr	r3, [r3, #0]
 8108cde:	429a      	cmp	r2, r3
 8108ce0:	d118      	bne.n	8108d14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8108ce2:	68fb      	ldr	r3, [r7, #12]
 8108ce4:	681a      	ldr	r2, [r3, #0]
 8108ce6:	4b15      	ldr	r3, [pc, #84]	; (8108d3c <prvInsertBlockIntoFreeList+0xb0>)
 8108ce8:	681b      	ldr	r3, [r3, #0]
 8108cea:	429a      	cmp	r2, r3
 8108cec:	d00d      	beq.n	8108d0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8108cee:	687b      	ldr	r3, [r7, #4]
 8108cf0:	685a      	ldr	r2, [r3, #4]
 8108cf2:	68fb      	ldr	r3, [r7, #12]
 8108cf4:	681b      	ldr	r3, [r3, #0]
 8108cf6:	685b      	ldr	r3, [r3, #4]
 8108cf8:	441a      	add	r2, r3
 8108cfa:	687b      	ldr	r3, [r7, #4]
 8108cfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8108cfe:	68fb      	ldr	r3, [r7, #12]
 8108d00:	681b      	ldr	r3, [r3, #0]
 8108d02:	681a      	ldr	r2, [r3, #0]
 8108d04:	687b      	ldr	r3, [r7, #4]
 8108d06:	601a      	str	r2, [r3, #0]
 8108d08:	e008      	b.n	8108d1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8108d0a:	4b0c      	ldr	r3, [pc, #48]	; (8108d3c <prvInsertBlockIntoFreeList+0xb0>)
 8108d0c:	681a      	ldr	r2, [r3, #0]
 8108d0e:	687b      	ldr	r3, [r7, #4]
 8108d10:	601a      	str	r2, [r3, #0]
 8108d12:	e003      	b.n	8108d1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8108d14:	68fb      	ldr	r3, [r7, #12]
 8108d16:	681a      	ldr	r2, [r3, #0]
 8108d18:	687b      	ldr	r3, [r7, #4]
 8108d1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8108d1c:	68fa      	ldr	r2, [r7, #12]
 8108d1e:	687b      	ldr	r3, [r7, #4]
 8108d20:	429a      	cmp	r2, r3
 8108d22:	d002      	beq.n	8108d2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8108d24:	68fb      	ldr	r3, [r7, #12]
 8108d26:	687a      	ldr	r2, [r7, #4]
 8108d28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8108d2a:	bf00      	nop
 8108d2c:	3714      	adds	r7, #20
 8108d2e:	46bd      	mov	sp, r7
 8108d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d34:	4770      	bx	lr
 8108d36:	bf00      	nop
 8108d38:	1000408c 	.word	0x1000408c
 8108d3c:	10004094 	.word	0x10004094

08108d40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8108d40:	b480      	push	{r7}
 8108d42:	b083      	sub	sp, #12
 8108d44:	af00      	add	r7, sp, #0
 8108d46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8108d48:	687b      	ldr	r3, [r7, #4]
 8108d4a:	f103 0208 	add.w	r2, r3, #8
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8108d52:	687b      	ldr	r3, [r7, #4]
 8108d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8108d58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8108d5a:	687b      	ldr	r3, [r7, #4]
 8108d5c:	f103 0208 	add.w	r2, r3, #8
 8108d60:	687b      	ldr	r3, [r7, #4]
 8108d62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8108d64:	687b      	ldr	r3, [r7, #4]
 8108d66:	f103 0208 	add.w	r2, r3, #8
 8108d6a:	687b      	ldr	r3, [r7, #4]
 8108d6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8108d6e:	687b      	ldr	r3, [r7, #4]
 8108d70:	2200      	movs	r2, #0
 8108d72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8108d74:	bf00      	nop
 8108d76:	370c      	adds	r7, #12
 8108d78:	46bd      	mov	sp, r7
 8108d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d7e:	4770      	bx	lr

08108d80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8108d80:	b480      	push	{r7}
 8108d82:	b083      	sub	sp, #12
 8108d84:	af00      	add	r7, sp, #0
 8108d86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8108d88:	687b      	ldr	r3, [r7, #4]
 8108d8a:	2200      	movs	r2, #0
 8108d8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8108d8e:	bf00      	nop
 8108d90:	370c      	adds	r7, #12
 8108d92:	46bd      	mov	sp, r7
 8108d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d98:	4770      	bx	lr

08108d9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8108d9a:	b480      	push	{r7}
 8108d9c:	b085      	sub	sp, #20
 8108d9e:	af00      	add	r7, sp, #0
 8108da0:	6078      	str	r0, [r7, #4]
 8108da2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8108da4:	687b      	ldr	r3, [r7, #4]
 8108da6:	685b      	ldr	r3, [r3, #4]
 8108da8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8108daa:	683b      	ldr	r3, [r7, #0]
 8108dac:	68fa      	ldr	r2, [r7, #12]
 8108dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8108db0:	68fb      	ldr	r3, [r7, #12]
 8108db2:	689a      	ldr	r2, [r3, #8]
 8108db4:	683b      	ldr	r3, [r7, #0]
 8108db6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8108db8:	68fb      	ldr	r3, [r7, #12]
 8108dba:	689b      	ldr	r3, [r3, #8]
 8108dbc:	683a      	ldr	r2, [r7, #0]
 8108dbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8108dc0:	68fb      	ldr	r3, [r7, #12]
 8108dc2:	683a      	ldr	r2, [r7, #0]
 8108dc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8108dc6:	683b      	ldr	r3, [r7, #0]
 8108dc8:	687a      	ldr	r2, [r7, #4]
 8108dca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8108dcc:	687b      	ldr	r3, [r7, #4]
 8108dce:	681b      	ldr	r3, [r3, #0]
 8108dd0:	1c5a      	adds	r2, r3, #1
 8108dd2:	687b      	ldr	r3, [r7, #4]
 8108dd4:	601a      	str	r2, [r3, #0]
}
 8108dd6:	bf00      	nop
 8108dd8:	3714      	adds	r7, #20
 8108dda:	46bd      	mov	sp, r7
 8108ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108de0:	4770      	bx	lr

08108de2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8108de2:	b480      	push	{r7}
 8108de4:	b085      	sub	sp, #20
 8108de6:	af00      	add	r7, sp, #0
 8108de8:	6078      	str	r0, [r7, #4]
 8108dea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8108dec:	683b      	ldr	r3, [r7, #0]
 8108dee:	681b      	ldr	r3, [r3, #0]
 8108df0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8108df2:	68bb      	ldr	r3, [r7, #8]
 8108df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108df8:	d103      	bne.n	8108e02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8108dfa:	687b      	ldr	r3, [r7, #4]
 8108dfc:	691b      	ldr	r3, [r3, #16]
 8108dfe:	60fb      	str	r3, [r7, #12]
 8108e00:	e00c      	b.n	8108e1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8108e02:	687b      	ldr	r3, [r7, #4]
 8108e04:	3308      	adds	r3, #8
 8108e06:	60fb      	str	r3, [r7, #12]
 8108e08:	e002      	b.n	8108e10 <vListInsert+0x2e>
 8108e0a:	68fb      	ldr	r3, [r7, #12]
 8108e0c:	685b      	ldr	r3, [r3, #4]
 8108e0e:	60fb      	str	r3, [r7, #12]
 8108e10:	68fb      	ldr	r3, [r7, #12]
 8108e12:	685b      	ldr	r3, [r3, #4]
 8108e14:	681b      	ldr	r3, [r3, #0]
 8108e16:	68ba      	ldr	r2, [r7, #8]
 8108e18:	429a      	cmp	r2, r3
 8108e1a:	d2f6      	bcs.n	8108e0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8108e1c:	68fb      	ldr	r3, [r7, #12]
 8108e1e:	685a      	ldr	r2, [r3, #4]
 8108e20:	683b      	ldr	r3, [r7, #0]
 8108e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8108e24:	683b      	ldr	r3, [r7, #0]
 8108e26:	685b      	ldr	r3, [r3, #4]
 8108e28:	683a      	ldr	r2, [r7, #0]
 8108e2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8108e2c:	683b      	ldr	r3, [r7, #0]
 8108e2e:	68fa      	ldr	r2, [r7, #12]
 8108e30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8108e32:	68fb      	ldr	r3, [r7, #12]
 8108e34:	683a      	ldr	r2, [r7, #0]
 8108e36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8108e38:	683b      	ldr	r3, [r7, #0]
 8108e3a:	687a      	ldr	r2, [r7, #4]
 8108e3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8108e3e:	687b      	ldr	r3, [r7, #4]
 8108e40:	681b      	ldr	r3, [r3, #0]
 8108e42:	1c5a      	adds	r2, r3, #1
 8108e44:	687b      	ldr	r3, [r7, #4]
 8108e46:	601a      	str	r2, [r3, #0]
}
 8108e48:	bf00      	nop
 8108e4a:	3714      	adds	r7, #20
 8108e4c:	46bd      	mov	sp, r7
 8108e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e52:	4770      	bx	lr

08108e54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8108e54:	b480      	push	{r7}
 8108e56:	b085      	sub	sp, #20
 8108e58:	af00      	add	r7, sp, #0
 8108e5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8108e5c:	687b      	ldr	r3, [r7, #4]
 8108e5e:	691b      	ldr	r3, [r3, #16]
 8108e60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8108e62:	687b      	ldr	r3, [r7, #4]
 8108e64:	685b      	ldr	r3, [r3, #4]
 8108e66:	687a      	ldr	r2, [r7, #4]
 8108e68:	6892      	ldr	r2, [r2, #8]
 8108e6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8108e6c:	687b      	ldr	r3, [r7, #4]
 8108e6e:	689b      	ldr	r3, [r3, #8]
 8108e70:	687a      	ldr	r2, [r7, #4]
 8108e72:	6852      	ldr	r2, [r2, #4]
 8108e74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8108e76:	68fb      	ldr	r3, [r7, #12]
 8108e78:	685b      	ldr	r3, [r3, #4]
 8108e7a:	687a      	ldr	r2, [r7, #4]
 8108e7c:	429a      	cmp	r2, r3
 8108e7e:	d103      	bne.n	8108e88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8108e80:	687b      	ldr	r3, [r7, #4]
 8108e82:	689a      	ldr	r2, [r3, #8]
 8108e84:	68fb      	ldr	r3, [r7, #12]
 8108e86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8108e88:	687b      	ldr	r3, [r7, #4]
 8108e8a:	2200      	movs	r2, #0
 8108e8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8108e8e:	68fb      	ldr	r3, [r7, #12]
 8108e90:	681b      	ldr	r3, [r3, #0]
 8108e92:	1e5a      	subs	r2, r3, #1
 8108e94:	68fb      	ldr	r3, [r7, #12]
 8108e96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8108e98:	68fb      	ldr	r3, [r7, #12]
 8108e9a:	681b      	ldr	r3, [r3, #0]
}
 8108e9c:	4618      	mov	r0, r3
 8108e9e:	3714      	adds	r7, #20
 8108ea0:	46bd      	mov	sp, r7
 8108ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ea6:	4770      	bx	lr

08108ea8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8108ea8:	b480      	push	{r7}
 8108eaa:	b085      	sub	sp, #20
 8108eac:	af00      	add	r7, sp, #0
 8108eae:	60f8      	str	r0, [r7, #12]
 8108eb0:	60b9      	str	r1, [r7, #8]
 8108eb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8108eb4:	68fb      	ldr	r3, [r7, #12]
 8108eb6:	3b04      	subs	r3, #4
 8108eb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8108eba:	68fb      	ldr	r3, [r7, #12]
 8108ebc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8108ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8108ec2:	68fb      	ldr	r3, [r7, #12]
 8108ec4:	3b04      	subs	r3, #4
 8108ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8108ec8:	68bb      	ldr	r3, [r7, #8]
 8108eca:	f023 0201 	bic.w	r2, r3, #1
 8108ece:	68fb      	ldr	r3, [r7, #12]
 8108ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8108ed2:	68fb      	ldr	r3, [r7, #12]
 8108ed4:	3b04      	subs	r3, #4
 8108ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8108ed8:	4a0c      	ldr	r2, [pc, #48]	; (8108f0c <pxPortInitialiseStack+0x64>)
 8108eda:	68fb      	ldr	r3, [r7, #12]
 8108edc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8108ede:	68fb      	ldr	r3, [r7, #12]
 8108ee0:	3b14      	subs	r3, #20
 8108ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8108ee4:	687a      	ldr	r2, [r7, #4]
 8108ee6:	68fb      	ldr	r3, [r7, #12]
 8108ee8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8108eea:	68fb      	ldr	r3, [r7, #12]
 8108eec:	3b04      	subs	r3, #4
 8108eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8108ef0:	68fb      	ldr	r3, [r7, #12]
 8108ef2:	f06f 0202 	mvn.w	r2, #2
 8108ef6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8108ef8:	68fb      	ldr	r3, [r7, #12]
 8108efa:	3b20      	subs	r3, #32
 8108efc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8108efe:	68fb      	ldr	r3, [r7, #12]
}
 8108f00:	4618      	mov	r0, r3
 8108f02:	3714      	adds	r7, #20
 8108f04:	46bd      	mov	sp, r7
 8108f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f0a:	4770      	bx	lr
 8108f0c:	08108f11 	.word	0x08108f11

08108f10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8108f10:	b480      	push	{r7}
 8108f12:	b085      	sub	sp, #20
 8108f14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8108f16:	2300      	movs	r3, #0
 8108f18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8108f1a:	4b12      	ldr	r3, [pc, #72]	; (8108f64 <prvTaskExitError+0x54>)
 8108f1c:	681b      	ldr	r3, [r3, #0]
 8108f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108f22:	d00a      	beq.n	8108f3a <prvTaskExitError+0x2a>
	__asm volatile
 8108f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f28:	f383 8811 	msr	BASEPRI, r3
 8108f2c:	f3bf 8f6f 	isb	sy
 8108f30:	f3bf 8f4f 	dsb	sy
 8108f34:	60fb      	str	r3, [r7, #12]
}
 8108f36:	bf00      	nop
 8108f38:	e7fe      	b.n	8108f38 <prvTaskExitError+0x28>
	__asm volatile
 8108f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f3e:	f383 8811 	msr	BASEPRI, r3
 8108f42:	f3bf 8f6f 	isb	sy
 8108f46:	f3bf 8f4f 	dsb	sy
 8108f4a:	60bb      	str	r3, [r7, #8]
}
 8108f4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8108f4e:	bf00      	nop
 8108f50:	687b      	ldr	r3, [r7, #4]
 8108f52:	2b00      	cmp	r3, #0
 8108f54:	d0fc      	beq.n	8108f50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8108f56:	bf00      	nop
 8108f58:	bf00      	nop
 8108f5a:	3714      	adds	r7, #20
 8108f5c:	46bd      	mov	sp, r7
 8108f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f62:	4770      	bx	lr
 8108f64:	10000024 	.word	0x10000024
	...

08108f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8108f70:	4b07      	ldr	r3, [pc, #28]	; (8108f90 <pxCurrentTCBConst2>)
 8108f72:	6819      	ldr	r1, [r3, #0]
 8108f74:	6808      	ldr	r0, [r1, #0]
 8108f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108f7a:	f380 8809 	msr	PSP, r0
 8108f7e:	f3bf 8f6f 	isb	sy
 8108f82:	f04f 0000 	mov.w	r0, #0
 8108f86:	f380 8811 	msr	BASEPRI, r0
 8108f8a:	4770      	bx	lr
 8108f8c:	f3af 8000 	nop.w

08108f90 <pxCurrentTCBConst2>:
 8108f90:	100040ac 	.word	0x100040ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8108f94:	bf00      	nop
 8108f96:	bf00      	nop

08108f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8108f98:	4808      	ldr	r0, [pc, #32]	; (8108fbc <prvPortStartFirstTask+0x24>)
 8108f9a:	6800      	ldr	r0, [r0, #0]
 8108f9c:	6800      	ldr	r0, [r0, #0]
 8108f9e:	f380 8808 	msr	MSP, r0
 8108fa2:	f04f 0000 	mov.w	r0, #0
 8108fa6:	f380 8814 	msr	CONTROL, r0
 8108faa:	b662      	cpsie	i
 8108fac:	b661      	cpsie	f
 8108fae:	f3bf 8f4f 	dsb	sy
 8108fb2:	f3bf 8f6f 	isb	sy
 8108fb6:	df00      	svc	0
 8108fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8108fba:	bf00      	nop
 8108fbc:	e000ed08 	.word	0xe000ed08

08108fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8108fc0:	b580      	push	{r7, lr}
 8108fc2:	b086      	sub	sp, #24
 8108fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8108fc6:	4b46      	ldr	r3, [pc, #280]	; (81090e0 <xPortStartScheduler+0x120>)
 8108fc8:	681b      	ldr	r3, [r3, #0]
 8108fca:	4a46      	ldr	r2, [pc, #280]	; (81090e4 <xPortStartScheduler+0x124>)
 8108fcc:	4293      	cmp	r3, r2
 8108fce:	d10a      	bne.n	8108fe6 <xPortStartScheduler+0x26>
	__asm volatile
 8108fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108fd4:	f383 8811 	msr	BASEPRI, r3
 8108fd8:	f3bf 8f6f 	isb	sy
 8108fdc:	f3bf 8f4f 	dsb	sy
 8108fe0:	613b      	str	r3, [r7, #16]
}
 8108fe2:	bf00      	nop
 8108fe4:	e7fe      	b.n	8108fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8108fe6:	4b3e      	ldr	r3, [pc, #248]	; (81090e0 <xPortStartScheduler+0x120>)
 8108fe8:	681b      	ldr	r3, [r3, #0]
 8108fea:	4a3f      	ldr	r2, [pc, #252]	; (81090e8 <xPortStartScheduler+0x128>)
 8108fec:	4293      	cmp	r3, r2
 8108fee:	d10a      	bne.n	8109006 <xPortStartScheduler+0x46>
	__asm volatile
 8108ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108ff4:	f383 8811 	msr	BASEPRI, r3
 8108ff8:	f3bf 8f6f 	isb	sy
 8108ffc:	f3bf 8f4f 	dsb	sy
 8109000:	60fb      	str	r3, [r7, #12]
}
 8109002:	bf00      	nop
 8109004:	e7fe      	b.n	8109004 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8109006:	4b39      	ldr	r3, [pc, #228]	; (81090ec <xPortStartScheduler+0x12c>)
 8109008:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810900a:	697b      	ldr	r3, [r7, #20]
 810900c:	781b      	ldrb	r3, [r3, #0]
 810900e:	b2db      	uxtb	r3, r3
 8109010:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8109012:	697b      	ldr	r3, [r7, #20]
 8109014:	22ff      	movs	r2, #255	; 0xff
 8109016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8109018:	697b      	ldr	r3, [r7, #20]
 810901a:	781b      	ldrb	r3, [r3, #0]
 810901c:	b2db      	uxtb	r3, r3
 810901e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8109020:	78fb      	ldrb	r3, [r7, #3]
 8109022:	b2db      	uxtb	r3, r3
 8109024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8109028:	b2da      	uxtb	r2, r3
 810902a:	4b31      	ldr	r3, [pc, #196]	; (81090f0 <xPortStartScheduler+0x130>)
 810902c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810902e:	4b31      	ldr	r3, [pc, #196]	; (81090f4 <xPortStartScheduler+0x134>)
 8109030:	2207      	movs	r2, #7
 8109032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8109034:	e009      	b.n	810904a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8109036:	4b2f      	ldr	r3, [pc, #188]	; (81090f4 <xPortStartScheduler+0x134>)
 8109038:	681b      	ldr	r3, [r3, #0]
 810903a:	3b01      	subs	r3, #1
 810903c:	4a2d      	ldr	r2, [pc, #180]	; (81090f4 <xPortStartScheduler+0x134>)
 810903e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8109040:	78fb      	ldrb	r3, [r7, #3]
 8109042:	b2db      	uxtb	r3, r3
 8109044:	005b      	lsls	r3, r3, #1
 8109046:	b2db      	uxtb	r3, r3
 8109048:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810904a:	78fb      	ldrb	r3, [r7, #3]
 810904c:	b2db      	uxtb	r3, r3
 810904e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109052:	2b80      	cmp	r3, #128	; 0x80
 8109054:	d0ef      	beq.n	8109036 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8109056:	4b27      	ldr	r3, [pc, #156]	; (81090f4 <xPortStartScheduler+0x134>)
 8109058:	681b      	ldr	r3, [r3, #0]
 810905a:	f1c3 0307 	rsb	r3, r3, #7
 810905e:	2b04      	cmp	r3, #4
 8109060:	d00a      	beq.n	8109078 <xPortStartScheduler+0xb8>
	__asm volatile
 8109062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109066:	f383 8811 	msr	BASEPRI, r3
 810906a:	f3bf 8f6f 	isb	sy
 810906e:	f3bf 8f4f 	dsb	sy
 8109072:	60bb      	str	r3, [r7, #8]
}
 8109074:	bf00      	nop
 8109076:	e7fe      	b.n	8109076 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8109078:	4b1e      	ldr	r3, [pc, #120]	; (81090f4 <xPortStartScheduler+0x134>)
 810907a:	681b      	ldr	r3, [r3, #0]
 810907c:	021b      	lsls	r3, r3, #8
 810907e:	4a1d      	ldr	r2, [pc, #116]	; (81090f4 <xPortStartScheduler+0x134>)
 8109080:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8109082:	4b1c      	ldr	r3, [pc, #112]	; (81090f4 <xPortStartScheduler+0x134>)
 8109084:	681b      	ldr	r3, [r3, #0]
 8109086:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810908a:	4a1a      	ldr	r2, [pc, #104]	; (81090f4 <xPortStartScheduler+0x134>)
 810908c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810908e:	687b      	ldr	r3, [r7, #4]
 8109090:	b2da      	uxtb	r2, r3
 8109092:	697b      	ldr	r3, [r7, #20]
 8109094:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8109096:	4b18      	ldr	r3, [pc, #96]	; (81090f8 <xPortStartScheduler+0x138>)
 8109098:	681b      	ldr	r3, [r3, #0]
 810909a:	4a17      	ldr	r2, [pc, #92]	; (81090f8 <xPortStartScheduler+0x138>)
 810909c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81090a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81090a2:	4b15      	ldr	r3, [pc, #84]	; (81090f8 <xPortStartScheduler+0x138>)
 81090a4:	681b      	ldr	r3, [r3, #0]
 81090a6:	4a14      	ldr	r2, [pc, #80]	; (81090f8 <xPortStartScheduler+0x138>)
 81090a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 81090ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81090ae:	f000 f8dd 	bl	810926c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81090b2:	4b12      	ldr	r3, [pc, #72]	; (81090fc <xPortStartScheduler+0x13c>)
 81090b4:	2200      	movs	r2, #0
 81090b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81090b8:	f000 f8fc 	bl	81092b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81090bc:	4b10      	ldr	r3, [pc, #64]	; (8109100 <xPortStartScheduler+0x140>)
 81090be:	681b      	ldr	r3, [r3, #0]
 81090c0:	4a0f      	ldr	r2, [pc, #60]	; (8109100 <xPortStartScheduler+0x140>)
 81090c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 81090c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81090c8:	f7ff ff66 	bl	8108f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81090cc:	f001 fa02 	bl	810a4d4 <vTaskSwitchContext>
	prvTaskExitError();
 81090d0:	f7ff ff1e 	bl	8108f10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81090d4:	2300      	movs	r3, #0
}
 81090d6:	4618      	mov	r0, r3
 81090d8:	3718      	adds	r7, #24
 81090da:	46bd      	mov	sp, r7
 81090dc:	bd80      	pop	{r7, pc}
 81090de:	bf00      	nop
 81090e0:	e000ed00 	.word	0xe000ed00
 81090e4:	410fc271 	.word	0x410fc271
 81090e8:	410fc270 	.word	0x410fc270
 81090ec:	e000e400 	.word	0xe000e400
 81090f0:	100040a4 	.word	0x100040a4
 81090f4:	100040a8 	.word	0x100040a8
 81090f8:	e000ed20 	.word	0xe000ed20
 81090fc:	10000024 	.word	0x10000024
 8109100:	e000ef34 	.word	0xe000ef34

08109104 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8109104:	b480      	push	{r7}
 8109106:	b083      	sub	sp, #12
 8109108:	af00      	add	r7, sp, #0
	__asm volatile
 810910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810910e:	f383 8811 	msr	BASEPRI, r3
 8109112:	f3bf 8f6f 	isb	sy
 8109116:	f3bf 8f4f 	dsb	sy
 810911a:	607b      	str	r3, [r7, #4]
}
 810911c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810911e:	4b0f      	ldr	r3, [pc, #60]	; (810915c <vPortEnterCritical+0x58>)
 8109120:	681b      	ldr	r3, [r3, #0]
 8109122:	3301      	adds	r3, #1
 8109124:	4a0d      	ldr	r2, [pc, #52]	; (810915c <vPortEnterCritical+0x58>)
 8109126:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8109128:	4b0c      	ldr	r3, [pc, #48]	; (810915c <vPortEnterCritical+0x58>)
 810912a:	681b      	ldr	r3, [r3, #0]
 810912c:	2b01      	cmp	r3, #1
 810912e:	d10f      	bne.n	8109150 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8109130:	4b0b      	ldr	r3, [pc, #44]	; (8109160 <vPortEnterCritical+0x5c>)
 8109132:	681b      	ldr	r3, [r3, #0]
 8109134:	b2db      	uxtb	r3, r3
 8109136:	2b00      	cmp	r3, #0
 8109138:	d00a      	beq.n	8109150 <vPortEnterCritical+0x4c>
	__asm volatile
 810913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810913e:	f383 8811 	msr	BASEPRI, r3
 8109142:	f3bf 8f6f 	isb	sy
 8109146:	f3bf 8f4f 	dsb	sy
 810914a:	603b      	str	r3, [r7, #0]
}
 810914c:	bf00      	nop
 810914e:	e7fe      	b.n	810914e <vPortEnterCritical+0x4a>
	}
}
 8109150:	bf00      	nop
 8109152:	370c      	adds	r7, #12
 8109154:	46bd      	mov	sp, r7
 8109156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810915a:	4770      	bx	lr
 810915c:	10000024 	.word	0x10000024
 8109160:	e000ed04 	.word	0xe000ed04

08109164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8109164:	b480      	push	{r7}
 8109166:	b083      	sub	sp, #12
 8109168:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810916a:	4b12      	ldr	r3, [pc, #72]	; (81091b4 <vPortExitCritical+0x50>)
 810916c:	681b      	ldr	r3, [r3, #0]
 810916e:	2b00      	cmp	r3, #0
 8109170:	d10a      	bne.n	8109188 <vPortExitCritical+0x24>
	__asm volatile
 8109172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109176:	f383 8811 	msr	BASEPRI, r3
 810917a:	f3bf 8f6f 	isb	sy
 810917e:	f3bf 8f4f 	dsb	sy
 8109182:	607b      	str	r3, [r7, #4]
}
 8109184:	bf00      	nop
 8109186:	e7fe      	b.n	8109186 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8109188:	4b0a      	ldr	r3, [pc, #40]	; (81091b4 <vPortExitCritical+0x50>)
 810918a:	681b      	ldr	r3, [r3, #0]
 810918c:	3b01      	subs	r3, #1
 810918e:	4a09      	ldr	r2, [pc, #36]	; (81091b4 <vPortExitCritical+0x50>)
 8109190:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8109192:	4b08      	ldr	r3, [pc, #32]	; (81091b4 <vPortExitCritical+0x50>)
 8109194:	681b      	ldr	r3, [r3, #0]
 8109196:	2b00      	cmp	r3, #0
 8109198:	d105      	bne.n	81091a6 <vPortExitCritical+0x42>
 810919a:	2300      	movs	r3, #0
 810919c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810919e:	683b      	ldr	r3, [r7, #0]
 81091a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81091a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 81091a6:	bf00      	nop
 81091a8:	370c      	adds	r7, #12
 81091aa:	46bd      	mov	sp, r7
 81091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091b0:	4770      	bx	lr
 81091b2:	bf00      	nop
 81091b4:	10000024 	.word	0x10000024
	...

081091c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81091c0:	f3ef 8009 	mrs	r0, PSP
 81091c4:	f3bf 8f6f 	isb	sy
 81091c8:	4b15      	ldr	r3, [pc, #84]	; (8109220 <pxCurrentTCBConst>)
 81091ca:	681a      	ldr	r2, [r3, #0]
 81091cc:	f01e 0f10 	tst.w	lr, #16
 81091d0:	bf08      	it	eq
 81091d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81091d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81091da:	6010      	str	r0, [r2, #0]
 81091dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 81091e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 81091e4:	f380 8811 	msr	BASEPRI, r0
 81091e8:	f3bf 8f4f 	dsb	sy
 81091ec:	f3bf 8f6f 	isb	sy
 81091f0:	f001 f970 	bl	810a4d4 <vTaskSwitchContext>
 81091f4:	f04f 0000 	mov.w	r0, #0
 81091f8:	f380 8811 	msr	BASEPRI, r0
 81091fc:	bc09      	pop	{r0, r3}
 81091fe:	6819      	ldr	r1, [r3, #0]
 8109200:	6808      	ldr	r0, [r1, #0]
 8109202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109206:	f01e 0f10 	tst.w	lr, #16
 810920a:	bf08      	it	eq
 810920c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8109210:	f380 8809 	msr	PSP, r0
 8109214:	f3bf 8f6f 	isb	sy
 8109218:	4770      	bx	lr
 810921a:	bf00      	nop
 810921c:	f3af 8000 	nop.w

08109220 <pxCurrentTCBConst>:
 8109220:	100040ac 	.word	0x100040ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8109224:	bf00      	nop
 8109226:	bf00      	nop

08109228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8109228:	b580      	push	{r7, lr}
 810922a:	b082      	sub	sp, #8
 810922c:	af00      	add	r7, sp, #0
	__asm volatile
 810922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109232:	f383 8811 	msr	BASEPRI, r3
 8109236:	f3bf 8f6f 	isb	sy
 810923a:	f3bf 8f4f 	dsb	sy
 810923e:	607b      	str	r3, [r7, #4]
}
 8109240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8109242:	f001 f88f 	bl	810a364 <xTaskIncrementTick>
 8109246:	4603      	mov	r3, r0
 8109248:	2b00      	cmp	r3, #0
 810924a:	d003      	beq.n	8109254 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810924c:	4b06      	ldr	r3, [pc, #24]	; (8109268 <SysTick_Handler+0x40>)
 810924e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109252:	601a      	str	r2, [r3, #0]
 8109254:	2300      	movs	r3, #0
 8109256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8109258:	683b      	ldr	r3, [r7, #0]
 810925a:	f383 8811 	msr	BASEPRI, r3
}
 810925e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8109260:	bf00      	nop
 8109262:	3708      	adds	r7, #8
 8109264:	46bd      	mov	sp, r7
 8109266:	bd80      	pop	{r7, pc}
 8109268:	e000ed04 	.word	0xe000ed04

0810926c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810926c:	b480      	push	{r7}
 810926e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8109270:	4b0b      	ldr	r3, [pc, #44]	; (81092a0 <vPortSetupTimerInterrupt+0x34>)
 8109272:	2200      	movs	r2, #0
 8109274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8109276:	4b0b      	ldr	r3, [pc, #44]	; (81092a4 <vPortSetupTimerInterrupt+0x38>)
 8109278:	2200      	movs	r2, #0
 810927a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810927c:	4b0a      	ldr	r3, [pc, #40]	; (81092a8 <vPortSetupTimerInterrupt+0x3c>)
 810927e:	681b      	ldr	r3, [r3, #0]
 8109280:	4a0a      	ldr	r2, [pc, #40]	; (81092ac <vPortSetupTimerInterrupt+0x40>)
 8109282:	fba2 2303 	umull	r2, r3, r2, r3
 8109286:	099b      	lsrs	r3, r3, #6
 8109288:	4a09      	ldr	r2, [pc, #36]	; (81092b0 <vPortSetupTimerInterrupt+0x44>)
 810928a:	3b01      	subs	r3, #1
 810928c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810928e:	4b04      	ldr	r3, [pc, #16]	; (81092a0 <vPortSetupTimerInterrupt+0x34>)
 8109290:	2207      	movs	r2, #7
 8109292:	601a      	str	r2, [r3, #0]
}
 8109294:	bf00      	nop
 8109296:	46bd      	mov	sp, r7
 8109298:	f85d 7b04 	ldr.w	r7, [sp], #4
 810929c:	4770      	bx	lr
 810929e:	bf00      	nop
 81092a0:	e000e010 	.word	0xe000e010
 81092a4:	e000e018 	.word	0xe000e018
 81092a8:	10000004 	.word	0x10000004
 81092ac:	10624dd3 	.word	0x10624dd3
 81092b0:	e000e014 	.word	0xe000e014

081092b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81092b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 81092c4 <vPortEnableVFP+0x10>
 81092b8:	6801      	ldr	r1, [r0, #0]
 81092ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81092be:	6001      	str	r1, [r0, #0]
 81092c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81092c2:	bf00      	nop
 81092c4:	e000ed88 	.word	0xe000ed88

081092c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 81092c8:	b580      	push	{r7, lr}
 81092ca:	b084      	sub	sp, #16
 81092cc:	af00      	add	r7, sp, #0
 81092ce:	6078      	str	r0, [r7, #4]
 81092d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 81092d2:	687b      	ldr	r3, [r7, #4]
 81092d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 81092d6:	68fb      	ldr	r3, [r7, #12]
 81092d8:	2b00      	cmp	r3, #0
 81092da:	d10a      	bne.n	81092f2 <xQueueGenericReset+0x2a>
	__asm volatile
 81092dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81092e0:	f383 8811 	msr	BASEPRI, r3
 81092e4:	f3bf 8f6f 	isb	sy
 81092e8:	f3bf 8f4f 	dsb	sy
 81092ec:	60bb      	str	r3, [r7, #8]
}
 81092ee:	bf00      	nop
 81092f0:	e7fe      	b.n	81092f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 81092f2:	f7ff ff07 	bl	8109104 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81092f6:	68fb      	ldr	r3, [r7, #12]
 81092f8:	681a      	ldr	r2, [r3, #0]
 81092fa:	68fb      	ldr	r3, [r7, #12]
 81092fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81092fe:	68f9      	ldr	r1, [r7, #12]
 8109300:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8109302:	fb01 f303 	mul.w	r3, r1, r3
 8109306:	441a      	add	r2, r3
 8109308:	68fb      	ldr	r3, [r7, #12]
 810930a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810930c:	68fb      	ldr	r3, [r7, #12]
 810930e:	2200      	movs	r2, #0
 8109310:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8109312:	68fb      	ldr	r3, [r7, #12]
 8109314:	681a      	ldr	r2, [r3, #0]
 8109316:	68fb      	ldr	r3, [r7, #12]
 8109318:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810931a:	68fb      	ldr	r3, [r7, #12]
 810931c:	681a      	ldr	r2, [r3, #0]
 810931e:	68fb      	ldr	r3, [r7, #12]
 8109320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109322:	3b01      	subs	r3, #1
 8109324:	68f9      	ldr	r1, [r7, #12]
 8109326:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8109328:	fb01 f303 	mul.w	r3, r1, r3
 810932c:	441a      	add	r2, r3
 810932e:	68fb      	ldr	r3, [r7, #12]
 8109330:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8109332:	68fb      	ldr	r3, [r7, #12]
 8109334:	22ff      	movs	r2, #255	; 0xff
 8109336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810933a:	68fb      	ldr	r3, [r7, #12]
 810933c:	22ff      	movs	r2, #255	; 0xff
 810933e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8109342:	683b      	ldr	r3, [r7, #0]
 8109344:	2b00      	cmp	r3, #0
 8109346:	d114      	bne.n	8109372 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109348:	68fb      	ldr	r3, [r7, #12]
 810934a:	691b      	ldr	r3, [r3, #16]
 810934c:	2b00      	cmp	r3, #0
 810934e:	d01a      	beq.n	8109386 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109350:	68fb      	ldr	r3, [r7, #12]
 8109352:	3310      	adds	r3, #16
 8109354:	4618      	mov	r0, r3
 8109356:	f001 f93d 	bl	810a5d4 <xTaskRemoveFromEventList>
 810935a:	4603      	mov	r3, r0
 810935c:	2b00      	cmp	r3, #0
 810935e:	d012      	beq.n	8109386 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8109360:	4b0c      	ldr	r3, [pc, #48]	; (8109394 <xQueueGenericReset+0xcc>)
 8109362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109366:	601a      	str	r2, [r3, #0]
 8109368:	f3bf 8f4f 	dsb	sy
 810936c:	f3bf 8f6f 	isb	sy
 8109370:	e009      	b.n	8109386 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8109372:	68fb      	ldr	r3, [r7, #12]
 8109374:	3310      	adds	r3, #16
 8109376:	4618      	mov	r0, r3
 8109378:	f7ff fce2 	bl	8108d40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810937c:	68fb      	ldr	r3, [r7, #12]
 810937e:	3324      	adds	r3, #36	; 0x24
 8109380:	4618      	mov	r0, r3
 8109382:	f7ff fcdd 	bl	8108d40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8109386:	f7ff feed 	bl	8109164 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810938a:	2301      	movs	r3, #1
}
 810938c:	4618      	mov	r0, r3
 810938e:	3710      	adds	r7, #16
 8109390:	46bd      	mov	sp, r7
 8109392:	bd80      	pop	{r7, pc}
 8109394:	e000ed04 	.word	0xe000ed04

08109398 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8109398:	b580      	push	{r7, lr}
 810939a:	b08e      	sub	sp, #56	; 0x38
 810939c:	af02      	add	r7, sp, #8
 810939e:	60f8      	str	r0, [r7, #12]
 81093a0:	60b9      	str	r1, [r7, #8]
 81093a2:	607a      	str	r2, [r7, #4]
 81093a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 81093a6:	68fb      	ldr	r3, [r7, #12]
 81093a8:	2b00      	cmp	r3, #0
 81093aa:	d10a      	bne.n	81093c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 81093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 81093b0:	f383 8811 	msr	BASEPRI, r3
 81093b4:	f3bf 8f6f 	isb	sy
 81093b8:	f3bf 8f4f 	dsb	sy
 81093bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 81093be:	bf00      	nop
 81093c0:	e7fe      	b.n	81093c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 81093c2:	683b      	ldr	r3, [r7, #0]
 81093c4:	2b00      	cmp	r3, #0
 81093c6:	d10a      	bne.n	81093de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 81093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81093cc:	f383 8811 	msr	BASEPRI, r3
 81093d0:	f3bf 8f6f 	isb	sy
 81093d4:	f3bf 8f4f 	dsb	sy
 81093d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 81093da:	bf00      	nop
 81093dc:	e7fe      	b.n	81093dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 81093de:	687b      	ldr	r3, [r7, #4]
 81093e0:	2b00      	cmp	r3, #0
 81093e2:	d002      	beq.n	81093ea <xQueueGenericCreateStatic+0x52>
 81093e4:	68bb      	ldr	r3, [r7, #8]
 81093e6:	2b00      	cmp	r3, #0
 81093e8:	d001      	beq.n	81093ee <xQueueGenericCreateStatic+0x56>
 81093ea:	2301      	movs	r3, #1
 81093ec:	e000      	b.n	81093f0 <xQueueGenericCreateStatic+0x58>
 81093ee:	2300      	movs	r3, #0
 81093f0:	2b00      	cmp	r3, #0
 81093f2:	d10a      	bne.n	810940a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 81093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81093f8:	f383 8811 	msr	BASEPRI, r3
 81093fc:	f3bf 8f6f 	isb	sy
 8109400:	f3bf 8f4f 	dsb	sy
 8109404:	623b      	str	r3, [r7, #32]
}
 8109406:	bf00      	nop
 8109408:	e7fe      	b.n	8109408 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810940a:	687b      	ldr	r3, [r7, #4]
 810940c:	2b00      	cmp	r3, #0
 810940e:	d102      	bne.n	8109416 <xQueueGenericCreateStatic+0x7e>
 8109410:	68bb      	ldr	r3, [r7, #8]
 8109412:	2b00      	cmp	r3, #0
 8109414:	d101      	bne.n	810941a <xQueueGenericCreateStatic+0x82>
 8109416:	2301      	movs	r3, #1
 8109418:	e000      	b.n	810941c <xQueueGenericCreateStatic+0x84>
 810941a:	2300      	movs	r3, #0
 810941c:	2b00      	cmp	r3, #0
 810941e:	d10a      	bne.n	8109436 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8109420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109424:	f383 8811 	msr	BASEPRI, r3
 8109428:	f3bf 8f6f 	isb	sy
 810942c:	f3bf 8f4f 	dsb	sy
 8109430:	61fb      	str	r3, [r7, #28]
}
 8109432:	bf00      	nop
 8109434:	e7fe      	b.n	8109434 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8109436:	2348      	movs	r3, #72	; 0x48
 8109438:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810943a:	697b      	ldr	r3, [r7, #20]
 810943c:	2b48      	cmp	r3, #72	; 0x48
 810943e:	d00a      	beq.n	8109456 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8109440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109444:	f383 8811 	msr	BASEPRI, r3
 8109448:	f3bf 8f6f 	isb	sy
 810944c:	f3bf 8f4f 	dsb	sy
 8109450:	61bb      	str	r3, [r7, #24]
}
 8109452:	bf00      	nop
 8109454:	e7fe      	b.n	8109454 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8109456:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8109458:	683b      	ldr	r3, [r7, #0]
 810945a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 810945c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810945e:	2b00      	cmp	r3, #0
 8109460:	d00d      	beq.n	810947e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8109462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109464:	2201      	movs	r2, #1
 8109466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810946a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 810946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109470:	9300      	str	r3, [sp, #0]
 8109472:	4613      	mov	r3, r2
 8109474:	687a      	ldr	r2, [r7, #4]
 8109476:	68b9      	ldr	r1, [r7, #8]
 8109478:	68f8      	ldr	r0, [r7, #12]
 810947a:	f000 f845 	bl	8109508 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810947e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8109480:	4618      	mov	r0, r3
 8109482:	3730      	adds	r7, #48	; 0x30
 8109484:	46bd      	mov	sp, r7
 8109486:	bd80      	pop	{r7, pc}

08109488 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8109488:	b580      	push	{r7, lr}
 810948a:	b08a      	sub	sp, #40	; 0x28
 810948c:	af02      	add	r7, sp, #8
 810948e:	60f8      	str	r0, [r7, #12]
 8109490:	60b9      	str	r1, [r7, #8]
 8109492:	4613      	mov	r3, r2
 8109494:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8109496:	68fb      	ldr	r3, [r7, #12]
 8109498:	2b00      	cmp	r3, #0
 810949a:	d10a      	bne.n	81094b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 810949c:	f04f 0350 	mov.w	r3, #80	; 0x50
 81094a0:	f383 8811 	msr	BASEPRI, r3
 81094a4:	f3bf 8f6f 	isb	sy
 81094a8:	f3bf 8f4f 	dsb	sy
 81094ac:	613b      	str	r3, [r7, #16]
}
 81094ae:	bf00      	nop
 81094b0:	e7fe      	b.n	81094b0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 81094b2:	68bb      	ldr	r3, [r7, #8]
 81094b4:	2b00      	cmp	r3, #0
 81094b6:	d102      	bne.n	81094be <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 81094b8:	2300      	movs	r3, #0
 81094ba:	61fb      	str	r3, [r7, #28]
 81094bc:	e004      	b.n	81094c8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81094be:	68fb      	ldr	r3, [r7, #12]
 81094c0:	68ba      	ldr	r2, [r7, #8]
 81094c2:	fb02 f303 	mul.w	r3, r2, r3
 81094c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 81094c8:	69fb      	ldr	r3, [r7, #28]
 81094ca:	3348      	adds	r3, #72	; 0x48
 81094cc:	4618      	mov	r0, r3
 81094ce:	f7ff fa5d 	bl	810898c <pvPortMalloc>
 81094d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 81094d4:	69bb      	ldr	r3, [r7, #24]
 81094d6:	2b00      	cmp	r3, #0
 81094d8:	d011      	beq.n	81094fe <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 81094da:	69bb      	ldr	r3, [r7, #24]
 81094dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81094de:	697b      	ldr	r3, [r7, #20]
 81094e0:	3348      	adds	r3, #72	; 0x48
 81094e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 81094e4:	69bb      	ldr	r3, [r7, #24]
 81094e6:	2200      	movs	r2, #0
 81094e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81094ec:	79fa      	ldrb	r2, [r7, #7]
 81094ee:	69bb      	ldr	r3, [r7, #24]
 81094f0:	9300      	str	r3, [sp, #0]
 81094f2:	4613      	mov	r3, r2
 81094f4:	697a      	ldr	r2, [r7, #20]
 81094f6:	68b9      	ldr	r1, [r7, #8]
 81094f8:	68f8      	ldr	r0, [r7, #12]
 81094fa:	f000 f805 	bl	8109508 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 81094fe:	69bb      	ldr	r3, [r7, #24]
	}
 8109500:	4618      	mov	r0, r3
 8109502:	3720      	adds	r7, #32
 8109504:	46bd      	mov	sp, r7
 8109506:	bd80      	pop	{r7, pc}

08109508 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8109508:	b580      	push	{r7, lr}
 810950a:	b084      	sub	sp, #16
 810950c:	af00      	add	r7, sp, #0
 810950e:	60f8      	str	r0, [r7, #12]
 8109510:	60b9      	str	r1, [r7, #8]
 8109512:	607a      	str	r2, [r7, #4]
 8109514:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8109516:	68bb      	ldr	r3, [r7, #8]
 8109518:	2b00      	cmp	r3, #0
 810951a:	d103      	bne.n	8109524 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810951c:	69bb      	ldr	r3, [r7, #24]
 810951e:	69ba      	ldr	r2, [r7, #24]
 8109520:	601a      	str	r2, [r3, #0]
 8109522:	e002      	b.n	810952a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8109524:	69bb      	ldr	r3, [r7, #24]
 8109526:	687a      	ldr	r2, [r7, #4]
 8109528:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810952a:	69bb      	ldr	r3, [r7, #24]
 810952c:	68fa      	ldr	r2, [r7, #12]
 810952e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8109530:	69bb      	ldr	r3, [r7, #24]
 8109532:	68ba      	ldr	r2, [r7, #8]
 8109534:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8109536:	2101      	movs	r1, #1
 8109538:	69b8      	ldr	r0, [r7, #24]
 810953a:	f7ff fec5 	bl	81092c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810953e:	bf00      	nop
 8109540:	3710      	adds	r7, #16
 8109542:	46bd      	mov	sp, r7
 8109544:	bd80      	pop	{r7, pc}
	...

08109548 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8109548:	b580      	push	{r7, lr}
 810954a:	b08e      	sub	sp, #56	; 0x38
 810954c:	af00      	add	r7, sp, #0
 810954e:	60f8      	str	r0, [r7, #12]
 8109550:	60b9      	str	r1, [r7, #8]
 8109552:	607a      	str	r2, [r7, #4]
 8109554:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8109556:	2300      	movs	r3, #0
 8109558:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810955a:	68fb      	ldr	r3, [r7, #12]
 810955c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109560:	2b00      	cmp	r3, #0
 8109562:	d10a      	bne.n	810957a <xQueueGenericSend+0x32>
	__asm volatile
 8109564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109568:	f383 8811 	msr	BASEPRI, r3
 810956c:	f3bf 8f6f 	isb	sy
 8109570:	f3bf 8f4f 	dsb	sy
 8109574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8109576:	bf00      	nop
 8109578:	e7fe      	b.n	8109578 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810957a:	68bb      	ldr	r3, [r7, #8]
 810957c:	2b00      	cmp	r3, #0
 810957e:	d103      	bne.n	8109588 <xQueueGenericSend+0x40>
 8109580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109584:	2b00      	cmp	r3, #0
 8109586:	d101      	bne.n	810958c <xQueueGenericSend+0x44>
 8109588:	2301      	movs	r3, #1
 810958a:	e000      	b.n	810958e <xQueueGenericSend+0x46>
 810958c:	2300      	movs	r3, #0
 810958e:	2b00      	cmp	r3, #0
 8109590:	d10a      	bne.n	81095a8 <xQueueGenericSend+0x60>
	__asm volatile
 8109592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109596:	f383 8811 	msr	BASEPRI, r3
 810959a:	f3bf 8f6f 	isb	sy
 810959e:	f3bf 8f4f 	dsb	sy
 81095a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 81095a4:	bf00      	nop
 81095a6:	e7fe      	b.n	81095a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81095a8:	683b      	ldr	r3, [r7, #0]
 81095aa:	2b02      	cmp	r3, #2
 81095ac:	d103      	bne.n	81095b6 <xQueueGenericSend+0x6e>
 81095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81095b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81095b2:	2b01      	cmp	r3, #1
 81095b4:	d101      	bne.n	81095ba <xQueueGenericSend+0x72>
 81095b6:	2301      	movs	r3, #1
 81095b8:	e000      	b.n	81095bc <xQueueGenericSend+0x74>
 81095ba:	2300      	movs	r3, #0
 81095bc:	2b00      	cmp	r3, #0
 81095be:	d10a      	bne.n	81095d6 <xQueueGenericSend+0x8e>
	__asm volatile
 81095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81095c4:	f383 8811 	msr	BASEPRI, r3
 81095c8:	f3bf 8f6f 	isb	sy
 81095cc:	f3bf 8f4f 	dsb	sy
 81095d0:	623b      	str	r3, [r7, #32]
}
 81095d2:	bf00      	nop
 81095d4:	e7fe      	b.n	81095d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81095d6:	f001 f9ef 	bl	810a9b8 <xTaskGetSchedulerState>
 81095da:	4603      	mov	r3, r0
 81095dc:	2b00      	cmp	r3, #0
 81095de:	d102      	bne.n	81095e6 <xQueueGenericSend+0x9e>
 81095e0:	687b      	ldr	r3, [r7, #4]
 81095e2:	2b00      	cmp	r3, #0
 81095e4:	d101      	bne.n	81095ea <xQueueGenericSend+0xa2>
 81095e6:	2301      	movs	r3, #1
 81095e8:	e000      	b.n	81095ec <xQueueGenericSend+0xa4>
 81095ea:	2300      	movs	r3, #0
 81095ec:	2b00      	cmp	r3, #0
 81095ee:	d10a      	bne.n	8109606 <xQueueGenericSend+0xbe>
	__asm volatile
 81095f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81095f4:	f383 8811 	msr	BASEPRI, r3
 81095f8:	f3bf 8f6f 	isb	sy
 81095fc:	f3bf 8f4f 	dsb	sy
 8109600:	61fb      	str	r3, [r7, #28]
}
 8109602:	bf00      	nop
 8109604:	e7fe      	b.n	8109604 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8109606:	f7ff fd7d 	bl	8109104 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810960a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810960c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109612:	429a      	cmp	r2, r3
 8109614:	d302      	bcc.n	810961c <xQueueGenericSend+0xd4>
 8109616:	683b      	ldr	r3, [r7, #0]
 8109618:	2b02      	cmp	r3, #2
 810961a:	d129      	bne.n	8109670 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810961c:	683a      	ldr	r2, [r7, #0]
 810961e:	68b9      	ldr	r1, [r7, #8]
 8109620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109622:	f000 f88f 	bl	8109744 <prvCopyDataToQueue>
 8109626:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8109628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810962c:	2b00      	cmp	r3, #0
 810962e:	d010      	beq.n	8109652 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8109630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109632:	3324      	adds	r3, #36	; 0x24
 8109634:	4618      	mov	r0, r3
 8109636:	f000 ffcd 	bl	810a5d4 <xTaskRemoveFromEventList>
 810963a:	4603      	mov	r3, r0
 810963c:	2b00      	cmp	r3, #0
 810963e:	d013      	beq.n	8109668 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8109640:	4b3f      	ldr	r3, [pc, #252]	; (8109740 <xQueueGenericSend+0x1f8>)
 8109642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109646:	601a      	str	r2, [r3, #0]
 8109648:	f3bf 8f4f 	dsb	sy
 810964c:	f3bf 8f6f 	isb	sy
 8109650:	e00a      	b.n	8109668 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8109652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109654:	2b00      	cmp	r3, #0
 8109656:	d007      	beq.n	8109668 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8109658:	4b39      	ldr	r3, [pc, #228]	; (8109740 <xQueueGenericSend+0x1f8>)
 810965a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810965e:	601a      	str	r2, [r3, #0]
 8109660:	f3bf 8f4f 	dsb	sy
 8109664:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8109668:	f7ff fd7c 	bl	8109164 <vPortExitCritical>
				return pdPASS;
 810966c:	2301      	movs	r3, #1
 810966e:	e063      	b.n	8109738 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8109670:	687b      	ldr	r3, [r7, #4]
 8109672:	2b00      	cmp	r3, #0
 8109674:	d103      	bne.n	810967e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8109676:	f7ff fd75 	bl	8109164 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810967a:	2300      	movs	r3, #0
 810967c:	e05c      	b.n	8109738 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 810967e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109680:	2b00      	cmp	r3, #0
 8109682:	d106      	bne.n	8109692 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8109684:	f107 0314 	add.w	r3, r7, #20
 8109688:	4618      	mov	r0, r3
 810968a:	f001 f82b 	bl	810a6e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810968e:	2301      	movs	r3, #1
 8109690:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8109692:	f7ff fd67 	bl	8109164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8109696:	f000 fdbb 	bl	810a210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810969a:	f7ff fd33 	bl	8109104 <vPortEnterCritical>
 810969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81096a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81096a4:	b25b      	sxtb	r3, r3
 81096a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81096aa:	d103      	bne.n	81096b4 <xQueueGenericSend+0x16c>
 81096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81096ae:	2200      	movs	r2, #0
 81096b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81096b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81096ba:	b25b      	sxtb	r3, r3
 81096bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81096c0:	d103      	bne.n	81096ca <xQueueGenericSend+0x182>
 81096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81096c4:	2200      	movs	r2, #0
 81096c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81096ca:	f7ff fd4b 	bl	8109164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81096ce:	1d3a      	adds	r2, r7, #4
 81096d0:	f107 0314 	add.w	r3, r7, #20
 81096d4:	4611      	mov	r1, r2
 81096d6:	4618      	mov	r0, r3
 81096d8:	f001 f81a 	bl	810a710 <xTaskCheckForTimeOut>
 81096dc:	4603      	mov	r3, r0
 81096de:	2b00      	cmp	r3, #0
 81096e0:	d124      	bne.n	810972c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 81096e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81096e4:	f000 f8ea 	bl	81098bc <prvIsQueueFull>
 81096e8:	4603      	mov	r3, r0
 81096ea:	2b00      	cmp	r3, #0
 81096ec:	d018      	beq.n	8109720 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 81096ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81096f0:	3310      	adds	r3, #16
 81096f2:	687a      	ldr	r2, [r7, #4]
 81096f4:	4611      	mov	r1, r2
 81096f6:	4618      	mov	r0, r3
 81096f8:	f000 ff48 	bl	810a58c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 81096fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81096fe:	f000 f88b 	bl	8109818 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8109702:	f000 fd93 	bl	810a22c <xTaskResumeAll>
 8109706:	4603      	mov	r3, r0
 8109708:	2b00      	cmp	r3, #0
 810970a:	f47f af7c 	bne.w	8109606 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 810970e:	4b0c      	ldr	r3, [pc, #48]	; (8109740 <xQueueGenericSend+0x1f8>)
 8109710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109714:	601a      	str	r2, [r3, #0]
 8109716:	f3bf 8f4f 	dsb	sy
 810971a:	f3bf 8f6f 	isb	sy
 810971e:	e772      	b.n	8109606 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8109720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109722:	f000 f879 	bl	8109818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8109726:	f000 fd81 	bl	810a22c <xTaskResumeAll>
 810972a:	e76c      	b.n	8109606 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810972c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810972e:	f000 f873 	bl	8109818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8109732:	f000 fd7b 	bl	810a22c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8109736:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8109738:	4618      	mov	r0, r3
 810973a:	3738      	adds	r7, #56	; 0x38
 810973c:	46bd      	mov	sp, r7
 810973e:	bd80      	pop	{r7, pc}
 8109740:	e000ed04 	.word	0xe000ed04

08109744 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8109744:	b580      	push	{r7, lr}
 8109746:	b086      	sub	sp, #24
 8109748:	af00      	add	r7, sp, #0
 810974a:	60f8      	str	r0, [r7, #12]
 810974c:	60b9      	str	r1, [r7, #8]
 810974e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8109750:	2300      	movs	r3, #0
 8109752:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109754:	68fb      	ldr	r3, [r7, #12]
 8109756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109758:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810975a:	68fb      	ldr	r3, [r7, #12]
 810975c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810975e:	2b00      	cmp	r3, #0
 8109760:	d10d      	bne.n	810977e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8109762:	68fb      	ldr	r3, [r7, #12]
 8109764:	681b      	ldr	r3, [r3, #0]
 8109766:	2b00      	cmp	r3, #0
 8109768:	d14d      	bne.n	8109806 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810976a:	68fb      	ldr	r3, [r7, #12]
 810976c:	689b      	ldr	r3, [r3, #8]
 810976e:	4618      	mov	r0, r3
 8109770:	f001 f940 	bl	810a9f4 <xTaskPriorityDisinherit>
 8109774:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8109776:	68fb      	ldr	r3, [r7, #12]
 8109778:	2200      	movs	r2, #0
 810977a:	609a      	str	r2, [r3, #8]
 810977c:	e043      	b.n	8109806 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810977e:	687b      	ldr	r3, [r7, #4]
 8109780:	2b00      	cmp	r3, #0
 8109782:	d119      	bne.n	81097b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8109784:	68fb      	ldr	r3, [r7, #12]
 8109786:	6858      	ldr	r0, [r3, #4]
 8109788:	68fb      	ldr	r3, [r7, #12]
 810978a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810978c:	461a      	mov	r2, r3
 810978e:	68b9      	ldr	r1, [r7, #8]
 8109790:	f005 fea4 	bl	810f4dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8109794:	68fb      	ldr	r3, [r7, #12]
 8109796:	685a      	ldr	r2, [r3, #4]
 8109798:	68fb      	ldr	r3, [r7, #12]
 810979a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810979c:	441a      	add	r2, r3
 810979e:	68fb      	ldr	r3, [r7, #12]
 81097a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81097a2:	68fb      	ldr	r3, [r7, #12]
 81097a4:	685a      	ldr	r2, [r3, #4]
 81097a6:	68fb      	ldr	r3, [r7, #12]
 81097a8:	689b      	ldr	r3, [r3, #8]
 81097aa:	429a      	cmp	r2, r3
 81097ac:	d32b      	bcc.n	8109806 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 81097ae:	68fb      	ldr	r3, [r7, #12]
 81097b0:	681a      	ldr	r2, [r3, #0]
 81097b2:	68fb      	ldr	r3, [r7, #12]
 81097b4:	605a      	str	r2, [r3, #4]
 81097b6:	e026      	b.n	8109806 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 81097b8:	68fb      	ldr	r3, [r7, #12]
 81097ba:	68d8      	ldr	r0, [r3, #12]
 81097bc:	68fb      	ldr	r3, [r7, #12]
 81097be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81097c0:	461a      	mov	r2, r3
 81097c2:	68b9      	ldr	r1, [r7, #8]
 81097c4:	f005 fe8a 	bl	810f4dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81097c8:	68fb      	ldr	r3, [r7, #12]
 81097ca:	68da      	ldr	r2, [r3, #12]
 81097cc:	68fb      	ldr	r3, [r7, #12]
 81097ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81097d0:	425b      	negs	r3, r3
 81097d2:	441a      	add	r2, r3
 81097d4:	68fb      	ldr	r3, [r7, #12]
 81097d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81097d8:	68fb      	ldr	r3, [r7, #12]
 81097da:	68da      	ldr	r2, [r3, #12]
 81097dc:	68fb      	ldr	r3, [r7, #12]
 81097de:	681b      	ldr	r3, [r3, #0]
 81097e0:	429a      	cmp	r2, r3
 81097e2:	d207      	bcs.n	81097f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 81097e4:	68fb      	ldr	r3, [r7, #12]
 81097e6:	689a      	ldr	r2, [r3, #8]
 81097e8:	68fb      	ldr	r3, [r7, #12]
 81097ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81097ec:	425b      	negs	r3, r3
 81097ee:	441a      	add	r2, r3
 81097f0:	68fb      	ldr	r3, [r7, #12]
 81097f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 81097f4:	687b      	ldr	r3, [r7, #4]
 81097f6:	2b02      	cmp	r3, #2
 81097f8:	d105      	bne.n	8109806 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81097fa:	693b      	ldr	r3, [r7, #16]
 81097fc:	2b00      	cmp	r3, #0
 81097fe:	d002      	beq.n	8109806 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8109800:	693b      	ldr	r3, [r7, #16]
 8109802:	3b01      	subs	r3, #1
 8109804:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8109806:	693b      	ldr	r3, [r7, #16]
 8109808:	1c5a      	adds	r2, r3, #1
 810980a:	68fb      	ldr	r3, [r7, #12]
 810980c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810980e:	697b      	ldr	r3, [r7, #20]
}
 8109810:	4618      	mov	r0, r3
 8109812:	3718      	adds	r7, #24
 8109814:	46bd      	mov	sp, r7
 8109816:	bd80      	pop	{r7, pc}

08109818 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8109818:	b580      	push	{r7, lr}
 810981a:	b084      	sub	sp, #16
 810981c:	af00      	add	r7, sp, #0
 810981e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8109820:	f7ff fc70 	bl	8109104 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8109824:	687b      	ldr	r3, [r7, #4]
 8109826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810982a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810982c:	e011      	b.n	8109852 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810982e:	687b      	ldr	r3, [r7, #4]
 8109830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109832:	2b00      	cmp	r3, #0
 8109834:	d012      	beq.n	810985c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8109836:	687b      	ldr	r3, [r7, #4]
 8109838:	3324      	adds	r3, #36	; 0x24
 810983a:	4618      	mov	r0, r3
 810983c:	f000 feca 	bl	810a5d4 <xTaskRemoveFromEventList>
 8109840:	4603      	mov	r3, r0
 8109842:	2b00      	cmp	r3, #0
 8109844:	d001      	beq.n	810984a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8109846:	f000 ffc5 	bl	810a7d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810984a:	7bfb      	ldrb	r3, [r7, #15]
 810984c:	3b01      	subs	r3, #1
 810984e:	b2db      	uxtb	r3, r3
 8109850:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8109852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8109856:	2b00      	cmp	r3, #0
 8109858:	dce9      	bgt.n	810982e <prvUnlockQueue+0x16>
 810985a:	e000      	b.n	810985e <prvUnlockQueue+0x46>
					break;
 810985c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810985e:	687b      	ldr	r3, [r7, #4]
 8109860:	22ff      	movs	r2, #255	; 0xff
 8109862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8109866:	f7ff fc7d 	bl	8109164 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810986a:	f7ff fc4b 	bl	8109104 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810986e:	687b      	ldr	r3, [r7, #4]
 8109870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8109874:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8109876:	e011      	b.n	810989c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109878:	687b      	ldr	r3, [r7, #4]
 810987a:	691b      	ldr	r3, [r3, #16]
 810987c:	2b00      	cmp	r3, #0
 810987e:	d012      	beq.n	81098a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109880:	687b      	ldr	r3, [r7, #4]
 8109882:	3310      	adds	r3, #16
 8109884:	4618      	mov	r0, r3
 8109886:	f000 fea5 	bl	810a5d4 <xTaskRemoveFromEventList>
 810988a:	4603      	mov	r3, r0
 810988c:	2b00      	cmp	r3, #0
 810988e:	d001      	beq.n	8109894 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8109890:	f000 ffa0 	bl	810a7d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8109894:	7bbb      	ldrb	r3, [r7, #14]
 8109896:	3b01      	subs	r3, #1
 8109898:	b2db      	uxtb	r3, r3
 810989a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810989c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81098a0:	2b00      	cmp	r3, #0
 81098a2:	dce9      	bgt.n	8109878 <prvUnlockQueue+0x60>
 81098a4:	e000      	b.n	81098a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 81098a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 81098a8:	687b      	ldr	r3, [r7, #4]
 81098aa:	22ff      	movs	r2, #255	; 0xff
 81098ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 81098b0:	f7ff fc58 	bl	8109164 <vPortExitCritical>
}
 81098b4:	bf00      	nop
 81098b6:	3710      	adds	r7, #16
 81098b8:	46bd      	mov	sp, r7
 81098ba:	bd80      	pop	{r7, pc}

081098bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 81098bc:	b580      	push	{r7, lr}
 81098be:	b084      	sub	sp, #16
 81098c0:	af00      	add	r7, sp, #0
 81098c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81098c4:	f7ff fc1e 	bl	8109104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 81098c8:	687b      	ldr	r3, [r7, #4]
 81098ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81098cc:	687b      	ldr	r3, [r7, #4]
 81098ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81098d0:	429a      	cmp	r2, r3
 81098d2:	d102      	bne.n	81098da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 81098d4:	2301      	movs	r3, #1
 81098d6:	60fb      	str	r3, [r7, #12]
 81098d8:	e001      	b.n	81098de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 81098da:	2300      	movs	r3, #0
 81098dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81098de:	f7ff fc41 	bl	8109164 <vPortExitCritical>

	return xReturn;
 81098e2:	68fb      	ldr	r3, [r7, #12]
}
 81098e4:	4618      	mov	r0, r3
 81098e6:	3710      	adds	r7, #16
 81098e8:	46bd      	mov	sp, r7
 81098ea:	bd80      	pop	{r7, pc}

081098ec <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 81098ec:	b580      	push	{r7, lr}
 81098ee:	b090      	sub	sp, #64	; 0x40
 81098f0:	af02      	add	r7, sp, #8
 81098f2:	60f8      	str	r0, [r7, #12]
 81098f4:	60b9      	str	r1, [r7, #8]
 81098f6:	607a      	str	r2, [r7, #4]
 81098f8:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 81098fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81098fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 81098fe:	683b      	ldr	r3, [r7, #0]
 8109900:	2b00      	cmp	r3, #0
 8109902:	d10a      	bne.n	810991a <xStreamBufferGenericCreateStatic+0x2e>
	__asm volatile
 8109904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109908:	f383 8811 	msr	BASEPRI, r3
 810990c:	f3bf 8f6f 	isb	sy
 8109910:	f3bf 8f4f 	dsb	sy
 8109914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8109916:	bf00      	nop
 8109918:	e7fe      	b.n	8109918 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 810991a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810991c:	2b00      	cmp	r3, #0
 810991e:	d10a      	bne.n	8109936 <xStreamBufferGenericCreateStatic+0x4a>
	__asm volatile
 8109920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109924:	f383 8811 	msr	BASEPRI, r3
 8109928:	f3bf 8f6f 	isb	sy
 810992c:	f3bf 8f4f 	dsb	sy
 8109930:	627b      	str	r3, [r7, #36]	; 0x24
}
 8109932:	bf00      	nop
 8109934:	e7fe      	b.n	8109934 <xStreamBufferGenericCreateStatic+0x48>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8109936:	68ba      	ldr	r2, [r7, #8]
 8109938:	68fb      	ldr	r3, [r7, #12]
 810993a:	429a      	cmp	r2, r3
 810993c:	d90a      	bls.n	8109954 <xStreamBufferGenericCreateStatic+0x68>
	__asm volatile
 810993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109942:	f383 8811 	msr	BASEPRI, r3
 8109946:	f3bf 8f6f 	isb	sy
 810994a:	f3bf 8f4f 	dsb	sy
 810994e:	623b      	str	r3, [r7, #32]
}
 8109950:	bf00      	nop
 8109952:	e7fe      	b.n	8109952 <xStreamBufferGenericCreateStatic+0x66>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8109954:	68bb      	ldr	r3, [r7, #8]
 8109956:	2b00      	cmp	r3, #0
 8109958:	d101      	bne.n	810995e <xStreamBufferGenericCreateStatic+0x72>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 810995a:	2301      	movs	r3, #1
 810995c:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 810995e:	687b      	ldr	r3, [r7, #4]
 8109960:	2b00      	cmp	r3, #0
 8109962:	d003      	beq.n	810996c <xStreamBufferGenericCreateStatic+0x80>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8109964:	2303      	movs	r3, #3
 8109966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810996a:	e002      	b.n	8109972 <xStreamBufferGenericCreateStatic+0x86>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 810996c:	2302      	movs	r3, #2
 810996e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8109972:	68fb      	ldr	r3, [r7, #12]
 8109974:	2b04      	cmp	r3, #4
 8109976:	d80a      	bhi.n	810998e <xStreamBufferGenericCreateStatic+0xa2>
	__asm volatile
 8109978:	f04f 0350 	mov.w	r3, #80	; 0x50
 810997c:	f383 8811 	msr	BASEPRI, r3
 8109980:	f3bf 8f6f 	isb	sy
 8109984:	f3bf 8f4f 	dsb	sy
 8109988:	61fb      	str	r3, [r7, #28]
}
 810998a:	bf00      	nop
 810998c:	e7fe      	b.n	810998c <xStreamBufferGenericCreateStatic+0xa0>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 810998e:	2320      	movs	r3, #32
 8109990:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8109992:	697b      	ldr	r3, [r7, #20]
 8109994:	2b20      	cmp	r3, #32
 8109996:	d00a      	beq.n	81099ae <xStreamBufferGenericCreateStatic+0xc2>
	__asm volatile
 8109998:	f04f 0350 	mov.w	r3, #80	; 0x50
 810999c:	f383 8811 	msr	BASEPRI, r3
 81099a0:	f3bf 8f6f 	isb	sy
 81099a4:	f3bf 8f4f 	dsb	sy
 81099a8:	61bb      	str	r3, [r7, #24]
}
 81099aa:	bf00      	nop
 81099ac:	e7fe      	b.n	81099ac <xStreamBufferGenericCreateStatic+0xc0>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 81099ae:	683b      	ldr	r3, [r7, #0]
 81099b0:	2b00      	cmp	r3, #0
 81099b2:	d015      	beq.n	81099e0 <xStreamBufferGenericCreateStatic+0xf4>
 81099b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81099b6:	2b00      	cmp	r3, #0
 81099b8:	d012      	beq.n	81099e0 <xStreamBufferGenericCreateStatic+0xf4>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 81099ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81099be:	9300      	str	r3, [sp, #0]
 81099c0:	68bb      	ldr	r3, [r7, #8]
 81099c2:	68fa      	ldr	r2, [r7, #12]
 81099c4:	6839      	ldr	r1, [r7, #0]
 81099c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 81099c8:	f000 f9c8 	bl	8109d5c <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 81099cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81099ce:	7f1b      	ldrb	r3, [r3, #28]
 81099d0:	f043 0302 	orr.w	r3, r3, #2
 81099d4:	b2da      	uxtb	r2, r3
 81099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81099d8:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 81099da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81099dc:	637b      	str	r3, [r7, #52]	; 0x34
 81099de:	e001      	b.n	81099e4 <xStreamBufferGenericCreateStatic+0xf8>
		}
		else
		{
			xReturn = NULL;
 81099e0:	2300      	movs	r3, #0
 81099e2:	637b      	str	r3, [r7, #52]	; 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 81099e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 81099e6:	4618      	mov	r0, r3
 81099e8:	3738      	adds	r7, #56	; 0x38
 81099ea:	46bd      	mov	sp, r7
 81099ec:	bd80      	pop	{r7, pc}

081099ee <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 81099ee:	b480      	push	{r7}
 81099f0:	b087      	sub	sp, #28
 81099f2:	af00      	add	r7, sp, #0
 81099f4:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 81099f6:	687b      	ldr	r3, [r7, #4]
 81099f8:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 81099fa:	693b      	ldr	r3, [r7, #16]
 81099fc:	2b00      	cmp	r3, #0
 81099fe:	d10a      	bne.n	8109a16 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8109a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a04:	f383 8811 	msr	BASEPRI, r3
 8109a08:	f3bf 8f6f 	isb	sy
 8109a0c:	f3bf 8f4f 	dsb	sy
 8109a10:	60fb      	str	r3, [r7, #12]
}
 8109a12:	bf00      	nop
 8109a14:	e7fe      	b.n	8109a14 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8109a16:	693b      	ldr	r3, [r7, #16]
 8109a18:	689a      	ldr	r2, [r3, #8]
 8109a1a:	693b      	ldr	r3, [r7, #16]
 8109a1c:	681b      	ldr	r3, [r3, #0]
 8109a1e:	4413      	add	r3, r2
 8109a20:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8109a22:	693b      	ldr	r3, [r7, #16]
 8109a24:	685b      	ldr	r3, [r3, #4]
 8109a26:	697a      	ldr	r2, [r7, #20]
 8109a28:	1ad3      	subs	r3, r2, r3
 8109a2a:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8109a2c:	697b      	ldr	r3, [r7, #20]
 8109a2e:	3b01      	subs	r3, #1
 8109a30:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8109a32:	693b      	ldr	r3, [r7, #16]
 8109a34:	689b      	ldr	r3, [r3, #8]
 8109a36:	697a      	ldr	r2, [r7, #20]
 8109a38:	429a      	cmp	r2, r3
 8109a3a:	d304      	bcc.n	8109a46 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8109a3c:	693b      	ldr	r3, [r7, #16]
 8109a3e:	689b      	ldr	r3, [r3, #8]
 8109a40:	697a      	ldr	r2, [r7, #20]
 8109a42:	1ad3      	subs	r3, r2, r3
 8109a44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8109a46:	697b      	ldr	r3, [r7, #20]
}
 8109a48:	4618      	mov	r0, r3
 8109a4a:	371c      	adds	r7, #28
 8109a4c:	46bd      	mov	sp, r7
 8109a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a52:	4770      	bx	lr

08109a54 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8109a54:	b580      	push	{r7, lr}
 8109a56:	b090      	sub	sp, #64	; 0x40
 8109a58:	af02      	add	r7, sp, #8
 8109a5a:	60f8      	str	r0, [r7, #12]
 8109a5c:	60b9      	str	r1, [r7, #8]
 8109a5e:	607a      	str	r2, [r7, #4]
 8109a60:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8109a62:	68fb      	ldr	r3, [r7, #12]
 8109a64:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8109a66:	2300      	movs	r3, #0
 8109a68:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8109a6a:	687b      	ldr	r3, [r7, #4]
 8109a6c:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8109a6e:	68bb      	ldr	r3, [r7, #8]
 8109a70:	2b00      	cmp	r3, #0
 8109a72:	d10a      	bne.n	8109a8a <xStreamBufferSend+0x36>
	__asm volatile
 8109a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a78:	f383 8811 	msr	BASEPRI, r3
 8109a7c:	f3bf 8f6f 	isb	sy
 8109a80:	f3bf 8f4f 	dsb	sy
 8109a84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8109a86:	bf00      	nop
 8109a88:	e7fe      	b.n	8109a88 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8109a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109a8c:	2b00      	cmp	r3, #0
 8109a8e:	d10a      	bne.n	8109aa6 <xStreamBufferSend+0x52>
	__asm volatile
 8109a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a94:	f383 8811 	msr	BASEPRI, r3
 8109a98:	f3bf 8f6f 	isb	sy
 8109a9c:	f3bf 8f4f 	dsb	sy
 8109aa0:	623b      	str	r3, [r7, #32]
}
 8109aa2:	bf00      	nop
 8109aa4:	e7fe      	b.n	8109aa4 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8109aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109aa8:	7f1b      	ldrb	r3, [r3, #28]
 8109aaa:	f003 0301 	and.w	r3, r3, #1
 8109aae:	2b00      	cmp	r3, #0
 8109ab0:	d011      	beq.n	8109ad6 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8109ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109ab4:	3304      	adds	r3, #4
 8109ab6:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8109ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109aba:	687b      	ldr	r3, [r7, #4]
 8109abc:	429a      	cmp	r2, r3
 8109abe:	d80a      	bhi.n	8109ad6 <xStreamBufferSend+0x82>
	__asm volatile
 8109ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109ac4:	f383 8811 	msr	BASEPRI, r3
 8109ac8:	f3bf 8f6f 	isb	sy
 8109acc:	f3bf 8f4f 	dsb	sy
 8109ad0:	61fb      	str	r3, [r7, #28]
}
 8109ad2:	bf00      	nop
 8109ad4:	e7fe      	b.n	8109ad4 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8109ad6:	683b      	ldr	r3, [r7, #0]
 8109ad8:	2b00      	cmp	r3, #0
 8109ada:	d03e      	beq.n	8109b5a <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8109adc:	f107 0310 	add.w	r3, r7, #16
 8109ae0:	4618      	mov	r0, r3
 8109ae2:	f000 fdd9 	bl	810a698 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8109ae6:	f7ff fb0d 	bl	8109104 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8109aea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109aec:	f7ff ff7f 	bl	81099ee <xStreamBufferSpacesAvailable>
 8109af0:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8109af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8109af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109af6:	429a      	cmp	r2, r3
 8109af8:	d217      	bcs.n	8109b2a <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8109afa:	2000      	movs	r0, #0
 8109afc:	f001 f910 	bl	810ad20 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8109b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109b02:	695b      	ldr	r3, [r3, #20]
 8109b04:	2b00      	cmp	r3, #0
 8109b06:	d00a      	beq.n	8109b1e <xStreamBufferSend+0xca>
	__asm volatile
 8109b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109b0c:	f383 8811 	msr	BASEPRI, r3
 8109b10:	f3bf 8f6f 	isb	sy
 8109b14:	f3bf 8f4f 	dsb	sy
 8109b18:	61bb      	str	r3, [r7, #24]
}
 8109b1a:	bf00      	nop
 8109b1c:	e7fe      	b.n	8109b1c <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8109b1e:	f000 ff3b 	bl	810a998 <xTaskGetCurrentTaskHandle>
 8109b22:	4602      	mov	r2, r0
 8109b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109b26:	615a      	str	r2, [r3, #20]
 8109b28:	e002      	b.n	8109b30 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8109b2a:	f7ff fb1b 	bl	8109164 <vPortExitCritical>
					break;
 8109b2e:	e014      	b.n	8109b5a <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8109b30:	f7ff fb18 	bl	8109164 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8109b34:	683b      	ldr	r3, [r7, #0]
 8109b36:	2200      	movs	r2, #0
 8109b38:	2100      	movs	r1, #0
 8109b3a:	2000      	movs	r0, #0
 8109b3c:	f000 ffe0 	bl	810ab00 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8109b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109b42:	2200      	movs	r2, #0
 8109b44:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8109b46:	463a      	mov	r2, r7
 8109b48:	f107 0310 	add.w	r3, r7, #16
 8109b4c:	4611      	mov	r1, r2
 8109b4e:	4618      	mov	r0, r3
 8109b50:	f000 fdde 	bl	810a710 <xTaskCheckForTimeOut>
 8109b54:	4603      	mov	r3, r0
 8109b56:	2b00      	cmp	r3, #0
 8109b58:	d0c5      	beq.n	8109ae6 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8109b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109b5c:	2b00      	cmp	r3, #0
 8109b5e:	d103      	bne.n	8109b68 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8109b60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109b62:	f7ff ff44 	bl	81099ee <xStreamBufferSpacesAvailable>
 8109b66:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8109b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109b6a:	9300      	str	r3, [sp, #0]
 8109b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109b6e:	687a      	ldr	r2, [r7, #4]
 8109b70:	68b9      	ldr	r1, [r7, #8]
 8109b72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109b74:	f000 f823 	bl	8109bbe <prvWriteMessageToBuffer>
 8109b78:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8109b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109b7c:	2b00      	cmp	r3, #0
 8109b7e:	d019      	beq.n	8109bb4 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8109b80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8109b82:	f000 f8cb 	bl	8109d1c <prvBytesInBuffer>
 8109b86:	4602      	mov	r2, r0
 8109b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109b8a:	68db      	ldr	r3, [r3, #12]
 8109b8c:	429a      	cmp	r2, r3
 8109b8e:	d311      	bcc.n	8109bb4 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8109b90:	f000 fb3e 	bl	810a210 <vTaskSuspendAll>
 8109b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109b96:	691b      	ldr	r3, [r3, #16]
 8109b98:	2b00      	cmp	r3, #0
 8109b9a:	d009      	beq.n	8109bb0 <xStreamBufferSend+0x15c>
 8109b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109b9e:	6918      	ldr	r0, [r3, #16]
 8109ba0:	2300      	movs	r3, #0
 8109ba2:	2200      	movs	r2, #0
 8109ba4:	2100      	movs	r1, #0
 8109ba6:	f001 f805 	bl	810abb4 <xTaskGenericNotify>
 8109baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109bac:	2200      	movs	r2, #0
 8109bae:	611a      	str	r2, [r3, #16]
 8109bb0:	f000 fb3c 	bl	810a22c <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8109bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8109bb6:	4618      	mov	r0, r3
 8109bb8:	3738      	adds	r7, #56	; 0x38
 8109bba:	46bd      	mov	sp, r7
 8109bbc:	bd80      	pop	{r7, pc}

08109bbe <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8109bbe:	b580      	push	{r7, lr}
 8109bc0:	b086      	sub	sp, #24
 8109bc2:	af00      	add	r7, sp, #0
 8109bc4:	60f8      	str	r0, [r7, #12]
 8109bc6:	60b9      	str	r1, [r7, #8]
 8109bc8:	607a      	str	r2, [r7, #4]
 8109bca:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8109bcc:	683b      	ldr	r3, [r7, #0]
 8109bce:	2b00      	cmp	r3, #0
 8109bd0:	d102      	bne.n	8109bd8 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8109bd2:	2300      	movs	r3, #0
 8109bd4:	617b      	str	r3, [r7, #20]
 8109bd6:	e01d      	b.n	8109c14 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8109bd8:	68fb      	ldr	r3, [r7, #12]
 8109bda:	7f1b      	ldrb	r3, [r3, #28]
 8109bdc:	f003 0301 	and.w	r3, r3, #1
 8109be0:	2b00      	cmp	r3, #0
 8109be2:	d108      	bne.n	8109bf6 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8109be4:	2301      	movs	r3, #1
 8109be6:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8109be8:	687a      	ldr	r2, [r7, #4]
 8109bea:	683b      	ldr	r3, [r7, #0]
 8109bec:	4293      	cmp	r3, r2
 8109bee:	bf28      	it	cs
 8109bf0:	4613      	movcs	r3, r2
 8109bf2:	607b      	str	r3, [r7, #4]
 8109bf4:	e00e      	b.n	8109c14 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8109bf6:	683a      	ldr	r2, [r7, #0]
 8109bf8:	6a3b      	ldr	r3, [r7, #32]
 8109bfa:	429a      	cmp	r2, r3
 8109bfc:	d308      	bcc.n	8109c10 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8109bfe:	2301      	movs	r3, #1
 8109c00:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8109c02:	1d3b      	adds	r3, r7, #4
 8109c04:	2204      	movs	r2, #4
 8109c06:	4619      	mov	r1, r3
 8109c08:	68f8      	ldr	r0, [r7, #12]
 8109c0a:	f000 f815 	bl	8109c38 <prvWriteBytesToBuffer>
 8109c0e:	e001      	b.n	8109c14 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8109c10:	2300      	movs	r3, #0
 8109c12:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8109c14:	697b      	ldr	r3, [r7, #20]
 8109c16:	2b00      	cmp	r3, #0
 8109c18:	d007      	beq.n	8109c2a <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8109c1a:	687b      	ldr	r3, [r7, #4]
 8109c1c:	461a      	mov	r2, r3
 8109c1e:	68b9      	ldr	r1, [r7, #8]
 8109c20:	68f8      	ldr	r0, [r7, #12]
 8109c22:	f000 f809 	bl	8109c38 <prvWriteBytesToBuffer>
 8109c26:	6138      	str	r0, [r7, #16]
 8109c28:	e001      	b.n	8109c2e <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8109c2a:	2300      	movs	r3, #0
 8109c2c:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8109c2e:	693b      	ldr	r3, [r7, #16]
}
 8109c30:	4618      	mov	r0, r3
 8109c32:	3718      	adds	r7, #24
 8109c34:	46bd      	mov	sp, r7
 8109c36:	bd80      	pop	{r7, pc}

08109c38 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8109c38:	b580      	push	{r7, lr}
 8109c3a:	b08a      	sub	sp, #40	; 0x28
 8109c3c:	af00      	add	r7, sp, #0
 8109c3e:	60f8      	str	r0, [r7, #12]
 8109c40:	60b9      	str	r1, [r7, #8]
 8109c42:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8109c44:	687b      	ldr	r3, [r7, #4]
 8109c46:	2b00      	cmp	r3, #0
 8109c48:	d10a      	bne.n	8109c60 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8109c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c4e:	f383 8811 	msr	BASEPRI, r3
 8109c52:	f3bf 8f6f 	isb	sy
 8109c56:	f3bf 8f4f 	dsb	sy
 8109c5a:	61fb      	str	r3, [r7, #28]
}
 8109c5c:	bf00      	nop
 8109c5e:	e7fe      	b.n	8109c5e <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8109c60:	68fb      	ldr	r3, [r7, #12]
 8109c62:	685b      	ldr	r3, [r3, #4]
 8109c64:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8109c66:	68fb      	ldr	r3, [r7, #12]
 8109c68:	689a      	ldr	r2, [r3, #8]
 8109c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109c6c:	1ad3      	subs	r3, r2, r3
 8109c6e:	687a      	ldr	r2, [r7, #4]
 8109c70:	4293      	cmp	r3, r2
 8109c72:	bf28      	it	cs
 8109c74:	4613      	movcs	r3, r2
 8109c76:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8109c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8109c7a:	6a3b      	ldr	r3, [r7, #32]
 8109c7c:	441a      	add	r2, r3
 8109c7e:	68fb      	ldr	r3, [r7, #12]
 8109c80:	689b      	ldr	r3, [r3, #8]
 8109c82:	429a      	cmp	r2, r3
 8109c84:	d90a      	bls.n	8109c9c <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8109c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c8a:	f383 8811 	msr	BASEPRI, r3
 8109c8e:	f3bf 8f6f 	isb	sy
 8109c92:	f3bf 8f4f 	dsb	sy
 8109c96:	61bb      	str	r3, [r7, #24]
}
 8109c98:	bf00      	nop
 8109c9a:	e7fe      	b.n	8109c9a <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8109c9c:	68fb      	ldr	r3, [r7, #12]
 8109c9e:	699a      	ldr	r2, [r3, #24]
 8109ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109ca2:	4413      	add	r3, r2
 8109ca4:	6a3a      	ldr	r2, [r7, #32]
 8109ca6:	68b9      	ldr	r1, [r7, #8]
 8109ca8:	4618      	mov	r0, r3
 8109caa:	f005 fc17 	bl	810f4dc <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8109cae:	687a      	ldr	r2, [r7, #4]
 8109cb0:	6a3b      	ldr	r3, [r7, #32]
 8109cb2:	429a      	cmp	r2, r3
 8109cb4:	d91c      	bls.n	8109cf0 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8109cb6:	687a      	ldr	r2, [r7, #4]
 8109cb8:	6a3b      	ldr	r3, [r7, #32]
 8109cba:	1ad2      	subs	r2, r2, r3
 8109cbc:	68fb      	ldr	r3, [r7, #12]
 8109cbe:	689b      	ldr	r3, [r3, #8]
 8109cc0:	429a      	cmp	r2, r3
 8109cc2:	d90a      	bls.n	8109cda <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8109cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109cc8:	f383 8811 	msr	BASEPRI, r3
 8109ccc:	f3bf 8f6f 	isb	sy
 8109cd0:	f3bf 8f4f 	dsb	sy
 8109cd4:	617b      	str	r3, [r7, #20]
}
 8109cd6:	bf00      	nop
 8109cd8:	e7fe      	b.n	8109cd8 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8109cda:	68fb      	ldr	r3, [r7, #12]
 8109cdc:	6998      	ldr	r0, [r3, #24]
 8109cde:	68ba      	ldr	r2, [r7, #8]
 8109ce0:	6a3b      	ldr	r3, [r7, #32]
 8109ce2:	18d1      	adds	r1, r2, r3
 8109ce4:	687a      	ldr	r2, [r7, #4]
 8109ce6:	6a3b      	ldr	r3, [r7, #32]
 8109ce8:	1ad3      	subs	r3, r2, r3
 8109cea:	461a      	mov	r2, r3
 8109cec:	f005 fbf6 	bl	810f4dc <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8109cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8109cf2:	687b      	ldr	r3, [r7, #4]
 8109cf4:	4413      	add	r3, r2
 8109cf6:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8109cf8:	68fb      	ldr	r3, [r7, #12]
 8109cfa:	689b      	ldr	r3, [r3, #8]
 8109cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8109cfe:	429a      	cmp	r2, r3
 8109d00:	d304      	bcc.n	8109d0c <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8109d02:	68fb      	ldr	r3, [r7, #12]
 8109d04:	689b      	ldr	r3, [r3, #8]
 8109d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8109d08:	1ad3      	subs	r3, r2, r3
 8109d0a:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8109d0c:	68fb      	ldr	r3, [r7, #12]
 8109d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8109d10:	605a      	str	r2, [r3, #4]

	return xCount;
 8109d12:	687b      	ldr	r3, [r7, #4]
}
 8109d14:	4618      	mov	r0, r3
 8109d16:	3728      	adds	r7, #40	; 0x28
 8109d18:	46bd      	mov	sp, r7
 8109d1a:	bd80      	pop	{r7, pc}

08109d1c <prvBytesInBuffer>:
	return xCount;
}
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8109d1c:	b480      	push	{r7}
 8109d1e:	b085      	sub	sp, #20
 8109d20:	af00      	add	r7, sp, #0
 8109d22:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8109d24:	687b      	ldr	r3, [r7, #4]
 8109d26:	689a      	ldr	r2, [r3, #8]
 8109d28:	687b      	ldr	r3, [r7, #4]
 8109d2a:	685b      	ldr	r3, [r3, #4]
 8109d2c:	4413      	add	r3, r2
 8109d2e:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8109d30:	687b      	ldr	r3, [r7, #4]
 8109d32:	681b      	ldr	r3, [r3, #0]
 8109d34:	68fa      	ldr	r2, [r7, #12]
 8109d36:	1ad3      	subs	r3, r2, r3
 8109d38:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8109d3a:	687b      	ldr	r3, [r7, #4]
 8109d3c:	689b      	ldr	r3, [r3, #8]
 8109d3e:	68fa      	ldr	r2, [r7, #12]
 8109d40:	429a      	cmp	r2, r3
 8109d42:	d304      	bcc.n	8109d4e <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8109d44:	687b      	ldr	r3, [r7, #4]
 8109d46:	689b      	ldr	r3, [r3, #8]
 8109d48:	68fa      	ldr	r2, [r7, #12]
 8109d4a:	1ad3      	subs	r3, r2, r3
 8109d4c:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8109d4e:	68fb      	ldr	r3, [r7, #12]
}
 8109d50:	4618      	mov	r0, r3
 8109d52:	3714      	adds	r7, #20
 8109d54:	46bd      	mov	sp, r7
 8109d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d5a:	4770      	bx	lr

08109d5c <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8109d5c:	b580      	push	{r7, lr}
 8109d5e:	b086      	sub	sp, #24
 8109d60:	af00      	add	r7, sp, #0
 8109d62:	60f8      	str	r0, [r7, #12]
 8109d64:	60b9      	str	r1, [r7, #8]
 8109d66:	607a      	str	r2, [r7, #4]
 8109d68:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8109d6a:	2355      	movs	r3, #85	; 0x55
 8109d6c:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8109d6e:	687a      	ldr	r2, [r7, #4]
 8109d70:	6979      	ldr	r1, [r7, #20]
 8109d72:	68b8      	ldr	r0, [r7, #8]
 8109d74:	f005 fbc0 	bl	810f4f8 <memset>
 8109d78:	4602      	mov	r2, r0
 8109d7a:	68bb      	ldr	r3, [r7, #8]
 8109d7c:	4293      	cmp	r3, r2
 8109d7e:	d00a      	beq.n	8109d96 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8109d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109d84:	f383 8811 	msr	BASEPRI, r3
 8109d88:	f3bf 8f6f 	isb	sy
 8109d8c:	f3bf 8f4f 	dsb	sy
 8109d90:	613b      	str	r3, [r7, #16]
}
 8109d92:	bf00      	nop
 8109d94:	e7fe      	b.n	8109d94 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8109d96:	2220      	movs	r2, #32
 8109d98:	2100      	movs	r1, #0
 8109d9a:	68f8      	ldr	r0, [r7, #12]
 8109d9c:	f005 fbac 	bl	810f4f8 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8109da0:	68fb      	ldr	r3, [r7, #12]
 8109da2:	68ba      	ldr	r2, [r7, #8]
 8109da4:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8109da6:	68fb      	ldr	r3, [r7, #12]
 8109da8:	687a      	ldr	r2, [r7, #4]
 8109daa:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8109dac:	68fb      	ldr	r3, [r7, #12]
 8109dae:	683a      	ldr	r2, [r7, #0]
 8109db0:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8109db2:	68fb      	ldr	r3, [r7, #12]
 8109db4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8109db8:	771a      	strb	r2, [r3, #28]
}
 8109dba:	bf00      	nop
 8109dbc:	3718      	adds	r7, #24
 8109dbe:	46bd      	mov	sp, r7
 8109dc0:	bd80      	pop	{r7, pc}

08109dc2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8109dc2:	b580      	push	{r7, lr}
 8109dc4:	b08e      	sub	sp, #56	; 0x38
 8109dc6:	af04      	add	r7, sp, #16
 8109dc8:	60f8      	str	r0, [r7, #12]
 8109dca:	60b9      	str	r1, [r7, #8]
 8109dcc:	607a      	str	r2, [r7, #4]
 8109dce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8109dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109dd2:	2b00      	cmp	r3, #0
 8109dd4:	d10a      	bne.n	8109dec <xTaskCreateStatic+0x2a>
	__asm volatile
 8109dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109dda:	f383 8811 	msr	BASEPRI, r3
 8109dde:	f3bf 8f6f 	isb	sy
 8109de2:	f3bf 8f4f 	dsb	sy
 8109de6:	623b      	str	r3, [r7, #32]
}
 8109de8:	bf00      	nop
 8109dea:	e7fe      	b.n	8109dea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8109dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109dee:	2b00      	cmp	r3, #0
 8109df0:	d10a      	bne.n	8109e08 <xTaskCreateStatic+0x46>
	__asm volatile
 8109df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109df6:	f383 8811 	msr	BASEPRI, r3
 8109dfa:	f3bf 8f6f 	isb	sy
 8109dfe:	f3bf 8f4f 	dsb	sy
 8109e02:	61fb      	str	r3, [r7, #28]
}
 8109e04:	bf00      	nop
 8109e06:	e7fe      	b.n	8109e06 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8109e08:	2354      	movs	r3, #84	; 0x54
 8109e0a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8109e0c:	693b      	ldr	r3, [r7, #16]
 8109e0e:	2b54      	cmp	r3, #84	; 0x54
 8109e10:	d00a      	beq.n	8109e28 <xTaskCreateStatic+0x66>
	__asm volatile
 8109e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e16:	f383 8811 	msr	BASEPRI, r3
 8109e1a:	f3bf 8f6f 	isb	sy
 8109e1e:	f3bf 8f4f 	dsb	sy
 8109e22:	61bb      	str	r3, [r7, #24]
}
 8109e24:	bf00      	nop
 8109e26:	e7fe      	b.n	8109e26 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8109e28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8109e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109e2c:	2b00      	cmp	r3, #0
 8109e2e:	d01e      	beq.n	8109e6e <xTaskCreateStatic+0xac>
 8109e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109e32:	2b00      	cmp	r3, #0
 8109e34:	d01b      	beq.n	8109e6e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8109e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109e38:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8109e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8109e3e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8109e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109e42:	2202      	movs	r2, #2
 8109e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8109e48:	2300      	movs	r3, #0
 8109e4a:	9303      	str	r3, [sp, #12]
 8109e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109e4e:	9302      	str	r3, [sp, #8]
 8109e50:	f107 0314 	add.w	r3, r7, #20
 8109e54:	9301      	str	r3, [sp, #4]
 8109e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109e58:	9300      	str	r3, [sp, #0]
 8109e5a:	683b      	ldr	r3, [r7, #0]
 8109e5c:	687a      	ldr	r2, [r7, #4]
 8109e5e:	68b9      	ldr	r1, [r7, #8]
 8109e60:	68f8      	ldr	r0, [r7, #12]
 8109e62:	f000 f850 	bl	8109f06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8109e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8109e68:	f000 f8d4 	bl	810a014 <prvAddNewTaskToReadyList>
 8109e6c:	e001      	b.n	8109e72 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8109e6e:	2300      	movs	r3, #0
 8109e70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8109e72:	697b      	ldr	r3, [r7, #20]
	}
 8109e74:	4618      	mov	r0, r3
 8109e76:	3728      	adds	r7, #40	; 0x28
 8109e78:	46bd      	mov	sp, r7
 8109e7a:	bd80      	pop	{r7, pc}

08109e7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8109e7c:	b580      	push	{r7, lr}
 8109e7e:	b08c      	sub	sp, #48	; 0x30
 8109e80:	af04      	add	r7, sp, #16
 8109e82:	60f8      	str	r0, [r7, #12]
 8109e84:	60b9      	str	r1, [r7, #8]
 8109e86:	603b      	str	r3, [r7, #0]
 8109e88:	4613      	mov	r3, r2
 8109e8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8109e8c:	88fb      	ldrh	r3, [r7, #6]
 8109e8e:	009b      	lsls	r3, r3, #2
 8109e90:	4618      	mov	r0, r3
 8109e92:	f7fe fd7b 	bl	810898c <pvPortMalloc>
 8109e96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8109e98:	697b      	ldr	r3, [r7, #20]
 8109e9a:	2b00      	cmp	r3, #0
 8109e9c:	d00e      	beq.n	8109ebc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8109e9e:	2054      	movs	r0, #84	; 0x54
 8109ea0:	f7fe fd74 	bl	810898c <pvPortMalloc>
 8109ea4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8109ea6:	69fb      	ldr	r3, [r7, #28]
 8109ea8:	2b00      	cmp	r3, #0
 8109eaa:	d003      	beq.n	8109eb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8109eac:	69fb      	ldr	r3, [r7, #28]
 8109eae:	697a      	ldr	r2, [r7, #20]
 8109eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8109eb2:	e005      	b.n	8109ec0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8109eb4:	6978      	ldr	r0, [r7, #20]
 8109eb6:	f7fe fe2d 	bl	8108b14 <vPortFree>
 8109eba:	e001      	b.n	8109ec0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8109ebc:	2300      	movs	r3, #0
 8109ebe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8109ec0:	69fb      	ldr	r3, [r7, #28]
 8109ec2:	2b00      	cmp	r3, #0
 8109ec4:	d017      	beq.n	8109ef6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8109ec6:	69fb      	ldr	r3, [r7, #28]
 8109ec8:	2200      	movs	r2, #0
 8109eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8109ece:	88fa      	ldrh	r2, [r7, #6]
 8109ed0:	2300      	movs	r3, #0
 8109ed2:	9303      	str	r3, [sp, #12]
 8109ed4:	69fb      	ldr	r3, [r7, #28]
 8109ed6:	9302      	str	r3, [sp, #8]
 8109ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109eda:	9301      	str	r3, [sp, #4]
 8109edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109ede:	9300      	str	r3, [sp, #0]
 8109ee0:	683b      	ldr	r3, [r7, #0]
 8109ee2:	68b9      	ldr	r1, [r7, #8]
 8109ee4:	68f8      	ldr	r0, [r7, #12]
 8109ee6:	f000 f80e 	bl	8109f06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8109eea:	69f8      	ldr	r0, [r7, #28]
 8109eec:	f000 f892 	bl	810a014 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8109ef0:	2301      	movs	r3, #1
 8109ef2:	61bb      	str	r3, [r7, #24]
 8109ef4:	e002      	b.n	8109efc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8109ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8109efa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8109efc:	69bb      	ldr	r3, [r7, #24]
	}
 8109efe:	4618      	mov	r0, r3
 8109f00:	3720      	adds	r7, #32
 8109f02:	46bd      	mov	sp, r7
 8109f04:	bd80      	pop	{r7, pc}

08109f06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8109f06:	b580      	push	{r7, lr}
 8109f08:	b088      	sub	sp, #32
 8109f0a:	af00      	add	r7, sp, #0
 8109f0c:	60f8      	str	r0, [r7, #12]
 8109f0e:	60b9      	str	r1, [r7, #8]
 8109f10:	607a      	str	r2, [r7, #4]
 8109f12:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8109f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8109f18:	687b      	ldr	r3, [r7, #4]
 8109f1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8109f1e:	3b01      	subs	r3, #1
 8109f20:	009b      	lsls	r3, r3, #2
 8109f22:	4413      	add	r3, r2
 8109f24:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8109f26:	69bb      	ldr	r3, [r7, #24]
 8109f28:	f023 0307 	bic.w	r3, r3, #7
 8109f2c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8109f2e:	69bb      	ldr	r3, [r7, #24]
 8109f30:	f003 0307 	and.w	r3, r3, #7
 8109f34:	2b00      	cmp	r3, #0
 8109f36:	d00a      	beq.n	8109f4e <prvInitialiseNewTask+0x48>
	__asm volatile
 8109f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109f3c:	f383 8811 	msr	BASEPRI, r3
 8109f40:	f3bf 8f6f 	isb	sy
 8109f44:	f3bf 8f4f 	dsb	sy
 8109f48:	617b      	str	r3, [r7, #20]
}
 8109f4a:	bf00      	nop
 8109f4c:	e7fe      	b.n	8109f4c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8109f4e:	68bb      	ldr	r3, [r7, #8]
 8109f50:	2b00      	cmp	r3, #0
 8109f52:	d01f      	beq.n	8109f94 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8109f54:	2300      	movs	r3, #0
 8109f56:	61fb      	str	r3, [r7, #28]
 8109f58:	e012      	b.n	8109f80 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8109f5a:	68ba      	ldr	r2, [r7, #8]
 8109f5c:	69fb      	ldr	r3, [r7, #28]
 8109f5e:	4413      	add	r3, r2
 8109f60:	7819      	ldrb	r1, [r3, #0]
 8109f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109f64:	69fb      	ldr	r3, [r7, #28]
 8109f66:	4413      	add	r3, r2
 8109f68:	3334      	adds	r3, #52	; 0x34
 8109f6a:	460a      	mov	r2, r1
 8109f6c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8109f6e:	68ba      	ldr	r2, [r7, #8]
 8109f70:	69fb      	ldr	r3, [r7, #28]
 8109f72:	4413      	add	r3, r2
 8109f74:	781b      	ldrb	r3, [r3, #0]
 8109f76:	2b00      	cmp	r3, #0
 8109f78:	d006      	beq.n	8109f88 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8109f7a:	69fb      	ldr	r3, [r7, #28]
 8109f7c:	3301      	adds	r3, #1
 8109f7e:	61fb      	str	r3, [r7, #28]
 8109f80:	69fb      	ldr	r3, [r7, #28]
 8109f82:	2b0f      	cmp	r3, #15
 8109f84:	d9e9      	bls.n	8109f5a <prvInitialiseNewTask+0x54>
 8109f86:	e000      	b.n	8109f8a <prvInitialiseNewTask+0x84>
			{
				break;
 8109f88:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8109f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109f8c:	2200      	movs	r2, #0
 8109f8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8109f92:	e003      	b.n	8109f9c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8109f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109f96:	2200      	movs	r2, #0
 8109f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8109f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109f9e:	2b06      	cmp	r3, #6
 8109fa0:	d901      	bls.n	8109fa6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8109fa2:	2306      	movs	r3, #6
 8109fa4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8109fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109faa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8109fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109fb0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8109fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109fb4:	2200      	movs	r2, #0
 8109fb6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8109fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109fba:	3304      	adds	r3, #4
 8109fbc:	4618      	mov	r0, r3
 8109fbe:	f7fe fedf 	bl	8108d80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8109fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109fc4:	3318      	adds	r3, #24
 8109fc6:	4618      	mov	r0, r3
 8109fc8:	f7fe feda 	bl	8108d80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8109fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109fd0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109fd4:	f1c3 0207 	rsb	r2, r3, #7
 8109fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109fda:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8109fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109fe0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8109fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109fe4:	2200      	movs	r2, #0
 8109fe6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8109fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109fea:	2200      	movs	r2, #0
 8109fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8109ff0:	683a      	ldr	r2, [r7, #0]
 8109ff2:	68f9      	ldr	r1, [r7, #12]
 8109ff4:	69b8      	ldr	r0, [r7, #24]
 8109ff6:	f7fe ff57 	bl	8108ea8 <pxPortInitialiseStack>
 8109ffa:	4602      	mov	r2, r0
 8109ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109ffe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810a000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a002:	2b00      	cmp	r3, #0
 810a004:	d002      	beq.n	810a00c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810a006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a00a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a00c:	bf00      	nop
 810a00e:	3720      	adds	r7, #32
 810a010:	46bd      	mov	sp, r7
 810a012:	bd80      	pop	{r7, pc}

0810a014 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810a014:	b580      	push	{r7, lr}
 810a016:	b082      	sub	sp, #8
 810a018:	af00      	add	r7, sp, #0
 810a01a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810a01c:	f7ff f872 	bl	8109104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810a020:	4b2a      	ldr	r3, [pc, #168]	; (810a0cc <prvAddNewTaskToReadyList+0xb8>)
 810a022:	681b      	ldr	r3, [r3, #0]
 810a024:	3301      	adds	r3, #1
 810a026:	4a29      	ldr	r2, [pc, #164]	; (810a0cc <prvAddNewTaskToReadyList+0xb8>)
 810a028:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810a02a:	4b29      	ldr	r3, [pc, #164]	; (810a0d0 <prvAddNewTaskToReadyList+0xbc>)
 810a02c:	681b      	ldr	r3, [r3, #0]
 810a02e:	2b00      	cmp	r3, #0
 810a030:	d109      	bne.n	810a046 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810a032:	4a27      	ldr	r2, [pc, #156]	; (810a0d0 <prvAddNewTaskToReadyList+0xbc>)
 810a034:	687b      	ldr	r3, [r7, #4]
 810a036:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810a038:	4b24      	ldr	r3, [pc, #144]	; (810a0cc <prvAddNewTaskToReadyList+0xb8>)
 810a03a:	681b      	ldr	r3, [r3, #0]
 810a03c:	2b01      	cmp	r3, #1
 810a03e:	d110      	bne.n	810a062 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810a040:	f000 fbec 	bl	810a81c <prvInitialiseTaskLists>
 810a044:	e00d      	b.n	810a062 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810a046:	4b23      	ldr	r3, [pc, #140]	; (810a0d4 <prvAddNewTaskToReadyList+0xc0>)
 810a048:	681b      	ldr	r3, [r3, #0]
 810a04a:	2b00      	cmp	r3, #0
 810a04c:	d109      	bne.n	810a062 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810a04e:	4b20      	ldr	r3, [pc, #128]	; (810a0d0 <prvAddNewTaskToReadyList+0xbc>)
 810a050:	681b      	ldr	r3, [r3, #0]
 810a052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a054:	687b      	ldr	r3, [r7, #4]
 810a056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a058:	429a      	cmp	r2, r3
 810a05a:	d802      	bhi.n	810a062 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810a05c:	4a1c      	ldr	r2, [pc, #112]	; (810a0d0 <prvAddNewTaskToReadyList+0xbc>)
 810a05e:	687b      	ldr	r3, [r7, #4]
 810a060:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810a062:	4b1d      	ldr	r3, [pc, #116]	; (810a0d8 <prvAddNewTaskToReadyList+0xc4>)
 810a064:	681b      	ldr	r3, [r3, #0]
 810a066:	3301      	adds	r3, #1
 810a068:	4a1b      	ldr	r2, [pc, #108]	; (810a0d8 <prvAddNewTaskToReadyList+0xc4>)
 810a06a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810a06c:	687b      	ldr	r3, [r7, #4]
 810a06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a070:	2201      	movs	r2, #1
 810a072:	409a      	lsls	r2, r3
 810a074:	4b19      	ldr	r3, [pc, #100]	; (810a0dc <prvAddNewTaskToReadyList+0xc8>)
 810a076:	681b      	ldr	r3, [r3, #0]
 810a078:	4313      	orrs	r3, r2
 810a07a:	4a18      	ldr	r2, [pc, #96]	; (810a0dc <prvAddNewTaskToReadyList+0xc8>)
 810a07c:	6013      	str	r3, [r2, #0]
 810a07e:	687b      	ldr	r3, [r7, #4]
 810a080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a082:	4613      	mov	r3, r2
 810a084:	009b      	lsls	r3, r3, #2
 810a086:	4413      	add	r3, r2
 810a088:	009b      	lsls	r3, r3, #2
 810a08a:	4a15      	ldr	r2, [pc, #84]	; (810a0e0 <prvAddNewTaskToReadyList+0xcc>)
 810a08c:	441a      	add	r2, r3
 810a08e:	687b      	ldr	r3, [r7, #4]
 810a090:	3304      	adds	r3, #4
 810a092:	4619      	mov	r1, r3
 810a094:	4610      	mov	r0, r2
 810a096:	f7fe fe80 	bl	8108d9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810a09a:	f7ff f863 	bl	8109164 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810a09e:	4b0d      	ldr	r3, [pc, #52]	; (810a0d4 <prvAddNewTaskToReadyList+0xc0>)
 810a0a0:	681b      	ldr	r3, [r3, #0]
 810a0a2:	2b00      	cmp	r3, #0
 810a0a4:	d00e      	beq.n	810a0c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810a0a6:	4b0a      	ldr	r3, [pc, #40]	; (810a0d0 <prvAddNewTaskToReadyList+0xbc>)
 810a0a8:	681b      	ldr	r3, [r3, #0]
 810a0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a0ac:	687b      	ldr	r3, [r7, #4]
 810a0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a0b0:	429a      	cmp	r2, r3
 810a0b2:	d207      	bcs.n	810a0c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810a0b4:	4b0b      	ldr	r3, [pc, #44]	; (810a0e4 <prvAddNewTaskToReadyList+0xd0>)
 810a0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a0ba:	601a      	str	r2, [r3, #0]
 810a0bc:	f3bf 8f4f 	dsb	sy
 810a0c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a0c4:	bf00      	nop
 810a0c6:	3708      	adds	r7, #8
 810a0c8:	46bd      	mov	sp, r7
 810a0ca:	bd80      	pop	{r7, pc}
 810a0cc:	100041ac 	.word	0x100041ac
 810a0d0:	100040ac 	.word	0x100040ac
 810a0d4:	100041b8 	.word	0x100041b8
 810a0d8:	100041c8 	.word	0x100041c8
 810a0dc:	100041b4 	.word	0x100041b4
 810a0e0:	100040b0 	.word	0x100040b0
 810a0e4:	e000ed04 	.word	0xe000ed04

0810a0e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810a0e8:	b580      	push	{r7, lr}
 810a0ea:	b084      	sub	sp, #16
 810a0ec:	af00      	add	r7, sp, #0
 810a0ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810a0f0:	2300      	movs	r3, #0
 810a0f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810a0f4:	687b      	ldr	r3, [r7, #4]
 810a0f6:	2b00      	cmp	r3, #0
 810a0f8:	d017      	beq.n	810a12a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810a0fa:	4b13      	ldr	r3, [pc, #76]	; (810a148 <vTaskDelay+0x60>)
 810a0fc:	681b      	ldr	r3, [r3, #0]
 810a0fe:	2b00      	cmp	r3, #0
 810a100:	d00a      	beq.n	810a118 <vTaskDelay+0x30>
	__asm volatile
 810a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a106:	f383 8811 	msr	BASEPRI, r3
 810a10a:	f3bf 8f6f 	isb	sy
 810a10e:	f3bf 8f4f 	dsb	sy
 810a112:	60bb      	str	r3, [r7, #8]
}
 810a114:	bf00      	nop
 810a116:	e7fe      	b.n	810a116 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810a118:	f000 f87a 	bl	810a210 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810a11c:	2100      	movs	r1, #0
 810a11e:	6878      	ldr	r0, [r7, #4]
 810a120:	f000 fe24 	bl	810ad6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810a124:	f000 f882 	bl	810a22c <xTaskResumeAll>
 810a128:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810a12a:	68fb      	ldr	r3, [r7, #12]
 810a12c:	2b00      	cmp	r3, #0
 810a12e:	d107      	bne.n	810a140 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 810a130:	4b06      	ldr	r3, [pc, #24]	; (810a14c <vTaskDelay+0x64>)
 810a132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a136:	601a      	str	r2, [r3, #0]
 810a138:	f3bf 8f4f 	dsb	sy
 810a13c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810a140:	bf00      	nop
 810a142:	3710      	adds	r7, #16
 810a144:	46bd      	mov	sp, r7
 810a146:	bd80      	pop	{r7, pc}
 810a148:	100041d4 	.word	0x100041d4
 810a14c:	e000ed04 	.word	0xe000ed04

0810a150 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810a150:	b580      	push	{r7, lr}
 810a152:	b08a      	sub	sp, #40	; 0x28
 810a154:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810a156:	2300      	movs	r3, #0
 810a158:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810a15a:	2300      	movs	r3, #0
 810a15c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810a15e:	463a      	mov	r2, r7
 810a160:	1d39      	adds	r1, r7, #4
 810a162:	f107 0308 	add.w	r3, r7, #8
 810a166:	4618      	mov	r0, r3
 810a168:	f7f7 f836 	bl	81011d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810a16c:	6839      	ldr	r1, [r7, #0]
 810a16e:	687b      	ldr	r3, [r7, #4]
 810a170:	68ba      	ldr	r2, [r7, #8]
 810a172:	9202      	str	r2, [sp, #8]
 810a174:	9301      	str	r3, [sp, #4]
 810a176:	2300      	movs	r3, #0
 810a178:	9300      	str	r3, [sp, #0]
 810a17a:	2300      	movs	r3, #0
 810a17c:	460a      	mov	r2, r1
 810a17e:	491e      	ldr	r1, [pc, #120]	; (810a1f8 <vTaskStartScheduler+0xa8>)
 810a180:	481e      	ldr	r0, [pc, #120]	; (810a1fc <vTaskStartScheduler+0xac>)
 810a182:	f7ff fe1e 	bl	8109dc2 <xTaskCreateStatic>
 810a186:	4603      	mov	r3, r0
 810a188:	4a1d      	ldr	r2, [pc, #116]	; (810a200 <vTaskStartScheduler+0xb0>)
 810a18a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810a18c:	4b1c      	ldr	r3, [pc, #112]	; (810a200 <vTaskStartScheduler+0xb0>)
 810a18e:	681b      	ldr	r3, [r3, #0]
 810a190:	2b00      	cmp	r3, #0
 810a192:	d002      	beq.n	810a19a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810a194:	2301      	movs	r3, #1
 810a196:	617b      	str	r3, [r7, #20]
 810a198:	e001      	b.n	810a19e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810a19a:	2300      	movs	r3, #0
 810a19c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810a19e:	697b      	ldr	r3, [r7, #20]
 810a1a0:	2b01      	cmp	r3, #1
 810a1a2:	d116      	bne.n	810a1d2 <vTaskStartScheduler+0x82>
	__asm volatile
 810a1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a1a8:	f383 8811 	msr	BASEPRI, r3
 810a1ac:	f3bf 8f6f 	isb	sy
 810a1b0:	f3bf 8f4f 	dsb	sy
 810a1b4:	613b      	str	r3, [r7, #16]
}
 810a1b6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810a1b8:	4b12      	ldr	r3, [pc, #72]	; (810a204 <vTaskStartScheduler+0xb4>)
 810a1ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a1be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810a1c0:	4b11      	ldr	r3, [pc, #68]	; (810a208 <vTaskStartScheduler+0xb8>)
 810a1c2:	2201      	movs	r2, #1
 810a1c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810a1c6:	4b11      	ldr	r3, [pc, #68]	; (810a20c <vTaskStartScheduler+0xbc>)
 810a1c8:	2200      	movs	r2, #0
 810a1ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810a1cc:	f7fe fef8 	bl	8108fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810a1d0:	e00e      	b.n	810a1f0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810a1d2:	697b      	ldr	r3, [r7, #20]
 810a1d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a1d8:	d10a      	bne.n	810a1f0 <vTaskStartScheduler+0xa0>
	__asm volatile
 810a1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a1de:	f383 8811 	msr	BASEPRI, r3
 810a1e2:	f3bf 8f6f 	isb	sy
 810a1e6:	f3bf 8f4f 	dsb	sy
 810a1ea:	60fb      	str	r3, [r7, #12]
}
 810a1ec:	bf00      	nop
 810a1ee:	e7fe      	b.n	810a1ee <vTaskStartScheduler+0x9e>
}
 810a1f0:	bf00      	nop
 810a1f2:	3718      	adds	r7, #24
 810a1f4:	46bd      	mov	sp, r7
 810a1f6:	bd80      	pop	{r7, pc}
 810a1f8:	08112598 	.word	0x08112598
 810a1fc:	0810a7ed 	.word	0x0810a7ed
 810a200:	100041d0 	.word	0x100041d0
 810a204:	100041cc 	.word	0x100041cc
 810a208:	100041b8 	.word	0x100041b8
 810a20c:	100041b0 	.word	0x100041b0

0810a210 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810a210:	b480      	push	{r7}
 810a212:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 810a214:	4b04      	ldr	r3, [pc, #16]	; (810a228 <vTaskSuspendAll+0x18>)
 810a216:	681b      	ldr	r3, [r3, #0]
 810a218:	3301      	adds	r3, #1
 810a21a:	4a03      	ldr	r2, [pc, #12]	; (810a228 <vTaskSuspendAll+0x18>)
 810a21c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 810a21e:	bf00      	nop
 810a220:	46bd      	mov	sp, r7
 810a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a226:	4770      	bx	lr
 810a228:	100041d4 	.word	0x100041d4

0810a22c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810a22c:	b580      	push	{r7, lr}
 810a22e:	b084      	sub	sp, #16
 810a230:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810a232:	2300      	movs	r3, #0
 810a234:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810a236:	2300      	movs	r3, #0
 810a238:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810a23a:	4b41      	ldr	r3, [pc, #260]	; (810a340 <xTaskResumeAll+0x114>)
 810a23c:	681b      	ldr	r3, [r3, #0]
 810a23e:	2b00      	cmp	r3, #0
 810a240:	d10a      	bne.n	810a258 <xTaskResumeAll+0x2c>
	__asm volatile
 810a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a246:	f383 8811 	msr	BASEPRI, r3
 810a24a:	f3bf 8f6f 	isb	sy
 810a24e:	f3bf 8f4f 	dsb	sy
 810a252:	603b      	str	r3, [r7, #0]
}
 810a254:	bf00      	nop
 810a256:	e7fe      	b.n	810a256 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810a258:	f7fe ff54 	bl	8109104 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810a25c:	4b38      	ldr	r3, [pc, #224]	; (810a340 <xTaskResumeAll+0x114>)
 810a25e:	681b      	ldr	r3, [r3, #0]
 810a260:	3b01      	subs	r3, #1
 810a262:	4a37      	ldr	r2, [pc, #220]	; (810a340 <xTaskResumeAll+0x114>)
 810a264:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a266:	4b36      	ldr	r3, [pc, #216]	; (810a340 <xTaskResumeAll+0x114>)
 810a268:	681b      	ldr	r3, [r3, #0]
 810a26a:	2b00      	cmp	r3, #0
 810a26c:	d161      	bne.n	810a332 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810a26e:	4b35      	ldr	r3, [pc, #212]	; (810a344 <xTaskResumeAll+0x118>)
 810a270:	681b      	ldr	r3, [r3, #0]
 810a272:	2b00      	cmp	r3, #0
 810a274:	d05d      	beq.n	810a332 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a276:	e02e      	b.n	810a2d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a278:	4b33      	ldr	r3, [pc, #204]	; (810a348 <xTaskResumeAll+0x11c>)
 810a27a:	68db      	ldr	r3, [r3, #12]
 810a27c:	68db      	ldr	r3, [r3, #12]
 810a27e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a280:	68fb      	ldr	r3, [r7, #12]
 810a282:	3318      	adds	r3, #24
 810a284:	4618      	mov	r0, r3
 810a286:	f7fe fde5 	bl	8108e54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a28a:	68fb      	ldr	r3, [r7, #12]
 810a28c:	3304      	adds	r3, #4
 810a28e:	4618      	mov	r0, r3
 810a290:	f7fe fde0 	bl	8108e54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810a294:	68fb      	ldr	r3, [r7, #12]
 810a296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a298:	2201      	movs	r2, #1
 810a29a:	409a      	lsls	r2, r3
 810a29c:	4b2b      	ldr	r3, [pc, #172]	; (810a34c <xTaskResumeAll+0x120>)
 810a29e:	681b      	ldr	r3, [r3, #0]
 810a2a0:	4313      	orrs	r3, r2
 810a2a2:	4a2a      	ldr	r2, [pc, #168]	; (810a34c <xTaskResumeAll+0x120>)
 810a2a4:	6013      	str	r3, [r2, #0]
 810a2a6:	68fb      	ldr	r3, [r7, #12]
 810a2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a2aa:	4613      	mov	r3, r2
 810a2ac:	009b      	lsls	r3, r3, #2
 810a2ae:	4413      	add	r3, r2
 810a2b0:	009b      	lsls	r3, r3, #2
 810a2b2:	4a27      	ldr	r2, [pc, #156]	; (810a350 <xTaskResumeAll+0x124>)
 810a2b4:	441a      	add	r2, r3
 810a2b6:	68fb      	ldr	r3, [r7, #12]
 810a2b8:	3304      	adds	r3, #4
 810a2ba:	4619      	mov	r1, r3
 810a2bc:	4610      	mov	r0, r2
 810a2be:	f7fe fd6c 	bl	8108d9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a2c2:	68fb      	ldr	r3, [r7, #12]
 810a2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a2c6:	4b23      	ldr	r3, [pc, #140]	; (810a354 <xTaskResumeAll+0x128>)
 810a2c8:	681b      	ldr	r3, [r3, #0]
 810a2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2cc:	429a      	cmp	r2, r3
 810a2ce:	d302      	bcc.n	810a2d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 810a2d0:	4b21      	ldr	r3, [pc, #132]	; (810a358 <xTaskResumeAll+0x12c>)
 810a2d2:	2201      	movs	r2, #1
 810a2d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a2d6:	4b1c      	ldr	r3, [pc, #112]	; (810a348 <xTaskResumeAll+0x11c>)
 810a2d8:	681b      	ldr	r3, [r3, #0]
 810a2da:	2b00      	cmp	r3, #0
 810a2dc:	d1cc      	bne.n	810a278 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810a2de:	68fb      	ldr	r3, [r7, #12]
 810a2e0:	2b00      	cmp	r3, #0
 810a2e2:	d001      	beq.n	810a2e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810a2e4:	f000 fb38 	bl	810a958 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 810a2e8:	4b1c      	ldr	r3, [pc, #112]	; (810a35c <xTaskResumeAll+0x130>)
 810a2ea:	681b      	ldr	r3, [r3, #0]
 810a2ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 810a2ee:	687b      	ldr	r3, [r7, #4]
 810a2f0:	2b00      	cmp	r3, #0
 810a2f2:	d010      	beq.n	810a316 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810a2f4:	f000 f836 	bl	810a364 <xTaskIncrementTick>
 810a2f8:	4603      	mov	r3, r0
 810a2fa:	2b00      	cmp	r3, #0
 810a2fc:	d002      	beq.n	810a304 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 810a2fe:	4b16      	ldr	r3, [pc, #88]	; (810a358 <xTaskResumeAll+0x12c>)
 810a300:	2201      	movs	r2, #1
 810a302:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 810a304:	687b      	ldr	r3, [r7, #4]
 810a306:	3b01      	subs	r3, #1
 810a308:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 810a30a:	687b      	ldr	r3, [r7, #4]
 810a30c:	2b00      	cmp	r3, #0
 810a30e:	d1f1      	bne.n	810a2f4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 810a310:	4b12      	ldr	r3, [pc, #72]	; (810a35c <xTaskResumeAll+0x130>)
 810a312:	2200      	movs	r2, #0
 810a314:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810a316:	4b10      	ldr	r3, [pc, #64]	; (810a358 <xTaskResumeAll+0x12c>)
 810a318:	681b      	ldr	r3, [r3, #0]
 810a31a:	2b00      	cmp	r3, #0
 810a31c:	d009      	beq.n	810a332 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810a31e:	2301      	movs	r3, #1
 810a320:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810a322:	4b0f      	ldr	r3, [pc, #60]	; (810a360 <xTaskResumeAll+0x134>)
 810a324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a328:	601a      	str	r2, [r3, #0]
 810a32a:	f3bf 8f4f 	dsb	sy
 810a32e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810a332:	f7fe ff17 	bl	8109164 <vPortExitCritical>

	return xAlreadyYielded;
 810a336:	68bb      	ldr	r3, [r7, #8]
}
 810a338:	4618      	mov	r0, r3
 810a33a:	3710      	adds	r7, #16
 810a33c:	46bd      	mov	sp, r7
 810a33e:	bd80      	pop	{r7, pc}
 810a340:	100041d4 	.word	0x100041d4
 810a344:	100041ac 	.word	0x100041ac
 810a348:	1000416c 	.word	0x1000416c
 810a34c:	100041b4 	.word	0x100041b4
 810a350:	100040b0 	.word	0x100040b0
 810a354:	100040ac 	.word	0x100040ac
 810a358:	100041c0 	.word	0x100041c0
 810a35c:	100041bc 	.word	0x100041bc
 810a360:	e000ed04 	.word	0xe000ed04

0810a364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810a364:	b580      	push	{r7, lr}
 810a366:	b086      	sub	sp, #24
 810a368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810a36a:	2300      	movs	r3, #0
 810a36c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a36e:	4b4e      	ldr	r3, [pc, #312]	; (810a4a8 <xTaskIncrementTick+0x144>)
 810a370:	681b      	ldr	r3, [r3, #0]
 810a372:	2b00      	cmp	r3, #0
 810a374:	f040 8088 	bne.w	810a488 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810a378:	4b4c      	ldr	r3, [pc, #304]	; (810a4ac <xTaskIncrementTick+0x148>)
 810a37a:	681b      	ldr	r3, [r3, #0]
 810a37c:	3301      	adds	r3, #1
 810a37e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810a380:	4a4a      	ldr	r2, [pc, #296]	; (810a4ac <xTaskIncrementTick+0x148>)
 810a382:	693b      	ldr	r3, [r7, #16]
 810a384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810a386:	693b      	ldr	r3, [r7, #16]
 810a388:	2b00      	cmp	r3, #0
 810a38a:	d120      	bne.n	810a3ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 810a38c:	4b48      	ldr	r3, [pc, #288]	; (810a4b0 <xTaskIncrementTick+0x14c>)
 810a38e:	681b      	ldr	r3, [r3, #0]
 810a390:	681b      	ldr	r3, [r3, #0]
 810a392:	2b00      	cmp	r3, #0
 810a394:	d00a      	beq.n	810a3ac <xTaskIncrementTick+0x48>
	__asm volatile
 810a396:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a39a:	f383 8811 	msr	BASEPRI, r3
 810a39e:	f3bf 8f6f 	isb	sy
 810a3a2:	f3bf 8f4f 	dsb	sy
 810a3a6:	603b      	str	r3, [r7, #0]
}
 810a3a8:	bf00      	nop
 810a3aa:	e7fe      	b.n	810a3aa <xTaskIncrementTick+0x46>
 810a3ac:	4b40      	ldr	r3, [pc, #256]	; (810a4b0 <xTaskIncrementTick+0x14c>)
 810a3ae:	681b      	ldr	r3, [r3, #0]
 810a3b0:	60fb      	str	r3, [r7, #12]
 810a3b2:	4b40      	ldr	r3, [pc, #256]	; (810a4b4 <xTaskIncrementTick+0x150>)
 810a3b4:	681b      	ldr	r3, [r3, #0]
 810a3b6:	4a3e      	ldr	r2, [pc, #248]	; (810a4b0 <xTaskIncrementTick+0x14c>)
 810a3b8:	6013      	str	r3, [r2, #0]
 810a3ba:	4a3e      	ldr	r2, [pc, #248]	; (810a4b4 <xTaskIncrementTick+0x150>)
 810a3bc:	68fb      	ldr	r3, [r7, #12]
 810a3be:	6013      	str	r3, [r2, #0]
 810a3c0:	4b3d      	ldr	r3, [pc, #244]	; (810a4b8 <xTaskIncrementTick+0x154>)
 810a3c2:	681b      	ldr	r3, [r3, #0]
 810a3c4:	3301      	adds	r3, #1
 810a3c6:	4a3c      	ldr	r2, [pc, #240]	; (810a4b8 <xTaskIncrementTick+0x154>)
 810a3c8:	6013      	str	r3, [r2, #0]
 810a3ca:	f000 fac5 	bl	810a958 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810a3ce:	4b3b      	ldr	r3, [pc, #236]	; (810a4bc <xTaskIncrementTick+0x158>)
 810a3d0:	681b      	ldr	r3, [r3, #0]
 810a3d2:	693a      	ldr	r2, [r7, #16]
 810a3d4:	429a      	cmp	r2, r3
 810a3d6:	d348      	bcc.n	810a46a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a3d8:	4b35      	ldr	r3, [pc, #212]	; (810a4b0 <xTaskIncrementTick+0x14c>)
 810a3da:	681b      	ldr	r3, [r3, #0]
 810a3dc:	681b      	ldr	r3, [r3, #0]
 810a3de:	2b00      	cmp	r3, #0
 810a3e0:	d104      	bne.n	810a3ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a3e2:	4b36      	ldr	r3, [pc, #216]	; (810a4bc <xTaskIncrementTick+0x158>)
 810a3e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a3e8:	601a      	str	r2, [r3, #0]
					break;
 810a3ea:	e03e      	b.n	810a46a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a3ec:	4b30      	ldr	r3, [pc, #192]	; (810a4b0 <xTaskIncrementTick+0x14c>)
 810a3ee:	681b      	ldr	r3, [r3, #0]
 810a3f0:	68db      	ldr	r3, [r3, #12]
 810a3f2:	68db      	ldr	r3, [r3, #12]
 810a3f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810a3f6:	68bb      	ldr	r3, [r7, #8]
 810a3f8:	685b      	ldr	r3, [r3, #4]
 810a3fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810a3fc:	693a      	ldr	r2, [r7, #16]
 810a3fe:	687b      	ldr	r3, [r7, #4]
 810a400:	429a      	cmp	r2, r3
 810a402:	d203      	bcs.n	810a40c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810a404:	4a2d      	ldr	r2, [pc, #180]	; (810a4bc <xTaskIncrementTick+0x158>)
 810a406:	687b      	ldr	r3, [r7, #4]
 810a408:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810a40a:	e02e      	b.n	810a46a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a40c:	68bb      	ldr	r3, [r7, #8]
 810a40e:	3304      	adds	r3, #4
 810a410:	4618      	mov	r0, r3
 810a412:	f7fe fd1f 	bl	8108e54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810a416:	68bb      	ldr	r3, [r7, #8]
 810a418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a41a:	2b00      	cmp	r3, #0
 810a41c:	d004      	beq.n	810a428 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a41e:	68bb      	ldr	r3, [r7, #8]
 810a420:	3318      	adds	r3, #24
 810a422:	4618      	mov	r0, r3
 810a424:	f7fe fd16 	bl	8108e54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810a428:	68bb      	ldr	r3, [r7, #8]
 810a42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a42c:	2201      	movs	r2, #1
 810a42e:	409a      	lsls	r2, r3
 810a430:	4b23      	ldr	r3, [pc, #140]	; (810a4c0 <xTaskIncrementTick+0x15c>)
 810a432:	681b      	ldr	r3, [r3, #0]
 810a434:	4313      	orrs	r3, r2
 810a436:	4a22      	ldr	r2, [pc, #136]	; (810a4c0 <xTaskIncrementTick+0x15c>)
 810a438:	6013      	str	r3, [r2, #0]
 810a43a:	68bb      	ldr	r3, [r7, #8]
 810a43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a43e:	4613      	mov	r3, r2
 810a440:	009b      	lsls	r3, r3, #2
 810a442:	4413      	add	r3, r2
 810a444:	009b      	lsls	r3, r3, #2
 810a446:	4a1f      	ldr	r2, [pc, #124]	; (810a4c4 <xTaskIncrementTick+0x160>)
 810a448:	441a      	add	r2, r3
 810a44a:	68bb      	ldr	r3, [r7, #8]
 810a44c:	3304      	adds	r3, #4
 810a44e:	4619      	mov	r1, r3
 810a450:	4610      	mov	r0, r2
 810a452:	f7fe fca2 	bl	8108d9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a456:	68bb      	ldr	r3, [r7, #8]
 810a458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a45a:	4b1b      	ldr	r3, [pc, #108]	; (810a4c8 <xTaskIncrementTick+0x164>)
 810a45c:	681b      	ldr	r3, [r3, #0]
 810a45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a460:	429a      	cmp	r2, r3
 810a462:	d3b9      	bcc.n	810a3d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 810a464:	2301      	movs	r3, #1
 810a466:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a468:	e7b6      	b.n	810a3d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810a46a:	4b17      	ldr	r3, [pc, #92]	; (810a4c8 <xTaskIncrementTick+0x164>)
 810a46c:	681b      	ldr	r3, [r3, #0]
 810a46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a470:	4914      	ldr	r1, [pc, #80]	; (810a4c4 <xTaskIncrementTick+0x160>)
 810a472:	4613      	mov	r3, r2
 810a474:	009b      	lsls	r3, r3, #2
 810a476:	4413      	add	r3, r2
 810a478:	009b      	lsls	r3, r3, #2
 810a47a:	440b      	add	r3, r1
 810a47c:	681b      	ldr	r3, [r3, #0]
 810a47e:	2b01      	cmp	r3, #1
 810a480:	d907      	bls.n	810a492 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 810a482:	2301      	movs	r3, #1
 810a484:	617b      	str	r3, [r7, #20]
 810a486:	e004      	b.n	810a492 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 810a488:	4b10      	ldr	r3, [pc, #64]	; (810a4cc <xTaskIncrementTick+0x168>)
 810a48a:	681b      	ldr	r3, [r3, #0]
 810a48c:	3301      	adds	r3, #1
 810a48e:	4a0f      	ldr	r2, [pc, #60]	; (810a4cc <xTaskIncrementTick+0x168>)
 810a490:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 810a492:	4b0f      	ldr	r3, [pc, #60]	; (810a4d0 <xTaskIncrementTick+0x16c>)
 810a494:	681b      	ldr	r3, [r3, #0]
 810a496:	2b00      	cmp	r3, #0
 810a498:	d001      	beq.n	810a49e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 810a49a:	2301      	movs	r3, #1
 810a49c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 810a49e:	697b      	ldr	r3, [r7, #20]
}
 810a4a0:	4618      	mov	r0, r3
 810a4a2:	3718      	adds	r7, #24
 810a4a4:	46bd      	mov	sp, r7
 810a4a6:	bd80      	pop	{r7, pc}
 810a4a8:	100041d4 	.word	0x100041d4
 810a4ac:	100041b0 	.word	0x100041b0
 810a4b0:	10004164 	.word	0x10004164
 810a4b4:	10004168 	.word	0x10004168
 810a4b8:	100041c4 	.word	0x100041c4
 810a4bc:	100041cc 	.word	0x100041cc
 810a4c0:	100041b4 	.word	0x100041b4
 810a4c4:	100040b0 	.word	0x100040b0
 810a4c8:	100040ac 	.word	0x100040ac
 810a4cc:	100041bc 	.word	0x100041bc
 810a4d0:	100041c0 	.word	0x100041c0

0810a4d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810a4d4:	b480      	push	{r7}
 810a4d6:	b087      	sub	sp, #28
 810a4d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810a4da:	4b27      	ldr	r3, [pc, #156]	; (810a578 <vTaskSwitchContext+0xa4>)
 810a4dc:	681b      	ldr	r3, [r3, #0]
 810a4de:	2b00      	cmp	r3, #0
 810a4e0:	d003      	beq.n	810a4ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810a4e2:	4b26      	ldr	r3, [pc, #152]	; (810a57c <vTaskSwitchContext+0xa8>)
 810a4e4:	2201      	movs	r2, #1
 810a4e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810a4e8:	e03f      	b.n	810a56a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 810a4ea:	4b24      	ldr	r3, [pc, #144]	; (810a57c <vTaskSwitchContext+0xa8>)
 810a4ec:	2200      	movs	r2, #0
 810a4ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a4f0:	4b23      	ldr	r3, [pc, #140]	; (810a580 <vTaskSwitchContext+0xac>)
 810a4f2:	681b      	ldr	r3, [r3, #0]
 810a4f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 810a4f6:	68fb      	ldr	r3, [r7, #12]
 810a4f8:	fab3 f383 	clz	r3, r3
 810a4fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 810a4fe:	7afb      	ldrb	r3, [r7, #11]
 810a500:	f1c3 031f 	rsb	r3, r3, #31
 810a504:	617b      	str	r3, [r7, #20]
 810a506:	491f      	ldr	r1, [pc, #124]	; (810a584 <vTaskSwitchContext+0xb0>)
 810a508:	697a      	ldr	r2, [r7, #20]
 810a50a:	4613      	mov	r3, r2
 810a50c:	009b      	lsls	r3, r3, #2
 810a50e:	4413      	add	r3, r2
 810a510:	009b      	lsls	r3, r3, #2
 810a512:	440b      	add	r3, r1
 810a514:	681b      	ldr	r3, [r3, #0]
 810a516:	2b00      	cmp	r3, #0
 810a518:	d10a      	bne.n	810a530 <vTaskSwitchContext+0x5c>
	__asm volatile
 810a51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a51e:	f383 8811 	msr	BASEPRI, r3
 810a522:	f3bf 8f6f 	isb	sy
 810a526:	f3bf 8f4f 	dsb	sy
 810a52a:	607b      	str	r3, [r7, #4]
}
 810a52c:	bf00      	nop
 810a52e:	e7fe      	b.n	810a52e <vTaskSwitchContext+0x5a>
 810a530:	697a      	ldr	r2, [r7, #20]
 810a532:	4613      	mov	r3, r2
 810a534:	009b      	lsls	r3, r3, #2
 810a536:	4413      	add	r3, r2
 810a538:	009b      	lsls	r3, r3, #2
 810a53a:	4a12      	ldr	r2, [pc, #72]	; (810a584 <vTaskSwitchContext+0xb0>)
 810a53c:	4413      	add	r3, r2
 810a53e:	613b      	str	r3, [r7, #16]
 810a540:	693b      	ldr	r3, [r7, #16]
 810a542:	685b      	ldr	r3, [r3, #4]
 810a544:	685a      	ldr	r2, [r3, #4]
 810a546:	693b      	ldr	r3, [r7, #16]
 810a548:	605a      	str	r2, [r3, #4]
 810a54a:	693b      	ldr	r3, [r7, #16]
 810a54c:	685a      	ldr	r2, [r3, #4]
 810a54e:	693b      	ldr	r3, [r7, #16]
 810a550:	3308      	adds	r3, #8
 810a552:	429a      	cmp	r2, r3
 810a554:	d104      	bne.n	810a560 <vTaskSwitchContext+0x8c>
 810a556:	693b      	ldr	r3, [r7, #16]
 810a558:	685b      	ldr	r3, [r3, #4]
 810a55a:	685a      	ldr	r2, [r3, #4]
 810a55c:	693b      	ldr	r3, [r7, #16]
 810a55e:	605a      	str	r2, [r3, #4]
 810a560:	693b      	ldr	r3, [r7, #16]
 810a562:	685b      	ldr	r3, [r3, #4]
 810a564:	68db      	ldr	r3, [r3, #12]
 810a566:	4a08      	ldr	r2, [pc, #32]	; (810a588 <vTaskSwitchContext+0xb4>)
 810a568:	6013      	str	r3, [r2, #0]
}
 810a56a:	bf00      	nop
 810a56c:	371c      	adds	r7, #28
 810a56e:	46bd      	mov	sp, r7
 810a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a574:	4770      	bx	lr
 810a576:	bf00      	nop
 810a578:	100041d4 	.word	0x100041d4
 810a57c:	100041c0 	.word	0x100041c0
 810a580:	100041b4 	.word	0x100041b4
 810a584:	100040b0 	.word	0x100040b0
 810a588:	100040ac 	.word	0x100040ac

0810a58c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810a58c:	b580      	push	{r7, lr}
 810a58e:	b084      	sub	sp, #16
 810a590:	af00      	add	r7, sp, #0
 810a592:	6078      	str	r0, [r7, #4]
 810a594:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810a596:	687b      	ldr	r3, [r7, #4]
 810a598:	2b00      	cmp	r3, #0
 810a59a:	d10a      	bne.n	810a5b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 810a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a5a0:	f383 8811 	msr	BASEPRI, r3
 810a5a4:	f3bf 8f6f 	isb	sy
 810a5a8:	f3bf 8f4f 	dsb	sy
 810a5ac:	60fb      	str	r3, [r7, #12]
}
 810a5ae:	bf00      	nop
 810a5b0:	e7fe      	b.n	810a5b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810a5b2:	4b07      	ldr	r3, [pc, #28]	; (810a5d0 <vTaskPlaceOnEventList+0x44>)
 810a5b4:	681b      	ldr	r3, [r3, #0]
 810a5b6:	3318      	adds	r3, #24
 810a5b8:	4619      	mov	r1, r3
 810a5ba:	6878      	ldr	r0, [r7, #4]
 810a5bc:	f7fe fc11 	bl	8108de2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810a5c0:	2101      	movs	r1, #1
 810a5c2:	6838      	ldr	r0, [r7, #0]
 810a5c4:	f000 fbd2 	bl	810ad6c <prvAddCurrentTaskToDelayedList>
}
 810a5c8:	bf00      	nop
 810a5ca:	3710      	adds	r7, #16
 810a5cc:	46bd      	mov	sp, r7
 810a5ce:	bd80      	pop	{r7, pc}
 810a5d0:	100040ac 	.word	0x100040ac

0810a5d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810a5d4:	b580      	push	{r7, lr}
 810a5d6:	b086      	sub	sp, #24
 810a5d8:	af00      	add	r7, sp, #0
 810a5da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a5dc:	687b      	ldr	r3, [r7, #4]
 810a5de:	68db      	ldr	r3, [r3, #12]
 810a5e0:	68db      	ldr	r3, [r3, #12]
 810a5e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810a5e4:	693b      	ldr	r3, [r7, #16]
 810a5e6:	2b00      	cmp	r3, #0
 810a5e8:	d10a      	bne.n	810a600 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 810a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a5ee:	f383 8811 	msr	BASEPRI, r3
 810a5f2:	f3bf 8f6f 	isb	sy
 810a5f6:	f3bf 8f4f 	dsb	sy
 810a5fa:	60fb      	str	r3, [r7, #12]
}
 810a5fc:	bf00      	nop
 810a5fe:	e7fe      	b.n	810a5fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810a600:	693b      	ldr	r3, [r7, #16]
 810a602:	3318      	adds	r3, #24
 810a604:	4618      	mov	r0, r3
 810a606:	f7fe fc25 	bl	8108e54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a60a:	4b1d      	ldr	r3, [pc, #116]	; (810a680 <xTaskRemoveFromEventList+0xac>)
 810a60c:	681b      	ldr	r3, [r3, #0]
 810a60e:	2b00      	cmp	r3, #0
 810a610:	d11c      	bne.n	810a64c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810a612:	693b      	ldr	r3, [r7, #16]
 810a614:	3304      	adds	r3, #4
 810a616:	4618      	mov	r0, r3
 810a618:	f7fe fc1c 	bl	8108e54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810a61c:	693b      	ldr	r3, [r7, #16]
 810a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a620:	2201      	movs	r2, #1
 810a622:	409a      	lsls	r2, r3
 810a624:	4b17      	ldr	r3, [pc, #92]	; (810a684 <xTaskRemoveFromEventList+0xb0>)
 810a626:	681b      	ldr	r3, [r3, #0]
 810a628:	4313      	orrs	r3, r2
 810a62a:	4a16      	ldr	r2, [pc, #88]	; (810a684 <xTaskRemoveFromEventList+0xb0>)
 810a62c:	6013      	str	r3, [r2, #0]
 810a62e:	693b      	ldr	r3, [r7, #16]
 810a630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a632:	4613      	mov	r3, r2
 810a634:	009b      	lsls	r3, r3, #2
 810a636:	4413      	add	r3, r2
 810a638:	009b      	lsls	r3, r3, #2
 810a63a:	4a13      	ldr	r2, [pc, #76]	; (810a688 <xTaskRemoveFromEventList+0xb4>)
 810a63c:	441a      	add	r2, r3
 810a63e:	693b      	ldr	r3, [r7, #16]
 810a640:	3304      	adds	r3, #4
 810a642:	4619      	mov	r1, r3
 810a644:	4610      	mov	r0, r2
 810a646:	f7fe fba8 	bl	8108d9a <vListInsertEnd>
 810a64a:	e005      	b.n	810a658 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810a64c:	693b      	ldr	r3, [r7, #16]
 810a64e:	3318      	adds	r3, #24
 810a650:	4619      	mov	r1, r3
 810a652:	480e      	ldr	r0, [pc, #56]	; (810a68c <xTaskRemoveFromEventList+0xb8>)
 810a654:	f7fe fba1 	bl	8108d9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810a658:	693b      	ldr	r3, [r7, #16]
 810a65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a65c:	4b0c      	ldr	r3, [pc, #48]	; (810a690 <xTaskRemoveFromEventList+0xbc>)
 810a65e:	681b      	ldr	r3, [r3, #0]
 810a660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a662:	429a      	cmp	r2, r3
 810a664:	d905      	bls.n	810a672 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810a666:	2301      	movs	r3, #1
 810a668:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810a66a:	4b0a      	ldr	r3, [pc, #40]	; (810a694 <xTaskRemoveFromEventList+0xc0>)
 810a66c:	2201      	movs	r2, #1
 810a66e:	601a      	str	r2, [r3, #0]
 810a670:	e001      	b.n	810a676 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 810a672:	2300      	movs	r3, #0
 810a674:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810a676:	697b      	ldr	r3, [r7, #20]
}
 810a678:	4618      	mov	r0, r3
 810a67a:	3718      	adds	r7, #24
 810a67c:	46bd      	mov	sp, r7
 810a67e:	bd80      	pop	{r7, pc}
 810a680:	100041d4 	.word	0x100041d4
 810a684:	100041b4 	.word	0x100041b4
 810a688:	100040b0 	.word	0x100040b0
 810a68c:	1000416c 	.word	0x1000416c
 810a690:	100040ac 	.word	0x100040ac
 810a694:	100041c0 	.word	0x100041c0

0810a698 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810a698:	b580      	push	{r7, lr}
 810a69a:	b084      	sub	sp, #16
 810a69c:	af00      	add	r7, sp, #0
 810a69e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 810a6a0:	687b      	ldr	r3, [r7, #4]
 810a6a2:	2b00      	cmp	r3, #0
 810a6a4:	d10a      	bne.n	810a6bc <vTaskSetTimeOutState+0x24>
	__asm volatile
 810a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a6aa:	f383 8811 	msr	BASEPRI, r3
 810a6ae:	f3bf 8f6f 	isb	sy
 810a6b2:	f3bf 8f4f 	dsb	sy
 810a6b6:	60fb      	str	r3, [r7, #12]
}
 810a6b8:	bf00      	nop
 810a6ba:	e7fe      	b.n	810a6ba <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 810a6bc:	f7fe fd22 	bl	8109104 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 810a6c0:	4b06      	ldr	r3, [pc, #24]	; (810a6dc <vTaskSetTimeOutState+0x44>)
 810a6c2:	681a      	ldr	r2, [r3, #0]
 810a6c4:	687b      	ldr	r3, [r7, #4]
 810a6c6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 810a6c8:	4b05      	ldr	r3, [pc, #20]	; (810a6e0 <vTaskSetTimeOutState+0x48>)
 810a6ca:	681a      	ldr	r2, [r3, #0]
 810a6cc:	687b      	ldr	r3, [r7, #4]
 810a6ce:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 810a6d0:	f7fe fd48 	bl	8109164 <vPortExitCritical>
}
 810a6d4:	bf00      	nop
 810a6d6:	3710      	adds	r7, #16
 810a6d8:	46bd      	mov	sp, r7
 810a6da:	bd80      	pop	{r7, pc}
 810a6dc:	100041c4 	.word	0x100041c4
 810a6e0:	100041b0 	.word	0x100041b0

0810a6e4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810a6e4:	b480      	push	{r7}
 810a6e6:	b083      	sub	sp, #12
 810a6e8:	af00      	add	r7, sp, #0
 810a6ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810a6ec:	4b06      	ldr	r3, [pc, #24]	; (810a708 <vTaskInternalSetTimeOutState+0x24>)
 810a6ee:	681a      	ldr	r2, [r3, #0]
 810a6f0:	687b      	ldr	r3, [r7, #4]
 810a6f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810a6f4:	4b05      	ldr	r3, [pc, #20]	; (810a70c <vTaskInternalSetTimeOutState+0x28>)
 810a6f6:	681a      	ldr	r2, [r3, #0]
 810a6f8:	687b      	ldr	r3, [r7, #4]
 810a6fa:	605a      	str	r2, [r3, #4]
}
 810a6fc:	bf00      	nop
 810a6fe:	370c      	adds	r7, #12
 810a700:	46bd      	mov	sp, r7
 810a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a706:	4770      	bx	lr
 810a708:	100041c4 	.word	0x100041c4
 810a70c:	100041b0 	.word	0x100041b0

0810a710 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810a710:	b580      	push	{r7, lr}
 810a712:	b088      	sub	sp, #32
 810a714:	af00      	add	r7, sp, #0
 810a716:	6078      	str	r0, [r7, #4]
 810a718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810a71a:	687b      	ldr	r3, [r7, #4]
 810a71c:	2b00      	cmp	r3, #0
 810a71e:	d10a      	bne.n	810a736 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 810a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a724:	f383 8811 	msr	BASEPRI, r3
 810a728:	f3bf 8f6f 	isb	sy
 810a72c:	f3bf 8f4f 	dsb	sy
 810a730:	613b      	str	r3, [r7, #16]
}
 810a732:	bf00      	nop
 810a734:	e7fe      	b.n	810a734 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810a736:	683b      	ldr	r3, [r7, #0]
 810a738:	2b00      	cmp	r3, #0
 810a73a:	d10a      	bne.n	810a752 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 810a73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a740:	f383 8811 	msr	BASEPRI, r3
 810a744:	f3bf 8f6f 	isb	sy
 810a748:	f3bf 8f4f 	dsb	sy
 810a74c:	60fb      	str	r3, [r7, #12]
}
 810a74e:	bf00      	nop
 810a750:	e7fe      	b.n	810a750 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 810a752:	f7fe fcd7 	bl	8109104 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810a756:	4b1d      	ldr	r3, [pc, #116]	; (810a7cc <xTaskCheckForTimeOut+0xbc>)
 810a758:	681b      	ldr	r3, [r3, #0]
 810a75a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810a75c:	687b      	ldr	r3, [r7, #4]
 810a75e:	685b      	ldr	r3, [r3, #4]
 810a760:	69ba      	ldr	r2, [r7, #24]
 810a762:	1ad3      	subs	r3, r2, r3
 810a764:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810a766:	683b      	ldr	r3, [r7, #0]
 810a768:	681b      	ldr	r3, [r3, #0]
 810a76a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810a76e:	d102      	bne.n	810a776 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810a770:	2300      	movs	r3, #0
 810a772:	61fb      	str	r3, [r7, #28]
 810a774:	e023      	b.n	810a7be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810a776:	687b      	ldr	r3, [r7, #4]
 810a778:	681a      	ldr	r2, [r3, #0]
 810a77a:	4b15      	ldr	r3, [pc, #84]	; (810a7d0 <xTaskCheckForTimeOut+0xc0>)
 810a77c:	681b      	ldr	r3, [r3, #0]
 810a77e:	429a      	cmp	r2, r3
 810a780:	d007      	beq.n	810a792 <xTaskCheckForTimeOut+0x82>
 810a782:	687b      	ldr	r3, [r7, #4]
 810a784:	685b      	ldr	r3, [r3, #4]
 810a786:	69ba      	ldr	r2, [r7, #24]
 810a788:	429a      	cmp	r2, r3
 810a78a:	d302      	bcc.n	810a792 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810a78c:	2301      	movs	r3, #1
 810a78e:	61fb      	str	r3, [r7, #28]
 810a790:	e015      	b.n	810a7be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810a792:	683b      	ldr	r3, [r7, #0]
 810a794:	681b      	ldr	r3, [r3, #0]
 810a796:	697a      	ldr	r2, [r7, #20]
 810a798:	429a      	cmp	r2, r3
 810a79a:	d20b      	bcs.n	810a7b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810a79c:	683b      	ldr	r3, [r7, #0]
 810a79e:	681a      	ldr	r2, [r3, #0]
 810a7a0:	697b      	ldr	r3, [r7, #20]
 810a7a2:	1ad2      	subs	r2, r2, r3
 810a7a4:	683b      	ldr	r3, [r7, #0]
 810a7a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810a7a8:	6878      	ldr	r0, [r7, #4]
 810a7aa:	f7ff ff9b 	bl	810a6e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810a7ae:	2300      	movs	r3, #0
 810a7b0:	61fb      	str	r3, [r7, #28]
 810a7b2:	e004      	b.n	810a7be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 810a7b4:	683b      	ldr	r3, [r7, #0]
 810a7b6:	2200      	movs	r2, #0
 810a7b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810a7ba:	2301      	movs	r3, #1
 810a7bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810a7be:	f7fe fcd1 	bl	8109164 <vPortExitCritical>

	return xReturn;
 810a7c2:	69fb      	ldr	r3, [r7, #28]
}
 810a7c4:	4618      	mov	r0, r3
 810a7c6:	3720      	adds	r7, #32
 810a7c8:	46bd      	mov	sp, r7
 810a7ca:	bd80      	pop	{r7, pc}
 810a7cc:	100041b0 	.word	0x100041b0
 810a7d0:	100041c4 	.word	0x100041c4

0810a7d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810a7d4:	b480      	push	{r7}
 810a7d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810a7d8:	4b03      	ldr	r3, [pc, #12]	; (810a7e8 <vTaskMissedYield+0x14>)
 810a7da:	2201      	movs	r2, #1
 810a7dc:	601a      	str	r2, [r3, #0]
}
 810a7de:	bf00      	nop
 810a7e0:	46bd      	mov	sp, r7
 810a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7e6:	4770      	bx	lr
 810a7e8:	100041c0 	.word	0x100041c0

0810a7ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810a7ec:	b580      	push	{r7, lr}
 810a7ee:	b082      	sub	sp, #8
 810a7f0:	af00      	add	r7, sp, #0
 810a7f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810a7f4:	f000 f852 	bl	810a89c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810a7f8:	4b06      	ldr	r3, [pc, #24]	; (810a814 <prvIdleTask+0x28>)
 810a7fa:	681b      	ldr	r3, [r3, #0]
 810a7fc:	2b01      	cmp	r3, #1
 810a7fe:	d9f9      	bls.n	810a7f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 810a800:	4b05      	ldr	r3, [pc, #20]	; (810a818 <prvIdleTask+0x2c>)
 810a802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a806:	601a      	str	r2, [r3, #0]
 810a808:	f3bf 8f4f 	dsb	sy
 810a80c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810a810:	e7f0      	b.n	810a7f4 <prvIdleTask+0x8>
 810a812:	bf00      	nop
 810a814:	100040b0 	.word	0x100040b0
 810a818:	e000ed04 	.word	0xe000ed04

0810a81c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810a81c:	b580      	push	{r7, lr}
 810a81e:	b082      	sub	sp, #8
 810a820:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810a822:	2300      	movs	r3, #0
 810a824:	607b      	str	r3, [r7, #4]
 810a826:	e00c      	b.n	810a842 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810a828:	687a      	ldr	r2, [r7, #4]
 810a82a:	4613      	mov	r3, r2
 810a82c:	009b      	lsls	r3, r3, #2
 810a82e:	4413      	add	r3, r2
 810a830:	009b      	lsls	r3, r3, #2
 810a832:	4a12      	ldr	r2, [pc, #72]	; (810a87c <prvInitialiseTaskLists+0x60>)
 810a834:	4413      	add	r3, r2
 810a836:	4618      	mov	r0, r3
 810a838:	f7fe fa82 	bl	8108d40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810a83c:	687b      	ldr	r3, [r7, #4]
 810a83e:	3301      	adds	r3, #1
 810a840:	607b      	str	r3, [r7, #4]
 810a842:	687b      	ldr	r3, [r7, #4]
 810a844:	2b06      	cmp	r3, #6
 810a846:	d9ef      	bls.n	810a828 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810a848:	480d      	ldr	r0, [pc, #52]	; (810a880 <prvInitialiseTaskLists+0x64>)
 810a84a:	f7fe fa79 	bl	8108d40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810a84e:	480d      	ldr	r0, [pc, #52]	; (810a884 <prvInitialiseTaskLists+0x68>)
 810a850:	f7fe fa76 	bl	8108d40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810a854:	480c      	ldr	r0, [pc, #48]	; (810a888 <prvInitialiseTaskLists+0x6c>)
 810a856:	f7fe fa73 	bl	8108d40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810a85a:	480c      	ldr	r0, [pc, #48]	; (810a88c <prvInitialiseTaskLists+0x70>)
 810a85c:	f7fe fa70 	bl	8108d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810a860:	480b      	ldr	r0, [pc, #44]	; (810a890 <prvInitialiseTaskLists+0x74>)
 810a862:	f7fe fa6d 	bl	8108d40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810a866:	4b0b      	ldr	r3, [pc, #44]	; (810a894 <prvInitialiseTaskLists+0x78>)
 810a868:	4a05      	ldr	r2, [pc, #20]	; (810a880 <prvInitialiseTaskLists+0x64>)
 810a86a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810a86c:	4b0a      	ldr	r3, [pc, #40]	; (810a898 <prvInitialiseTaskLists+0x7c>)
 810a86e:	4a05      	ldr	r2, [pc, #20]	; (810a884 <prvInitialiseTaskLists+0x68>)
 810a870:	601a      	str	r2, [r3, #0]
}
 810a872:	bf00      	nop
 810a874:	3708      	adds	r7, #8
 810a876:	46bd      	mov	sp, r7
 810a878:	bd80      	pop	{r7, pc}
 810a87a:	bf00      	nop
 810a87c:	100040b0 	.word	0x100040b0
 810a880:	1000413c 	.word	0x1000413c
 810a884:	10004150 	.word	0x10004150
 810a888:	1000416c 	.word	0x1000416c
 810a88c:	10004180 	.word	0x10004180
 810a890:	10004198 	.word	0x10004198
 810a894:	10004164 	.word	0x10004164
 810a898:	10004168 	.word	0x10004168

0810a89c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810a89c:	b580      	push	{r7, lr}
 810a89e:	b082      	sub	sp, #8
 810a8a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810a8a2:	e019      	b.n	810a8d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810a8a4:	f7fe fc2e 	bl	8109104 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a8a8:	4b10      	ldr	r3, [pc, #64]	; (810a8ec <prvCheckTasksWaitingTermination+0x50>)
 810a8aa:	68db      	ldr	r3, [r3, #12]
 810a8ac:	68db      	ldr	r3, [r3, #12]
 810a8ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a8b0:	687b      	ldr	r3, [r7, #4]
 810a8b2:	3304      	adds	r3, #4
 810a8b4:	4618      	mov	r0, r3
 810a8b6:	f7fe facd 	bl	8108e54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810a8ba:	4b0d      	ldr	r3, [pc, #52]	; (810a8f0 <prvCheckTasksWaitingTermination+0x54>)
 810a8bc:	681b      	ldr	r3, [r3, #0]
 810a8be:	3b01      	subs	r3, #1
 810a8c0:	4a0b      	ldr	r2, [pc, #44]	; (810a8f0 <prvCheckTasksWaitingTermination+0x54>)
 810a8c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810a8c4:	4b0b      	ldr	r3, [pc, #44]	; (810a8f4 <prvCheckTasksWaitingTermination+0x58>)
 810a8c6:	681b      	ldr	r3, [r3, #0]
 810a8c8:	3b01      	subs	r3, #1
 810a8ca:	4a0a      	ldr	r2, [pc, #40]	; (810a8f4 <prvCheckTasksWaitingTermination+0x58>)
 810a8cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810a8ce:	f7fe fc49 	bl	8109164 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810a8d2:	6878      	ldr	r0, [r7, #4]
 810a8d4:	f000 f810 	bl	810a8f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810a8d8:	4b06      	ldr	r3, [pc, #24]	; (810a8f4 <prvCheckTasksWaitingTermination+0x58>)
 810a8da:	681b      	ldr	r3, [r3, #0]
 810a8dc:	2b00      	cmp	r3, #0
 810a8de:	d1e1      	bne.n	810a8a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810a8e0:	bf00      	nop
 810a8e2:	bf00      	nop
 810a8e4:	3708      	adds	r7, #8
 810a8e6:	46bd      	mov	sp, r7
 810a8e8:	bd80      	pop	{r7, pc}
 810a8ea:	bf00      	nop
 810a8ec:	10004180 	.word	0x10004180
 810a8f0:	100041ac 	.word	0x100041ac
 810a8f4:	10004194 	.word	0x10004194

0810a8f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810a8f8:	b580      	push	{r7, lr}
 810a8fa:	b084      	sub	sp, #16
 810a8fc:	af00      	add	r7, sp, #0
 810a8fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810a900:	687b      	ldr	r3, [r7, #4]
 810a902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810a906:	2b00      	cmp	r3, #0
 810a908:	d108      	bne.n	810a91c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810a90a:	687b      	ldr	r3, [r7, #4]
 810a90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a90e:	4618      	mov	r0, r3
 810a910:	f7fe f900 	bl	8108b14 <vPortFree>
				vPortFree( pxTCB );
 810a914:	6878      	ldr	r0, [r7, #4]
 810a916:	f7fe f8fd 	bl	8108b14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810a91a:	e018      	b.n	810a94e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810a91c:	687b      	ldr	r3, [r7, #4]
 810a91e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810a922:	2b01      	cmp	r3, #1
 810a924:	d103      	bne.n	810a92e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810a926:	6878      	ldr	r0, [r7, #4]
 810a928:	f7fe f8f4 	bl	8108b14 <vPortFree>
	}
 810a92c:	e00f      	b.n	810a94e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810a92e:	687b      	ldr	r3, [r7, #4]
 810a930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 810a934:	2b02      	cmp	r3, #2
 810a936:	d00a      	beq.n	810a94e <prvDeleteTCB+0x56>
	__asm volatile
 810a938:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a93c:	f383 8811 	msr	BASEPRI, r3
 810a940:	f3bf 8f6f 	isb	sy
 810a944:	f3bf 8f4f 	dsb	sy
 810a948:	60fb      	str	r3, [r7, #12]
}
 810a94a:	bf00      	nop
 810a94c:	e7fe      	b.n	810a94c <prvDeleteTCB+0x54>
	}
 810a94e:	bf00      	nop
 810a950:	3710      	adds	r7, #16
 810a952:	46bd      	mov	sp, r7
 810a954:	bd80      	pop	{r7, pc}
	...

0810a958 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810a958:	b480      	push	{r7}
 810a95a:	b083      	sub	sp, #12
 810a95c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a95e:	4b0c      	ldr	r3, [pc, #48]	; (810a990 <prvResetNextTaskUnblockTime+0x38>)
 810a960:	681b      	ldr	r3, [r3, #0]
 810a962:	681b      	ldr	r3, [r3, #0]
 810a964:	2b00      	cmp	r3, #0
 810a966:	d104      	bne.n	810a972 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810a968:	4b0a      	ldr	r3, [pc, #40]	; (810a994 <prvResetNextTaskUnblockTime+0x3c>)
 810a96a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a96e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810a970:	e008      	b.n	810a984 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a972:	4b07      	ldr	r3, [pc, #28]	; (810a990 <prvResetNextTaskUnblockTime+0x38>)
 810a974:	681b      	ldr	r3, [r3, #0]
 810a976:	68db      	ldr	r3, [r3, #12]
 810a978:	68db      	ldr	r3, [r3, #12]
 810a97a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810a97c:	687b      	ldr	r3, [r7, #4]
 810a97e:	685b      	ldr	r3, [r3, #4]
 810a980:	4a04      	ldr	r2, [pc, #16]	; (810a994 <prvResetNextTaskUnblockTime+0x3c>)
 810a982:	6013      	str	r3, [r2, #0]
}
 810a984:	bf00      	nop
 810a986:	370c      	adds	r7, #12
 810a988:	46bd      	mov	sp, r7
 810a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a98e:	4770      	bx	lr
 810a990:	10004164 	.word	0x10004164
 810a994:	100041cc 	.word	0x100041cc

0810a998 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 810a998:	b480      	push	{r7}
 810a99a:	b083      	sub	sp, #12
 810a99c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 810a99e:	4b05      	ldr	r3, [pc, #20]	; (810a9b4 <xTaskGetCurrentTaskHandle+0x1c>)
 810a9a0:	681b      	ldr	r3, [r3, #0]
 810a9a2:	607b      	str	r3, [r7, #4]

		return xReturn;
 810a9a4:	687b      	ldr	r3, [r7, #4]
	}
 810a9a6:	4618      	mov	r0, r3
 810a9a8:	370c      	adds	r7, #12
 810a9aa:	46bd      	mov	sp, r7
 810a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9b0:	4770      	bx	lr
 810a9b2:	bf00      	nop
 810a9b4:	100040ac 	.word	0x100040ac

0810a9b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810a9b8:	b480      	push	{r7}
 810a9ba:	b083      	sub	sp, #12
 810a9bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810a9be:	4b0b      	ldr	r3, [pc, #44]	; (810a9ec <xTaskGetSchedulerState+0x34>)
 810a9c0:	681b      	ldr	r3, [r3, #0]
 810a9c2:	2b00      	cmp	r3, #0
 810a9c4:	d102      	bne.n	810a9cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810a9c6:	2301      	movs	r3, #1
 810a9c8:	607b      	str	r3, [r7, #4]
 810a9ca:	e008      	b.n	810a9de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a9cc:	4b08      	ldr	r3, [pc, #32]	; (810a9f0 <xTaskGetSchedulerState+0x38>)
 810a9ce:	681b      	ldr	r3, [r3, #0]
 810a9d0:	2b00      	cmp	r3, #0
 810a9d2:	d102      	bne.n	810a9da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810a9d4:	2302      	movs	r3, #2
 810a9d6:	607b      	str	r3, [r7, #4]
 810a9d8:	e001      	b.n	810a9de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810a9da:	2300      	movs	r3, #0
 810a9dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810a9de:	687b      	ldr	r3, [r7, #4]
	}
 810a9e0:	4618      	mov	r0, r3
 810a9e2:	370c      	adds	r7, #12
 810a9e4:	46bd      	mov	sp, r7
 810a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9ea:	4770      	bx	lr
 810a9ec:	100041b8 	.word	0x100041b8
 810a9f0:	100041d4 	.word	0x100041d4

0810a9f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810a9f4:	b580      	push	{r7, lr}
 810a9f6:	b086      	sub	sp, #24
 810a9f8:	af00      	add	r7, sp, #0
 810a9fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810a9fc:	687b      	ldr	r3, [r7, #4]
 810a9fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810aa00:	2300      	movs	r3, #0
 810aa02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810aa04:	687b      	ldr	r3, [r7, #4]
 810aa06:	2b00      	cmp	r3, #0
 810aa08:	d06e      	beq.n	810aae8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810aa0a:	4b3a      	ldr	r3, [pc, #232]	; (810aaf4 <xTaskPriorityDisinherit+0x100>)
 810aa0c:	681b      	ldr	r3, [r3, #0]
 810aa0e:	693a      	ldr	r2, [r7, #16]
 810aa10:	429a      	cmp	r2, r3
 810aa12:	d00a      	beq.n	810aa2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 810aa14:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa18:	f383 8811 	msr	BASEPRI, r3
 810aa1c:	f3bf 8f6f 	isb	sy
 810aa20:	f3bf 8f4f 	dsb	sy
 810aa24:	60fb      	str	r3, [r7, #12]
}
 810aa26:	bf00      	nop
 810aa28:	e7fe      	b.n	810aa28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810aa2a:	693b      	ldr	r3, [r7, #16]
 810aa2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810aa2e:	2b00      	cmp	r3, #0
 810aa30:	d10a      	bne.n	810aa48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 810aa32:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa36:	f383 8811 	msr	BASEPRI, r3
 810aa3a:	f3bf 8f6f 	isb	sy
 810aa3e:	f3bf 8f4f 	dsb	sy
 810aa42:	60bb      	str	r3, [r7, #8]
}
 810aa44:	bf00      	nop
 810aa46:	e7fe      	b.n	810aa46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 810aa48:	693b      	ldr	r3, [r7, #16]
 810aa4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810aa4c:	1e5a      	subs	r2, r3, #1
 810aa4e:	693b      	ldr	r3, [r7, #16]
 810aa50:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810aa52:	693b      	ldr	r3, [r7, #16]
 810aa54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aa56:	693b      	ldr	r3, [r7, #16]
 810aa58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810aa5a:	429a      	cmp	r2, r3
 810aa5c:	d044      	beq.n	810aae8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810aa5e:	693b      	ldr	r3, [r7, #16]
 810aa60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810aa62:	2b00      	cmp	r3, #0
 810aa64:	d140      	bne.n	810aae8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810aa66:	693b      	ldr	r3, [r7, #16]
 810aa68:	3304      	adds	r3, #4
 810aa6a:	4618      	mov	r0, r3
 810aa6c:	f7fe f9f2 	bl	8108e54 <uxListRemove>
 810aa70:	4603      	mov	r3, r0
 810aa72:	2b00      	cmp	r3, #0
 810aa74:	d115      	bne.n	810aaa2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 810aa76:	693b      	ldr	r3, [r7, #16]
 810aa78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aa7a:	491f      	ldr	r1, [pc, #124]	; (810aaf8 <xTaskPriorityDisinherit+0x104>)
 810aa7c:	4613      	mov	r3, r2
 810aa7e:	009b      	lsls	r3, r3, #2
 810aa80:	4413      	add	r3, r2
 810aa82:	009b      	lsls	r3, r3, #2
 810aa84:	440b      	add	r3, r1
 810aa86:	681b      	ldr	r3, [r3, #0]
 810aa88:	2b00      	cmp	r3, #0
 810aa8a:	d10a      	bne.n	810aaa2 <xTaskPriorityDisinherit+0xae>
 810aa8c:	693b      	ldr	r3, [r7, #16]
 810aa8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aa90:	2201      	movs	r2, #1
 810aa92:	fa02 f303 	lsl.w	r3, r2, r3
 810aa96:	43da      	mvns	r2, r3
 810aa98:	4b18      	ldr	r3, [pc, #96]	; (810aafc <xTaskPriorityDisinherit+0x108>)
 810aa9a:	681b      	ldr	r3, [r3, #0]
 810aa9c:	4013      	ands	r3, r2
 810aa9e:	4a17      	ldr	r2, [pc, #92]	; (810aafc <xTaskPriorityDisinherit+0x108>)
 810aaa0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810aaa2:	693b      	ldr	r3, [r7, #16]
 810aaa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810aaa6:	693b      	ldr	r3, [r7, #16]
 810aaa8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810aaaa:	693b      	ldr	r3, [r7, #16]
 810aaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aaae:	f1c3 0207 	rsb	r2, r3, #7
 810aab2:	693b      	ldr	r3, [r7, #16]
 810aab4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810aab6:	693b      	ldr	r3, [r7, #16]
 810aab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aaba:	2201      	movs	r2, #1
 810aabc:	409a      	lsls	r2, r3
 810aabe:	4b0f      	ldr	r3, [pc, #60]	; (810aafc <xTaskPriorityDisinherit+0x108>)
 810aac0:	681b      	ldr	r3, [r3, #0]
 810aac2:	4313      	orrs	r3, r2
 810aac4:	4a0d      	ldr	r2, [pc, #52]	; (810aafc <xTaskPriorityDisinherit+0x108>)
 810aac6:	6013      	str	r3, [r2, #0]
 810aac8:	693b      	ldr	r3, [r7, #16]
 810aaca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aacc:	4613      	mov	r3, r2
 810aace:	009b      	lsls	r3, r3, #2
 810aad0:	4413      	add	r3, r2
 810aad2:	009b      	lsls	r3, r3, #2
 810aad4:	4a08      	ldr	r2, [pc, #32]	; (810aaf8 <xTaskPriorityDisinherit+0x104>)
 810aad6:	441a      	add	r2, r3
 810aad8:	693b      	ldr	r3, [r7, #16]
 810aada:	3304      	adds	r3, #4
 810aadc:	4619      	mov	r1, r3
 810aade:	4610      	mov	r0, r2
 810aae0:	f7fe f95b 	bl	8108d9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810aae4:	2301      	movs	r3, #1
 810aae6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810aae8:	697b      	ldr	r3, [r7, #20]
	}
 810aaea:	4618      	mov	r0, r3
 810aaec:	3718      	adds	r7, #24
 810aaee:	46bd      	mov	sp, r7
 810aaf0:	bd80      	pop	{r7, pc}
 810aaf2:	bf00      	nop
 810aaf4:	100040ac 	.word	0x100040ac
 810aaf8:	100040b0 	.word	0x100040b0
 810aafc:	100041b4 	.word	0x100041b4

0810ab00 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 810ab00:	b580      	push	{r7, lr}
 810ab02:	b086      	sub	sp, #24
 810ab04:	af00      	add	r7, sp, #0
 810ab06:	60f8      	str	r0, [r7, #12]
 810ab08:	60b9      	str	r1, [r7, #8]
 810ab0a:	607a      	str	r2, [r7, #4]
 810ab0c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 810ab0e:	f7fe faf9 	bl	8109104 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 810ab12:	4b26      	ldr	r3, [pc, #152]	; (810abac <xTaskNotifyWait+0xac>)
 810ab14:	681b      	ldr	r3, [r3, #0]
 810ab16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810ab1a:	b2db      	uxtb	r3, r3
 810ab1c:	2b02      	cmp	r3, #2
 810ab1e:	d01a      	beq.n	810ab56 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 810ab20:	4b22      	ldr	r3, [pc, #136]	; (810abac <xTaskNotifyWait+0xac>)
 810ab22:	681b      	ldr	r3, [r3, #0]
 810ab24:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 810ab26:	68fa      	ldr	r2, [r7, #12]
 810ab28:	43d2      	mvns	r2, r2
 810ab2a:	400a      	ands	r2, r1
 810ab2c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 810ab2e:	4b1f      	ldr	r3, [pc, #124]	; (810abac <xTaskNotifyWait+0xac>)
 810ab30:	681b      	ldr	r3, [r3, #0]
 810ab32:	2201      	movs	r2, #1
 810ab34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 810ab38:	683b      	ldr	r3, [r7, #0]
 810ab3a:	2b00      	cmp	r3, #0
 810ab3c:	d00b      	beq.n	810ab56 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810ab3e:	2101      	movs	r1, #1
 810ab40:	6838      	ldr	r0, [r7, #0]
 810ab42:	f000 f913 	bl	810ad6c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 810ab46:	4b1a      	ldr	r3, [pc, #104]	; (810abb0 <xTaskNotifyWait+0xb0>)
 810ab48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ab4c:	601a      	str	r2, [r3, #0]
 810ab4e:	f3bf 8f4f 	dsb	sy
 810ab52:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810ab56:	f7fe fb05 	bl	8109164 <vPortExitCritical>

		taskENTER_CRITICAL();
 810ab5a:	f7fe fad3 	bl	8109104 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 810ab5e:	687b      	ldr	r3, [r7, #4]
 810ab60:	2b00      	cmp	r3, #0
 810ab62:	d004      	beq.n	810ab6e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 810ab64:	4b11      	ldr	r3, [pc, #68]	; (810abac <xTaskNotifyWait+0xac>)
 810ab66:	681b      	ldr	r3, [r3, #0]
 810ab68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810ab6a:	687b      	ldr	r3, [r7, #4]
 810ab6c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 810ab6e:	4b0f      	ldr	r3, [pc, #60]	; (810abac <xTaskNotifyWait+0xac>)
 810ab70:	681b      	ldr	r3, [r3, #0]
 810ab72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810ab76:	b2db      	uxtb	r3, r3
 810ab78:	2b02      	cmp	r3, #2
 810ab7a:	d002      	beq.n	810ab82 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 810ab7c:	2300      	movs	r3, #0
 810ab7e:	617b      	str	r3, [r7, #20]
 810ab80:	e008      	b.n	810ab94 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 810ab82:	4b0a      	ldr	r3, [pc, #40]	; (810abac <xTaskNotifyWait+0xac>)
 810ab84:	681b      	ldr	r3, [r3, #0]
 810ab86:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 810ab88:	68ba      	ldr	r2, [r7, #8]
 810ab8a:	43d2      	mvns	r2, r2
 810ab8c:	400a      	ands	r2, r1
 810ab8e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 810ab90:	2301      	movs	r3, #1
 810ab92:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810ab94:	4b05      	ldr	r3, [pc, #20]	; (810abac <xTaskNotifyWait+0xac>)
 810ab96:	681b      	ldr	r3, [r3, #0]
 810ab98:	2200      	movs	r2, #0
 810ab9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 810ab9e:	f7fe fae1 	bl	8109164 <vPortExitCritical>

		return xReturn;
 810aba2:	697b      	ldr	r3, [r7, #20]
	}
 810aba4:	4618      	mov	r0, r3
 810aba6:	3718      	adds	r7, #24
 810aba8:	46bd      	mov	sp, r7
 810abaa:	bd80      	pop	{r7, pc}
 810abac:	100040ac 	.word	0x100040ac
 810abb0:	e000ed04 	.word	0xe000ed04

0810abb4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 810abb4:	b580      	push	{r7, lr}
 810abb6:	b08a      	sub	sp, #40	; 0x28
 810abb8:	af00      	add	r7, sp, #0
 810abba:	60f8      	str	r0, [r7, #12]
 810abbc:	60b9      	str	r1, [r7, #8]
 810abbe:	603b      	str	r3, [r7, #0]
 810abc0:	4613      	mov	r3, r2
 810abc2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 810abc4:	2301      	movs	r3, #1
 810abc6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 810abc8:	68fb      	ldr	r3, [r7, #12]
 810abca:	2b00      	cmp	r3, #0
 810abcc:	d10a      	bne.n	810abe4 <xTaskGenericNotify+0x30>
	__asm volatile
 810abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 810abd2:	f383 8811 	msr	BASEPRI, r3
 810abd6:	f3bf 8f6f 	isb	sy
 810abda:	f3bf 8f4f 	dsb	sy
 810abde:	61bb      	str	r3, [r7, #24]
}
 810abe0:	bf00      	nop
 810abe2:	e7fe      	b.n	810abe2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 810abe4:	68fb      	ldr	r3, [r7, #12]
 810abe6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 810abe8:	f7fe fa8c 	bl	8109104 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 810abec:	683b      	ldr	r3, [r7, #0]
 810abee:	2b00      	cmp	r3, #0
 810abf0:	d003      	beq.n	810abfa <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 810abf2:	6a3b      	ldr	r3, [r7, #32]
 810abf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810abf6:	683b      	ldr	r3, [r7, #0]
 810abf8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 810abfa:	6a3b      	ldr	r3, [r7, #32]
 810abfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810ac00:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 810ac02:	6a3b      	ldr	r3, [r7, #32]
 810ac04:	2202      	movs	r2, #2
 810ac06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 810ac0a:	79fb      	ldrb	r3, [r7, #7]
 810ac0c:	2b04      	cmp	r3, #4
 810ac0e:	d828      	bhi.n	810ac62 <xTaskGenericNotify+0xae>
 810ac10:	a201      	add	r2, pc, #4	; (adr r2, 810ac18 <xTaskGenericNotify+0x64>)
 810ac12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ac16:	bf00      	nop
 810ac18:	0810ac83 	.word	0x0810ac83
 810ac1c:	0810ac2d 	.word	0x0810ac2d
 810ac20:	0810ac3b 	.word	0x0810ac3b
 810ac24:	0810ac47 	.word	0x0810ac47
 810ac28:	0810ac4f 	.word	0x0810ac4f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 810ac2c:	6a3b      	ldr	r3, [r7, #32]
 810ac2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810ac30:	68bb      	ldr	r3, [r7, #8]
 810ac32:	431a      	orrs	r2, r3
 810ac34:	6a3b      	ldr	r3, [r7, #32]
 810ac36:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 810ac38:	e026      	b.n	810ac88 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 810ac3a:	6a3b      	ldr	r3, [r7, #32]
 810ac3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810ac3e:	1c5a      	adds	r2, r3, #1
 810ac40:	6a3b      	ldr	r3, [r7, #32]
 810ac42:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 810ac44:	e020      	b.n	810ac88 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 810ac46:	6a3b      	ldr	r3, [r7, #32]
 810ac48:	68ba      	ldr	r2, [r7, #8]
 810ac4a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 810ac4c:	e01c      	b.n	810ac88 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 810ac4e:	7ffb      	ldrb	r3, [r7, #31]
 810ac50:	2b02      	cmp	r3, #2
 810ac52:	d003      	beq.n	810ac5c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 810ac54:	6a3b      	ldr	r3, [r7, #32]
 810ac56:	68ba      	ldr	r2, [r7, #8]
 810ac58:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 810ac5a:	e015      	b.n	810ac88 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 810ac5c:	2300      	movs	r3, #0
 810ac5e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 810ac60:	e012      	b.n	810ac88 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 810ac62:	6a3b      	ldr	r3, [r7, #32]
 810ac64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810ac66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810ac6a:	d00c      	beq.n	810ac86 <xTaskGenericNotify+0xd2>
	__asm volatile
 810ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ac70:	f383 8811 	msr	BASEPRI, r3
 810ac74:	f3bf 8f6f 	isb	sy
 810ac78:	f3bf 8f4f 	dsb	sy
 810ac7c:	617b      	str	r3, [r7, #20]
}
 810ac7e:	bf00      	nop
 810ac80:	e7fe      	b.n	810ac80 <xTaskGenericNotify+0xcc>
					break;
 810ac82:	bf00      	nop
 810ac84:	e000      	b.n	810ac88 <xTaskGenericNotify+0xd4>

					break;
 810ac86:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 810ac88:	7ffb      	ldrb	r3, [r7, #31]
 810ac8a:	2b01      	cmp	r3, #1
 810ac8c:	d139      	bne.n	810ad02 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810ac8e:	6a3b      	ldr	r3, [r7, #32]
 810ac90:	3304      	adds	r3, #4
 810ac92:	4618      	mov	r0, r3
 810ac94:	f7fe f8de 	bl	8108e54 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 810ac98:	6a3b      	ldr	r3, [r7, #32]
 810ac9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ac9c:	2201      	movs	r2, #1
 810ac9e:	409a      	lsls	r2, r3
 810aca0:	4b1b      	ldr	r3, [pc, #108]	; (810ad10 <xTaskGenericNotify+0x15c>)
 810aca2:	681b      	ldr	r3, [r3, #0]
 810aca4:	4313      	orrs	r3, r2
 810aca6:	4a1a      	ldr	r2, [pc, #104]	; (810ad10 <xTaskGenericNotify+0x15c>)
 810aca8:	6013      	str	r3, [r2, #0]
 810acaa:	6a3b      	ldr	r3, [r7, #32]
 810acac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810acae:	4613      	mov	r3, r2
 810acb0:	009b      	lsls	r3, r3, #2
 810acb2:	4413      	add	r3, r2
 810acb4:	009b      	lsls	r3, r3, #2
 810acb6:	4a17      	ldr	r2, [pc, #92]	; (810ad14 <xTaskGenericNotify+0x160>)
 810acb8:	441a      	add	r2, r3
 810acba:	6a3b      	ldr	r3, [r7, #32]
 810acbc:	3304      	adds	r3, #4
 810acbe:	4619      	mov	r1, r3
 810acc0:	4610      	mov	r0, r2
 810acc2:	f7fe f86a 	bl	8108d9a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 810acc6:	6a3b      	ldr	r3, [r7, #32]
 810acc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810acca:	2b00      	cmp	r3, #0
 810accc:	d00a      	beq.n	810ace4 <xTaskGenericNotify+0x130>
	__asm volatile
 810acce:	f04f 0350 	mov.w	r3, #80	; 0x50
 810acd2:	f383 8811 	msr	BASEPRI, r3
 810acd6:	f3bf 8f6f 	isb	sy
 810acda:	f3bf 8f4f 	dsb	sy
 810acde:	613b      	str	r3, [r7, #16]
}
 810ace0:	bf00      	nop
 810ace2:	e7fe      	b.n	810ace2 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 810ace4:	6a3b      	ldr	r3, [r7, #32]
 810ace6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ace8:	4b0b      	ldr	r3, [pc, #44]	; (810ad18 <xTaskGenericNotify+0x164>)
 810acea:	681b      	ldr	r3, [r3, #0]
 810acec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810acee:	429a      	cmp	r2, r3
 810acf0:	d907      	bls.n	810ad02 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 810acf2:	4b0a      	ldr	r3, [pc, #40]	; (810ad1c <xTaskGenericNotify+0x168>)
 810acf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810acf8:	601a      	str	r2, [r3, #0]
 810acfa:	f3bf 8f4f 	dsb	sy
 810acfe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810ad02:	f7fe fa2f 	bl	8109164 <vPortExitCritical>

		return xReturn;
 810ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 810ad08:	4618      	mov	r0, r3
 810ad0a:	3728      	adds	r7, #40	; 0x28
 810ad0c:	46bd      	mov	sp, r7
 810ad0e:	bd80      	pop	{r7, pc}
 810ad10:	100041b4 	.word	0x100041b4
 810ad14:	100040b0 	.word	0x100040b0
 810ad18:	100040ac 	.word	0x100040ac
 810ad1c:	e000ed04 	.word	0xe000ed04

0810ad20 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 810ad20:	b580      	push	{r7, lr}
 810ad22:	b084      	sub	sp, #16
 810ad24:	af00      	add	r7, sp, #0
 810ad26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 810ad28:	687b      	ldr	r3, [r7, #4]
 810ad2a:	2b00      	cmp	r3, #0
 810ad2c:	d102      	bne.n	810ad34 <xTaskNotifyStateClear+0x14>
 810ad2e:	4b0e      	ldr	r3, [pc, #56]	; (810ad68 <xTaskNotifyStateClear+0x48>)
 810ad30:	681b      	ldr	r3, [r3, #0]
 810ad32:	e000      	b.n	810ad36 <xTaskNotifyStateClear+0x16>
 810ad34:	687b      	ldr	r3, [r7, #4]
 810ad36:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 810ad38:	f7fe f9e4 	bl	8109104 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 810ad3c:	68bb      	ldr	r3, [r7, #8]
 810ad3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810ad42:	b2db      	uxtb	r3, r3
 810ad44:	2b02      	cmp	r3, #2
 810ad46:	d106      	bne.n	810ad56 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810ad48:	68bb      	ldr	r3, [r7, #8]
 810ad4a:	2200      	movs	r2, #0
 810ad4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				xReturn = pdPASS;
 810ad50:	2301      	movs	r3, #1
 810ad52:	60fb      	str	r3, [r7, #12]
 810ad54:	e001      	b.n	810ad5a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 810ad56:	2300      	movs	r3, #0
 810ad58:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 810ad5a:	f7fe fa03 	bl	8109164 <vPortExitCritical>

		return xReturn;
 810ad5e:	68fb      	ldr	r3, [r7, #12]
	}
 810ad60:	4618      	mov	r0, r3
 810ad62:	3710      	adds	r7, #16
 810ad64:	46bd      	mov	sp, r7
 810ad66:	bd80      	pop	{r7, pc}
 810ad68:	100040ac 	.word	0x100040ac

0810ad6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810ad6c:	b580      	push	{r7, lr}
 810ad6e:	b084      	sub	sp, #16
 810ad70:	af00      	add	r7, sp, #0
 810ad72:	6078      	str	r0, [r7, #4]
 810ad74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810ad76:	4b29      	ldr	r3, [pc, #164]	; (810ae1c <prvAddCurrentTaskToDelayedList+0xb0>)
 810ad78:	681b      	ldr	r3, [r3, #0]
 810ad7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ad7c:	4b28      	ldr	r3, [pc, #160]	; (810ae20 <prvAddCurrentTaskToDelayedList+0xb4>)
 810ad7e:	681b      	ldr	r3, [r3, #0]
 810ad80:	3304      	adds	r3, #4
 810ad82:	4618      	mov	r0, r3
 810ad84:	f7fe f866 	bl	8108e54 <uxListRemove>
 810ad88:	4603      	mov	r3, r0
 810ad8a:	2b00      	cmp	r3, #0
 810ad8c:	d10b      	bne.n	810ada6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 810ad8e:	4b24      	ldr	r3, [pc, #144]	; (810ae20 <prvAddCurrentTaskToDelayedList+0xb4>)
 810ad90:	681b      	ldr	r3, [r3, #0]
 810ad92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ad94:	2201      	movs	r2, #1
 810ad96:	fa02 f303 	lsl.w	r3, r2, r3
 810ad9a:	43da      	mvns	r2, r3
 810ad9c:	4b21      	ldr	r3, [pc, #132]	; (810ae24 <prvAddCurrentTaskToDelayedList+0xb8>)
 810ad9e:	681b      	ldr	r3, [r3, #0]
 810ada0:	4013      	ands	r3, r2
 810ada2:	4a20      	ldr	r2, [pc, #128]	; (810ae24 <prvAddCurrentTaskToDelayedList+0xb8>)
 810ada4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810ada6:	687b      	ldr	r3, [r7, #4]
 810ada8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810adac:	d10a      	bne.n	810adc4 <prvAddCurrentTaskToDelayedList+0x58>
 810adae:	683b      	ldr	r3, [r7, #0]
 810adb0:	2b00      	cmp	r3, #0
 810adb2:	d007      	beq.n	810adc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810adb4:	4b1a      	ldr	r3, [pc, #104]	; (810ae20 <prvAddCurrentTaskToDelayedList+0xb4>)
 810adb6:	681b      	ldr	r3, [r3, #0]
 810adb8:	3304      	adds	r3, #4
 810adba:	4619      	mov	r1, r3
 810adbc:	481a      	ldr	r0, [pc, #104]	; (810ae28 <prvAddCurrentTaskToDelayedList+0xbc>)
 810adbe:	f7fd ffec 	bl	8108d9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810adc2:	e026      	b.n	810ae12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810adc4:	68fa      	ldr	r2, [r7, #12]
 810adc6:	687b      	ldr	r3, [r7, #4]
 810adc8:	4413      	add	r3, r2
 810adca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810adcc:	4b14      	ldr	r3, [pc, #80]	; (810ae20 <prvAddCurrentTaskToDelayedList+0xb4>)
 810adce:	681b      	ldr	r3, [r3, #0]
 810add0:	68ba      	ldr	r2, [r7, #8]
 810add2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810add4:	68ba      	ldr	r2, [r7, #8]
 810add6:	68fb      	ldr	r3, [r7, #12]
 810add8:	429a      	cmp	r2, r3
 810adda:	d209      	bcs.n	810adf0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810addc:	4b13      	ldr	r3, [pc, #76]	; (810ae2c <prvAddCurrentTaskToDelayedList+0xc0>)
 810adde:	681a      	ldr	r2, [r3, #0]
 810ade0:	4b0f      	ldr	r3, [pc, #60]	; (810ae20 <prvAddCurrentTaskToDelayedList+0xb4>)
 810ade2:	681b      	ldr	r3, [r3, #0]
 810ade4:	3304      	adds	r3, #4
 810ade6:	4619      	mov	r1, r3
 810ade8:	4610      	mov	r0, r2
 810adea:	f7fd fffa 	bl	8108de2 <vListInsert>
}
 810adee:	e010      	b.n	810ae12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810adf0:	4b0f      	ldr	r3, [pc, #60]	; (810ae30 <prvAddCurrentTaskToDelayedList+0xc4>)
 810adf2:	681a      	ldr	r2, [r3, #0]
 810adf4:	4b0a      	ldr	r3, [pc, #40]	; (810ae20 <prvAddCurrentTaskToDelayedList+0xb4>)
 810adf6:	681b      	ldr	r3, [r3, #0]
 810adf8:	3304      	adds	r3, #4
 810adfa:	4619      	mov	r1, r3
 810adfc:	4610      	mov	r0, r2
 810adfe:	f7fd fff0 	bl	8108de2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810ae02:	4b0c      	ldr	r3, [pc, #48]	; (810ae34 <prvAddCurrentTaskToDelayedList+0xc8>)
 810ae04:	681b      	ldr	r3, [r3, #0]
 810ae06:	68ba      	ldr	r2, [r7, #8]
 810ae08:	429a      	cmp	r2, r3
 810ae0a:	d202      	bcs.n	810ae12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 810ae0c:	4a09      	ldr	r2, [pc, #36]	; (810ae34 <prvAddCurrentTaskToDelayedList+0xc8>)
 810ae0e:	68bb      	ldr	r3, [r7, #8]
 810ae10:	6013      	str	r3, [r2, #0]
}
 810ae12:	bf00      	nop
 810ae14:	3710      	adds	r7, #16
 810ae16:	46bd      	mov	sp, r7
 810ae18:	bd80      	pop	{r7, pc}
 810ae1a:	bf00      	nop
 810ae1c:	100041b0 	.word	0x100041b0
 810ae20:	100040ac 	.word	0x100040ac
 810ae24:	100041b4 	.word	0x100041b4
 810ae28:	10004198 	.word	0x10004198
 810ae2c:	10004168 	.word	0x10004168
 810ae30:	10004164 	.word	0x10004164
 810ae34:	100041cc 	.word	0x100041cc

0810ae38 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:



osSemaphoreDef(console_sem);

Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 810ae38:	b580      	push	{r7, lr}
 810ae3a:	b082      	sub	sp, #8
 810ae3c:	af00      	add	r7, sp, #0
 810ae3e:	6078      	str	r0, [r7, #4]
 810ae40:	6039      	str	r1, [r7, #0]
 810ae42:	687b      	ldr	r3, [r7, #4]
 810ae44:	683a      	ldr	r2, [r7, #0]
 810ae46:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 810ae48:	687b      	ldr	r3, [r7, #4]
 810ae4a:	683a      	ldr	r2, [r7, #0]
 810ae4c:	601a      	str	r2, [r3, #0]
	console_semaphore = osSemaphoreCreate(osSemaphore(console_sem), 3);
 810ae4e:	2103      	movs	r1, #3
 810ae50:	4805      	ldr	r0, [pc, #20]	; (810ae68 <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x30>)
 810ae52:	f7fd fd69 	bl	8108928 <osSemaphoreCreate>
 810ae56:	4602      	mov	r2, r0
 810ae58:	687b      	ldr	r3, [r7, #4]
 810ae5a:	605a      	str	r2, [r3, #4]
}
 810ae5c:	687b      	ldr	r3, [r7, #4]
 810ae5e:	4618      	mov	r0, r3
 810ae60:	3708      	adds	r7, #8
 810ae62:	46bd      	mov	sp, r7
 810ae64:	bd80      	pop	{r7, pc}
 810ae66:	bf00      	nop
 810ae68:	08112ca4 	.word	0x08112ca4

0810ae6c <_ZN7Console8transmitEPhm>:

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
 810ae6c:	b580      	push	{r7, lr}
 810ae6e:	b084      	sub	sp, #16
 810ae70:	af00      	add	r7, sp, #0
 810ae72:	60f8      	str	r0, [r7, #12]
 810ae74:	60b9      	str	r1, [r7, #8]
 810ae76:	607a      	str	r2, [r7, #4]
	while(HAL_HSEM_IsSemTaken(HARDWARE_SEMAPHORE));
 810ae78:	2002      	movs	r0, #2
 810ae7a:	f7fa f847 	bl	8104f0c <HAL_HSEM_IsSemTaken>
 810ae7e:	4603      	mov	r3, r0
 810ae80:	2b00      	cmp	r3, #0
 810ae82:	bf14      	ite	ne
 810ae84:	2301      	movne	r3, #1
 810ae86:	2300      	moveq	r3, #0
 810ae88:	b2db      	uxtb	r3, r3
 810ae8a:	2b00      	cmp	r3, #0
 810ae8c:	d000      	beq.n	810ae90 <_ZN7Console8transmitEPhm+0x24>
 810ae8e:	e7f3      	b.n	810ae78 <_ZN7Console8transmitEPhm+0xc>

	HAL_HSEM_Take(HARDWARE_SEMAPHORE, 2);
 810ae90:	2102      	movs	r1, #2
 810ae92:	2002      	movs	r0, #2
 810ae94:	f7fa f816 	bl	8104ec4 <HAL_HSEM_Take>
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 810ae98:	68fb      	ldr	r3, [r7, #12]
 810ae9a:	6818      	ldr	r0, [r3, #0]
 810ae9c:	687b      	ldr	r3, [r7, #4]
 810ae9e:	b29a      	uxth	r2, r3
 810aea0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 810aea4:	68b9      	ldr	r1, [r7, #8]
 810aea6:	f7fc fa0f 	bl	81072c8 <HAL_UART_Transmit>
	HAL_HSEM_Release(HARDWARE_SEMAPHORE, 2);
 810aeaa:	2102      	movs	r1, #2
 810aeac:	2002      	movs	r0, #2
 810aeae:	f7fa f843 	bl	8104f38 <HAL_HSEM_Release>
}
 810aeb2:	bf00      	nop
 810aeb4:	3710      	adds	r7, #16
 810aeb6:	46bd      	mov	sp, r7
 810aeb8:	bd80      	pop	{r7, pc}

0810aeba <_ZN7Console5printEPKc>:

void Console::print(const char* buffer) {
 810aeba:	b580      	push	{r7, lr}
 810aebc:	b082      	sub	sp, #8
 810aebe:	af00      	add	r7, sp, #0
 810aec0:	6078      	str	r0, [r7, #4]
 810aec2:	6039      	str	r1, [r7, #0]
	transmit((uint8_t*) buffer, strlen(buffer));
 810aec4:	6838      	ldr	r0, [r7, #0]
 810aec6:	f7f5 fa15 	bl	81002f4 <strlen>
 810aeca:	4603      	mov	r3, r0
 810aecc:	461a      	mov	r2, r3
 810aece:	6839      	ldr	r1, [r7, #0]
 810aed0:	6878      	ldr	r0, [r7, #4]
 810aed2:	f7ff ffcb 	bl	810ae6c <_ZN7Console8transmitEPhm>
}
 810aed6:	bf00      	nop
 810aed8:	3708      	adds	r7, #8
 810aeda:	46bd      	mov	sp, r7
 810aedc:	bd80      	pop	{r7, pc}

0810aede <_ZN7Console6printfEPKcz>:

void Console::printf(const char *format, ...) {
 810aede:	b40e      	push	{r1, r2, r3}
 810aee0:	b580      	push	{r7, lr}
 810aee2:	b085      	sub	sp, #20
 810aee4:	af00      	add	r7, sp, #0
 810aee6:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 810aee8:	f107 0320 	add.w	r3, r7, #32
 810aeec:	60fb      	str	r3, [r7, #12]

	if(vsprintf(buffer, format, args) > 0) {
 810aeee:	687b      	ldr	r3, [r7, #4]
 810aef0:	3308      	adds	r3, #8
 810aef2:	68fa      	ldr	r2, [r7, #12]
 810aef4:	69f9      	ldr	r1, [r7, #28]
 810aef6:	4618      	mov	r0, r3
 810aef8:	f005 f906 	bl	8110108 <vsiprintf>
 810aefc:	4603      	mov	r3, r0
 810aefe:	2b00      	cmp	r3, #0
 810af00:	bfcc      	ite	gt
 810af02:	2301      	movgt	r3, #1
 810af04:	2300      	movle	r3, #0
 810af06:	b2db      	uxtb	r3, r3
 810af08:	2b00      	cmp	r3, #0
 810af0a:	d005      	beq.n	810af18 <_ZN7Console6printfEPKcz+0x3a>
		print(buffer);
 810af0c:	687b      	ldr	r3, [r7, #4]
 810af0e:	3308      	adds	r3, #8
 810af10:	4619      	mov	r1, r3
 810af12:	6878      	ldr	r0, [r7, #4]
 810af14:	f7ff ffd1 	bl	810aeba <_ZN7Console5printEPKc>
	}

	va_end(args);
}
 810af18:	bf00      	nop
 810af1a:	3714      	adds	r7, #20
 810af1c:	46bd      	mov	sp, r7
 810af1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810af22:	b003      	add	sp, #12
 810af24:	4770      	bx	lr
	...

0810af28 <_Z41__static_initialization_and_destruction_0ii>:


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
 810af28:	b580      	push	{r7, lr}
 810af2a:	b082      	sub	sp, #8
 810af2c:	af00      	add	r7, sp, #0
 810af2e:	6078      	str	r0, [r7, #4]
 810af30:	6039      	str	r1, [r7, #0]
 810af32:	687b      	ldr	r3, [r7, #4]
 810af34:	2b01      	cmp	r3, #1
 810af36:	d108      	bne.n	810af4a <_Z41__static_initialization_and_destruction_0ii+0x22>
 810af38:	683b      	ldr	r3, [r7, #0]
 810af3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810af3e:	4293      	cmp	r3, r2
 810af40:	d103      	bne.n	810af4a <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 810af42:	4904      	ldr	r1, [pc, #16]	; (810af54 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 810af44:	4804      	ldr	r0, [pc, #16]	; (810af58 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 810af46:	f7ff ff77 	bl	810ae38 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Terminal terminal;
 810af4a:	bf00      	nop
 810af4c:	3708      	adds	r7, #8
 810af4e:	46bd      	mov	sp, r7
 810af50:	bd80      	pop	{r7, pc}
 810af52:	bf00      	nop
 810af54:	10009df0 	.word	0x10009df0
 810af58:	100041d8 	.word	0x100041d8

0810af5c <_GLOBAL__sub_I_console>:
 810af5c:	b580      	push	{r7, lr}
 810af5e:	af00      	add	r7, sp, #0
 810af60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810af64:	2001      	movs	r0, #1
 810af66:	f7ff ffdf 	bl	810af28 <_Z41__static_initialization_and_destruction_0ii>
 810af6a:	bd80      	pop	{r7, pc}

0810af6c <_ZN8Profiler6enableEv>:
			profiler->depth_to_display--;
		}
	}
}

void Profiler::enable() {
 810af6c:	b480      	push	{r7}
 810af6e:	b085      	sub	sp, #20
 810af70:	af00      	add	r7, sp, #0
 810af72:	6078      	str	r0, [r7, #4]
	profiling_requested = true;
 810af74:	687b      	ldr	r3, [r7, #4]
 810af76:	2201      	movs	r2, #1
 810af78:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340

	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 810af7c:	2300      	movs	r3, #0
 810af7e:	73fb      	strb	r3, [r7, #15]
 810af80:	7bfb      	ldrb	r3, [r7, #15]
 810af82:	2b0f      	cmp	r3, #15
 810af84:	d80c      	bhi.n	810afa0 <_ZN8Profiler6enableEv+0x34>
		profilers[i].depth_to_display = -1;
 810af86:	7bfb      	ldrb	r3, [r7, #15]
 810af88:	687a      	ldr	r2, [r7, #4]
 810af8a:	2134      	movs	r1, #52	; 0x34
 810af8c:	fb01 f303 	mul.w	r3, r1, r3
 810af90:	4413      	add	r3, r2
 810af92:	3308      	adds	r3, #8
 810af94:	22ff      	movs	r2, #255	; 0xff
 810af96:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 810af98:	7bfb      	ldrb	r3, [r7, #15]
 810af9a:	3301      	adds	r3, #1
 810af9c:	73fb      	strb	r3, [r7, #15]
 810af9e:	e7ef      	b.n	810af80 <_ZN8Profiler6enableEv+0x14>
	}
}
 810afa0:	bf00      	nop
 810afa2:	3714      	adds	r7, #20
 810afa4:	46bd      	mov	sp, r7
 810afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810afaa:	4770      	bx	lr

0810afac <_ZN8Profiler7disableEv>:

void Profiler::disable() {
 810afac:	b480      	push	{r7}
 810afae:	b083      	sub	sp, #12
 810afb0:	af00      	add	r7, sp, #0
 810afb2:	6078      	str	r0, [r7, #4]
	profiling = false;
 810afb4:	687b      	ldr	r3, [r7, #4]
 810afb6:	2200      	movs	r2, #0
 810afb8:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
}
 810afbc:	bf00      	nop
 810afbe:	370c      	adds	r7, #12
 810afc0:	46bd      	mov	sp, r7
 810afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810afc6:	4770      	bx	lr

0810afc8 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>:


#include "Debug.h"


Shell::Shell(UART_HandleTypeDef* uart, Terminal* terminal) : Thread("Shell"), uart(uart), terminal(terminal) {
 810afc8:	b580      	push	{r7, lr}
 810afca:	b084      	sub	sp, #16
 810afcc:	af00      	add	r7, sp, #0
 810afce:	60f8      	str	r0, [r7, #12]
 810afd0:	60b9      	str	r1, [r7, #8]
 810afd2:	607a      	str	r2, [r7, #4]
 810afd4:	68fb      	ldr	r3, [r7, #12]
 810afd6:	4910      	ldr	r1, [pc, #64]	; (810b018 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x50>)
 810afd8:	4618      	mov	r0, r3
 810afda:	f003 fe16 	bl	810ec0a <_ZN6ThreadC1EPKc>
 810afde:	4a0f      	ldr	r2, [pc, #60]	; (810b01c <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x54>)
 810afe0:	68fb      	ldr	r3, [r7, #12]
 810afe2:	601a      	str	r2, [r3, #0]
 810afe4:	68fb      	ldr	r3, [r7, #12]
 810afe6:	68ba      	ldr	r2, [r7, #8]
 810afe8:	60da      	str	r2, [r3, #12]
 810afea:	68fb      	ldr	r3, [r7, #12]
 810afec:	687a      	ldr	r2, [r7, #4]
 810afee:	611a      	str	r2, [r3, #16]
 810aff0:	68fb      	ldr	r3, [r7, #12]
 810aff2:	2200      	movs	r2, #0
 810aff4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 810aff8:	68fb      	ldr	r3, [r7, #12]
 810affa:	2200      	movs	r2, #0
 810affc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	cmd.components[0].component = command_buffer; // Bind command structure to buffer
 810b000:	68fb      	ldr	r3, [r7, #12]
 810b002:	f503 7205 	add.w	r2, r3, #532	; 0x214
 810b006:	68fb      	ldr	r3, [r7, #12]
 810b008:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
}
 810b00c:	68fb      	ldr	r3, [r7, #12]
 810b00e:	4618      	mov	r0, r3
 810b010:	3710      	adds	r7, #16
 810b012:	46bd      	mov	sp, r7
 810b014:	bd80      	pop	{r7, pc}
 810b016:	bf00      	nop
 810b018:	081125a0 	.word	0x081125a0
 810b01c:	08112cb4 	.word	0x08112cb4

0810b020 <_ZN5Shell4initEv>:

void Shell::init() {
 810b020:	b580      	push	{r7, lr}
 810b022:	b082      	sub	sp, #8
 810b024:	af00      	add	r7, sp, #0
 810b026:	6078      	str	r0, [r7, #4]
	console.printf("\x1b[2J\x1b[H");
 810b028:	490a      	ldr	r1, [pc, #40]	; (810b054 <_ZN5Shell4initEv+0x34>)
 810b02a:	480b      	ldr	r0, [pc, #44]	; (810b058 <_ZN5Shell4initEv+0x38>)
 810b02c:	f7ff ff57 	bl	810aede <_ZN7Console6printfEPKcz>
	console.printf("----- EPFL Xplore Avionics Shell -----\r\n");
 810b030:	490a      	ldr	r1, [pc, #40]	; (810b05c <_ZN5Shell4initEv+0x3c>)
 810b032:	4809      	ldr	r0, [pc, #36]	; (810b058 <_ZN5Shell4initEv+0x38>)
 810b034:	f7ff ff53 	bl	810aede <_ZN7Console6printfEPKcz>
	HAL_UART_Receive_DMA(uart, dma_buffer, CMD_BUFFER_SIZE);
 810b038:	687b      	ldr	r3, [r7, #4]
 810b03a:	68d8      	ldr	r0, [r3, #12]
 810b03c:	687b      	ldr	r3, [r7, #4]
 810b03e:	3314      	adds	r3, #20
 810b040:	f44f 7200 	mov.w	r2, #512	; 0x200
 810b044:	4619      	mov	r1, r3
 810b046:	f7fc f9d5 	bl	81073f4 <HAL_UART_Receive_DMA>
}
 810b04a:	bf00      	nop
 810b04c:	3708      	adds	r7, #8
 810b04e:	46bd      	mov	sp, r7
 810b050:	bd80      	pop	{r7, pc}
 810b052:	bf00      	nop
 810b054:	081125a8 	.word	0x081125a8
 810b058:	100041d8 	.word	0x100041d8
 810b05c:	081125b0 	.word	0x081125b0

0810b060 <_ZN5Shell4loopEv>:

void Shell::loop() {
 810b060:	b580      	push	{r7, lr}
 810b062:	b082      	sub	sp, #8
 810b064:	af00      	add	r7, sp, #0
 810b066:	6078      	str	r0, [r7, #4]
	endDmaStreamIndex = CMD_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 810b068:	687b      	ldr	r3, [r7, #4]
 810b06a:	68db      	ldr	r3, [r3, #12]
 810b06c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b06e:	681b      	ldr	r3, [r3, #0]
 810b070:	4a4e      	ldr	r2, [pc, #312]	; (810b1ac <_ZN5Shell4loopEv+0x14c>)
 810b072:	4293      	cmp	r3, r2
 810b074:	d068      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b076:	687b      	ldr	r3, [r7, #4]
 810b078:	68db      	ldr	r3, [r3, #12]
 810b07a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b07c:	681b      	ldr	r3, [r3, #0]
 810b07e:	4a4c      	ldr	r2, [pc, #304]	; (810b1b0 <_ZN5Shell4loopEv+0x150>)
 810b080:	4293      	cmp	r3, r2
 810b082:	d061      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b084:	687b      	ldr	r3, [r7, #4]
 810b086:	68db      	ldr	r3, [r3, #12]
 810b088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b08a:	681b      	ldr	r3, [r3, #0]
 810b08c:	4a49      	ldr	r2, [pc, #292]	; (810b1b4 <_ZN5Shell4loopEv+0x154>)
 810b08e:	4293      	cmp	r3, r2
 810b090:	d05a      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b092:	687b      	ldr	r3, [r7, #4]
 810b094:	68db      	ldr	r3, [r3, #12]
 810b096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b098:	681b      	ldr	r3, [r3, #0]
 810b09a:	4a47      	ldr	r2, [pc, #284]	; (810b1b8 <_ZN5Shell4loopEv+0x158>)
 810b09c:	4293      	cmp	r3, r2
 810b09e:	d053      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b0a0:	687b      	ldr	r3, [r7, #4]
 810b0a2:	68db      	ldr	r3, [r3, #12]
 810b0a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b0a6:	681b      	ldr	r3, [r3, #0]
 810b0a8:	4a44      	ldr	r2, [pc, #272]	; (810b1bc <_ZN5Shell4loopEv+0x15c>)
 810b0aa:	4293      	cmp	r3, r2
 810b0ac:	d04c      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b0ae:	687b      	ldr	r3, [r7, #4]
 810b0b0:	68db      	ldr	r3, [r3, #12]
 810b0b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b0b4:	681b      	ldr	r3, [r3, #0]
 810b0b6:	4a42      	ldr	r2, [pc, #264]	; (810b1c0 <_ZN5Shell4loopEv+0x160>)
 810b0b8:	4293      	cmp	r3, r2
 810b0ba:	d045      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b0bc:	687b      	ldr	r3, [r7, #4]
 810b0be:	68db      	ldr	r3, [r3, #12]
 810b0c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b0c2:	681b      	ldr	r3, [r3, #0]
 810b0c4:	4a3f      	ldr	r2, [pc, #252]	; (810b1c4 <_ZN5Shell4loopEv+0x164>)
 810b0c6:	4293      	cmp	r3, r2
 810b0c8:	d03e      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b0ca:	687b      	ldr	r3, [r7, #4]
 810b0cc:	68db      	ldr	r3, [r3, #12]
 810b0ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b0d0:	681b      	ldr	r3, [r3, #0]
 810b0d2:	4a3d      	ldr	r2, [pc, #244]	; (810b1c8 <_ZN5Shell4loopEv+0x168>)
 810b0d4:	4293      	cmp	r3, r2
 810b0d6:	d037      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b0d8:	687b      	ldr	r3, [r7, #4]
 810b0da:	68db      	ldr	r3, [r3, #12]
 810b0dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b0de:	681b      	ldr	r3, [r3, #0]
 810b0e0:	4a3a      	ldr	r2, [pc, #232]	; (810b1cc <_ZN5Shell4loopEv+0x16c>)
 810b0e2:	4293      	cmp	r3, r2
 810b0e4:	d030      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b0e6:	687b      	ldr	r3, [r7, #4]
 810b0e8:	68db      	ldr	r3, [r3, #12]
 810b0ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b0ec:	681b      	ldr	r3, [r3, #0]
 810b0ee:	4a38      	ldr	r2, [pc, #224]	; (810b1d0 <_ZN5Shell4loopEv+0x170>)
 810b0f0:	4293      	cmp	r3, r2
 810b0f2:	d029      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b0f4:	687b      	ldr	r3, [r7, #4]
 810b0f6:	68db      	ldr	r3, [r3, #12]
 810b0f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b0fa:	681b      	ldr	r3, [r3, #0]
 810b0fc:	4a35      	ldr	r2, [pc, #212]	; (810b1d4 <_ZN5Shell4loopEv+0x174>)
 810b0fe:	4293      	cmp	r3, r2
 810b100:	d022      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b102:	687b      	ldr	r3, [r7, #4]
 810b104:	68db      	ldr	r3, [r3, #12]
 810b106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b108:	681b      	ldr	r3, [r3, #0]
 810b10a:	4a33      	ldr	r2, [pc, #204]	; (810b1d8 <_ZN5Shell4loopEv+0x178>)
 810b10c:	4293      	cmp	r3, r2
 810b10e:	d01b      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b110:	687b      	ldr	r3, [r7, #4]
 810b112:	68db      	ldr	r3, [r3, #12]
 810b114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b116:	681b      	ldr	r3, [r3, #0]
 810b118:	4a30      	ldr	r2, [pc, #192]	; (810b1dc <_ZN5Shell4loopEv+0x17c>)
 810b11a:	4293      	cmp	r3, r2
 810b11c:	d014      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b11e:	687b      	ldr	r3, [r7, #4]
 810b120:	68db      	ldr	r3, [r3, #12]
 810b122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b124:	681b      	ldr	r3, [r3, #0]
 810b126:	4a2e      	ldr	r2, [pc, #184]	; (810b1e0 <_ZN5Shell4loopEv+0x180>)
 810b128:	4293      	cmp	r3, r2
 810b12a:	d00d      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b12c:	687b      	ldr	r3, [r7, #4]
 810b12e:	68db      	ldr	r3, [r3, #12]
 810b130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b132:	681b      	ldr	r3, [r3, #0]
 810b134:	4a2b      	ldr	r2, [pc, #172]	; (810b1e4 <_ZN5Shell4loopEv+0x184>)
 810b136:	4293      	cmp	r3, r2
 810b138:	d006      	beq.n	810b148 <_ZN5Shell4loopEv+0xe8>
 810b13a:	687b      	ldr	r3, [r7, #4]
 810b13c:	68db      	ldr	r3, [r3, #12]
 810b13e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b140:	681b      	ldr	r3, [r3, #0]
 810b142:	4a29      	ldr	r2, [pc, #164]	; (810b1e8 <_ZN5Shell4loopEv+0x188>)
 810b144:	4293      	cmp	r3, r2
 810b146:	d107      	bne.n	810b158 <_ZN5Shell4loopEv+0xf8>
 810b148:	687b      	ldr	r3, [r7, #4]
 810b14a:	68db      	ldr	r3, [r3, #12]
 810b14c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b14e:	681b      	ldr	r3, [r3, #0]
 810b150:	685b      	ldr	r3, [r3, #4]
 810b152:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810b156:	e006      	b.n	810b166 <_ZN5Shell4loopEv+0x106>
 810b158:	687b      	ldr	r3, [r7, #4]
 810b15a:	68db      	ldr	r3, [r3, #12]
 810b15c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b15e:	681b      	ldr	r3, [r3, #0]
 810b160:	685b      	ldr	r3, [r3, #4]
 810b162:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 810b166:	687a      	ldr	r2, [r7, #4]
 810b168:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418

	while(lastDmaStreamIndex != endDmaStreamIndex) {
 810b16c:	687b      	ldr	r3, [r7, #4]
 810b16e:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 810b172:	687b      	ldr	r3, [r7, #4]
 810b174:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 810b178:	429a      	cmp	r2, r3
 810b17a:	d013      	beq.n	810b1a4 <_ZN5Shell4loopEv+0x144>
		receiveByte(dma_buffer[lastDmaStreamIndex]);
 810b17c:	687b      	ldr	r3, [r7, #4]
 810b17e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 810b182:	687a      	ldr	r2, [r7, #4]
 810b184:	4413      	add	r3, r2
 810b186:	7d1b      	ldrb	r3, [r3, #20]
 810b188:	4619      	mov	r1, r3
 810b18a:	6878      	ldr	r0, [r7, #4]
 810b18c:	f000 f82e 	bl	810b1ec <_ZN5Shell11receiveByteEc>
		lastDmaStreamIndex = (lastDmaStreamIndex + 1) % CMD_BUFFER_SIZE;
 810b190:	687b      	ldr	r3, [r7, #4]
 810b192:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 810b196:	3301      	adds	r3, #1
 810b198:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810b19c:	687b      	ldr	r3, [r7, #4]
 810b19e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	while(lastDmaStreamIndex != endDmaStreamIndex) {
 810b1a2:	e7e3      	b.n	810b16c <_ZN5Shell4loopEv+0x10c>
	}
}
 810b1a4:	bf00      	nop
 810b1a6:	3708      	adds	r7, #8
 810b1a8:	46bd      	mov	sp, r7
 810b1aa:	bd80      	pop	{r7, pc}
 810b1ac:	40020010 	.word	0x40020010
 810b1b0:	40020028 	.word	0x40020028
 810b1b4:	40020040 	.word	0x40020040
 810b1b8:	40020058 	.word	0x40020058
 810b1bc:	40020070 	.word	0x40020070
 810b1c0:	40020088 	.word	0x40020088
 810b1c4:	400200a0 	.word	0x400200a0
 810b1c8:	400200b8 	.word	0x400200b8
 810b1cc:	40020410 	.word	0x40020410
 810b1d0:	40020428 	.word	0x40020428
 810b1d4:	40020440 	.word	0x40020440
 810b1d8:	40020458 	.word	0x40020458
 810b1dc:	40020470 	.word	0x40020470
 810b1e0:	40020488 	.word	0x40020488
 810b1e4:	400204a0 	.word	0x400204a0
 810b1e8:	400204b8 	.word	0x400204b8

0810b1ec <_ZN5Shell11receiveByteEc>:


void Shell::receiveByte(char cbuf) {
 810b1ec:	b580      	push	{r7, lr}
 810b1ee:	b084      	sub	sp, #16
 810b1f0:	af00      	add	r7, sp, #0
 810b1f2:	6078      	str	r0, [r7, #4]
 810b1f4:	460b      	mov	r3, r1
 810b1f6:	70fb      	strb	r3, [r7, #3]
	if(cbuf == '\0') {
 810b1f8:	78fb      	ldrb	r3, [r7, #3]
 810b1fa:	2b00      	cmp	r3, #0
 810b1fc:	f000 809d 	beq.w	810b33a <_ZN5Shell11receiveByteEc+0x14e>
		return;
	}

	if(cbuf != '\n' && cbuf != '\r' && command_index < CMD_BUFFER_SIZE) {
 810b200:	78fb      	ldrb	r3, [r7, #3]
 810b202:	2b0a      	cmp	r3, #10
 810b204:	d04f      	beq.n	810b2a6 <_ZN5Shell11receiveByteEc+0xba>
 810b206:	78fb      	ldrb	r3, [r7, #3]
 810b208:	2b0d      	cmp	r3, #13
 810b20a:	d04c      	beq.n	810b2a6 <_ZN5Shell11receiveByteEc+0xba>
		command_buffer[command_index++] = cbuf;
 810b20c:	687b      	ldr	r3, [r7, #4]
 810b20e:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810b212:	1c5a      	adds	r2, r3, #1
 810b214:	b2d1      	uxtb	r1, r2
 810b216:	687a      	ldr	r2, [r7, #4]
 810b218:	f882 141c 	strb.w	r1, [r2, #1052]	; 0x41c
 810b21c:	461a      	mov	r2, r3
 810b21e:	687b      	ldr	r3, [r7, #4]
 810b220:	4413      	add	r3, r2
 810b222:	78fa      	ldrb	r2, [r7, #3]
 810b224:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214

		if(cbuf == ' ') {
 810b228:	78fb      	ldrb	r3, [r7, #3]
 810b22a:	2b20      	cmp	r3, #32
 810b22c:	f040 8087 	bne.w	810b33e <_ZN5Shell11receiveByteEc+0x152>
			uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 810b230:	687b      	ldr	r3, [r7, #4]
 810b232:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b236:	461a      	mov	r2, r3
 810b238:	687b      	ldr	r3, [r7, #4]
 810b23a:	3284      	adds	r2, #132	; 0x84
 810b23c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 810b240:	687b      	ldr	r3, [r7, #4]
 810b242:	f503 7305 	add.w	r3, r3, #532	; 0x214
 810b246:	1ad3      	subs	r3, r2, r3
 810b248:	73fb      	strb	r3, [r7, #15]

			cmd.components[cmd.num_components].length = command_index - start_index - 1;
 810b24a:	687b      	ldr	r3, [r7, #4]
 810b24c:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 810b250:	7bfb      	ldrb	r3, [r7, #15]
 810b252:	1ad3      	subs	r3, r2, r3
 810b254:	b2db      	uxtb	r3, r3
 810b256:	687a      	ldr	r2, [r7, #4]
 810b258:	f892 2460 	ldrb.w	r2, [r2, #1120]	; 0x460
 810b25c:	4610      	mov	r0, r2
 810b25e:	3b01      	subs	r3, #1
 810b260:	b2d9      	uxtb	r1, r3
 810b262:	687a      	ldr	r2, [r7, #4]
 810b264:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810b268:	00db      	lsls	r3, r3, #3
 810b26a:	4413      	add	r3, r2
 810b26c:	460a      	mov	r2, r1
 810b26e:	711a      	strb	r2, [r3, #4]
			cmd.num_components++;
 810b270:	687b      	ldr	r3, [r7, #4]
 810b272:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b276:	3301      	adds	r3, #1
 810b278:	b2da      	uxtb	r2, r3
 810b27a:	687b      	ldr	r3, [r7, #4]
 810b27c:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
			cmd.components[cmd.num_components].component = &command_buffer[command_index];
 810b280:	687b      	ldr	r3, [r7, #4]
 810b282:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810b286:	461a      	mov	r2, r3
 810b288:	687b      	ldr	r3, [r7, #4]
 810b28a:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b28e:	4618      	mov	r0, r3
 810b290:	f502 7304 	add.w	r3, r2, #528	; 0x210
 810b294:	687a      	ldr	r2, [r7, #4]
 810b296:	4413      	add	r3, r2
 810b298:	1d19      	adds	r1, r3, #4
 810b29a:	687b      	ldr	r3, [r7, #4]
 810b29c:	f100 0284 	add.w	r2, r0, #132	; 0x84
 810b2a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		}
 810b2a4:	e04b      	b.n	810b33e <_ZN5Shell11receiveByteEc+0x152>
	} else {
		uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 810b2a6:	687b      	ldr	r3, [r7, #4]
 810b2a8:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b2ac:	461a      	mov	r2, r3
 810b2ae:	687b      	ldr	r3, [r7, #4]
 810b2b0:	3284      	adds	r2, #132	; 0x84
 810b2b2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 810b2b6:	687b      	ldr	r3, [r7, #4]
 810b2b8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 810b2bc:	1ad3      	subs	r3, r2, r3
 810b2be:	73bb      	strb	r3, [r7, #14]
		cmd.components[cmd.num_components].length = command_index - start_index;
 810b2c0:	687b      	ldr	r3, [r7, #4]
 810b2c2:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 810b2c6:	687b      	ldr	r3, [r7, #4]
 810b2c8:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b2cc:	4618      	mov	r0, r3
 810b2ce:	7bbb      	ldrb	r3, [r7, #14]
 810b2d0:	1ad3      	subs	r3, r2, r3
 810b2d2:	b2d9      	uxtb	r1, r3
 810b2d4:	687a      	ldr	r2, [r7, #4]
 810b2d6:	f100 0384 	add.w	r3, r0, #132	; 0x84
 810b2da:	00db      	lsls	r3, r3, #3
 810b2dc:	4413      	add	r3, r2
 810b2de:	460a      	mov	r2, r1
 810b2e0:	711a      	strb	r2, [r3, #4]

		if(command_index - start_index > 0) {
 810b2e2:	687b      	ldr	r3, [r7, #4]
 810b2e4:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 810b2e8:	461a      	mov	r2, r3
 810b2ea:	7bbb      	ldrb	r3, [r7, #14]
 810b2ec:	1ad3      	subs	r3, r2, r3
 810b2ee:	2b00      	cmp	r3, #0
 810b2f0:	dd07      	ble.n	810b302 <_ZN5Shell11receiveByteEc+0x116>
			cmd.num_components++;
 810b2f2:	687b      	ldr	r3, [r7, #4]
 810b2f4:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 810b2f8:	3301      	adds	r3, #1
 810b2fa:	b2da      	uxtb	r2, r3
 810b2fc:	687b      	ldr	r3, [r7, #4]
 810b2fe:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
		}

		terminal->execute(&cmd, &console);
 810b302:	687b      	ldr	r3, [r7, #4]
 810b304:	6918      	ldr	r0, [r3, #16]
 810b306:	687b      	ldr	r3, [r7, #4]
 810b308:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 810b30c:	4a0e      	ldr	r2, [pc, #56]	; (810b348 <_ZN5Shell11receiveByteEc+0x15c>)
 810b30e:	4619      	mov	r1, r3
 810b310:	f000 f84e 	bl	810b3b0 <_ZN8Terminal7executeEP12ShellCommandP7Console>

		command_index = 0;
 810b314:	687b      	ldr	r3, [r7, #4]
 810b316:	2200      	movs	r2, #0
 810b318:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
		cmd.num_components = 0;
 810b31c:	687b      	ldr	r3, [r7, #4]
 810b31e:	2200      	movs	r2, #0
 810b320:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
		cmd.components[0].length = 0;
 810b324:	687b      	ldr	r3, [r7, #4]
 810b326:	2200      	movs	r2, #0
 810b328:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		cmd.components[0].component = command_buffer;
 810b32c:	687b      	ldr	r3, [r7, #4]
 810b32e:	f503 7205 	add.w	r2, r3, #532	; 0x214
 810b332:	687b      	ldr	r3, [r7, #4]
 810b334:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 810b338:	e002      	b.n	810b340 <_ZN5Shell11receiveByteEc+0x154>
		return;
 810b33a:	bf00      	nop
 810b33c:	e000      	b.n	810b340 <_ZN5Shell11receiveByteEc+0x154>
		}
 810b33e:	bf00      	nop
	}
}
 810b340:	3710      	adds	r7, #16
 810b342:	46bd      	mov	sp, r7
 810b344:	bd80      	pop	{r7, pc}
 810b346:	bf00      	nop
 810b348:	100041d8 	.word	0x100041d8

0810b34c <_ZN16CommandComponent7matchesEPKc>:

struct CommandComponent {
	const char* component;
	uint8_t length;

	bool matches(const char* target) {
 810b34c:	b480      	push	{r7}
 810b34e:	b085      	sub	sp, #20
 810b350:	af00      	add	r7, sp, #0
 810b352:	6078      	str	r0, [r7, #4]
 810b354:	6039      	str	r1, [r7, #0]
		uint8_t i;

		for(i = 0; i < length; i++) {
 810b356:	2300      	movs	r3, #0
 810b358:	73fb      	strb	r3, [r7, #15]
 810b35a:	687b      	ldr	r3, [r7, #4]
 810b35c:	791b      	ldrb	r3, [r3, #4]
 810b35e:	7bfa      	ldrb	r2, [r7, #15]
 810b360:	429a      	cmp	r2, r3
 810b362:	d216      	bcs.n	810b392 <_ZN16CommandComponent7matchesEPKc+0x46>
			if(target[i] != component[i] || target[i] == '\0') {
 810b364:	7bfb      	ldrb	r3, [r7, #15]
 810b366:	683a      	ldr	r2, [r7, #0]
 810b368:	4413      	add	r3, r2
 810b36a:	781a      	ldrb	r2, [r3, #0]
 810b36c:	687b      	ldr	r3, [r7, #4]
 810b36e:	6819      	ldr	r1, [r3, #0]
 810b370:	7bfb      	ldrb	r3, [r7, #15]
 810b372:	440b      	add	r3, r1
 810b374:	781b      	ldrb	r3, [r3, #0]
 810b376:	429a      	cmp	r2, r3
 810b378:	d105      	bne.n	810b386 <_ZN16CommandComponent7matchesEPKc+0x3a>
 810b37a:	7bfb      	ldrb	r3, [r7, #15]
 810b37c:	683a      	ldr	r2, [r7, #0]
 810b37e:	4413      	add	r3, r2
 810b380:	781b      	ldrb	r3, [r3, #0]
 810b382:	2b00      	cmp	r3, #0
 810b384:	d101      	bne.n	810b38a <_ZN16CommandComponent7matchesEPKc+0x3e>
				return false;
 810b386:	2300      	movs	r3, #0
 810b388:	e00c      	b.n	810b3a4 <_ZN16CommandComponent7matchesEPKc+0x58>
		for(i = 0; i < length; i++) {
 810b38a:	7bfb      	ldrb	r3, [r7, #15]
 810b38c:	3301      	adds	r3, #1
 810b38e:	73fb      	strb	r3, [r7, #15]
 810b390:	e7e3      	b.n	810b35a <_ZN16CommandComponent7matchesEPKc+0xe>
			}
		}

		return target[i] == '\0';
 810b392:	7bfb      	ldrb	r3, [r7, #15]
 810b394:	683a      	ldr	r2, [r7, #0]
 810b396:	4413      	add	r3, r2
 810b398:	781b      	ldrb	r3, [r3, #0]
 810b39a:	2b00      	cmp	r3, #0
 810b39c:	bf0c      	ite	eq
 810b39e:	2301      	moveq	r3, #1
 810b3a0:	2300      	movne	r3, #0
 810b3a2:	b2db      	uxtb	r3, r3
	}
 810b3a4:	4618      	mov	r0, r3
 810b3a6:	3714      	adds	r7, #20
 810b3a8:	46bd      	mov	sp, r7
 810b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3ae:	4770      	bx	lr

0810b3b0 <_ZN8Terminal7executeEP12ShellCommandP7Console>:


#define EQUALS(index, str) (cmd->num_components > (index) && cmd->components[(index)].matches((str)))


void Terminal::execute(ShellCommand* cmd, Console* feedback) {
 810b3b0:	b580      	push	{r7, lr}
 810b3b2:	b086      	sub	sp, #24
 810b3b4:	af00      	add	r7, sp, #0
 810b3b6:	60f8      	str	r0, [r7, #12]
 810b3b8:	60b9      	str	r1, [r7, #8]
 810b3ba:	607a      	str	r2, [r7, #4]
	if(cmd->num_components > 0) {
 810b3bc:	68bb      	ldr	r3, [r7, #8]
 810b3be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b3c2:	2b00      	cmp	r3, #0
 810b3c4:	f000 81e3 	beq.w	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		if(EQUALS(0, "help")) {
 810b3c8:	68bb      	ldr	r3, [r7, #8]
 810b3ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b3ce:	2b00      	cmp	r3, #0
 810b3d0:	d009      	beq.n	810b3e6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810b3d2:	68bb      	ldr	r3, [r7, #8]
 810b3d4:	49a8      	ldr	r1, [pc, #672]	; (810b678 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2c8>)
 810b3d6:	4618      	mov	r0, r3
 810b3d8:	f7ff ffb8 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b3dc:	4603      	mov	r3, r0
 810b3de:	2b00      	cmp	r3, #0
 810b3e0:	d001      	beq.n	810b3e6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x36>
 810b3e2:	2301      	movs	r3, #1
 810b3e4:	e000      	b.n	810b3e8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x38>
 810b3e6:	2300      	movs	r3, #0
 810b3e8:	2b00      	cmp	r3, #0
 810b3ea:	d01c      	beq.n	810b426 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x76>
			feedback->printf("> Xplore Avionics available commands:\r\n");
 810b3ec:	49a3      	ldr	r1, [pc, #652]	; (810b67c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2cc>)
 810b3ee:	6878      	ldr	r0, [r7, #4]
 810b3f0:	f7ff fd75 	bl	810aede <_ZN7Console6printfEPKcz>
			feedback->printf("> clear: clears the screen\r\n");
 810b3f4:	49a2      	ldr	r1, [pc, #648]	; (810b680 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d0>)
 810b3f6:	6878      	ldr	r0, [r7, #4]
 810b3f8:	f7ff fd71 	bl	810aede <_ZN7Console6printfEPKcz>
			feedback->printf("> help: shows this help page\r\n");
 810b3fc:	49a1      	ldr	r1, [pc, #644]	; (810b684 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d4>)
 810b3fe:	6878      	ldr	r0, [r7, #4]
 810b400:	f7ff fd6d 	bl	810aede <_ZN7Console6printfEPKcz>
			feedback->printf("> monitor: enables or disables a specific monitor\r\n");
 810b404:	49a0      	ldr	r1, [pc, #640]	; (810b688 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d8>)
 810b406:	6878      	ldr	r0, [r7, #4]
 810b408:	f7ff fd69 	bl	810aede <_ZN7Console6printfEPKcz>
			feedback->printf("> profiler: enables or disables the embedded profiler\r\n");
 810b40c:	499f      	ldr	r1, [pc, #636]	; (810b68c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2dc>)
 810b40e:	6878      	ldr	r0, [r7, #4]
 810b410:	f7ff fd65 	bl	810aede <_ZN7Console6printfEPKcz>
			feedback->printf("> reset: performs a software reset of the avionics\r\n");
 810b414:	499e      	ldr	r1, [pc, #632]	; (810b690 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e0>)
 810b416:	6878      	ldr	r0, [r7, #4]
 810b418:	f7ff fd61 	bl	810aede <_ZN7Console6printfEPKcz>
			feedback->printf("> version: displays the current terminal version\r\n");
 810b41c:	499d      	ldr	r1, [pc, #628]	; (810b694 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e4>)
 810b41e:	6878      	ldr	r0, [r7, #4]
 810b420:	f7ff fd5d 	bl	810aede <_ZN7Console6printfEPKcz>
			}
		} else {
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
		}
	}
}
 810b424:	e1b3      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "version")) {
 810b426:	68bb      	ldr	r3, [r7, #8]
 810b428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b42c:	2b00      	cmp	r3, #0
 810b42e:	d009      	beq.n	810b444 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810b430:	68bb      	ldr	r3, [r7, #8]
 810b432:	4999      	ldr	r1, [pc, #612]	; (810b698 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2e8>)
 810b434:	4618      	mov	r0, r3
 810b436:	f7ff ff89 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b43a:	4603      	mov	r3, r0
 810b43c:	2b00      	cmp	r3, #0
 810b43e:	d001      	beq.n	810b444 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x94>
 810b440:	2301      	movs	r3, #1
 810b442:	e000      	b.n	810b446 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x96>
 810b444:	2300      	movs	r3, #0
 810b446:	2b00      	cmp	r3, #0
 810b448:	d004      	beq.n	810b454 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xa4>
			feedback->printf("> Xplore Avionics Terminal v1.0 by Arion Zimmermann\r\n");
 810b44a:	4994      	ldr	r1, [pc, #592]	; (810b69c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2ec>)
 810b44c:	6878      	ldr	r0, [r7, #4]
 810b44e:	f7ff fd46 	bl	810aede <_ZN7Console6printfEPKcz>
}
 810b452:	e19c      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "reset")) {
 810b454:	68bb      	ldr	r3, [r7, #8]
 810b456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b45a:	2b00      	cmp	r3, #0
 810b45c:	d009      	beq.n	810b472 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810b45e:	68bb      	ldr	r3, [r7, #8]
 810b460:	498f      	ldr	r1, [pc, #572]	; (810b6a0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f0>)
 810b462:	4618      	mov	r0, r3
 810b464:	f7ff ff72 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b468:	4603      	mov	r3, r0
 810b46a:	2b00      	cmp	r3, #0
 810b46c:	d001      	beq.n	810b472 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc2>
 810b46e:	2301      	movs	r3, #1
 810b470:	e000      	b.n	810b474 <_ZN8Terminal7executeEP12ShellCommandP7Console+0xc4>
 810b472:	2300      	movs	r3, #0
 810b474:	2b00      	cmp	r3, #0
 810b476:	d002      	beq.n	810b47e <_ZN8Terminal7executeEP12ShellCommandP7Console+0xce>
			HAL_NVIC_SystemReset();
 810b478:	f7f7 f80f 	bl	810249a <HAL_NVIC_SystemReset>
}
 810b47c:	e187      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "time")) {
 810b47e:	68bb      	ldr	r3, [r7, #8]
 810b480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b484:	2b00      	cmp	r3, #0
 810b486:	d009      	beq.n	810b49c <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810b488:	68bb      	ldr	r3, [r7, #8]
 810b48a:	4986      	ldr	r1, [pc, #536]	; (810b6a4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f4>)
 810b48c:	4618      	mov	r0, r3
 810b48e:	f7ff ff5d 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b492:	4603      	mov	r3, r0
 810b494:	2b00      	cmp	r3, #0
 810b496:	d001      	beq.n	810b49c <_ZN8Terminal7executeEP12ShellCommandP7Console+0xec>
 810b498:	2301      	movs	r3, #1
 810b49a:	e000      	b.n	810b49e <_ZN8Terminal7executeEP12ShellCommandP7Console+0xee>
 810b49c:	2300      	movs	r3, #0
 810b49e:	2b00      	cmp	r3, #0
 810b4a0:	d008      	beq.n	810b4b4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x104>
			feedback->printf("%d\r\n", HAL_GetTick());
 810b4a2:	f7f6 fef7 	bl	8102294 <HAL_GetTick>
 810b4a6:	4603      	mov	r3, r0
 810b4a8:	461a      	mov	r2, r3
 810b4aa:	497f      	ldr	r1, [pc, #508]	; (810b6a8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2f8>)
 810b4ac:	6878      	ldr	r0, [r7, #4]
 810b4ae:	f7ff fd16 	bl	810aede <_ZN7Console6printfEPKcz>
}
 810b4b2:	e16c      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "clear")) {
 810b4b4:	68bb      	ldr	r3, [r7, #8]
 810b4b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b4ba:	2b00      	cmp	r3, #0
 810b4bc:	d009      	beq.n	810b4d2 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810b4be:	68bb      	ldr	r3, [r7, #8]
 810b4c0:	497a      	ldr	r1, [pc, #488]	; (810b6ac <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2fc>)
 810b4c2:	4618      	mov	r0, r3
 810b4c4:	f7ff ff42 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b4c8:	4603      	mov	r3, r0
 810b4ca:	2b00      	cmp	r3, #0
 810b4cc:	d001      	beq.n	810b4d2 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x122>
 810b4ce:	2301      	movs	r3, #1
 810b4d0:	e000      	b.n	810b4d4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x124>
 810b4d2:	2300      	movs	r3, #0
 810b4d4:	2b00      	cmp	r3, #0
 810b4d6:	d004      	beq.n	810b4e2 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x132>
			feedback->printf("\x1b[2J\x1b[H\e7");
 810b4d8:	4975      	ldr	r1, [pc, #468]	; (810b6b0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x300>)
 810b4da:	6878      	ldr	r0, [r7, #4]
 810b4dc:	f7ff fcff 	bl	810aede <_ZN7Console6printfEPKcz>
}
 810b4e0:	e155      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "profiler")) {
 810b4e2:	68bb      	ldr	r3, [r7, #8]
 810b4e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b4e8:	2b00      	cmp	r3, #0
 810b4ea:	d009      	beq.n	810b500 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810b4ec:	68bb      	ldr	r3, [r7, #8]
 810b4ee:	4971      	ldr	r1, [pc, #452]	; (810b6b4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x304>)
 810b4f0:	4618      	mov	r0, r3
 810b4f2:	f7ff ff2b 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b4f6:	4603      	mov	r3, r0
 810b4f8:	2b00      	cmp	r3, #0
 810b4fa:	d001      	beq.n	810b500 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x150>
 810b4fc:	2301      	movs	r3, #1
 810b4fe:	e000      	b.n	810b502 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x152>
 810b500:	2300      	movs	r3, #0
 810b502:	2b00      	cmp	r3, #0
 810b504:	d042      	beq.n	810b58c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1dc>
			if(EQUALS(1, "enable")) {
 810b506:	68bb      	ldr	r3, [r7, #8]
 810b508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b50c:	2b01      	cmp	r3, #1
 810b50e:	d90a      	bls.n	810b526 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810b510:	68bb      	ldr	r3, [r7, #8]
 810b512:	3308      	adds	r3, #8
 810b514:	4968      	ldr	r1, [pc, #416]	; (810b6b8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810b516:	4618      	mov	r0, r3
 810b518:	f7ff ff18 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b51c:	4603      	mov	r3, r0
 810b51e:	2b00      	cmp	r3, #0
 810b520:	d001      	beq.n	810b526 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x176>
 810b522:	2301      	movs	r3, #1
 810b524:	e000      	b.n	810b528 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x178>
 810b526:	2300      	movs	r3, #0
 810b528:	2b00      	cmp	r3, #0
 810b52a:	d00b      	beq.n	810b544 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x194>
				profiler.enable();
 810b52c:	4863      	ldr	r0, [pc, #396]	; (810b6bc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810b52e:	f7ff fd1d 	bl	810af6c <_ZN8Profiler6enableEv>
				feedback->printf("\x1b[2J");
 810b532:	4963      	ldr	r1, [pc, #396]	; (810b6c0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810b534:	6878      	ldr	r0, [r7, #4]
 810b536:	f7ff fcd2 	bl	810aede <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now enabled\r\n");
 810b53a:	4962      	ldr	r1, [pc, #392]	; (810b6c4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x314>)
 810b53c:	6878      	ldr	r0, [r7, #4]
 810b53e:	f7ff fcce 	bl	810aede <_ZN7Console6printfEPKcz>
}
 810b542:	e124      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "disable")) {
 810b544:	68bb      	ldr	r3, [r7, #8]
 810b546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b54a:	2b01      	cmp	r3, #1
 810b54c:	d90a      	bls.n	810b564 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810b54e:	68bb      	ldr	r3, [r7, #8]
 810b550:	3308      	adds	r3, #8
 810b552:	495d      	ldr	r1, [pc, #372]	; (810b6c8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x318>)
 810b554:	4618      	mov	r0, r3
 810b556:	f7ff fef9 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b55a:	4603      	mov	r3, r0
 810b55c:	2b00      	cmp	r3, #0
 810b55e:	d001      	beq.n	810b564 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b4>
 810b560:	2301      	movs	r3, #1
 810b562:	e000      	b.n	810b566 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1b6>
 810b564:	2300      	movs	r3, #0
 810b566:	2b00      	cmp	r3, #0
 810b568:	d00b      	beq.n	810b582 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1d2>
				profiler.disable();
 810b56a:	4854      	ldr	r0, [pc, #336]	; (810b6bc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x30c>)
 810b56c:	f7ff fd1e 	bl	810afac <_ZN8Profiler7disableEv>
				feedback->printf("\x1b[2J");
 810b570:	4953      	ldr	r1, [pc, #332]	; (810b6c0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x310>)
 810b572:	6878      	ldr	r0, [r7, #4]
 810b574:	f7ff fcb3 	bl	810aede <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now disabled\r\n");
 810b578:	4954      	ldr	r1, [pc, #336]	; (810b6cc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x31c>)
 810b57a:	6878      	ldr	r0, [r7, #4]
 810b57c:	f7ff fcaf 	bl	810aede <_ZN7Console6printfEPKcz>
}
 810b580:	e105      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: profiler { enable | disable }\r\n");
 810b582:	4953      	ldr	r1, [pc, #332]	; (810b6d0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x320>)
 810b584:	6878      	ldr	r0, [r7, #4]
 810b586:	f7ff fcaa 	bl	810aede <_ZN7Console6printfEPKcz>
}
 810b58a:	e100      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "verbose")) {
 810b58c:	68bb      	ldr	r3, [r7, #8]
 810b58e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b592:	2b00      	cmp	r3, #0
 810b594:	d009      	beq.n	810b5aa <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810b596:	68bb      	ldr	r3, [r7, #8]
 810b598:	494e      	ldr	r1, [pc, #312]	; (810b6d4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x324>)
 810b59a:	4618      	mov	r0, r3
 810b59c:	f7ff fed6 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b5a0:	4603      	mov	r3, r0
 810b5a2:	2b00      	cmp	r3, #0
 810b5a4:	d001      	beq.n	810b5aa <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fa>
 810b5a6:	2301      	movs	r3, #1
 810b5a8:	e000      	b.n	810b5ac <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fc>
 810b5aa:	2300      	movs	r3, #0
 810b5ac:	2b00      	cmp	r3, #0
 810b5ae:	d03a      	beq.n	810b626 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x276>
			if(EQUALS(1, "on")) {
 810b5b0:	68bb      	ldr	r3, [r7, #8]
 810b5b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b5b6:	2b01      	cmp	r3, #1
 810b5b8:	d90a      	bls.n	810b5d0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810b5ba:	68bb      	ldr	r3, [r7, #8]
 810b5bc:	3308      	adds	r3, #8
 810b5be:	4946      	ldr	r1, [pc, #280]	; (810b6d8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x328>)
 810b5c0:	4618      	mov	r0, r3
 810b5c2:	f7ff fec3 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b5c6:	4603      	mov	r3, r0
 810b5c8:	2b00      	cmp	r3, #0
 810b5ca:	d001      	beq.n	810b5d0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x220>
 810b5cc:	2301      	movs	r3, #1
 810b5ce:	e000      	b.n	810b5d2 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x222>
 810b5d0:	2300      	movs	r3, #0
 810b5d2:	2b00      	cmp	r3, #0
 810b5d4:	d007      	beq.n	810b5e6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x236>
				verbose = true;
 810b5d6:	68fb      	ldr	r3, [r7, #12]
 810b5d8:	2201      	movs	r2, #1
 810b5da:	701a      	strb	r2, [r3, #0]
				feedback->printf("> Verbose mode enabled\r\n");
 810b5dc:	493f      	ldr	r1, [pc, #252]	; (810b6dc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x32c>)
 810b5de:	6878      	ldr	r0, [r7, #4]
 810b5e0:	f7ff fc7d 	bl	810aede <_ZN7Console6printfEPKcz>
}
 810b5e4:	e0d3      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "off")) {
 810b5e6:	68bb      	ldr	r3, [r7, #8]
 810b5e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b5ec:	2b01      	cmp	r3, #1
 810b5ee:	d90a      	bls.n	810b606 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810b5f0:	68bb      	ldr	r3, [r7, #8]
 810b5f2:	3308      	adds	r3, #8
 810b5f4:	493a      	ldr	r1, [pc, #232]	; (810b6e0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x330>)
 810b5f6:	4618      	mov	r0, r3
 810b5f8:	f7ff fea8 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b5fc:	4603      	mov	r3, r0
 810b5fe:	2b00      	cmp	r3, #0
 810b600:	d001      	beq.n	810b606 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x256>
 810b602:	2301      	movs	r3, #1
 810b604:	e000      	b.n	810b608 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x258>
 810b606:	2300      	movs	r3, #0
 810b608:	2b00      	cmp	r3, #0
 810b60a:	d007      	beq.n	810b61c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x26c>
				verbose = false;
 810b60c:	68fb      	ldr	r3, [r7, #12]
 810b60e:	2200      	movs	r2, #0
 810b610:	701a      	strb	r2, [r3, #0]
				feedback->printf("> Verbose mode disabled\r\n");
 810b612:	4934      	ldr	r1, [pc, #208]	; (810b6e4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x334>)
 810b614:	6878      	ldr	r0, [r7, #4]
 810b616:	f7ff fc62 	bl	810aede <_ZN7Console6printfEPKcz>
}
 810b61a:	e0b8      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: verbose { on | off }\r\n");
 810b61c:	4932      	ldr	r1, [pc, #200]	; (810b6e8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x338>)
 810b61e:	6878      	ldr	r0, [r7, #4]
 810b620:	f7ff fc5d 	bl	810aede <_ZN7Console6printfEPKcz>
}
 810b624:	e0b3      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
		} else if(EQUALS(0, "monitor")) {
 810b626:	68bb      	ldr	r3, [r7, #8]
 810b628:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b62c:	2b00      	cmp	r3, #0
 810b62e:	d009      	beq.n	810b644 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810b630:	68bb      	ldr	r3, [r7, #8]
 810b632:	492e      	ldr	r1, [pc, #184]	; (810b6ec <_ZN8Terminal7executeEP12ShellCommandP7Console+0x33c>)
 810b634:	4618      	mov	r0, r3
 810b636:	f7ff fe89 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b63a:	4603      	mov	r3, r0
 810b63c:	2b00      	cmp	r3, #0
 810b63e:	d001      	beq.n	810b644 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>
 810b640:	2301      	movs	r3, #1
 810b642:	e000      	b.n	810b646 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x296>
 810b644:	2300      	movs	r3, #0
 810b646:	2b00      	cmp	r3, #0
 810b648:	f000 8098 	beq.w	810b77c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3cc>
			if(EQUALS(1, "enable") && cmd->num_components >= 3) {
 810b64c:	68bb      	ldr	r3, [r7, #8]
 810b64e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b652:	2b01      	cmp	r3, #1
 810b654:	d94c      	bls.n	810b6f0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810b656:	68bb      	ldr	r3, [r7, #8]
 810b658:	3308      	adds	r3, #8
 810b65a:	4917      	ldr	r1, [pc, #92]	; (810b6b8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x308>)
 810b65c:	4618      	mov	r0, r3
 810b65e:	f7ff fe75 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b662:	4603      	mov	r3, r0
 810b664:	2b00      	cmp	r3, #0
 810b666:	d043      	beq.n	810b6f0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810b668:	68bb      	ldr	r3, [r7, #8]
 810b66a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b66e:	2b02      	cmp	r3, #2
 810b670:	d93e      	bls.n	810b6f0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x340>
 810b672:	2301      	movs	r3, #1
 810b674:	e03d      	b.n	810b6f2 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x342>
 810b676:	bf00      	nop
 810b678:	081125dc 	.word	0x081125dc
 810b67c:	081125e4 	.word	0x081125e4
 810b680:	0811260c 	.word	0x0811260c
 810b684:	0811262c 	.word	0x0811262c
 810b688:	0811264c 	.word	0x0811264c
 810b68c:	08112680 	.word	0x08112680
 810b690:	081126b8 	.word	0x081126b8
 810b694:	081126f0 	.word	0x081126f0
 810b698:	08112724 	.word	0x08112724
 810b69c:	0811272c 	.word	0x0811272c
 810b6a0:	08112764 	.word	0x08112764
 810b6a4:	0811276c 	.word	0x0811276c
 810b6a8:	08112774 	.word	0x08112774
 810b6ac:	0811277c 	.word	0x0811277c
 810b6b0:	08112784 	.word	0x08112784
 810b6b4:	08112790 	.word	0x08112790
 810b6b8:	0811279c 	.word	0x0811279c
 810b6bc:	100042e0 	.word	0x100042e0
 810b6c0:	081127a4 	.word	0x081127a4
 810b6c4:	081127ac 	.word	0x081127ac
 810b6c8:	081127c8 	.word	0x081127c8
 810b6cc:	081127d0 	.word	0x081127d0
 810b6d0:	081127ec 	.word	0x081127ec
 810b6d4:	08112818 	.word	0x08112818
 810b6d8:	08112820 	.word	0x08112820
 810b6dc:	08112824 	.word	0x08112824
 810b6e0:	08112840 	.word	0x08112840
 810b6e4:	08112844 	.word	0x08112844
 810b6e8:	08112860 	.word	0x08112860
 810b6ec:	08112880 	.word	0x08112880
 810b6f0:	2300      	movs	r3, #0
 810b6f2:	2b00      	cmp	r3, #0
 810b6f4:	d020      	beq.n	810b738 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x388>
				uint8_t location = 0;
 810b6f6:	2300      	movs	r3, #0
 810b6f8:	75fb      	strb	r3, [r7, #23]
				uint8_t refresh_rate = 1;
 810b6fa:	2301      	movs	r3, #1
 810b6fc:	75bb      	strb	r3, [r7, #22]
				if(cmd->num_components > 3) {
 810b6fe:	68bb      	ldr	r3, [r7, #8]
 810b700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b704:	2b03      	cmp	r3, #3
 810b706:	d906      	bls.n	810b716 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x366>
					location = atoi(cmd->components[3].component);
 810b708:	68bb      	ldr	r3, [r7, #8]
 810b70a:	699b      	ldr	r3, [r3, #24]
 810b70c:	4618      	mov	r0, r3
 810b70e:	f003 feb7 	bl	810f480 <atoi>
 810b712:	4603      	mov	r3, r0
 810b714:	75fb      	strb	r3, [r7, #23]
				if(cmd->num_components > 4) {
 810b716:	68bb      	ldr	r3, [r7, #8]
 810b718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b71c:	2b04      	cmp	r3, #4
 810b71e:	d906      	bls.n	810b72e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x37e>
					refresh_rate = atoi(cmd->components[4].component);
 810b720:	68bb      	ldr	r3, [r7, #8]
 810b722:	6a1b      	ldr	r3, [r3, #32]
 810b724:	4618      	mov	r0, r3
 810b726:	f003 feab 	bl	810f480 <atoi>
 810b72a:	4603      	mov	r3, r0
 810b72c:	75bb      	strb	r3, [r7, #22]
				feedback->printf("\x1b[2J");
 810b72e:	491a      	ldr	r1, [pc, #104]	; (810b798 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810b730:	6878      	ldr	r0, [r7, #4]
 810b732:	f7ff fbd4 	bl	810aede <_ZN7Console6printfEPKcz>
}
 810b736:	e02a      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			} else if(EQUALS(1, "disable") && cmd->num_components == 3) {
 810b738:	68bb      	ldr	r3, [r7, #8]
 810b73a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b73e:	2b01      	cmp	r3, #1
 810b740:	d90f      	bls.n	810b762 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810b742:	68bb      	ldr	r3, [r7, #8]
 810b744:	3308      	adds	r3, #8
 810b746:	4915      	ldr	r1, [pc, #84]	; (810b79c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3ec>)
 810b748:	4618      	mov	r0, r3
 810b74a:	f7ff fdff 	bl	810b34c <_ZN16CommandComponent7matchesEPKc>
 810b74e:	4603      	mov	r3, r0
 810b750:	2b00      	cmp	r3, #0
 810b752:	d006      	beq.n	810b762 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810b754:	68bb      	ldr	r3, [r7, #8]
 810b756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810b75a:	2b03      	cmp	r3, #3
 810b75c:	d101      	bne.n	810b762 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b2>
 810b75e:	2301      	movs	r3, #1
 810b760:	e000      	b.n	810b764 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3b4>
 810b762:	2300      	movs	r3, #0
 810b764:	2b00      	cmp	r3, #0
 810b766:	d004      	beq.n	810b772 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3c2>
				feedback->printf("\x1b[2J");
 810b768:	490b      	ldr	r1, [pc, #44]	; (810b798 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3e8>)
 810b76a:	6878      	ldr	r0, [r7, #4]
 810b76c:	f7ff fbb7 	bl	810aede <_ZN7Console6printfEPKcz>
}
 810b770:	e00d      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
				feedback->printf("> Usage: monitor { enable | disable } { sensor | state | kalman | flash | can | telemetry | airbrakes } [location] [refresh rate; default: 10]\r\n");
 810b772:	490b      	ldr	r1, [pc, #44]	; (810b7a0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f0>)
 810b774:	6878      	ldr	r0, [r7, #4]
 810b776:	f7ff fbb2 	bl	810aede <_ZN7Console6printfEPKcz>
}
 810b77a:	e008      	b.n	810b78e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3de>
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
 810b77c:	68bb      	ldr	r3, [r7, #8]
 810b77e:	791b      	ldrb	r3, [r3, #4]
 810b780:	461a      	mov	r2, r3
 810b782:	68bb      	ldr	r3, [r7, #8]
 810b784:	681b      	ldr	r3, [r3, #0]
 810b786:	4907      	ldr	r1, [pc, #28]	; (810b7a4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x3f4>)
 810b788:	6878      	ldr	r0, [r7, #4]
 810b78a:	f7ff fba8 	bl	810aede <_ZN7Console6printfEPKcz>
}
 810b78e:	bf00      	nop
 810b790:	3718      	adds	r7, #24
 810b792:	46bd      	mov	sp, r7
 810b794:	bd80      	pop	{r7, pc}
 810b796:	bf00      	nop
 810b798:	081127a4 	.word	0x081127a4
 810b79c:	081127c8 	.word	0x081127c8
 810b7a0:	08112888 	.word	0x08112888
 810b7a4:	0811291c 	.word	0x0811291c

0810b7a8 <_Znwj>:

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
 810b7a8:	b580      	push	{r7, lr}
 810b7aa:	b082      	sub	sp, #8
 810b7ac:	af00      	add	r7, sp, #0
 810b7ae:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
 810b7b0:	6878      	ldr	r0, [r7, #4]
 810b7b2:	f7fd f8eb 	bl	810898c <pvPortMalloc>
 810b7b6:	4603      	mov	r3, r0
}
 810b7b8:	4618      	mov	r0, r3
 810b7ba:	3708      	adds	r7, #8
 810b7bc:	46bd      	mov	sp, r7
 810b7be:	bd80      	pop	{r7, pc}

0810b7c0 <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
 810b7c0:	b580      	push	{r7, lr}
 810b7c2:	b082      	sub	sp, #8
 810b7c4:	af00      	add	r7, sp, #0
 810b7c6:	6078      	str	r0, [r7, #4]
    vPortFree(ptr);
 810b7c8:	6878      	ldr	r0, [r7, #4]
 810b7ca:	f7fd f9a3 	bl	8108b14 <vPortFree>
}
 810b7ce:	bf00      	nop
 810b7d0:	3708      	adds	r7, #8
 810b7d2:	46bd      	mov	sp, r7
 810b7d4:	bd80      	pop	{r7, pc}

0810b7d6 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810b7d6:	b580      	push	{r7, lr}
 810b7d8:	b082      	sub	sp, #8
 810b7da:	af00      	add	r7, sp, #0
 810b7dc:	4603      	mov	r3, r0
 810b7de:	71fb      	strb	r3, [r7, #7]
 810b7e0:	79fb      	ldrb	r3, [r7, #7]
 810b7e2:	4619      	mov	r1, r3
 810b7e4:	2007      	movs	r0, #7
 810b7e6:	f000 fa8f 	bl	810bd08 <bno055_writeData>
 810b7ea:	bf00      	nop
 810b7ec:	3708      	adds	r7, #8
 810b7ee:	46bd      	mov	sp, r7
 810b7f0:	bd80      	pop	{r7, pc}

0810b7f2 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 810b7f2:	b580      	push	{r7, lr}
 810b7f4:	b082      	sub	sp, #8
 810b7f6:	af00      	add	r7, sp, #0
 810b7f8:	4603      	mov	r3, r0
 810b7fa:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 810b7fc:	79fb      	ldrb	r3, [r7, #7]
 810b7fe:	4619      	mov	r1, r3
 810b800:	203d      	movs	r0, #61	; 0x3d
 810b802:	f000 fa81 	bl	810bd08 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810b806:	79fb      	ldrb	r3, [r7, #7]
 810b808:	2b00      	cmp	r3, #0
 810b80a:	d103      	bne.n	810b814 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 810b80c:	2013      	movs	r0, #19
 810b80e:	f000 fa6f 	bl	810bcf0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 810b812:	e002      	b.n	810b81a <bno055_setOperationMode+0x28>
    bno055_delay(7);
 810b814:	2007      	movs	r0, #7
 810b816:	f000 fa6b 	bl	810bcf0 <bno055_delay>
}
 810b81a:	bf00      	nop
 810b81c:	3708      	adds	r7, #8
 810b81e:	46bd      	mov	sp, r7
 810b820:	bd80      	pop	{r7, pc}

0810b822 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 810b822:	b580      	push	{r7, lr}
 810b824:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810b826:	2000      	movs	r0, #0
 810b828:	f7ff ffe3 	bl	810b7f2 <bno055_setOperationMode>
}
 810b82c:	bf00      	nop
 810b82e:	bd80      	pop	{r7, pc}

0810b830 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 810b830:	b580      	push	{r7, lr}
 810b832:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810b834:	200c      	movs	r0, #12
 810b836:	f7ff ffdc 	bl	810b7f2 <bno055_setOperationMode>
}
 810b83a:	bf00      	nop
 810b83c:	bd80      	pop	{r7, pc}

0810b83e <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 810b83e:	b580      	push	{r7, lr}
 810b840:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 810b842:	2120      	movs	r1, #32
 810b844:	203f      	movs	r0, #63	; 0x3f
 810b846:	f000 fa5f 	bl	810bd08 <bno055_writeData>
  bno055_delay(700);
 810b84a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 810b84e:	f000 fa4f 	bl	810bcf0 <bno055_delay>
}
 810b852:	bf00      	nop
 810b854:	bd80      	pop	{r7, pc}

0810b856 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 810b856:	b580      	push	{r7, lr}
 810b858:	b082      	sub	sp, #8
 810b85a:	af00      	add	r7, sp, #0
  bno055_reset();
 810b85c:	f7ff ffef 	bl	810b83e <bno055_reset>

  uint8_t id = 0;
 810b860:	2300      	movs	r3, #0
 810b862:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 810b864:	1dfb      	adds	r3, r7, #7
 810b866:	2201      	movs	r2, #1
 810b868:	4619      	mov	r1, r3
 810b86a:	2000      	movs	r0, #0
 810b86c:	f000 fb38 	bl	810bee0 <bno055_readData>
  if (id != BNO055_ID) {
	  //Pas réussi :/
	  /* IMPLEMENT ME */
  }
  bno055_setPage(0);
 810b870:	2000      	movs	r0, #0
 810b872:	f7ff ffb0 	bl	810b7d6 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 810b876:	2100      	movs	r1, #0
 810b878:	203f      	movs	r0, #63	; 0x3f
 810b87a:	f000 fa45 	bl	810bd08 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 810b87e:	f7ff ffd0 	bl	810b822 <bno055_setOperationModeConfig>
  bno055_delay(10);
 810b882:	200a      	movs	r0, #10
 810b884:	f000 fa34 	bl	810bcf0 <bno055_delay>
}
 810b888:	bf00      	nop
 810b88a:	3708      	adds	r7, #8
 810b88c:	46bd      	mov	sp, r7
 810b88e:	bd80      	pop	{r7, pc}

0810b890 <bno055_getSystemError>:
  res.magState = (tmp >> 1) & 0x01;
  res.accState = (tmp >> 0) & 0x01;
  return res;
}

uint8_t bno055_getSystemError() {
 810b890:	b580      	push	{r7, lr}
 810b892:	b082      	sub	sp, #8
 810b894:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 810b896:	2000      	movs	r0, #0
 810b898:	f7ff ff9d 	bl	810b7d6 <bno055_setPage>
  uint8_t tmp;
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
 810b89c:	1dfb      	adds	r3, r7, #7
 810b89e:	2201      	movs	r2, #1
 810b8a0:	4619      	mov	r1, r3
 810b8a2:	203a      	movs	r0, #58	; 0x3a
 810b8a4:	f000 fb1c 	bl	810bee0 <bno055_readData>
  return tmp;
 810b8a8:	79fb      	ldrb	r3, [r7, #7]
}
 810b8aa:	4618      	mov	r0, r3
 810b8ac:	3708      	adds	r7, #8
 810b8ae:	46bd      	mov	sp, r7
 810b8b0:	bd80      	pop	{r7, pc}
	...

0810b8b4 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 810b8b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810b8b8:	b09e      	sub	sp, #120	; 0x78
 810b8ba:	af00      	add	r7, sp, #0
 810b8bc:	4603      	mov	r3, r0
 810b8be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 810b8c2:	2000      	movs	r0, #0
 810b8c4:	f7ff ff87 	bl	810b7d6 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 810b8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810b8cc:	2b20      	cmp	r3, #32
 810b8ce:	d108      	bne.n	810b8e2 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 810b8d0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810b8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810b8d8:	2208      	movs	r2, #8
 810b8da:	4618      	mov	r0, r3
 810b8dc:	f000 fb00 	bl	810bee0 <bno055_readData>
 810b8e0:	e007      	b.n	810b8f2 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810b8e2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810b8e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810b8ea:	2206      	movs	r2, #6
 810b8ec:	4618      	mov	r0, r3
 810b8ee:	f000 faf7 	bl	810bee0 <bno055_readData>

  double scale = 1;
 810b8f2:	f04f 0200 	mov.w	r2, #0
 810b8f6:	4b8b      	ldr	r3, [pc, #556]	; (810bb24 <bno055_getVector+0x270>)
 810b8f8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 810b8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810b900:	2b0e      	cmp	r3, #14
 810b902:	d109      	bne.n	810b918 <bno055_getVector+0x64>
    scale = magScale;
 810b904:	4b88      	ldr	r3, [pc, #544]	; (810bb28 <bno055_getVector+0x274>)
 810b906:	881b      	ldrh	r3, [r3, #0]
 810b908:	4618      	mov	r0, r3
 810b90a:	f7f4 fe93 	bl	8100634 <__aeabi_ui2d>
 810b90e:	4602      	mov	r2, r0
 810b910:	460b      	mov	r3, r1
 810b912:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810b916:	e03e      	b.n	810b996 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 810b918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810b91c:	2b08      	cmp	r3, #8
 810b91e:	d007      	beq.n	810b930 <bno055_getVector+0x7c>
 810b920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810b924:	2b28      	cmp	r3, #40	; 0x28
 810b926:	d003      	beq.n	810b930 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 810b928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810b92c:	2b2e      	cmp	r3, #46	; 0x2e
 810b92e:	d109      	bne.n	810b944 <bno055_getVector+0x90>
    scale = accelScale;
 810b930:	4b7e      	ldr	r3, [pc, #504]	; (810bb2c <bno055_getVector+0x278>)
 810b932:	881b      	ldrh	r3, [r3, #0]
 810b934:	4618      	mov	r0, r3
 810b936:	f7f4 fe7d 	bl	8100634 <__aeabi_ui2d>
 810b93a:	4602      	mov	r2, r0
 810b93c:	460b      	mov	r3, r1
 810b93e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810b942:	e028      	b.n	810b996 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 810b944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810b948:	2b14      	cmp	r3, #20
 810b94a:	d109      	bne.n	810b960 <bno055_getVector+0xac>
    scale = angularRateScale;
 810b94c:	4b78      	ldr	r3, [pc, #480]	; (810bb30 <bno055_getVector+0x27c>)
 810b94e:	881b      	ldrh	r3, [r3, #0]
 810b950:	4618      	mov	r0, r3
 810b952:	f7f4 fe6f 	bl	8100634 <__aeabi_ui2d>
 810b956:	4602      	mov	r2, r0
 810b958:	460b      	mov	r3, r1
 810b95a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810b95e:	e01a      	b.n	810b996 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 810b960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810b964:	2b1a      	cmp	r3, #26
 810b966:	d109      	bne.n	810b97c <bno055_getVector+0xc8>
    scale = eulerScale;
 810b968:	4b72      	ldr	r3, [pc, #456]	; (810bb34 <bno055_getVector+0x280>)
 810b96a:	881b      	ldrh	r3, [r3, #0]
 810b96c:	4618      	mov	r0, r3
 810b96e:	f7f4 fe61 	bl	8100634 <__aeabi_ui2d>
 810b972:	4602      	mov	r2, r0
 810b974:	460b      	mov	r3, r1
 810b976:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810b97a:	e00c      	b.n	810b996 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 810b97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810b980:	2b20      	cmp	r3, #32
 810b982:	d108      	bne.n	810b996 <bno055_getVector+0xe2>
    scale = quaScale;
 810b984:	4b6c      	ldr	r3, [pc, #432]	; (810bb38 <bno055_getVector+0x284>)
 810b986:	881b      	ldrh	r3, [r3, #0]
 810b988:	4618      	mov	r0, r3
 810b98a:	f7f4 fe53 	bl	8100634 <__aeabi_ui2d>
 810b98e:	4602      	mov	r2, r0
 810b990:	460b      	mov	r3, r1
 810b992:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810b996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810b99a:	2220      	movs	r2, #32
 810b99c:	2100      	movs	r1, #0
 810b99e:	4618      	mov	r0, r3
 810b9a0:	f003 fdaa 	bl	810f4f8 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810b9a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810b9a8:	2b20      	cmp	r3, #32
 810b9aa:	d150      	bne.n	810ba4e <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810b9ac:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810b9b0:	021b      	lsls	r3, r3, #8
 810b9b2:	b21a      	sxth	r2, r3
 810b9b4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810b9b8:	b21b      	sxth	r3, r3
 810b9ba:	4313      	orrs	r3, r2
 810b9bc:	b21b      	sxth	r3, r3
 810b9be:	4618      	mov	r0, r3
 810b9c0:	f7f4 fe48 	bl	8100654 <__aeabi_i2d>
 810b9c4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810b9c8:	f7f4 ffd8 	bl	810097c <__aeabi_ddiv>
 810b9cc:	4602      	mov	r2, r0
 810b9ce:	460b      	mov	r3, r1
 810b9d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810b9d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810b9d8:	021b      	lsls	r3, r3, #8
 810b9da:	b21a      	sxth	r2, r3
 810b9dc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810b9e0:	b21b      	sxth	r3, r3
 810b9e2:	4313      	orrs	r3, r2
 810b9e4:	b21b      	sxth	r3, r3
 810b9e6:	4618      	mov	r0, r3
 810b9e8:	f7f4 fe34 	bl	8100654 <__aeabi_i2d>
 810b9ec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810b9f0:	f7f4 ffc4 	bl	810097c <__aeabi_ddiv>
 810b9f4:	4602      	mov	r2, r0
 810b9f6:	460b      	mov	r3, r1
 810b9f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810b9fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810ba00:	021b      	lsls	r3, r3, #8
 810ba02:	b21a      	sxth	r2, r3
 810ba04:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810ba08:	b21b      	sxth	r3, r3
 810ba0a:	4313      	orrs	r3, r2
 810ba0c:	b21b      	sxth	r3, r3
 810ba0e:	4618      	mov	r0, r3
 810ba10:	f7f4 fe20 	bl	8100654 <__aeabi_i2d>
 810ba14:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810ba18:	f7f4 ffb0 	bl	810097c <__aeabi_ddiv>
 810ba1c:	4602      	mov	r2, r0
 810ba1e:	460b      	mov	r3, r1
 810ba20:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 810ba24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 810ba28:	021b      	lsls	r3, r3, #8
 810ba2a:	b21a      	sxth	r2, r3
 810ba2c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 810ba30:	b21b      	sxth	r3, r3
 810ba32:	4313      	orrs	r3, r2
 810ba34:	b21b      	sxth	r3, r3
 810ba36:	4618      	mov	r0, r3
 810ba38:	f7f4 fe0c 	bl	8100654 <__aeabi_i2d>
 810ba3c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810ba40:	f7f4 ff9c 	bl	810097c <__aeabi_ddiv>
 810ba44:	4602      	mov	r2, r0
 810ba46:	460b      	mov	r3, r1
 810ba48:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 810ba4c:	e03b      	b.n	810bac6 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810ba4e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810ba52:	021b      	lsls	r3, r3, #8
 810ba54:	b21a      	sxth	r2, r3
 810ba56:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810ba5a:	b21b      	sxth	r3, r3
 810ba5c:	4313      	orrs	r3, r2
 810ba5e:	b21b      	sxth	r3, r3
 810ba60:	4618      	mov	r0, r3
 810ba62:	f7f4 fdf7 	bl	8100654 <__aeabi_i2d>
 810ba66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810ba6a:	f7f4 ff87 	bl	810097c <__aeabi_ddiv>
 810ba6e:	4602      	mov	r2, r0
 810ba70:	460b      	mov	r3, r1
 810ba72:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810ba76:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810ba7a:	021b      	lsls	r3, r3, #8
 810ba7c:	b21a      	sxth	r2, r3
 810ba7e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810ba82:	b21b      	sxth	r3, r3
 810ba84:	4313      	orrs	r3, r2
 810ba86:	b21b      	sxth	r3, r3
 810ba88:	4618      	mov	r0, r3
 810ba8a:	f7f4 fde3 	bl	8100654 <__aeabi_i2d>
 810ba8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810ba92:	f7f4 ff73 	bl	810097c <__aeabi_ddiv>
 810ba96:	4602      	mov	r2, r0
 810ba98:	460b      	mov	r3, r1
 810ba9a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 810ba9e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810baa2:	021b      	lsls	r3, r3, #8
 810baa4:	b21a      	sxth	r2, r3
 810baa6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810baaa:	b21b      	sxth	r3, r3
 810baac:	4313      	orrs	r3, r2
 810baae:	b21b      	sxth	r3, r3
 810bab0:	4618      	mov	r0, r3
 810bab2:	f7f4 fdcf 	bl	8100654 <__aeabi_i2d>
 810bab6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810baba:	f7f4 ff5f 	bl	810097c <__aeabi_ddiv>
 810babe:	4602      	mov	r2, r0
 810bac0:	460b      	mov	r3, r1
 810bac2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 810bac6:	f107 0450 	add.w	r4, r7, #80	; 0x50
 810baca:	f107 0528 	add.w	r5, r7, #40	; 0x28
 810bace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810bad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810bad2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810bad6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810bada:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 810bade:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 810bae2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 810bae6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 810baea:	ec49 8b14 	vmov	d4, r8, r9
 810baee:	ec45 4b15 	vmov	d5, r4, r5
 810baf2:	ec41 0b16 	vmov	d6, r0, r1
 810baf6:	ec43 2b17 	vmov	d7, r2, r3
}
 810bafa:	eeb0 0a44 	vmov.f32	s0, s8
 810bafe:	eef0 0a64 	vmov.f32	s1, s9
 810bb02:	eeb0 1a45 	vmov.f32	s2, s10
 810bb06:	eef0 1a65 	vmov.f32	s3, s11
 810bb0a:	eeb0 2a46 	vmov.f32	s4, s12
 810bb0e:	eef0 2a66 	vmov.f32	s5, s13
 810bb12:	eeb0 3a47 	vmov.f32	s6, s14
 810bb16:	eef0 3a67 	vmov.f32	s7, s15
 810bb1a:	3778      	adds	r7, #120	; 0x78
 810bb1c:	46bd      	mov	sp, r7
 810bb1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810bb22:	bf00      	nop
 810bb24:	3ff00000 	.word	0x3ff00000
 810bb28:	1000002e 	.word	0x1000002e
 810bb2c:	10000028 	.word	0x10000028
 810bb30:	1000002a 	.word	0x1000002a
 810bb34:	1000002c 	.word	0x1000002c
 810bb38:	10000030 	.word	0x10000030

0810bb3c <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 810bb3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810bb40:	b090      	sub	sp, #64	; 0x40
 810bb42:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 810bb44:	2008      	movs	r0, #8
 810bb46:	f7ff feb5 	bl	810b8b4 <bno055_getVector>
 810bb4a:	eeb0 4a40 	vmov.f32	s8, s0
 810bb4e:	eef0 4a60 	vmov.f32	s9, s1
 810bb52:	eeb0 5a41 	vmov.f32	s10, s2
 810bb56:	eef0 5a61 	vmov.f32	s11, s3
 810bb5a:	eeb0 6a42 	vmov.f32	s12, s4
 810bb5e:	eef0 6a62 	vmov.f32	s13, s5
 810bb62:	eeb0 7a43 	vmov.f32	s14, s6
 810bb66:	eef0 7a63 	vmov.f32	s15, s7
 810bb6a:	ed87 4b08 	vstr	d4, [r7, #32]
 810bb6e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810bb72:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810bb76:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810bb7a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810bb7e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 810bb82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 810bb86:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 810bb8a:	ec49 8b14 	vmov	d4, r8, r9
 810bb8e:	ec45 4b15 	vmov	d5, r4, r5
 810bb92:	ec41 0b16 	vmov	d6, r0, r1
 810bb96:	ec43 2b17 	vmov	d7, r2, r3
}
 810bb9a:	eeb0 0a44 	vmov.f32	s0, s8
 810bb9e:	eef0 0a64 	vmov.f32	s1, s9
 810bba2:	eeb0 1a45 	vmov.f32	s2, s10
 810bba6:	eef0 1a65 	vmov.f32	s3, s11
 810bbaa:	eeb0 2a46 	vmov.f32	s4, s12
 810bbae:	eef0 2a66 	vmov.f32	s5, s13
 810bbb2:	eeb0 3a47 	vmov.f32	s6, s14
 810bbb6:	eef0 3a67 	vmov.f32	s7, s15
 810bbba:	3740      	adds	r7, #64	; 0x40
 810bbbc:	46bd      	mov	sp, r7
 810bbbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0810bbc2 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 810bbc2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810bbc6:	b090      	sub	sp, #64	; 0x40
 810bbc8:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 810bbca:	201a      	movs	r0, #26
 810bbcc:	f7ff fe72 	bl	810b8b4 <bno055_getVector>
 810bbd0:	eeb0 4a40 	vmov.f32	s8, s0
 810bbd4:	eef0 4a60 	vmov.f32	s9, s1
 810bbd8:	eeb0 5a41 	vmov.f32	s10, s2
 810bbdc:	eef0 5a61 	vmov.f32	s11, s3
 810bbe0:	eeb0 6a42 	vmov.f32	s12, s4
 810bbe4:	eef0 6a62 	vmov.f32	s13, s5
 810bbe8:	eeb0 7a43 	vmov.f32	s14, s6
 810bbec:	eef0 7a63 	vmov.f32	s15, s7
 810bbf0:	ed87 4b08 	vstr	d4, [r7, #32]
 810bbf4:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810bbf8:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810bbfc:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810bc00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810bc04:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 810bc08:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 810bc0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 810bc10:	ec49 8b14 	vmov	d4, r8, r9
 810bc14:	ec45 4b15 	vmov	d5, r4, r5
 810bc18:	ec41 0b16 	vmov	d6, r0, r1
 810bc1c:	ec43 2b17 	vmov	d7, r2, r3
}
 810bc20:	eeb0 0a44 	vmov.f32	s0, s8
 810bc24:	eef0 0a64 	vmov.f32	s1, s9
 810bc28:	eeb0 1a45 	vmov.f32	s2, s10
 810bc2c:	eef0 1a65 	vmov.f32	s3, s11
 810bc30:	eeb0 2a46 	vmov.f32	s4, s12
 810bc34:	eef0 2a66 	vmov.f32	s5, s13
 810bc38:	eeb0 3a47 	vmov.f32	s6, s14
 810bc3c:	eef0 3a67 	vmov.f32	s7, s15
 810bc40:	3740      	adds	r7, #64	; 0x40
 810bc42:	46bd      	mov	sp, r7
 810bc44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0810bc48 <bno055_getVectorGravity>:
bno055_vector_t bno055_getVectorLinearAccel() {
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
 810bc48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810bc4c:	b090      	sub	sp, #64	; 0x40
 810bc4e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
 810bc50:	202e      	movs	r0, #46	; 0x2e
 810bc52:	f7ff fe2f 	bl	810b8b4 <bno055_getVector>
 810bc56:	eeb0 4a40 	vmov.f32	s8, s0
 810bc5a:	eef0 4a60 	vmov.f32	s9, s1
 810bc5e:	eeb0 5a41 	vmov.f32	s10, s2
 810bc62:	eef0 5a61 	vmov.f32	s11, s3
 810bc66:	eeb0 6a42 	vmov.f32	s12, s4
 810bc6a:	eef0 6a62 	vmov.f32	s13, s5
 810bc6e:	eeb0 7a43 	vmov.f32	s14, s6
 810bc72:	eef0 7a63 	vmov.f32	s15, s7
 810bc76:	ed87 4b08 	vstr	d4, [r7, #32]
 810bc7a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810bc7e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810bc82:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 810bc86:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810bc8a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 810bc8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 810bc92:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 810bc96:	ec49 8b14 	vmov	d4, r8, r9
 810bc9a:	ec45 4b15 	vmov	d5, r4, r5
 810bc9e:	ec41 0b16 	vmov	d6, r0, r1
 810bca2:	ec43 2b17 	vmov	d7, r2, r3
}
 810bca6:	eeb0 0a44 	vmov.f32	s0, s8
 810bcaa:	eef0 0a64 	vmov.f32	s1, s9
 810bcae:	eeb0 1a45 	vmov.f32	s2, s10
 810bcb2:	eef0 1a65 	vmov.f32	s3, s11
 810bcb6:	eeb0 2a46 	vmov.f32	s4, s12
 810bcba:	eef0 2a66 	vmov.f32	s5, s13
 810bcbe:	eeb0 3a47 	vmov.f32	s6, s14
 810bcc2:	eef0 3a67 	vmov.f32	s7, s15
 810bcc6:	3740      	adds	r7, #64	; 0x40
 810bcc8:	46bd      	mov	sp, r7
 810bcca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0810bcd0 <bno055_assignI2C>:
#include "bno055_stm32.h"
#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810bcd0:	b480      	push	{r7}
 810bcd2:	b083      	sub	sp, #12
 810bcd4:	af00      	add	r7, sp, #0
 810bcd6:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 810bcd8:	4a04      	ldr	r2, [pc, #16]	; (810bcec <bno055_assignI2C+0x1c>)
 810bcda:	687b      	ldr	r3, [r7, #4]
 810bcdc:	6013      	str	r3, [r2, #0]
}
 810bcde:	bf00      	nop
 810bce0:	370c      	adds	r7, #12
 810bce2:	46bd      	mov	sp, r7
 810bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bce8:	4770      	bx	lr
 810bcea:	bf00      	nop
 810bcec:	1000a364 	.word	0x1000a364

0810bcf0 <bno055_delay>:

void bno055_delay(int time) {
 810bcf0:	b580      	push	{r7, lr}
 810bcf2:	b082      	sub	sp, #8
 810bcf4:	af00      	add	r7, sp, #0
 810bcf6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 810bcf8:	6878      	ldr	r0, [r7, #4]
 810bcfa:	f7fc fe01 	bl	8108900 <osDelay>
#else
  HAL_Delay(time);
#endif
}
 810bcfe:	bf00      	nop
 810bd00:	3708      	adds	r7, #8
 810bd02:	46bd      	mov	sp, r7
 810bd04:	bd80      	pop	{r7, pc}
	...

0810bd08 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 810bd08:	b580      	push	{r7, lr}
 810bd0a:	b088      	sub	sp, #32
 810bd0c:	af02      	add	r7, sp, #8
 810bd0e:	4603      	mov	r3, r0
 810bd10:	460a      	mov	r2, r1
 810bd12:	71fb      	strb	r3, [r7, #7]
 810bd14:	4613      	mov	r3, r2
 810bd16:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 810bd18:	79fb      	ldrb	r3, [r7, #7]
 810bd1a:	733b      	strb	r3, [r7, #12]
 810bd1c:	79bb      	ldrb	r3, [r7, #6]
 810bd1e:	737b      	strb	r3, [r7, #13]
  uint8_t status;

  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 810bd20:	4b5a      	ldr	r3, [pc, #360]	; (810be8c <bno055_writeData+0x184>)
 810bd22:	6818      	ldr	r0, [r3, #0]
 810bd24:	f107 020c 	add.w	r2, r7, #12
 810bd28:	230a      	movs	r3, #10
 810bd2a:	9300      	str	r3, [sp, #0]
 810bd2c:	2302      	movs	r3, #2
 810bd2e:	2150      	movs	r1, #80	; 0x50
 810bd30:	f7f9 f9b8 	bl	81050a4 <HAL_I2C_Master_Transmit>
 810bd34:	4603      	mov	r3, r0
 810bd36:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);


  if (status == HAL_OK) {
 810bd38:	7dfb      	ldrb	r3, [r7, #23]
 810bd3a:	2b00      	cmp	r3, #0
 810bd3c:	f000 80a0 	beq.w	810be80 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 810bd40:	7dfb      	ldrb	r3, [r7, #23]
 810bd42:	2b01      	cmp	r3, #1
 810bd44:	d103      	bne.n	810bd4e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 810bd46:	4852      	ldr	r0, [pc, #328]	; (810be90 <bno055_writeData+0x188>)
 810bd48:	f004 f8ce 	bl	810fee8 <puts>
 810bd4c:	e012      	b.n	810bd74 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 810bd4e:	7dfb      	ldrb	r3, [r7, #23]
 810bd50:	2b03      	cmp	r3, #3
 810bd52:	d103      	bne.n	810bd5c <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 810bd54:	484f      	ldr	r0, [pc, #316]	; (810be94 <bno055_writeData+0x18c>)
 810bd56:	f004 f8c7 	bl	810fee8 <puts>
 810bd5a:	e00b      	b.n	810bd74 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 810bd5c:	7dfb      	ldrb	r3, [r7, #23]
 810bd5e:	2b02      	cmp	r3, #2
 810bd60:	d103      	bne.n	810bd6a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 810bd62:	484d      	ldr	r0, [pc, #308]	; (810be98 <bno055_writeData+0x190>)
 810bd64:	f004 f8c0 	bl	810fee8 <puts>
 810bd68:	e004      	b.n	810bd74 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 810bd6a:	7dfb      	ldrb	r3, [r7, #23]
 810bd6c:	4619      	mov	r1, r3
 810bd6e:	484b      	ldr	r0, [pc, #300]	; (810be9c <bno055_writeData+0x194>)
 810bd70:	f004 f834 	bl	810fddc <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 810bd74:	4b45      	ldr	r3, [pc, #276]	; (810be8c <bno055_writeData+0x184>)
 810bd76:	681b      	ldr	r3, [r3, #0]
 810bd78:	4618      	mov	r0, r3
 810bd7a:	f7f9 fb8b 	bl	8105494 <HAL_I2C_GetError>
 810bd7e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 810bd80:	693b      	ldr	r3, [r7, #16]
 810bd82:	2b00      	cmp	r3, #0
 810bd84:	d07e      	beq.n	810be84 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 810bd86:	693b      	ldr	r3, [r7, #16]
 810bd88:	2b01      	cmp	r3, #1
 810bd8a:	d103      	bne.n	810bd94 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 810bd8c:	4844      	ldr	r0, [pc, #272]	; (810bea0 <bno055_writeData+0x198>)
 810bd8e:	f004 f8ab 	bl	810fee8 <puts>
 810bd92:	e021      	b.n	810bdd8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 810bd94:	693b      	ldr	r3, [r7, #16]
 810bd96:	2b02      	cmp	r3, #2
 810bd98:	d103      	bne.n	810bda2 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 810bd9a:	4842      	ldr	r0, [pc, #264]	; (810bea4 <bno055_writeData+0x19c>)
 810bd9c:	f004 f8a4 	bl	810fee8 <puts>
 810bda0:	e01a      	b.n	810bdd8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 810bda2:	693b      	ldr	r3, [r7, #16]
 810bda4:	2b04      	cmp	r3, #4
 810bda6:	d103      	bne.n	810bdb0 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 810bda8:	483f      	ldr	r0, [pc, #252]	; (810bea8 <bno055_writeData+0x1a0>)
 810bdaa:	f004 f89d 	bl	810fee8 <puts>
 810bdae:	e013      	b.n	810bdd8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 810bdb0:	693b      	ldr	r3, [r7, #16]
 810bdb2:	2b08      	cmp	r3, #8
 810bdb4:	d103      	bne.n	810bdbe <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 810bdb6:	483d      	ldr	r0, [pc, #244]	; (810beac <bno055_writeData+0x1a4>)
 810bdb8:	f004 f896 	bl	810fee8 <puts>
 810bdbc:	e00c      	b.n	810bdd8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 810bdbe:	693b      	ldr	r3, [r7, #16]
 810bdc0:	2b10      	cmp	r3, #16
 810bdc2:	d103      	bne.n	810bdcc <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 810bdc4:	483a      	ldr	r0, [pc, #232]	; (810beb0 <bno055_writeData+0x1a8>)
 810bdc6:	f004 f88f 	bl	810fee8 <puts>
 810bdca:	e005      	b.n	810bdd8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 810bdcc:	693b      	ldr	r3, [r7, #16]
 810bdce:	2b20      	cmp	r3, #32
 810bdd0:	d102      	bne.n	810bdd8 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 810bdd2:	4838      	ldr	r0, [pc, #224]	; (810beb4 <bno055_writeData+0x1ac>)
 810bdd4:	f004 f888 	bl	810fee8 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 810bdd8:	4b2c      	ldr	r3, [pc, #176]	; (810be8c <bno055_writeData+0x184>)
 810bdda:	681b      	ldr	r3, [r3, #0]
 810bddc:	4618      	mov	r0, r3
 810bdde:	f7f9 fb4b 	bl	8105478 <HAL_I2C_GetState>
 810bde2:	4603      	mov	r3, r0
 810bde4:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 810bde6:	7bfb      	ldrb	r3, [r7, #15]
 810bde8:	2b00      	cmp	r3, #0
 810bdea:	d103      	bne.n	810bdf4 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 810bdec:	4832      	ldr	r0, [pc, #200]	; (810beb8 <bno055_writeData+0x1b0>)
 810bdee:	f004 f87b 	bl	810fee8 <puts>
 810bdf2:	e048      	b.n	810be86 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 810bdf4:	7bfb      	ldrb	r3, [r7, #15]
 810bdf6:	2b20      	cmp	r3, #32
 810bdf8:	d103      	bne.n	810be02 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 810bdfa:	482f      	ldr	r0, [pc, #188]	; (810beb8 <bno055_writeData+0x1b0>)
 810bdfc:	f004 f874 	bl	810fee8 <puts>
 810be00:	e041      	b.n	810be86 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 810be02:	7bfb      	ldrb	r3, [r7, #15]
 810be04:	2b24      	cmp	r3, #36	; 0x24
 810be06:	d103      	bne.n	810be10 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 810be08:	482c      	ldr	r0, [pc, #176]	; (810bebc <bno055_writeData+0x1b4>)
 810be0a:	f004 f86d 	bl	810fee8 <puts>
 810be0e:	e03a      	b.n	810be86 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 810be10:	7bfb      	ldrb	r3, [r7, #15]
 810be12:	2b21      	cmp	r3, #33	; 0x21
 810be14:	d103      	bne.n	810be1e <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 810be16:	482a      	ldr	r0, [pc, #168]	; (810bec0 <bno055_writeData+0x1b8>)
 810be18:	f004 f866 	bl	810fee8 <puts>
 810be1c:	e033      	b.n	810be86 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 810be1e:	7bfb      	ldrb	r3, [r7, #15]
 810be20:	2b22      	cmp	r3, #34	; 0x22
 810be22:	d103      	bne.n	810be2c <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 810be24:	4827      	ldr	r0, [pc, #156]	; (810bec4 <bno055_writeData+0x1bc>)
 810be26:	f004 f85f 	bl	810fee8 <puts>
 810be2a:	e02c      	b.n	810be86 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 810be2c:	7bfb      	ldrb	r3, [r7, #15]
 810be2e:	2b28      	cmp	r3, #40	; 0x28
 810be30:	d103      	bne.n	810be3a <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 810be32:	4825      	ldr	r0, [pc, #148]	; (810bec8 <bno055_writeData+0x1c0>)
 810be34:	f004 f858 	bl	810fee8 <puts>
 810be38:	e025      	b.n	810be86 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 810be3a:	7bfb      	ldrb	r3, [r7, #15]
 810be3c:	2b29      	cmp	r3, #41	; 0x29
 810be3e:	d103      	bne.n	810be48 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 810be40:	4822      	ldr	r0, [pc, #136]	; (810becc <bno055_writeData+0x1c4>)
 810be42:	f004 f851 	bl	810fee8 <puts>
 810be46:	e01e      	b.n	810be86 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 810be48:	7bfb      	ldrb	r3, [r7, #15]
 810be4a:	2b2a      	cmp	r3, #42	; 0x2a
 810be4c:	d103      	bne.n	810be56 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 810be4e:	4820      	ldr	r0, [pc, #128]	; (810bed0 <bno055_writeData+0x1c8>)
 810be50:	f004 f84a 	bl	810fee8 <puts>
 810be54:	e017      	b.n	810be86 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 810be56:	7bfb      	ldrb	r3, [r7, #15]
 810be58:	2b60      	cmp	r3, #96	; 0x60
 810be5a:	d103      	bne.n	810be64 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 810be5c:	481d      	ldr	r0, [pc, #116]	; (810bed4 <bno055_writeData+0x1cc>)
 810be5e:	f004 f843 	bl	810fee8 <puts>
 810be62:	e010      	b.n	810be86 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 810be64:	7bfb      	ldrb	r3, [r7, #15]
 810be66:	2ba0      	cmp	r3, #160	; 0xa0
 810be68:	d103      	bne.n	810be72 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 810be6a:	481b      	ldr	r0, [pc, #108]	; (810bed8 <bno055_writeData+0x1d0>)
 810be6c:	f004 f83c 	bl	810fee8 <puts>
 810be70:	e009      	b.n	810be86 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 810be72:	7bfb      	ldrb	r3, [r7, #15]
 810be74:	2be0      	cmp	r3, #224	; 0xe0
 810be76:	d106      	bne.n	810be86 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 810be78:	4818      	ldr	r0, [pc, #96]	; (810bedc <bno055_writeData+0x1d4>)
 810be7a:	f004 f835 	bl	810fee8 <puts>
 810be7e:	e002      	b.n	810be86 <bno055_writeData+0x17e>
    return;
 810be80:	bf00      	nop
 810be82:	e000      	b.n	810be86 <bno055_writeData+0x17e>
    return;
 810be84:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 810be86:	3718      	adds	r7, #24
 810be88:	46bd      	mov	sp, r7
 810be8a:	bd80      	pop	{r7, pc}
 810be8c:	1000a364 	.word	0x1000a364
 810be90:	08112938 	.word	0x08112938
 810be94:	0811295c 	.word	0x0811295c
 810be98:	08112984 	.word	0x08112984
 810be9c:	081129a8 	.word	0x081129a8
 810bea0:	081129c0 	.word	0x081129c0
 810bea4:	081129d4 	.word	0x081129d4
 810bea8:	081129e8 	.word	0x081129e8
 810beac:	081129fc 	.word	0x081129fc
 810beb0:	08112a10 	.word	0x08112a10
 810beb4:	08112a24 	.word	0x08112a24
 810beb8:	08112a3c 	.word	0x08112a3c
 810bebc:	08112a54 	.word	0x08112a54
 810bec0:	08112a68 	.word	0x08112a68
 810bec4:	08112a80 	.word	0x08112a80
 810bec8:	08112a98 	.word	0x08112a98
 810becc:	08112ab0 	.word	0x08112ab0
 810bed0:	08112ad0 	.word	0x08112ad0
 810bed4:	08112af0 	.word	0x08112af0
 810bed8:	08112b08 	.word	0x08112b08
 810bedc:	08112b20 	.word	0x08112b20

0810bee0 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 810bee0:	b580      	push	{r7, lr}
 810bee2:	b084      	sub	sp, #16
 810bee4:	af02      	add	r7, sp, #8
 810bee6:	4603      	mov	r3, r0
 810bee8:	6039      	str	r1, [r7, #0]
 810beea:	71fb      	strb	r3, [r7, #7]
 810beec:	4613      	mov	r3, r2
 810beee:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 810bef0:	4b0b      	ldr	r3, [pc, #44]	; (810bf20 <bno055_readData+0x40>)
 810bef2:	6818      	ldr	r0, [r3, #0]
 810bef4:	1dfa      	adds	r2, r7, #7
 810bef6:	2364      	movs	r3, #100	; 0x64
 810bef8:	9300      	str	r3, [sp, #0]
 810befa:	2301      	movs	r3, #1
 810befc:	2150      	movs	r1, #80	; 0x50
 810befe:	f7f9 f8d1 	bl	81050a4 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 810bf02:	4b07      	ldr	r3, [pc, #28]	; (810bf20 <bno055_readData+0x40>)
 810bf04:	6818      	ldr	r0, [r3, #0]
 810bf06:	79bb      	ldrb	r3, [r7, #6]
 810bf08:	b29b      	uxth	r3, r3
 810bf0a:	2264      	movs	r2, #100	; 0x64
 810bf0c:	9200      	str	r2, [sp, #0]
 810bf0e:	683a      	ldr	r2, [r7, #0]
 810bf10:	2150      	movs	r1, #80	; 0x50
 810bf12:	f7f9 f9bb 	bl	810528c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 810bf16:	bf00      	nop
 810bf18:	3708      	adds	r7, #8
 810bf1a:	46bd      	mov	sp, r7
 810bf1c:	bd80      	pop	{r7, pc}
 810bf1e:	bf00      	nop
 810bf20:	1000a364 	.word	0x1000a364

0810bf24 <HX711_delay_us>:
GPIO_TypeDef *_hx711_di_gpio;
uint32_t _hx711_di_pin;

//#############################################################################################
__STATIC_INLINE void HX711_delay_us(uint32_t microseconds)
{
 810bf24:	b580      	push	{r7, lr}
 810bf26:	b084      	sub	sp, #16
 810bf28:	af00      	add	r7, sp, #0
 810bf2a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 810bf2c:	4b0d      	ldr	r3, [pc, #52]	; (810bf64 <HX711_delay_us+0x40>)
 810bf2e:	685b      	ldr	r3, [r3, #4]
 810bf30:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 810bf32:	f7f9 ffaf 	bl	8105e94 <HAL_RCC_GetHCLKFreq>
 810bf36:	4603      	mov	r3, r0
 810bf38:	4a0b      	ldr	r2, [pc, #44]	; (810bf68 <HX711_delay_us+0x44>)
 810bf3a:	fba2 2303 	umull	r2, r3, r2, r3
 810bf3e:	0c9a      	lsrs	r2, r3, #18
 810bf40:	687b      	ldr	r3, [r7, #4]
 810bf42:	fb02 f303 	mul.w	r3, r2, r3
 810bf46:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 810bf48:	bf00      	nop
 810bf4a:	4b06      	ldr	r3, [pc, #24]	; (810bf64 <HX711_delay_us+0x40>)
 810bf4c:	685a      	ldr	r2, [r3, #4]
 810bf4e:	68fb      	ldr	r3, [r7, #12]
 810bf50:	1ad3      	subs	r3, r2, r3
 810bf52:	687a      	ldr	r2, [r7, #4]
 810bf54:	429a      	cmp	r2, r3
 810bf56:	d8f8      	bhi.n	810bf4a <HX711_delay_us+0x26>
}
 810bf58:	bf00      	nop
 810bf5a:	bf00      	nop
 810bf5c:	3710      	adds	r7, #16
 810bf5e:	46bd      	mov	sp, r7
 810bf60:	bd80      	pop	{r7, pc}
 810bf62:	bf00      	nop
 810bf64:	e0001000 	.word	0xe0001000
 810bf68:	431bde83 	.word	0x431bde83

0810bf6c <HX711_set_pins>:
void  HX711_set_pins(GPIO_TypeDef *sck_gpio, uint32_t sck_pin, GPIO_TypeDef *di_gpio, uint32_t di_pin){
 810bf6c:	b480      	push	{r7}
 810bf6e:	b085      	sub	sp, #20
 810bf70:	af00      	add	r7, sp, #0
 810bf72:	60f8      	str	r0, [r7, #12]
 810bf74:	60b9      	str	r1, [r7, #8]
 810bf76:	607a      	str	r2, [r7, #4]
 810bf78:	603b      	str	r3, [r7, #0]
	_hx711_sck_gpio = sck_gpio;
 810bf7a:	4a09      	ldr	r2, [pc, #36]	; (810bfa0 <HX711_set_pins+0x34>)
 810bf7c:	68fb      	ldr	r3, [r7, #12]
 810bf7e:	6013      	str	r3, [r2, #0]
	_hx711_sck_pin = sck_pin;
 810bf80:	4a08      	ldr	r2, [pc, #32]	; (810bfa4 <HX711_set_pins+0x38>)
 810bf82:	68bb      	ldr	r3, [r7, #8]
 810bf84:	6013      	str	r3, [r2, #0]
	_hx711_di_gpio = di_gpio;
 810bf86:	4a08      	ldr	r2, [pc, #32]	; (810bfa8 <HX711_set_pins+0x3c>)
 810bf88:	687b      	ldr	r3, [r7, #4]
 810bf8a:	6013      	str	r3, [r2, #0]
	_hx711_di_pin = di_pin;
 810bf8c:	4a07      	ldr	r2, [pc, #28]	; (810bfac <HX711_set_pins+0x40>)
 810bf8e:	683b      	ldr	r3, [r7, #0]
 810bf90:	6013      	str	r3, [r2, #0]
}
 810bf92:	bf00      	nop
 810bf94:	3714      	adds	r7, #20
 810bf96:	46bd      	mov	sp, r7
 810bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf9c:	4770      	bx	lr
 810bf9e:	bf00      	nop
 810bfa0:	1000a36c 	.word	0x1000a36c
 810bfa4:	1000a368 	.word	0x1000a368
 810bfa8:	1000a374 	.word	0x1000a374
 810bfac:	1000a370 	.word	0x1000a370

0810bfb0 <HX711_init>:
//#############################################################################################
void  HX711_init(void)
{
 810bfb0:	b580      	push	{r7, lr}
 810bfb2:	b086      	sub	sp, #24
 810bfb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 810bfb6:	2301      	movs	r3, #1
 810bfb8:	60bb      	str	r3, [r7, #8]
  gpio.Pull = GPIO_NOPULL;
 810bfba:	2300      	movs	r3, #0
 810bfbc:	60fb      	str	r3, [r7, #12]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 810bfbe:	2302      	movs	r3, #2
 810bfc0:	613b      	str	r3, [r7, #16]
  gpio.Pin = _hx711_sck_pin;
 810bfc2:	4b1c      	ldr	r3, [pc, #112]	; (810c034 <HX711_init+0x84>)
 810bfc4:	681b      	ldr	r3, [r3, #0]
 810bfc6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_hx711_sck_gpio, &gpio);
 810bfc8:	4b1b      	ldr	r3, [pc, #108]	; (810c038 <HX711_init+0x88>)
 810bfca:	681b      	ldr	r3, [r3, #0]
 810bfcc:	1d3a      	adds	r2, r7, #4
 810bfce:	4611      	mov	r1, r2
 810bfd0:	4618      	mov	r0, r3
 810bfd2:	f7f8 fd95 	bl	8104b00 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 810bfd6:	2300      	movs	r3, #0
 810bfd8:	60bb      	str	r3, [r7, #8]
  gpio.Pull = GPIO_NOPULL;
 810bfda:	2300      	movs	r3, #0
 810bfdc:	60fb      	str	r3, [r7, #12]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 810bfde:	2302      	movs	r3, #2
 810bfe0:	613b      	str	r3, [r7, #16]
  gpio.Pin = _hx711_di_pin;
 810bfe2:	4b16      	ldr	r3, [pc, #88]	; (810c03c <HX711_init+0x8c>)
 810bfe4:	681b      	ldr	r3, [r3, #0]
 810bfe6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(_hx711_di_gpio, &gpio);
 810bfe8:	4b15      	ldr	r3, [pc, #84]	; (810c040 <HX711_init+0x90>)
 810bfea:	681b      	ldr	r3, [r3, #0]
 810bfec:	1d3a      	adds	r2, r7, #4
 810bfee:	4611      	mov	r1, r2
 810bff0:	4618      	mov	r0, r3
 810bff2:	f7f8 fd85 	bl	8104b00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_SET);
 810bff6:	4b10      	ldr	r3, [pc, #64]	; (810c038 <HX711_init+0x88>)
 810bff8:	681b      	ldr	r3, [r3, #0]
 810bffa:	4a0e      	ldr	r2, [pc, #56]	; (810c034 <HX711_init+0x84>)
 810bffc:	6812      	ldr	r2, [r2, #0]
 810bffe:	b291      	uxth	r1, r2
 810c000:	2201      	movs	r2, #1
 810c002:	4618      	mov	r0, r3
 810c004:	f7f8 ff44 	bl	8104e90 <HAL_GPIO_WritePin>
  HX711_delay(10);
 810c008:	200a      	movs	r0, #10
 810c00a:	f7fc fc79 	bl	8108900 <osDelay>
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_RESET);
 810c00e:	4b0a      	ldr	r3, [pc, #40]	; (810c038 <HX711_init+0x88>)
 810c010:	681b      	ldr	r3, [r3, #0]
 810c012:	4a08      	ldr	r2, [pc, #32]	; (810c034 <HX711_init+0x84>)
 810c014:	6812      	ldr	r2, [r2, #0]
 810c016:	b291      	uxth	r1, r2
 810c018:	2200      	movs	r2, #0
 810c01a:	4618      	mov	r0, r3
 810c01c:	f7f8 ff38 	bl	8104e90 <HAL_GPIO_WritePin>
  HX711_delay(10);  
 810c020:	200a      	movs	r0, #10
 810c022:	f7fc fc6d 	bl	8108900 <osDelay>
  HX711_valueAve(8);
 810c026:	2008      	movs	r0, #8
 810c028:	f000 f88a 	bl	810c140 <HX711_valueAve>
}
 810c02c:	bf00      	nop
 810c02e:	3718      	adds	r7, #24
 810c030:	46bd      	mov	sp, r7
 810c032:	bd80      	pop	{r7, pc}
 810c034:	1000a368 	.word	0x1000a368
 810c038:	1000a36c 	.word	0x1000a36c
 810c03c:	1000a370 	.word	0x1000a370
 810c040:	1000a374 	.word	0x1000a374

0810c044 <HX711_value>:
//#############################################################################################
int32_t HX711_value(void)
{
 810c044:	b580      	push	{r7, lr}
 810c046:	b084      	sub	sp, #16
 810c048:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 810c04a:	2300      	movs	r3, #0
 810c04c:	60fb      	str	r3, [r7, #12]
  uint32_t  startTime = HAL_GetTick();
 810c04e:	f7f6 f921 	bl	8102294 <HAL_GetTick>
 810c052:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(_hx711_di_gpio, _hx711_di_pin) == GPIO_PIN_SET)
 810c054:	e008      	b.n	810c068 <HX711_value+0x24>
  {
    if(HAL_GetTick() - startTime > 150)
 810c056:	f7f6 f91d 	bl	8102294 <HAL_GetTick>
 810c05a:	4602      	mov	r2, r0
 810c05c:	687b      	ldr	r3, [r7, #4]
 810c05e:	1ad3      	subs	r3, r2, r3
 810c060:	2b96      	cmp	r3, #150	; 0x96
 810c062:	d901      	bls.n	810c068 <HX711_value+0x24>
      return 0;
 810c064:	2300      	movs	r3, #0
 810c066:	e05f      	b.n	810c128 <HX711_value+0xe4>
  while(HAL_GPIO_ReadPin(_hx711_di_gpio, _hx711_di_pin) == GPIO_PIN_SET)
 810c068:	4b31      	ldr	r3, [pc, #196]	; (810c130 <HX711_value+0xec>)
 810c06a:	681b      	ldr	r3, [r3, #0]
 810c06c:	4a31      	ldr	r2, [pc, #196]	; (810c134 <HX711_value+0xf0>)
 810c06e:	6812      	ldr	r2, [r2, #0]
 810c070:	b292      	uxth	r2, r2
 810c072:	4611      	mov	r1, r2
 810c074:	4618      	mov	r0, r3
 810c076:	f7f8 fef3 	bl	8104e60 <HAL_GPIO_ReadPin>
 810c07a:	4603      	mov	r3, r0
 810c07c:	2b01      	cmp	r3, #1
 810c07e:	d0ea      	beq.n	810c056 <HX711_value+0x12>
  }
  for(int8_t i=0; i<24 ; i++)
 810c080:	2300      	movs	r3, #0
 810c082:	72fb      	strb	r3, [r7, #11]
 810c084:	e02f      	b.n	810c0e6 <HX711_value+0xa2>
  {
    HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_SET);
 810c086:	4b2c      	ldr	r3, [pc, #176]	; (810c138 <HX711_value+0xf4>)
 810c088:	681b      	ldr	r3, [r3, #0]
 810c08a:	4a2c      	ldr	r2, [pc, #176]	; (810c13c <HX711_value+0xf8>)
 810c08c:	6812      	ldr	r2, [r2, #0]
 810c08e:	b291      	uxth	r1, r2
 810c090:	2201      	movs	r2, #1
 810c092:	4618      	mov	r0, r3
 810c094:	f7f8 fefc 	bl	8104e90 <HAL_GPIO_WritePin>
    HX711_delay_us(1);
 810c098:	2001      	movs	r0, #1
 810c09a:	f7ff ff43 	bl	810bf24 <HX711_delay_us>
    data = data << 1;    
 810c09e:	68fb      	ldr	r3, [r7, #12]
 810c0a0:	005b      	lsls	r3, r3, #1
 810c0a2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_RESET);
 810c0a4:	4b24      	ldr	r3, [pc, #144]	; (810c138 <HX711_value+0xf4>)
 810c0a6:	681b      	ldr	r3, [r3, #0]
 810c0a8:	4a24      	ldr	r2, [pc, #144]	; (810c13c <HX711_value+0xf8>)
 810c0aa:	6812      	ldr	r2, [r2, #0]
 810c0ac:	b291      	uxth	r1, r2
 810c0ae:	2200      	movs	r2, #0
 810c0b0:	4618      	mov	r0, r3
 810c0b2:	f7f8 feed 	bl	8104e90 <HAL_GPIO_WritePin>
    HX711_delay_us(1);
 810c0b6:	2001      	movs	r0, #1
 810c0b8:	f7ff ff34 	bl	810bf24 <HX711_delay_us>
    if(HAL_GPIO_ReadPin(_hx711_di_gpio, _hx711_di_pin) == GPIO_PIN_SET)
 810c0bc:	4b1c      	ldr	r3, [pc, #112]	; (810c130 <HX711_value+0xec>)
 810c0be:	681b      	ldr	r3, [r3, #0]
 810c0c0:	4a1c      	ldr	r2, [pc, #112]	; (810c134 <HX711_value+0xf0>)
 810c0c2:	6812      	ldr	r2, [r2, #0]
 810c0c4:	b292      	uxth	r2, r2
 810c0c6:	4611      	mov	r1, r2
 810c0c8:	4618      	mov	r0, r3
 810c0ca:	f7f8 fec9 	bl	8104e60 <HAL_GPIO_ReadPin>
 810c0ce:	4603      	mov	r3, r0
 810c0d0:	2b01      	cmp	r3, #1
 810c0d2:	d102      	bne.n	810c0da <HX711_value+0x96>
      data ++;
 810c0d4:	68fb      	ldr	r3, [r7, #12]
 810c0d6:	3301      	adds	r3, #1
 810c0d8:	60fb      	str	r3, [r7, #12]
  for(int8_t i=0; i<24 ; i++)
 810c0da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 810c0de:	b2db      	uxtb	r3, r3
 810c0e0:	3301      	adds	r3, #1
 810c0e2:	b2db      	uxtb	r3, r3
 810c0e4:	72fb      	strb	r3, [r7, #11]
 810c0e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 810c0ea:	2b17      	cmp	r3, #23
 810c0ec:	ddcb      	ble.n	810c086 <HX711_value+0x42>
  }
  data = data ^ 0x800000; 
 810c0ee:	68fb      	ldr	r3, [r7, #12]
 810c0f0:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 810c0f4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_SET);
 810c0f6:	4b10      	ldr	r3, [pc, #64]	; (810c138 <HX711_value+0xf4>)
 810c0f8:	681b      	ldr	r3, [r3, #0]
 810c0fa:	4a10      	ldr	r2, [pc, #64]	; (810c13c <HX711_value+0xf8>)
 810c0fc:	6812      	ldr	r2, [r2, #0]
 810c0fe:	b291      	uxth	r1, r2
 810c100:	2201      	movs	r2, #1
 810c102:	4618      	mov	r0, r3
 810c104:	f7f8 fec4 	bl	8104e90 <HAL_GPIO_WritePin>
  HX711_delay_us(1);
 810c108:	2001      	movs	r0, #1
 810c10a:	f7ff ff0b 	bl	810bf24 <HX711_delay_us>
  HAL_GPIO_WritePin(_hx711_sck_gpio, _hx711_sck_pin, GPIO_PIN_RESET);
 810c10e:	4b0a      	ldr	r3, [pc, #40]	; (810c138 <HX711_value+0xf4>)
 810c110:	681b      	ldr	r3, [r3, #0]
 810c112:	4a0a      	ldr	r2, [pc, #40]	; (810c13c <HX711_value+0xf8>)
 810c114:	6812      	ldr	r2, [r2, #0]
 810c116:	b291      	uxth	r1, r2
 810c118:	2200      	movs	r2, #0
 810c11a:	4618      	mov	r0, r3
 810c11c:	f7f8 feb8 	bl	8104e90 <HAL_GPIO_WritePin>
  HX711_delay_us(1);
 810c120:	2001      	movs	r0, #1
 810c122:	f7ff feff 	bl	810bf24 <HX711_delay_us>
  return data;    
 810c126:	68fb      	ldr	r3, [r7, #12]
}
 810c128:	4618      	mov	r0, r3
 810c12a:	3710      	adds	r7, #16
 810c12c:	46bd      	mov	sp, r7
 810c12e:	bd80      	pop	{r7, pc}
 810c130:	1000a374 	.word	0x1000a374
 810c134:	1000a370 	.word	0x1000a370
 810c138:	1000a36c 	.word	0x1000a36c
 810c13c:	1000a368 	.word	0x1000a368

0810c140 <HX711_valueAve>:
//#############################################################################################
int32_t HX711_valueAve(uint16_t sample)
{
 810c140:	b5b0      	push	{r4, r5, r7, lr}
 810c142:	b086      	sub	sp, #24
 810c144:	af00      	add	r7, sp, #0
 810c146:	4603      	mov	r3, r0
 810c148:	80fb      	strh	r3, [r7, #6]
  int64_t  ave = 0;
 810c14a:	f04f 0200 	mov.w	r2, #0
 810c14e:	f04f 0300 	mov.w	r3, #0
 810c152:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 810c156:	2300      	movs	r3, #0
 810c158:	81fb      	strh	r3, [r7, #14]
 810c15a:	e00f      	b.n	810c17c <HX711_valueAve+0x3c>
    ave += HX711_value();
 810c15c:	f7ff ff72 	bl	810c044 <HX711_value>
 810c160:	4603      	mov	r3, r0
 810c162:	461a      	mov	r2, r3
 810c164:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810c168:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 810c16c:	1884      	adds	r4, r0, r2
 810c16e:	eb41 0503 	adc.w	r5, r1, r3
 810c172:	e9c7 4504 	strd	r4, r5, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 810c176:	89fb      	ldrh	r3, [r7, #14]
 810c178:	3301      	adds	r3, #1
 810c17a:	81fb      	strh	r3, [r7, #14]
 810c17c:	89fa      	ldrh	r2, [r7, #14]
 810c17e:	88fb      	ldrh	r3, [r7, #6]
 810c180:	429a      	cmp	r2, r3
 810c182:	d3eb      	bcc.n	810c15c <HX711_valueAve+0x1c>
  return (int32_t)(ave / sample);
 810c184:	88fa      	ldrh	r2, [r7, #6]
 810c186:	f04f 0300 	mov.w	r3, #0
 810c18a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 810c18e:	f7f4 fdf3 	bl	8100d78 <__aeabi_ldivmod>
 810c192:	4602      	mov	r2, r0
 810c194:	460b      	mov	r3, r1
 810c196:	4613      	mov	r3, r2
}
 810c198:	4618      	mov	r0, r3
 810c19a:	3718      	adds	r7, #24
 810c19c:	46bd      	mov	sp, r7
 810c19e:	bdb0      	pop	{r4, r5, r7, pc}

0810c1a0 <HX711_isReady>:
//#############################################################################################
int HX711_isReady(){
 810c1a0:	b580      	push	{r7, lr}
 810c1a2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(_hx711_di_gpio, _hx711_di_pin) == GPIO_PIN_RESET;
 810c1a4:	4b08      	ldr	r3, [pc, #32]	; (810c1c8 <HX711_isReady+0x28>)
 810c1a6:	681b      	ldr	r3, [r3, #0]
 810c1a8:	4a08      	ldr	r2, [pc, #32]	; (810c1cc <HX711_isReady+0x2c>)
 810c1aa:	6812      	ldr	r2, [r2, #0]
 810c1ac:	b292      	uxth	r2, r2
 810c1ae:	4611      	mov	r1, r2
 810c1b0:	4618      	mov	r0, r3
 810c1b2:	f7f8 fe55 	bl	8104e60 <HAL_GPIO_ReadPin>
 810c1b6:	4603      	mov	r3, r0
 810c1b8:	2b00      	cmp	r3, #0
 810c1ba:	bf0c      	ite	eq
 810c1bc:	2301      	moveq	r3, #1
 810c1be:	2300      	movne	r3, #0
 810c1c0:	b2db      	uxtb	r3, r3
}
 810c1c2:	4618      	mov	r0, r3
 810c1c4:	bd80      	pop	{r7, pc}
 810c1c6:	bf00      	nop
 810c1c8:	1000a374 	.word	0x1000a374
 810c1cc:	1000a370 	.word	0x1000a370

0810c1d0 <_ZN8IODriverD1Ev>:
#include <functional>


class IODriver {
public:
	virtual ~IODriver() {}
 810c1d0:	b480      	push	{r7}
 810c1d2:	b083      	sub	sp, #12
 810c1d4:	af00      	add	r7, sp, #0
 810c1d6:	6078      	str	r0, [r7, #4]
 810c1d8:	4a04      	ldr	r2, [pc, #16]	; (810c1ec <_ZN8IODriverD1Ev+0x1c>)
 810c1da:	687b      	ldr	r3, [r7, #4]
 810c1dc:	601a      	str	r2, [r3, #0]
 810c1de:	687b      	ldr	r3, [r7, #4]
 810c1e0:	4618      	mov	r0, r3
 810c1e2:	370c      	adds	r7, #12
 810c1e4:	46bd      	mov	sp, r7
 810c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1ea:	4770      	bx	lr
 810c1ec:	08112d00 	.word	0x08112d00

0810c1f0 <_ZN8IODriverD0Ev>:
 810c1f0:	b580      	push	{r7, lr}
 810c1f2:	b082      	sub	sp, #8
 810c1f4:	af00      	add	r7, sp, #0
 810c1f6:	6078      	str	r0, [r7, #4]
 810c1f8:	6878      	ldr	r0, [r7, #4]
 810c1fa:	f7ff ffe9 	bl	810c1d0 <_ZN8IODriverD1Ev>
 810c1fe:	2104      	movs	r1, #4
 810c200:	6878      	ldr	r0, [r7, #4]
 810c202:	f002 fe07 	bl	810ee14 <_ZdlPvj>
 810c206:	687b      	ldr	r3, [r7, #4]
 810c208:	4618      	mov	r0, r3
 810c20a:	3708      	adds	r7, #8
 810c20c:	46bd      	mov	sp, r7
 810c20e:	bd80      	pop	{r7, pc}

0810c210 <_ZN8IODriverC1Ev>:
class IODriver {
 810c210:	b480      	push	{r7}
 810c212:	b083      	sub	sp, #12
 810c214:	af00      	add	r7, sp, #0
 810c216:	6078      	str	r0, [r7, #4]
 810c218:	4a04      	ldr	r2, [pc, #16]	; (810c22c <_ZN8IODriverC1Ev+0x1c>)
 810c21a:	687b      	ldr	r3, [r7, #4]
 810c21c:	601a      	str	r2, [r3, #0]
 810c21e:	687b      	ldr	r3, [r7, #4]
 810c220:	4618      	mov	r0, r3
 810c222:	370c      	adds	r7, #12
 810c224:	46bd      	mov	sp, r7
 810c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c22a:	4770      	bx	lr
 810c22c:	08112d00 	.word	0x08112d00

0810c230 <_ZN16BufferedIODriverC1EPhS0_j>:
#include "Debug/Debug.h"

#ifdef BUILD_WITH_BUFFERED_IO


BufferedIODriver::BufferedIODriver(uint8_t* queueStorage, uint8_t* bufferStorage, size_t length) : bufferStorage(bufferStorage), bufferLength(length) {
 810c230:	b580      	push	{r7, lr}
 810c232:	b086      	sub	sp, #24
 810c234:	af02      	add	r7, sp, #8
 810c236:	60f8      	str	r0, [r7, #12]
 810c238:	60b9      	str	r1, [r7, #8]
 810c23a:	607a      	str	r2, [r7, #4]
 810c23c:	603b      	str	r3, [r7, #0]
 810c23e:	68fb      	ldr	r3, [r7, #12]
 810c240:	4618      	mov	r0, r3
 810c242:	f7ff ffe5 	bl	810c210 <_ZN8IODriverC1Ev>
 810c246:	4a0d      	ldr	r2, [pc, #52]	; (810c27c <_ZN16BufferedIODriverC1EPhS0_j+0x4c>)
 810c248:	68fb      	ldr	r3, [r7, #12]
 810c24a:	601a      	str	r2, [r3, #0]
 810c24c:	68fb      	ldr	r3, [r7, #12]
 810c24e:	687a      	ldr	r2, [r7, #4]
 810c250:	629a      	str	r2, [r3, #40]	; 0x28
 810c252:	68fb      	ldr	r3, [r7, #12]
 810c254:	683a      	ldr	r2, [r7, #0]
 810c256:	62da      	str	r2, [r3, #44]	; 0x2c
	buffer = xMessageBufferCreateStatic(length, queueStorage, &staticMessageBuffer);
 810c258:	68fb      	ldr	r3, [r7, #12]
 810c25a:	3308      	adds	r3, #8
 810c25c:	9300      	str	r3, [sp, #0]
 810c25e:	68bb      	ldr	r3, [r7, #8]
 810c260:	2201      	movs	r2, #1
 810c262:	2100      	movs	r1, #0
 810c264:	6838      	ldr	r0, [r7, #0]
 810c266:	f7fd fb41 	bl	81098ec <xStreamBufferGenericCreateStatic>
 810c26a:	4602      	mov	r2, r0
 810c26c:	68fb      	ldr	r3, [r7, #12]
 810c26e:	605a      	str	r2, [r3, #4]
}
 810c270:	68fb      	ldr	r3, [r7, #12]
 810c272:	4618      	mov	r0, r3
 810c274:	3710      	adds	r7, #16
 810c276:	46bd      	mov	sp, r7
 810c278:	bd80      	pop	{r7, pc}
 810c27a:	bf00      	nop
 810c27c:	08112ce8 	.word	0x08112ce8

0810c280 <_ZN16BufferedIODriver7receiveERKSt8functionIFvhPhmEE>:

void BufferedIODriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 810c280:	b480      	push	{r7}
 810c282:	b083      	sub	sp, #12
 810c284:	af00      	add	r7, sp, #0
 810c286:	6078      	str	r0, [r7, #4]
 810c288:	6039      	str	r1, [r7, #0]
	// Not implemented
}
 810c28a:	bf00      	nop
 810c28c:	370c      	adds	r7, #12
 810c28e:	46bd      	mov	sp, r7
 810c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c294:	4770      	bx	lr

0810c296 <_ZN16BufferedIODriver8transmitEPhm>:

/*
 * Writes data to a buffer shared between Cortex-M4 and Cortex-M7
 * Any thread can call this function
 */
void BufferedIODriver::transmit(uint8_t* data, uint32_t length) {
 810c296:	b580      	push	{r7, lr}
 810c298:	b084      	sub	sp, #16
 810c29a:	af00      	add	r7, sp, #0
 810c29c:	60f8      	str	r0, [r7, #12]
 810c29e:	60b9      	str	r1, [r7, #8]
 810c2a0:	607a      	str	r2, [r7, #4]
	xMessageBufferSend(buffer, data, length, pdMS_TO_TICKS(5));
 810c2a2:	68fb      	ldr	r3, [r7, #12]
 810c2a4:	6858      	ldr	r0, [r3, #4]
 810c2a6:	2305      	movs	r3, #5
 810c2a8:	687a      	ldr	r2, [r7, #4]
 810c2aa:	68b9      	ldr	r1, [r7, #8]
 810c2ac:	f7fd fbd2 	bl	8109a54 <xStreamBufferSend>
}
 810c2b0:	bf00      	nop
 810c2b2:	3710      	adds	r7, #16
 810c2b4:	46bd      	mov	sp, r7
 810c2b6:	bd80      	pop	{r7, pc}

0810c2b8 <_ZN16BufferedIODriverD1Ev>:
#include <message_buffer.h>
#include <cstdint>
#include <functional>


class BufferedIODriver : public IODriver {
 810c2b8:	b580      	push	{r7, lr}
 810c2ba:	b082      	sub	sp, #8
 810c2bc:	af00      	add	r7, sp, #0
 810c2be:	6078      	str	r0, [r7, #4]
 810c2c0:	4a05      	ldr	r2, [pc, #20]	; (810c2d8 <_ZN16BufferedIODriverD1Ev+0x20>)
 810c2c2:	687b      	ldr	r3, [r7, #4]
 810c2c4:	601a      	str	r2, [r3, #0]
 810c2c6:	687b      	ldr	r3, [r7, #4]
 810c2c8:	4618      	mov	r0, r3
 810c2ca:	f7ff ff81 	bl	810c1d0 <_ZN8IODriverD1Ev>
 810c2ce:	687b      	ldr	r3, [r7, #4]
 810c2d0:	4618      	mov	r0, r3
 810c2d2:	3708      	adds	r7, #8
 810c2d4:	46bd      	mov	sp, r7
 810c2d6:	bd80      	pop	{r7, pc}
 810c2d8:	08112ce8 	.word	0x08112ce8

0810c2dc <_ZN16BufferedIODriverD0Ev>:
 810c2dc:	b580      	push	{r7, lr}
 810c2de:	b082      	sub	sp, #8
 810c2e0:	af00      	add	r7, sp, #0
 810c2e2:	6078      	str	r0, [r7, #4]
 810c2e4:	6878      	ldr	r0, [r7, #4]
 810c2e6:	f7ff ffe7 	bl	810c2b8 <_ZN16BufferedIODriverD1Ev>
 810c2ea:	2130      	movs	r1, #48	; 0x30
 810c2ec:	6878      	ldr	r0, [r7, #4]
 810c2ee:	f002 fd91 	bl	810ee14 <_ZdlPvj>
 810c2f2:	687b      	ldr	r3, [r7, #4]
 810c2f4:	4618      	mov	r0, r3
 810c2f6:	3708      	adds	r7, #8
 810c2f8:	46bd      	mov	sp, r7
 810c2fa:	bd80      	pop	{r7, pc}

0810c2fc <_ZN10MessageBusD1Ev>:
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 810c2fc:	b480      	push	{r7}
 810c2fe:	b083      	sub	sp, #12
 810c300:	af00      	add	r7, sp, #0
 810c302:	6078      	str	r0, [r7, #4]
 810c304:	4a04      	ldr	r2, [pc, #16]	; (810c318 <_ZN10MessageBusD1Ev+0x1c>)
 810c306:	687b      	ldr	r3, [r7, #4]
 810c308:	601a      	str	r2, [r3, #0]
 810c30a:	687b      	ldr	r3, [r7, #4]
 810c30c:	4618      	mov	r0, r3
 810c30e:	370c      	adds	r7, #12
 810c310:	46bd      	mov	sp, r7
 810c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c316:	4770      	bx	lr
 810c318:	08112d64 	.word	0x08112d64

0810c31c <_ZN10MessageBusD0Ev>:
 810c31c:	b580      	push	{r7, lr}
 810c31e:	b082      	sub	sp, #8
 810c320:	af00      	add	r7, sp, #0
 810c322:	6078      	str	r0, [r7, #4]
 810c324:	6878      	ldr	r0, [r7, #4]
 810c326:	f7ff ffe9 	bl	810c2fc <_ZN10MessageBusD1Ev>
 810c32a:	f644 0104 	movw	r1, #18436	; 0x4804
 810c32e:	6878      	ldr	r0, [r7, #4]
 810c330:	f002 fd70 	bl	810ee14 <_ZdlPvj>
 810c334:	687b      	ldr	r3, [r7, #4]
 810c336:	4618      	mov	r0, r3
 810c338:	3708      	adds	r7, #8
 810c33a:	46bd      	mov	sp, r7
 810c33c:	bd80      	pop	{r7, pc}

0810c33e <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 810c33e:	b480      	push	{r7}
 810c340:	b083      	sub	sp, #12
 810c342:	af00      	add	r7, sp, #0
 810c344:	6078      	str	r0, [r7, #4]
 810c346:	687b      	ldr	r3, [r7, #4]
 810c348:	4618      	mov	r0, r3
 810c34a:	370c      	adds	r7, #12
 810c34c:	46bd      	mov	sp, r7
 810c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c352:	4770      	bx	lr

0810c354 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 810c354:	b480      	push	{r7}
 810c356:	b083      	sub	sp, #12
 810c358:	af00      	add	r7, sp, #0
 810c35a:	6078      	str	r0, [r7, #4]
 810c35c:	687b      	ldr	r3, [r7, #4]
 810c35e:	4618      	mov	r0, r3
 810c360:	370c      	adds	r7, #12
 810c362:	46bd      	mov	sp, r7
 810c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c368:	4770      	bx	lr

0810c36a <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 810c36a:	b480      	push	{r7}
 810c36c:	b083      	sub	sp, #12
 810c36e:	af00      	add	r7, sp, #0
 810c370:	6078      	str	r0, [r7, #4]
 810c372:	687b      	ldr	r3, [r7, #4]
 810c374:	2200      	movs	r2, #0
 810c376:	609a      	str	r2, [r3, #8]
 810c378:	687b      	ldr	r3, [r7, #4]
 810c37a:	4618      	mov	r0, r3
 810c37c:	370c      	adds	r7, #12
 810c37e:	46bd      	mov	sp, r7
 810c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c384:	4770      	bx	lr

0810c386 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 810c386:	b580      	push	{r7, lr}
 810c388:	b082      	sub	sp, #8
 810c38a:	af00      	add	r7, sp, #0
 810c38c:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 810c38e:	687b      	ldr	r3, [r7, #4]
 810c390:	689b      	ldr	r3, [r3, #8]
 810c392:	2b00      	cmp	r3, #0
 810c394:	d005      	beq.n	810c3a2 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 810c396:	687b      	ldr	r3, [r7, #4]
 810c398:	689b      	ldr	r3, [r3, #8]
 810c39a:	6878      	ldr	r0, [r7, #4]
 810c39c:	6879      	ldr	r1, [r7, #4]
 810c39e:	2203      	movs	r2, #3
 810c3a0:	4798      	blx	r3
    }
 810c3a2:	687b      	ldr	r3, [r7, #4]
 810c3a4:	4618      	mov	r0, r3
 810c3a6:	3708      	adds	r7, #8
 810c3a8:	46bd      	mov	sp, r7
 810c3aa:	bd80      	pop	{r7, pc}

0810c3ac <_ZN10MessageBusC1Ev>:
class MessageBus {
 810c3ac:	b480      	push	{r7}
 810c3ae:	b083      	sub	sp, #12
 810c3b0:	af00      	add	r7, sp, #0
 810c3b2:	6078      	str	r0, [r7, #4]
 810c3b4:	4a04      	ldr	r2, [pc, #16]	; (810c3c8 <_ZN10MessageBusC1Ev+0x1c>)
 810c3b6:	687b      	ldr	r3, [r7, #4]
 810c3b8:	601a      	str	r2, [r3, #0]
 810c3ba:	687b      	ldr	r3, [r7, #4]
 810c3bc:	4618      	mov	r0, r3
 810c3be:	370c      	adds	r7, #12
 810c3c0:	46bd      	mov	sp, r7
 810c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3c6:	4770      	bx	lr
 810c3c8:	08112d64 	.word	0x08112d64

0810c3cc <_ZNSt8functionIFvhPhmEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 810c3cc:	b580      	push	{r7, lr}
 810c3ce:	b082      	sub	sp, #8
 810c3d0:	af00      	add	r7, sp, #0
 810c3d2:	6078      	str	r0, [r7, #4]
 810c3d4:	687b      	ldr	r3, [r7, #4]
 810c3d6:	4618      	mov	r0, r3
 810c3d8:	f7ff ffd5 	bl	810c386 <_ZNSt14_Function_baseD1Ev>
 810c3dc:	687b      	ldr	r3, [r7, #4]
 810c3de:	4618      	mov	r0, r3
 810c3e0:	3708      	adds	r7, #8
 810c3e2:	46bd      	mov	sp, r7
 810c3e4:	bd80      	pop	{r7, pc}
	...

0810c3e8 <_ZN5IOBusC1EP8IODriverPhm>:

#include "IOBus.h"

#include <cstring>

IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 810c3e8:	b590      	push	{r4, r7, lr}
 810c3ea:	b091      	sub	sp, #68	; 0x44
 810c3ec:	af02      	add	r7, sp, #8
 810c3ee:	60f8      	str	r0, [r7, #12]
 810c3f0:	60b9      	str	r1, [r7, #8]
 810c3f2:	607a      	str	r2, [r7, #4]
 810c3f4:	603b      	str	r3, [r7, #0]
 810c3f6:	68fb      	ldr	r3, [r7, #12]
 810c3f8:	4618      	mov	r0, r3
 810c3fa:	f7ff ffd7 	bl	810c3ac <_ZN10MessageBusC1Ev>
 810c3fe:	4a24      	ldr	r2, [pc, #144]	; (810c490 <_ZN5IOBusC1EP8IODriverPhm+0xa8>)
 810c400:	68fb      	ldr	r3, [r7, #12]
 810c402:	601a      	str	r2, [r3, #0]
	this->driver = driver;
 810c404:	68fb      	ldr	r3, [r7, #12]
 810c406:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c40a:	3304      	adds	r3, #4
 810c40c:	68ba      	ldr	r2, [r7, #8]
 810c40e:	601a      	str	r2, [r3, #0]
	this->packet_buffer = buffer;
 810c410:	68fb      	ldr	r3, [r7, #12]
 810c412:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c416:	3308      	adds	r3, #8
 810c418:	687a      	ldr	r2, [r7, #4]
 810c41a:	601a      	str	r2, [r3, #0]
	this->buffer_length = length;
 810c41c:	68fb      	ldr	r3, [r7, #12]
 810c41e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c422:	330c      	adds	r3, #12
 810c424:	683a      	ldr	r2, [r7, #0]
 810c426:	601a      	str	r2, [r3, #0]
	this->buffer_index = 0;
 810c428:	68fb      	ldr	r3, [r7, #12]
 810c42a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c42e:	3310      	adds	r3, #16
 810c430:	2200      	movs	r2, #0
 810c432:	701a      	strb	r2, [r3, #0]

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 810c434:	68bb      	ldr	r3, [r7, #8]
 810c436:	681b      	ldr	r3, [r3, #0]
 810c438:	3308      	adds	r3, #8
 810c43a:	681c      	ldr	r4, [r3, #0]
 810c43c:	4b15      	ldr	r3, [pc, #84]	; (810c494 <_ZN5IOBusC1EP8IODriverPhm+0xac>)
 810c43e:	62fb      	str	r3, [r7, #44]	; 0x2c
 810c440:	2300      	movs	r3, #0
 810c442:	633b      	str	r3, [r7, #48]	; 0x30
 810c444:	68fb      	ldr	r3, [r7, #12]
 810c446:	637b      	str	r3, [r7, #52]	; 0x34
 810c448:	f107 0020 	add.w	r0, r7, #32
 810c44c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 810c450:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 810c454:	4b10      	ldr	r3, [pc, #64]	; (810c498 <_ZN5IOBusC1EP8IODriverPhm+0xb0>)
 810c456:	9301      	str	r3, [sp, #4]
 810c458:	4b10      	ldr	r3, [pc, #64]	; (810c49c <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 810c45a:	9300      	str	r3, [sp, #0]
 810c45c:	4b10      	ldr	r3, [pc, #64]	; (810c4a0 <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
 810c45e:	f000 f8b9 	bl	810c5d4 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
 810c462:	f107 0220 	add.w	r2, r7, #32
 810c466:	f107 0310 	add.w	r3, r7, #16
 810c46a:	4611      	mov	r1, r2
 810c46c:	4618      	mov	r0, r3
 810c46e:	f000 f90b 	bl	810c688 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>
 810c472:	f107 0310 	add.w	r3, r7, #16
 810c476:	4619      	mov	r1, r3
 810c478:	68b8      	ldr	r0, [r7, #8]
 810c47a:	47a0      	blx	r4
 810c47c:	f107 0310 	add.w	r3, r7, #16
 810c480:	4618      	mov	r0, r3
 810c482:	f7ff ffa3 	bl	810c3cc <_ZNSt8functionIFvhPhmEED1Ev>
}
 810c486:	68fb      	ldr	r3, [r7, #12]
 810c488:	4618      	mov	r0, r3
 810c48a:	373c      	adds	r7, #60	; 0x3c
 810c48c:	46bd      	mov	sp, r7
 810c48e:	bd90      	pop	{r4, r7, pc}
 810c490:	08112d4c 	.word	0x08112d4c
 810c494:	0810c4a5 	.word	0x0810c4a5
 810c498:	0811320a 	.word	0x0811320a
 810c49c:	08113209 	.word	0x08113209
 810c4a0:	08113208 	.word	0x08113208

0810c4a4 <_ZN5IOBus7receiveEhPhm>:

void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 810c4a4:	b580      	push	{r7, lr}
 810c4a6:	b084      	sub	sp, #16
 810c4a8:	af00      	add	r7, sp, #0
 810c4aa:	60f8      	str	r0, [r7, #12]
 810c4ac:	607a      	str	r2, [r7, #4]
 810c4ae:	603b      	str	r3, [r7, #0]
 810c4b0:	460b      	mov	r3, r1
 810c4b2:	72fb      	strb	r3, [r7, #11]
	while(length > buffer_length) {
 810c4b4:	68fb      	ldr	r3, [r7, #12]
 810c4b6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c4ba:	330c      	adds	r3, #12
 810c4bc:	681b      	ldr	r3, [r3, #0]
 810c4be:	683a      	ldr	r2, [r7, #0]
 810c4c0:	429a      	cmp	r2, r3
 810c4c2:	d91a      	bls.n	810c4fa <_ZN5IOBus7receiveEhPhm+0x56>
		MessageBus::receive(sender_id, buffer, buffer_length);
 810c4c4:	68f8      	ldr	r0, [r7, #12]
 810c4c6:	68fb      	ldr	r3, [r7, #12]
 810c4c8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c4cc:	330c      	adds	r3, #12
 810c4ce:	681b      	ldr	r3, [r3, #0]
 810c4d0:	7af9      	ldrb	r1, [r7, #11]
 810c4d2:	687a      	ldr	r2, [r7, #4]
 810c4d4:	f001 fd94 	bl	810e000 <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 810c4d8:	68fb      	ldr	r3, [r7, #12]
 810c4da:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c4de:	330c      	adds	r3, #12
 810c4e0:	681b      	ldr	r3, [r3, #0]
 810c4e2:	683a      	ldr	r2, [r7, #0]
 810c4e4:	1ad3      	subs	r3, r2, r3
 810c4e6:	603b      	str	r3, [r7, #0]
		buffer += buffer_length;
 810c4e8:	68fb      	ldr	r3, [r7, #12]
 810c4ea:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c4ee:	330c      	adds	r3, #12
 810c4f0:	681b      	ldr	r3, [r3, #0]
 810c4f2:	687a      	ldr	r2, [r7, #4]
 810c4f4:	4413      	add	r3, r2
 810c4f6:	607b      	str	r3, [r7, #4]
	while(length > buffer_length) {
 810c4f8:	e7dc      	b.n	810c4b4 <_ZN5IOBus7receiveEhPhm+0x10>
	}

	MessageBus::receive(sender_id, buffer, length);
 810c4fa:	68f8      	ldr	r0, [r7, #12]
 810c4fc:	7af9      	ldrb	r1, [r7, #11]
 810c4fe:	683b      	ldr	r3, [r7, #0]
 810c500:	687a      	ldr	r2, [r7, #4]
 810c502:	f001 fd7d 	bl	810e000 <_ZN10MessageBus7receiveEhPhm>
}
 810c506:	bf00      	nop
 810c508:	3710      	adds	r7, #16
 810c50a:	46bd      	mov	sp, r7
 810c50c:	bd80      	pop	{r7, pc}

0810c50e <_ZN5IOBus6appendEPhm>:

uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
 810c50e:	b580      	push	{r7, lr}
 810c510:	b086      	sub	sp, #24
 810c512:	af00      	add	r7, sp, #0
 810c514:	60f8      	str	r0, [r7, #12]
 810c516:	60b9      	str	r1, [r7, #8]
 810c518:	607a      	str	r2, [r7, #4]
	uint32_t remaining_length = buffer_length - buffer_index;
 810c51a:	68fb      	ldr	r3, [r7, #12]
 810c51c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c520:	330c      	adds	r3, #12
 810c522:	681a      	ldr	r2, [r3, #0]
 810c524:	68fb      	ldr	r3, [r7, #12]
 810c526:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c52a:	3310      	adds	r3, #16
 810c52c:	781b      	ldrb	r3, [r3, #0]
 810c52e:	1ad3      	subs	r3, r2, r3
 810c530:	617b      	str	r3, [r7, #20]

	if(length > remaining_length) {
 810c532:	687a      	ldr	r2, [r7, #4]
 810c534:	697b      	ldr	r3, [r7, #20]
 810c536:	429a      	cmp	r2, r3
 810c538:	d901      	bls.n	810c53e <_ZN5IOBus6appendEPhm+0x30>
		length = remaining_length;
 810c53a:	697b      	ldr	r3, [r7, #20]
 810c53c:	607b      	str	r3, [r7, #4]
	}

	memcpy(packet_buffer + buffer_index, buffer, length);
 810c53e:	68fb      	ldr	r3, [r7, #12]
 810c540:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c544:	3308      	adds	r3, #8
 810c546:	681a      	ldr	r2, [r3, #0]
 810c548:	68fb      	ldr	r3, [r7, #12]
 810c54a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c54e:	3310      	adds	r3, #16
 810c550:	781b      	ldrb	r3, [r3, #0]
 810c552:	4413      	add	r3, r2
 810c554:	687a      	ldr	r2, [r7, #4]
 810c556:	68b9      	ldr	r1, [r7, #8]
 810c558:	4618      	mov	r0, r3
 810c55a:	f002 ffbf 	bl	810f4dc <memcpy>

	buffer_index += length;
 810c55e:	68fb      	ldr	r3, [r7, #12]
 810c560:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c564:	3310      	adds	r3, #16
 810c566:	781a      	ldrb	r2, [r3, #0]
 810c568:	687b      	ldr	r3, [r7, #4]
 810c56a:	b2db      	uxtb	r3, r3
 810c56c:	4413      	add	r3, r2
 810c56e:	b2da      	uxtb	r2, r3
 810c570:	68fb      	ldr	r3, [r7, #12]
 810c572:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c576:	3310      	adds	r3, #16
 810c578:	701a      	strb	r2, [r3, #0]


	return length;
 810c57a:	687b      	ldr	r3, [r7, #4]
 810c57c:	b2db      	uxtb	r3, r3
}
 810c57e:	4618      	mov	r0, r3
 810c580:	3718      	adds	r7, #24
 810c582:	46bd      	mov	sp, r7
 810c584:	bd80      	pop	{r7, pc}

0810c586 <_ZN5IOBus8transmitEv>:

void IOBus::transmit() {
 810c586:	b590      	push	{r4, r7, lr}
 810c588:	b083      	sub	sp, #12
 810c58a:	af00      	add	r7, sp, #0
 810c58c:	6078      	str	r0, [r7, #4]
	driver->transmit(packet_buffer, buffer_index);
 810c58e:	687b      	ldr	r3, [r7, #4]
 810c590:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c594:	3304      	adds	r3, #4
 810c596:	6818      	ldr	r0, [r3, #0]
 810c598:	687b      	ldr	r3, [r7, #4]
 810c59a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c59e:	3304      	adds	r3, #4
 810c5a0:	681b      	ldr	r3, [r3, #0]
 810c5a2:	681b      	ldr	r3, [r3, #0]
 810c5a4:	330c      	adds	r3, #12
 810c5a6:	681c      	ldr	r4, [r3, #0]
 810c5a8:	687b      	ldr	r3, [r7, #4]
 810c5aa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c5ae:	3308      	adds	r3, #8
 810c5b0:	6819      	ldr	r1, [r3, #0]
 810c5b2:	687b      	ldr	r3, [r7, #4]
 810c5b4:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c5b8:	3310      	adds	r3, #16
 810c5ba:	781b      	ldrb	r3, [r3, #0]
 810c5bc:	461a      	mov	r2, r3
 810c5be:	47a0      	blx	r4
	buffer_index = 0;
 810c5c0:	687b      	ldr	r3, [r7, #4]
 810c5c2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 810c5c6:	3310      	adds	r3, #16
 810c5c8:	2200      	movs	r2, #0
 810c5ca:	701a      	strb	r2, [r3, #0]
}
 810c5cc:	bf00      	nop
 810c5ce:	370c      	adds	r7, #12
 810c5d0:	46bd      	mov	sp, r7
 810c5d2:	bd90      	pop	{r4, r7, pc}

0810c5d4 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 810c5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c5d8:	b086      	sub	sp, #24
 810c5da:	af02      	add	r7, sp, #8
 810c5dc:	60f8      	str	r0, [r7, #12]
 810c5de:	60b9      	str	r1, [r7, #8]
 810c5e0:	607a      	str	r2, [r7, #4]
 810c5e2:	603b      	str	r3, [r7, #0]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 810c5e4:	68b8      	ldr	r0, [r7, #8]
 810c5e6:	f000 f877 	bl	810c6d8 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c5ea:	4605      	mov	r5, r0
 810c5ec:	6878      	ldr	r0, [r7, #4]
 810c5ee:	f000 f87e 	bl	810c6ee <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810c5f2:	4606      	mov	r6, r0
 810c5f4:	6838      	ldr	r0, [r7, #0]
 810c5f6:	f000 f885 	bl	810c704 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c5fa:	4680      	mov	r8, r0
 810c5fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810c5fe:	f000 f88c 	bl	810c71a <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c602:	4604      	mov	r4, r0
 810c604:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810c606:	f000 f893 	bl	810c730 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c60a:	4603      	mov	r3, r0
 810c60c:	9301      	str	r3, [sp, #4]
 810c60e:	9400      	str	r4, [sp, #0]
 810c610:	4643      	mov	r3, r8
 810c612:	4632      	mov	r2, r6
 810c614:	4629      	mov	r1, r5
 810c616:	68f8      	ldr	r0, [r7, #12]
 810c618:	f000 f895 	bl	810c746 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
    }
 810c61c:	68f8      	ldr	r0, [r7, #12]
 810c61e:	3710      	adds	r7, #16
 810c620:	46bd      	mov	sp, r7
 810c622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810c626 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 810c626:	b580      	push	{r7, lr}
 810c628:	b082      	sub	sp, #8
 810c62a:	af00      	add	r7, sp, #0
 810c62c:	6078      	str	r0, [r7, #4]
 810c62e:	6039      	str	r1, [r7, #0]
 810c630:	687b      	ldr	r3, [r7, #4]
 810c632:	683a      	ldr	r2, [r7, #0]
 810c634:	4611      	mov	r1, r2
 810c636:	4618      	mov	r0, r3
 810c638:	f000 f8cc 	bl	810c7d4 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 810c63c:	687b      	ldr	r3, [r7, #4]
 810c63e:	4618      	mov	r0, r3
 810c640:	3708      	adds	r7, #8
 810c642:	46bd      	mov	sp, r7
 810c644:	bd80      	pop	{r7, pc}

0810c646 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
      _Bind(_Bind&& __b)
 810c646:	b590      	push	{r4, r7, lr}
 810c648:	b083      	sub	sp, #12
 810c64a:	af00      	add	r7, sp, #0
 810c64c:	6078      	str	r0, [r7, #4]
 810c64e:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 810c650:	683b      	ldr	r3, [r7, #0]
 810c652:	4618      	mov	r0, r3
 810c654:	f000 f8a8 	bl	810c7a8 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810c658:	4602      	mov	r2, r0
 810c65a:	687b      	ldr	r3, [r7, #4]
 810c65c:	e892 0003 	ldmia.w	r2, {r0, r1}
 810c660:	e883 0003 	stmia.w	r3, {r0, r1}
 810c664:	687b      	ldr	r3, [r7, #4]
 810c666:	f103 0408 	add.w	r4, r3, #8
 810c66a:	683b      	ldr	r3, [r7, #0]
 810c66c:	3308      	adds	r3, #8
 810c66e:	4618      	mov	r0, r3
 810c670:	f000 f8a5 	bl	810c7be <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>
 810c674:	4603      	mov	r3, r0
 810c676:	4619      	mov	r1, r3
 810c678:	4620      	mov	r0, r4
 810c67a:	f7ff ffd4 	bl	810c626 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
      { }
 810c67e:	687b      	ldr	r3, [r7, #4]
 810c680:	4618      	mov	r0, r3
 810c682:	370c      	adds	r7, #12
 810c684:	46bd      	mov	sp, r7
 810c686:	bd90      	pop	{r4, r7, pc}

0810c688 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 810c688:	b590      	push	{r4, r7, lr}
 810c68a:	b083      	sub	sp, #12
 810c68c:	af00      	add	r7, sp, #0
 810c68e:	6078      	str	r0, [r7, #4]
 810c690:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 810c692:	687b      	ldr	r3, [r7, #4]
 810c694:	4618      	mov	r0, r3
 810c696:	f7ff fe68 	bl	810c36a <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 810c69a:	6838      	ldr	r0, [r7, #0]
 810c69c:	f000 f8bd 	bl	810c81a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
 810c6a0:	4603      	mov	r3, r0
 810c6a2:	2b00      	cmp	r3, #0
 810c6a4:	d00e      	beq.n	810c6c4 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x3c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 810c6a6:	687c      	ldr	r4, [r7, #4]
 810c6a8:	6838      	ldr	r0, [r7, #0]
 810c6aa:	f000 f8c1 	bl	810c830 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810c6ae:	4603      	mov	r3, r0
 810c6b0:	4619      	mov	r1, r3
 810c6b2:	4620      	mov	r0, r4
 810c6b4:	f000 f8c7 	bl	810c846 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>
	    _M_invoker = &_My_handler::_M_invoke;
 810c6b8:	687b      	ldr	r3, [r7, #4]
 810c6ba:	4a05      	ldr	r2, [pc, #20]	; (810c6d0 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x48>)
 810c6bc:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 810c6be:	687b      	ldr	r3, [r7, #4]
 810c6c0:	4a04      	ldr	r2, [pc, #16]	; (810c6d4 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x4c>)
 810c6c2:	609a      	str	r2, [r3, #8]
	  }
      }
 810c6c4:	687b      	ldr	r3, [r7, #4]
 810c6c6:	4618      	mov	r0, r3
 810c6c8:	370c      	adds	r7, #12
 810c6ca:	46bd      	mov	sp, r7
 810c6cc:	bd90      	pop	{r4, r7, pc}
 810c6ce:	bf00      	nop
 810c6d0:	0810c86b 	.word	0x0810c86b
 810c6d4:	0810c8ad 	.word	0x0810c8ad

0810c6d8 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810c6d8:	b480      	push	{r7}
 810c6da:	b083      	sub	sp, #12
 810c6dc:	af00      	add	r7, sp, #0
 810c6de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810c6e0:	687b      	ldr	r3, [r7, #4]
 810c6e2:	4618      	mov	r0, r3
 810c6e4:	370c      	adds	r7, #12
 810c6e6:	46bd      	mov	sp, r7
 810c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6ec:	4770      	bx	lr

0810c6ee <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810c6ee:	b480      	push	{r7}
 810c6f0:	b083      	sub	sp, #12
 810c6f2:	af00      	add	r7, sp, #0
 810c6f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810c6f6:	687b      	ldr	r3, [r7, #4]
 810c6f8:	4618      	mov	r0, r3
 810c6fa:	370c      	adds	r7, #12
 810c6fc:	46bd      	mov	sp, r7
 810c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c702:	4770      	bx	lr

0810c704 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810c704:	b480      	push	{r7}
 810c706:	b083      	sub	sp, #12
 810c708:	af00      	add	r7, sp, #0
 810c70a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810c70c:	687b      	ldr	r3, [r7, #4]
 810c70e:	4618      	mov	r0, r3
 810c710:	370c      	adds	r7, #12
 810c712:	46bd      	mov	sp, r7
 810c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c718:	4770      	bx	lr

0810c71a <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810c71a:	b480      	push	{r7}
 810c71c:	b083      	sub	sp, #12
 810c71e:	af00      	add	r7, sp, #0
 810c720:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810c722:	687b      	ldr	r3, [r7, #4]
 810c724:	4618      	mov	r0, r3
 810c726:	370c      	adds	r7, #12
 810c728:	46bd      	mov	sp, r7
 810c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c72e:	4770      	bx	lr

0810c730 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810c730:	b480      	push	{r7}
 810c732:	b083      	sub	sp, #12
 810c734:	af00      	add	r7, sp, #0
 810c736:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810c738:	687b      	ldr	r3, [r7, #4]
 810c73a:	4618      	mov	r0, r3
 810c73c:	370c      	adds	r7, #12
 810c73e:	46bd      	mov	sp, r7
 810c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c744:	4770      	bx	lr

0810c746 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 810c746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c74a:	b086      	sub	sp, #24
 810c74c:	af02      	add	r7, sp, #8
 810c74e:	60f8      	str	r0, [r7, #12]
 810c750:	60b9      	str	r1, [r7, #8]
 810c752:	607a      	str	r2, [r7, #4]
 810c754:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 810c756:	68b8      	ldr	r0, [r7, #8]
 810c758:	f000 f826 	bl	810c7a8 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 810c75c:	4602      	mov	r2, r0
 810c75e:	68fb      	ldr	r3, [r7, #12]
 810c760:	e892 0003 	ldmia.w	r2, {r0, r1}
 810c764:	e883 0003 	stmia.w	r3, {r0, r1}
 810c768:	68fb      	ldr	r3, [r7, #12]
 810c76a:	f103 0408 	add.w	r4, r3, #8
 810c76e:	6878      	ldr	r0, [r7, #4]
 810c770:	f7ff ffbd 	bl	810c6ee <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810c774:	4605      	mov	r5, r0
 810c776:	6838      	ldr	r0, [r7, #0]
 810c778:	f7ff ffc4 	bl	810c704 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c77c:	4606      	mov	r6, r0
 810c77e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810c780:	f7ff ffcb 	bl	810c71a <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c784:	4680      	mov	r8, r0
 810c786:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810c788:	f7ff ffd2 	bl	810c730 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c78c:	4603      	mov	r3, r0
 810c78e:	9300      	str	r3, [sp, #0]
 810c790:	4643      	mov	r3, r8
 810c792:	4632      	mov	r2, r6
 810c794:	4629      	mov	r1, r5
 810c796:	4620      	mov	r0, r4
 810c798:	f000 f8c2 	bl	810c920 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>
	{ }
 810c79c:	68fb      	ldr	r3, [r7, #12]
 810c79e:	4618      	mov	r0, r3
 810c7a0:	3710      	adds	r7, #16
 810c7a2:	46bd      	mov	sp, r7
 810c7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810c7a8 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 810c7a8:	b480      	push	{r7}
 810c7aa:	b083      	sub	sp, #12
 810c7ac:	af00      	add	r7, sp, #0
 810c7ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810c7b0:	687b      	ldr	r3, [r7, #4]
 810c7b2:	4618      	mov	r0, r3
 810c7b4:	370c      	adds	r7, #12
 810c7b6:	46bd      	mov	sp, r7
 810c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c7bc:	4770      	bx	lr

0810c7be <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 810c7be:	b480      	push	{r7}
 810c7c0:	b083      	sub	sp, #12
 810c7c2:	af00      	add	r7, sp, #0
 810c7c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810c7c6:	687b      	ldr	r3, [r7, #4]
 810c7c8:	4618      	mov	r0, r3
 810c7ca:	370c      	adds	r7, #12
 810c7cc:	46bd      	mov	sp, r7
 810c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c7d2:	4770      	bx	lr

0810c7d4 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810c7d4:	b590      	push	{r4, r7, lr}
 810c7d6:	b083      	sub	sp, #12
 810c7d8:	af00      	add	r7, sp, #0
 810c7da:	6078      	str	r0, [r7, #4]
 810c7dc:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810c7de:	6838      	ldr	r0, [r7, #0]
 810c7e0:	f000 f8c4 	bl	810c96c <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>
 810c7e4:	4603      	mov	r3, r0
 810c7e6:	4618      	mov	r0, r3
 810c7e8:	f000 f8cb 	bl	810c982 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>
 810c7ec:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810c7ee:	4619      	mov	r1, r3
 810c7f0:	6878      	ldr	r0, [r7, #4]
 810c7f2:	f000 f8de 	bl	810c9b2 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
 810c7f6:	687c      	ldr	r4, [r7, #4]
 810c7f8:	6838      	ldr	r0, [r7, #0]
 810c7fa:	f000 f8cd 	bl	810c998 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810c7fe:	4603      	mov	r3, r0
 810c800:	4618      	mov	r0, r3
 810c802:	f7ff ff74 	bl	810c6ee <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810c806:	4603      	mov	r3, r0
 810c808:	4619      	mov	r1, r3
 810c80a:	4620      	mov	r0, r4
 810c80c:	f000 f8f3 	bl	810c9f6 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810c810:	687b      	ldr	r3, [r7, #4]
 810c812:	4618      	mov	r0, r3
 810c814:	370c      	adds	r7, #12
 810c816:	46bd      	mov	sp, r7
 810c818:	bd90      	pop	{r4, r7, pc}

0810c81a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 810c81a:	b480      	push	{r7}
 810c81c:	b083      	sub	sp, #12
 810c81e:	af00      	add	r7, sp, #0
 810c820:	6078      	str	r0, [r7, #4]
	  { return true; }
 810c822:	2301      	movs	r3, #1
 810c824:	4618      	mov	r0, r3
 810c826:	370c      	adds	r7, #12
 810c828:	46bd      	mov	sp, r7
 810c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c82e:	4770      	bx	lr

0810c830 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
 810c830:	b480      	push	{r7}
 810c832:	b083      	sub	sp, #12
 810c834:	af00      	add	r7, sp, #0
 810c836:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810c838:	687b      	ldr	r3, [r7, #4]
 810c83a:	4618      	mov	r0, r3
 810c83c:	370c      	adds	r7, #12
 810c83e:	46bd      	mov	sp, r7
 810c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c844:	4770      	bx	lr

0810c846 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 810c846:	b590      	push	{r4, r7, lr}
 810c848:	b085      	sub	sp, #20
 810c84a:	af00      	add	r7, sp, #0
 810c84c:	6078      	str	r0, [r7, #4]
 810c84e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 810c850:	6838      	ldr	r0, [r7, #0]
 810c852:	f7ff ffed 	bl	810c830 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810c856:	4603      	mov	r3, r0
 810c858:	4622      	mov	r2, r4
 810c85a:	4619      	mov	r1, r3
 810c85c:	6878      	ldr	r0, [r7, #4]
 810c85e:	f000 f8db 	bl	810ca18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>
 810c862:	bf00      	nop
 810c864:	3714      	adds	r7, #20
 810c866:	46bd      	mov	sp, r7
 810c868:	bd90      	pop	{r4, r7, pc}

0810c86a <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 810c86a:	b5f0      	push	{r4, r5, r6, r7, lr}
 810c86c:	b085      	sub	sp, #20
 810c86e:	af00      	add	r7, sp, #0
 810c870:	60f8      	str	r0, [r7, #12]
 810c872:	60b9      	str	r1, [r7, #8]
 810c874:	607a      	str	r2, [r7, #4]
 810c876:	603b      	str	r3, [r7, #0]
	(*_Base::_M_get_pointer(__functor))(
 810c878:	68f8      	ldr	r0, [r7, #12]
 810c87a:	f000 f8e9 	bl	810ca50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810c87e:	4604      	mov	r4, r0
 810c880:	68b8      	ldr	r0, [r7, #8]
 810c882:	f000 f8f2 	bl	810ca6a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810c886:	4605      	mov	r5, r0
 810c888:	6878      	ldr	r0, [r7, #4]
 810c88a:	f000 f8f9 	bl	810ca80 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810c88e:	4606      	mov	r6, r0
 810c890:	6838      	ldr	r0, [r7, #0]
 810c892:	f000 f900 	bl	810ca96 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810c896:	4603      	mov	r3, r0
 810c898:	4632      	mov	r2, r6
 810c89a:	4629      	mov	r1, r5
 810c89c:	4620      	mov	r0, r4
 810c89e:	f000 f905 	bl	810caac <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
      }
 810c8a2:	bf00      	nop
 810c8a4:	3714      	adds	r7, #20
 810c8a6:	46bd      	mov	sp, r7
 810c8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0810c8ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 810c8ac:	b5b0      	push	{r4, r5, r7, lr}
 810c8ae:	b086      	sub	sp, #24
 810c8b0:	af00      	add	r7, sp, #0
 810c8b2:	60f8      	str	r0, [r7, #12]
 810c8b4:	60b9      	str	r1, [r7, #8]
 810c8b6:	4613      	mov	r3, r2
 810c8b8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 810c8ba:	79fb      	ldrb	r3, [r7, #7]
 810c8bc:	2b03      	cmp	r3, #3
 810c8be:	d827      	bhi.n	810c910 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
 810c8c0:	a201      	add	r2, pc, #4	; (adr r2, 810c8c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
 810c8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c8c6:	bf00      	nop
 810c8c8:	0810c8d9 	.word	0x0810c8d9
 810c8cc:	0810c8e7 	.word	0x0810c8e7
 810c8d0:	0810c8fb 	.word	0x0810c8fb
 810c8d4:	0810c907 	.word	0x0810c907
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 810c8d8:	68f8      	ldr	r0, [r7, #12]
 810c8da:	f000 f90a 	bl	810caf2 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 810c8de:	4603      	mov	r3, r0
 810c8e0:	4a0e      	ldr	r2, [pc, #56]	; (810c91c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x70>)
 810c8e2:	601a      	str	r2, [r3, #0]
	      break;
 810c8e4:	e014      	b.n	810c910 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 810c8e6:	68f8      	ldr	r0, [r7, #12]
 810c8e8:	f000 f90f 	bl	810cb0a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810c8ec:	4604      	mov	r4, r0
 810c8ee:	68b8      	ldr	r0, [r7, #8]
 810c8f0:	f000 f8ae 	bl	810ca50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 810c8f4:	4603      	mov	r3, r0
 810c8f6:	6023      	str	r3, [r4, #0]
	      break;
 810c8f8:	e00a      	b.n	810c910 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 810c8fa:	462a      	mov	r2, r5
 810c8fc:	68b9      	ldr	r1, [r7, #8]
 810c8fe:	68f8      	ldr	r0, [r7, #12]
 810c900:	f000 f90f 	bl	810cb22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>
	      break;
 810c904:	e004      	b.n	810c910 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 810c906:	4621      	mov	r1, r4
 810c908:	68f8      	ldr	r0, [r7, #12]
 810c90a:	f000 f928 	bl	810cb5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 810c90e:	bf00      	nop
	  return false;
 810c910:	2300      	movs	r3, #0
	}
 810c912:	4618      	mov	r0, r3
 810c914:	3718      	adds	r7, #24
 810c916:	46bd      	mov	sp, r7
 810c918:	bdb0      	pop	{r4, r5, r7, pc}
 810c91a:	bf00      	nop
 810c91c:	08112d74 	.word	0x08112d74

0810c920 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 810c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c924:	b086      	sub	sp, #24
 810c926:	af02      	add	r7, sp, #8
 810c928:	60f8      	str	r0, [r7, #12]
 810c92a:	60b9      	str	r1, [r7, #8]
 810c92c:	607a      	str	r2, [r7, #4]
 810c92e:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 810c930:	68fc      	ldr	r4, [r7, #12]
 810c932:	68b8      	ldr	r0, [r7, #8]
 810c934:	f7ff fedb 	bl	810c6ee <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810c938:	4605      	mov	r5, r0
 810c93a:	6878      	ldr	r0, [r7, #4]
 810c93c:	f7ff fee2 	bl	810c704 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c940:	4606      	mov	r6, r0
 810c942:	6838      	ldr	r0, [r7, #0]
 810c944:	f7ff fee9 	bl	810c71a <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c948:	4680      	mov	r8, r0
 810c94a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810c94c:	f7ff fef0 	bl	810c730 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810c950:	4603      	mov	r3, r0
 810c952:	9300      	str	r3, [sp, #0]
 810c954:	4643      	mov	r3, r8
 810c956:	4632      	mov	r2, r6
 810c958:	4629      	mov	r1, r5
 810c95a:	4620      	mov	r0, r4
 810c95c:	f000 f913 	bl	810cb86 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
 810c960:	68fb      	ldr	r3, [r7, #12]
 810c962:	4618      	mov	r0, r3
 810c964:	3710      	adds	r7, #16
 810c966:	46bd      	mov	sp, r7
 810c968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810c96c <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810c96c:	b480      	push	{r7}
 810c96e:	b083      	sub	sp, #12
 810c970:	af00      	add	r7, sp, #0
 810c972:	6078      	str	r0, [r7, #4]
 810c974:	687b      	ldr	r3, [r7, #4]
 810c976:	4618      	mov	r0, r3
 810c978:	370c      	adds	r7, #12
 810c97a:	46bd      	mov	sp, r7
 810c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c980:	4770      	bx	lr

0810c982 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810c982:	b480      	push	{r7}
 810c984:	b083      	sub	sp, #12
 810c986:	af00      	add	r7, sp, #0
 810c988:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810c98a:	687b      	ldr	r3, [r7, #4]
 810c98c:	4618      	mov	r0, r3
 810c98e:	370c      	adds	r7, #12
 810c990:	46bd      	mov	sp, r7
 810c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c996:	4770      	bx	lr

0810c998 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810c998:	b580      	push	{r7, lr}
 810c99a:	b082      	sub	sp, #8
 810c99c:	af00      	add	r7, sp, #0
 810c99e:	6078      	str	r0, [r7, #4]
 810c9a0:	687b      	ldr	r3, [r7, #4]
 810c9a2:	4618      	mov	r0, r3
 810c9a4:	f000 f915 	bl	810cbd2 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
 810c9a8:	4603      	mov	r3, r0
 810c9aa:	4618      	mov	r0, r3
 810c9ac:	3708      	adds	r7, #8
 810c9ae:	46bd      	mov	sp, r7
 810c9b0:	bd80      	pop	{r7, pc}

0810c9b2 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810c9b2:	b580      	push	{r7, lr}
 810c9b4:	b082      	sub	sp, #8
 810c9b6:	af00      	add	r7, sp, #0
 810c9b8:	6078      	str	r0, [r7, #4]
 810c9ba:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810c9bc:	6838      	ldr	r0, [r7, #0]
 810c9be:	f000 f913 	bl	810cbe8 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>
 810c9c2:	4603      	mov	r3, r0
 810c9c4:	4618      	mov	r0, r3
 810c9c6:	f000 f91a 	bl	810cbfe <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>
 810c9ca:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810c9cc:	4619      	mov	r1, r3
 810c9ce:	6878      	ldr	r0, [r7, #4]
 810c9d0:	f000 f937 	bl	810cc42 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
 810c9d4:	6838      	ldr	r0, [r7, #0]
 810c9d6:	f000 f91d 	bl	810cc14 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810c9da:	4603      	mov	r3, r0
 810c9dc:	4618      	mov	r0, r3
 810c9de:	f000 f925 	bl	810cc2c <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810c9e2:	4603      	mov	r3, r0
 810c9e4:	4619      	mov	r1, r3
 810c9e6:	6878      	ldr	r0, [r7, #4]
 810c9e8:	f000 f94d 	bl	810cc86 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
 810c9ec:	687b      	ldr	r3, [r7, #4]
 810c9ee:	4618      	mov	r0, r3
 810c9f0:	3708      	adds	r7, #8
 810c9f2:	46bd      	mov	sp, r7
 810c9f4:	bd80      	pop	{r7, pc}

0810c9f6 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810c9f6:	b580      	push	{r7, lr}
 810c9f8:	b082      	sub	sp, #8
 810c9fa:	af00      	add	r7, sp, #0
 810c9fc:	6078      	str	r0, [r7, #4]
 810c9fe:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810ca00:	6838      	ldr	r0, [r7, #0]
 810ca02:	f7ff fe74 	bl	810c6ee <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810ca06:	4603      	mov	r3, r0
 810ca08:	681a      	ldr	r2, [r3, #0]
 810ca0a:	687b      	ldr	r3, [r7, #4]
 810ca0c:	601a      	str	r2, [r3, #0]
 810ca0e:	687b      	ldr	r3, [r7, #4]
 810ca10:	4618      	mov	r0, r3
 810ca12:	3708      	adds	r7, #8
 810ca14:	46bd      	mov	sp, r7
 810ca16:	bd80      	pop	{r7, pc}

0810ca18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 810ca18:	b5b0      	push	{r4, r5, r7, lr}
 810ca1a:	b084      	sub	sp, #16
 810ca1c:	af00      	add	r7, sp, #0
 810ca1e:	60f8      	str	r0, [r7, #12]
 810ca20:	60b9      	str	r1, [r7, #8]
 810ca22:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 810ca24:	68b8      	ldr	r0, [r7, #8]
 810ca26:	f7ff ff03 	bl	810c830 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 810ca2a:	4605      	mov	r5, r0
 810ca2c:	200c      	movs	r0, #12
 810ca2e:	f7fe febb 	bl	810b7a8 <_Znwj>
 810ca32:	4603      	mov	r3, r0
 810ca34:	461c      	mov	r4, r3
 810ca36:	4629      	mov	r1, r5
 810ca38:	4620      	mov	r0, r4
 810ca3a:	f7ff fe04 	bl	810c646 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
 810ca3e:	68f8      	ldr	r0, [r7, #12]
 810ca40:	f000 f863 	bl	810cb0a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810ca44:	4603      	mov	r3, r0
 810ca46:	601c      	str	r4, [r3, #0]
 810ca48:	bf00      	nop
 810ca4a:	3710      	adds	r7, #16
 810ca4c:	46bd      	mov	sp, r7
 810ca4e:	bdb0      	pop	{r4, r5, r7, pc}

0810ca50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 810ca50:	b580      	push	{r7, lr}
 810ca52:	b082      	sub	sp, #8
 810ca54:	af00      	add	r7, sp, #0
 810ca56:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 810ca58:	6878      	ldr	r0, [r7, #4]
 810ca5a:	f000 f921 	bl	810cca0 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810ca5e:	4603      	mov	r3, r0
 810ca60:	681b      	ldr	r3, [r3, #0]
	}
 810ca62:	4618      	mov	r0, r3
 810ca64:	3708      	adds	r7, #8
 810ca66:	46bd      	mov	sp, r7
 810ca68:	bd80      	pop	{r7, pc}

0810ca6a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810ca6a:	b480      	push	{r7}
 810ca6c:	b083      	sub	sp, #12
 810ca6e:	af00      	add	r7, sp, #0
 810ca70:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ca72:	687b      	ldr	r3, [r7, #4]
 810ca74:	4618      	mov	r0, r3
 810ca76:	370c      	adds	r7, #12
 810ca78:	46bd      	mov	sp, r7
 810ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca7e:	4770      	bx	lr

0810ca80 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810ca80:	b480      	push	{r7}
 810ca82:	b083      	sub	sp, #12
 810ca84:	af00      	add	r7, sp, #0
 810ca86:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ca88:	687b      	ldr	r3, [r7, #4]
 810ca8a:	4618      	mov	r0, r3
 810ca8c:	370c      	adds	r7, #12
 810ca8e:	46bd      	mov	sp, r7
 810ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca94:	4770      	bx	lr

0810ca96 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810ca96:	b480      	push	{r7}
 810ca98:	b083      	sub	sp, #12
 810ca9a:	af00      	add	r7, sp, #0
 810ca9c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ca9e:	687b      	ldr	r3, [r7, #4]
 810caa0:	4618      	mov	r0, r3
 810caa2:	370c      	adds	r7, #12
 810caa4:	46bd      	mov	sp, r7
 810caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810caaa:	4770      	bx	lr

0810caac <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 810caac:	b5f0      	push	{r4, r5, r6, r7, lr}
 810caae:	b089      	sub	sp, #36	; 0x24
 810cab0:	af00      	add	r7, sp, #0
 810cab2:	60f8      	str	r0, [r7, #12]
 810cab4:	60b9      	str	r1, [r7, #8]
 810cab6:	607a      	str	r2, [r7, #4]
 810cab8:	603b      	str	r3, [r7, #0]
	      _Bound_indexes());
 810caba:	68b8      	ldr	r0, [r7, #8]
 810cabc:	f7ff ffd5 	bl	810ca6a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810cac0:	4604      	mov	r4, r0
 810cac2:	6878      	ldr	r0, [r7, #4]
 810cac4:	f7ff ffdc 	bl	810ca80 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810cac8:	4605      	mov	r5, r0
 810caca:	6838      	ldr	r0, [r7, #0]
 810cacc:	f7ff ffe3 	bl	810ca96 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810cad0:	4603      	mov	r3, r0
 810cad2:	f107 0010 	add.w	r0, r7, #16
 810cad6:	462a      	mov	r2, r5
 810cad8:	4621      	mov	r1, r4
 810cada:	f000 f8ed 	bl	810ccb8 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
 810cade:	f107 0310 	add.w	r3, r7, #16
 810cae2:	4632      	mov	r2, r6
 810cae4:	4619      	mov	r1, r3
 810cae6:	68f8      	ldr	r0, [r7, #12]
 810cae8:	f000 f902 	bl	810ccf0 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 810caec:	3724      	adds	r7, #36	; 0x24
 810caee:	46bd      	mov	sp, r7
 810caf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810caf2 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 810caf2:	b580      	push	{r7, lr}
 810caf4:	b082      	sub	sp, #8
 810caf6:	af00      	add	r7, sp, #0
 810caf8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810cafa:	6878      	ldr	r0, [r7, #4]
 810cafc:	f7ff fc1f 	bl	810c33e <_ZNSt9_Any_data9_M_accessEv>
 810cb00:	4603      	mov	r3, r0
 810cb02:	4618      	mov	r0, r3
 810cb04:	3708      	adds	r7, #8
 810cb06:	46bd      	mov	sp, r7
 810cb08:	bd80      	pop	{r7, pc}

0810cb0a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access()
 810cb0a:	b580      	push	{r7, lr}
 810cb0c:	b082      	sub	sp, #8
 810cb0e:	af00      	add	r7, sp, #0
 810cb10:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810cb12:	6878      	ldr	r0, [r7, #4]
 810cb14:	f7ff fc13 	bl	810c33e <_ZNSt9_Any_data9_M_accessEv>
 810cb18:	4603      	mov	r3, r0
 810cb1a:	4618      	mov	r0, r3
 810cb1c:	3708      	adds	r7, #8
 810cb1e:	46bd      	mov	sp, r7
 810cb20:	bd80      	pop	{r7, pc}

0810cb22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 810cb22:	b5b0      	push	{r4, r5, r7, lr}
 810cb24:	b084      	sub	sp, #16
 810cb26:	af00      	add	r7, sp, #0
 810cb28:	60f8      	str	r0, [r7, #12]
 810cb2a:	60b9      	str	r1, [r7, #8]
 810cb2c:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 810cb2e:	68b8      	ldr	r0, [r7, #8]
 810cb30:	f000 f926 	bl	810cd80 <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 810cb34:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 810cb36:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 810cb38:	200c      	movs	r0, #12
 810cb3a:	f7fe fe35 	bl	810b7a8 <_Znwj>
 810cb3e:	4603      	mov	r3, r0
 810cb40:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 810cb42:	4623      	mov	r3, r4
 810cb44:	462a      	mov	r2, r5
 810cb46:	ca07      	ldmia	r2, {r0, r1, r2}
 810cb48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 810cb4c:	68f8      	ldr	r0, [r7, #12]
 810cb4e:	f7ff ffdc 	bl	810cb0a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810cb52:	4603      	mov	r3, r0
 810cb54:	601c      	str	r4, [r3, #0]
	}
 810cb56:	bf00      	nop
 810cb58:	3710      	adds	r7, #16
 810cb5a:	46bd      	mov	sp, r7
 810cb5c:	bdb0      	pop	{r4, r5, r7, pc}

0810cb5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 810cb5e:	b580      	push	{r7, lr}
 810cb60:	b082      	sub	sp, #8
 810cb62:	af00      	add	r7, sp, #0
 810cb64:	6078      	str	r0, [r7, #4]
 810cb66:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 810cb68:	6878      	ldr	r0, [r7, #4]
 810cb6a:	f7ff ffce 	bl	810cb0a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 810cb6e:	4603      	mov	r3, r0
 810cb70:	681b      	ldr	r3, [r3, #0]
 810cb72:	2b00      	cmp	r3, #0
 810cb74:	d003      	beq.n	810cb7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
 810cb76:	210c      	movs	r1, #12
 810cb78:	4618      	mov	r0, r3
 810cb7a:	f002 f94b 	bl	810ee14 <_ZdlPvj>
	}
 810cb7e:	bf00      	nop
 810cb80:	3708      	adds	r7, #8
 810cb82:	46bd      	mov	sp, r7
 810cb84:	bd80      	pop	{r7, pc}

0810cb86 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810cb86:	b5b0      	push	{r4, r5, r7, lr}
 810cb88:	b084      	sub	sp, #16
 810cb8a:	af00      	add	r7, sp, #0
 810cb8c:	60f8      	str	r0, [r7, #12]
 810cb8e:	60b9      	str	r1, [r7, #8]
 810cb90:	607a      	str	r2, [r7, #4]
 810cb92:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810cb94:	6878      	ldr	r0, [r7, #4]
 810cb96:	f7ff fdb5 	bl	810c704 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810cb9a:	4604      	mov	r4, r0
 810cb9c:	6838      	ldr	r0, [r7, #0]
 810cb9e:	f7ff fdbc 	bl	810c71a <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810cba2:	4605      	mov	r5, r0
 810cba4:	6a38      	ldr	r0, [r7, #32]
 810cba6:	f7ff fdc3 	bl	810c730 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 810cbaa:	4603      	mov	r3, r0
 810cbac:	462a      	mov	r2, r5
 810cbae:	4621      	mov	r1, r4
 810cbb0:	68f8      	ldr	r0, [r7, #12]
 810cbb2:	f000 f8f1 	bl	810cd98 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
 810cbb6:	68fc      	ldr	r4, [r7, #12]
 810cbb8:	68b8      	ldr	r0, [r7, #8]
 810cbba:	f7ff fd98 	bl	810c6ee <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 810cbbe:	4603      	mov	r3, r0
 810cbc0:	4619      	mov	r1, r3
 810cbc2:	4620      	mov	r0, r4
 810cbc4:	f7ff ff17 	bl	810c9f6 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 810cbc8:	68fb      	ldr	r3, [r7, #12]
 810cbca:	4618      	mov	r0, r3
 810cbcc:	3710      	adds	r7, #16
 810cbce:	46bd      	mov	sp, r7
 810cbd0:	bdb0      	pop	{r4, r5, r7, pc}

0810cbd2 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810cbd2:	b480      	push	{r7}
 810cbd4:	b083      	sub	sp, #12
 810cbd6:	af00      	add	r7, sp, #0
 810cbd8:	6078      	str	r0, [r7, #4]
 810cbda:	687b      	ldr	r3, [r7, #4]
 810cbdc:	4618      	mov	r0, r3
 810cbde:	370c      	adds	r7, #12
 810cbe0:	46bd      	mov	sp, r7
 810cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cbe6:	4770      	bx	lr

0810cbe8 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810cbe8:	b480      	push	{r7}
 810cbea:	b083      	sub	sp, #12
 810cbec:	af00      	add	r7, sp, #0
 810cbee:	6078      	str	r0, [r7, #4]
 810cbf0:	687b      	ldr	r3, [r7, #4]
 810cbf2:	4618      	mov	r0, r3
 810cbf4:	370c      	adds	r7, #12
 810cbf6:	46bd      	mov	sp, r7
 810cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cbfc:	4770      	bx	lr

0810cbfe <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 810cbfe:	b480      	push	{r7}
 810cc00:	b083      	sub	sp, #12
 810cc02:	af00      	add	r7, sp, #0
 810cc04:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810cc06:	687b      	ldr	r3, [r7, #4]
 810cc08:	4618      	mov	r0, r3
 810cc0a:	370c      	adds	r7, #12
 810cc0c:	46bd      	mov	sp, r7
 810cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc12:	4770      	bx	lr

0810cc14 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810cc14:	b580      	push	{r7, lr}
 810cc16:	b082      	sub	sp, #8
 810cc18:	af00      	add	r7, sp, #0
 810cc1a:	6078      	str	r0, [r7, #4]
 810cc1c:	6878      	ldr	r0, [r7, #4]
 810cc1e:	f000 f8d0 	bl	810cdc2 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 810cc22:	4603      	mov	r3, r0
 810cc24:	4618      	mov	r0, r3
 810cc26:	3708      	adds	r7, #8
 810cc28:	46bd      	mov	sp, r7
 810cc2a:	bd80      	pop	{r7, pc}

0810cc2c <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810cc2c:	b480      	push	{r7}
 810cc2e:	b083      	sub	sp, #12
 810cc30:	af00      	add	r7, sp, #0
 810cc32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810cc34:	687b      	ldr	r3, [r7, #4]
 810cc36:	4618      	mov	r0, r3
 810cc38:	370c      	adds	r7, #12
 810cc3a:	46bd      	mov	sp, r7
 810cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc40:	4770      	bx	lr

0810cc42 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810cc42:	b580      	push	{r7, lr}
 810cc44:	b082      	sub	sp, #8
 810cc46:	af00      	add	r7, sp, #0
 810cc48:	6078      	str	r0, [r7, #4]
 810cc4a:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 810cc4c:	6838      	ldr	r0, [r7, #0]
 810cc4e:	f000 f8c3 	bl	810cdd8 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>
 810cc52:	4603      	mov	r3, r0
 810cc54:	4618      	mov	r0, r3
 810cc56:	f000 f8ca 	bl	810cdee <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>
 810cc5a:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 810cc5c:	4619      	mov	r1, r3
 810cc5e:	6878      	ldr	r0, [r7, #4]
 810cc60:	f000 f8e7 	bl	810ce32 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
 810cc64:	6838      	ldr	r0, [r7, #0]
 810cc66:	f000 f8cd 	bl	810ce04 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810cc6a:	4603      	mov	r3, r0
 810cc6c:	4618      	mov	r0, r3
 810cc6e:	f000 f8d5 	bl	810ce1c <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810cc72:	4603      	mov	r3, r0
 810cc74:	4619      	mov	r1, r3
 810cc76:	6878      	ldr	r0, [r7, #4]
 810cc78:	f000 f8f1 	bl	810ce5e <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
 810cc7c:	687b      	ldr	r3, [r7, #4]
 810cc7e:	4618      	mov	r0, r3
 810cc80:	3708      	adds	r7, #8
 810cc82:	46bd      	mov	sp, r7
 810cc84:	bd80      	pop	{r7, pc}

0810cc86 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810cc86:	b580      	push	{r7, lr}
 810cc88:	b082      	sub	sp, #8
 810cc8a:	af00      	add	r7, sp, #0
 810cc8c:	6078      	str	r0, [r7, #4]
 810cc8e:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810cc90:	6838      	ldr	r0, [r7, #0]
 810cc92:	f7ff ffcb 	bl	810cc2c <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810cc96:	687b      	ldr	r3, [r7, #4]
 810cc98:	4618      	mov	r0, r3
 810cc9a:	3708      	adds	r7, #8
 810cc9c:	46bd      	mov	sp, r7
 810cc9e:	bd80      	pop	{r7, pc}

0810cca0 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 810cca0:	b580      	push	{r7, lr}
 810cca2:	b082      	sub	sp, #8
 810cca4:	af00      	add	r7, sp, #0
 810cca6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 810cca8:	6878      	ldr	r0, [r7, #4]
 810ccaa:	f7ff fb53 	bl	810c354 <_ZNKSt9_Any_data9_M_accessEv>
 810ccae:	4603      	mov	r3, r0
 810ccb0:	4618      	mov	r0, r3
 810ccb2:	3708      	adds	r7, #8
 810ccb4:	46bd      	mov	sp, r7
 810ccb6:	bd80      	pop	{r7, pc}

0810ccb8 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 810ccb8:	b5b0      	push	{r4, r5, r7, lr}
 810ccba:	b084      	sub	sp, #16
 810ccbc:	af00      	add	r7, sp, #0
 810ccbe:	60f8      	str	r0, [r7, #12]
 810ccc0:	60b9      	str	r1, [r7, #8]
 810ccc2:	607a      	str	r2, [r7, #4]
 810ccc4:	603b      	str	r3, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 810ccc6:	68b8      	ldr	r0, [r7, #8]
 810ccc8:	f7ff fecf 	bl	810ca6a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810cccc:	4604      	mov	r4, r0
 810ccce:	6878      	ldr	r0, [r7, #4]
 810ccd0:	f7ff fed6 	bl	810ca80 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810ccd4:	4605      	mov	r5, r0
 810ccd6:	6838      	ldr	r0, [r7, #0]
 810ccd8:	f7ff fedd 	bl	810ca96 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810ccdc:	4603      	mov	r3, r0
 810ccde:	462a      	mov	r2, r5
 810cce0:	4621      	mov	r1, r4
 810cce2:	68f8      	ldr	r0, [r7, #12]
 810cce4:	f000 f8c8 	bl	810ce78 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>
 810cce8:	68f8      	ldr	r0, [r7, #12]
 810ccea:	3710      	adds	r7, #16
 810ccec:	46bd      	mov	sp, r7
 810ccee:	bdb0      	pop	{r4, r5, r7, pc}

0810ccf0 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 810ccf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ccf4:	b08a      	sub	sp, #40	; 0x28
 810ccf6:	af02      	add	r7, sp, #8
 810ccf8:	60f8      	str	r0, [r7, #12]
 810ccfa:	60b9      	str	r1, [r7, #8]
 810ccfc:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 810ccfe:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810cd00:	68fb      	ldr	r3, [r7, #12]
 810cd02:	3308      	adds	r3, #8
 810cd04:	4618      	mov	r0, r3
 810cd06:	f000 f8d5 	bl	810ceb4 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810cd0a:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810cd0c:	f107 0310 	add.w	r3, r7, #16
 810cd10:	68ba      	ldr	r2, [r7, #8]
 810cd12:	4618      	mov	r0, r3
 810cd14:	f000 f8db 	bl	810cece <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
 810cd18:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810cd1a:	68fb      	ldr	r3, [r7, #12]
 810cd1c:	3308      	adds	r3, #8
 810cd1e:	4618      	mov	r0, r3
 810cd20:	f000 f8e3 	bl	810ceea <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810cd24:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810cd26:	f107 0314 	add.w	r3, r7, #20
 810cd2a:	68ba      	ldr	r2, [r7, #8]
 810cd2c:	4618      	mov	r0, r3
 810cd2e:	f000 f8e8 	bl	810cf02 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
 810cd32:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810cd34:	68fb      	ldr	r3, [r7, #12]
 810cd36:	3308      	adds	r3, #8
 810cd38:	4618      	mov	r0, r3
 810cd3a:	f000 f8f4 	bl	810cf26 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810cd3e:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810cd40:	f107 0318 	add.w	r3, r7, #24
 810cd44:	68ba      	ldr	r2, [r7, #8]
 810cd46:	4618      	mov	r0, r3
 810cd48:	f000 f8f9 	bl	810cf3e <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
 810cd4c:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 810cd4e:	68fb      	ldr	r3, [r7, #12]
 810cd50:	3308      	adds	r3, #8
 810cd52:	4618      	mov	r0, r3
 810cd54:	f000 f905 	bl	810cf62 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 810cd58:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 810cd5a:	f107 031c 	add.w	r3, r7, #28
 810cd5e:	68ba      	ldr	r2, [r7, #8]
 810cd60:	4618      	mov	r0, r3
 810cd62:	f000 f90a 	bl	810cf7a <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
 810cd66:	4603      	mov	r3, r0
 810cd68:	9300      	str	r3, [sp, #0]
 810cd6a:	4643      	mov	r3, r8
 810cd6c:	4632      	mov	r2, r6
 810cd6e:	4629      	mov	r1, r5
 810cd70:	4620      	mov	r0, r4
 810cd72:	f000 f914 	bl	810cf9e <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 810cd76:	bf00      	nop
	}
 810cd78:	3720      	adds	r7, #32
 810cd7a:	46bd      	mov	sp, r7
 810cd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810cd80 <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 810cd80:	b580      	push	{r7, lr}
 810cd82:	b082      	sub	sp, #8
 810cd84:	af00      	add	r7, sp, #0
 810cd86:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 810cd88:	6878      	ldr	r0, [r7, #4]
 810cd8a:	f7ff fae3 	bl	810c354 <_ZNKSt9_Any_data9_M_accessEv>
 810cd8e:	4603      	mov	r3, r0
 810cd90:	4618      	mov	r0, r3
 810cd92:	3708      	adds	r7, #8
 810cd94:	46bd      	mov	sp, r7
 810cd96:	bd80      	pop	{r7, pc}

0810cd98 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 810cd98:	b580      	push	{r7, lr}
 810cd9a:	b084      	sub	sp, #16
 810cd9c:	af00      	add	r7, sp, #0
 810cd9e:	60f8      	str	r0, [r7, #12]
 810cda0:	60b9      	str	r1, [r7, #8]
 810cda2:	607a      	str	r2, [r7, #4]
 810cda4:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 810cda6:	683a      	ldr	r2, [r7, #0]
 810cda8:	6879      	ldr	r1, [r7, #4]
 810cdaa:	68f8      	ldr	r0, [r7, #12]
 810cdac:	f000 f920 	bl	810cff0 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
 810cdb0:	68b9      	ldr	r1, [r7, #8]
 810cdb2:	68f8      	ldr	r0, [r7, #12]
 810cdb4:	f000 f92f 	bl	810d016 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
 810cdb8:	68fb      	ldr	r3, [r7, #12]
 810cdba:	4618      	mov	r0, r3
 810cdbc:	3710      	adds	r7, #16
 810cdbe:	46bd      	mov	sp, r7
 810cdc0:	bd80      	pop	{r7, pc}

0810cdc2 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810cdc2:	b480      	push	{r7}
 810cdc4:	b083      	sub	sp, #12
 810cdc6:	af00      	add	r7, sp, #0
 810cdc8:	6078      	str	r0, [r7, #4]
 810cdca:	687b      	ldr	r3, [r7, #4]
 810cdcc:	4618      	mov	r0, r3
 810cdce:	370c      	adds	r7, #12
 810cdd0:	46bd      	mov	sp, r7
 810cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cdd6:	4770      	bx	lr

0810cdd8 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 810cdd8:	b480      	push	{r7}
 810cdda:	b083      	sub	sp, #12
 810cddc:	af00      	add	r7, sp, #0
 810cdde:	6078      	str	r0, [r7, #4]
 810cde0:	687b      	ldr	r3, [r7, #4]
 810cde2:	4618      	mov	r0, r3
 810cde4:	370c      	adds	r7, #12
 810cde6:	46bd      	mov	sp, r7
 810cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cdec:	4770      	bx	lr

0810cdee <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 810cdee:	b480      	push	{r7}
 810cdf0:	b083      	sub	sp, #12
 810cdf2:	af00      	add	r7, sp, #0
 810cdf4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810cdf6:	687b      	ldr	r3, [r7, #4]
 810cdf8:	4618      	mov	r0, r3
 810cdfa:	370c      	adds	r7, #12
 810cdfc:	46bd      	mov	sp, r7
 810cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce02:	4770      	bx	lr

0810ce04 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810ce04:	b580      	push	{r7, lr}
 810ce06:	b082      	sub	sp, #8
 810ce08:	af00      	add	r7, sp, #0
 810ce0a:	6078      	str	r0, [r7, #4]
 810ce0c:	6878      	ldr	r0, [r7, #4]
 810ce0e:	f000 f90e 	bl	810d02e <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 810ce12:	4603      	mov	r3, r0
 810ce14:	4618      	mov	r0, r3
 810ce16:	3708      	adds	r7, #8
 810ce18:	46bd      	mov	sp, r7
 810ce1a:	bd80      	pop	{r7, pc}

0810ce1c <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810ce1c:	b480      	push	{r7}
 810ce1e:	b083      	sub	sp, #12
 810ce20:	af00      	add	r7, sp, #0
 810ce22:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810ce24:	687b      	ldr	r3, [r7, #4]
 810ce26:	4618      	mov	r0, r3
 810ce28:	370c      	adds	r7, #12
 810ce2a:	46bd      	mov	sp, r7
 810ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce30:	4770      	bx	lr

0810ce32 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810ce32:	b580      	push	{r7, lr}
 810ce34:	b082      	sub	sp, #8
 810ce36:	af00      	add	r7, sp, #0
 810ce38:	6078      	str	r0, [r7, #4]
 810ce3a:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 810ce3c:	6838      	ldr	r0, [r7, #0]
 810ce3e:	f000 f901 	bl	810d044 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810ce42:	4603      	mov	r3, r0
 810ce44:	4618      	mov	r0, r3
 810ce46:	f000 f909 	bl	810d05c <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810ce4a:	4603      	mov	r3, r0
 810ce4c:	4619      	mov	r1, r3
 810ce4e:	6878      	ldr	r0, [r7, #4]
 810ce50:	f000 f90f 	bl	810d072 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
 810ce54:	687b      	ldr	r3, [r7, #4]
 810ce56:	4618      	mov	r0, r3
 810ce58:	3708      	adds	r7, #8
 810ce5a:	46bd      	mov	sp, r7
 810ce5c:	bd80      	pop	{r7, pc}

0810ce5e <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810ce5e:	b580      	push	{r7, lr}
 810ce60:	b082      	sub	sp, #8
 810ce62:	af00      	add	r7, sp, #0
 810ce64:	6078      	str	r0, [r7, #4]
 810ce66:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810ce68:	6838      	ldr	r0, [r7, #0]
 810ce6a:	f7ff ffd7 	bl	810ce1c <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810ce6e:	687b      	ldr	r3, [r7, #4]
 810ce70:	4618      	mov	r0, r3
 810ce72:	3708      	adds	r7, #8
 810ce74:	46bd      	mov	sp, r7
 810ce76:	bd80      	pop	{r7, pc}

0810ce78 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 810ce78:	b5f0      	push	{r4, r5, r6, r7, lr}
 810ce7a:	b085      	sub	sp, #20
 810ce7c:	af00      	add	r7, sp, #0
 810ce7e:	60f8      	str	r0, [r7, #12]
 810ce80:	60b9      	str	r1, [r7, #8]
 810ce82:	607a      	str	r2, [r7, #4]
 810ce84:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 810ce86:	68fc      	ldr	r4, [r7, #12]
 810ce88:	68b8      	ldr	r0, [r7, #8]
 810ce8a:	f7ff fdee 	bl	810ca6a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810ce8e:	4605      	mov	r5, r0
 810ce90:	6878      	ldr	r0, [r7, #4]
 810ce92:	f7ff fdf5 	bl	810ca80 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810ce96:	4606      	mov	r6, r0
 810ce98:	6838      	ldr	r0, [r7, #0]
 810ce9a:	f7ff fdfc 	bl	810ca96 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810ce9e:	4603      	mov	r3, r0
 810cea0:	4632      	mov	r2, r6
 810cea2:	4629      	mov	r1, r5
 810cea4:	4620      	mov	r0, r4
 810cea6:	f000 f8f1 	bl	810d08c <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
 810ceaa:	68fb      	ldr	r3, [r7, #12]
 810ceac:	4618      	mov	r0, r3
 810ceae:	3714      	adds	r7, #20
 810ceb0:	46bd      	mov	sp, r7
 810ceb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810ceb4 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810ceb4:	b580      	push	{r7, lr}
 810ceb6:	b082      	sub	sp, #8
 810ceb8:	af00      	add	r7, sp, #0
 810ceba:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810cebc:	687b      	ldr	r3, [r7, #4]
 810cebe:	4618      	mov	r0, r3
 810cec0:	f000 f932 	bl	810d128 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 810cec4:	4603      	mov	r3, r0
 810cec6:	4618      	mov	r0, r3
 810cec8:	3708      	adds	r7, #8
 810ceca:	46bd      	mov	sp, r7
 810cecc:	bd80      	pop	{r7, pc}

0810cece <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 810cece:	b580      	push	{r7, lr}
 810ced0:	b084      	sub	sp, #16
 810ced2:	af00      	add	r7, sp, #0
 810ced4:	60f8      	str	r0, [r7, #12]
 810ced6:	60b9      	str	r1, [r7, #8]
 810ced8:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 810ceda:	68b8      	ldr	r0, [r7, #8]
 810cedc:	f000 f930 	bl	810d140 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810cee0:	4603      	mov	r3, r0
 810cee2:	4618      	mov	r0, r3
 810cee4:	3710      	adds	r7, #16
 810cee6:	46bd      	mov	sp, r7
 810cee8:	bd80      	pop	{r7, pc}

0810ceea <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810ceea:	b580      	push	{r7, lr}
 810ceec:	b082      	sub	sp, #8
 810ceee:	af00      	add	r7, sp, #0
 810cef0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810cef2:	6878      	ldr	r0, [r7, #4]
 810cef4:	f000 f92f 	bl	810d156 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810cef8:	4603      	mov	r3, r0
 810cefa:	4618      	mov	r0, r3
 810cefc:	3708      	adds	r7, #8
 810cefe:	46bd      	mov	sp, r7
 810cf00:	bd80      	pop	{r7, pc}

0810cf02 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810cf02:	b580      	push	{r7, lr}
 810cf04:	b084      	sub	sp, #16
 810cf06:	af00      	add	r7, sp, #0
 810cf08:	60f8      	str	r0, [r7, #12]
 810cf0a:	60b9      	str	r1, [r7, #8]
 810cf0c:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810cf0e:	6878      	ldr	r0, [r7, #4]
 810cf10:	f000 f92d 	bl	810d16e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810cf14:	4603      	mov	r3, r0
 810cf16:	4618      	mov	r0, r3
 810cf18:	f000 f934 	bl	810d184 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810cf1c:	4603      	mov	r3, r0
	}
 810cf1e:	4618      	mov	r0, r3
 810cf20:	3710      	adds	r7, #16
 810cf22:	46bd      	mov	sp, r7
 810cf24:	bd80      	pop	{r7, pc}

0810cf26 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810cf26:	b580      	push	{r7, lr}
 810cf28:	b082      	sub	sp, #8
 810cf2a:	af00      	add	r7, sp, #0
 810cf2c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810cf2e:	6878      	ldr	r0, [r7, #4]
 810cf30:	f000 f938 	bl	810d1a4 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810cf34:	4603      	mov	r3, r0
 810cf36:	4618      	mov	r0, r3
 810cf38:	3708      	adds	r7, #8
 810cf3a:	46bd      	mov	sp, r7
 810cf3c:	bd80      	pop	{r7, pc}

0810cf3e <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810cf3e:	b580      	push	{r7, lr}
 810cf40:	b084      	sub	sp, #16
 810cf42:	af00      	add	r7, sp, #0
 810cf44:	60f8      	str	r0, [r7, #12]
 810cf46:	60b9      	str	r1, [r7, #8]
 810cf48:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810cf4a:	6878      	ldr	r0, [r7, #4]
 810cf4c:	f000 f90f 	bl	810d16e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810cf50:	4603      	mov	r3, r0
 810cf52:	4618      	mov	r0, r3
 810cf54:	f000 f932 	bl	810d1bc <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810cf58:	4603      	mov	r3, r0
	}
 810cf5a:	4618      	mov	r0, r3
 810cf5c:	3710      	adds	r7, #16
 810cf5e:	46bd      	mov	sp, r7
 810cf60:	bd80      	pop	{r7, pc}

0810cf62 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 810cf62:	b580      	push	{r7, lr}
 810cf64:	b082      	sub	sp, #8
 810cf66:	af00      	add	r7, sp, #0
 810cf68:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810cf6a:	6878      	ldr	r0, [r7, #4]
 810cf6c:	f000 f936 	bl	810d1dc <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 810cf70:	4603      	mov	r3, r0
 810cf72:	4618      	mov	r0, r3
 810cf74:	3708      	adds	r7, #8
 810cf76:	46bd      	mov	sp, r7
 810cf78:	bd80      	pop	{r7, pc}

0810cf7a <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 810cf7a:	b580      	push	{r7, lr}
 810cf7c:	b084      	sub	sp, #16
 810cf7e:	af00      	add	r7, sp, #0
 810cf80:	60f8      	str	r0, [r7, #12]
 810cf82:	60b9      	str	r1, [r7, #8]
 810cf84:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 810cf86:	6878      	ldr	r0, [r7, #4]
 810cf88:	f000 f8f1 	bl	810d16e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 810cf8c:	4603      	mov	r3, r0
 810cf8e:	4618      	mov	r0, r3
 810cf90:	f000 f930 	bl	810d1f4 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 810cf94:	4603      	mov	r3, r0
	}
 810cf96:	4618      	mov	r0, r3
 810cf98:	3710      	adds	r7, #16
 810cf9a:	46bd      	mov	sp, r7
 810cf9c:	bd80      	pop	{r7, pc}

0810cf9e <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 810cf9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810cfa2:	b089      	sub	sp, #36	; 0x24
 810cfa4:	af02      	add	r7, sp, #8
 810cfa6:	60f8      	str	r0, [r7, #12]
 810cfa8:	60b9      	str	r1, [r7, #8]
 810cfaa:	607a      	str	r2, [r7, #4]
 810cfac:	603b      	str	r3, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 810cfae:	68f8      	ldr	r0, [r7, #12]
 810cfb0:	f000 f930 	bl	810d214 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
 810cfb4:	4605      	mov	r5, r0
 810cfb6:	68b8      	ldr	r0, [r7, #8]
 810cfb8:	f000 f8c2 	bl	810d140 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810cfbc:	4606      	mov	r6, r0
 810cfbe:	6878      	ldr	r0, [r7, #4]
 810cfc0:	f7ff fd53 	bl	810ca6a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810cfc4:	4680      	mov	r8, r0
 810cfc6:	6838      	ldr	r0, [r7, #0]
 810cfc8:	f7ff fd5a 	bl	810ca80 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810cfcc:	4604      	mov	r4, r0
 810cfce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810cfd0:	f7ff fd61 	bl	810ca96 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810cfd4:	4603      	mov	r3, r0
 810cfd6:	9301      	str	r3, [sp, #4]
 810cfd8:	9400      	str	r4, [sp, #0]
 810cfda:	4643      	mov	r3, r8
 810cfdc:	4632      	mov	r2, r6
 810cfde:	4629      	mov	r1, r5
 810cfe0:	4648      	mov	r0, r9
 810cfe2:	f000 f922 	bl	810d22a <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 810cfe6:	bf00      	nop
    }
 810cfe8:	371c      	adds	r7, #28
 810cfea:	46bd      	mov	sp, r7
 810cfec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810cff0 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 810cff0:	b580      	push	{r7, lr}
 810cff2:	b084      	sub	sp, #16
 810cff4:	af00      	add	r7, sp, #0
 810cff6:	60f8      	str	r0, [r7, #12]
 810cff8:	60b9      	str	r1, [r7, #8]
 810cffa:	607a      	str	r2, [r7, #4]
      : _Inherited(__tail...), _Base(__head) { }
 810cffc:	6879      	ldr	r1, [r7, #4]
 810cffe:	68f8      	ldr	r0, [r7, #12]
 810d000:	f000 f94d 	bl	810d29e <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
 810d004:	68b9      	ldr	r1, [r7, #8]
 810d006:	68f8      	ldr	r0, [r7, #12]
 810d008:	f000 f957 	bl	810d2ba <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
 810d00c:	68fb      	ldr	r3, [r7, #12]
 810d00e:	4618      	mov	r0, r3
 810d010:	3710      	adds	r7, #16
 810d012:	46bd      	mov	sp, r7
 810d014:	bd80      	pop	{r7, pc}

0810d016 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810d016:	b480      	push	{r7}
 810d018:	b083      	sub	sp, #12
 810d01a:	af00      	add	r7, sp, #0
 810d01c:	6078      	str	r0, [r7, #4]
 810d01e:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810d020:	687b      	ldr	r3, [r7, #4]
 810d022:	4618      	mov	r0, r3
 810d024:	370c      	adds	r7, #12
 810d026:	46bd      	mov	sp, r7
 810d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d02c:	4770      	bx	lr

0810d02e <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810d02e:	b480      	push	{r7}
 810d030:	b083      	sub	sp, #12
 810d032:	af00      	add	r7, sp, #0
 810d034:	6078      	str	r0, [r7, #4]
 810d036:	687b      	ldr	r3, [r7, #4]
 810d038:	4618      	mov	r0, r3
 810d03a:	370c      	adds	r7, #12
 810d03c:	46bd      	mov	sp, r7
 810d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d042:	4770      	bx	lr

0810d044 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810d044:	b580      	push	{r7, lr}
 810d046:	b082      	sub	sp, #8
 810d048:	af00      	add	r7, sp, #0
 810d04a:	6078      	str	r0, [r7, #4]
 810d04c:	6878      	ldr	r0, [r7, #4]
 810d04e:	f000 f940 	bl	810d2d2 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 810d052:	4603      	mov	r3, r0
 810d054:	4618      	mov	r0, r3
 810d056:	3708      	adds	r7, #8
 810d058:	46bd      	mov	sp, r7
 810d05a:	bd80      	pop	{r7, pc}

0810d05c <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d05c:	b480      	push	{r7}
 810d05e:	b083      	sub	sp, #12
 810d060:	af00      	add	r7, sp, #0
 810d062:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d064:	687b      	ldr	r3, [r7, #4]
 810d066:	4618      	mov	r0, r3
 810d068:	370c      	adds	r7, #12
 810d06a:	46bd      	mov	sp, r7
 810d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d070:	4770      	bx	lr

0810d072 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810d072:	b580      	push	{r7, lr}
 810d074:	b082      	sub	sp, #8
 810d076:	af00      	add	r7, sp, #0
 810d078:	6078      	str	r0, [r7, #4]
 810d07a:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 810d07c:	6838      	ldr	r0, [r7, #0]
 810d07e:	f7ff ffed 	bl	810d05c <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 810d082:	687b      	ldr	r3, [r7, #4]
 810d084:	4618      	mov	r0, r3
 810d086:	3708      	adds	r7, #8
 810d088:	46bd      	mov	sp, r7
 810d08a:	bd80      	pop	{r7, pc}

0810d08c <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810d08c:	b5b0      	push	{r4, r5, r7, lr}
 810d08e:	b084      	sub	sp, #16
 810d090:	af00      	add	r7, sp, #0
 810d092:	60f8      	str	r0, [r7, #12]
 810d094:	60b9      	str	r1, [r7, #8]
 810d096:	607a      	str	r2, [r7, #4]
 810d098:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 810d09a:	68fc      	ldr	r4, [r7, #12]
 810d09c:	6878      	ldr	r0, [r7, #4]
 810d09e:	f7ff fcef 	bl	810ca80 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d0a2:	4605      	mov	r5, r0
 810d0a4:	6838      	ldr	r0, [r7, #0]
 810d0a6:	f7ff fcf6 	bl	810ca96 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d0aa:	4603      	mov	r3, r0
 810d0ac:	461a      	mov	r2, r3
 810d0ae:	4629      	mov	r1, r5
 810d0b0:	4620      	mov	r0, r4
 810d0b2:	f000 f919 	bl	810d2e8 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
 810d0b6:	68fb      	ldr	r3, [r7, #12]
 810d0b8:	f103 0408 	add.w	r4, r3, #8
 810d0bc:	68b8      	ldr	r0, [r7, #8]
 810d0be:	f7ff fcd4 	bl	810ca6a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810d0c2:	4603      	mov	r3, r0
 810d0c4:	4619      	mov	r1, r3
 810d0c6:	4620      	mov	r0, r4
 810d0c8:	f000 f81e 	bl	810d108 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 810d0cc:	68fb      	ldr	r3, [r7, #12]
 810d0ce:	4618      	mov	r0, r3
 810d0d0:	3710      	adds	r7, #16
 810d0d2:	46bd      	mov	sp, r7
 810d0d4:	bdb0      	pop	{r4, r5, r7, pc}

0810d0d6 <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810d0d6:	b580      	push	{r7, lr}
 810d0d8:	b082      	sub	sp, #8
 810d0da:	af00      	add	r7, sp, #0
 810d0dc:	6078      	str	r0, [r7, #4]
 810d0de:	687b      	ldr	r3, [r7, #4]
 810d0e0:	3308      	adds	r3, #8
 810d0e2:	4618      	mov	r0, r3
 810d0e4:	f000 f91e 	bl	810d324 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 810d0e8:	4603      	mov	r3, r0
 810d0ea:	4618      	mov	r0, r3
 810d0ec:	3708      	adds	r7, #8
 810d0ee:	46bd      	mov	sp, r7
 810d0f0:	bd80      	pop	{r7, pc}

0810d0f2 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d0f2:	b480      	push	{r7}
 810d0f4:	b083      	sub	sp, #12
 810d0f6:	af00      	add	r7, sp, #0
 810d0f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d0fa:	687b      	ldr	r3, [r7, #4]
 810d0fc:	4618      	mov	r0, r3
 810d0fe:	370c      	adds	r7, #12
 810d100:	46bd      	mov	sp, r7
 810d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d106:	4770      	bx	lr

0810d108 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810d108:	b580      	push	{r7, lr}
 810d10a:	b082      	sub	sp, #8
 810d10c:	af00      	add	r7, sp, #0
 810d10e:	6078      	str	r0, [r7, #4]
 810d110:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810d112:	6838      	ldr	r0, [r7, #0]
 810d114:	f7ff fca9 	bl	810ca6a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810d118:	4602      	mov	r2, r0
 810d11a:	687b      	ldr	r3, [r7, #4]
 810d11c:	601a      	str	r2, [r3, #0]
 810d11e:	687b      	ldr	r3, [r7, #4]
 810d120:	4618      	mov	r0, r3
 810d122:	3708      	adds	r7, #8
 810d124:	46bd      	mov	sp, r7
 810d126:	bd80      	pop	{r7, pc}

0810d128 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d128:	b580      	push	{r7, lr}
 810d12a:	b082      	sub	sp, #8
 810d12c:	af00      	add	r7, sp, #0
 810d12e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d130:	6878      	ldr	r0, [r7, #4]
 810d132:	f7ff fc31 	bl	810c998 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 810d136:	4603      	mov	r3, r0
 810d138:	4618      	mov	r0, r3
 810d13a:	3708      	adds	r7, #8
 810d13c:	46bd      	mov	sp, r7
 810d13e:	bd80      	pop	{r7, pc}

0810d140 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d140:	b480      	push	{r7}
 810d142:	b083      	sub	sp, #12
 810d144:	af00      	add	r7, sp, #0
 810d146:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d148:	687b      	ldr	r3, [r7, #4]
 810d14a:	4618      	mov	r0, r3
 810d14c:	370c      	adds	r7, #12
 810d14e:	46bd      	mov	sp, r7
 810d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d154:	4770      	bx	lr

0810d156 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d156:	b580      	push	{r7, lr}
 810d158:	b082      	sub	sp, #8
 810d15a:	af00      	add	r7, sp, #0
 810d15c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d15e:	6878      	ldr	r0, [r7, #4]
 810d160:	f7ff fd58 	bl	810cc14 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 810d164:	4603      	mov	r3, r0
 810d166:	4618      	mov	r0, r3
 810d168:	3708      	adds	r7, #8
 810d16a:	46bd      	mov	sp, r7
 810d16c:	bd80      	pop	{r7, pc}

0810d16e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 810d16e:	b480      	push	{r7}
 810d170:	b083      	sub	sp, #12
 810d172:	af00      	add	r7, sp, #0
 810d174:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810d176:	687b      	ldr	r3, [r7, #4]
 810d178:	4618      	mov	r0, r3
 810d17a:	370c      	adds	r7, #12
 810d17c:	46bd      	mov	sp, r7
 810d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d182:	4770      	bx	lr

0810d184 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810d184:	b580      	push	{r7, lr}
 810d186:	b082      	sub	sp, #8
 810d188:	af00      	add	r7, sp, #0
 810d18a:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810d18c:	6878      	ldr	r0, [r7, #4]
 810d18e:	f000 f8fe 	bl	810d38e <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810d192:	4603      	mov	r3, r0
 810d194:	4618      	mov	r0, r3
 810d196:	f7ff ffac 	bl	810d0f2 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d19a:	4603      	mov	r3, r0
    }
 810d19c:	4618      	mov	r0, r3
 810d19e:	3708      	adds	r7, #8
 810d1a0:	46bd      	mov	sp, r7
 810d1a2:	bd80      	pop	{r7, pc}

0810d1a4 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d1a4:	b580      	push	{r7, lr}
 810d1a6:	b082      	sub	sp, #8
 810d1a8:	af00      	add	r7, sp, #0
 810d1aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d1ac:	6878      	ldr	r0, [r7, #4]
 810d1ae:	f7ff fe29 	bl	810ce04 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 810d1b2:	4603      	mov	r3, r0
 810d1b4:	4618      	mov	r0, r3
 810d1b6:	3708      	adds	r7, #8
 810d1b8:	46bd      	mov	sp, r7
 810d1ba:	bd80      	pop	{r7, pc}

0810d1bc <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810d1bc:	b580      	push	{r7, lr}
 810d1be:	b082      	sub	sp, #8
 810d1c0:	af00      	add	r7, sp, #0
 810d1c2:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810d1c4:	6878      	ldr	r0, [r7, #4]
 810d1c6:	f000 f8ef 	bl	810d3a8 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810d1ca:	4603      	mov	r3, r0
 810d1cc:	4618      	mov	r0, r3
 810d1ce:	f000 f8c3 	bl	810d358 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
 810d1d2:	4603      	mov	r3, r0
    }
 810d1d4:	4618      	mov	r0, r3
 810d1d6:	3708      	adds	r7, #8
 810d1d8:	46bd      	mov	sp, r7
 810d1da:	bd80      	pop	{r7, pc}

0810d1dc <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d1dc:	b580      	push	{r7, lr}
 810d1de:	b082      	sub	sp, #8
 810d1e0:	af00      	add	r7, sp, #0
 810d1e2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d1e4:	6878      	ldr	r0, [r7, #4]
 810d1e6:	f7ff ff2d 	bl	810d044 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 810d1ea:	4603      	mov	r3, r0
 810d1ec:	4618      	mov	r0, r3
 810d1ee:	3708      	adds	r7, #8
 810d1f0:	46bd      	mov	sp, r7
 810d1f2:	bd80      	pop	{r7, pc}

0810d1f4 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 810d1f4:	b580      	push	{r7, lr}
 810d1f6:	b082      	sub	sp, #8
 810d1f8:	af00      	add	r7, sp, #0
 810d1fa:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 810d1fc:	6878      	ldr	r0, [r7, #4]
 810d1fe:	f000 f8e0 	bl	810d3c2 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810d202:	4603      	mov	r3, r0
 810d204:	4618      	mov	r0, r3
 810d206:	f000 f8e9 	bl	810d3dc <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 810d20a:	4603      	mov	r3, r0
    }
 810d20c:	4618      	mov	r0, r3
 810d20e:	3708      	adds	r7, #8
 810d210:	46bd      	mov	sp, r7
 810d212:	bd80      	pop	{r7, pc}

0810d214 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d214:	b480      	push	{r7}
 810d216:	b083      	sub	sp, #12
 810d218:	af00      	add	r7, sp, #0
 810d21a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d21c:	687b      	ldr	r3, [r7, #4]
 810d21e:	4618      	mov	r0, r3
 810d220:	370c      	adds	r7, #12
 810d222:	46bd      	mov	sp, r7
 810d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d228:	4770      	bx	lr

0810d22a <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 810d22a:	b5f0      	push	{r4, r5, r6, r7, lr}
 810d22c:	b087      	sub	sp, #28
 810d22e:	af00      	add	r7, sp, #0
 810d230:	7538      	strb	r0, [r7, #20]
 810d232:	6139      	str	r1, [r7, #16]
 810d234:	60fa      	str	r2, [r7, #12]
 810d236:	60bb      	str	r3, [r7, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 810d238:	68f8      	ldr	r0, [r7, #12]
 810d23a:	f7ff ff81 	bl	810d140 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 810d23e:	4603      	mov	r3, r0
 810d240:	681b      	ldr	r3, [r3, #0]
 810d242:	693a      	ldr	r2, [r7, #16]
 810d244:	6852      	ldr	r2, [r2, #4]
 810d246:	1052      	asrs	r2, r2, #1
 810d248:	189d      	adds	r5, r3, r2
 810d24a:	693a      	ldr	r2, [r7, #16]
 810d24c:	6852      	ldr	r2, [r2, #4]
 810d24e:	f002 0201 	and.w	r2, r2, #1
 810d252:	2a00      	cmp	r2, #0
 810d254:	d102      	bne.n	810d25c <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x32>
 810d256:	693b      	ldr	r3, [r7, #16]
 810d258:	681c      	ldr	r4, [r3, #0]
 810d25a:	e008      	b.n	810d26e <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x44>
 810d25c:	693a      	ldr	r2, [r7, #16]
 810d25e:	6852      	ldr	r2, [r2, #4]
 810d260:	1052      	asrs	r2, r2, #1
 810d262:	4413      	add	r3, r2
 810d264:	681b      	ldr	r3, [r3, #0]
 810d266:	693a      	ldr	r2, [r7, #16]
 810d268:	6812      	ldr	r2, [r2, #0]
 810d26a:	4413      	add	r3, r2
 810d26c:	681c      	ldr	r4, [r3, #0]
 810d26e:	68b8      	ldr	r0, [r7, #8]
 810d270:	f7ff fbfb 	bl	810ca6a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 810d274:	4603      	mov	r3, r0
 810d276:	781e      	ldrb	r6, [r3, #0]
 810d278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810d27a:	f7ff fc01 	bl	810ca80 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d27e:	4603      	mov	r3, r0
 810d280:	681b      	ldr	r3, [r3, #0]
 810d282:	607b      	str	r3, [r7, #4]
 810d284:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810d286:	f7ff fc06 	bl	810ca96 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d28a:	4603      	mov	r3, r0
 810d28c:	681b      	ldr	r3, [r3, #0]
 810d28e:	687a      	ldr	r2, [r7, #4]
 810d290:	4631      	mov	r1, r6
 810d292:	4628      	mov	r0, r5
 810d294:	47a0      	blx	r4
 810d296:	bf00      	nop
    }
 810d298:	371c      	adds	r7, #28
 810d29a:	46bd      	mov	sp, r7
 810d29c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810d29e <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
      constexpr _Tuple_impl(const _Head& __head)
 810d29e:	b580      	push	{r7, lr}
 810d2a0:	b082      	sub	sp, #8
 810d2a2:	af00      	add	r7, sp, #0
 810d2a4:	6078      	str	r0, [r7, #4]
 810d2a6:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 810d2a8:	6839      	ldr	r1, [r7, #0]
 810d2aa:	6878      	ldr	r0, [r7, #4]
 810d2ac:	f000 f8a1 	bl	810d3f2 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
 810d2b0:	687b      	ldr	r3, [r7, #4]
 810d2b2:	4618      	mov	r0, r3
 810d2b4:	3708      	adds	r7, #8
 810d2b6:	46bd      	mov	sp, r7
 810d2b8:	bd80      	pop	{r7, pc}

0810d2ba <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810d2ba:	b480      	push	{r7}
 810d2bc:	b083      	sub	sp, #12
 810d2be:	af00      	add	r7, sp, #0
 810d2c0:	6078      	str	r0, [r7, #4]
 810d2c2:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810d2c4:	687b      	ldr	r3, [r7, #4]
 810d2c6:	4618      	mov	r0, r3
 810d2c8:	370c      	adds	r7, #12
 810d2ca:	46bd      	mov	sp, r7
 810d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d2d0:	4770      	bx	lr

0810d2d2 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 810d2d2:	b480      	push	{r7}
 810d2d4:	b083      	sub	sp, #12
 810d2d6:	af00      	add	r7, sp, #0
 810d2d8:	6078      	str	r0, [r7, #4]
 810d2da:	687b      	ldr	r3, [r7, #4]
 810d2dc:	4618      	mov	r0, r3
 810d2de:	370c      	adds	r7, #12
 810d2e0:	46bd      	mov	sp, r7
 810d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d2e6:	4770      	bx	lr

0810d2e8 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 810d2e8:	b590      	push	{r4, r7, lr}
 810d2ea:	b085      	sub	sp, #20
 810d2ec:	af00      	add	r7, sp, #0
 810d2ee:	60f8      	str	r0, [r7, #12]
 810d2f0:	60b9      	str	r1, [r7, #8]
 810d2f2:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 810d2f4:	68fc      	ldr	r4, [r7, #12]
 810d2f6:	6878      	ldr	r0, [r7, #4]
 810d2f8:	f7ff fbcd 	bl	810ca96 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d2fc:	4603      	mov	r3, r0
 810d2fe:	4619      	mov	r1, r3
 810d300:	4620      	mov	r0, r4
 810d302:	f000 f882 	bl	810d40a <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
 810d306:	68fb      	ldr	r3, [r7, #12]
 810d308:	1d1c      	adds	r4, r3, #4
 810d30a:	68b8      	ldr	r0, [r7, #8]
 810d30c:	f7ff fbb8 	bl	810ca80 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d310:	4603      	mov	r3, r0
 810d312:	4619      	mov	r1, r3
 810d314:	4620      	mov	r0, r4
 810d316:	f000 f82a 	bl	810d36e <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
 810d31a:	68fb      	ldr	r3, [r7, #12]
 810d31c:	4618      	mov	r0, r3
 810d31e:	3714      	adds	r7, #20
 810d320:	46bd      	mov	sp, r7
 810d322:	bd90      	pop	{r4, r7, pc}

0810d324 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810d324:	b480      	push	{r7}
 810d326:	b083      	sub	sp, #12
 810d328:	af00      	add	r7, sp, #0
 810d32a:	6078      	str	r0, [r7, #4]
 810d32c:	687b      	ldr	r3, [r7, #4]
 810d32e:	681b      	ldr	r3, [r3, #0]
 810d330:	4618      	mov	r0, r3
 810d332:	370c      	adds	r7, #12
 810d334:	46bd      	mov	sp, r7
 810d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d33a:	4770      	bx	lr

0810d33c <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810d33c:	b580      	push	{r7, lr}
 810d33e:	b082      	sub	sp, #8
 810d340:	af00      	add	r7, sp, #0
 810d342:	6078      	str	r0, [r7, #4]
 810d344:	687b      	ldr	r3, [r7, #4]
 810d346:	3304      	adds	r3, #4
 810d348:	4618      	mov	r0, r3
 810d34a:	f000 f871 	bl	810d430 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
 810d34e:	4603      	mov	r3, r0
 810d350:	4618      	mov	r0, r3
 810d352:	3708      	adds	r7, #8
 810d354:	46bd      	mov	sp, r7
 810d356:	bd80      	pop	{r7, pc}

0810d358 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d358:	b480      	push	{r7}
 810d35a:	b083      	sub	sp, #12
 810d35c:	af00      	add	r7, sp, #0
 810d35e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d360:	687b      	ldr	r3, [r7, #4]
 810d362:	4618      	mov	r0, r3
 810d364:	370c      	adds	r7, #12
 810d366:	46bd      	mov	sp, r7
 810d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d36c:	4770      	bx	lr

0810d36e <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810d36e:	b580      	push	{r7, lr}
 810d370:	b082      	sub	sp, #8
 810d372:	af00      	add	r7, sp, #0
 810d374:	6078      	str	r0, [r7, #4]
 810d376:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810d378:	6838      	ldr	r0, [r7, #0]
 810d37a:	f7ff fb81 	bl	810ca80 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 810d37e:	4602      	mov	r2, r0
 810d380:	687b      	ldr	r3, [r7, #4]
 810d382:	601a      	str	r2, [r3, #0]
 810d384:	687b      	ldr	r3, [r7, #4]
 810d386:	4618      	mov	r0, r3
 810d388:	3708      	adds	r7, #8
 810d38a:	46bd      	mov	sp, r7
 810d38c:	bd80      	pop	{r7, pc}

0810d38e <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810d38e:	b580      	push	{r7, lr}
 810d390:	b082      	sub	sp, #8
 810d392:	af00      	add	r7, sp, #0
 810d394:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810d396:	687b      	ldr	r3, [r7, #4]
 810d398:	4618      	mov	r0, r3
 810d39a:	f000 f872 	bl	810d482 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810d39e:	4603      	mov	r3, r0
 810d3a0:	4618      	mov	r0, r3
 810d3a2:	3708      	adds	r7, #8
 810d3a4:	46bd      	mov	sp, r7
 810d3a6:	bd80      	pop	{r7, pc}

0810d3a8 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810d3a8:	b580      	push	{r7, lr}
 810d3aa:	b082      	sub	sp, #8
 810d3ac:	af00      	add	r7, sp, #0
 810d3ae:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810d3b0:	687b      	ldr	r3, [r7, #4]
 810d3b2:	4618      	mov	r0, r3
 810d3b4:	f000 f871 	bl	810d49a <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 810d3b8:	4603      	mov	r3, r0
 810d3ba:	4618      	mov	r0, r3
 810d3bc:	3708      	adds	r7, #8
 810d3be:	46bd      	mov	sp, r7
 810d3c0:	bd80      	pop	{r7, pc}

0810d3c2 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810d3c2:	b580      	push	{r7, lr}
 810d3c4:	b082      	sub	sp, #8
 810d3c6:	af00      	add	r7, sp, #0
 810d3c8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810d3ca:	687b      	ldr	r3, [r7, #4]
 810d3cc:	4618      	mov	r0, r3
 810d3ce:	f000 f870 	bl	810d4b2 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 810d3d2:	4603      	mov	r3, r0
 810d3d4:	4618      	mov	r0, r3
 810d3d6:	3708      	adds	r7, #8
 810d3d8:	46bd      	mov	sp, r7
 810d3da:	bd80      	pop	{r7, pc}

0810d3dc <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810d3dc:	b480      	push	{r7}
 810d3de:	b083      	sub	sp, #12
 810d3e0:	af00      	add	r7, sp, #0
 810d3e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810d3e4:	687b      	ldr	r3, [r7, #4]
 810d3e6:	4618      	mov	r0, r3
 810d3e8:	370c      	adds	r7, #12
 810d3ea:	46bd      	mov	sp, r7
 810d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d3f0:	4770      	bx	lr

0810d3f2 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 810d3f2:	b480      	push	{r7}
 810d3f4:	b083      	sub	sp, #12
 810d3f6:	af00      	add	r7, sp, #0
 810d3f8:	6078      	str	r0, [r7, #4]
 810d3fa:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 810d3fc:	687b      	ldr	r3, [r7, #4]
 810d3fe:	4618      	mov	r0, r3
 810d400:	370c      	adds	r7, #12
 810d402:	46bd      	mov	sp, r7
 810d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d408:	4770      	bx	lr

0810d40a <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 810d40a:	b590      	push	{r4, r7, lr}
 810d40c:	b083      	sub	sp, #12
 810d40e:	af00      	add	r7, sp, #0
 810d410:	6078      	str	r0, [r7, #4]
 810d412:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 810d414:	687c      	ldr	r4, [r7, #4]
 810d416:	6838      	ldr	r0, [r7, #0]
 810d418:	f7ff fb3d 	bl	810ca96 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d41c:	4603      	mov	r3, r0
 810d41e:	4619      	mov	r1, r3
 810d420:	4620      	mov	r0, r4
 810d422:	f000 f81e 	bl	810d462 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
 810d426:	687b      	ldr	r3, [r7, #4]
 810d428:	4618      	mov	r0, r3
 810d42a:	370c      	adds	r7, #12
 810d42c:	46bd      	mov	sp, r7
 810d42e:	bd90      	pop	{r4, r7, pc}

0810d430 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810d430:	b480      	push	{r7}
 810d432:	b083      	sub	sp, #12
 810d434:	af00      	add	r7, sp, #0
 810d436:	6078      	str	r0, [r7, #4]
 810d438:	687b      	ldr	r3, [r7, #4]
 810d43a:	681b      	ldr	r3, [r3, #0]
 810d43c:	4618      	mov	r0, r3
 810d43e:	370c      	adds	r7, #12
 810d440:	46bd      	mov	sp, r7
 810d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d446:	4770      	bx	lr

0810d448 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810d448:	b580      	push	{r7, lr}
 810d44a:	b082      	sub	sp, #8
 810d44c:	af00      	add	r7, sp, #0
 810d44e:	6078      	str	r0, [r7, #4]
 810d450:	687b      	ldr	r3, [r7, #4]
 810d452:	4618      	mov	r0, r3
 810d454:	f000 f839 	bl	810d4ca <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
 810d458:	4603      	mov	r3, r0
 810d45a:	4618      	mov	r0, r3
 810d45c:	3708      	adds	r7, #8
 810d45e:	46bd      	mov	sp, r7
 810d460:	bd80      	pop	{r7, pc}

0810d462 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810d462:	b580      	push	{r7, lr}
 810d464:	b082      	sub	sp, #8
 810d466:	af00      	add	r7, sp, #0
 810d468:	6078      	str	r0, [r7, #4]
 810d46a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810d46c:	6838      	ldr	r0, [r7, #0]
 810d46e:	f7ff fb12 	bl	810ca96 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 810d472:	4602      	mov	r2, r0
 810d474:	687b      	ldr	r3, [r7, #4]
 810d476:	601a      	str	r2, [r3, #0]
 810d478:	687b      	ldr	r3, [r7, #4]
 810d47a:	4618      	mov	r0, r3
 810d47c:	3708      	adds	r7, #8
 810d47e:	46bd      	mov	sp, r7
 810d480:	bd80      	pop	{r7, pc}

0810d482 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d482:	b580      	push	{r7, lr}
 810d484:	b082      	sub	sp, #8
 810d486:	af00      	add	r7, sp, #0
 810d488:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d48a:	6878      	ldr	r0, [r7, #4]
 810d48c:	f7ff fe23 	bl	810d0d6 <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
 810d490:	4603      	mov	r3, r0
 810d492:	4618      	mov	r0, r3
 810d494:	3708      	adds	r7, #8
 810d496:	46bd      	mov	sp, r7
 810d498:	bd80      	pop	{r7, pc}

0810d49a <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d49a:	b580      	push	{r7, lr}
 810d49c:	b082      	sub	sp, #8
 810d49e:	af00      	add	r7, sp, #0
 810d4a0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d4a2:	6878      	ldr	r0, [r7, #4]
 810d4a4:	f7ff ff4a 	bl	810d33c <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
 810d4a8:	4603      	mov	r3, r0
 810d4aa:	4618      	mov	r0, r3
 810d4ac:	3708      	adds	r7, #8
 810d4ae:	46bd      	mov	sp, r7
 810d4b0:	bd80      	pop	{r7, pc}

0810d4b2 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810d4b2:	b580      	push	{r7, lr}
 810d4b4:	b082      	sub	sp, #8
 810d4b6:	af00      	add	r7, sp, #0
 810d4b8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810d4ba:	6878      	ldr	r0, [r7, #4]
 810d4bc:	f7ff ffc4 	bl	810d448 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
 810d4c0:	4603      	mov	r3, r0
 810d4c2:	4618      	mov	r0, r3
 810d4c4:	3708      	adds	r7, #8
 810d4c6:	46bd      	mov	sp, r7
 810d4c8:	bd80      	pop	{r7, pc}

0810d4ca <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810d4ca:	b480      	push	{r7}
 810d4cc:	b083      	sub	sp, #12
 810d4ce:	af00      	add	r7, sp, #0
 810d4d0:	6078      	str	r0, [r7, #4]
 810d4d2:	687b      	ldr	r3, [r7, #4]
 810d4d4:	681b      	ldr	r3, [r3, #0]
 810d4d6:	4618      	mov	r0, r3
 810d4d8:	370c      	adds	r7, #12
 810d4da:	46bd      	mov	sp, r7
 810d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d4e0:	4770      	bx	lr
	...

0810d4e4 <_ZN5IOBusD1Ev>:

#include "MessageBus.h"
#include "IODriver.h"


class IOBus : public MessageBus {
 810d4e4:	b580      	push	{r7, lr}
 810d4e6:	b082      	sub	sp, #8
 810d4e8:	af00      	add	r7, sp, #0
 810d4ea:	6078      	str	r0, [r7, #4]
 810d4ec:	4a05      	ldr	r2, [pc, #20]	; (810d504 <_ZN5IOBusD1Ev+0x20>)
 810d4ee:	687b      	ldr	r3, [r7, #4]
 810d4f0:	601a      	str	r2, [r3, #0]
 810d4f2:	687b      	ldr	r3, [r7, #4]
 810d4f4:	4618      	mov	r0, r3
 810d4f6:	f7fe ff01 	bl	810c2fc <_ZN10MessageBusD1Ev>
 810d4fa:	687b      	ldr	r3, [r7, #4]
 810d4fc:	4618      	mov	r0, r3
 810d4fe:	3708      	adds	r7, #8
 810d500:	46bd      	mov	sp, r7
 810d502:	bd80      	pop	{r7, pc}
 810d504:	08112d4c 	.word	0x08112d4c

0810d508 <_ZN5IOBusD0Ev>:
 810d508:	b580      	push	{r7, lr}
 810d50a:	b082      	sub	sp, #8
 810d50c:	af00      	add	r7, sp, #0
 810d50e:	6078      	str	r0, [r7, #4]
 810d510:	6878      	ldr	r0, [r7, #4]
 810d512:	f7ff ffe7 	bl	810d4e4 <_ZN5IOBusD1Ev>
 810d516:	f644 0114 	movw	r1, #18452	; 0x4814
 810d51a:	6878      	ldr	r0, [r7, #4]
 810d51c:	f001 fc7a 	bl	810ee14 <_ZdlPvj>
 810d520:	687b      	ldr	r3, [r7, #4]
 810d522:	4618      	mov	r0, r3
 810d524:	3708      	adds	r7, #8
 810d526:	46bd      	mov	sp, r7
 810d528:	bd80      	pop	{r7, pc}

0810d52a <_ZNKSt9type_info4nameEv>:
     *  the runtime-mandated type_info structures in the new-abi.  */
    virtual ~type_info();

    /** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */
    const char* name() const _GLIBCXX_NOEXCEPT
 810d52a:	b480      	push	{r7}
 810d52c:	b083      	sub	sp, #12
 810d52e:	af00      	add	r7, sp, #0
 810d530:	6078      	str	r0, [r7, #4]
    { return __name[0] == '*' ? __name + 1 : __name; }
 810d532:	687b      	ldr	r3, [r7, #4]
 810d534:	685b      	ldr	r3, [r3, #4]
 810d536:	781b      	ldrb	r3, [r3, #0]
 810d538:	2b2a      	cmp	r3, #42	; 0x2a
 810d53a:	d103      	bne.n	810d544 <_ZNKSt9type_info4nameEv+0x1a>
 810d53c:	687b      	ldr	r3, [r7, #4]
 810d53e:	685b      	ldr	r3, [r3, #4]
 810d540:	3301      	adds	r3, #1
 810d542:	e001      	b.n	810d548 <_ZNKSt9type_info4nameEv+0x1e>
 810d544:	687b      	ldr	r3, [r7, #4]
 810d546:	685b      	ldr	r3, [r3, #4]
 810d548:	4618      	mov	r0, r3
 810d54a:	370c      	adds	r7, #12
 810d54c:	46bd      	mov	sp, r7
 810d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d552:	4770      	bx	lr

0810d554 <_ZNKSt9type_info9hash_codeEv>:
#endif
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
 810d554:	b590      	push	{r4, r7, lr}
 810d556:	b083      	sub	sp, #12
 810d558:	af00      	add	r7, sp, #0
 810d55a:	6078      	str	r0, [r7, #4]
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 810d55c:	6878      	ldr	r0, [r7, #4]
 810d55e:	f7ff ffe4 	bl	810d52a <_ZNKSt9type_info4nameEv>
 810d562:	4604      	mov	r4, r0
 810d564:	6878      	ldr	r0, [r7, #4]
 810d566:	f7ff ffe0 	bl	810d52a <_ZNKSt9type_info4nameEv>
 810d56a:	4603      	mov	r3, r0
 810d56c:	4618      	mov	r0, r3
 810d56e:	f7f2 fec1 	bl	81002f4 <strlen>
 810d572:	4603      	mov	r3, r0
 810d574:	4a04      	ldr	r2, [pc, #16]	; (810d588 <_ZNKSt9type_info9hash_codeEv+0x34>)
 810d576:	4619      	mov	r1, r3
 810d578:	4620      	mov	r0, r4
 810d57a:	f001 fc5d 	bl	810ee38 <_ZSt11_Hash_bytesPKvjj>
 810d57e:	4603      	mov	r3, r0
			 static_cast<size_t>(0xc70f6907UL));
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
 810d580:	4618      	mov	r0, r3
 810d582:	370c      	adds	r7, #12
 810d584:	46bd      	mov	sp, r7
 810d586:	bd90      	pop	{r4, r7, pc}
 810d588:	c70f6907 	.word	0xc70f6907

0810d58c <_ZN10MessageBus6defineI10PingPacketEEbh>:
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810d58c:	b580      	push	{r7, lr}
 810d58e:	b086      	sub	sp, #24
 810d590:	af00      	add	r7, sp, #0
 810d592:	6078      	str	r0, [r7, #4]
 810d594:	460b      	mov	r3, r1
 810d596:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810d598:	2308      	movs	r3, #8
 810d59a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810d59c:	4829      	ldr	r0, [pc, #164]	; (810d644 <_ZN10MessageBus6defineI10PingPacketEEbh+0xb8>)
 810d59e:	f7ff ffd9 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810d5a2:	60f8      	str	r0, [r7, #12]

	uint32_t insertion_point = hash % 256;
 810d5a4:	68fb      	ldr	r3, [r7, #12]
 810d5a6:	b2db      	uxtb	r3, r3
 810d5a8:	617b      	str	r3, [r7, #20]

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810d5aa:	78fb      	ldrb	r3, [r7, #3]
 810d5ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d5b0:	687a      	ldr	r2, [r7, #4]
 810d5b2:	00db      	lsls	r3, r3, #3
 810d5b4:	4413      	add	r3, r2
 810d5b6:	689b      	ldr	r3, [r3, #8]
 810d5b8:	2b00      	cmp	r3, #0
 810d5ba:	d001      	beq.n	810d5c0 <_ZN10MessageBus6defineI10PingPacketEEbh+0x34>
		return false; // Packet ID already in use
 810d5bc:	2300      	movs	r3, #0
 810d5be:	e03c      	b.n	810d63a <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	if(struct_size > max_packet_size) {
 810d5c0:	693b      	ldr	r3, [r7, #16]
 810d5c2:	2bff      	cmp	r3, #255	; 0xff
 810d5c4:	d901      	bls.n	810d5ca <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		return false; // Packet size too large
 810d5c6:	2300      	movs	r3, #0
 810d5c8:	e037      	b.n	810d63a <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	while(definitions_by_type[insertion_point] != nullptr) {
 810d5ca:	687a      	ldr	r2, [r7, #4]
 810d5cc:	697b      	ldr	r3, [r7, #20]
 810d5ce:	3380      	adds	r3, #128	; 0x80
 810d5d0:	009b      	lsls	r3, r3, #2
 810d5d2:	4413      	add	r3, r2
 810d5d4:	685b      	ldr	r3, [r3, #4]
 810d5d6:	2b00      	cmp	r3, #0
 810d5d8:	d015      	beq.n	810d606 <_ZN10MessageBus6defineI10PingPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810d5da:	687a      	ldr	r2, [r7, #4]
 810d5dc:	697b      	ldr	r3, [r7, #20]
 810d5de:	3380      	adds	r3, #128	; 0x80
 810d5e0:	009b      	lsls	r3, r3, #2
 810d5e2:	4413      	add	r3, r2
 810d5e4:	685b      	ldr	r3, [r3, #4]
 810d5e6:	685b      	ldr	r3, [r3, #4]
 810d5e8:	68fa      	ldr	r2, [r7, #12]
 810d5ea:	429a      	cmp	r2, r3
 810d5ec:	d101      	bne.n	810d5f2 <_ZN10MessageBus6defineI10PingPacketEEbh+0x66>
			return false; // Packet type already defined
 810d5ee:	2300      	movs	r3, #0
 810d5f0:	e023      	b.n	810d63a <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
		}

		insertion_point++;
 810d5f2:	697b      	ldr	r3, [r7, #20]
 810d5f4:	3301      	adds	r3, #1
 810d5f6:	617b      	str	r3, [r7, #20]

		if(insertion_point == 256) {
 810d5f8:	697b      	ldr	r3, [r7, #20]
 810d5fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d5fe:	d1e4      	bne.n	810d5ca <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
			insertion_point = 0;
 810d600:	2300      	movs	r3, #0
 810d602:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810d604:	e7e1      	b.n	810d5ca <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		}
	}

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810d606:	78fb      	ldrb	r3, [r7, #3]
 810d608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d60c:	00db      	lsls	r3, r3, #3
 810d60e:	687a      	ldr	r2, [r7, #4]
 810d610:	4413      	add	r3, r2
 810d612:	3304      	adds	r3, #4
 810d614:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
 810d616:	68bb      	ldr	r3, [r7, #8]
 810d618:	78fa      	ldrb	r2, [r7, #3]
 810d61a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810d61c:	693b      	ldr	r3, [r7, #16]
 810d61e:	b2da      	uxtb	r2, r3
 810d620:	68bb      	ldr	r3, [r7, #8]
 810d622:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810d624:	68bb      	ldr	r3, [r7, #8]
 810d626:	68fa      	ldr	r2, [r7, #12]
 810d628:	605a      	str	r2, [r3, #4]

	definitions_by_type[insertion_point] = def;
 810d62a:	687a      	ldr	r2, [r7, #4]
 810d62c:	697b      	ldr	r3, [r7, #20]
 810d62e:	3380      	adds	r3, #128	; 0x80
 810d630:	009b      	lsls	r3, r3, #2
 810d632:	4413      	add	r3, r2
 810d634:	68ba      	ldr	r2, [r7, #8]
 810d636:	605a      	str	r2, [r3, #4]

	return true;
 810d638:	2301      	movs	r3, #1
}
 810d63a:	4618      	mov	r0, r3
 810d63c:	3718      	adds	r7, #24
 810d63e:	46bd      	mov	sp, r7
 810d640:	bd80      	pop	{r7, pc}
 810d642:	bf00      	nop
 810d644:	08112fd0 	.word	0x08112fd0

0810d648 <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810d648:	b580      	push	{r7, lr}
 810d64a:	b086      	sub	sp, #24
 810d64c:	af00      	add	r7, sp, #0
 810d64e:	6078      	str	r0, [r7, #4]
 810d650:	460b      	mov	r3, r1
 810d652:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810d654:	2308      	movs	r3, #8
 810d656:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810d658:	4829      	ldr	r0, [pc, #164]	; (810d700 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xb8>)
 810d65a:	f7ff ff7b 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810d65e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810d660:	68fb      	ldr	r3, [r7, #12]
 810d662:	b2db      	uxtb	r3, r3
 810d664:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810d666:	78fb      	ldrb	r3, [r7, #3]
 810d668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d66c:	687a      	ldr	r2, [r7, #4]
 810d66e:	00db      	lsls	r3, r3, #3
 810d670:	4413      	add	r3, r2
 810d672:	689b      	ldr	r3, [r3, #8]
 810d674:	2b00      	cmp	r3, #0
 810d676:	d001      	beq.n	810d67c <_ZN10MessageBus6defineI13RequestPacketEEbh+0x34>
		return false; // Packet ID already in use
 810d678:	2300      	movs	r3, #0
 810d67a:	e03c      	b.n	810d6f6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810d67c:	693b      	ldr	r3, [r7, #16]
 810d67e:	2bff      	cmp	r3, #255	; 0xff
 810d680:	d901      	bls.n	810d686 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
		return false; // Packet size too large
 810d682:	2300      	movs	r3, #0
 810d684:	e037      	b.n	810d6f6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810d686:	687a      	ldr	r2, [r7, #4]
 810d688:	697b      	ldr	r3, [r7, #20]
 810d68a:	3380      	adds	r3, #128	; 0x80
 810d68c:	009b      	lsls	r3, r3, #2
 810d68e:	4413      	add	r3, r2
 810d690:	685b      	ldr	r3, [r3, #4]
 810d692:	2b00      	cmp	r3, #0
 810d694:	d015      	beq.n	810d6c2 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810d696:	687a      	ldr	r2, [r7, #4]
 810d698:	697b      	ldr	r3, [r7, #20]
 810d69a:	3380      	adds	r3, #128	; 0x80
 810d69c:	009b      	lsls	r3, r3, #2
 810d69e:	4413      	add	r3, r2
 810d6a0:	685b      	ldr	r3, [r3, #4]
 810d6a2:	685b      	ldr	r3, [r3, #4]
 810d6a4:	68fa      	ldr	r2, [r7, #12]
 810d6a6:	429a      	cmp	r2, r3
 810d6a8:	d101      	bne.n	810d6ae <_ZN10MessageBus6defineI13RequestPacketEEbh+0x66>
			return false; // Packet type already defined
 810d6aa:	2300      	movs	r3, #0
 810d6ac:	e023      	b.n	810d6f6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
		insertion_point++;
 810d6ae:	697b      	ldr	r3, [r7, #20]
 810d6b0:	3301      	adds	r3, #1
 810d6b2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810d6b4:	697b      	ldr	r3, [r7, #20]
 810d6b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d6ba:	d1e4      	bne.n	810d686 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
			insertion_point = 0;
 810d6bc:	2300      	movs	r3, #0
 810d6be:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810d6c0:	e7e1      	b.n	810d686 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810d6c2:	78fb      	ldrb	r3, [r7, #3]
 810d6c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d6c8:	00db      	lsls	r3, r3, #3
 810d6ca:	687a      	ldr	r2, [r7, #4]
 810d6cc:	4413      	add	r3, r2
 810d6ce:	3304      	adds	r3, #4
 810d6d0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810d6d2:	68bb      	ldr	r3, [r7, #8]
 810d6d4:	78fa      	ldrb	r2, [r7, #3]
 810d6d6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810d6d8:	693b      	ldr	r3, [r7, #16]
 810d6da:	b2da      	uxtb	r2, r3
 810d6dc:	68bb      	ldr	r3, [r7, #8]
 810d6de:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810d6e0:	68bb      	ldr	r3, [r7, #8]
 810d6e2:	68fa      	ldr	r2, [r7, #12]
 810d6e4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810d6e6:	687a      	ldr	r2, [r7, #4]
 810d6e8:	697b      	ldr	r3, [r7, #20]
 810d6ea:	3380      	adds	r3, #128	; 0x80
 810d6ec:	009b      	lsls	r3, r3, #2
 810d6ee:	4413      	add	r3, r2
 810d6f0:	68ba      	ldr	r2, [r7, #8]
 810d6f2:	605a      	str	r2, [r3, #4]
	return true;
 810d6f4:	2301      	movs	r3, #1
}
 810d6f6:	4618      	mov	r0, r3
 810d6f8:	3718      	adds	r7, #24
 810d6fa:	46bd      	mov	sp, r7
 810d6fc:	bd80      	pop	{r7, pc}
 810d6fe:	bf00      	nop
 810d700:	08112fb8 	.word	0x08112fb8

0810d704 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810d704:	b580      	push	{r7, lr}
 810d706:	b086      	sub	sp, #24
 810d708:	af00      	add	r7, sp, #0
 810d70a:	6078      	str	r0, [r7, #4]
 810d70c:	460b      	mov	r3, r1
 810d70e:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810d710:	2308      	movs	r3, #8
 810d712:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810d714:	4829      	ldr	r0, [pc, #164]	; (810d7bc <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xb8>)
 810d716:	f7ff ff1d 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810d71a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810d71c:	68fb      	ldr	r3, [r7, #12]
 810d71e:	b2db      	uxtb	r3, r3
 810d720:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810d722:	78fb      	ldrb	r3, [r7, #3]
 810d724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d728:	687a      	ldr	r2, [r7, #4]
 810d72a:	00db      	lsls	r3, r3, #3
 810d72c:	4413      	add	r3, r2
 810d72e:	689b      	ldr	r3, [r3, #8]
 810d730:	2b00      	cmp	r3, #0
 810d732:	d001      	beq.n	810d738 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x34>
		return false; // Packet ID already in use
 810d734:	2300      	movs	r3, #0
 810d736:	e03c      	b.n	810d7b2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810d738:	693b      	ldr	r3, [r7, #16]
 810d73a:	2bff      	cmp	r3, #255	; 0xff
 810d73c:	d901      	bls.n	810d742 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
		return false; // Packet size too large
 810d73e:	2300      	movs	r3, #0
 810d740:	e037      	b.n	810d7b2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810d742:	687a      	ldr	r2, [r7, #4]
 810d744:	697b      	ldr	r3, [r7, #20]
 810d746:	3380      	adds	r3, #128	; 0x80
 810d748:	009b      	lsls	r3, r3, #2
 810d74a:	4413      	add	r3, r2
 810d74c:	685b      	ldr	r3, [r3, #4]
 810d74e:	2b00      	cmp	r3, #0
 810d750:	d015      	beq.n	810d77e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810d752:	687a      	ldr	r2, [r7, #4]
 810d754:	697b      	ldr	r3, [r7, #20]
 810d756:	3380      	adds	r3, #128	; 0x80
 810d758:	009b      	lsls	r3, r3, #2
 810d75a:	4413      	add	r3, r2
 810d75c:	685b      	ldr	r3, [r3, #4]
 810d75e:	685b      	ldr	r3, [r3, #4]
 810d760:	68fa      	ldr	r2, [r7, #12]
 810d762:	429a      	cmp	r2, r3
 810d764:	d101      	bne.n	810d76a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x66>
			return false; // Packet type already defined
 810d766:	2300      	movs	r3, #0
 810d768:	e023      	b.n	810d7b2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
		insertion_point++;
 810d76a:	697b      	ldr	r3, [r7, #20]
 810d76c:	3301      	adds	r3, #1
 810d76e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810d770:	697b      	ldr	r3, [r7, #20]
 810d772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d776:	d1e4      	bne.n	810d742 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
			insertion_point = 0;
 810d778:	2300      	movs	r3, #0
 810d77a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810d77c:	e7e1      	b.n	810d742 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810d77e:	78fb      	ldrb	r3, [r7, #3]
 810d780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d784:	00db      	lsls	r3, r3, #3
 810d786:	687a      	ldr	r2, [r7, #4]
 810d788:	4413      	add	r3, r2
 810d78a:	3304      	adds	r3, #4
 810d78c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810d78e:	68bb      	ldr	r3, [r7, #8]
 810d790:	78fa      	ldrb	r2, [r7, #3]
 810d792:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810d794:	693b      	ldr	r3, [r7, #16]
 810d796:	b2da      	uxtb	r2, r3
 810d798:	68bb      	ldr	r3, [r7, #8]
 810d79a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810d79c:	68bb      	ldr	r3, [r7, #8]
 810d79e:	68fa      	ldr	r2, [r7, #12]
 810d7a0:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810d7a2:	687a      	ldr	r2, [r7, #4]
 810d7a4:	697b      	ldr	r3, [r7, #20]
 810d7a6:	3380      	adds	r3, #128	; 0x80
 810d7a8:	009b      	lsls	r3, r3, #2
 810d7aa:	4413      	add	r3, r2
 810d7ac:	68ba      	ldr	r2, [r7, #8]
 810d7ae:	605a      	str	r2, [r3, #4]
	return true;
 810d7b0:	2301      	movs	r3, #1
}
 810d7b2:	4618      	mov	r0, r3
 810d7b4:	3718      	adds	r7, #24
 810d7b6:	46bd      	mov	sp, r7
 810d7b8:	bd80      	pop	{r7, pc}
 810d7ba:	bf00      	nop
 810d7bc:	08112f9c 	.word	0x08112f9c

0810d7c0 <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810d7c0:	b580      	push	{r7, lr}
 810d7c2:	b086      	sub	sp, #24
 810d7c4:	af00      	add	r7, sp, #0
 810d7c6:	6078      	str	r0, [r7, #4]
 810d7c8:	460b      	mov	r3, r1
 810d7ca:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810d7cc:	2305      	movs	r3, #5
 810d7ce:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810d7d0:	4829      	ldr	r0, [pc, #164]	; (810d878 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xb8>)
 810d7d2:	f7ff febf 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810d7d6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810d7d8:	68fb      	ldr	r3, [r7, #12]
 810d7da:	b2db      	uxtb	r3, r3
 810d7dc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810d7de:	78fb      	ldrb	r3, [r7, #3]
 810d7e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d7e4:	687a      	ldr	r2, [r7, #4]
 810d7e6:	00db      	lsls	r3, r3, #3
 810d7e8:	4413      	add	r3, r2
 810d7ea:	689b      	ldr	r3, [r3, #8]
 810d7ec:	2b00      	cmp	r3, #0
 810d7ee:	d001      	beq.n	810d7f4 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x34>
		return false; // Packet ID already in use
 810d7f0:	2300      	movs	r3, #0
 810d7f2:	e03c      	b.n	810d86e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810d7f4:	693b      	ldr	r3, [r7, #16]
 810d7f6:	2bff      	cmp	r3, #255	; 0xff
 810d7f8:	d901      	bls.n	810d7fe <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
		return false; // Packet size too large
 810d7fa:	2300      	movs	r3, #0
 810d7fc:	e037      	b.n	810d86e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810d7fe:	687a      	ldr	r2, [r7, #4]
 810d800:	697b      	ldr	r3, [r7, #20]
 810d802:	3380      	adds	r3, #128	; 0x80
 810d804:	009b      	lsls	r3, r3, #2
 810d806:	4413      	add	r3, r2
 810d808:	685b      	ldr	r3, [r3, #4]
 810d80a:	2b00      	cmp	r3, #0
 810d80c:	d015      	beq.n	810d83a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810d80e:	687a      	ldr	r2, [r7, #4]
 810d810:	697b      	ldr	r3, [r7, #20]
 810d812:	3380      	adds	r3, #128	; 0x80
 810d814:	009b      	lsls	r3, r3, #2
 810d816:	4413      	add	r3, r2
 810d818:	685b      	ldr	r3, [r3, #4]
 810d81a:	685b      	ldr	r3, [r3, #4]
 810d81c:	68fa      	ldr	r2, [r7, #12]
 810d81e:	429a      	cmp	r2, r3
 810d820:	d101      	bne.n	810d826 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x66>
			return false; // Packet type already defined
 810d822:	2300      	movs	r3, #0
 810d824:	e023      	b.n	810d86e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
		insertion_point++;
 810d826:	697b      	ldr	r3, [r7, #20]
 810d828:	3301      	adds	r3, #1
 810d82a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810d82c:	697b      	ldr	r3, [r7, #20]
 810d82e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d832:	d1e4      	bne.n	810d7fe <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
			insertion_point = 0;
 810d834:	2300      	movs	r3, #0
 810d836:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810d838:	e7e1      	b.n	810d7fe <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810d83a:	78fb      	ldrb	r3, [r7, #3]
 810d83c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d840:	00db      	lsls	r3, r3, #3
 810d842:	687a      	ldr	r2, [r7, #4]
 810d844:	4413      	add	r3, r2
 810d846:	3304      	adds	r3, #4
 810d848:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810d84a:	68bb      	ldr	r3, [r7, #8]
 810d84c:	78fa      	ldrb	r2, [r7, #3]
 810d84e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810d850:	693b      	ldr	r3, [r7, #16]
 810d852:	b2da      	uxtb	r2, r3
 810d854:	68bb      	ldr	r3, [r7, #8]
 810d856:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810d858:	68bb      	ldr	r3, [r7, #8]
 810d85a:	68fa      	ldr	r2, [r7, #12]
 810d85c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810d85e:	687a      	ldr	r2, [r7, #4]
 810d860:	697b      	ldr	r3, [r7, #20]
 810d862:	3380      	adds	r3, #128	; 0x80
 810d864:	009b      	lsls	r3, r3, #2
 810d866:	4413      	add	r3, r2
 810d868:	68ba      	ldr	r2, [r7, #8]
 810d86a:	605a      	str	r2, [r3, #4]
	return true;
 810d86c:	2301      	movs	r3, #1
}
 810d86e:	4618      	mov	r0, r3
 810d870:	3718      	adds	r7, #24
 810d872:	46bd      	mov	sp, r7
 810d874:	bd80      	pop	{r7, pc}
 810d876:	bf00      	nop
 810d878:	08112f80 	.word	0x08112f80

0810d87c <_ZN10MessageBus6defineI10DataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810d87c:	b580      	push	{r7, lr}
 810d87e:	b086      	sub	sp, #24
 810d880:	af00      	add	r7, sp, #0
 810d882:	6078      	str	r0, [r7, #4]
 810d884:	460b      	mov	r3, r1
 810d886:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810d888:	2304      	movs	r3, #4
 810d88a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810d88c:	4829      	ldr	r0, [pc, #164]	; (810d934 <_ZN10MessageBus6defineI10DataPacketEEbh+0xb8>)
 810d88e:	f7ff fe61 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810d892:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810d894:	68fb      	ldr	r3, [r7, #12]
 810d896:	b2db      	uxtb	r3, r3
 810d898:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810d89a:	78fb      	ldrb	r3, [r7, #3]
 810d89c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d8a0:	687a      	ldr	r2, [r7, #4]
 810d8a2:	00db      	lsls	r3, r3, #3
 810d8a4:	4413      	add	r3, r2
 810d8a6:	689b      	ldr	r3, [r3, #8]
 810d8a8:	2b00      	cmp	r3, #0
 810d8aa:	d001      	beq.n	810d8b0 <_ZN10MessageBus6defineI10DataPacketEEbh+0x34>
		return false; // Packet ID already in use
 810d8ac:	2300      	movs	r3, #0
 810d8ae:	e03c      	b.n	810d92a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810d8b0:	693b      	ldr	r3, [r7, #16]
 810d8b2:	2bff      	cmp	r3, #255	; 0xff
 810d8b4:	d901      	bls.n	810d8ba <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
		return false; // Packet size too large
 810d8b6:	2300      	movs	r3, #0
 810d8b8:	e037      	b.n	810d92a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810d8ba:	687a      	ldr	r2, [r7, #4]
 810d8bc:	697b      	ldr	r3, [r7, #20]
 810d8be:	3380      	adds	r3, #128	; 0x80
 810d8c0:	009b      	lsls	r3, r3, #2
 810d8c2:	4413      	add	r3, r2
 810d8c4:	685b      	ldr	r3, [r3, #4]
 810d8c6:	2b00      	cmp	r3, #0
 810d8c8:	d015      	beq.n	810d8f6 <_ZN10MessageBus6defineI10DataPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810d8ca:	687a      	ldr	r2, [r7, #4]
 810d8cc:	697b      	ldr	r3, [r7, #20]
 810d8ce:	3380      	adds	r3, #128	; 0x80
 810d8d0:	009b      	lsls	r3, r3, #2
 810d8d2:	4413      	add	r3, r2
 810d8d4:	685b      	ldr	r3, [r3, #4]
 810d8d6:	685b      	ldr	r3, [r3, #4]
 810d8d8:	68fa      	ldr	r2, [r7, #12]
 810d8da:	429a      	cmp	r2, r3
 810d8dc:	d101      	bne.n	810d8e2 <_ZN10MessageBus6defineI10DataPacketEEbh+0x66>
			return false; // Packet type already defined
 810d8de:	2300      	movs	r3, #0
 810d8e0:	e023      	b.n	810d92a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
		insertion_point++;
 810d8e2:	697b      	ldr	r3, [r7, #20]
 810d8e4:	3301      	adds	r3, #1
 810d8e6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810d8e8:	697b      	ldr	r3, [r7, #20]
 810d8ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d8ee:	d1e4      	bne.n	810d8ba <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
			insertion_point = 0;
 810d8f0:	2300      	movs	r3, #0
 810d8f2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810d8f4:	e7e1      	b.n	810d8ba <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810d8f6:	78fb      	ldrb	r3, [r7, #3]
 810d8f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d8fc:	00db      	lsls	r3, r3, #3
 810d8fe:	687a      	ldr	r2, [r7, #4]
 810d900:	4413      	add	r3, r2
 810d902:	3304      	adds	r3, #4
 810d904:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810d906:	68bb      	ldr	r3, [r7, #8]
 810d908:	78fa      	ldrb	r2, [r7, #3]
 810d90a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810d90c:	693b      	ldr	r3, [r7, #16]
 810d90e:	b2da      	uxtb	r2, r3
 810d910:	68bb      	ldr	r3, [r7, #8]
 810d912:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810d914:	68bb      	ldr	r3, [r7, #8]
 810d916:	68fa      	ldr	r2, [r7, #12]
 810d918:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810d91a:	687a      	ldr	r2, [r7, #4]
 810d91c:	697b      	ldr	r3, [r7, #20]
 810d91e:	3380      	adds	r3, #128	; 0x80
 810d920:	009b      	lsls	r3, r3, #2
 810d922:	4413      	add	r3, r2
 810d924:	68ba      	ldr	r2, [r7, #8]
 810d926:	605a      	str	r2, [r3, #4]
	return true;
 810d928:	2301      	movs	r3, #1
}
 810d92a:	4618      	mov	r0, r3
 810d92c:	3718      	adds	r7, #24
 810d92e:	46bd      	mov	sp, r7
 810d930:	bd80      	pop	{r7, pc}
 810d932:	bf00      	nop
 810d934:	08112f68 	.word	0x08112f68

0810d938 <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810d938:	b580      	push	{r7, lr}
 810d93a:	b086      	sub	sp, #24
 810d93c:	af00      	add	r7, sp, #0
 810d93e:	6078      	str	r0, [r7, #4]
 810d940:	460b      	mov	r3, r1
 810d942:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810d944:	2301      	movs	r3, #1
 810d946:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810d948:	4829      	ldr	r0, [pc, #164]	; (810d9f0 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xb8>)
 810d94a:	f7ff fe03 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810d94e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810d950:	68fb      	ldr	r3, [r7, #12]
 810d952:	b2db      	uxtb	r3, r3
 810d954:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810d956:	78fb      	ldrb	r3, [r7, #3]
 810d958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d95c:	687a      	ldr	r2, [r7, #4]
 810d95e:	00db      	lsls	r3, r3, #3
 810d960:	4413      	add	r3, r2
 810d962:	689b      	ldr	r3, [r3, #8]
 810d964:	2b00      	cmp	r3, #0
 810d966:	d001      	beq.n	810d96c <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x34>
		return false; // Packet ID already in use
 810d968:	2300      	movs	r3, #0
 810d96a:	e03c      	b.n	810d9e6 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810d96c:	693b      	ldr	r3, [r7, #16]
 810d96e:	2bff      	cmp	r3, #255	; 0xff
 810d970:	d901      	bls.n	810d976 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
		return false; // Packet size too large
 810d972:	2300      	movs	r3, #0
 810d974:	e037      	b.n	810d9e6 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810d976:	687a      	ldr	r2, [r7, #4]
 810d978:	697b      	ldr	r3, [r7, #20]
 810d97a:	3380      	adds	r3, #128	; 0x80
 810d97c:	009b      	lsls	r3, r3, #2
 810d97e:	4413      	add	r3, r2
 810d980:	685b      	ldr	r3, [r3, #4]
 810d982:	2b00      	cmp	r3, #0
 810d984:	d015      	beq.n	810d9b2 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810d986:	687a      	ldr	r2, [r7, #4]
 810d988:	697b      	ldr	r3, [r7, #20]
 810d98a:	3380      	adds	r3, #128	; 0x80
 810d98c:	009b      	lsls	r3, r3, #2
 810d98e:	4413      	add	r3, r2
 810d990:	685b      	ldr	r3, [r3, #4]
 810d992:	685b      	ldr	r3, [r3, #4]
 810d994:	68fa      	ldr	r2, [r7, #12]
 810d996:	429a      	cmp	r2, r3
 810d998:	d101      	bne.n	810d99e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x66>
			return false; // Packet type already defined
 810d99a:	2300      	movs	r3, #0
 810d99c:	e023      	b.n	810d9e6 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
		insertion_point++;
 810d99e:	697b      	ldr	r3, [r7, #20]
 810d9a0:	3301      	adds	r3, #1
 810d9a2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810d9a4:	697b      	ldr	r3, [r7, #20]
 810d9a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d9aa:	d1e4      	bne.n	810d976 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
			insertion_point = 0;
 810d9ac:	2300      	movs	r3, #0
 810d9ae:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810d9b0:	e7e1      	b.n	810d976 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810d9b2:	78fb      	ldrb	r3, [r7, #3]
 810d9b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810d9b8:	00db      	lsls	r3, r3, #3
 810d9ba:	687a      	ldr	r2, [r7, #4]
 810d9bc:	4413      	add	r3, r2
 810d9be:	3304      	adds	r3, #4
 810d9c0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810d9c2:	68bb      	ldr	r3, [r7, #8]
 810d9c4:	78fa      	ldrb	r2, [r7, #3]
 810d9c6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810d9c8:	693b      	ldr	r3, [r7, #16]
 810d9ca:	b2da      	uxtb	r2, r3
 810d9cc:	68bb      	ldr	r3, [r7, #8]
 810d9ce:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810d9d0:	68bb      	ldr	r3, [r7, #8]
 810d9d2:	68fa      	ldr	r2, [r7, #12]
 810d9d4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810d9d6:	687a      	ldr	r2, [r7, #4]
 810d9d8:	697b      	ldr	r3, [r7, #20]
 810d9da:	3380      	adds	r3, #128	; 0x80
 810d9dc:	009b      	lsls	r3, r3, #2
 810d9de:	4413      	add	r3, r2
 810d9e0:	68ba      	ldr	r2, [r7, #8]
 810d9e2:	605a      	str	r2, [r3, #4]
	return true;
 810d9e4:	2301      	movs	r3, #1
}
 810d9e6:	4618      	mov	r0, r3
 810d9e8:	3718      	adds	r7, #24
 810d9ea:	46bd      	mov	sp, r7
 810d9ec:	bd80      	pop	{r7, pc}
 810d9ee:	bf00      	nop
 810d9f0:	08112f50 	.word	0x08112f50

0810d9f4 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810d9f4:	b580      	push	{r7, lr}
 810d9f6:	b086      	sub	sp, #24
 810d9f8:	af00      	add	r7, sp, #0
 810d9fa:	6078      	str	r0, [r7, #4]
 810d9fc:	460b      	mov	r3, r1
 810d9fe:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810da00:	2308      	movs	r3, #8
 810da02:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810da04:	4829      	ldr	r0, [pc, #164]	; (810daac <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xb8>)
 810da06:	f7ff fda5 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810da0a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810da0c:	68fb      	ldr	r3, [r7, #12]
 810da0e:	b2db      	uxtb	r3, r3
 810da10:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810da12:	78fb      	ldrb	r3, [r7, #3]
 810da14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810da18:	687a      	ldr	r2, [r7, #4]
 810da1a:	00db      	lsls	r3, r3, #3
 810da1c:	4413      	add	r3, r2
 810da1e:	689b      	ldr	r3, [r3, #8]
 810da20:	2b00      	cmp	r3, #0
 810da22:	d001      	beq.n	810da28 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x34>
		return false; // Packet ID already in use
 810da24:	2300      	movs	r3, #0
 810da26:	e03c      	b.n	810daa2 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810da28:	693b      	ldr	r3, [r7, #16]
 810da2a:	2bff      	cmp	r3, #255	; 0xff
 810da2c:	d901      	bls.n	810da32 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
		return false; // Packet size too large
 810da2e:	2300      	movs	r3, #0
 810da30:	e037      	b.n	810daa2 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810da32:	687a      	ldr	r2, [r7, #4]
 810da34:	697b      	ldr	r3, [r7, #20]
 810da36:	3380      	adds	r3, #128	; 0x80
 810da38:	009b      	lsls	r3, r3, #2
 810da3a:	4413      	add	r3, r2
 810da3c:	685b      	ldr	r3, [r3, #4]
 810da3e:	2b00      	cmp	r3, #0
 810da40:	d015      	beq.n	810da6e <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810da42:	687a      	ldr	r2, [r7, #4]
 810da44:	697b      	ldr	r3, [r7, #20]
 810da46:	3380      	adds	r3, #128	; 0x80
 810da48:	009b      	lsls	r3, r3, #2
 810da4a:	4413      	add	r3, r2
 810da4c:	685b      	ldr	r3, [r3, #4]
 810da4e:	685b      	ldr	r3, [r3, #4]
 810da50:	68fa      	ldr	r2, [r7, #12]
 810da52:	429a      	cmp	r2, r3
 810da54:	d101      	bne.n	810da5a <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x66>
			return false; // Packet type already defined
 810da56:	2300      	movs	r3, #0
 810da58:	e023      	b.n	810daa2 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
		insertion_point++;
 810da5a:	697b      	ldr	r3, [r7, #20]
 810da5c:	3301      	adds	r3, #1
 810da5e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810da60:	697b      	ldr	r3, [r7, #20]
 810da62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810da66:	d1e4      	bne.n	810da32 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
			insertion_point = 0;
 810da68:	2300      	movs	r3, #0
 810da6a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810da6c:	e7e1      	b.n	810da32 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810da6e:	78fb      	ldrb	r3, [r7, #3]
 810da70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810da74:	00db      	lsls	r3, r3, #3
 810da76:	687a      	ldr	r2, [r7, #4]
 810da78:	4413      	add	r3, r2
 810da7a:	3304      	adds	r3, #4
 810da7c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810da7e:	68bb      	ldr	r3, [r7, #8]
 810da80:	78fa      	ldrb	r2, [r7, #3]
 810da82:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810da84:	693b      	ldr	r3, [r7, #16]
 810da86:	b2da      	uxtb	r2, r3
 810da88:	68bb      	ldr	r3, [r7, #8]
 810da8a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810da8c:	68bb      	ldr	r3, [r7, #8]
 810da8e:	68fa      	ldr	r2, [r7, #12]
 810da90:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810da92:	687a      	ldr	r2, [r7, #4]
 810da94:	697b      	ldr	r3, [r7, #20]
 810da96:	3380      	adds	r3, #128	; 0x80
 810da98:	009b      	lsls	r3, r3, #2
 810da9a:	4413      	add	r3, r2
 810da9c:	68ba      	ldr	r2, [r7, #8]
 810da9e:	605a      	str	r2, [r3, #4]
	return true;
 810daa0:	2301      	movs	r3, #1
}
 810daa2:	4618      	mov	r0, r3
 810daa4:	3718      	adds	r7, #24
 810daa6:	46bd      	mov	sp, r7
 810daa8:	bd80      	pop	{r7, pc}
 810daaa:	bf00      	nop
 810daac:	08112f2c 	.word	0x08112f2c

0810dab0 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810dab0:	b580      	push	{r7, lr}
 810dab2:	b086      	sub	sp, #24
 810dab4:	af00      	add	r7, sp, #0
 810dab6:	6078      	str	r0, [r7, #4]
 810dab8:	460b      	mov	r3, r1
 810daba:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810dabc:	2324      	movs	r3, #36	; 0x24
 810dabe:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810dac0:	4829      	ldr	r0, [pc, #164]	; (810db68 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xb8>)
 810dac2:	f7ff fd47 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810dac6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810dac8:	68fb      	ldr	r3, [r7, #12]
 810daca:	b2db      	uxtb	r3, r3
 810dacc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810dace:	78fb      	ldrb	r3, [r7, #3]
 810dad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dad4:	687a      	ldr	r2, [r7, #4]
 810dad6:	00db      	lsls	r3, r3, #3
 810dad8:	4413      	add	r3, r2
 810dada:	689b      	ldr	r3, [r3, #8]
 810dadc:	2b00      	cmp	r3, #0
 810dade:	d001      	beq.n	810dae4 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x34>
		return false; // Packet ID already in use
 810dae0:	2300      	movs	r3, #0
 810dae2:	e03c      	b.n	810db5e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810dae4:	693b      	ldr	r3, [r7, #16]
 810dae6:	2bff      	cmp	r3, #255	; 0xff
 810dae8:	d901      	bls.n	810daee <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
		return false; // Packet size too large
 810daea:	2300      	movs	r3, #0
 810daec:	e037      	b.n	810db5e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810daee:	687a      	ldr	r2, [r7, #4]
 810daf0:	697b      	ldr	r3, [r7, #20]
 810daf2:	3380      	adds	r3, #128	; 0x80
 810daf4:	009b      	lsls	r3, r3, #2
 810daf6:	4413      	add	r3, r2
 810daf8:	685b      	ldr	r3, [r3, #4]
 810dafa:	2b00      	cmp	r3, #0
 810dafc:	d015      	beq.n	810db2a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810dafe:	687a      	ldr	r2, [r7, #4]
 810db00:	697b      	ldr	r3, [r7, #20]
 810db02:	3380      	adds	r3, #128	; 0x80
 810db04:	009b      	lsls	r3, r3, #2
 810db06:	4413      	add	r3, r2
 810db08:	685b      	ldr	r3, [r3, #4]
 810db0a:	685b      	ldr	r3, [r3, #4]
 810db0c:	68fa      	ldr	r2, [r7, #12]
 810db0e:	429a      	cmp	r2, r3
 810db10:	d101      	bne.n	810db16 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x66>
			return false; // Packet type already defined
 810db12:	2300      	movs	r3, #0
 810db14:	e023      	b.n	810db5e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
		insertion_point++;
 810db16:	697b      	ldr	r3, [r7, #20]
 810db18:	3301      	adds	r3, #1
 810db1a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810db1c:	697b      	ldr	r3, [r7, #20]
 810db1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810db22:	d1e4      	bne.n	810daee <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
			insertion_point = 0;
 810db24:	2300      	movs	r3, #0
 810db26:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810db28:	e7e1      	b.n	810daee <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810db2a:	78fb      	ldrb	r3, [r7, #3]
 810db2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810db30:	00db      	lsls	r3, r3, #3
 810db32:	687a      	ldr	r2, [r7, #4]
 810db34:	4413      	add	r3, r2
 810db36:	3304      	adds	r3, #4
 810db38:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810db3a:	68bb      	ldr	r3, [r7, #8]
 810db3c:	78fa      	ldrb	r2, [r7, #3]
 810db3e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810db40:	693b      	ldr	r3, [r7, #16]
 810db42:	b2da      	uxtb	r2, r3
 810db44:	68bb      	ldr	r3, [r7, #8]
 810db46:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810db48:	68bb      	ldr	r3, [r7, #8]
 810db4a:	68fa      	ldr	r2, [r7, #12]
 810db4c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810db4e:	687a      	ldr	r2, [r7, #4]
 810db50:	697b      	ldr	r3, [r7, #20]
 810db52:	3380      	adds	r3, #128	; 0x80
 810db54:	009b      	lsls	r3, r3, #2
 810db56:	4413      	add	r3, r2
 810db58:	68ba      	ldr	r2, [r7, #8]
 810db5a:	605a      	str	r2, [r3, #4]
	return true;
 810db5c:	2301      	movs	r3, #1
}
 810db5e:	4618      	mov	r0, r3
 810db60:	3718      	adds	r7, #24
 810db62:	46bd      	mov	sp, r7
 810db64:	bd80      	pop	{r7, pc}
 810db66:	bf00      	nop
 810db68:	08112f08 	.word	0x08112f08

0810db6c <_ZN10MessageBus4sendI23Avionics_AccelMagPacketEEbPT_>:
}

/*
 * Sends the given message using the implemented transmission protocol.
 */
template<typename T> bool MessageBus::send(T *message) {
 810db6c:	b580      	push	{r7, lr}
 810db6e:	b084      	sub	sp, #16
 810db70:	af00      	add	r7, sp, #0
 810db72:	6078      	str	r0, [r7, #4]
 810db74:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 810db76:	4809      	ldr	r0, [pc, #36]	; (810db9c <_ZN10MessageBus4sendI23Avionics_AccelMagPacketEEbPT_+0x30>)
 810db78:	f7ff fcec 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810db7c:	60f8      	str	r0, [r7, #12]

	PacketDefinition* def = retrieve(hash);
 810db7e:	68f9      	ldr	r1, [r7, #12]
 810db80:	6878      	ldr	r0, [r7, #4]
 810db82:	f000 fac1 	bl	810e108 <_ZN10MessageBus8retrieveEj>
 810db86:	60b8      	str	r0, [r7, #8]

	return send(def, (uint8_t*) message);
 810db88:	683a      	ldr	r2, [r7, #0]
 810db8a:	68b9      	ldr	r1, [r7, #8]
 810db8c:	6878      	ldr	r0, [r7, #4]
 810db8e:	f000 f9f7 	bl	810df80 <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810db92:	4603      	mov	r3, r0
}
 810db94:	4618      	mov	r0, r3
 810db96:	3710      	adds	r7, #16
 810db98:	46bd      	mov	sp, r7
 810db9a:	bd80      	pop	{r7, pc}
 810db9c:	08112f08 	.word	0x08112f08

0810dba0 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810dba0:	b580      	push	{r7, lr}
 810dba2:	b086      	sub	sp, #24
 810dba4:	af00      	add	r7, sp, #0
 810dba6:	6078      	str	r0, [r7, #4]
 810dba8:	460b      	mov	r3, r1
 810dbaa:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810dbac:	2304      	movs	r3, #4
 810dbae:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810dbb0:	4829      	ldr	r0, [pc, #164]	; (810dc58 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xb8>)
 810dbb2:	f7ff fccf 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810dbb6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810dbb8:	68fb      	ldr	r3, [r7, #12]
 810dbba:	b2db      	uxtb	r3, r3
 810dbbc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810dbbe:	78fb      	ldrb	r3, [r7, #3]
 810dbc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dbc4:	687a      	ldr	r2, [r7, #4]
 810dbc6:	00db      	lsls	r3, r3, #3
 810dbc8:	4413      	add	r3, r2
 810dbca:	689b      	ldr	r3, [r3, #8]
 810dbcc:	2b00      	cmp	r3, #0
 810dbce:	d001      	beq.n	810dbd4 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x34>
		return false; // Packet ID already in use
 810dbd0:	2300      	movs	r3, #0
 810dbd2:	e03c      	b.n	810dc4e <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810dbd4:	693b      	ldr	r3, [r7, #16]
 810dbd6:	2bff      	cmp	r3, #255	; 0xff
 810dbd8:	d901      	bls.n	810dbde <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
		return false; // Packet size too large
 810dbda:	2300      	movs	r3, #0
 810dbdc:	e037      	b.n	810dc4e <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810dbde:	687a      	ldr	r2, [r7, #4]
 810dbe0:	697b      	ldr	r3, [r7, #20]
 810dbe2:	3380      	adds	r3, #128	; 0x80
 810dbe4:	009b      	lsls	r3, r3, #2
 810dbe6:	4413      	add	r3, r2
 810dbe8:	685b      	ldr	r3, [r3, #4]
 810dbea:	2b00      	cmp	r3, #0
 810dbec:	d015      	beq.n	810dc1a <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810dbee:	687a      	ldr	r2, [r7, #4]
 810dbf0:	697b      	ldr	r3, [r7, #20]
 810dbf2:	3380      	adds	r3, #128	; 0x80
 810dbf4:	009b      	lsls	r3, r3, #2
 810dbf6:	4413      	add	r3, r2
 810dbf8:	685b      	ldr	r3, [r3, #4]
 810dbfa:	685b      	ldr	r3, [r3, #4]
 810dbfc:	68fa      	ldr	r2, [r7, #12]
 810dbfe:	429a      	cmp	r2, r3
 810dc00:	d101      	bne.n	810dc06 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x66>
			return false; // Packet type already defined
 810dc02:	2300      	movs	r3, #0
 810dc04:	e023      	b.n	810dc4e <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
		insertion_point++;
 810dc06:	697b      	ldr	r3, [r7, #20]
 810dc08:	3301      	adds	r3, #1
 810dc0a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810dc0c:	697b      	ldr	r3, [r7, #20]
 810dc0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810dc12:	d1e4      	bne.n	810dbde <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
			insertion_point = 0;
 810dc14:	2300      	movs	r3, #0
 810dc16:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810dc18:	e7e1      	b.n	810dbde <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810dc1a:	78fb      	ldrb	r3, [r7, #3]
 810dc1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dc20:	00db      	lsls	r3, r3, #3
 810dc22:	687a      	ldr	r2, [r7, #4]
 810dc24:	4413      	add	r3, r2
 810dc26:	3304      	adds	r3, #4
 810dc28:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810dc2a:	68bb      	ldr	r3, [r7, #8]
 810dc2c:	78fa      	ldrb	r2, [r7, #3]
 810dc2e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810dc30:	693b      	ldr	r3, [r7, #16]
 810dc32:	b2da      	uxtb	r2, r3
 810dc34:	68bb      	ldr	r3, [r7, #8]
 810dc36:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810dc38:	68bb      	ldr	r3, [r7, #8]
 810dc3a:	68fa      	ldr	r2, [r7, #12]
 810dc3c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810dc3e:	687a      	ldr	r2, [r7, #4]
 810dc40:	697b      	ldr	r3, [r7, #20]
 810dc42:	3380      	adds	r3, #128	; 0x80
 810dc44:	009b      	lsls	r3, r3, #2
 810dc46:	4413      	add	r3, r2
 810dc48:	68ba      	ldr	r2, [r7, #8]
 810dc4a:	605a      	str	r2, [r3, #4]
	return true;
 810dc4c:	2301      	movs	r3, #1
}
 810dc4e:	4618      	mov	r0, r3
 810dc50:	3718      	adds	r7, #24
 810dc52:	46bd      	mov	sp, r7
 810dc54:	bd80      	pop	{r7, pc}
 810dc56:	bf00      	nop
 810dc58:	08112ee4 	.word	0x08112ee4

0810dc5c <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810dc5c:	b580      	push	{r7, lr}
 810dc5e:	b086      	sub	sp, #24
 810dc60:	af00      	add	r7, sp, #0
 810dc62:	6078      	str	r0, [r7, #4]
 810dc64:	460b      	mov	r3, r1
 810dc66:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810dc68:	2310      	movs	r3, #16
 810dc6a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810dc6c:	4829      	ldr	r0, [pc, #164]	; (810dd14 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xb8>)
 810dc6e:	f7ff fc71 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810dc72:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810dc74:	68fb      	ldr	r3, [r7, #12]
 810dc76:	b2db      	uxtb	r3, r3
 810dc78:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810dc7a:	78fb      	ldrb	r3, [r7, #3]
 810dc7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dc80:	687a      	ldr	r2, [r7, #4]
 810dc82:	00db      	lsls	r3, r3, #3
 810dc84:	4413      	add	r3, r2
 810dc86:	689b      	ldr	r3, [r3, #8]
 810dc88:	2b00      	cmp	r3, #0
 810dc8a:	d001      	beq.n	810dc90 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x34>
		return false; // Packet ID already in use
 810dc8c:	2300      	movs	r3, #0
 810dc8e:	e03c      	b.n	810dd0a <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810dc90:	693b      	ldr	r3, [r7, #16]
 810dc92:	2bff      	cmp	r3, #255	; 0xff
 810dc94:	d901      	bls.n	810dc9a <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
		return false; // Packet size too large
 810dc96:	2300      	movs	r3, #0
 810dc98:	e037      	b.n	810dd0a <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810dc9a:	687a      	ldr	r2, [r7, #4]
 810dc9c:	697b      	ldr	r3, [r7, #20]
 810dc9e:	3380      	adds	r3, #128	; 0x80
 810dca0:	009b      	lsls	r3, r3, #2
 810dca2:	4413      	add	r3, r2
 810dca4:	685b      	ldr	r3, [r3, #4]
 810dca6:	2b00      	cmp	r3, #0
 810dca8:	d015      	beq.n	810dcd6 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810dcaa:	687a      	ldr	r2, [r7, #4]
 810dcac:	697b      	ldr	r3, [r7, #20]
 810dcae:	3380      	adds	r3, #128	; 0x80
 810dcb0:	009b      	lsls	r3, r3, #2
 810dcb2:	4413      	add	r3, r2
 810dcb4:	685b      	ldr	r3, [r3, #4]
 810dcb6:	685b      	ldr	r3, [r3, #4]
 810dcb8:	68fa      	ldr	r2, [r7, #12]
 810dcba:	429a      	cmp	r2, r3
 810dcbc:	d101      	bne.n	810dcc2 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x66>
			return false; // Packet type already defined
 810dcbe:	2300      	movs	r3, #0
 810dcc0:	e023      	b.n	810dd0a <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
		insertion_point++;
 810dcc2:	697b      	ldr	r3, [r7, #20]
 810dcc4:	3301      	adds	r3, #1
 810dcc6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810dcc8:	697b      	ldr	r3, [r7, #20]
 810dcca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810dcce:	d1e4      	bne.n	810dc9a <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
			insertion_point = 0;
 810dcd0:	2300      	movs	r3, #0
 810dcd2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810dcd4:	e7e1      	b.n	810dc9a <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810dcd6:	78fb      	ldrb	r3, [r7, #3]
 810dcd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dcdc:	00db      	lsls	r3, r3, #3
 810dcde:	687a      	ldr	r2, [r7, #4]
 810dce0:	4413      	add	r3, r2
 810dce2:	3304      	adds	r3, #4
 810dce4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810dce6:	68bb      	ldr	r3, [r7, #8]
 810dce8:	78fa      	ldrb	r2, [r7, #3]
 810dcea:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810dcec:	693b      	ldr	r3, [r7, #16]
 810dcee:	b2da      	uxtb	r2, r3
 810dcf0:	68bb      	ldr	r3, [r7, #8]
 810dcf2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810dcf4:	68bb      	ldr	r3, [r7, #8]
 810dcf6:	68fa      	ldr	r2, [r7, #12]
 810dcf8:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810dcfa:	687a      	ldr	r2, [r7, #4]
 810dcfc:	697b      	ldr	r3, [r7, #20]
 810dcfe:	3380      	adds	r3, #128	; 0x80
 810dd00:	009b      	lsls	r3, r3, #2
 810dd02:	4413      	add	r3, r2
 810dd04:	68ba      	ldr	r2, [r7, #8]
 810dd06:	605a      	str	r2, [r3, #4]
	return true;
 810dd08:	2301      	movs	r3, #1
}
 810dd0a:	4618      	mov	r0, r3
 810dd0c:	3718      	adds	r7, #24
 810dd0e:	46bd      	mov	sp, r7
 810dd10:	bd80      	pop	{r7, pc}
 810dd12:	bf00      	nop
 810dd14:	08112ec4 	.word	0x08112ec4

0810dd18 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810dd18:	b580      	push	{r7, lr}
 810dd1a:	b086      	sub	sp, #24
 810dd1c:	af00      	add	r7, sp, #0
 810dd1e:	6078      	str	r0, [r7, #4]
 810dd20:	460b      	mov	r3, r1
 810dd22:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810dd24:	2310      	movs	r3, #16
 810dd26:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810dd28:	4829      	ldr	r0, [pc, #164]	; (810ddd0 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xb8>)
 810dd2a:	f7ff fc13 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810dd2e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810dd30:	68fb      	ldr	r3, [r7, #12]
 810dd32:	b2db      	uxtb	r3, r3
 810dd34:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810dd36:	78fb      	ldrb	r3, [r7, #3]
 810dd38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dd3c:	687a      	ldr	r2, [r7, #4]
 810dd3e:	00db      	lsls	r3, r3, #3
 810dd40:	4413      	add	r3, r2
 810dd42:	689b      	ldr	r3, [r3, #8]
 810dd44:	2b00      	cmp	r3, #0
 810dd46:	d001      	beq.n	810dd4c <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x34>
		return false; // Packet ID already in use
 810dd48:	2300      	movs	r3, #0
 810dd4a:	e03c      	b.n	810ddc6 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810dd4c:	693b      	ldr	r3, [r7, #16]
 810dd4e:	2bff      	cmp	r3, #255	; 0xff
 810dd50:	d901      	bls.n	810dd56 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
		return false; // Packet size too large
 810dd52:	2300      	movs	r3, #0
 810dd54:	e037      	b.n	810ddc6 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810dd56:	687a      	ldr	r2, [r7, #4]
 810dd58:	697b      	ldr	r3, [r7, #20]
 810dd5a:	3380      	adds	r3, #128	; 0x80
 810dd5c:	009b      	lsls	r3, r3, #2
 810dd5e:	4413      	add	r3, r2
 810dd60:	685b      	ldr	r3, [r3, #4]
 810dd62:	2b00      	cmp	r3, #0
 810dd64:	d015      	beq.n	810dd92 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810dd66:	687a      	ldr	r2, [r7, #4]
 810dd68:	697b      	ldr	r3, [r7, #20]
 810dd6a:	3380      	adds	r3, #128	; 0x80
 810dd6c:	009b      	lsls	r3, r3, #2
 810dd6e:	4413      	add	r3, r2
 810dd70:	685b      	ldr	r3, [r3, #4]
 810dd72:	685b      	ldr	r3, [r3, #4]
 810dd74:	68fa      	ldr	r2, [r7, #12]
 810dd76:	429a      	cmp	r2, r3
 810dd78:	d101      	bne.n	810dd7e <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x66>
			return false; // Packet type already defined
 810dd7a:	2300      	movs	r3, #0
 810dd7c:	e023      	b.n	810ddc6 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
		insertion_point++;
 810dd7e:	697b      	ldr	r3, [r7, #20]
 810dd80:	3301      	adds	r3, #1
 810dd82:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810dd84:	697b      	ldr	r3, [r7, #20]
 810dd86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810dd8a:	d1e4      	bne.n	810dd56 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
			insertion_point = 0;
 810dd8c:	2300      	movs	r3, #0
 810dd8e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810dd90:	e7e1      	b.n	810dd56 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810dd92:	78fb      	ldrb	r3, [r7, #3]
 810dd94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dd98:	00db      	lsls	r3, r3, #3
 810dd9a:	687a      	ldr	r2, [r7, #4]
 810dd9c:	4413      	add	r3, r2
 810dd9e:	3304      	adds	r3, #4
 810dda0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810dda2:	68bb      	ldr	r3, [r7, #8]
 810dda4:	78fa      	ldrb	r2, [r7, #3]
 810dda6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810dda8:	693b      	ldr	r3, [r7, #16]
 810ddaa:	b2da      	uxtb	r2, r3
 810ddac:	68bb      	ldr	r3, [r7, #8]
 810ddae:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810ddb0:	68bb      	ldr	r3, [r7, #8]
 810ddb2:	68fa      	ldr	r2, [r7, #12]
 810ddb4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810ddb6:	687a      	ldr	r2, [r7, #4]
 810ddb8:	697b      	ldr	r3, [r7, #20]
 810ddba:	3380      	adds	r3, #128	; 0x80
 810ddbc:	009b      	lsls	r3, r3, #2
 810ddbe:	4413      	add	r3, r2
 810ddc0:	68ba      	ldr	r2, [r7, #8]
 810ddc2:	605a      	str	r2, [r3, #4]
	return true;
 810ddc4:	2301      	movs	r3, #1
}
 810ddc6:	4618      	mov	r0, r3
 810ddc8:	3718      	adds	r7, #24
 810ddca:	46bd      	mov	sp, r7
 810ddcc:	bd80      	pop	{r7, pc}
 810ddce:	bf00      	nop
 810ddd0:	08112ea4 	.word	0x08112ea4

0810ddd4 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810ddd4:	b580      	push	{r7, lr}
 810ddd6:	b086      	sub	sp, #24
 810ddd8:	af00      	add	r7, sp, #0
 810ddda:	6078      	str	r0, [r7, #4]
 810dddc:	460b      	mov	r3, r1
 810ddde:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810dde0:	2305      	movs	r3, #5
 810dde2:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810dde4:	4829      	ldr	r0, [pc, #164]	; (810de8c <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xb8>)
 810dde6:	f7ff fbb5 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810ddea:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810ddec:	68fb      	ldr	r3, [r7, #12]
 810ddee:	b2db      	uxtb	r3, r3
 810ddf0:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810ddf2:	78fb      	ldrb	r3, [r7, #3]
 810ddf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810ddf8:	687a      	ldr	r2, [r7, #4]
 810ddfa:	00db      	lsls	r3, r3, #3
 810ddfc:	4413      	add	r3, r2
 810ddfe:	689b      	ldr	r3, [r3, #8]
 810de00:	2b00      	cmp	r3, #0
 810de02:	d001      	beq.n	810de08 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x34>
		return false; // Packet ID already in use
 810de04:	2300      	movs	r3, #0
 810de06:	e03c      	b.n	810de82 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810de08:	693b      	ldr	r3, [r7, #16]
 810de0a:	2bff      	cmp	r3, #255	; 0xff
 810de0c:	d901      	bls.n	810de12 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
		return false; // Packet size too large
 810de0e:	2300      	movs	r3, #0
 810de10:	e037      	b.n	810de82 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810de12:	687a      	ldr	r2, [r7, #4]
 810de14:	697b      	ldr	r3, [r7, #20]
 810de16:	3380      	adds	r3, #128	; 0x80
 810de18:	009b      	lsls	r3, r3, #2
 810de1a:	4413      	add	r3, r2
 810de1c:	685b      	ldr	r3, [r3, #4]
 810de1e:	2b00      	cmp	r3, #0
 810de20:	d015      	beq.n	810de4e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810de22:	687a      	ldr	r2, [r7, #4]
 810de24:	697b      	ldr	r3, [r7, #20]
 810de26:	3380      	adds	r3, #128	; 0x80
 810de28:	009b      	lsls	r3, r3, #2
 810de2a:	4413      	add	r3, r2
 810de2c:	685b      	ldr	r3, [r3, #4]
 810de2e:	685b      	ldr	r3, [r3, #4]
 810de30:	68fa      	ldr	r2, [r7, #12]
 810de32:	429a      	cmp	r2, r3
 810de34:	d101      	bne.n	810de3a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x66>
			return false; // Packet type already defined
 810de36:	2300      	movs	r3, #0
 810de38:	e023      	b.n	810de82 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
		insertion_point++;
 810de3a:	697b      	ldr	r3, [r7, #20]
 810de3c:	3301      	adds	r3, #1
 810de3e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810de40:	697b      	ldr	r3, [r7, #20]
 810de42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810de46:	d1e4      	bne.n	810de12 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
			insertion_point = 0;
 810de48:	2300      	movs	r3, #0
 810de4a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810de4c:	e7e1      	b.n	810de12 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810de4e:	78fb      	ldrb	r3, [r7, #3]
 810de50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810de54:	00db      	lsls	r3, r3, #3
 810de56:	687a      	ldr	r2, [r7, #4]
 810de58:	4413      	add	r3, r2
 810de5a:	3304      	adds	r3, #4
 810de5c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810de5e:	68bb      	ldr	r3, [r7, #8]
 810de60:	78fa      	ldrb	r2, [r7, #3]
 810de62:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810de64:	693b      	ldr	r3, [r7, #16]
 810de66:	b2da      	uxtb	r2, r3
 810de68:	68bb      	ldr	r3, [r7, #8]
 810de6a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810de6c:	68bb      	ldr	r3, [r7, #8]
 810de6e:	68fa      	ldr	r2, [r7, #12]
 810de70:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810de72:	687a      	ldr	r2, [r7, #4]
 810de74:	697b      	ldr	r3, [r7, #20]
 810de76:	3380      	adds	r3, #128	; 0x80
 810de78:	009b      	lsls	r3, r3, #2
 810de7a:	4413      	add	r3, r2
 810de7c:	68ba      	ldr	r2, [r7, #8]
 810de7e:	605a      	str	r2, [r3, #4]
	return true;
 810de80:	2301      	movs	r3, #1
}
 810de82:	4618      	mov	r0, r3
 810de84:	3718      	adds	r7, #24
 810de86:	46bd      	mov	sp, r7
 810de88:	bd80      	pop	{r7, pc}
 810de8a:	bf00      	nop
 810de8c:	08112e84 	.word	0x08112e84

0810de90 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 810de90:	b580      	push	{r7, lr}
 810de92:	b086      	sub	sp, #24
 810de94:	af00      	add	r7, sp, #0
 810de96:	6078      	str	r0, [r7, #4]
 810de98:	460b      	mov	r3, r1
 810de9a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 810de9c:	2304      	movs	r3, #4
 810de9e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 810dea0:	4829      	ldr	r0, [pc, #164]	; (810df48 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xb8>)
 810dea2:	f7ff fb57 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810dea6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 810dea8:	68fb      	ldr	r3, [r7, #12]
 810deaa:	b2db      	uxtb	r3, r3
 810deac:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 810deae:	78fb      	ldrb	r3, [r7, #3]
 810deb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810deb4:	687a      	ldr	r2, [r7, #4]
 810deb6:	00db      	lsls	r3, r3, #3
 810deb8:	4413      	add	r3, r2
 810deba:	689b      	ldr	r3, [r3, #8]
 810debc:	2b00      	cmp	r3, #0
 810debe:	d001      	beq.n	810dec4 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x34>
		return false; // Packet ID already in use
 810dec0:	2300      	movs	r3, #0
 810dec2:	e03c      	b.n	810df3e <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 810dec4:	693b      	ldr	r3, [r7, #16]
 810dec6:	2bff      	cmp	r3, #255	; 0xff
 810dec8:	d901      	bls.n	810dece <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
		return false; // Packet size too large
 810deca:	2300      	movs	r3, #0
 810decc:	e037      	b.n	810df3e <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 810dece:	687a      	ldr	r2, [r7, #4]
 810ded0:	697b      	ldr	r3, [r7, #20]
 810ded2:	3380      	adds	r3, #128	; 0x80
 810ded4:	009b      	lsls	r3, r3, #2
 810ded6:	4413      	add	r3, r2
 810ded8:	685b      	ldr	r3, [r3, #4]
 810deda:	2b00      	cmp	r3, #0
 810dedc:	d015      	beq.n	810df0a <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 810dede:	687a      	ldr	r2, [r7, #4]
 810dee0:	697b      	ldr	r3, [r7, #20]
 810dee2:	3380      	adds	r3, #128	; 0x80
 810dee4:	009b      	lsls	r3, r3, #2
 810dee6:	4413      	add	r3, r2
 810dee8:	685b      	ldr	r3, [r3, #4]
 810deea:	685b      	ldr	r3, [r3, #4]
 810deec:	68fa      	ldr	r2, [r7, #12]
 810deee:	429a      	cmp	r2, r3
 810def0:	d101      	bne.n	810def6 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x66>
			return false; // Packet type already defined
 810def2:	2300      	movs	r3, #0
 810def4:	e023      	b.n	810df3e <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
		insertion_point++;
 810def6:	697b      	ldr	r3, [r7, #20]
 810def8:	3301      	adds	r3, #1
 810defa:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 810defc:	697b      	ldr	r3, [r7, #20]
 810defe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810df02:	d1e4      	bne.n	810dece <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
			insertion_point = 0;
 810df04:	2300      	movs	r3, #0
 810df06:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 810df08:	e7e1      	b.n	810dece <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 810df0a:	78fb      	ldrb	r3, [r7, #3]
 810df0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810df10:	00db      	lsls	r3, r3, #3
 810df12:	687a      	ldr	r2, [r7, #4]
 810df14:	4413      	add	r3, r2
 810df16:	3304      	adds	r3, #4
 810df18:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 810df1a:	68bb      	ldr	r3, [r7, #8]
 810df1c:	78fa      	ldrb	r2, [r7, #3]
 810df1e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 810df20:	693b      	ldr	r3, [r7, #16]
 810df22:	b2da      	uxtb	r2, r3
 810df24:	68bb      	ldr	r3, [r7, #8]
 810df26:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 810df28:	68bb      	ldr	r3, [r7, #8]
 810df2a:	68fa      	ldr	r2, [r7, #12]
 810df2c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 810df2e:	687a      	ldr	r2, [r7, #4]
 810df30:	697b      	ldr	r3, [r7, #20]
 810df32:	3380      	adds	r3, #128	; 0x80
 810df34:	009b      	lsls	r3, r3, #2
 810df36:	4413      	add	r3, r2
 810df38:	68ba      	ldr	r2, [r7, #8]
 810df3a:	605a      	str	r2, [r3, #4]
	return true;
 810df3c:	2301      	movs	r3, #1
}
 810df3e:	4618      	mov	r0, r3
 810df40:	3718      	adds	r7, #24
 810df42:	46bd      	mov	sp, r7
 810df44:	bd80      	pop	{r7, pc}
 810df46:	bf00      	nop
 810df48:	08112e64 	.word	0x08112e64

0810df4c <_ZN10MessageBus4sendI21Science_MeasurePacketEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 810df4c:	b580      	push	{r7, lr}
 810df4e:	b084      	sub	sp, #16
 810df50:	af00      	add	r7, sp, #0
 810df52:	6078      	str	r0, [r7, #4]
 810df54:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 810df56:	4809      	ldr	r0, [pc, #36]	; (810df7c <_ZN10MessageBus4sendI21Science_MeasurePacketEEbPT_+0x30>)
 810df58:	f7ff fafc 	bl	810d554 <_ZNKSt9type_info9hash_codeEv>
 810df5c:	60f8      	str	r0, [r7, #12]
	PacketDefinition* def = retrieve(hash);
 810df5e:	68f9      	ldr	r1, [r7, #12]
 810df60:	6878      	ldr	r0, [r7, #4]
 810df62:	f000 f8d1 	bl	810e108 <_ZN10MessageBus8retrieveEj>
 810df66:	60b8      	str	r0, [r7, #8]
	return send(def, (uint8_t*) message);
 810df68:	683a      	ldr	r2, [r7, #0]
 810df6a:	68b9      	ldr	r1, [r7, #8]
 810df6c:	6878      	ldr	r0, [r7, #4]
 810df6e:	f000 f807 	bl	810df80 <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 810df72:	4603      	mov	r3, r0
}
 810df74:	4618      	mov	r0, r3
 810df76:	3710      	adds	r7, #16
 810df78:	46bd      	mov	sp, r7
 810df7a:	bd80      	pop	{r7, pc}
 810df7c:	08112e64 	.word	0x08112e64

0810df80 <_ZN10MessageBus4sendEP16PacketDefinitionPh>:

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
 810df80:	b580      	push	{r7, lr}
 810df82:	b086      	sub	sp, #24
 810df84:	af00      	add	r7, sp, #0
 810df86:	60f8      	str	r0, [r7, #12]
 810df88:	60b9      	str	r1, [r7, #8]
 810df8a:	607a      	str	r2, [r7, #4]
	if(def != nullptr) {
 810df8c:	68bb      	ldr	r3, [r7, #8]
 810df8e:	2b00      	cmp	r3, #0
 810df90:	d031      	beq.n	810dff6 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x76>
		uint32_t data_bytes_written = 0;
 810df92:	2300      	movs	r3, #0
 810df94:	617b      	str	r3, [r7, #20]

		while(data_bytes_written < def->size) {
 810df96:	68bb      	ldr	r3, [r7, #8]
 810df98:	785b      	ldrb	r3, [r3, #1]
 810df9a:	461a      	mov	r2, r3
 810df9c:	697b      	ldr	r3, [r7, #20]
 810df9e:	4293      	cmp	r3, r2
 810dfa0:	d227      	bcs.n	810dff2 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x72>
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 810dfa2:	68fb      	ldr	r3, [r7, #12]
 810dfa4:	681b      	ldr	r3, [r3, #0]
 810dfa6:	3308      	adds	r3, #8
 810dfa8:	681b      	ldr	r3, [r3, #0]
 810dfaa:	68b9      	ldr	r1, [r7, #8]
 810dfac:	2201      	movs	r2, #1
 810dfae:	68f8      	ldr	r0, [r7, #12]
 810dfb0:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 810dfb2:	68fb      	ldr	r3, [r7, #12]
 810dfb4:	681b      	ldr	r3, [r3, #0]
 810dfb6:	3308      	adds	r3, #8
 810dfb8:	681b      	ldr	r3, [r3, #0]
 810dfba:	6879      	ldr	r1, [r7, #4]
 810dfbc:	697a      	ldr	r2, [r7, #20]
 810dfbe:	4411      	add	r1, r2
 810dfc0:	68ba      	ldr	r2, [r7, #8]
 810dfc2:	7852      	ldrb	r2, [r2, #1]
 810dfc4:	4610      	mov	r0, r2
 810dfc6:	697a      	ldr	r2, [r7, #20]
 810dfc8:	1a82      	subs	r2, r0, r2
 810dfca:	68f8      	ldr	r0, [r7, #12]
 810dfcc:	4798      	blx	r3
 810dfce:	4603      	mov	r3, r0
 810dfd0:	613b      	str	r3, [r7, #16]

			if(new_bytes == 0) {
 810dfd2:	693b      	ldr	r3, [r7, #16]
 810dfd4:	2b00      	cmp	r3, #0
 810dfd6:	d101      	bne.n	810dfdc <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x5c>
				return false;
 810dfd8:	2300      	movs	r3, #0
 810dfda:	e00d      	b.n	810dff8 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
			} else {
				transmit();
 810dfdc:	68fb      	ldr	r3, [r7, #12]
 810dfde:	681b      	ldr	r3, [r3, #0]
 810dfe0:	330c      	adds	r3, #12
 810dfe2:	681b      	ldr	r3, [r3, #0]
 810dfe4:	68f8      	ldr	r0, [r7, #12]
 810dfe6:	4798      	blx	r3
				data_bytes_written += new_bytes;
 810dfe8:	697a      	ldr	r2, [r7, #20]
 810dfea:	693b      	ldr	r3, [r7, #16]
 810dfec:	4413      	add	r3, r2
 810dfee:	617b      	str	r3, [r7, #20]
		while(data_bytes_written < def->size) {
 810dff0:	e7d1      	b.n	810df96 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
			}
		}

		return true;
 810dff2:	2301      	movs	r3, #1
 810dff4:	e000      	b.n	810dff8 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
	}

	return false;
 810dff6:	2300      	movs	r3, #0
}
 810dff8:	4618      	mov	r0, r3
 810dffa:	3718      	adds	r7, #24
 810dffc:	46bd      	mov	sp, r7
 810dffe:	bd80      	pop	{r7, pc}

0810e000 <_ZN10MessageBus7receiveEhPhm>:
 * Handles the reception of a message.
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 810e000:	b580      	push	{r7, lr}
 810e002:	b088      	sub	sp, #32
 810e004:	af00      	add	r7, sp, #0
 810e006:	60f8      	str	r0, [r7, #12]
 810e008:	607a      	str	r2, [r7, #4]
 810e00a:	603b      	str	r3, [r7, #0]
 810e00c:	460b      	mov	r3, r1
 810e00e:	72fb      	strb	r3, [r7, #11]
	if(length > 0) {
 810e010:	683b      	ldr	r3, [r7, #0]
 810e012:	2b00      	cmp	r3, #0
 810e014:	d075      	beq.n	810e102 <_ZN10MessageBus7receiveEhPhm+0x102>
		// Safe-cast verification
		uint8_t packet_id = *pointer++;
 810e016:	687b      	ldr	r3, [r7, #4]
 810e018:	1c5a      	adds	r2, r3, #1
 810e01a:	607a      	str	r2, [r7, #4]
 810e01c:	781b      	ldrb	r3, [r3, #0]
 810e01e:	777b      	strb	r3, [r7, #29]

		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 810e020:	7f7b      	ldrb	r3, [r7, #29]
 810e022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e026:	00db      	lsls	r3, r3, #3
 810e028:	68fa      	ldr	r2, [r7, #12]
 810e02a:	4413      	add	r3, r2
 810e02c:	3304      	adds	r3, #4
 810e02e:	61bb      	str	r3, [r7, #24]
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id];
 810e030:	7afb      	ldrb	r3, [r7, #11]
 810e032:	3306      	adds	r3, #6
 810e034:	021b      	lsls	r3, r3, #8
 810e036:	68fa      	ldr	r2, [r7, #12]
 810e038:	4413      	add	r3, r2
 810e03a:	3304      	adds	r3, #4
 810e03c:	617b      	str	r3, [r7, #20]

		if(indexable_buffer->index + length > max_packet_size) {
 810e03e:	697b      	ldr	r3, [r7, #20]
 810e040:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 810e044:	461a      	mov	r2, r3
 810e046:	683b      	ldr	r3, [r7, #0]
 810e048:	4413      	add	r3, r2
 810e04a:	2bff      	cmp	r3, #255	; 0xff
 810e04c:	d904      	bls.n	810e058 <_ZN10MessageBus7receiveEhPhm+0x58>
			indexable_buffer->index = 0; // Corrupted packet
 810e04e:	697b      	ldr	r3, [r7, #20]
 810e050:	2200      	movs	r2, #0
 810e052:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			return;
 810e056:	e054      	b.n	810e102 <_ZN10MessageBus7receiveEhPhm+0x102>
		}

		for(uint16_t i = 0; i < length - 1; i++) {
 810e058:	2300      	movs	r3, #0
 810e05a:	83fb      	strh	r3, [r7, #30]
 810e05c:	8bfa      	ldrh	r2, [r7, #30]
 810e05e:	683b      	ldr	r3, [r7, #0]
 810e060:	3b01      	subs	r3, #1
 810e062:	429a      	cmp	r2, r3
 810e064:	d211      	bcs.n	810e08a <_ZN10MessageBus7receiveEhPhm+0x8a>
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 810e066:	687b      	ldr	r3, [r7, #4]
 810e068:	1c5a      	adds	r2, r3, #1
 810e06a:	607a      	str	r2, [r7, #4]
 810e06c:	697a      	ldr	r2, [r7, #20]
 810e06e:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 810e072:	1c51      	adds	r1, r2, #1
 810e074:	b2c8      	uxtb	r0, r1
 810e076:	6979      	ldr	r1, [r7, #20]
 810e078:	f881 00ff 	strb.w	r0, [r1, #255]	; 0xff
 810e07c:	7819      	ldrb	r1, [r3, #0]
 810e07e:	697b      	ldr	r3, [r7, #20]
 810e080:	5499      	strb	r1, [r3, r2]
		for(uint16_t i = 0; i < length - 1; i++) {
 810e082:	8bfb      	ldrh	r3, [r7, #30]
 810e084:	3301      	adds	r3, #1
 810e086:	83fb      	strh	r3, [r7, #30]
 810e088:	e7e8      	b.n	810e05c <_ZN10MessageBus7receiveEhPhm+0x5c>
		}

		if(indexable_buffer->index >= def->size) {
 810e08a:	697b      	ldr	r3, [r7, #20]
 810e08c:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 810e090:	69bb      	ldr	r3, [r7, #24]
 810e092:	785b      	ldrb	r3, [r3, #1]
 810e094:	429a      	cmp	r2, r3
 810e096:	d334      	bcc.n	810e102 <_ZN10MessageBus7receiveEhPhm+0x102>
			// Packet is complete. Forward buffer to handler.

			if(handlers[packet_id & 0b00111111] != nullptr) {
 810e098:	7f7b      	ldrb	r3, [r7, #29]
 810e09a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e09e:	68fa      	ldr	r2, [r7, #12]
 810e0a0:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 810e0a4:	009b      	lsls	r3, r3, #2
 810e0a6:	4413      	add	r3, r2
 810e0a8:	685b      	ldr	r3, [r3, #4]
 810e0aa:	2b00      	cmp	r3, #0
 810e0ac:	d00c      	beq.n	810e0c8 <_ZN10MessageBus7receiveEhPhm+0xc8>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer);
 810e0ae:	7f7b      	ldrb	r3, [r7, #29]
 810e0b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e0b4:	68fa      	ldr	r2, [r7, #12]
 810e0b6:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 810e0ba:	009b      	lsls	r3, r3, #2
 810e0bc:	4413      	add	r3, r2
 810e0be:	685b      	ldr	r3, [r3, #4]
 810e0c0:	6979      	ldr	r1, [r7, #20]
 810e0c2:	7afa      	ldrb	r2, [r7, #11]
 810e0c4:	4610      	mov	r0, r2
 810e0c6:	4798      	blx	r3
			}

			if(forwarders[packet_id & 0b00111111] != nullptr) {
 810e0c8:	7f7b      	ldrb	r3, [r7, #29]
 810e0ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e0ce:	68fa      	ldr	r2, [r7, #12]
 810e0d0:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 810e0d4:	009b      	lsls	r3, r3, #2
 810e0d6:	4413      	add	r3, r2
 810e0d8:	685b      	ldr	r3, [r3, #4]
 810e0da:	2b00      	cmp	r3, #0
 810e0dc:	d00d      	beq.n	810e0fa <_ZN10MessageBus7receiveEhPhm+0xfa>
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer);
 810e0de:	7f7b      	ldrb	r3, [r7, #29]
 810e0e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810e0e4:	68fa      	ldr	r2, [r7, #12]
 810e0e6:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 810e0ea:	009b      	lsls	r3, r3, #2
 810e0ec:	4413      	add	r3, r2
 810e0ee:	685b      	ldr	r3, [r3, #4]
 810e0f0:	697a      	ldr	r2, [r7, #20]
 810e0f2:	69b9      	ldr	r1, [r7, #24]
 810e0f4:	4618      	mov	r0, r3
 810e0f6:	f7ff ff43 	bl	810df80 <_ZN10MessageBus4sendEP16PacketDefinitionPh>
			}

			indexable_buffer->index = 0;
 810e0fa:	697b      	ldr	r3, [r7, #20]
 810e0fc:	2200      	movs	r2, #0
 810e0fe:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		}
	}
}
 810e102:	3720      	adds	r7, #32
 810e104:	46bd      	mov	sp, r7
 810e106:	bd80      	pop	{r7, pc}

0810e108 <_ZN10MessageBus8retrieveEj>:

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
 810e108:	b480      	push	{r7}
 810e10a:	b085      	sub	sp, #20
 810e10c:	af00      	add	r7, sp, #0
 810e10e:	6078      	str	r0, [r7, #4]
 810e110:	6039      	str	r1, [r7, #0]
	uint32_t searchPoint = hash % 256;
 810e112:	683b      	ldr	r3, [r7, #0]
 810e114:	b2db      	uxtb	r3, r3
 810e116:	60fb      	str	r3, [r7, #12]
	uint32_t searchStart = searchPoint;
 810e118:	68fb      	ldr	r3, [r7, #12]
 810e11a:	60bb      	str	r3, [r7, #8]

	while(definitions_by_type[searchPoint] != nullptr) {
 810e11c:	687a      	ldr	r2, [r7, #4]
 810e11e:	68fb      	ldr	r3, [r7, #12]
 810e120:	3380      	adds	r3, #128	; 0x80
 810e122:	009b      	lsls	r3, r3, #2
 810e124:	4413      	add	r3, r2
 810e126:	685b      	ldr	r3, [r3, #4]
 810e128:	2b00      	cmp	r3, #0
 810e12a:	d01f      	beq.n	810e16c <_ZN10MessageBus8retrieveEj+0x64>
		if(definitions_by_type[searchPoint]->hash == hash) {
 810e12c:	687a      	ldr	r2, [r7, #4]
 810e12e:	68fb      	ldr	r3, [r7, #12]
 810e130:	3380      	adds	r3, #128	; 0x80
 810e132:	009b      	lsls	r3, r3, #2
 810e134:	4413      	add	r3, r2
 810e136:	685b      	ldr	r3, [r3, #4]
 810e138:	685b      	ldr	r3, [r3, #4]
 810e13a:	683a      	ldr	r2, [r7, #0]
 810e13c:	429a      	cmp	r2, r3
 810e13e:	d106      	bne.n	810e14e <_ZN10MessageBus8retrieveEj+0x46>
			return definitions_by_type[searchPoint];
 810e140:	687a      	ldr	r2, [r7, #4]
 810e142:	68fb      	ldr	r3, [r7, #12]
 810e144:	3380      	adds	r3, #128	; 0x80
 810e146:	009b      	lsls	r3, r3, #2
 810e148:	4413      	add	r3, r2
 810e14a:	685b      	ldr	r3, [r3, #4]
 810e14c:	e00f      	b.n	810e16e <_ZN10MessageBus8retrieveEj+0x66>
		}

		searchPoint++;
 810e14e:	68fb      	ldr	r3, [r7, #12]
 810e150:	3301      	adds	r3, #1
 810e152:	60fb      	str	r3, [r7, #12]

		if(searchPoint == 256) {
 810e154:	68fb      	ldr	r3, [r7, #12]
 810e156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810e15a:	d101      	bne.n	810e160 <_ZN10MessageBus8retrieveEj+0x58>
			searchPoint = 0;
 810e15c:	2300      	movs	r3, #0
 810e15e:	60fb      	str	r3, [r7, #12]
		}

		if(searchStart == searchPoint) {
 810e160:	68ba      	ldr	r2, [r7, #8]
 810e162:	68fb      	ldr	r3, [r7, #12]
 810e164:	429a      	cmp	r2, r3
 810e166:	d000      	beq.n	810e16a <_ZN10MessageBus8retrieveEj+0x62>
	while(definitions_by_type[searchPoint] != nullptr) {
 810e168:	e7d8      	b.n	810e11c <_ZN10MessageBus8retrieveEj+0x14>
			break; // No packet definition matching the given template type
 810e16a:	bf00      	nop
		}
	}

	return nullptr;
 810e16c:	2300      	movs	r3, #0
}
 810e16e:	4618      	mov	r0, r3
 810e170:	3714      	adds	r7, #20
 810e172:	46bd      	mov	sp, r7
 810e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e178:	4770      	bx	lr
	...

0810e17c <_ZN10NetworkBusC1EP8IODriver>:


#include "NetworkBus.h"
#include "Protocol/Protocol.h"

NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 810e17c:	b580      	push	{r7, lr}
 810e17e:	b082      	sub	sp, #8
 810e180:	af00      	add	r7, sp, #0
 810e182:	6078      	str	r0, [r7, #4]
 810e184:	6039      	str	r1, [r7, #0]
 810e186:	6878      	ldr	r0, [r7, #4]
 810e188:	687b      	ldr	r3, [r7, #4]
 810e18a:	f503 4290 	add.w	r2, r3, #18432	; 0x4800
 810e18e:	3211      	adds	r2, #17
 810e190:	f44f 7380 	mov.w	r3, #256	; 0x100
 810e194:	6839      	ldr	r1, [r7, #0]
 810e196:	f7fe f927 	bl	810c3e8 <_ZN5IOBusC1EP8IODriverPhm>
 810e19a:	4a24      	ldr	r2, [pc, #144]	; (810e22c <_ZN10NetworkBusC1EP8IODriver+0xb0>)
 810e19c:	687b      	ldr	r3, [r7, #4]
 810e19e:	601a      	str	r2, [r3, #0]
	define<PingPacket>(0);
 810e1a0:	687b      	ldr	r3, [r7, #4]
 810e1a2:	2100      	movs	r1, #0
 810e1a4:	4618      	mov	r0, r3
 810e1a6:	f7ff f9f1 	bl	810d58c <_ZN10MessageBus6defineI10PingPacketEEbh>
	define<RequestPacket>(1);
 810e1aa:	687b      	ldr	r3, [r7, #4]
 810e1ac:	2101      	movs	r1, #1
 810e1ae:	4618      	mov	r0, r3
 810e1b0:	f7ff fa4a 	bl	810d648 <_ZN10MessageBus6defineI13RequestPacketEEbh>
	define<ResponsePacket>(2);
 810e1b4:	687b      	ldr	r3, [r7, #4]
 810e1b6:	2102      	movs	r1, #2
 810e1b8:	4618      	mov	r0, r3
 810e1ba:	f7ff faa3 	bl	810d704 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
	define<ProgressPacket>(3);
 810e1be:	687b      	ldr	r3, [r7, #4]
 810e1c0:	2103      	movs	r1, #3
 810e1c2:	4618      	mov	r0, r3
 810e1c4:	f7ff fafc 	bl	810d7c0 <_ZN10MessageBus6defineI14ProgressPacketEEbh>
	define<DataPacket>(4);
 810e1c8:	687b      	ldr	r3, [r7, #4]
 810e1ca:	2104      	movs	r1, #4
 810e1cc:	4618      	mov	r0, r3
 810e1ce:	f7ff fb55 	bl	810d87c <_ZN10MessageBus6defineI10DataPacketEEbh>
	define<Avionics_BaroTempPacket>(5);
 810e1d2:	687b      	ldr	r3, [r7, #4]
 810e1d4:	2105      	movs	r1, #5
 810e1d6:	4618      	mov	r0, r3
 810e1d8:	f7ff fc0c 	bl	810d9f4 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>
	define<Avionics_AccelMagPacket>(6);
 810e1dc:	687b      	ldr	r3, [r7, #4]
 810e1de:	2106      	movs	r1, #6
 810e1e0:	4618      	mov	r0, r3
 810e1e2:	f7ff fc65 	bl	810dab0 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>
	define<Handling_GripperPacket>(7);
 810e1e6:	687b      	ldr	r3, [r7, #4]
 810e1e8:	2107      	movs	r1, #7
 810e1ea:	4618      	mov	r0, r3
 810e1ec:	f7ff fcd8 	bl	810dba0 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>
	define<Power_VoltagePacket>(8);
 810e1f0:	687b      	ldr	r3, [r7, #4]
 810e1f2:	2108      	movs	r1, #8
 810e1f4:	4618      	mov	r0, r3
 810e1f6:	f7ff fd31 	bl	810dc5c <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>
	define<Power_CurrentPacket>(9);
 810e1fa:	687b      	ldr	r3, [r7, #4]
 810e1fc:	2109      	movs	r1, #9
 810e1fe:	4618      	mov	r0, r3
 810e200:	f7ff fd8a 	bl	810dd18 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>
	define<Power_SystemPacket>(10);
 810e204:	687b      	ldr	r3, [r7, #4]
 810e206:	210a      	movs	r1, #10
 810e208:	4618      	mov	r0, r3
 810e20a:	f7ff fde3 	bl	810ddd4 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>
	define<Science_MeasurePacket>(11);
 810e20e:	687b      	ldr	r3, [r7, #4]
 810e210:	210b      	movs	r1, #11
 810e212:	4618      	mov	r0, r3
 810e214:	f7ff fe3c 	bl	810de90 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>
	define<ErrorPacket>(63);
 810e218:	687b      	ldr	r3, [r7, #4]
 810e21a:	213f      	movs	r1, #63	; 0x3f
 810e21c:	4618      	mov	r0, r3
 810e21e:	f7ff fb8b 	bl	810d938 <_ZN10MessageBus6defineI11ErrorPacketEEbh>
}
 810e222:	687b      	ldr	r3, [r7, #4]
 810e224:	4618      	mov	r0, r3
 810e226:	3708      	adds	r7, #8
 810e228:	46bd      	mov	sp, r7
 810e22a:	bd80      	pop	{r7, pc}
 810e22c:	08112ff0 	.word	0x08112ff0

0810e230 <_ZN10NetworkBusD1Ev>:
#include "IOBus.h"

#define NETWORK_FRAME_SIZE 256


class NetworkBus : public IOBus {
 810e230:	b580      	push	{r7, lr}
 810e232:	b082      	sub	sp, #8
 810e234:	af00      	add	r7, sp, #0
 810e236:	6078      	str	r0, [r7, #4]
 810e238:	4a05      	ldr	r2, [pc, #20]	; (810e250 <_ZN10NetworkBusD1Ev+0x20>)
 810e23a:	687b      	ldr	r3, [r7, #4]
 810e23c:	601a      	str	r2, [r3, #0]
 810e23e:	687b      	ldr	r3, [r7, #4]
 810e240:	4618      	mov	r0, r3
 810e242:	f7ff f94f 	bl	810d4e4 <_ZN5IOBusD1Ev>
 810e246:	687b      	ldr	r3, [r7, #4]
 810e248:	4618      	mov	r0, r3
 810e24a:	3708      	adds	r7, #8
 810e24c:	46bd      	mov	sp, r7
 810e24e:	bd80      	pop	{r7, pc}
 810e250:	08112ff0 	.word	0x08112ff0

0810e254 <_ZN10NetworkBusD0Ev>:
 810e254:	b580      	push	{r7, lr}
 810e256:	b082      	sub	sp, #8
 810e258:	af00      	add	r7, sp, #0
 810e25a:	6078      	str	r0, [r7, #4]
 810e25c:	6878      	ldr	r0, [r7, #4]
 810e25e:	f7ff ffe7 	bl	810e230 <_ZN10NetworkBusD1Ev>
 810e262:	f644 1114 	movw	r1, #18708	; 0x4914
 810e266:	6878      	ldr	r0, [r7, #4]
 810e268:	f000 fdd4 	bl	810ee14 <_ZdlPvj>
 810e26c:	687b      	ldr	r3, [r7, #4]
 810e26e:	4618      	mov	r0, r3
 810e270:	3708      	adds	r7, #8
 810e272:	46bd      	mov	sp, r7
 810e274:	bd80      	pop	{r7, pc}

0810e276 <_ZN14WatchdogThread4initEv>:
#include "iwdg.h"

#include "Debug/Debug.h"
#include "usart.h"

void WatchdogThread::init() {
 810e276:	b480      	push	{r7}
 810e278:	b083      	sub	sp, #12
 810e27a:	af00      	add	r7, sp, #0
 810e27c:	6078      	str	r0, [r7, #4]

}
 810e27e:	bf00      	nop
 810e280:	370c      	adds	r7, #12
 810e282:	46bd      	mov	sp, r7
 810e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e288:	4770      	bx	lr

0810e28a <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 810e28a:	b580      	push	{r7, lr}
 810e28c:	b082      	sub	sp, #8
 810e28e:	af00      	add	r7, sp, #0
 810e290:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 810e292:	687b      	ldr	r3, [r7, #4]
 810e294:	68db      	ldr	r3, [r3, #12]
 810e296:	4618      	mov	r0, r3
 810e298:	f7f7 fbea 	bl	8105a70 <HAL_IWDG_Refresh>
	osDelay(100);
 810e29c:	2064      	movs	r0, #100	; 0x64
 810e29e:	f7fa fb2f 	bl	8108900 <osDelay>
}
 810e2a2:	bf00      	nop
 810e2a4:	3708      	adds	r7, #8
 810e2a6:	46bd      	mov	sp, r7
 810e2a8:	bd80      	pop	{r7, pc}
	...

0810e2ac <_ZN11ScienceData8toStringEPc>:
};

struct ScienceData {
	uint32_t mass;

	char* toString(char* buffer) {
 810e2ac:	b580      	push	{r7, lr}
 810e2ae:	b082      	sub	sp, #8
 810e2b0:	af00      	add	r7, sp, #0
 810e2b2:	6078      	str	r0, [r7, #4]
 810e2b4:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Mass(kg): %u", mass);
 810e2b6:	687b      	ldr	r3, [r7, #4]
 810e2b8:	681b      	ldr	r3, [r3, #0]
 810e2ba:	461a      	mov	r2, r3
 810e2bc:	4904      	ldr	r1, [pc, #16]	; (810e2d0 <_ZN11ScienceData8toStringEPc+0x24>)
 810e2be:	6838      	ldr	r0, [r7, #0]
 810e2c0:	f001 fe5e 	bl	810ff80 <siprintf>
		return buffer;
 810e2c4:	683b      	ldr	r3, [r7, #0]
	}
 810e2c6:	4618      	mov	r0, r3
 810e2c8:	3708      	adds	r7, #8
 810e2ca:	46bd      	mov	sp, r7
 810e2cc:	bd80      	pop	{r7, pc}
 810e2ce:	bf00      	nop
 810e2d0:	08112b38 	.word	0x08112b38

0810e2d4 <_ZN11ScienceData7toArrayEPm>:

	uint32_t* toArray(uint32_t* buffer){
 810e2d4:	b480      	push	{r7}
 810e2d6:	b083      	sub	sp, #12
 810e2d8:	af00      	add	r7, sp, #0
 810e2da:	6078      	str	r0, [r7, #4]
 810e2dc:	6039      	str	r1, [r7, #0]
		*buffer = mass;
 810e2de:	687b      	ldr	r3, [r7, #4]
 810e2e0:	681a      	ldr	r2, [r3, #0]
 810e2e2:	683b      	ldr	r3, [r7, #0]
 810e2e4:	601a      	str	r2, [r3, #0]
		return buffer;
 810e2e6:	683b      	ldr	r3, [r7, #0]
	}
 810e2e8:	4618      	mov	r0, r3
 810e2ea:	370c      	adds	r7, #12
 810e2ec:	46bd      	mov	sp, r7
 810e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e2f2:	4770      	bx	lr

0810e2f4 <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m>:
#include "DataStructures.h"
#include "Debug/Debug.h"

static char cbuf[256];

ADC24Thread::ADC24Thread(GPIO_TypeDef *sck_gpio, uint32_t sck_pin, GPIO_TypeDef *di_gpio, uint32_t di_pin)
 810e2f4:	b580      	push	{r7, lr}
 810e2f6:	b084      	sub	sp, #16
 810e2f8:	af00      	add	r7, sp, #0
 810e2fa:	60f8      	str	r0, [r7, #12]
 810e2fc:	60b9      	str	r1, [r7, #8]
 810e2fe:	607a      	str	r2, [r7, #4]
 810e300:	603b      	str	r3, [r7, #0]
: Thread("ADC24"){
 810e302:	68fb      	ldr	r3, [r7, #12]
 810e304:	490a      	ldr	r1, [pc, #40]	; (810e330 <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m+0x3c>)
 810e306:	4618      	mov	r0, r3
 810e308:	f000 fc7f 	bl	810ec0a <_ZN6ThreadC1EPKc>
 810e30c:	4a09      	ldr	r2, [pc, #36]	; (810e334 <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m+0x40>)
 810e30e:	68fb      	ldr	r3, [r7, #12]
 810e310:	601a      	str	r2, [r3, #0]
 810e312:	68fb      	ldr	r3, [r7, #12]
 810e314:	220f      	movs	r2, #15
 810e316:	819a      	strh	r2, [r3, #12]
	HX711_set_pins(sck_gpio, sck_pin, di_gpio, di_pin);
 810e318:	69bb      	ldr	r3, [r7, #24]
 810e31a:	683a      	ldr	r2, [r7, #0]
 810e31c:	6879      	ldr	r1, [r7, #4]
 810e31e:	68b8      	ldr	r0, [r7, #8]
 810e320:	f7fd fe24 	bl	810bf6c <HX711_set_pins>
}
 810e324:	68fb      	ldr	r3, [r7, #12]
 810e326:	4618      	mov	r0, r3
 810e328:	3710      	adds	r7, #16
 810e32a:	46bd      	mov	sp, r7
 810e32c:	bd80      	pop	{r7, pc}
 810e32e:	bf00      	nop
 810e330:	08112b48 	.word	0x08112b48
 810e334:	08113060 	.word	0x08113060

0810e338 <_ZN11ADC24Thread4initEv>:

void ADC24Thread::init() {
 810e338:	b580      	push	{r7, lr}
 810e33a:	b082      	sub	sp, #8
 810e33c:	af00      	add	r7, sp, #0
 810e33e:	6078      	str	r0, [r7, #4]
	HX711_init();
 810e340:	f7fd fe36 	bl	810bfb0 <HX711_init>
	while(!HX711_isReady()){
 810e344:	f7fd ff2c 	bl	810c1a0 <HX711_isReady>
 810e348:	4603      	mov	r3, r0
 810e34a:	2b00      	cmp	r3, #0
 810e34c:	bf0c      	ite	eq
 810e34e:	2301      	moveq	r3, #1
 810e350:	2300      	movne	r3, #0
 810e352:	b2db      	uxtb	r3, r3
 810e354:	2b00      	cmp	r3, #0
 810e356:	d009      	beq.n	810e36c <_ZN11ADC24Thread4initEv+0x34>
		println("HX711 initialization failed");
 810e358:	687b      	ldr	r3, [r7, #4]
 810e35a:	4909      	ldr	r1, [pc, #36]	; (810e380 <_ZN11ADC24Thread4initEv+0x48>)
 810e35c:	4618      	mov	r0, r3
 810e35e:	f000 fcab 	bl	810ecb8 <_ZN6Thread7printlnEPKcz>
		osDelay(500);
 810e362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810e366:	f7fa facb 	bl	8108900 <osDelay>
	while(!HX711_isReady()){
 810e36a:	e7eb      	b.n	810e344 <_ZN11ADC24Thread4initEv+0xc>
	}
	println("HX711 initialized");
 810e36c:	687b      	ldr	r3, [r7, #4]
 810e36e:	4905      	ldr	r1, [pc, #20]	; (810e384 <_ZN11ADC24Thread4initEv+0x4c>)
 810e370:	4618      	mov	r0, r3
 810e372:	f000 fca1 	bl	810ecb8 <_ZN6Thread7printlnEPKcz>
}
 810e376:	bf00      	nop
 810e378:	3708      	adds	r7, #8
 810e37a:	46bd      	mov	sp, r7
 810e37c:	bd80      	pop	{r7, pc}
 810e37e:	bf00      	nop
 810e380:	08112b50 	.word	0x08112b50
 810e384:	08112b6c 	.word	0x08112b6c

0810e388 <_ZN11ADC24Thread4loopEv>:

void ADC24Thread::loop() {
 810e388:	b590      	push	{r4, r7, lr}
 810e38a:	b085      	sub	sp, #20
 810e38c:	af00      	add	r7, sp, #0
 810e38e:	6078      	str	r0, [r7, #4]
	ScienceData data;
	data.mass = HX711_valueAve(nSamples);
 810e390:	687b      	ldr	r3, [r7, #4]
 810e392:	899b      	ldrh	r3, [r3, #12]
 810e394:	4618      	mov	r0, r3
 810e396:	f7fd fed3 	bl	810c140 <HX711_valueAve>
 810e39a:	4603      	mov	r3, r0
 810e39c:	60fb      	str	r3, [r7, #12]

	println("%s", data.toString(cbuf));
 810e39e:	687c      	ldr	r4, [r7, #4]
 810e3a0:	f107 030c 	add.w	r3, r7, #12
 810e3a4:	490f      	ldr	r1, [pc, #60]	; (810e3e4 <_ZN11ADC24Thread4loopEv+0x5c>)
 810e3a6:	4618      	mov	r0, r3
 810e3a8:	f7ff ff80 	bl	810e2ac <_ZN11ScienceData8toStringEPc>
 810e3ac:	4603      	mov	r3, r0
 810e3ae:	461a      	mov	r2, r3
 810e3b0:	490d      	ldr	r1, [pc, #52]	; (810e3e8 <_ZN11ADC24Thread4loopEv+0x60>)
 810e3b2:	4620      	mov	r0, r4
 810e3b4:	f000 fc80 	bl	810ecb8 <_ZN6Thread7printlnEPKcz>

	Science_MeasurePacket packet;
	data.toArray((uint32_t*) &packet);
 810e3b8:	f107 0208 	add.w	r2, r7, #8
 810e3bc:	f107 030c 	add.w	r3, r7, #12
 810e3c0:	4611      	mov	r1, r2
 810e3c2:	4618      	mov	r0, r3
 810e3c4:	f7ff ff86 	bl	810e2d4 <_ZN11ScienceData7toArrayEPm>
	network.send(&packet);
 810e3c8:	f107 0308 	add.w	r3, r7, #8
 810e3cc:	4619      	mov	r1, r3
 810e3ce:	4807      	ldr	r0, [pc, #28]	; (810e3ec <_ZN11ADC24Thread4loopEv+0x64>)
 810e3d0:	f7ff fdbc 	bl	810df4c <_ZN10MessageBus4sendI21Science_MeasurePacketEEbPT_>

	osDelay(100);
 810e3d4:	2064      	movs	r0, #100	; 0x64
 810e3d6:	f7fa fa93 	bl	8108900 <osDelay>
}
 810e3da:	bf00      	nop
 810e3dc:	3714      	adds	r7, #20
 810e3de:	46bd      	mov	sp, r7
 810e3e0:	bd90      	pop	{r4, r7, pc}
 810e3e2:	bf00      	nop
 810e3e4:	10004628 	.word	0x10004628
 810e3e8:	08112b80 	.word	0x08112b80
 810e3ec:	10004f80 	.word	0x10004f80

0810e3f0 <_ZN8BaroData8toStringEPc>:
	char* toString(char* buffer) {
 810e3f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810e3f4:	b086      	sub	sp, #24
 810e3f6:	af04      	add	r7, sp, #16
 810e3f8:	6078      	str	r0, [r7, #4]
 810e3fa:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Tmp: %f, Prs: %f, Hum: %f", temperature, pressure, humidity);
 810e3fc:	687b      	ldr	r3, [r7, #4]
 810e3fe:	681b      	ldr	r3, [r3, #0]
 810e400:	4618      	mov	r0, r3
 810e402:	f7f2 f939 	bl	8100678 <__aeabi_f2d>
 810e406:	4680      	mov	r8, r0
 810e408:	4689      	mov	r9, r1
 810e40a:	687b      	ldr	r3, [r7, #4]
 810e40c:	685b      	ldr	r3, [r3, #4]
 810e40e:	4618      	mov	r0, r3
 810e410:	f7f2 f932 	bl	8100678 <__aeabi_f2d>
 810e414:	4604      	mov	r4, r0
 810e416:	460d      	mov	r5, r1
 810e418:	687b      	ldr	r3, [r7, #4]
 810e41a:	689b      	ldr	r3, [r3, #8]
 810e41c:	4618      	mov	r0, r3
 810e41e:	f7f2 f92b 	bl	8100678 <__aeabi_f2d>
 810e422:	4602      	mov	r2, r0
 810e424:	460b      	mov	r3, r1
 810e426:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810e42a:	e9cd 4500 	strd	r4, r5, [sp]
 810e42e:	4642      	mov	r2, r8
 810e430:	464b      	mov	r3, r9
 810e432:	4905      	ldr	r1, [pc, #20]	; (810e448 <_ZN8BaroData8toStringEPc+0x58>)
 810e434:	6838      	ldr	r0, [r7, #0]
 810e436:	f001 fda3 	bl	810ff80 <siprintf>
		return buffer;
 810e43a:	683b      	ldr	r3, [r7, #0]
	}
 810e43c:	4618      	mov	r0, r3
 810e43e:	3708      	adds	r7, #8
 810e440:	46bd      	mov	sp, r7
 810e442:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810e446:	bf00      	nop
 810e448:	08112b84 	.word	0x08112b84

0810e44c <_ZN6Vector8toStringEPc>:
	char* toString(char* buffer) {
 810e44c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810e450:	b086      	sub	sp, #24
 810e452:	af04      	add	r7, sp, #16
 810e454:	6078      	str	r0, [r7, #4]
 810e456:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "[%f %f %f]", x, y, z);
 810e458:	687b      	ldr	r3, [r7, #4]
 810e45a:	681b      	ldr	r3, [r3, #0]
 810e45c:	4618      	mov	r0, r3
 810e45e:	f7f2 f90b 	bl	8100678 <__aeabi_f2d>
 810e462:	4680      	mov	r8, r0
 810e464:	4689      	mov	r9, r1
 810e466:	687b      	ldr	r3, [r7, #4]
 810e468:	685b      	ldr	r3, [r3, #4]
 810e46a:	4618      	mov	r0, r3
 810e46c:	f7f2 f904 	bl	8100678 <__aeabi_f2d>
 810e470:	4604      	mov	r4, r0
 810e472:	460d      	mov	r5, r1
 810e474:	687b      	ldr	r3, [r7, #4]
 810e476:	689b      	ldr	r3, [r3, #8]
 810e478:	4618      	mov	r0, r3
 810e47a:	f7f2 f8fd 	bl	8100678 <__aeabi_f2d>
 810e47e:	4602      	mov	r2, r0
 810e480:	460b      	mov	r3, r1
 810e482:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810e486:	e9cd 4500 	strd	r4, r5, [sp]
 810e48a:	4642      	mov	r2, r8
 810e48c:	464b      	mov	r3, r9
 810e48e:	4905      	ldr	r1, [pc, #20]	; (810e4a4 <_ZN6Vector8toStringEPc+0x58>)
 810e490:	6838      	ldr	r0, [r7, #0]
 810e492:	f001 fd75 	bl	810ff80 <siprintf>
		return buffer;
 810e496:	683b      	ldr	r3, [r7, #0]
	}
 810e498:	4618      	mov	r0, r3
 810e49a:	3708      	adds	r7, #8
 810e49c:	46bd      	mov	sp, r7
 810e49e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810e4a2:	bf00      	nop
 810e4a4:	08112bd8 	.word	0x08112bd8

0810e4a8 <_ZN6Vector7toArrayEPf>:
	float* toArray(float* buffer) {
 810e4a8:	b480      	push	{r7}
 810e4aa:	b083      	sub	sp, #12
 810e4ac:	af00      	add	r7, sp, #0
 810e4ae:	6078      	str	r0, [r7, #4]
 810e4b0:	6039      	str	r1, [r7, #0]
		buffer[0] = x;
 810e4b2:	687b      	ldr	r3, [r7, #4]
 810e4b4:	681a      	ldr	r2, [r3, #0]
 810e4b6:	683b      	ldr	r3, [r7, #0]
 810e4b8:	601a      	str	r2, [r3, #0]
		buffer[1] = y;
 810e4ba:	683b      	ldr	r3, [r7, #0]
 810e4bc:	3304      	adds	r3, #4
 810e4be:	687a      	ldr	r2, [r7, #4]
 810e4c0:	6852      	ldr	r2, [r2, #4]
 810e4c2:	601a      	str	r2, [r3, #0]
		buffer[2] = z;
 810e4c4:	683b      	ldr	r3, [r7, #0]
 810e4c6:	3308      	adds	r3, #8
 810e4c8:	687a      	ldr	r2, [r7, #4]
 810e4ca:	6892      	ldr	r2, [r2, #8]
 810e4cc:	601a      	str	r2, [r3, #0]
		return buffer;
 810e4ce:	683b      	ldr	r3, [r7, #0]
	}
 810e4d0:	4618      	mov	r0, r3
 810e4d2:	370c      	adds	r7, #12
 810e4d4:	46bd      	mov	sp, r7
 810e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e4da:	4770      	bx	lr

0810e4dc <_ZN7IMUData8toStringEPc>:
	char* toString(char* buffer) {
 810e4dc:	b5b0      	push	{r4, r5, r7, lr}
 810e4de:	b084      	sub	sp, #16
 810e4e0:	af02      	add	r7, sp, #8
 810e4e2:	6078      	str	r0, [r7, #4]
 810e4e4:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Acc: %s, Ang: %s, Mag: %s", accel.toString(buf), gyro.toString(buf + 32), mag.toString(buf + 64));
 810e4e6:	687b      	ldr	r3, [r7, #4]
 810e4e8:	4910      	ldr	r1, [pc, #64]	; (810e52c <_ZN7IMUData8toStringEPc+0x50>)
 810e4ea:	4618      	mov	r0, r3
 810e4ec:	f7ff ffae 	bl	810e44c <_ZN6Vector8toStringEPc>
 810e4f0:	4604      	mov	r4, r0
 810e4f2:	687b      	ldr	r3, [r7, #4]
 810e4f4:	330c      	adds	r3, #12
 810e4f6:	4a0e      	ldr	r2, [pc, #56]	; (810e530 <_ZN7IMUData8toStringEPc+0x54>)
 810e4f8:	4611      	mov	r1, r2
 810e4fa:	4618      	mov	r0, r3
 810e4fc:	f7ff ffa6 	bl	810e44c <_ZN6Vector8toStringEPc>
 810e500:	4605      	mov	r5, r0
 810e502:	687b      	ldr	r3, [r7, #4]
 810e504:	3318      	adds	r3, #24
 810e506:	4a0b      	ldr	r2, [pc, #44]	; (810e534 <_ZN7IMUData8toStringEPc+0x58>)
 810e508:	4611      	mov	r1, r2
 810e50a:	4618      	mov	r0, r3
 810e50c:	f7ff ff9e 	bl	810e44c <_ZN6Vector8toStringEPc>
 810e510:	4603      	mov	r3, r0
 810e512:	9300      	str	r3, [sp, #0]
 810e514:	462b      	mov	r3, r5
 810e516:	4622      	mov	r2, r4
 810e518:	4907      	ldr	r1, [pc, #28]	; (810e538 <_ZN7IMUData8toStringEPc+0x5c>)
 810e51a:	6838      	ldr	r0, [r7, #0]
 810e51c:	f001 fd30 	bl	810ff80 <siprintf>
		return buffer;
 810e520:	683b      	ldr	r3, [r7, #0]
	}
 810e522:	4618      	mov	r0, r3
 810e524:	3708      	adds	r7, #8
 810e526:	46bd      	mov	sp, r7
 810e528:	bdb0      	pop	{r4, r5, r7, pc}
 810e52a:	bf00      	nop
 810e52c:	10004728 	.word	0x10004728
 810e530:	10004748 	.word	0x10004748
 810e534:	10004768 	.word	0x10004768
 810e538:	08112be4 	.word	0x08112be4

0810e53c <_ZN7IMUData7toArrayEPf>:
	float* toArray(float* buffer) {
 810e53c:	b580      	push	{r7, lr}
 810e53e:	b082      	sub	sp, #8
 810e540:	af00      	add	r7, sp, #0
 810e542:	6078      	str	r0, [r7, #4]
 810e544:	6039      	str	r1, [r7, #0]
		accel.toArray(buffer);
 810e546:	687b      	ldr	r3, [r7, #4]
 810e548:	6839      	ldr	r1, [r7, #0]
 810e54a:	4618      	mov	r0, r3
 810e54c:	f7ff ffac 	bl	810e4a8 <_ZN6Vector7toArrayEPf>
		gyro.toArray(buffer + 3);
 810e550:	687b      	ldr	r3, [r7, #4]
 810e552:	f103 020c 	add.w	r2, r3, #12
 810e556:	683b      	ldr	r3, [r7, #0]
 810e558:	330c      	adds	r3, #12
 810e55a:	4619      	mov	r1, r3
 810e55c:	4610      	mov	r0, r2
 810e55e:	f7ff ffa3 	bl	810e4a8 <_ZN6Vector7toArrayEPf>
		mag.toArray(buffer + 6);
 810e562:	687b      	ldr	r3, [r7, #4]
 810e564:	f103 0218 	add.w	r2, r3, #24
 810e568:	683b      	ldr	r3, [r7, #0]
 810e56a:	3318      	adds	r3, #24
 810e56c:	4619      	mov	r1, r3
 810e56e:	4610      	mov	r0, r2
 810e570:	f7ff ff9a 	bl	810e4a8 <_ZN6Vector7toArrayEPf>
		return buffer;
 810e574:	683b      	ldr	r3, [r7, #0]
	}
 810e576:	4618      	mov	r0, r3
 810e578:	3708      	adds	r7, #8
 810e57a:	46bd      	mov	sp, r7
 810e57c:	bd80      	pop	{r7, pc}
	...

0810e580 <_ZN9IMUThread4initEv>:
#include "Telemetry.h"


static char cbuf[256];

void IMUThread::init() {
 810e580:	b590      	push	{r4, r7, lr}
 810e582:	b087      	sub	sp, #28
 810e584:	af00      	add	r7, sp, #0
 810e586:	6078      	str	r0, [r7, #4]
	bno055_assignI2C(this->hi2c);
 810e588:	687b      	ldr	r3, [r7, #4]
 810e58a:	68db      	ldr	r3, [r3, #12]
 810e58c:	4618      	mov	r0, r3
 810e58e:	f7fd fb9f 	bl	810bcd0 <bno055_assignI2C>
	bno055_setup();
 810e592:	f7fd f960 	bl	810b856 <bno055_setup>
	bno055_setOperationModeNDOF();
 810e596:	f7fd f94b 	bl	810b830 <bno055_setOperationModeNDOF>

	BaroData data;
	println("%s", data.toString(cbuf));
 810e59a:	687c      	ldr	r4, [r7, #4]
 810e59c:	f107 030c 	add.w	r3, r7, #12
 810e5a0:	4917      	ldr	r1, [pc, #92]	; (810e600 <_ZN9IMUThread4initEv+0x80>)
 810e5a2:	4618      	mov	r0, r3
 810e5a4:	f7ff ff24 	bl	810e3f0 <_ZN8BaroData8toStringEPc>
 810e5a8:	4603      	mov	r3, r0
 810e5aa:	461a      	mov	r2, r3
 810e5ac:	4915      	ldr	r1, [pc, #84]	; (810e604 <_ZN9IMUThread4initEv+0x84>)
 810e5ae:	4620      	mov	r0, r4
 810e5b0:	f000 fb82 	bl	810ecb8 <_ZN6Thread7printlnEPKcz>


	while(bno055_getSystemError() != BNO055_SYSTEM_ERROR_NO_ERROR) {
 810e5b4:	f7fd f96c 	bl	810b890 <bno055_getSystemError>
 810e5b8:	4603      	mov	r3, r0
 810e5ba:	2b00      	cmp	r3, #0
 810e5bc:	bf14      	ite	ne
 810e5be:	2301      	movne	r3, #1
 810e5c0:	2300      	moveq	r3, #0
 810e5c2:	b2db      	uxtb	r3, r3
 810e5c4:	2b00      	cmp	r3, #0
 810e5c6:	d012      	beq.n	810e5ee <_ZN9IMUThread4initEv+0x6e>
		osDelay(500);
 810e5c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810e5cc:	f7fa f998 	bl	8108900 <osDelay>
		println("BNO055 initialization failed");
 810e5d0:	687b      	ldr	r3, [r7, #4]
 810e5d2:	490d      	ldr	r1, [pc, #52]	; (810e608 <_ZN9IMUThread4initEv+0x88>)
 810e5d4:	4618      	mov	r0, r3
 810e5d6:	f000 fb6f 	bl	810ecb8 <_ZN6Thread7printlnEPKcz>

		bno055_assignI2C(this->hi2c);
 810e5da:	687b      	ldr	r3, [r7, #4]
 810e5dc:	68db      	ldr	r3, [r3, #12]
 810e5de:	4618      	mov	r0, r3
 810e5e0:	f7fd fb76 	bl	810bcd0 <bno055_assignI2C>
		bno055_setup();
 810e5e4:	f7fd f937 	bl	810b856 <bno055_setup>
		bno055_setOperationModeNDOF();
 810e5e8:	f7fd f922 	bl	810b830 <bno055_setOperationModeNDOF>
	while(bno055_getSystemError() != BNO055_SYSTEM_ERROR_NO_ERROR) {
 810e5ec:	e7e2      	b.n	810e5b4 <_ZN9IMUThread4initEv+0x34>
	}

	println("BNO055 initialized");
 810e5ee:	687b      	ldr	r3, [r7, #4]
 810e5f0:	4906      	ldr	r1, [pc, #24]	; (810e60c <_ZN9IMUThread4initEv+0x8c>)
 810e5f2:	4618      	mov	r0, r3
 810e5f4:	f000 fb60 	bl	810ecb8 <_ZN6Thread7printlnEPKcz>
}
 810e5f8:	bf00      	nop
 810e5fa:	371c      	adds	r7, #28
 810e5fc:	46bd      	mov	sp, r7
 810e5fe:	bd90      	pop	{r4, r7, pc}
 810e600:	10004788 	.word	0x10004788
 810e604:	08112c1c 	.word	0x08112c1c
 810e608:	08112c20 	.word	0x08112c20
 810e60c:	08112c40 	.word	0x08112c40

0810e610 <_ZN9IMUThread4loopEv>:

void IMUThread::loop() {
 810e610:	b590      	push	{r4, r7, lr}
 810e612:	b0a5      	sub	sp, #148	; 0x94
 810e614:	af00      	add	r7, sp, #0
 810e616:	6078      	str	r0, [r7, #4]
	static IMUData data;

	data.accel = bnoVectorToVector(bno055_getVectorAccelerometer());
 810e618:	f7fd fa90 	bl	810bb3c <bno055_getVectorAccelerometer>
 810e61c:	eeb0 4a40 	vmov.f32	s8, s0
 810e620:	eef0 4a60 	vmov.f32	s9, s1
 810e624:	eeb0 5a41 	vmov.f32	s10, s2
 810e628:	eef0 5a61 	vmov.f32	s11, s3
 810e62c:	eeb0 6a42 	vmov.f32	s12, s4
 810e630:	eef0 6a62 	vmov.f32	s13, s5
 810e634:	eeb0 7a43 	vmov.f32	s14, s6
 810e638:	eef0 7a63 	vmov.f32	s15, s7
 810e63c:	ed87 4b0c 	vstr	d4, [r7, #48]	; 0x30
 810e640:	ed87 5b0e 	vstr	d5, [r7, #56]	; 0x38
 810e644:	ed87 6b10 	vstr	d6, [r7, #64]	; 0x40
 810e648:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
 810e64c:	4c64      	ldr	r4, [pc, #400]	; (810e7e0 <_ZN9IMUThread4loopEv+0x1d0>)
 810e64e:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 810e652:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 810e656:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 810e65a:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 810e65e:	eeb0 0a44 	vmov.f32	s0, s8
 810e662:	eef0 0a64 	vmov.f32	s1, s9
 810e666:	eeb0 1a45 	vmov.f32	s2, s10
 810e66a:	eef0 1a65 	vmov.f32	s3, s11
 810e66e:	eeb0 2a46 	vmov.f32	s4, s12
 810e672:	eef0 2a66 	vmov.f32	s5, s13
 810e676:	eeb0 3a47 	vmov.f32	s6, s14
 810e67a:	eef0 3a67 	vmov.f32	s7, s15
 810e67e:	6878      	ldr	r0, [r7, #4]
 810e680:	f000 f8b6 	bl	810e7f0 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 810e684:	eef0 6a40 	vmov.f32	s13, s0
 810e688:	eeb0 7a60 	vmov.f32	s14, s1
 810e68c:	eef0 7a41 	vmov.f32	s15, s2
 810e690:	edc4 6a00 	vstr	s13, [r4]
 810e694:	ed84 7a01 	vstr	s14, [r4, #4]
 810e698:	edc4 7a02 	vstr	s15, [r4, #8]
	data.gyro = bnoVectorToVector(bno055_getVectorEuler());
 810e69c:	f7fd fa91 	bl	810bbc2 <bno055_getVectorEuler>
 810e6a0:	eeb0 4a40 	vmov.f32	s8, s0
 810e6a4:	eef0 4a60 	vmov.f32	s9, s1
 810e6a8:	eeb0 5a41 	vmov.f32	s10, s2
 810e6ac:	eef0 5a61 	vmov.f32	s11, s3
 810e6b0:	eeb0 6a42 	vmov.f32	s12, s4
 810e6b4:	eef0 6a62 	vmov.f32	s13, s5
 810e6b8:	eeb0 7a43 	vmov.f32	s14, s6
 810e6bc:	eef0 7a63 	vmov.f32	s15, s7
 810e6c0:	ed87 4b14 	vstr	d4, [r7, #80]	; 0x50
 810e6c4:	ed87 5b16 	vstr	d5, [r7, #88]	; 0x58
 810e6c8:	ed87 6b18 	vstr	d6, [r7, #96]	; 0x60
 810e6cc:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
 810e6d0:	4c43      	ldr	r4, [pc, #268]	; (810e7e0 <_ZN9IMUThread4loopEv+0x1d0>)
 810e6d2:	ed97 4b14 	vldr	d4, [r7, #80]	; 0x50
 810e6d6:	ed97 5b16 	vldr	d5, [r7, #88]	; 0x58
 810e6da:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 810e6de:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 810e6e2:	eeb0 0a44 	vmov.f32	s0, s8
 810e6e6:	eef0 0a64 	vmov.f32	s1, s9
 810e6ea:	eeb0 1a45 	vmov.f32	s2, s10
 810e6ee:	eef0 1a65 	vmov.f32	s3, s11
 810e6f2:	eeb0 2a46 	vmov.f32	s4, s12
 810e6f6:	eef0 2a66 	vmov.f32	s5, s13
 810e6fa:	eeb0 3a47 	vmov.f32	s6, s14
 810e6fe:	eef0 3a67 	vmov.f32	s7, s15
 810e702:	6878      	ldr	r0, [r7, #4]
 810e704:	f000 f874 	bl	810e7f0 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 810e708:	eef0 6a40 	vmov.f32	s13, s0
 810e70c:	eeb0 7a60 	vmov.f32	s14, s1
 810e710:	eef0 7a41 	vmov.f32	s15, s2
 810e714:	edc4 6a03 	vstr	s13, [r4, #12]
 810e718:	ed84 7a04 	vstr	s14, [r4, #16]
 810e71c:	edc4 7a05 	vstr	s15, [r4, #20]
	data.mag = bnoVectorToVector(bno055_getVectorGravity());
 810e720:	f7fd fa92 	bl	810bc48 <bno055_getVectorGravity>
 810e724:	eeb0 4a40 	vmov.f32	s8, s0
 810e728:	eef0 4a60 	vmov.f32	s9, s1
 810e72c:	eeb0 5a41 	vmov.f32	s10, s2
 810e730:	eef0 5a61 	vmov.f32	s11, s3
 810e734:	eeb0 6a42 	vmov.f32	s12, s4
 810e738:	eef0 6a62 	vmov.f32	s13, s5
 810e73c:	eeb0 7a43 	vmov.f32	s14, s6
 810e740:	eef0 7a63 	vmov.f32	s15, s7
 810e744:	ed87 4b1c 	vstr	d4, [r7, #112]	; 0x70
 810e748:	ed87 5b1e 	vstr	d5, [r7, #120]	; 0x78
 810e74c:	ed87 6b20 	vstr	d6, [r7, #128]	; 0x80
 810e750:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
 810e754:	4c22      	ldr	r4, [pc, #136]	; (810e7e0 <_ZN9IMUThread4loopEv+0x1d0>)
 810e756:	ed97 4b1c 	vldr	d4, [r7, #112]	; 0x70
 810e75a:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 810e75e:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 810e762:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 810e766:	eeb0 0a44 	vmov.f32	s0, s8
 810e76a:	eef0 0a64 	vmov.f32	s1, s9
 810e76e:	eeb0 1a45 	vmov.f32	s2, s10
 810e772:	eef0 1a65 	vmov.f32	s3, s11
 810e776:	eeb0 2a46 	vmov.f32	s4, s12
 810e77a:	eef0 2a66 	vmov.f32	s5, s13
 810e77e:	eeb0 3a47 	vmov.f32	s6, s14
 810e782:	eef0 3a67 	vmov.f32	s7, s15
 810e786:	6878      	ldr	r0, [r7, #4]
 810e788:	f000 f832 	bl	810e7f0 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>
 810e78c:	eef0 6a40 	vmov.f32	s13, s0
 810e790:	eeb0 7a60 	vmov.f32	s14, s1
 810e794:	eef0 7a41 	vmov.f32	s15, s2
 810e798:	edc4 6a06 	vstr	s13, [r4, #24]
 810e79c:	ed84 7a07 	vstr	s14, [r4, #28]
 810e7a0:	edc4 7a08 	vstr	s15, [r4, #32]

	println("%s", data.toString(cbuf));
 810e7a4:	687c      	ldr	r4, [r7, #4]
 810e7a6:	490f      	ldr	r1, [pc, #60]	; (810e7e4 <_ZN9IMUThread4loopEv+0x1d4>)
 810e7a8:	480d      	ldr	r0, [pc, #52]	; (810e7e0 <_ZN9IMUThread4loopEv+0x1d0>)
 810e7aa:	f7ff fe97 	bl	810e4dc <_ZN7IMUData8toStringEPc>
 810e7ae:	4603      	mov	r3, r0
 810e7b0:	461a      	mov	r2, r3
 810e7b2:	490d      	ldr	r1, [pc, #52]	; (810e7e8 <_ZN9IMUThread4loopEv+0x1d8>)
 810e7b4:	4620      	mov	r0, r4
 810e7b6:	f000 fa7f 	bl	810ecb8 <_ZN6Thread7printlnEPKcz>

	Avionics_AccelMagPacket packet;
	data.toArray((float*) &packet);
 810e7ba:	f107 030c 	add.w	r3, r7, #12
 810e7be:	4619      	mov	r1, r3
 810e7c0:	4807      	ldr	r0, [pc, #28]	; (810e7e0 <_ZN9IMUThread4loopEv+0x1d0>)
 810e7c2:	f7ff febb 	bl	810e53c <_ZN7IMUData7toArrayEPf>

	network.send(&packet);
 810e7c6:	f107 030c 	add.w	r3, r7, #12
 810e7ca:	4619      	mov	r1, r3
 810e7cc:	4807      	ldr	r0, [pc, #28]	; (810e7ec <_ZN9IMUThread4loopEv+0x1dc>)
 810e7ce:	f7ff f9cd 	bl	810db6c <_ZN10MessageBus4sendI23Avionics_AccelMagPacketEEbPT_>

	osDelay(100);
 810e7d2:	2064      	movs	r0, #100	; 0x64
 810e7d4:	f7fa f894 	bl	8108900 <osDelay>
}
 810e7d8:	bf00      	nop
 810e7da:	3794      	adds	r7, #148	; 0x94
 810e7dc:	46bd      	mov	sp, r7
 810e7de:	bd90      	pop	{r4, r7, pc}
 810e7e0:	10004888 	.word	0x10004888
 810e7e4:	10004788 	.word	0x10004788
 810e7e8:	08112c1c 	.word	0x08112c1c
 810e7ec:	10004f80 	.word	0x10004f80

0810e7f0 <_ZN9IMUThread17bnoVectorToVectorE15bno055_vector_t>:


Vector IMUThread::bnoVectorToVector(bno055_vector_t v) {
 810e7f0:	b580      	push	{r7, lr}
 810e7f2:	b094      	sub	sp, #80	; 0x50
 810e7f4:	af00      	add	r7, sp, #0
 810e7f6:	6378      	str	r0, [r7, #52]	; 0x34
 810e7f8:	eeb0 4a40 	vmov.f32	s8, s0
 810e7fc:	eef0 4a60 	vmov.f32	s9, s1
 810e800:	eeb0 5a41 	vmov.f32	s10, s2
 810e804:	eef0 5a61 	vmov.f32	s11, s3
 810e808:	eeb0 6a42 	vmov.f32	s12, s4
 810e80c:	eef0 6a62 	vmov.f32	s13, s5
 810e810:	eeb0 7a43 	vmov.f32	s14, s6
 810e814:	eef0 7a63 	vmov.f32	s15, s7
 810e818:	ed87 4b04 	vstr	d4, [r7, #16]
 810e81c:	ed87 5b06 	vstr	d5, [r7, #24]
 810e820:	ed87 6b08 	vstr	d6, [r7, #32]
 810e824:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	Vector vector;

	vector.x = v.x;
 810e828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 810e82c:	4610      	mov	r0, r2
 810e82e:	4619      	mov	r1, r3
 810e830:	f7f2 fa52 	bl	8100cd8 <__aeabi_d2f>
 810e834:	4603      	mov	r3, r0
 810e836:	63bb      	str	r3, [r7, #56]	; 0x38
	vector.y = v.y;
 810e838:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 810e83c:	4610      	mov	r0, r2
 810e83e:	4619      	mov	r1, r3
 810e840:	f7f2 fa4a 	bl	8100cd8 <__aeabi_d2f>
 810e844:	4603      	mov	r3, r0
 810e846:	63fb      	str	r3, [r7, #60]	; 0x3c
	vector.z = v.z;
 810e848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 810e84c:	4610      	mov	r0, r2
 810e84e:	4619      	mov	r1, r3
 810e850:	f7f2 fa42 	bl	8100cd8 <__aeabi_d2f>
 810e854:	4603      	mov	r3, r0
 810e856:	643b      	str	r3, [r7, #64]	; 0x40

	return vector;
 810e858:	f107 0344 	add.w	r3, r7, #68	; 0x44
 810e85c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 810e860:	ca07      	ldmia	r2, {r0, r1, r2}
 810e862:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 810e866:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810e868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810e86a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810e86c:	ee06 1a90 	vmov	s13, r1
 810e870:	ee07 2a10 	vmov	s14, r2
 810e874:	ee07 3a90 	vmov	s15, r3
}
 810e878:	eeb0 0a66 	vmov.f32	s0, s13
 810e87c:	eef0 0a47 	vmov.f32	s1, s14
 810e880:	eeb0 1a67 	vmov.f32	s2, s15
 810e884:	3750      	adds	r7, #80	; 0x50
 810e886:	46bd      	mov	sp, r7
 810e888:	bd80      	pop	{r7, pc}
	...

0810e88c <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	~Thread() {};
 810e88c:	b480      	push	{r7}
 810e88e:	b083      	sub	sp, #12
 810e890:	af00      	add	r7, sp, #0
 810e892:	6078      	str	r0, [r7, #4]
 810e894:	4a04      	ldr	r2, [pc, #16]	; (810e8a8 <_ZN6ThreadD1Ev+0x1c>)
 810e896:	687b      	ldr	r3, [r7, #4]
 810e898:	601a      	str	r2, [r3, #0]
 810e89a:	687b      	ldr	r3, [r7, #4]
 810e89c:	4618      	mov	r0, r3
 810e89e:	370c      	adds	r7, #12
 810e8a0:	46bd      	mov	sp, r7
 810e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e8a6:	4770      	bx	lr
 810e8a8:	081130cc 	.word	0x081130cc

0810e8ac <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 810e8ac:	b580      	push	{r7, lr}
 810e8ae:	b082      	sub	sp, #8
 810e8b0:	af00      	add	r7, sp, #0
 810e8b2:	6078      	str	r0, [r7, #4]
 810e8b4:	6039      	str	r1, [r7, #0]
 810e8b6:	687b      	ldr	r3, [r7, #4]
 810e8b8:	4907      	ldr	r1, [pc, #28]	; (810e8d8 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 810e8ba:	4618      	mov	r0, r3
 810e8bc:	f000 f9a5 	bl	810ec0a <_ZN6ThreadC1EPKc>
 810e8c0:	4a06      	ldr	r2, [pc, #24]	; (810e8dc <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 810e8c2:	687b      	ldr	r3, [r7, #4]
 810e8c4:	601a      	str	r2, [r3, #0]
 810e8c6:	687b      	ldr	r3, [r7, #4]
 810e8c8:	683a      	ldr	r2, [r7, #0]
 810e8ca:	60da      	str	r2, [r3, #12]
 810e8cc:	687b      	ldr	r3, [r7, #4]
 810e8ce:	4618      	mov	r0, r3
 810e8d0:	3708      	adds	r7, #8
 810e8d2:	46bd      	mov	sp, r7
 810e8d4:	bd80      	pop	{r7, pc}
 810e8d6:	bf00      	nop
 810e8d8:	08112c54 	.word	0x08112c54
 810e8dc:	08113024 	.word	0x08113024

0810e8e0 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDef>:
#include "Libraries/BNO055/bno055_stm32.h"
#include "Libraries/BNO055/bno055.h"

class IMUThread : Thread {
public:
	IMUThread(I2C_HandleTypeDef* hi2c) : Thread("IMU"), hi2c(hi2c) {}
 810e8e0:	b580      	push	{r7, lr}
 810e8e2:	b082      	sub	sp, #8
 810e8e4:	af00      	add	r7, sp, #0
 810e8e6:	6078      	str	r0, [r7, #4]
 810e8e8:	6039      	str	r1, [r7, #0]
 810e8ea:	687b      	ldr	r3, [r7, #4]
 810e8ec:	4907      	ldr	r1, [pc, #28]	; (810e90c <_ZN9IMUThreadC1EP19__I2C_HandleTypeDef+0x2c>)
 810e8ee:	4618      	mov	r0, r3
 810e8f0:	f000 f98b 	bl	810ec0a <_ZN6ThreadC1EPKc>
 810e8f4:	4a06      	ldr	r2, [pc, #24]	; (810e910 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDef+0x30>)
 810e8f6:	687b      	ldr	r3, [r7, #4]
 810e8f8:	601a      	str	r2, [r3, #0]
 810e8fa:	687b      	ldr	r3, [r7, #4]
 810e8fc:	683a      	ldr	r2, [r7, #0]
 810e8fe:	60da      	str	r2, [r3, #12]
 810e900:	687b      	ldr	r3, [r7, #4]
 810e902:	4618      	mov	r0, r3
 810e904:	3708      	adds	r7, #8
 810e906:	46bd      	mov	sp, r7
 810e908:	bd80      	pop	{r7, pc}
 810e90a:	bf00      	nop
 810e90c:	08112c60 	.word	0x08112c60
 810e910:	08113098 	.word	0x08113098

0810e914 <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 810e914:	b580      	push	{r7, lr}
 810e916:	b082      	sub	sp, #8
 810e918:	af00      	add	r7, sp, #0
 810e91a:	6078      	str	r0, [r7, #4]
 810e91c:	4a05      	ldr	r2, [pc, #20]	; (810e934 <_ZN14WatchdogThreadD1Ev+0x20>)
 810e91e:	687b      	ldr	r3, [r7, #4]
 810e920:	601a      	str	r2, [r3, #0]
 810e922:	687b      	ldr	r3, [r7, #4]
 810e924:	4618      	mov	r0, r3
 810e926:	f7ff ffb1 	bl	810e88c <_ZN6ThreadD1Ev>
 810e92a:	687b      	ldr	r3, [r7, #4]
 810e92c:	4618      	mov	r0, r3
 810e92e:	3708      	adds	r7, #8
 810e930:	46bd      	mov	sp, r7
 810e932:	bd80      	pop	{r7, pc}
 810e934:	08113024 	.word	0x08113024

0810e938 <__tcf_0>:


#ifdef CORE_CM4
#include "i2c.h"
void initCortexM4() {
	static WatchdogThread watchdog(&hiwdg2);
 810e938:	b580      	push	{r7, lr}
 810e93a:	af00      	add	r7, sp, #0
 810e93c:	4801      	ldr	r0, [pc, #4]	; (810e944 <__tcf_0+0xc>)
 810e93e:	f7ff ffe9 	bl	810e914 <_ZN14WatchdogThreadD1Ev>
 810e942:	bd80      	pop	{r7, pc}
 810e944:	100048ac 	.word	0x100048ac

0810e948 <_ZN5ShellD1Ev>:

#define CMD_BUFFER_SIZE 512



class Shell : public Thread {
 810e948:	b580      	push	{r7, lr}
 810e94a:	b082      	sub	sp, #8
 810e94c:	af00      	add	r7, sp, #0
 810e94e:	6078      	str	r0, [r7, #4]
 810e950:	4a05      	ldr	r2, [pc, #20]	; (810e968 <_ZN5ShellD1Ev+0x20>)
 810e952:	687b      	ldr	r3, [r7, #4]
 810e954:	601a      	str	r2, [r3, #0]
 810e956:	687b      	ldr	r3, [r7, #4]
 810e958:	4618      	mov	r0, r3
 810e95a:	f7ff ff97 	bl	810e88c <_ZN6ThreadD1Ev>
 810e95e:	687b      	ldr	r3, [r7, #4]
 810e960:	4618      	mov	r0, r3
 810e962:	3708      	adds	r7, #8
 810e964:	46bd      	mov	sp, r7
 810e966:	bd80      	pop	{r7, pc}
 810e968:	08112cb4 	.word	0x08112cb4

0810e96c <__tcf_1>:
	static Shell shell(&huart3, &terminal);
 810e96c:	b580      	push	{r7, lr}
 810e96e:	af00      	add	r7, sp, #0
 810e970:	4801      	ldr	r0, [pc, #4]	; (810e978 <__tcf_1+0xc>)
 810e972:	f7ff ffe9 	bl	810e948 <_ZN5ShellD1Ev>
 810e976:	bd80      	pop	{r7, pc}
 810e978:	100048c0 	.word	0x100048c0

0810e97c <_ZN9IMUThreadD1Ev>:
class IMUThread : Thread {
 810e97c:	b580      	push	{r7, lr}
 810e97e:	b082      	sub	sp, #8
 810e980:	af00      	add	r7, sp, #0
 810e982:	6078      	str	r0, [r7, #4]
 810e984:	4a05      	ldr	r2, [pc, #20]	; (810e99c <_ZN9IMUThreadD1Ev+0x20>)
 810e986:	687b      	ldr	r3, [r7, #4]
 810e988:	601a      	str	r2, [r3, #0]
 810e98a:	687b      	ldr	r3, [r7, #4]
 810e98c:	4618      	mov	r0, r3
 810e98e:	f7ff ff7d 	bl	810e88c <_ZN6ThreadD1Ev>
 810e992:	687b      	ldr	r3, [r7, #4]
 810e994:	4618      	mov	r0, r3
 810e996:	3708      	adds	r7, #8
 810e998:	46bd      	mov	sp, r7
 810e99a:	bd80      	pop	{r7, pc}
 810e99c:	08113098 	.word	0x08113098

0810e9a0 <__tcf_2>:
	static IMUThread imu(&hi2c1);
 810e9a0:	b580      	push	{r7, lr}
 810e9a2:	af00      	add	r7, sp, #0
 810e9a4:	4801      	ldr	r0, [pc, #4]	; (810e9ac <__tcf_2+0xc>)
 810e9a6:	f7ff ffe9 	bl	810e97c <_ZN9IMUThreadD1Ev>
 810e9aa:	bd80      	pop	{r7, pc}
 810e9ac:	10004d28 	.word	0x10004d28

0810e9b0 <_ZN11ADC24ThreadD1Ev>:
#include "DataStructures.h"

#include "Libraries/HX711/hx711.h"


class ADC24Thread : Thread {
 810e9b0:	b580      	push	{r7, lr}
 810e9b2:	b082      	sub	sp, #8
 810e9b4:	af00      	add	r7, sp, #0
 810e9b6:	6078      	str	r0, [r7, #4]
 810e9b8:	4a05      	ldr	r2, [pc, #20]	; (810e9d0 <_ZN11ADC24ThreadD1Ev+0x20>)
 810e9ba:	687b      	ldr	r3, [r7, #4]
 810e9bc:	601a      	str	r2, [r3, #0]
 810e9be:	687b      	ldr	r3, [r7, #4]
 810e9c0:	4618      	mov	r0, r3
 810e9c2:	f7ff ff63 	bl	810e88c <_ZN6ThreadD1Ev>
 810e9c6:	687b      	ldr	r3, [r7, #4]
 810e9c8:	4618      	mov	r0, r3
 810e9ca:	3708      	adds	r7, #8
 810e9cc:	46bd      	mov	sp, r7
 810e9ce:	bd80      	pop	{r7, pc}
 810e9d0:	08113060 	.word	0x08113060

0810e9d4 <__tcf_3>:
	//static BarometerThread barometer(&hi2c1);
	static ADC24Thread scale(GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_11);
 810e9d4:	b580      	push	{r7, lr}
 810e9d6:	af00      	add	r7, sp, #0
 810e9d8:	4801      	ldr	r0, [pc, #4]	; (810e9e0 <__tcf_3+0xc>)
 810e9da:	f7ff ffe9 	bl	810e9b0 <_ZN11ADC24ThreadD1Ev>
 810e9de:	bd80      	pop	{r7, pc}
 810e9e0:	10004d3c 	.word	0x10004d3c

0810e9e4 <initCortexM4>:
void initCortexM4() {
 810e9e4:	b580      	push	{r7, lr}
 810e9e6:	b082      	sub	sp, #8
 810e9e8:	af02      	add	r7, sp, #8
	static WatchdogThread watchdog(&hiwdg2);
 810e9ea:	4b4b      	ldr	r3, [pc, #300]	; (810eb18 <initCortexM4+0x134>)
 810e9ec:	781b      	ldrb	r3, [r3, #0]
 810e9ee:	f3bf 8f5b 	dmb	ish
 810e9f2:	b2db      	uxtb	r3, r3
 810e9f4:	f003 0301 	and.w	r3, r3, #1
 810e9f8:	2b00      	cmp	r3, #0
 810e9fa:	bf0c      	ite	eq
 810e9fc:	2301      	moveq	r3, #1
 810e9fe:	2300      	movne	r3, #0
 810ea00:	b2db      	uxtb	r3, r3
 810ea02:	2b00      	cmp	r3, #0
 810ea04:	d014      	beq.n	810ea30 <initCortexM4+0x4c>
 810ea06:	4844      	ldr	r0, [pc, #272]	; (810eb18 <initCortexM4+0x134>)
 810ea08:	f000 fa06 	bl	810ee18 <__cxa_guard_acquire>
 810ea0c:	4603      	mov	r3, r0
 810ea0e:	2b00      	cmp	r3, #0
 810ea10:	bf14      	ite	ne
 810ea12:	2301      	movne	r3, #1
 810ea14:	2300      	moveq	r3, #0
 810ea16:	b2db      	uxtb	r3, r3
 810ea18:	2b00      	cmp	r3, #0
 810ea1a:	d009      	beq.n	810ea30 <initCortexM4+0x4c>
 810ea1c:	493f      	ldr	r1, [pc, #252]	; (810eb1c <initCortexM4+0x138>)
 810ea1e:	4840      	ldr	r0, [pc, #256]	; (810eb20 <initCortexM4+0x13c>)
 810ea20:	f7ff ff44 	bl	810e8ac <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 810ea24:	483c      	ldr	r0, [pc, #240]	; (810eb18 <initCortexM4+0x134>)
 810ea26:	f000 fa03 	bl	810ee30 <__cxa_guard_release>
 810ea2a:	483e      	ldr	r0, [pc, #248]	; (810eb24 <initCortexM4+0x140>)
 810ea2c:	f000 fd22 	bl	810f474 <atexit>
	static Shell shell(&huart3, &terminal);
 810ea30:	4b3d      	ldr	r3, [pc, #244]	; (810eb28 <initCortexM4+0x144>)
 810ea32:	781b      	ldrb	r3, [r3, #0]
 810ea34:	f3bf 8f5b 	dmb	ish
 810ea38:	b2db      	uxtb	r3, r3
 810ea3a:	f003 0301 	and.w	r3, r3, #1
 810ea3e:	2b00      	cmp	r3, #0
 810ea40:	bf0c      	ite	eq
 810ea42:	2301      	moveq	r3, #1
 810ea44:	2300      	movne	r3, #0
 810ea46:	b2db      	uxtb	r3, r3
 810ea48:	2b00      	cmp	r3, #0
 810ea4a:	d015      	beq.n	810ea78 <initCortexM4+0x94>
 810ea4c:	4836      	ldr	r0, [pc, #216]	; (810eb28 <initCortexM4+0x144>)
 810ea4e:	f000 f9e3 	bl	810ee18 <__cxa_guard_acquire>
 810ea52:	4603      	mov	r3, r0
 810ea54:	2b00      	cmp	r3, #0
 810ea56:	bf14      	ite	ne
 810ea58:	2301      	movne	r3, #1
 810ea5a:	2300      	moveq	r3, #0
 810ea5c:	b2db      	uxtb	r3, r3
 810ea5e:	2b00      	cmp	r3, #0
 810ea60:	d00a      	beq.n	810ea78 <initCortexM4+0x94>
 810ea62:	4a32      	ldr	r2, [pc, #200]	; (810eb2c <initCortexM4+0x148>)
 810ea64:	4932      	ldr	r1, [pc, #200]	; (810eb30 <initCortexM4+0x14c>)
 810ea66:	4833      	ldr	r0, [pc, #204]	; (810eb34 <initCortexM4+0x150>)
 810ea68:	f7fc faae 	bl	810afc8 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>
 810ea6c:	482e      	ldr	r0, [pc, #184]	; (810eb28 <initCortexM4+0x144>)
 810ea6e:	f000 f9df 	bl	810ee30 <__cxa_guard_release>
 810ea72:	4831      	ldr	r0, [pc, #196]	; (810eb38 <initCortexM4+0x154>)
 810ea74:	f000 fcfe 	bl	810f474 <atexit>
	static IMUThread imu(&hi2c1);
 810ea78:	4b30      	ldr	r3, [pc, #192]	; (810eb3c <initCortexM4+0x158>)
 810ea7a:	781b      	ldrb	r3, [r3, #0]
 810ea7c:	f3bf 8f5b 	dmb	ish
 810ea80:	b2db      	uxtb	r3, r3
 810ea82:	f003 0301 	and.w	r3, r3, #1
 810ea86:	2b00      	cmp	r3, #0
 810ea88:	bf0c      	ite	eq
 810ea8a:	2301      	moveq	r3, #1
 810ea8c:	2300      	movne	r3, #0
 810ea8e:	b2db      	uxtb	r3, r3
 810ea90:	2b00      	cmp	r3, #0
 810ea92:	d014      	beq.n	810eabe <initCortexM4+0xda>
 810ea94:	4829      	ldr	r0, [pc, #164]	; (810eb3c <initCortexM4+0x158>)
 810ea96:	f000 f9bf 	bl	810ee18 <__cxa_guard_acquire>
 810ea9a:	4603      	mov	r3, r0
 810ea9c:	2b00      	cmp	r3, #0
 810ea9e:	bf14      	ite	ne
 810eaa0:	2301      	movne	r3, #1
 810eaa2:	2300      	moveq	r3, #0
 810eaa4:	b2db      	uxtb	r3, r3
 810eaa6:	2b00      	cmp	r3, #0
 810eaa8:	d009      	beq.n	810eabe <initCortexM4+0xda>
 810eaaa:	4925      	ldr	r1, [pc, #148]	; (810eb40 <initCortexM4+0x15c>)
 810eaac:	4825      	ldr	r0, [pc, #148]	; (810eb44 <initCortexM4+0x160>)
 810eaae:	f7ff ff17 	bl	810e8e0 <_ZN9IMUThreadC1EP19__I2C_HandleTypeDef>
 810eab2:	4822      	ldr	r0, [pc, #136]	; (810eb3c <initCortexM4+0x158>)
 810eab4:	f000 f9bc 	bl	810ee30 <__cxa_guard_release>
 810eab8:	4823      	ldr	r0, [pc, #140]	; (810eb48 <initCortexM4+0x164>)
 810eaba:	f000 fcdb 	bl	810f474 <atexit>
	static ADC24Thread scale(GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_11);
 810eabe:	4b23      	ldr	r3, [pc, #140]	; (810eb4c <initCortexM4+0x168>)
 810eac0:	781b      	ldrb	r3, [r3, #0]
 810eac2:	f3bf 8f5b 	dmb	ish
 810eac6:	b2db      	uxtb	r3, r3
 810eac8:	f003 0301 	and.w	r3, r3, #1
 810eacc:	2b00      	cmp	r3, #0
 810eace:	bf0c      	ite	eq
 810ead0:	2301      	moveq	r3, #1
 810ead2:	2300      	movne	r3, #0
 810ead4:	b2db      	uxtb	r3, r3
 810ead6:	2b00      	cmp	r3, #0
 810ead8:	d01a      	beq.n	810eb10 <initCortexM4+0x12c>
 810eada:	481c      	ldr	r0, [pc, #112]	; (810eb4c <initCortexM4+0x168>)
 810eadc:	f000 f99c 	bl	810ee18 <__cxa_guard_acquire>
 810eae0:	4603      	mov	r3, r0
 810eae2:	2b00      	cmp	r3, #0
 810eae4:	bf14      	ite	ne
 810eae6:	2301      	movne	r3, #1
 810eae8:	2300      	moveq	r3, #0
 810eaea:	b2db      	uxtb	r3, r3
 810eaec:	2b00      	cmp	r3, #0
 810eaee:	d00f      	beq.n	810eb10 <initCortexM4+0x12c>
 810eaf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810eaf4:	9300      	str	r3, [sp, #0]
 810eaf6:	4b16      	ldr	r3, [pc, #88]	; (810eb50 <initCortexM4+0x16c>)
 810eaf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810eafc:	4914      	ldr	r1, [pc, #80]	; (810eb50 <initCortexM4+0x16c>)
 810eafe:	4815      	ldr	r0, [pc, #84]	; (810eb54 <initCortexM4+0x170>)
 810eb00:	f7ff fbf8 	bl	810e2f4 <_ZN11ADC24ThreadC1EP12GPIO_TypeDefmS1_m>
 810eb04:	4811      	ldr	r0, [pc, #68]	; (810eb4c <initCortexM4+0x168>)
 810eb06:	f000 f993 	bl	810ee30 <__cxa_guard_release>
 810eb0a:	4813      	ldr	r0, [pc, #76]	; (810eb58 <initCortexM4+0x174>)
 810eb0c:	f000 fcb2 	bl	810f474 <atexit>
}
 810eb10:	bf00      	nop
 810eb12:	46bd      	mov	sp, r7
 810eb14:	bd80      	pop	{r7, pc}
 810eb16:	bf00      	nop
 810eb18:	100048bc 	.word	0x100048bc
 810eb1c:	10009a94 	.word	0x10009a94
 810eb20:	100048ac 	.word	0x100048ac
 810eb24:	0810e939 	.word	0x0810e939
 810eb28:	10004d24 	.word	0x10004d24
 810eb2c:	10004624 	.word	0x10004624
 810eb30:	10009df0 	.word	0x10009df0
 810eb34:	100048c0 	.word	0x100048c0
 810eb38:	0810e96d 	.word	0x0810e96d
 810eb3c:	10004d38 	.word	0x10004d38
 810eb40:	100099fc 	.word	0x100099fc
 810eb44:	10004d28 	.word	0x10004d28
 810eb48:	0810e9a1 	.word	0x0810e9a1
 810eb4c:	10004d4c 	.word	0x10004d4c
 810eb50:	58020400 	.word	0x58020400
 810eb54:	10004d3c 	.word	0x10004d3c
 810eb58:	0810e9d5 	.word	0x0810e9d5

0810eb5c <_Z41__static_initialization_and_destruction_0ii>:


static uint8_t storage1[256];
static uint8_t storage2[256];
BufferedIODriver telemetryDriver(storage1, storage2, 256);
NetworkBus network(&telemetryDriver);
 810eb5c:	b580      	push	{r7, lr}
 810eb5e:	b082      	sub	sp, #8
 810eb60:	af00      	add	r7, sp, #0
 810eb62:	6078      	str	r0, [r7, #4]
 810eb64:	6039      	str	r1, [r7, #0]
 810eb66:	687b      	ldr	r3, [r7, #4]
 810eb68:	2b01      	cmp	r3, #1
 810eb6a:	d10f      	bne.n	810eb8c <_Z41__static_initialization_and_destruction_0ii+0x30>
 810eb6c:	683b      	ldr	r3, [r7, #0]
 810eb6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810eb72:	4293      	cmp	r3, r2
 810eb74:	d10a      	bne.n	810eb8c <_Z41__static_initialization_and_destruction_0ii+0x30>
BufferedIODriver telemetryDriver(storage1, storage2, 256);
 810eb76:	f44f 7380 	mov.w	r3, #256	; 0x100
 810eb7a:	4a0d      	ldr	r2, [pc, #52]	; (810ebb0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 810eb7c:	490d      	ldr	r1, [pc, #52]	; (810ebb4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 810eb7e:	480e      	ldr	r0, [pc, #56]	; (810ebb8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 810eb80:	f7fd fb56 	bl	810c230 <_ZN16BufferedIODriverC1EPhS0_j>
NetworkBus network(&telemetryDriver);
 810eb84:	490c      	ldr	r1, [pc, #48]	; (810ebb8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 810eb86:	480d      	ldr	r0, [pc, #52]	; (810ebbc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 810eb88:	f7ff faf8 	bl	810e17c <_ZN10NetworkBusC1EP8IODriver>
 810eb8c:	687b      	ldr	r3, [r7, #4]
 810eb8e:	2b00      	cmp	r3, #0
 810eb90:	d10a      	bne.n	810eba8 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 810eb92:	683b      	ldr	r3, [r7, #0]
 810eb94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810eb98:	4293      	cmp	r3, r2
 810eb9a:	d105      	bne.n	810eba8 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 810eb9c:	4807      	ldr	r0, [pc, #28]	; (810ebbc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 810eb9e:	f7ff fb47 	bl	810e230 <_ZN10NetworkBusD1Ev>
BufferedIODriver telemetryDriver(storage1, storage2, 256);
 810eba2:	4805      	ldr	r0, [pc, #20]	; (810ebb8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 810eba4:	f7fd fb88 	bl	810c2b8 <_ZN16BufferedIODriverD1Ev>
NetworkBus network(&telemetryDriver);
 810eba8:	bf00      	nop
 810ebaa:	3708      	adds	r7, #8
 810ebac:	46bd      	mov	sp, r7
 810ebae:	bd80      	pop	{r7, pc}
 810ebb0:	10004e50 	.word	0x10004e50
 810ebb4:	10004d50 	.word	0x10004d50
 810ebb8:	10004f50 	.word	0x10004f50
 810ebbc:	10004f80 	.word	0x10004f80

0810ebc0 <_GLOBAL__sub_I_telemetryDriver>:
 810ebc0:	b580      	push	{r7, lr}
 810ebc2:	af00      	add	r7, sp, #0
 810ebc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810ebc8:	2001      	movs	r0, #1
 810ebca:	f7ff ffc7 	bl	810eb5c <_Z41__static_initialization_and_destruction_0ii>
 810ebce:	bd80      	pop	{r7, pc}

0810ebd0 <_GLOBAL__sub_D_telemetryDriver>:
 810ebd0:	b580      	push	{r7, lr}
 810ebd2:	af00      	add	r7, sp, #0
 810ebd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810ebd8:	2000      	movs	r0, #0
 810ebda:	f7ff ffbf 	bl	810eb5c <_Z41__static_initialization_and_destruction_0ii>
 810ebde:	bd80      	pop	{r7, pc}

0810ebe0 <_Z10__task_runPKv>:

#define DEFAULT_STACK_SIZE (256) // Danger zone: changing the stack size might create very nasty bugs

static char buffer[128];

void __task_run(const void* arg) {
 810ebe0:	b580      	push	{r7, lr}
 810ebe2:	b084      	sub	sp, #16
 810ebe4:	af00      	add	r7, sp, #0
 810ebe6:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 810ebe8:	687b      	ldr	r3, [r7, #4]
 810ebea:	60fb      	str	r3, [r7, #12]

	osDelay(100);
 810ebec:	2064      	movs	r0, #100	; 0x64
 810ebee:	f7f9 fe87 	bl	8108900 <osDelay>

	thread->init();
 810ebf2:	68fb      	ldr	r3, [r7, #12]
 810ebf4:	681b      	ldr	r3, [r3, #0]
 810ebf6:	681b      	ldr	r3, [r3, #0]
 810ebf8:	68f8      	ldr	r0, [r7, #12]
 810ebfa:	4798      	blx	r3

	while(true) {
		thread->loop();
 810ebfc:	68fb      	ldr	r3, [r7, #12]
 810ebfe:	681b      	ldr	r3, [r3, #0]
 810ec00:	3304      	adds	r3, #4
 810ec02:	681b      	ldr	r3, [r3, #0]
 810ec04:	68f8      	ldr	r0, [r7, #12]
 810ec06:	4798      	blx	r3
 810ec08:	e7f8      	b.n	810ebfc <_Z10__task_runPKv+0x1c>

0810ec0a <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 810ec0a:	b580      	push	{r7, lr}
 810ec0c:	b082      	sub	sp, #8
 810ec0e:	af00      	add	r7, sp, #0
 810ec10:	6078      	str	r0, [r7, #4]
 810ec12:	6039      	str	r1, [r7, #0]
 810ec14:	2200      	movs	r2, #0
 810ec16:	6839      	ldr	r1, [r7, #0]
 810ec18:	6878      	ldr	r0, [r7, #4]
 810ec1a:	f000 f805 	bl	810ec28 <_ZN6ThreadC1EPKc10osPriority>
	;
}
 810ec1e:	687b      	ldr	r3, [r7, #4]
 810ec20:	4618      	mov	r0, r3
 810ec22:	3708      	adds	r7, #8
 810ec24:	46bd      	mov	sp, r7
 810ec26:	bd80      	pop	{r7, pc}

0810ec28 <_ZN6ThreadC1EPKc10osPriority>:

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 810ec28:	b580      	push	{r7, lr}
 810ec2a:	b084      	sub	sp, #16
 810ec2c:	af00      	add	r7, sp, #0
 810ec2e:	60f8      	str	r0, [r7, #12]
 810ec30:	60b9      	str	r1, [r7, #8]
 810ec32:	4613      	mov	r3, r2
 810ec34:	80fb      	strh	r3, [r7, #6]
 810ec36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 810ec3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810ec3e:	68b9      	ldr	r1, [r7, #8]
 810ec40:	68f8      	ldr	r0, [r7, #12]
 810ec42:	f000 f805 	bl	810ec50 <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 810ec46:	68fb      	ldr	r3, [r7, #12]
 810ec48:	4618      	mov	r0, r3
 810ec4a:	3710      	adds	r7, #16
 810ec4c:	46bd      	mov	sp, r7
 810ec4e:	bd80      	pop	{r7, pc}

0810ec50 <_ZN6ThreadC1EPKc10osPrioritym>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 810ec50:	b580      	push	{r7, lr}
 810ec52:	b08c      	sub	sp, #48	; 0x30
 810ec54:	af00      	add	r7, sp, #0
 810ec56:	60f8      	str	r0, [r7, #12]
 810ec58:	60b9      	str	r1, [r7, #8]
 810ec5a:	603b      	str	r3, [r7, #0]
 810ec5c:	4613      	mov	r3, r2
 810ec5e:	80fb      	strh	r3, [r7, #6]
 810ec60:	4a12      	ldr	r2, [pc, #72]	; (810ecac <_ZN6ThreadC1EPKc10osPrioritym+0x5c>)
 810ec62:	68fb      	ldr	r3, [r7, #12]
 810ec64:	601a      	str	r2, [r3, #0]
	osThreadDef(T, __task_run, priority, 0, stackSize);
 810ec66:	f107 0314 	add.w	r3, r7, #20
 810ec6a:	2200      	movs	r2, #0
 810ec6c:	601a      	str	r2, [r3, #0]
 810ec6e:	605a      	str	r2, [r3, #4]
 810ec70:	609a      	str	r2, [r3, #8]
 810ec72:	60da      	str	r2, [r3, #12]
 810ec74:	611a      	str	r2, [r3, #16]
 810ec76:	615a      	str	r2, [r3, #20]
 810ec78:	619a      	str	r2, [r3, #24]
 810ec7a:	4b0d      	ldr	r3, [pc, #52]	; (810ecb0 <_ZN6ThreadC1EPKc10osPrioritym+0x60>)
 810ec7c:	617b      	str	r3, [r7, #20]
 810ec7e:	4b0d      	ldr	r3, [pc, #52]	; (810ecb4 <_ZN6ThreadC1EPKc10osPrioritym+0x64>)
 810ec80:	61bb      	str	r3, [r7, #24]
 810ec82:	88fb      	ldrh	r3, [r7, #6]
 810ec84:	83bb      	strh	r3, [r7, #28]
 810ec86:	683b      	ldr	r3, [r7, #0]
 810ec88:	627b      	str	r3, [r7, #36]	; 0x24
	this->handle = osThreadCreate(osThread(T), this);
 810ec8a:	f107 0314 	add.w	r3, r7, #20
 810ec8e:	68f9      	ldr	r1, [r7, #12]
 810ec90:	4618      	mov	r0, r3
 810ec92:	f7f9 fde9 	bl	8108868 <osThreadCreate>
 810ec96:	4602      	mov	r2, r0
 810ec98:	68fb      	ldr	r3, [r7, #12]
 810ec9a:	605a      	str	r2, [r3, #4]
	this->name = name;
 810ec9c:	68fb      	ldr	r3, [r7, #12]
 810ec9e:	68ba      	ldr	r2, [r7, #8]
 810eca0:	609a      	str	r2, [r3, #8]
}
 810eca2:	68fb      	ldr	r3, [r7, #12]
 810eca4:	4618      	mov	r0, r3
 810eca6:	3730      	adds	r7, #48	; 0x30
 810eca8:	46bd      	mov	sp, r7
 810ecaa:	bd80      	pop	{r7, pc}
 810ecac:	081130cc 	.word	0x081130cc
 810ecb0:	08112c64 	.word	0x08112c64
 810ecb4:	0810ebe1 	.word	0x0810ebe1

0810ecb8 <_ZN6Thread7printlnEPKcz>:

void Thread::println(const char* format, ...) {
 810ecb8:	b40e      	push	{r1, r2, r3}
 810ecba:	b580      	push	{r7, lr}
 810ecbc:	b085      	sub	sp, #20
 810ecbe:	af00      	add	r7, sp, #0
 810ecc0:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 810ecc2:	f107 0320 	add.w	r3, r7, #32
 810ecc6:	60fb      	str	r3, [r7, #12]

	sprintf(buffer, "[%s] ", name);
 810ecc8:	687b      	ldr	r3, [r7, #4]
 810ecca:	689b      	ldr	r3, [r3, #8]
 810eccc:	461a      	mov	r2, r3
 810ecce:	4913      	ldr	r1, [pc, #76]	; (810ed1c <_ZN6Thread7printlnEPKcz+0x64>)
 810ecd0:	4813      	ldr	r0, [pc, #76]	; (810ed20 <_ZN6Thread7printlnEPKcz+0x68>)
 810ecd2:	f001 f955 	bl	810ff80 <siprintf>
	vsprintf(buffer + strlen(buffer), format, args);
 810ecd6:	4812      	ldr	r0, [pc, #72]	; (810ed20 <_ZN6Thread7printlnEPKcz+0x68>)
 810ecd8:	f7f1 fb0c 	bl	81002f4 <strlen>
 810ecdc:	4603      	mov	r3, r0
 810ecde:	4a10      	ldr	r2, [pc, #64]	; (810ed20 <_ZN6Thread7printlnEPKcz+0x68>)
 810ece0:	4413      	add	r3, r2
 810ece2:	68fa      	ldr	r2, [r7, #12]
 810ece4:	69f9      	ldr	r1, [r7, #28]
 810ece6:	4618      	mov	r0, r3
 810ece8:	f001 fa0e 	bl	8110108 <vsiprintf>
	strcat(buffer, "\r\n");
 810ecec:	480c      	ldr	r0, [pc, #48]	; (810ed20 <_ZN6Thread7printlnEPKcz+0x68>)
 810ecee:	f7f1 fb01 	bl	81002f4 <strlen>
 810ecf2:	4603      	mov	r3, r0
 810ecf4:	461a      	mov	r2, r3
 810ecf6:	4b0a      	ldr	r3, [pc, #40]	; (810ed20 <_ZN6Thread7printlnEPKcz+0x68>)
 810ecf8:	4413      	add	r3, r2
 810ecfa:	4a0a      	ldr	r2, [pc, #40]	; (810ed24 <_ZN6Thread7printlnEPKcz+0x6c>)
 810ecfc:	8811      	ldrh	r1, [r2, #0]
 810ecfe:	7892      	ldrb	r2, [r2, #2]
 810ed00:	8019      	strh	r1, [r3, #0]
 810ed02:	709a      	strb	r2, [r3, #2]

	console.print(buffer);
 810ed04:	4906      	ldr	r1, [pc, #24]	; (810ed20 <_ZN6Thread7printlnEPKcz+0x68>)
 810ed06:	4808      	ldr	r0, [pc, #32]	; (810ed28 <_ZN6Thread7printlnEPKcz+0x70>)
 810ed08:	f7fc f8d7 	bl	810aeba <_ZN7Console5printEPKc>

	va_end(args);
}
 810ed0c:	bf00      	nop
 810ed0e:	3714      	adds	r7, #20
 810ed10:	46bd      	mov	sp, r7
 810ed12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810ed16:	b003      	add	sp, #12
 810ed18:	4770      	bx	lr
 810ed1a:	bf00      	nop
 810ed1c:	08112c68 	.word	0x08112c68
 810ed20:	10009894 	.word	0x10009894
 810ed24:	08112c70 	.word	0x08112c70
 810ed28:	100041d8 	.word	0x100041d8

0810ed2c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 810ed2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 810ed2e:	2400      	movs	r4, #0
 810ed30:	2310      	movs	r3, #16
 810ed32:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810ed36:	6803      	ldr	r3, [r0, #0]
 810ed38:	9400      	str	r4, [sp, #0]
 810ed3a:	699e      	ldr	r6, [r3, #24]
 810ed3c:	f88d 4004 	strb.w	r4, [sp, #4]
 810ed40:	4615      	mov	r5, r2
 810ed42:	466b      	mov	r3, sp
 810ed44:	6812      	ldr	r2, [r2, #0]
 810ed46:	47b0      	blx	r6
 810ed48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 810ed4c:	f003 0306 	and.w	r3, r3, #6
 810ed50:	2b06      	cmp	r3, #6
 810ed52:	bf03      	ittte	eq
 810ed54:	9b00      	ldreq	r3, [sp, #0]
 810ed56:	602b      	streq	r3, [r5, #0]
 810ed58:	2001      	moveq	r0, #1
 810ed5a:	4620      	movne	r0, r4
 810ed5c:	b004      	add	sp, #16
 810ed5e:	bd70      	pop	{r4, r5, r6, pc}

0810ed60 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 810ed60:	9800      	ldr	r0, [sp, #0]
 810ed62:	4290      	cmp	r0, r2
 810ed64:	bf14      	ite	ne
 810ed66:	2001      	movne	r0, #1
 810ed68:	2006      	moveq	r0, #6
 810ed6a:	4770      	bx	lr

0810ed6c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 810ed6c:	b510      	push	{r4, lr}
 810ed6e:	4b03      	ldr	r3, [pc, #12]	; (810ed7c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 810ed70:	6003      	str	r3, [r0, #0]
 810ed72:	4604      	mov	r4, r0
 810ed74:	f000 f917 	bl	810efa6 <_ZNSt9type_infoD1Ev>
 810ed78:	4620      	mov	r0, r4
 810ed7a:	bd10      	pop	{r4, pc}
 810ed7c:	0811310c 	.word	0x0811310c

0810ed80 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 810ed80:	b510      	push	{r4, lr}
 810ed82:	4604      	mov	r4, r0
 810ed84:	f7ff fff2 	bl	810ed6c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810ed88:	4620      	mov	r0, r4
 810ed8a:	2108      	movs	r1, #8
 810ed8c:	f000 f842 	bl	810ee14 <_ZdlPvj>
 810ed90:	4620      	mov	r0, r4
 810ed92:	bd10      	pop	{r4, pc}

0810ed94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 810ed94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ed98:	461f      	mov	r7, r3
 810ed9a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 810ed9e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 810eda2:	4598      	cmp	r8, r3
 810eda4:	4606      	mov	r6, r0
 810eda6:	4615      	mov	r5, r2
 810eda8:	d107      	bne.n	810edba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 810edaa:	9907      	ldr	r1, [sp, #28]
 810edac:	f000 f8fe 	bl	810efac <_ZNKSt9type_infoeqERKS_>
 810edb0:	b118      	cbz	r0, 810edba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 810edb2:	7165      	strb	r5, [r4, #5]
 810edb4:	2000      	movs	r0, #0
 810edb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810edba:	4639      	mov	r1, r7
 810edbc:	4630      	mov	r0, r6
 810edbe:	f000 f8f5 	bl	810efac <_ZNKSt9type_infoeqERKS_>
 810edc2:	2800      	cmp	r0, #0
 810edc4:	d0f6      	beq.n	810edb4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 810edc6:	2301      	movs	r3, #1
 810edc8:	f8c4 8000 	str.w	r8, [r4]
 810edcc:	7125      	strb	r5, [r4, #4]
 810edce:	71a3      	strb	r3, [r4, #6]
 810edd0:	e7f0      	b.n	810edb4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0810edd2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 810edd2:	b538      	push	{r3, r4, r5, lr}
 810edd4:	4615      	mov	r5, r2
 810edd6:	461c      	mov	r4, r3
 810edd8:	f000 f8e8 	bl	810efac <_ZNKSt9type_infoeqERKS_>
 810eddc:	b120      	cbz	r0, 810ede8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 810edde:	2308      	movs	r3, #8
 810ede0:	60e3      	str	r3, [r4, #12]
 810ede2:	2306      	movs	r3, #6
 810ede4:	6025      	str	r5, [r4, #0]
 810ede6:	7123      	strb	r3, [r4, #4]
 810ede8:	bd38      	pop	{r3, r4, r5, pc}

0810edea <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 810edea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810edec:	4605      	mov	r5, r0
 810edee:	460c      	mov	r4, r1
 810edf0:	9201      	str	r2, [sp, #4]
 810edf2:	461e      	mov	r6, r3
 810edf4:	f000 f8da 	bl	810efac <_ZNKSt9type_infoeqERKS_>
 810edf8:	b950      	cbnz	r0, 810ee10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 810edfa:	2e03      	cmp	r6, #3
 810edfc:	d808      	bhi.n	810ee10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 810edfe:	6823      	ldr	r3, [r4, #0]
 810ee00:	9a01      	ldr	r2, [sp, #4]
 810ee02:	695b      	ldr	r3, [r3, #20]
 810ee04:	4629      	mov	r1, r5
 810ee06:	4620      	mov	r0, r4
 810ee08:	b002      	add	sp, #8
 810ee0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 810ee0e:	4718      	bx	r3
 810ee10:	b002      	add	sp, #8
 810ee12:	bd70      	pop	{r4, r5, r6, pc}

0810ee14 <_ZdlPvj>:
 810ee14:	f7fc bcd4 	b.w	810b7c0 <_ZdlPv>

0810ee18 <__cxa_guard_acquire>:
 810ee18:	6803      	ldr	r3, [r0, #0]
 810ee1a:	07db      	lsls	r3, r3, #31
 810ee1c:	d406      	bmi.n	810ee2c <__cxa_guard_acquire+0x14>
 810ee1e:	7843      	ldrb	r3, [r0, #1]
 810ee20:	b103      	cbz	r3, 810ee24 <__cxa_guard_acquire+0xc>
 810ee22:	deff      	udf	#255	; 0xff
 810ee24:	2301      	movs	r3, #1
 810ee26:	7043      	strb	r3, [r0, #1]
 810ee28:	4618      	mov	r0, r3
 810ee2a:	4770      	bx	lr
 810ee2c:	2000      	movs	r0, #0
 810ee2e:	4770      	bx	lr

0810ee30 <__cxa_guard_release>:
 810ee30:	2301      	movs	r3, #1
 810ee32:	6003      	str	r3, [r0, #0]
 810ee34:	4770      	bx	lr
	...

0810ee38 <_ZSt11_Hash_bytesPKvjj>:
 810ee38:	4b18      	ldr	r3, [pc, #96]	; (810ee9c <_ZSt11_Hash_bytesPKvjj+0x64>)
 810ee3a:	b570      	push	{r4, r5, r6, lr}
 810ee3c:	404a      	eors	r2, r1
 810ee3e:	460d      	mov	r5, r1
 810ee40:	1846      	adds	r6, r0, r1
 810ee42:	2d03      	cmp	r5, #3
 810ee44:	eba6 0405 	sub.w	r4, r6, r5
 810ee48:	d908      	bls.n	810ee5c <_ZSt11_Hash_bytesPKvjj+0x24>
 810ee4a:	6824      	ldr	r4, [r4, #0]
 810ee4c:	435c      	muls	r4, r3
 810ee4e:	ea84 6414 	eor.w	r4, r4, r4, lsr #24
 810ee52:	435a      	muls	r2, r3
 810ee54:	435c      	muls	r4, r3
 810ee56:	4062      	eors	r2, r4
 810ee58:	3d04      	subs	r5, #4
 810ee5a:	e7f2      	b.n	810ee42 <_ZSt11_Hash_bytesPKvjj+0xa>
 810ee5c:	088d      	lsrs	r5, r1, #2
 810ee5e:	f06f 0403 	mvn.w	r4, #3
 810ee62:	fb04 1105 	mla	r1, r4, r5, r1
 810ee66:	2902      	cmp	r1, #2
 810ee68:	eb00 0485 	add.w	r4, r0, r5, lsl #2
 810ee6c:	d011      	beq.n	810ee92 <_ZSt11_Hash_bytesPKvjj+0x5a>
 810ee6e:	2903      	cmp	r1, #3
 810ee70:	d00c      	beq.n	810ee8c <_ZSt11_Hash_bytesPKvjj+0x54>
 810ee72:	2901      	cmp	r1, #1
 810ee74:	d103      	bne.n	810ee7e <_ZSt11_Hash_bytesPKvjj+0x46>
 810ee76:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
 810ee7a:	4042      	eors	r2, r0
 810ee7c:	435a      	muls	r2, r3
 810ee7e:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 810ee82:	fb03 f002 	mul.w	r0, r3, r2
 810ee86:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 810ee8a:	bd70      	pop	{r4, r5, r6, pc}
 810ee8c:	78a1      	ldrb	r1, [r4, #2]
 810ee8e:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 810ee92:	7861      	ldrb	r1, [r4, #1]
 810ee94:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 810ee98:	e7ed      	b.n	810ee76 <_ZSt11_Hash_bytesPKvjj+0x3e>
 810ee9a:	bf00      	nop
 810ee9c:	5bd1e995 	.word	0x5bd1e995

0810eea0 <__cxa_pure_virtual>:
 810eea0:	b508      	push	{r3, lr}
 810eea2:	f000 fadb 	bl	810f45c <_ZSt9terminatev>
	...

0810eea8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 810eea8:	b510      	push	{r4, lr}
 810eeaa:	4b03      	ldr	r3, [pc, #12]	; (810eeb8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 810eeac:	6003      	str	r3, [r0, #0]
 810eeae:	4604      	mov	r4, r0
 810eeb0:	f7ff ff5c 	bl	810ed6c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810eeb4:	4620      	mov	r0, r4
 810eeb6:	bd10      	pop	{r4, pc}
 810eeb8:	0811316c 	.word	0x0811316c

0810eebc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 810eebc:	b510      	push	{r4, lr}
 810eebe:	4604      	mov	r4, r0
 810eec0:	f7ff fff2 	bl	810eea8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 810eec4:	4620      	mov	r0, r4
 810eec6:	210c      	movs	r1, #12
 810eec8:	f7ff ffa4 	bl	810ee14 <_ZdlPvj>
 810eecc:	4620      	mov	r0, r4
 810eece:	bd10      	pop	{r4, pc}

0810eed0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 810eed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810eed2:	9f08      	ldr	r7, [sp, #32]
 810eed4:	4297      	cmp	r7, r2
 810eed6:	4605      	mov	r5, r0
 810eed8:	460e      	mov	r6, r1
 810eeda:	4614      	mov	r4, r2
 810eedc:	d00a      	beq.n	810eef4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 810eede:	68a8      	ldr	r0, [r5, #8]
 810eee0:	6802      	ldr	r2, [r0, #0]
 810eee2:	9708      	str	r7, [sp, #32]
 810eee4:	6a15      	ldr	r5, [r2, #32]
 810eee6:	4631      	mov	r1, r6
 810eee8:	4622      	mov	r2, r4
 810eeea:	46ac      	mov	ip, r5
 810eeec:	b003      	add	sp, #12
 810eeee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 810eef2:	4760      	bx	ip
 810eef4:	4619      	mov	r1, r3
 810eef6:	9301      	str	r3, [sp, #4]
 810eef8:	f000 f858 	bl	810efac <_ZNKSt9type_infoeqERKS_>
 810eefc:	9b01      	ldr	r3, [sp, #4]
 810eefe:	2800      	cmp	r0, #0
 810ef00:	d0ed      	beq.n	810eede <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 810ef02:	2006      	movs	r0, #6
 810ef04:	b003      	add	sp, #12
 810ef06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810ef08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 810ef08:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ef0c:	460d      	mov	r5, r1
 810ef0e:	4619      	mov	r1, r3
 810ef10:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 810ef14:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 810ef18:	4681      	mov	r9, r0
 810ef1a:	4617      	mov	r7, r2
 810ef1c:	4698      	mov	r8, r3
 810ef1e:	f000 f845 	bl	810efac <_ZNKSt9type_infoeqERKS_>
 810ef22:	b190      	cbz	r0, 810ef4a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 810ef24:	2d00      	cmp	r5, #0
 810ef26:	6034      	str	r4, [r6, #0]
 810ef28:	7137      	strb	r7, [r6, #4]
 810ef2a:	db09      	blt.n	810ef40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 810ef2c:	1961      	adds	r1, r4, r5
 810ef2e:	458a      	cmp	sl, r1
 810ef30:	bf0c      	ite	eq
 810ef32:	2106      	moveq	r1, #6
 810ef34:	2101      	movne	r1, #1
 810ef36:	71b1      	strb	r1, [r6, #6]
 810ef38:	2000      	movs	r0, #0
 810ef3a:	b001      	add	sp, #4
 810ef3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ef40:	3502      	adds	r5, #2
 810ef42:	d1f9      	bne.n	810ef38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810ef44:	2301      	movs	r3, #1
 810ef46:	71b3      	strb	r3, [r6, #6]
 810ef48:	e7f6      	b.n	810ef38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810ef4a:	4554      	cmp	r4, sl
 810ef4c:	d106      	bne.n	810ef5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 810ef4e:	4659      	mov	r1, fp
 810ef50:	4648      	mov	r0, r9
 810ef52:	f000 f82b 	bl	810efac <_ZNKSt9type_infoeqERKS_>
 810ef56:	b108      	cbz	r0, 810ef5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 810ef58:	7177      	strb	r7, [r6, #5]
 810ef5a:	e7ed      	b.n	810ef38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810ef5c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 810ef60:	6803      	ldr	r3, [r0, #0]
 810ef62:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 810ef66:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 810ef6a:	69dc      	ldr	r4, [r3, #28]
 810ef6c:	463a      	mov	r2, r7
 810ef6e:	4643      	mov	r3, r8
 810ef70:	4629      	mov	r1, r5
 810ef72:	46a4      	mov	ip, r4
 810ef74:	b001      	add	sp, #4
 810ef76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ef7a:	4760      	bx	ip

0810ef7c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 810ef7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ef80:	4607      	mov	r7, r0
 810ef82:	460c      	mov	r4, r1
 810ef84:	4615      	mov	r5, r2
 810ef86:	461e      	mov	r6, r3
 810ef88:	f7ff ff23 	bl	810edd2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 810ef8c:	b948      	cbnz	r0, 810efa2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 810ef8e:	68b8      	ldr	r0, [r7, #8]
 810ef90:	6803      	ldr	r3, [r0, #0]
 810ef92:	699f      	ldr	r7, [r3, #24]
 810ef94:	462a      	mov	r2, r5
 810ef96:	4633      	mov	r3, r6
 810ef98:	4621      	mov	r1, r4
 810ef9a:	46bc      	mov	ip, r7
 810ef9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810efa0:	4760      	bx	ip
 810efa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810efa6 <_ZNSt9type_infoD1Ev>:
 810efa6:	4770      	bx	lr

0810efa8 <_ZNKSt9type_info14__is_pointer_pEv>:
 810efa8:	2000      	movs	r0, #0
 810efaa:	4770      	bx	lr

0810efac <_ZNKSt9type_infoeqERKS_>:
 810efac:	4281      	cmp	r1, r0
 810efae:	b508      	push	{r3, lr}
 810efb0:	d00e      	beq.n	810efd0 <_ZNKSt9type_infoeqERKS_+0x24>
 810efb2:	6840      	ldr	r0, [r0, #4]
 810efb4:	7803      	ldrb	r3, [r0, #0]
 810efb6:	2b2a      	cmp	r3, #42	; 0x2a
 810efb8:	d00c      	beq.n	810efd4 <_ZNKSt9type_infoeqERKS_+0x28>
 810efba:	6849      	ldr	r1, [r1, #4]
 810efbc:	780b      	ldrb	r3, [r1, #0]
 810efbe:	2b2a      	cmp	r3, #42	; 0x2a
 810efc0:	bf08      	it	eq
 810efc2:	3101      	addeq	r1, #1
 810efc4:	f7f1 f98c 	bl	81002e0 <strcmp>
 810efc8:	fab0 f080 	clz	r0, r0
 810efcc:	0940      	lsrs	r0, r0, #5
 810efce:	bd08      	pop	{r3, pc}
 810efd0:	2001      	movs	r0, #1
 810efd2:	e7fc      	b.n	810efce <_ZNKSt9type_infoeqERKS_+0x22>
 810efd4:	2000      	movs	r0, #0
 810efd6:	e7fa      	b.n	810efce <_ZNKSt9type_infoeqERKS_+0x22>

0810efd8 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 810efd8:	b510      	push	{r4, lr}
 810efda:	4b03      	ldr	r3, [pc, #12]	; (810efe8 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 810efdc:	6003      	str	r3, [r0, #0]
 810efde:	4604      	mov	r4, r0
 810efe0:	f7ff fec4 	bl	810ed6c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810efe4:	4620      	mov	r0, r4
 810efe6:	bd10      	pop	{r4, pc}
 810efe8:	081131e4 	.word	0x081131e4

0810efec <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 810efec:	b510      	push	{r4, lr}
 810efee:	4604      	mov	r4, r0
 810eff0:	f7ff fff2 	bl	810efd8 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 810eff4:	4620      	mov	r0, r4
 810eff6:	2118      	movs	r1, #24
 810eff8:	f7ff ff0c 	bl	810ee14 <_ZdlPvj>
 810effc:	4620      	mov	r0, r4
 810effe:	bd10      	pop	{r4, pc}

0810f000 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 810f000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f004:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 810f008:	454a      	cmp	r2, r9
 810f00a:	4604      	mov	r4, r0
 810f00c:	460f      	mov	r7, r1
 810f00e:	4616      	mov	r6, r2
 810f010:	469a      	mov	sl, r3
 810f012:	d024      	beq.n	810f05e <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 810f014:	f8d4 800c 	ldr.w	r8, [r4, #12]
 810f018:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 810f01c:	f1b8 0f00 	cmp.w	r8, #0
 810f020:	d028      	beq.n	810f074 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
 810f022:	68e5      	ldr	r5, [r4, #12]
 810f024:	07aa      	lsls	r2, r5, #30
 810f026:	d521      	bpl.n	810f06c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 810f028:	122a      	asrs	r2, r5, #8
 810f02a:	f015 0501 	ands.w	r5, r5, #1
 810f02e:	d003      	beq.n	810f038 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
 810f030:	1cfb      	adds	r3, r7, #3
 810f032:	d01b      	beq.n	810f06c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 810f034:	6833      	ldr	r3, [r6, #0]
 810f036:	589a      	ldr	r2, [r3, r2]
 810f038:	68a0      	ldr	r0, [r4, #8]
 810f03a:	6803      	ldr	r3, [r0, #0]
 810f03c:	f8cd 9000 	str.w	r9, [sp]
 810f040:	f8d3 b020 	ldr.w	fp, [r3, #32]
 810f044:	4432      	add	r2, r6
 810f046:	4653      	mov	r3, sl
 810f048:	4639      	mov	r1, r7
 810f04a:	47d8      	blx	fp
 810f04c:	2803      	cmp	r0, #3
 810f04e:	d90d      	bls.n	810f06c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 810f050:	b115      	cbz	r5, 810f058 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 810f052:	f040 0001 	orr.w	r0, r0, #1
 810f056:	b2c0      	uxtb	r0, r0
 810f058:	b003      	add	sp, #12
 810f05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f05e:	4619      	mov	r1, r3
 810f060:	f7ff ffa4 	bl	810efac <_ZNKSt9type_infoeqERKS_>
 810f064:	2800      	cmp	r0, #0
 810f066:	d0d5      	beq.n	810f014 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 810f068:	2006      	movs	r0, #6
 810f06a:	e7f5      	b.n	810f058 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 810f06c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 810f070:	3c08      	subs	r4, #8
 810f072:	e7d3      	b.n	810f01c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 810f074:	2001      	movs	r0, #1
 810f076:	e7ef      	b.n	810f058 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

0810f078 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 810f078:	b4f0      	push	{r4, r5, r6, r7}
 810f07a:	1e0c      	subs	r4, r1, #0
 810f07c:	9e04      	ldr	r6, [sp, #16]
 810f07e:	db06      	blt.n	810f08e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 810f080:	4414      	add	r4, r2
 810f082:	42a6      	cmp	r6, r4
 810f084:	bf14      	ite	ne
 810f086:	2001      	movne	r0, #1
 810f088:	2006      	moveq	r0, #6
 810f08a:	bcf0      	pop	{r4, r5, r6, r7}
 810f08c:	4770      	bx	lr
 810f08e:	3402      	adds	r4, #2
 810f090:	d004      	beq.n	810f09c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x24>
 810f092:	6804      	ldr	r4, [r0, #0]
 810f094:	6a24      	ldr	r4, [r4, #32]
 810f096:	46a4      	mov	ip, r4
 810f098:	bcf0      	pop	{r4, r5, r6, r7}
 810f09a:	4760      	bx	ip
 810f09c:	2001      	movs	r0, #1
 810f09e:	e7f4      	b.n	810f08a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

0810f0a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 810f0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f0a4:	b091      	sub	sp, #68	; 0x44
 810f0a6:	469a      	mov	sl, r3
 810f0a8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 810f0aa:	9206      	str	r2, [sp, #24]
 810f0ac:	68a3      	ldr	r3, [r4, #8]
 810f0ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 810f0b0:	4688      	mov	r8, r1
 810f0b2:	06d9      	lsls	r1, r3, #27
 810f0b4:	bf44      	itt	mi
 810f0b6:	6883      	ldrmi	r3, [r0, #8]
 810f0b8:	60a3      	strmi	r3, [r4, #8]
 810f0ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810f0bc:	4293      	cmp	r3, r2
 810f0be:	4681      	mov	r9, r0
 810f0c0:	d107      	bne.n	810f0d2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 810f0c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 810f0c4:	f7ff ff72 	bl	810efac <_ZNKSt9type_infoeqERKS_>
 810f0c8:	b118      	cbz	r0, 810f0d2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 810f0ca:	9b06      	ldr	r3, [sp, #24]
 810f0cc:	7163      	strb	r3, [r4, #5]
 810f0ce:	2700      	movs	r7, #0
 810f0d0:	e082      	b.n	810f1d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 810f0d2:	4651      	mov	r1, sl
 810f0d4:	4648      	mov	r0, r9
 810f0d6:	f7ff ff69 	bl	810efac <_ZNKSt9type_infoeqERKS_>
 810f0da:	b1c0      	cbz	r0, 810f10e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 810f0dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810f0de:	6023      	str	r3, [r4, #0]
 810f0e0:	f1b8 0f00 	cmp.w	r8, #0
 810f0e4:	9b06      	ldr	r3, [sp, #24]
 810f0e6:	7123      	strb	r3, [r4, #4]
 810f0e8:	db0b      	blt.n	810f102 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x62>
 810f0ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810f0ec:	4498      	add	r8, r3
 810f0ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810f0f0:	4543      	cmp	r3, r8
 810f0f2:	bf0c      	ite	eq
 810f0f4:	f04f 0806 	moveq.w	r8, #6
 810f0f8:	f04f 0801 	movne.w	r8, #1
 810f0fc:	f884 8006 	strb.w	r8, [r4, #6]
 810f100:	e7e5      	b.n	810f0ce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 810f102:	f118 0f02 	cmn.w	r8, #2
 810f106:	d1e2      	bne.n	810f0ce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 810f108:	2301      	movs	r3, #1
 810f10a:	71a3      	strb	r3, [r4, #6]
 810f10c:	e7df      	b.n	810f0ce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 810f10e:	f1b8 0f00 	cmp.w	r8, #0
 810f112:	bfa9      	itett	ge
 810f114:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 810f116:	9007      	strlt	r0, [sp, #28]
 810f118:	eba3 0308 	subge.w	r3, r3, r8
 810f11c:	9307      	strge	r3, [sp, #28]
 810f11e:	2700      	movs	r7, #0
 810f120:	2302      	movs	r3, #2
 810f122:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 810f126:	2301      	movs	r3, #1
 810f128:	9308      	str	r3, [sp, #32]
 810f12a:	9b06      	ldr	r3, [sp, #24]
 810f12c:	f043 0301 	orr.w	r3, r3, #1
 810f130:	930b      	str	r3, [sp, #44]	; 0x2c
 810f132:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 810f136:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
 810f13a:	9305      	str	r3, [sp, #20]
 810f13c:	f1bb 0f00 	cmp.w	fp, #0
 810f140:	f000 80d7 	beq.w	810f2f2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x252>
 810f144:	2300      	movs	r3, #0
 810f146:	930d      	str	r3, [sp, #52]	; 0x34
 810f148:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 810f14c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 810f150:	9b05      	ldr	r3, [sp, #20]
 810f152:	68a5      	ldr	r5, [r4, #8]
 810f154:	68db      	ldr	r3, [r3, #12]
 810f156:	950f      	str	r5, [sp, #60]	; 0x3c
 810f158:	07da      	lsls	r2, r3, #31
 810f15a:	bf43      	ittte	mi
 810f15c:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 810f15e:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 810f160:	6800      	ldrmi	r0, [r0, #0]
 810f162:	9a06      	ldrpl	r2, [sp, #24]
 810f164:	ea4f 2123 	mov.w	r1, r3, asr #8
 810f168:	bf48      	it	mi
 810f16a:	5841      	ldrmi	r1, [r0, r1]
 810f16c:	981a      	ldr	r0, [sp, #104]	; 0x68
 810f16e:	4401      	add	r1, r0
 810f170:	9807      	ldr	r0, [sp, #28]
 810f172:	b138      	cbz	r0, 810f184 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe4>
 810f174:	4288      	cmp	r0, r1
 810f176:	9e08      	ldr	r6, [sp, #32]
 810f178:	bf2c      	ite	cs
 810f17a:	2000      	movcs	r0, #0
 810f17c:	2001      	movcc	r0, #1
 810f17e:	42b0      	cmp	r0, r6
 810f180:	f000 80b3 	beq.w	810f2ea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24a>
 810f184:	079b      	lsls	r3, r3, #30
 810f186:	d407      	bmi.n	810f198 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 810f188:	f118 0f02 	cmn.w	r8, #2
 810f18c:	d102      	bne.n	810f194 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf4>
 810f18e:	07ae      	lsls	r6, r5, #30
 810f190:	f000 80ad 	beq.w	810f2ee <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24e>
 810f194:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 810f198:	9b05      	ldr	r3, [sp, #20]
 810f19a:	6898      	ldr	r0, [r3, #8]
 810f19c:	ad0d      	add	r5, sp, #52	; 0x34
 810f19e:	6803      	ldr	r3, [r0, #0]
 810f1a0:	9503      	str	r5, [sp, #12]
 810f1a2:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 810f1a4:	9502      	str	r5, [sp, #8]
 810f1a6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 810f1a8:	e9cd 1500 	strd	r1, r5, [sp]
 810f1ac:	4641      	mov	r1, r8
 810f1ae:	69dd      	ldr	r5, [r3, #28]
 810f1b0:	4653      	mov	r3, sl
 810f1b2:	47a8      	blx	r5
 810f1b4:	7963      	ldrb	r3, [r4, #5]
 810f1b6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 810f1ba:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 810f1be:	990d      	ldr	r1, [sp, #52]	; 0x34
 810f1c0:	4313      	orrs	r3, r2
 810f1c2:	2d06      	cmp	r5, #6
 810f1c4:	7163      	strb	r3, [r4, #5]
 810f1c6:	d001      	beq.n	810f1cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12c>
 810f1c8:	2d02      	cmp	r5, #2
 810f1ca:	d109      	bne.n	810f1e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 810f1cc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 810f1d0:	6021      	str	r1, [r4, #0]
 810f1d2:	7123      	strb	r3, [r4, #4]
 810f1d4:	71a5      	strb	r5, [r4, #6]
 810f1d6:	4607      	mov	r7, r0
 810f1d8:	4638      	mov	r0, r7
 810f1da:	b011      	add	sp, #68	; 0x44
 810f1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f1e0:	6822      	ldr	r2, [r4, #0]
 810f1e2:	b9a7      	cbnz	r7, 810f20e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 810f1e4:	b9aa      	cbnz	r2, 810f212 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x172>
 810f1e6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 810f1ea:	6021      	str	r1, [r4, #0]
 810f1ec:	7122      	strb	r2, [r4, #4]
 810f1ee:	b121      	cbz	r1, 810f1fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 810f1f0:	b11b      	cbz	r3, 810f1fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 810f1f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 810f1f6:	07dd      	lsls	r5, r3, #31
 810f1f8:	d5ed      	bpl.n	810f1d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 810f1fa:	7963      	ldrb	r3, [r4, #5]
 810f1fc:	2b04      	cmp	r3, #4
 810f1fe:	d0ea      	beq.n	810f1d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 810f200:	9b05      	ldr	r3, [sp, #20]
 810f202:	3b08      	subs	r3, #8
 810f204:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 810f208:	9305      	str	r3, [sp, #20]
 810f20a:	4607      	mov	r7, r0
 810f20c:	e796      	b.n	810f13c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
 810f20e:	2a00      	cmp	r2, #0
 810f210:	d037      	beq.n	810f282 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
 810f212:	4291      	cmp	r1, r2
 810f214:	d106      	bne.n	810f224 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 810f216:	7923      	ldrb	r3, [r4, #4]
 810f218:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 810f21c:	4313      	orrs	r3, r2
 810f21e:	7123      	strb	r3, [r4, #4]
 810f220:	4638      	mov	r0, r7
 810f222:	e7ea      	b.n	810f1fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 810f224:	b909      	cbnz	r1, 810f22a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18a>
 810f226:	2800      	cmp	r0, #0
 810f228:	d0fa      	beq.n	810f220 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x180>
 810f22a:	2b03      	cmp	r3, #3
 810f22c:	79a6      	ldrb	r6, [r4, #6]
 810f22e:	d904      	bls.n	810f23a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x19a>
 810f230:	07d9      	lsls	r1, r3, #31
 810f232:	d529      	bpl.n	810f288 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e8>
 810f234:	68a3      	ldr	r3, [r4, #8]
 810f236:	079b      	lsls	r3, r3, #30
 810f238:	d526      	bpl.n	810f288 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e8>
 810f23a:	b97e      	cbnz	r6, 810f25c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1bc>
 810f23c:	2d03      	cmp	r5, #3
 810f23e:	d905      	bls.n	810f24c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 810f240:	07ee      	lsls	r6, r5, #31
 810f242:	d541      	bpl.n	810f2c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 810f244:	f8d9 3008 	ldr.w	r3, [r9, #8]
 810f248:	0798      	lsls	r0, r3, #30
 810f24a:	d53d      	bpl.n	810f2c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 810f24c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810f24e:	9300      	str	r3, [sp, #0]
 810f250:	4641      	mov	r1, r8
 810f252:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810f254:	4650      	mov	r0, sl
 810f256:	f7ff ff0f 	bl	810f078 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 810f25a:	4606      	mov	r6, r0
 810f25c:	b9e5      	cbnz	r5, 810f298 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 810f25e:	2e03      	cmp	r6, #3
 810f260:	d905      	bls.n	810f26e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ce>
 810f262:	07f1      	lsls	r1, r6, #31
 810f264:	d532      	bpl.n	810f2cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 810f266:	f8d9 3008 	ldr.w	r3, [r9, #8]
 810f26a:	079a      	lsls	r2, r3, #30
 810f26c:	d52e      	bpl.n	810f2cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 810f26e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810f270:	9300      	str	r3, [sp, #0]
 810f272:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810f274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810f276:	4641      	mov	r1, r8
 810f278:	4650      	mov	r0, sl
 810f27a:	f7ff fefd 	bl	810f078 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 810f27e:	4605      	mov	r5, r0
 810f280:	e00a      	b.n	810f298 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 810f282:	2900      	cmp	r1, #0
 810f284:	d1d1      	bne.n	810f22a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18a>
 810f286:	e7cb      	b.n	810f220 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x180>
 810f288:	2e01      	cmp	r6, #1
 810f28a:	bf38      	it	cc
 810f28c:	2601      	movcc	r6, #1
 810f28e:	2d01      	cmp	r5, #1
 810f290:	bf38      	it	cc
 810f292:	2501      	movcc	r5, #1
 810f294:	b2f6      	uxtb	r6, r6
 810f296:	b2ed      	uxtb	r5, r5
 810f298:	ea85 0306 	eor.w	r3, r5, r6
 810f29c:	b2db      	uxtb	r3, r3
 810f29e:	2b03      	cmp	r3, #3
 810f2a0:	d916      	bls.n	810f2d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 810f2a2:	2d03      	cmp	r5, #3
 810f2a4:	bf81      	itttt	hi
 810f2a6:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 810f2a8:	6023      	strhi	r3, [r4, #0]
 810f2aa:	462e      	movhi	r6, r5
 810f2ac:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 810f2b0:	bf86      	itte	hi
 810f2b2:	7123      	strbhi	r3, [r4, #4]
 810f2b4:	2000      	movhi	r0, #0
 810f2b6:	4638      	movls	r0, r7
 810f2b8:	07b3      	lsls	r3, r6, #30
 810f2ba:	71a6      	strb	r6, [r4, #6]
 810f2bc:	d402      	bmi.n	810f2c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x224>
 810f2be:	f016 0601 	ands.w	r6, r6, #1
 810f2c2:	d19a      	bne.n	810f1fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 810f2c4:	2000      	movs	r0, #0
 810f2c6:	e786      	b.n	810f1d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 810f2c8:	2601      	movs	r6, #1
 810f2ca:	e7e5      	b.n	810f298 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 810f2cc:	2501      	movs	r5, #1
 810f2ce:	e7e3      	b.n	810f298 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 810f2d0:	4035      	ands	r5, r6
 810f2d2:	b2ed      	uxtb	r5, r5
 810f2d4:	2300      	movs	r3, #0
 810f2d6:	2d03      	cmp	r5, #3
 810f2d8:	6023      	str	r3, [r4, #0]
 810f2da:	d903      	bls.n	810f2e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x244>
 810f2dc:	2302      	movs	r3, #2
 810f2de:	71a3      	strb	r3, [r4, #6]
 810f2e0:	2001      	movs	r0, #1
 810f2e2:	e778      	b.n	810f1d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 810f2e4:	2001      	movs	r0, #1
 810f2e6:	71a0      	strb	r0, [r4, #6]
 810f2e8:	e787      	b.n	810f1fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 810f2ea:	2301      	movs	r3, #1
 810f2ec:	9309      	str	r3, [sp, #36]	; 0x24
 810f2ee:	4638      	mov	r0, r7
 810f2f0:	e786      	b.n	810f200 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x160>
 810f2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f2f4:	2b00      	cmp	r3, #0
 810f2f6:	f43f af6f 	beq.w	810f1d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 810f2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f2fc:	2b01      	cmp	r3, #1
 810f2fe:	f43f af6b 	beq.w	810f1d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 810f302:	2301      	movs	r3, #1
 810f304:	930a      	str	r3, [sp, #40]	; 0x28
 810f306:	f8cd b020 	str.w	fp, [sp, #32]
 810f30a:	e712      	b.n	810f132 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x92>

0810f30c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 810f30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f310:	ed2d 8b02 	vpush	{d8}
 810f314:	b089      	sub	sp, #36	; 0x24
 810f316:	ee08 1a10 	vmov	s16, r1
 810f31a:	4606      	mov	r6, r0
 810f31c:	4617      	mov	r7, r2
 810f31e:	461c      	mov	r4, r3
 810f320:	f7ff fd57 	bl	810edd2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 810f324:	4605      	mov	r5, r0
 810f326:	2800      	cmp	r0, #0
 810f328:	d15f      	bne.n	810f3ea <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 810f32a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 810f32e:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 810f332:	f019 0f10 	tst.w	r9, #16
 810f336:	bf18      	it	ne
 810f338:	f8d6 9008 	ldrne.w	r9, [r6, #8]
 810f33c:	f009 0301 	and.w	r3, r9, #1
 810f340:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
 810f344:	9303      	str	r3, [sp, #12]
 810f346:	f10d 0b10 	add.w	fp, sp, #16
 810f34a:	f1ba 0f00 	cmp.w	sl, #0
 810f34e:	d074      	beq.n	810f43a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12e>
 810f350:	2300      	movs	r3, #0
 810f352:	f8d8 200c 	ldr.w	r2, [r8, #12]
 810f356:	9304      	str	r3, [sp, #16]
 810f358:	f88d 3014 	strb.w	r3, [sp, #20]
 810f35c:	2300      	movs	r3, #0
 810f35e:	9307      	str	r3, [sp, #28]
 810f360:	f002 0301 	and.w	r3, r2, #1
 810f364:	9301      	str	r3, [sp, #4]
 810f366:	f002 0302 	and.w	r3, r2, #2
 810f36a:	9302      	str	r3, [sp, #8]
 810f36c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 810f370:	430b      	orrs	r3, r1
 810f372:	f8cd 9018 	str.w	r9, [sp, #24]
 810f376:	d104      	bne.n	810f382 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x76>
 810f378:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 810f37c:	f1a8 0808 	sub.w	r8, r8, #8
 810f380:	e7e3      	b.n	810f34a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3e>
 810f382:	2f00      	cmp	r7, #0
 810f384:	d037      	beq.n	810f3f6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xea>
 810f386:	9b01      	ldr	r3, [sp, #4]
 810f388:	1212      	asrs	r2, r2, #8
 810f38a:	b10b      	cbz	r3, 810f390 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x84>
 810f38c:	683b      	ldr	r3, [r7, #0]
 810f38e:	589a      	ldr	r2, [r3, r2]
 810f390:	443a      	add	r2, r7
 810f392:	f8d8 0008 	ldr.w	r0, [r8, #8]
 810f396:	6803      	ldr	r3, [r0, #0]
 810f398:	ee18 1a10 	vmov	r1, s16
 810f39c:	699d      	ldr	r5, [r3, #24]
 810f39e:	465b      	mov	r3, fp
 810f3a0:	47a8      	blx	r5
 810f3a2:	4605      	mov	r5, r0
 810f3a4:	2800      	cmp	r0, #0
 810f3a6:	d0e7      	beq.n	810f378 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 810f3a8:	9b07      	ldr	r3, [sp, #28]
 810f3aa:	2b08      	cmp	r3, #8
 810f3ac:	d104      	bne.n	810f3b8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 810f3ae:	9b01      	ldr	r3, [sp, #4]
 810f3b0:	b113      	cbz	r3, 810f3b8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 810f3b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810f3b6:	9307      	str	r3, [sp, #28]
 810f3b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 810f3bc:	2b03      	cmp	r3, #3
 810f3be:	d905      	bls.n	810f3cc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 810f3c0:	9a02      	ldr	r2, [sp, #8]
 810f3c2:	b91a      	cbnz	r2, 810f3cc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 810f3c4:	f023 0302 	bic.w	r3, r3, #2
 810f3c8:	f88d 3014 	strb.w	r3, [sp, #20]
 810f3cc:	68e1      	ldr	r1, [r4, #12]
 810f3ce:	b9d1      	cbnz	r1, 810f406 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfa>
 810f3d0:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 810f3d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810f3d8:	7923      	ldrb	r3, [r4, #4]
 810f3da:	2b03      	cmp	r3, #3
 810f3dc:	d905      	bls.n	810f3ea <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 810f3de:	079a      	lsls	r2, r3, #30
 810f3e0:	d50b      	bpl.n	810f3fa <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xee>
 810f3e2:	68b3      	ldr	r3, [r6, #8]
 810f3e4:	f013 0f01 	tst.w	r3, #1
 810f3e8:	d1c6      	bne.n	810f378 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 810f3ea:	4628      	mov	r0, r5
 810f3ec:	b009      	add	sp, #36	; 0x24
 810f3ee:	ecbd 8b02 	vpop	{d8}
 810f3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f3f6:	463a      	mov	r2, r7
 810f3f8:	e7cb      	b.n	810f392 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x86>
 810f3fa:	07db      	lsls	r3, r3, #31
 810f3fc:	d5f5      	bpl.n	810f3ea <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 810f3fe:	68b3      	ldr	r3, [r6, #8]
 810f400:	f013 0f02 	tst.w	r3, #2
 810f404:	e7f0      	b.n	810f3e8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
 810f406:	6823      	ldr	r3, [r4, #0]
 810f408:	9a04      	ldr	r2, [sp, #16]
 810f40a:	4293      	cmp	r3, r2
 810f40c:	d004      	beq.n	810f418 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 810f40e:	2300      	movs	r3, #0
 810f410:	6023      	str	r3, [r4, #0]
 810f412:	2302      	movs	r3, #2
 810f414:	7123      	strb	r3, [r4, #4]
 810f416:	e7e8      	b.n	810f3ea <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 810f418:	b12b      	cbz	r3, 810f426 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11a>
 810f41a:	7923      	ldrb	r3, [r4, #4]
 810f41c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 810f420:	4313      	orrs	r3, r2
 810f422:	7123      	strb	r3, [r4, #4]
 810f424:	e7a8      	b.n	810f378 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 810f426:	9807      	ldr	r0, [sp, #28]
 810f428:	2808      	cmp	r0, #8
 810f42a:	d0f2      	beq.n	810f412 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 810f42c:	2908      	cmp	r1, #8
 810f42e:	d0f0      	beq.n	810f412 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 810f430:	f7ff fdbc 	bl	810efac <_ZNKSt9type_infoeqERKS_>
 810f434:	2800      	cmp	r0, #0
 810f436:	d1f0      	bne.n	810f41a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10e>
 810f438:	e7eb      	b.n	810f412 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 810f43a:	7925      	ldrb	r5, [r4, #4]
 810f43c:	3d00      	subs	r5, #0
 810f43e:	bf18      	it	ne
 810f440:	2501      	movne	r5, #1
 810f442:	e7d2      	b.n	810f3ea <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>

0810f444 <_ZN10__cxxabiv111__terminateEPFvvE>:
 810f444:	b508      	push	{r3, lr}
 810f446:	4780      	blx	r0
 810f448:	f000 f80d 	bl	810f466 <abort>

0810f44c <_ZSt13get_terminatev>:
 810f44c:	4b02      	ldr	r3, [pc, #8]	; (810f458 <_ZSt13get_terminatev+0xc>)
 810f44e:	6818      	ldr	r0, [r3, #0]
 810f450:	f3bf 8f5b 	dmb	ish
 810f454:	4770      	bx	lr
 810f456:	bf00      	nop
 810f458:	10000034 	.word	0x10000034

0810f45c <_ZSt9terminatev>:
 810f45c:	b508      	push	{r3, lr}
 810f45e:	f7ff fff5 	bl	810f44c <_ZSt13get_terminatev>
 810f462:	f7ff ffef 	bl	810f444 <_ZN10__cxxabiv111__terminateEPFvvE>

0810f466 <abort>:
 810f466:	b508      	push	{r3, lr}
 810f468:	2006      	movs	r0, #6
 810f46a:	f000 fd6d 	bl	810ff48 <raise>
 810f46e:	2001      	movs	r0, #1
 810f470:	f7f2 fcca 	bl	8101e08 <_exit>

0810f474 <atexit>:
 810f474:	2300      	movs	r3, #0
 810f476:	4601      	mov	r1, r0
 810f478:	461a      	mov	r2, r3
 810f47a:	4618      	mov	r0, r3
 810f47c:	f000 bf0e 	b.w	811029c <__register_exitproc>

0810f480 <atoi>:
 810f480:	220a      	movs	r2, #10
 810f482:	2100      	movs	r1, #0
 810f484:	f000 be20 	b.w	81100c8 <strtol>

0810f488 <__errno>:
 810f488:	4b01      	ldr	r3, [pc, #4]	; (810f490 <__errno+0x8>)
 810f48a:	6818      	ldr	r0, [r3, #0]
 810f48c:	4770      	bx	lr
 810f48e:	bf00      	nop
 810f490:	10000038 	.word	0x10000038

0810f494 <__libc_init_array>:
 810f494:	b570      	push	{r4, r5, r6, lr}
 810f496:	4d0d      	ldr	r5, [pc, #52]	; (810f4cc <__libc_init_array+0x38>)
 810f498:	4c0d      	ldr	r4, [pc, #52]	; (810f4d0 <__libc_init_array+0x3c>)
 810f49a:	1b64      	subs	r4, r4, r5
 810f49c:	10a4      	asrs	r4, r4, #2
 810f49e:	2600      	movs	r6, #0
 810f4a0:	42a6      	cmp	r6, r4
 810f4a2:	d109      	bne.n	810f4b8 <__libc_init_array+0x24>
 810f4a4:	4d0b      	ldr	r5, [pc, #44]	; (810f4d4 <__libc_init_array+0x40>)
 810f4a6:	4c0c      	ldr	r4, [pc, #48]	; (810f4d8 <__libc_init_array+0x44>)
 810f4a8:	f003 f84c 	bl	8112544 <_init>
 810f4ac:	1b64      	subs	r4, r4, r5
 810f4ae:	10a4      	asrs	r4, r4, #2
 810f4b0:	2600      	movs	r6, #0
 810f4b2:	42a6      	cmp	r6, r4
 810f4b4:	d105      	bne.n	810f4c2 <__libc_init_array+0x2e>
 810f4b6:	bd70      	pop	{r4, r5, r6, pc}
 810f4b8:	f855 3b04 	ldr.w	r3, [r5], #4
 810f4bc:	4798      	blx	r3
 810f4be:	3601      	adds	r6, #1
 810f4c0:	e7ee      	b.n	810f4a0 <__libc_init_array+0xc>
 810f4c2:	f855 3b04 	ldr.w	r3, [r5], #4
 810f4c6:	4798      	blx	r3
 810f4c8:	3601      	adds	r6, #1
 810f4ca:	e7f2      	b.n	810f4b2 <__libc_init_array+0x1e>
 810f4cc:	081135fc 	.word	0x081135fc
 810f4d0:	081135fc 	.word	0x081135fc
 810f4d4:	081135fc 	.word	0x081135fc
 810f4d8:	08113608 	.word	0x08113608

0810f4dc <memcpy>:
 810f4dc:	440a      	add	r2, r1
 810f4de:	4291      	cmp	r1, r2
 810f4e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 810f4e4:	d100      	bne.n	810f4e8 <memcpy+0xc>
 810f4e6:	4770      	bx	lr
 810f4e8:	b510      	push	{r4, lr}
 810f4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 810f4ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 810f4f2:	4291      	cmp	r1, r2
 810f4f4:	d1f9      	bne.n	810f4ea <memcpy+0xe>
 810f4f6:	bd10      	pop	{r4, pc}

0810f4f8 <memset>:
 810f4f8:	4402      	add	r2, r0
 810f4fa:	4603      	mov	r3, r0
 810f4fc:	4293      	cmp	r3, r2
 810f4fe:	d100      	bne.n	810f502 <memset+0xa>
 810f500:	4770      	bx	lr
 810f502:	f803 1b01 	strb.w	r1, [r3], #1
 810f506:	e7f9      	b.n	810f4fc <memset+0x4>

0810f508 <__cvt>:
 810f508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810f50c:	ec55 4b10 	vmov	r4, r5, d0
 810f510:	2d00      	cmp	r5, #0
 810f512:	460e      	mov	r6, r1
 810f514:	4619      	mov	r1, r3
 810f516:	462b      	mov	r3, r5
 810f518:	bfbb      	ittet	lt
 810f51a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810f51e:	461d      	movlt	r5, r3
 810f520:	2300      	movge	r3, #0
 810f522:	232d      	movlt	r3, #45	; 0x2d
 810f524:	700b      	strb	r3, [r1, #0]
 810f526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810f528:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810f52c:	4691      	mov	r9, r2
 810f52e:	f023 0820 	bic.w	r8, r3, #32
 810f532:	bfbc      	itt	lt
 810f534:	4622      	movlt	r2, r4
 810f536:	4614      	movlt	r4, r2
 810f538:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810f53c:	d005      	beq.n	810f54a <__cvt+0x42>
 810f53e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810f542:	d100      	bne.n	810f546 <__cvt+0x3e>
 810f544:	3601      	adds	r6, #1
 810f546:	2102      	movs	r1, #2
 810f548:	e000      	b.n	810f54c <__cvt+0x44>
 810f54a:	2103      	movs	r1, #3
 810f54c:	ab03      	add	r3, sp, #12
 810f54e:	9301      	str	r3, [sp, #4]
 810f550:	ab02      	add	r3, sp, #8
 810f552:	9300      	str	r3, [sp, #0]
 810f554:	ec45 4b10 	vmov	d0, r4, r5
 810f558:	4653      	mov	r3, sl
 810f55a:	4632      	mov	r2, r6
 810f55c:	f000 ff8c 	bl	8110478 <_dtoa_r>
 810f560:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810f564:	4607      	mov	r7, r0
 810f566:	d102      	bne.n	810f56e <__cvt+0x66>
 810f568:	f019 0f01 	tst.w	r9, #1
 810f56c:	d022      	beq.n	810f5b4 <__cvt+0xac>
 810f56e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810f572:	eb07 0906 	add.w	r9, r7, r6
 810f576:	d110      	bne.n	810f59a <__cvt+0x92>
 810f578:	783b      	ldrb	r3, [r7, #0]
 810f57a:	2b30      	cmp	r3, #48	; 0x30
 810f57c:	d10a      	bne.n	810f594 <__cvt+0x8c>
 810f57e:	2200      	movs	r2, #0
 810f580:	2300      	movs	r3, #0
 810f582:	4620      	mov	r0, r4
 810f584:	4629      	mov	r1, r5
 810f586:	f7f1 fb37 	bl	8100bf8 <__aeabi_dcmpeq>
 810f58a:	b918      	cbnz	r0, 810f594 <__cvt+0x8c>
 810f58c:	f1c6 0601 	rsb	r6, r6, #1
 810f590:	f8ca 6000 	str.w	r6, [sl]
 810f594:	f8da 3000 	ldr.w	r3, [sl]
 810f598:	4499      	add	r9, r3
 810f59a:	2200      	movs	r2, #0
 810f59c:	2300      	movs	r3, #0
 810f59e:	4620      	mov	r0, r4
 810f5a0:	4629      	mov	r1, r5
 810f5a2:	f7f1 fb29 	bl	8100bf8 <__aeabi_dcmpeq>
 810f5a6:	b108      	cbz	r0, 810f5ac <__cvt+0xa4>
 810f5a8:	f8cd 900c 	str.w	r9, [sp, #12]
 810f5ac:	2230      	movs	r2, #48	; 0x30
 810f5ae:	9b03      	ldr	r3, [sp, #12]
 810f5b0:	454b      	cmp	r3, r9
 810f5b2:	d307      	bcc.n	810f5c4 <__cvt+0xbc>
 810f5b4:	9b03      	ldr	r3, [sp, #12]
 810f5b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810f5b8:	1bdb      	subs	r3, r3, r7
 810f5ba:	4638      	mov	r0, r7
 810f5bc:	6013      	str	r3, [r2, #0]
 810f5be:	b004      	add	sp, #16
 810f5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f5c4:	1c59      	adds	r1, r3, #1
 810f5c6:	9103      	str	r1, [sp, #12]
 810f5c8:	701a      	strb	r2, [r3, #0]
 810f5ca:	e7f0      	b.n	810f5ae <__cvt+0xa6>

0810f5cc <__exponent>:
 810f5cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810f5ce:	4603      	mov	r3, r0
 810f5d0:	2900      	cmp	r1, #0
 810f5d2:	bfb8      	it	lt
 810f5d4:	4249      	neglt	r1, r1
 810f5d6:	f803 2b02 	strb.w	r2, [r3], #2
 810f5da:	bfb4      	ite	lt
 810f5dc:	222d      	movlt	r2, #45	; 0x2d
 810f5de:	222b      	movge	r2, #43	; 0x2b
 810f5e0:	2909      	cmp	r1, #9
 810f5e2:	7042      	strb	r2, [r0, #1]
 810f5e4:	dd2a      	ble.n	810f63c <__exponent+0x70>
 810f5e6:	f10d 0407 	add.w	r4, sp, #7
 810f5ea:	46a4      	mov	ip, r4
 810f5ec:	270a      	movs	r7, #10
 810f5ee:	46a6      	mov	lr, r4
 810f5f0:	460a      	mov	r2, r1
 810f5f2:	fb91 f6f7 	sdiv	r6, r1, r7
 810f5f6:	fb07 1516 	mls	r5, r7, r6, r1
 810f5fa:	3530      	adds	r5, #48	; 0x30
 810f5fc:	2a63      	cmp	r2, #99	; 0x63
 810f5fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 810f602:	f80e 5c01 	strb.w	r5, [lr, #-1]
 810f606:	4631      	mov	r1, r6
 810f608:	dcf1      	bgt.n	810f5ee <__exponent+0x22>
 810f60a:	3130      	adds	r1, #48	; 0x30
 810f60c:	f1ae 0502 	sub.w	r5, lr, #2
 810f610:	f804 1c01 	strb.w	r1, [r4, #-1]
 810f614:	1c44      	adds	r4, r0, #1
 810f616:	4629      	mov	r1, r5
 810f618:	4561      	cmp	r1, ip
 810f61a:	d30a      	bcc.n	810f632 <__exponent+0x66>
 810f61c:	f10d 0209 	add.w	r2, sp, #9
 810f620:	eba2 020e 	sub.w	r2, r2, lr
 810f624:	4565      	cmp	r5, ip
 810f626:	bf88      	it	hi
 810f628:	2200      	movhi	r2, #0
 810f62a:	4413      	add	r3, r2
 810f62c:	1a18      	subs	r0, r3, r0
 810f62e:	b003      	add	sp, #12
 810f630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810f632:	f811 2b01 	ldrb.w	r2, [r1], #1
 810f636:	f804 2f01 	strb.w	r2, [r4, #1]!
 810f63a:	e7ed      	b.n	810f618 <__exponent+0x4c>
 810f63c:	2330      	movs	r3, #48	; 0x30
 810f63e:	3130      	adds	r1, #48	; 0x30
 810f640:	7083      	strb	r3, [r0, #2]
 810f642:	70c1      	strb	r1, [r0, #3]
 810f644:	1d03      	adds	r3, r0, #4
 810f646:	e7f1      	b.n	810f62c <__exponent+0x60>

0810f648 <_printf_float>:
 810f648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f64c:	ed2d 8b02 	vpush	{d8}
 810f650:	b08d      	sub	sp, #52	; 0x34
 810f652:	460c      	mov	r4, r1
 810f654:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810f658:	4616      	mov	r6, r2
 810f65a:	461f      	mov	r7, r3
 810f65c:	4605      	mov	r5, r0
 810f65e:	f001 feaf 	bl	81113c0 <_localeconv_r>
 810f662:	f8d0 a000 	ldr.w	sl, [r0]
 810f666:	4650      	mov	r0, sl
 810f668:	f7f0 fe44 	bl	81002f4 <strlen>
 810f66c:	2300      	movs	r3, #0
 810f66e:	930a      	str	r3, [sp, #40]	; 0x28
 810f670:	6823      	ldr	r3, [r4, #0]
 810f672:	9305      	str	r3, [sp, #20]
 810f674:	f8d8 3000 	ldr.w	r3, [r8]
 810f678:	f894 b018 	ldrb.w	fp, [r4, #24]
 810f67c:	3307      	adds	r3, #7
 810f67e:	f023 0307 	bic.w	r3, r3, #7
 810f682:	f103 0208 	add.w	r2, r3, #8
 810f686:	f8c8 2000 	str.w	r2, [r8]
 810f68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f68e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810f692:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810f696:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810f69a:	9307      	str	r3, [sp, #28]
 810f69c:	f8cd 8018 	str.w	r8, [sp, #24]
 810f6a0:	ee08 0a10 	vmov	s16, r0
 810f6a4:	4b9f      	ldr	r3, [pc, #636]	; (810f924 <_printf_float+0x2dc>)
 810f6a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810f6aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810f6ae:	f7f1 fad5 	bl	8100c5c <__aeabi_dcmpun>
 810f6b2:	bb88      	cbnz	r0, 810f718 <_printf_float+0xd0>
 810f6b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810f6b8:	4b9a      	ldr	r3, [pc, #616]	; (810f924 <_printf_float+0x2dc>)
 810f6ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810f6be:	f7f1 faaf 	bl	8100c20 <__aeabi_dcmple>
 810f6c2:	bb48      	cbnz	r0, 810f718 <_printf_float+0xd0>
 810f6c4:	2200      	movs	r2, #0
 810f6c6:	2300      	movs	r3, #0
 810f6c8:	4640      	mov	r0, r8
 810f6ca:	4649      	mov	r1, r9
 810f6cc:	f7f1 fa9e 	bl	8100c0c <__aeabi_dcmplt>
 810f6d0:	b110      	cbz	r0, 810f6d8 <_printf_float+0x90>
 810f6d2:	232d      	movs	r3, #45	; 0x2d
 810f6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810f6d8:	4b93      	ldr	r3, [pc, #588]	; (810f928 <_printf_float+0x2e0>)
 810f6da:	4894      	ldr	r0, [pc, #592]	; (810f92c <_printf_float+0x2e4>)
 810f6dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 810f6e0:	bf94      	ite	ls
 810f6e2:	4698      	movls	r8, r3
 810f6e4:	4680      	movhi	r8, r0
 810f6e6:	2303      	movs	r3, #3
 810f6e8:	6123      	str	r3, [r4, #16]
 810f6ea:	9b05      	ldr	r3, [sp, #20]
 810f6ec:	f023 0204 	bic.w	r2, r3, #4
 810f6f0:	6022      	str	r2, [r4, #0]
 810f6f2:	f04f 0900 	mov.w	r9, #0
 810f6f6:	9700      	str	r7, [sp, #0]
 810f6f8:	4633      	mov	r3, r6
 810f6fa:	aa0b      	add	r2, sp, #44	; 0x2c
 810f6fc:	4621      	mov	r1, r4
 810f6fe:	4628      	mov	r0, r5
 810f700:	f000 f9d8 	bl	810fab4 <_printf_common>
 810f704:	3001      	adds	r0, #1
 810f706:	f040 8090 	bne.w	810f82a <_printf_float+0x1e2>
 810f70a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810f70e:	b00d      	add	sp, #52	; 0x34
 810f710:	ecbd 8b02 	vpop	{d8}
 810f714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f718:	4642      	mov	r2, r8
 810f71a:	464b      	mov	r3, r9
 810f71c:	4640      	mov	r0, r8
 810f71e:	4649      	mov	r1, r9
 810f720:	f7f1 fa9c 	bl	8100c5c <__aeabi_dcmpun>
 810f724:	b140      	cbz	r0, 810f738 <_printf_float+0xf0>
 810f726:	464b      	mov	r3, r9
 810f728:	2b00      	cmp	r3, #0
 810f72a:	bfbc      	itt	lt
 810f72c:	232d      	movlt	r3, #45	; 0x2d
 810f72e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810f732:	487f      	ldr	r0, [pc, #508]	; (810f930 <_printf_float+0x2e8>)
 810f734:	4b7f      	ldr	r3, [pc, #508]	; (810f934 <_printf_float+0x2ec>)
 810f736:	e7d1      	b.n	810f6dc <_printf_float+0x94>
 810f738:	6863      	ldr	r3, [r4, #4]
 810f73a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810f73e:	9206      	str	r2, [sp, #24]
 810f740:	1c5a      	adds	r2, r3, #1
 810f742:	d13f      	bne.n	810f7c4 <_printf_float+0x17c>
 810f744:	2306      	movs	r3, #6
 810f746:	6063      	str	r3, [r4, #4]
 810f748:	9b05      	ldr	r3, [sp, #20]
 810f74a:	6861      	ldr	r1, [r4, #4]
 810f74c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 810f750:	2300      	movs	r3, #0
 810f752:	9303      	str	r3, [sp, #12]
 810f754:	ab0a      	add	r3, sp, #40	; 0x28
 810f756:	e9cd b301 	strd	fp, r3, [sp, #4]
 810f75a:	ab09      	add	r3, sp, #36	; 0x24
 810f75c:	ec49 8b10 	vmov	d0, r8, r9
 810f760:	9300      	str	r3, [sp, #0]
 810f762:	6022      	str	r2, [r4, #0]
 810f764:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810f768:	4628      	mov	r0, r5
 810f76a:	f7ff fecd 	bl	810f508 <__cvt>
 810f76e:	9b06      	ldr	r3, [sp, #24]
 810f770:	9909      	ldr	r1, [sp, #36]	; 0x24
 810f772:	2b47      	cmp	r3, #71	; 0x47
 810f774:	4680      	mov	r8, r0
 810f776:	d108      	bne.n	810f78a <_printf_float+0x142>
 810f778:	1cc8      	adds	r0, r1, #3
 810f77a:	db02      	blt.n	810f782 <_printf_float+0x13a>
 810f77c:	6863      	ldr	r3, [r4, #4]
 810f77e:	4299      	cmp	r1, r3
 810f780:	dd41      	ble.n	810f806 <_printf_float+0x1be>
 810f782:	f1ab 0b02 	sub.w	fp, fp, #2
 810f786:	fa5f fb8b 	uxtb.w	fp, fp
 810f78a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810f78e:	d820      	bhi.n	810f7d2 <_printf_float+0x18a>
 810f790:	3901      	subs	r1, #1
 810f792:	465a      	mov	r2, fp
 810f794:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810f798:	9109      	str	r1, [sp, #36]	; 0x24
 810f79a:	f7ff ff17 	bl	810f5cc <__exponent>
 810f79e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810f7a0:	1813      	adds	r3, r2, r0
 810f7a2:	2a01      	cmp	r2, #1
 810f7a4:	4681      	mov	r9, r0
 810f7a6:	6123      	str	r3, [r4, #16]
 810f7a8:	dc02      	bgt.n	810f7b0 <_printf_float+0x168>
 810f7aa:	6822      	ldr	r2, [r4, #0]
 810f7ac:	07d2      	lsls	r2, r2, #31
 810f7ae:	d501      	bpl.n	810f7b4 <_printf_float+0x16c>
 810f7b0:	3301      	adds	r3, #1
 810f7b2:	6123      	str	r3, [r4, #16]
 810f7b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810f7b8:	2b00      	cmp	r3, #0
 810f7ba:	d09c      	beq.n	810f6f6 <_printf_float+0xae>
 810f7bc:	232d      	movs	r3, #45	; 0x2d
 810f7be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810f7c2:	e798      	b.n	810f6f6 <_printf_float+0xae>
 810f7c4:	9a06      	ldr	r2, [sp, #24]
 810f7c6:	2a47      	cmp	r2, #71	; 0x47
 810f7c8:	d1be      	bne.n	810f748 <_printf_float+0x100>
 810f7ca:	2b00      	cmp	r3, #0
 810f7cc:	d1bc      	bne.n	810f748 <_printf_float+0x100>
 810f7ce:	2301      	movs	r3, #1
 810f7d0:	e7b9      	b.n	810f746 <_printf_float+0xfe>
 810f7d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 810f7d6:	d118      	bne.n	810f80a <_printf_float+0x1c2>
 810f7d8:	2900      	cmp	r1, #0
 810f7da:	6863      	ldr	r3, [r4, #4]
 810f7dc:	dd0b      	ble.n	810f7f6 <_printf_float+0x1ae>
 810f7de:	6121      	str	r1, [r4, #16]
 810f7e0:	b913      	cbnz	r3, 810f7e8 <_printf_float+0x1a0>
 810f7e2:	6822      	ldr	r2, [r4, #0]
 810f7e4:	07d0      	lsls	r0, r2, #31
 810f7e6:	d502      	bpl.n	810f7ee <_printf_float+0x1a6>
 810f7e8:	3301      	adds	r3, #1
 810f7ea:	440b      	add	r3, r1
 810f7ec:	6123      	str	r3, [r4, #16]
 810f7ee:	65a1      	str	r1, [r4, #88]	; 0x58
 810f7f0:	f04f 0900 	mov.w	r9, #0
 810f7f4:	e7de      	b.n	810f7b4 <_printf_float+0x16c>
 810f7f6:	b913      	cbnz	r3, 810f7fe <_printf_float+0x1b6>
 810f7f8:	6822      	ldr	r2, [r4, #0]
 810f7fa:	07d2      	lsls	r2, r2, #31
 810f7fc:	d501      	bpl.n	810f802 <_printf_float+0x1ba>
 810f7fe:	3302      	adds	r3, #2
 810f800:	e7f4      	b.n	810f7ec <_printf_float+0x1a4>
 810f802:	2301      	movs	r3, #1
 810f804:	e7f2      	b.n	810f7ec <_printf_float+0x1a4>
 810f806:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810f80a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f80c:	4299      	cmp	r1, r3
 810f80e:	db05      	blt.n	810f81c <_printf_float+0x1d4>
 810f810:	6823      	ldr	r3, [r4, #0]
 810f812:	6121      	str	r1, [r4, #16]
 810f814:	07d8      	lsls	r0, r3, #31
 810f816:	d5ea      	bpl.n	810f7ee <_printf_float+0x1a6>
 810f818:	1c4b      	adds	r3, r1, #1
 810f81a:	e7e7      	b.n	810f7ec <_printf_float+0x1a4>
 810f81c:	2900      	cmp	r1, #0
 810f81e:	bfd4      	ite	le
 810f820:	f1c1 0202 	rsble	r2, r1, #2
 810f824:	2201      	movgt	r2, #1
 810f826:	4413      	add	r3, r2
 810f828:	e7e0      	b.n	810f7ec <_printf_float+0x1a4>
 810f82a:	6823      	ldr	r3, [r4, #0]
 810f82c:	055a      	lsls	r2, r3, #21
 810f82e:	d407      	bmi.n	810f840 <_printf_float+0x1f8>
 810f830:	6923      	ldr	r3, [r4, #16]
 810f832:	4642      	mov	r2, r8
 810f834:	4631      	mov	r1, r6
 810f836:	4628      	mov	r0, r5
 810f838:	47b8      	blx	r7
 810f83a:	3001      	adds	r0, #1
 810f83c:	d12c      	bne.n	810f898 <_printf_float+0x250>
 810f83e:	e764      	b.n	810f70a <_printf_float+0xc2>
 810f840:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810f844:	f240 80e0 	bls.w	810fa08 <_printf_float+0x3c0>
 810f848:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810f84c:	2200      	movs	r2, #0
 810f84e:	2300      	movs	r3, #0
 810f850:	f7f1 f9d2 	bl	8100bf8 <__aeabi_dcmpeq>
 810f854:	2800      	cmp	r0, #0
 810f856:	d034      	beq.n	810f8c2 <_printf_float+0x27a>
 810f858:	4a37      	ldr	r2, [pc, #220]	; (810f938 <_printf_float+0x2f0>)
 810f85a:	2301      	movs	r3, #1
 810f85c:	4631      	mov	r1, r6
 810f85e:	4628      	mov	r0, r5
 810f860:	47b8      	blx	r7
 810f862:	3001      	adds	r0, #1
 810f864:	f43f af51 	beq.w	810f70a <_printf_float+0xc2>
 810f868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810f86c:	429a      	cmp	r2, r3
 810f86e:	db02      	blt.n	810f876 <_printf_float+0x22e>
 810f870:	6823      	ldr	r3, [r4, #0]
 810f872:	07d8      	lsls	r0, r3, #31
 810f874:	d510      	bpl.n	810f898 <_printf_float+0x250>
 810f876:	ee18 3a10 	vmov	r3, s16
 810f87a:	4652      	mov	r2, sl
 810f87c:	4631      	mov	r1, r6
 810f87e:	4628      	mov	r0, r5
 810f880:	47b8      	blx	r7
 810f882:	3001      	adds	r0, #1
 810f884:	f43f af41 	beq.w	810f70a <_printf_float+0xc2>
 810f888:	f04f 0800 	mov.w	r8, #0
 810f88c:	f104 091a 	add.w	r9, r4, #26
 810f890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f892:	3b01      	subs	r3, #1
 810f894:	4543      	cmp	r3, r8
 810f896:	dc09      	bgt.n	810f8ac <_printf_float+0x264>
 810f898:	6823      	ldr	r3, [r4, #0]
 810f89a:	079b      	lsls	r3, r3, #30
 810f89c:	f100 8105 	bmi.w	810faaa <_printf_float+0x462>
 810f8a0:	68e0      	ldr	r0, [r4, #12]
 810f8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810f8a4:	4298      	cmp	r0, r3
 810f8a6:	bfb8      	it	lt
 810f8a8:	4618      	movlt	r0, r3
 810f8aa:	e730      	b.n	810f70e <_printf_float+0xc6>
 810f8ac:	2301      	movs	r3, #1
 810f8ae:	464a      	mov	r2, r9
 810f8b0:	4631      	mov	r1, r6
 810f8b2:	4628      	mov	r0, r5
 810f8b4:	47b8      	blx	r7
 810f8b6:	3001      	adds	r0, #1
 810f8b8:	f43f af27 	beq.w	810f70a <_printf_float+0xc2>
 810f8bc:	f108 0801 	add.w	r8, r8, #1
 810f8c0:	e7e6      	b.n	810f890 <_printf_float+0x248>
 810f8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f8c4:	2b00      	cmp	r3, #0
 810f8c6:	dc39      	bgt.n	810f93c <_printf_float+0x2f4>
 810f8c8:	4a1b      	ldr	r2, [pc, #108]	; (810f938 <_printf_float+0x2f0>)
 810f8ca:	2301      	movs	r3, #1
 810f8cc:	4631      	mov	r1, r6
 810f8ce:	4628      	mov	r0, r5
 810f8d0:	47b8      	blx	r7
 810f8d2:	3001      	adds	r0, #1
 810f8d4:	f43f af19 	beq.w	810f70a <_printf_float+0xc2>
 810f8d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810f8dc:	4313      	orrs	r3, r2
 810f8de:	d102      	bne.n	810f8e6 <_printf_float+0x29e>
 810f8e0:	6823      	ldr	r3, [r4, #0]
 810f8e2:	07d9      	lsls	r1, r3, #31
 810f8e4:	d5d8      	bpl.n	810f898 <_printf_float+0x250>
 810f8e6:	ee18 3a10 	vmov	r3, s16
 810f8ea:	4652      	mov	r2, sl
 810f8ec:	4631      	mov	r1, r6
 810f8ee:	4628      	mov	r0, r5
 810f8f0:	47b8      	blx	r7
 810f8f2:	3001      	adds	r0, #1
 810f8f4:	f43f af09 	beq.w	810f70a <_printf_float+0xc2>
 810f8f8:	f04f 0900 	mov.w	r9, #0
 810f8fc:	f104 0a1a 	add.w	sl, r4, #26
 810f900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f902:	425b      	negs	r3, r3
 810f904:	454b      	cmp	r3, r9
 810f906:	dc01      	bgt.n	810f90c <_printf_float+0x2c4>
 810f908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810f90a:	e792      	b.n	810f832 <_printf_float+0x1ea>
 810f90c:	2301      	movs	r3, #1
 810f90e:	4652      	mov	r2, sl
 810f910:	4631      	mov	r1, r6
 810f912:	4628      	mov	r0, r5
 810f914:	47b8      	blx	r7
 810f916:	3001      	adds	r0, #1
 810f918:	f43f aef7 	beq.w	810f70a <_printf_float+0xc2>
 810f91c:	f109 0901 	add.w	r9, r9, #1
 810f920:	e7ee      	b.n	810f900 <_printf_float+0x2b8>
 810f922:	bf00      	nop
 810f924:	7fefffff 	.word	0x7fefffff
 810f928:	08113210 	.word	0x08113210
 810f92c:	08113214 	.word	0x08113214
 810f930:	0811321c 	.word	0x0811321c
 810f934:	08113218 	.word	0x08113218
 810f938:	08113220 	.word	0x08113220
 810f93c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810f93e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810f940:	429a      	cmp	r2, r3
 810f942:	bfa8      	it	ge
 810f944:	461a      	movge	r2, r3
 810f946:	2a00      	cmp	r2, #0
 810f948:	4691      	mov	r9, r2
 810f94a:	dc37      	bgt.n	810f9bc <_printf_float+0x374>
 810f94c:	f04f 0b00 	mov.w	fp, #0
 810f950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810f954:	f104 021a 	add.w	r2, r4, #26
 810f958:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810f95a:	9305      	str	r3, [sp, #20]
 810f95c:	eba3 0309 	sub.w	r3, r3, r9
 810f960:	455b      	cmp	r3, fp
 810f962:	dc33      	bgt.n	810f9cc <_printf_float+0x384>
 810f964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810f968:	429a      	cmp	r2, r3
 810f96a:	db3b      	blt.n	810f9e4 <_printf_float+0x39c>
 810f96c:	6823      	ldr	r3, [r4, #0]
 810f96e:	07da      	lsls	r2, r3, #31
 810f970:	d438      	bmi.n	810f9e4 <_printf_float+0x39c>
 810f972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810f974:	9b05      	ldr	r3, [sp, #20]
 810f976:	9909      	ldr	r1, [sp, #36]	; 0x24
 810f978:	1ad3      	subs	r3, r2, r3
 810f97a:	eba2 0901 	sub.w	r9, r2, r1
 810f97e:	4599      	cmp	r9, r3
 810f980:	bfa8      	it	ge
 810f982:	4699      	movge	r9, r3
 810f984:	f1b9 0f00 	cmp.w	r9, #0
 810f988:	dc35      	bgt.n	810f9f6 <_printf_float+0x3ae>
 810f98a:	f04f 0800 	mov.w	r8, #0
 810f98e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810f992:	f104 0a1a 	add.w	sl, r4, #26
 810f996:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810f99a:	1a9b      	subs	r3, r3, r2
 810f99c:	eba3 0309 	sub.w	r3, r3, r9
 810f9a0:	4543      	cmp	r3, r8
 810f9a2:	f77f af79 	ble.w	810f898 <_printf_float+0x250>
 810f9a6:	2301      	movs	r3, #1
 810f9a8:	4652      	mov	r2, sl
 810f9aa:	4631      	mov	r1, r6
 810f9ac:	4628      	mov	r0, r5
 810f9ae:	47b8      	blx	r7
 810f9b0:	3001      	adds	r0, #1
 810f9b2:	f43f aeaa 	beq.w	810f70a <_printf_float+0xc2>
 810f9b6:	f108 0801 	add.w	r8, r8, #1
 810f9ba:	e7ec      	b.n	810f996 <_printf_float+0x34e>
 810f9bc:	4613      	mov	r3, r2
 810f9be:	4631      	mov	r1, r6
 810f9c0:	4642      	mov	r2, r8
 810f9c2:	4628      	mov	r0, r5
 810f9c4:	47b8      	blx	r7
 810f9c6:	3001      	adds	r0, #1
 810f9c8:	d1c0      	bne.n	810f94c <_printf_float+0x304>
 810f9ca:	e69e      	b.n	810f70a <_printf_float+0xc2>
 810f9cc:	2301      	movs	r3, #1
 810f9ce:	4631      	mov	r1, r6
 810f9d0:	4628      	mov	r0, r5
 810f9d2:	9205      	str	r2, [sp, #20]
 810f9d4:	47b8      	blx	r7
 810f9d6:	3001      	adds	r0, #1
 810f9d8:	f43f ae97 	beq.w	810f70a <_printf_float+0xc2>
 810f9dc:	9a05      	ldr	r2, [sp, #20]
 810f9de:	f10b 0b01 	add.w	fp, fp, #1
 810f9e2:	e7b9      	b.n	810f958 <_printf_float+0x310>
 810f9e4:	ee18 3a10 	vmov	r3, s16
 810f9e8:	4652      	mov	r2, sl
 810f9ea:	4631      	mov	r1, r6
 810f9ec:	4628      	mov	r0, r5
 810f9ee:	47b8      	blx	r7
 810f9f0:	3001      	adds	r0, #1
 810f9f2:	d1be      	bne.n	810f972 <_printf_float+0x32a>
 810f9f4:	e689      	b.n	810f70a <_printf_float+0xc2>
 810f9f6:	9a05      	ldr	r2, [sp, #20]
 810f9f8:	464b      	mov	r3, r9
 810f9fa:	4442      	add	r2, r8
 810f9fc:	4631      	mov	r1, r6
 810f9fe:	4628      	mov	r0, r5
 810fa00:	47b8      	blx	r7
 810fa02:	3001      	adds	r0, #1
 810fa04:	d1c1      	bne.n	810f98a <_printf_float+0x342>
 810fa06:	e680      	b.n	810f70a <_printf_float+0xc2>
 810fa08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810fa0a:	2a01      	cmp	r2, #1
 810fa0c:	dc01      	bgt.n	810fa12 <_printf_float+0x3ca>
 810fa0e:	07db      	lsls	r3, r3, #31
 810fa10:	d538      	bpl.n	810fa84 <_printf_float+0x43c>
 810fa12:	2301      	movs	r3, #1
 810fa14:	4642      	mov	r2, r8
 810fa16:	4631      	mov	r1, r6
 810fa18:	4628      	mov	r0, r5
 810fa1a:	47b8      	blx	r7
 810fa1c:	3001      	adds	r0, #1
 810fa1e:	f43f ae74 	beq.w	810f70a <_printf_float+0xc2>
 810fa22:	ee18 3a10 	vmov	r3, s16
 810fa26:	4652      	mov	r2, sl
 810fa28:	4631      	mov	r1, r6
 810fa2a:	4628      	mov	r0, r5
 810fa2c:	47b8      	blx	r7
 810fa2e:	3001      	adds	r0, #1
 810fa30:	f43f ae6b 	beq.w	810f70a <_printf_float+0xc2>
 810fa34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810fa38:	2200      	movs	r2, #0
 810fa3a:	2300      	movs	r3, #0
 810fa3c:	f7f1 f8dc 	bl	8100bf8 <__aeabi_dcmpeq>
 810fa40:	b9d8      	cbnz	r0, 810fa7a <_printf_float+0x432>
 810fa42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810fa44:	f108 0201 	add.w	r2, r8, #1
 810fa48:	3b01      	subs	r3, #1
 810fa4a:	4631      	mov	r1, r6
 810fa4c:	4628      	mov	r0, r5
 810fa4e:	47b8      	blx	r7
 810fa50:	3001      	adds	r0, #1
 810fa52:	d10e      	bne.n	810fa72 <_printf_float+0x42a>
 810fa54:	e659      	b.n	810f70a <_printf_float+0xc2>
 810fa56:	2301      	movs	r3, #1
 810fa58:	4652      	mov	r2, sl
 810fa5a:	4631      	mov	r1, r6
 810fa5c:	4628      	mov	r0, r5
 810fa5e:	47b8      	blx	r7
 810fa60:	3001      	adds	r0, #1
 810fa62:	f43f ae52 	beq.w	810f70a <_printf_float+0xc2>
 810fa66:	f108 0801 	add.w	r8, r8, #1
 810fa6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810fa6c:	3b01      	subs	r3, #1
 810fa6e:	4543      	cmp	r3, r8
 810fa70:	dcf1      	bgt.n	810fa56 <_printf_float+0x40e>
 810fa72:	464b      	mov	r3, r9
 810fa74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810fa78:	e6dc      	b.n	810f834 <_printf_float+0x1ec>
 810fa7a:	f04f 0800 	mov.w	r8, #0
 810fa7e:	f104 0a1a 	add.w	sl, r4, #26
 810fa82:	e7f2      	b.n	810fa6a <_printf_float+0x422>
 810fa84:	2301      	movs	r3, #1
 810fa86:	4642      	mov	r2, r8
 810fa88:	e7df      	b.n	810fa4a <_printf_float+0x402>
 810fa8a:	2301      	movs	r3, #1
 810fa8c:	464a      	mov	r2, r9
 810fa8e:	4631      	mov	r1, r6
 810fa90:	4628      	mov	r0, r5
 810fa92:	47b8      	blx	r7
 810fa94:	3001      	adds	r0, #1
 810fa96:	f43f ae38 	beq.w	810f70a <_printf_float+0xc2>
 810fa9a:	f108 0801 	add.w	r8, r8, #1
 810fa9e:	68e3      	ldr	r3, [r4, #12]
 810faa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810faa2:	1a5b      	subs	r3, r3, r1
 810faa4:	4543      	cmp	r3, r8
 810faa6:	dcf0      	bgt.n	810fa8a <_printf_float+0x442>
 810faa8:	e6fa      	b.n	810f8a0 <_printf_float+0x258>
 810faaa:	f04f 0800 	mov.w	r8, #0
 810faae:	f104 0919 	add.w	r9, r4, #25
 810fab2:	e7f4      	b.n	810fa9e <_printf_float+0x456>

0810fab4 <_printf_common>:
 810fab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810fab8:	4616      	mov	r6, r2
 810faba:	4699      	mov	r9, r3
 810fabc:	688a      	ldr	r2, [r1, #8]
 810fabe:	690b      	ldr	r3, [r1, #16]
 810fac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810fac4:	4293      	cmp	r3, r2
 810fac6:	bfb8      	it	lt
 810fac8:	4613      	movlt	r3, r2
 810faca:	6033      	str	r3, [r6, #0]
 810facc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810fad0:	4607      	mov	r7, r0
 810fad2:	460c      	mov	r4, r1
 810fad4:	b10a      	cbz	r2, 810fada <_printf_common+0x26>
 810fad6:	3301      	adds	r3, #1
 810fad8:	6033      	str	r3, [r6, #0]
 810fada:	6823      	ldr	r3, [r4, #0]
 810fadc:	0699      	lsls	r1, r3, #26
 810fade:	bf42      	ittt	mi
 810fae0:	6833      	ldrmi	r3, [r6, #0]
 810fae2:	3302      	addmi	r3, #2
 810fae4:	6033      	strmi	r3, [r6, #0]
 810fae6:	6825      	ldr	r5, [r4, #0]
 810fae8:	f015 0506 	ands.w	r5, r5, #6
 810faec:	d106      	bne.n	810fafc <_printf_common+0x48>
 810faee:	f104 0a19 	add.w	sl, r4, #25
 810faf2:	68e3      	ldr	r3, [r4, #12]
 810faf4:	6832      	ldr	r2, [r6, #0]
 810faf6:	1a9b      	subs	r3, r3, r2
 810faf8:	42ab      	cmp	r3, r5
 810fafa:	dc26      	bgt.n	810fb4a <_printf_common+0x96>
 810fafc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810fb00:	1e13      	subs	r3, r2, #0
 810fb02:	6822      	ldr	r2, [r4, #0]
 810fb04:	bf18      	it	ne
 810fb06:	2301      	movne	r3, #1
 810fb08:	0692      	lsls	r2, r2, #26
 810fb0a:	d42b      	bmi.n	810fb64 <_printf_common+0xb0>
 810fb0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810fb10:	4649      	mov	r1, r9
 810fb12:	4638      	mov	r0, r7
 810fb14:	47c0      	blx	r8
 810fb16:	3001      	adds	r0, #1
 810fb18:	d01e      	beq.n	810fb58 <_printf_common+0xa4>
 810fb1a:	6823      	ldr	r3, [r4, #0]
 810fb1c:	68e5      	ldr	r5, [r4, #12]
 810fb1e:	6832      	ldr	r2, [r6, #0]
 810fb20:	f003 0306 	and.w	r3, r3, #6
 810fb24:	2b04      	cmp	r3, #4
 810fb26:	bf08      	it	eq
 810fb28:	1aad      	subeq	r5, r5, r2
 810fb2a:	68a3      	ldr	r3, [r4, #8]
 810fb2c:	6922      	ldr	r2, [r4, #16]
 810fb2e:	bf0c      	ite	eq
 810fb30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810fb34:	2500      	movne	r5, #0
 810fb36:	4293      	cmp	r3, r2
 810fb38:	bfc4      	itt	gt
 810fb3a:	1a9b      	subgt	r3, r3, r2
 810fb3c:	18ed      	addgt	r5, r5, r3
 810fb3e:	2600      	movs	r6, #0
 810fb40:	341a      	adds	r4, #26
 810fb42:	42b5      	cmp	r5, r6
 810fb44:	d11a      	bne.n	810fb7c <_printf_common+0xc8>
 810fb46:	2000      	movs	r0, #0
 810fb48:	e008      	b.n	810fb5c <_printf_common+0xa8>
 810fb4a:	2301      	movs	r3, #1
 810fb4c:	4652      	mov	r2, sl
 810fb4e:	4649      	mov	r1, r9
 810fb50:	4638      	mov	r0, r7
 810fb52:	47c0      	blx	r8
 810fb54:	3001      	adds	r0, #1
 810fb56:	d103      	bne.n	810fb60 <_printf_common+0xac>
 810fb58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810fb5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810fb60:	3501      	adds	r5, #1
 810fb62:	e7c6      	b.n	810faf2 <_printf_common+0x3e>
 810fb64:	18e1      	adds	r1, r4, r3
 810fb66:	1c5a      	adds	r2, r3, #1
 810fb68:	2030      	movs	r0, #48	; 0x30
 810fb6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810fb6e:	4422      	add	r2, r4
 810fb70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810fb74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810fb78:	3302      	adds	r3, #2
 810fb7a:	e7c7      	b.n	810fb0c <_printf_common+0x58>
 810fb7c:	2301      	movs	r3, #1
 810fb7e:	4622      	mov	r2, r4
 810fb80:	4649      	mov	r1, r9
 810fb82:	4638      	mov	r0, r7
 810fb84:	47c0      	blx	r8
 810fb86:	3001      	adds	r0, #1
 810fb88:	d0e6      	beq.n	810fb58 <_printf_common+0xa4>
 810fb8a:	3601      	adds	r6, #1
 810fb8c:	e7d9      	b.n	810fb42 <_printf_common+0x8e>
	...

0810fb90 <_printf_i>:
 810fb90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810fb94:	460c      	mov	r4, r1
 810fb96:	4691      	mov	r9, r2
 810fb98:	7e27      	ldrb	r7, [r4, #24]
 810fb9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 810fb9c:	2f78      	cmp	r7, #120	; 0x78
 810fb9e:	4680      	mov	r8, r0
 810fba0:	469a      	mov	sl, r3
 810fba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810fba6:	d807      	bhi.n	810fbb8 <_printf_i+0x28>
 810fba8:	2f62      	cmp	r7, #98	; 0x62
 810fbaa:	d80a      	bhi.n	810fbc2 <_printf_i+0x32>
 810fbac:	2f00      	cmp	r7, #0
 810fbae:	f000 80d8 	beq.w	810fd62 <_printf_i+0x1d2>
 810fbb2:	2f58      	cmp	r7, #88	; 0x58
 810fbb4:	f000 80a3 	beq.w	810fcfe <_printf_i+0x16e>
 810fbb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810fbbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810fbc0:	e03a      	b.n	810fc38 <_printf_i+0xa8>
 810fbc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810fbc6:	2b15      	cmp	r3, #21
 810fbc8:	d8f6      	bhi.n	810fbb8 <_printf_i+0x28>
 810fbca:	a001      	add	r0, pc, #4	; (adr r0, 810fbd0 <_printf_i+0x40>)
 810fbcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 810fbd0:	0810fc29 	.word	0x0810fc29
 810fbd4:	0810fc3d 	.word	0x0810fc3d
 810fbd8:	0810fbb9 	.word	0x0810fbb9
 810fbdc:	0810fbb9 	.word	0x0810fbb9
 810fbe0:	0810fbb9 	.word	0x0810fbb9
 810fbe4:	0810fbb9 	.word	0x0810fbb9
 810fbe8:	0810fc3d 	.word	0x0810fc3d
 810fbec:	0810fbb9 	.word	0x0810fbb9
 810fbf0:	0810fbb9 	.word	0x0810fbb9
 810fbf4:	0810fbb9 	.word	0x0810fbb9
 810fbf8:	0810fbb9 	.word	0x0810fbb9
 810fbfc:	0810fd49 	.word	0x0810fd49
 810fc00:	0810fc6d 	.word	0x0810fc6d
 810fc04:	0810fd2b 	.word	0x0810fd2b
 810fc08:	0810fbb9 	.word	0x0810fbb9
 810fc0c:	0810fbb9 	.word	0x0810fbb9
 810fc10:	0810fd6b 	.word	0x0810fd6b
 810fc14:	0810fbb9 	.word	0x0810fbb9
 810fc18:	0810fc6d 	.word	0x0810fc6d
 810fc1c:	0810fbb9 	.word	0x0810fbb9
 810fc20:	0810fbb9 	.word	0x0810fbb9
 810fc24:	0810fd33 	.word	0x0810fd33
 810fc28:	680b      	ldr	r3, [r1, #0]
 810fc2a:	1d1a      	adds	r2, r3, #4
 810fc2c:	681b      	ldr	r3, [r3, #0]
 810fc2e:	600a      	str	r2, [r1, #0]
 810fc30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810fc34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810fc38:	2301      	movs	r3, #1
 810fc3a:	e0a3      	b.n	810fd84 <_printf_i+0x1f4>
 810fc3c:	6825      	ldr	r5, [r4, #0]
 810fc3e:	6808      	ldr	r0, [r1, #0]
 810fc40:	062e      	lsls	r6, r5, #24
 810fc42:	f100 0304 	add.w	r3, r0, #4
 810fc46:	d50a      	bpl.n	810fc5e <_printf_i+0xce>
 810fc48:	6805      	ldr	r5, [r0, #0]
 810fc4a:	600b      	str	r3, [r1, #0]
 810fc4c:	2d00      	cmp	r5, #0
 810fc4e:	da03      	bge.n	810fc58 <_printf_i+0xc8>
 810fc50:	232d      	movs	r3, #45	; 0x2d
 810fc52:	426d      	negs	r5, r5
 810fc54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810fc58:	485e      	ldr	r0, [pc, #376]	; (810fdd4 <_printf_i+0x244>)
 810fc5a:	230a      	movs	r3, #10
 810fc5c:	e019      	b.n	810fc92 <_printf_i+0x102>
 810fc5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 810fc62:	6805      	ldr	r5, [r0, #0]
 810fc64:	600b      	str	r3, [r1, #0]
 810fc66:	bf18      	it	ne
 810fc68:	b22d      	sxthne	r5, r5
 810fc6a:	e7ef      	b.n	810fc4c <_printf_i+0xbc>
 810fc6c:	680b      	ldr	r3, [r1, #0]
 810fc6e:	6825      	ldr	r5, [r4, #0]
 810fc70:	1d18      	adds	r0, r3, #4
 810fc72:	6008      	str	r0, [r1, #0]
 810fc74:	0628      	lsls	r0, r5, #24
 810fc76:	d501      	bpl.n	810fc7c <_printf_i+0xec>
 810fc78:	681d      	ldr	r5, [r3, #0]
 810fc7a:	e002      	b.n	810fc82 <_printf_i+0xf2>
 810fc7c:	0669      	lsls	r1, r5, #25
 810fc7e:	d5fb      	bpl.n	810fc78 <_printf_i+0xe8>
 810fc80:	881d      	ldrh	r5, [r3, #0]
 810fc82:	4854      	ldr	r0, [pc, #336]	; (810fdd4 <_printf_i+0x244>)
 810fc84:	2f6f      	cmp	r7, #111	; 0x6f
 810fc86:	bf0c      	ite	eq
 810fc88:	2308      	moveq	r3, #8
 810fc8a:	230a      	movne	r3, #10
 810fc8c:	2100      	movs	r1, #0
 810fc8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810fc92:	6866      	ldr	r6, [r4, #4]
 810fc94:	60a6      	str	r6, [r4, #8]
 810fc96:	2e00      	cmp	r6, #0
 810fc98:	bfa2      	ittt	ge
 810fc9a:	6821      	ldrge	r1, [r4, #0]
 810fc9c:	f021 0104 	bicge.w	r1, r1, #4
 810fca0:	6021      	strge	r1, [r4, #0]
 810fca2:	b90d      	cbnz	r5, 810fca8 <_printf_i+0x118>
 810fca4:	2e00      	cmp	r6, #0
 810fca6:	d04d      	beq.n	810fd44 <_printf_i+0x1b4>
 810fca8:	4616      	mov	r6, r2
 810fcaa:	fbb5 f1f3 	udiv	r1, r5, r3
 810fcae:	fb03 5711 	mls	r7, r3, r1, r5
 810fcb2:	5dc7      	ldrb	r7, [r0, r7]
 810fcb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810fcb8:	462f      	mov	r7, r5
 810fcba:	42bb      	cmp	r3, r7
 810fcbc:	460d      	mov	r5, r1
 810fcbe:	d9f4      	bls.n	810fcaa <_printf_i+0x11a>
 810fcc0:	2b08      	cmp	r3, #8
 810fcc2:	d10b      	bne.n	810fcdc <_printf_i+0x14c>
 810fcc4:	6823      	ldr	r3, [r4, #0]
 810fcc6:	07df      	lsls	r7, r3, #31
 810fcc8:	d508      	bpl.n	810fcdc <_printf_i+0x14c>
 810fcca:	6923      	ldr	r3, [r4, #16]
 810fccc:	6861      	ldr	r1, [r4, #4]
 810fcce:	4299      	cmp	r1, r3
 810fcd0:	bfde      	ittt	le
 810fcd2:	2330      	movle	r3, #48	; 0x30
 810fcd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 810fcd8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 810fcdc:	1b92      	subs	r2, r2, r6
 810fcde:	6122      	str	r2, [r4, #16]
 810fce0:	f8cd a000 	str.w	sl, [sp]
 810fce4:	464b      	mov	r3, r9
 810fce6:	aa03      	add	r2, sp, #12
 810fce8:	4621      	mov	r1, r4
 810fcea:	4640      	mov	r0, r8
 810fcec:	f7ff fee2 	bl	810fab4 <_printf_common>
 810fcf0:	3001      	adds	r0, #1
 810fcf2:	d14c      	bne.n	810fd8e <_printf_i+0x1fe>
 810fcf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810fcf8:	b004      	add	sp, #16
 810fcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810fcfe:	4835      	ldr	r0, [pc, #212]	; (810fdd4 <_printf_i+0x244>)
 810fd00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810fd04:	6823      	ldr	r3, [r4, #0]
 810fd06:	680e      	ldr	r6, [r1, #0]
 810fd08:	061f      	lsls	r7, r3, #24
 810fd0a:	f856 5b04 	ldr.w	r5, [r6], #4
 810fd0e:	600e      	str	r6, [r1, #0]
 810fd10:	d514      	bpl.n	810fd3c <_printf_i+0x1ac>
 810fd12:	07d9      	lsls	r1, r3, #31
 810fd14:	bf44      	itt	mi
 810fd16:	f043 0320 	orrmi.w	r3, r3, #32
 810fd1a:	6023      	strmi	r3, [r4, #0]
 810fd1c:	b91d      	cbnz	r5, 810fd26 <_printf_i+0x196>
 810fd1e:	6823      	ldr	r3, [r4, #0]
 810fd20:	f023 0320 	bic.w	r3, r3, #32
 810fd24:	6023      	str	r3, [r4, #0]
 810fd26:	2310      	movs	r3, #16
 810fd28:	e7b0      	b.n	810fc8c <_printf_i+0xfc>
 810fd2a:	6823      	ldr	r3, [r4, #0]
 810fd2c:	f043 0320 	orr.w	r3, r3, #32
 810fd30:	6023      	str	r3, [r4, #0]
 810fd32:	2378      	movs	r3, #120	; 0x78
 810fd34:	4828      	ldr	r0, [pc, #160]	; (810fdd8 <_printf_i+0x248>)
 810fd36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810fd3a:	e7e3      	b.n	810fd04 <_printf_i+0x174>
 810fd3c:	065e      	lsls	r6, r3, #25
 810fd3e:	bf48      	it	mi
 810fd40:	b2ad      	uxthmi	r5, r5
 810fd42:	e7e6      	b.n	810fd12 <_printf_i+0x182>
 810fd44:	4616      	mov	r6, r2
 810fd46:	e7bb      	b.n	810fcc0 <_printf_i+0x130>
 810fd48:	680b      	ldr	r3, [r1, #0]
 810fd4a:	6826      	ldr	r6, [r4, #0]
 810fd4c:	6960      	ldr	r0, [r4, #20]
 810fd4e:	1d1d      	adds	r5, r3, #4
 810fd50:	600d      	str	r5, [r1, #0]
 810fd52:	0635      	lsls	r5, r6, #24
 810fd54:	681b      	ldr	r3, [r3, #0]
 810fd56:	d501      	bpl.n	810fd5c <_printf_i+0x1cc>
 810fd58:	6018      	str	r0, [r3, #0]
 810fd5a:	e002      	b.n	810fd62 <_printf_i+0x1d2>
 810fd5c:	0671      	lsls	r1, r6, #25
 810fd5e:	d5fb      	bpl.n	810fd58 <_printf_i+0x1c8>
 810fd60:	8018      	strh	r0, [r3, #0]
 810fd62:	2300      	movs	r3, #0
 810fd64:	6123      	str	r3, [r4, #16]
 810fd66:	4616      	mov	r6, r2
 810fd68:	e7ba      	b.n	810fce0 <_printf_i+0x150>
 810fd6a:	680b      	ldr	r3, [r1, #0]
 810fd6c:	1d1a      	adds	r2, r3, #4
 810fd6e:	600a      	str	r2, [r1, #0]
 810fd70:	681e      	ldr	r6, [r3, #0]
 810fd72:	6862      	ldr	r2, [r4, #4]
 810fd74:	2100      	movs	r1, #0
 810fd76:	4630      	mov	r0, r6
 810fd78:	f7f0 faca 	bl	8100310 <memchr>
 810fd7c:	b108      	cbz	r0, 810fd82 <_printf_i+0x1f2>
 810fd7e:	1b80      	subs	r0, r0, r6
 810fd80:	6060      	str	r0, [r4, #4]
 810fd82:	6863      	ldr	r3, [r4, #4]
 810fd84:	6123      	str	r3, [r4, #16]
 810fd86:	2300      	movs	r3, #0
 810fd88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810fd8c:	e7a8      	b.n	810fce0 <_printf_i+0x150>
 810fd8e:	6923      	ldr	r3, [r4, #16]
 810fd90:	4632      	mov	r2, r6
 810fd92:	4649      	mov	r1, r9
 810fd94:	4640      	mov	r0, r8
 810fd96:	47d0      	blx	sl
 810fd98:	3001      	adds	r0, #1
 810fd9a:	d0ab      	beq.n	810fcf4 <_printf_i+0x164>
 810fd9c:	6823      	ldr	r3, [r4, #0]
 810fd9e:	079b      	lsls	r3, r3, #30
 810fda0:	d413      	bmi.n	810fdca <_printf_i+0x23a>
 810fda2:	68e0      	ldr	r0, [r4, #12]
 810fda4:	9b03      	ldr	r3, [sp, #12]
 810fda6:	4298      	cmp	r0, r3
 810fda8:	bfb8      	it	lt
 810fdaa:	4618      	movlt	r0, r3
 810fdac:	e7a4      	b.n	810fcf8 <_printf_i+0x168>
 810fdae:	2301      	movs	r3, #1
 810fdb0:	4632      	mov	r2, r6
 810fdb2:	4649      	mov	r1, r9
 810fdb4:	4640      	mov	r0, r8
 810fdb6:	47d0      	blx	sl
 810fdb8:	3001      	adds	r0, #1
 810fdba:	d09b      	beq.n	810fcf4 <_printf_i+0x164>
 810fdbc:	3501      	adds	r5, #1
 810fdbe:	68e3      	ldr	r3, [r4, #12]
 810fdc0:	9903      	ldr	r1, [sp, #12]
 810fdc2:	1a5b      	subs	r3, r3, r1
 810fdc4:	42ab      	cmp	r3, r5
 810fdc6:	dcf2      	bgt.n	810fdae <_printf_i+0x21e>
 810fdc8:	e7eb      	b.n	810fda2 <_printf_i+0x212>
 810fdca:	2500      	movs	r5, #0
 810fdcc:	f104 0619 	add.w	r6, r4, #25
 810fdd0:	e7f5      	b.n	810fdbe <_printf_i+0x22e>
 810fdd2:	bf00      	nop
 810fdd4:	08113222 	.word	0x08113222
 810fdd8:	08113233 	.word	0x08113233

0810fddc <iprintf>:
 810fddc:	b40f      	push	{r0, r1, r2, r3}
 810fdde:	4b0a      	ldr	r3, [pc, #40]	; (810fe08 <iprintf+0x2c>)
 810fde0:	b513      	push	{r0, r1, r4, lr}
 810fde2:	681c      	ldr	r4, [r3, #0]
 810fde4:	b124      	cbz	r4, 810fdf0 <iprintf+0x14>
 810fde6:	69a3      	ldr	r3, [r4, #24]
 810fde8:	b913      	cbnz	r3, 810fdf0 <iprintf+0x14>
 810fdea:	4620      	mov	r0, r4
 810fdec:	f001 fa4a 	bl	8111284 <__sinit>
 810fdf0:	ab05      	add	r3, sp, #20
 810fdf2:	9a04      	ldr	r2, [sp, #16]
 810fdf4:	68a1      	ldr	r1, [r4, #8]
 810fdf6:	9301      	str	r3, [sp, #4]
 810fdf8:	4620      	mov	r0, r4
 810fdfa:	f002 f913 	bl	8112024 <_vfiprintf_r>
 810fdfe:	b002      	add	sp, #8
 810fe00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810fe04:	b004      	add	sp, #16
 810fe06:	4770      	bx	lr
 810fe08:	10000038 	.word	0x10000038

0810fe0c <_puts_r>:
 810fe0c:	b570      	push	{r4, r5, r6, lr}
 810fe0e:	460e      	mov	r6, r1
 810fe10:	4605      	mov	r5, r0
 810fe12:	b118      	cbz	r0, 810fe1c <_puts_r+0x10>
 810fe14:	6983      	ldr	r3, [r0, #24]
 810fe16:	b90b      	cbnz	r3, 810fe1c <_puts_r+0x10>
 810fe18:	f001 fa34 	bl	8111284 <__sinit>
 810fe1c:	69ab      	ldr	r3, [r5, #24]
 810fe1e:	68ac      	ldr	r4, [r5, #8]
 810fe20:	b913      	cbnz	r3, 810fe28 <_puts_r+0x1c>
 810fe22:	4628      	mov	r0, r5
 810fe24:	f001 fa2e 	bl	8111284 <__sinit>
 810fe28:	4b2c      	ldr	r3, [pc, #176]	; (810fedc <_puts_r+0xd0>)
 810fe2a:	429c      	cmp	r4, r3
 810fe2c:	d120      	bne.n	810fe70 <_puts_r+0x64>
 810fe2e:	686c      	ldr	r4, [r5, #4]
 810fe30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810fe32:	07db      	lsls	r3, r3, #31
 810fe34:	d405      	bmi.n	810fe42 <_puts_r+0x36>
 810fe36:	89a3      	ldrh	r3, [r4, #12]
 810fe38:	0598      	lsls	r0, r3, #22
 810fe3a:	d402      	bmi.n	810fe42 <_puts_r+0x36>
 810fe3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810fe3e:	f001 fac4 	bl	81113ca <__retarget_lock_acquire_recursive>
 810fe42:	89a3      	ldrh	r3, [r4, #12]
 810fe44:	0719      	lsls	r1, r3, #28
 810fe46:	d51d      	bpl.n	810fe84 <_puts_r+0x78>
 810fe48:	6923      	ldr	r3, [r4, #16]
 810fe4a:	b1db      	cbz	r3, 810fe84 <_puts_r+0x78>
 810fe4c:	3e01      	subs	r6, #1
 810fe4e:	68a3      	ldr	r3, [r4, #8]
 810fe50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810fe54:	3b01      	subs	r3, #1
 810fe56:	60a3      	str	r3, [r4, #8]
 810fe58:	bb39      	cbnz	r1, 810feaa <_puts_r+0x9e>
 810fe5a:	2b00      	cmp	r3, #0
 810fe5c:	da38      	bge.n	810fed0 <_puts_r+0xc4>
 810fe5e:	4622      	mov	r2, r4
 810fe60:	210a      	movs	r1, #10
 810fe62:	4628      	mov	r0, r5
 810fe64:	f000 f95a 	bl	811011c <__swbuf_r>
 810fe68:	3001      	adds	r0, #1
 810fe6a:	d011      	beq.n	810fe90 <_puts_r+0x84>
 810fe6c:	250a      	movs	r5, #10
 810fe6e:	e011      	b.n	810fe94 <_puts_r+0x88>
 810fe70:	4b1b      	ldr	r3, [pc, #108]	; (810fee0 <_puts_r+0xd4>)
 810fe72:	429c      	cmp	r4, r3
 810fe74:	d101      	bne.n	810fe7a <_puts_r+0x6e>
 810fe76:	68ac      	ldr	r4, [r5, #8]
 810fe78:	e7da      	b.n	810fe30 <_puts_r+0x24>
 810fe7a:	4b1a      	ldr	r3, [pc, #104]	; (810fee4 <_puts_r+0xd8>)
 810fe7c:	429c      	cmp	r4, r3
 810fe7e:	bf08      	it	eq
 810fe80:	68ec      	ldreq	r4, [r5, #12]
 810fe82:	e7d5      	b.n	810fe30 <_puts_r+0x24>
 810fe84:	4621      	mov	r1, r4
 810fe86:	4628      	mov	r0, r5
 810fe88:	f000 f99a 	bl	81101c0 <__swsetup_r>
 810fe8c:	2800      	cmp	r0, #0
 810fe8e:	d0dd      	beq.n	810fe4c <_puts_r+0x40>
 810fe90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 810fe94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810fe96:	07da      	lsls	r2, r3, #31
 810fe98:	d405      	bmi.n	810fea6 <_puts_r+0x9a>
 810fe9a:	89a3      	ldrh	r3, [r4, #12]
 810fe9c:	059b      	lsls	r3, r3, #22
 810fe9e:	d402      	bmi.n	810fea6 <_puts_r+0x9a>
 810fea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810fea2:	f001 fa94 	bl	81113ce <__retarget_lock_release_recursive>
 810fea6:	4628      	mov	r0, r5
 810fea8:	bd70      	pop	{r4, r5, r6, pc}
 810feaa:	2b00      	cmp	r3, #0
 810feac:	da04      	bge.n	810feb8 <_puts_r+0xac>
 810feae:	69a2      	ldr	r2, [r4, #24]
 810feb0:	429a      	cmp	r2, r3
 810feb2:	dc06      	bgt.n	810fec2 <_puts_r+0xb6>
 810feb4:	290a      	cmp	r1, #10
 810feb6:	d004      	beq.n	810fec2 <_puts_r+0xb6>
 810feb8:	6823      	ldr	r3, [r4, #0]
 810feba:	1c5a      	adds	r2, r3, #1
 810febc:	6022      	str	r2, [r4, #0]
 810febe:	7019      	strb	r1, [r3, #0]
 810fec0:	e7c5      	b.n	810fe4e <_puts_r+0x42>
 810fec2:	4622      	mov	r2, r4
 810fec4:	4628      	mov	r0, r5
 810fec6:	f000 f929 	bl	811011c <__swbuf_r>
 810feca:	3001      	adds	r0, #1
 810fecc:	d1bf      	bne.n	810fe4e <_puts_r+0x42>
 810fece:	e7df      	b.n	810fe90 <_puts_r+0x84>
 810fed0:	6823      	ldr	r3, [r4, #0]
 810fed2:	250a      	movs	r5, #10
 810fed4:	1c5a      	adds	r2, r3, #1
 810fed6:	6022      	str	r2, [r4, #0]
 810fed8:	701d      	strb	r5, [r3, #0]
 810feda:	e7db      	b.n	810fe94 <_puts_r+0x88>
 810fedc:	081133fc 	.word	0x081133fc
 810fee0:	0811341c 	.word	0x0811341c
 810fee4:	081133dc 	.word	0x081133dc

0810fee8 <puts>:
 810fee8:	4b02      	ldr	r3, [pc, #8]	; (810fef4 <puts+0xc>)
 810feea:	4601      	mov	r1, r0
 810feec:	6818      	ldr	r0, [r3, #0]
 810feee:	f7ff bf8d 	b.w	810fe0c <_puts_r>
 810fef2:	bf00      	nop
 810fef4:	10000038 	.word	0x10000038

0810fef8 <_raise_r>:
 810fef8:	291f      	cmp	r1, #31
 810fefa:	b538      	push	{r3, r4, r5, lr}
 810fefc:	4604      	mov	r4, r0
 810fefe:	460d      	mov	r5, r1
 810ff00:	d904      	bls.n	810ff0c <_raise_r+0x14>
 810ff02:	2316      	movs	r3, #22
 810ff04:	6003      	str	r3, [r0, #0]
 810ff06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810ff0a:	bd38      	pop	{r3, r4, r5, pc}
 810ff0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810ff0e:	b112      	cbz	r2, 810ff16 <_raise_r+0x1e>
 810ff10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ff14:	b94b      	cbnz	r3, 810ff2a <_raise_r+0x32>
 810ff16:	4620      	mov	r0, r4
 810ff18:	f000 f830 	bl	810ff7c <_getpid_r>
 810ff1c:	462a      	mov	r2, r5
 810ff1e:	4601      	mov	r1, r0
 810ff20:	4620      	mov	r0, r4
 810ff22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ff26:	f000 b817 	b.w	810ff58 <_kill_r>
 810ff2a:	2b01      	cmp	r3, #1
 810ff2c:	d00a      	beq.n	810ff44 <_raise_r+0x4c>
 810ff2e:	1c59      	adds	r1, r3, #1
 810ff30:	d103      	bne.n	810ff3a <_raise_r+0x42>
 810ff32:	2316      	movs	r3, #22
 810ff34:	6003      	str	r3, [r0, #0]
 810ff36:	2001      	movs	r0, #1
 810ff38:	e7e7      	b.n	810ff0a <_raise_r+0x12>
 810ff3a:	2400      	movs	r4, #0
 810ff3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810ff40:	4628      	mov	r0, r5
 810ff42:	4798      	blx	r3
 810ff44:	2000      	movs	r0, #0
 810ff46:	e7e0      	b.n	810ff0a <_raise_r+0x12>

0810ff48 <raise>:
 810ff48:	4b02      	ldr	r3, [pc, #8]	; (810ff54 <raise+0xc>)
 810ff4a:	4601      	mov	r1, r0
 810ff4c:	6818      	ldr	r0, [r3, #0]
 810ff4e:	f7ff bfd3 	b.w	810fef8 <_raise_r>
 810ff52:	bf00      	nop
 810ff54:	10000038 	.word	0x10000038

0810ff58 <_kill_r>:
 810ff58:	b538      	push	{r3, r4, r5, lr}
 810ff5a:	4d07      	ldr	r5, [pc, #28]	; (810ff78 <_kill_r+0x20>)
 810ff5c:	2300      	movs	r3, #0
 810ff5e:	4604      	mov	r4, r0
 810ff60:	4608      	mov	r0, r1
 810ff62:	4611      	mov	r1, r2
 810ff64:	602b      	str	r3, [r5, #0]
 810ff66:	f7f1 ff3f 	bl	8101de8 <_kill>
 810ff6a:	1c43      	adds	r3, r0, #1
 810ff6c:	d102      	bne.n	810ff74 <_kill_r+0x1c>
 810ff6e:	682b      	ldr	r3, [r5, #0]
 810ff70:	b103      	cbz	r3, 810ff74 <_kill_r+0x1c>
 810ff72:	6023      	str	r3, [r4, #0]
 810ff74:	bd38      	pop	{r3, r4, r5, pc}
 810ff76:	bf00      	nop
 810ff78:	1000a384 	.word	0x1000a384

0810ff7c <_getpid_r>:
 810ff7c:	f7f1 bf2c 	b.w	8101dd8 <_getpid>

0810ff80 <siprintf>:
 810ff80:	b40e      	push	{r1, r2, r3}
 810ff82:	b500      	push	{lr}
 810ff84:	b09c      	sub	sp, #112	; 0x70
 810ff86:	ab1d      	add	r3, sp, #116	; 0x74
 810ff88:	9002      	str	r0, [sp, #8]
 810ff8a:	9006      	str	r0, [sp, #24]
 810ff8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810ff90:	4809      	ldr	r0, [pc, #36]	; (810ffb8 <siprintf+0x38>)
 810ff92:	9107      	str	r1, [sp, #28]
 810ff94:	9104      	str	r1, [sp, #16]
 810ff96:	4909      	ldr	r1, [pc, #36]	; (810ffbc <siprintf+0x3c>)
 810ff98:	f853 2b04 	ldr.w	r2, [r3], #4
 810ff9c:	9105      	str	r1, [sp, #20]
 810ff9e:	6800      	ldr	r0, [r0, #0]
 810ffa0:	9301      	str	r3, [sp, #4]
 810ffa2:	a902      	add	r1, sp, #8
 810ffa4:	f001 ff14 	bl	8111dd0 <_svfiprintf_r>
 810ffa8:	9b02      	ldr	r3, [sp, #8]
 810ffaa:	2200      	movs	r2, #0
 810ffac:	701a      	strb	r2, [r3, #0]
 810ffae:	b01c      	add	sp, #112	; 0x70
 810ffb0:	f85d eb04 	ldr.w	lr, [sp], #4
 810ffb4:	b003      	add	sp, #12
 810ffb6:	4770      	bx	lr
 810ffb8:	10000038 	.word	0x10000038
 810ffbc:	ffff0208 	.word	0xffff0208

0810ffc0 <_strtol_l.isra.0>:
 810ffc0:	2b01      	cmp	r3, #1
 810ffc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ffc6:	d001      	beq.n	810ffcc <_strtol_l.isra.0+0xc>
 810ffc8:	2b24      	cmp	r3, #36	; 0x24
 810ffca:	d906      	bls.n	810ffda <_strtol_l.isra.0+0x1a>
 810ffcc:	f7ff fa5c 	bl	810f488 <__errno>
 810ffd0:	2316      	movs	r3, #22
 810ffd2:	6003      	str	r3, [r0, #0]
 810ffd4:	2000      	movs	r0, #0
 810ffd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ffda:	4f3a      	ldr	r7, [pc, #232]	; (81100c4 <_strtol_l.isra.0+0x104>)
 810ffdc:	468e      	mov	lr, r1
 810ffde:	4676      	mov	r6, lr
 810ffe0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 810ffe4:	5de5      	ldrb	r5, [r4, r7]
 810ffe6:	f015 0508 	ands.w	r5, r5, #8
 810ffea:	d1f8      	bne.n	810ffde <_strtol_l.isra.0+0x1e>
 810ffec:	2c2d      	cmp	r4, #45	; 0x2d
 810ffee:	d134      	bne.n	811005a <_strtol_l.isra.0+0x9a>
 810fff0:	f89e 4000 	ldrb.w	r4, [lr]
 810fff4:	f04f 0801 	mov.w	r8, #1
 810fff8:	f106 0e02 	add.w	lr, r6, #2
 810fffc:	2b00      	cmp	r3, #0
 810fffe:	d05c      	beq.n	81100ba <_strtol_l.isra.0+0xfa>
 8110000:	2b10      	cmp	r3, #16
 8110002:	d10c      	bne.n	811001e <_strtol_l.isra.0+0x5e>
 8110004:	2c30      	cmp	r4, #48	; 0x30
 8110006:	d10a      	bne.n	811001e <_strtol_l.isra.0+0x5e>
 8110008:	f89e 4000 	ldrb.w	r4, [lr]
 811000c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8110010:	2c58      	cmp	r4, #88	; 0x58
 8110012:	d14d      	bne.n	81100b0 <_strtol_l.isra.0+0xf0>
 8110014:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8110018:	2310      	movs	r3, #16
 811001a:	f10e 0e02 	add.w	lr, lr, #2
 811001e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8110022:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8110026:	2600      	movs	r6, #0
 8110028:	fbbc f9f3 	udiv	r9, ip, r3
 811002c:	4635      	mov	r5, r6
 811002e:	fb03 ca19 	mls	sl, r3, r9, ip
 8110032:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8110036:	2f09      	cmp	r7, #9
 8110038:	d818      	bhi.n	811006c <_strtol_l.isra.0+0xac>
 811003a:	463c      	mov	r4, r7
 811003c:	42a3      	cmp	r3, r4
 811003e:	dd24      	ble.n	811008a <_strtol_l.isra.0+0xca>
 8110040:	2e00      	cmp	r6, #0
 8110042:	db1f      	blt.n	8110084 <_strtol_l.isra.0+0xc4>
 8110044:	45a9      	cmp	r9, r5
 8110046:	d31d      	bcc.n	8110084 <_strtol_l.isra.0+0xc4>
 8110048:	d101      	bne.n	811004e <_strtol_l.isra.0+0x8e>
 811004a:	45a2      	cmp	sl, r4
 811004c:	db1a      	blt.n	8110084 <_strtol_l.isra.0+0xc4>
 811004e:	fb05 4503 	mla	r5, r5, r3, r4
 8110052:	2601      	movs	r6, #1
 8110054:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8110058:	e7eb      	b.n	8110032 <_strtol_l.isra.0+0x72>
 811005a:	2c2b      	cmp	r4, #43	; 0x2b
 811005c:	bf08      	it	eq
 811005e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8110062:	46a8      	mov	r8, r5
 8110064:	bf08      	it	eq
 8110066:	f106 0e02 	addeq.w	lr, r6, #2
 811006a:	e7c7      	b.n	810fffc <_strtol_l.isra.0+0x3c>
 811006c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8110070:	2f19      	cmp	r7, #25
 8110072:	d801      	bhi.n	8110078 <_strtol_l.isra.0+0xb8>
 8110074:	3c37      	subs	r4, #55	; 0x37
 8110076:	e7e1      	b.n	811003c <_strtol_l.isra.0+0x7c>
 8110078:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 811007c:	2f19      	cmp	r7, #25
 811007e:	d804      	bhi.n	811008a <_strtol_l.isra.0+0xca>
 8110080:	3c57      	subs	r4, #87	; 0x57
 8110082:	e7db      	b.n	811003c <_strtol_l.isra.0+0x7c>
 8110084:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8110088:	e7e4      	b.n	8110054 <_strtol_l.isra.0+0x94>
 811008a:	2e00      	cmp	r6, #0
 811008c:	da05      	bge.n	811009a <_strtol_l.isra.0+0xda>
 811008e:	2322      	movs	r3, #34	; 0x22
 8110090:	6003      	str	r3, [r0, #0]
 8110092:	4665      	mov	r5, ip
 8110094:	b942      	cbnz	r2, 81100a8 <_strtol_l.isra.0+0xe8>
 8110096:	4628      	mov	r0, r5
 8110098:	e79d      	b.n	810ffd6 <_strtol_l.isra.0+0x16>
 811009a:	f1b8 0f00 	cmp.w	r8, #0
 811009e:	d000      	beq.n	81100a2 <_strtol_l.isra.0+0xe2>
 81100a0:	426d      	negs	r5, r5
 81100a2:	2a00      	cmp	r2, #0
 81100a4:	d0f7      	beq.n	8110096 <_strtol_l.isra.0+0xd6>
 81100a6:	b10e      	cbz	r6, 81100ac <_strtol_l.isra.0+0xec>
 81100a8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 81100ac:	6011      	str	r1, [r2, #0]
 81100ae:	e7f2      	b.n	8110096 <_strtol_l.isra.0+0xd6>
 81100b0:	2430      	movs	r4, #48	; 0x30
 81100b2:	2b00      	cmp	r3, #0
 81100b4:	d1b3      	bne.n	811001e <_strtol_l.isra.0+0x5e>
 81100b6:	2308      	movs	r3, #8
 81100b8:	e7b1      	b.n	811001e <_strtol_l.isra.0+0x5e>
 81100ba:	2c30      	cmp	r4, #48	; 0x30
 81100bc:	d0a4      	beq.n	8110008 <_strtol_l.isra.0+0x48>
 81100be:	230a      	movs	r3, #10
 81100c0:	e7ad      	b.n	811001e <_strtol_l.isra.0+0x5e>
 81100c2:	bf00      	nop
 81100c4:	08113245 	.word	0x08113245

081100c8 <strtol>:
 81100c8:	4613      	mov	r3, r2
 81100ca:	460a      	mov	r2, r1
 81100cc:	4601      	mov	r1, r0
 81100ce:	4802      	ldr	r0, [pc, #8]	; (81100d8 <strtol+0x10>)
 81100d0:	6800      	ldr	r0, [r0, #0]
 81100d2:	f7ff bf75 	b.w	810ffc0 <_strtol_l.isra.0>
 81100d6:	bf00      	nop
 81100d8:	10000038 	.word	0x10000038

081100dc <_vsiprintf_r>:
 81100dc:	b500      	push	{lr}
 81100de:	b09b      	sub	sp, #108	; 0x6c
 81100e0:	9100      	str	r1, [sp, #0]
 81100e2:	9104      	str	r1, [sp, #16]
 81100e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 81100e8:	9105      	str	r1, [sp, #20]
 81100ea:	9102      	str	r1, [sp, #8]
 81100ec:	4905      	ldr	r1, [pc, #20]	; (8110104 <_vsiprintf_r+0x28>)
 81100ee:	9103      	str	r1, [sp, #12]
 81100f0:	4669      	mov	r1, sp
 81100f2:	f001 fe6d 	bl	8111dd0 <_svfiprintf_r>
 81100f6:	9b00      	ldr	r3, [sp, #0]
 81100f8:	2200      	movs	r2, #0
 81100fa:	701a      	strb	r2, [r3, #0]
 81100fc:	b01b      	add	sp, #108	; 0x6c
 81100fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8110102:	bf00      	nop
 8110104:	ffff0208 	.word	0xffff0208

08110108 <vsiprintf>:
 8110108:	4613      	mov	r3, r2
 811010a:	460a      	mov	r2, r1
 811010c:	4601      	mov	r1, r0
 811010e:	4802      	ldr	r0, [pc, #8]	; (8110118 <vsiprintf+0x10>)
 8110110:	6800      	ldr	r0, [r0, #0]
 8110112:	f7ff bfe3 	b.w	81100dc <_vsiprintf_r>
 8110116:	bf00      	nop
 8110118:	10000038 	.word	0x10000038

0811011c <__swbuf_r>:
 811011c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811011e:	460e      	mov	r6, r1
 8110120:	4614      	mov	r4, r2
 8110122:	4605      	mov	r5, r0
 8110124:	b118      	cbz	r0, 811012e <__swbuf_r+0x12>
 8110126:	6983      	ldr	r3, [r0, #24]
 8110128:	b90b      	cbnz	r3, 811012e <__swbuf_r+0x12>
 811012a:	f001 f8ab 	bl	8111284 <__sinit>
 811012e:	4b21      	ldr	r3, [pc, #132]	; (81101b4 <__swbuf_r+0x98>)
 8110130:	429c      	cmp	r4, r3
 8110132:	d12b      	bne.n	811018c <__swbuf_r+0x70>
 8110134:	686c      	ldr	r4, [r5, #4]
 8110136:	69a3      	ldr	r3, [r4, #24]
 8110138:	60a3      	str	r3, [r4, #8]
 811013a:	89a3      	ldrh	r3, [r4, #12]
 811013c:	071a      	lsls	r2, r3, #28
 811013e:	d52f      	bpl.n	81101a0 <__swbuf_r+0x84>
 8110140:	6923      	ldr	r3, [r4, #16]
 8110142:	b36b      	cbz	r3, 81101a0 <__swbuf_r+0x84>
 8110144:	6923      	ldr	r3, [r4, #16]
 8110146:	6820      	ldr	r0, [r4, #0]
 8110148:	1ac0      	subs	r0, r0, r3
 811014a:	6963      	ldr	r3, [r4, #20]
 811014c:	b2f6      	uxtb	r6, r6
 811014e:	4283      	cmp	r3, r0
 8110150:	4637      	mov	r7, r6
 8110152:	dc04      	bgt.n	811015e <__swbuf_r+0x42>
 8110154:	4621      	mov	r1, r4
 8110156:	4628      	mov	r0, r5
 8110158:	f001 f800 	bl	811115c <_fflush_r>
 811015c:	bb30      	cbnz	r0, 81101ac <__swbuf_r+0x90>
 811015e:	68a3      	ldr	r3, [r4, #8]
 8110160:	3b01      	subs	r3, #1
 8110162:	60a3      	str	r3, [r4, #8]
 8110164:	6823      	ldr	r3, [r4, #0]
 8110166:	1c5a      	adds	r2, r3, #1
 8110168:	6022      	str	r2, [r4, #0]
 811016a:	701e      	strb	r6, [r3, #0]
 811016c:	6963      	ldr	r3, [r4, #20]
 811016e:	3001      	adds	r0, #1
 8110170:	4283      	cmp	r3, r0
 8110172:	d004      	beq.n	811017e <__swbuf_r+0x62>
 8110174:	89a3      	ldrh	r3, [r4, #12]
 8110176:	07db      	lsls	r3, r3, #31
 8110178:	d506      	bpl.n	8110188 <__swbuf_r+0x6c>
 811017a:	2e0a      	cmp	r6, #10
 811017c:	d104      	bne.n	8110188 <__swbuf_r+0x6c>
 811017e:	4621      	mov	r1, r4
 8110180:	4628      	mov	r0, r5
 8110182:	f000 ffeb 	bl	811115c <_fflush_r>
 8110186:	b988      	cbnz	r0, 81101ac <__swbuf_r+0x90>
 8110188:	4638      	mov	r0, r7
 811018a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811018c:	4b0a      	ldr	r3, [pc, #40]	; (81101b8 <__swbuf_r+0x9c>)
 811018e:	429c      	cmp	r4, r3
 8110190:	d101      	bne.n	8110196 <__swbuf_r+0x7a>
 8110192:	68ac      	ldr	r4, [r5, #8]
 8110194:	e7cf      	b.n	8110136 <__swbuf_r+0x1a>
 8110196:	4b09      	ldr	r3, [pc, #36]	; (81101bc <__swbuf_r+0xa0>)
 8110198:	429c      	cmp	r4, r3
 811019a:	bf08      	it	eq
 811019c:	68ec      	ldreq	r4, [r5, #12]
 811019e:	e7ca      	b.n	8110136 <__swbuf_r+0x1a>
 81101a0:	4621      	mov	r1, r4
 81101a2:	4628      	mov	r0, r5
 81101a4:	f000 f80c 	bl	81101c0 <__swsetup_r>
 81101a8:	2800      	cmp	r0, #0
 81101aa:	d0cb      	beq.n	8110144 <__swbuf_r+0x28>
 81101ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 81101b0:	e7ea      	b.n	8110188 <__swbuf_r+0x6c>
 81101b2:	bf00      	nop
 81101b4:	081133fc 	.word	0x081133fc
 81101b8:	0811341c 	.word	0x0811341c
 81101bc:	081133dc 	.word	0x081133dc

081101c0 <__swsetup_r>:
 81101c0:	4b32      	ldr	r3, [pc, #200]	; (811028c <__swsetup_r+0xcc>)
 81101c2:	b570      	push	{r4, r5, r6, lr}
 81101c4:	681d      	ldr	r5, [r3, #0]
 81101c6:	4606      	mov	r6, r0
 81101c8:	460c      	mov	r4, r1
 81101ca:	b125      	cbz	r5, 81101d6 <__swsetup_r+0x16>
 81101cc:	69ab      	ldr	r3, [r5, #24]
 81101ce:	b913      	cbnz	r3, 81101d6 <__swsetup_r+0x16>
 81101d0:	4628      	mov	r0, r5
 81101d2:	f001 f857 	bl	8111284 <__sinit>
 81101d6:	4b2e      	ldr	r3, [pc, #184]	; (8110290 <__swsetup_r+0xd0>)
 81101d8:	429c      	cmp	r4, r3
 81101da:	d10f      	bne.n	81101fc <__swsetup_r+0x3c>
 81101dc:	686c      	ldr	r4, [r5, #4]
 81101de:	89a3      	ldrh	r3, [r4, #12]
 81101e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81101e4:	0719      	lsls	r1, r3, #28
 81101e6:	d42c      	bmi.n	8110242 <__swsetup_r+0x82>
 81101e8:	06dd      	lsls	r5, r3, #27
 81101ea:	d411      	bmi.n	8110210 <__swsetup_r+0x50>
 81101ec:	2309      	movs	r3, #9
 81101ee:	6033      	str	r3, [r6, #0]
 81101f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 81101f4:	81a3      	strh	r3, [r4, #12]
 81101f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81101fa:	e03e      	b.n	811027a <__swsetup_r+0xba>
 81101fc:	4b25      	ldr	r3, [pc, #148]	; (8110294 <__swsetup_r+0xd4>)
 81101fe:	429c      	cmp	r4, r3
 8110200:	d101      	bne.n	8110206 <__swsetup_r+0x46>
 8110202:	68ac      	ldr	r4, [r5, #8]
 8110204:	e7eb      	b.n	81101de <__swsetup_r+0x1e>
 8110206:	4b24      	ldr	r3, [pc, #144]	; (8110298 <__swsetup_r+0xd8>)
 8110208:	429c      	cmp	r4, r3
 811020a:	bf08      	it	eq
 811020c:	68ec      	ldreq	r4, [r5, #12]
 811020e:	e7e6      	b.n	81101de <__swsetup_r+0x1e>
 8110210:	0758      	lsls	r0, r3, #29
 8110212:	d512      	bpl.n	811023a <__swsetup_r+0x7a>
 8110214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8110216:	b141      	cbz	r1, 811022a <__swsetup_r+0x6a>
 8110218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 811021c:	4299      	cmp	r1, r3
 811021e:	d002      	beq.n	8110226 <__swsetup_r+0x66>
 8110220:	4630      	mov	r0, r6
 8110222:	f001 fccf 	bl	8111bc4 <_free_r>
 8110226:	2300      	movs	r3, #0
 8110228:	6363      	str	r3, [r4, #52]	; 0x34
 811022a:	89a3      	ldrh	r3, [r4, #12]
 811022c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8110230:	81a3      	strh	r3, [r4, #12]
 8110232:	2300      	movs	r3, #0
 8110234:	6063      	str	r3, [r4, #4]
 8110236:	6923      	ldr	r3, [r4, #16]
 8110238:	6023      	str	r3, [r4, #0]
 811023a:	89a3      	ldrh	r3, [r4, #12]
 811023c:	f043 0308 	orr.w	r3, r3, #8
 8110240:	81a3      	strh	r3, [r4, #12]
 8110242:	6923      	ldr	r3, [r4, #16]
 8110244:	b94b      	cbnz	r3, 811025a <__swsetup_r+0x9a>
 8110246:	89a3      	ldrh	r3, [r4, #12]
 8110248:	f403 7320 	and.w	r3, r3, #640	; 0x280
 811024c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8110250:	d003      	beq.n	811025a <__swsetup_r+0x9a>
 8110252:	4621      	mov	r1, r4
 8110254:	4630      	mov	r0, r6
 8110256:	f001 f8df 	bl	8111418 <__smakebuf_r>
 811025a:	89a0      	ldrh	r0, [r4, #12]
 811025c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8110260:	f010 0301 	ands.w	r3, r0, #1
 8110264:	d00a      	beq.n	811027c <__swsetup_r+0xbc>
 8110266:	2300      	movs	r3, #0
 8110268:	60a3      	str	r3, [r4, #8]
 811026a:	6963      	ldr	r3, [r4, #20]
 811026c:	425b      	negs	r3, r3
 811026e:	61a3      	str	r3, [r4, #24]
 8110270:	6923      	ldr	r3, [r4, #16]
 8110272:	b943      	cbnz	r3, 8110286 <__swsetup_r+0xc6>
 8110274:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8110278:	d1ba      	bne.n	81101f0 <__swsetup_r+0x30>
 811027a:	bd70      	pop	{r4, r5, r6, pc}
 811027c:	0781      	lsls	r1, r0, #30
 811027e:	bf58      	it	pl
 8110280:	6963      	ldrpl	r3, [r4, #20]
 8110282:	60a3      	str	r3, [r4, #8]
 8110284:	e7f4      	b.n	8110270 <__swsetup_r+0xb0>
 8110286:	2000      	movs	r0, #0
 8110288:	e7f7      	b.n	811027a <__swsetup_r+0xba>
 811028a:	bf00      	nop
 811028c:	10000038 	.word	0x10000038
 8110290:	081133fc 	.word	0x081133fc
 8110294:	0811341c 	.word	0x0811341c
 8110298:	081133dc 	.word	0x081133dc

0811029c <__register_exitproc>:
 811029c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81102a0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 811035c <__register_exitproc+0xc0>
 81102a4:	4606      	mov	r6, r0
 81102a6:	f8d8 0000 	ldr.w	r0, [r8]
 81102aa:	461f      	mov	r7, r3
 81102ac:	460d      	mov	r5, r1
 81102ae:	4691      	mov	r9, r2
 81102b0:	f001 f88b 	bl	81113ca <__retarget_lock_acquire_recursive>
 81102b4:	4b25      	ldr	r3, [pc, #148]	; (811034c <__register_exitproc+0xb0>)
 81102b6:	681c      	ldr	r4, [r3, #0]
 81102b8:	b934      	cbnz	r4, 81102c8 <__register_exitproc+0x2c>
 81102ba:	4c25      	ldr	r4, [pc, #148]	; (8110350 <__register_exitproc+0xb4>)
 81102bc:	601c      	str	r4, [r3, #0]
 81102be:	4b25      	ldr	r3, [pc, #148]	; (8110354 <__register_exitproc+0xb8>)
 81102c0:	b113      	cbz	r3, 81102c8 <__register_exitproc+0x2c>
 81102c2:	681b      	ldr	r3, [r3, #0]
 81102c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 81102c8:	6863      	ldr	r3, [r4, #4]
 81102ca:	2b1f      	cmp	r3, #31
 81102cc:	dd07      	ble.n	81102de <__register_exitproc+0x42>
 81102ce:	f8d8 0000 	ldr.w	r0, [r8]
 81102d2:	f001 f87c 	bl	81113ce <__retarget_lock_release_recursive>
 81102d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81102da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81102de:	b34e      	cbz	r6, 8110334 <__register_exitproc+0x98>
 81102e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 81102e4:	b988      	cbnz	r0, 811030a <__register_exitproc+0x6e>
 81102e6:	4b1c      	ldr	r3, [pc, #112]	; (8110358 <__register_exitproc+0xbc>)
 81102e8:	b923      	cbnz	r3, 81102f4 <__register_exitproc+0x58>
 81102ea:	f8d8 0000 	ldr.w	r0, [r8]
 81102ee:	f001 f86d 	bl	81113cc <__retarget_lock_release>
 81102f2:	e7f0      	b.n	81102d6 <__register_exitproc+0x3a>
 81102f4:	f44f 7084 	mov.w	r0, #264	; 0x108
 81102f8:	f001 f8ce 	bl	8111498 <malloc>
 81102fc:	2800      	cmp	r0, #0
 81102fe:	d0f4      	beq.n	81102ea <__register_exitproc+0x4e>
 8110300:	2300      	movs	r3, #0
 8110302:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8110306:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 811030a:	6863      	ldr	r3, [r4, #4]
 811030c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8110310:	2201      	movs	r2, #1
 8110312:	409a      	lsls	r2, r3
 8110314:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8110318:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 811031c:	4313      	orrs	r3, r2
 811031e:	2e02      	cmp	r6, #2
 8110320:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8110324:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8110328:	bf02      	ittt	eq
 811032a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 811032e:	431a      	orreq	r2, r3
 8110330:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8110334:	6863      	ldr	r3, [r4, #4]
 8110336:	f8d8 0000 	ldr.w	r0, [r8]
 811033a:	1c5a      	adds	r2, r3, #1
 811033c:	3302      	adds	r3, #2
 811033e:	6062      	str	r2, [r4, #4]
 8110340:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8110344:	f001 f843 	bl	81113ce <__retarget_lock_release_recursive>
 8110348:	2000      	movs	r0, #0
 811034a:	e7c6      	b.n	81102da <__register_exitproc+0x3e>
 811034c:	100099a0 	.word	0x100099a0
 8110350:	10009914 	.word	0x10009914
 8110354:	00000000 	.word	0x00000000
 8110358:	08111499 	.word	0x08111499
 811035c:	1000009c 	.word	0x1000009c

08110360 <quorem>:
 8110360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110364:	6903      	ldr	r3, [r0, #16]
 8110366:	690c      	ldr	r4, [r1, #16]
 8110368:	42a3      	cmp	r3, r4
 811036a:	4607      	mov	r7, r0
 811036c:	f2c0 8081 	blt.w	8110472 <quorem+0x112>
 8110370:	3c01      	subs	r4, #1
 8110372:	f101 0814 	add.w	r8, r1, #20
 8110376:	f100 0514 	add.w	r5, r0, #20
 811037a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 811037e:	9301      	str	r3, [sp, #4]
 8110380:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8110384:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8110388:	3301      	adds	r3, #1
 811038a:	429a      	cmp	r2, r3
 811038c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8110390:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8110394:	fbb2 f6f3 	udiv	r6, r2, r3
 8110398:	d331      	bcc.n	81103fe <quorem+0x9e>
 811039a:	f04f 0e00 	mov.w	lr, #0
 811039e:	4640      	mov	r0, r8
 81103a0:	46ac      	mov	ip, r5
 81103a2:	46f2      	mov	sl, lr
 81103a4:	f850 2b04 	ldr.w	r2, [r0], #4
 81103a8:	b293      	uxth	r3, r2
 81103aa:	fb06 e303 	mla	r3, r6, r3, lr
 81103ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 81103b2:	b29b      	uxth	r3, r3
 81103b4:	ebaa 0303 	sub.w	r3, sl, r3
 81103b8:	0c12      	lsrs	r2, r2, #16
 81103ba:	f8dc a000 	ldr.w	sl, [ip]
 81103be:	fb06 e202 	mla	r2, r6, r2, lr
 81103c2:	fa13 f38a 	uxtah	r3, r3, sl
 81103c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81103ca:	fa1f fa82 	uxth.w	sl, r2
 81103ce:	f8dc 2000 	ldr.w	r2, [ip]
 81103d2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 81103d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81103da:	b29b      	uxth	r3, r3
 81103dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81103e0:	4581      	cmp	r9, r0
 81103e2:	f84c 3b04 	str.w	r3, [ip], #4
 81103e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 81103ea:	d2db      	bcs.n	81103a4 <quorem+0x44>
 81103ec:	f855 300b 	ldr.w	r3, [r5, fp]
 81103f0:	b92b      	cbnz	r3, 81103fe <quorem+0x9e>
 81103f2:	9b01      	ldr	r3, [sp, #4]
 81103f4:	3b04      	subs	r3, #4
 81103f6:	429d      	cmp	r5, r3
 81103f8:	461a      	mov	r2, r3
 81103fa:	d32e      	bcc.n	811045a <quorem+0xfa>
 81103fc:	613c      	str	r4, [r7, #16]
 81103fe:	4638      	mov	r0, r7
 8110400:	f001 fad0 	bl	81119a4 <__mcmp>
 8110404:	2800      	cmp	r0, #0
 8110406:	db24      	blt.n	8110452 <quorem+0xf2>
 8110408:	3601      	adds	r6, #1
 811040a:	4628      	mov	r0, r5
 811040c:	f04f 0c00 	mov.w	ip, #0
 8110410:	f858 2b04 	ldr.w	r2, [r8], #4
 8110414:	f8d0 e000 	ldr.w	lr, [r0]
 8110418:	b293      	uxth	r3, r2
 811041a:	ebac 0303 	sub.w	r3, ip, r3
 811041e:	0c12      	lsrs	r2, r2, #16
 8110420:	fa13 f38e 	uxtah	r3, r3, lr
 8110424:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8110428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 811042c:	b29b      	uxth	r3, r3
 811042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8110432:	45c1      	cmp	r9, r8
 8110434:	f840 3b04 	str.w	r3, [r0], #4
 8110438:	ea4f 4c22 	mov.w	ip, r2, asr #16
 811043c:	d2e8      	bcs.n	8110410 <quorem+0xb0>
 811043e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8110442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8110446:	b922      	cbnz	r2, 8110452 <quorem+0xf2>
 8110448:	3b04      	subs	r3, #4
 811044a:	429d      	cmp	r5, r3
 811044c:	461a      	mov	r2, r3
 811044e:	d30a      	bcc.n	8110466 <quorem+0x106>
 8110450:	613c      	str	r4, [r7, #16]
 8110452:	4630      	mov	r0, r6
 8110454:	b003      	add	sp, #12
 8110456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811045a:	6812      	ldr	r2, [r2, #0]
 811045c:	3b04      	subs	r3, #4
 811045e:	2a00      	cmp	r2, #0
 8110460:	d1cc      	bne.n	81103fc <quorem+0x9c>
 8110462:	3c01      	subs	r4, #1
 8110464:	e7c7      	b.n	81103f6 <quorem+0x96>
 8110466:	6812      	ldr	r2, [r2, #0]
 8110468:	3b04      	subs	r3, #4
 811046a:	2a00      	cmp	r2, #0
 811046c:	d1f0      	bne.n	8110450 <quorem+0xf0>
 811046e:	3c01      	subs	r4, #1
 8110470:	e7eb      	b.n	811044a <quorem+0xea>
 8110472:	2000      	movs	r0, #0
 8110474:	e7ee      	b.n	8110454 <quorem+0xf4>
	...

08110478 <_dtoa_r>:
 8110478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811047c:	ed2d 8b02 	vpush	{d8}
 8110480:	ec57 6b10 	vmov	r6, r7, d0
 8110484:	b095      	sub	sp, #84	; 0x54
 8110486:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8110488:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 811048c:	9105      	str	r1, [sp, #20]
 811048e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8110492:	4604      	mov	r4, r0
 8110494:	9209      	str	r2, [sp, #36]	; 0x24
 8110496:	930f      	str	r3, [sp, #60]	; 0x3c
 8110498:	b975      	cbnz	r5, 81104b8 <_dtoa_r+0x40>
 811049a:	2010      	movs	r0, #16
 811049c:	f000 fffc 	bl	8111498 <malloc>
 81104a0:	4602      	mov	r2, r0
 81104a2:	6260      	str	r0, [r4, #36]	; 0x24
 81104a4:	b920      	cbnz	r0, 81104b0 <_dtoa_r+0x38>
 81104a6:	4bb2      	ldr	r3, [pc, #712]	; (8110770 <_dtoa_r+0x2f8>)
 81104a8:	21ea      	movs	r1, #234	; 0xea
 81104aa:	48b2      	ldr	r0, [pc, #712]	; (8110774 <_dtoa_r+0x2fc>)
 81104ac:	f001 ff50 	bl	8112350 <__assert_func>
 81104b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81104b4:	6005      	str	r5, [r0, #0]
 81104b6:	60c5      	str	r5, [r0, #12]
 81104b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81104ba:	6819      	ldr	r1, [r3, #0]
 81104bc:	b151      	cbz	r1, 81104d4 <_dtoa_r+0x5c>
 81104be:	685a      	ldr	r2, [r3, #4]
 81104c0:	604a      	str	r2, [r1, #4]
 81104c2:	2301      	movs	r3, #1
 81104c4:	4093      	lsls	r3, r2
 81104c6:	608b      	str	r3, [r1, #8]
 81104c8:	4620      	mov	r0, r4
 81104ca:	f001 f82d 	bl	8111528 <_Bfree>
 81104ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81104d0:	2200      	movs	r2, #0
 81104d2:	601a      	str	r2, [r3, #0]
 81104d4:	1e3b      	subs	r3, r7, #0
 81104d6:	bfb9      	ittee	lt
 81104d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 81104dc:	9303      	strlt	r3, [sp, #12]
 81104de:	2300      	movge	r3, #0
 81104e0:	f8c8 3000 	strge.w	r3, [r8]
 81104e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 81104e8:	4ba3      	ldr	r3, [pc, #652]	; (8110778 <_dtoa_r+0x300>)
 81104ea:	bfbc      	itt	lt
 81104ec:	2201      	movlt	r2, #1
 81104ee:	f8c8 2000 	strlt.w	r2, [r8]
 81104f2:	ea33 0309 	bics.w	r3, r3, r9
 81104f6:	d11b      	bne.n	8110530 <_dtoa_r+0xb8>
 81104f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 81104fa:	f242 730f 	movw	r3, #9999	; 0x270f
 81104fe:	6013      	str	r3, [r2, #0]
 8110500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8110504:	4333      	orrs	r3, r6
 8110506:	f000 857a 	beq.w	8110ffe <_dtoa_r+0xb86>
 811050a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 811050c:	b963      	cbnz	r3, 8110528 <_dtoa_r+0xb0>
 811050e:	4b9b      	ldr	r3, [pc, #620]	; (811077c <_dtoa_r+0x304>)
 8110510:	e024      	b.n	811055c <_dtoa_r+0xe4>
 8110512:	4b9b      	ldr	r3, [pc, #620]	; (8110780 <_dtoa_r+0x308>)
 8110514:	9300      	str	r3, [sp, #0]
 8110516:	3308      	adds	r3, #8
 8110518:	9a21      	ldr	r2, [sp, #132]	; 0x84
 811051a:	6013      	str	r3, [r2, #0]
 811051c:	9800      	ldr	r0, [sp, #0]
 811051e:	b015      	add	sp, #84	; 0x54
 8110520:	ecbd 8b02 	vpop	{d8}
 8110524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110528:	4b94      	ldr	r3, [pc, #592]	; (811077c <_dtoa_r+0x304>)
 811052a:	9300      	str	r3, [sp, #0]
 811052c:	3303      	adds	r3, #3
 811052e:	e7f3      	b.n	8110518 <_dtoa_r+0xa0>
 8110530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8110534:	2200      	movs	r2, #0
 8110536:	ec51 0b17 	vmov	r0, r1, d7
 811053a:	2300      	movs	r3, #0
 811053c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8110540:	f7f0 fb5a 	bl	8100bf8 <__aeabi_dcmpeq>
 8110544:	4680      	mov	r8, r0
 8110546:	b158      	cbz	r0, 8110560 <_dtoa_r+0xe8>
 8110548:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 811054a:	2301      	movs	r3, #1
 811054c:	6013      	str	r3, [r2, #0]
 811054e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8110550:	2b00      	cmp	r3, #0
 8110552:	f000 8551 	beq.w	8110ff8 <_dtoa_r+0xb80>
 8110556:	488b      	ldr	r0, [pc, #556]	; (8110784 <_dtoa_r+0x30c>)
 8110558:	6018      	str	r0, [r3, #0]
 811055a:	1e43      	subs	r3, r0, #1
 811055c:	9300      	str	r3, [sp, #0]
 811055e:	e7dd      	b.n	811051c <_dtoa_r+0xa4>
 8110560:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8110564:	aa12      	add	r2, sp, #72	; 0x48
 8110566:	a913      	add	r1, sp, #76	; 0x4c
 8110568:	4620      	mov	r0, r4
 811056a:	f001 fabf 	bl	8111aec <__d2b>
 811056e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8110572:	4683      	mov	fp, r0
 8110574:	2d00      	cmp	r5, #0
 8110576:	d07c      	beq.n	8110672 <_dtoa_r+0x1fa>
 8110578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 811057a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 811057e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8110582:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8110586:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 811058a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 811058e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8110592:	4b7d      	ldr	r3, [pc, #500]	; (8110788 <_dtoa_r+0x310>)
 8110594:	2200      	movs	r2, #0
 8110596:	4630      	mov	r0, r6
 8110598:	4639      	mov	r1, r7
 811059a:	f7ef ff0d 	bl	81003b8 <__aeabi_dsub>
 811059e:	a36e      	add	r3, pc, #440	; (adr r3, 8110758 <_dtoa_r+0x2e0>)
 81105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81105a4:	f7f0 f8c0 	bl	8100728 <__aeabi_dmul>
 81105a8:	a36d      	add	r3, pc, #436	; (adr r3, 8110760 <_dtoa_r+0x2e8>)
 81105aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81105ae:	f7ef ff05 	bl	81003bc <__adddf3>
 81105b2:	4606      	mov	r6, r0
 81105b4:	4628      	mov	r0, r5
 81105b6:	460f      	mov	r7, r1
 81105b8:	f7f0 f84c 	bl	8100654 <__aeabi_i2d>
 81105bc:	a36a      	add	r3, pc, #424	; (adr r3, 8110768 <_dtoa_r+0x2f0>)
 81105be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81105c2:	f7f0 f8b1 	bl	8100728 <__aeabi_dmul>
 81105c6:	4602      	mov	r2, r0
 81105c8:	460b      	mov	r3, r1
 81105ca:	4630      	mov	r0, r6
 81105cc:	4639      	mov	r1, r7
 81105ce:	f7ef fef5 	bl	81003bc <__adddf3>
 81105d2:	4606      	mov	r6, r0
 81105d4:	460f      	mov	r7, r1
 81105d6:	f7f0 fb57 	bl	8100c88 <__aeabi_d2iz>
 81105da:	2200      	movs	r2, #0
 81105dc:	4682      	mov	sl, r0
 81105de:	2300      	movs	r3, #0
 81105e0:	4630      	mov	r0, r6
 81105e2:	4639      	mov	r1, r7
 81105e4:	f7f0 fb12 	bl	8100c0c <__aeabi_dcmplt>
 81105e8:	b148      	cbz	r0, 81105fe <_dtoa_r+0x186>
 81105ea:	4650      	mov	r0, sl
 81105ec:	f7f0 f832 	bl	8100654 <__aeabi_i2d>
 81105f0:	4632      	mov	r2, r6
 81105f2:	463b      	mov	r3, r7
 81105f4:	f7f0 fb00 	bl	8100bf8 <__aeabi_dcmpeq>
 81105f8:	b908      	cbnz	r0, 81105fe <_dtoa_r+0x186>
 81105fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 81105fe:	f1ba 0f16 	cmp.w	sl, #22
 8110602:	d854      	bhi.n	81106ae <_dtoa_r+0x236>
 8110604:	4b61      	ldr	r3, [pc, #388]	; (811078c <_dtoa_r+0x314>)
 8110606:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 811060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811060e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8110612:	f7f0 fafb 	bl	8100c0c <__aeabi_dcmplt>
 8110616:	2800      	cmp	r0, #0
 8110618:	d04b      	beq.n	81106b2 <_dtoa_r+0x23a>
 811061a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 811061e:	2300      	movs	r3, #0
 8110620:	930e      	str	r3, [sp, #56]	; 0x38
 8110622:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8110624:	1b5d      	subs	r5, r3, r5
 8110626:	1e6b      	subs	r3, r5, #1
 8110628:	9304      	str	r3, [sp, #16]
 811062a:	bf43      	ittte	mi
 811062c:	2300      	movmi	r3, #0
 811062e:	f1c5 0801 	rsbmi	r8, r5, #1
 8110632:	9304      	strmi	r3, [sp, #16]
 8110634:	f04f 0800 	movpl.w	r8, #0
 8110638:	f1ba 0f00 	cmp.w	sl, #0
 811063c:	db3b      	blt.n	81106b6 <_dtoa_r+0x23e>
 811063e:	9b04      	ldr	r3, [sp, #16]
 8110640:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8110644:	4453      	add	r3, sl
 8110646:	9304      	str	r3, [sp, #16]
 8110648:	2300      	movs	r3, #0
 811064a:	9306      	str	r3, [sp, #24]
 811064c:	9b05      	ldr	r3, [sp, #20]
 811064e:	2b09      	cmp	r3, #9
 8110650:	d869      	bhi.n	8110726 <_dtoa_r+0x2ae>
 8110652:	2b05      	cmp	r3, #5
 8110654:	bfc4      	itt	gt
 8110656:	3b04      	subgt	r3, #4
 8110658:	9305      	strgt	r3, [sp, #20]
 811065a:	9b05      	ldr	r3, [sp, #20]
 811065c:	f1a3 0302 	sub.w	r3, r3, #2
 8110660:	bfcc      	ite	gt
 8110662:	2500      	movgt	r5, #0
 8110664:	2501      	movle	r5, #1
 8110666:	2b03      	cmp	r3, #3
 8110668:	d869      	bhi.n	811073e <_dtoa_r+0x2c6>
 811066a:	e8df f003 	tbb	[pc, r3]
 811066e:	4e2c      	.short	0x4e2c
 8110670:	5a4c      	.short	0x5a4c
 8110672:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8110676:	441d      	add	r5, r3
 8110678:	f205 4332 	addw	r3, r5, #1074	; 0x432
 811067c:	2b20      	cmp	r3, #32
 811067e:	bfc1      	itttt	gt
 8110680:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8110684:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8110688:	fa09 f303 	lslgt.w	r3, r9, r3
 811068c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8110690:	bfda      	itte	le
 8110692:	f1c3 0320 	rsble	r3, r3, #32
 8110696:	fa06 f003 	lslle.w	r0, r6, r3
 811069a:	4318      	orrgt	r0, r3
 811069c:	f7ef ffca 	bl	8100634 <__aeabi_ui2d>
 81106a0:	2301      	movs	r3, #1
 81106a2:	4606      	mov	r6, r0
 81106a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 81106a8:	3d01      	subs	r5, #1
 81106aa:	9310      	str	r3, [sp, #64]	; 0x40
 81106ac:	e771      	b.n	8110592 <_dtoa_r+0x11a>
 81106ae:	2301      	movs	r3, #1
 81106b0:	e7b6      	b.n	8110620 <_dtoa_r+0x1a8>
 81106b2:	900e      	str	r0, [sp, #56]	; 0x38
 81106b4:	e7b5      	b.n	8110622 <_dtoa_r+0x1aa>
 81106b6:	f1ca 0300 	rsb	r3, sl, #0
 81106ba:	9306      	str	r3, [sp, #24]
 81106bc:	2300      	movs	r3, #0
 81106be:	eba8 080a 	sub.w	r8, r8, sl
 81106c2:	930d      	str	r3, [sp, #52]	; 0x34
 81106c4:	e7c2      	b.n	811064c <_dtoa_r+0x1d4>
 81106c6:	2300      	movs	r3, #0
 81106c8:	9308      	str	r3, [sp, #32]
 81106ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81106cc:	2b00      	cmp	r3, #0
 81106ce:	dc39      	bgt.n	8110744 <_dtoa_r+0x2cc>
 81106d0:	f04f 0901 	mov.w	r9, #1
 81106d4:	f8cd 9004 	str.w	r9, [sp, #4]
 81106d8:	464b      	mov	r3, r9
 81106da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 81106de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 81106e0:	2200      	movs	r2, #0
 81106e2:	6042      	str	r2, [r0, #4]
 81106e4:	2204      	movs	r2, #4
 81106e6:	f102 0614 	add.w	r6, r2, #20
 81106ea:	429e      	cmp	r6, r3
 81106ec:	6841      	ldr	r1, [r0, #4]
 81106ee:	d92f      	bls.n	8110750 <_dtoa_r+0x2d8>
 81106f0:	4620      	mov	r0, r4
 81106f2:	f000 fed9 	bl	81114a8 <_Balloc>
 81106f6:	9000      	str	r0, [sp, #0]
 81106f8:	2800      	cmp	r0, #0
 81106fa:	d14b      	bne.n	8110794 <_dtoa_r+0x31c>
 81106fc:	4b24      	ldr	r3, [pc, #144]	; (8110790 <_dtoa_r+0x318>)
 81106fe:	4602      	mov	r2, r0
 8110700:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8110704:	e6d1      	b.n	81104aa <_dtoa_r+0x32>
 8110706:	2301      	movs	r3, #1
 8110708:	e7de      	b.n	81106c8 <_dtoa_r+0x250>
 811070a:	2300      	movs	r3, #0
 811070c:	9308      	str	r3, [sp, #32]
 811070e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110710:	eb0a 0903 	add.w	r9, sl, r3
 8110714:	f109 0301 	add.w	r3, r9, #1
 8110718:	2b01      	cmp	r3, #1
 811071a:	9301      	str	r3, [sp, #4]
 811071c:	bfb8      	it	lt
 811071e:	2301      	movlt	r3, #1
 8110720:	e7dd      	b.n	81106de <_dtoa_r+0x266>
 8110722:	2301      	movs	r3, #1
 8110724:	e7f2      	b.n	811070c <_dtoa_r+0x294>
 8110726:	2501      	movs	r5, #1
 8110728:	2300      	movs	r3, #0
 811072a:	9305      	str	r3, [sp, #20]
 811072c:	9508      	str	r5, [sp, #32]
 811072e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8110732:	2200      	movs	r2, #0
 8110734:	f8cd 9004 	str.w	r9, [sp, #4]
 8110738:	2312      	movs	r3, #18
 811073a:	9209      	str	r2, [sp, #36]	; 0x24
 811073c:	e7cf      	b.n	81106de <_dtoa_r+0x266>
 811073e:	2301      	movs	r3, #1
 8110740:	9308      	str	r3, [sp, #32]
 8110742:	e7f4      	b.n	811072e <_dtoa_r+0x2b6>
 8110744:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8110748:	f8cd 9004 	str.w	r9, [sp, #4]
 811074c:	464b      	mov	r3, r9
 811074e:	e7c6      	b.n	81106de <_dtoa_r+0x266>
 8110750:	3101      	adds	r1, #1
 8110752:	6041      	str	r1, [r0, #4]
 8110754:	0052      	lsls	r2, r2, #1
 8110756:	e7c6      	b.n	81106e6 <_dtoa_r+0x26e>
 8110758:	636f4361 	.word	0x636f4361
 811075c:	3fd287a7 	.word	0x3fd287a7
 8110760:	8b60c8b3 	.word	0x8b60c8b3
 8110764:	3fc68a28 	.word	0x3fc68a28
 8110768:	509f79fb 	.word	0x509f79fb
 811076c:	3fd34413 	.word	0x3fd34413
 8110770:	08113352 	.word	0x08113352
 8110774:	08113369 	.word	0x08113369
 8110778:	7ff00000 	.word	0x7ff00000
 811077c:	0811334e 	.word	0x0811334e
 8110780:	08113345 	.word	0x08113345
 8110784:	08113221 	.word	0x08113221
 8110788:	3ff80000 	.word	0x3ff80000
 811078c:	081134c8 	.word	0x081134c8
 8110790:	081133c8 	.word	0x081133c8
 8110794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8110796:	9a00      	ldr	r2, [sp, #0]
 8110798:	601a      	str	r2, [r3, #0]
 811079a:	9b01      	ldr	r3, [sp, #4]
 811079c:	2b0e      	cmp	r3, #14
 811079e:	f200 80ad 	bhi.w	81108fc <_dtoa_r+0x484>
 81107a2:	2d00      	cmp	r5, #0
 81107a4:	f000 80aa 	beq.w	81108fc <_dtoa_r+0x484>
 81107a8:	f1ba 0f00 	cmp.w	sl, #0
 81107ac:	dd36      	ble.n	811081c <_dtoa_r+0x3a4>
 81107ae:	4ac3      	ldr	r2, [pc, #780]	; (8110abc <_dtoa_r+0x644>)
 81107b0:	f00a 030f 	and.w	r3, sl, #15
 81107b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 81107b8:	ed93 7b00 	vldr	d7, [r3]
 81107bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 81107c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 81107c4:	eeb0 8a47 	vmov.f32	s16, s14
 81107c8:	eef0 8a67 	vmov.f32	s17, s15
 81107cc:	d016      	beq.n	81107fc <_dtoa_r+0x384>
 81107ce:	4bbc      	ldr	r3, [pc, #752]	; (8110ac0 <_dtoa_r+0x648>)
 81107d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81107d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 81107d8:	f7f0 f8d0 	bl	810097c <__aeabi_ddiv>
 81107dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81107e0:	f007 070f 	and.w	r7, r7, #15
 81107e4:	2503      	movs	r5, #3
 81107e6:	4eb6      	ldr	r6, [pc, #728]	; (8110ac0 <_dtoa_r+0x648>)
 81107e8:	b957      	cbnz	r7, 8110800 <_dtoa_r+0x388>
 81107ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81107ee:	ec53 2b18 	vmov	r2, r3, d8
 81107f2:	f7f0 f8c3 	bl	810097c <__aeabi_ddiv>
 81107f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81107fa:	e029      	b.n	8110850 <_dtoa_r+0x3d8>
 81107fc:	2502      	movs	r5, #2
 81107fe:	e7f2      	b.n	81107e6 <_dtoa_r+0x36e>
 8110800:	07f9      	lsls	r1, r7, #31
 8110802:	d508      	bpl.n	8110816 <_dtoa_r+0x39e>
 8110804:	ec51 0b18 	vmov	r0, r1, d8
 8110808:	e9d6 2300 	ldrd	r2, r3, [r6]
 811080c:	f7ef ff8c 	bl	8100728 <__aeabi_dmul>
 8110810:	ec41 0b18 	vmov	d8, r0, r1
 8110814:	3501      	adds	r5, #1
 8110816:	107f      	asrs	r7, r7, #1
 8110818:	3608      	adds	r6, #8
 811081a:	e7e5      	b.n	81107e8 <_dtoa_r+0x370>
 811081c:	f000 80a6 	beq.w	811096c <_dtoa_r+0x4f4>
 8110820:	f1ca 0600 	rsb	r6, sl, #0
 8110824:	4ba5      	ldr	r3, [pc, #660]	; (8110abc <_dtoa_r+0x644>)
 8110826:	4fa6      	ldr	r7, [pc, #664]	; (8110ac0 <_dtoa_r+0x648>)
 8110828:	f006 020f 	and.w	r2, r6, #15
 811082c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8110830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110834:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8110838:	f7ef ff76 	bl	8100728 <__aeabi_dmul>
 811083c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110840:	1136      	asrs	r6, r6, #4
 8110842:	2300      	movs	r3, #0
 8110844:	2502      	movs	r5, #2
 8110846:	2e00      	cmp	r6, #0
 8110848:	f040 8085 	bne.w	8110956 <_dtoa_r+0x4de>
 811084c:	2b00      	cmp	r3, #0
 811084e:	d1d2      	bne.n	81107f6 <_dtoa_r+0x37e>
 8110850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8110852:	2b00      	cmp	r3, #0
 8110854:	f000 808c 	beq.w	8110970 <_dtoa_r+0x4f8>
 8110858:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 811085c:	4b99      	ldr	r3, [pc, #612]	; (8110ac4 <_dtoa_r+0x64c>)
 811085e:	2200      	movs	r2, #0
 8110860:	4630      	mov	r0, r6
 8110862:	4639      	mov	r1, r7
 8110864:	f7f0 f9d2 	bl	8100c0c <__aeabi_dcmplt>
 8110868:	2800      	cmp	r0, #0
 811086a:	f000 8081 	beq.w	8110970 <_dtoa_r+0x4f8>
 811086e:	9b01      	ldr	r3, [sp, #4]
 8110870:	2b00      	cmp	r3, #0
 8110872:	d07d      	beq.n	8110970 <_dtoa_r+0x4f8>
 8110874:	f1b9 0f00 	cmp.w	r9, #0
 8110878:	dd3c      	ble.n	81108f4 <_dtoa_r+0x47c>
 811087a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 811087e:	9307      	str	r3, [sp, #28]
 8110880:	2200      	movs	r2, #0
 8110882:	4b91      	ldr	r3, [pc, #580]	; (8110ac8 <_dtoa_r+0x650>)
 8110884:	4630      	mov	r0, r6
 8110886:	4639      	mov	r1, r7
 8110888:	f7ef ff4e 	bl	8100728 <__aeabi_dmul>
 811088c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110890:	3501      	adds	r5, #1
 8110892:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8110896:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 811089a:	4628      	mov	r0, r5
 811089c:	f7ef feda 	bl	8100654 <__aeabi_i2d>
 81108a0:	4632      	mov	r2, r6
 81108a2:	463b      	mov	r3, r7
 81108a4:	f7ef ff40 	bl	8100728 <__aeabi_dmul>
 81108a8:	4b88      	ldr	r3, [pc, #544]	; (8110acc <_dtoa_r+0x654>)
 81108aa:	2200      	movs	r2, #0
 81108ac:	f7ef fd86 	bl	81003bc <__adddf3>
 81108b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 81108b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81108b8:	9303      	str	r3, [sp, #12]
 81108ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81108bc:	2b00      	cmp	r3, #0
 81108be:	d15c      	bne.n	811097a <_dtoa_r+0x502>
 81108c0:	4b83      	ldr	r3, [pc, #524]	; (8110ad0 <_dtoa_r+0x658>)
 81108c2:	2200      	movs	r2, #0
 81108c4:	4630      	mov	r0, r6
 81108c6:	4639      	mov	r1, r7
 81108c8:	f7ef fd76 	bl	81003b8 <__aeabi_dsub>
 81108cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81108d0:	4606      	mov	r6, r0
 81108d2:	460f      	mov	r7, r1
 81108d4:	f7f0 f9b8 	bl	8100c48 <__aeabi_dcmpgt>
 81108d8:	2800      	cmp	r0, #0
 81108da:	f040 8296 	bne.w	8110e0a <_dtoa_r+0x992>
 81108de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 81108e2:	4630      	mov	r0, r6
 81108e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81108e8:	4639      	mov	r1, r7
 81108ea:	f7f0 f98f 	bl	8100c0c <__aeabi_dcmplt>
 81108ee:	2800      	cmp	r0, #0
 81108f0:	f040 8288 	bne.w	8110e04 <_dtoa_r+0x98c>
 81108f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 81108f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81108fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 81108fe:	2b00      	cmp	r3, #0
 8110900:	f2c0 8158 	blt.w	8110bb4 <_dtoa_r+0x73c>
 8110904:	f1ba 0f0e 	cmp.w	sl, #14
 8110908:	f300 8154 	bgt.w	8110bb4 <_dtoa_r+0x73c>
 811090c:	4b6b      	ldr	r3, [pc, #428]	; (8110abc <_dtoa_r+0x644>)
 811090e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8110912:	e9d3 8900 	ldrd	r8, r9, [r3]
 8110916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110918:	2b00      	cmp	r3, #0
 811091a:	f280 80e3 	bge.w	8110ae4 <_dtoa_r+0x66c>
 811091e:	9b01      	ldr	r3, [sp, #4]
 8110920:	2b00      	cmp	r3, #0
 8110922:	f300 80df 	bgt.w	8110ae4 <_dtoa_r+0x66c>
 8110926:	f040 826d 	bne.w	8110e04 <_dtoa_r+0x98c>
 811092a:	4b69      	ldr	r3, [pc, #420]	; (8110ad0 <_dtoa_r+0x658>)
 811092c:	2200      	movs	r2, #0
 811092e:	4640      	mov	r0, r8
 8110930:	4649      	mov	r1, r9
 8110932:	f7ef fef9 	bl	8100728 <__aeabi_dmul>
 8110936:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 811093a:	f7f0 f97b 	bl	8100c34 <__aeabi_dcmpge>
 811093e:	9e01      	ldr	r6, [sp, #4]
 8110940:	4637      	mov	r7, r6
 8110942:	2800      	cmp	r0, #0
 8110944:	f040 8243 	bne.w	8110dce <_dtoa_r+0x956>
 8110948:	9d00      	ldr	r5, [sp, #0]
 811094a:	2331      	movs	r3, #49	; 0x31
 811094c:	f805 3b01 	strb.w	r3, [r5], #1
 8110950:	f10a 0a01 	add.w	sl, sl, #1
 8110954:	e23f      	b.n	8110dd6 <_dtoa_r+0x95e>
 8110956:	07f2      	lsls	r2, r6, #31
 8110958:	d505      	bpl.n	8110966 <_dtoa_r+0x4ee>
 811095a:	e9d7 2300 	ldrd	r2, r3, [r7]
 811095e:	f7ef fee3 	bl	8100728 <__aeabi_dmul>
 8110962:	3501      	adds	r5, #1
 8110964:	2301      	movs	r3, #1
 8110966:	1076      	asrs	r6, r6, #1
 8110968:	3708      	adds	r7, #8
 811096a:	e76c      	b.n	8110846 <_dtoa_r+0x3ce>
 811096c:	2502      	movs	r5, #2
 811096e:	e76f      	b.n	8110850 <_dtoa_r+0x3d8>
 8110970:	9b01      	ldr	r3, [sp, #4]
 8110972:	f8cd a01c 	str.w	sl, [sp, #28]
 8110976:	930c      	str	r3, [sp, #48]	; 0x30
 8110978:	e78d      	b.n	8110896 <_dtoa_r+0x41e>
 811097a:	9900      	ldr	r1, [sp, #0]
 811097c:	980c      	ldr	r0, [sp, #48]	; 0x30
 811097e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8110980:	4b4e      	ldr	r3, [pc, #312]	; (8110abc <_dtoa_r+0x644>)
 8110982:	ed9d 7b02 	vldr	d7, [sp, #8]
 8110986:	4401      	add	r1, r0
 8110988:	9102      	str	r1, [sp, #8]
 811098a:	9908      	ldr	r1, [sp, #32]
 811098c:	eeb0 8a47 	vmov.f32	s16, s14
 8110990:	eef0 8a67 	vmov.f32	s17, s15
 8110994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8110998:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 811099c:	2900      	cmp	r1, #0
 811099e:	d045      	beq.n	8110a2c <_dtoa_r+0x5b4>
 81109a0:	494c      	ldr	r1, [pc, #304]	; (8110ad4 <_dtoa_r+0x65c>)
 81109a2:	2000      	movs	r0, #0
 81109a4:	f7ef ffea 	bl	810097c <__aeabi_ddiv>
 81109a8:	ec53 2b18 	vmov	r2, r3, d8
 81109ac:	f7ef fd04 	bl	81003b8 <__aeabi_dsub>
 81109b0:	9d00      	ldr	r5, [sp, #0]
 81109b2:	ec41 0b18 	vmov	d8, r0, r1
 81109b6:	4639      	mov	r1, r7
 81109b8:	4630      	mov	r0, r6
 81109ba:	f7f0 f965 	bl	8100c88 <__aeabi_d2iz>
 81109be:	900c      	str	r0, [sp, #48]	; 0x30
 81109c0:	f7ef fe48 	bl	8100654 <__aeabi_i2d>
 81109c4:	4602      	mov	r2, r0
 81109c6:	460b      	mov	r3, r1
 81109c8:	4630      	mov	r0, r6
 81109ca:	4639      	mov	r1, r7
 81109cc:	f7ef fcf4 	bl	81003b8 <__aeabi_dsub>
 81109d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81109d2:	3330      	adds	r3, #48	; 0x30
 81109d4:	f805 3b01 	strb.w	r3, [r5], #1
 81109d8:	ec53 2b18 	vmov	r2, r3, d8
 81109dc:	4606      	mov	r6, r0
 81109de:	460f      	mov	r7, r1
 81109e0:	f7f0 f914 	bl	8100c0c <__aeabi_dcmplt>
 81109e4:	2800      	cmp	r0, #0
 81109e6:	d165      	bne.n	8110ab4 <_dtoa_r+0x63c>
 81109e8:	4632      	mov	r2, r6
 81109ea:	463b      	mov	r3, r7
 81109ec:	4935      	ldr	r1, [pc, #212]	; (8110ac4 <_dtoa_r+0x64c>)
 81109ee:	2000      	movs	r0, #0
 81109f0:	f7ef fce2 	bl	81003b8 <__aeabi_dsub>
 81109f4:	ec53 2b18 	vmov	r2, r3, d8
 81109f8:	f7f0 f908 	bl	8100c0c <__aeabi_dcmplt>
 81109fc:	2800      	cmp	r0, #0
 81109fe:	f040 80b9 	bne.w	8110b74 <_dtoa_r+0x6fc>
 8110a02:	9b02      	ldr	r3, [sp, #8]
 8110a04:	429d      	cmp	r5, r3
 8110a06:	f43f af75 	beq.w	81108f4 <_dtoa_r+0x47c>
 8110a0a:	4b2f      	ldr	r3, [pc, #188]	; (8110ac8 <_dtoa_r+0x650>)
 8110a0c:	ec51 0b18 	vmov	r0, r1, d8
 8110a10:	2200      	movs	r2, #0
 8110a12:	f7ef fe89 	bl	8100728 <__aeabi_dmul>
 8110a16:	4b2c      	ldr	r3, [pc, #176]	; (8110ac8 <_dtoa_r+0x650>)
 8110a18:	ec41 0b18 	vmov	d8, r0, r1
 8110a1c:	2200      	movs	r2, #0
 8110a1e:	4630      	mov	r0, r6
 8110a20:	4639      	mov	r1, r7
 8110a22:	f7ef fe81 	bl	8100728 <__aeabi_dmul>
 8110a26:	4606      	mov	r6, r0
 8110a28:	460f      	mov	r7, r1
 8110a2a:	e7c4      	b.n	81109b6 <_dtoa_r+0x53e>
 8110a2c:	ec51 0b17 	vmov	r0, r1, d7
 8110a30:	f7ef fe7a 	bl	8100728 <__aeabi_dmul>
 8110a34:	9b02      	ldr	r3, [sp, #8]
 8110a36:	9d00      	ldr	r5, [sp, #0]
 8110a38:	930c      	str	r3, [sp, #48]	; 0x30
 8110a3a:	ec41 0b18 	vmov	d8, r0, r1
 8110a3e:	4639      	mov	r1, r7
 8110a40:	4630      	mov	r0, r6
 8110a42:	f7f0 f921 	bl	8100c88 <__aeabi_d2iz>
 8110a46:	9011      	str	r0, [sp, #68]	; 0x44
 8110a48:	f7ef fe04 	bl	8100654 <__aeabi_i2d>
 8110a4c:	4602      	mov	r2, r0
 8110a4e:	460b      	mov	r3, r1
 8110a50:	4630      	mov	r0, r6
 8110a52:	4639      	mov	r1, r7
 8110a54:	f7ef fcb0 	bl	81003b8 <__aeabi_dsub>
 8110a58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8110a5a:	3330      	adds	r3, #48	; 0x30
 8110a5c:	f805 3b01 	strb.w	r3, [r5], #1
 8110a60:	9b02      	ldr	r3, [sp, #8]
 8110a62:	429d      	cmp	r5, r3
 8110a64:	4606      	mov	r6, r0
 8110a66:	460f      	mov	r7, r1
 8110a68:	f04f 0200 	mov.w	r2, #0
 8110a6c:	d134      	bne.n	8110ad8 <_dtoa_r+0x660>
 8110a6e:	4b19      	ldr	r3, [pc, #100]	; (8110ad4 <_dtoa_r+0x65c>)
 8110a70:	ec51 0b18 	vmov	r0, r1, d8
 8110a74:	f7ef fca2 	bl	81003bc <__adddf3>
 8110a78:	4602      	mov	r2, r0
 8110a7a:	460b      	mov	r3, r1
 8110a7c:	4630      	mov	r0, r6
 8110a7e:	4639      	mov	r1, r7
 8110a80:	f7f0 f8e2 	bl	8100c48 <__aeabi_dcmpgt>
 8110a84:	2800      	cmp	r0, #0
 8110a86:	d175      	bne.n	8110b74 <_dtoa_r+0x6fc>
 8110a88:	ec53 2b18 	vmov	r2, r3, d8
 8110a8c:	4911      	ldr	r1, [pc, #68]	; (8110ad4 <_dtoa_r+0x65c>)
 8110a8e:	2000      	movs	r0, #0
 8110a90:	f7ef fc92 	bl	81003b8 <__aeabi_dsub>
 8110a94:	4602      	mov	r2, r0
 8110a96:	460b      	mov	r3, r1
 8110a98:	4630      	mov	r0, r6
 8110a9a:	4639      	mov	r1, r7
 8110a9c:	f7f0 f8b6 	bl	8100c0c <__aeabi_dcmplt>
 8110aa0:	2800      	cmp	r0, #0
 8110aa2:	f43f af27 	beq.w	81108f4 <_dtoa_r+0x47c>
 8110aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8110aa8:	1e6b      	subs	r3, r5, #1
 8110aaa:	930c      	str	r3, [sp, #48]	; 0x30
 8110aac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8110ab0:	2b30      	cmp	r3, #48	; 0x30
 8110ab2:	d0f8      	beq.n	8110aa6 <_dtoa_r+0x62e>
 8110ab4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8110ab8:	e04a      	b.n	8110b50 <_dtoa_r+0x6d8>
 8110aba:	bf00      	nop
 8110abc:	081134c8 	.word	0x081134c8
 8110ac0:	081134a0 	.word	0x081134a0
 8110ac4:	3ff00000 	.word	0x3ff00000
 8110ac8:	40240000 	.word	0x40240000
 8110acc:	401c0000 	.word	0x401c0000
 8110ad0:	40140000 	.word	0x40140000
 8110ad4:	3fe00000 	.word	0x3fe00000
 8110ad8:	4baf      	ldr	r3, [pc, #700]	; (8110d98 <_dtoa_r+0x920>)
 8110ada:	f7ef fe25 	bl	8100728 <__aeabi_dmul>
 8110ade:	4606      	mov	r6, r0
 8110ae0:	460f      	mov	r7, r1
 8110ae2:	e7ac      	b.n	8110a3e <_dtoa_r+0x5c6>
 8110ae4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8110ae8:	9d00      	ldr	r5, [sp, #0]
 8110aea:	4642      	mov	r2, r8
 8110aec:	464b      	mov	r3, r9
 8110aee:	4630      	mov	r0, r6
 8110af0:	4639      	mov	r1, r7
 8110af2:	f7ef ff43 	bl	810097c <__aeabi_ddiv>
 8110af6:	f7f0 f8c7 	bl	8100c88 <__aeabi_d2iz>
 8110afa:	9002      	str	r0, [sp, #8]
 8110afc:	f7ef fdaa 	bl	8100654 <__aeabi_i2d>
 8110b00:	4642      	mov	r2, r8
 8110b02:	464b      	mov	r3, r9
 8110b04:	f7ef fe10 	bl	8100728 <__aeabi_dmul>
 8110b08:	4602      	mov	r2, r0
 8110b0a:	460b      	mov	r3, r1
 8110b0c:	4630      	mov	r0, r6
 8110b0e:	4639      	mov	r1, r7
 8110b10:	f7ef fc52 	bl	81003b8 <__aeabi_dsub>
 8110b14:	9e02      	ldr	r6, [sp, #8]
 8110b16:	9f01      	ldr	r7, [sp, #4]
 8110b18:	3630      	adds	r6, #48	; 0x30
 8110b1a:	f805 6b01 	strb.w	r6, [r5], #1
 8110b1e:	9e00      	ldr	r6, [sp, #0]
 8110b20:	1bae      	subs	r6, r5, r6
 8110b22:	42b7      	cmp	r7, r6
 8110b24:	4602      	mov	r2, r0
 8110b26:	460b      	mov	r3, r1
 8110b28:	d137      	bne.n	8110b9a <_dtoa_r+0x722>
 8110b2a:	f7ef fc47 	bl	81003bc <__adddf3>
 8110b2e:	4642      	mov	r2, r8
 8110b30:	464b      	mov	r3, r9
 8110b32:	4606      	mov	r6, r0
 8110b34:	460f      	mov	r7, r1
 8110b36:	f7f0 f887 	bl	8100c48 <__aeabi_dcmpgt>
 8110b3a:	b9c8      	cbnz	r0, 8110b70 <_dtoa_r+0x6f8>
 8110b3c:	4642      	mov	r2, r8
 8110b3e:	464b      	mov	r3, r9
 8110b40:	4630      	mov	r0, r6
 8110b42:	4639      	mov	r1, r7
 8110b44:	f7f0 f858 	bl	8100bf8 <__aeabi_dcmpeq>
 8110b48:	b110      	cbz	r0, 8110b50 <_dtoa_r+0x6d8>
 8110b4a:	9b02      	ldr	r3, [sp, #8]
 8110b4c:	07d9      	lsls	r1, r3, #31
 8110b4e:	d40f      	bmi.n	8110b70 <_dtoa_r+0x6f8>
 8110b50:	4620      	mov	r0, r4
 8110b52:	4659      	mov	r1, fp
 8110b54:	f000 fce8 	bl	8111528 <_Bfree>
 8110b58:	2300      	movs	r3, #0
 8110b5a:	702b      	strb	r3, [r5, #0]
 8110b5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8110b5e:	f10a 0001 	add.w	r0, sl, #1
 8110b62:	6018      	str	r0, [r3, #0]
 8110b64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8110b66:	2b00      	cmp	r3, #0
 8110b68:	f43f acd8 	beq.w	811051c <_dtoa_r+0xa4>
 8110b6c:	601d      	str	r5, [r3, #0]
 8110b6e:	e4d5      	b.n	811051c <_dtoa_r+0xa4>
 8110b70:	f8cd a01c 	str.w	sl, [sp, #28]
 8110b74:	462b      	mov	r3, r5
 8110b76:	461d      	mov	r5, r3
 8110b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8110b7c:	2a39      	cmp	r2, #57	; 0x39
 8110b7e:	d108      	bne.n	8110b92 <_dtoa_r+0x71a>
 8110b80:	9a00      	ldr	r2, [sp, #0]
 8110b82:	429a      	cmp	r2, r3
 8110b84:	d1f7      	bne.n	8110b76 <_dtoa_r+0x6fe>
 8110b86:	9a07      	ldr	r2, [sp, #28]
 8110b88:	9900      	ldr	r1, [sp, #0]
 8110b8a:	3201      	adds	r2, #1
 8110b8c:	9207      	str	r2, [sp, #28]
 8110b8e:	2230      	movs	r2, #48	; 0x30
 8110b90:	700a      	strb	r2, [r1, #0]
 8110b92:	781a      	ldrb	r2, [r3, #0]
 8110b94:	3201      	adds	r2, #1
 8110b96:	701a      	strb	r2, [r3, #0]
 8110b98:	e78c      	b.n	8110ab4 <_dtoa_r+0x63c>
 8110b9a:	4b7f      	ldr	r3, [pc, #508]	; (8110d98 <_dtoa_r+0x920>)
 8110b9c:	2200      	movs	r2, #0
 8110b9e:	f7ef fdc3 	bl	8100728 <__aeabi_dmul>
 8110ba2:	2200      	movs	r2, #0
 8110ba4:	2300      	movs	r3, #0
 8110ba6:	4606      	mov	r6, r0
 8110ba8:	460f      	mov	r7, r1
 8110baa:	f7f0 f825 	bl	8100bf8 <__aeabi_dcmpeq>
 8110bae:	2800      	cmp	r0, #0
 8110bb0:	d09b      	beq.n	8110aea <_dtoa_r+0x672>
 8110bb2:	e7cd      	b.n	8110b50 <_dtoa_r+0x6d8>
 8110bb4:	9a08      	ldr	r2, [sp, #32]
 8110bb6:	2a00      	cmp	r2, #0
 8110bb8:	f000 80c4 	beq.w	8110d44 <_dtoa_r+0x8cc>
 8110bbc:	9a05      	ldr	r2, [sp, #20]
 8110bbe:	2a01      	cmp	r2, #1
 8110bc0:	f300 80a8 	bgt.w	8110d14 <_dtoa_r+0x89c>
 8110bc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8110bc6:	2a00      	cmp	r2, #0
 8110bc8:	f000 80a0 	beq.w	8110d0c <_dtoa_r+0x894>
 8110bcc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8110bd0:	9e06      	ldr	r6, [sp, #24]
 8110bd2:	4645      	mov	r5, r8
 8110bd4:	9a04      	ldr	r2, [sp, #16]
 8110bd6:	2101      	movs	r1, #1
 8110bd8:	441a      	add	r2, r3
 8110bda:	4620      	mov	r0, r4
 8110bdc:	4498      	add	r8, r3
 8110bde:	9204      	str	r2, [sp, #16]
 8110be0:	f000 fd5e 	bl	81116a0 <__i2b>
 8110be4:	4607      	mov	r7, r0
 8110be6:	2d00      	cmp	r5, #0
 8110be8:	dd0b      	ble.n	8110c02 <_dtoa_r+0x78a>
 8110bea:	9b04      	ldr	r3, [sp, #16]
 8110bec:	2b00      	cmp	r3, #0
 8110bee:	dd08      	ble.n	8110c02 <_dtoa_r+0x78a>
 8110bf0:	42ab      	cmp	r3, r5
 8110bf2:	9a04      	ldr	r2, [sp, #16]
 8110bf4:	bfa8      	it	ge
 8110bf6:	462b      	movge	r3, r5
 8110bf8:	eba8 0803 	sub.w	r8, r8, r3
 8110bfc:	1aed      	subs	r5, r5, r3
 8110bfe:	1ad3      	subs	r3, r2, r3
 8110c00:	9304      	str	r3, [sp, #16]
 8110c02:	9b06      	ldr	r3, [sp, #24]
 8110c04:	b1fb      	cbz	r3, 8110c46 <_dtoa_r+0x7ce>
 8110c06:	9b08      	ldr	r3, [sp, #32]
 8110c08:	2b00      	cmp	r3, #0
 8110c0a:	f000 809f 	beq.w	8110d4c <_dtoa_r+0x8d4>
 8110c0e:	2e00      	cmp	r6, #0
 8110c10:	dd11      	ble.n	8110c36 <_dtoa_r+0x7be>
 8110c12:	4639      	mov	r1, r7
 8110c14:	4632      	mov	r2, r6
 8110c16:	4620      	mov	r0, r4
 8110c18:	f000 fdfe 	bl	8111818 <__pow5mult>
 8110c1c:	465a      	mov	r2, fp
 8110c1e:	4601      	mov	r1, r0
 8110c20:	4607      	mov	r7, r0
 8110c22:	4620      	mov	r0, r4
 8110c24:	f000 fd52 	bl	81116cc <__multiply>
 8110c28:	4659      	mov	r1, fp
 8110c2a:	9007      	str	r0, [sp, #28]
 8110c2c:	4620      	mov	r0, r4
 8110c2e:	f000 fc7b 	bl	8111528 <_Bfree>
 8110c32:	9b07      	ldr	r3, [sp, #28]
 8110c34:	469b      	mov	fp, r3
 8110c36:	9b06      	ldr	r3, [sp, #24]
 8110c38:	1b9a      	subs	r2, r3, r6
 8110c3a:	d004      	beq.n	8110c46 <_dtoa_r+0x7ce>
 8110c3c:	4659      	mov	r1, fp
 8110c3e:	4620      	mov	r0, r4
 8110c40:	f000 fdea 	bl	8111818 <__pow5mult>
 8110c44:	4683      	mov	fp, r0
 8110c46:	2101      	movs	r1, #1
 8110c48:	4620      	mov	r0, r4
 8110c4a:	f000 fd29 	bl	81116a0 <__i2b>
 8110c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8110c50:	2b00      	cmp	r3, #0
 8110c52:	4606      	mov	r6, r0
 8110c54:	dd7c      	ble.n	8110d50 <_dtoa_r+0x8d8>
 8110c56:	461a      	mov	r2, r3
 8110c58:	4601      	mov	r1, r0
 8110c5a:	4620      	mov	r0, r4
 8110c5c:	f000 fddc 	bl	8111818 <__pow5mult>
 8110c60:	9b05      	ldr	r3, [sp, #20]
 8110c62:	2b01      	cmp	r3, #1
 8110c64:	4606      	mov	r6, r0
 8110c66:	dd76      	ble.n	8110d56 <_dtoa_r+0x8de>
 8110c68:	2300      	movs	r3, #0
 8110c6a:	9306      	str	r3, [sp, #24]
 8110c6c:	6933      	ldr	r3, [r6, #16]
 8110c6e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8110c72:	6918      	ldr	r0, [r3, #16]
 8110c74:	f000 fcc4 	bl	8111600 <__hi0bits>
 8110c78:	f1c0 0020 	rsb	r0, r0, #32
 8110c7c:	9b04      	ldr	r3, [sp, #16]
 8110c7e:	4418      	add	r0, r3
 8110c80:	f010 001f 	ands.w	r0, r0, #31
 8110c84:	f000 8086 	beq.w	8110d94 <_dtoa_r+0x91c>
 8110c88:	f1c0 0320 	rsb	r3, r0, #32
 8110c8c:	2b04      	cmp	r3, #4
 8110c8e:	dd7f      	ble.n	8110d90 <_dtoa_r+0x918>
 8110c90:	f1c0 001c 	rsb	r0, r0, #28
 8110c94:	9b04      	ldr	r3, [sp, #16]
 8110c96:	4403      	add	r3, r0
 8110c98:	4480      	add	r8, r0
 8110c9a:	4405      	add	r5, r0
 8110c9c:	9304      	str	r3, [sp, #16]
 8110c9e:	f1b8 0f00 	cmp.w	r8, #0
 8110ca2:	dd05      	ble.n	8110cb0 <_dtoa_r+0x838>
 8110ca4:	4659      	mov	r1, fp
 8110ca6:	4642      	mov	r2, r8
 8110ca8:	4620      	mov	r0, r4
 8110caa:	f000 fe0f 	bl	81118cc <__lshift>
 8110cae:	4683      	mov	fp, r0
 8110cb0:	9b04      	ldr	r3, [sp, #16]
 8110cb2:	2b00      	cmp	r3, #0
 8110cb4:	dd05      	ble.n	8110cc2 <_dtoa_r+0x84a>
 8110cb6:	4631      	mov	r1, r6
 8110cb8:	461a      	mov	r2, r3
 8110cba:	4620      	mov	r0, r4
 8110cbc:	f000 fe06 	bl	81118cc <__lshift>
 8110cc0:	4606      	mov	r6, r0
 8110cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8110cc4:	2b00      	cmp	r3, #0
 8110cc6:	d069      	beq.n	8110d9c <_dtoa_r+0x924>
 8110cc8:	4631      	mov	r1, r6
 8110cca:	4658      	mov	r0, fp
 8110ccc:	f000 fe6a 	bl	81119a4 <__mcmp>
 8110cd0:	2800      	cmp	r0, #0
 8110cd2:	da63      	bge.n	8110d9c <_dtoa_r+0x924>
 8110cd4:	2300      	movs	r3, #0
 8110cd6:	4659      	mov	r1, fp
 8110cd8:	220a      	movs	r2, #10
 8110cda:	4620      	mov	r0, r4
 8110cdc:	f000 fc46 	bl	811156c <__multadd>
 8110ce0:	9b08      	ldr	r3, [sp, #32]
 8110ce2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8110ce6:	4683      	mov	fp, r0
 8110ce8:	2b00      	cmp	r3, #0
 8110cea:	f000 818f 	beq.w	811100c <_dtoa_r+0xb94>
 8110cee:	4639      	mov	r1, r7
 8110cf0:	2300      	movs	r3, #0
 8110cf2:	220a      	movs	r2, #10
 8110cf4:	4620      	mov	r0, r4
 8110cf6:	f000 fc39 	bl	811156c <__multadd>
 8110cfa:	f1b9 0f00 	cmp.w	r9, #0
 8110cfe:	4607      	mov	r7, r0
 8110d00:	f300 808e 	bgt.w	8110e20 <_dtoa_r+0x9a8>
 8110d04:	9b05      	ldr	r3, [sp, #20]
 8110d06:	2b02      	cmp	r3, #2
 8110d08:	dc50      	bgt.n	8110dac <_dtoa_r+0x934>
 8110d0a:	e089      	b.n	8110e20 <_dtoa_r+0x9a8>
 8110d0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8110d0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8110d12:	e75d      	b.n	8110bd0 <_dtoa_r+0x758>
 8110d14:	9b01      	ldr	r3, [sp, #4]
 8110d16:	1e5e      	subs	r6, r3, #1
 8110d18:	9b06      	ldr	r3, [sp, #24]
 8110d1a:	42b3      	cmp	r3, r6
 8110d1c:	bfbf      	itttt	lt
 8110d1e:	9b06      	ldrlt	r3, [sp, #24]
 8110d20:	9606      	strlt	r6, [sp, #24]
 8110d22:	1af2      	sublt	r2, r6, r3
 8110d24:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8110d26:	bfb6      	itet	lt
 8110d28:	189b      	addlt	r3, r3, r2
 8110d2a:	1b9e      	subge	r6, r3, r6
 8110d2c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8110d2e:	9b01      	ldr	r3, [sp, #4]
 8110d30:	bfb8      	it	lt
 8110d32:	2600      	movlt	r6, #0
 8110d34:	2b00      	cmp	r3, #0
 8110d36:	bfb5      	itete	lt
 8110d38:	eba8 0503 	sublt.w	r5, r8, r3
 8110d3c:	9b01      	ldrge	r3, [sp, #4]
 8110d3e:	2300      	movlt	r3, #0
 8110d40:	4645      	movge	r5, r8
 8110d42:	e747      	b.n	8110bd4 <_dtoa_r+0x75c>
 8110d44:	9e06      	ldr	r6, [sp, #24]
 8110d46:	9f08      	ldr	r7, [sp, #32]
 8110d48:	4645      	mov	r5, r8
 8110d4a:	e74c      	b.n	8110be6 <_dtoa_r+0x76e>
 8110d4c:	9a06      	ldr	r2, [sp, #24]
 8110d4e:	e775      	b.n	8110c3c <_dtoa_r+0x7c4>
 8110d50:	9b05      	ldr	r3, [sp, #20]
 8110d52:	2b01      	cmp	r3, #1
 8110d54:	dc18      	bgt.n	8110d88 <_dtoa_r+0x910>
 8110d56:	9b02      	ldr	r3, [sp, #8]
 8110d58:	b9b3      	cbnz	r3, 8110d88 <_dtoa_r+0x910>
 8110d5a:	9b03      	ldr	r3, [sp, #12]
 8110d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8110d60:	b9a3      	cbnz	r3, 8110d8c <_dtoa_r+0x914>
 8110d62:	9b03      	ldr	r3, [sp, #12]
 8110d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8110d68:	0d1b      	lsrs	r3, r3, #20
 8110d6a:	051b      	lsls	r3, r3, #20
 8110d6c:	b12b      	cbz	r3, 8110d7a <_dtoa_r+0x902>
 8110d6e:	9b04      	ldr	r3, [sp, #16]
 8110d70:	3301      	adds	r3, #1
 8110d72:	9304      	str	r3, [sp, #16]
 8110d74:	f108 0801 	add.w	r8, r8, #1
 8110d78:	2301      	movs	r3, #1
 8110d7a:	9306      	str	r3, [sp, #24]
 8110d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8110d7e:	2b00      	cmp	r3, #0
 8110d80:	f47f af74 	bne.w	8110c6c <_dtoa_r+0x7f4>
 8110d84:	2001      	movs	r0, #1
 8110d86:	e779      	b.n	8110c7c <_dtoa_r+0x804>
 8110d88:	2300      	movs	r3, #0
 8110d8a:	e7f6      	b.n	8110d7a <_dtoa_r+0x902>
 8110d8c:	9b02      	ldr	r3, [sp, #8]
 8110d8e:	e7f4      	b.n	8110d7a <_dtoa_r+0x902>
 8110d90:	d085      	beq.n	8110c9e <_dtoa_r+0x826>
 8110d92:	4618      	mov	r0, r3
 8110d94:	301c      	adds	r0, #28
 8110d96:	e77d      	b.n	8110c94 <_dtoa_r+0x81c>
 8110d98:	40240000 	.word	0x40240000
 8110d9c:	9b01      	ldr	r3, [sp, #4]
 8110d9e:	2b00      	cmp	r3, #0
 8110da0:	dc38      	bgt.n	8110e14 <_dtoa_r+0x99c>
 8110da2:	9b05      	ldr	r3, [sp, #20]
 8110da4:	2b02      	cmp	r3, #2
 8110da6:	dd35      	ble.n	8110e14 <_dtoa_r+0x99c>
 8110da8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8110dac:	f1b9 0f00 	cmp.w	r9, #0
 8110db0:	d10d      	bne.n	8110dce <_dtoa_r+0x956>
 8110db2:	4631      	mov	r1, r6
 8110db4:	464b      	mov	r3, r9
 8110db6:	2205      	movs	r2, #5
 8110db8:	4620      	mov	r0, r4
 8110dba:	f000 fbd7 	bl	811156c <__multadd>
 8110dbe:	4601      	mov	r1, r0
 8110dc0:	4606      	mov	r6, r0
 8110dc2:	4658      	mov	r0, fp
 8110dc4:	f000 fdee 	bl	81119a4 <__mcmp>
 8110dc8:	2800      	cmp	r0, #0
 8110dca:	f73f adbd 	bgt.w	8110948 <_dtoa_r+0x4d0>
 8110dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8110dd0:	9d00      	ldr	r5, [sp, #0]
 8110dd2:	ea6f 0a03 	mvn.w	sl, r3
 8110dd6:	f04f 0800 	mov.w	r8, #0
 8110dda:	4631      	mov	r1, r6
 8110ddc:	4620      	mov	r0, r4
 8110dde:	f000 fba3 	bl	8111528 <_Bfree>
 8110de2:	2f00      	cmp	r7, #0
 8110de4:	f43f aeb4 	beq.w	8110b50 <_dtoa_r+0x6d8>
 8110de8:	f1b8 0f00 	cmp.w	r8, #0
 8110dec:	d005      	beq.n	8110dfa <_dtoa_r+0x982>
 8110dee:	45b8      	cmp	r8, r7
 8110df0:	d003      	beq.n	8110dfa <_dtoa_r+0x982>
 8110df2:	4641      	mov	r1, r8
 8110df4:	4620      	mov	r0, r4
 8110df6:	f000 fb97 	bl	8111528 <_Bfree>
 8110dfa:	4639      	mov	r1, r7
 8110dfc:	4620      	mov	r0, r4
 8110dfe:	f000 fb93 	bl	8111528 <_Bfree>
 8110e02:	e6a5      	b.n	8110b50 <_dtoa_r+0x6d8>
 8110e04:	2600      	movs	r6, #0
 8110e06:	4637      	mov	r7, r6
 8110e08:	e7e1      	b.n	8110dce <_dtoa_r+0x956>
 8110e0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8110e0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8110e10:	4637      	mov	r7, r6
 8110e12:	e599      	b.n	8110948 <_dtoa_r+0x4d0>
 8110e14:	9b08      	ldr	r3, [sp, #32]
 8110e16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8110e1a:	2b00      	cmp	r3, #0
 8110e1c:	f000 80fd 	beq.w	811101a <_dtoa_r+0xba2>
 8110e20:	2d00      	cmp	r5, #0
 8110e22:	dd05      	ble.n	8110e30 <_dtoa_r+0x9b8>
 8110e24:	4639      	mov	r1, r7
 8110e26:	462a      	mov	r2, r5
 8110e28:	4620      	mov	r0, r4
 8110e2a:	f000 fd4f 	bl	81118cc <__lshift>
 8110e2e:	4607      	mov	r7, r0
 8110e30:	9b06      	ldr	r3, [sp, #24]
 8110e32:	2b00      	cmp	r3, #0
 8110e34:	d05c      	beq.n	8110ef0 <_dtoa_r+0xa78>
 8110e36:	6879      	ldr	r1, [r7, #4]
 8110e38:	4620      	mov	r0, r4
 8110e3a:	f000 fb35 	bl	81114a8 <_Balloc>
 8110e3e:	4605      	mov	r5, r0
 8110e40:	b928      	cbnz	r0, 8110e4e <_dtoa_r+0x9d6>
 8110e42:	4b80      	ldr	r3, [pc, #512]	; (8111044 <_dtoa_r+0xbcc>)
 8110e44:	4602      	mov	r2, r0
 8110e46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8110e4a:	f7ff bb2e 	b.w	81104aa <_dtoa_r+0x32>
 8110e4e:	693a      	ldr	r2, [r7, #16]
 8110e50:	3202      	adds	r2, #2
 8110e52:	0092      	lsls	r2, r2, #2
 8110e54:	f107 010c 	add.w	r1, r7, #12
 8110e58:	300c      	adds	r0, #12
 8110e5a:	f7fe fb3f 	bl	810f4dc <memcpy>
 8110e5e:	2201      	movs	r2, #1
 8110e60:	4629      	mov	r1, r5
 8110e62:	4620      	mov	r0, r4
 8110e64:	f000 fd32 	bl	81118cc <__lshift>
 8110e68:	9b00      	ldr	r3, [sp, #0]
 8110e6a:	3301      	adds	r3, #1
 8110e6c:	9301      	str	r3, [sp, #4]
 8110e6e:	9b00      	ldr	r3, [sp, #0]
 8110e70:	444b      	add	r3, r9
 8110e72:	9307      	str	r3, [sp, #28]
 8110e74:	9b02      	ldr	r3, [sp, #8]
 8110e76:	f003 0301 	and.w	r3, r3, #1
 8110e7a:	46b8      	mov	r8, r7
 8110e7c:	9306      	str	r3, [sp, #24]
 8110e7e:	4607      	mov	r7, r0
 8110e80:	9b01      	ldr	r3, [sp, #4]
 8110e82:	4631      	mov	r1, r6
 8110e84:	3b01      	subs	r3, #1
 8110e86:	4658      	mov	r0, fp
 8110e88:	9302      	str	r3, [sp, #8]
 8110e8a:	f7ff fa69 	bl	8110360 <quorem>
 8110e8e:	4603      	mov	r3, r0
 8110e90:	3330      	adds	r3, #48	; 0x30
 8110e92:	9004      	str	r0, [sp, #16]
 8110e94:	4641      	mov	r1, r8
 8110e96:	4658      	mov	r0, fp
 8110e98:	9308      	str	r3, [sp, #32]
 8110e9a:	f000 fd83 	bl	81119a4 <__mcmp>
 8110e9e:	463a      	mov	r2, r7
 8110ea0:	4681      	mov	r9, r0
 8110ea2:	4631      	mov	r1, r6
 8110ea4:	4620      	mov	r0, r4
 8110ea6:	f000 fd99 	bl	81119dc <__mdiff>
 8110eaa:	68c2      	ldr	r2, [r0, #12]
 8110eac:	9b08      	ldr	r3, [sp, #32]
 8110eae:	4605      	mov	r5, r0
 8110eb0:	bb02      	cbnz	r2, 8110ef4 <_dtoa_r+0xa7c>
 8110eb2:	4601      	mov	r1, r0
 8110eb4:	4658      	mov	r0, fp
 8110eb6:	f000 fd75 	bl	81119a4 <__mcmp>
 8110eba:	9b08      	ldr	r3, [sp, #32]
 8110ebc:	4602      	mov	r2, r0
 8110ebe:	4629      	mov	r1, r5
 8110ec0:	4620      	mov	r0, r4
 8110ec2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8110ec6:	f000 fb2f 	bl	8111528 <_Bfree>
 8110eca:	9b05      	ldr	r3, [sp, #20]
 8110ecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8110ece:	9d01      	ldr	r5, [sp, #4]
 8110ed0:	ea43 0102 	orr.w	r1, r3, r2
 8110ed4:	9b06      	ldr	r3, [sp, #24]
 8110ed6:	430b      	orrs	r3, r1
 8110ed8:	9b08      	ldr	r3, [sp, #32]
 8110eda:	d10d      	bne.n	8110ef8 <_dtoa_r+0xa80>
 8110edc:	2b39      	cmp	r3, #57	; 0x39
 8110ede:	d029      	beq.n	8110f34 <_dtoa_r+0xabc>
 8110ee0:	f1b9 0f00 	cmp.w	r9, #0
 8110ee4:	dd01      	ble.n	8110eea <_dtoa_r+0xa72>
 8110ee6:	9b04      	ldr	r3, [sp, #16]
 8110ee8:	3331      	adds	r3, #49	; 0x31
 8110eea:	9a02      	ldr	r2, [sp, #8]
 8110eec:	7013      	strb	r3, [r2, #0]
 8110eee:	e774      	b.n	8110dda <_dtoa_r+0x962>
 8110ef0:	4638      	mov	r0, r7
 8110ef2:	e7b9      	b.n	8110e68 <_dtoa_r+0x9f0>
 8110ef4:	2201      	movs	r2, #1
 8110ef6:	e7e2      	b.n	8110ebe <_dtoa_r+0xa46>
 8110ef8:	f1b9 0f00 	cmp.w	r9, #0
 8110efc:	db06      	blt.n	8110f0c <_dtoa_r+0xa94>
 8110efe:	9905      	ldr	r1, [sp, #20]
 8110f00:	ea41 0909 	orr.w	r9, r1, r9
 8110f04:	9906      	ldr	r1, [sp, #24]
 8110f06:	ea59 0101 	orrs.w	r1, r9, r1
 8110f0a:	d120      	bne.n	8110f4e <_dtoa_r+0xad6>
 8110f0c:	2a00      	cmp	r2, #0
 8110f0e:	ddec      	ble.n	8110eea <_dtoa_r+0xa72>
 8110f10:	4659      	mov	r1, fp
 8110f12:	2201      	movs	r2, #1
 8110f14:	4620      	mov	r0, r4
 8110f16:	9301      	str	r3, [sp, #4]
 8110f18:	f000 fcd8 	bl	81118cc <__lshift>
 8110f1c:	4631      	mov	r1, r6
 8110f1e:	4683      	mov	fp, r0
 8110f20:	f000 fd40 	bl	81119a4 <__mcmp>
 8110f24:	2800      	cmp	r0, #0
 8110f26:	9b01      	ldr	r3, [sp, #4]
 8110f28:	dc02      	bgt.n	8110f30 <_dtoa_r+0xab8>
 8110f2a:	d1de      	bne.n	8110eea <_dtoa_r+0xa72>
 8110f2c:	07da      	lsls	r2, r3, #31
 8110f2e:	d5dc      	bpl.n	8110eea <_dtoa_r+0xa72>
 8110f30:	2b39      	cmp	r3, #57	; 0x39
 8110f32:	d1d8      	bne.n	8110ee6 <_dtoa_r+0xa6e>
 8110f34:	9a02      	ldr	r2, [sp, #8]
 8110f36:	2339      	movs	r3, #57	; 0x39
 8110f38:	7013      	strb	r3, [r2, #0]
 8110f3a:	462b      	mov	r3, r5
 8110f3c:	461d      	mov	r5, r3
 8110f3e:	3b01      	subs	r3, #1
 8110f40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8110f44:	2a39      	cmp	r2, #57	; 0x39
 8110f46:	d050      	beq.n	8110fea <_dtoa_r+0xb72>
 8110f48:	3201      	adds	r2, #1
 8110f4a:	701a      	strb	r2, [r3, #0]
 8110f4c:	e745      	b.n	8110dda <_dtoa_r+0x962>
 8110f4e:	2a00      	cmp	r2, #0
 8110f50:	dd03      	ble.n	8110f5a <_dtoa_r+0xae2>
 8110f52:	2b39      	cmp	r3, #57	; 0x39
 8110f54:	d0ee      	beq.n	8110f34 <_dtoa_r+0xabc>
 8110f56:	3301      	adds	r3, #1
 8110f58:	e7c7      	b.n	8110eea <_dtoa_r+0xa72>
 8110f5a:	9a01      	ldr	r2, [sp, #4]
 8110f5c:	9907      	ldr	r1, [sp, #28]
 8110f5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8110f62:	428a      	cmp	r2, r1
 8110f64:	d02a      	beq.n	8110fbc <_dtoa_r+0xb44>
 8110f66:	4659      	mov	r1, fp
 8110f68:	2300      	movs	r3, #0
 8110f6a:	220a      	movs	r2, #10
 8110f6c:	4620      	mov	r0, r4
 8110f6e:	f000 fafd 	bl	811156c <__multadd>
 8110f72:	45b8      	cmp	r8, r7
 8110f74:	4683      	mov	fp, r0
 8110f76:	f04f 0300 	mov.w	r3, #0
 8110f7a:	f04f 020a 	mov.w	r2, #10
 8110f7e:	4641      	mov	r1, r8
 8110f80:	4620      	mov	r0, r4
 8110f82:	d107      	bne.n	8110f94 <_dtoa_r+0xb1c>
 8110f84:	f000 faf2 	bl	811156c <__multadd>
 8110f88:	4680      	mov	r8, r0
 8110f8a:	4607      	mov	r7, r0
 8110f8c:	9b01      	ldr	r3, [sp, #4]
 8110f8e:	3301      	adds	r3, #1
 8110f90:	9301      	str	r3, [sp, #4]
 8110f92:	e775      	b.n	8110e80 <_dtoa_r+0xa08>
 8110f94:	f000 faea 	bl	811156c <__multadd>
 8110f98:	4639      	mov	r1, r7
 8110f9a:	4680      	mov	r8, r0
 8110f9c:	2300      	movs	r3, #0
 8110f9e:	220a      	movs	r2, #10
 8110fa0:	4620      	mov	r0, r4
 8110fa2:	f000 fae3 	bl	811156c <__multadd>
 8110fa6:	4607      	mov	r7, r0
 8110fa8:	e7f0      	b.n	8110f8c <_dtoa_r+0xb14>
 8110faa:	f1b9 0f00 	cmp.w	r9, #0
 8110fae:	9a00      	ldr	r2, [sp, #0]
 8110fb0:	bfcc      	ite	gt
 8110fb2:	464d      	movgt	r5, r9
 8110fb4:	2501      	movle	r5, #1
 8110fb6:	4415      	add	r5, r2
 8110fb8:	f04f 0800 	mov.w	r8, #0
 8110fbc:	4659      	mov	r1, fp
 8110fbe:	2201      	movs	r2, #1
 8110fc0:	4620      	mov	r0, r4
 8110fc2:	9301      	str	r3, [sp, #4]
 8110fc4:	f000 fc82 	bl	81118cc <__lshift>
 8110fc8:	4631      	mov	r1, r6
 8110fca:	4683      	mov	fp, r0
 8110fcc:	f000 fcea 	bl	81119a4 <__mcmp>
 8110fd0:	2800      	cmp	r0, #0
 8110fd2:	dcb2      	bgt.n	8110f3a <_dtoa_r+0xac2>
 8110fd4:	d102      	bne.n	8110fdc <_dtoa_r+0xb64>
 8110fd6:	9b01      	ldr	r3, [sp, #4]
 8110fd8:	07db      	lsls	r3, r3, #31
 8110fda:	d4ae      	bmi.n	8110f3a <_dtoa_r+0xac2>
 8110fdc:	462b      	mov	r3, r5
 8110fde:	461d      	mov	r5, r3
 8110fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8110fe4:	2a30      	cmp	r2, #48	; 0x30
 8110fe6:	d0fa      	beq.n	8110fde <_dtoa_r+0xb66>
 8110fe8:	e6f7      	b.n	8110dda <_dtoa_r+0x962>
 8110fea:	9a00      	ldr	r2, [sp, #0]
 8110fec:	429a      	cmp	r2, r3
 8110fee:	d1a5      	bne.n	8110f3c <_dtoa_r+0xac4>
 8110ff0:	f10a 0a01 	add.w	sl, sl, #1
 8110ff4:	2331      	movs	r3, #49	; 0x31
 8110ff6:	e779      	b.n	8110eec <_dtoa_r+0xa74>
 8110ff8:	4b13      	ldr	r3, [pc, #76]	; (8111048 <_dtoa_r+0xbd0>)
 8110ffa:	f7ff baaf 	b.w	811055c <_dtoa_r+0xe4>
 8110ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8111000:	2b00      	cmp	r3, #0
 8111002:	f47f aa86 	bne.w	8110512 <_dtoa_r+0x9a>
 8111006:	4b11      	ldr	r3, [pc, #68]	; (811104c <_dtoa_r+0xbd4>)
 8111008:	f7ff baa8 	b.w	811055c <_dtoa_r+0xe4>
 811100c:	f1b9 0f00 	cmp.w	r9, #0
 8111010:	dc03      	bgt.n	811101a <_dtoa_r+0xba2>
 8111012:	9b05      	ldr	r3, [sp, #20]
 8111014:	2b02      	cmp	r3, #2
 8111016:	f73f aec9 	bgt.w	8110dac <_dtoa_r+0x934>
 811101a:	9d00      	ldr	r5, [sp, #0]
 811101c:	4631      	mov	r1, r6
 811101e:	4658      	mov	r0, fp
 8111020:	f7ff f99e 	bl	8110360 <quorem>
 8111024:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8111028:	f805 3b01 	strb.w	r3, [r5], #1
 811102c:	9a00      	ldr	r2, [sp, #0]
 811102e:	1aaa      	subs	r2, r5, r2
 8111030:	4591      	cmp	r9, r2
 8111032:	ddba      	ble.n	8110faa <_dtoa_r+0xb32>
 8111034:	4659      	mov	r1, fp
 8111036:	2300      	movs	r3, #0
 8111038:	220a      	movs	r2, #10
 811103a:	4620      	mov	r0, r4
 811103c:	f000 fa96 	bl	811156c <__multadd>
 8111040:	4683      	mov	fp, r0
 8111042:	e7eb      	b.n	811101c <_dtoa_r+0xba4>
 8111044:	081133c8 	.word	0x081133c8
 8111048:	08113220 	.word	0x08113220
 811104c:	08113345 	.word	0x08113345

08111050 <__sflush_r>:
 8111050:	898a      	ldrh	r2, [r1, #12]
 8111052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111056:	4605      	mov	r5, r0
 8111058:	0710      	lsls	r0, r2, #28
 811105a:	460c      	mov	r4, r1
 811105c:	d458      	bmi.n	8111110 <__sflush_r+0xc0>
 811105e:	684b      	ldr	r3, [r1, #4]
 8111060:	2b00      	cmp	r3, #0
 8111062:	dc05      	bgt.n	8111070 <__sflush_r+0x20>
 8111064:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8111066:	2b00      	cmp	r3, #0
 8111068:	dc02      	bgt.n	8111070 <__sflush_r+0x20>
 811106a:	2000      	movs	r0, #0
 811106c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8111070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8111072:	2e00      	cmp	r6, #0
 8111074:	d0f9      	beq.n	811106a <__sflush_r+0x1a>
 8111076:	2300      	movs	r3, #0
 8111078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 811107c:	682f      	ldr	r7, [r5, #0]
 811107e:	602b      	str	r3, [r5, #0]
 8111080:	d032      	beq.n	81110e8 <__sflush_r+0x98>
 8111082:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8111084:	89a3      	ldrh	r3, [r4, #12]
 8111086:	075a      	lsls	r2, r3, #29
 8111088:	d505      	bpl.n	8111096 <__sflush_r+0x46>
 811108a:	6863      	ldr	r3, [r4, #4]
 811108c:	1ac0      	subs	r0, r0, r3
 811108e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8111090:	b10b      	cbz	r3, 8111096 <__sflush_r+0x46>
 8111092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8111094:	1ac0      	subs	r0, r0, r3
 8111096:	2300      	movs	r3, #0
 8111098:	4602      	mov	r2, r0
 811109a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 811109c:	6a21      	ldr	r1, [r4, #32]
 811109e:	4628      	mov	r0, r5
 81110a0:	47b0      	blx	r6
 81110a2:	1c43      	adds	r3, r0, #1
 81110a4:	89a3      	ldrh	r3, [r4, #12]
 81110a6:	d106      	bne.n	81110b6 <__sflush_r+0x66>
 81110a8:	6829      	ldr	r1, [r5, #0]
 81110aa:	291d      	cmp	r1, #29
 81110ac:	d82c      	bhi.n	8111108 <__sflush_r+0xb8>
 81110ae:	4a2a      	ldr	r2, [pc, #168]	; (8111158 <__sflush_r+0x108>)
 81110b0:	40ca      	lsrs	r2, r1
 81110b2:	07d6      	lsls	r6, r2, #31
 81110b4:	d528      	bpl.n	8111108 <__sflush_r+0xb8>
 81110b6:	2200      	movs	r2, #0
 81110b8:	6062      	str	r2, [r4, #4]
 81110ba:	04d9      	lsls	r1, r3, #19
 81110bc:	6922      	ldr	r2, [r4, #16]
 81110be:	6022      	str	r2, [r4, #0]
 81110c0:	d504      	bpl.n	81110cc <__sflush_r+0x7c>
 81110c2:	1c42      	adds	r2, r0, #1
 81110c4:	d101      	bne.n	81110ca <__sflush_r+0x7a>
 81110c6:	682b      	ldr	r3, [r5, #0]
 81110c8:	b903      	cbnz	r3, 81110cc <__sflush_r+0x7c>
 81110ca:	6560      	str	r0, [r4, #84]	; 0x54
 81110cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81110ce:	602f      	str	r7, [r5, #0]
 81110d0:	2900      	cmp	r1, #0
 81110d2:	d0ca      	beq.n	811106a <__sflush_r+0x1a>
 81110d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81110d8:	4299      	cmp	r1, r3
 81110da:	d002      	beq.n	81110e2 <__sflush_r+0x92>
 81110dc:	4628      	mov	r0, r5
 81110de:	f000 fd71 	bl	8111bc4 <_free_r>
 81110e2:	2000      	movs	r0, #0
 81110e4:	6360      	str	r0, [r4, #52]	; 0x34
 81110e6:	e7c1      	b.n	811106c <__sflush_r+0x1c>
 81110e8:	6a21      	ldr	r1, [r4, #32]
 81110ea:	2301      	movs	r3, #1
 81110ec:	4628      	mov	r0, r5
 81110ee:	47b0      	blx	r6
 81110f0:	1c41      	adds	r1, r0, #1
 81110f2:	d1c7      	bne.n	8111084 <__sflush_r+0x34>
 81110f4:	682b      	ldr	r3, [r5, #0]
 81110f6:	2b00      	cmp	r3, #0
 81110f8:	d0c4      	beq.n	8111084 <__sflush_r+0x34>
 81110fa:	2b1d      	cmp	r3, #29
 81110fc:	d001      	beq.n	8111102 <__sflush_r+0xb2>
 81110fe:	2b16      	cmp	r3, #22
 8111100:	d101      	bne.n	8111106 <__sflush_r+0xb6>
 8111102:	602f      	str	r7, [r5, #0]
 8111104:	e7b1      	b.n	811106a <__sflush_r+0x1a>
 8111106:	89a3      	ldrh	r3, [r4, #12]
 8111108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 811110c:	81a3      	strh	r3, [r4, #12]
 811110e:	e7ad      	b.n	811106c <__sflush_r+0x1c>
 8111110:	690f      	ldr	r7, [r1, #16]
 8111112:	2f00      	cmp	r7, #0
 8111114:	d0a9      	beq.n	811106a <__sflush_r+0x1a>
 8111116:	0793      	lsls	r3, r2, #30
 8111118:	680e      	ldr	r6, [r1, #0]
 811111a:	bf08      	it	eq
 811111c:	694b      	ldreq	r3, [r1, #20]
 811111e:	600f      	str	r7, [r1, #0]
 8111120:	bf18      	it	ne
 8111122:	2300      	movne	r3, #0
 8111124:	eba6 0807 	sub.w	r8, r6, r7
 8111128:	608b      	str	r3, [r1, #8]
 811112a:	f1b8 0f00 	cmp.w	r8, #0
 811112e:	dd9c      	ble.n	811106a <__sflush_r+0x1a>
 8111130:	6a21      	ldr	r1, [r4, #32]
 8111132:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8111134:	4643      	mov	r3, r8
 8111136:	463a      	mov	r2, r7
 8111138:	4628      	mov	r0, r5
 811113a:	47b0      	blx	r6
 811113c:	2800      	cmp	r0, #0
 811113e:	dc06      	bgt.n	811114e <__sflush_r+0xfe>
 8111140:	89a3      	ldrh	r3, [r4, #12]
 8111142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8111146:	81a3      	strh	r3, [r4, #12]
 8111148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 811114c:	e78e      	b.n	811106c <__sflush_r+0x1c>
 811114e:	4407      	add	r7, r0
 8111150:	eba8 0800 	sub.w	r8, r8, r0
 8111154:	e7e9      	b.n	811112a <__sflush_r+0xda>
 8111156:	bf00      	nop
 8111158:	20400001 	.word	0x20400001

0811115c <_fflush_r>:
 811115c:	b538      	push	{r3, r4, r5, lr}
 811115e:	690b      	ldr	r3, [r1, #16]
 8111160:	4605      	mov	r5, r0
 8111162:	460c      	mov	r4, r1
 8111164:	b913      	cbnz	r3, 811116c <_fflush_r+0x10>
 8111166:	2500      	movs	r5, #0
 8111168:	4628      	mov	r0, r5
 811116a:	bd38      	pop	{r3, r4, r5, pc}
 811116c:	b118      	cbz	r0, 8111176 <_fflush_r+0x1a>
 811116e:	6983      	ldr	r3, [r0, #24]
 8111170:	b90b      	cbnz	r3, 8111176 <_fflush_r+0x1a>
 8111172:	f000 f887 	bl	8111284 <__sinit>
 8111176:	4b14      	ldr	r3, [pc, #80]	; (81111c8 <_fflush_r+0x6c>)
 8111178:	429c      	cmp	r4, r3
 811117a:	d11b      	bne.n	81111b4 <_fflush_r+0x58>
 811117c:	686c      	ldr	r4, [r5, #4]
 811117e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8111182:	2b00      	cmp	r3, #0
 8111184:	d0ef      	beq.n	8111166 <_fflush_r+0xa>
 8111186:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8111188:	07d0      	lsls	r0, r2, #31
 811118a:	d404      	bmi.n	8111196 <_fflush_r+0x3a>
 811118c:	0599      	lsls	r1, r3, #22
 811118e:	d402      	bmi.n	8111196 <_fflush_r+0x3a>
 8111190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8111192:	f000 f91a 	bl	81113ca <__retarget_lock_acquire_recursive>
 8111196:	4628      	mov	r0, r5
 8111198:	4621      	mov	r1, r4
 811119a:	f7ff ff59 	bl	8111050 <__sflush_r>
 811119e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81111a0:	07da      	lsls	r2, r3, #31
 81111a2:	4605      	mov	r5, r0
 81111a4:	d4e0      	bmi.n	8111168 <_fflush_r+0xc>
 81111a6:	89a3      	ldrh	r3, [r4, #12]
 81111a8:	059b      	lsls	r3, r3, #22
 81111aa:	d4dd      	bmi.n	8111168 <_fflush_r+0xc>
 81111ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81111ae:	f000 f90e 	bl	81113ce <__retarget_lock_release_recursive>
 81111b2:	e7d9      	b.n	8111168 <_fflush_r+0xc>
 81111b4:	4b05      	ldr	r3, [pc, #20]	; (81111cc <_fflush_r+0x70>)
 81111b6:	429c      	cmp	r4, r3
 81111b8:	d101      	bne.n	81111be <_fflush_r+0x62>
 81111ba:	68ac      	ldr	r4, [r5, #8]
 81111bc:	e7df      	b.n	811117e <_fflush_r+0x22>
 81111be:	4b04      	ldr	r3, [pc, #16]	; (81111d0 <_fflush_r+0x74>)
 81111c0:	429c      	cmp	r4, r3
 81111c2:	bf08      	it	eq
 81111c4:	68ec      	ldreq	r4, [r5, #12]
 81111c6:	e7da      	b.n	811117e <_fflush_r+0x22>
 81111c8:	081133fc 	.word	0x081133fc
 81111cc:	0811341c 	.word	0x0811341c
 81111d0:	081133dc 	.word	0x081133dc

081111d4 <std>:
 81111d4:	2300      	movs	r3, #0
 81111d6:	b510      	push	{r4, lr}
 81111d8:	4604      	mov	r4, r0
 81111da:	e9c0 3300 	strd	r3, r3, [r0]
 81111de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 81111e2:	6083      	str	r3, [r0, #8]
 81111e4:	8181      	strh	r1, [r0, #12]
 81111e6:	6643      	str	r3, [r0, #100]	; 0x64
 81111e8:	81c2      	strh	r2, [r0, #14]
 81111ea:	6183      	str	r3, [r0, #24]
 81111ec:	4619      	mov	r1, r3
 81111ee:	2208      	movs	r2, #8
 81111f0:	305c      	adds	r0, #92	; 0x5c
 81111f2:	f7fe f981 	bl	810f4f8 <memset>
 81111f6:	4b05      	ldr	r3, [pc, #20]	; (811120c <std+0x38>)
 81111f8:	6263      	str	r3, [r4, #36]	; 0x24
 81111fa:	4b05      	ldr	r3, [pc, #20]	; (8111210 <std+0x3c>)
 81111fc:	62a3      	str	r3, [r4, #40]	; 0x28
 81111fe:	4b05      	ldr	r3, [pc, #20]	; (8111214 <std+0x40>)
 8111200:	62e3      	str	r3, [r4, #44]	; 0x2c
 8111202:	4b05      	ldr	r3, [pc, #20]	; (8111218 <std+0x44>)
 8111204:	6224      	str	r4, [r4, #32]
 8111206:	6323      	str	r3, [r4, #48]	; 0x30
 8111208:	bd10      	pop	{r4, pc}
 811120a:	bf00      	nop
 811120c:	081122a5 	.word	0x081122a5
 8111210:	081122c7 	.word	0x081122c7
 8111214:	081122ff 	.word	0x081122ff
 8111218:	08112323 	.word	0x08112323

0811121c <_cleanup_r>:
 811121c:	4901      	ldr	r1, [pc, #4]	; (8111224 <_cleanup_r+0x8>)
 811121e:	f000 b8af 	b.w	8111380 <_fwalk_reent>
 8111222:	bf00      	nop
 8111224:	0811115d 	.word	0x0811115d

08111228 <__sfmoreglue>:
 8111228:	b570      	push	{r4, r5, r6, lr}
 811122a:	1e4a      	subs	r2, r1, #1
 811122c:	2568      	movs	r5, #104	; 0x68
 811122e:	4355      	muls	r5, r2
 8111230:	460e      	mov	r6, r1
 8111232:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8111236:	f000 fd15 	bl	8111c64 <_malloc_r>
 811123a:	4604      	mov	r4, r0
 811123c:	b140      	cbz	r0, 8111250 <__sfmoreglue+0x28>
 811123e:	2100      	movs	r1, #0
 8111240:	e9c0 1600 	strd	r1, r6, [r0]
 8111244:	300c      	adds	r0, #12
 8111246:	60a0      	str	r0, [r4, #8]
 8111248:	f105 0268 	add.w	r2, r5, #104	; 0x68
 811124c:	f7fe f954 	bl	810f4f8 <memset>
 8111250:	4620      	mov	r0, r4
 8111252:	bd70      	pop	{r4, r5, r6, pc}

08111254 <__sfp_lock_acquire>:
 8111254:	4801      	ldr	r0, [pc, #4]	; (811125c <__sfp_lock_acquire+0x8>)
 8111256:	f000 b8b8 	b.w	81113ca <__retarget_lock_acquire_recursive>
 811125a:	bf00      	nop
 811125c:	1000a380 	.word	0x1000a380

08111260 <__sfp_lock_release>:
 8111260:	4801      	ldr	r0, [pc, #4]	; (8111268 <__sfp_lock_release+0x8>)
 8111262:	f000 b8b4 	b.w	81113ce <__retarget_lock_release_recursive>
 8111266:	bf00      	nop
 8111268:	1000a380 	.word	0x1000a380

0811126c <__sinit_lock_acquire>:
 811126c:	4801      	ldr	r0, [pc, #4]	; (8111274 <__sinit_lock_acquire+0x8>)
 811126e:	f000 b8ac 	b.w	81113ca <__retarget_lock_acquire_recursive>
 8111272:	bf00      	nop
 8111274:	1000a37b 	.word	0x1000a37b

08111278 <__sinit_lock_release>:
 8111278:	4801      	ldr	r0, [pc, #4]	; (8111280 <__sinit_lock_release+0x8>)
 811127a:	f000 b8a8 	b.w	81113ce <__retarget_lock_release_recursive>
 811127e:	bf00      	nop
 8111280:	1000a37b 	.word	0x1000a37b

08111284 <__sinit>:
 8111284:	b510      	push	{r4, lr}
 8111286:	4604      	mov	r4, r0
 8111288:	f7ff fff0 	bl	811126c <__sinit_lock_acquire>
 811128c:	69a3      	ldr	r3, [r4, #24]
 811128e:	b11b      	cbz	r3, 8111298 <__sinit+0x14>
 8111290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8111294:	f7ff bff0 	b.w	8111278 <__sinit_lock_release>
 8111298:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 811129c:	6523      	str	r3, [r4, #80]	; 0x50
 811129e:	4b13      	ldr	r3, [pc, #76]	; (81112ec <__sinit+0x68>)
 81112a0:	4a13      	ldr	r2, [pc, #76]	; (81112f0 <__sinit+0x6c>)
 81112a2:	681b      	ldr	r3, [r3, #0]
 81112a4:	62a2      	str	r2, [r4, #40]	; 0x28
 81112a6:	42a3      	cmp	r3, r4
 81112a8:	bf04      	itt	eq
 81112aa:	2301      	moveq	r3, #1
 81112ac:	61a3      	streq	r3, [r4, #24]
 81112ae:	4620      	mov	r0, r4
 81112b0:	f000 f820 	bl	81112f4 <__sfp>
 81112b4:	6060      	str	r0, [r4, #4]
 81112b6:	4620      	mov	r0, r4
 81112b8:	f000 f81c 	bl	81112f4 <__sfp>
 81112bc:	60a0      	str	r0, [r4, #8]
 81112be:	4620      	mov	r0, r4
 81112c0:	f000 f818 	bl	81112f4 <__sfp>
 81112c4:	2200      	movs	r2, #0
 81112c6:	60e0      	str	r0, [r4, #12]
 81112c8:	2104      	movs	r1, #4
 81112ca:	6860      	ldr	r0, [r4, #4]
 81112cc:	f7ff ff82 	bl	81111d4 <std>
 81112d0:	68a0      	ldr	r0, [r4, #8]
 81112d2:	2201      	movs	r2, #1
 81112d4:	2109      	movs	r1, #9
 81112d6:	f7ff ff7d 	bl	81111d4 <std>
 81112da:	68e0      	ldr	r0, [r4, #12]
 81112dc:	2202      	movs	r2, #2
 81112de:	2112      	movs	r1, #18
 81112e0:	f7ff ff78 	bl	81111d4 <std>
 81112e4:	2301      	movs	r3, #1
 81112e6:	61a3      	str	r3, [r4, #24]
 81112e8:	e7d2      	b.n	8111290 <__sinit+0xc>
 81112ea:	bf00      	nop
 81112ec:	0811320c 	.word	0x0811320c
 81112f0:	0811121d 	.word	0x0811121d

081112f4 <__sfp>:
 81112f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81112f6:	4607      	mov	r7, r0
 81112f8:	f7ff ffac 	bl	8111254 <__sfp_lock_acquire>
 81112fc:	4b1e      	ldr	r3, [pc, #120]	; (8111378 <__sfp+0x84>)
 81112fe:	681e      	ldr	r6, [r3, #0]
 8111300:	69b3      	ldr	r3, [r6, #24]
 8111302:	b913      	cbnz	r3, 811130a <__sfp+0x16>
 8111304:	4630      	mov	r0, r6
 8111306:	f7ff ffbd 	bl	8111284 <__sinit>
 811130a:	3648      	adds	r6, #72	; 0x48
 811130c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8111310:	3b01      	subs	r3, #1
 8111312:	d503      	bpl.n	811131c <__sfp+0x28>
 8111314:	6833      	ldr	r3, [r6, #0]
 8111316:	b30b      	cbz	r3, 811135c <__sfp+0x68>
 8111318:	6836      	ldr	r6, [r6, #0]
 811131a:	e7f7      	b.n	811130c <__sfp+0x18>
 811131c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8111320:	b9d5      	cbnz	r5, 8111358 <__sfp+0x64>
 8111322:	4b16      	ldr	r3, [pc, #88]	; (811137c <__sfp+0x88>)
 8111324:	60e3      	str	r3, [r4, #12]
 8111326:	f104 0058 	add.w	r0, r4, #88	; 0x58
 811132a:	6665      	str	r5, [r4, #100]	; 0x64
 811132c:	f000 f84c 	bl	81113c8 <__retarget_lock_init_recursive>
 8111330:	f7ff ff96 	bl	8111260 <__sfp_lock_release>
 8111334:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8111338:	e9c4 5504 	strd	r5, r5, [r4, #16]
 811133c:	6025      	str	r5, [r4, #0]
 811133e:	61a5      	str	r5, [r4, #24]
 8111340:	2208      	movs	r2, #8
 8111342:	4629      	mov	r1, r5
 8111344:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8111348:	f7fe f8d6 	bl	810f4f8 <memset>
 811134c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8111350:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8111354:	4620      	mov	r0, r4
 8111356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8111358:	3468      	adds	r4, #104	; 0x68
 811135a:	e7d9      	b.n	8111310 <__sfp+0x1c>
 811135c:	2104      	movs	r1, #4
 811135e:	4638      	mov	r0, r7
 8111360:	f7ff ff62 	bl	8111228 <__sfmoreglue>
 8111364:	4604      	mov	r4, r0
 8111366:	6030      	str	r0, [r6, #0]
 8111368:	2800      	cmp	r0, #0
 811136a:	d1d5      	bne.n	8111318 <__sfp+0x24>
 811136c:	f7ff ff78 	bl	8111260 <__sfp_lock_release>
 8111370:	230c      	movs	r3, #12
 8111372:	603b      	str	r3, [r7, #0]
 8111374:	e7ee      	b.n	8111354 <__sfp+0x60>
 8111376:	bf00      	nop
 8111378:	0811320c 	.word	0x0811320c
 811137c:	ffff0001 	.word	0xffff0001

08111380 <_fwalk_reent>:
 8111380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8111384:	4606      	mov	r6, r0
 8111386:	4688      	mov	r8, r1
 8111388:	f100 0448 	add.w	r4, r0, #72	; 0x48
 811138c:	2700      	movs	r7, #0
 811138e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8111392:	f1b9 0901 	subs.w	r9, r9, #1
 8111396:	d505      	bpl.n	81113a4 <_fwalk_reent+0x24>
 8111398:	6824      	ldr	r4, [r4, #0]
 811139a:	2c00      	cmp	r4, #0
 811139c:	d1f7      	bne.n	811138e <_fwalk_reent+0xe>
 811139e:	4638      	mov	r0, r7
 81113a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81113a4:	89ab      	ldrh	r3, [r5, #12]
 81113a6:	2b01      	cmp	r3, #1
 81113a8:	d907      	bls.n	81113ba <_fwalk_reent+0x3a>
 81113aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81113ae:	3301      	adds	r3, #1
 81113b0:	d003      	beq.n	81113ba <_fwalk_reent+0x3a>
 81113b2:	4629      	mov	r1, r5
 81113b4:	4630      	mov	r0, r6
 81113b6:	47c0      	blx	r8
 81113b8:	4307      	orrs	r7, r0
 81113ba:	3568      	adds	r5, #104	; 0x68
 81113bc:	e7e9      	b.n	8111392 <_fwalk_reent+0x12>
	...

081113c0 <_localeconv_r>:
 81113c0:	4800      	ldr	r0, [pc, #0]	; (81113c4 <_localeconv_r+0x4>)
 81113c2:	4770      	bx	lr
 81113c4:	10000190 	.word	0x10000190

081113c8 <__retarget_lock_init_recursive>:
 81113c8:	4770      	bx	lr

081113ca <__retarget_lock_acquire_recursive>:
 81113ca:	4770      	bx	lr

081113cc <__retarget_lock_release>:
 81113cc:	4770      	bx	lr

081113ce <__retarget_lock_release_recursive>:
 81113ce:	4770      	bx	lr

081113d0 <__swhatbuf_r>:
 81113d0:	b570      	push	{r4, r5, r6, lr}
 81113d2:	460e      	mov	r6, r1
 81113d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81113d8:	2900      	cmp	r1, #0
 81113da:	b096      	sub	sp, #88	; 0x58
 81113dc:	4614      	mov	r4, r2
 81113de:	461d      	mov	r5, r3
 81113e0:	da07      	bge.n	81113f2 <__swhatbuf_r+0x22>
 81113e2:	2300      	movs	r3, #0
 81113e4:	602b      	str	r3, [r5, #0]
 81113e6:	89b3      	ldrh	r3, [r6, #12]
 81113e8:	061a      	lsls	r2, r3, #24
 81113ea:	d410      	bmi.n	811140e <__swhatbuf_r+0x3e>
 81113ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81113f0:	e00e      	b.n	8111410 <__swhatbuf_r+0x40>
 81113f2:	466a      	mov	r2, sp
 81113f4:	f000 ffec 	bl	81123d0 <_fstat_r>
 81113f8:	2800      	cmp	r0, #0
 81113fa:	dbf2      	blt.n	81113e2 <__swhatbuf_r+0x12>
 81113fc:	9a01      	ldr	r2, [sp, #4]
 81113fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8111402:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8111406:	425a      	negs	r2, r3
 8111408:	415a      	adcs	r2, r3
 811140a:	602a      	str	r2, [r5, #0]
 811140c:	e7ee      	b.n	81113ec <__swhatbuf_r+0x1c>
 811140e:	2340      	movs	r3, #64	; 0x40
 8111410:	2000      	movs	r0, #0
 8111412:	6023      	str	r3, [r4, #0]
 8111414:	b016      	add	sp, #88	; 0x58
 8111416:	bd70      	pop	{r4, r5, r6, pc}

08111418 <__smakebuf_r>:
 8111418:	898b      	ldrh	r3, [r1, #12]
 811141a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 811141c:	079d      	lsls	r5, r3, #30
 811141e:	4606      	mov	r6, r0
 8111420:	460c      	mov	r4, r1
 8111422:	d507      	bpl.n	8111434 <__smakebuf_r+0x1c>
 8111424:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8111428:	6023      	str	r3, [r4, #0]
 811142a:	6123      	str	r3, [r4, #16]
 811142c:	2301      	movs	r3, #1
 811142e:	6163      	str	r3, [r4, #20]
 8111430:	b002      	add	sp, #8
 8111432:	bd70      	pop	{r4, r5, r6, pc}
 8111434:	ab01      	add	r3, sp, #4
 8111436:	466a      	mov	r2, sp
 8111438:	f7ff ffca 	bl	81113d0 <__swhatbuf_r>
 811143c:	9900      	ldr	r1, [sp, #0]
 811143e:	4605      	mov	r5, r0
 8111440:	4630      	mov	r0, r6
 8111442:	f000 fc0f 	bl	8111c64 <_malloc_r>
 8111446:	b948      	cbnz	r0, 811145c <__smakebuf_r+0x44>
 8111448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811144c:	059a      	lsls	r2, r3, #22
 811144e:	d4ef      	bmi.n	8111430 <__smakebuf_r+0x18>
 8111450:	f023 0303 	bic.w	r3, r3, #3
 8111454:	f043 0302 	orr.w	r3, r3, #2
 8111458:	81a3      	strh	r3, [r4, #12]
 811145a:	e7e3      	b.n	8111424 <__smakebuf_r+0xc>
 811145c:	4b0d      	ldr	r3, [pc, #52]	; (8111494 <__smakebuf_r+0x7c>)
 811145e:	62b3      	str	r3, [r6, #40]	; 0x28
 8111460:	89a3      	ldrh	r3, [r4, #12]
 8111462:	6020      	str	r0, [r4, #0]
 8111464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8111468:	81a3      	strh	r3, [r4, #12]
 811146a:	9b00      	ldr	r3, [sp, #0]
 811146c:	6163      	str	r3, [r4, #20]
 811146e:	9b01      	ldr	r3, [sp, #4]
 8111470:	6120      	str	r0, [r4, #16]
 8111472:	b15b      	cbz	r3, 811148c <__smakebuf_r+0x74>
 8111474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8111478:	4630      	mov	r0, r6
 811147a:	f000 ffbb 	bl	81123f4 <_isatty_r>
 811147e:	b128      	cbz	r0, 811148c <__smakebuf_r+0x74>
 8111480:	89a3      	ldrh	r3, [r4, #12]
 8111482:	f023 0303 	bic.w	r3, r3, #3
 8111486:	f043 0301 	orr.w	r3, r3, #1
 811148a:	81a3      	strh	r3, [r4, #12]
 811148c:	89a0      	ldrh	r0, [r4, #12]
 811148e:	4305      	orrs	r5, r0
 8111490:	81a5      	strh	r5, [r4, #12]
 8111492:	e7cd      	b.n	8111430 <__smakebuf_r+0x18>
 8111494:	0811121d 	.word	0x0811121d

08111498 <malloc>:
 8111498:	4b02      	ldr	r3, [pc, #8]	; (81114a4 <malloc+0xc>)
 811149a:	4601      	mov	r1, r0
 811149c:	6818      	ldr	r0, [r3, #0]
 811149e:	f000 bbe1 	b.w	8111c64 <_malloc_r>
 81114a2:	bf00      	nop
 81114a4:	10000038 	.word	0x10000038

081114a8 <_Balloc>:
 81114a8:	b570      	push	{r4, r5, r6, lr}
 81114aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 81114ac:	4604      	mov	r4, r0
 81114ae:	460d      	mov	r5, r1
 81114b0:	b976      	cbnz	r6, 81114d0 <_Balloc+0x28>
 81114b2:	2010      	movs	r0, #16
 81114b4:	f7ff fff0 	bl	8111498 <malloc>
 81114b8:	4602      	mov	r2, r0
 81114ba:	6260      	str	r0, [r4, #36]	; 0x24
 81114bc:	b920      	cbnz	r0, 81114c8 <_Balloc+0x20>
 81114be:	4b18      	ldr	r3, [pc, #96]	; (8111520 <_Balloc+0x78>)
 81114c0:	4818      	ldr	r0, [pc, #96]	; (8111524 <_Balloc+0x7c>)
 81114c2:	2166      	movs	r1, #102	; 0x66
 81114c4:	f000 ff44 	bl	8112350 <__assert_func>
 81114c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81114cc:	6006      	str	r6, [r0, #0]
 81114ce:	60c6      	str	r6, [r0, #12]
 81114d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 81114d2:	68f3      	ldr	r3, [r6, #12]
 81114d4:	b183      	cbz	r3, 81114f8 <_Balloc+0x50>
 81114d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81114d8:	68db      	ldr	r3, [r3, #12]
 81114da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 81114de:	b9b8      	cbnz	r0, 8111510 <_Balloc+0x68>
 81114e0:	2101      	movs	r1, #1
 81114e2:	fa01 f605 	lsl.w	r6, r1, r5
 81114e6:	1d72      	adds	r2, r6, #5
 81114e8:	0092      	lsls	r2, r2, #2
 81114ea:	4620      	mov	r0, r4
 81114ec:	f000 fb5a 	bl	8111ba4 <_calloc_r>
 81114f0:	b160      	cbz	r0, 811150c <_Balloc+0x64>
 81114f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 81114f6:	e00e      	b.n	8111516 <_Balloc+0x6e>
 81114f8:	2221      	movs	r2, #33	; 0x21
 81114fa:	2104      	movs	r1, #4
 81114fc:	4620      	mov	r0, r4
 81114fe:	f000 fb51 	bl	8111ba4 <_calloc_r>
 8111502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8111504:	60f0      	str	r0, [r6, #12]
 8111506:	68db      	ldr	r3, [r3, #12]
 8111508:	2b00      	cmp	r3, #0
 811150a:	d1e4      	bne.n	81114d6 <_Balloc+0x2e>
 811150c:	2000      	movs	r0, #0
 811150e:	bd70      	pop	{r4, r5, r6, pc}
 8111510:	6802      	ldr	r2, [r0, #0]
 8111512:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8111516:	2300      	movs	r3, #0
 8111518:	e9c0 3303 	strd	r3, r3, [r0, #12]
 811151c:	e7f7      	b.n	811150e <_Balloc+0x66>
 811151e:	bf00      	nop
 8111520:	08113352 	.word	0x08113352
 8111524:	0811343c 	.word	0x0811343c

08111528 <_Bfree>:
 8111528:	b570      	push	{r4, r5, r6, lr}
 811152a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 811152c:	4605      	mov	r5, r0
 811152e:	460c      	mov	r4, r1
 8111530:	b976      	cbnz	r6, 8111550 <_Bfree+0x28>
 8111532:	2010      	movs	r0, #16
 8111534:	f7ff ffb0 	bl	8111498 <malloc>
 8111538:	4602      	mov	r2, r0
 811153a:	6268      	str	r0, [r5, #36]	; 0x24
 811153c:	b920      	cbnz	r0, 8111548 <_Bfree+0x20>
 811153e:	4b09      	ldr	r3, [pc, #36]	; (8111564 <_Bfree+0x3c>)
 8111540:	4809      	ldr	r0, [pc, #36]	; (8111568 <_Bfree+0x40>)
 8111542:	218a      	movs	r1, #138	; 0x8a
 8111544:	f000 ff04 	bl	8112350 <__assert_func>
 8111548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 811154c:	6006      	str	r6, [r0, #0]
 811154e:	60c6      	str	r6, [r0, #12]
 8111550:	b13c      	cbz	r4, 8111562 <_Bfree+0x3a>
 8111552:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8111554:	6862      	ldr	r2, [r4, #4]
 8111556:	68db      	ldr	r3, [r3, #12]
 8111558:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 811155c:	6021      	str	r1, [r4, #0]
 811155e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8111562:	bd70      	pop	{r4, r5, r6, pc}
 8111564:	08113352 	.word	0x08113352
 8111568:	0811343c 	.word	0x0811343c

0811156c <__multadd>:
 811156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111570:	690e      	ldr	r6, [r1, #16]
 8111572:	4607      	mov	r7, r0
 8111574:	4698      	mov	r8, r3
 8111576:	460c      	mov	r4, r1
 8111578:	f101 0014 	add.w	r0, r1, #20
 811157c:	2300      	movs	r3, #0
 811157e:	6805      	ldr	r5, [r0, #0]
 8111580:	b2a9      	uxth	r1, r5
 8111582:	fb02 8101 	mla	r1, r2, r1, r8
 8111586:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 811158a:	0c2d      	lsrs	r5, r5, #16
 811158c:	fb02 c505 	mla	r5, r2, r5, ip
 8111590:	b289      	uxth	r1, r1
 8111592:	3301      	adds	r3, #1
 8111594:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8111598:	429e      	cmp	r6, r3
 811159a:	f840 1b04 	str.w	r1, [r0], #4
 811159e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 81115a2:	dcec      	bgt.n	811157e <__multadd+0x12>
 81115a4:	f1b8 0f00 	cmp.w	r8, #0
 81115a8:	d022      	beq.n	81115f0 <__multadd+0x84>
 81115aa:	68a3      	ldr	r3, [r4, #8]
 81115ac:	42b3      	cmp	r3, r6
 81115ae:	dc19      	bgt.n	81115e4 <__multadd+0x78>
 81115b0:	6861      	ldr	r1, [r4, #4]
 81115b2:	4638      	mov	r0, r7
 81115b4:	3101      	adds	r1, #1
 81115b6:	f7ff ff77 	bl	81114a8 <_Balloc>
 81115ba:	4605      	mov	r5, r0
 81115bc:	b928      	cbnz	r0, 81115ca <__multadd+0x5e>
 81115be:	4602      	mov	r2, r0
 81115c0:	4b0d      	ldr	r3, [pc, #52]	; (81115f8 <__multadd+0x8c>)
 81115c2:	480e      	ldr	r0, [pc, #56]	; (81115fc <__multadd+0x90>)
 81115c4:	21b5      	movs	r1, #181	; 0xb5
 81115c6:	f000 fec3 	bl	8112350 <__assert_func>
 81115ca:	6922      	ldr	r2, [r4, #16]
 81115cc:	3202      	adds	r2, #2
 81115ce:	f104 010c 	add.w	r1, r4, #12
 81115d2:	0092      	lsls	r2, r2, #2
 81115d4:	300c      	adds	r0, #12
 81115d6:	f7fd ff81 	bl	810f4dc <memcpy>
 81115da:	4621      	mov	r1, r4
 81115dc:	4638      	mov	r0, r7
 81115de:	f7ff ffa3 	bl	8111528 <_Bfree>
 81115e2:	462c      	mov	r4, r5
 81115e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 81115e8:	3601      	adds	r6, #1
 81115ea:	f8c3 8014 	str.w	r8, [r3, #20]
 81115ee:	6126      	str	r6, [r4, #16]
 81115f0:	4620      	mov	r0, r4
 81115f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81115f6:	bf00      	nop
 81115f8:	081133c8 	.word	0x081133c8
 81115fc:	0811343c 	.word	0x0811343c

08111600 <__hi0bits>:
 8111600:	0c03      	lsrs	r3, r0, #16
 8111602:	041b      	lsls	r3, r3, #16
 8111604:	b9d3      	cbnz	r3, 811163c <__hi0bits+0x3c>
 8111606:	0400      	lsls	r0, r0, #16
 8111608:	2310      	movs	r3, #16
 811160a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 811160e:	bf04      	itt	eq
 8111610:	0200      	lsleq	r0, r0, #8
 8111612:	3308      	addeq	r3, #8
 8111614:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8111618:	bf04      	itt	eq
 811161a:	0100      	lsleq	r0, r0, #4
 811161c:	3304      	addeq	r3, #4
 811161e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8111622:	bf04      	itt	eq
 8111624:	0080      	lsleq	r0, r0, #2
 8111626:	3302      	addeq	r3, #2
 8111628:	2800      	cmp	r0, #0
 811162a:	db05      	blt.n	8111638 <__hi0bits+0x38>
 811162c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8111630:	f103 0301 	add.w	r3, r3, #1
 8111634:	bf08      	it	eq
 8111636:	2320      	moveq	r3, #32
 8111638:	4618      	mov	r0, r3
 811163a:	4770      	bx	lr
 811163c:	2300      	movs	r3, #0
 811163e:	e7e4      	b.n	811160a <__hi0bits+0xa>

08111640 <__lo0bits>:
 8111640:	6803      	ldr	r3, [r0, #0]
 8111642:	f013 0207 	ands.w	r2, r3, #7
 8111646:	4601      	mov	r1, r0
 8111648:	d00b      	beq.n	8111662 <__lo0bits+0x22>
 811164a:	07da      	lsls	r2, r3, #31
 811164c:	d424      	bmi.n	8111698 <__lo0bits+0x58>
 811164e:	0798      	lsls	r0, r3, #30
 8111650:	bf49      	itett	mi
 8111652:	085b      	lsrmi	r3, r3, #1
 8111654:	089b      	lsrpl	r3, r3, #2
 8111656:	2001      	movmi	r0, #1
 8111658:	600b      	strmi	r3, [r1, #0]
 811165a:	bf5c      	itt	pl
 811165c:	600b      	strpl	r3, [r1, #0]
 811165e:	2002      	movpl	r0, #2
 8111660:	4770      	bx	lr
 8111662:	b298      	uxth	r0, r3
 8111664:	b9b0      	cbnz	r0, 8111694 <__lo0bits+0x54>
 8111666:	0c1b      	lsrs	r3, r3, #16
 8111668:	2010      	movs	r0, #16
 811166a:	f013 0fff 	tst.w	r3, #255	; 0xff
 811166e:	bf04      	itt	eq
 8111670:	0a1b      	lsreq	r3, r3, #8
 8111672:	3008      	addeq	r0, #8
 8111674:	071a      	lsls	r2, r3, #28
 8111676:	bf04      	itt	eq
 8111678:	091b      	lsreq	r3, r3, #4
 811167a:	3004      	addeq	r0, #4
 811167c:	079a      	lsls	r2, r3, #30
 811167e:	bf04      	itt	eq
 8111680:	089b      	lsreq	r3, r3, #2
 8111682:	3002      	addeq	r0, #2
 8111684:	07da      	lsls	r2, r3, #31
 8111686:	d403      	bmi.n	8111690 <__lo0bits+0x50>
 8111688:	085b      	lsrs	r3, r3, #1
 811168a:	f100 0001 	add.w	r0, r0, #1
 811168e:	d005      	beq.n	811169c <__lo0bits+0x5c>
 8111690:	600b      	str	r3, [r1, #0]
 8111692:	4770      	bx	lr
 8111694:	4610      	mov	r0, r2
 8111696:	e7e8      	b.n	811166a <__lo0bits+0x2a>
 8111698:	2000      	movs	r0, #0
 811169a:	4770      	bx	lr
 811169c:	2020      	movs	r0, #32
 811169e:	4770      	bx	lr

081116a0 <__i2b>:
 81116a0:	b510      	push	{r4, lr}
 81116a2:	460c      	mov	r4, r1
 81116a4:	2101      	movs	r1, #1
 81116a6:	f7ff feff 	bl	81114a8 <_Balloc>
 81116aa:	4602      	mov	r2, r0
 81116ac:	b928      	cbnz	r0, 81116ba <__i2b+0x1a>
 81116ae:	4b05      	ldr	r3, [pc, #20]	; (81116c4 <__i2b+0x24>)
 81116b0:	4805      	ldr	r0, [pc, #20]	; (81116c8 <__i2b+0x28>)
 81116b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 81116b6:	f000 fe4b 	bl	8112350 <__assert_func>
 81116ba:	2301      	movs	r3, #1
 81116bc:	6144      	str	r4, [r0, #20]
 81116be:	6103      	str	r3, [r0, #16]
 81116c0:	bd10      	pop	{r4, pc}
 81116c2:	bf00      	nop
 81116c4:	081133c8 	.word	0x081133c8
 81116c8:	0811343c 	.word	0x0811343c

081116cc <__multiply>:
 81116cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81116d0:	4614      	mov	r4, r2
 81116d2:	690a      	ldr	r2, [r1, #16]
 81116d4:	6923      	ldr	r3, [r4, #16]
 81116d6:	429a      	cmp	r2, r3
 81116d8:	bfb8      	it	lt
 81116da:	460b      	movlt	r3, r1
 81116dc:	460d      	mov	r5, r1
 81116de:	bfbc      	itt	lt
 81116e0:	4625      	movlt	r5, r4
 81116e2:	461c      	movlt	r4, r3
 81116e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 81116e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 81116ec:	68ab      	ldr	r3, [r5, #8]
 81116ee:	6869      	ldr	r1, [r5, #4]
 81116f0:	eb0a 0709 	add.w	r7, sl, r9
 81116f4:	42bb      	cmp	r3, r7
 81116f6:	b085      	sub	sp, #20
 81116f8:	bfb8      	it	lt
 81116fa:	3101      	addlt	r1, #1
 81116fc:	f7ff fed4 	bl	81114a8 <_Balloc>
 8111700:	b930      	cbnz	r0, 8111710 <__multiply+0x44>
 8111702:	4602      	mov	r2, r0
 8111704:	4b42      	ldr	r3, [pc, #264]	; (8111810 <__multiply+0x144>)
 8111706:	4843      	ldr	r0, [pc, #268]	; (8111814 <__multiply+0x148>)
 8111708:	f240 115d 	movw	r1, #349	; 0x15d
 811170c:	f000 fe20 	bl	8112350 <__assert_func>
 8111710:	f100 0614 	add.w	r6, r0, #20
 8111714:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8111718:	4633      	mov	r3, r6
 811171a:	2200      	movs	r2, #0
 811171c:	4543      	cmp	r3, r8
 811171e:	d31e      	bcc.n	811175e <__multiply+0x92>
 8111720:	f105 0c14 	add.w	ip, r5, #20
 8111724:	f104 0314 	add.w	r3, r4, #20
 8111728:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 811172c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8111730:	9202      	str	r2, [sp, #8]
 8111732:	ebac 0205 	sub.w	r2, ip, r5
 8111736:	3a15      	subs	r2, #21
 8111738:	f022 0203 	bic.w	r2, r2, #3
 811173c:	3204      	adds	r2, #4
 811173e:	f105 0115 	add.w	r1, r5, #21
 8111742:	458c      	cmp	ip, r1
 8111744:	bf38      	it	cc
 8111746:	2204      	movcc	r2, #4
 8111748:	9201      	str	r2, [sp, #4]
 811174a:	9a02      	ldr	r2, [sp, #8]
 811174c:	9303      	str	r3, [sp, #12]
 811174e:	429a      	cmp	r2, r3
 8111750:	d808      	bhi.n	8111764 <__multiply+0x98>
 8111752:	2f00      	cmp	r7, #0
 8111754:	dc55      	bgt.n	8111802 <__multiply+0x136>
 8111756:	6107      	str	r7, [r0, #16]
 8111758:	b005      	add	sp, #20
 811175a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811175e:	f843 2b04 	str.w	r2, [r3], #4
 8111762:	e7db      	b.n	811171c <__multiply+0x50>
 8111764:	f8b3 a000 	ldrh.w	sl, [r3]
 8111768:	f1ba 0f00 	cmp.w	sl, #0
 811176c:	d020      	beq.n	81117b0 <__multiply+0xe4>
 811176e:	f105 0e14 	add.w	lr, r5, #20
 8111772:	46b1      	mov	r9, r6
 8111774:	2200      	movs	r2, #0
 8111776:	f85e 4b04 	ldr.w	r4, [lr], #4
 811177a:	f8d9 b000 	ldr.w	fp, [r9]
 811177e:	b2a1      	uxth	r1, r4
 8111780:	fa1f fb8b 	uxth.w	fp, fp
 8111784:	fb0a b101 	mla	r1, sl, r1, fp
 8111788:	4411      	add	r1, r2
 811178a:	f8d9 2000 	ldr.w	r2, [r9]
 811178e:	0c24      	lsrs	r4, r4, #16
 8111790:	0c12      	lsrs	r2, r2, #16
 8111792:	fb0a 2404 	mla	r4, sl, r4, r2
 8111796:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 811179a:	b289      	uxth	r1, r1
 811179c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 81117a0:	45f4      	cmp	ip, lr
 81117a2:	f849 1b04 	str.w	r1, [r9], #4
 81117a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 81117aa:	d8e4      	bhi.n	8111776 <__multiply+0xaa>
 81117ac:	9901      	ldr	r1, [sp, #4]
 81117ae:	5072      	str	r2, [r6, r1]
 81117b0:	9a03      	ldr	r2, [sp, #12]
 81117b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 81117b6:	3304      	adds	r3, #4
 81117b8:	f1b9 0f00 	cmp.w	r9, #0
 81117bc:	d01f      	beq.n	81117fe <__multiply+0x132>
 81117be:	6834      	ldr	r4, [r6, #0]
 81117c0:	f105 0114 	add.w	r1, r5, #20
 81117c4:	46b6      	mov	lr, r6
 81117c6:	f04f 0a00 	mov.w	sl, #0
 81117ca:	880a      	ldrh	r2, [r1, #0]
 81117cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 81117d0:	fb09 b202 	mla	r2, r9, r2, fp
 81117d4:	4492      	add	sl, r2
 81117d6:	b2a4      	uxth	r4, r4
 81117d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 81117dc:	f84e 4b04 	str.w	r4, [lr], #4
 81117e0:	f851 4b04 	ldr.w	r4, [r1], #4
 81117e4:	f8be 2000 	ldrh.w	r2, [lr]
 81117e8:	0c24      	lsrs	r4, r4, #16
 81117ea:	fb09 2404 	mla	r4, r9, r4, r2
 81117ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 81117f2:	458c      	cmp	ip, r1
 81117f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 81117f8:	d8e7      	bhi.n	81117ca <__multiply+0xfe>
 81117fa:	9a01      	ldr	r2, [sp, #4]
 81117fc:	50b4      	str	r4, [r6, r2]
 81117fe:	3604      	adds	r6, #4
 8111800:	e7a3      	b.n	811174a <__multiply+0x7e>
 8111802:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8111806:	2b00      	cmp	r3, #0
 8111808:	d1a5      	bne.n	8111756 <__multiply+0x8a>
 811180a:	3f01      	subs	r7, #1
 811180c:	e7a1      	b.n	8111752 <__multiply+0x86>
 811180e:	bf00      	nop
 8111810:	081133c8 	.word	0x081133c8
 8111814:	0811343c 	.word	0x0811343c

08111818 <__pow5mult>:
 8111818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811181c:	4615      	mov	r5, r2
 811181e:	f012 0203 	ands.w	r2, r2, #3
 8111822:	4606      	mov	r6, r0
 8111824:	460f      	mov	r7, r1
 8111826:	d007      	beq.n	8111838 <__pow5mult+0x20>
 8111828:	4c25      	ldr	r4, [pc, #148]	; (81118c0 <__pow5mult+0xa8>)
 811182a:	3a01      	subs	r2, #1
 811182c:	2300      	movs	r3, #0
 811182e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8111832:	f7ff fe9b 	bl	811156c <__multadd>
 8111836:	4607      	mov	r7, r0
 8111838:	10ad      	asrs	r5, r5, #2
 811183a:	d03d      	beq.n	81118b8 <__pow5mult+0xa0>
 811183c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 811183e:	b97c      	cbnz	r4, 8111860 <__pow5mult+0x48>
 8111840:	2010      	movs	r0, #16
 8111842:	f7ff fe29 	bl	8111498 <malloc>
 8111846:	4602      	mov	r2, r0
 8111848:	6270      	str	r0, [r6, #36]	; 0x24
 811184a:	b928      	cbnz	r0, 8111858 <__pow5mult+0x40>
 811184c:	4b1d      	ldr	r3, [pc, #116]	; (81118c4 <__pow5mult+0xac>)
 811184e:	481e      	ldr	r0, [pc, #120]	; (81118c8 <__pow5mult+0xb0>)
 8111850:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8111854:	f000 fd7c 	bl	8112350 <__assert_func>
 8111858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 811185c:	6004      	str	r4, [r0, #0]
 811185e:	60c4      	str	r4, [r0, #12]
 8111860:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8111864:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8111868:	b94c      	cbnz	r4, 811187e <__pow5mult+0x66>
 811186a:	f240 2171 	movw	r1, #625	; 0x271
 811186e:	4630      	mov	r0, r6
 8111870:	f7ff ff16 	bl	81116a0 <__i2b>
 8111874:	2300      	movs	r3, #0
 8111876:	f8c8 0008 	str.w	r0, [r8, #8]
 811187a:	4604      	mov	r4, r0
 811187c:	6003      	str	r3, [r0, #0]
 811187e:	f04f 0900 	mov.w	r9, #0
 8111882:	07eb      	lsls	r3, r5, #31
 8111884:	d50a      	bpl.n	811189c <__pow5mult+0x84>
 8111886:	4639      	mov	r1, r7
 8111888:	4622      	mov	r2, r4
 811188a:	4630      	mov	r0, r6
 811188c:	f7ff ff1e 	bl	81116cc <__multiply>
 8111890:	4639      	mov	r1, r7
 8111892:	4680      	mov	r8, r0
 8111894:	4630      	mov	r0, r6
 8111896:	f7ff fe47 	bl	8111528 <_Bfree>
 811189a:	4647      	mov	r7, r8
 811189c:	106d      	asrs	r5, r5, #1
 811189e:	d00b      	beq.n	81118b8 <__pow5mult+0xa0>
 81118a0:	6820      	ldr	r0, [r4, #0]
 81118a2:	b938      	cbnz	r0, 81118b4 <__pow5mult+0x9c>
 81118a4:	4622      	mov	r2, r4
 81118a6:	4621      	mov	r1, r4
 81118a8:	4630      	mov	r0, r6
 81118aa:	f7ff ff0f 	bl	81116cc <__multiply>
 81118ae:	6020      	str	r0, [r4, #0]
 81118b0:	f8c0 9000 	str.w	r9, [r0]
 81118b4:	4604      	mov	r4, r0
 81118b6:	e7e4      	b.n	8111882 <__pow5mult+0x6a>
 81118b8:	4638      	mov	r0, r7
 81118ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81118be:	bf00      	nop
 81118c0:	08113590 	.word	0x08113590
 81118c4:	08113352 	.word	0x08113352
 81118c8:	0811343c 	.word	0x0811343c

081118cc <__lshift>:
 81118cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81118d0:	460c      	mov	r4, r1
 81118d2:	6849      	ldr	r1, [r1, #4]
 81118d4:	6923      	ldr	r3, [r4, #16]
 81118d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 81118da:	68a3      	ldr	r3, [r4, #8]
 81118dc:	4607      	mov	r7, r0
 81118de:	4691      	mov	r9, r2
 81118e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 81118e4:	f108 0601 	add.w	r6, r8, #1
 81118e8:	42b3      	cmp	r3, r6
 81118ea:	db0b      	blt.n	8111904 <__lshift+0x38>
 81118ec:	4638      	mov	r0, r7
 81118ee:	f7ff fddb 	bl	81114a8 <_Balloc>
 81118f2:	4605      	mov	r5, r0
 81118f4:	b948      	cbnz	r0, 811190a <__lshift+0x3e>
 81118f6:	4602      	mov	r2, r0
 81118f8:	4b28      	ldr	r3, [pc, #160]	; (811199c <__lshift+0xd0>)
 81118fa:	4829      	ldr	r0, [pc, #164]	; (81119a0 <__lshift+0xd4>)
 81118fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8111900:	f000 fd26 	bl	8112350 <__assert_func>
 8111904:	3101      	adds	r1, #1
 8111906:	005b      	lsls	r3, r3, #1
 8111908:	e7ee      	b.n	81118e8 <__lshift+0x1c>
 811190a:	2300      	movs	r3, #0
 811190c:	f100 0114 	add.w	r1, r0, #20
 8111910:	f100 0210 	add.w	r2, r0, #16
 8111914:	4618      	mov	r0, r3
 8111916:	4553      	cmp	r3, sl
 8111918:	db33      	blt.n	8111982 <__lshift+0xb6>
 811191a:	6920      	ldr	r0, [r4, #16]
 811191c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8111920:	f104 0314 	add.w	r3, r4, #20
 8111924:	f019 091f 	ands.w	r9, r9, #31
 8111928:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 811192c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8111930:	d02b      	beq.n	811198a <__lshift+0xbe>
 8111932:	f1c9 0e20 	rsb	lr, r9, #32
 8111936:	468a      	mov	sl, r1
 8111938:	2200      	movs	r2, #0
 811193a:	6818      	ldr	r0, [r3, #0]
 811193c:	fa00 f009 	lsl.w	r0, r0, r9
 8111940:	4302      	orrs	r2, r0
 8111942:	f84a 2b04 	str.w	r2, [sl], #4
 8111946:	f853 2b04 	ldr.w	r2, [r3], #4
 811194a:	459c      	cmp	ip, r3
 811194c:	fa22 f20e 	lsr.w	r2, r2, lr
 8111950:	d8f3      	bhi.n	811193a <__lshift+0x6e>
 8111952:	ebac 0304 	sub.w	r3, ip, r4
 8111956:	3b15      	subs	r3, #21
 8111958:	f023 0303 	bic.w	r3, r3, #3
 811195c:	3304      	adds	r3, #4
 811195e:	f104 0015 	add.w	r0, r4, #21
 8111962:	4584      	cmp	ip, r0
 8111964:	bf38      	it	cc
 8111966:	2304      	movcc	r3, #4
 8111968:	50ca      	str	r2, [r1, r3]
 811196a:	b10a      	cbz	r2, 8111970 <__lshift+0xa4>
 811196c:	f108 0602 	add.w	r6, r8, #2
 8111970:	3e01      	subs	r6, #1
 8111972:	4638      	mov	r0, r7
 8111974:	612e      	str	r6, [r5, #16]
 8111976:	4621      	mov	r1, r4
 8111978:	f7ff fdd6 	bl	8111528 <_Bfree>
 811197c:	4628      	mov	r0, r5
 811197e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111982:	f842 0f04 	str.w	r0, [r2, #4]!
 8111986:	3301      	adds	r3, #1
 8111988:	e7c5      	b.n	8111916 <__lshift+0x4a>
 811198a:	3904      	subs	r1, #4
 811198c:	f853 2b04 	ldr.w	r2, [r3], #4
 8111990:	f841 2f04 	str.w	r2, [r1, #4]!
 8111994:	459c      	cmp	ip, r3
 8111996:	d8f9      	bhi.n	811198c <__lshift+0xc0>
 8111998:	e7ea      	b.n	8111970 <__lshift+0xa4>
 811199a:	bf00      	nop
 811199c:	081133c8 	.word	0x081133c8
 81119a0:	0811343c 	.word	0x0811343c

081119a4 <__mcmp>:
 81119a4:	b530      	push	{r4, r5, lr}
 81119a6:	6902      	ldr	r2, [r0, #16]
 81119a8:	690c      	ldr	r4, [r1, #16]
 81119aa:	1b12      	subs	r2, r2, r4
 81119ac:	d10e      	bne.n	81119cc <__mcmp+0x28>
 81119ae:	f100 0314 	add.w	r3, r0, #20
 81119b2:	3114      	adds	r1, #20
 81119b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 81119b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 81119bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 81119c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 81119c4:	42a5      	cmp	r5, r4
 81119c6:	d003      	beq.n	81119d0 <__mcmp+0x2c>
 81119c8:	d305      	bcc.n	81119d6 <__mcmp+0x32>
 81119ca:	2201      	movs	r2, #1
 81119cc:	4610      	mov	r0, r2
 81119ce:	bd30      	pop	{r4, r5, pc}
 81119d0:	4283      	cmp	r3, r0
 81119d2:	d3f3      	bcc.n	81119bc <__mcmp+0x18>
 81119d4:	e7fa      	b.n	81119cc <__mcmp+0x28>
 81119d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81119da:	e7f7      	b.n	81119cc <__mcmp+0x28>

081119dc <__mdiff>:
 81119dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81119e0:	460c      	mov	r4, r1
 81119e2:	4606      	mov	r6, r0
 81119e4:	4611      	mov	r1, r2
 81119e6:	4620      	mov	r0, r4
 81119e8:	4617      	mov	r7, r2
 81119ea:	f7ff ffdb 	bl	81119a4 <__mcmp>
 81119ee:	1e05      	subs	r5, r0, #0
 81119f0:	d110      	bne.n	8111a14 <__mdiff+0x38>
 81119f2:	4629      	mov	r1, r5
 81119f4:	4630      	mov	r0, r6
 81119f6:	f7ff fd57 	bl	81114a8 <_Balloc>
 81119fa:	b930      	cbnz	r0, 8111a0a <__mdiff+0x2e>
 81119fc:	4b39      	ldr	r3, [pc, #228]	; (8111ae4 <__mdiff+0x108>)
 81119fe:	4602      	mov	r2, r0
 8111a00:	f240 2132 	movw	r1, #562	; 0x232
 8111a04:	4838      	ldr	r0, [pc, #224]	; (8111ae8 <__mdiff+0x10c>)
 8111a06:	f000 fca3 	bl	8112350 <__assert_func>
 8111a0a:	2301      	movs	r3, #1
 8111a0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8111a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111a14:	bfa4      	itt	ge
 8111a16:	463b      	movge	r3, r7
 8111a18:	4627      	movge	r7, r4
 8111a1a:	4630      	mov	r0, r6
 8111a1c:	6879      	ldr	r1, [r7, #4]
 8111a1e:	bfa6      	itte	ge
 8111a20:	461c      	movge	r4, r3
 8111a22:	2500      	movge	r5, #0
 8111a24:	2501      	movlt	r5, #1
 8111a26:	f7ff fd3f 	bl	81114a8 <_Balloc>
 8111a2a:	b920      	cbnz	r0, 8111a36 <__mdiff+0x5a>
 8111a2c:	4b2d      	ldr	r3, [pc, #180]	; (8111ae4 <__mdiff+0x108>)
 8111a2e:	4602      	mov	r2, r0
 8111a30:	f44f 7110 	mov.w	r1, #576	; 0x240
 8111a34:	e7e6      	b.n	8111a04 <__mdiff+0x28>
 8111a36:	693e      	ldr	r6, [r7, #16]
 8111a38:	60c5      	str	r5, [r0, #12]
 8111a3a:	6925      	ldr	r5, [r4, #16]
 8111a3c:	f107 0114 	add.w	r1, r7, #20
 8111a40:	f104 0914 	add.w	r9, r4, #20
 8111a44:	f100 0e14 	add.w	lr, r0, #20
 8111a48:	f107 0210 	add.w	r2, r7, #16
 8111a4c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8111a50:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8111a54:	46f2      	mov	sl, lr
 8111a56:	2700      	movs	r7, #0
 8111a58:	f859 3b04 	ldr.w	r3, [r9], #4
 8111a5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8111a60:	fa1f f883 	uxth.w	r8, r3
 8111a64:	fa17 f78b 	uxtah	r7, r7, fp
 8111a68:	0c1b      	lsrs	r3, r3, #16
 8111a6a:	eba7 0808 	sub.w	r8, r7, r8
 8111a6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8111a72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8111a76:	fa1f f888 	uxth.w	r8, r8
 8111a7a:	141f      	asrs	r7, r3, #16
 8111a7c:	454d      	cmp	r5, r9
 8111a7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8111a82:	f84a 3b04 	str.w	r3, [sl], #4
 8111a86:	d8e7      	bhi.n	8111a58 <__mdiff+0x7c>
 8111a88:	1b2b      	subs	r3, r5, r4
 8111a8a:	3b15      	subs	r3, #21
 8111a8c:	f023 0303 	bic.w	r3, r3, #3
 8111a90:	3304      	adds	r3, #4
 8111a92:	3415      	adds	r4, #21
 8111a94:	42a5      	cmp	r5, r4
 8111a96:	bf38      	it	cc
 8111a98:	2304      	movcc	r3, #4
 8111a9a:	4419      	add	r1, r3
 8111a9c:	4473      	add	r3, lr
 8111a9e:	469e      	mov	lr, r3
 8111aa0:	460d      	mov	r5, r1
 8111aa2:	4565      	cmp	r5, ip
 8111aa4:	d30e      	bcc.n	8111ac4 <__mdiff+0xe8>
 8111aa6:	f10c 0203 	add.w	r2, ip, #3
 8111aaa:	1a52      	subs	r2, r2, r1
 8111aac:	f022 0203 	bic.w	r2, r2, #3
 8111ab0:	3903      	subs	r1, #3
 8111ab2:	458c      	cmp	ip, r1
 8111ab4:	bf38      	it	cc
 8111ab6:	2200      	movcc	r2, #0
 8111ab8:	441a      	add	r2, r3
 8111aba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8111abe:	b17b      	cbz	r3, 8111ae0 <__mdiff+0x104>
 8111ac0:	6106      	str	r6, [r0, #16]
 8111ac2:	e7a5      	b.n	8111a10 <__mdiff+0x34>
 8111ac4:	f855 8b04 	ldr.w	r8, [r5], #4
 8111ac8:	fa17 f488 	uxtah	r4, r7, r8
 8111acc:	1422      	asrs	r2, r4, #16
 8111ace:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8111ad2:	b2a4      	uxth	r4, r4
 8111ad4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8111ad8:	f84e 4b04 	str.w	r4, [lr], #4
 8111adc:	1417      	asrs	r7, r2, #16
 8111ade:	e7e0      	b.n	8111aa2 <__mdiff+0xc6>
 8111ae0:	3e01      	subs	r6, #1
 8111ae2:	e7ea      	b.n	8111aba <__mdiff+0xde>
 8111ae4:	081133c8 	.word	0x081133c8
 8111ae8:	0811343c 	.word	0x0811343c

08111aec <__d2b>:
 8111aec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8111af0:	4689      	mov	r9, r1
 8111af2:	2101      	movs	r1, #1
 8111af4:	ec57 6b10 	vmov	r6, r7, d0
 8111af8:	4690      	mov	r8, r2
 8111afa:	f7ff fcd5 	bl	81114a8 <_Balloc>
 8111afe:	4604      	mov	r4, r0
 8111b00:	b930      	cbnz	r0, 8111b10 <__d2b+0x24>
 8111b02:	4602      	mov	r2, r0
 8111b04:	4b25      	ldr	r3, [pc, #148]	; (8111b9c <__d2b+0xb0>)
 8111b06:	4826      	ldr	r0, [pc, #152]	; (8111ba0 <__d2b+0xb4>)
 8111b08:	f240 310a 	movw	r1, #778	; 0x30a
 8111b0c:	f000 fc20 	bl	8112350 <__assert_func>
 8111b10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8111b14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8111b18:	bb35      	cbnz	r5, 8111b68 <__d2b+0x7c>
 8111b1a:	2e00      	cmp	r6, #0
 8111b1c:	9301      	str	r3, [sp, #4]
 8111b1e:	d028      	beq.n	8111b72 <__d2b+0x86>
 8111b20:	4668      	mov	r0, sp
 8111b22:	9600      	str	r6, [sp, #0]
 8111b24:	f7ff fd8c 	bl	8111640 <__lo0bits>
 8111b28:	9900      	ldr	r1, [sp, #0]
 8111b2a:	b300      	cbz	r0, 8111b6e <__d2b+0x82>
 8111b2c:	9a01      	ldr	r2, [sp, #4]
 8111b2e:	f1c0 0320 	rsb	r3, r0, #32
 8111b32:	fa02 f303 	lsl.w	r3, r2, r3
 8111b36:	430b      	orrs	r3, r1
 8111b38:	40c2      	lsrs	r2, r0
 8111b3a:	6163      	str	r3, [r4, #20]
 8111b3c:	9201      	str	r2, [sp, #4]
 8111b3e:	9b01      	ldr	r3, [sp, #4]
 8111b40:	61a3      	str	r3, [r4, #24]
 8111b42:	2b00      	cmp	r3, #0
 8111b44:	bf14      	ite	ne
 8111b46:	2202      	movne	r2, #2
 8111b48:	2201      	moveq	r2, #1
 8111b4a:	6122      	str	r2, [r4, #16]
 8111b4c:	b1d5      	cbz	r5, 8111b84 <__d2b+0x98>
 8111b4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8111b52:	4405      	add	r5, r0
 8111b54:	f8c9 5000 	str.w	r5, [r9]
 8111b58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8111b5c:	f8c8 0000 	str.w	r0, [r8]
 8111b60:	4620      	mov	r0, r4
 8111b62:	b003      	add	sp, #12
 8111b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8111b68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8111b6c:	e7d5      	b.n	8111b1a <__d2b+0x2e>
 8111b6e:	6161      	str	r1, [r4, #20]
 8111b70:	e7e5      	b.n	8111b3e <__d2b+0x52>
 8111b72:	a801      	add	r0, sp, #4
 8111b74:	f7ff fd64 	bl	8111640 <__lo0bits>
 8111b78:	9b01      	ldr	r3, [sp, #4]
 8111b7a:	6163      	str	r3, [r4, #20]
 8111b7c:	2201      	movs	r2, #1
 8111b7e:	6122      	str	r2, [r4, #16]
 8111b80:	3020      	adds	r0, #32
 8111b82:	e7e3      	b.n	8111b4c <__d2b+0x60>
 8111b84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8111b88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8111b8c:	f8c9 0000 	str.w	r0, [r9]
 8111b90:	6918      	ldr	r0, [r3, #16]
 8111b92:	f7ff fd35 	bl	8111600 <__hi0bits>
 8111b96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8111b9a:	e7df      	b.n	8111b5c <__d2b+0x70>
 8111b9c:	081133c8 	.word	0x081133c8
 8111ba0:	0811343c 	.word	0x0811343c

08111ba4 <_calloc_r>:
 8111ba4:	b513      	push	{r0, r1, r4, lr}
 8111ba6:	434a      	muls	r2, r1
 8111ba8:	4611      	mov	r1, r2
 8111baa:	9201      	str	r2, [sp, #4]
 8111bac:	f000 f85a 	bl	8111c64 <_malloc_r>
 8111bb0:	4604      	mov	r4, r0
 8111bb2:	b118      	cbz	r0, 8111bbc <_calloc_r+0x18>
 8111bb4:	9a01      	ldr	r2, [sp, #4]
 8111bb6:	2100      	movs	r1, #0
 8111bb8:	f7fd fc9e 	bl	810f4f8 <memset>
 8111bbc:	4620      	mov	r0, r4
 8111bbe:	b002      	add	sp, #8
 8111bc0:	bd10      	pop	{r4, pc}
	...

08111bc4 <_free_r>:
 8111bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8111bc6:	2900      	cmp	r1, #0
 8111bc8:	d048      	beq.n	8111c5c <_free_r+0x98>
 8111bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8111bce:	9001      	str	r0, [sp, #4]
 8111bd0:	2b00      	cmp	r3, #0
 8111bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8111bd6:	bfb8      	it	lt
 8111bd8:	18e4      	addlt	r4, r4, r3
 8111bda:	f000 fc59 	bl	8112490 <__malloc_lock>
 8111bde:	4a20      	ldr	r2, [pc, #128]	; (8111c60 <_free_r+0x9c>)
 8111be0:	9801      	ldr	r0, [sp, #4]
 8111be2:	6813      	ldr	r3, [r2, #0]
 8111be4:	4615      	mov	r5, r2
 8111be6:	b933      	cbnz	r3, 8111bf6 <_free_r+0x32>
 8111be8:	6063      	str	r3, [r4, #4]
 8111bea:	6014      	str	r4, [r2, #0]
 8111bec:	b003      	add	sp, #12
 8111bee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8111bf2:	f000 bc53 	b.w	811249c <__malloc_unlock>
 8111bf6:	42a3      	cmp	r3, r4
 8111bf8:	d90b      	bls.n	8111c12 <_free_r+0x4e>
 8111bfa:	6821      	ldr	r1, [r4, #0]
 8111bfc:	1862      	adds	r2, r4, r1
 8111bfe:	4293      	cmp	r3, r2
 8111c00:	bf04      	itt	eq
 8111c02:	681a      	ldreq	r2, [r3, #0]
 8111c04:	685b      	ldreq	r3, [r3, #4]
 8111c06:	6063      	str	r3, [r4, #4]
 8111c08:	bf04      	itt	eq
 8111c0a:	1852      	addeq	r2, r2, r1
 8111c0c:	6022      	streq	r2, [r4, #0]
 8111c0e:	602c      	str	r4, [r5, #0]
 8111c10:	e7ec      	b.n	8111bec <_free_r+0x28>
 8111c12:	461a      	mov	r2, r3
 8111c14:	685b      	ldr	r3, [r3, #4]
 8111c16:	b10b      	cbz	r3, 8111c1c <_free_r+0x58>
 8111c18:	42a3      	cmp	r3, r4
 8111c1a:	d9fa      	bls.n	8111c12 <_free_r+0x4e>
 8111c1c:	6811      	ldr	r1, [r2, #0]
 8111c1e:	1855      	adds	r5, r2, r1
 8111c20:	42a5      	cmp	r5, r4
 8111c22:	d10b      	bne.n	8111c3c <_free_r+0x78>
 8111c24:	6824      	ldr	r4, [r4, #0]
 8111c26:	4421      	add	r1, r4
 8111c28:	1854      	adds	r4, r2, r1
 8111c2a:	42a3      	cmp	r3, r4
 8111c2c:	6011      	str	r1, [r2, #0]
 8111c2e:	d1dd      	bne.n	8111bec <_free_r+0x28>
 8111c30:	681c      	ldr	r4, [r3, #0]
 8111c32:	685b      	ldr	r3, [r3, #4]
 8111c34:	6053      	str	r3, [r2, #4]
 8111c36:	4421      	add	r1, r4
 8111c38:	6011      	str	r1, [r2, #0]
 8111c3a:	e7d7      	b.n	8111bec <_free_r+0x28>
 8111c3c:	d902      	bls.n	8111c44 <_free_r+0x80>
 8111c3e:	230c      	movs	r3, #12
 8111c40:	6003      	str	r3, [r0, #0]
 8111c42:	e7d3      	b.n	8111bec <_free_r+0x28>
 8111c44:	6825      	ldr	r5, [r4, #0]
 8111c46:	1961      	adds	r1, r4, r5
 8111c48:	428b      	cmp	r3, r1
 8111c4a:	bf04      	itt	eq
 8111c4c:	6819      	ldreq	r1, [r3, #0]
 8111c4e:	685b      	ldreq	r3, [r3, #4]
 8111c50:	6063      	str	r3, [r4, #4]
 8111c52:	bf04      	itt	eq
 8111c54:	1949      	addeq	r1, r1, r5
 8111c56:	6021      	streq	r1, [r4, #0]
 8111c58:	6054      	str	r4, [r2, #4]
 8111c5a:	e7c7      	b.n	8111bec <_free_r+0x28>
 8111c5c:	b003      	add	sp, #12
 8111c5e:	bd30      	pop	{r4, r5, pc}
 8111c60:	100099a4 	.word	0x100099a4

08111c64 <_malloc_r>:
 8111c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8111c66:	1ccd      	adds	r5, r1, #3
 8111c68:	f025 0503 	bic.w	r5, r5, #3
 8111c6c:	3508      	adds	r5, #8
 8111c6e:	2d0c      	cmp	r5, #12
 8111c70:	bf38      	it	cc
 8111c72:	250c      	movcc	r5, #12
 8111c74:	2d00      	cmp	r5, #0
 8111c76:	4606      	mov	r6, r0
 8111c78:	db01      	blt.n	8111c7e <_malloc_r+0x1a>
 8111c7a:	42a9      	cmp	r1, r5
 8111c7c:	d903      	bls.n	8111c86 <_malloc_r+0x22>
 8111c7e:	230c      	movs	r3, #12
 8111c80:	6033      	str	r3, [r6, #0]
 8111c82:	2000      	movs	r0, #0
 8111c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8111c86:	f000 fc03 	bl	8112490 <__malloc_lock>
 8111c8a:	4921      	ldr	r1, [pc, #132]	; (8111d10 <_malloc_r+0xac>)
 8111c8c:	680a      	ldr	r2, [r1, #0]
 8111c8e:	4614      	mov	r4, r2
 8111c90:	b99c      	cbnz	r4, 8111cba <_malloc_r+0x56>
 8111c92:	4f20      	ldr	r7, [pc, #128]	; (8111d14 <_malloc_r+0xb0>)
 8111c94:	683b      	ldr	r3, [r7, #0]
 8111c96:	b923      	cbnz	r3, 8111ca2 <_malloc_r+0x3e>
 8111c98:	4621      	mov	r1, r4
 8111c9a:	4630      	mov	r0, r6
 8111c9c:	f000 faf2 	bl	8112284 <_sbrk_r>
 8111ca0:	6038      	str	r0, [r7, #0]
 8111ca2:	4629      	mov	r1, r5
 8111ca4:	4630      	mov	r0, r6
 8111ca6:	f000 faed 	bl	8112284 <_sbrk_r>
 8111caa:	1c43      	adds	r3, r0, #1
 8111cac:	d123      	bne.n	8111cf6 <_malloc_r+0x92>
 8111cae:	230c      	movs	r3, #12
 8111cb0:	6033      	str	r3, [r6, #0]
 8111cb2:	4630      	mov	r0, r6
 8111cb4:	f000 fbf2 	bl	811249c <__malloc_unlock>
 8111cb8:	e7e3      	b.n	8111c82 <_malloc_r+0x1e>
 8111cba:	6823      	ldr	r3, [r4, #0]
 8111cbc:	1b5b      	subs	r3, r3, r5
 8111cbe:	d417      	bmi.n	8111cf0 <_malloc_r+0x8c>
 8111cc0:	2b0b      	cmp	r3, #11
 8111cc2:	d903      	bls.n	8111ccc <_malloc_r+0x68>
 8111cc4:	6023      	str	r3, [r4, #0]
 8111cc6:	441c      	add	r4, r3
 8111cc8:	6025      	str	r5, [r4, #0]
 8111cca:	e004      	b.n	8111cd6 <_malloc_r+0x72>
 8111ccc:	6863      	ldr	r3, [r4, #4]
 8111cce:	42a2      	cmp	r2, r4
 8111cd0:	bf0c      	ite	eq
 8111cd2:	600b      	streq	r3, [r1, #0]
 8111cd4:	6053      	strne	r3, [r2, #4]
 8111cd6:	4630      	mov	r0, r6
 8111cd8:	f000 fbe0 	bl	811249c <__malloc_unlock>
 8111cdc:	f104 000b 	add.w	r0, r4, #11
 8111ce0:	1d23      	adds	r3, r4, #4
 8111ce2:	f020 0007 	bic.w	r0, r0, #7
 8111ce6:	1ac2      	subs	r2, r0, r3
 8111ce8:	d0cc      	beq.n	8111c84 <_malloc_r+0x20>
 8111cea:	1a1b      	subs	r3, r3, r0
 8111cec:	50a3      	str	r3, [r4, r2]
 8111cee:	e7c9      	b.n	8111c84 <_malloc_r+0x20>
 8111cf0:	4622      	mov	r2, r4
 8111cf2:	6864      	ldr	r4, [r4, #4]
 8111cf4:	e7cc      	b.n	8111c90 <_malloc_r+0x2c>
 8111cf6:	1cc4      	adds	r4, r0, #3
 8111cf8:	f024 0403 	bic.w	r4, r4, #3
 8111cfc:	42a0      	cmp	r0, r4
 8111cfe:	d0e3      	beq.n	8111cc8 <_malloc_r+0x64>
 8111d00:	1a21      	subs	r1, r4, r0
 8111d02:	4630      	mov	r0, r6
 8111d04:	f000 fabe 	bl	8112284 <_sbrk_r>
 8111d08:	3001      	adds	r0, #1
 8111d0a:	d1dd      	bne.n	8111cc8 <_malloc_r+0x64>
 8111d0c:	e7cf      	b.n	8111cae <_malloc_r+0x4a>
 8111d0e:	bf00      	nop
 8111d10:	100099a4 	.word	0x100099a4
 8111d14:	100099a8 	.word	0x100099a8

08111d18 <__ssputs_r>:
 8111d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111d1c:	688e      	ldr	r6, [r1, #8]
 8111d1e:	429e      	cmp	r6, r3
 8111d20:	4682      	mov	sl, r0
 8111d22:	460c      	mov	r4, r1
 8111d24:	4690      	mov	r8, r2
 8111d26:	461f      	mov	r7, r3
 8111d28:	d838      	bhi.n	8111d9c <__ssputs_r+0x84>
 8111d2a:	898a      	ldrh	r2, [r1, #12]
 8111d2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8111d30:	d032      	beq.n	8111d98 <__ssputs_r+0x80>
 8111d32:	6825      	ldr	r5, [r4, #0]
 8111d34:	6909      	ldr	r1, [r1, #16]
 8111d36:	eba5 0901 	sub.w	r9, r5, r1
 8111d3a:	6965      	ldr	r5, [r4, #20]
 8111d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8111d40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8111d44:	3301      	adds	r3, #1
 8111d46:	444b      	add	r3, r9
 8111d48:	106d      	asrs	r5, r5, #1
 8111d4a:	429d      	cmp	r5, r3
 8111d4c:	bf38      	it	cc
 8111d4e:	461d      	movcc	r5, r3
 8111d50:	0553      	lsls	r3, r2, #21
 8111d52:	d531      	bpl.n	8111db8 <__ssputs_r+0xa0>
 8111d54:	4629      	mov	r1, r5
 8111d56:	f7ff ff85 	bl	8111c64 <_malloc_r>
 8111d5a:	4606      	mov	r6, r0
 8111d5c:	b950      	cbnz	r0, 8111d74 <__ssputs_r+0x5c>
 8111d5e:	230c      	movs	r3, #12
 8111d60:	f8ca 3000 	str.w	r3, [sl]
 8111d64:	89a3      	ldrh	r3, [r4, #12]
 8111d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8111d6a:	81a3      	strh	r3, [r4, #12]
 8111d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8111d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111d74:	6921      	ldr	r1, [r4, #16]
 8111d76:	464a      	mov	r2, r9
 8111d78:	f7fd fbb0 	bl	810f4dc <memcpy>
 8111d7c:	89a3      	ldrh	r3, [r4, #12]
 8111d7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8111d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8111d86:	81a3      	strh	r3, [r4, #12]
 8111d88:	6126      	str	r6, [r4, #16]
 8111d8a:	6165      	str	r5, [r4, #20]
 8111d8c:	444e      	add	r6, r9
 8111d8e:	eba5 0509 	sub.w	r5, r5, r9
 8111d92:	6026      	str	r6, [r4, #0]
 8111d94:	60a5      	str	r5, [r4, #8]
 8111d96:	463e      	mov	r6, r7
 8111d98:	42be      	cmp	r6, r7
 8111d9a:	d900      	bls.n	8111d9e <__ssputs_r+0x86>
 8111d9c:	463e      	mov	r6, r7
 8111d9e:	4632      	mov	r2, r6
 8111da0:	6820      	ldr	r0, [r4, #0]
 8111da2:	4641      	mov	r1, r8
 8111da4:	f000 fb5a 	bl	811245c <memmove>
 8111da8:	68a3      	ldr	r3, [r4, #8]
 8111daa:	6822      	ldr	r2, [r4, #0]
 8111dac:	1b9b      	subs	r3, r3, r6
 8111dae:	4432      	add	r2, r6
 8111db0:	60a3      	str	r3, [r4, #8]
 8111db2:	6022      	str	r2, [r4, #0]
 8111db4:	2000      	movs	r0, #0
 8111db6:	e7db      	b.n	8111d70 <__ssputs_r+0x58>
 8111db8:	462a      	mov	r2, r5
 8111dba:	f000 fb75 	bl	81124a8 <_realloc_r>
 8111dbe:	4606      	mov	r6, r0
 8111dc0:	2800      	cmp	r0, #0
 8111dc2:	d1e1      	bne.n	8111d88 <__ssputs_r+0x70>
 8111dc4:	6921      	ldr	r1, [r4, #16]
 8111dc6:	4650      	mov	r0, sl
 8111dc8:	f7ff fefc 	bl	8111bc4 <_free_r>
 8111dcc:	e7c7      	b.n	8111d5e <__ssputs_r+0x46>
	...

08111dd0 <_svfiprintf_r>:
 8111dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111dd4:	4698      	mov	r8, r3
 8111dd6:	898b      	ldrh	r3, [r1, #12]
 8111dd8:	061b      	lsls	r3, r3, #24
 8111dda:	b09d      	sub	sp, #116	; 0x74
 8111ddc:	4607      	mov	r7, r0
 8111dde:	460d      	mov	r5, r1
 8111de0:	4614      	mov	r4, r2
 8111de2:	d50e      	bpl.n	8111e02 <_svfiprintf_r+0x32>
 8111de4:	690b      	ldr	r3, [r1, #16]
 8111de6:	b963      	cbnz	r3, 8111e02 <_svfiprintf_r+0x32>
 8111de8:	2140      	movs	r1, #64	; 0x40
 8111dea:	f7ff ff3b 	bl	8111c64 <_malloc_r>
 8111dee:	6028      	str	r0, [r5, #0]
 8111df0:	6128      	str	r0, [r5, #16]
 8111df2:	b920      	cbnz	r0, 8111dfe <_svfiprintf_r+0x2e>
 8111df4:	230c      	movs	r3, #12
 8111df6:	603b      	str	r3, [r7, #0]
 8111df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8111dfc:	e0d1      	b.n	8111fa2 <_svfiprintf_r+0x1d2>
 8111dfe:	2340      	movs	r3, #64	; 0x40
 8111e00:	616b      	str	r3, [r5, #20]
 8111e02:	2300      	movs	r3, #0
 8111e04:	9309      	str	r3, [sp, #36]	; 0x24
 8111e06:	2320      	movs	r3, #32
 8111e08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8111e0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8111e10:	2330      	movs	r3, #48	; 0x30
 8111e12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8111fbc <_svfiprintf_r+0x1ec>
 8111e16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8111e1a:	f04f 0901 	mov.w	r9, #1
 8111e1e:	4623      	mov	r3, r4
 8111e20:	469a      	mov	sl, r3
 8111e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8111e26:	b10a      	cbz	r2, 8111e2c <_svfiprintf_r+0x5c>
 8111e28:	2a25      	cmp	r2, #37	; 0x25
 8111e2a:	d1f9      	bne.n	8111e20 <_svfiprintf_r+0x50>
 8111e2c:	ebba 0b04 	subs.w	fp, sl, r4
 8111e30:	d00b      	beq.n	8111e4a <_svfiprintf_r+0x7a>
 8111e32:	465b      	mov	r3, fp
 8111e34:	4622      	mov	r2, r4
 8111e36:	4629      	mov	r1, r5
 8111e38:	4638      	mov	r0, r7
 8111e3a:	f7ff ff6d 	bl	8111d18 <__ssputs_r>
 8111e3e:	3001      	adds	r0, #1
 8111e40:	f000 80aa 	beq.w	8111f98 <_svfiprintf_r+0x1c8>
 8111e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8111e46:	445a      	add	r2, fp
 8111e48:	9209      	str	r2, [sp, #36]	; 0x24
 8111e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8111e4e:	2b00      	cmp	r3, #0
 8111e50:	f000 80a2 	beq.w	8111f98 <_svfiprintf_r+0x1c8>
 8111e54:	2300      	movs	r3, #0
 8111e56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8111e5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8111e5e:	f10a 0a01 	add.w	sl, sl, #1
 8111e62:	9304      	str	r3, [sp, #16]
 8111e64:	9307      	str	r3, [sp, #28]
 8111e66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8111e6a:	931a      	str	r3, [sp, #104]	; 0x68
 8111e6c:	4654      	mov	r4, sl
 8111e6e:	2205      	movs	r2, #5
 8111e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8111e74:	4851      	ldr	r0, [pc, #324]	; (8111fbc <_svfiprintf_r+0x1ec>)
 8111e76:	f7ee fa4b 	bl	8100310 <memchr>
 8111e7a:	9a04      	ldr	r2, [sp, #16]
 8111e7c:	b9d8      	cbnz	r0, 8111eb6 <_svfiprintf_r+0xe6>
 8111e7e:	06d0      	lsls	r0, r2, #27
 8111e80:	bf44      	itt	mi
 8111e82:	2320      	movmi	r3, #32
 8111e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8111e88:	0711      	lsls	r1, r2, #28
 8111e8a:	bf44      	itt	mi
 8111e8c:	232b      	movmi	r3, #43	; 0x2b
 8111e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8111e92:	f89a 3000 	ldrb.w	r3, [sl]
 8111e96:	2b2a      	cmp	r3, #42	; 0x2a
 8111e98:	d015      	beq.n	8111ec6 <_svfiprintf_r+0xf6>
 8111e9a:	9a07      	ldr	r2, [sp, #28]
 8111e9c:	4654      	mov	r4, sl
 8111e9e:	2000      	movs	r0, #0
 8111ea0:	f04f 0c0a 	mov.w	ip, #10
 8111ea4:	4621      	mov	r1, r4
 8111ea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8111eaa:	3b30      	subs	r3, #48	; 0x30
 8111eac:	2b09      	cmp	r3, #9
 8111eae:	d94e      	bls.n	8111f4e <_svfiprintf_r+0x17e>
 8111eb0:	b1b0      	cbz	r0, 8111ee0 <_svfiprintf_r+0x110>
 8111eb2:	9207      	str	r2, [sp, #28]
 8111eb4:	e014      	b.n	8111ee0 <_svfiprintf_r+0x110>
 8111eb6:	eba0 0308 	sub.w	r3, r0, r8
 8111eba:	fa09 f303 	lsl.w	r3, r9, r3
 8111ebe:	4313      	orrs	r3, r2
 8111ec0:	9304      	str	r3, [sp, #16]
 8111ec2:	46a2      	mov	sl, r4
 8111ec4:	e7d2      	b.n	8111e6c <_svfiprintf_r+0x9c>
 8111ec6:	9b03      	ldr	r3, [sp, #12]
 8111ec8:	1d19      	adds	r1, r3, #4
 8111eca:	681b      	ldr	r3, [r3, #0]
 8111ecc:	9103      	str	r1, [sp, #12]
 8111ece:	2b00      	cmp	r3, #0
 8111ed0:	bfbb      	ittet	lt
 8111ed2:	425b      	neglt	r3, r3
 8111ed4:	f042 0202 	orrlt.w	r2, r2, #2
 8111ed8:	9307      	strge	r3, [sp, #28]
 8111eda:	9307      	strlt	r3, [sp, #28]
 8111edc:	bfb8      	it	lt
 8111ede:	9204      	strlt	r2, [sp, #16]
 8111ee0:	7823      	ldrb	r3, [r4, #0]
 8111ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8111ee4:	d10c      	bne.n	8111f00 <_svfiprintf_r+0x130>
 8111ee6:	7863      	ldrb	r3, [r4, #1]
 8111ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8111eea:	d135      	bne.n	8111f58 <_svfiprintf_r+0x188>
 8111eec:	9b03      	ldr	r3, [sp, #12]
 8111eee:	1d1a      	adds	r2, r3, #4
 8111ef0:	681b      	ldr	r3, [r3, #0]
 8111ef2:	9203      	str	r2, [sp, #12]
 8111ef4:	2b00      	cmp	r3, #0
 8111ef6:	bfb8      	it	lt
 8111ef8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8111efc:	3402      	adds	r4, #2
 8111efe:	9305      	str	r3, [sp, #20]
 8111f00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8111fcc <_svfiprintf_r+0x1fc>
 8111f04:	7821      	ldrb	r1, [r4, #0]
 8111f06:	2203      	movs	r2, #3
 8111f08:	4650      	mov	r0, sl
 8111f0a:	f7ee fa01 	bl	8100310 <memchr>
 8111f0e:	b140      	cbz	r0, 8111f22 <_svfiprintf_r+0x152>
 8111f10:	2340      	movs	r3, #64	; 0x40
 8111f12:	eba0 000a 	sub.w	r0, r0, sl
 8111f16:	fa03 f000 	lsl.w	r0, r3, r0
 8111f1a:	9b04      	ldr	r3, [sp, #16]
 8111f1c:	4303      	orrs	r3, r0
 8111f1e:	3401      	adds	r4, #1
 8111f20:	9304      	str	r3, [sp, #16]
 8111f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8111f26:	4826      	ldr	r0, [pc, #152]	; (8111fc0 <_svfiprintf_r+0x1f0>)
 8111f28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8111f2c:	2206      	movs	r2, #6
 8111f2e:	f7ee f9ef 	bl	8100310 <memchr>
 8111f32:	2800      	cmp	r0, #0
 8111f34:	d038      	beq.n	8111fa8 <_svfiprintf_r+0x1d8>
 8111f36:	4b23      	ldr	r3, [pc, #140]	; (8111fc4 <_svfiprintf_r+0x1f4>)
 8111f38:	bb1b      	cbnz	r3, 8111f82 <_svfiprintf_r+0x1b2>
 8111f3a:	9b03      	ldr	r3, [sp, #12]
 8111f3c:	3307      	adds	r3, #7
 8111f3e:	f023 0307 	bic.w	r3, r3, #7
 8111f42:	3308      	adds	r3, #8
 8111f44:	9303      	str	r3, [sp, #12]
 8111f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8111f48:	4433      	add	r3, r6
 8111f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8111f4c:	e767      	b.n	8111e1e <_svfiprintf_r+0x4e>
 8111f4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8111f52:	460c      	mov	r4, r1
 8111f54:	2001      	movs	r0, #1
 8111f56:	e7a5      	b.n	8111ea4 <_svfiprintf_r+0xd4>
 8111f58:	2300      	movs	r3, #0
 8111f5a:	3401      	adds	r4, #1
 8111f5c:	9305      	str	r3, [sp, #20]
 8111f5e:	4619      	mov	r1, r3
 8111f60:	f04f 0c0a 	mov.w	ip, #10
 8111f64:	4620      	mov	r0, r4
 8111f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8111f6a:	3a30      	subs	r2, #48	; 0x30
 8111f6c:	2a09      	cmp	r2, #9
 8111f6e:	d903      	bls.n	8111f78 <_svfiprintf_r+0x1a8>
 8111f70:	2b00      	cmp	r3, #0
 8111f72:	d0c5      	beq.n	8111f00 <_svfiprintf_r+0x130>
 8111f74:	9105      	str	r1, [sp, #20]
 8111f76:	e7c3      	b.n	8111f00 <_svfiprintf_r+0x130>
 8111f78:	fb0c 2101 	mla	r1, ip, r1, r2
 8111f7c:	4604      	mov	r4, r0
 8111f7e:	2301      	movs	r3, #1
 8111f80:	e7f0      	b.n	8111f64 <_svfiprintf_r+0x194>
 8111f82:	ab03      	add	r3, sp, #12
 8111f84:	9300      	str	r3, [sp, #0]
 8111f86:	462a      	mov	r2, r5
 8111f88:	4b0f      	ldr	r3, [pc, #60]	; (8111fc8 <_svfiprintf_r+0x1f8>)
 8111f8a:	a904      	add	r1, sp, #16
 8111f8c:	4638      	mov	r0, r7
 8111f8e:	f7fd fb5b 	bl	810f648 <_printf_float>
 8111f92:	1c42      	adds	r2, r0, #1
 8111f94:	4606      	mov	r6, r0
 8111f96:	d1d6      	bne.n	8111f46 <_svfiprintf_r+0x176>
 8111f98:	89ab      	ldrh	r3, [r5, #12]
 8111f9a:	065b      	lsls	r3, r3, #25
 8111f9c:	f53f af2c 	bmi.w	8111df8 <_svfiprintf_r+0x28>
 8111fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8111fa2:	b01d      	add	sp, #116	; 0x74
 8111fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111fa8:	ab03      	add	r3, sp, #12
 8111faa:	9300      	str	r3, [sp, #0]
 8111fac:	462a      	mov	r2, r5
 8111fae:	4b06      	ldr	r3, [pc, #24]	; (8111fc8 <_svfiprintf_r+0x1f8>)
 8111fb0:	a904      	add	r1, sp, #16
 8111fb2:	4638      	mov	r0, r7
 8111fb4:	f7fd fdec 	bl	810fb90 <_printf_i>
 8111fb8:	e7eb      	b.n	8111f92 <_svfiprintf_r+0x1c2>
 8111fba:	bf00      	nop
 8111fbc:	0811359c 	.word	0x0811359c
 8111fc0:	081135a6 	.word	0x081135a6
 8111fc4:	0810f649 	.word	0x0810f649
 8111fc8:	08111d19 	.word	0x08111d19
 8111fcc:	081135a2 	.word	0x081135a2

08111fd0 <__sfputc_r>:
 8111fd0:	6893      	ldr	r3, [r2, #8]
 8111fd2:	3b01      	subs	r3, #1
 8111fd4:	2b00      	cmp	r3, #0
 8111fd6:	b410      	push	{r4}
 8111fd8:	6093      	str	r3, [r2, #8]
 8111fda:	da08      	bge.n	8111fee <__sfputc_r+0x1e>
 8111fdc:	6994      	ldr	r4, [r2, #24]
 8111fde:	42a3      	cmp	r3, r4
 8111fe0:	db01      	blt.n	8111fe6 <__sfputc_r+0x16>
 8111fe2:	290a      	cmp	r1, #10
 8111fe4:	d103      	bne.n	8111fee <__sfputc_r+0x1e>
 8111fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8111fea:	f7fe b897 	b.w	811011c <__swbuf_r>
 8111fee:	6813      	ldr	r3, [r2, #0]
 8111ff0:	1c58      	adds	r0, r3, #1
 8111ff2:	6010      	str	r0, [r2, #0]
 8111ff4:	7019      	strb	r1, [r3, #0]
 8111ff6:	4608      	mov	r0, r1
 8111ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8111ffc:	4770      	bx	lr

08111ffe <__sfputs_r>:
 8111ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112000:	4606      	mov	r6, r0
 8112002:	460f      	mov	r7, r1
 8112004:	4614      	mov	r4, r2
 8112006:	18d5      	adds	r5, r2, r3
 8112008:	42ac      	cmp	r4, r5
 811200a:	d101      	bne.n	8112010 <__sfputs_r+0x12>
 811200c:	2000      	movs	r0, #0
 811200e:	e007      	b.n	8112020 <__sfputs_r+0x22>
 8112010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112014:	463a      	mov	r2, r7
 8112016:	4630      	mov	r0, r6
 8112018:	f7ff ffda 	bl	8111fd0 <__sfputc_r>
 811201c:	1c43      	adds	r3, r0, #1
 811201e:	d1f3      	bne.n	8112008 <__sfputs_r+0xa>
 8112020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08112024 <_vfiprintf_r>:
 8112024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112028:	460d      	mov	r5, r1
 811202a:	b09d      	sub	sp, #116	; 0x74
 811202c:	4614      	mov	r4, r2
 811202e:	4698      	mov	r8, r3
 8112030:	4606      	mov	r6, r0
 8112032:	b118      	cbz	r0, 811203c <_vfiprintf_r+0x18>
 8112034:	6983      	ldr	r3, [r0, #24]
 8112036:	b90b      	cbnz	r3, 811203c <_vfiprintf_r+0x18>
 8112038:	f7ff f924 	bl	8111284 <__sinit>
 811203c:	4b89      	ldr	r3, [pc, #548]	; (8112264 <_vfiprintf_r+0x240>)
 811203e:	429d      	cmp	r5, r3
 8112040:	d11b      	bne.n	811207a <_vfiprintf_r+0x56>
 8112042:	6875      	ldr	r5, [r6, #4]
 8112044:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8112046:	07d9      	lsls	r1, r3, #31
 8112048:	d405      	bmi.n	8112056 <_vfiprintf_r+0x32>
 811204a:	89ab      	ldrh	r3, [r5, #12]
 811204c:	059a      	lsls	r2, r3, #22
 811204e:	d402      	bmi.n	8112056 <_vfiprintf_r+0x32>
 8112050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8112052:	f7ff f9ba 	bl	81113ca <__retarget_lock_acquire_recursive>
 8112056:	89ab      	ldrh	r3, [r5, #12]
 8112058:	071b      	lsls	r3, r3, #28
 811205a:	d501      	bpl.n	8112060 <_vfiprintf_r+0x3c>
 811205c:	692b      	ldr	r3, [r5, #16]
 811205e:	b9eb      	cbnz	r3, 811209c <_vfiprintf_r+0x78>
 8112060:	4629      	mov	r1, r5
 8112062:	4630      	mov	r0, r6
 8112064:	f7fe f8ac 	bl	81101c0 <__swsetup_r>
 8112068:	b1c0      	cbz	r0, 811209c <_vfiprintf_r+0x78>
 811206a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 811206c:	07dc      	lsls	r4, r3, #31
 811206e:	d50e      	bpl.n	811208e <_vfiprintf_r+0x6a>
 8112070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8112074:	b01d      	add	sp, #116	; 0x74
 8112076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811207a:	4b7b      	ldr	r3, [pc, #492]	; (8112268 <_vfiprintf_r+0x244>)
 811207c:	429d      	cmp	r5, r3
 811207e:	d101      	bne.n	8112084 <_vfiprintf_r+0x60>
 8112080:	68b5      	ldr	r5, [r6, #8]
 8112082:	e7df      	b.n	8112044 <_vfiprintf_r+0x20>
 8112084:	4b79      	ldr	r3, [pc, #484]	; (811226c <_vfiprintf_r+0x248>)
 8112086:	429d      	cmp	r5, r3
 8112088:	bf08      	it	eq
 811208a:	68f5      	ldreq	r5, [r6, #12]
 811208c:	e7da      	b.n	8112044 <_vfiprintf_r+0x20>
 811208e:	89ab      	ldrh	r3, [r5, #12]
 8112090:	0598      	lsls	r0, r3, #22
 8112092:	d4ed      	bmi.n	8112070 <_vfiprintf_r+0x4c>
 8112094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8112096:	f7ff f99a 	bl	81113ce <__retarget_lock_release_recursive>
 811209a:	e7e9      	b.n	8112070 <_vfiprintf_r+0x4c>
 811209c:	2300      	movs	r3, #0
 811209e:	9309      	str	r3, [sp, #36]	; 0x24
 81120a0:	2320      	movs	r3, #32
 81120a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81120a6:	f8cd 800c 	str.w	r8, [sp, #12]
 81120aa:	2330      	movs	r3, #48	; 0x30
 81120ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8112270 <_vfiprintf_r+0x24c>
 81120b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 81120b4:	f04f 0901 	mov.w	r9, #1
 81120b8:	4623      	mov	r3, r4
 81120ba:	469a      	mov	sl, r3
 81120bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 81120c0:	b10a      	cbz	r2, 81120c6 <_vfiprintf_r+0xa2>
 81120c2:	2a25      	cmp	r2, #37	; 0x25
 81120c4:	d1f9      	bne.n	81120ba <_vfiprintf_r+0x96>
 81120c6:	ebba 0b04 	subs.w	fp, sl, r4
 81120ca:	d00b      	beq.n	81120e4 <_vfiprintf_r+0xc0>
 81120cc:	465b      	mov	r3, fp
 81120ce:	4622      	mov	r2, r4
 81120d0:	4629      	mov	r1, r5
 81120d2:	4630      	mov	r0, r6
 81120d4:	f7ff ff93 	bl	8111ffe <__sfputs_r>
 81120d8:	3001      	adds	r0, #1
 81120da:	f000 80aa 	beq.w	8112232 <_vfiprintf_r+0x20e>
 81120de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81120e0:	445a      	add	r2, fp
 81120e2:	9209      	str	r2, [sp, #36]	; 0x24
 81120e4:	f89a 3000 	ldrb.w	r3, [sl]
 81120e8:	2b00      	cmp	r3, #0
 81120ea:	f000 80a2 	beq.w	8112232 <_vfiprintf_r+0x20e>
 81120ee:	2300      	movs	r3, #0
 81120f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81120f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81120f8:	f10a 0a01 	add.w	sl, sl, #1
 81120fc:	9304      	str	r3, [sp, #16]
 81120fe:	9307      	str	r3, [sp, #28]
 8112100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8112104:	931a      	str	r3, [sp, #104]	; 0x68
 8112106:	4654      	mov	r4, sl
 8112108:	2205      	movs	r2, #5
 811210a:	f814 1b01 	ldrb.w	r1, [r4], #1
 811210e:	4858      	ldr	r0, [pc, #352]	; (8112270 <_vfiprintf_r+0x24c>)
 8112110:	f7ee f8fe 	bl	8100310 <memchr>
 8112114:	9a04      	ldr	r2, [sp, #16]
 8112116:	b9d8      	cbnz	r0, 8112150 <_vfiprintf_r+0x12c>
 8112118:	06d1      	lsls	r1, r2, #27
 811211a:	bf44      	itt	mi
 811211c:	2320      	movmi	r3, #32
 811211e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8112122:	0713      	lsls	r3, r2, #28
 8112124:	bf44      	itt	mi
 8112126:	232b      	movmi	r3, #43	; 0x2b
 8112128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 811212c:	f89a 3000 	ldrb.w	r3, [sl]
 8112130:	2b2a      	cmp	r3, #42	; 0x2a
 8112132:	d015      	beq.n	8112160 <_vfiprintf_r+0x13c>
 8112134:	9a07      	ldr	r2, [sp, #28]
 8112136:	4654      	mov	r4, sl
 8112138:	2000      	movs	r0, #0
 811213a:	f04f 0c0a 	mov.w	ip, #10
 811213e:	4621      	mov	r1, r4
 8112140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8112144:	3b30      	subs	r3, #48	; 0x30
 8112146:	2b09      	cmp	r3, #9
 8112148:	d94e      	bls.n	81121e8 <_vfiprintf_r+0x1c4>
 811214a:	b1b0      	cbz	r0, 811217a <_vfiprintf_r+0x156>
 811214c:	9207      	str	r2, [sp, #28]
 811214e:	e014      	b.n	811217a <_vfiprintf_r+0x156>
 8112150:	eba0 0308 	sub.w	r3, r0, r8
 8112154:	fa09 f303 	lsl.w	r3, r9, r3
 8112158:	4313      	orrs	r3, r2
 811215a:	9304      	str	r3, [sp, #16]
 811215c:	46a2      	mov	sl, r4
 811215e:	e7d2      	b.n	8112106 <_vfiprintf_r+0xe2>
 8112160:	9b03      	ldr	r3, [sp, #12]
 8112162:	1d19      	adds	r1, r3, #4
 8112164:	681b      	ldr	r3, [r3, #0]
 8112166:	9103      	str	r1, [sp, #12]
 8112168:	2b00      	cmp	r3, #0
 811216a:	bfbb      	ittet	lt
 811216c:	425b      	neglt	r3, r3
 811216e:	f042 0202 	orrlt.w	r2, r2, #2
 8112172:	9307      	strge	r3, [sp, #28]
 8112174:	9307      	strlt	r3, [sp, #28]
 8112176:	bfb8      	it	lt
 8112178:	9204      	strlt	r2, [sp, #16]
 811217a:	7823      	ldrb	r3, [r4, #0]
 811217c:	2b2e      	cmp	r3, #46	; 0x2e
 811217e:	d10c      	bne.n	811219a <_vfiprintf_r+0x176>
 8112180:	7863      	ldrb	r3, [r4, #1]
 8112182:	2b2a      	cmp	r3, #42	; 0x2a
 8112184:	d135      	bne.n	81121f2 <_vfiprintf_r+0x1ce>
 8112186:	9b03      	ldr	r3, [sp, #12]
 8112188:	1d1a      	adds	r2, r3, #4
 811218a:	681b      	ldr	r3, [r3, #0]
 811218c:	9203      	str	r2, [sp, #12]
 811218e:	2b00      	cmp	r3, #0
 8112190:	bfb8      	it	lt
 8112192:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8112196:	3402      	adds	r4, #2
 8112198:	9305      	str	r3, [sp, #20]
 811219a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8112280 <_vfiprintf_r+0x25c>
 811219e:	7821      	ldrb	r1, [r4, #0]
 81121a0:	2203      	movs	r2, #3
 81121a2:	4650      	mov	r0, sl
 81121a4:	f7ee f8b4 	bl	8100310 <memchr>
 81121a8:	b140      	cbz	r0, 81121bc <_vfiprintf_r+0x198>
 81121aa:	2340      	movs	r3, #64	; 0x40
 81121ac:	eba0 000a 	sub.w	r0, r0, sl
 81121b0:	fa03 f000 	lsl.w	r0, r3, r0
 81121b4:	9b04      	ldr	r3, [sp, #16]
 81121b6:	4303      	orrs	r3, r0
 81121b8:	3401      	adds	r4, #1
 81121ba:	9304      	str	r3, [sp, #16]
 81121bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 81121c0:	482c      	ldr	r0, [pc, #176]	; (8112274 <_vfiprintf_r+0x250>)
 81121c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 81121c6:	2206      	movs	r2, #6
 81121c8:	f7ee f8a2 	bl	8100310 <memchr>
 81121cc:	2800      	cmp	r0, #0
 81121ce:	d03f      	beq.n	8112250 <_vfiprintf_r+0x22c>
 81121d0:	4b29      	ldr	r3, [pc, #164]	; (8112278 <_vfiprintf_r+0x254>)
 81121d2:	bb1b      	cbnz	r3, 811221c <_vfiprintf_r+0x1f8>
 81121d4:	9b03      	ldr	r3, [sp, #12]
 81121d6:	3307      	adds	r3, #7
 81121d8:	f023 0307 	bic.w	r3, r3, #7
 81121dc:	3308      	adds	r3, #8
 81121de:	9303      	str	r3, [sp, #12]
 81121e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81121e2:	443b      	add	r3, r7
 81121e4:	9309      	str	r3, [sp, #36]	; 0x24
 81121e6:	e767      	b.n	81120b8 <_vfiprintf_r+0x94>
 81121e8:	fb0c 3202 	mla	r2, ip, r2, r3
 81121ec:	460c      	mov	r4, r1
 81121ee:	2001      	movs	r0, #1
 81121f0:	e7a5      	b.n	811213e <_vfiprintf_r+0x11a>
 81121f2:	2300      	movs	r3, #0
 81121f4:	3401      	adds	r4, #1
 81121f6:	9305      	str	r3, [sp, #20]
 81121f8:	4619      	mov	r1, r3
 81121fa:	f04f 0c0a 	mov.w	ip, #10
 81121fe:	4620      	mov	r0, r4
 8112200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8112204:	3a30      	subs	r2, #48	; 0x30
 8112206:	2a09      	cmp	r2, #9
 8112208:	d903      	bls.n	8112212 <_vfiprintf_r+0x1ee>
 811220a:	2b00      	cmp	r3, #0
 811220c:	d0c5      	beq.n	811219a <_vfiprintf_r+0x176>
 811220e:	9105      	str	r1, [sp, #20]
 8112210:	e7c3      	b.n	811219a <_vfiprintf_r+0x176>
 8112212:	fb0c 2101 	mla	r1, ip, r1, r2
 8112216:	4604      	mov	r4, r0
 8112218:	2301      	movs	r3, #1
 811221a:	e7f0      	b.n	81121fe <_vfiprintf_r+0x1da>
 811221c:	ab03      	add	r3, sp, #12
 811221e:	9300      	str	r3, [sp, #0]
 8112220:	462a      	mov	r2, r5
 8112222:	4b16      	ldr	r3, [pc, #88]	; (811227c <_vfiprintf_r+0x258>)
 8112224:	a904      	add	r1, sp, #16
 8112226:	4630      	mov	r0, r6
 8112228:	f7fd fa0e 	bl	810f648 <_printf_float>
 811222c:	4607      	mov	r7, r0
 811222e:	1c78      	adds	r0, r7, #1
 8112230:	d1d6      	bne.n	81121e0 <_vfiprintf_r+0x1bc>
 8112232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8112234:	07d9      	lsls	r1, r3, #31
 8112236:	d405      	bmi.n	8112244 <_vfiprintf_r+0x220>
 8112238:	89ab      	ldrh	r3, [r5, #12]
 811223a:	059a      	lsls	r2, r3, #22
 811223c:	d402      	bmi.n	8112244 <_vfiprintf_r+0x220>
 811223e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8112240:	f7ff f8c5 	bl	81113ce <__retarget_lock_release_recursive>
 8112244:	89ab      	ldrh	r3, [r5, #12]
 8112246:	065b      	lsls	r3, r3, #25
 8112248:	f53f af12 	bmi.w	8112070 <_vfiprintf_r+0x4c>
 811224c:	9809      	ldr	r0, [sp, #36]	; 0x24
 811224e:	e711      	b.n	8112074 <_vfiprintf_r+0x50>
 8112250:	ab03      	add	r3, sp, #12
 8112252:	9300      	str	r3, [sp, #0]
 8112254:	462a      	mov	r2, r5
 8112256:	4b09      	ldr	r3, [pc, #36]	; (811227c <_vfiprintf_r+0x258>)
 8112258:	a904      	add	r1, sp, #16
 811225a:	4630      	mov	r0, r6
 811225c:	f7fd fc98 	bl	810fb90 <_printf_i>
 8112260:	e7e4      	b.n	811222c <_vfiprintf_r+0x208>
 8112262:	bf00      	nop
 8112264:	081133fc 	.word	0x081133fc
 8112268:	0811341c 	.word	0x0811341c
 811226c:	081133dc 	.word	0x081133dc
 8112270:	0811359c 	.word	0x0811359c
 8112274:	081135a6 	.word	0x081135a6
 8112278:	0810f649 	.word	0x0810f649
 811227c:	08111fff 	.word	0x08111fff
 8112280:	081135a2 	.word	0x081135a2

08112284 <_sbrk_r>:
 8112284:	b538      	push	{r3, r4, r5, lr}
 8112286:	4d06      	ldr	r5, [pc, #24]	; (81122a0 <_sbrk_r+0x1c>)
 8112288:	2300      	movs	r3, #0
 811228a:	4604      	mov	r4, r0
 811228c:	4608      	mov	r0, r1
 811228e:	602b      	str	r3, [r5, #0]
 8112290:	f7ef fe32 	bl	8101ef8 <_sbrk>
 8112294:	1c43      	adds	r3, r0, #1
 8112296:	d102      	bne.n	811229e <_sbrk_r+0x1a>
 8112298:	682b      	ldr	r3, [r5, #0]
 811229a:	b103      	cbz	r3, 811229e <_sbrk_r+0x1a>
 811229c:	6023      	str	r3, [r4, #0]
 811229e:	bd38      	pop	{r3, r4, r5, pc}
 81122a0:	1000a384 	.word	0x1000a384

081122a4 <__sread>:
 81122a4:	b510      	push	{r4, lr}
 81122a6:	460c      	mov	r4, r1
 81122a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81122ac:	f000 f922 	bl	81124f4 <_read_r>
 81122b0:	2800      	cmp	r0, #0
 81122b2:	bfab      	itete	ge
 81122b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 81122b6:	89a3      	ldrhlt	r3, [r4, #12]
 81122b8:	181b      	addge	r3, r3, r0
 81122ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 81122be:	bfac      	ite	ge
 81122c0:	6563      	strge	r3, [r4, #84]	; 0x54
 81122c2:	81a3      	strhlt	r3, [r4, #12]
 81122c4:	bd10      	pop	{r4, pc}

081122c6 <__swrite>:
 81122c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81122ca:	461f      	mov	r7, r3
 81122cc:	898b      	ldrh	r3, [r1, #12]
 81122ce:	05db      	lsls	r3, r3, #23
 81122d0:	4605      	mov	r5, r0
 81122d2:	460c      	mov	r4, r1
 81122d4:	4616      	mov	r6, r2
 81122d6:	d505      	bpl.n	81122e4 <__swrite+0x1e>
 81122d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81122dc:	2302      	movs	r3, #2
 81122de:	2200      	movs	r2, #0
 81122e0:	f000 f898 	bl	8112414 <_lseek_r>
 81122e4:	89a3      	ldrh	r3, [r4, #12]
 81122e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81122ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81122ee:	81a3      	strh	r3, [r4, #12]
 81122f0:	4632      	mov	r2, r6
 81122f2:	463b      	mov	r3, r7
 81122f4:	4628      	mov	r0, r5
 81122f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81122fa:	f000 b817 	b.w	811232c <_write_r>

081122fe <__sseek>:
 81122fe:	b510      	push	{r4, lr}
 8112300:	460c      	mov	r4, r1
 8112302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112306:	f000 f885 	bl	8112414 <_lseek_r>
 811230a:	1c43      	adds	r3, r0, #1
 811230c:	89a3      	ldrh	r3, [r4, #12]
 811230e:	bf15      	itete	ne
 8112310:	6560      	strne	r0, [r4, #84]	; 0x54
 8112312:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8112316:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 811231a:	81a3      	strheq	r3, [r4, #12]
 811231c:	bf18      	it	ne
 811231e:	81a3      	strhne	r3, [r4, #12]
 8112320:	bd10      	pop	{r4, pc}

08112322 <__sclose>:
 8112322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112326:	f000 b831 	b.w	811238c <_close_r>
	...

0811232c <_write_r>:
 811232c:	b538      	push	{r3, r4, r5, lr}
 811232e:	4d07      	ldr	r5, [pc, #28]	; (811234c <_write_r+0x20>)
 8112330:	4604      	mov	r4, r0
 8112332:	4608      	mov	r0, r1
 8112334:	4611      	mov	r1, r2
 8112336:	2200      	movs	r2, #0
 8112338:	602a      	str	r2, [r5, #0]
 811233a:	461a      	mov	r2, r3
 811233c:	f7ef fd8b 	bl	8101e56 <_write>
 8112340:	1c43      	adds	r3, r0, #1
 8112342:	d102      	bne.n	811234a <_write_r+0x1e>
 8112344:	682b      	ldr	r3, [r5, #0]
 8112346:	b103      	cbz	r3, 811234a <_write_r+0x1e>
 8112348:	6023      	str	r3, [r4, #0]
 811234a:	bd38      	pop	{r3, r4, r5, pc}
 811234c:	1000a384 	.word	0x1000a384

08112350 <__assert_func>:
 8112350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8112352:	4614      	mov	r4, r2
 8112354:	461a      	mov	r2, r3
 8112356:	4b09      	ldr	r3, [pc, #36]	; (811237c <__assert_func+0x2c>)
 8112358:	681b      	ldr	r3, [r3, #0]
 811235a:	4605      	mov	r5, r0
 811235c:	68d8      	ldr	r0, [r3, #12]
 811235e:	b14c      	cbz	r4, 8112374 <__assert_func+0x24>
 8112360:	4b07      	ldr	r3, [pc, #28]	; (8112380 <__assert_func+0x30>)
 8112362:	9100      	str	r1, [sp, #0]
 8112364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8112368:	4906      	ldr	r1, [pc, #24]	; (8112384 <__assert_func+0x34>)
 811236a:	462b      	mov	r3, r5
 811236c:	f000 f81e 	bl	81123ac <fiprintf>
 8112370:	f7fd f879 	bl	810f466 <abort>
 8112374:	4b04      	ldr	r3, [pc, #16]	; (8112388 <__assert_func+0x38>)
 8112376:	461c      	mov	r4, r3
 8112378:	e7f3      	b.n	8112362 <__assert_func+0x12>
 811237a:	bf00      	nop
 811237c:	10000038 	.word	0x10000038
 8112380:	081135ad 	.word	0x081135ad
 8112384:	081135ba 	.word	0x081135ba
 8112388:	081135e8 	.word	0x081135e8

0811238c <_close_r>:
 811238c:	b538      	push	{r3, r4, r5, lr}
 811238e:	4d06      	ldr	r5, [pc, #24]	; (81123a8 <_close_r+0x1c>)
 8112390:	2300      	movs	r3, #0
 8112392:	4604      	mov	r4, r0
 8112394:	4608      	mov	r0, r1
 8112396:	602b      	str	r3, [r5, #0]
 8112398:	f7ef fd79 	bl	8101e8e <_close>
 811239c:	1c43      	adds	r3, r0, #1
 811239e:	d102      	bne.n	81123a6 <_close_r+0x1a>
 81123a0:	682b      	ldr	r3, [r5, #0]
 81123a2:	b103      	cbz	r3, 81123a6 <_close_r+0x1a>
 81123a4:	6023      	str	r3, [r4, #0]
 81123a6:	bd38      	pop	{r3, r4, r5, pc}
 81123a8:	1000a384 	.word	0x1000a384

081123ac <fiprintf>:
 81123ac:	b40e      	push	{r1, r2, r3}
 81123ae:	b503      	push	{r0, r1, lr}
 81123b0:	4601      	mov	r1, r0
 81123b2:	ab03      	add	r3, sp, #12
 81123b4:	4805      	ldr	r0, [pc, #20]	; (81123cc <fiprintf+0x20>)
 81123b6:	f853 2b04 	ldr.w	r2, [r3], #4
 81123ba:	6800      	ldr	r0, [r0, #0]
 81123bc:	9301      	str	r3, [sp, #4]
 81123be:	f7ff fe31 	bl	8112024 <_vfiprintf_r>
 81123c2:	b002      	add	sp, #8
 81123c4:	f85d eb04 	ldr.w	lr, [sp], #4
 81123c8:	b003      	add	sp, #12
 81123ca:	4770      	bx	lr
 81123cc:	10000038 	.word	0x10000038

081123d0 <_fstat_r>:
 81123d0:	b538      	push	{r3, r4, r5, lr}
 81123d2:	4d07      	ldr	r5, [pc, #28]	; (81123f0 <_fstat_r+0x20>)
 81123d4:	2300      	movs	r3, #0
 81123d6:	4604      	mov	r4, r0
 81123d8:	4608      	mov	r0, r1
 81123da:	4611      	mov	r1, r2
 81123dc:	602b      	str	r3, [r5, #0]
 81123de:	f7ef fd62 	bl	8101ea6 <_fstat>
 81123e2:	1c43      	adds	r3, r0, #1
 81123e4:	d102      	bne.n	81123ec <_fstat_r+0x1c>
 81123e6:	682b      	ldr	r3, [r5, #0]
 81123e8:	b103      	cbz	r3, 81123ec <_fstat_r+0x1c>
 81123ea:	6023      	str	r3, [r4, #0]
 81123ec:	bd38      	pop	{r3, r4, r5, pc}
 81123ee:	bf00      	nop
 81123f0:	1000a384 	.word	0x1000a384

081123f4 <_isatty_r>:
 81123f4:	b538      	push	{r3, r4, r5, lr}
 81123f6:	4d06      	ldr	r5, [pc, #24]	; (8112410 <_isatty_r+0x1c>)
 81123f8:	2300      	movs	r3, #0
 81123fa:	4604      	mov	r4, r0
 81123fc:	4608      	mov	r0, r1
 81123fe:	602b      	str	r3, [r5, #0]
 8112400:	f7ef fd61 	bl	8101ec6 <_isatty>
 8112404:	1c43      	adds	r3, r0, #1
 8112406:	d102      	bne.n	811240e <_isatty_r+0x1a>
 8112408:	682b      	ldr	r3, [r5, #0]
 811240a:	b103      	cbz	r3, 811240e <_isatty_r+0x1a>
 811240c:	6023      	str	r3, [r4, #0]
 811240e:	bd38      	pop	{r3, r4, r5, pc}
 8112410:	1000a384 	.word	0x1000a384

08112414 <_lseek_r>:
 8112414:	b538      	push	{r3, r4, r5, lr}
 8112416:	4d07      	ldr	r5, [pc, #28]	; (8112434 <_lseek_r+0x20>)
 8112418:	4604      	mov	r4, r0
 811241a:	4608      	mov	r0, r1
 811241c:	4611      	mov	r1, r2
 811241e:	2200      	movs	r2, #0
 8112420:	602a      	str	r2, [r5, #0]
 8112422:	461a      	mov	r2, r3
 8112424:	f7ef fd5a 	bl	8101edc <_lseek>
 8112428:	1c43      	adds	r3, r0, #1
 811242a:	d102      	bne.n	8112432 <_lseek_r+0x1e>
 811242c:	682b      	ldr	r3, [r5, #0]
 811242e:	b103      	cbz	r3, 8112432 <_lseek_r+0x1e>
 8112430:	6023      	str	r3, [r4, #0]
 8112432:	bd38      	pop	{r3, r4, r5, pc}
 8112434:	1000a384 	.word	0x1000a384

08112438 <__ascii_mbtowc>:
 8112438:	b082      	sub	sp, #8
 811243a:	b901      	cbnz	r1, 811243e <__ascii_mbtowc+0x6>
 811243c:	a901      	add	r1, sp, #4
 811243e:	b142      	cbz	r2, 8112452 <__ascii_mbtowc+0x1a>
 8112440:	b14b      	cbz	r3, 8112456 <__ascii_mbtowc+0x1e>
 8112442:	7813      	ldrb	r3, [r2, #0]
 8112444:	600b      	str	r3, [r1, #0]
 8112446:	7812      	ldrb	r2, [r2, #0]
 8112448:	1e10      	subs	r0, r2, #0
 811244a:	bf18      	it	ne
 811244c:	2001      	movne	r0, #1
 811244e:	b002      	add	sp, #8
 8112450:	4770      	bx	lr
 8112452:	4610      	mov	r0, r2
 8112454:	e7fb      	b.n	811244e <__ascii_mbtowc+0x16>
 8112456:	f06f 0001 	mvn.w	r0, #1
 811245a:	e7f8      	b.n	811244e <__ascii_mbtowc+0x16>

0811245c <memmove>:
 811245c:	4288      	cmp	r0, r1
 811245e:	b510      	push	{r4, lr}
 8112460:	eb01 0402 	add.w	r4, r1, r2
 8112464:	d902      	bls.n	811246c <memmove+0x10>
 8112466:	4284      	cmp	r4, r0
 8112468:	4623      	mov	r3, r4
 811246a:	d807      	bhi.n	811247c <memmove+0x20>
 811246c:	1e43      	subs	r3, r0, #1
 811246e:	42a1      	cmp	r1, r4
 8112470:	d008      	beq.n	8112484 <memmove+0x28>
 8112472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8112476:	f803 2f01 	strb.w	r2, [r3, #1]!
 811247a:	e7f8      	b.n	811246e <memmove+0x12>
 811247c:	4402      	add	r2, r0
 811247e:	4601      	mov	r1, r0
 8112480:	428a      	cmp	r2, r1
 8112482:	d100      	bne.n	8112486 <memmove+0x2a>
 8112484:	bd10      	pop	{r4, pc}
 8112486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 811248a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 811248e:	e7f7      	b.n	8112480 <memmove+0x24>

08112490 <__malloc_lock>:
 8112490:	4801      	ldr	r0, [pc, #4]	; (8112498 <__malloc_lock+0x8>)
 8112492:	f7fe bf9a 	b.w	81113ca <__retarget_lock_acquire_recursive>
 8112496:	bf00      	nop
 8112498:	1000a37c 	.word	0x1000a37c

0811249c <__malloc_unlock>:
 811249c:	4801      	ldr	r0, [pc, #4]	; (81124a4 <__malloc_unlock+0x8>)
 811249e:	f7fe bf96 	b.w	81113ce <__retarget_lock_release_recursive>
 81124a2:	bf00      	nop
 81124a4:	1000a37c 	.word	0x1000a37c

081124a8 <_realloc_r>:
 81124a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81124aa:	4607      	mov	r7, r0
 81124ac:	4614      	mov	r4, r2
 81124ae:	460e      	mov	r6, r1
 81124b0:	b921      	cbnz	r1, 81124bc <_realloc_r+0x14>
 81124b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 81124b6:	4611      	mov	r1, r2
 81124b8:	f7ff bbd4 	b.w	8111c64 <_malloc_r>
 81124bc:	b922      	cbnz	r2, 81124c8 <_realloc_r+0x20>
 81124be:	f7ff fb81 	bl	8111bc4 <_free_r>
 81124c2:	4625      	mov	r5, r4
 81124c4:	4628      	mov	r0, r5
 81124c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81124c8:	f000 f833 	bl	8112532 <_malloc_usable_size_r>
 81124cc:	42a0      	cmp	r0, r4
 81124ce:	d20f      	bcs.n	81124f0 <_realloc_r+0x48>
 81124d0:	4621      	mov	r1, r4
 81124d2:	4638      	mov	r0, r7
 81124d4:	f7ff fbc6 	bl	8111c64 <_malloc_r>
 81124d8:	4605      	mov	r5, r0
 81124da:	2800      	cmp	r0, #0
 81124dc:	d0f2      	beq.n	81124c4 <_realloc_r+0x1c>
 81124de:	4631      	mov	r1, r6
 81124e0:	4622      	mov	r2, r4
 81124e2:	f7fc fffb 	bl	810f4dc <memcpy>
 81124e6:	4631      	mov	r1, r6
 81124e8:	4638      	mov	r0, r7
 81124ea:	f7ff fb6b 	bl	8111bc4 <_free_r>
 81124ee:	e7e9      	b.n	81124c4 <_realloc_r+0x1c>
 81124f0:	4635      	mov	r5, r6
 81124f2:	e7e7      	b.n	81124c4 <_realloc_r+0x1c>

081124f4 <_read_r>:
 81124f4:	b538      	push	{r3, r4, r5, lr}
 81124f6:	4d07      	ldr	r5, [pc, #28]	; (8112514 <_read_r+0x20>)
 81124f8:	4604      	mov	r4, r0
 81124fa:	4608      	mov	r0, r1
 81124fc:	4611      	mov	r1, r2
 81124fe:	2200      	movs	r2, #0
 8112500:	602a      	str	r2, [r5, #0]
 8112502:	461a      	mov	r2, r3
 8112504:	f7ef fc8a 	bl	8101e1c <_read>
 8112508:	1c43      	adds	r3, r0, #1
 811250a:	d102      	bne.n	8112512 <_read_r+0x1e>
 811250c:	682b      	ldr	r3, [r5, #0]
 811250e:	b103      	cbz	r3, 8112512 <_read_r+0x1e>
 8112510:	6023      	str	r3, [r4, #0]
 8112512:	bd38      	pop	{r3, r4, r5, pc}
 8112514:	1000a384 	.word	0x1000a384

08112518 <__ascii_wctomb>:
 8112518:	b149      	cbz	r1, 811252e <__ascii_wctomb+0x16>
 811251a:	2aff      	cmp	r2, #255	; 0xff
 811251c:	bf85      	ittet	hi
 811251e:	238a      	movhi	r3, #138	; 0x8a
 8112520:	6003      	strhi	r3, [r0, #0]
 8112522:	700a      	strbls	r2, [r1, #0]
 8112524:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8112528:	bf98      	it	ls
 811252a:	2001      	movls	r0, #1
 811252c:	4770      	bx	lr
 811252e:	4608      	mov	r0, r1
 8112530:	4770      	bx	lr

08112532 <_malloc_usable_size_r>:
 8112532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8112536:	1f18      	subs	r0, r3, #4
 8112538:	2b00      	cmp	r3, #0
 811253a:	bfbc      	itt	lt
 811253c:	580b      	ldrlt	r3, [r1, r0]
 811253e:	18c0      	addlt	r0, r0, r3
 8112540:	4770      	bx	lr
	...

08112544 <_init>:
 8112544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112546:	bf00      	nop
 8112548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811254a:	bc08      	pop	{r3}
 811254c:	469e      	mov	lr, r3
 811254e:	4770      	bx	lr

08112550 <_fini>:
 8112550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112552:	bf00      	nop
 8112554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8112556:	bc08      	pop	{r3}
 8112558:	469e      	mov	lr, r3
 811255a:	4770      	bx	lr
