
XploreAvionics_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023f70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004980  08024210  08024210  00034210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08028b90  08028b90  00038b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08028b98  08028b98  00038b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08028ba4  08028ba4  00038ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  24000000  08028bac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000d06c  2400020c  08028db8  0004020c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400d278  08028db8  0004d278  2**0
                  ALLOC
  9 .lwip_sec     000419d0  30000000  08028db8  00050000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0004020c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000c9b70  00000000  00000000  0004023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00012d01  00000000  00000000  00109daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003b68  00000000  00000000  0011cab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00003808  00000000  00000000  00120618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0005dd9f  00000000  00000000  00123e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00068cb8  00000000  00000000  00181bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001ce04c  00000000  00000000  001ea877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  003b88c3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00011c78  00000000  00000000  003b8918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400020c 	.word	0x2400020c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080241f8 	.word	0x080241f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000210 	.word	0x24000210
 80002dc:	080241f8 	.word	0x080241f8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strcmp>:
 8000380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000388:	2a01      	cmp	r2, #1
 800038a:	bf28      	it	cs
 800038c:	429a      	cmpcs	r2, r3
 800038e:	d0f7      	beq.n	8000380 <strcmp>
 8000390:	1ad0      	subs	r0, r2, r3
 8000392:	4770      	bx	lr

08000394 <strlen>:
 8000394:	4603      	mov	r3, r0
 8000396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800039a:	2a00      	cmp	r2, #0
 800039c:	d1fb      	bne.n	8000396 <strlen+0x2>
 800039e:	1a18      	subs	r0, r3, r0
 80003a0:	3801      	subs	r0, #1
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_ldivmod>:
 80003a4:	b97b      	cbnz	r3, 80003c6 <__aeabi_ldivmod+0x22>
 80003a6:	b972      	cbnz	r2, 80003c6 <__aeabi_ldivmod+0x22>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	bfbe      	ittt	lt
 80003ac:	2000      	movlt	r0, #0
 80003ae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003b2:	e006      	blt.n	80003c2 <__aeabi_ldivmod+0x1e>
 80003b4:	bf08      	it	eq
 80003b6:	2800      	cmpeq	r0, #0
 80003b8:	bf1c      	itt	ne
 80003ba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003be:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c2:	f000 b9b9 	b.w	8000738 <__aeabi_idiv0>
 80003c6:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ce:	2900      	cmp	r1, #0
 80003d0:	db09      	blt.n	80003e6 <__aeabi_ldivmod+0x42>
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	db1a      	blt.n	800040c <__aeabi_ldivmod+0x68>
 80003d6:	f000 f84d 	bl	8000474 <__udivmoddi4>
 80003da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003e2:	b004      	add	sp, #16
 80003e4:	4770      	bx	lr
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db1b      	blt.n	8000428 <__aeabi_ldivmod+0x84>
 80003f0:	f000 f840 	bl	8000474 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4240      	negs	r0, r0
 8000400:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000404:	4252      	negs	r2, r2
 8000406:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800040a:	4770      	bx	lr
 800040c:	4252      	negs	r2, r2
 800040e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000412:	f000 f82f 	bl	8000474 <__udivmoddi4>
 8000416:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800041e:	b004      	add	sp, #16
 8000420:	4240      	negs	r0, r0
 8000422:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000426:	4770      	bx	lr
 8000428:	4252      	negs	r2, r2
 800042a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800042e:	f000 f821 	bl	8000474 <__udivmoddi4>
 8000432:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800043a:	b004      	add	sp, #16
 800043c:	4252      	negs	r2, r2
 800043e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000442:	4770      	bx	lr

08000444 <__aeabi_uldivmod>:
 8000444:	b953      	cbnz	r3, 800045c <__aeabi_uldivmod+0x18>
 8000446:	b94a      	cbnz	r2, 800045c <__aeabi_uldivmod+0x18>
 8000448:	2900      	cmp	r1, #0
 800044a:	bf08      	it	eq
 800044c:	2800      	cmpeq	r0, #0
 800044e:	bf1c      	itt	ne
 8000450:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000454:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000458:	f000 b96e 	b.w	8000738 <__aeabi_idiv0>
 800045c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000460:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000464:	f000 f806 	bl	8000474 <__udivmoddi4>
 8000468:	f8dd e004 	ldr.w	lr, [sp, #4]
 800046c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000470:	b004      	add	sp, #16
 8000472:	4770      	bx	lr

08000474 <__udivmoddi4>:
 8000474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000478:	9d08      	ldr	r5, [sp, #32]
 800047a:	4604      	mov	r4, r0
 800047c:	468c      	mov	ip, r1
 800047e:	2b00      	cmp	r3, #0
 8000480:	f040 8083 	bne.w	800058a <__udivmoddi4+0x116>
 8000484:	428a      	cmp	r2, r1
 8000486:	4617      	mov	r7, r2
 8000488:	d947      	bls.n	800051a <__udivmoddi4+0xa6>
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	b142      	cbz	r2, 80004a2 <__udivmoddi4+0x2e>
 8000490:	f1c2 0020 	rsb	r0, r2, #32
 8000494:	fa24 f000 	lsr.w	r0, r4, r0
 8000498:	4091      	lsls	r1, r2
 800049a:	4097      	lsls	r7, r2
 800049c:	ea40 0c01 	orr.w	ip, r0, r1
 80004a0:	4094      	lsls	r4, r2
 80004a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004a6:	0c23      	lsrs	r3, r4, #16
 80004a8:	fbbc f6f8 	udiv	r6, ip, r8
 80004ac:	fa1f fe87 	uxth.w	lr, r7
 80004b0:	fb08 c116 	mls	r1, r8, r6, ip
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f10e 	mul.w	r1, r6, lr
 80004bc:	4299      	cmp	r1, r3
 80004be:	d909      	bls.n	80004d4 <__udivmoddi4+0x60>
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80004c6:	f080 8119 	bcs.w	80006fc <__udivmoddi4+0x288>
 80004ca:	4299      	cmp	r1, r3
 80004cc:	f240 8116 	bls.w	80006fc <__udivmoddi4+0x288>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	443b      	add	r3, r7
 80004d4:	1a5b      	subs	r3, r3, r1
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004dc:	fb08 3310 	mls	r3, r8, r0, r3
 80004e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d909      	bls.n	8000500 <__udivmoddi4+0x8c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f2:	f080 8105 	bcs.w	8000700 <__udivmoddi4+0x28c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f240 8102 	bls.w	8000700 <__udivmoddi4+0x28c>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000504:	eba4 040e 	sub.w	r4, r4, lr
 8000508:	2600      	movs	r6, #0
 800050a:	b11d      	cbz	r5, 8000514 <__udivmoddi4+0xa0>
 800050c:	40d4      	lsrs	r4, r2
 800050e:	2300      	movs	r3, #0
 8000510:	e9c5 4300 	strd	r4, r3, [r5]
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	b902      	cbnz	r2, 800051e <__udivmoddi4+0xaa>
 800051c:	deff      	udf	#255	; 0xff
 800051e:	fab2 f282 	clz	r2, r2
 8000522:	2a00      	cmp	r2, #0
 8000524:	d150      	bne.n	80005c8 <__udivmoddi4+0x154>
 8000526:	1bcb      	subs	r3, r1, r7
 8000528:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800052c:	fa1f f887 	uxth.w	r8, r7
 8000530:	2601      	movs	r6, #1
 8000532:	fbb3 fcfe 	udiv	ip, r3, lr
 8000536:	0c21      	lsrs	r1, r4, #16
 8000538:	fb0e 331c 	mls	r3, lr, ip, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb08 f30c 	mul.w	r3, r8, ip
 8000544:	428b      	cmp	r3, r1
 8000546:	d907      	bls.n	8000558 <__udivmoddi4+0xe4>
 8000548:	1879      	adds	r1, r7, r1
 800054a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800054e:	d202      	bcs.n	8000556 <__udivmoddi4+0xe2>
 8000550:	428b      	cmp	r3, r1
 8000552:	f200 80e9 	bhi.w	8000728 <__udivmoddi4+0x2b4>
 8000556:	4684      	mov	ip, r0
 8000558:	1ac9      	subs	r1, r1, r3
 800055a:	b2a3      	uxth	r3, r4
 800055c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000560:	fb0e 1110 	mls	r1, lr, r0, r1
 8000564:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000568:	fb08 f800 	mul.w	r8, r8, r0
 800056c:	45a0      	cmp	r8, r4
 800056e:	d907      	bls.n	8000580 <__udivmoddi4+0x10c>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000576:	d202      	bcs.n	800057e <__udivmoddi4+0x10a>
 8000578:	45a0      	cmp	r8, r4
 800057a:	f200 80d9 	bhi.w	8000730 <__udivmoddi4+0x2bc>
 800057e:	4618      	mov	r0, r3
 8000580:	eba4 0408 	sub.w	r4, r4, r8
 8000584:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000588:	e7bf      	b.n	800050a <__udivmoddi4+0x96>
 800058a:	428b      	cmp	r3, r1
 800058c:	d909      	bls.n	80005a2 <__udivmoddi4+0x12e>
 800058e:	2d00      	cmp	r5, #0
 8000590:	f000 80b1 	beq.w	80006f6 <__udivmoddi4+0x282>
 8000594:	2600      	movs	r6, #0
 8000596:	e9c5 0100 	strd	r0, r1, [r5]
 800059a:	4630      	mov	r0, r6
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	fab3 f683 	clz	r6, r3
 80005a6:	2e00      	cmp	r6, #0
 80005a8:	d14a      	bne.n	8000640 <__udivmoddi4+0x1cc>
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d302      	bcc.n	80005b4 <__udivmoddi4+0x140>
 80005ae:	4282      	cmp	r2, r0
 80005b0:	f200 80b8 	bhi.w	8000724 <__udivmoddi4+0x2b0>
 80005b4:	1a84      	subs	r4, r0, r2
 80005b6:	eb61 0103 	sbc.w	r1, r1, r3
 80005ba:	2001      	movs	r0, #1
 80005bc:	468c      	mov	ip, r1
 80005be:	2d00      	cmp	r5, #0
 80005c0:	d0a8      	beq.n	8000514 <__udivmoddi4+0xa0>
 80005c2:	e9c5 4c00 	strd	r4, ip, [r5]
 80005c6:	e7a5      	b.n	8000514 <__udivmoddi4+0xa0>
 80005c8:	f1c2 0320 	rsb	r3, r2, #32
 80005cc:	fa20 f603 	lsr.w	r6, r0, r3
 80005d0:	4097      	lsls	r7, r2
 80005d2:	fa01 f002 	lsl.w	r0, r1, r2
 80005d6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005da:	40d9      	lsrs	r1, r3
 80005dc:	4330      	orrs	r0, r6
 80005de:	0c03      	lsrs	r3, r0, #16
 80005e0:	fbb1 f6fe 	udiv	r6, r1, lr
 80005e4:	fa1f f887 	uxth.w	r8, r7
 80005e8:	fb0e 1116 	mls	r1, lr, r6, r1
 80005ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f0:	fb06 f108 	mul.w	r1, r6, r8
 80005f4:	4299      	cmp	r1, r3
 80005f6:	fa04 f402 	lsl.w	r4, r4, r2
 80005fa:	d909      	bls.n	8000610 <__udivmoddi4+0x19c>
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000602:	f080 808d 	bcs.w	8000720 <__udivmoddi4+0x2ac>
 8000606:	4299      	cmp	r1, r3
 8000608:	f240 808a 	bls.w	8000720 <__udivmoddi4+0x2ac>
 800060c:	3e02      	subs	r6, #2
 800060e:	443b      	add	r3, r7
 8000610:	1a5b      	subs	r3, r3, r1
 8000612:	b281      	uxth	r1, r0
 8000614:	fbb3 f0fe 	udiv	r0, r3, lr
 8000618:	fb0e 3310 	mls	r3, lr, r0, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb00 f308 	mul.w	r3, r0, r8
 8000624:	428b      	cmp	r3, r1
 8000626:	d907      	bls.n	8000638 <__udivmoddi4+0x1c4>
 8000628:	1879      	adds	r1, r7, r1
 800062a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800062e:	d273      	bcs.n	8000718 <__udivmoddi4+0x2a4>
 8000630:	428b      	cmp	r3, r1
 8000632:	d971      	bls.n	8000718 <__udivmoddi4+0x2a4>
 8000634:	3802      	subs	r0, #2
 8000636:	4439      	add	r1, r7
 8000638:	1acb      	subs	r3, r1, r3
 800063a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800063e:	e778      	b.n	8000532 <__udivmoddi4+0xbe>
 8000640:	f1c6 0c20 	rsb	ip, r6, #32
 8000644:	fa03 f406 	lsl.w	r4, r3, r6
 8000648:	fa22 f30c 	lsr.w	r3, r2, ip
 800064c:	431c      	orrs	r4, r3
 800064e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000652:	fa01 f306 	lsl.w	r3, r1, r6
 8000656:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800065a:	fa21 f10c 	lsr.w	r1, r1, ip
 800065e:	431f      	orrs	r7, r3
 8000660:	0c3b      	lsrs	r3, r7, #16
 8000662:	fbb1 f9fe 	udiv	r9, r1, lr
 8000666:	fa1f f884 	uxth.w	r8, r4
 800066a:	fb0e 1119 	mls	r1, lr, r9, r1
 800066e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000672:	fb09 fa08 	mul.w	sl, r9, r8
 8000676:	458a      	cmp	sl, r1
 8000678:	fa02 f206 	lsl.w	r2, r2, r6
 800067c:	fa00 f306 	lsl.w	r3, r0, r6
 8000680:	d908      	bls.n	8000694 <__udivmoddi4+0x220>
 8000682:	1861      	adds	r1, r4, r1
 8000684:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000688:	d248      	bcs.n	800071c <__udivmoddi4+0x2a8>
 800068a:	458a      	cmp	sl, r1
 800068c:	d946      	bls.n	800071c <__udivmoddi4+0x2a8>
 800068e:	f1a9 0902 	sub.w	r9, r9, #2
 8000692:	4421      	add	r1, r4
 8000694:	eba1 010a 	sub.w	r1, r1, sl
 8000698:	b2bf      	uxth	r7, r7
 800069a:	fbb1 f0fe 	udiv	r0, r1, lr
 800069e:	fb0e 1110 	mls	r1, lr, r0, r1
 80006a2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80006a6:	fb00 f808 	mul.w	r8, r0, r8
 80006aa:	45b8      	cmp	r8, r7
 80006ac:	d907      	bls.n	80006be <__udivmoddi4+0x24a>
 80006ae:	19e7      	adds	r7, r4, r7
 80006b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80006b4:	d22e      	bcs.n	8000714 <__udivmoddi4+0x2a0>
 80006b6:	45b8      	cmp	r8, r7
 80006b8:	d92c      	bls.n	8000714 <__udivmoddi4+0x2a0>
 80006ba:	3802      	subs	r0, #2
 80006bc:	4427      	add	r7, r4
 80006be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006c2:	eba7 0708 	sub.w	r7, r7, r8
 80006c6:	fba0 8902 	umull	r8, r9, r0, r2
 80006ca:	454f      	cmp	r7, r9
 80006cc:	46c6      	mov	lr, r8
 80006ce:	4649      	mov	r1, r9
 80006d0:	d31a      	bcc.n	8000708 <__udivmoddi4+0x294>
 80006d2:	d017      	beq.n	8000704 <__udivmoddi4+0x290>
 80006d4:	b15d      	cbz	r5, 80006ee <__udivmoddi4+0x27a>
 80006d6:	ebb3 020e 	subs.w	r2, r3, lr
 80006da:	eb67 0701 	sbc.w	r7, r7, r1
 80006de:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006e2:	40f2      	lsrs	r2, r6
 80006e4:	ea4c 0202 	orr.w	r2, ip, r2
 80006e8:	40f7      	lsrs	r7, r6
 80006ea:	e9c5 2700 	strd	r2, r7, [r5]
 80006ee:	2600      	movs	r6, #0
 80006f0:	4631      	mov	r1, r6
 80006f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f6:	462e      	mov	r6, r5
 80006f8:	4628      	mov	r0, r5
 80006fa:	e70b      	b.n	8000514 <__udivmoddi4+0xa0>
 80006fc:	4606      	mov	r6, r0
 80006fe:	e6e9      	b.n	80004d4 <__udivmoddi4+0x60>
 8000700:	4618      	mov	r0, r3
 8000702:	e6fd      	b.n	8000500 <__udivmoddi4+0x8c>
 8000704:	4543      	cmp	r3, r8
 8000706:	d2e5      	bcs.n	80006d4 <__udivmoddi4+0x260>
 8000708:	ebb8 0e02 	subs.w	lr, r8, r2
 800070c:	eb69 0104 	sbc.w	r1, r9, r4
 8000710:	3801      	subs	r0, #1
 8000712:	e7df      	b.n	80006d4 <__udivmoddi4+0x260>
 8000714:	4608      	mov	r0, r1
 8000716:	e7d2      	b.n	80006be <__udivmoddi4+0x24a>
 8000718:	4660      	mov	r0, ip
 800071a:	e78d      	b.n	8000638 <__udivmoddi4+0x1c4>
 800071c:	4681      	mov	r9, r0
 800071e:	e7b9      	b.n	8000694 <__udivmoddi4+0x220>
 8000720:	4666      	mov	r6, ip
 8000722:	e775      	b.n	8000610 <__udivmoddi4+0x19c>
 8000724:	4630      	mov	r0, r6
 8000726:	e74a      	b.n	80005be <__udivmoddi4+0x14a>
 8000728:	f1ac 0c02 	sub.w	ip, ip, #2
 800072c:	4439      	add	r1, r7
 800072e:	e713      	b.n	8000558 <__udivmoddi4+0xe4>
 8000730:	3802      	subs	r0, #2
 8000732:	443c      	add	r4, r7
 8000734:	e724      	b.n	8000580 <__udivmoddi4+0x10c>
 8000736:	bf00      	nop

08000738 <__aeabi_idiv0>:
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop

0800073c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000740:	4b3f      	ldr	r3, [pc, #252]	; (8000840 <SystemInit+0x104>)
 8000742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000746:	4a3e      	ldr	r2, [pc, #248]	; (8000840 <SystemInit+0x104>)
 8000748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000750:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <SystemInit+0x104>)
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	4a3a      	ldr	r2, [pc, #232]	; (8000840 <SystemInit+0x104>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800075c:	4b39      	ldr	r3, [pc, #228]	; (8000844 <SystemInit+0x108>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f003 030f 	and.w	r3, r3, #15
 8000764:	2b06      	cmp	r3, #6
 8000766:	d807      	bhi.n	8000778 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000768:	4b36      	ldr	r3, [pc, #216]	; (8000844 <SystemInit+0x108>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f023 030f 	bic.w	r3, r3, #15
 8000770:	4a34      	ldr	r2, [pc, #208]	; (8000844 <SystemInit+0x108>)
 8000772:	f043 0307 	orr.w	r3, r3, #7
 8000776:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000778:	4b33      	ldr	r3, [pc, #204]	; (8000848 <SystemInit+0x10c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a32      	ldr	r2, [pc, #200]	; (8000848 <SystemInit+0x10c>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000784:	4b30      	ldr	r3, [pc, #192]	; (8000848 <SystemInit+0x10c>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800078a:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <SystemInit+0x10c>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	492e      	ldr	r1, [pc, #184]	; (8000848 <SystemInit+0x10c>)
 8000790:	4b2e      	ldr	r3, [pc, #184]	; (800084c <SystemInit+0x110>)
 8000792:	4013      	ands	r3, r2
 8000794:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000796:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <SystemInit+0x108>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d007      	beq.n	80007b2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <SystemInit+0x108>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f023 030f 	bic.w	r3, r3, #15
 80007aa:	4a26      	ldr	r2, [pc, #152]	; (8000844 <SystemInit+0x108>)
 80007ac:	f043 0307 	orr.w	r3, r3, #7
 80007b0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <SystemInit+0x10c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007b8:	4b23      	ldr	r3, [pc, #140]	; (8000848 <SystemInit+0x10c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <SystemInit+0x10c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <SystemInit+0x10c>)
 80007c6:	4a22      	ldr	r2, [pc, #136]	; (8000850 <SystemInit+0x114>)
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <SystemInit+0x10c>)
 80007cc:	4a21      	ldr	r2, [pc, #132]	; (8000854 <SystemInit+0x118>)
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <SystemInit+0x10c>)
 80007d2:	4a21      	ldr	r2, [pc, #132]	; (8000858 <SystemInit+0x11c>)
 80007d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <SystemInit+0x10c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <SystemInit+0x10c>)
 80007de:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <SystemInit+0x11c>)
 80007e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <SystemInit+0x10c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <SystemInit+0x10c>)
 80007ea:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <SystemInit+0x11c>)
 80007ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <SystemInit+0x10c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <SystemInit+0x10c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a13      	ldr	r2, [pc, #76]	; (8000848 <SystemInit+0x10c>)
 80007fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <SystemInit+0x10c>)
 8000802:	2200      	movs	r2, #0
 8000804:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <SystemInit+0x120>)
 8000808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <SystemInit+0x120>)
 800080c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000810:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <SystemInit+0x124>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <SystemInit+0x128>)
 8000818:	4013      	ands	r3, r2
 800081a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800081e:	d202      	bcs.n	8000826 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <SystemInit+0x12c>)
 8000822:	2201      	movs	r2, #1
 8000824:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <SystemInit+0x130>)
 8000828:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800082c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <SystemInit+0x104>)
 8000830:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000834:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00
 8000844:	52002000 	.word	0x52002000
 8000848:	58024400 	.word	0x58024400
 800084c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000850:	02020200 	.word	0x02020200
 8000854:	01ff0000 	.word	0x01ff0000
 8000858:	01010280 	.word	0x01010280
 800085c:	580000c0 	.word	0x580000c0
 8000860:	5c001000 	.word	0x5c001000
 8000864:	ffff0000 	.word	0xffff0000
 8000868:	51008108 	.word	0x51008108
 800086c:	52004000 	.word	0x52004000

08000870 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_CRC_Init+0x3c>)
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <MX_CRC_Init+0x40>)
 8000878:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_CRC_Init+0x3c>)
 800087c:	2200      	movs	r2, #0
 800087e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_CRC_Init+0x3c>)
 8000882:	2200      	movs	r2, #0
 8000884:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_CRC_Init+0x3c>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_CRC_Init+0x3c>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_CRC_Init+0x3c>)
 8000894:	2201      	movs	r2, #1
 8000896:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_CRC_Init+0x3c>)
 800089a:	f001 fd6f 	bl	800237c <HAL_CRC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008a4:	f000 fc5c 	bl	8001160 <Error_Handler>
  }

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	24009834 	.word	0x24009834
 80008b0:	58024c00 	.word	0x58024c00

080008b4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <HAL_CRC_MspInit+0x3c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d10e      	bne.n	80008e4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_CRC_MspInit+0x40>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <HAL_CRC_MspInit+0x40>)
 80008ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_CRC_MspInit+0x40>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	58024c00 	.word	0x58024c00
 80008f4:	58024400 	.word	0x58024400

080008f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008fe:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <MX_DMA_Init+0xac>)
 8000900:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000904:	4a27      	ldr	r2, [pc, #156]	; (80009a4 <MX_DMA_Init+0xac>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800090e:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <MX_DMA_Init+0xac>)
 8000910:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <MX_DMA_Init+0xac>)
 800091e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000922:	4a20      	ldr	r2, [pc, #128]	; (80009a4 <MX_DMA_Init+0xac>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_DMA_Init+0xac>)
 800092e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2105      	movs	r1, #5
 800093e:	2038      	movs	r0, #56	; 0x38
 8000940:	f001 fc64 	bl	800220c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000944:	2038      	movs	r0, #56	; 0x38
 8000946:	f001 fc7b 	bl	8002240 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2105      	movs	r1, #5
 800094e:	2039      	movs	r0, #57	; 0x39
 8000950:	f001 fc5c 	bl	800220c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000954:	2039      	movs	r0, #57	; 0x39
 8000956:	f001 fc73 	bl	8002240 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2105      	movs	r1, #5
 800095e:	203c      	movs	r0, #60	; 0x3c
 8000960:	f001 fc54 	bl	800220c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000964:	203c      	movs	r0, #60	; 0x3c
 8000966:	f001 fc6b 	bl	8002240 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2105      	movs	r1, #5
 800096e:	2044      	movs	r0, #68	; 0x44
 8000970:	f001 fc4c 	bl	800220c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000974:	2044      	movs	r0, #68	; 0x44
 8000976:	f001 fc63 	bl	8002240 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2105      	movs	r1, #5
 800097e:	2045      	movs	r0, #69	; 0x45
 8000980:	f001 fc44 	bl	800220c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000984:	2045      	movs	r0, #69	; 0x45
 8000986:	f001 fc5b 	bl	8002240 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2105      	movs	r1, #5
 800098e:	2046      	movs	r0, #70	; 0x46
 8000990:	f001 fc3c 	bl	800220c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000994:	2046      	movs	r0, #70	; 0x46
 8000996:	f001 fc53 	bl	8002240 <HAL_NVIC_EnableIRQ>

}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	58024400 	.word	0x58024400

080009a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80009b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <vApplicationGetIdleTaskMemory+0x30>)
 80009be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	24000228 	.word	0x24000228
 80009d8:	2400027c 	.word	0x2400027c

080009dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of watchdog */
  osThreadDef(watchdog, watchdogTask, osPriorityNormal, 0, 512);
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_FREERTOS_Init+0x34>)
 80009e4:	1d3c      	adds	r4, r7, #4
 80009e6:	461d      	mov	r5, r3
 80009e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f00a fdbe 	bl	800b57a <osThreadCreate>
 80009fe:	4603      	mov	r3, r0
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <MX_FREERTOS_Init+0x38>)
 8000a02:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initCortexM7();
 8000a04:	f01f fdf0 	bl	80205e8 <initCortexM7>
  /* USER CODE END RTOS_THREADS */

}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a10:	0802421c 	.word	0x0802421c
 8000a14:	24009858 	.word	0x24009858

08000a18 <watchdogTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_watchdogTask */
void watchdogTask(void const * argument)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  /* USER CODE BEGIN watchdogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f00a fdf6 	bl	800b612 <osDelay>
 8000a26:	e7fb      	b.n	8000a20 <watchdogTask+0x8>

08000a28 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	4a2e      	ldr	r2, [pc, #184]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	4a27      	ldr	r2, [pc, #156]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	4a1f      	ldr	r2, [pc, #124]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8e:	4a18      	ldr	r2, [pc, #96]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aca:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_GPIO_Init+0xc8>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

}
 8000ae2:	bf00      	nop
 8000ae4:	371c      	adds	r7, #28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	58024400 	.word	0x58024400

08000af4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_I2C1_Init+0x78>)
 8000afa:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <MX_I2C1_Init+0x7c>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <MX_I2C1_Init+0x78>)
 8000b00:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <MX_I2C1_Init+0x80>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_I2C1_Init+0x78>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_I2C1_Init+0x78>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_I2C1_Init+0x78>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_I2C1_Init+0x78>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_I2C1_Init+0x78>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_I2C1_Init+0x78>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_I2C1_Init+0x78>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b2e:	480f      	ldr	r0, [pc, #60]	; (8000b6c <MX_I2C1_Init+0x78>)
 8000b30:	f005 fa78 	bl	8006024 <HAL_I2C_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b3a:	f000 fb11 	bl	8001160 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	480a      	ldr	r0, [pc, #40]	; (8000b6c <MX_I2C1_Init+0x78>)
 8000b42:	f005 ff49 	bl	80069d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b4c:	f000 fb08 	bl	8001160 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b50:	2100      	movs	r1, #0
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_I2C1_Init+0x78>)
 8000b54:	f005 ff8b 	bl	8006a6e <HAL_I2CEx_ConfigDigitalFilter>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b5e:	f000 faff 	bl	8001160 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f005 ffd0 	bl	8006b08 <HAL_I2CEx_EnableFastModePlus>

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	240098a8 	.word	0x240098a8
 8000b70:	40005400 	.word	0x40005400
 8000b74:	00401242 	.word	0x00401242

08000b78 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a5f      	ldr	r2, [pc, #380]	; (8000d14 <HAL_I2C_MspInit+0x19c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d12e      	bne.n	8000bf8 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b5f      	ldr	r3, [pc, #380]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	4a5d      	ldr	r2, [pc, #372]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000baa:	4b5b      	ldr	r3, [pc, #364]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
 8000bb6:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bb8:	23c0      	movs	r3, #192	; 0xc0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbc:	2312      	movs	r3, #18
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4852      	ldr	r0, [pc, #328]	; (8000d1c <HAL_I2C_MspInit+0x1a4>)
 8000bd4:	f005 f810 	bl	8005bf8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd8:	4b4f      	ldr	r3, [pc, #316]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000bda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bde:	4a4e      	ldr	r2, [pc, #312]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000be4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000be8:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000bf6:	e088      	b.n	8000d0a <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a48      	ldr	r2, [pc, #288]	; (8000d20 <HAL_I2C_MspInit+0x1a8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12f      	bne.n	8000c62 <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b45      	ldr	r3, [pc, #276]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	4a43      	ldr	r2, [pc, #268]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c12:	4b41      	ldr	r3, [pc, #260]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c26:	2312      	movs	r3, #18
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c32:	2304      	movs	r3, #4
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4837      	ldr	r0, [pc, #220]	; (8000d1c <HAL_I2C_MspInit+0x1a4>)
 8000c3e:	f004 ffdb 	bl	8005bf8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c42:	4b35      	ldr	r3, [pc, #212]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c48:	4a33      	ldr	r2, [pc, #204]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000c4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c52:	4b31      	ldr	r3, [pc, #196]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
}
 8000c60:	e053      	b.n	8000d0a <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a2f      	ldr	r2, [pc, #188]	; (8000d24 <HAL_I2C_MspInit+0x1ac>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d14e      	bne.n	8000d0a <HAL_I2C_MspInit+0x192>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	4a29      	ldr	r2, [pc, #164]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cae:	2312      	movs	r3, #18
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4818      	ldr	r0, [pc, #96]	; (8000d28 <HAL_I2C_MspInit+0x1b0>)
 8000cc6:	f004 ff97 	bl	8005bf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd0:	2312      	movs	r3, #18
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4811      	ldr	r0, [pc, #68]	; (8000d2c <HAL_I2C_MspInit+0x1b4>)
 8000ce8:	f004 ff86 	bl	8005bf8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000cf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cf8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_I2C_MspInit+0x1a0>)
 8000cfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
}
 8000d0a:	bf00      	nop
 8000d0c:	3738      	adds	r7, #56	; 0x38
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40005400 	.word	0x40005400
 8000d18:	58024400 	.word	0x58024400
 8000d1c:	58020400 	.word	0x58020400
 8000d20:	40005800 	.word	0x40005800
 8000d24:	40005c00 	.word	0x40005c00
 8000d28:	58020800 	.word	0x58020800
 8000d2c:	58020000 	.word	0x58020000

08000d30 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0

  hiwdg1.Instance = IWDG1;
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_IWDG1_Init+0x34>)
 8000d36:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <MX_IWDG1_Init+0x38>)
 8000d38:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_IWDG1_Init+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_IWDG1_Init+0x34>)
 8000d42:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d46:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 4095;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_IWDG1_Init+0x34>)
 8000d4a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d4e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_IWDG1_Init+0x34>)
 8000d52:	f005 fefd 	bl	8006b50 <HAL_IWDG_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8000d5c:	f000 fa00 	bl	8001160 <Error_Handler>
  }

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	24009940 	.word	0x24009940
 8000d68:	58004800 	.word	0x58004800

08000d6c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d70:	f3bf 8f4f 	dsb	sy
}
 8000d74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d76:	f3bf 8f6f 	isb	sy
}
 8000d7a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <SCB_EnableICache+0x48>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d84:	f3bf 8f4f 	dsb	sy
}
 8000d88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d8a:	f3bf 8f6f 	isb	sy
}
 8000d8e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <SCB_EnableICache+0x48>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <SCB_EnableICache+0x48>)
 8000d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d9c:	f3bf 8f4f 	dsb	sy
}
 8000da0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000da2:	f3bf 8f6f 	isb	sy
}
 8000da6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <SCB_EnableDCache+0x84>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc6:	f3bf 8f4f 	dsb	sy
}
 8000dca:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <SCB_EnableDCache+0x84>)
 8000dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dd2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	0b5b      	lsrs	r3, r3, #13
 8000dd8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ddc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	08db      	lsrs	r3, r3, #3
 8000de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000de6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	015a      	lsls	r2, r3, #5
 8000dec:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000df0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000df6:	4911      	ldr	r1, [pc, #68]	; (8000e3c <SCB_EnableDCache+0x84>)
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1e5a      	subs	r2, r3, #1
 8000e02:	60ba      	str	r2, [r7, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1ef      	bne.n	8000de8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	1e5a      	subs	r2, r3, #1
 8000e0c:	60fa      	str	r2, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1e5      	bne.n	8000dde <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e12:	f3bf 8f4f 	dsb	sy
}
 8000e16:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <SCB_EnableDCache+0x84>)
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <SCB_EnableDCache+0x84>)
 8000e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e22:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e24:	f3bf 8f4f 	dsb	sy
}
 8000e28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e2a:	f3bf 8f6f 	isb	sy
}
 8000e2e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e46:	f000 f931 	bl	80010ac <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000e4a:	f7ff ff8f 	bl	8000d6c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000e4e:	f7ff ffb3 	bl	8000db8 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e56:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e58:	bf00      	nop
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <main+0xc4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d004      	beq.n	8000e70 <main+0x30>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	1e5a      	subs	r2, r3, #1
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	dcf4      	bgt.n	8000e5a <main+0x1a>
  if ( timeout < 0 )
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	da01      	bge.n	8000e7a <main+0x3a>
  {
  Error_Handler();
 8000e76:	f000 f973 	bl	8001160 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7a:	f001 f893 	bl	8001fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7e:	f000 f843 	bl	8000f08 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <main+0xc4>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <main+0xc4>)
 8000e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <main+0xc4>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f005 f87b 	bl	8005f9c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f005 f8a7 	bl	8005ffc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eb2:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000eb4:	bf00      	nop
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <main+0xc4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d104      	bne.n	8000ecc <main+0x8c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	1e5a      	subs	r2, r3, #1
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	dcf4      	bgt.n	8000eb6 <main+0x76>
if ( timeout < 0 )
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da01      	bge.n	8000ed6 <main+0x96>
{
Error_Handler();
 8000ed2:	f000 f945 	bl	8001160 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f7ff fda7 	bl	8000a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eda:	f7ff fd0d 	bl	80008f8 <MX_DMA_Init>
  MX_CRC_Init();
 8000ede:	f7ff fcc7 	bl	8000870 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000ee2:	f000 fb3f 	bl	8001564 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ee6:	f000 fb89 	bl	80015fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000eea:	f000 fbd3 	bl	8001694 <MX_USART3_UART_Init>
  MX_IWDG1_Init();
 8000eee:	f7ff ff1f 	bl	8000d30 <MX_IWDG1_Init>
  MX_USART6_UART_Init();
 8000ef2:	f000 fc1b 	bl	800172c <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000ef6:	f000 f939 	bl	800116c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000efa:	f7ff fd6f 	bl	80009dc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000efe:	f00a fb25 	bl	800b54c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <main+0xc2>
 8000f04:	58024400 	.word	0x58024400

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0cc      	sub	sp, #304	; 0x130
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f12:	224c      	movs	r2, #76	; 0x4c
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f020 fab6 	bl	8021488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f20:	2220      	movs	r2, #32
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f020 faaf 	bl	8021488 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4618      	mov	r0, r3
 8000f30:	23bc      	movs	r3, #188	; 0xbc
 8000f32:	461a      	mov	r2, r3
 8000f34:	2100      	movs	r1, #0
 8000f36:	f020 faa7 	bl	8021488 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f3a:	2004      	movs	r0, #4
 8000f3c:	f005 fe5e 	bl	8006bfc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	4b56      	ldr	r3, [pc, #344]	; (80010a0 <SystemClock_Config+0x198>)
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4a:	4a55      	ldr	r2, [pc, #340]	; (80010a0 <SystemClock_Config+0x198>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f52:	4b53      	ldr	r3, [pc, #332]	; (80010a0 <SystemClock_Config+0x198>)
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	f003 0201 	and.w	r2, r3, #1
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	4b51      	ldr	r3, [pc, #324]	; (80010a4 <SystemClock_Config+0x19c>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4a50      	ldr	r2, [pc, #320]	; (80010a4 <SystemClock_Config+0x19c>)
 8000f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	4b4e      	ldr	r3, [pc, #312]	; (80010a4 <SystemClock_Config+0x19c>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f7a:	bf00      	nop
 8000f7c:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <SystemClock_Config+0x19c>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f88:	d1f8      	bne.n	8000f7c <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000f8a:	230b      	movs	r3, #11
 8000f8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f90:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9e:	2340      	movs	r3, #64	; 0x40
 8000fa0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000fbc:	2340      	movs	r3, #64	; 0x40
 8000fbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 fe60 	bl	8006cb0 <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000ff6:	f000 f8b3 	bl	8001160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffa:	233f      	movs	r3, #63	; 0x3f
 8000ffc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2303      	movs	r3, #3
 8001002:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800100c:	2308      	movs	r3, #8
 800100e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001012:	2340      	movs	r3, #64	; 0x40
 8001014:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001018:	2340      	movs	r3, #64	; 0x40
 800101a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800101e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001026:	2340      	movs	r3, #64	; 0x40
 8001028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800102c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001030:	2102      	movs	r1, #2
 8001032:	4618      	mov	r0, r3
 8001034:	f006 fa4c 	bl	80074d0 <HAL_RCC_ClockConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 800103e:	f000 f88f 	bl	8001160 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <SystemClock_Config+0x1a0>)
 8001048:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	2200      	movs	r2, #0
 8001050:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	2200      	movs	r2, #0
 8001058:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	2203      	movs	r2, #3
 8001060:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	2218      	movs	r2, #24
 8001068:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	2200      	movs	r2, #0
 8001070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	4618      	mov	r0, r3
 8001086:	f006 fdf1 	bl	8007c6c <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x18c>
  {
    Error_Handler();
 8001090:	f000 f866 	bl	8001160 <Error_Handler>
  }
}
 8001094:	bf00      	nop
 8001096:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	58000400 	.word	0x58000400
 80010a4:	58024800 	.word	0x58024800
 80010a8:	0040300b 	.word	0x0040300b

080010ac <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010b2:	463b      	mov	r3, r7
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010be:	f001 f8cd 	bl	800225c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010c2:	2301      	movs	r3, #1
 80010c4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MPU_Config+0x8c>)
 80010cc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80010ce:	230e      	movs	r3, #14
 80010d0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010da:	2303      	movs	r3, #3
 80010dc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010de:	2301      	movs	r3, #1
 80010e0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010ee:	463b      	mov	r3, r7
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 f8eb 	bl	80022cc <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80010fa:	2301      	movs	r3, #1
 80010fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MPU_Config+0x8c>)
 8001100:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001102:	2307      	movs	r3, #7
 8001104:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001106:	2300      	movs	r3, #0
 8001108:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800110a:	2300      	movs	r3, #0
 800110c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800110e:	2303      	movs	r3, #3
 8001110:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001112:	2301      	movs	r3, #1
 8001114:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001116:	2301      	movs	r3, #1
 8001118:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800111e:	2301      	movs	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001122:	463b      	mov	r3, r7
 8001124:	4618      	mov	r0, r3
 8001126:	f001 f8d1 	bl	80022cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800112a:	2004      	movs	r0, #4
 800112c:	f001 f8ae 	bl	800228c <HAL_MPU_Enable>

}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	30040000 	.word	0x30040000

0800113c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800114e:	f000 ff65 	bl	800201c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40001400 	.word	0x40001400

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_RTC_Init+0x48>)
 8001172:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <MX_RTC_Init+0x4c>)
 8001174:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_RTC_Init+0x48>)
 8001178:	2200      	movs	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <MX_RTC_Init+0x48>)
 800117e:	227f      	movs	r2, #127	; 0x7f
 8001180:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_RTC_Init+0x48>)
 8001184:	22ff      	movs	r2, #255	; 0xff
 8001186:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <MX_RTC_Init+0x48>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_RTC_Init+0x48>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <MX_RTC_Init+0x48>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_RTC_Init+0x48>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	; (80011b4 <MX_RTC_Init+0x48>)
 80011a2:	f008 f8b5 	bl	8009310 <HAL_RTC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80011ac:	f7ff ffd8 	bl	8001160 <Error_Handler>
  }

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	24009950 	.word	0x24009950
 80011b8:	58004000 	.word	0x58004000

080011bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_RTC_MspInit+0x2c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d105      	bne.n	80011da <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_RTC_MspInit+0x30>)
 80011d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d2:	4a06      	ldr	r2, [pc, #24]	; (80011ec <HAL_RTC_MspInit+0x30>)
 80011d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	58004000 	.word	0x58004000
 80011ec:	58024400 	.word	0x58024400

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <HAL_MspInit+0x38>)
 80011f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_MspInit+0x38>)
 80011fe:	f043 0302 	orr.w	r3, r3, #2
 8001202:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_MspInit+0x38>)
 8001208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	210f      	movs	r1, #15
 8001218:	f06f 0001 	mvn.w	r0, #1
 800121c:	f000 fff6 	bl	800220c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58024400 	.word	0x58024400

0800122c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b090      	sub	sp, #64	; 0x40
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	d827      	bhi.n	800128a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 800123a:	2200      	movs	r2, #0
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	2037      	movs	r0, #55	; 0x37
 8001240:	f000 ffe4 	bl	800220c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001244:	2037      	movs	r0, #55	; 0x37
 8001246:	f000 fffb 	bl	8002240 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800124a:	4a29      	ldr	r2, [pc, #164]	; (80012f0 <HAL_InitTick+0xc4>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <HAL_InitTick+0xc8>)
 8001252:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001256:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <HAL_InitTick+0xc8>)
 8001258:	f043 0320 	orr.w	r3, r3, #32
 800125c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <HAL_InitTick+0xc8>)
 8001262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001266:	f003 0320 	and.w	r3, r3, #32
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800126e:	f107 0210 	add.w	r2, r7, #16
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f006 fcb5 	bl	8007be8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800127e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001284:	2b00      	cmp	r3, #0
 8001286:	d106      	bne.n	8001296 <HAL_InitTick+0x6a>
 8001288:	e001      	b.n	800128e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e02b      	b.n	80012e6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800128e:	f006 fc7f 	bl	8007b90 <HAL_RCC_GetPCLK1Freq>
 8001292:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001294:	e004      	b.n	80012a0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001296:	f006 fc7b 	bl	8007b90 <HAL_RCC_GetPCLK1Freq>
 800129a:	4603      	mov	r3, r0
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012a2:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <HAL_InitTick+0xcc>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	0c9b      	lsrs	r3, r3, #18
 80012aa:	3b01      	subs	r3, #1
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_InitTick+0xd0>)
 80012b0:	4a13      	ldr	r2, [pc, #76]	; (8001300 <HAL_InitTick+0xd4>)
 80012b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_InitTick+0xd0>)
 80012b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ba:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80012bc:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <HAL_InitTick+0xd0>)
 80012be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_InitTick+0xd0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_InitTick+0xd0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <HAL_InitTick+0xd0>)
 80012d0:	f008 f92a 	bl	8009528 <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d104      	bne.n	80012e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80012da:	4808      	ldr	r0, [pc, #32]	; (80012fc <HAL_InitTick+0xd0>)
 80012dc:	f008 f986 	bl	80095ec <HAL_TIM_Base_Start_IT>
 80012e0:	4603      	mov	r3, r0
 80012e2:	e000      	b.n	80012e6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3740      	adds	r7, #64	; 0x40
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	24000008 	.word	0x24000008
 80012f4:	58024400 	.word	0x58024400
 80012f8:	431bde83 	.word	0x431bde83
 80012fc:	24009974 	.word	0x24009974
 8001300:	40001400 	.word	0x40001400

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <NMI_Handler+0x4>

0800130a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <HardFault_Handler+0x4>

08001310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <MemManage_Handler+0x4>

08001316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <UsageFault_Handler+0x4>

08001322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <TIM7_IRQHandler+0x10>)
 8001336:	f008 f98f 	bl	8009658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	24009974 	.word	0x24009974

08001344 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <DMA2_Stream0_IRQHandler+0x10>)
 800134a:	f001 fc5d 	bl	8002c08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	24009d1c 	.word	0x24009d1c

08001358 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <DMA2_Stream1_IRQHandler+0x10>)
 800135e:	f001 fc53 	bl	8002c08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	24009c2c 	.word	0x24009c2c

0800136c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <DMA2_Stream4_IRQHandler+0x10>)
 8001372:	f001 fc49 	bl	8002c08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	240099c0 	.word	0x240099c0

08001380 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <ETH_IRQHandler+0x10>)
 8001386:	f003 fa7f 	bl	8004888 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2400a0a0 	.word	0x2400a0a0

08001394 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <DMA2_Stream5_IRQHandler+0x10>)
 800139a:	f001 fc35 	bl	8002c08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	24009d94 	.word	0x24009d94

080013a8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <DMA2_Stream6_IRQHandler+0x10>)
 80013ae:	f001 fc2b 	bl	8002c08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	24009a38 	.word	0x24009a38

080013bc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <DMA2_Stream7_IRQHandler+0x10>)
 80013c2:	f001 fc21 	bl	8002c08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	24009ca4 	.word	0x24009ca4

080013d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	return 1;
 80013d4:	2301      	movs	r3, #1
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_kill>:

int _kill(int pid, int sig)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <_kill+0x20>)
 80013ec:	2216      	movs	r2, #22
 80013ee:	601a      	str	r2, [r3, #0]
	return -1;
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	2400d240 	.word	0x2400d240

08001404 <_exit>:

void _exit (int status)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800140c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ffe5 	bl	80013e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001416:	e7fe      	b.n	8001416 <_exit+0x12>

08001418 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	e00a      	b.n	8001440 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800142a:	f3af 8000 	nop.w
 800142e:	4601      	mov	r1, r0
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	60ba      	str	r2, [r7, #8]
 8001436:	b2ca      	uxtb	r2, r1
 8001438:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3301      	adds	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	dbf0      	blt.n	800142a <_read+0x12>
	}

return len;
 8001448:	687b      	ldr	r3, [r7, #4]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	e009      	b.n	8001478 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	60ba      	str	r2, [r7, #8]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbf1      	blt.n	8001464 <_write+0x12>
	}
	return len;
 8001480:	687b      	ldr	r3, [r7, #4]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_close>:

int _close(int file)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
	return -1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b2:	605a      	str	r2, [r3, #4]
	return 0;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <_isatty>:

int _isatty(int file)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
	return 1;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
	return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d205      	bcs.n	8001530 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <_sbrk+0x6c>)
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152e:	e009      	b.n	8001544 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a06      	ldr	r2, [pc, #24]	; (8001558 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	371c      	adds	r7, #28
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	24080000 	.word	0x24080000
 8001554:	00000400 	.word	0x00000400
 8001558:	24000a7c 	.word	0x24000a7c
 800155c:	2400d278 	.word	0x2400d278
 8001560:	2400d240 	.word	0x2400d240

08001564 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001568:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 800156a:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <MX_USART1_UART_Init+0x94>)
 800156c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 8001570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001574:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ac:	4811      	ldr	r0, [pc, #68]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 80015ae:	f008 fa53 	bl	8009a58 <HAL_UART_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015b8:	f7ff fdd2 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015bc:	2100      	movs	r1, #0
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 80015c0:	f009 fa39 	bl	800aa36 <HAL_UARTEx_SetTxFifoThreshold>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015ca:	f7ff fdc9 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	4808      	ldr	r0, [pc, #32]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 80015d2:	f009 fa6e 	bl	800aab2 <HAL_UARTEx_SetRxFifoThreshold>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015dc:	f7ff fdc0 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_USART1_UART_Init+0x90>)
 80015e2:	f009 f9ef 	bl	800a9c4 <HAL_UARTEx_DisableFifoMode>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015ec:	f7ff fdb8 	bl	8001160 <Error_Handler>
  }

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	24009e0c 	.word	0x24009e0c
 80015f8:	40011000 	.word	0x40011000

080015fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <MX_USART2_UART_Init+0x90>)
 8001602:	4a23      	ldr	r2, [pc, #140]	; (8001690 <MX_USART2_UART_Init+0x94>)
 8001604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <MX_USART2_UART_Init+0x90>)
 8001608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800160c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <MX_USART2_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <MX_USART2_UART_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <MX_USART2_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <MX_USART2_UART_Init+0x90>)
 8001622:	220c      	movs	r2, #12
 8001624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <MX_USART2_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <MX_USART2_UART_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <MX_USART2_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <MX_USART2_UART_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <MX_USART2_UART_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001644:	4811      	ldr	r0, [pc, #68]	; (800168c <MX_USART2_UART_Init+0x90>)
 8001646:	f008 fa07 	bl	8009a58 <HAL_UART_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001650:	f7ff fd86 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	480d      	ldr	r0, [pc, #52]	; (800168c <MX_USART2_UART_Init+0x90>)
 8001658:	f009 f9ed 	bl	800aa36 <HAL_UARTEx_SetTxFifoThreshold>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001662:	f7ff fd7d 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	4808      	ldr	r0, [pc, #32]	; (800168c <MX_USART2_UART_Init+0x90>)
 800166a:	f009 fa22 	bl	800aab2 <HAL_UARTEx_SetRxFifoThreshold>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001674:	f7ff fd74 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_USART2_UART_Init+0x90>)
 800167a:	f009 f9a3 	bl	800a9c4 <HAL_UARTEx_DisableFifoMode>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001684:	f7ff fd6c 	bl	8001160 <Error_Handler>
  }

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	24009f24 	.word	0x24009f24
 8001690:	40004400 	.word	0x40004400

08001694 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <MX_USART3_UART_Init+0x90>)
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <MX_USART3_UART_Init+0x94>)
 800169c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MX_USART3_UART_Init+0x90>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <MX_USART3_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <MX_USART3_UART_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_USART3_UART_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_USART3_UART_Init+0x90>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <MX_USART3_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <MX_USART3_UART_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_USART3_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_USART3_UART_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <MX_USART3_UART_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016dc:	4811      	ldr	r0, [pc, #68]	; (8001724 <MX_USART3_UART_Init+0x90>)
 80016de:	f008 f9bb 	bl	8009a58 <HAL_UART_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016e8:	f7ff fd3a 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ec:	2100      	movs	r1, #0
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <MX_USART3_UART_Init+0x90>)
 80016f0:	f009 f9a1 	bl	800aa36 <HAL_UARTEx_SetTxFifoThreshold>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016fa:	f7ff fd31 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fe:	2100      	movs	r1, #0
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <MX_USART3_UART_Init+0x90>)
 8001702:	f009 f9d6 	bl	800aab2 <HAL_UARTEx_SetRxFifoThreshold>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800170c:	f7ff fd28 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <MX_USART3_UART_Init+0x90>)
 8001712:	f009 f957 	bl	800a9c4 <HAL_UARTEx_DisableFifoMode>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800171c:	f7ff fd20 	bl	8001160 <Error_Handler>
  }

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	24009b28 	.word	0x24009b28
 8001728:	40004800 	.word	0x40004800

0800172c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <MX_USART6_UART_Init+0x90>)
 8001732:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <MX_USART6_UART_Init+0x94>)
 8001734:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MX_USART6_UART_Init+0x90>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <MX_USART6_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_USART6_UART_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_USART6_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_USART6_UART_Init+0x90>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_USART6_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_USART6_UART_Init+0x90>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_USART6_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_USART6_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <MX_USART6_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001774:	4811      	ldr	r0, [pc, #68]	; (80017bc <MX_USART6_UART_Init+0x90>)
 8001776:	f008 f96f 	bl	8009a58 <HAL_UART_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001780:	f7ff fcee 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001784:	2100      	movs	r1, #0
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <MX_USART6_UART_Init+0x90>)
 8001788:	f009 f955 	bl	800aa36 <HAL_UARTEx_SetTxFifoThreshold>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001792:	f7ff fce5 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001796:	2100      	movs	r1, #0
 8001798:	4808      	ldr	r0, [pc, #32]	; (80017bc <MX_USART6_UART_Init+0x90>)
 800179a:	f009 f98a 	bl	800aab2 <HAL_UARTEx_SetRxFifoThreshold>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80017a4:	f7ff fcdc 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_USART6_UART_Init+0x90>)
 80017aa:	f009 f90b 	bl	800a9c4 <HAL_UARTEx_DisableFifoMode>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80017b4:	f7ff fcd4 	bl	8001160 <Error_Handler>
  }

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	24009e98 	.word	0x24009e98
 80017c0:	40011400 	.word	0x40011400

080017c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08e      	sub	sp, #56	; 0x38
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a90      	ldr	r2, [pc, #576]	; (8001a24 <HAL_UART_MspInit+0x260>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	f040 808c 	bne.w	8001900 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e8:	4b8f      	ldr	r3, [pc, #572]	; (8001a28 <HAL_UART_MspInit+0x264>)
 80017ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017ee:	4a8e      	ldr	r2, [pc, #568]	; (8001a28 <HAL_UART_MspInit+0x264>)
 80017f0:	f043 0310 	orr.w	r3, r3, #16
 80017f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017f8:	4b8b      	ldr	r3, [pc, #556]	; (8001a28 <HAL_UART_MspInit+0x264>)
 80017fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	623b      	str	r3, [r7, #32]
 8001804:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b88      	ldr	r3, [pc, #544]	; (8001a28 <HAL_UART_MspInit+0x264>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	4a86      	ldr	r2, [pc, #536]	; (8001a28 <HAL_UART_MspInit+0x264>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001816:	4b84      	ldr	r3, [pc, #528]	; (8001a28 <HAL_UART_MspInit+0x264>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001824:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001836:	2307      	movs	r3, #7
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183e:	4619      	mov	r1, r3
 8001840:	487a      	ldr	r0, [pc, #488]	; (8001a2c <HAL_UART_MspInit+0x268>)
 8001842:	f004 f9d9 	bl	8005bf8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8001846:	4b7a      	ldr	r3, [pc, #488]	; (8001a30 <HAL_UART_MspInit+0x26c>)
 8001848:	4a7a      	ldr	r2, [pc, #488]	; (8001a34 <HAL_UART_MspInit+0x270>)
 800184a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800184c:	4b78      	ldr	r3, [pc, #480]	; (8001a30 <HAL_UART_MspInit+0x26c>)
 800184e:	2229      	movs	r2, #41	; 0x29
 8001850:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001852:	4b77      	ldr	r3, [pc, #476]	; (8001a30 <HAL_UART_MspInit+0x26c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001858:	4b75      	ldr	r3, [pc, #468]	; (8001a30 <HAL_UART_MspInit+0x26c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800185e:	4b74      	ldr	r3, [pc, #464]	; (8001a30 <HAL_UART_MspInit+0x26c>)
 8001860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001864:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001866:	4b72      	ldr	r3, [pc, #456]	; (8001a30 <HAL_UART_MspInit+0x26c>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800186c:	4b70      	ldr	r3, [pc, #448]	; (8001a30 <HAL_UART_MspInit+0x26c>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001872:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <HAL_UART_MspInit+0x26c>)
 8001874:	2200      	movs	r2, #0
 8001876:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001878:	4b6d      	ldr	r3, [pc, #436]	; (8001a30 <HAL_UART_MspInit+0x26c>)
 800187a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800187e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001880:	4b6b      	ldr	r3, [pc, #428]	; (8001a30 <HAL_UART_MspInit+0x26c>)
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001886:	486a      	ldr	r0, [pc, #424]	; (8001a30 <HAL_UART_MspInit+0x26c>)
 8001888:	f000 fe62 	bl	8002550 <HAL_DMA_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8001892:	f7ff fc65 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a65      	ldr	r2, [pc, #404]	; (8001a30 <HAL_UART_MspInit+0x26c>)
 800189a:	679a      	str	r2, [r3, #120]	; 0x78
 800189c:	4a64      	ldr	r2, [pc, #400]	; (8001a30 <HAL_UART_MspInit+0x26c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream1;
 80018a2:	4b65      	ldr	r3, [pc, #404]	; (8001a38 <HAL_UART_MspInit+0x274>)
 80018a4:	4a65      	ldr	r2, [pc, #404]	; (8001a3c <HAL_UART_MspInit+0x278>)
 80018a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80018a8:	4b63      	ldr	r3, [pc, #396]	; (8001a38 <HAL_UART_MspInit+0x274>)
 80018aa:	222a      	movs	r2, #42	; 0x2a
 80018ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ae:	4b62      	ldr	r3, [pc, #392]	; (8001a38 <HAL_UART_MspInit+0x274>)
 80018b0:	2240      	movs	r2, #64	; 0x40
 80018b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b4:	4b60      	ldr	r3, [pc, #384]	; (8001a38 <HAL_UART_MspInit+0x274>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ba:	4b5f      	ldr	r3, [pc, #380]	; (8001a38 <HAL_UART_MspInit+0x274>)
 80018bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c2:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <HAL_UART_MspInit+0x274>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018c8:	4b5b      	ldr	r3, [pc, #364]	; (8001a38 <HAL_UART_MspInit+0x274>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80018ce:	4b5a      	ldr	r3, [pc, #360]	; (8001a38 <HAL_UART_MspInit+0x274>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018d4:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <HAL_UART_MspInit+0x274>)
 80018d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018da:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018dc:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <HAL_UART_MspInit+0x274>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80018e2:	4855      	ldr	r0, [pc, #340]	; (8001a38 <HAL_UART_MspInit+0x274>)
 80018e4:	f000 fe34 	bl	8002550 <HAL_DMA_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80018ee:	f7ff fc37 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a50      	ldr	r2, [pc, #320]	; (8001a38 <HAL_UART_MspInit+0x274>)
 80018f6:	675a      	str	r2, [r3, #116]	; 0x74
 80018f8:	4a4f      	ldr	r2, [pc, #316]	; (8001a38 <HAL_UART_MspInit+0x274>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80018fe:	e1aa      	b.n	8001c56 <HAL_UART_MspInit+0x492>
  else if(uartHandle->Instance==USART2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a4e      	ldr	r2, [pc, #312]	; (8001a40 <HAL_UART_MspInit+0x27c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	f040 80a6 	bne.w	8001a58 <HAL_UART_MspInit+0x294>
    __HAL_RCC_USART2_CLK_ENABLE();
 800190c:	4b46      	ldr	r3, [pc, #280]	; (8001a28 <HAL_UART_MspInit+0x264>)
 800190e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001912:	4a45      	ldr	r2, [pc, #276]	; (8001a28 <HAL_UART_MspInit+0x264>)
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800191c:	4b42      	ldr	r3, [pc, #264]	; (8001a28 <HAL_UART_MspInit+0x264>)
 800191e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800192a:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <HAL_UART_MspInit+0x264>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001930:	4a3d      	ldr	r2, [pc, #244]	; (8001a28 <HAL_UART_MspInit+0x264>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800193a:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <HAL_UART_MspInit+0x264>)
 800193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001948:	2360      	movs	r3, #96	; 0x60
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001958:	2307      	movs	r3, #7
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800195c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001960:	4619      	mov	r1, r3
 8001962:	4838      	ldr	r0, [pc, #224]	; (8001a44 <HAL_UART_MspInit+0x280>)
 8001964:	f004 f948 	bl	8005bf8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Stream4;
 8001968:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_UART_MspInit+0x284>)
 800196a:	4a38      	ldr	r2, [pc, #224]	; (8001a4c <HAL_UART_MspInit+0x288>)
 800196c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800196e:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_UART_MspInit+0x284>)
 8001970:	222b      	movs	r2, #43	; 0x2b
 8001972:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001974:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <HAL_UART_MspInit+0x284>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800197a:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_UART_MspInit+0x284>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001980:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <HAL_UART_MspInit+0x284>)
 8001982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001986:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_UART_MspInit+0x284>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800198e:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_UART_MspInit+0x284>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_UART_MspInit+0x284>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_UART_MspInit+0x284>)
 800199c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019a0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_UART_MspInit+0x284>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019a8:	4827      	ldr	r0, [pc, #156]	; (8001a48 <HAL_UART_MspInit+0x284>)
 80019aa:	f000 fdd1 	bl	8002550 <HAL_DMA_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 80019b4:	f7ff fbd4 	bl	8001160 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <HAL_UART_MspInit+0x284>)
 80019bc:	679a      	str	r2, [r3, #120]	; 0x78
 80019be:	4a22      	ldr	r2, [pc, #136]	; (8001a48 <HAL_UART_MspInit+0x284>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream5;
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_UART_MspInit+0x28c>)
 80019c6:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <HAL_UART_MspInit+0x290>)
 80019c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <HAL_UART_MspInit+0x28c>)
 80019cc:	222c      	movs	r2, #44	; 0x2c
 80019ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <HAL_UART_MspInit+0x28c>)
 80019d2:	2240      	movs	r2, #64	; 0x40
 80019d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <HAL_UART_MspInit+0x28c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019dc:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <HAL_UART_MspInit+0x28c>)
 80019de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <HAL_UART_MspInit+0x28c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ea:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_UART_MspInit+0x28c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_UART_MspInit+0x28c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_UART_MspInit+0x28c>)
 80019f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019fc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_UART_MspInit+0x28c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a04:	4812      	ldr	r0, [pc, #72]	; (8001a50 <HAL_UART_MspInit+0x28c>)
 8001a06:	f000 fda3 	bl	8002550 <HAL_DMA_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_UART_MspInit+0x250>
      Error_Handler();
 8001a10:	f7ff fba6 	bl	8001160 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_UART_MspInit+0x28c>)
 8001a18:	675a      	str	r2, [r3, #116]	; 0x74
 8001a1a:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <HAL_UART_MspInit+0x28c>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a20:	e119      	b.n	8001c56 <HAL_UART_MspInit+0x492>
 8001a22:	bf00      	nop
 8001a24:	40011000 	.word	0x40011000
 8001a28:	58024400 	.word	0x58024400
 8001a2c:	58020000 	.word	0x58020000
 8001a30:	24009d1c 	.word	0x24009d1c
 8001a34:	40020410 	.word	0x40020410
 8001a38:	24009c2c 	.word	0x24009c2c
 8001a3c:	40020428 	.word	0x40020428
 8001a40:	40004400 	.word	0x40004400
 8001a44:	58020c00 	.word	0x58020c00
 8001a48:	240099c0 	.word	0x240099c0
 8001a4c:	40020470 	.word	0x40020470
 8001a50:	24009d94 	.word	0x24009d94
 8001a54:	40020488 	.word	0x40020488
  else if(uartHandle->Instance==USART3)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a80      	ldr	r2, [pc, #512]	; (8001c60 <HAL_UART_MspInit+0x49c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d16b      	bne.n	8001b3a <HAL_UART_MspInit+0x376>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a62:	4b80      	ldr	r3, [pc, #512]	; (8001c64 <HAL_UART_MspInit+0x4a0>)
 8001a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a68:	4a7e      	ldr	r2, [pc, #504]	; (8001c64 <HAL_UART_MspInit+0x4a0>)
 8001a6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a72:	4b7c      	ldr	r3, [pc, #496]	; (8001c64 <HAL_UART_MspInit+0x4a0>)
 8001a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001a80:	4b79      	ldr	r3, [pc, #484]	; (8001c68 <HAL_UART_MspInit+0x4a4>)
 8001a82:	4a7a      	ldr	r2, [pc, #488]	; (8001c6c <HAL_UART_MspInit+0x4a8>)
 8001a84:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001a86:	4b78      	ldr	r3, [pc, #480]	; (8001c68 <HAL_UART_MspInit+0x4a4>)
 8001a88:	222d      	movs	r2, #45	; 0x2d
 8001a8a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a8c:	4b76      	ldr	r3, [pc, #472]	; (8001c68 <HAL_UART_MspInit+0x4a4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a92:	4b75      	ldr	r3, [pc, #468]	; (8001c68 <HAL_UART_MspInit+0x4a4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a98:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <HAL_UART_MspInit+0x4a4>)
 8001a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a9e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa0:	4b71      	ldr	r3, [pc, #452]	; (8001c68 <HAL_UART_MspInit+0x4a4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aa6:	4b70      	ldr	r3, [pc, #448]	; (8001c68 <HAL_UART_MspInit+0x4a4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001aac:	4b6e      	ldr	r3, [pc, #440]	; (8001c68 <HAL_UART_MspInit+0x4a4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ab2:	4b6d      	ldr	r3, [pc, #436]	; (8001c68 <HAL_UART_MspInit+0x4a4>)
 8001ab4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ab8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aba:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_UART_MspInit+0x4a4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ac0:	4869      	ldr	r0, [pc, #420]	; (8001c68 <HAL_UART_MspInit+0x4a4>)
 8001ac2:	f000 fd45 	bl	8002550 <HAL_DMA_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_MspInit+0x30c>
      Error_Handler();
 8001acc:	f7ff fb48 	bl	8001160 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a65      	ldr	r2, [pc, #404]	; (8001c68 <HAL_UART_MspInit+0x4a4>)
 8001ad4:	679a      	str	r2, [r3, #120]	; 0x78
 8001ad6:	4a64      	ldr	r2, [pc, #400]	; (8001c68 <HAL_UART_MspInit+0x4a4>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA2_Stream3;
 8001adc:	4b64      	ldr	r3, [pc, #400]	; (8001c70 <HAL_UART_MspInit+0x4ac>)
 8001ade:	4a65      	ldr	r2, [pc, #404]	; (8001c74 <HAL_UART_MspInit+0x4b0>)
 8001ae0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001ae2:	4b63      	ldr	r3, [pc, #396]	; (8001c70 <HAL_UART_MspInit+0x4ac>)
 8001ae4:	222e      	movs	r2, #46	; 0x2e
 8001ae6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ae8:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <HAL_UART_MspInit+0x4ac>)
 8001aea:	2240      	movs	r2, #64	; 0x40
 8001aec:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aee:	4b60      	ldr	r3, [pc, #384]	; (8001c70 <HAL_UART_MspInit+0x4ac>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001af4:	4b5e      	ldr	r3, [pc, #376]	; (8001c70 <HAL_UART_MspInit+0x4ac>)
 8001af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001afa:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001afc:	4b5c      	ldr	r3, [pc, #368]	; (8001c70 <HAL_UART_MspInit+0x4ac>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b02:	4b5b      	ldr	r3, [pc, #364]	; (8001c70 <HAL_UART_MspInit+0x4ac>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001b08:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_UART_MspInit+0x4ac>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001b0e:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <HAL_UART_MspInit+0x4ac>)
 8001b10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b14:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b16:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <HAL_UART_MspInit+0x4ac>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001b1c:	4854      	ldr	r0, [pc, #336]	; (8001c70 <HAL_UART_MspInit+0x4ac>)
 8001b1e:	f000 fd17 	bl	8002550 <HAL_DMA_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_UART_MspInit+0x368>
      Error_Handler();
 8001b28:	f7ff fb1a 	bl	8001160 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a50      	ldr	r2, [pc, #320]	; (8001c70 <HAL_UART_MspInit+0x4ac>)
 8001b30:	675a      	str	r2, [r3, #116]	; 0x74
 8001b32:	4a4f      	ldr	r2, [pc, #316]	; (8001c70 <HAL_UART_MspInit+0x4ac>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b38:	e08d      	b.n	8001c56 <HAL_UART_MspInit+0x492>
  else if(uartHandle->Instance==USART6)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a4e      	ldr	r2, [pc, #312]	; (8001c78 <HAL_UART_MspInit+0x4b4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	f040 8088 	bne.w	8001c56 <HAL_UART_MspInit+0x492>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b46:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_UART_MspInit+0x4a0>)
 8001b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b4c:	4a45      	ldr	r2, [pc, #276]	; (8001c64 <HAL_UART_MspInit+0x4a0>)
 8001b4e:	f043 0320 	orr.w	r3, r3, #32
 8001b52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b56:	4b43      	ldr	r3, [pc, #268]	; (8001c64 <HAL_UART_MspInit+0x4a0>)
 8001b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b64:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <HAL_UART_MspInit+0x4a0>)
 8001b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6a:	4a3e      	ldr	r2, [pc, #248]	; (8001c64 <HAL_UART_MspInit+0x4a0>)
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b74:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <HAL_UART_MspInit+0x4a0>)
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b82:	23c0      	movs	r3, #192	; 0xc0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001b92:	2307      	movs	r3, #7
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4837      	ldr	r0, [pc, #220]	; (8001c7c <HAL_UART_MspInit+0x4b8>)
 8001b9e:	f004 f82b 	bl	8005bf8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream6;
 8001ba2:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <HAL_UART_MspInit+0x4bc>)
 8001ba4:	4a37      	ldr	r2, [pc, #220]	; (8001c84 <HAL_UART_MspInit+0x4c0>)
 8001ba6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8001ba8:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <HAL_UART_MspInit+0x4bc>)
 8001baa:	2247      	movs	r2, #71	; 0x47
 8001bac:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HAL_UART_MspInit+0x4bc>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb4:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HAL_UART_MspInit+0x4bc>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bba:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <HAL_UART_MspInit+0x4bc>)
 8001bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bc2:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <HAL_UART_MspInit+0x4bc>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_UART_MspInit+0x4bc>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001bce:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <HAL_UART_MspInit+0x4bc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_UART_MspInit+0x4bc>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bda:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <HAL_UART_MspInit+0x4bc>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001be0:	4827      	ldr	r0, [pc, #156]	; (8001c80 <HAL_UART_MspInit+0x4bc>)
 8001be2:	f000 fcb5 	bl	8002550 <HAL_DMA_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8001bec:	f7ff fab8 	bl	8001160 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <HAL_UART_MspInit+0x4bc>)
 8001bf4:	679a      	str	r2, [r3, #120]	; 0x78
 8001bf6:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <HAL_UART_MspInit+0x4bc>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_UART_MspInit+0x4c4>)
 8001bfe:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_UART_MspInit+0x4c8>)
 8001c00:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <HAL_UART_MspInit+0x4c4>)
 8001c04:	2248      	movs	r2, #72	; 0x48
 8001c06:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <HAL_UART_MspInit+0x4c4>)
 8001c0a:	2240      	movs	r2, #64	; 0x40
 8001c0c:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <HAL_UART_MspInit+0x4c4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c14:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_UART_MspInit+0x4c4>)
 8001c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c1a:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <HAL_UART_MspInit+0x4c4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_UART_MspInit+0x4c4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001c28:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_UART_MspInit+0x4c4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <HAL_UART_MspInit+0x4c4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_UART_MspInit+0x4c4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001c3a:	4813      	ldr	r0, [pc, #76]	; (8001c88 <HAL_UART_MspInit+0x4c4>)
 8001c3c:	f000 fc88 	bl	8002550 <HAL_DMA_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_UART_MspInit+0x486>
      Error_Handler();
 8001c46:	f7ff fa8b 	bl	8001160 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <HAL_UART_MspInit+0x4c4>)
 8001c4e:	675a      	str	r2, [r3, #116]	; 0x74
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <HAL_UART_MspInit+0x4c4>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001c56:	bf00      	nop
 8001c58:	3738      	adds	r7, #56	; 0x38
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40004800 	.word	0x40004800
 8001c64:	58024400 	.word	0x58024400
 8001c68:	24009ab0 	.word	0x24009ab0
 8001c6c:	40020440 	.word	0x40020440
 8001c70:	24009bb4 	.word	0x24009bb4
 8001c74:	40020458 	.word	0x40020458
 8001c78:	40011400 	.word	0x40011400
 8001c7c:	58020800 	.word	0x58020800
 8001c80:	24009a38 	.word	0x24009a38
 8001c84:	400204a0 	.word	0x400204a0
 8001c88:	24009ca4 	.word	0x24009ca4
 8001c8c:	400204b8 	.word	0x400204b8

08001c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8001c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c94:	f7fe fd52 	bl	800073c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c9a:	e003      	b.n	8001ca4 <LoopCopyDataInit>

08001c9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001c9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ca0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ca2:	3104      	adds	r1, #4

08001ca4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ca4:	480a      	ldr	r0, [pc, #40]	; (8001cd0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001ca8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001caa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cac:	d3f6      	bcc.n	8001c9c <CopyDataInit>
  ldr  r2, =_sbss
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001cb0:	e002      	b.n	8001cb8 <LoopFillZerobss>

08001cb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cb4:	f842 3b04 	str.w	r3, [r2], #4

08001cb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001cba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cbc:	d3f9      	bcc.n	8001cb2 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8001cbe:	f01f fb89 	bl	80213d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cc2:	f7ff f8bd 	bl	8000e40 <main>
  bx  lr    
 8001cc6:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8001cc8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001ccc:	08028bac 	.word	0x08028bac
  ldr  r0, =_sdata
 8001cd0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001cd4:	2400020c 	.word	0x2400020c
  ldr  r2, =_sbss
 8001cd8:	2400020c 	.word	0x2400020c
  ldr  r3, = _ebss
 8001cdc:	2400d278 	.word	0x2400d278

08001ce0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce0:	e7fe      	b.n	8001ce0 <ADC3_IRQHandler>

08001ce2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <LAN8742_RegisterBusIO+0x28>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d007      	beq.n	8001d0a <LAN8742_RegisterBusIO+0x28>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <LAN8742_RegisterBusIO+0x28>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d0e:	e014      	b.n	8001d3a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d17c      	bne.n	8001e60 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e01c      	b.n	8001dba <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	f107 0208 	add.w	r2, r7, #8
 8001d88:	2112      	movs	r1, #18
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	4798      	blx	r3
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	da03      	bge.n	8001d9c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001d94:	f06f 0304 	mvn.w	r3, #4
 8001d98:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001d9a:	e00b      	b.n	8001db4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d105      	bne.n	8001db4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
         break;
 8001db2:	e005      	b.n	8001dc0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b1f      	cmp	r3, #31
 8001dbe:	d9df      	bls.n	8001d80 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b1f      	cmp	r3, #31
 8001dc6:	d902      	bls.n	8001dce <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001dc8:	f06f 0302 	mvn.w	r3, #2
 8001dcc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d145      	bne.n	8001e60 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6810      	ldr	r0, [r2, #0]
 8001ddc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001de0:	2100      	movs	r1, #0
 8001de2:	4798      	blx	r3
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	db37      	blt.n	8001e5a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6810      	ldr	r0, [r2, #0]
 8001df2:	f107 0208 	add.w	r2, r7, #8
 8001df6:	2100      	movs	r1, #0
 8001df8:	4798      	blx	r3
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db28      	blt.n	8001e52 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4798      	blx	r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001e0a:	e01c      	b.n	8001e46 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4798      	blx	r3
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e1e:	d80e      	bhi.n	8001e3e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6810      	ldr	r0, [r2, #0]
 8001e28:	f107 0208 	add.w	r2, r7, #8
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4798      	blx	r3
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	da07      	bge.n	8001e46 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001e36:	f06f 0304 	mvn.w	r3, #4
 8001e3a:	613b      	str	r3, [r7, #16]
                 break;
 8001e3c:	e010      	b.n	8001e60 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001e3e:	f06f 0301 	mvn.w	r3, #1
 8001e42:	613b      	str	r3, [r7, #16]
               break;
 8001e44:	e00c      	b.n	8001e60 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1dd      	bne.n	8001e0c <LAN8742_Init+0xc6>
 8001e50:	e006      	b.n	8001e60 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001e52:	f06f 0304 	mvn.w	r3, #4
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	e002      	b.n	8001e60 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001e5a:	f06f 0303 	mvn.w	r3, #3
 8001e5e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d112      	bne.n	8001e8c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	4798      	blx	r3
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001e70:	bf00      	nop
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	4798      	blx	r3
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e84:	d9f5      	bls.n	8001e72 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001e8c:	693b      	ldr	r3, [r7, #16]
 }
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6810      	ldr	r0, [r2, #0]
 8001eaa:	f107 020c 	add.w	r2, r7, #12
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4798      	blx	r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	da02      	bge.n	8001ebe <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001eb8:	f06f 0304 	mvn.w	r3, #4
 8001ebc:	e06e      	b.n	8001f9c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6810      	ldr	r0, [r2, #0]
 8001ec6:	f107 020c 	add.w	r2, r7, #12
 8001eca:	2101      	movs	r1, #1
 8001ecc:	4798      	blx	r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da02      	bge.n	8001eda <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ed4:	f06f 0304 	mvn.w	r3, #4
 8001ed8:	e060      	b.n	8001f9c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e059      	b.n	8001f9c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6810      	ldr	r0, [r2, #0]
 8001ef0:	f107 020c 	add.w	r2, r7, #12
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4798      	blx	r3
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	da02      	bge.n	8001f04 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001efe:	f06f 0304 	mvn.w	r3, #4
 8001f02:	e04b      	b.n	8001f9c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11b      	bne.n	8001f46 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <LAN8742_GetLinkState+0x90>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f22:	2302      	movs	r3, #2
 8001f24:	e03a      	b.n	8001f9c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e033      	b.n	8001f9c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f3e:	2304      	movs	r3, #4
 8001f40:	e02c      	b.n	8001f9c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f42:	2305      	movs	r3, #5
 8001f44:	e02a      	b.n	8001f9c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6810      	ldr	r0, [r2, #0]
 8001f4e:	f107 020c 	add.w	r2, r7, #12
 8001f52:	211f      	movs	r1, #31
 8001f54:	4798      	blx	r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	da02      	bge.n	8001f62 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001f5c:	f06f 0304 	mvn.w	r3, #4
 8001f60:	e01c      	b.n	8001f9c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001f6c:	2306      	movs	r3, #6
 8001f6e:	e015      	b.n	8001f9c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 031c 	and.w	r3, r3, #28
 8001f76:	2b18      	cmp	r3, #24
 8001f78:	d101      	bne.n	8001f7e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e00e      	b.n	8001f9c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 031c 	and.w	r3, r3, #28
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d101      	bne.n	8001f8c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e007      	b.n	8001f9c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 031c 	and.w	r3, r3, #28
 8001f92:	2b14      	cmp	r3, #20
 8001f94:	d101      	bne.n	8001f9a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f96:	2304      	movs	r3, #4
 8001f98:	e000      	b.n	8001f9c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f9a:	2305      	movs	r3, #5
    }				
  }
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001faa:	2003      	movs	r0, #3
 8001fac:	f000 f923 	bl	80021f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fb0:	f005 fc44 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_Init+0x68>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	4913      	ldr	r1, [pc, #76]	; (8002010 <HAL_Init+0x6c>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fcc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_Init+0x68>)
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <HAL_Init+0x6c>)
 8001fd8:	5cd3      	ldrb	r3, [r2, r3]
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <HAL_Init+0x70>)
 8001fe6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fe8:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <HAL_Init+0x74>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f7ff f91c 	bl	800122c <HAL_InitTick>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e002      	b.n	8002004 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffe:	f7ff f8f7 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	58024400 	.word	0x58024400
 8002010:	08027fe8 	.word	0x08027fe8
 8002014:	24000004 	.word	0x24000004
 8002018:	24000000 	.word	0x24000000

0800201c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	2400000c 	.word	0x2400000c
 8002040:	24009fb0 	.word	0x24009fb0

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	24009fb0 	.word	0x24009fb0

0800205c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_GetREVID+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0c1b      	lsrs	r3, r3, #16
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	5c001000 	.word	0x5c001000

08002074 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002084:	4904      	ldr	r1, [pc, #16]	; (8002098 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	58000400 	.word	0x58000400

0800209c <__NVIC_SetPriorityGrouping>:
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <__NVIC_SetPriorityGrouping+0x40>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b8:	4013      	ands	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ca:	4a04      	ldr	r2, [pc, #16]	; (80020dc <__NVIC_SetPriorityGrouping+0x40>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60d3      	str	r3, [r2, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00
 80020e0:	05fa0000 	.word	0x05fa0000

080020e4 <__NVIC_GetPriorityGrouping>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <__NVIC_GetPriorityGrouping+0x18>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0307 	and.w	r3, r3, #7
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_EnableIRQ>:
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800210a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210e:	2b00      	cmp	r3, #0
 8002110:	db0b      	blt.n	800212a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	4907      	ldr	r1, [pc, #28]	; (8002138 <__NVIC_EnableIRQ+0x38>)
 800211a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2001      	movs	r0, #1
 8002122:	fa00 f202 	lsl.w	r2, r0, r2
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	; (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	; (800218c <__NVIC_SetPriority+0x50>)
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ff4c 	bl	800209c <__NVIC_SetPriorityGrouping>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800221a:	f7ff ff63 	bl	80020e4 <__NVIC_GetPriorityGrouping>
 800221e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	6978      	ldr	r0, [r7, #20]
 8002226:	f7ff ffb3 	bl	8002190 <NVIC_EncodePriority>
 800222a:	4602      	mov	r2, r0
 800222c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff82 	bl	800213c <__NVIC_SetPriority>
}
 8002238:	bf00      	nop
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800224a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff ff56 	bl	8002100 <__NVIC_EnableIRQ>
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002260:	f3bf 8f5f 	dmb	sy
}
 8002264:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <HAL_MPU_Disable+0x28>)
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	4a06      	ldr	r2, [pc, #24]	; (8002284 <HAL_MPU_Disable+0x28>)
 800226c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002270:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_MPU_Disable+0x2c>)
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00
 8002288:	e000ed90 	.word	0xe000ed90

0800228c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002294:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <HAL_MPU_Enable+0x38>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_MPU_Enable+0x3c>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <HAL_MPU_Enable+0x3c>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80022aa:	f3bf 8f4f 	dsb	sy
}
 80022ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022b0:	f3bf 8f6f 	isb	sy
}
 80022b4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed90 	.word	0xe000ed90
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	785a      	ldrb	r2, [r3, #1]
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_MPU_ConfigRegion+0x84>)
 80022da:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d029      	beq.n	8002338 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80022e4:	4a1a      	ldr	r2, [pc, #104]	; (8002350 <HAL_MPU_ConfigRegion+0x84>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7b1b      	ldrb	r3, [r3, #12]
 80022f0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7adb      	ldrb	r3, [r3, #11]
 80022f6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7a9b      	ldrb	r3, [r3, #10]
 80022fe:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002300:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7b5b      	ldrb	r3, [r3, #13]
 8002306:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002308:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7b9b      	ldrb	r3, [r3, #14]
 800230e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002310:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7bdb      	ldrb	r3, [r3, #15]
 8002316:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002318:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7a5b      	ldrb	r3, [r3, #9]
 800231e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002320:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7a1b      	ldrb	r3, [r3, #8]
 8002326:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002328:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002330:	4a07      	ldr	r2, [pc, #28]	; (8002350 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002332:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002334:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002336:	e005      	b.n	8002344 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_MPU_ConfigRegion+0x84>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <HAL_MPU_ConfigRegion+0x84>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed90 	.word	0xe000ed90

08002354 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <HAL_GetCurrentCPUID+0x24>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	2b07      	cmp	r3, #7
 8002364:	d101      	bne.n	800236a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002366:	2303      	movs	r3, #3
 8002368:	e000      	b.n	800236c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800236a:	2301      	movs	r3, #1
  }
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e054      	b.n	8002438 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7f5b      	ldrb	r3, [r3, #29]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fa88 	bl	80008b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	791b      	ldrb	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a22      	ldr	r2, [pc, #136]	; (8002440 <HAL_CRC_Init+0xc4>)
 80023b8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0218 	bic.w	r2, r2, #24
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	e00c      	b.n	80023e6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6899      	ldr	r1, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	461a      	mov	r2, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f834 	bl	8002444 <HAL_CRCEx_Polynomial_Set>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e028      	b.n	8002438 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	795b      	ldrb	r3, [r3, #5]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d105      	bne.n	80023fa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023f6:	611a      	str	r2, [r3, #16]
 80023f8:	e004      	b.n	8002404 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6912      	ldr	r2, [r2, #16]
 8002402:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699a      	ldr	r2, [r3, #24]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	04c11db7 	.word	0x04c11db7

08002444 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002454:	231f      	movs	r3, #31
 8002456:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002458:	bf00      	nop
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	613a      	str	r2, [r7, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d009      	beq.n	8002478 <HAL_CRCEx_Polynomial_Set+0x34>
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_CRCEx_Polynomial_Set+0x16>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b18      	cmp	r3, #24
 800247c:	d846      	bhi.n	800250c <HAL_CRCEx_Polynomial_Set+0xc8>
 800247e:	a201      	add	r2, pc, #4	; (adr r2, 8002484 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002484:	08002513 	.word	0x08002513
 8002488:	0800250d 	.word	0x0800250d
 800248c:	0800250d 	.word	0x0800250d
 8002490:	0800250d 	.word	0x0800250d
 8002494:	0800250d 	.word	0x0800250d
 8002498:	0800250d 	.word	0x0800250d
 800249c:	0800250d 	.word	0x0800250d
 80024a0:	0800250d 	.word	0x0800250d
 80024a4:	08002501 	.word	0x08002501
 80024a8:	0800250d 	.word	0x0800250d
 80024ac:	0800250d 	.word	0x0800250d
 80024b0:	0800250d 	.word	0x0800250d
 80024b4:	0800250d 	.word	0x0800250d
 80024b8:	0800250d 	.word	0x0800250d
 80024bc:	0800250d 	.word	0x0800250d
 80024c0:	0800250d 	.word	0x0800250d
 80024c4:	080024f5 	.word	0x080024f5
 80024c8:	0800250d 	.word	0x0800250d
 80024cc:	0800250d 	.word	0x0800250d
 80024d0:	0800250d 	.word	0x0800250d
 80024d4:	0800250d 	.word	0x0800250d
 80024d8:	0800250d 	.word	0x0800250d
 80024dc:	0800250d 	.word	0x0800250d
 80024e0:	0800250d 	.word	0x0800250d
 80024e4:	080024e9 	.word	0x080024e9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	2b06      	cmp	r3, #6
 80024ec:	d913      	bls.n	8002516 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80024f2:	e010      	b.n	8002516 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b07      	cmp	r3, #7
 80024f8:	d90f      	bls.n	800251a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80024fe:	e00c      	b.n	800251a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	d90b      	bls.n	800251e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800250a:	e008      	b.n	800251e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	75fb      	strb	r3, [r7, #23]
      break;
 8002510:	e006      	b.n	8002520 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002512:	bf00      	nop
 8002514:	e004      	b.n	8002520 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002516:	bf00      	nop
 8002518:	e002      	b.n	8002520 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800251a:	bf00      	nop
 800251c:	e000      	b.n	8002520 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800251e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10d      	bne.n	8002542 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 0118 	bic.w	r1, r3, #24
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	430a      	orrs	r2, r1
 8002540:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002542:	7dfb      	ldrb	r3, [r7, #23]
}
 8002544:	4618      	mov	r0, r3
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7ff fd74 	bl	8002044 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e316      	b.n	8002b96 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a66      	ldr	r2, [pc, #408]	; (8002708 <HAL_DMA_Init+0x1b8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d04a      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a65      	ldr	r2, [pc, #404]	; (800270c <HAL_DMA_Init+0x1bc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d045      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a63      	ldr	r2, [pc, #396]	; (8002710 <HAL_DMA_Init+0x1c0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d040      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a62      	ldr	r2, [pc, #392]	; (8002714 <HAL_DMA_Init+0x1c4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d03b      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a60      	ldr	r2, [pc, #384]	; (8002718 <HAL_DMA_Init+0x1c8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d036      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a5f      	ldr	r2, [pc, #380]	; (800271c <HAL_DMA_Init+0x1cc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d031      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a5d      	ldr	r2, [pc, #372]	; (8002720 <HAL_DMA_Init+0x1d0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d02c      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a5c      	ldr	r2, [pc, #368]	; (8002724 <HAL_DMA_Init+0x1d4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d027      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a5a      	ldr	r2, [pc, #360]	; (8002728 <HAL_DMA_Init+0x1d8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d022      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a59      	ldr	r2, [pc, #356]	; (800272c <HAL_DMA_Init+0x1dc>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d01d      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_DMA_Init+0x1e0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d018      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a56      	ldr	r2, [pc, #344]	; (8002734 <HAL_DMA_Init+0x1e4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d013      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a54      	ldr	r2, [pc, #336]	; (8002738 <HAL_DMA_Init+0x1e8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00e      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a53      	ldr	r2, [pc, #332]	; (800273c <HAL_DMA_Init+0x1ec>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d009      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a51      	ldr	r2, [pc, #324]	; (8002740 <HAL_DMA_Init+0x1f0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d004      	beq.n	8002608 <HAL_DMA_Init+0xb8>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a50      	ldr	r2, [pc, #320]	; (8002744 <HAL_DMA_Init+0x1f4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d101      	bne.n	800260c <HAL_DMA_Init+0xbc>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <HAL_DMA_Init+0xbe>
 800260c:	2300      	movs	r3, #0
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 813b 	beq.w	800288a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a37      	ldr	r2, [pc, #220]	; (8002708 <HAL_DMA_Init+0x1b8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d04a      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a36      	ldr	r2, [pc, #216]	; (800270c <HAL_DMA_Init+0x1bc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d045      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a34      	ldr	r2, [pc, #208]	; (8002710 <HAL_DMA_Init+0x1c0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d040      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a33      	ldr	r2, [pc, #204]	; (8002714 <HAL_DMA_Init+0x1c4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d03b      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a31      	ldr	r2, [pc, #196]	; (8002718 <HAL_DMA_Init+0x1c8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d036      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a30      	ldr	r2, [pc, #192]	; (800271c <HAL_DMA_Init+0x1cc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d031      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a2e      	ldr	r2, [pc, #184]	; (8002720 <HAL_DMA_Init+0x1d0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d02c      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a2d      	ldr	r2, [pc, #180]	; (8002724 <HAL_DMA_Init+0x1d4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d027      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a2b      	ldr	r2, [pc, #172]	; (8002728 <HAL_DMA_Init+0x1d8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d022      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a2a      	ldr	r2, [pc, #168]	; (800272c <HAL_DMA_Init+0x1dc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d01d      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a28      	ldr	r2, [pc, #160]	; (8002730 <HAL_DMA_Init+0x1e0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d018      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a27      	ldr	r2, [pc, #156]	; (8002734 <HAL_DMA_Init+0x1e4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d013      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a25      	ldr	r2, [pc, #148]	; (8002738 <HAL_DMA_Init+0x1e8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00e      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a24      	ldr	r2, [pc, #144]	; (800273c <HAL_DMA_Init+0x1ec>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <HAL_DMA_Init+0x1f0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d004      	beq.n	80026c4 <HAL_DMA_Init+0x174>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a21      	ldr	r2, [pc, #132]	; (8002744 <HAL_DMA_Init+0x1f4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d108      	bne.n	80026d6 <HAL_DMA_Init+0x186>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e007      	b.n	80026e6 <HAL_DMA_Init+0x196>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0201 	bic.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026e6:	e02f      	b.n	8002748 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026e8:	f7ff fcac 	bl	8002044 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b05      	cmp	r3, #5
 80026f4:	d928      	bls.n	8002748 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2203      	movs	r2, #3
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e246      	b.n	8002b96 <HAL_DMA_Init+0x646>
 8002708:	40020010 	.word	0x40020010
 800270c:	40020028 	.word	0x40020028
 8002710:	40020040 	.word	0x40020040
 8002714:	40020058 	.word	0x40020058
 8002718:	40020070 	.word	0x40020070
 800271c:	40020088 	.word	0x40020088
 8002720:	400200a0 	.word	0x400200a0
 8002724:	400200b8 	.word	0x400200b8
 8002728:	40020410 	.word	0x40020410
 800272c:	40020428 	.word	0x40020428
 8002730:	40020440 	.word	0x40020440
 8002734:	40020458 	.word	0x40020458
 8002738:	40020470 	.word	0x40020470
 800273c:	40020488 	.word	0x40020488
 8002740:	400204a0 	.word	0x400204a0
 8002744:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1c8      	bne.n	80026e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4b83      	ldr	r3, [pc, #524]	; (8002970 <HAL_DMA_Init+0x420>)
 8002762:	4013      	ands	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800276e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002786:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2b04      	cmp	r3, #4
 800279a:	d107      	bne.n	80027ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	4313      	orrs	r3, r2
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80027ac:	4b71      	ldr	r3, [pc, #452]	; (8002974 <HAL_DMA_Init+0x424>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b71      	ldr	r3, [pc, #452]	; (8002978 <HAL_DMA_Init+0x428>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b8:	d328      	bcc.n	800280c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b28      	cmp	r3, #40	; 0x28
 80027c0:	d903      	bls.n	80027ca <HAL_DMA_Init+0x27a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b2e      	cmp	r3, #46	; 0x2e
 80027c8:	d917      	bls.n	80027fa <HAL_DMA_Init+0x2aa>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b3e      	cmp	r3, #62	; 0x3e
 80027d0:	d903      	bls.n	80027da <HAL_DMA_Init+0x28a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b42      	cmp	r3, #66	; 0x42
 80027d8:	d90f      	bls.n	80027fa <HAL_DMA_Init+0x2aa>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b46      	cmp	r3, #70	; 0x46
 80027e0:	d903      	bls.n	80027ea <HAL_DMA_Init+0x29a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b48      	cmp	r3, #72	; 0x48
 80027e8:	d907      	bls.n	80027fa <HAL_DMA_Init+0x2aa>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b4e      	cmp	r3, #78	; 0x4e
 80027f0:	d905      	bls.n	80027fe <HAL_DMA_Init+0x2ae>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b52      	cmp	r3, #82	; 0x52
 80027f8:	d801      	bhi.n	80027fe <HAL_DMA_Init+0x2ae>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_DMA_Init+0x2b0>
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800280a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f023 0307 	bic.w	r3, r3, #7
 8002822:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	2b04      	cmp	r3, #4
 8002834:	d117      	bne.n	8002866 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00e      	beq.n	8002866 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f001 f9b9 	bl	8003bc0 <DMA_CheckFifoParam>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2240      	movs	r2, #64	; 0x40
 8002858:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e197      	b.n	8002b96 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f001 f8f4 	bl	8003a5c <DMA_CalcBaseAndBitshift>
 8002874:	4603      	mov	r3, r0
 8002876:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	223f      	movs	r2, #63	; 0x3f
 8002882:	409a      	lsls	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	e0cd      	b.n	8002a26 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a3b      	ldr	r2, [pc, #236]	; (800297c <HAL_DMA_Init+0x42c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d022      	beq.n	80028da <HAL_DMA_Init+0x38a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a39      	ldr	r2, [pc, #228]	; (8002980 <HAL_DMA_Init+0x430>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01d      	beq.n	80028da <HAL_DMA_Init+0x38a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a38      	ldr	r2, [pc, #224]	; (8002984 <HAL_DMA_Init+0x434>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d018      	beq.n	80028da <HAL_DMA_Init+0x38a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a36      	ldr	r2, [pc, #216]	; (8002988 <HAL_DMA_Init+0x438>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_DMA_Init+0x38a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a35      	ldr	r2, [pc, #212]	; (800298c <HAL_DMA_Init+0x43c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00e      	beq.n	80028da <HAL_DMA_Init+0x38a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a33      	ldr	r2, [pc, #204]	; (8002990 <HAL_DMA_Init+0x440>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d009      	beq.n	80028da <HAL_DMA_Init+0x38a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a32      	ldr	r2, [pc, #200]	; (8002994 <HAL_DMA_Init+0x444>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d004      	beq.n	80028da <HAL_DMA_Init+0x38a>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a30      	ldr	r2, [pc, #192]	; (8002998 <HAL_DMA_Init+0x448>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d101      	bne.n	80028de <HAL_DMA_Init+0x38e>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_DMA_Init+0x390>
 80028de:	2300      	movs	r3, #0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8097 	beq.w	8002a14 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a24      	ldr	r2, [pc, #144]	; (800297c <HAL_DMA_Init+0x42c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d021      	beq.n	8002934 <HAL_DMA_Init+0x3e4>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a22      	ldr	r2, [pc, #136]	; (8002980 <HAL_DMA_Init+0x430>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d01c      	beq.n	8002934 <HAL_DMA_Init+0x3e4>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a21      	ldr	r2, [pc, #132]	; (8002984 <HAL_DMA_Init+0x434>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d017      	beq.n	8002934 <HAL_DMA_Init+0x3e4>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <HAL_DMA_Init+0x438>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d012      	beq.n	8002934 <HAL_DMA_Init+0x3e4>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1e      	ldr	r2, [pc, #120]	; (800298c <HAL_DMA_Init+0x43c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00d      	beq.n	8002934 <HAL_DMA_Init+0x3e4>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1c      	ldr	r2, [pc, #112]	; (8002990 <HAL_DMA_Init+0x440>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d008      	beq.n	8002934 <HAL_DMA_Init+0x3e4>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <HAL_DMA_Init+0x444>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d003      	beq.n	8002934 <HAL_DMA_Init+0x3e4>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a19      	ldr	r2, [pc, #100]	; (8002998 <HAL_DMA_Init+0x448>)
 8002932:	4293      	cmp	r3, r2
 8002934:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_DMA_Init+0x44c>)
 8002952:	4013      	ands	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b40      	cmp	r3, #64	; 0x40
 800295c:	d020      	beq.n	80029a0 <HAL_DMA_Init+0x450>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d102      	bne.n	800296c <HAL_DMA_Init+0x41c>
 8002966:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800296a:	e01a      	b.n	80029a2 <HAL_DMA_Init+0x452>
 800296c:	2300      	movs	r3, #0
 800296e:	e018      	b.n	80029a2 <HAL_DMA_Init+0x452>
 8002970:	fe10803f 	.word	0xfe10803f
 8002974:	5c001000 	.word	0x5c001000
 8002978:	ffff0000 	.word	0xffff0000
 800297c:	58025408 	.word	0x58025408
 8002980:	5802541c 	.word	0x5802541c
 8002984:	58025430 	.word	0x58025430
 8002988:	58025444 	.word	0x58025444
 800298c:	58025458 	.word	0x58025458
 8002990:	5802546c 	.word	0x5802546c
 8002994:	58025480 	.word	0x58025480
 8002998:	58025494 	.word	0x58025494
 800299c:	fffe000f 	.word	0xfffe000f
 80029a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68d2      	ldr	r2, [r2, #12]
 80029a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80029b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80029b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80029c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80029c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80029d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	4b6e      	ldr	r3, [pc, #440]	; (8002ba0 <HAL_DMA_Init+0x650>)
 80029e8:	4413      	add	r3, r2
 80029ea:	4a6e      	ldr	r2, [pc, #440]	; (8002ba4 <HAL_DMA_Init+0x654>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	009a      	lsls	r2, r3, #2
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f001 f82f 	bl	8003a5c <DMA_CalcBaseAndBitshift>
 80029fe:	4603      	mov	r3, r0
 8002a00:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	e008      	b.n	8002a26 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2240      	movs	r2, #64	; 0x40
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0b7      	b.n	8002b96 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a5f      	ldr	r2, [pc, #380]	; (8002ba8 <HAL_DMA_Init+0x658>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d072      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a5d      	ldr	r2, [pc, #372]	; (8002bac <HAL_DMA_Init+0x65c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d06d      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a5c      	ldr	r2, [pc, #368]	; (8002bb0 <HAL_DMA_Init+0x660>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d068      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a5a      	ldr	r2, [pc, #360]	; (8002bb4 <HAL_DMA_Init+0x664>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d063      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a59      	ldr	r2, [pc, #356]	; (8002bb8 <HAL_DMA_Init+0x668>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d05e      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a57      	ldr	r2, [pc, #348]	; (8002bbc <HAL_DMA_Init+0x66c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d059      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a56      	ldr	r2, [pc, #344]	; (8002bc0 <HAL_DMA_Init+0x670>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d054      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a54      	ldr	r2, [pc, #336]	; (8002bc4 <HAL_DMA_Init+0x674>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d04f      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a53      	ldr	r2, [pc, #332]	; (8002bc8 <HAL_DMA_Init+0x678>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d04a      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a51      	ldr	r2, [pc, #324]	; (8002bcc <HAL_DMA_Init+0x67c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d045      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a50      	ldr	r2, [pc, #320]	; (8002bd0 <HAL_DMA_Init+0x680>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d040      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a4e      	ldr	r2, [pc, #312]	; (8002bd4 <HAL_DMA_Init+0x684>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d03b      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a4d      	ldr	r2, [pc, #308]	; (8002bd8 <HAL_DMA_Init+0x688>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d036      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a4b      	ldr	r2, [pc, #300]	; (8002bdc <HAL_DMA_Init+0x68c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d031      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a4a      	ldr	r2, [pc, #296]	; (8002be0 <HAL_DMA_Init+0x690>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d02c      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a48      	ldr	r2, [pc, #288]	; (8002be4 <HAL_DMA_Init+0x694>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d027      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a47      	ldr	r2, [pc, #284]	; (8002be8 <HAL_DMA_Init+0x698>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d022      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a45      	ldr	r2, [pc, #276]	; (8002bec <HAL_DMA_Init+0x69c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01d      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a44      	ldr	r2, [pc, #272]	; (8002bf0 <HAL_DMA_Init+0x6a0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d018      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a42      	ldr	r2, [pc, #264]	; (8002bf4 <HAL_DMA_Init+0x6a4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a41      	ldr	r2, [pc, #260]	; (8002bf8 <HAL_DMA_Init+0x6a8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d00e      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a3f      	ldr	r2, [pc, #252]	; (8002bfc <HAL_DMA_Init+0x6ac>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a3e      	ldr	r2, [pc, #248]	; (8002c00 <HAL_DMA_Init+0x6b0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d004      	beq.n	8002b16 <HAL_DMA_Init+0x5c6>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a3c      	ldr	r2, [pc, #240]	; (8002c04 <HAL_DMA_Init+0x6b4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d101      	bne.n	8002b1a <HAL_DMA_Init+0x5ca>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_DMA_Init+0x5cc>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d032      	beq.n	8002b86 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f001 f8c9 	bl	8003cb8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b80      	cmp	r3, #128	; 0x80
 8002b2c:	d102      	bne.n	8002b34 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b48:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d010      	beq.n	8002b74 <HAL_DMA_Init+0x624>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d80c      	bhi.n	8002b74 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f001 f946 	bl	8003dec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	e008      	b.n	8002b86 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	a7fdabf8 	.word	0xa7fdabf8
 8002ba4:	cccccccd 	.word	0xcccccccd
 8002ba8:	40020010 	.word	0x40020010
 8002bac:	40020028 	.word	0x40020028
 8002bb0:	40020040 	.word	0x40020040
 8002bb4:	40020058 	.word	0x40020058
 8002bb8:	40020070 	.word	0x40020070
 8002bbc:	40020088 	.word	0x40020088
 8002bc0:	400200a0 	.word	0x400200a0
 8002bc4:	400200b8 	.word	0x400200b8
 8002bc8:	40020410 	.word	0x40020410
 8002bcc:	40020428 	.word	0x40020428
 8002bd0:	40020440 	.word	0x40020440
 8002bd4:	40020458 	.word	0x40020458
 8002bd8:	40020470 	.word	0x40020470
 8002bdc:	40020488 	.word	0x40020488
 8002be0:	400204a0 	.word	0x400204a0
 8002be4:	400204b8 	.word	0x400204b8
 8002be8:	58025408 	.word	0x58025408
 8002bec:	5802541c 	.word	0x5802541c
 8002bf0:	58025430 	.word	0x58025430
 8002bf4:	58025444 	.word	0x58025444
 8002bf8:	58025458 	.word	0x58025458
 8002bfc:	5802546c 	.word	0x5802546c
 8002c00:	58025480 	.word	0x58025480
 8002c04:	58025494 	.word	0x58025494

08002c08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c14:	4b67      	ldr	r3, [pc, #412]	; (8002db4 <HAL_DMA_IRQHandler+0x1ac>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a67      	ldr	r2, [pc, #412]	; (8002db8 <HAL_DMA_IRQHandler+0x1b0>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	0a9b      	lsrs	r3, r3, #10
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a5f      	ldr	r2, [pc, #380]	; (8002dbc <HAL_DMA_IRQHandler+0x1b4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d04a      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a5d      	ldr	r2, [pc, #372]	; (8002dc0 <HAL_DMA_IRQHandler+0x1b8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d045      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a5c      	ldr	r2, [pc, #368]	; (8002dc4 <HAL_DMA_IRQHandler+0x1bc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d040      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a5a      	ldr	r2, [pc, #360]	; (8002dc8 <HAL_DMA_IRQHandler+0x1c0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d03b      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a59      	ldr	r2, [pc, #356]	; (8002dcc <HAL_DMA_IRQHandler+0x1c4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d036      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a57      	ldr	r2, [pc, #348]	; (8002dd0 <HAL_DMA_IRQHandler+0x1c8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d031      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a56      	ldr	r2, [pc, #344]	; (8002dd4 <HAL_DMA_IRQHandler+0x1cc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d02c      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a54      	ldr	r2, [pc, #336]	; (8002dd8 <HAL_DMA_IRQHandler+0x1d0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d027      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a53      	ldr	r2, [pc, #332]	; (8002ddc <HAL_DMA_IRQHandler+0x1d4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d022      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a51      	ldr	r2, [pc, #324]	; (8002de0 <HAL_DMA_IRQHandler+0x1d8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01d      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a50      	ldr	r2, [pc, #320]	; (8002de4 <HAL_DMA_IRQHandler+0x1dc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d018      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a4e      	ldr	r2, [pc, #312]	; (8002de8 <HAL_DMA_IRQHandler+0x1e0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a4d      	ldr	r2, [pc, #308]	; (8002dec <HAL_DMA_IRQHandler+0x1e4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00e      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a4b      	ldr	r2, [pc, #300]	; (8002df0 <HAL_DMA_IRQHandler+0x1e8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d009      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a4a      	ldr	r2, [pc, #296]	; (8002df4 <HAL_DMA_IRQHandler+0x1ec>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_DMA_IRQHandler+0xd2>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a48      	ldr	r2, [pc, #288]	; (8002df8 <HAL_DMA_IRQHandler+0x1f0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA_IRQHandler+0xd6>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_DMA_IRQHandler+0xd8>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 842b 	beq.w	800353c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	2208      	movs	r2, #8
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80a2 	beq.w	8002e40 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a2e      	ldr	r2, [pc, #184]	; (8002dbc <HAL_DMA_IRQHandler+0x1b4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d04a      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a2d      	ldr	r2, [pc, #180]	; (8002dc0 <HAL_DMA_IRQHandler+0x1b8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d045      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2b      	ldr	r2, [pc, #172]	; (8002dc4 <HAL_DMA_IRQHandler+0x1bc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d040      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a2a      	ldr	r2, [pc, #168]	; (8002dc8 <HAL_DMA_IRQHandler+0x1c0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d03b      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a28      	ldr	r2, [pc, #160]	; (8002dcc <HAL_DMA_IRQHandler+0x1c4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d036      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a27      	ldr	r2, [pc, #156]	; (8002dd0 <HAL_DMA_IRQHandler+0x1c8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d031      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <HAL_DMA_IRQHandler+0x1cc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d02c      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a24      	ldr	r2, [pc, #144]	; (8002dd8 <HAL_DMA_IRQHandler+0x1d0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d027      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <HAL_DMA_IRQHandler+0x1d4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d022      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <HAL_DMA_IRQHandler+0x1d8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d01d      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <HAL_DMA_IRQHandler+0x1dc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d018      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <HAL_DMA_IRQHandler+0x1e0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d013      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_DMA_IRQHandler+0x1e4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00e      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <HAL_DMA_IRQHandler+0x1e8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d009      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_DMA_IRQHandler+0x1ec>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x194>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <HAL_DMA_IRQHandler+0x1f0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d12f      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x1f4>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf14      	ite	ne
 8002daa:	2301      	movne	r3, #1
 8002dac:	2300      	moveq	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	e02e      	b.n	8002e10 <HAL_DMA_IRQHandler+0x208>
 8002db2:	bf00      	nop
 8002db4:	24000000 	.word	0x24000000
 8002db8:	1b4e81b5 	.word	0x1b4e81b5
 8002dbc:	40020010 	.word	0x40020010
 8002dc0:	40020028 	.word	0x40020028
 8002dc4:	40020040 	.word	0x40020040
 8002dc8:	40020058 	.word	0x40020058
 8002dcc:	40020070 	.word	0x40020070
 8002dd0:	40020088 	.word	0x40020088
 8002dd4:	400200a0 	.word	0x400200a0
 8002dd8:	400200b8 	.word	0x400200b8
 8002ddc:	40020410 	.word	0x40020410
 8002de0:	40020428 	.word	0x40020428
 8002de4:	40020440 	.word	0x40020440
 8002de8:	40020458 	.word	0x40020458
 8002dec:	40020470 	.word	0x40020470
 8002df0:	40020488 	.word	0x40020488
 8002df4:	400204a0 	.word	0x400204a0
 8002df8:	400204b8 	.word	0x400204b8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bf14      	ite	ne
 8002e0a:	2301      	movne	r3, #1
 8002e0c:	2300      	moveq	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d015      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0204 	bic.w	r2, r2, #4
 8002e22:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d06e      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a69      	ldr	r2, [pc, #420]	; (8003000 <HAL_DMA_IRQHandler+0x3f8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d04a      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a67      	ldr	r2, [pc, #412]	; (8003004 <HAL_DMA_IRQHandler+0x3fc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d045      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a66      	ldr	r2, [pc, #408]	; (8003008 <HAL_DMA_IRQHandler+0x400>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d040      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a64      	ldr	r2, [pc, #400]	; (800300c <HAL_DMA_IRQHandler+0x404>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d03b      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a63      	ldr	r2, [pc, #396]	; (8003010 <HAL_DMA_IRQHandler+0x408>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d036      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a61      	ldr	r2, [pc, #388]	; (8003014 <HAL_DMA_IRQHandler+0x40c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d031      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a60      	ldr	r2, [pc, #384]	; (8003018 <HAL_DMA_IRQHandler+0x410>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d02c      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a5e      	ldr	r2, [pc, #376]	; (800301c <HAL_DMA_IRQHandler+0x414>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d027      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a5d      	ldr	r2, [pc, #372]	; (8003020 <HAL_DMA_IRQHandler+0x418>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d022      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a5b      	ldr	r2, [pc, #364]	; (8003024 <HAL_DMA_IRQHandler+0x41c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01d      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a5a      	ldr	r2, [pc, #360]	; (8003028 <HAL_DMA_IRQHandler+0x420>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d018      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a58      	ldr	r2, [pc, #352]	; (800302c <HAL_DMA_IRQHandler+0x424>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a57      	ldr	r2, [pc, #348]	; (8003030 <HAL_DMA_IRQHandler+0x428>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a55      	ldr	r2, [pc, #340]	; (8003034 <HAL_DMA_IRQHandler+0x42c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a54      	ldr	r2, [pc, #336]	; (8003038 <HAL_DMA_IRQHandler+0x430>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x2ee>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a52      	ldr	r2, [pc, #328]	; (800303c <HAL_DMA_IRQHandler+0x434>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10a      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x304>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e003      	b.n	8002f14 <HAL_DMA_IRQHandler+0x30c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00d      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	2201      	movs	r2, #1
 8002f22:	409a      	lsls	r2, r3
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f043 0202 	orr.w	r2, r3, #2
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 808f 	beq.w	8003068 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <HAL_DMA_IRQHandler+0x3f8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d04a      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a2a      	ldr	r2, [pc, #168]	; (8003004 <HAL_DMA_IRQHandler+0x3fc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d045      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a29      	ldr	r2, [pc, #164]	; (8003008 <HAL_DMA_IRQHandler+0x400>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d040      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a27      	ldr	r2, [pc, #156]	; (800300c <HAL_DMA_IRQHandler+0x404>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d03b      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a26      	ldr	r2, [pc, #152]	; (8003010 <HAL_DMA_IRQHandler+0x408>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d036      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a24      	ldr	r2, [pc, #144]	; (8003014 <HAL_DMA_IRQHandler+0x40c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d031      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a23      	ldr	r2, [pc, #140]	; (8003018 <HAL_DMA_IRQHandler+0x410>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d02c      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a21      	ldr	r2, [pc, #132]	; (800301c <HAL_DMA_IRQHandler+0x414>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d027      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a20      	ldr	r2, [pc, #128]	; (8003020 <HAL_DMA_IRQHandler+0x418>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d022      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <HAL_DMA_IRQHandler+0x41c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01d      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <HAL_DMA_IRQHandler+0x420>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d018      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_DMA_IRQHandler+0x424>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1a      	ldr	r2, [pc, #104]	; (8003030 <HAL_DMA_IRQHandler+0x428>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00e      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_DMA_IRQHandler+0x42c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d009      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a17      	ldr	r2, [pc, #92]	; (8003038 <HAL_DMA_IRQHandler+0x430>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d004      	beq.n	8002fea <HAL_DMA_IRQHandler+0x3e2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a15      	ldr	r2, [pc, #84]	; (800303c <HAL_DMA_IRQHandler+0x434>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d12a      	bne.n	8003040 <HAL_DMA_IRQHandler+0x438>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e023      	b.n	8003048 <HAL_DMA_IRQHandler+0x440>
 8003000:	40020010 	.word	0x40020010
 8003004:	40020028 	.word	0x40020028
 8003008:	40020040 	.word	0x40020040
 800300c:	40020058 	.word	0x40020058
 8003010:	40020070 	.word	0x40020070
 8003014:	40020088 	.word	0x40020088
 8003018:	400200a0 	.word	0x400200a0
 800301c:	400200b8 	.word	0x400200b8
 8003020:	40020410 	.word	0x40020410
 8003024:	40020428 	.word	0x40020428
 8003028:	40020440 	.word	0x40020440
 800302c:	40020458 	.word	0x40020458
 8003030:	40020470 	.word	0x40020470
 8003034:	40020488 	.word	0x40020488
 8003038:	400204a0 	.word	0x400204a0
 800303c:	400204b8 	.word	0x400204b8
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00d      	beq.n	8003068 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2204      	movs	r2, #4
 8003056:	409a      	lsls	r2, r3
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	f043 0204 	orr.w	r2, r3, #4
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2210      	movs	r2, #16
 8003072:	409a      	lsls	r2, r3
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80a6 	beq.w	80031ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a85      	ldr	r2, [pc, #532]	; (8003298 <HAL_DMA_IRQHandler+0x690>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d04a      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a83      	ldr	r2, [pc, #524]	; (800329c <HAL_DMA_IRQHandler+0x694>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d045      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a82      	ldr	r2, [pc, #520]	; (80032a0 <HAL_DMA_IRQHandler+0x698>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d040      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a80      	ldr	r2, [pc, #512]	; (80032a4 <HAL_DMA_IRQHandler+0x69c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d03b      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a7f      	ldr	r2, [pc, #508]	; (80032a8 <HAL_DMA_IRQHandler+0x6a0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d036      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a7d      	ldr	r2, [pc, #500]	; (80032ac <HAL_DMA_IRQHandler+0x6a4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a7c      	ldr	r2, [pc, #496]	; (80032b0 <HAL_DMA_IRQHandler+0x6a8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d02c      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a7a      	ldr	r2, [pc, #488]	; (80032b4 <HAL_DMA_IRQHandler+0x6ac>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d027      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a79      	ldr	r2, [pc, #484]	; (80032b8 <HAL_DMA_IRQHandler+0x6b0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d022      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a77      	ldr	r2, [pc, #476]	; (80032bc <HAL_DMA_IRQHandler+0x6b4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01d      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a76      	ldr	r2, [pc, #472]	; (80032c0 <HAL_DMA_IRQHandler+0x6b8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d018      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a74      	ldr	r2, [pc, #464]	; (80032c4 <HAL_DMA_IRQHandler+0x6bc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a73      	ldr	r2, [pc, #460]	; (80032c8 <HAL_DMA_IRQHandler+0x6c0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a71      	ldr	r2, [pc, #452]	; (80032cc <HAL_DMA_IRQHandler+0x6c4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a70      	ldr	r2, [pc, #448]	; (80032d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_DMA_IRQHandler+0x516>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a6e      	ldr	r2, [pc, #440]	; (80032d4 <HAL_DMA_IRQHandler+0x6cc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10a      	bne.n	8003134 <HAL_DMA_IRQHandler+0x52c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e009      	b.n	8003148 <HAL_DMA_IRQHandler+0x540>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d03e      	beq.n	80031ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	2210      	movs	r2, #16
 8003156:	409a      	lsls	r2, r3
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d018      	beq.n	800319c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d108      	bne.n	800318a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d024      	beq.n	80031ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4798      	blx	r3
 8003188:	e01f      	b.n	80031ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01b      	beq.n	80031ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
 800319a:	e016      	b.n	80031ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d107      	bne.n	80031ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0208 	bic.w	r2, r2, #8
 80031b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	2220      	movs	r2, #32
 80031d4:	409a      	lsls	r2, r3
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8110 	beq.w	8003400 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2c      	ldr	r2, [pc, #176]	; (8003298 <HAL_DMA_IRQHandler+0x690>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d04a      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a2b      	ldr	r2, [pc, #172]	; (800329c <HAL_DMA_IRQHandler+0x694>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d045      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a29      	ldr	r2, [pc, #164]	; (80032a0 <HAL_DMA_IRQHandler+0x698>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d040      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a28      	ldr	r2, [pc, #160]	; (80032a4 <HAL_DMA_IRQHandler+0x69c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d03b      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <HAL_DMA_IRQHandler+0x6a0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d036      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a25      	ldr	r2, [pc, #148]	; (80032ac <HAL_DMA_IRQHandler+0x6a4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d031      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a23      	ldr	r2, [pc, #140]	; (80032b0 <HAL_DMA_IRQHandler+0x6a8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d02c      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a22      	ldr	r2, [pc, #136]	; (80032b4 <HAL_DMA_IRQHandler+0x6ac>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d027      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a20      	ldr	r2, [pc, #128]	; (80032b8 <HAL_DMA_IRQHandler+0x6b0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d022      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <HAL_DMA_IRQHandler+0x6b4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d01d      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1d      	ldr	r2, [pc, #116]	; (80032c0 <HAL_DMA_IRQHandler+0x6b8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d018      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <HAL_DMA_IRQHandler+0x6bc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <HAL_DMA_IRQHandler+0x6c0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00e      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a19      	ldr	r2, [pc, #100]	; (80032cc <HAL_DMA_IRQHandler+0x6c4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_DMA_IRQHandler+0x678>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a16      	ldr	r2, [pc, #88]	; (80032d4 <HAL_DMA_IRQHandler+0x6cc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d12b      	bne.n	80032d8 <HAL_DMA_IRQHandler+0x6d0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	bf14      	ite	ne
 800328e:	2301      	movne	r3, #1
 8003290:	2300      	moveq	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	e02a      	b.n	80032ec <HAL_DMA_IRQHandler+0x6e4>
 8003296:	bf00      	nop
 8003298:	40020010 	.word	0x40020010
 800329c:	40020028 	.word	0x40020028
 80032a0:	40020040 	.word	0x40020040
 80032a4:	40020058 	.word	0x40020058
 80032a8:	40020070 	.word	0x40020070
 80032ac:	40020088 	.word	0x40020088
 80032b0:	400200a0 	.word	0x400200a0
 80032b4:	400200b8 	.word	0x400200b8
 80032b8:	40020410 	.word	0x40020410
 80032bc:	40020428 	.word	0x40020428
 80032c0:	40020440 	.word	0x40020440
 80032c4:	40020458 	.word	0x40020458
 80032c8:	40020470 	.word	0x40020470
 80032cc:	40020488 	.word	0x40020488
 80032d0:	400204a0 	.word	0x400204a0
 80032d4:	400204b8 	.word	0x400204b8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bf14      	ite	ne
 80032e6:	2301      	movne	r3, #1
 80032e8:	2300      	moveq	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8087 	beq.w	8003400 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2220      	movs	r2, #32
 80032fc:	409a      	lsls	r2, r3
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b04      	cmp	r3, #4
 800330c:	d139      	bne.n	8003382 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0216 	bic.w	r2, r2, #22
 800331c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800332c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d103      	bne.n	800333e <HAL_DMA_IRQHandler+0x736>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0208 	bic.w	r2, r2, #8
 800334c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	223f      	movs	r2, #63	; 0x3f
 8003358:	409a      	lsls	r2, r3
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 834a 	beq.w	8003a0c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
          }
          return;
 8003380:	e344      	b.n	8003a0c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d018      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d02c      	beq.n	8003400 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
 80033ae:	e027      	b.n	8003400 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d023      	beq.n	8003400 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
 80033c0:	e01e      	b.n	8003400 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10f      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0210 	bic.w	r2, r2, #16
 80033de:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8306 	beq.w	8003a16 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8088 	beq.w	8003528 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2204      	movs	r2, #4
 800341c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a7a      	ldr	r2, [pc, #488]	; (8003610 <HAL_DMA_IRQHandler+0xa08>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d04a      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a79      	ldr	r2, [pc, #484]	; (8003614 <HAL_DMA_IRQHandler+0xa0c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d045      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a77      	ldr	r2, [pc, #476]	; (8003618 <HAL_DMA_IRQHandler+0xa10>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d040      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a76      	ldr	r2, [pc, #472]	; (800361c <HAL_DMA_IRQHandler+0xa14>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d03b      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a74      	ldr	r2, [pc, #464]	; (8003620 <HAL_DMA_IRQHandler+0xa18>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d036      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a73      	ldr	r2, [pc, #460]	; (8003624 <HAL_DMA_IRQHandler+0xa1c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d031      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a71      	ldr	r2, [pc, #452]	; (8003628 <HAL_DMA_IRQHandler+0xa20>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d02c      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a70      	ldr	r2, [pc, #448]	; (800362c <HAL_DMA_IRQHandler+0xa24>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d027      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a6e      	ldr	r2, [pc, #440]	; (8003630 <HAL_DMA_IRQHandler+0xa28>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d022      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a6d      	ldr	r2, [pc, #436]	; (8003634 <HAL_DMA_IRQHandler+0xa2c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d01d      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a6b      	ldr	r2, [pc, #428]	; (8003638 <HAL_DMA_IRQHandler+0xa30>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d018      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6a      	ldr	r2, [pc, #424]	; (800363c <HAL_DMA_IRQHandler+0xa34>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d013      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a68      	ldr	r2, [pc, #416]	; (8003640 <HAL_DMA_IRQHandler+0xa38>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00e      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a67      	ldr	r2, [pc, #412]	; (8003644 <HAL_DMA_IRQHandler+0xa3c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d009      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a65      	ldr	r2, [pc, #404]	; (8003648 <HAL_DMA_IRQHandler+0xa40>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x8b8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a64      	ldr	r2, [pc, #400]	; (800364c <HAL_DMA_IRQHandler+0xa44>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d108      	bne.n	80034d2 <HAL_DMA_IRQHandler+0x8ca>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	e007      	b.n	80034e2 <HAL_DMA_IRQHandler+0x8da>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0201 	bic.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3301      	adds	r3, #1
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d307      	bcc.n	80034fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f2      	bne.n	80034e2 <HAL_DMA_IRQHandler+0x8da>
 80034fc:	e000      	b.n	8003500 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80034fe:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d004      	beq.n	8003520 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2203      	movs	r2, #3
 800351a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800351e:	e003      	b.n	8003528 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8272 	beq.w	8003a16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
 800353a:	e26c      	b.n	8003a16 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a43      	ldr	r2, [pc, #268]	; (8003650 <HAL_DMA_IRQHandler+0xa48>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d022      	beq.n	800358c <HAL_DMA_IRQHandler+0x984>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a42      	ldr	r2, [pc, #264]	; (8003654 <HAL_DMA_IRQHandler+0xa4c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d01d      	beq.n	800358c <HAL_DMA_IRQHandler+0x984>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a40      	ldr	r2, [pc, #256]	; (8003658 <HAL_DMA_IRQHandler+0xa50>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d018      	beq.n	800358c <HAL_DMA_IRQHandler+0x984>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a3f      	ldr	r2, [pc, #252]	; (800365c <HAL_DMA_IRQHandler+0xa54>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d013      	beq.n	800358c <HAL_DMA_IRQHandler+0x984>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a3d      	ldr	r2, [pc, #244]	; (8003660 <HAL_DMA_IRQHandler+0xa58>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00e      	beq.n	800358c <HAL_DMA_IRQHandler+0x984>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a3c      	ldr	r2, [pc, #240]	; (8003664 <HAL_DMA_IRQHandler+0xa5c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_DMA_IRQHandler+0x984>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a3a      	ldr	r2, [pc, #232]	; (8003668 <HAL_DMA_IRQHandler+0xa60>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d004      	beq.n	800358c <HAL_DMA_IRQHandler+0x984>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a39      	ldr	r2, [pc, #228]	; (800366c <HAL_DMA_IRQHandler+0xa64>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_DMA_IRQHandler+0x988>
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <HAL_DMA_IRQHandler+0x98a>
 8003590:	2300      	movs	r3, #0
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 823f 	beq.w	8003a16 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	2204      	movs	r2, #4
 80035aa:	409a      	lsls	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80cd 	beq.w	8003750 <HAL_DMA_IRQHandler+0xb48>
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80c7 	beq.w	8003750 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2204      	movs	r2, #4
 80035cc:	409a      	lsls	r2, r3
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d049      	beq.n	8003670 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8210 	beq.w	8003a10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035f8:	e20a      	b.n	8003a10 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8206 	beq.w	8003a10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800360c:	e200      	b.n	8003a10 <HAL_DMA_IRQHandler+0xe08>
 800360e:	bf00      	nop
 8003610:	40020010 	.word	0x40020010
 8003614:	40020028 	.word	0x40020028
 8003618:	40020040 	.word	0x40020040
 800361c:	40020058 	.word	0x40020058
 8003620:	40020070 	.word	0x40020070
 8003624:	40020088 	.word	0x40020088
 8003628:	400200a0 	.word	0x400200a0
 800362c:	400200b8 	.word	0x400200b8
 8003630:	40020410 	.word	0x40020410
 8003634:	40020428 	.word	0x40020428
 8003638:	40020440 	.word	0x40020440
 800363c:	40020458 	.word	0x40020458
 8003640:	40020470 	.word	0x40020470
 8003644:	40020488 	.word	0x40020488
 8003648:	400204a0 	.word	0x400204a0
 800364c:	400204b8 	.word	0x400204b8
 8003650:	58025408 	.word	0x58025408
 8003654:	5802541c 	.word	0x5802541c
 8003658:	58025430 	.word	0x58025430
 800365c:	58025444 	.word	0x58025444
 8003660:	58025458 	.word	0x58025458
 8003664:	5802546c 	.word	0x5802546c
 8003668:	58025480 	.word	0x58025480
 800366c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d160      	bne.n	800373c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a8c      	ldr	r2, [pc, #560]	; (80038b0 <HAL_DMA_IRQHandler+0xca8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d04a      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a8a      	ldr	r2, [pc, #552]	; (80038b4 <HAL_DMA_IRQHandler+0xcac>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d045      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a89      	ldr	r2, [pc, #548]	; (80038b8 <HAL_DMA_IRQHandler+0xcb0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d040      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a87      	ldr	r2, [pc, #540]	; (80038bc <HAL_DMA_IRQHandler+0xcb4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d03b      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a86      	ldr	r2, [pc, #536]	; (80038c0 <HAL_DMA_IRQHandler+0xcb8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d036      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a84      	ldr	r2, [pc, #528]	; (80038c4 <HAL_DMA_IRQHandler+0xcbc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d031      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a83      	ldr	r2, [pc, #524]	; (80038c8 <HAL_DMA_IRQHandler+0xcc0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d02c      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a81      	ldr	r2, [pc, #516]	; (80038cc <HAL_DMA_IRQHandler+0xcc4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d027      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a80      	ldr	r2, [pc, #512]	; (80038d0 <HAL_DMA_IRQHandler+0xcc8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d022      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a7e      	ldr	r2, [pc, #504]	; (80038d4 <HAL_DMA_IRQHandler+0xccc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01d      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a7d      	ldr	r2, [pc, #500]	; (80038d8 <HAL_DMA_IRQHandler+0xcd0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d018      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a7b      	ldr	r2, [pc, #492]	; (80038dc <HAL_DMA_IRQHandler+0xcd4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a7a      	ldr	r2, [pc, #488]	; (80038e0 <HAL_DMA_IRQHandler+0xcd8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00e      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a78      	ldr	r2, [pc, #480]	; (80038e4 <HAL_DMA_IRQHandler+0xcdc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d009      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a77      	ldr	r2, [pc, #476]	; (80038e8 <HAL_DMA_IRQHandler+0xce0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d004      	beq.n	800371a <HAL_DMA_IRQHandler+0xb12>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a75      	ldr	r2, [pc, #468]	; (80038ec <HAL_DMA_IRQHandler+0xce4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d108      	bne.n	800372c <HAL_DMA_IRQHandler+0xb24>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0208 	bic.w	r2, r2, #8
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e007      	b.n	800373c <HAL_DMA_IRQHandler+0xb34>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0204 	bic.w	r2, r2, #4
 800373a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8165 	beq.w	8003a10 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800374e:	e15f      	b.n	8003a10 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	2202      	movs	r2, #2
 800375a:	409a      	lsls	r2, r3
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80c5 	beq.w	80038f0 <HAL_DMA_IRQHandler+0xce8>
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80bf 	beq.w	80038f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	2202      	movs	r2, #2
 800377c:	409a      	lsls	r2, r3
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d018      	beq.n	80037be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d109      	bne.n	80037aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 813a 	beq.w	8003a14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037a8:	e134      	b.n	8003a14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 8130 	beq.w	8003a14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037bc:	e12a      	b.n	8003a14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d168      	bne.n	800389a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a38      	ldr	r2, [pc, #224]	; (80038b0 <HAL_DMA_IRQHandler+0xca8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d04a      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a37      	ldr	r2, [pc, #220]	; (80038b4 <HAL_DMA_IRQHandler+0xcac>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d045      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a35      	ldr	r2, [pc, #212]	; (80038b8 <HAL_DMA_IRQHandler+0xcb0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d040      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a34      	ldr	r2, [pc, #208]	; (80038bc <HAL_DMA_IRQHandler+0xcb4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d03b      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a32      	ldr	r2, [pc, #200]	; (80038c0 <HAL_DMA_IRQHandler+0xcb8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d036      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a31      	ldr	r2, [pc, #196]	; (80038c4 <HAL_DMA_IRQHandler+0xcbc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d031      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2f      	ldr	r2, [pc, #188]	; (80038c8 <HAL_DMA_IRQHandler+0xcc0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d02c      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2e      	ldr	r2, [pc, #184]	; (80038cc <HAL_DMA_IRQHandler+0xcc4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d027      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2c      	ldr	r2, [pc, #176]	; (80038d0 <HAL_DMA_IRQHandler+0xcc8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d022      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a2b      	ldr	r2, [pc, #172]	; (80038d4 <HAL_DMA_IRQHandler+0xccc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d01d      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a29      	ldr	r2, [pc, #164]	; (80038d8 <HAL_DMA_IRQHandler+0xcd0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d018      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a28      	ldr	r2, [pc, #160]	; (80038dc <HAL_DMA_IRQHandler+0xcd4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d013      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a26      	ldr	r2, [pc, #152]	; (80038e0 <HAL_DMA_IRQHandler+0xcd8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00e      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a25      	ldr	r2, [pc, #148]	; (80038e4 <HAL_DMA_IRQHandler+0xcdc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d009      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <HAL_DMA_IRQHandler+0xce0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d004      	beq.n	8003868 <HAL_DMA_IRQHandler+0xc60>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a22      	ldr	r2, [pc, #136]	; (80038ec <HAL_DMA_IRQHandler+0xce4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d108      	bne.n	800387a <HAL_DMA_IRQHandler+0xc72>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0214 	bic.w	r2, r2, #20
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e007      	b.n	800388a <HAL_DMA_IRQHandler+0xc82>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 020a 	bic.w	r2, r2, #10
 8003888:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80b8 	beq.w	8003a14 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038ac:	e0b2      	b.n	8003a14 <HAL_DMA_IRQHandler+0xe0c>
 80038ae:	bf00      	nop
 80038b0:	40020010 	.word	0x40020010
 80038b4:	40020028 	.word	0x40020028
 80038b8:	40020040 	.word	0x40020040
 80038bc:	40020058 	.word	0x40020058
 80038c0:	40020070 	.word	0x40020070
 80038c4:	40020088 	.word	0x40020088
 80038c8:	400200a0 	.word	0x400200a0
 80038cc:	400200b8 	.word	0x400200b8
 80038d0:	40020410 	.word	0x40020410
 80038d4:	40020428 	.word	0x40020428
 80038d8:	40020440 	.word	0x40020440
 80038dc:	40020458 	.word	0x40020458
 80038e0:	40020470 	.word	0x40020470
 80038e4:	40020488 	.word	0x40020488
 80038e8:	400204a0 	.word	0x400204a0
 80038ec:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2208      	movs	r2, #8
 80038fa:	409a      	lsls	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 8088 	beq.w	8003a16 <HAL_DMA_IRQHandler+0xe0e>
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8082 	beq.w	8003a16 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a41      	ldr	r2, [pc, #260]	; (8003a1c <HAL_DMA_IRQHandler+0xe14>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d04a      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a3f      	ldr	r2, [pc, #252]	; (8003a20 <HAL_DMA_IRQHandler+0xe18>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d045      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a3e      	ldr	r2, [pc, #248]	; (8003a24 <HAL_DMA_IRQHandler+0xe1c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d040      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a3c      	ldr	r2, [pc, #240]	; (8003a28 <HAL_DMA_IRQHandler+0xe20>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d03b      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a3b      	ldr	r2, [pc, #236]	; (8003a2c <HAL_DMA_IRQHandler+0xe24>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d036      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a39      	ldr	r2, [pc, #228]	; (8003a30 <HAL_DMA_IRQHandler+0xe28>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d031      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a38      	ldr	r2, [pc, #224]	; (8003a34 <HAL_DMA_IRQHandler+0xe2c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d02c      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a36      	ldr	r2, [pc, #216]	; (8003a38 <HAL_DMA_IRQHandler+0xe30>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d027      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a35      	ldr	r2, [pc, #212]	; (8003a3c <HAL_DMA_IRQHandler+0xe34>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d022      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a33      	ldr	r2, [pc, #204]	; (8003a40 <HAL_DMA_IRQHandler+0xe38>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d01d      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a32      	ldr	r2, [pc, #200]	; (8003a44 <HAL_DMA_IRQHandler+0xe3c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d018      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a30      	ldr	r2, [pc, #192]	; (8003a48 <HAL_DMA_IRQHandler+0xe40>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <HAL_DMA_IRQHandler+0xe44>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00e      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2d      	ldr	r2, [pc, #180]	; (8003a50 <HAL_DMA_IRQHandler+0xe48>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d009      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2c      	ldr	r2, [pc, #176]	; (8003a54 <HAL_DMA_IRQHandler+0xe4c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d004      	beq.n	80039b2 <HAL_DMA_IRQHandler+0xdaa>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2a      	ldr	r2, [pc, #168]	; (8003a58 <HAL_DMA_IRQHandler+0xe50>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d108      	bne.n	80039c4 <HAL_DMA_IRQHandler+0xdbc>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 021c 	bic.w	r2, r2, #28
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	e007      	b.n	80039d4 <HAL_DMA_IRQHandler+0xdcc>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 020e 	bic.w	r2, r2, #14
 80039d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2201      	movs	r2, #1
 80039de:	409a      	lsls	r2, r3
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
 8003a0a:	e004      	b.n	8003a16 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003a0c:	bf00      	nop
 8003a0e:	e002      	b.n	8003a16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a10:	bf00      	nop
 8003a12:	e000      	b.n	8003a16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a14:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a16:	3728      	adds	r7, #40	; 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40020010 	.word	0x40020010
 8003a20:	40020028 	.word	0x40020028
 8003a24:	40020040 	.word	0x40020040
 8003a28:	40020058 	.word	0x40020058
 8003a2c:	40020070 	.word	0x40020070
 8003a30:	40020088 	.word	0x40020088
 8003a34:	400200a0 	.word	0x400200a0
 8003a38:	400200b8 	.word	0x400200b8
 8003a3c:	40020410 	.word	0x40020410
 8003a40:	40020428 	.word	0x40020428
 8003a44:	40020440 	.word	0x40020440
 8003a48:	40020458 	.word	0x40020458
 8003a4c:	40020470 	.word	0x40020470
 8003a50:	40020488 	.word	0x40020488
 8003a54:	400204a0 	.word	0x400204a0
 8003a58:	400204b8 	.word	0x400204b8

08003a5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a42      	ldr	r2, [pc, #264]	; (8003b74 <DMA_CalcBaseAndBitshift+0x118>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d04a      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a41      	ldr	r2, [pc, #260]	; (8003b78 <DMA_CalcBaseAndBitshift+0x11c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d045      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a3f      	ldr	r2, [pc, #252]	; (8003b7c <DMA_CalcBaseAndBitshift+0x120>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d040      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a3e      	ldr	r2, [pc, #248]	; (8003b80 <DMA_CalcBaseAndBitshift+0x124>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d03b      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a3c      	ldr	r2, [pc, #240]	; (8003b84 <DMA_CalcBaseAndBitshift+0x128>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d036      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a3b      	ldr	r2, [pc, #236]	; (8003b88 <DMA_CalcBaseAndBitshift+0x12c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d031      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a39      	ldr	r2, [pc, #228]	; (8003b8c <DMA_CalcBaseAndBitshift+0x130>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d02c      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a38      	ldr	r2, [pc, #224]	; (8003b90 <DMA_CalcBaseAndBitshift+0x134>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d027      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a36      	ldr	r2, [pc, #216]	; (8003b94 <DMA_CalcBaseAndBitshift+0x138>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d022      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a35      	ldr	r2, [pc, #212]	; (8003b98 <DMA_CalcBaseAndBitshift+0x13c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d01d      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a33      	ldr	r2, [pc, #204]	; (8003b9c <DMA_CalcBaseAndBitshift+0x140>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d018      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a32      	ldr	r2, [pc, #200]	; (8003ba0 <DMA_CalcBaseAndBitshift+0x144>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d013      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a30      	ldr	r2, [pc, #192]	; (8003ba4 <DMA_CalcBaseAndBitshift+0x148>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00e      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a2f      	ldr	r2, [pc, #188]	; (8003ba8 <DMA_CalcBaseAndBitshift+0x14c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d009      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2d      	ldr	r2, [pc, #180]	; (8003bac <DMA_CalcBaseAndBitshift+0x150>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <DMA_CalcBaseAndBitshift+0xa8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a2c      	ldr	r2, [pc, #176]	; (8003bb0 <DMA_CalcBaseAndBitshift+0x154>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <DMA_CalcBaseAndBitshift+0xac>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <DMA_CalcBaseAndBitshift+0xae>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d024      	beq.n	8003b58 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	3b10      	subs	r3, #16
 8003b16:	4a27      	ldr	r2, [pc, #156]	; (8003bb4 <DMA_CalcBaseAndBitshift+0x158>)
 8003b18:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	4a24      	ldr	r2, [pc, #144]	; (8003bb8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003b28:	5cd3      	ldrb	r3, [r2, r3]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d908      	bls.n	8003b48 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b1f      	ldr	r3, [pc, #124]	; (8003bbc <DMA_CalcBaseAndBitshift+0x160>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	1d1a      	adds	r2, r3, #4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	659a      	str	r2, [r3, #88]	; 0x58
 8003b46:	e00d      	b.n	8003b64 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <DMA_CalcBaseAndBitshift+0x160>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6593      	str	r3, [r2, #88]	; 0x58
 8003b56:	e005      	b.n	8003b64 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	40020010 	.word	0x40020010
 8003b78:	40020028 	.word	0x40020028
 8003b7c:	40020040 	.word	0x40020040
 8003b80:	40020058 	.word	0x40020058
 8003b84:	40020070 	.word	0x40020070
 8003b88:	40020088 	.word	0x40020088
 8003b8c:	400200a0 	.word	0x400200a0
 8003b90:	400200b8 	.word	0x400200b8
 8003b94:	40020410 	.word	0x40020410
 8003b98:	40020428 	.word	0x40020428
 8003b9c:	40020440 	.word	0x40020440
 8003ba0:	40020458 	.word	0x40020458
 8003ba4:	40020470 	.word	0x40020470
 8003ba8:	40020488 	.word	0x40020488
 8003bac:	400204a0 	.word	0x400204a0
 8003bb0:	400204b8 	.word	0x400204b8
 8003bb4:	aaaaaaab 	.word	0xaaaaaaab
 8003bb8:	08027ff8 	.word	0x08027ff8
 8003bbc:	fffffc00 	.word	0xfffffc00

08003bc0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d120      	bne.n	8003c16 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d858      	bhi.n	8003c8e <DMA_CheckFifoParam+0xce>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <DMA_CheckFifoParam+0x24>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003bf5 	.word	0x08003bf5
 8003be8:	08003c07 	.word	0x08003c07
 8003bec:	08003bf5 	.word	0x08003bf5
 8003bf0:	08003c8f 	.word	0x08003c8f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d048      	beq.n	8003c92 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c04:	e045      	b.n	8003c92 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c0e:	d142      	bne.n	8003c96 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c14:	e03f      	b.n	8003c96 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1e:	d123      	bne.n	8003c68 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d838      	bhi.n	8003c9a <DMA_CheckFifoParam+0xda>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <DMA_CheckFifoParam+0x70>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003c41 	.word	0x08003c41
 8003c34:	08003c47 	.word	0x08003c47
 8003c38:	08003c41 	.word	0x08003c41
 8003c3c:	08003c59 	.word	0x08003c59
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
        break;
 8003c44:	e030      	b.n	8003ca8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d025      	beq.n	8003c9e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c56:	e022      	b.n	8003c9e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c60:	d11f      	bne.n	8003ca2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c66:	e01c      	b.n	8003ca2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d902      	bls.n	8003c76 <DMA_CheckFifoParam+0xb6>
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d003      	beq.n	8003c7c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003c74:	e018      	b.n	8003ca8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
        break;
 8003c7a:	e015      	b.n	8003ca8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00e      	beq.n	8003ca6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8003c8c:	e00b      	b.n	8003ca6 <DMA_CheckFifoParam+0xe6>
        break;
 8003c8e:	bf00      	nop
 8003c90:	e00a      	b.n	8003ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8003c92:	bf00      	nop
 8003c94:	e008      	b.n	8003ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8003c96:	bf00      	nop
 8003c98:	e006      	b.n	8003ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8003c9a:	bf00      	nop
 8003c9c:	e004      	b.n	8003ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8003c9e:	bf00      	nop
 8003ca0:	e002      	b.n	8003ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8003ca2:	bf00      	nop
 8003ca4:	e000      	b.n	8003ca8 <DMA_CheckFifoParam+0xe8>
    break;
 8003ca6:	bf00      	nop
    }
  }

  return status;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop

08003cb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a38      	ldr	r2, [pc, #224]	; (8003dac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d022      	beq.n	8003d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a36      	ldr	r2, [pc, #216]	; (8003db0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01d      	beq.n	8003d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a35      	ldr	r2, [pc, #212]	; (8003db4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d018      	beq.n	8003d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a33      	ldr	r2, [pc, #204]	; (8003db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a32      	ldr	r2, [pc, #200]	; (8003dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a30      	ldr	r2, [pc, #192]	; (8003dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2f      	ldr	r2, [pc, #188]	; (8003dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d004      	beq.n	8003d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2d      	ldr	r2, [pc, #180]	; (8003dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d101      	bne.n	8003d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01a      	beq.n	8003d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	3b08      	subs	r3, #8
 8003d28:	4a28      	ldr	r2, [pc, #160]	; (8003dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a24      	ldr	r2, [pc, #144]	; (8003dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003d44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003d54:	e024      	b.n	8003da0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	3b10      	subs	r3, #16
 8003d5e:	4a1e      	ldr	r2, [pc, #120]	; (8003dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d806      	bhi.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4a1b      	ldr	r2, [pc, #108]	; (8003de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d902      	bls.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	461a      	mov	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003d90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2201      	movs	r2, #1
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	58025408 	.word	0x58025408
 8003db0:	5802541c 	.word	0x5802541c
 8003db4:	58025430 	.word	0x58025430
 8003db8:	58025444 	.word	0x58025444
 8003dbc:	58025458 	.word	0x58025458
 8003dc0:	5802546c 	.word	0x5802546c
 8003dc4:	58025480 	.word	0x58025480
 8003dc8:	58025494 	.word	0x58025494
 8003dcc:	cccccccd 	.word	0xcccccccd
 8003dd0:	16009600 	.word	0x16009600
 8003dd4:	58025880 	.word	0x58025880
 8003dd8:	aaaaaaab 	.word	0xaaaaaaab
 8003ddc:	400204b8 	.word	0x400204b8
 8003de0:	4002040f 	.word	0x4002040f
 8003de4:	10008200 	.word	0x10008200
 8003de8:	40020880 	.word	0x40020880

08003dec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d04a      	beq.n	8003e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d847      	bhi.n	8003e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d022      	beq.n	8003e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d01d      	beq.n	8003e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a22      	ldr	r2, [pc, #136]	; (8003eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d018      	beq.n	8003e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a21      	ldr	r2, [pc, #132]	; (8003eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00e      	beq.n	8003e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d009      	beq.n	8003e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d101      	bne.n	8003e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003e74:	671a      	str	r2, [r3, #112]	; 0x70
 8003e76:	e009      	b.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4b14      	ldr	r3, [pc, #80]	; (8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	461a      	mov	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003e8a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	2201      	movs	r2, #1
 8003e92:	409a      	lsls	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	58025408 	.word	0x58025408
 8003ea8:	5802541c 	.word	0x5802541c
 8003eac:	58025430 	.word	0x58025430
 8003eb0:	58025444 	.word	0x58025444
 8003eb4:	58025458 	.word	0x58025458
 8003eb8:	5802546c 	.word	0x5802546c
 8003ebc:	58025480 	.word	0x58025480
 8003ec0:	58025494 	.word	0x58025494
 8003ec4:	1600963f 	.word	0x1600963f
 8003ec8:	58025940 	.word	0x58025940
 8003ecc:	1000823f 	.word	0x1000823f
 8003ed0:	40020940 	.word	0x40020940

08003ed4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e0c6      	b.n	8004074 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f006 feb2 	bl	800ac58 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2223      	movs	r2, #35	; 0x23
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efa:	4b60      	ldr	r3, [pc, #384]	; (800407c <HAL_ETH_Init+0x1a8>)
 8003efc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f00:	4a5e      	ldr	r2, [pc, #376]	; (800407c <HAL_ETH_Init+0x1a8>)
 8003f02:	f043 0302 	orr.w	r3, r3, #2
 8003f06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f0a:	4b5c      	ldr	r3, [pc, #368]	; (800407c <HAL_ETH_Init+0x1a8>)
 8003f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	7a1b      	ldrb	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d103      	bne.n	8003f28 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003f20:	2000      	movs	r0, #0
 8003f22:	f7fe f8a7 	bl	8002074 <HAL_SYSCFG_ETHInterfaceSelect>
 8003f26:	e003      	b.n	8003f30 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003f28:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003f2c:	f7fe f8a2 	bl	8002074 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f48:	f7fe f87c 	bl	8002044 <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f4e:	e00f      	b.n	8003f70 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003f50:	f7fe f878 	bl	8002044 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f5e:	d907      	bls.n	8003f70 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2204      	movs	r2, #4
 8003f64:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	22e0      	movs	r2, #224	; 0xe0
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e081      	b.n	8004074 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e6      	bne.n	8003f50 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f001 fae8 	bl	8005558 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003f88:	f003 fdd2 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	4a3c      	ldr	r2, [pc, #240]	; (8004080 <HAL_ETH_Init+0x1ac>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	0c9a      	lsrs	r2, r3, #18
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3a01      	subs	r2, #1
 8003f9c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f001 fa3b 	bl	800541c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003fbc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003fc0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	22e0      	movs	r2, #224	; 0xe0
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e04a      	b.n	8004074 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	f241 1308 	movw	r3, #4360	; 0x1108
 8003fe6:	4413      	add	r3, r2
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b26      	ldr	r3, [pc, #152]	; (8004084 <HAL_ETH_Init+0x1b0>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6952      	ldr	r2, [r2, #20]
 8003ff2:	0052      	lsls	r2, r2, #1
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	6809      	ldr	r1, [r1, #0]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	f241 1308 	movw	r3, #4360	; 0x1108
 8003ffe:	440b      	add	r3, r1
 8004000:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f001 fb00 	bl	8005608 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f001 fb44 	bl	8005696 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	3305      	adds	r3, #5
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	4619      	mov	r1, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	3303      	adds	r3, #3
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	061a      	lsls	r2, r3, #24
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	3302      	adds	r3, #2
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	041b      	lsls	r3, r3, #16
 8004040:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	3301      	adds	r3, #1
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800404c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800405a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800405c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2210      	movs	r2, #16
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2210      	movs	r2, #16
 8004070:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	58024400 	.word	0x58024400
 8004080:	431bde83 	.word	0x431bde83
 8004084:	ffff8001 	.word	0xffff8001

08004088 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	330a      	adds	r3, #10
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_ETH_DescAssignMemory+0x28>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d904      	bls.n	80040ba <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e021      	b.n	80040fe <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	2b10      	cmp	r3, #16
 8004118:	d174      	bne.n	8004204 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2223      	movs	r2, #35	; 0x23
 800411e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e00f      	b.n	8004146 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	330a      	adds	r3, #10
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b03      	cmp	r3, #3
 800414a:	d9ec      	bls.n	8004126 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0202 	orr.w	r2, r2, #2
 8004160:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0201 	orr.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	f241 1304 	movw	r3, #4356	; 0x1104
 800418e:	4413      	add	r3, r2
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6811      	ldr	r1, [r2, #0]
 8004196:	f043 0201 	orr.w	r2, r3, #1
 800419a:	f241 1304 	movw	r3, #4356	; 0x1104
 800419e:	440b      	add	r3, r1
 80041a0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	f241 1308 	movw	r3, #4360	; 0x1108
 80041aa:	4413      	add	r3, r2
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6811      	ldr	r1, [r2, #0]
 80041b2:	f043 0201 	orr.w	r2, r3, #1
 80041b6:	f241 1308 	movw	r3, #4360	; 0x1108
 80041ba:	440b      	add	r3, r1
 80041bc:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 80041d0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80041d4:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	f241 1334 	movw	r3, #4404	; 0x1134
 80041de:	4413      	add	r3, r2
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6811      	ldr	r1, [r2, #0]
 80041e6:	f24d 0241 	movw	r2, #53313	; 0xd041
 80041ea:	431a      	orrs	r2, r3
 80041ec:	f241 1334 	movw	r3, #4404	; 0x1134
 80041f0:	440b      	add	r3, r1
 80041f2:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2210      	movs	r2, #16
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2222      	movs	r2, #34	; 0x22
 80041fe:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	2b00      	cmp	r3, #0
 8004222:	d067      	beq.n	80042f4 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2223      	movs	r2, #35	; 0x23
 8004228:	655a      	str	r2, [r3, #84]	; 0x54
    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	f241 1334 	movw	r3, #4404	; 0x1134
 8004232:	4413      	add	r3, r2
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6811      	ldr	r1, [r2, #0]
 800423a:	4a32      	ldr	r2, [pc, #200]	; (8004304 <HAL_ETH_Stop_IT+0xf0>)
 800423c:	401a      	ands	r2, r3
 800423e:	f241 1334 	movw	r3, #4404	; 0x1134
 8004242:	440b      	add	r3, r1
 8004244:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	f241 1304 	movw	r3, #4356	; 0x1104
 800424e:	4413      	add	r3, r2
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6811      	ldr	r1, [r2, #0]
 8004256:	f023 0201 	bic.w	r2, r3, #1
 800425a:	f241 1304 	movw	r3, #4356	; 0x1104
 800425e:	440b      	add	r3, r1
 8004260:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	f241 1308 	movw	r3, #4360	; 0x1108
 800426a:	4413      	add	r3, r2
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6811      	ldr	r1, [r2, #0]
 8004272:	f023 0201 	bic.w	r2, r3, #1
 8004276:	f241 1308 	movw	r3, #4360	; 0x1108
 800427a:	440b      	add	r3, r1
 800427c:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0202 	bic.w	r2, r2, #2
 80042b0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e00f      	b.n	80042d8 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	330a      	adds	r3, #10
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3301      	adds	r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d9ec      	bls.n	80042b8 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2210      	movs	r2, #16
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2210      	movs	r2, #16
 80042ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	e000      	b.n	80042f6 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
  }
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	ffff2fbe 	.word	0xffff2fbe

08004308 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d107      	bne.n	800432a <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431e:	f043 0201 	orr.w	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e073      	b.n	8004412 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	2b10      	cmp	r3, #16
 8004330:	d16e      	bne.n	8004410 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004332:	2200      	movs	r2, #0
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f001 fa0a 	bl	8005750 <ETH_Prepare_Tx_Descriptors>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004346:	f043 0202 	orr.w	r2, r3, #2
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e05f      	b.n	8004412 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3206      	adds	r2, #6
 800435a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800435e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	629a      	str	r2, [r3, #40]	; 0x28
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	2b03      	cmp	r3, #3
 8004370:	d904      	bls.n	800437c <HAL_ETH_Transmit+0x74>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	1f1a      	subs	r2, r3, #4
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	3106      	adds	r1, #6
 8004388:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800438c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004390:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8004392:	f7fd fe57 	bl	8002044 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8004398:	e034      	b.n	8004404 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d011      	beq.n	80043d0 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b0:	f043 0208 	orr.w	r2, r3, #8
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	22e0      	movs	r2, #224	; 0xe0
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e020      	b.n	8004412 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d6:	d015      	beq.n	8004404 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80043d8:	f7fd fe34 	bl	8002044 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d302      	bcc.n	80043ee <HAL_ETH_Transmit+0xe6>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f2:	f043 0204 	orr.w	r2, r3, #4
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	22e0      	movs	r2, #224	; 0xe0
 80043fe:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e006      	b.n	8004412 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	dbc6      	blt.n	800439a <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	e000      	b.n	8004412 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
  }
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800441a:	b480      	push	{r7}
 800441c:	b089      	sub	sp, #36	; 0x24
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	332c      	adds	r3, #44	; 0x2c
 8004426:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004436:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d06b      	beq.n	8004524 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 800444c:	2300      	movs	r3, #0
 800444e:	e0ce      	b.n	80045ee <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	3301      	adds	r3, #1
 8004454:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d036      	beq.n	80044d0 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	3301      	adds	r3, #1
 8004466:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3301      	adds	r3, #1
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b03      	cmp	r3, #3
 800447c:	d902      	bls.n	8004484 <HAL_ETH_IsRxDataAvailable+0x6a>
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	3b04      	subs	r3, #4
 8004482:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800448c:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	db11      	blt.n	80044ba <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00b      	beq.n	80044ba <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2201      	movs	r2, #1
 80044a6:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d902      	bls.n	80044ba <HAL_ETH_IsRxDataAvailable+0xa0>
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	3b04      	subs	r3, #4
 80044b8:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e08e      	b.n	80045ee <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d012      	beq.n	8004502 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80044e0:	2301      	movs	r3, #1
 80044e2:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	3301      	adds	r3, #1
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d902      	bls.n	80044f6 <HAL_ETH_IsRxDataAvailable+0xdc>
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	3b04      	subs	r3, #4
 80044f4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fe:	61bb      	str	r3, [r7, #24]
 8004500:	e010      	b.n	8004524 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3301      	adds	r3, #1
 8004506:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	3301      	adds	r3, #1
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	2b03      	cmp	r3, #3
 8004512:	d902      	bls.n	800451a <HAL_ETH_IsRxDataAvailable+0x100>
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	3b04      	subs	r3, #4
 8004518:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004522:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	db02      	blt.n	8004532 <HAL_ETH_IsRxDataAvailable+0x118>
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d98e      	bls.n	8004450 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d056      	beq.n	80045e6 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004550:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e03b      	b.n	80045d0 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004566:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d009      	beq.n	8004584 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d20d      	bcs.n	80045ca <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3301      	adds	r3, #1
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d902      	bls.n	80045c0 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3b04      	subs	r3, #4
 80045be:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c8:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	3301      	adds	r3, #1
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d3bf      	bcc.n	8004558 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6819      	ldr	r1, [r3, #0]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	f241 1328 	movw	r3, #4392	; 0x1128
 80045e2:	440b      	add	r3, r1
 80045e4:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2200      	movs	r2, #0
 80045ea:	619a      	str	r2, [r3, #24]

  return 0;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3724      	adds	r7, #36	; 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b08a      	sub	sp, #40	; 0x28
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	332c      	adds	r3, #44	; 0x2c
 8004608:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461c:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d104      	bne.n	8004632 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e07d      	b.n	800472e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10f      	bne.n	800465a <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff feed 	bl	800441a <HAL_ETH_IsRxDataAvailable>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e071      	b.n	800472e <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004658:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800465a:	2300      	movs	r3, #0
 800465c:	623b      	str	r3, [r7, #32]
 800465e:	e031      	b.n	80046c4 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	461a      	mov	r2, r3
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695a      	ldr	r2, [r3, #20]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00b      	beq.n	8004692 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	461a      	mov	r2, r3
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800469a:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	3301      	adds	r3, #1
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d902      	bls.n	80046ae <HAL_ETH_GetRxDataBuffer+0xb4>
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	3b04      	subs	r3, #4
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b6:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	3301      	adds	r3, #1
 80046c2:	623b      	str	r3, [r7, #32]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	6a3a      	ldr	r2, [r7, #32]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d3c7      	bcc.n	8004660 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	461a      	mov	r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d803      	bhi.n	80046fa <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	e018      	b.n	800472c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d012      	beq.n	8004728 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	461a      	mov	r2, r3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	1ad2      	subs	r2, r2, r3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	e001      	b.n	800472c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3728      	adds	r7, #40	; 0x28
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b086      	sub	sp, #24
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	332c      	adds	r3, #44	; 0x2c
 8004744:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d107      	bne.n	8004764 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff fe60 	bl	800441a <HAL_ETH_IsRxDataAvailable>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e017      	b.n	8004794 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	4413      	add	r3, r2
 800476c:	3b01      	subs	r3, #1
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d902      	bls.n	800477c <HAL_ETH_GetRxDataLength+0x46>
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	3b04      	subs	r3, #4
 800477a:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004784:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800479c:	b480      	push	{r7}
 800479e:	b089      	sub	sp, #36	; 0x24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	332c      	adds	r3, #44	; 0x2c
 80047a8:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b8:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e057      	b.n	800487c <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	3301      	adds	r3, #1
 80047d8:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	e03b      	b.n	8004858 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047ee:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d009      	beq.n	800480c <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	3b01      	subs	r3, #1
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	429a      	cmp	r2, r3
 8004834:	d20d      	bcs.n	8004852 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3301      	adds	r3, #1
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d902      	bls.n	8004848 <HAL_ETH_BuildRxDescriptors+0xac>
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3b04      	subs	r3, #4
 8004846:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004850:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	3301      	adds	r3, #1
 8004856:	613b      	str	r3, [r7, #16]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	429a      	cmp	r2, r3
 800485e:	d3bf      	bcc.n	80047e0 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6819      	ldr	r1, [r3, #0]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	f241 1328 	movw	r3, #4392	; 0x1128
 800486a:	440b      	add	r3, r1
 800486c:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3724      	adds	r7, #36	; 0x24
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b40      	cmp	r3, #64	; 0x40
 80048a0:	d113      	bne.n	80048ca <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	f241 1334 	movw	r3, #4404	; 0x1134
 80048aa:	4413      	add	r3, r2
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b40      	cmp	r3, #64	; 0x40
 80048b4:	d109      	bne.n	80048ca <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f006 faa4 	bl	800ae04 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80048c4:	f248 0240 	movw	r2, #32832	; 0x8040
 80048c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d113      	bne.n	8004904 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	f241 1334 	movw	r3, #4404	; 0x1134
 80048e4:	4413      	add	r3, r2
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d109      	bne.n	8004904 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f8c7 	bl	8004a84 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80048fe:	f248 0201 	movw	r2, #32769	; 0x8001
 8004902:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004916:	d149      	bne.n	80049ac <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f241 1334 	movw	r3, #4404	; 0x1134
 8004920:	4413      	add	r3, r2
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800492c:	d13e      	bne.n	80049ac <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	f043 0208 	orr.w	r2, r3, #8
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494c:	d11b      	bne.n	8004986 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	f241 1302 	movw	r3, #4354	; 0x1102
 800495c:	4013      	ands	r3, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	f241 1334 	movw	r3, #4404	; 0x1134
 800496a:	4413      	add	r3, r2
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6811      	ldr	r1, [r2, #0]
 8004972:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004976:	f241 1334 	movw	r3, #4404	; 0x1134
 800497a:	440b      	add	r3, r1
 800497c:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	22e0      	movs	r2, #224	; 0xe0
 8004982:	655a      	str	r2, [r3, #84]	; 0x54
 8004984:	e00f      	b.n	80049a6 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80049a0:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 80049a4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f876 	bl	8004a98 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049b4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80049b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049bc:	d10e      	bne.n	80049dc <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	22e0      	movs	r2, #224	; 0xe0
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f86b 	bl	8004aac <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d10d      	bne.n	8004a08 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80049f4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f85f 	bl	8004ac0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d10d      	bne.n	8004a34 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004a20:	f003 020f 	and.w	r2, r3, #15
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f853 	bl	8004ad4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004a34:	f7fd fc8e 	bl	8002354 <HAL_GetCurrentCPUID>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d10d      	bne.n	8004a5a <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <HAL_ETH_IRQHandler+0x1f4>)
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d014      	beq.n	8004a74 <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <HAL_ETH_IRQHandler+0x1f4>)
 8004a4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004a50:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f848 	bl	8004ae8 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8004a58:	e00c      	b.n	8004a74 <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004a5a:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <HAL_ETH_IRQHandler+0x1f8>)
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d006      	beq.n	8004a74 <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <HAL_ETH_IRQHandler+0x1f8>)
 8004a68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f83a 	bl	8004ae8 <HAL_ETH_WakeUpCallback>
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	58000080 	.word	0x58000080
 8004a80:	580000c0 	.word	0x580000c0

08004a84 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e03e      	b.n	8004b9c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b26:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	055b      	lsls	r3, r3, #21
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f043 030c 	orr.w	r3, r3, #12
 8004b4a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004b5e:	f7fd fa71 	bl	8002044 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004b64:	e009      	b.n	8004b7a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8004b66:	f7fd fa6d 	bl	8002044 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b74:	d901      	bls.n	8004b7a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e010      	b.n	8004b9c <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1ed      	bne.n	8004b66 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	461a      	mov	r2, r3
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e03c      	b.n	8004c40 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bce:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	055b      	lsls	r3, r3, #21
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f023 030c 	bic.w	r3, r3, #12
 8004bf2:	f043 0304 	orr.w	r3, r3, #4
 8004bf6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <HAL_ETH_WritePHYRegister+0xa4>)
 8004c06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004c0a:	4a0f      	ldr	r2, [pc, #60]	; (8004c48 <HAL_ETH_WritePHYRegister+0xa4>)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004c12:	f7fd fa17 	bl	8002044 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004c18:	e009      	b.n	8004c2e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8004c1a:	f7fd fa13 	bl	8002044 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c28:	d901      	bls.n	8004c2e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e008      	b.n	8004c40 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1ed      	bne.n	8004c1a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40028000 	.word	0x40028000

08004c4c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e1c3      	b.n	8004fe8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 020c 	and.w	r2, r3, #12
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf14      	ite	ne
 8004c7c:	2301      	movne	r3, #1
 8004c7e:	2300      	moveq	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bf0c      	ite	eq
 8004ca6:	2301      	moveq	r3, #1
 8004ca8:	2300      	movne	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bf14      	ite	ne
 8004cc2:	2301      	movne	r3, #1
 8004cc4:	2300      	moveq	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf14      	ite	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	2300      	moveq	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bf14      	ite	ne
 8004d10:	2301      	movne	r3, #1
 8004d12:	2300      	moveq	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	bf14      	ite	ne
 8004d46:	2301      	movne	r3, #1
 8004d48:	2300      	moveq	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf0c      	ite	eq
 8004d60:	2301      	moveq	r3, #1
 8004d62:	2300      	movne	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bf14      	ite	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	2300      	moveq	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	461a      	mov	r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bf14      	ite	ne
 8004e0a:	2301      	movne	r3, #1
 8004e0c:	2300      	moveq	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf14      	ite	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	2300      	moveq	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	0e5b      	lsrs	r3, r3, #25
 8004eaa:	f003 021f 	and.w	r2, r3, #31
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 020f 	and.w	r2, r3, #15
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bf14      	ite	ne
 8004eea:	2301      	movne	r3, #1
 8004eec:	2300      	moveq	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bf14      	ite	ne
 8004f40:	2301      	movne	r3, #1
 8004f42:	2300      	moveq	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	bf14      	ite	ne
 8004f5e:	2301      	movne	r3, #1
 8004f60:	2300      	moveq	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004f74:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f84:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bf14      	ite	ne
 8004f9c:	2301      	movne	r3, #1
 8004f9e:	2300      	moveq	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bf14      	ite	ne
 8004fba:	2301      	movne	r3, #1
 8004fbc:	2300      	moveq	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	bf0c      	ite	eq
 8004fd8:	2301      	moveq	r3, #1
 8004fda:	2300      	movne	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e00a      	b.n	800501e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500c:	2b10      	cmp	r3, #16
 800500e:	d105      	bne.n	800501c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f860 	bl	80050d8 <ETH_SetMACConfig>

    return HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e000      	b.n	800501e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
  }
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005038:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005040:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005042:	f002 fd75 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8005046:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d908      	bls.n	8005062 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d804      	bhi.n	8005062 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	e027      	b.n	80050b2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4a18      	ldr	r2, [pc, #96]	; (80050c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d908      	bls.n	800507c <HAL_ETH_SetMDIOClockRange+0x54>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4a17      	ldr	r2, [pc, #92]	; (80050cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d204      	bcs.n	800507c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	e01a      	b.n	80050b2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4a13      	ldr	r2, [pc, #76]	; (80050cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d303      	bcc.n	800508c <HAL_ETH_SetMDIOClockRange+0x64>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4a12      	ldr	r2, [pc, #72]	; (80050d0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d911      	bls.n	80050b0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4a10      	ldr	r2, [pc, #64]	; (80050d0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d908      	bls.n	80050a6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4a0f      	ldr	r2, [pc, #60]	; (80050d4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d804      	bhi.n	80050a6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e005      	b.n	80050b2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	e000      	b.n	80050b2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80050b0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	01312cff 	.word	0x01312cff
 80050c8:	02160ebf 	.word	0x02160ebf
 80050cc:	03938700 	.word	0x03938700
 80050d0:	05f5e0ff 	.word	0x05f5e0ff
 80050d4:	08f0d17f 	.word	0x08f0d17f

080050d8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80050ea:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	791b      	ldrb	r3, [r3, #4]
 80050f0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80050f2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	7b1b      	ldrb	r3, [r3, #12]
 80050f8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80050fa:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	7b5b      	ldrb	r3, [r3, #13]
 8005100:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005102:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	7b9b      	ldrb	r3, [r3, #14]
 8005108:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800510a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	7bdb      	ldrb	r3, [r3, #15]
 8005110:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005112:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	7c12      	ldrb	r2, [r2, #16]
 8005118:	2a00      	cmp	r2, #0
 800511a:	d102      	bne.n	8005122 <ETH_SetMACConfig+0x4a>
 800511c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005120:	e000      	b.n	8005124 <ETH_SetMACConfig+0x4c>
 8005122:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005124:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	7c52      	ldrb	r2, [r2, #17]
 800512a:	2a00      	cmp	r2, #0
 800512c:	d102      	bne.n	8005134 <ETH_SetMACConfig+0x5c>
 800512e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005132:	e000      	b.n	8005136 <ETH_SetMACConfig+0x5e>
 8005134:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005136:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	7c9b      	ldrb	r3, [r3, #18]
 800513c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800513e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005144:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800514a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	7f1b      	ldrb	r3, [r3, #28]
 8005150:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005152:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	7f5b      	ldrb	r3, [r3, #29]
 8005158:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800515a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	7f92      	ldrb	r2, [r2, #30]
 8005160:	2a00      	cmp	r2, #0
 8005162:	d102      	bne.n	800516a <ETH_SetMACConfig+0x92>
 8005164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005168:	e000      	b.n	800516c <ETH_SetMACConfig+0x94>
 800516a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800516c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	7fdb      	ldrb	r3, [r3, #31]
 8005172:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005174:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	f892 2020 	ldrb.w	r2, [r2, #32]
 800517c:	2a00      	cmp	r2, #0
 800517e:	d102      	bne.n	8005186 <ETH_SetMACConfig+0xae>
 8005180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005184:	e000      	b.n	8005188 <ETH_SetMACConfig+0xb0>
 8005186:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005188:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800518e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005196:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005198:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4b56      	ldr	r3, [pc, #344]	; (8005304 <ETH_SetMACConfig+0x22c>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6812      	ldr	r2, [r2, #0]
 80051b0:	68f9      	ldr	r1, [r7, #12]
 80051b2:	430b      	orrs	r3, r1
 80051b4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051c2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80051c4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051cc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80051ce:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051d6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80051d8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	d102      	bne.n	80051ea <ETH_SetMACConfig+0x112>
 80051e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051e8:	e000      	b.n	80051ec <ETH_SetMACConfig+0x114>
 80051ea:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80051ec:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	4b42      	ldr	r3, [pc, #264]	; (8005308 <ETH_SetMACConfig+0x230>)
 80051fe:	4013      	ands	r3, r2
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	68f9      	ldr	r1, [r7, #12]
 8005206:	430b      	orrs	r3, r1
 8005208:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005210:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	4b3a      	ldr	r3, [pc, #232]	; (800530c <ETH_SetMACConfig+0x234>)
 8005222:	4013      	ands	r3, r2
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	68f9      	ldr	r1, [r7, #12]
 800522a:	430b      	orrs	r3, r1
 800522c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005234:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800523a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005242:	2a00      	cmp	r2, #0
 8005244:	d101      	bne.n	800524a <ETH_SetMACConfig+0x172>
 8005246:	2280      	movs	r2, #128	; 0x80
 8005248:	e000      	b.n	800524c <ETH_SetMACConfig+0x174>
 800524a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800524c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005252:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800525e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005262:	4013      	ands	r3, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	68f9      	ldr	r1, [r7, #12]
 800526a:	430b      	orrs	r3, r1
 800526c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005274:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800527c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528a:	f023 0103 	bic.w	r1, r3, #3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	430a      	orrs	r2, r1
 8005296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80052a2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80052be:	2a00      	cmp	r2, #0
 80052c0:	d101      	bne.n	80052c6 <ETH_SetMACConfig+0x1ee>
 80052c2:	2240      	movs	r2, #64	; 0x40
 80052c4:	e000      	b.n	80052c8 <ETH_SetMACConfig+0x1f0>
 80052c6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80052c8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80052d0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80052d2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80052da:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80052e8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	00048083 	.word	0x00048083
 8005308:	c0f88000 	.word	0xc0f88000
 800530c:	fffffef0 	.word	0xfffffef0

08005310 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	4b38      	ldr	r3, [pc, #224]	; (8005408 <ETH_SetDMAConfig+0xf8>)
 8005326:	4013      	ands	r3, r2
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	6809      	ldr	r1, [r1, #0]
 8005330:	431a      	orrs	r2, r3
 8005332:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005336:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	791b      	ldrb	r3, [r3, #4]
 800533c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005342:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	7b1b      	ldrb	r3, [r3, #12]
 8005348:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	f241 0304 	movw	r3, #4100	; 0x1004
 8005356:	4413      	add	r3, r2
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4b2c      	ldr	r3, [pc, #176]	; (800540c <ETH_SetDMAConfig+0xfc>)
 800535c:	4013      	ands	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6811      	ldr	r1, [r2, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	431a      	orrs	r2, r3
 8005366:	f241 0304 	movw	r3, #4100	; 0x1004
 800536a:	440b      	add	r3, r1
 800536c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	7b5b      	ldrb	r3, [r3, #13]
 8005372:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b22      	ldr	r3, [pc, #136]	; (8005410 <ETH_SetDMAConfig+0x100>)
 8005388:	4013      	ands	r3, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6811      	ldr	r1, [r2, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	431a      	orrs	r2, r3
 8005392:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005396:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	7d1b      	ldrb	r3, [r3, #20]
 80053a0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80053a2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	7f5b      	ldrb	r3, [r3, #29]
 80053a8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	f241 1304 	movw	r3, #4356	; 0x1104
 80053b6:	4413      	add	r3, r2
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b16      	ldr	r3, [pc, #88]	; (8005414 <ETH_SetDMAConfig+0x104>)
 80053bc:	4013      	ands	r3, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6811      	ldr	r1, [r2, #0]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	f241 1304 	movw	r3, #4356	; 0x1104
 80053ca:	440b      	add	r3, r1
 80053cc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	7f1b      	ldrb	r3, [r3, #28]
 80053d2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	f241 1308 	movw	r3, #4360	; 0x1108
 80053e4:	4413      	add	r3, r2
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <ETH_SetDMAConfig+0x108>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6811      	ldr	r1, [r2, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	431a      	orrs	r2, r3
 80053f4:	f241 1308 	movw	r3, #4360	; 0x1108
 80053f8:	440b      	add	r3, r1
 80053fa:	601a      	str	r2, [r3, #0]
}
 80053fc:	bf00      	nop
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	ffff87fd 	.word	0xffff87fd
 800540c:	ffff2ffe 	.word	0xffff2ffe
 8005410:	fffec000 	.word	0xfffec000
 8005414:	ffc0efef 	.word	0xffc0efef
 8005418:	7fc0ffff 	.word	0x7fc0ffff

0800541c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b0a4      	sub	sp, #144	; 0x90
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800542a:	2300      	movs	r3, #0
 800542c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800542e:	2300      	movs	r3, #0
 8005430:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005434:	2300      	movs	r3, #0
 8005436:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005440:	2301      	movs	r3, #1
 8005442:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005446:	2301      	movs	r3, #1
 8005448:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800544c:	2300      	movs	r3, #0
 800544e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800545c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800545e:	2300      	movs	r3, #0
 8005460:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005464:	2300      	movs	r3, #0
 8005466:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005468:	2300      	movs	r3, #0
 800546a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800546e:	2300      	movs	r3, #0
 8005470:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005474:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005478:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800547a:	2300      	movs	r3, #0
 800547c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005480:	2300      	movs	r3, #0
 8005482:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800548a:	2300      	movs	r3, #0
 800548c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005490:	2300      	movs	r3, #0
 8005492:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005496:	2300      	movs	r3, #0
 8005498:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800549a:	2300      	movs	r3, #0
 800549c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800549e:	2300      	movs	r3, #0
 80054a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80054a2:	2300      	movs	r3, #0
 80054a4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80054a8:	2300      	movs	r3, #0
 80054aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80054b4:	2320      	movs	r3, #32
 80054b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80054c6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80054ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80054cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054d0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80054d2:	2300      	movs	r3, #0
 80054d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80054d8:	2302      	movs	r3, #2
 80054da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80054de:	2300      	movs	r3, #0
 80054e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80054f6:	2300      	movs	r3, #0
 80054f8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff fde6 	bl	80050d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800550c:	2301      	movs	r3, #1
 800550e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005510:	2301      	movs	r3, #1
 8005512:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005514:	2300      	movs	r3, #0
 8005516:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005518:	2300      	movs	r3, #0
 800551a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800551e:	2300      	movs	r3, #0
 8005520:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005522:	2300      	movs	r3, #0
 8005524:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005526:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800552a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800552c:	2300      	movs	r3, #0
 800552e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005530:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005534:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800553c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005540:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005542:	f107 0308 	add.w	r3, r7, #8
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff fee1 	bl	8005310 <ETH_SetDMAConfig>
}
 800554e:	bf00      	nop
 8005550:	3790      	adds	r7, #144	; 0x90
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005568:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005570:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005572:	f002 fadd 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8005576:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d908      	bls.n	8005592 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d804      	bhi.n	8005592 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	e027      	b.n	80055e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	4a18      	ldr	r2, [pc, #96]	; (80055f8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d908      	bls.n	80055ac <ETH_MAC_MDIO_ClkConfig+0x54>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	4a17      	ldr	r2, [pc, #92]	; (80055fc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d204      	bcs.n	80055ac <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	e01a      	b.n	80055e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4a13      	ldr	r2, [pc, #76]	; (80055fc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d303      	bcc.n	80055bc <ETH_MAC_MDIO_ClkConfig+0x64>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4a12      	ldr	r2, [pc, #72]	; (8005600 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d911      	bls.n	80055e0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4a10      	ldr	r2, [pc, #64]	; (8005600 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d908      	bls.n	80055d6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4a0f      	ldr	r2, [pc, #60]	; (8005604 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d804      	bhi.n	80055d6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e005      	b.n	80055e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	e000      	b.n	80055e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80055e0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	01312cff 	.word	0x01312cff
 80055f8:	02160ebf 	.word	0x02160ebf
 80055fc:	03938700 	.word	0x03938700
 8005600:	05f5e0ff 	.word	0x05f5e0ff
 8005604:	08f0d17f 	.word	0x08f0d17f

08005608 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	e01d      	b.n	8005652 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68d9      	ldr	r1, [r3, #12]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4613      	mov	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4413      	add	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	440b      	add	r3, r1
 8005626:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2200      	movs	r2, #0
 8005632:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2200      	movs	r2, #0
 8005638:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2200      	movs	r2, #0
 800563e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	3206      	adds	r2, #6
 8005648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3301      	adds	r3, #1
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b03      	cmp	r3, #3
 8005656:	d9de      	bls.n	8005616 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	f241 132c 	movw	r3, #4396	; 0x112c
 8005666:	4413      	add	r3, r2
 8005668:	2203      	movs	r2, #3
 800566a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68d9      	ldr	r1, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	f241 1314 	movw	r3, #4372	; 0x1114
 8005678:	4413      	add	r3, r2
 800567a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005688:	601a      	str	r2, [r3, #0]
}
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e024      	b.n	80056ee <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6919      	ldr	r1, [r3, #16]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4613      	mov	r3, r2
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	4413      	add	r3, r2
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	440b      	add	r3, r1
 80056b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2200      	movs	r2, #0
 80056c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2200      	movs	r2, #0
 80056c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2200      	movs	r2, #0
 80056cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2200      	movs	r2, #0
 80056d2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2200      	movs	r2, #0
 80056d8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	330a      	adds	r3, #10
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3301      	adds	r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d9d7      	bls.n	80056a4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	f241 1330 	movw	r3, #4400	; 0x1130
 800571a:	4413      	add	r3, r2
 800571c:	2203      	movs	r2, #3
 800571e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6919      	ldr	r1, [r3, #16]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	f241 131c 	movw	r3, #4380	; 0x111c
 800572c:	4413      	add	r3, r2
 800572e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	f241 1328 	movw	r3, #4392	; 0x1128
 8005740:	4413      	add	r3, r2
 8005742:	6019      	str	r1, [r3, #0]
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005750:	b480      	push	{r7}
 8005752:	b08d      	sub	sp, #52	; 0x34
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3318      	adds	r3, #24
 8005760:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 800576e:	2300      	movs	r3, #0
 8005770:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800577a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800578a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800578e:	d101      	bne.n	8005794 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8005790:	2302      	movs	r3, #2
 8005792:	e223      	b.n	8005bdc <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d044      	beq.n	800582a <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	4b72      	ldr	r3, [pc, #456]	; (8005970 <ETH_Prepare_Tx_Descriptors+0x220>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057ac:	431a      	orrs	r2, r3
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80057cc:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d027      	beq.n	800582a <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	041b      	lsls	r3, r3, #16
 80057e6:	431a      	orrs	r2, r3
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	431a      	orrs	r2, r3
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005818:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005828:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00e      	beq.n	8005854 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	4b4e      	ldr	r3, [pc, #312]	; (8005974 <ETH_Prepare_Tx_Descriptors+0x224>)
 800583c:	4013      	ands	r3, r2
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	6992      	ldr	r2, [r2, #24]
 8005842:	431a      	orrs	r2, r3
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <ETH_Prepare_Tx_Descriptors+0x11c>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	d030      	beq.n	80058ce <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005886:	3301      	adds	r3, #1
 8005888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	2b03      	cmp	r3, #3
 800588e:	d902      	bls.n	8005896 <ETH_Prepare_Tx_Descriptors+0x146>
 8005890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005892:	3b04      	subs	r3, #4
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800589a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800589e:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	3301      	adds	r3, #1
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b2:	d10c      	bne.n	80058ce <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058bc:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80058ca:	2302      	movs	r3, #2
 80058cc:	e186      	b.n	8005bdc <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	3301      	adds	r3, #1
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	4b24      	ldr	r3, [pc, #144]	; (8005974 <ETH_Prepare_Tx_Descriptors+0x224>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	6852      	ldr	r2, [r2, #4]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d012      	beq.n	800591e <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	4b1a      	ldr	r3, [pc, #104]	; (8005978 <ETH_Prepare_Tx_Descriptors+0x228>)
 800590e:	4013      	ands	r3, r2
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	6852      	ldr	r2, [r2, #4]
 8005914:	0412      	lsls	r2, r2, #16
 8005916:	431a      	orrs	r2, r3
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	609a      	str	r2, [r3, #8]
 800591c:	e008      	b.n	8005930 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	2200      	movs	r2, #0
 8005922:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	4b13      	ldr	r3, [pc, #76]	; (8005978 <ETH_Prepare_Tx_Descriptors+0x228>)
 800592a:	4013      	ands	r3, r2
 800592c:	6a3a      	ldr	r2, [r7, #32]
 800592e:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b00      	cmp	r3, #0
 800593a:	d021      	beq.n	8005980 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	04db      	lsls	r3, r3, #19
 800594a:	431a      	orrs	r2, r3
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	4b09      	ldr	r3, [pc, #36]	; (800597c <ETH_Prepare_Tx_Descriptors+0x22c>)
 8005956:	4013      	ands	r3, r2
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	69d2      	ldr	r2, [r2, #28]
 800595c:	431a      	orrs	r2, r3
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	60da      	str	r2, [r3, #12]
 800596e:	e02e      	b.n	80059ce <ETH_Prepare_Tx_Descriptors+0x27e>
 8005970:	ffff0000 	.word	0xffff0000
 8005974:	ffffc000 	.word	0xffffc000
 8005978:	c000ffff 	.word	0xc000ffff
 800597c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	4b98      	ldr	r3, [pc, #608]	; (8005be8 <ETH_Prepare_Tx_Descriptors+0x498>)
 8005986:	4013      	ands	r3, r2
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	6852      	ldr	r2, [r2, #4]
 800598c:	431a      	orrs	r2, r3
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d008      	beq.n	80059b0 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d008      	beq.n	80059ce <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	431a      	orrs	r2, r3
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	431a      	orrs	r2, r3
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80c0 	beq.w	8005b9e <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005a30:	e0b5      	b.n	8005b9e <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	3301      	adds	r3, #1
 8005a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d902      	bls.n	8005a50 <ETH_Prepare_Tx_Descriptors+0x300>
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	3b04      	subs	r3, #4
 8005a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a58:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a72:	d126      	bne.n	8005ac2 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a80:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
 8005a86:	e016      	b.n	8005ab6 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	3301      	adds	r3, #1
 8005a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d902      	bls.n	8005aa6 <ETH_Prepare_Tx_Descriptors+0x356>
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	3b04      	subs	r3, #4
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aae:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d3e4      	bcc.n	8005a88 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e08c      	b.n	8005bdc <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	4b43      	ldr	r3, [pc, #268]	; (8005bec <ETH_Prepare_Tx_Descriptors+0x49c>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	6852      	ldr	r2, [r2, #4]
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d012      	beq.n	8005b18 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	4b3a      	ldr	r3, [pc, #232]	; (8005bf0 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	6852      	ldr	r2, [r2, #4]
 8005b0e:	0412      	lsls	r2, r2, #16
 8005b10:	431a      	orrs	r2, r3
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	609a      	str	r2, [r3, #8]
 8005b16:	e008      	b.n	8005b2a <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	4b33      	ldr	r3, [pc, #204]	; (8005bf0 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00f      	beq.n	8005b56 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	4b2e      	ldr	r3, [pc, #184]	; (8005bf4 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	69d2      	ldr	r2, [r2, #28]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	60da      	str	r2, [r3, #12]
 8005b54:	e017      	b.n	8005b86 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	4b23      	ldr	r3, [pc, #140]	; (8005be8 <ETH_Prepare_Tx_Descriptors+0x498>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	6852      	ldr	r2, [r2, #4]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f47f af45 	bne.w	8005a32 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d006      	beq.n	8005bbc <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	609a      	str	r2, [r3, #8]
 8005bba:	e005      	b.n	8005bc8 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd8:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3734      	adds	r7, #52	; 0x34
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	ffff8000 	.word	0xffff8000
 8005bec:	ffffc000 	.word	0xffffc000
 8005bf0:	c000ffff 	.word	0xc000ffff
 8005bf4:	fffc0000 	.word	0xfffc0000

08005bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b089      	sub	sp, #36	; 0x24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c06:	4b89      	ldr	r3, [pc, #548]	; (8005e2c <HAL_GPIO_Init+0x234>)
 8005c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c0a:	e194      	b.n	8005f36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	2101      	movs	r1, #1
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	fa01 f303 	lsl.w	r3, r1, r3
 8005c18:	4013      	ands	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 8186 	beq.w	8005f30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d00b      	beq.n	8005c44 <HAL_GPIO_Init+0x4c>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d007      	beq.n	8005c44 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c38:	2b11      	cmp	r3, #17
 8005c3a:	d003      	beq.n	8005c44 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b12      	cmp	r3, #18
 8005c42:	d130      	bne.n	8005ca6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	2203      	movs	r2, #3
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	43db      	mvns	r3, r3
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	4013      	ands	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	091b      	lsrs	r3, r3, #4
 8005c90:	f003 0201 	and.w	r2, r3, #1
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d003      	beq.n	8005ce6 <HAL_GPIO_Init+0xee>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b12      	cmp	r3, #18
 8005ce4:	d123      	bne.n	8005d2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	08da      	lsrs	r2, r3, #3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3208      	adds	r2, #8
 8005cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	220f      	movs	r2, #15
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	43db      	mvns	r3, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4013      	ands	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	08da      	lsrs	r2, r3, #3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3208      	adds	r2, #8
 8005d28:	69b9      	ldr	r1, [r7, #24]
 8005d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	2203      	movs	r2, #3
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4013      	ands	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f003 0203 	and.w	r2, r3, #3
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80e0 	beq.w	8005f30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d70:	4b2f      	ldr	r3, [pc, #188]	; (8005e30 <HAL_GPIO_Init+0x238>)
 8005d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d76:	4a2e      	ldr	r2, [pc, #184]	; (8005e30 <HAL_GPIO_Init+0x238>)
 8005d78:	f043 0302 	orr.w	r3, r3, #2
 8005d7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005d80:	4b2b      	ldr	r3, [pc, #172]	; (8005e30 <HAL_GPIO_Init+0x238>)
 8005d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d8e:	4a29      	ldr	r2, [pc, #164]	; (8005e34 <HAL_GPIO_Init+0x23c>)
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	089b      	lsrs	r3, r3, #2
 8005d94:	3302      	adds	r3, #2
 8005d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	220f      	movs	r2, #15
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4013      	ands	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a20      	ldr	r2, [pc, #128]	; (8005e38 <HAL_GPIO_Init+0x240>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d052      	beq.n	8005e60 <HAL_GPIO_Init+0x268>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a1f      	ldr	r2, [pc, #124]	; (8005e3c <HAL_GPIO_Init+0x244>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d031      	beq.n	8005e26 <HAL_GPIO_Init+0x22e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <HAL_GPIO_Init+0x248>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d02b      	beq.n	8005e22 <HAL_GPIO_Init+0x22a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a1d      	ldr	r2, [pc, #116]	; (8005e44 <HAL_GPIO_Init+0x24c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d025      	beq.n	8005e1e <HAL_GPIO_Init+0x226>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a1c      	ldr	r2, [pc, #112]	; (8005e48 <HAL_GPIO_Init+0x250>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d01f      	beq.n	8005e1a <HAL_GPIO_Init+0x222>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a1b      	ldr	r2, [pc, #108]	; (8005e4c <HAL_GPIO_Init+0x254>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d019      	beq.n	8005e16 <HAL_GPIO_Init+0x21e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a1a      	ldr	r2, [pc, #104]	; (8005e50 <HAL_GPIO_Init+0x258>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <HAL_GPIO_Init+0x21a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a19      	ldr	r2, [pc, #100]	; (8005e54 <HAL_GPIO_Init+0x25c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00d      	beq.n	8005e0e <HAL_GPIO_Init+0x216>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a18      	ldr	r2, [pc, #96]	; (8005e58 <HAL_GPIO_Init+0x260>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d007      	beq.n	8005e0a <HAL_GPIO_Init+0x212>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a17      	ldr	r2, [pc, #92]	; (8005e5c <HAL_GPIO_Init+0x264>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d101      	bne.n	8005e06 <HAL_GPIO_Init+0x20e>
 8005e02:	2309      	movs	r3, #9
 8005e04:	e02d      	b.n	8005e62 <HAL_GPIO_Init+0x26a>
 8005e06:	230a      	movs	r3, #10
 8005e08:	e02b      	b.n	8005e62 <HAL_GPIO_Init+0x26a>
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	e029      	b.n	8005e62 <HAL_GPIO_Init+0x26a>
 8005e0e:	2307      	movs	r3, #7
 8005e10:	e027      	b.n	8005e62 <HAL_GPIO_Init+0x26a>
 8005e12:	2306      	movs	r3, #6
 8005e14:	e025      	b.n	8005e62 <HAL_GPIO_Init+0x26a>
 8005e16:	2305      	movs	r3, #5
 8005e18:	e023      	b.n	8005e62 <HAL_GPIO_Init+0x26a>
 8005e1a:	2304      	movs	r3, #4
 8005e1c:	e021      	b.n	8005e62 <HAL_GPIO_Init+0x26a>
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e01f      	b.n	8005e62 <HAL_GPIO_Init+0x26a>
 8005e22:	2302      	movs	r3, #2
 8005e24:	e01d      	b.n	8005e62 <HAL_GPIO_Init+0x26a>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e01b      	b.n	8005e62 <HAL_GPIO_Init+0x26a>
 8005e2a:	bf00      	nop
 8005e2c:	58000080 	.word	0x58000080
 8005e30:	58024400 	.word	0x58024400
 8005e34:	58000400 	.word	0x58000400
 8005e38:	58020000 	.word	0x58020000
 8005e3c:	58020400 	.word	0x58020400
 8005e40:	58020800 	.word	0x58020800
 8005e44:	58020c00 	.word	0x58020c00
 8005e48:	58021000 	.word	0x58021000
 8005e4c:	58021400 	.word	0x58021400
 8005e50:	58021800 	.word	0x58021800
 8005e54:	58021c00 	.word	0x58021c00
 8005e58:	58022000 	.word	0x58022000
 8005e5c:	58022400 	.word	0x58022400
 8005e60:	2300      	movs	r3, #0
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	f002 0203 	and.w	r2, r2, #3
 8005e68:	0092      	lsls	r2, r2, #2
 8005e6a:	4093      	lsls	r3, r2
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e72:	4938      	ldr	r1, [pc, #224]	; (8005f54 <HAL_GPIO_Init+0x35c>)
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	089b      	lsrs	r3, r3, #2
 8005e78:	3302      	adds	r3, #2
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4013      	ands	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	3301      	adds	r3, #1
 8005f34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f47f ae63 	bne.w	8005c0c <HAL_GPIO_Init+0x14>
  }
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	3724      	adds	r7, #36	; 0x24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	58000400 	.word	0x58000400

08005f58 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8005f62:	490c      	ldr	r1, [pc, #48]	; (8005f94 <HAL_HSEM_Take+0x3c>)
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <HAL_HSEM_Take+0x40>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8005f70:	4a08      	ldr	r2, [pc, #32]	; (8005f94 <HAL_HSEM_Take+0x3c>)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <HAL_HSEM_Take+0x40>)
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d101      	bne.n	8005f86 <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	e000      	b.n	8005f88 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	58026400 	.word	0x58026400
 8005f98:	80000300 	.word	0x80000300

08005f9c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005fa4:	4a08      	ldr	r2, [pc, #32]	; (8005fc8 <HAL_HSEM_FastTake+0x2c>)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3320      	adds	r3, #32
 8005faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fae:	4a07      	ldr	r2, [pc, #28]	; (8005fcc <HAL_HSEM_FastTake+0x30>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d101      	bne.n	8005fb8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e000      	b.n	8005fba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	58026400 	.word	0x58026400
 8005fcc:	80000300 	.word	0x80000300

08005fd0 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 8005fd8:	4a07      	ldr	r2, [pc, #28]	; (8005ff8 <HAL_HSEM_IsSemTaken+0x28>)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	da01      	bge.n	8005fe8 <HAL_HSEM_IsSemTaken+0x18>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e000      	b.n	8005fea <HAL_HSEM_IsSemTaken+0x1a>
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	58026400 	.word	0x58026400

08005ffc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006006:	4906      	ldr	r1, [pc, #24]	; (8006020 <HAL_HSEM_Release+0x24>)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	58026400 	.word	0x58026400

08006024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e07f      	b.n	8006136 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fa fd94 	bl	8000b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2224      	movs	r2, #36	; 0x24
 8006054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006074:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006084:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d107      	bne.n	800609e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	e006      	b.n	80060ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80060aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d104      	bne.n	80060be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6859      	ldr	r1, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <HAL_I2C_Init+0x11c>)
 80060ca:	430b      	orrs	r3, r1
 80060cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	ea42 0103 	orr.w	r1, r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	021a      	lsls	r2, r3, #8
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69d9      	ldr	r1, [r3, #28]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1a      	ldr	r2, [r3, #32]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	02008000 	.word	0x02008000

08006144 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4603      	mov	r3, r0
 8006154:	817b      	strh	r3, [r7, #10]
 8006156:	460b      	mov	r3, r1
 8006158:	813b      	strh	r3, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b20      	cmp	r3, #32
 8006168:	f040 80f9 	bne.w	800635e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_I2C_Mem_Write+0x34>
 8006172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006174:	2b00      	cmp	r3, #0
 8006176:	d105      	bne.n	8006184 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800617e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e0ed      	b.n	8006360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_I2C_Mem_Write+0x4e>
 800618e:	2302      	movs	r3, #2
 8006190:	e0e6      	b.n	8006360 <HAL_I2C_Mem_Write+0x21c>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800619a:	f7fb ff53 	bl	8002044 <HAL_GetTick>
 800619e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	2319      	movs	r3, #25
 80061a6:	2201      	movs	r2, #1
 80061a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 fac3 	bl	8006738 <I2C_WaitOnFlagUntilTimeout>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0d1      	b.n	8006360 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2221      	movs	r2, #33	; 0x21
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2240      	movs	r2, #64	; 0x40
 80061c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a3a      	ldr	r2, [r7, #32]
 80061d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80061dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061e4:	88f8      	ldrh	r0, [r7, #6]
 80061e6:	893a      	ldrh	r2, [r7, #8]
 80061e8:	8979      	ldrh	r1, [r7, #10]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	4603      	mov	r3, r0
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f9d3 	bl	80065a0 <I2C_RequestMemoryWrite>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e0a9      	b.n	8006360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	2bff      	cmp	r3, #255	; 0xff
 8006214:	d90e      	bls.n	8006234 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	22ff      	movs	r2, #255	; 0xff
 800621a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006220:	b2da      	uxtb	r2, r3
 8006222:	8979      	ldrh	r1, [r7, #10]
 8006224:	2300      	movs	r3, #0
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fba5 	bl	800697c <I2C_TransferConfig>
 8006232:	e00f      	b.n	8006254 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006242:	b2da      	uxtb	r2, r3
 8006244:	8979      	ldrh	r1, [r7, #10]
 8006246:	2300      	movs	r3, #0
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fb94 	bl	800697c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 faad 	bl	80067b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e07b      	b.n	8006360 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	781a      	ldrb	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d034      	beq.n	800630c <HAL_I2C_Mem_Write+0x1c8>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d130      	bne.n	800630c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	2200      	movs	r2, #0
 80062b2:	2180      	movs	r1, #128	; 0x80
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 fa3f 	bl	8006738 <I2C_WaitOnFlagUntilTimeout>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e04d      	b.n	8006360 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2bff      	cmp	r3, #255	; 0xff
 80062cc:	d90e      	bls.n	80062ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	22ff      	movs	r2, #255	; 0xff
 80062d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	8979      	ldrh	r1, [r7, #10]
 80062dc:	2300      	movs	r3, #0
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fb49 	bl	800697c <I2C_TransferConfig>
 80062ea:	e00f      	b.n	800630c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	8979      	ldrh	r1, [r7, #10]
 80062fe:	2300      	movs	r3, #0
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fb38 	bl	800697c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d19e      	bne.n	8006254 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 fa8c 	bl	8006838 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e01a      	b.n	8006360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2220      	movs	r2, #32
 8006330:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6859      	ldr	r1, [r3, #4]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <HAL_I2C_Mem_Write+0x224>)
 800633e:	400b      	ands	r3, r1
 8006340:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	e000      	b.n	8006360 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800635e:	2302      	movs	r3, #2
  }
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	fe00e800 	.word	0xfe00e800

0800636c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	4608      	mov	r0, r1
 8006376:	4611      	mov	r1, r2
 8006378:	461a      	mov	r2, r3
 800637a:	4603      	mov	r3, r0
 800637c:	817b      	strh	r3, [r7, #10]
 800637e:	460b      	mov	r3, r1
 8006380:	813b      	strh	r3, [r7, #8]
 8006382:	4613      	mov	r3, r2
 8006384:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b20      	cmp	r3, #32
 8006390:	f040 80fd 	bne.w	800658e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_I2C_Mem_Read+0x34>
 800639a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800639c:	2b00      	cmp	r3, #0
 800639e:	d105      	bne.n	80063ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e0f1      	b.n	8006590 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <HAL_I2C_Mem_Read+0x4e>
 80063b6:	2302      	movs	r3, #2
 80063b8:	e0ea      	b.n	8006590 <HAL_I2C_Mem_Read+0x224>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063c2:	f7fb fe3f 	bl	8002044 <HAL_GetTick>
 80063c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	2319      	movs	r3, #25
 80063ce:	2201      	movs	r2, #1
 80063d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f9af 	bl	8006738 <I2C_WaitOnFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e0d5      	b.n	8006590 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2222      	movs	r2, #34	; 0x22
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2240      	movs	r2, #64	; 0x40
 80063f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a3a      	ldr	r2, [r7, #32]
 80063fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006404:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800640c:	88f8      	ldrh	r0, [r7, #6]
 800640e:	893a      	ldrh	r2, [r7, #8]
 8006410:	8979      	ldrh	r1, [r7, #10]
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	4603      	mov	r3, r0
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 f913 	bl	8006648 <I2C_RequestMemoryRead>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e0ad      	b.n	8006590 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2bff      	cmp	r3, #255	; 0xff
 800643c:	d90e      	bls.n	800645c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	22ff      	movs	r2, #255	; 0xff
 8006442:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006448:	b2da      	uxtb	r2, r3
 800644a:	8979      	ldrh	r1, [r7, #10]
 800644c:	4b52      	ldr	r3, [pc, #328]	; (8006598 <HAL_I2C_Mem_Read+0x22c>)
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 fa91 	bl	800697c <I2C_TransferConfig>
 800645a:	e00f      	b.n	800647c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646a:	b2da      	uxtb	r2, r3
 800646c:	8979      	ldrh	r1, [r7, #10]
 800646e:	4b4a      	ldr	r3, [pc, #296]	; (8006598 <HAL_I2C_Mem_Read+0x22c>)
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fa80 	bl	800697c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	2200      	movs	r2, #0
 8006484:	2104      	movs	r1, #4
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f956 	bl	8006738 <I2C_WaitOnFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e07c      	b.n	8006590 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d034      	beq.n	800653c <HAL_I2C_Mem_Read+0x1d0>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d130      	bne.n	800653c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	2200      	movs	r2, #0
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f927 	bl	8006738 <I2C_WaitOnFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e04d      	b.n	8006590 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2bff      	cmp	r3, #255	; 0xff
 80064fc:	d90e      	bls.n	800651c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	22ff      	movs	r2, #255	; 0xff
 8006502:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006508:	b2da      	uxtb	r2, r3
 800650a:	8979      	ldrh	r1, [r7, #10]
 800650c:	2300      	movs	r3, #0
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 fa31 	bl	800697c <I2C_TransferConfig>
 800651a:	e00f      	b.n	800653c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652a:	b2da      	uxtb	r2, r3
 800652c:	8979      	ldrh	r1, [r7, #10]
 800652e:	2300      	movs	r3, #0
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 fa20 	bl	800697c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d19a      	bne.n	800647c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 f974 	bl	8006838 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e01a      	b.n	8006590 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2220      	movs	r2, #32
 8006560:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6859      	ldr	r1, [r3, #4]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	4b0b      	ldr	r3, [pc, #44]	; (800659c <HAL_I2C_Mem_Read+0x230>)
 800656e:	400b      	ands	r3, r1
 8006570:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e000      	b.n	8006590 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800658e:	2302      	movs	r3, #2
  }
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	80002400 	.word	0x80002400
 800659c:	fe00e800 	.word	0xfe00e800

080065a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	4608      	mov	r0, r1
 80065aa:	4611      	mov	r1, r2
 80065ac:	461a      	mov	r2, r3
 80065ae:	4603      	mov	r3, r0
 80065b0:	817b      	strh	r3, [r7, #10]
 80065b2:	460b      	mov	r3, r1
 80065b4:	813b      	strh	r3, [r7, #8]
 80065b6:	4613      	mov	r3, r2
 80065b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80065ba:	88fb      	ldrh	r3, [r7, #6]
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	8979      	ldrh	r1, [r7, #10]
 80065c0:	4b20      	ldr	r3, [pc, #128]	; (8006644 <I2C_RequestMemoryWrite+0xa4>)
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f9d7 	bl	800697c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	69b9      	ldr	r1, [r7, #24]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 f8f0 	bl	80067b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e02c      	b.n	800663c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065e2:	88fb      	ldrh	r3, [r7, #6]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d105      	bne.n	80065f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065e8:	893b      	ldrh	r3, [r7, #8]
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	629a      	str	r2, [r3, #40]	; 0x28
 80065f2:	e015      	b.n	8006620 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80065f4:	893b      	ldrh	r3, [r7, #8]
 80065f6:	0a1b      	lsrs	r3, r3, #8
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	69b9      	ldr	r1, [r7, #24]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 f8d6 	bl	80067b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e012      	b.n	800663c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006616:	893b      	ldrh	r3, [r7, #8]
 8006618:	b2da      	uxtb	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2200      	movs	r2, #0
 8006628:	2180      	movs	r1, #128	; 0x80
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 f884 	bl	8006738 <I2C_WaitOnFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	80002000 	.word	0x80002000

08006648 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	4608      	mov	r0, r1
 8006652:	4611      	mov	r1, r2
 8006654:	461a      	mov	r2, r3
 8006656:	4603      	mov	r3, r0
 8006658:	817b      	strh	r3, [r7, #10]
 800665a:	460b      	mov	r3, r1
 800665c:	813b      	strh	r3, [r7, #8]
 800665e:	4613      	mov	r3, r2
 8006660:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006662:	88fb      	ldrh	r3, [r7, #6]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	8979      	ldrh	r1, [r7, #10]
 8006668:	4b20      	ldr	r3, [pc, #128]	; (80066ec <I2C_RequestMemoryRead+0xa4>)
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	2300      	movs	r3, #0
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f984 	bl	800697c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	69b9      	ldr	r1, [r7, #24]
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f89d 	bl	80067b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e02c      	b.n	80066e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006688:	88fb      	ldrh	r3, [r7, #6]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d105      	bne.n	800669a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800668e:	893b      	ldrh	r3, [r7, #8]
 8006690:	b2da      	uxtb	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	629a      	str	r2, [r3, #40]	; 0x28
 8006698:	e015      	b.n	80066c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800669a:	893b      	ldrh	r3, [r7, #8]
 800669c:	0a1b      	lsrs	r3, r3, #8
 800669e:	b29b      	uxth	r3, r3
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	69b9      	ldr	r1, [r7, #24]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f883 	bl	80067b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e012      	b.n	80066e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066bc:	893b      	ldrh	r3, [r7, #8]
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	2200      	movs	r2, #0
 80066ce:	2140      	movs	r1, #64	; 0x40
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 f831 	bl	8006738 <I2C_WaitOnFlagUntilTimeout>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	80002000 	.word	0x80002000

080066f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b02      	cmp	r3, #2
 8006704:	d103      	bne.n	800670e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b01      	cmp	r3, #1
 800671a:	d007      	beq.n	800672c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0201 	orr.w	r2, r2, #1
 800672a:	619a      	str	r2, [r3, #24]
  }
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	4613      	mov	r3, r2
 8006746:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006748:	e022      	b.n	8006790 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006750:	d01e      	beq.n	8006790 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006752:	f7fb fc77 	bl	8002044 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d302      	bcc.n	8006768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d113      	bne.n	8006790 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676c:	f043 0220 	orr.w	r2, r3, #32
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e00f      	b.n	80067b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	4013      	ands	r3, r2
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	429a      	cmp	r2, r3
 800679e:	bf0c      	ite	eq
 80067a0:	2301      	moveq	r3, #1
 80067a2:	2300      	movne	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d0cd      	beq.n	800674a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067c4:	e02c      	b.n	8006820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 f870 	bl	80068b0 <I2C_IsAcknowledgeFailed>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e02a      	b.n	8006830 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067e0:	d01e      	beq.n	8006820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e2:	f7fb fc2f 	bl	8002044 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d302      	bcc.n	80067f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d113      	bne.n	8006820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fc:	f043 0220 	orr.w	r2, r3, #32
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e007      	b.n	8006830 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b02      	cmp	r3, #2
 800682c:	d1cb      	bne.n	80067c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006844:	e028      	b.n	8006898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f830 	bl	80068b0 <I2C_IsAcknowledgeFailed>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e026      	b.n	80068a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fb fbf3 	bl	8002044 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d113      	bne.n	8006898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006874:	f043 0220 	orr.w	r2, r3, #32
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e007      	b.n	80068a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	d1cf      	bne.n	8006846 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	f003 0310 	and.w	r3, r3, #16
 80068c6:	2b10      	cmp	r3, #16
 80068c8:	d151      	bne.n	800696e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068ca:	e022      	b.n	8006912 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068d2:	d01e      	beq.n	8006912 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d4:	f7fb fbb6 	bl	8002044 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d302      	bcc.n	80068ea <I2C_IsAcknowledgeFailed+0x3a>
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d113      	bne.n	8006912 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ee:	f043 0220 	orr.w	r2, r3, #32
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e02e      	b.n	8006970 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	f003 0320 	and.w	r3, r3, #32
 800691c:	2b20      	cmp	r3, #32
 800691e:	d1d5      	bne.n	80068cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2210      	movs	r2, #16
 8006926:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2220      	movs	r2, #32
 800692e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7ff fedd 	bl	80066f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6859      	ldr	r1, [r3, #4]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <I2C_IsAcknowledgeFailed+0xc8>)
 8006942:	400b      	ands	r3, r1
 8006944:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694a:	f043 0204 	orr.w	r2, r3, #4
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2220      	movs	r2, #32
 8006956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	fe00e800 	.word	0xfe00e800

0800697c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	607b      	str	r3, [r7, #4]
 8006986:	460b      	mov	r3, r1
 8006988:	817b      	strh	r3, [r7, #10]
 800698a:	4613      	mov	r3, r2
 800698c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	0d5b      	lsrs	r3, r3, #21
 8006998:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800699c:	4b0d      	ldr	r3, [pc, #52]	; (80069d4 <I2C_TransferConfig+0x58>)
 800699e:	430b      	orrs	r3, r1
 80069a0:	43db      	mvns	r3, r3
 80069a2:	ea02 0103 	and.w	r1, r2, r3
 80069a6:	897b      	ldrh	r3, [r7, #10]
 80069a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80069ac:	7a7b      	ldrb	r3, [r7, #9]
 80069ae:	041b      	lsls	r3, r3, #16
 80069b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	431a      	orrs	r2, r3
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	431a      	orrs	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80069c6:	bf00      	nop
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	03ff63ff 	.word	0x03ff63ff

080069d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d138      	bne.n	8006a60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e032      	b.n	8006a62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2224      	movs	r2, #36	; 0x24
 8006a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0201 	bic.w	r2, r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6819      	ldr	r1, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	e000      	b.n	8006a62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a60:	2302      	movs	r3, #2
  }
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b085      	sub	sp, #20
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	d139      	bne.n	8006af8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d101      	bne.n	8006a92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	e033      	b.n	8006afa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2224      	movs	r2, #36	; 0x24
 8006a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0201 	bic.w	r2, r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ac0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	e000      	b.n	8006afa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006af8:	2302      	movs	r3, #2
  }
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
	...

08006b08 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b10:	4b0d      	ldr	r3, [pc, #52]	; (8006b48 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b16:	4a0c      	ldr	r2, [pc, #48]	; (8006b48 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006b18:	f043 0302 	orr.w	r3, r3, #2
 8006b1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006b20:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8006b2e:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	4906      	ldr	r1, [pc, #24]	; (8006b4c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	604b      	str	r3, [r1, #4]
}
 8006b3a:	bf00      	nop
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	58024400 	.word	0x58024400
 8006b4c:	58000400 	.word	0x58000400

08006b50 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e038      	b.n	8006bd4 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006b6a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f245 5255 	movw	r2, #21845	; 0x5555
 8006b74:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6852      	ldr	r2, [r2, #4]
 8006b7e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6892      	ldr	r2, [r2, #8]
 8006b88:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006b8a:	f7fb fa5b 	bl	8002044 <HAL_GetTick>
 8006b8e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8006b90:	e008      	b.n	8006ba4 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006b92:	f7fb fa57 	bl	8002044 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b30      	cmp	r3, #48	; 0x30
 8006b9e:	d901      	bls.n	8006ba4 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e017      	b.n	8006bd4 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1f1      	bne.n	8006b92 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d005      	beq.n	8006bc8 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	68d2      	ldr	r2, [r2, #12]
 8006bc4:	611a      	str	r2, [r3, #16]
 8006bc6:	e004      	b.n	8006bd2 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006bd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006bec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006c04:	4b29      	ldr	r3, [pc, #164]	; (8006cac <HAL_PWREx_ConfigSupply+0xb0>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	2b06      	cmp	r3, #6
 8006c0e:	d00a      	beq.n	8006c26 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006c10:	4b26      	ldr	r3, [pc, #152]	; (8006cac <HAL_PWREx_ConfigSupply+0xb0>)
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d001      	beq.n	8006c22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e040      	b.n	8006ca4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	e03e      	b.n	8006ca4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006c26:	4b21      	ldr	r3, [pc, #132]	; (8006cac <HAL_PWREx_ConfigSupply+0xb0>)
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006c2e:	491f      	ldr	r1, [pc, #124]	; (8006cac <HAL_PWREx_ConfigSupply+0xb0>)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006c36:	f7fb fa05 	bl	8002044 <HAL_GetTick>
 8006c3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c3c:	e009      	b.n	8006c52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006c3e:	f7fb fa01 	bl	8002044 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c4c:	d901      	bls.n	8006c52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e028      	b.n	8006ca4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c52:	4b16      	ldr	r3, [pc, #88]	; (8006cac <HAL_PWREx_ConfigSupply+0xb0>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c5e:	d1ee      	bne.n	8006c3e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b1e      	cmp	r3, #30
 8006c64:	d008      	beq.n	8006c78 <HAL_PWREx_ConfigSupply+0x7c>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b2e      	cmp	r3, #46	; 0x2e
 8006c6a:	d005      	beq.n	8006c78 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b1d      	cmp	r3, #29
 8006c70:	d002      	beq.n	8006c78 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b2d      	cmp	r3, #45	; 0x2d
 8006c76:	d114      	bne.n	8006ca2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006c78:	f7fb f9e4 	bl	8002044 <HAL_GetTick>
 8006c7c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006c7e:	e009      	b.n	8006c94 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006c80:	f7fb f9e0 	bl	8002044 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c8e:	d901      	bls.n	8006c94 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e007      	b.n	8006ca4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <HAL_PWREx_ConfigSupply+0xb0>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca0:	d1ee      	bne.n	8006c80 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	58024800 	.word	0x58024800

08006cb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08c      	sub	sp, #48	; 0x30
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e3ff      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 8087 	beq.w	8006dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cd0:	4b99      	ldr	r3, [pc, #612]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cda:	4b97      	ldr	r3, [pc, #604]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	2b10      	cmp	r3, #16
 8006ce4:	d007      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x46>
 8006ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce8:	2b18      	cmp	r3, #24
 8006cea:	d110      	bne.n	8006d0e <HAL_RCC_OscConfig+0x5e>
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d10b      	bne.n	8006d0e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf6:	4b90      	ldr	r3, [pc, #576]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d06c      	beq.n	8006ddc <HAL_RCC_OscConfig+0x12c>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d168      	bne.n	8006ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e3d9      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d16:	d106      	bne.n	8006d26 <HAL_RCC_OscConfig+0x76>
 8006d18:	4b87      	ldr	r3, [pc, #540]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a86      	ldr	r2, [pc, #536]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	e02e      	b.n	8006d84 <HAL_RCC_OscConfig+0xd4>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10c      	bne.n	8006d48 <HAL_RCC_OscConfig+0x98>
 8006d2e:	4b82      	ldr	r3, [pc, #520]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a81      	ldr	r2, [pc, #516]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	4b7f      	ldr	r3, [pc, #508]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a7e      	ldr	r2, [pc, #504]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	e01d      	b.n	8006d84 <HAL_RCC_OscConfig+0xd4>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d50:	d10c      	bne.n	8006d6c <HAL_RCC_OscConfig+0xbc>
 8006d52:	4b79      	ldr	r3, [pc, #484]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a78      	ldr	r2, [pc, #480]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	4b76      	ldr	r3, [pc, #472]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a75      	ldr	r2, [pc, #468]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	e00b      	b.n	8006d84 <HAL_RCC_OscConfig+0xd4>
 8006d6c:	4b72      	ldr	r3, [pc, #456]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a71      	ldr	r2, [pc, #452]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	4b6f      	ldr	r3, [pc, #444]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a6e      	ldr	r2, [pc, #440]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d013      	beq.n	8006db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8c:	f7fb f95a 	bl	8002044 <HAL_GetTick>
 8006d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d94:	f7fb f956 	bl	8002044 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b64      	cmp	r3, #100	; 0x64
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e38d      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006da6:	4b64      	ldr	r3, [pc, #400]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0f0      	beq.n	8006d94 <HAL_RCC_OscConfig+0xe4>
 8006db2:	e014      	b.n	8006dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db4:	f7fb f946 	bl	8002044 <HAL_GetTick>
 8006db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dbc:	f7fb f942 	bl	8002044 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b64      	cmp	r3, #100	; 0x64
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e379      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dce:	4b5a      	ldr	r3, [pc, #360]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f0      	bne.n	8006dbc <HAL_RCC_OscConfig+0x10c>
 8006dda:	e000      	b.n	8006dde <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 80ae 	beq.w	8006f48 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dec:	4b52      	ldr	r3, [pc, #328]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006df4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006df6:	4b50      	ldr	r3, [pc, #320]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d007      	beq.n	8006e12 <HAL_RCC_OscConfig+0x162>
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	2b18      	cmp	r3, #24
 8006e06:	d13a      	bne.n	8006e7e <HAL_RCC_OscConfig+0x1ce>
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f003 0303 	and.w	r3, r3, #3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d135      	bne.n	8006e7e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e12:	4b49      	ldr	r3, [pc, #292]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0304 	and.w	r3, r3, #4
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <HAL_RCC_OscConfig+0x17a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e34b      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e2a:	f7fb f917 	bl	800205c <HAL_GetREVID>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d817      	bhi.n	8006e68 <HAL_RCC_OscConfig+0x1b8>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b40      	cmp	r3, #64	; 0x40
 8006e3e:	d108      	bne.n	8006e52 <HAL_RCC_OscConfig+0x1a2>
 8006e40:	4b3d      	ldr	r3, [pc, #244]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e48:	4a3b      	ldr	r2, [pc, #236]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e50:	e07a      	b.n	8006f48 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e52:	4b39      	ldr	r3, [pc, #228]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	031b      	lsls	r3, r3, #12
 8006e60:	4935      	ldr	r1, [pc, #212]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e66:	e06f      	b.n	8006f48 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e68:	4b33      	ldr	r3, [pc, #204]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	061b      	lsls	r3, r3, #24
 8006e76:	4930      	ldr	r1, [pc, #192]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e7c:	e064      	b.n	8006f48 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d045      	beq.n	8006f12 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e86:	4b2c      	ldr	r3, [pc, #176]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f023 0219 	bic.w	r2, r3, #25
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	4929      	ldr	r1, [pc, #164]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7fb f8d4 	bl	8002044 <HAL_GetTick>
 8006e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ea0:	f7fb f8d0 	bl	8002044 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e307      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eb2:	4b21      	ldr	r3, [pc, #132]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ebe:	f7fb f8cd 	bl	800205c <HAL_GetREVID>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d817      	bhi.n	8006efc <HAL_RCC_OscConfig+0x24c>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2b40      	cmp	r3, #64	; 0x40
 8006ed2:	d108      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x236>
 8006ed4:	4b18      	ldr	r3, [pc, #96]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006edc:	4a16      	ldr	r2, [pc, #88]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee2:	6053      	str	r3, [r2, #4]
 8006ee4:	e030      	b.n	8006f48 <HAL_RCC_OscConfig+0x298>
 8006ee6:	4b14      	ldr	r3, [pc, #80]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	031b      	lsls	r3, r3, #12
 8006ef4:	4910      	ldr	r1, [pc, #64]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	604b      	str	r3, [r1, #4]
 8006efa:	e025      	b.n	8006f48 <HAL_RCC_OscConfig+0x298>
 8006efc:	4b0e      	ldr	r3, [pc, #56]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	061b      	lsls	r3, r3, #24
 8006f0a:	490b      	ldr	r1, [pc, #44]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	604b      	str	r3, [r1, #4]
 8006f10:	e01a      	b.n	8006f48 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f12:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a08      	ldr	r2, [pc, #32]	; (8006f38 <HAL_RCC_OscConfig+0x288>)
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1e:	f7fb f891 	bl	8002044 <HAL_GetTick>
 8006f22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f24:	e00a      	b.n	8006f3c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f26:	f7fb f88d 	bl	8002044 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d903      	bls.n	8006f3c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e2c4      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
 8006f38:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f3c:	4ba4      	ldr	r3, [pc, #656]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1ee      	bne.n	8006f26 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0310 	and.w	r3, r3, #16
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 80a9 	beq.w	80070a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f56:	4b9e      	ldr	r3, [pc, #632]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f60:	4b9b      	ldr	r3, [pc, #620]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d007      	beq.n	8006f7c <HAL_RCC_OscConfig+0x2cc>
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	2b18      	cmp	r3, #24
 8006f70:	d13a      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x338>
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f003 0303 	and.w	r3, r3, #3
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d135      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f7c:	4b94      	ldr	r3, [pc, #592]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <HAL_RCC_OscConfig+0x2e4>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	2b80      	cmp	r3, #128	; 0x80
 8006f8e:	d001      	beq.n	8006f94 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e296      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f94:	f7fb f862 	bl	800205c <HAL_GetREVID>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d817      	bhi.n	8006fd2 <HAL_RCC_OscConfig+0x322>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d108      	bne.n	8006fbc <HAL_RCC_OscConfig+0x30c>
 8006faa:	4b89      	ldr	r3, [pc, #548]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006fb2:	4a87      	ldr	r2, [pc, #540]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8006fb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fb8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fba:	e075      	b.n	80070a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fbc:	4b84      	ldr	r3, [pc, #528]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	069b      	lsls	r3, r3, #26
 8006fca:	4981      	ldr	r1, [pc, #516]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fd0:	e06a      	b.n	80070a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fd2:	4b7f      	ldr	r3, [pc, #508]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	061b      	lsls	r3, r3, #24
 8006fe0:	497b      	ldr	r1, [pc, #492]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fe6:	e05f      	b.n	80070a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d042      	beq.n	8007076 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006ff0:	4b77      	ldr	r3, [pc, #476]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a76      	ldr	r2, [pc, #472]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8006ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffc:	f7fb f822 	bl	8002044 <HAL_GetTick>
 8007000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007002:	e008      	b.n	8007016 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007004:	f7fb f81e 	bl	8002044 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b02      	cmp	r3, #2
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e255      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007016:	4b6e      	ldr	r3, [pc, #440]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0f0      	beq.n	8007004 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007022:	f7fb f81b 	bl	800205c <HAL_GetREVID>
 8007026:	4603      	mov	r3, r0
 8007028:	f241 0203 	movw	r2, #4099	; 0x1003
 800702c:	4293      	cmp	r3, r2
 800702e:	d817      	bhi.n	8007060 <HAL_RCC_OscConfig+0x3b0>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	2b20      	cmp	r3, #32
 8007036:	d108      	bne.n	800704a <HAL_RCC_OscConfig+0x39a>
 8007038:	4b65      	ldr	r3, [pc, #404]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007040:	4a63      	ldr	r2, [pc, #396]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8007042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007046:	6053      	str	r3, [r2, #4]
 8007048:	e02e      	b.n	80070a8 <HAL_RCC_OscConfig+0x3f8>
 800704a:	4b61      	ldr	r3, [pc, #388]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	069b      	lsls	r3, r3, #26
 8007058:	495d      	ldr	r1, [pc, #372]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 800705a:	4313      	orrs	r3, r2
 800705c:	604b      	str	r3, [r1, #4]
 800705e:	e023      	b.n	80070a8 <HAL_RCC_OscConfig+0x3f8>
 8007060:	4b5b      	ldr	r3, [pc, #364]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	061b      	lsls	r3, r3, #24
 800706e:	4958      	ldr	r1, [pc, #352]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8007070:	4313      	orrs	r3, r2
 8007072:	60cb      	str	r3, [r1, #12]
 8007074:	e018      	b.n	80070a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007076:	4b56      	ldr	r3, [pc, #344]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a55      	ldr	r2, [pc, #340]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 800707c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007082:	f7fa ffdf 	bl	8002044 <HAL_GetTick>
 8007086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007088:	e008      	b.n	800709c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800708a:	f7fa ffdb 	bl	8002044 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d901      	bls.n	800709c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e212      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800709c:	4b4c      	ldr	r3, [pc, #304]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1f0      	bne.n	800708a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d036      	beq.n	8007122 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d019      	beq.n	80070f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070bc:	4b44      	ldr	r3, [pc, #272]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 80070be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c0:	4a43      	ldr	r2, [pc, #268]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c8:	f7fa ffbc 	bl	8002044 <HAL_GetTick>
 80070cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070d0:	f7fa ffb8 	bl	8002044 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e1ef      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80070e2:	4b3b      	ldr	r3, [pc, #236]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 80070e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0f0      	beq.n	80070d0 <HAL_RCC_OscConfig+0x420>
 80070ee:	e018      	b.n	8007122 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070f0:	4b37      	ldr	r3, [pc, #220]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 80070f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f4:	4a36      	ldr	r2, [pc, #216]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070fc:	f7fa ffa2 	bl	8002044 <HAL_GetTick>
 8007100:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007104:	f7fa ff9e 	bl	8002044 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e1d5      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007116:	4b2e      	ldr	r3, [pc, #184]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8007118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f0      	bne.n	8007104 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0320 	and.w	r3, r3, #32
 800712a:	2b00      	cmp	r3, #0
 800712c:	d036      	beq.n	800719c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d019      	beq.n	800716a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007136:	4b26      	ldr	r3, [pc, #152]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a25      	ldr	r2, [pc, #148]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 800713c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007140:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007142:	f7fa ff7f 	bl	8002044 <HAL_GetTick>
 8007146:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007148:	e008      	b.n	800715c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800714a:	f7fa ff7b 	bl	8002044 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	d901      	bls.n	800715c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e1b2      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800715c:	4b1c      	ldr	r3, [pc, #112]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d0f0      	beq.n	800714a <HAL_RCC_OscConfig+0x49a>
 8007168:	e018      	b.n	800719c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800716a:	4b19      	ldr	r3, [pc, #100]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a18      	ldr	r2, [pc, #96]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8007170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007174:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007176:	f7fa ff65 	bl	8002044 <HAL_GetTick>
 800717a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800717c:	e008      	b.n	8007190 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800717e:	f7fa ff61 	bl	8002044 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d901      	bls.n	8007190 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e198      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007190:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <HAL_RCC_OscConfig+0x520>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f0      	bne.n	800717e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 8085 	beq.w	80072b4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80071aa:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <HAL_RCC_OscConfig+0x524>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <HAL_RCC_OscConfig+0x524>)
 80071b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071b6:	f7fa ff45 	bl	8002044 <HAL_GetTick>
 80071ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071bc:	e00c      	b.n	80071d8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071be:	f7fa ff41 	bl	8002044 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b64      	cmp	r3, #100	; 0x64
 80071ca:	d905      	bls.n	80071d8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e178      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
 80071d0:	58024400 	.word	0x58024400
 80071d4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071d8:	4b96      	ldr	r3, [pc, #600]	; (8007434 <HAL_RCC_OscConfig+0x784>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0ec      	beq.n	80071be <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d106      	bne.n	80071fa <HAL_RCC_OscConfig+0x54a>
 80071ec:	4b92      	ldr	r3, [pc, #584]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80071ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f0:	4a91      	ldr	r2, [pc, #580]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80071f2:	f043 0301 	orr.w	r3, r3, #1
 80071f6:	6713      	str	r3, [r2, #112]	; 0x70
 80071f8:	e02d      	b.n	8007256 <HAL_RCC_OscConfig+0x5a6>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10c      	bne.n	800721c <HAL_RCC_OscConfig+0x56c>
 8007202:	4b8d      	ldr	r3, [pc, #564]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007206:	4a8c      	ldr	r2, [pc, #560]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007208:	f023 0301 	bic.w	r3, r3, #1
 800720c:	6713      	str	r3, [r2, #112]	; 0x70
 800720e:	4b8a      	ldr	r3, [pc, #552]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007212:	4a89      	ldr	r2, [pc, #548]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007214:	f023 0304 	bic.w	r3, r3, #4
 8007218:	6713      	str	r3, [r2, #112]	; 0x70
 800721a:	e01c      	b.n	8007256 <HAL_RCC_OscConfig+0x5a6>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	2b05      	cmp	r3, #5
 8007222:	d10c      	bne.n	800723e <HAL_RCC_OscConfig+0x58e>
 8007224:	4b84      	ldr	r3, [pc, #528]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007228:	4a83      	ldr	r2, [pc, #524]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 800722a:	f043 0304 	orr.w	r3, r3, #4
 800722e:	6713      	str	r3, [r2, #112]	; 0x70
 8007230:	4b81      	ldr	r3, [pc, #516]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007234:	4a80      	ldr	r2, [pc, #512]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007236:	f043 0301 	orr.w	r3, r3, #1
 800723a:	6713      	str	r3, [r2, #112]	; 0x70
 800723c:	e00b      	b.n	8007256 <HAL_RCC_OscConfig+0x5a6>
 800723e:	4b7e      	ldr	r3, [pc, #504]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007242:	4a7d      	ldr	r2, [pc, #500]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007244:	f023 0301 	bic.w	r3, r3, #1
 8007248:	6713      	str	r3, [r2, #112]	; 0x70
 800724a:	4b7b      	ldr	r3, [pc, #492]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 800724c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724e:	4a7a      	ldr	r2, [pc, #488]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007250:	f023 0304 	bic.w	r3, r3, #4
 8007254:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d015      	beq.n	800728a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800725e:	f7fa fef1 	bl	8002044 <HAL_GetTick>
 8007262:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007264:	e00a      	b.n	800727c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007266:	f7fa feed 	bl	8002044 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	f241 3288 	movw	r2, #5000	; 0x1388
 8007274:	4293      	cmp	r3, r2
 8007276:	d901      	bls.n	800727c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e122      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800727c:	4b6e      	ldr	r3, [pc, #440]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 800727e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007280:	f003 0302 	and.w	r3, r3, #2
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0ee      	beq.n	8007266 <HAL_RCC_OscConfig+0x5b6>
 8007288:	e014      	b.n	80072b4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800728a:	f7fa fedb 	bl	8002044 <HAL_GetTick>
 800728e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007290:	e00a      	b.n	80072a8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007292:	f7fa fed7 	bl	8002044 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d901      	bls.n	80072a8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e10c      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072a8:	4b63      	ldr	r3, [pc, #396]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80072aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1ee      	bne.n	8007292 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 8101 	beq.w	80074c0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80072be:	4b5e      	ldr	r3, [pc, #376]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072c6:	2b18      	cmp	r3, #24
 80072c8:	f000 80bc 	beq.w	8007444 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	f040 8095 	bne.w	8007400 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072d6:	4b58      	ldr	r3, [pc, #352]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a57      	ldr	r2, [pc, #348]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80072dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e2:	f7fa feaf 	bl	8002044 <HAL_GetTick>
 80072e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072e8:	e008      	b.n	80072fc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072ea:	f7fa feab 	bl	8002044 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d901      	bls.n	80072fc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e0e2      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072fc:	4b4e      	ldr	r3, [pc, #312]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1f0      	bne.n	80072ea <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007308:	4b4b      	ldr	r3, [pc, #300]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 800730a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800730c:	4b4b      	ldr	r3, [pc, #300]	; (800743c <HAL_RCC_OscConfig+0x78c>)
 800730e:	4013      	ands	r3, r2
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007318:	0112      	lsls	r2, r2, #4
 800731a:	430a      	orrs	r2, r1
 800731c:	4946      	ldr	r1, [pc, #280]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 800731e:	4313      	orrs	r3, r2
 8007320:	628b      	str	r3, [r1, #40]	; 0x28
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007326:	3b01      	subs	r3, #1
 8007328:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007330:	3b01      	subs	r3, #1
 8007332:	025b      	lsls	r3, r3, #9
 8007334:	b29b      	uxth	r3, r3
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	3b01      	subs	r3, #1
 800733e:	041b      	lsls	r3, r3, #16
 8007340:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734a:	3b01      	subs	r3, #1
 800734c:	061b      	lsls	r3, r3, #24
 800734e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007352:	4939      	ldr	r1, [pc, #228]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007354:	4313      	orrs	r3, r2
 8007356:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007358:	4b37      	ldr	r3, [pc, #220]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	4a36      	ldr	r2, [pc, #216]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 800735e:	f023 0301 	bic.w	r3, r3, #1
 8007362:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007364:	4b34      	ldr	r3, [pc, #208]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007368:	4b35      	ldr	r3, [pc, #212]	; (8007440 <HAL_RCC_OscConfig+0x790>)
 800736a:	4013      	ands	r3, r2
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007370:	00d2      	lsls	r2, r2, #3
 8007372:	4931      	ldr	r1, [pc, #196]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007374:	4313      	orrs	r3, r2
 8007376:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007378:	4b2f      	ldr	r3, [pc, #188]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	f023 020c 	bic.w	r2, r3, #12
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	492c      	ldr	r1, [pc, #176]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007386:	4313      	orrs	r3, r2
 8007388:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800738a:	4b2b      	ldr	r3, [pc, #172]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	f023 0202 	bic.w	r2, r3, #2
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007396:	4928      	ldr	r1, [pc, #160]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007398:	4313      	orrs	r3, r2
 800739a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800739c:	4b26      	ldr	r3, [pc, #152]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	4a25      	ldr	r2, [pc, #148]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80073a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073a8:	4b23      	ldr	r3, [pc, #140]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	4a22      	ldr	r2, [pc, #136]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80073ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80073b4:	4b20      	ldr	r3, [pc, #128]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	4a1f      	ldr	r2, [pc, #124]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80073ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80073c0:	4b1d      	ldr	r3, [pc, #116]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	4a1c      	ldr	r2, [pc, #112]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073cc:	4b1a      	ldr	r3, [pc, #104]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a19      	ldr	r2, [pc, #100]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80073d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d8:	f7fa fe34 	bl	8002044 <HAL_GetTick>
 80073dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073de:	e008      	b.n	80073f2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073e0:	f7fa fe30 	bl	8002044 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e067      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073f2:	4b11      	ldr	r3, [pc, #68]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0f0      	beq.n	80073e0 <HAL_RCC_OscConfig+0x730>
 80073fe:	e05f      	b.n	80074c0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007400:	4b0d      	ldr	r3, [pc, #52]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a0c      	ldr	r2, [pc, #48]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800740a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740c:	f7fa fe1a 	bl	8002044 <HAL_GetTick>
 8007410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007414:	f7fa fe16 	bl	8002044 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e04d      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007426:	4b04      	ldr	r3, [pc, #16]	; (8007438 <HAL_RCC_OscConfig+0x788>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1f0      	bne.n	8007414 <HAL_RCC_OscConfig+0x764>
 8007432:	e045      	b.n	80074c0 <HAL_RCC_OscConfig+0x810>
 8007434:	58024800 	.word	0x58024800
 8007438:	58024400 	.word	0x58024400
 800743c:	fffffc0c 	.word	0xfffffc0c
 8007440:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007444:	4b21      	ldr	r3, [pc, #132]	; (80074cc <HAL_RCC_OscConfig+0x81c>)
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800744a:	4b20      	ldr	r3, [pc, #128]	; (80074cc <HAL_RCC_OscConfig+0x81c>)
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	2b01      	cmp	r3, #1
 8007456:	d031      	beq.n	80074bc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f003 0203 	and.w	r2, r3, #3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007462:	429a      	cmp	r2, r3
 8007464:	d12a      	bne.n	80074bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	091b      	lsrs	r3, r3, #4
 800746a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007472:	429a      	cmp	r2, r3
 8007474:	d122      	bne.n	80074bc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007480:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007482:	429a      	cmp	r2, r3
 8007484:	d11a      	bne.n	80074bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	0a5b      	lsrs	r3, r3, #9
 800748a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007492:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007494:	429a      	cmp	r2, r3
 8007496:	d111      	bne.n	80074bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	0c1b      	lsrs	r3, r3, #16
 800749c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d108      	bne.n	80074bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	0e1b      	lsrs	r3, r3, #24
 80074ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d001      	beq.n	80074c0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3730      	adds	r7, #48	; 0x30
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	58024400 	.word	0x58024400

080074d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e19c      	b.n	800781e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074e4:	4b8a      	ldr	r3, [pc, #552]	; (8007710 <HAL_RCC_ClockConfig+0x240>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d910      	bls.n	8007514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074f2:	4b87      	ldr	r3, [pc, #540]	; (8007710 <HAL_RCC_ClockConfig+0x240>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f023 020f 	bic.w	r2, r3, #15
 80074fa:	4985      	ldr	r1, [pc, #532]	; (8007710 <HAL_RCC_ClockConfig+0x240>)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	4313      	orrs	r3, r2
 8007500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007502:	4b83      	ldr	r3, [pc, #524]	; (8007710 <HAL_RCC_ClockConfig+0x240>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 030f 	and.w	r3, r3, #15
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d001      	beq.n	8007514 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e184      	b.n	800781e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b00      	cmp	r3, #0
 800751e:	d010      	beq.n	8007542 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	4b7b      	ldr	r3, [pc, #492]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800752c:	429a      	cmp	r2, r3
 800752e:	d908      	bls.n	8007542 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007530:	4b78      	ldr	r3, [pc, #480]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	4975      	ldr	r1, [pc, #468]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 800753e:	4313      	orrs	r3, r2
 8007540:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0308 	and.w	r3, r3, #8
 800754a:	2b00      	cmp	r3, #0
 800754c:	d010      	beq.n	8007570 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	695a      	ldr	r2, [r3, #20]
 8007552:	4b70      	ldr	r3, [pc, #448]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800755a:	429a      	cmp	r2, r3
 800755c:	d908      	bls.n	8007570 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800755e:	4b6d      	ldr	r3, [pc, #436]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	496a      	ldr	r1, [pc, #424]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 800756c:	4313      	orrs	r3, r2
 800756e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	2b00      	cmp	r3, #0
 800757a:	d010      	beq.n	800759e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699a      	ldr	r2, [r3, #24]
 8007580:	4b64      	ldr	r3, [pc, #400]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007588:	429a      	cmp	r2, r3
 800758a:	d908      	bls.n	800759e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800758c:	4b61      	ldr	r3, [pc, #388]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	495e      	ldr	r1, [pc, #376]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 800759a:	4313      	orrs	r3, r2
 800759c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d010      	beq.n	80075cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	69da      	ldr	r2, [r3, #28]
 80075ae:	4b59      	ldr	r3, [pc, #356]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d908      	bls.n	80075cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80075ba:	4b56      	ldr	r3, [pc, #344]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	4953      	ldr	r1, [pc, #332]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d010      	beq.n	80075fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	4b4d      	ldr	r3, [pc, #308]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	f003 030f 	and.w	r3, r3, #15
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d908      	bls.n	80075fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075e8:	4b4a      	ldr	r3, [pc, #296]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	f023 020f 	bic.w	r2, r3, #15
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	4947      	ldr	r1, [pc, #284]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d055      	beq.n	80076b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007606:	4b43      	ldr	r3, [pc, #268]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	4940      	ldr	r1, [pc, #256]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 8007614:	4313      	orrs	r3, r2
 8007616:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d107      	bne.n	8007630 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007620:	4b3c      	ldr	r3, [pc, #240]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d121      	bne.n	8007670 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e0f6      	b.n	800781e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	2b03      	cmp	r3, #3
 8007636:	d107      	bne.n	8007648 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007638:	4b36      	ldr	r3, [pc, #216]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d115      	bne.n	8007670 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e0ea      	b.n	800781e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d107      	bne.n	8007660 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007650:	4b30      	ldr	r3, [pc, #192]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007658:	2b00      	cmp	r3, #0
 800765a:	d109      	bne.n	8007670 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e0de      	b.n	800781e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007660:	4b2c      	ldr	r3, [pc, #176]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e0d6      	b.n	800781e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007670:	4b28      	ldr	r3, [pc, #160]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f023 0207 	bic.w	r2, r3, #7
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	4925      	ldr	r1, [pc, #148]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 800767e:	4313      	orrs	r3, r2
 8007680:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007682:	f7fa fcdf 	bl	8002044 <HAL_GetTick>
 8007686:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007688:	e00a      	b.n	80076a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800768a:	f7fa fcdb 	bl	8002044 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	f241 3288 	movw	r2, #5000	; 0x1388
 8007698:	4293      	cmp	r3, r2
 800769a:	d901      	bls.n	80076a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e0be      	b.n	800781e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a0:	4b1c      	ldr	r3, [pc, #112]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	00db      	lsls	r3, r3, #3
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d1eb      	bne.n	800768a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d010      	beq.n	80076e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	4b14      	ldr	r3, [pc, #80]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	f003 030f 	and.w	r3, r3, #15
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d208      	bcs.n	80076e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076ce:	4b11      	ldr	r3, [pc, #68]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	f023 020f 	bic.w	r2, r3, #15
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	490e      	ldr	r1, [pc, #56]	; (8007714 <HAL_RCC_ClockConfig+0x244>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076e0:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <HAL_RCC_ClockConfig+0x240>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 030f 	and.w	r3, r3, #15
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d214      	bcs.n	8007718 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ee:	4b08      	ldr	r3, [pc, #32]	; (8007710 <HAL_RCC_ClockConfig+0x240>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f023 020f 	bic.w	r2, r3, #15
 80076f6:	4906      	ldr	r1, [pc, #24]	; (8007710 <HAL_RCC_ClockConfig+0x240>)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076fe:	4b04      	ldr	r3, [pc, #16]	; (8007710 <HAL_RCC_ClockConfig+0x240>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	429a      	cmp	r2, r3
 800770a:	d005      	beq.n	8007718 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e086      	b.n	800781e <HAL_RCC_ClockConfig+0x34e>
 8007710:	52002000 	.word	0x52002000
 8007714:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b00      	cmp	r3, #0
 8007722:	d010      	beq.n	8007746 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691a      	ldr	r2, [r3, #16]
 8007728:	4b3f      	ldr	r3, [pc, #252]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007730:	429a      	cmp	r2, r3
 8007732:	d208      	bcs.n	8007746 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007734:	4b3c      	ldr	r3, [pc, #240]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	4939      	ldr	r1, [pc, #228]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 8007742:	4313      	orrs	r3, r2
 8007744:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b00      	cmp	r3, #0
 8007750:	d010      	beq.n	8007774 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695a      	ldr	r2, [r3, #20]
 8007756:	4b34      	ldr	r3, [pc, #208]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800775e:	429a      	cmp	r2, r3
 8007760:	d208      	bcs.n	8007774 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007762:	4b31      	ldr	r3, [pc, #196]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	492e      	ldr	r1, [pc, #184]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 8007770:	4313      	orrs	r3, r2
 8007772:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0310 	and.w	r3, r3, #16
 800777c:	2b00      	cmp	r3, #0
 800777e:	d010      	beq.n	80077a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	699a      	ldr	r2, [r3, #24]
 8007784:	4b28      	ldr	r3, [pc, #160]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800778c:	429a      	cmp	r2, r3
 800778e:	d208      	bcs.n	80077a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007790:	4b25      	ldr	r3, [pc, #148]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	4922      	ldr	r1, [pc, #136]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0320 	and.w	r3, r3, #32
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d010      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	69da      	ldr	r2, [r3, #28]
 80077b2:	4b1d      	ldr	r3, [pc, #116]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d208      	bcs.n	80077d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80077be:	4b1a      	ldr	r3, [pc, #104]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	4917      	ldr	r1, [pc, #92]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80077d0:	f000 f834 	bl	800783c <HAL_RCC_GetSysClockFreq>
 80077d4:	4602      	mov	r2, r0
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	0a1b      	lsrs	r3, r3, #8
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	4912      	ldr	r1, [pc, #72]	; (800782c <HAL_RCC_ClockConfig+0x35c>)
 80077e2:	5ccb      	ldrb	r3, [r1, r3]
 80077e4:	f003 031f 	and.w	r3, r3, #31
 80077e8:	fa22 f303 	lsr.w	r3, r2, r3
 80077ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077ee:	4b0e      	ldr	r3, [pc, #56]	; (8007828 <HAL_RCC_ClockConfig+0x358>)
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	f003 030f 	and.w	r3, r3, #15
 80077f6:	4a0d      	ldr	r2, [pc, #52]	; (800782c <HAL_RCC_ClockConfig+0x35c>)
 80077f8:	5cd3      	ldrb	r3, [r2, r3]
 80077fa:	f003 031f 	and.w	r3, r3, #31
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	fa22 f303 	lsr.w	r3, r2, r3
 8007804:	4a0a      	ldr	r2, [pc, #40]	; (8007830 <HAL_RCC_ClockConfig+0x360>)
 8007806:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007808:	4a0a      	ldr	r2, [pc, #40]	; (8007834 <HAL_RCC_ClockConfig+0x364>)
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800780e:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <HAL_RCC_ClockConfig+0x368>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4618      	mov	r0, r3
 8007814:	f7f9 fd0a 	bl	800122c <HAL_InitTick>
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	58024400 	.word	0x58024400
 800782c:	08027fe8 	.word	0x08027fe8
 8007830:	24000004 	.word	0x24000004
 8007834:	24000000 	.word	0x24000000
 8007838:	24000008 	.word	0x24000008

0800783c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800783c:	b480      	push	{r7}
 800783e:	b089      	sub	sp, #36	; 0x24
 8007840:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007842:	4bb3      	ldr	r3, [pc, #716]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800784a:	2b18      	cmp	r3, #24
 800784c:	f200 8155 	bhi.w	8007afa <HAL_RCC_GetSysClockFreq+0x2be>
 8007850:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	080078bd 	.word	0x080078bd
 800785c:	08007afb 	.word	0x08007afb
 8007860:	08007afb 	.word	0x08007afb
 8007864:	08007afb 	.word	0x08007afb
 8007868:	08007afb 	.word	0x08007afb
 800786c:	08007afb 	.word	0x08007afb
 8007870:	08007afb 	.word	0x08007afb
 8007874:	08007afb 	.word	0x08007afb
 8007878:	080078e3 	.word	0x080078e3
 800787c:	08007afb 	.word	0x08007afb
 8007880:	08007afb 	.word	0x08007afb
 8007884:	08007afb 	.word	0x08007afb
 8007888:	08007afb 	.word	0x08007afb
 800788c:	08007afb 	.word	0x08007afb
 8007890:	08007afb 	.word	0x08007afb
 8007894:	08007afb 	.word	0x08007afb
 8007898:	080078e9 	.word	0x080078e9
 800789c:	08007afb 	.word	0x08007afb
 80078a0:	08007afb 	.word	0x08007afb
 80078a4:	08007afb 	.word	0x08007afb
 80078a8:	08007afb 	.word	0x08007afb
 80078ac:	08007afb 	.word	0x08007afb
 80078b0:	08007afb 	.word	0x08007afb
 80078b4:	08007afb 	.word	0x08007afb
 80078b8:	080078ef 	.word	0x080078ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078bc:	4b94      	ldr	r3, [pc, #592]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0320 	and.w	r3, r3, #32
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d009      	beq.n	80078dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078c8:	4b91      	ldr	r3, [pc, #580]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	08db      	lsrs	r3, r3, #3
 80078ce:	f003 0303 	and.w	r3, r3, #3
 80078d2:	4a90      	ldr	r2, [pc, #576]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078d4:	fa22 f303 	lsr.w	r3, r2, r3
 80078d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80078da:	e111      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80078dc:	4b8d      	ldr	r3, [pc, #564]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078de:	61bb      	str	r3, [r7, #24]
    break;
 80078e0:	e10e      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80078e2:	4b8d      	ldr	r3, [pc, #564]	; (8007b18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078e4:	61bb      	str	r3, [r7, #24]
    break;
 80078e6:	e10b      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80078e8:	4b8c      	ldr	r3, [pc, #560]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80078ea:	61bb      	str	r3, [r7, #24]
    break;
 80078ec:	e108      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078ee:	4b88      	ldr	r3, [pc, #544]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	f003 0303 	and.w	r3, r3, #3
 80078f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80078f8:	4b85      	ldr	r3, [pc, #532]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fc:	091b      	lsrs	r3, r3, #4
 80078fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007902:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007904:	4b82      	ldr	r3, [pc, #520]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800790e:	4b80      	ldr	r3, [pc, #512]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007912:	08db      	lsrs	r3, r3, #3
 8007914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	fb02 f303 	mul.w	r3, r2, r3
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007926:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 80e1 	beq.w	8007af4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2b02      	cmp	r3, #2
 8007936:	f000 8083 	beq.w	8007a40 <HAL_RCC_GetSysClockFreq+0x204>
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b02      	cmp	r3, #2
 800793e:	f200 80a1 	bhi.w	8007a84 <HAL_RCC_GetSysClockFreq+0x248>
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d003      	beq.n	8007950 <HAL_RCC_GetSysClockFreq+0x114>
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d056      	beq.n	80079fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800794e:	e099      	b.n	8007a84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007950:	4b6f      	ldr	r3, [pc, #444]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0320 	and.w	r3, r3, #32
 8007958:	2b00      	cmp	r3, #0
 800795a:	d02d      	beq.n	80079b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800795c:	4b6c      	ldr	r3, [pc, #432]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	08db      	lsrs	r3, r3, #3
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	4a6b      	ldr	r2, [pc, #428]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007968:	fa22 f303 	lsr.w	r3, r2, r3
 800796c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	ee07 3a90 	vmov	s15, r3
 8007974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007986:	4b62      	ldr	r3, [pc, #392]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007996:	ed97 6a02 	vldr	s12, [r7, #8]
 800799a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800799e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80079b6:	e087      	b.n	8007ac8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	ee07 3a90 	vmov	s15, r3
 80079be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007b24 <HAL_RCC_GetSysClockFreq+0x2e8>
 80079c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ca:	4b51      	ldr	r3, [pc, #324]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079da:	ed97 6a02 	vldr	s12, [r7, #8]
 80079de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079fa:	e065      	b.n	8007ac8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	ee07 3a90 	vmov	s15, r3
 8007a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007b28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a0e:	4b40      	ldr	r3, [pc, #256]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a3e:	e043      	b.n	8007ac8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	ee07 3a90 	vmov	s15, r3
 8007a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007b2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a52:	4b2f      	ldr	r3, [pc, #188]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a82:	e021      	b.n	8007ac8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	ee07 3a90 	vmov	s15, r3
 8007a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007b28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a96:	4b1e      	ldr	r3, [pc, #120]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a9e:	ee07 3a90 	vmov	s15, r3
 8007aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007aaa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007b20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ac6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007ac8:	4b11      	ldr	r3, [pc, #68]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007acc:	0a5b      	lsrs	r3, r3, #9
 8007ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	ee07 3a90 	vmov	s15, r3
 8007adc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ae0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aec:	ee17 3a90 	vmov	r3, s15
 8007af0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007af2:	e005      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	61bb      	str	r3, [r7, #24]
    break;
 8007af8:	e002      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007afa:	4b07      	ldr	r3, [pc, #28]	; (8007b18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007afc:	61bb      	str	r3, [r7, #24]
    break;
 8007afe:	bf00      	nop
  }

  return sysclockfreq;
 8007b00:	69bb      	ldr	r3, [r7, #24]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3724      	adds	r7, #36	; 0x24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	58024400 	.word	0x58024400
 8007b14:	03d09000 	.word	0x03d09000
 8007b18:	003d0900 	.word	0x003d0900
 8007b1c:	017d7840 	.word	0x017d7840
 8007b20:	46000000 	.word	0x46000000
 8007b24:	4c742400 	.word	0x4c742400
 8007b28:	4a742400 	.word	0x4a742400
 8007b2c:	4bbebc20 	.word	0x4bbebc20

08007b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b36:	f7ff fe81 	bl	800783c <HAL_RCC_GetSysClockFreq>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	4b10      	ldr	r3, [pc, #64]	; (8007b80 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	0a1b      	lsrs	r3, r3, #8
 8007b42:	f003 030f 	and.w	r3, r3, #15
 8007b46:	490f      	ldr	r1, [pc, #60]	; (8007b84 <HAL_RCC_GetHCLKFreq+0x54>)
 8007b48:	5ccb      	ldrb	r3, [r1, r3]
 8007b4a:	f003 031f 	and.w	r3, r3, #31
 8007b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b54:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	f003 030f 	and.w	r3, r3, #15
 8007b5c:	4a09      	ldr	r2, [pc, #36]	; (8007b84 <HAL_RCC_GetHCLKFreq+0x54>)
 8007b5e:	5cd3      	ldrb	r3, [r2, r3]
 8007b60:	f003 031f 	and.w	r3, r3, #31
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6a:	4a07      	ldr	r2, [pc, #28]	; (8007b88 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b6e:	4a07      	ldr	r2, [pc, #28]	; (8007b8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007b74:	4b04      	ldr	r3, [pc, #16]	; (8007b88 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b76:	681b      	ldr	r3, [r3, #0]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	58024400 	.word	0x58024400
 8007b84:	08027fe8 	.word	0x08027fe8
 8007b88:	24000004 	.word	0x24000004
 8007b8c:	24000000 	.word	0x24000000

08007b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007b94:	f7ff ffcc 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	091b      	lsrs	r3, r3, #4
 8007ba0:	f003 0307 	and.w	r3, r3, #7
 8007ba4:	4904      	ldr	r1, [pc, #16]	; (8007bb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ba6:	5ccb      	ldrb	r3, [r1, r3]
 8007ba8:	f003 031f 	and.w	r3, r3, #31
 8007bac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	58024400 	.word	0x58024400
 8007bb8:	08027fe8 	.word	0x08027fe8

08007bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007bc0:	f7ff ffb6 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	4b06      	ldr	r3, [pc, #24]	; (8007be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	0a1b      	lsrs	r3, r3, #8
 8007bcc:	f003 0307 	and.w	r3, r3, #7
 8007bd0:	4904      	ldr	r1, [pc, #16]	; (8007be4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007bd2:	5ccb      	ldrb	r3, [r1, r3]
 8007bd4:	f003 031f 	and.w	r3, r3, #31
 8007bd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	58024400 	.word	0x58024400
 8007be4:	08027fe8 	.word	0x08027fe8

08007be8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	223f      	movs	r2, #63	; 0x3f
 8007bf6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bf8:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <HAL_RCC_GetClockConfig+0x7c>)
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f003 0207 	and.w	r2, r3, #7
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007c04:	4b17      	ldr	r3, [pc, #92]	; (8007c64 <HAL_RCC_GetClockConfig+0x7c>)
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007c10:	4b14      	ldr	r3, [pc, #80]	; (8007c64 <HAL_RCC_GetClockConfig+0x7c>)
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	f003 020f 	and.w	r2, r3, #15
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007c1c:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <HAL_RCC_GetClockConfig+0x7c>)
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007c28:	4b0e      	ldr	r3, [pc, #56]	; (8007c64 <HAL_RCC_GetClockConfig+0x7c>)
 8007c2a:	69db      	ldr	r3, [r3, #28]
 8007c2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007c34:	4b0b      	ldr	r3, [pc, #44]	; (8007c64 <HAL_RCC_GetClockConfig+0x7c>)
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007c40:	4b08      	ldr	r3, [pc, #32]	; (8007c64 <HAL_RCC_GetClockConfig+0x7c>)
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c4c:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <HAL_RCC_GetClockConfig+0x80>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 020f 	and.w	r2, r3, #15
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	601a      	str	r2, [r3, #0]
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	58024400 	.word	0x58024400
 8007c68:	52002000 	.word	0x52002000

08007c6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c74:	2300      	movs	r3, #0
 8007c76:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c78:	2300      	movs	r3, #0
 8007c7a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d03f      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c90:	d02a      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007c92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c96:	d824      	bhi.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007c98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c9c:	d018      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007c9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ca2:	d81e      	bhi.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d003      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cac:	d007      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007cae:	e018      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cb0:	4bab      	ldr	r3, [pc, #684]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	4aaa      	ldr	r2, [pc, #680]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007cbc:	e015      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	2102      	movs	r1, #2
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f001 f9bf 	bl	8009048 <RCCEx_PLL2_Config>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007cce:	e00c      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3324      	adds	r3, #36	; 0x24
 8007cd4:	2102      	movs	r1, #2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f001 fa68 	bl	80091ac <RCCEx_PLL3_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ce0:	e003      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce6:	e000      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d109      	bne.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007cf0:	4b9b      	ldr	r3, [pc, #620]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfc:	4998      	ldr	r1, [pc, #608]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	650b      	str	r3, [r1, #80]	; 0x50
 8007d02:	e001      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
 8007d06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d03d      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d826      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007d1c:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d22:	bf00      	nop
 8007d24:	08007d39 	.word	0x08007d39
 8007d28:	08007d47 	.word	0x08007d47
 8007d2c:	08007d59 	.word	0x08007d59
 8007d30:	08007d71 	.word	0x08007d71
 8007d34:	08007d71 	.word	0x08007d71
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d38:	4b89      	ldr	r3, [pc, #548]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3c:	4a88      	ldr	r2, [pc, #544]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d44:	e015      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f001 f97b 	bl	8009048 <RCCEx_PLL2_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d56:	e00c      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3324      	adds	r3, #36	; 0x24
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f001 fa24 	bl	80091ac <RCCEx_PLL3_Config>
 8007d64:	4603      	mov	r3, r0
 8007d66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d68:	e003      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6e:	e000      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d109      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d78:	4b79      	ldr	r3, [pc, #484]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d7c:	f023 0207 	bic.w	r2, r3, #7
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d84:	4976      	ldr	r1, [pc, #472]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	650b      	str	r3, [r1, #80]	; 0x50
 8007d8a:	e001      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
 8007d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d042      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007da4:	d02b      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007daa:	d825      	bhi.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007dac:	2bc0      	cmp	r3, #192	; 0xc0
 8007dae:	d028      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007db0:	2bc0      	cmp	r3, #192	; 0xc0
 8007db2:	d821      	bhi.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007db4:	2b80      	cmp	r3, #128	; 0x80
 8007db6:	d016      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007db8:	2b80      	cmp	r3, #128	; 0x80
 8007dba:	d81d      	bhi.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007dc0:	2b40      	cmp	r3, #64	; 0x40
 8007dc2:	d007      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007dc4:	e018      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dc6:	4b66      	ldr	r3, [pc, #408]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dca:	4a65      	ldr	r2, [pc, #404]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007dd2:	e017      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	2100      	movs	r1, #0
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f001 f934 	bl	8009048 <RCCEx_PLL2_Config>
 8007de0:	4603      	mov	r3, r0
 8007de2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007de4:	e00e      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3324      	adds	r3, #36	; 0x24
 8007dea:	2100      	movs	r1, #0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f001 f9dd 	bl	80091ac <RCCEx_PLL3_Config>
 8007df2:	4603      	mov	r3, r0
 8007df4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007df6:	e005      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8007dfc:	e002      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007dfe:	bf00      	nop
 8007e00:	e000      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d109      	bne.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007e0a:	4b55      	ldr	r3, [pc, #340]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e16:	4952      	ldr	r1, [pc, #328]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	650b      	str	r3, [r1, #80]	; 0x50
 8007e1c:	e001      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
 8007e20:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d049      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e38:	d030      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007e3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e3e:	d82a      	bhi.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e44:	d02c      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007e46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e4a:	d824      	bhi.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e50:	d018      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e56:	d81e      	bhi.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007e5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e60:	d007      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007e62:	e018      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e64:	4b3e      	ldr	r3, [pc, #248]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	4a3d      	ldr	r2, [pc, #244]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e70:	e017      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3304      	adds	r3, #4
 8007e76:	2100      	movs	r1, #0
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 f8e5 	bl	8009048 <RCCEx_PLL2_Config>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007e82:	e00e      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3324      	adds	r3, #36	; 0x24
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 f98e 	bl	80091ac <RCCEx_PLL3_Config>
 8007e90:	4603      	mov	r3, r0
 8007e92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e94:	e005      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	75fb      	strb	r3, [r7, #23]
      break;
 8007e9a:	e002      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007e9c:	bf00      	nop
 8007e9e:	e000      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10a      	bne.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ea8:	4b2d      	ldr	r3, [pc, #180]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007eb6:	492a      	ldr	r1, [pc, #168]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	658b      	str	r3, [r1, #88]	; 0x58
 8007ebc:	e001      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d04c      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ed8:	d030      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ede:	d82a      	bhi.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ee0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ee4:	d02c      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007ee6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007eea:	d824      	bhi.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ef0:	d018      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ef6:	d81e      	bhi.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f00:	d007      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007f02:	e018      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f04:	4b16      	ldr	r3, [pc, #88]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	4a15      	ldr	r2, [pc, #84]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f10:	e017      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3304      	adds	r3, #4
 8007f16:	2100      	movs	r1, #0
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f001 f895 	bl	8009048 <RCCEx_PLL2_Config>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f22:	e00e      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3324      	adds	r3, #36	; 0x24
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f93e 	bl	80091ac <RCCEx_PLL3_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f34:	e005      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	75fb      	strb	r3, [r7, #23]
      break;
 8007f3a:	e002      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007f3c:	bf00      	nop
 8007f3e:	e000      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10d      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007f48:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f56:	4902      	ldr	r1, [pc, #8]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	658b      	str	r3, [r1, #88]	; 0x58
 8007f5c:	e004      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007f5e:	bf00      	nop
 8007f60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d032      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f78:	2b30      	cmp	r3, #48	; 0x30
 8007f7a:	d01c      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f7c:	2b30      	cmp	r3, #48	; 0x30
 8007f7e:	d817      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007f80:	2b20      	cmp	r3, #32
 8007f82:	d00c      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007f84:	2b20      	cmp	r3, #32
 8007f86:	d813      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d016      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007f8c:	2b10      	cmp	r3, #16
 8007f8e:	d10f      	bne.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f90:	4baf      	ldr	r3, [pc, #700]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	4aae      	ldr	r2, [pc, #696]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007f9c:	e00e      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	2102      	movs	r1, #2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f001 f84f 	bl	8009048 <RCCEx_PLL2_Config>
 8007faa:	4603      	mov	r3, r0
 8007fac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fae:	e005      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb4:	e002      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007fb6:	bf00      	nop
 8007fb8:	e000      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d109      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007fc2:	4ba3      	ldr	r3, [pc, #652]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fce:	49a0      	ldr	r1, [pc, #640]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fd4:	e001      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
 8007fd8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d047      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fee:	d030      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ff4:	d82a      	bhi.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007ff6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ffa:	d02c      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007ffc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008000:	d824      	bhi.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008006:	d018      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800800c:	d81e      	bhi.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008016:	d007      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008018:	e018      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800801a:	4b8d      	ldr	r3, [pc, #564]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	4a8c      	ldr	r2, [pc, #560]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008024:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008026:	e017      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3304      	adds	r3, #4
 800802c:	2100      	movs	r1, #0
 800802e:	4618      	mov	r0, r3
 8008030:	f001 f80a 	bl	8009048 <RCCEx_PLL2_Config>
 8008034:	4603      	mov	r3, r0
 8008036:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008038:	e00e      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	3324      	adds	r3, #36	; 0x24
 800803e:	2100      	movs	r1, #0
 8008040:	4618      	mov	r0, r3
 8008042:	f001 f8b3 	bl	80091ac <RCCEx_PLL3_Config>
 8008046:	4603      	mov	r3, r0
 8008048:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800804a:	e005      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	75fb      	strb	r3, [r7, #23]
      break;
 8008050:	e002      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008052:	bf00      	nop
 8008054:	e000      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d109      	bne.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800805e:	4b7c      	ldr	r3, [pc, #496]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008062:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800806a:	4979      	ldr	r1, [pc, #484]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800806c:	4313      	orrs	r3, r2
 800806e:	650b      	str	r3, [r1, #80]	; 0x50
 8008070:	e001      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d049      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008086:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800808a:	d02e      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800808c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008090:	d828      	bhi.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008092:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008096:	d02a      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800809c:	d822      	bhi.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800809e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080a2:	d026      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80080a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080a8:	d81c      	bhi.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80080aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080ae:	d010      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80080b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080b4:	d816      	bhi.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d01d      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80080ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080be:	d111      	bne.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3304      	adds	r3, #4
 80080c4:	2101      	movs	r1, #1
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 ffbe 	bl	8009048 <RCCEx_PLL2_Config>
 80080cc:	4603      	mov	r3, r0
 80080ce:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080d0:	e012      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3324      	adds	r3, #36	; 0x24
 80080d6:	2101      	movs	r1, #1
 80080d8:	4618      	mov	r0, r3
 80080da:	f001 f867 	bl	80091ac <RCCEx_PLL3_Config>
 80080de:	4603      	mov	r3, r0
 80080e0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080e2:	e009      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	75fb      	strb	r3, [r7, #23]
      break;
 80080e8:	e006      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80080ea:	bf00      	nop
 80080ec:	e004      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80080ee:	bf00      	nop
 80080f0:	e002      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80080f2:	bf00      	nop
 80080f4:	e000      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80080f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d109      	bne.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80080fe:	4b54      	ldr	r3, [pc, #336]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008102:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800810a:	4951      	ldr	r1, [pc, #324]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800810c:	4313      	orrs	r3, r2
 800810e:	650b      	str	r3, [r1, #80]	; 0x50
 8008110:	e001      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d04b      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800812c:	d02e      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800812e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008132:	d828      	bhi.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008138:	d02a      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800813a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800813e:	d822      	bhi.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008140:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008144:	d026      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800814a:	d81c      	bhi.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800814c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008150:	d010      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008156:	d816      	bhi.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01d      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800815c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008160:	d111      	bne.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3304      	adds	r3, #4
 8008166:	2101      	movs	r1, #1
 8008168:	4618      	mov	r0, r3
 800816a:	f000 ff6d 	bl	8009048 <RCCEx_PLL2_Config>
 800816e:	4603      	mov	r3, r0
 8008170:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008172:	e012      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3324      	adds	r3, #36	; 0x24
 8008178:	2101      	movs	r1, #1
 800817a:	4618      	mov	r0, r3
 800817c:	f001 f816 	bl	80091ac <RCCEx_PLL3_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008184:	e009      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	75fb      	strb	r3, [r7, #23]
      break;
 800818a:	e006      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800818c:	bf00      	nop
 800818e:	e004      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008190:	bf00      	nop
 8008192:	e002      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008194:	bf00      	nop
 8008196:	e000      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800819a:	7dfb      	ldrb	r3, [r7, #23]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081a0:	4b2b      	ldr	r3, [pc, #172]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081ae:	4928      	ldr	r1, [pc, #160]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	658b      	str	r3, [r1, #88]	; 0x58
 80081b4:	e001      	b.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d02f      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081ce:	d00e      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x582>
 80081d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d4:	d814      	bhi.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d015      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80081da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081de:	d10f      	bne.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081e0:	4b1b      	ldr	r3, [pc, #108]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	4a1a      	ldr	r2, [pc, #104]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80081ec:	e00c      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3304      	adds	r3, #4
 80081f2:	2101      	movs	r1, #1
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 ff27 	bl	8009048 <RCCEx_PLL2_Config>
 80081fa:	4603      	mov	r3, r0
 80081fc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80081fe:	e003      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	75fb      	strb	r3, [r7, #23]
      break;
 8008204:	e000      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008208:	7dfb      	ldrb	r3, [r7, #23]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800820e:	4b10      	ldr	r3, [pc, #64]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008212:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800821a:	490d      	ldr	r1, [pc, #52]	; (8008250 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800821c:	4313      	orrs	r3, r2
 800821e:	650b      	str	r3, [r1, #80]	; 0x50
 8008220:	e001      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d033      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008236:	2b03      	cmp	r3, #3
 8008238:	d81c      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800823a:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800823c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008240:	0800827b 	.word	0x0800827b
 8008244:	08008255 	.word	0x08008255
 8008248:	08008263 	.word	0x08008263
 800824c:	0800827b 	.word	0x0800827b
 8008250:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008254:	4bb8      	ldr	r3, [pc, #736]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	4ab7      	ldr	r2, [pc, #732]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800825a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800825e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008260:	e00c      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3304      	adds	r3, #4
 8008266:	2102      	movs	r1, #2
 8008268:	4618      	mov	r0, r3
 800826a:	f000 feed 	bl	8009048 <RCCEx_PLL2_Config>
 800826e:	4603      	mov	r3, r0
 8008270:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008272:	e003      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	75fb      	strb	r3, [r7, #23]
      break;
 8008278:	e000      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800827a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800827c:	7dfb      	ldrb	r3, [r7, #23]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d109      	bne.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008282:	4bad      	ldr	r3, [pc, #692]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008286:	f023 0203 	bic.w	r2, r3, #3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800828e:	49aa      	ldr	r1, [pc, #680]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008290:	4313      	orrs	r3, r2
 8008292:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008294:	e001      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008296:	7dfb      	ldrb	r3, [r7, #23]
 8008298:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 8086 	beq.w	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082a8:	4ba4      	ldr	r3, [pc, #656]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4aa3      	ldr	r2, [pc, #652]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80082ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082b4:	f7f9 fec6 	bl	8002044 <HAL_GetTick>
 80082b8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082ba:	e009      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082bc:	f7f9 fec2 	bl	8002044 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b64      	cmp	r3, #100	; 0x64
 80082c8:	d902      	bls.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	75fb      	strb	r3, [r7, #23]
        break;
 80082ce:	e005      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082d0:	4b9a      	ldr	r3, [pc, #616]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0ef      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d166      	bne.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80082e2:	4b95      	ldr	r3, [pc, #596]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082ec:	4053      	eors	r3, r2
 80082ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d013      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082f6:	4b90      	ldr	r3, [pc, #576]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082fe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008300:	4b8d      	ldr	r3, [pc, #564]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008304:	4a8c      	ldr	r2, [pc, #560]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800830a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800830c:	4b8a      	ldr	r3, [pc, #552]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800830e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008310:	4a89      	ldr	r2, [pc, #548]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008316:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008318:	4a87      	ldr	r2, [pc, #540]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008328:	d115      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800832a:	f7f9 fe8b 	bl	8002044 <HAL_GetTick>
 800832e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008330:	e00b      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008332:	f7f9 fe87 	bl	8002044 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008340:	4293      	cmp	r3, r2
 8008342:	d902      	bls.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	75fb      	strb	r3, [r7, #23]
            break;
 8008348:	e005      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800834a:	4b7b      	ldr	r3, [pc, #492]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800834c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0ed      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008356:	7dfb      	ldrb	r3, [r7, #23]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d126      	bne.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800836a:	d10d      	bne.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800836c:	4b72      	ldr	r3, [pc, #456]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800837a:	0919      	lsrs	r1, r3, #4
 800837c:	4b70      	ldr	r3, [pc, #448]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800837e:	400b      	ands	r3, r1
 8008380:	496d      	ldr	r1, [pc, #436]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008382:	4313      	orrs	r3, r2
 8008384:	610b      	str	r3, [r1, #16]
 8008386:	e005      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008388:	4b6b      	ldr	r3, [pc, #428]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	4a6a      	ldr	r2, [pc, #424]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800838e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008392:	6113      	str	r3, [r2, #16]
 8008394:	4b68      	ldr	r3, [pc, #416]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008396:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800839e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083a2:	4965      	ldr	r1, [pc, #404]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	670b      	str	r3, [r1, #112]	; 0x70
 80083a8:	e004      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	75bb      	strb	r3, [r7, #22]
 80083ae:	e001      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d07e      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083c4:	2b28      	cmp	r3, #40	; 0x28
 80083c6:	d867      	bhi.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80083c8:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80083ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ce:	bf00      	nop
 80083d0:	0800849f 	.word	0x0800849f
 80083d4:	08008499 	.word	0x08008499
 80083d8:	08008499 	.word	0x08008499
 80083dc:	08008499 	.word	0x08008499
 80083e0:	08008499 	.word	0x08008499
 80083e4:	08008499 	.word	0x08008499
 80083e8:	08008499 	.word	0x08008499
 80083ec:	08008499 	.word	0x08008499
 80083f0:	08008475 	.word	0x08008475
 80083f4:	08008499 	.word	0x08008499
 80083f8:	08008499 	.word	0x08008499
 80083fc:	08008499 	.word	0x08008499
 8008400:	08008499 	.word	0x08008499
 8008404:	08008499 	.word	0x08008499
 8008408:	08008499 	.word	0x08008499
 800840c:	08008499 	.word	0x08008499
 8008410:	08008487 	.word	0x08008487
 8008414:	08008499 	.word	0x08008499
 8008418:	08008499 	.word	0x08008499
 800841c:	08008499 	.word	0x08008499
 8008420:	08008499 	.word	0x08008499
 8008424:	08008499 	.word	0x08008499
 8008428:	08008499 	.word	0x08008499
 800842c:	08008499 	.word	0x08008499
 8008430:	0800849f 	.word	0x0800849f
 8008434:	08008499 	.word	0x08008499
 8008438:	08008499 	.word	0x08008499
 800843c:	08008499 	.word	0x08008499
 8008440:	08008499 	.word	0x08008499
 8008444:	08008499 	.word	0x08008499
 8008448:	08008499 	.word	0x08008499
 800844c:	08008499 	.word	0x08008499
 8008450:	0800849f 	.word	0x0800849f
 8008454:	08008499 	.word	0x08008499
 8008458:	08008499 	.word	0x08008499
 800845c:	08008499 	.word	0x08008499
 8008460:	08008499 	.word	0x08008499
 8008464:	08008499 	.word	0x08008499
 8008468:	08008499 	.word	0x08008499
 800846c:	08008499 	.word	0x08008499
 8008470:	0800849f 	.word	0x0800849f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	3304      	adds	r3, #4
 8008478:	2101      	movs	r1, #1
 800847a:	4618      	mov	r0, r3
 800847c:	f000 fde4 	bl	8009048 <RCCEx_PLL2_Config>
 8008480:	4603      	mov	r3, r0
 8008482:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008484:	e00c      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3324      	adds	r3, #36	; 0x24
 800848a:	2101      	movs	r1, #1
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fe8d 	bl	80091ac <RCCEx_PLL3_Config>
 8008492:	4603      	mov	r3, r0
 8008494:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008496:	e003      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	75fb      	strb	r3, [r7, #23]
      break;
 800849c:	e000      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800849e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d109      	bne.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80084a6:	4b24      	ldr	r3, [pc, #144]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084aa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084b2:	4921      	ldr	r1, [pc, #132]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	654b      	str	r3, [r1, #84]	; 0x54
 80084b8:	e001      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d03e      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ce:	2b05      	cmp	r3, #5
 80084d0:	d820      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	0800851b 	.word	0x0800851b
 80084dc:	080084f1 	.word	0x080084f1
 80084e0:	08008503 	.word	0x08008503
 80084e4:	0800851b 	.word	0x0800851b
 80084e8:	0800851b 	.word	0x0800851b
 80084ec:	0800851b 	.word	0x0800851b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3304      	adds	r3, #4
 80084f4:	2101      	movs	r1, #1
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 fda6 	bl	8009048 <RCCEx_PLL2_Config>
 80084fc:	4603      	mov	r3, r0
 80084fe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008500:	e00c      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3324      	adds	r3, #36	; 0x24
 8008506:	2101      	movs	r1, #1
 8008508:	4618      	mov	r0, r3
 800850a:	f000 fe4f 	bl	80091ac <RCCEx_PLL3_Config>
 800850e:	4603      	mov	r3, r0
 8008510:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008512:	e003      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	75fb      	strb	r3, [r7, #23]
      break;
 8008518:	e000      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800851a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800851c:	7dfb      	ldrb	r3, [r7, #23]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d110      	bne.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008522:	4b05      	ldr	r3, [pc, #20]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008526:	f023 0207 	bic.w	r2, r3, #7
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800852e:	4902      	ldr	r1, [pc, #8]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008530:	4313      	orrs	r3, r2
 8008532:	654b      	str	r3, [r1, #84]	; 0x54
 8008534:	e008      	b.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008536:	bf00      	nop
 8008538:	58024400 	.word	0x58024400
 800853c:	58024800 	.word	0x58024800
 8008540:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008544:	7dfb      	ldrb	r3, [r7, #23]
 8008546:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b00      	cmp	r3, #0
 8008552:	d039      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855a:	2b05      	cmp	r3, #5
 800855c:	d820      	bhi.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800855e:	a201      	add	r2, pc, #4	; (adr r2, 8008564 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008564:	080085a7 	.word	0x080085a7
 8008568:	0800857d 	.word	0x0800857d
 800856c:	0800858f 	.word	0x0800858f
 8008570:	080085a7 	.word	0x080085a7
 8008574:	080085a7 	.word	0x080085a7
 8008578:	080085a7 	.word	0x080085a7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3304      	adds	r3, #4
 8008580:	2101      	movs	r1, #1
 8008582:	4618      	mov	r0, r3
 8008584:	f000 fd60 	bl	8009048 <RCCEx_PLL2_Config>
 8008588:	4603      	mov	r3, r0
 800858a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800858c:	e00c      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3324      	adds	r3, #36	; 0x24
 8008592:	2101      	movs	r1, #1
 8008594:	4618      	mov	r0, r3
 8008596:	f000 fe09 	bl	80091ac <RCCEx_PLL3_Config>
 800859a:	4603      	mov	r3, r0
 800859c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800859e:	e003      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	75fb      	strb	r3, [r7, #23]
      break;
 80085a4:	e000      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80085a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10a      	bne.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085ae:	4bb7      	ldr	r3, [pc, #732]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b2:	f023 0207 	bic.w	r2, r3, #7
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085bc:	49b3      	ldr	r1, [pc, #716]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	658b      	str	r3, [r1, #88]	; 0x58
 80085c2:	e001      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c4:	7dfb      	ldrb	r3, [r7, #23]
 80085c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0320 	and.w	r3, r3, #32
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d04b      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085de:	d02e      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80085e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085e4:	d828      	bhi.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80085e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ea:	d02a      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80085ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f0:	d822      	bhi.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80085f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085f6:	d026      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80085f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085fc:	d81c      	bhi.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80085fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008602:	d010      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008608:	d816      	bhi.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d01d      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800860e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008612:	d111      	bne.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3304      	adds	r3, #4
 8008618:	2100      	movs	r1, #0
 800861a:	4618      	mov	r0, r3
 800861c:	f000 fd14 	bl	8009048 <RCCEx_PLL2_Config>
 8008620:	4603      	mov	r3, r0
 8008622:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008624:	e012      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3324      	adds	r3, #36	; 0x24
 800862a:	2102      	movs	r1, #2
 800862c:	4618      	mov	r0, r3
 800862e:	f000 fdbd 	bl	80091ac <RCCEx_PLL3_Config>
 8008632:	4603      	mov	r3, r0
 8008634:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008636:	e009      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	75fb      	strb	r3, [r7, #23]
      break;
 800863c:	e006      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800863e:	bf00      	nop
 8008640:	e004      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008642:	bf00      	nop
 8008644:	e002      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008646:	bf00      	nop
 8008648:	e000      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800864a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10a      	bne.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008652:	4b8e      	ldr	r3, [pc, #568]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008656:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008660:	498a      	ldr	r1, [pc, #552]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008662:	4313      	orrs	r3, r2
 8008664:	654b      	str	r3, [r1, #84]	; 0x54
 8008666:	e001      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d04b      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800867e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008682:	d02e      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008684:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008688:	d828      	bhi.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800868a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800868e:	d02a      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008694:	d822      	bhi.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008696:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800869a:	d026      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800869c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086a0:	d81c      	bhi.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80086a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086a6:	d010      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80086a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ac:	d816      	bhi.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d01d      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80086b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086b6:	d111      	bne.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3304      	adds	r3, #4
 80086bc:	2100      	movs	r1, #0
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fcc2 	bl	8009048 <RCCEx_PLL2_Config>
 80086c4:	4603      	mov	r3, r0
 80086c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086c8:	e012      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3324      	adds	r3, #36	; 0x24
 80086ce:	2102      	movs	r1, #2
 80086d0:	4618      	mov	r0, r3
 80086d2:	f000 fd6b 	bl	80091ac <RCCEx_PLL3_Config>
 80086d6:	4603      	mov	r3, r0
 80086d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086da:	e009      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	75fb      	strb	r3, [r7, #23]
      break;
 80086e0:	e006      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80086e2:	bf00      	nop
 80086e4:	e004      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80086e6:	bf00      	nop
 80086e8:	e002      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80086ea:	bf00      	nop
 80086ec:	e000      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80086ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10a      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80086f6:	4b65      	ldr	r3, [pc, #404]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008704:	4961      	ldr	r1, [pc, #388]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008706:	4313      	orrs	r3, r2
 8008708:	658b      	str	r3, [r1, #88]	; 0x58
 800870a:	e001      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008718:	2b00      	cmp	r3, #0
 800871a:	d04b      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008722:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008726:	d02e      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008728:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800872c:	d828      	bhi.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800872e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008732:	d02a      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008738:	d822      	bhi.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800873a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800873e:	d026      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008740:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008744:	d81c      	bhi.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800874a:	d010      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800874c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008750:	d816      	bhi.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d01d      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800875a:	d111      	bne.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3304      	adds	r3, #4
 8008760:	2100      	movs	r1, #0
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fc70 	bl	8009048 <RCCEx_PLL2_Config>
 8008768:	4603      	mov	r3, r0
 800876a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800876c:	e012      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3324      	adds	r3, #36	; 0x24
 8008772:	2102      	movs	r1, #2
 8008774:	4618      	mov	r0, r3
 8008776:	f000 fd19 	bl	80091ac <RCCEx_PLL3_Config>
 800877a:	4603      	mov	r3, r0
 800877c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800877e:	e009      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	75fb      	strb	r3, [r7, #23]
      break;
 8008784:	e006      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008786:	bf00      	nop
 8008788:	e004      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800878a:	bf00      	nop
 800878c:	e002      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800878e:	bf00      	nop
 8008790:	e000      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008792:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008794:	7dfb      	ldrb	r3, [r7, #23]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10a      	bne.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800879a:	4b3c      	ldr	r3, [pc, #240]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800879c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087a8:	4938      	ldr	r1, [pc, #224]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087aa:	4313      	orrs	r3, r2
 80087ac:	658b      	str	r3, [r1, #88]	; 0x58
 80087ae:	e001      	b.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0308 	and.w	r3, r3, #8
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d01a      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ca:	d10a      	bne.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3324      	adds	r3, #36	; 0x24
 80087d0:	2102      	movs	r1, #2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fcea 	bl	80091ac <RCCEx_PLL3_Config>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d001      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80087e2:	4b2a      	ldr	r3, [pc, #168]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087f0:	4926      	ldr	r1, [pc, #152]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0310 	and.w	r3, r3, #16
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01a      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800880c:	d10a      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	3324      	adds	r3, #36	; 0x24
 8008812:	2102      	movs	r1, #2
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fcc9 	bl	80091ac <RCCEx_PLL3_Config>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008824:	4b19      	ldr	r3, [pc, #100]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008832:	4916      	ldr	r1, [pc, #88]	; (800888c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008834:	4313      	orrs	r3, r2
 8008836:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d036      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800884a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800884e:	d01f      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008854:	d817      	bhi.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800885a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885e:	d009      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008860:	e011      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	3304      	adds	r3, #4
 8008866:	2100      	movs	r1, #0
 8008868:	4618      	mov	r0, r3
 800886a:	f000 fbed 	bl	8009048 <RCCEx_PLL2_Config>
 800886e:	4603      	mov	r3, r0
 8008870:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008872:	e00e      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3324      	adds	r3, #36	; 0x24
 8008878:	2102      	movs	r1, #2
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fc96 	bl	80091ac <RCCEx_PLL3_Config>
 8008880:	4603      	mov	r3, r0
 8008882:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008884:	e005      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	75fb      	strb	r3, [r7, #23]
      break;
 800888a:	e002      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800888c:	58024400 	.word	0x58024400
      break;
 8008890:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008892:	7dfb      	ldrb	r3, [r7, #23]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10a      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008898:	4b8b      	ldr	r3, [pc, #556]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800889a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80088a6:	4988      	ldr	r1, [pc, #544]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	658b      	str	r3, [r1, #88]	; 0x58
 80088ac:	e001      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ae:	7dfb      	ldrb	r3, [r7, #23]
 80088b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d033      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088c8:	d01c      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80088ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088ce:	d816      	bhi.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80088d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088d4:	d003      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80088d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088da:	d007      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80088dc:	e00f      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088de:	4b7a      	ldr	r3, [pc, #488]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	4a79      	ldr	r2, [pc, #484]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80088ea:	e00c      	b.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3324      	adds	r3, #36	; 0x24
 80088f0:	2101      	movs	r1, #1
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fc5a 	bl	80091ac <RCCEx_PLL3_Config>
 80088f8:	4603      	mov	r3, r0
 80088fa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80088fc:	e003      	b.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	75fb      	strb	r3, [r7, #23]
      break;
 8008902:	e000      	b.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800890c:	4b6e      	ldr	r3, [pc, #440]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800890e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008910:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800891a:	496b      	ldr	r1, [pc, #428]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800891c:	4313      	orrs	r3, r2
 800891e:	654b      	str	r3, [r1, #84]	; 0x54
 8008920:	e001      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d029      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800893a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800893e:	d007      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008940:	e00f      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008942:	4b61      	ldr	r3, [pc, #388]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	4a60      	ldr	r2, [pc, #384]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800894c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800894e:	e00b      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3304      	adds	r3, #4
 8008954:	2102      	movs	r1, #2
 8008956:	4618      	mov	r0, r3
 8008958:	f000 fb76 	bl	8009048 <RCCEx_PLL2_Config>
 800895c:	4603      	mov	r3, r0
 800895e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008960:	e002      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	75fb      	strb	r3, [r7, #23]
      break;
 8008966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d109      	bne.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800896e:	4b56      	ldr	r3, [pc, #344]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008972:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800897a:	4953      	ldr	r1, [pc, #332]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800897c:	4313      	orrs	r3, r2
 800897e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008980:	e001      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	3324      	adds	r3, #36	; 0x24
 8008996:	2102      	movs	r1, #2
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fc07 	bl	80091ac <RCCEx_PLL3_Config>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d030      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089bc:	d017      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80089be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089c2:	d811      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80089c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089c8:	d013      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80089ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ce:	d80b      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d010      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80089d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089d8:	d106      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089da:	4b3b      	ldr	r3, [pc, #236]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089de:	4a3a      	ldr	r2, [pc, #232]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80089e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80089e6:	e007      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	75fb      	strb	r3, [r7, #23]
      break;
 80089ec:	e004      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80089ee:	bf00      	nop
 80089f0:	e002      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80089f2:	bf00      	nop
 80089f4:	e000      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80089f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d109      	bne.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089fe:	4b32      	ldr	r3, [pc, #200]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a0a:	492f      	ldr	r1, [pc, #188]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	654b      	str	r3, [r1, #84]	; 0x54
 8008a10:	e001      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
 8008a14:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d008      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a22:	4b29      	ldr	r3, [pc, #164]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2e:	4926      	ldr	r1, [pc, #152]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d009      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a40:	4b21      	ldr	r3, [pc, #132]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a4e:	491e      	ldr	r1, [pc, #120]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d008      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a60:	4b19      	ldr	r3, [pc, #100]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a6c:	4916      	ldr	r1, [pc, #88]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00d      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a7e:	4b12      	ldr	r3, [pc, #72]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	4a11      	ldr	r2, [pc, #68]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008a84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a88:	6113      	str	r3, [r2, #16]
 8008a8a:	4b0f      	ldr	r3, [pc, #60]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008a8c:	691a      	ldr	r2, [r3, #16]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008a94:	490c      	ldr	r1, [pc, #48]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	da08      	bge.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008aa2:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aae:	4906      	ldr	r1, [pc, #24]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008ab4:	7dbb      	ldrb	r3, [r7, #22]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	e000      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	58024400 	.word	0x58024400

08008acc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008ad0:	f7ff f82e 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	091b      	lsrs	r3, r3, #4
 8008adc:	f003 0307 	and.w	r3, r3, #7
 8008ae0:	4904      	ldr	r1, [pc, #16]	; (8008af4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008ae2:	5ccb      	ldrb	r3, [r1, r3]
 8008ae4:	f003 031f 	and.w	r3, r3, #31
 8008ae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	58024400 	.word	0x58024400
 8008af4:	08027fe8 	.word	0x08027fe8

08008af8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b089      	sub	sp, #36	; 0x24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b00:	4ba1      	ldr	r3, [pc, #644]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b04:	f003 0303 	and.w	r3, r3, #3
 8008b08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008b0a:	4b9f      	ldr	r3, [pc, #636]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0e:	0b1b      	lsrs	r3, r3, #12
 8008b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b16:	4b9c      	ldr	r3, [pc, #624]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1a:	091b      	lsrs	r3, r3, #4
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008b22:	4b99      	ldr	r3, [pc, #612]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b26:	08db      	lsrs	r3, r3, #3
 8008b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 8111 	beq.w	8008d68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	f000 8083 	beq.w	8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	f200 80a1 	bhi.w	8008c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d003      	beq.n	8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d056      	beq.n	8008c10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008b62:	e099      	b.n	8008c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b64:	4b88      	ldr	r3, [pc, #544]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0320 	and.w	r3, r3, #32
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d02d      	beq.n	8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b70:	4b85      	ldr	r3, [pc, #532]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	08db      	lsrs	r3, r3, #3
 8008b76:	f003 0303 	and.w	r3, r3, #3
 8008b7a:	4a84      	ldr	r2, [pc, #528]	; (8008d8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b80:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	ee07 3a90 	vmov	s15, r3
 8008b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b9a:	4b7b      	ldr	r3, [pc, #492]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008bca:	e087      	b.n	8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	ee07 3a90 	vmov	s15, r3
 8008bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bde:	4b6a      	ldr	r3, [pc, #424]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bf2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c0e:	e065      	b.n	8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c22:	4b59      	ldr	r3, [pc, #356]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c52:	e043      	b.n	8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c66:	4b48      	ldr	r3, [pc, #288]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c96:	e021      	b.n	8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008caa:	4b37      	ldr	r3, [pc, #220]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb2:	ee07 3a90 	vmov	s15, r3
 8008cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cbe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008cdc:	4b2a      	ldr	r3, [pc, #168]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce0:	0a5b      	lsrs	r3, r3, #9
 8008ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d02:	ee17 2a90 	vmov	r2, s15
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008d0a:	4b1f      	ldr	r3, [pc, #124]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	0c1b      	lsrs	r3, r3, #16
 8008d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d14:	ee07 3a90 	vmov	s15, r3
 8008d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d24:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d30:	ee17 2a90 	vmov	r2, s15
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008d38:	4b13      	ldr	r3, [pc, #76]	; (8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3c:	0e1b      	lsrs	r3, r3, #24
 8008d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d5e:	ee17 2a90 	vmov	r2, s15
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d66:	e008      	b.n	8008d7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	609a      	str	r2, [r3, #8]
}
 8008d7a:	bf00      	nop
 8008d7c:	3724      	adds	r7, #36	; 0x24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	58024400 	.word	0x58024400
 8008d8c:	03d09000 	.word	0x03d09000
 8008d90:	46000000 	.word	0x46000000
 8008d94:	4c742400 	.word	0x4c742400
 8008d98:	4a742400 	.word	0x4a742400
 8008d9c:	4bbebc20 	.word	0x4bbebc20

08008da0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b089      	sub	sp, #36	; 0x24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008da8:	4ba1      	ldr	r3, [pc, #644]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dac:	f003 0303 	and.w	r3, r3, #3
 8008db0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008db2:	4b9f      	ldr	r3, [pc, #636]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db6:	0d1b      	lsrs	r3, r3, #20
 8008db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008dbe:	4b9c      	ldr	r3, [pc, #624]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	0a1b      	lsrs	r3, r3, #8
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008dca:	4b99      	ldr	r3, [pc, #612]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dce:	08db      	lsrs	r3, r3, #3
 8008dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	fb02 f303 	mul.w	r3, r2, r3
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 8111 	beq.w	8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	f000 8083 	beq.w	8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	f200 80a1 	bhi.w	8008f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d056      	beq.n	8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008e0a:	e099      	b.n	8008f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e0c:	4b88      	ldr	r3, [pc, #544]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0320 	and.w	r3, r3, #32
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d02d      	beq.n	8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e18:	4b85      	ldr	r3, [pc, #532]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	08db      	lsrs	r3, r3, #3
 8008e1e:	f003 0303 	and.w	r3, r3, #3
 8008e22:	4a84      	ldr	r2, [pc, #528]	; (8009034 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
 8008e28:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	ee07 3a90 	vmov	s15, r3
 8008e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e42:	4b7b      	ldr	r3, [pc, #492]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4a:	ee07 3a90 	vmov	s15, r3
 8008e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e72:	e087      	b.n	8008f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	ee07 3a90 	vmov	s15, r3
 8008e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800903c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e86:	4b6a      	ldr	r3, [pc, #424]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8e:	ee07 3a90 	vmov	s15, r3
 8008e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eb6:	e065      	b.n	8008f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	ee07 3a90 	vmov	s15, r3
 8008ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009040 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eca:	4b59      	ldr	r3, [pc, #356]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ede:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008efa:	e043      	b.n	8008f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f0e:	4b48      	ldr	r3, [pc, #288]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f16:	ee07 3a90 	vmov	s15, r3
 8008f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f3e:	e021      	b.n	8008f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009040 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f52:	4b37      	ldr	r3, [pc, #220]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008f84:	4b2a      	ldr	r3, [pc, #168]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f88:	0a5b      	lsrs	r3, r3, #9
 8008f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f8e:	ee07 3a90 	vmov	s15, r3
 8008f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008faa:	ee17 2a90 	vmov	r2, s15
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008fb2:	4b1f      	ldr	r3, [pc, #124]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	0c1b      	lsrs	r3, r3, #16
 8008fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fbc:	ee07 3a90 	vmov	s15, r3
 8008fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fd8:	ee17 2a90 	vmov	r2, s15
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008fe0:	4b13      	ldr	r3, [pc, #76]	; (8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe4:	0e1b      	lsrs	r3, r3, #24
 8008fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009006:	ee17 2a90 	vmov	r2, s15
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800900e:	e008      	b.n	8009022 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	609a      	str	r2, [r3, #8]
}
 8009022:	bf00      	nop
 8009024:	3724      	adds	r7, #36	; 0x24
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	58024400 	.word	0x58024400
 8009034:	03d09000 	.word	0x03d09000
 8009038:	46000000 	.word	0x46000000
 800903c:	4c742400 	.word	0x4c742400
 8009040:	4a742400 	.word	0x4a742400
 8009044:	4bbebc20 	.word	0x4bbebc20

08009048 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009056:	4b53      	ldr	r3, [pc, #332]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905a:	f003 0303 	and.w	r3, r3, #3
 800905e:	2b03      	cmp	r3, #3
 8009060:	d101      	bne.n	8009066 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e099      	b.n	800919a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009066:	4b4f      	ldr	r3, [pc, #316]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a4e      	ldr	r2, [pc, #312]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800906c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009072:	f7f8 ffe7 	bl	8002044 <HAL_GetTick>
 8009076:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009078:	e008      	b.n	800908c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800907a:	f7f8 ffe3 	bl	8002044 <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	2b02      	cmp	r3, #2
 8009086:	d901      	bls.n	800908c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e086      	b.n	800919a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800908c:	4b45      	ldr	r3, [pc, #276]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1f0      	bne.n	800907a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009098:	4b42      	ldr	r3, [pc, #264]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800909a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	031b      	lsls	r3, r3, #12
 80090a6:	493f      	ldr	r1, [pc, #252]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	628b      	str	r3, [r1, #40]	; 0x28
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	3b01      	subs	r3, #1
 80090bc:	025b      	lsls	r3, r3, #9
 80090be:	b29b      	uxth	r3, r3
 80090c0:	431a      	orrs	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	041b      	lsls	r3, r3, #16
 80090ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090ce:	431a      	orrs	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	061b      	lsls	r3, r3, #24
 80090d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090dc:	4931      	ldr	r1, [pc, #196]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80090e2:	4b30      	ldr	r3, [pc, #192]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	492d      	ldr	r1, [pc, #180]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80090f4:	4b2b      	ldr	r3, [pc, #172]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	f023 0220 	bic.w	r2, r3, #32
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	4928      	ldr	r1, [pc, #160]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009102:	4313      	orrs	r3, r2
 8009104:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009106:	4b27      	ldr	r3, [pc, #156]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910a:	4a26      	ldr	r2, [pc, #152]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800910c:	f023 0310 	bic.w	r3, r3, #16
 8009110:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009112:	4b24      	ldr	r3, [pc, #144]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009116:	4b24      	ldr	r3, [pc, #144]	; (80091a8 <RCCEx_PLL2_Config+0x160>)
 8009118:	4013      	ands	r3, r2
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	69d2      	ldr	r2, [r2, #28]
 800911e:	00d2      	lsls	r2, r2, #3
 8009120:	4920      	ldr	r1, [pc, #128]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009122:	4313      	orrs	r3, r2
 8009124:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009126:	4b1f      	ldr	r3, [pc, #124]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	4a1e      	ldr	r2, [pc, #120]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800912c:	f043 0310 	orr.w	r3, r3, #16
 8009130:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d106      	bne.n	8009146 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009138:	4b1a      	ldr	r3, [pc, #104]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800913a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913c:	4a19      	ldr	r2, [pc, #100]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800913e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009142:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009144:	e00f      	b.n	8009166 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d106      	bne.n	800915a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800914c:	4b15      	ldr	r3, [pc, #84]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	4a14      	ldr	r2, [pc, #80]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009156:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009158:	e005      	b.n	8009166 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800915a:	4b12      	ldr	r3, [pc, #72]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800915c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915e:	4a11      	ldr	r2, [pc, #68]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009164:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009166:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a0e      	ldr	r2, [pc, #56]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800916c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009172:	f7f8 ff67 	bl	8002044 <HAL_GetTick>
 8009176:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009178:	e008      	b.n	800918c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800917a:	f7f8 ff63 	bl	8002044 <HAL_GetTick>
 800917e:	4602      	mov	r2, r0
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	2b02      	cmp	r3, #2
 8009186:	d901      	bls.n	800918c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009188:	2303      	movs	r3, #3
 800918a:	e006      	b.n	800919a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800918c:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d0f0      	beq.n	800917a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009198:	7bfb      	ldrb	r3, [r7, #15]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	58024400 	.word	0x58024400
 80091a8:	ffff0007 	.word	0xffff0007

080091ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091ba:	4b53      	ldr	r3, [pc, #332]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80091bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091be:	f003 0303 	and.w	r3, r3, #3
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d101      	bne.n	80091ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e099      	b.n	80092fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80091ca:	4b4f      	ldr	r3, [pc, #316]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a4e      	ldr	r2, [pc, #312]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80091d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091d6:	f7f8 ff35 	bl	8002044 <HAL_GetTick>
 80091da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091dc:	e008      	b.n	80091f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80091de:	f7f8 ff31 	bl	8002044 <HAL_GetTick>
 80091e2:	4602      	mov	r2, r0
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d901      	bls.n	80091f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e086      	b.n	80092fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091f0:	4b45      	ldr	r3, [pc, #276]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1f0      	bne.n	80091de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80091fc:	4b42      	ldr	r3, [pc, #264]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	051b      	lsls	r3, r3, #20
 800920a:	493f      	ldr	r1, [pc, #252]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 800920c:	4313      	orrs	r3, r2
 800920e:	628b      	str	r3, [r1, #40]	; 0x28
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	3b01      	subs	r3, #1
 8009216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	3b01      	subs	r3, #1
 8009220:	025b      	lsls	r3, r3, #9
 8009222:	b29b      	uxth	r3, r3
 8009224:	431a      	orrs	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	3b01      	subs	r3, #1
 800922c:	041b      	lsls	r3, r3, #16
 800922e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009232:	431a      	orrs	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	3b01      	subs	r3, #1
 800923a:	061b      	lsls	r3, r3, #24
 800923c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009240:	4931      	ldr	r1, [pc, #196]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009242:	4313      	orrs	r3, r2
 8009244:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009246:	4b30      	ldr	r3, [pc, #192]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	492d      	ldr	r1, [pc, #180]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009254:	4313      	orrs	r3, r2
 8009256:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009258:	4b2b      	ldr	r3, [pc, #172]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 800925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	4928      	ldr	r1, [pc, #160]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009266:	4313      	orrs	r3, r2
 8009268:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800926a:	4b27      	ldr	r3, [pc, #156]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 800926c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926e:	4a26      	ldr	r2, [pc, #152]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009276:	4b24      	ldr	r3, [pc, #144]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800927a:	4b24      	ldr	r3, [pc, #144]	; (800930c <RCCEx_PLL3_Config+0x160>)
 800927c:	4013      	ands	r3, r2
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	69d2      	ldr	r2, [r2, #28]
 8009282:	00d2      	lsls	r2, r2, #3
 8009284:	4920      	ldr	r1, [pc, #128]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009286:	4313      	orrs	r3, r2
 8009288:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800928a:	4b1f      	ldr	r3, [pc, #124]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 800928c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928e:	4a1e      	ldr	r2, [pc, #120]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009294:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d106      	bne.n	80092aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800929c:	4b1a      	ldr	r3, [pc, #104]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	4a19      	ldr	r2, [pc, #100]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092a8:	e00f      	b.n	80092ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d106      	bne.n	80092be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80092b0:	4b15      	ldr	r3, [pc, #84]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	4a14      	ldr	r2, [pc, #80]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092bc:	e005      	b.n	80092ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80092be:	4b12      	ldr	r3, [pc, #72]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c2:	4a11      	ldr	r2, [pc, #68]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80092ca:	4b0f      	ldr	r3, [pc, #60]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a0e      	ldr	r2, [pc, #56]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092d6:	f7f8 feb5 	bl	8002044 <HAL_GetTick>
 80092da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092dc:	e008      	b.n	80092f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80092de:	f7f8 feb1 	bl	8002044 <HAL_GetTick>
 80092e2:	4602      	mov	r2, r0
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d901      	bls.n	80092f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e006      	b.n	80092fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092f0:	4b05      	ldr	r3, [pc, #20]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d0f0      	beq.n	80092de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	58024400 	.word	0x58024400
 800930c:	ffff0007 	.word	0xffff0007

08009310 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d067      	beq.n	80093f2 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d106      	bne.n	800933c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7f7 ff40 	bl	80011bc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	22ca      	movs	r2, #202	; 0xca
 800934a:	625a      	str	r2, [r3, #36]	; 0x24
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2253      	movs	r2, #83	; 0x53
 8009352:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f879 	bl	800944c <RTC_EnterInitMode>
 800935a:	4603      	mov	r3, r0
 800935c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800935e:	7bfb      	ldrb	r3, [r7, #15]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d13b      	bne.n	80093dc <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6899      	ldr	r1, [r3, #8]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	4b23      	ldr	r3, [pc, #140]	; (80093fc <HAL_RTC_Init+0xec>)
 8009370:	400b      	ands	r3, r1
 8009372:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6899      	ldr	r1, [r3, #8]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	431a      	orrs	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	0419      	lsls	r1, r3, #16
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68da      	ldr	r2, [r3, #12]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f881 	bl	80094ac <RTC_ExitInitMode>
 80093aa:	4603      	mov	r3, r0
 80093ac:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d113      	bne.n	80093dc <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 0203 	bic.w	r2, r2, #3
 80093c2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	69da      	ldr	r2, [r3, #28]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	431a      	orrs	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	430a      	orrs	r2, r1
 80093da:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	22ff      	movs	r2, #255	; 0xff
 80093e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d103      	bne.n	80093f2 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	ff8fffbf 	.word	0xff8fffbf

08009400 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68da      	ldr	r2, [r3, #12]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009416:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8009418:	f7f8 fe14 	bl	8002044 <HAL_GetTick>
 800941c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800941e:	e009      	b.n	8009434 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009420:	f7f8 fe10 	bl	8002044 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800942e:	d901      	bls.n	8009434 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	e007      	b.n	8009444 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	f003 0320 	and.w	r3, r3, #32
 800943e:	2b00      	cmp	r3, #0
 8009440:	d0ee      	beq.n	8009420 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009462:	2b00      	cmp	r3, #0
 8009464:	d11d      	bne.n	80094a2 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800946e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009470:	f7f8 fde8 	bl	8002044 <HAL_GetTick>
 8009474:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009476:	e00d      	b.n	8009494 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009478:	f7f8 fde4 	bl	8002044 <HAL_GetTick>
 800947c:	4602      	mov	r2, r0
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009486:	d905      	bls.n	8009494 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2203      	movs	r2, #3
 8009490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0ea      	beq.n	8009478 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 80094b8:	4b1a      	ldr	r3, [pc, #104]	; (8009524 <RTC_ExitInitMode+0x78>)
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	4a19      	ldr	r2, [pc, #100]	; (8009524 <RTC_ExitInitMode+0x78>)
 80094be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094c2:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80094c4:	4b17      	ldr	r3, [pc, #92]	; (8009524 <RTC_ExitInitMode+0x78>)
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f003 0320 	and.w	r3, r3, #32
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10c      	bne.n	80094ea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f7ff ff95 	bl	8009400 <HAL_RTC_WaitForSynchro>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d01e      	beq.n	800951a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2203      	movs	r2, #3
 80094e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	73fb      	strb	r3, [r7, #15]
 80094e8:	e017      	b.n	800951a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80094ea:	4b0e      	ldr	r3, [pc, #56]	; (8009524 <RTC_ExitInitMode+0x78>)
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	4a0d      	ldr	r2, [pc, #52]	; (8009524 <RTC_ExitInitMode+0x78>)
 80094f0:	f023 0320 	bic.w	r3, r3, #32
 80094f4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7ff ff82 	bl	8009400 <HAL_RTC_WaitForSynchro>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2203      	movs	r2, #3
 8009506:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800950a:	2303      	movs	r3, #3
 800950c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800950e:	4b05      	ldr	r3, [pc, #20]	; (8009524 <RTC_ExitInitMode+0x78>)
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	4a04      	ldr	r2, [pc, #16]	; (8009524 <RTC_ExitInitMode+0x78>)
 8009514:	f043 0320 	orr.w	r3, r3, #32
 8009518:	6093      	str	r3, [r2, #8]
  }

  return status;
 800951a:	7bfb      	ldrb	r3, [r7, #15]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	58004000 	.word	0x58004000

08009528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e049      	b.n	80095ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d106      	bne.n	8009554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f841 	bl	80095d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2202      	movs	r2, #2
 8009558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3304      	adds	r3, #4
 8009564:	4619      	mov	r1, r3
 8009566:	4610      	mov	r0, r2
 8009568:	f000 f9be 	bl	80098e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b083      	sub	sp, #12
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80095de:	bf00      	nop
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
	...

080095ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d001      	beq.n	8009604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e021      	b.n	8009648 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68da      	ldr	r2, [r3, #12]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f042 0201 	orr.w	r2, r2, #1
 800961a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689a      	ldr	r2, [r3, #8]
 8009622:	4b0c      	ldr	r3, [pc, #48]	; (8009654 <HAL_TIM_Base_Start_IT+0x68>)
 8009624:	4013      	ands	r3, r2
 8009626:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2b06      	cmp	r3, #6
 800962c:	d00b      	beq.n	8009646 <HAL_TIM_Base_Start_IT+0x5a>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009634:	d007      	beq.n	8009646 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f042 0201 	orr.w	r2, r2, #1
 8009644:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	00010007 	.word	0x00010007

08009658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b02      	cmp	r3, #2
 800966c:	d122      	bne.n	80096b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b02      	cmp	r3, #2
 800967a:	d11b      	bne.n	80096b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f06f 0202 	mvn.w	r2, #2
 8009684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f905 	bl	80098aa <HAL_TIM_IC_CaptureCallback>
 80096a0:	e005      	b.n	80096ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f8f7 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f908 	bl	80098be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	f003 0304 	and.w	r3, r3, #4
 80096be:	2b04      	cmp	r3, #4
 80096c0:	d122      	bne.n	8009708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	d11b      	bne.n	8009708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f06f 0204 	mvn.w	r2, #4
 80096d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2202      	movs	r2, #2
 80096de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f8db 	bl	80098aa <HAL_TIM_IC_CaptureCallback>
 80096f4:	e005      	b.n	8009702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f8cd 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f8de 	bl	80098be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	f003 0308 	and.w	r3, r3, #8
 8009712:	2b08      	cmp	r3, #8
 8009714:	d122      	bne.n	800975c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f003 0308 	and.w	r3, r3, #8
 8009720:	2b08      	cmp	r3, #8
 8009722:	d11b      	bne.n	800975c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f06f 0208 	mvn.w	r2, #8
 800972c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2204      	movs	r2, #4
 8009732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f8b1 	bl	80098aa <HAL_TIM_IC_CaptureCallback>
 8009748:	e005      	b.n	8009756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f8a3 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f8b4 	bl	80098be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	f003 0310 	and.w	r3, r3, #16
 8009766:	2b10      	cmp	r3, #16
 8009768:	d122      	bne.n	80097b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	f003 0310 	and.w	r3, r3, #16
 8009774:	2b10      	cmp	r3, #16
 8009776:	d11b      	bne.n	80097b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f06f 0210 	mvn.w	r2, #16
 8009780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2208      	movs	r2, #8
 8009786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f887 	bl	80098aa <HAL_TIM_IC_CaptureCallback>
 800979c:	e005      	b.n	80097aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f879 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f88a 	bl	80098be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d10e      	bne.n	80097dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d107      	bne.n	80097dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f06f 0201 	mvn.w	r2, #1
 80097d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7f7 fcb0 	bl	800113c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e6:	2b80      	cmp	r3, #128	; 0x80
 80097e8:	d10e      	bne.n	8009808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f4:	2b80      	cmp	r3, #128	; 0x80
 80097f6:	d107      	bne.n	8009808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f914 	bl	8009a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009816:	d10e      	bne.n	8009836 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009822:	2b80      	cmp	r3, #128	; 0x80
 8009824:	d107      	bne.n	8009836 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800982e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f907 	bl	8009a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009840:	2b40      	cmp	r3, #64	; 0x40
 8009842:	d10e      	bne.n	8009862 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800984e:	2b40      	cmp	r3, #64	; 0x40
 8009850:	d107      	bne.n	8009862 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800985a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f838 	bl	80098d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	f003 0320 	and.w	r3, r3, #32
 800986c:	2b20      	cmp	r3, #32
 800986e:	d10e      	bne.n	800988e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f003 0320 	and.w	r3, r3, #32
 800987a:	2b20      	cmp	r3, #32
 800987c:	d107      	bne.n	800988e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f06f 0220 	mvn.w	r2, #32
 8009886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f8c7 	bl	8009a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800989e:	bf00      	nop
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b083      	sub	sp, #12
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098b2:	bf00      	nop
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098da:	bf00      	nop
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
	...

080098e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a40      	ldr	r2, [pc, #256]	; (80099fc <TIM_Base_SetConfig+0x114>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d013      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009906:	d00f      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a3d      	ldr	r2, [pc, #244]	; (8009a00 <TIM_Base_SetConfig+0x118>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d00b      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a3c      	ldr	r2, [pc, #240]	; (8009a04 <TIM_Base_SetConfig+0x11c>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d007      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a3b      	ldr	r2, [pc, #236]	; (8009a08 <TIM_Base_SetConfig+0x120>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d003      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a3a      	ldr	r2, [pc, #232]	; (8009a0c <TIM_Base_SetConfig+0x124>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d108      	bne.n	800993a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800992e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	4313      	orrs	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a2f      	ldr	r2, [pc, #188]	; (80099fc <TIM_Base_SetConfig+0x114>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d01f      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009948:	d01b      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a2c      	ldr	r2, [pc, #176]	; (8009a00 <TIM_Base_SetConfig+0x118>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d017      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a2b      	ldr	r2, [pc, #172]	; (8009a04 <TIM_Base_SetConfig+0x11c>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d013      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a2a      	ldr	r2, [pc, #168]	; (8009a08 <TIM_Base_SetConfig+0x120>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d00f      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a29      	ldr	r2, [pc, #164]	; (8009a0c <TIM_Base_SetConfig+0x124>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d00b      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a28      	ldr	r2, [pc, #160]	; (8009a10 <TIM_Base_SetConfig+0x128>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d007      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a27      	ldr	r2, [pc, #156]	; (8009a14 <TIM_Base_SetConfig+0x12c>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d003      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a26      	ldr	r2, [pc, #152]	; (8009a18 <TIM_Base_SetConfig+0x130>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d108      	bne.n	8009994 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	4313      	orrs	r3, r2
 8009992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	4313      	orrs	r3, r2
 80099a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	689a      	ldr	r2, [r3, #8]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a10      	ldr	r2, [pc, #64]	; (80099fc <TIM_Base_SetConfig+0x114>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d00f      	beq.n	80099e0 <TIM_Base_SetConfig+0xf8>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a12      	ldr	r2, [pc, #72]	; (8009a0c <TIM_Base_SetConfig+0x124>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d00b      	beq.n	80099e0 <TIM_Base_SetConfig+0xf8>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a11      	ldr	r2, [pc, #68]	; (8009a10 <TIM_Base_SetConfig+0x128>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d007      	beq.n	80099e0 <TIM_Base_SetConfig+0xf8>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a10      	ldr	r2, [pc, #64]	; (8009a14 <TIM_Base_SetConfig+0x12c>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d003      	beq.n	80099e0 <TIM_Base_SetConfig+0xf8>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a0f      	ldr	r2, [pc, #60]	; (8009a18 <TIM_Base_SetConfig+0x130>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d103      	bne.n	80099e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	691a      	ldr	r2, [r3, #16]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	615a      	str	r2, [r3, #20]
}
 80099ee:	bf00      	nop
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	40010000 	.word	0x40010000
 8009a00:	40000400 	.word	0x40000400
 8009a04:	40000800 	.word	0x40000800
 8009a08:	40000c00 	.word	0x40000c00
 8009a0c:	40010400 	.word	0x40010400
 8009a10:	40014000 	.word	0x40014000
 8009a14:	40014400 	.word	0x40014400
 8009a18:	40014800 	.word	0x40014800

08009a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d101      	bne.n	8009a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e042      	b.n	8009af0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d106      	bne.n	8009a82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7f7 fea1 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2224      	movs	r2, #36	; 0x24
 8009a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 0201 	bic.w	r2, r2, #1
 8009a98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f8c2 	bl	8009c24 <UART_SetConfig>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d101      	bne.n	8009aaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e022      	b.n	8009af0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fe1c 	bl	800a6f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	689a      	ldr	r2, [r3, #8]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f042 0201 	orr.w	r2, r2, #1
 8009ae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fea3 	bl	800a834 <UART_CheckIdleState>
 8009aee:	4603      	mov	r3, r0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	; 0x28
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	603b      	str	r3, [r7, #0]
 8009b04:	4613      	mov	r3, r2
 8009b06:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b0e:	2b20      	cmp	r3, #32
 8009b10:	f040 8083 	bne.w	8009c1a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d002      	beq.n	8009b20 <HAL_UART_Transmit+0x28>
 8009b1a:	88fb      	ldrh	r3, [r7, #6]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e07b      	b.n	8009c1c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d101      	bne.n	8009b32 <HAL_UART_Transmit+0x3a>
 8009b2e:	2302      	movs	r3, #2
 8009b30:	e074      	b.n	8009c1c <HAL_UART_Transmit+0x124>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2221      	movs	r2, #33	; 0x21
 8009b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009b4a:	f7f8 fa7b 	bl	8002044 <HAL_GetTick>
 8009b4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	88fa      	ldrh	r2, [r7, #6]
 8009b54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	88fa      	ldrh	r2, [r7, #6]
 8009b5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b68:	d108      	bne.n	8009b7c <HAL_UART_Transmit+0x84>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d104      	bne.n	8009b7c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009b72:	2300      	movs	r3, #0
 8009b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	61bb      	str	r3, [r7, #24]
 8009b7a:	e003      	b.n	8009b84 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8009b8c:	e02c      	b.n	8009be8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2200      	movs	r2, #0
 8009b96:	2180      	movs	r1, #128	; 0x80
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f000 fe93 	bl	800a8c4 <UART_WaitOnFlagUntilTimeout>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e039      	b.n	8009c1c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10b      	bne.n	8009bc6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	3302      	adds	r3, #2
 8009bc2:	61bb      	str	r3, [r7, #24]
 8009bc4:	e007      	b.n	8009bd6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	781a      	ldrb	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	3b01      	subs	r3, #1
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d1cc      	bne.n	8009b8e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	2140      	movs	r1, #64	; 0x40
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 fe60 	bl	800a8c4 <UART_WaitOnFlagUntilTimeout>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e006      	b.n	8009c1c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2220      	movs	r2, #32
 8009c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	e000      	b.n	8009c1c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009c1a:	2302      	movs	r3, #2
  }
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3720      	adds	r7, #32
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c24:	b5b0      	push	{r4, r5, r7, lr}
 8009c26:	b08e      	sub	sp, #56	; 0x38
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689a      	ldr	r2, [r3, #8]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	431a      	orrs	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	431a      	orrs	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c50:	4313      	orrs	r3, r2
 8009c52:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	4bc0      	ldr	r3, [pc, #768]	; (8009f5c <UART_SetConfig+0x338>)
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	6812      	ldr	r2, [r2, #0]
 8009c62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c64:	430b      	orrs	r3, r1
 8009c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4ab5      	ldr	r2, [pc, #724]	; (8009f60 <UART_SetConfig+0x33c>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d004      	beq.n	8009c98 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c94:	4313      	orrs	r3, r2
 8009c96:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	689a      	ldr	r2, [r3, #8]
 8009c9e:	4bb1      	ldr	r3, [pc, #708]	; (8009f64 <UART_SetConfig+0x340>)
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	6812      	ldr	r2, [r2, #0]
 8009ca6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ca8:	430b      	orrs	r3, r1
 8009caa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb2:	f023 010f 	bic.w	r1, r3, #15
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4aa8      	ldr	r2, [pc, #672]	; (8009f68 <UART_SetConfig+0x344>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d177      	bne.n	8009dbc <UART_SetConfig+0x198>
 8009ccc:	4ba7      	ldr	r3, [pc, #668]	; (8009f6c <UART_SetConfig+0x348>)
 8009cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cd4:	2b28      	cmp	r3, #40	; 0x28
 8009cd6:	d86d      	bhi.n	8009db4 <UART_SetConfig+0x190>
 8009cd8:	a201      	add	r2, pc, #4	; (adr r2, 8009ce0 <UART_SetConfig+0xbc>)
 8009cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cde:	bf00      	nop
 8009ce0:	08009d85 	.word	0x08009d85
 8009ce4:	08009db5 	.word	0x08009db5
 8009ce8:	08009db5 	.word	0x08009db5
 8009cec:	08009db5 	.word	0x08009db5
 8009cf0:	08009db5 	.word	0x08009db5
 8009cf4:	08009db5 	.word	0x08009db5
 8009cf8:	08009db5 	.word	0x08009db5
 8009cfc:	08009db5 	.word	0x08009db5
 8009d00:	08009d8d 	.word	0x08009d8d
 8009d04:	08009db5 	.word	0x08009db5
 8009d08:	08009db5 	.word	0x08009db5
 8009d0c:	08009db5 	.word	0x08009db5
 8009d10:	08009db5 	.word	0x08009db5
 8009d14:	08009db5 	.word	0x08009db5
 8009d18:	08009db5 	.word	0x08009db5
 8009d1c:	08009db5 	.word	0x08009db5
 8009d20:	08009d95 	.word	0x08009d95
 8009d24:	08009db5 	.word	0x08009db5
 8009d28:	08009db5 	.word	0x08009db5
 8009d2c:	08009db5 	.word	0x08009db5
 8009d30:	08009db5 	.word	0x08009db5
 8009d34:	08009db5 	.word	0x08009db5
 8009d38:	08009db5 	.word	0x08009db5
 8009d3c:	08009db5 	.word	0x08009db5
 8009d40:	08009d9d 	.word	0x08009d9d
 8009d44:	08009db5 	.word	0x08009db5
 8009d48:	08009db5 	.word	0x08009db5
 8009d4c:	08009db5 	.word	0x08009db5
 8009d50:	08009db5 	.word	0x08009db5
 8009d54:	08009db5 	.word	0x08009db5
 8009d58:	08009db5 	.word	0x08009db5
 8009d5c:	08009db5 	.word	0x08009db5
 8009d60:	08009da5 	.word	0x08009da5
 8009d64:	08009db5 	.word	0x08009db5
 8009d68:	08009db5 	.word	0x08009db5
 8009d6c:	08009db5 	.word	0x08009db5
 8009d70:	08009db5 	.word	0x08009db5
 8009d74:	08009db5 	.word	0x08009db5
 8009d78:	08009db5 	.word	0x08009db5
 8009d7c:	08009db5 	.word	0x08009db5
 8009d80:	08009dad 	.word	0x08009dad
 8009d84:	2301      	movs	r3, #1
 8009d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8a:	e222      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009d8c:	2304      	movs	r3, #4
 8009d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d92:	e21e      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009d94:	2308      	movs	r3, #8
 8009d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9a:	e21a      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009d9c:	2310      	movs	r3, #16
 8009d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da2:	e216      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009da4:	2320      	movs	r3, #32
 8009da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009daa:	e212      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009dac:	2340      	movs	r3, #64	; 0x40
 8009dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db2:	e20e      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009db4:	2380      	movs	r3, #128	; 0x80
 8009db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dba:	e20a      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a6b      	ldr	r2, [pc, #428]	; (8009f70 <UART_SetConfig+0x34c>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d130      	bne.n	8009e28 <UART_SetConfig+0x204>
 8009dc6:	4b69      	ldr	r3, [pc, #420]	; (8009f6c <UART_SetConfig+0x348>)
 8009dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dca:	f003 0307 	and.w	r3, r3, #7
 8009dce:	2b05      	cmp	r3, #5
 8009dd0:	d826      	bhi.n	8009e20 <UART_SetConfig+0x1fc>
 8009dd2:	a201      	add	r2, pc, #4	; (adr r2, 8009dd8 <UART_SetConfig+0x1b4>)
 8009dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd8:	08009df1 	.word	0x08009df1
 8009ddc:	08009df9 	.word	0x08009df9
 8009de0:	08009e01 	.word	0x08009e01
 8009de4:	08009e09 	.word	0x08009e09
 8009de8:	08009e11 	.word	0x08009e11
 8009dec:	08009e19 	.word	0x08009e19
 8009df0:	2300      	movs	r3, #0
 8009df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009df6:	e1ec      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009df8:	2304      	movs	r3, #4
 8009dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfe:	e1e8      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009e00:	2308      	movs	r3, #8
 8009e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e06:	e1e4      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009e08:	2310      	movs	r3, #16
 8009e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e0e:	e1e0      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009e10:	2320      	movs	r3, #32
 8009e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e16:	e1dc      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009e18:	2340      	movs	r3, #64	; 0x40
 8009e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1e:	e1d8      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009e20:	2380      	movs	r3, #128	; 0x80
 8009e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e26:	e1d4      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a51      	ldr	r2, [pc, #324]	; (8009f74 <UART_SetConfig+0x350>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d130      	bne.n	8009e94 <UART_SetConfig+0x270>
 8009e32:	4b4e      	ldr	r3, [pc, #312]	; (8009f6c <UART_SetConfig+0x348>)
 8009e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e36:	f003 0307 	and.w	r3, r3, #7
 8009e3a:	2b05      	cmp	r3, #5
 8009e3c:	d826      	bhi.n	8009e8c <UART_SetConfig+0x268>
 8009e3e:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <UART_SetConfig+0x220>)
 8009e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e44:	08009e5d 	.word	0x08009e5d
 8009e48:	08009e65 	.word	0x08009e65
 8009e4c:	08009e6d 	.word	0x08009e6d
 8009e50:	08009e75 	.word	0x08009e75
 8009e54:	08009e7d 	.word	0x08009e7d
 8009e58:	08009e85 	.word	0x08009e85
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e62:	e1b6      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009e64:	2304      	movs	r3, #4
 8009e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6a:	e1b2      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009e6c:	2308      	movs	r3, #8
 8009e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e72:	e1ae      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009e74:	2310      	movs	r3, #16
 8009e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7a:	e1aa      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009e7c:	2320      	movs	r3, #32
 8009e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e82:	e1a6      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009e84:	2340      	movs	r3, #64	; 0x40
 8009e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e8a:	e1a2      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009e8c:	2380      	movs	r3, #128	; 0x80
 8009e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e92:	e19e      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a37      	ldr	r2, [pc, #220]	; (8009f78 <UART_SetConfig+0x354>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d130      	bne.n	8009f00 <UART_SetConfig+0x2dc>
 8009e9e:	4b33      	ldr	r3, [pc, #204]	; (8009f6c <UART_SetConfig+0x348>)
 8009ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ea2:	f003 0307 	and.w	r3, r3, #7
 8009ea6:	2b05      	cmp	r3, #5
 8009ea8:	d826      	bhi.n	8009ef8 <UART_SetConfig+0x2d4>
 8009eaa:	a201      	add	r2, pc, #4	; (adr r2, 8009eb0 <UART_SetConfig+0x28c>)
 8009eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb0:	08009ec9 	.word	0x08009ec9
 8009eb4:	08009ed1 	.word	0x08009ed1
 8009eb8:	08009ed9 	.word	0x08009ed9
 8009ebc:	08009ee1 	.word	0x08009ee1
 8009ec0:	08009ee9 	.word	0x08009ee9
 8009ec4:	08009ef1 	.word	0x08009ef1
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ece:	e180      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009ed0:	2304      	movs	r3, #4
 8009ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ed6:	e17c      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009ed8:	2308      	movs	r3, #8
 8009eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ede:	e178      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009ee0:	2310      	movs	r3, #16
 8009ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ee6:	e174      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009ee8:	2320      	movs	r3, #32
 8009eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eee:	e170      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009ef0:	2340      	movs	r3, #64	; 0x40
 8009ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef6:	e16c      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009ef8:	2380      	movs	r3, #128	; 0x80
 8009efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009efe:	e168      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a1d      	ldr	r2, [pc, #116]	; (8009f7c <UART_SetConfig+0x358>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d142      	bne.n	8009f90 <UART_SetConfig+0x36c>
 8009f0a:	4b18      	ldr	r3, [pc, #96]	; (8009f6c <UART_SetConfig+0x348>)
 8009f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f0e:	f003 0307 	and.w	r3, r3, #7
 8009f12:	2b05      	cmp	r3, #5
 8009f14:	d838      	bhi.n	8009f88 <UART_SetConfig+0x364>
 8009f16:	a201      	add	r2, pc, #4	; (adr r2, 8009f1c <UART_SetConfig+0x2f8>)
 8009f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1c:	08009f35 	.word	0x08009f35
 8009f20:	08009f3d 	.word	0x08009f3d
 8009f24:	08009f45 	.word	0x08009f45
 8009f28:	08009f4d 	.word	0x08009f4d
 8009f2c:	08009f55 	.word	0x08009f55
 8009f30:	08009f81 	.word	0x08009f81
 8009f34:	2300      	movs	r3, #0
 8009f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3a:	e14a      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009f3c:	2304      	movs	r3, #4
 8009f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f42:	e146      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009f44:	2308      	movs	r3, #8
 8009f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4a:	e142      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009f4c:	2310      	movs	r3, #16
 8009f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f52:	e13e      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009f54:	2320      	movs	r3, #32
 8009f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f5a:	e13a      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009f5c:	cfff69f3 	.word	0xcfff69f3
 8009f60:	58000c00 	.word	0x58000c00
 8009f64:	11fff4ff 	.word	0x11fff4ff
 8009f68:	40011000 	.word	0x40011000
 8009f6c:	58024400 	.word	0x58024400
 8009f70:	40004400 	.word	0x40004400
 8009f74:	40004800 	.word	0x40004800
 8009f78:	40004c00 	.word	0x40004c00
 8009f7c:	40005000 	.word	0x40005000
 8009f80:	2340      	movs	r3, #64	; 0x40
 8009f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f86:	e124      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009f88:	2380      	movs	r3, #128	; 0x80
 8009f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f8e:	e120      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4acc      	ldr	r2, [pc, #816]	; (800a2c8 <UART_SetConfig+0x6a4>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d176      	bne.n	800a088 <UART_SetConfig+0x464>
 8009f9a:	4bcc      	ldr	r3, [pc, #816]	; (800a2cc <UART_SetConfig+0x6a8>)
 8009f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fa2:	2b28      	cmp	r3, #40	; 0x28
 8009fa4:	d86c      	bhi.n	800a080 <UART_SetConfig+0x45c>
 8009fa6:	a201      	add	r2, pc, #4	; (adr r2, 8009fac <UART_SetConfig+0x388>)
 8009fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fac:	0800a051 	.word	0x0800a051
 8009fb0:	0800a081 	.word	0x0800a081
 8009fb4:	0800a081 	.word	0x0800a081
 8009fb8:	0800a081 	.word	0x0800a081
 8009fbc:	0800a081 	.word	0x0800a081
 8009fc0:	0800a081 	.word	0x0800a081
 8009fc4:	0800a081 	.word	0x0800a081
 8009fc8:	0800a081 	.word	0x0800a081
 8009fcc:	0800a059 	.word	0x0800a059
 8009fd0:	0800a081 	.word	0x0800a081
 8009fd4:	0800a081 	.word	0x0800a081
 8009fd8:	0800a081 	.word	0x0800a081
 8009fdc:	0800a081 	.word	0x0800a081
 8009fe0:	0800a081 	.word	0x0800a081
 8009fe4:	0800a081 	.word	0x0800a081
 8009fe8:	0800a081 	.word	0x0800a081
 8009fec:	0800a061 	.word	0x0800a061
 8009ff0:	0800a081 	.word	0x0800a081
 8009ff4:	0800a081 	.word	0x0800a081
 8009ff8:	0800a081 	.word	0x0800a081
 8009ffc:	0800a081 	.word	0x0800a081
 800a000:	0800a081 	.word	0x0800a081
 800a004:	0800a081 	.word	0x0800a081
 800a008:	0800a081 	.word	0x0800a081
 800a00c:	0800a069 	.word	0x0800a069
 800a010:	0800a081 	.word	0x0800a081
 800a014:	0800a081 	.word	0x0800a081
 800a018:	0800a081 	.word	0x0800a081
 800a01c:	0800a081 	.word	0x0800a081
 800a020:	0800a081 	.word	0x0800a081
 800a024:	0800a081 	.word	0x0800a081
 800a028:	0800a081 	.word	0x0800a081
 800a02c:	0800a071 	.word	0x0800a071
 800a030:	0800a081 	.word	0x0800a081
 800a034:	0800a081 	.word	0x0800a081
 800a038:	0800a081 	.word	0x0800a081
 800a03c:	0800a081 	.word	0x0800a081
 800a040:	0800a081 	.word	0x0800a081
 800a044:	0800a081 	.word	0x0800a081
 800a048:	0800a081 	.word	0x0800a081
 800a04c:	0800a079 	.word	0x0800a079
 800a050:	2301      	movs	r3, #1
 800a052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a056:	e0bc      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a058:	2304      	movs	r3, #4
 800a05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a05e:	e0b8      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a060:	2308      	movs	r3, #8
 800a062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a066:	e0b4      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a068:	2310      	movs	r3, #16
 800a06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a06e:	e0b0      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a070:	2320      	movs	r3, #32
 800a072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a076:	e0ac      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a078:	2340      	movs	r3, #64	; 0x40
 800a07a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a07e:	e0a8      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a080:	2380      	movs	r3, #128	; 0x80
 800a082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a086:	e0a4      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a90      	ldr	r2, [pc, #576]	; (800a2d0 <UART_SetConfig+0x6ac>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d130      	bne.n	800a0f4 <UART_SetConfig+0x4d0>
 800a092:	4b8e      	ldr	r3, [pc, #568]	; (800a2cc <UART_SetConfig+0x6a8>)
 800a094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a096:	f003 0307 	and.w	r3, r3, #7
 800a09a:	2b05      	cmp	r3, #5
 800a09c:	d826      	bhi.n	800a0ec <UART_SetConfig+0x4c8>
 800a09e:	a201      	add	r2, pc, #4	; (adr r2, 800a0a4 <UART_SetConfig+0x480>)
 800a0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a4:	0800a0bd 	.word	0x0800a0bd
 800a0a8:	0800a0c5 	.word	0x0800a0c5
 800a0ac:	0800a0cd 	.word	0x0800a0cd
 800a0b0:	0800a0d5 	.word	0x0800a0d5
 800a0b4:	0800a0dd 	.word	0x0800a0dd
 800a0b8:	0800a0e5 	.word	0x0800a0e5
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0c2:	e086      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a0c4:	2304      	movs	r3, #4
 800a0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ca:	e082      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a0cc:	2308      	movs	r3, #8
 800a0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0d2:	e07e      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a0d4:	2310      	movs	r3, #16
 800a0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0da:	e07a      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a0dc:	2320      	movs	r3, #32
 800a0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0e2:	e076      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a0e4:	2340      	movs	r3, #64	; 0x40
 800a0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ea:	e072      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a0ec:	2380      	movs	r3, #128	; 0x80
 800a0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0f2:	e06e      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a76      	ldr	r2, [pc, #472]	; (800a2d4 <UART_SetConfig+0x6b0>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d130      	bne.n	800a160 <UART_SetConfig+0x53c>
 800a0fe:	4b73      	ldr	r3, [pc, #460]	; (800a2cc <UART_SetConfig+0x6a8>)
 800a100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a102:	f003 0307 	and.w	r3, r3, #7
 800a106:	2b05      	cmp	r3, #5
 800a108:	d826      	bhi.n	800a158 <UART_SetConfig+0x534>
 800a10a:	a201      	add	r2, pc, #4	; (adr r2, 800a110 <UART_SetConfig+0x4ec>)
 800a10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a110:	0800a129 	.word	0x0800a129
 800a114:	0800a131 	.word	0x0800a131
 800a118:	0800a139 	.word	0x0800a139
 800a11c:	0800a141 	.word	0x0800a141
 800a120:	0800a149 	.word	0x0800a149
 800a124:	0800a151 	.word	0x0800a151
 800a128:	2300      	movs	r3, #0
 800a12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a12e:	e050      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a130:	2304      	movs	r3, #4
 800a132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a136:	e04c      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a138:	2308      	movs	r3, #8
 800a13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a13e:	e048      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a140:	2310      	movs	r3, #16
 800a142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a146:	e044      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a148:	2320      	movs	r3, #32
 800a14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a14e:	e040      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a150:	2340      	movs	r3, #64	; 0x40
 800a152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a156:	e03c      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a158:	2380      	movs	r3, #128	; 0x80
 800a15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a15e:	e038      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a5c      	ldr	r2, [pc, #368]	; (800a2d8 <UART_SetConfig+0x6b4>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d130      	bne.n	800a1cc <UART_SetConfig+0x5a8>
 800a16a:	4b58      	ldr	r3, [pc, #352]	; (800a2cc <UART_SetConfig+0x6a8>)
 800a16c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a16e:	f003 0307 	and.w	r3, r3, #7
 800a172:	2b05      	cmp	r3, #5
 800a174:	d826      	bhi.n	800a1c4 <UART_SetConfig+0x5a0>
 800a176:	a201      	add	r2, pc, #4	; (adr r2, 800a17c <UART_SetConfig+0x558>)
 800a178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17c:	0800a195 	.word	0x0800a195
 800a180:	0800a19d 	.word	0x0800a19d
 800a184:	0800a1a5 	.word	0x0800a1a5
 800a188:	0800a1ad 	.word	0x0800a1ad
 800a18c:	0800a1b5 	.word	0x0800a1b5
 800a190:	0800a1bd 	.word	0x0800a1bd
 800a194:	2302      	movs	r3, #2
 800a196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a19a:	e01a      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a19c:	2304      	movs	r3, #4
 800a19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1a2:	e016      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a1a4:	2308      	movs	r3, #8
 800a1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1aa:	e012      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a1ac:	2310      	movs	r3, #16
 800a1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1b2:	e00e      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a1b4:	2320      	movs	r3, #32
 800a1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ba:	e00a      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a1bc:	2340      	movs	r3, #64	; 0x40
 800a1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1c2:	e006      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a1c4:	2380      	movs	r3, #128	; 0x80
 800a1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ca:	e002      	b.n	800a1d2 <UART_SetConfig+0x5ae>
 800a1cc:	2380      	movs	r3, #128	; 0x80
 800a1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a40      	ldr	r2, [pc, #256]	; (800a2d8 <UART_SetConfig+0x6b4>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	f040 80ef 	bne.w	800a3bc <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1e2:	2b20      	cmp	r3, #32
 800a1e4:	dc46      	bgt.n	800a274 <UART_SetConfig+0x650>
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	f2c0 8081 	blt.w	800a2ee <UART_SetConfig+0x6ca>
 800a1ec:	3b02      	subs	r3, #2
 800a1ee:	2b1e      	cmp	r3, #30
 800a1f0:	d87d      	bhi.n	800a2ee <UART_SetConfig+0x6ca>
 800a1f2:	a201      	add	r2, pc, #4	; (adr r2, 800a1f8 <UART_SetConfig+0x5d4>)
 800a1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f8:	0800a27b 	.word	0x0800a27b
 800a1fc:	0800a2ef 	.word	0x0800a2ef
 800a200:	0800a283 	.word	0x0800a283
 800a204:	0800a2ef 	.word	0x0800a2ef
 800a208:	0800a2ef 	.word	0x0800a2ef
 800a20c:	0800a2ef 	.word	0x0800a2ef
 800a210:	0800a293 	.word	0x0800a293
 800a214:	0800a2ef 	.word	0x0800a2ef
 800a218:	0800a2ef 	.word	0x0800a2ef
 800a21c:	0800a2ef 	.word	0x0800a2ef
 800a220:	0800a2ef 	.word	0x0800a2ef
 800a224:	0800a2ef 	.word	0x0800a2ef
 800a228:	0800a2ef 	.word	0x0800a2ef
 800a22c:	0800a2ef 	.word	0x0800a2ef
 800a230:	0800a2a3 	.word	0x0800a2a3
 800a234:	0800a2ef 	.word	0x0800a2ef
 800a238:	0800a2ef 	.word	0x0800a2ef
 800a23c:	0800a2ef 	.word	0x0800a2ef
 800a240:	0800a2ef 	.word	0x0800a2ef
 800a244:	0800a2ef 	.word	0x0800a2ef
 800a248:	0800a2ef 	.word	0x0800a2ef
 800a24c:	0800a2ef 	.word	0x0800a2ef
 800a250:	0800a2ef 	.word	0x0800a2ef
 800a254:	0800a2ef 	.word	0x0800a2ef
 800a258:	0800a2ef 	.word	0x0800a2ef
 800a25c:	0800a2ef 	.word	0x0800a2ef
 800a260:	0800a2ef 	.word	0x0800a2ef
 800a264:	0800a2ef 	.word	0x0800a2ef
 800a268:	0800a2ef 	.word	0x0800a2ef
 800a26c:	0800a2ef 	.word	0x0800a2ef
 800a270:	0800a2e1 	.word	0x0800a2e1
 800a274:	2b40      	cmp	r3, #64	; 0x40
 800a276:	d036      	beq.n	800a2e6 <UART_SetConfig+0x6c2>
 800a278:	e039      	b.n	800a2ee <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a27a:	f7fe fc27 	bl	8008acc <HAL_RCCEx_GetD3PCLK1Freq>
 800a27e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a280:	e03b      	b.n	800a2fa <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a282:	f107 0314 	add.w	r3, r7, #20
 800a286:	4618      	mov	r0, r3
 800a288:	f7fe fc36 	bl	8008af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a290:	e033      	b.n	800a2fa <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a292:	f107 0308 	add.w	r3, r7, #8
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe fd82 	bl	8008da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2a0:	e02b      	b.n	800a2fa <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2a2:	4b0a      	ldr	r3, [pc, #40]	; (800a2cc <UART_SetConfig+0x6a8>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0320 	and.w	r3, r3, #32
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d009      	beq.n	800a2c2 <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2ae:	4b07      	ldr	r3, [pc, #28]	; (800a2cc <UART_SetConfig+0x6a8>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	08db      	lsrs	r3, r3, #3
 800a2b4:	f003 0303 	and.w	r3, r3, #3
 800a2b8:	4a08      	ldr	r2, [pc, #32]	; (800a2dc <UART_SetConfig+0x6b8>)
 800a2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a2be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2c0:	e01b      	b.n	800a2fa <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 800a2c2:	4b06      	ldr	r3, [pc, #24]	; (800a2dc <UART_SetConfig+0x6b8>)
 800a2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2c6:	e018      	b.n	800a2fa <UART_SetConfig+0x6d6>
 800a2c8:	40011400 	.word	0x40011400
 800a2cc:	58024400 	.word	0x58024400
 800a2d0:	40007800 	.word	0x40007800
 800a2d4:	40007c00 	.word	0x40007c00
 800a2d8:	58000c00 	.word	0x58000c00
 800a2dc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2e0:	4bc4      	ldr	r3, [pc, #784]	; (800a5f4 <UART_SetConfig+0x9d0>)
 800a2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2e4:	e009      	b.n	800a2fa <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2ec:	e005      	b.n	800a2fa <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a2f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 81da 	beq.w	800a6b6 <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a306:	4abc      	ldr	r2, [pc, #752]	; (800a5f8 <UART_SetConfig+0x9d4>)
 800a308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a30c:	461a      	mov	r2, r3
 800a30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a310:	fbb3 f3f2 	udiv	r3, r3, r2
 800a314:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	4613      	mov	r3, r2
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	4413      	add	r3, r2
 800a320:	6a3a      	ldr	r2, [r7, #32]
 800a322:	429a      	cmp	r2, r3
 800a324:	d305      	bcc.n	800a332 <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a32c:	6a3a      	ldr	r2, [r7, #32]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d903      	bls.n	800a33a <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a338:	e1bd      	b.n	800a6b6 <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	4618      	mov	r0, r3
 800a33e:	f04f 0100 	mov.w	r1, #0
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	4aac      	ldr	r2, [pc, #688]	; (800a5f8 <UART_SetConfig+0x9d4>)
 800a348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	f04f 0300 	mov.w	r3, #0
 800a352:	f7f6 f877 	bl	8000444 <__aeabi_uldivmod>
 800a356:	4602      	mov	r2, r0
 800a358:	460b      	mov	r3, r1
 800a35a:	4610      	mov	r0, r2
 800a35c:	4619      	mov	r1, r3
 800a35e:	f04f 0200 	mov.w	r2, #0
 800a362:	f04f 0300 	mov.w	r3, #0
 800a366:	020b      	lsls	r3, r1, #8
 800a368:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a36c:	0202      	lsls	r2, r0, #8
 800a36e:	6879      	ldr	r1, [r7, #4]
 800a370:	6849      	ldr	r1, [r1, #4]
 800a372:	0849      	lsrs	r1, r1, #1
 800a374:	4608      	mov	r0, r1
 800a376:	f04f 0100 	mov.w	r1, #0
 800a37a:	1814      	adds	r4, r2, r0
 800a37c:	eb43 0501 	adc.w	r5, r3, r1
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	461a      	mov	r2, r3
 800a386:	f04f 0300 	mov.w	r3, #0
 800a38a:	4620      	mov	r0, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7f6 f859 	bl	8000444 <__aeabi_uldivmod>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	4613      	mov	r3, r2
 800a398:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3a0:	d308      	bcc.n	800a3b4 <UART_SetConfig+0x790>
 800a3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3a8:	d204      	bcs.n	800a3b4 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3b0:	60da      	str	r2, [r3, #12]
 800a3b2:	e180      	b.n	800a6b6 <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a3ba:	e17c      	b.n	800a6b6 <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3c4:	f040 80bf 	bne.w	800a546 <UART_SetConfig+0x922>
  {
    switch (clocksource)
 800a3c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3cc:	2b20      	cmp	r3, #32
 800a3ce:	dc49      	bgt.n	800a464 <UART_SetConfig+0x840>
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	db7c      	blt.n	800a4ce <UART_SetConfig+0x8aa>
 800a3d4:	2b20      	cmp	r3, #32
 800a3d6:	d87a      	bhi.n	800a4ce <UART_SetConfig+0x8aa>
 800a3d8:	a201      	add	r2, pc, #4	; (adr r2, 800a3e0 <UART_SetConfig+0x7bc>)
 800a3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3de:	bf00      	nop
 800a3e0:	0800a46b 	.word	0x0800a46b
 800a3e4:	0800a473 	.word	0x0800a473
 800a3e8:	0800a4cf 	.word	0x0800a4cf
 800a3ec:	0800a4cf 	.word	0x0800a4cf
 800a3f0:	0800a47b 	.word	0x0800a47b
 800a3f4:	0800a4cf 	.word	0x0800a4cf
 800a3f8:	0800a4cf 	.word	0x0800a4cf
 800a3fc:	0800a4cf 	.word	0x0800a4cf
 800a400:	0800a48b 	.word	0x0800a48b
 800a404:	0800a4cf 	.word	0x0800a4cf
 800a408:	0800a4cf 	.word	0x0800a4cf
 800a40c:	0800a4cf 	.word	0x0800a4cf
 800a410:	0800a4cf 	.word	0x0800a4cf
 800a414:	0800a4cf 	.word	0x0800a4cf
 800a418:	0800a4cf 	.word	0x0800a4cf
 800a41c:	0800a4cf 	.word	0x0800a4cf
 800a420:	0800a49b 	.word	0x0800a49b
 800a424:	0800a4cf 	.word	0x0800a4cf
 800a428:	0800a4cf 	.word	0x0800a4cf
 800a42c:	0800a4cf 	.word	0x0800a4cf
 800a430:	0800a4cf 	.word	0x0800a4cf
 800a434:	0800a4cf 	.word	0x0800a4cf
 800a438:	0800a4cf 	.word	0x0800a4cf
 800a43c:	0800a4cf 	.word	0x0800a4cf
 800a440:	0800a4cf 	.word	0x0800a4cf
 800a444:	0800a4cf 	.word	0x0800a4cf
 800a448:	0800a4cf 	.word	0x0800a4cf
 800a44c:	0800a4cf 	.word	0x0800a4cf
 800a450:	0800a4cf 	.word	0x0800a4cf
 800a454:	0800a4cf 	.word	0x0800a4cf
 800a458:	0800a4cf 	.word	0x0800a4cf
 800a45c:	0800a4cf 	.word	0x0800a4cf
 800a460:	0800a4c1 	.word	0x0800a4c1
 800a464:	2b40      	cmp	r3, #64	; 0x40
 800a466:	d02e      	beq.n	800a4c6 <UART_SetConfig+0x8a2>
 800a468:	e031      	b.n	800a4ce <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a46a:	f7fd fb91 	bl	8007b90 <HAL_RCC_GetPCLK1Freq>
 800a46e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a470:	e033      	b.n	800a4da <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a472:	f7fd fba3 	bl	8007bbc <HAL_RCC_GetPCLK2Freq>
 800a476:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a478:	e02f      	b.n	800a4da <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a47a:	f107 0314 	add.w	r3, r7, #20
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fe fb3a 	bl	8008af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a488:	e027      	b.n	800a4da <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a48a:	f107 0308 	add.w	r3, r7, #8
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe fc86 	bl	8008da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a498:	e01f      	b.n	800a4da <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a49a:	4b58      	ldr	r3, [pc, #352]	; (800a5fc <UART_SetConfig+0x9d8>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 0320 	and.w	r3, r3, #32
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d009      	beq.n	800a4ba <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4a6:	4b55      	ldr	r3, [pc, #340]	; (800a5fc <UART_SetConfig+0x9d8>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	08db      	lsrs	r3, r3, #3
 800a4ac:	f003 0303 	and.w	r3, r3, #3
 800a4b0:	4a53      	ldr	r2, [pc, #332]	; (800a600 <UART_SetConfig+0x9dc>)
 800a4b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4b8:	e00f      	b.n	800a4da <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 800a4ba:	4b51      	ldr	r3, [pc, #324]	; (800a600 <UART_SetConfig+0x9dc>)
 800a4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4be:	e00c      	b.n	800a4da <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4c0:	4b4c      	ldr	r3, [pc, #304]	; (800a5f4 <UART_SetConfig+0x9d0>)
 800a4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4c4:	e009      	b.n	800a4da <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4cc:	e005      	b.n	800a4da <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a4d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 80ea 	beq.w	800a6b6 <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e6:	4a44      	ldr	r2, [pc, #272]	; (800a5f8 <UART_SetConfig+0x9d4>)
 800a4e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4f4:	005a      	lsls	r2, r3, #1
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	085b      	lsrs	r3, r3, #1
 800a4fc:	441a      	add	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	fbb2 f3f3 	udiv	r3, r2, r3
 800a506:	b29b      	uxth	r3, r3
 800a508:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50c:	2b0f      	cmp	r3, #15
 800a50e:	d916      	bls.n	800a53e <UART_SetConfig+0x91a>
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a516:	d212      	bcs.n	800a53e <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	f023 030f 	bic.w	r3, r3, #15
 800a520:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a524:	085b      	lsrs	r3, r3, #1
 800a526:	b29b      	uxth	r3, r3
 800a528:	f003 0307 	and.w	r3, r3, #7
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a530:	4313      	orrs	r3, r2
 800a532:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a53a:	60da      	str	r2, [r3, #12]
 800a53c:	e0bb      	b.n	800a6b6 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a544:	e0b7      	b.n	800a6b6 <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a546:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a54a:	2b20      	cmp	r3, #32
 800a54c:	dc4a      	bgt.n	800a5e4 <UART_SetConfig+0x9c0>
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f2c0 8086 	blt.w	800a660 <UART_SetConfig+0xa3c>
 800a554:	2b20      	cmp	r3, #32
 800a556:	f200 8083 	bhi.w	800a660 <UART_SetConfig+0xa3c>
 800a55a:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <UART_SetConfig+0x93c>)
 800a55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a560:	0800a5eb 	.word	0x0800a5eb
 800a564:	0800a605 	.word	0x0800a605
 800a568:	0800a661 	.word	0x0800a661
 800a56c:	0800a661 	.word	0x0800a661
 800a570:	0800a60d 	.word	0x0800a60d
 800a574:	0800a661 	.word	0x0800a661
 800a578:	0800a661 	.word	0x0800a661
 800a57c:	0800a661 	.word	0x0800a661
 800a580:	0800a61d 	.word	0x0800a61d
 800a584:	0800a661 	.word	0x0800a661
 800a588:	0800a661 	.word	0x0800a661
 800a58c:	0800a661 	.word	0x0800a661
 800a590:	0800a661 	.word	0x0800a661
 800a594:	0800a661 	.word	0x0800a661
 800a598:	0800a661 	.word	0x0800a661
 800a59c:	0800a661 	.word	0x0800a661
 800a5a0:	0800a62d 	.word	0x0800a62d
 800a5a4:	0800a661 	.word	0x0800a661
 800a5a8:	0800a661 	.word	0x0800a661
 800a5ac:	0800a661 	.word	0x0800a661
 800a5b0:	0800a661 	.word	0x0800a661
 800a5b4:	0800a661 	.word	0x0800a661
 800a5b8:	0800a661 	.word	0x0800a661
 800a5bc:	0800a661 	.word	0x0800a661
 800a5c0:	0800a661 	.word	0x0800a661
 800a5c4:	0800a661 	.word	0x0800a661
 800a5c8:	0800a661 	.word	0x0800a661
 800a5cc:	0800a661 	.word	0x0800a661
 800a5d0:	0800a661 	.word	0x0800a661
 800a5d4:	0800a661 	.word	0x0800a661
 800a5d8:	0800a661 	.word	0x0800a661
 800a5dc:	0800a661 	.word	0x0800a661
 800a5e0:	0800a653 	.word	0x0800a653
 800a5e4:	2b40      	cmp	r3, #64	; 0x40
 800a5e6:	d037      	beq.n	800a658 <UART_SetConfig+0xa34>
 800a5e8:	e03a      	b.n	800a660 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5ea:	f7fd fad1 	bl	8007b90 <HAL_RCC_GetPCLK1Freq>
 800a5ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a5f0:	e03c      	b.n	800a66c <UART_SetConfig+0xa48>
 800a5f2:	bf00      	nop
 800a5f4:	003d0900 	.word	0x003d0900
 800a5f8:	08028000 	.word	0x08028000
 800a5fc:	58024400 	.word	0x58024400
 800a600:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a604:	f7fd fada 	bl	8007bbc <HAL_RCC_GetPCLK2Freq>
 800a608:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a60a:	e02f      	b.n	800a66c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a60c:	f107 0314 	add.w	r3, r7, #20
 800a610:	4618      	mov	r0, r3
 800a612:	f7fe fa71 	bl	8008af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a61a:	e027      	b.n	800a66c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a61c:	f107 0308 	add.w	r3, r7, #8
 800a620:	4618      	mov	r0, r3
 800a622:	f7fe fbbd 	bl	8008da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a62a:	e01f      	b.n	800a66c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a62c:	4b2c      	ldr	r3, [pc, #176]	; (800a6e0 <UART_SetConfig+0xabc>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0320 	and.w	r3, r3, #32
 800a634:	2b00      	cmp	r3, #0
 800a636:	d009      	beq.n	800a64c <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a638:	4b29      	ldr	r3, [pc, #164]	; (800a6e0 <UART_SetConfig+0xabc>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	08db      	lsrs	r3, r3, #3
 800a63e:	f003 0303 	and.w	r3, r3, #3
 800a642:	4a28      	ldr	r2, [pc, #160]	; (800a6e4 <UART_SetConfig+0xac0>)
 800a644:	fa22 f303 	lsr.w	r3, r2, r3
 800a648:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a64a:	e00f      	b.n	800a66c <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 800a64c:	4b25      	ldr	r3, [pc, #148]	; (800a6e4 <UART_SetConfig+0xac0>)
 800a64e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a650:	e00c      	b.n	800a66c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a652:	4b25      	ldr	r3, [pc, #148]	; (800a6e8 <UART_SetConfig+0xac4>)
 800a654:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a656:	e009      	b.n	800a66c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a65c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a65e:	e005      	b.n	800a66c <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 800a660:	2300      	movs	r3, #0
 800a662:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a66a:	bf00      	nop
    }

    if (pclk != 0U)
 800a66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d021      	beq.n	800a6b6 <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a676:	4a1d      	ldr	r2, [pc, #116]	; (800a6ec <UART_SetConfig+0xac8>)
 800a678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a67c:	461a      	mov	r2, r3
 800a67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a680:	fbb3 f2f2 	udiv	r2, r3, r2
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	085b      	lsrs	r3, r3, #1
 800a68a:	441a      	add	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	fbb2 f3f3 	udiv	r3, r2, r3
 800a694:	b29b      	uxth	r3, r3
 800a696:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69a:	2b0f      	cmp	r3, #15
 800a69c:	d908      	bls.n	800a6b0 <UART_SetConfig+0xa8c>
 800a69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6a4:	d204      	bcs.n	800a6b0 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ac:	60da      	str	r2, [r3, #12]
 800a6ae:	e002      	b.n	800a6b6 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a6d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3738      	adds	r7, #56	; 0x38
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	58024400 	.word	0x58024400
 800a6e4:	03d09000 	.word	0x03d09000
 800a6e8:	003d0900 	.word	0x003d0900
 800a6ec:	08028000 	.word	0x08028000

0800a6f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00a      	beq.n	800a71a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	430a      	orrs	r2, r1
 800a718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71e:	f003 0302 	and.w	r3, r3, #2
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00a      	beq.n	800a73c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	430a      	orrs	r2, r1
 800a73a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a740:	f003 0304 	and.w	r3, r3, #4
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00a      	beq.n	800a75e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	430a      	orrs	r2, r1
 800a75c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a762:	f003 0308 	and.w	r3, r3, #8
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00a      	beq.n	800a780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	430a      	orrs	r2, r1
 800a77e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a784:	f003 0310 	and.w	r3, r3, #16
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00a      	beq.n	800a7a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	430a      	orrs	r2, r1
 800a7a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a6:	f003 0320 	and.w	r3, r3, #32
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00a      	beq.n	800a7c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	430a      	orrs	r2, r1
 800a7c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d01a      	beq.n	800a806 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	430a      	orrs	r2, r1
 800a7e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7ee:	d10a      	bne.n	800a806 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	430a      	orrs	r2, r1
 800a804:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	430a      	orrs	r2, r1
 800a826:	605a      	str	r2, [r3, #4]
  }
}
 800a828:	bf00      	nop
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af02      	add	r7, sp, #8
 800a83a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a844:	f7f7 fbfe 	bl	8002044 <HAL_GetTick>
 800a848:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 0308 	and.w	r3, r3, #8
 800a854:	2b08      	cmp	r3, #8
 800a856:	d10e      	bne.n	800a876 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 f82c 	bl	800a8c4 <UART_WaitOnFlagUntilTimeout>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a872:	2303      	movs	r3, #3
 800a874:	e022      	b.n	800a8bc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0304 	and.w	r3, r3, #4
 800a880:	2b04      	cmp	r3, #4
 800a882:	d10e      	bne.n	800a8a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f816 	bl	800a8c4 <UART_WaitOnFlagUntilTimeout>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	e00c      	b.n	800a8bc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2220      	movs	r2, #32
 800a8a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2220      	movs	r2, #32
 800a8ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	603b      	str	r3, [r7, #0]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8d4:	e062      	b.n	800a99c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8dc:	d05e      	beq.n	800a99c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8de:	f7f7 fbb1 	bl	8002044 <HAL_GetTick>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	69ba      	ldr	r2, [r7, #24]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d302      	bcc.n	800a8f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d11d      	bne.n	800a930 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a902:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	689a      	ldr	r2, [r3, #8]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 0201 	bic.w	r2, r2, #1
 800a912:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2220      	movs	r2, #32
 800a918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2220      	movs	r2, #32
 800a920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e045      	b.n	800a9bc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0304 	and.w	r3, r3, #4
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d02e      	beq.n	800a99c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	69db      	ldr	r3, [r3, #28]
 800a944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a94c:	d126      	bne.n	800a99c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a956:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a966:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	689a      	ldr	r2, [r3, #8]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f022 0201 	bic.w	r2, r2, #1
 800a976:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2220      	movs	r2, #32
 800a97c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2220      	movs	r2, #32
 800a984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2220      	movs	r2, #32
 800a98c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	e00f      	b.n	800a9bc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	69da      	ldr	r2, [r3, #28]
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	bf0c      	ite	eq
 800a9ac:	2301      	moveq	r3, #1
 800a9ae:	2300      	movne	r3, #0
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	79fb      	ldrb	r3, [r7, #7]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d08d      	beq.n	800a8d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d101      	bne.n	800a9da <HAL_UARTEx_DisableFifoMode+0x16>
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	e027      	b.n	800aa2a <HAL_UARTEx_DisableFifoMode+0x66>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2224      	movs	r2, #36	; 0x24
 800a9e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f022 0201 	bic.w	r2, r2, #1
 800aa00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2220      	movs	r2, #32
 800aa1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3714      	adds	r7, #20
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b084      	sub	sp, #16
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d101      	bne.n	800aa4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	e02d      	b.n	800aaaa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2224      	movs	r2, #36	; 0x24
 800aa5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f022 0201 	bic.w	r2, r2, #1
 800aa74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	430a      	orrs	r2, r1
 800aa88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f850 	bl	800ab30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2220      	movs	r2, #32
 800aa9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b084      	sub	sp, #16
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
 800aaba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d101      	bne.n	800aaca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aac6:	2302      	movs	r3, #2
 800aac8:	e02d      	b.n	800ab26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2201      	movs	r2, #1
 800aace:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2224      	movs	r2, #36	; 0x24
 800aad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f022 0201 	bic.w	r2, r2, #1
 800aaf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	683a      	ldr	r2, [r7, #0]
 800ab02:	430a      	orrs	r2, r1
 800ab04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f812 	bl	800ab30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2220      	movs	r2, #32
 800ab18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
	...

0800ab30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b089      	sub	sp, #36	; 0x24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ab38:	4a2f      	ldr	r2, [pc, #188]	; (800abf8 <UARTEx_SetNbDataToProcess+0xc8>)
 800ab3a:	f107 0314 	add.w	r3, r7, #20
 800ab3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab42:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ab46:	4a2d      	ldr	r2, [pc, #180]	; (800abfc <UARTEx_SetNbDataToProcess+0xcc>)
 800ab48:	f107 030c 	add.w	r3, r7, #12
 800ab4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab50:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d108      	bne.n	800ab6e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab6c:	e03d      	b.n	800abea <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab6e:	2310      	movs	r3, #16
 800ab70:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab72:	2310      	movs	r3, #16
 800ab74:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	0e5b      	lsrs	r3, r3, #25
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	f003 0307 	and.w	r3, r3, #7
 800ab84:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	0f5b      	lsrs	r3, r3, #29
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	f003 0307 	and.w	r3, r3, #7
 800ab94:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ab96:	7fbb      	ldrb	r3, [r7, #30]
 800ab98:	7f3a      	ldrb	r2, [r7, #28]
 800ab9a:	f107 0120 	add.w	r1, r7, #32
 800ab9e:	440a      	add	r2, r1
 800aba0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aba4:	fb02 f303 	mul.w	r3, r2, r3
 800aba8:	7f3a      	ldrb	r2, [r7, #28]
 800abaa:	f107 0120 	add.w	r1, r7, #32
 800abae:	440a      	add	r2, r1
 800abb0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800abb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800abb8:	b29a      	uxth	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800abc0:	7ffb      	ldrb	r3, [r7, #31]
 800abc2:	7f7a      	ldrb	r2, [r7, #29]
 800abc4:	f107 0120 	add.w	r1, r7, #32
 800abc8:	440a      	add	r2, r1
 800abca:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800abce:	fb02 f303 	mul.w	r3, r2, r3
 800abd2:	7f7a      	ldrb	r2, [r7, #29]
 800abd4:	f107 0120 	add.w	r1, r7, #32
 800abd8:	440a      	add	r2, r1
 800abda:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800abde:	fb93 f3f2 	sdiv	r3, r3, r2
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800abea:	bf00      	nop
 800abec:	3724      	adds	r7, #36	; 0x24
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	08024238 	.word	0x08024238
 800abfc:	08024240 	.word	0x08024240

0800ac00 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800ac12:	2320      	movs	r3, #32
 800ac14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ac16:	f3bf 8f4f 	dsb	sy
}
 800ac1a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800ac1c:	e00b      	b.n	800ac36 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800ac1e:	4a0d      	ldr	r2, [pc, #52]	; (800ac54 <SCB_InvalidateDCache_by_Addr+0x54>)
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	693a      	ldr	r2, [r7, #16]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	dcf0      	bgt.n	800ac1e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800ac3c:	f3bf 8f4f 	dsb	sy
}
 800ac40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ac42:	f3bf 8f6f 	isb	sy
}
 800ac46:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800ac48:	bf00      	nop
 800ac4a:	371c      	adds	r7, #28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	e000ed00 	.word	0xe000ed00

0800ac58 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b08e      	sub	sp, #56	; 0x38
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac64:	2200      	movs	r2, #0
 800ac66:	601a      	str	r2, [r3, #0]
 800ac68:	605a      	str	r2, [r3, #4]
 800ac6a:	609a      	str	r2, [r3, #8]
 800ac6c:	60da      	str	r2, [r3, #12]
 800ac6e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a5d      	ldr	r2, [pc, #372]	; (800adec <HAL_ETH_MspInit+0x194>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	f040 80b3 	bne.w	800ade2 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800ac7c:	4b5c      	ldr	r3, [pc, #368]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800ac7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ac82:	4a5b      	ldr	r2, [pc, #364]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800ac84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ac8c:	4b58      	ldr	r3, [pc, #352]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800ac8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ac92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac96:	623b      	str	r3, [r7, #32]
 800ac98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800ac9a:	4b55      	ldr	r3, [pc, #340]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800ac9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800aca0:	4a53      	ldr	r2, [pc, #332]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800aca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aca6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800acaa:	4b51      	ldr	r3, [pc, #324]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800acac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800acb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acb4:	61fb      	str	r3, [r7, #28]
 800acb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800acb8:	4b4d      	ldr	r3, [pc, #308]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800acba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800acbe:	4a4c      	ldr	r2, [pc, #304]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800acc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acc4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800acc8:	4b49      	ldr	r3, [pc, #292]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800acca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800acce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acd2:	61bb      	str	r3, [r7, #24]
 800acd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800acd6:	4b46      	ldr	r3, [pc, #280]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800acd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acdc:	4a44      	ldr	r2, [pc, #272]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800acde:	f043 0304 	orr.w	r3, r3, #4
 800ace2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ace6:	4b42      	ldr	r3, [pc, #264]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800ace8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acec:	f003 0304 	and.w	r3, r3, #4
 800acf0:	617b      	str	r3, [r7, #20]
 800acf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acf4:	4b3e      	ldr	r3, [pc, #248]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800acf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acfa:	4a3d      	ldr	r2, [pc, #244]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800acfc:	f043 0301 	orr.w	r3, r3, #1
 800ad00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ad04:	4b3a      	ldr	r3, [pc, #232]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800ad06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	613b      	str	r3, [r7, #16]
 800ad10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad12:	4b37      	ldr	r3, [pc, #220]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800ad14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad18:	4a35      	ldr	r2, [pc, #212]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800ad1a:	f043 0302 	orr.w	r3, r3, #2
 800ad1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ad22:	4b33      	ldr	r3, [pc, #204]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800ad24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad28:	f003 0302 	and.w	r3, r3, #2
 800ad2c:	60fb      	str	r3, [r7, #12]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ad30:	4b2f      	ldr	r3, [pc, #188]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800ad32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad36:	4a2e      	ldr	r2, [pc, #184]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800ad38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ad40:	4b2b      	ldr	r3, [pc, #172]	; (800adf0 <HAL_ETH_MspInit+0x198>)
 800ad42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad4a:	60bb      	str	r3, [r7, #8]
 800ad4c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800ad4e:	2332      	movs	r3, #50	; 0x32
 800ad50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad52:	2302      	movs	r3, #2
 800ad54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad56:	2300      	movs	r3, #0
 800ad58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ad5e:	230b      	movs	r3, #11
 800ad60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad66:	4619      	mov	r1, r3
 800ad68:	4822      	ldr	r0, [pc, #136]	; (800adf4 <HAL_ETH_MspInit+0x19c>)
 800ad6a:	f7fa ff45 	bl	8005bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800ad6e:	2386      	movs	r3, #134	; 0x86
 800ad70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad72:	2302      	movs	r3, #2
 800ad74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad76:	2300      	movs	r3, #0
 800ad78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ad7e:	230b      	movs	r3, #11
 800ad80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad86:	4619      	mov	r1, r3
 800ad88:	481b      	ldr	r0, [pc, #108]	; (800adf8 <HAL_ETH_MspInit+0x1a0>)
 800ad8a:	f7fa ff35 	bl	8005bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800ad8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad94:	2302      	movs	r3, #2
 800ad96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad9c:	2303      	movs	r3, #3
 800ad9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ada0:	230b      	movs	r3, #11
 800ada2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ada4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ada8:	4619      	mov	r1, r3
 800adaa:	4814      	ldr	r0, [pc, #80]	; (800adfc <HAL_ETH_MspInit+0x1a4>)
 800adac:	f7fa ff24 	bl	8005bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800adb0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800adb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adb6:	2302      	movs	r3, #2
 800adb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adba:	2300      	movs	r3, #0
 800adbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adbe:	2303      	movs	r3, #3
 800adc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800adc2:	230b      	movs	r3, #11
 800adc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800adc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adca:	4619      	mov	r1, r3
 800adcc:	480c      	ldr	r0, [pc, #48]	; (800ae00 <HAL_ETH_MspInit+0x1a8>)
 800adce:	f7fa ff13 	bl	8005bf8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 800add2:	2200      	movs	r2, #0
 800add4:	2107      	movs	r1, #7
 800add6:	203d      	movs	r0, #61	; 0x3d
 800add8:	f7f7 fa18 	bl	800220c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800addc:	203d      	movs	r0, #61	; 0x3d
 800adde:	f7f7 fa2f 	bl	8002240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ade2:	bf00      	nop
 800ade4:	3738      	adds	r7, #56	; 0x38
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	40028000 	.word	0x40028000
 800adf0:	58024400 	.word	0x58024400
 800adf4:	58020800 	.word	0x58020800
 800adf8:	58020000 	.word	0x58020000
 800adfc:	58020400 	.word	0x58020400
 800ae00:	58021800 	.word	0x58021800

0800ae04 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800ae0c:	4b04      	ldr	r3, [pc, #16]	; (800ae20 <HAL_ETH_RxCpltCallback+0x1c>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 fd2f 	bl	800b874 <osSemaphoreRelease>
}
 800ae16:	bf00      	nop
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	24000a80 	.word	0x24000a80

0800ae24 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ae24:	b5b0      	push	{r4, r5, r7, lr}
 800ae26:	b0ac      	sub	sp, #176	; 0xb0
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ae3e:	4b91      	ldr	r3, [pc, #580]	; (800b084 <low_level_init+0x260>)
 800ae40:	4a91      	ldr	r2, [pc, #580]	; (800b088 <low_level_init+0x264>)
 800ae42:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ae44:	2300      	movs	r3, #0
 800ae46:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800ae4a:	2380      	movs	r3, #128	; 0x80
 800ae4c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800ae50:	23e1      	movs	r3, #225	; 0xe1
 800ae52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800ae56:	2300      	movs	r3, #0
 800ae58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800ae62:	2300      	movs	r3, #0
 800ae64:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800ae68:	4a86      	ldr	r2, [pc, #536]	; (800b084 <low_level_init+0x260>)
 800ae6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae6e:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ae70:	4b84      	ldr	r3, [pc, #528]	; (800b084 <low_level_init+0x260>)
 800ae72:	2201      	movs	r2, #1
 800ae74:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ae76:	4b83      	ldr	r3, [pc, #524]	; (800b084 <low_level_init+0x260>)
 800ae78:	4a84      	ldr	r2, [pc, #528]	; (800b08c <low_level_init+0x268>)
 800ae7a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ae7c:	4b81      	ldr	r3, [pc, #516]	; (800b084 <low_level_init+0x260>)
 800ae7e:	4a84      	ldr	r2, [pc, #528]	; (800b090 <low_level_init+0x26c>)
 800ae80:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800ae82:	4b80      	ldr	r3, [pc, #512]	; (800b084 <low_level_init+0x260>)
 800ae84:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ae88:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ae8a:	487e      	ldr	r0, [pc, #504]	; (800b084 <low_level_init+0x260>)
 800ae8c:	f7f9 f822 	bl	8003ed4 <HAL_ETH_Init>
 800ae90:	4603      	mov	r3, r0
 800ae92:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ae96:	2234      	movs	r2, #52	; 0x34
 800ae98:	2100      	movs	r1, #0
 800ae9a:	487e      	ldr	r0, [pc, #504]	; (800b094 <low_level_init+0x270>)
 800ae9c:	f016 faf4 	bl	8021488 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800aea0:	4b7c      	ldr	r3, [pc, #496]	; (800b094 <low_level_init+0x270>)
 800aea2:	2221      	movs	r2, #33	; 0x21
 800aea4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800aea6:	4b7b      	ldr	r3, [pc, #492]	; (800b094 <low_level_init+0x270>)
 800aea8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800aeac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800aeae:	4b79      	ldr	r3, [pc, #484]	; (800b094 <low_level_init+0x270>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800aeb4:	4878      	ldr	r0, [pc, #480]	; (800b098 <low_level_init+0x274>)
 800aeb6:	f008 fecf 	bl	8013c58 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2206      	movs	r2, #6
 800aebe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800aec2:	4b70      	ldr	r3, [pc, #448]	; (800b084 <low_level_init+0x260>)
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	781a      	ldrb	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800aece:	4b6d      	ldr	r3, [pc, #436]	; (800b084 <low_level_init+0x260>)
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	785a      	ldrb	r2, [r3, #1]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800aeda:	4b6a      	ldr	r3, [pc, #424]	; (800b084 <low_level_init+0x260>)
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	789a      	ldrb	r2, [r3, #2]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800aee6:	4b67      	ldr	r3, [pc, #412]	; (800b084 <low_level_init+0x260>)
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	78da      	ldrb	r2, [r3, #3]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800aef2:	4b64      	ldr	r3, [pc, #400]	; (800b084 <low_level_init+0x260>)
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	791a      	ldrb	r2, [r3, #4]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800aefe:	4b61      	ldr	r3, [pc, #388]	; (800b084 <low_level_init+0x260>)
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	795a      	ldrb	r2, [r3, #5]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800af10:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af18:	f043 030a 	orr.w	r3, r3, #10
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800af24:	2300      	movs	r3, #0
 800af26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af2a:	e012      	b.n	800af52 <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800af2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af30:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800af34:	fb02 f303 	mul.w	r3, r2, r3
 800af38:	4a58      	ldr	r2, [pc, #352]	; (800b09c <low_level_init+0x278>)
 800af3a:	441a      	add	r2, r3
 800af3c:	2300      	movs	r3, #0
 800af3e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800af42:	4850      	ldr	r0, [pc, #320]	; (800b084 <low_level_init+0x260>)
 800af44:	f7f9 f8a0 	bl	8004088 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800af48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af4c:	3301      	adds	r3, #1
 800af4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af56:	2b03      	cmp	r3, #3
 800af58:	d9e8      	bls.n	800af2c <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800af5a:	2300      	movs	r3, #0
 800af5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800af5e:	2300      	movs	r3, #0
 800af60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800af62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800af66:	2101      	movs	r1, #1
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fc03 	bl	800b774 <osSemaphoreCreate>
 800af6e:	4603      	mov	r3, r0
 800af70:	4a4b      	ldr	r2, [pc, #300]	; (800b0a0 <low_level_init+0x27c>)
 800af72:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800af74:	4b4b      	ldr	r3, [pc, #300]	; (800b0a4 <low_level_init+0x280>)
 800af76:	f107 040c 	add.w	r4, r7, #12
 800af7a:	461d      	mov	r5, r3
 800af7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800af84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800af88:	f107 030c 	add.w	r3, r7, #12
 800af8c:	6879      	ldr	r1, [r7, #4]
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 faf3 	bl	800b57a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800af94:	4944      	ldr	r1, [pc, #272]	; (800b0a8 <low_level_init+0x284>)
 800af96:	4845      	ldr	r0, [pc, #276]	; (800b0ac <low_level_init+0x288>)
 800af98:	f7f6 fea3 	bl	8001ce2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800af9c:	4843      	ldr	r0, [pc, #268]	; (800b0ac <low_level_init+0x288>)
 800af9e:	f7f6 fed2 	bl	8001d46 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800afa2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d165      	bne.n	800b076 <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800afaa:	4840      	ldr	r0, [pc, #256]	; (800b0ac <low_level_init+0x288>)
 800afac:	f7f6 ff73 	bl	8001e96 <LAN8742_GetLinkState>
 800afb0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800afb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800afb8:	2b01      	cmp	r3, #1
 800afba:	dc06      	bgt.n	800afca <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f009 fab7 	bl	8014530 <netif_set_link_down>
      netif_set_down(netif);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f009 fa4e 	bl	8014464 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800afc8:	e057      	b.n	800b07a <low_level_init+0x256>
 800afca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800afce:	3b02      	subs	r3, #2
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d82b      	bhi.n	800b02c <low_level_init+0x208>
 800afd4:	a201      	add	r2, pc, #4	; (adr r2, 800afdc <low_level_init+0x1b8>)
 800afd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afda:	bf00      	nop
 800afdc:	0800afed 	.word	0x0800afed
 800afe0:	0800afff 	.word	0x0800afff
 800afe4:	0800b00f 	.word	0x0800b00f
 800afe8:	0800b01f 	.word	0x0800b01f
        duplex = ETH_FULLDUPLEX_MODE;
 800afec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800aff4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800affc:	e01f      	b.n	800b03e <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800affe:	2300      	movs	r3, #0
 800b000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b004:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b00c:	e017      	b.n	800b03e <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800b00e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b012:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800b016:	2300      	movs	r3, #0
 800b018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b01c:	e00f      	b.n	800b03e <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800b01e:	2300      	movs	r3, #0
 800b020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800b024:	2300      	movs	r3, #0
 800b026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b02a:	e008      	b.n	800b03e <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800b02c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b034:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b03c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b03e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b042:	4619      	mov	r1, r3
 800b044:	480f      	ldr	r0, [pc, #60]	; (800b084 <low_level_init+0x260>)
 800b046:	f7f9 fe01 	bl	8004c4c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b04a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b04e:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800b050:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b054:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b056:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b05a:	4619      	mov	r1, r3
 800b05c:	4809      	ldr	r0, [pc, #36]	; (800b084 <low_level_init+0x260>)
 800b05e:	f7f9 ffc9 	bl	8004ff4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800b062:	4808      	ldr	r0, [pc, #32]	; (800b084 <low_level_init+0x260>)
 800b064:	f7f9 f851 	bl	800410a <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f009 f98f 	bl	801438c <netif_set_up>
    netif_set_link_up(netif);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f009 fa2a 	bl	80144c8 <netif_set_link_up>
}
 800b074:	e001      	b.n	800b07a <low_level_init+0x256>
    Error_Handler();
 800b076:	f7f6 f873 	bl	8001160 <Error_Handler>
}
 800b07a:	bf00      	nop
 800b07c:	37b0      	adds	r7, #176	; 0xb0
 800b07e:	46bd      	mov	sp, r7
 800b080:	bdb0      	pop	{r4, r5, r7, pc}
 800b082:	bf00      	nop
 800b084:	2400a0a0 	.word	0x2400a0a0
 800b088:	40028000 	.word	0x40028000
 800b08c:	30040060 	.word	0x30040060
 800b090:	30040000 	.word	0x30040000
 800b094:	2400a110 	.word	0x2400a110
 800b098:	08028018 	.word	0x08028018
 800b09c:	30040200 	.word	0x30040200
 800b0a0:	24000a80 	.word	0x24000a80
 800b0a4:	08024250 	.word	0x08024250
 800b0a8:	24000010 	.word	0x24000010
 800b0ac:	2400a080 	.word	0x2400a080

0800b0b0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b092      	sub	sp, #72	; 0x48
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b0c4:	f107 030c 	add.w	r3, r7, #12
 800b0c8:	2230      	movs	r2, #48	; 0x30
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f016 f9db 	bl	8021488 <memset>

  for(q = p; q != NULL; q = q->next)
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	643b      	str	r3, [r7, #64]	; 0x40
 800b0d6:	e049      	b.n	800b16c <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b0d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0da:	2b03      	cmp	r3, #3
 800b0dc:	d902      	bls.n	800b0e4 <low_level_output+0x34>
      return ERR_IF;
 800b0de:	f06f 030b 	mvn.w	r3, #11
 800b0e2:	e056      	b.n	800b192 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800b0e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0e6:	6859      	ldr	r1, [r3, #4]
 800b0e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	005b      	lsls	r3, r3, #1
 800b0ee:	4413      	add	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b0f6:	4413      	add	r3, r2
 800b0f8:	3b3c      	subs	r3, #60	; 0x3c
 800b0fa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b0fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0fe:	895b      	ldrh	r3, [r3, #10]
 800b100:	4619      	mov	r1, r3
 800b102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b104:	4613      	mov	r3, r2
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	4413      	add	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b110:	4413      	add	r3, r2
 800b112:	3b38      	subs	r3, #56	; 0x38
 800b114:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d012      	beq.n	800b142 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b11c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b11e:	1e5a      	subs	r2, r3, #1
 800b120:	f107 000c 	add.w	r0, r7, #12
 800b124:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b126:	460b      	mov	r3, r1
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	440b      	add	r3, r1
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	18c1      	adds	r1, r0, r3
 800b130:	4613      	mov	r3, r2
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	4413      	add	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b13c:	4413      	add	r3, r2
 800b13e:	3b34      	subs	r3, #52	; 0x34
 800b140:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10a      	bne.n	800b160 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800b14a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b14c:	4613      	mov	r3, r2
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	4413      	add	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b158:	4413      	add	r3, r2
 800b15a:	3b34      	subs	r3, #52	; 0x34
 800b15c:	2200      	movs	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b162:	3301      	adds	r3, #1
 800b164:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	643b      	str	r3, [r7, #64]	; 0x40
 800b16c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1b2      	bne.n	800b0d8 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	891b      	ldrh	r3, [r3, #8]
 800b176:	461a      	mov	r2, r3
 800b178:	4b08      	ldr	r3, [pc, #32]	; (800b19c <low_level_output+0xec>)
 800b17a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b17c:	4a07      	ldr	r2, [pc, #28]	; (800b19c <low_level_output+0xec>)
 800b17e:	f107 030c 	add.w	r3, r7, #12
 800b182:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b184:	2214      	movs	r2, #20
 800b186:	4905      	ldr	r1, [pc, #20]	; (800b19c <low_level_output+0xec>)
 800b188:	4805      	ldr	r0, [pc, #20]	; (800b1a0 <low_level_output+0xf0>)
 800b18a:	f7f9 f8bd 	bl	8004308 <HAL_ETH_Transmit>

  return errval;
 800b18e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b192:	4618      	mov	r0, r3
 800b194:	3748      	adds	r7, #72	; 0x48
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	2400a110 	.word	0x2400a110
 800b1a0:	2400a0a0 	.word	0x2400a0a0

0800b1a4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b094      	sub	sp, #80	; 0x50
 800b1a8:	af02      	add	r7, sp, #8
 800b1aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	647b      	str	r3, [r7, #68]	; 0x44
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	60bb      	str	r3, [r7, #8]
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b1b8:	f107 030c 	add.w	r3, r7, #12
 800b1bc:	2230      	movs	r2, #48	; 0x30
 800b1be:	2100      	movs	r1, #0
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f016 f961 	bl	8021488 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	643b      	str	r3, [r7, #64]	; 0x40
 800b1ca:	e015      	b.n	800b1f8 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800b1cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ce:	1c5a      	adds	r2, r3, #1
 800b1d0:	f107 010c 	add.w	r1, r7, #12
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	005b      	lsls	r3, r3, #1
 800b1d8:	4413      	add	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4419      	add	r1, r3
 800b1de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	005b      	lsls	r3, r3, #1
 800b1e4:	4413      	add	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b1ec:	4413      	add	r3, r2
 800b1ee:	3b34      	subs	r3, #52	; 0x34
 800b1f0:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800b1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	643b      	str	r3, [r7, #64]	; 0x40
 800b1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d9e6      	bls.n	800b1cc <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800b1fe:	f107 030c 	add.w	r3, r7, #12
 800b202:	4619      	mov	r1, r3
 800b204:	4818      	ldr	r0, [pc, #96]	; (800b268 <low_level_input+0xc4>)
 800b206:	f7f9 f9f8 	bl	80045fa <HAL_ETH_GetRxDataBuffer>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d125      	bne.n	800b25c <low_level_input+0xb8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800b210:	f107 0308 	add.w	r3, r7, #8
 800b214:	4619      	mov	r1, r3
 800b216:	4814      	ldr	r0, [pc, #80]	; (800b268 <low_level_input+0xc4>)
 800b218:	f7f9 fa8d 	bl	8004736 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800b21c:	4812      	ldr	r0, [pc, #72]	; (800b268 <low_level_input+0xc4>)
 800b21e:	f7f9 fabd 	bl	800479c <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	4611      	mov	r1, r2
 800b228:	4618      	mov	r0, r3
 800b22a:	f7ff fce9 	bl	800ac00 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b22e:	480f      	ldr	r0, [pc, #60]	; (800b26c <low_level_input+0xc8>)
 800b230:	f008 fd8e 	bl	8013d50 <memp_malloc_pool>
 800b234:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(custom_pbuf != NULL)
 800b236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00f      	beq.n	800b25c <low_level_input+0xb8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800b23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b23e:	4a0c      	ldr	r2, [pc, #48]	; (800b270 <low_level_input+0xcc>)
 800b240:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	b299      	uxth	r1, r3
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	b292      	uxth	r2, r2
 800b24c:	9201      	str	r2, [sp, #4]
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b252:	2241      	movs	r2, #65	; 0x41
 800b254:	2000      	movs	r0, #0
 800b256:	f009 fb8f 	bl	8014978 <pbuf_alloced_custom>
 800b25a:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  return p;
 800b25c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3748      	adds	r7, #72	; 0x48
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	2400a0a0 	.word	0x2400a0a0
 800b26c:	08028018 	.word	0x08028018
 800b270:	0800b321 	.word	0x0800b321

0800b274 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b280:	4b0f      	ldr	r3, [pc, #60]	; (800b2c0 <ethernetif_input+0x4c>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b288:	4618      	mov	r0, r3
 800b28a:	f000 faa5 	bl	800b7d8 <osSemaphoreWait>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1f5      	bne.n	800b280 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f7ff ff85 	bl	800b1a4 <low_level_input>
 800b29a:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00a      	beq.n	800b2b8 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	68f9      	ldr	r1, [r7, #12]
 800b2a8:	68b8      	ldr	r0, [r7, #8]
 800b2aa:	4798      	blx	r3
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d002      	beq.n	800b2b8 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800b2b2:	68b8      	ldr	r0, [r7, #8]
 800b2b4:	f009 fd1a 	bl	8014cec <pbuf_free>
          }
        }
      } while(p!=NULL);
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1ea      	bne.n	800b294 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b2be:	e7df      	b.n	800b280 <ethernetif_input+0xc>
 800b2c0:	24000a80 	.word	0x24000a80

0800b2c4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d106      	bne.n	800b2e0 <ethernetif_init+0x1c>
 800b2d2:	4b0e      	ldr	r3, [pc, #56]	; (800b30c <ethernetif_init+0x48>)
 800b2d4:	f44f 7212 	mov.w	r2, #584	; 0x248
 800b2d8:	490d      	ldr	r1, [pc, #52]	; (800b310 <ethernetif_init+0x4c>)
 800b2da:	480e      	ldr	r0, [pc, #56]	; (800b314 <ethernetif_init+0x50>)
 800b2dc:	f016 fd1e 	bl	8021d1c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2273      	movs	r2, #115	; 0x73
 800b2e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2274      	movs	r2, #116	; 0x74
 800b2ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a09      	ldr	r2, [pc, #36]	; (800b318 <ethernetif_init+0x54>)
 800b2f4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a08      	ldr	r2, [pc, #32]	; (800b31c <ethernetif_init+0x58>)
 800b2fa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f7ff fd91 	bl	800ae24 <low_level_init>

  return ERR_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3708      	adds	r7, #8
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	0802426c 	.word	0x0802426c
 800b310:	08024288 	.word	0x08024288
 800b314:	08024298 	.word	0x08024298
 800b318:	08011329 	.word	0x08011329
 800b31c:	0800b0b1 	.word	0x0800b0b1

0800b320 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b32c:	68f9      	ldr	r1, [r7, #12]
 800b32e:	4803      	ldr	r0, [pc, #12]	; (800b33c <pbuf_free_custom+0x1c>)
 800b330:	f008 fd82 	bl	8013e38 <memp_free_pool>
}
 800b334:	bf00      	nop
 800b336:	3710      	adds	r7, #16
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	08028018 	.word	0x08028018

0800b340 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b344:	f7f6 fe7e 	bl	8002044 <HAL_GetTick>
 800b348:	4603      	mov	r3, r0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	bd80      	pop	{r7, pc}
	...

0800b350 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b354:	4802      	ldr	r0, [pc, #8]	; (800b360 <ETH_PHY_IO_Init+0x10>)
 800b356:	f7f9 fe67 	bl	8005028 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	2400a0a0 	.word	0x2400a0a0

0800b364 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b364:	b480      	push	{r7}
 800b366:	af00      	add	r7, sp, #0
  return 0;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	68f9      	ldr	r1, [r7, #12]
 800b386:	4807      	ldr	r0, [pc, #28]	; (800b3a4 <ETH_PHY_IO_ReadReg+0x30>)
 800b388:	f7f9 fbb8 	bl	8004afc <HAL_ETH_ReadPHYRegister>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d002      	beq.n	800b398 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b396:	e000      	b.n	800b39a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	2400a0a0 	.word	0x2400a0a0

0800b3a8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	68ba      	ldr	r2, [r7, #8]
 800b3b8:	68f9      	ldr	r1, [r7, #12]
 800b3ba:	4807      	ldr	r0, [pc, #28]	; (800b3d8 <ETH_PHY_IO_WriteReg+0x30>)
 800b3bc:	f7f9 fbf2 	bl	8004ba4 <HAL_ETH_WritePHYRegister>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d002      	beq.n	800b3cc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b3c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3ca:	e000      	b.n	800b3ce <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	2400a0a0 	.word	0x2400a0a0

0800b3dc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b3e0:	f7f6 fe30 	bl	8002044 <HAL_GetTick>
 800b3e4:	4603      	mov	r3, r0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	bd80      	pop	{r7, pc}
	...

0800b3ec <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b0a0      	sub	sp, #128	; 0x80
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	67bb      	str	r3, [r7, #120]	; 0x78
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b404:	483a      	ldr	r0, [pc, #232]	; (800b4f0 <ethernet_link_thread+0x104>)
 800b406:	f7f6 fd46 	bl	8001e96 <LAN8742_GetLinkState>
 800b40a:	4603      	mov	r3, r0
 800b40c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b40e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b410:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b414:	089b      	lsrs	r3, r3, #2
 800b416:	f003 0301 	and.w	r3, r3, #1
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00c      	beq.n	800b43a <ethernet_link_thread+0x4e>
 800b420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b422:	2b01      	cmp	r3, #1
 800b424:	d809      	bhi.n	800b43a <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 800b426:	4833      	ldr	r0, [pc, #204]	; (800b4f4 <ethernet_link_thread+0x108>)
 800b428:	f7f8 fef4 	bl	8004214 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800b42c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b42e:	f009 f819 	bl	8014464 <netif_set_down>
    netif_set_link_down(netif);
 800b432:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b434:	f009 f87c 	bl	8014530 <netif_set_link_down>
 800b438:	e055      	b.n	800b4e6 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b43a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b43c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b440:	f003 0304 	and.w	r3, r3, #4
 800b444:	2b00      	cmp	r3, #0
 800b446:	d14e      	bne.n	800b4e6 <ethernet_link_thread+0xfa>
 800b448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d94b      	bls.n	800b4e6 <ethernet_link_thread+0xfa>
 800b44e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b450:	3b02      	subs	r3, #2
 800b452:	2b03      	cmp	r3, #3
 800b454:	d82a      	bhi.n	800b4ac <ethernet_link_thread+0xc0>
 800b456:	a201      	add	r2, pc, #4	; (adr r2, 800b45c <ethernet_link_thread+0x70>)
 800b458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45c:	0800b46d 	.word	0x0800b46d
 800b460:	0800b47f 	.word	0x0800b47f
 800b464:	0800b48f 	.word	0x0800b48f
 800b468:	0800b49f 	.word	0x0800b49f
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b46c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b470:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b472:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b476:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b478:	2301      	movs	r3, #1
 800b47a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b47c:	e017      	b.n	800b4ae <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b47e:	2300      	movs	r3, #0
 800b480:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b482:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b486:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b488:	2301      	movs	r3, #1
 800b48a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b48c:	e00f      	b.n	800b4ae <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b48e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b492:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b494:	2300      	movs	r3, #0
 800b496:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b498:	2301      	movs	r3, #1
 800b49a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b49c:	e007      	b.n	800b4ae <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b4aa:	e000      	b.n	800b4ae <ethernet_link_thread+0xc2>
    default:
      break;
 800b4ac:	bf00      	nop
    }

    if(linkchanged)
 800b4ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d018      	beq.n	800b4e6 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b4b4:	f107 0308 	add.w	r3, r7, #8
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	480e      	ldr	r0, [pc, #56]	; (800b4f4 <ethernet_link_thread+0x108>)
 800b4bc:	f7f9 fbc6 	bl	8004c4c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b4c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4c2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800b4c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4c6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b4c8:	f107 0308 	add.w	r3, r7, #8
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	4809      	ldr	r0, [pc, #36]	; (800b4f4 <ethernet_link_thread+0x108>)
 800b4d0:	f7f9 fd90 	bl	8004ff4 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800b4d4:	4807      	ldr	r0, [pc, #28]	; (800b4f4 <ethernet_link_thread+0x108>)
 800b4d6:	f7f8 fe18 	bl	800410a <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800b4da:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b4dc:	f008 ff56 	bl	801438c <netif_set_up>
      netif_set_link_up(netif);
 800b4e0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b4e2:	f008 fff1 	bl	80144c8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800b4e6:	2064      	movs	r0, #100	; 0x64
 800b4e8:	f000 f893 	bl	800b612 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b4ec:	e78a      	b.n	800b404 <ethernet_link_thread+0x18>
 800b4ee:	bf00      	nop
 800b4f0:	2400a080 	.word	0x2400a080
 800b4f4:	2400a0a0 	.word	0x2400a0a0

0800b4f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b502:	2300      	movs	r3, #0
 800b504:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b50a:	2b84      	cmp	r3, #132	; 0x84
 800b50c:	d005      	beq.n	800b51a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b50e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	4413      	add	r3, r2
 800b516:	3303      	adds	r3, #3
 800b518:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b51a:	68fb      	ldr	r3, [r7, #12]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b52e:	f3ef 8305 	mrs	r3, IPSR
 800b532:	607b      	str	r3, [r7, #4]
  return(result);
 800b534:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b536:	2b00      	cmp	r3, #0
 800b538:	bf14      	ite	ne
 800b53a:	2301      	movne	r3, #1
 800b53c:	2300      	moveq	r3, #0
 800b53e:	b2db      	uxtb	r3, r3
}
 800b540:	4618      	mov	r0, r3
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b550:	f002 fcfc 	bl	800df4c <vTaskStartScheduler>
  
  return osOK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	bd80      	pop	{r7, pc}

0800b55a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b55e:	f7ff ffe3 	bl	800b528 <inHandlerMode>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d003      	beq.n	800b570 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b568:	f002 fe0a 	bl	800e180 <xTaskGetTickCountFromISR>
 800b56c:	4603      	mov	r3, r0
 800b56e:	e002      	b.n	800b576 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b570:	f002 fdf6 	bl	800e160 <xTaskGetTickCount>
 800b574:	4603      	mov	r3, r0
  }
}
 800b576:	4618      	mov	r0, r3
 800b578:	bd80      	pop	{r7, pc}

0800b57a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b57a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b57c:	b089      	sub	sp, #36	; 0x24
 800b57e:	af04      	add	r7, sp, #16
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	695b      	ldr	r3, [r3, #20]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d020      	beq.n	800b5ce <osThreadCreate+0x54>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d01c      	beq.n	800b5ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685c      	ldr	r4, [r3, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681d      	ldr	r5, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	691e      	ldr	r6, [r3, #16]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7ff ffa6 	bl	800b4f8 <makeFreeRtosPriority>
 800b5ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5b6:	9202      	str	r2, [sp, #8]
 800b5b8:	9301      	str	r3, [sp, #4]
 800b5ba:	9100      	str	r1, [sp, #0]
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	4632      	mov	r2, r6
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f002 fafa 	bl	800dbbc <xTaskCreateStatic>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	60fb      	str	r3, [r7, #12]
 800b5cc:	e01c      	b.n	800b608 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685c      	ldr	r4, [r3, #4]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5da:	b29e      	uxth	r6, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7ff ff88 	bl	800b4f8 <makeFreeRtosPriority>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	f107 030c 	add.w	r3, r7, #12
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	9200      	str	r2, [sp, #0]
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	4632      	mov	r2, r6
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f002 fb3c 	bl	800dc76 <xTaskCreate>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b01      	cmp	r3, #1
 800b602:	d001      	beq.n	800b608 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b604:	2300      	movs	r3, #0
 800b606:	e000      	b.n	800b60a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b608:	68fb      	ldr	r3, [r7, #12]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3714      	adds	r7, #20
 800b60e:	46bd      	mov	sp, r7
 800b610:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b612 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d001      	beq.n	800b628 <osDelay+0x16>
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	e000      	b.n	800b62a <osDelay+0x18>
 800b628:	2301      	movs	r3, #1
 800b62a:	4618      	mov	r0, r3
 800b62c:	f002 fc5a 	bl	800dee4 <vTaskDelay>
  
  return osOK;
 800b630:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b632:	4618      	mov	r0, r3
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b082      	sub	sp, #8
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d007      	beq.n	800b65a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	4619      	mov	r1, r3
 800b650:	2001      	movs	r0, #1
 800b652:	f001 f8aa 	bl	800c7aa <xQueueCreateMutexStatic>
 800b656:	4603      	mov	r3, r0
 800b658:	e003      	b.n	800b662 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b65a:	2001      	movs	r0, #1
 800b65c:	f001 f88d 	bl	800c77a <xQueueCreateMutex>
 800b660:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b662:	4618      	mov	r0, r3
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b676:	2300      	movs	r3, #0
 800b678:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d101      	bne.n	800b684 <osMutexWait+0x18>
    return osErrorParameter;
 800b680:	2380      	movs	r3, #128	; 0x80
 800b682:	e03a      	b.n	800b6fa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b68e:	d103      	bne.n	800b698 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b694:	60fb      	str	r3, [r7, #12]
 800b696:	e009      	b.n	800b6ac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d006      	beq.n	800b6ac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <osMutexWait+0x40>
      ticks = 1;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b6ac:	f7ff ff3c 	bl	800b528 <inHandlerMode>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d017      	beq.n	800b6e6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b6b6:	f107 0308 	add.w	r3, r7, #8
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	2100      	movs	r1, #0
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f001 fc9e 	bl	800d000 <xQueueReceiveFromISR>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d001      	beq.n	800b6ce <osMutexWait+0x62>
      return osErrorOS;
 800b6ca:	23ff      	movs	r3, #255	; 0xff
 800b6cc:	e015      	b.n	800b6fa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d011      	beq.n	800b6f8 <osMutexWait+0x8c>
 800b6d4:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <osMutexWait+0x98>)
 800b6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6da:	601a      	str	r2, [r3, #0]
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	f3bf 8f6f 	isb	sy
 800b6e4:	e008      	b.n	800b6f8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b6e6:	68f9      	ldr	r1, [r7, #12]
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f001 fb7d 	bl	800cde8 <xQueueSemaphoreTake>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d001      	beq.n	800b6f8 <osMutexWait+0x8c>
    return osErrorOS;
 800b6f4:	23ff      	movs	r3, #255	; 0xff
 800b6f6:	e000      	b.n	800b6fa <osMutexWait+0x8e>
  }
  
  return osOK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	e000ed04 	.word	0xe000ed04

0800b708 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b710:	2300      	movs	r3, #0
 800b712:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b714:	2300      	movs	r3, #0
 800b716:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b718:	f7ff ff06 	bl	800b528 <inHandlerMode>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d016      	beq.n	800b750 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b722:	f107 0308 	add.w	r3, r7, #8
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f001 f9ef 	bl	800cb0c <xQueueGiveFromISR>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b01      	cmp	r3, #1
 800b732:	d001      	beq.n	800b738 <osMutexRelease+0x30>
      return osErrorOS;
 800b734:	23ff      	movs	r3, #255	; 0xff
 800b736:	e017      	b.n	800b768 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d013      	beq.n	800b766 <osMutexRelease+0x5e>
 800b73e:	4b0c      	ldr	r3, [pc, #48]	; (800b770 <osMutexRelease+0x68>)
 800b740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b744:	601a      	str	r2, [r3, #0]
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	e00a      	b.n	800b766 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b750:	2300      	movs	r3, #0
 800b752:	2200      	movs	r2, #0
 800b754:	2100      	movs	r1, #0
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f001 f842 	bl	800c7e0 <xQueueGenericSend>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d001      	beq.n	800b766 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b762:	23ff      	movs	r3, #255	; 0xff
 800b764:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b766:	68fb      	ldr	r3, [r7, #12]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	e000ed04 	.word	0xe000ed04

0800b774 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af02      	add	r7, sp, #8
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00f      	beq.n	800b7a6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d10a      	bne.n	800b7a2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	2203      	movs	r2, #3
 800b792:	9200      	str	r2, [sp, #0]
 800b794:	2200      	movs	r2, #0
 800b796:	2100      	movs	r1, #0
 800b798:	2001      	movs	r0, #1
 800b79a:	f000 fefd 	bl	800c598 <xQueueGenericCreateStatic>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	e016      	b.n	800b7d0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	e014      	b.n	800b7d0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d110      	bne.n	800b7ce <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b7ac:	2203      	movs	r2, #3
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	2001      	movs	r0, #1
 800b7b2:	f000 ff69 	bl	800c688 <xQueueGenericCreate>
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d005      	beq.n	800b7ca <osSemaphoreCreate+0x56>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f001 f80b 	bl	800c7e0 <xQueueGenericSend>
      return sema;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	e000      	b.n	800b7d0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b7ce:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b7ec:	2380      	movs	r3, #128	; 0x80
 800b7ee:	e03a      	b.n	800b866 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7fa:	d103      	bne.n	800b804 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b7fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b800:	60fb      	str	r3, [r7, #12]
 800b802:	e009      	b.n	800b818 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d006      	beq.n	800b818 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d101      	bne.n	800b818 <osSemaphoreWait+0x40>
      ticks = 1;
 800b814:	2301      	movs	r3, #1
 800b816:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b818:	f7ff fe86 	bl	800b528 <inHandlerMode>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d017      	beq.n	800b852 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b822:	f107 0308 	add.w	r3, r7, #8
 800b826:	461a      	mov	r2, r3
 800b828:	2100      	movs	r1, #0
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f001 fbe8 	bl	800d000 <xQueueReceiveFromISR>
 800b830:	4603      	mov	r3, r0
 800b832:	2b01      	cmp	r3, #1
 800b834:	d001      	beq.n	800b83a <osSemaphoreWait+0x62>
      return osErrorOS;
 800b836:	23ff      	movs	r3, #255	; 0xff
 800b838:	e015      	b.n	800b866 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d011      	beq.n	800b864 <osSemaphoreWait+0x8c>
 800b840:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <osSemaphoreWait+0x98>)
 800b842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	e008      	b.n	800b864 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b852:	68f9      	ldr	r1, [r7, #12]
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f001 fac7 	bl	800cde8 <xQueueSemaphoreTake>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d001      	beq.n	800b864 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b860:	23ff      	movs	r3, #255	; 0xff
 800b862:	e000      	b.n	800b866 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	e000ed04 	.word	0xe000ed04

0800b874 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b880:	2300      	movs	r3, #0
 800b882:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b884:	f7ff fe50 	bl	800b528 <inHandlerMode>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d016      	beq.n	800b8bc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b88e:	f107 0308 	add.w	r3, r7, #8
 800b892:	4619      	mov	r1, r3
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f001 f939 	bl	800cb0c <xQueueGiveFromISR>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d001      	beq.n	800b8a4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b8a0:	23ff      	movs	r3, #255	; 0xff
 800b8a2:	e017      	b.n	800b8d4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d013      	beq.n	800b8d2 <osSemaphoreRelease+0x5e>
 800b8aa:	4b0c      	ldr	r3, [pc, #48]	; (800b8dc <osSemaphoreRelease+0x68>)
 800b8ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	e00a      	b.n	800b8d2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b8bc:	2300      	movs	r3, #0
 800b8be:	2200      	movs	r2, #0
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 ff8c 	bl	800c7e0 <xQueueGenericSend>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d001      	beq.n	800b8d2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b8ce:	23ff      	movs	r3, #255	; 0xff
 800b8d0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	e000ed04 	.word	0xe000ed04

0800b8e0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b8e8:	f7ff fe1e 	bl	800b528 <inHandlerMode>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d001      	beq.n	800b8f6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b8f2:	2382      	movs	r3, #130	; 0x82
 800b8f4:	e003      	b.n	800b8fe <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f001 fc3e 	bl	800d178 <vQueueDelete>

  return osOK; 
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3708      	adds	r7, #8
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b906:	b590      	push	{r4, r7, lr}
 800b908:	b085      	sub	sp, #20
 800b90a:	af02      	add	r7, sp, #8
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d011      	beq.n	800b93c <osMessageCreate+0x36>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00d      	beq.n	800b93c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6818      	ldr	r0, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6859      	ldr	r1, [r3, #4]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	689a      	ldr	r2, [r3, #8]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	2400      	movs	r4, #0
 800b932:	9400      	str	r4, [sp, #0]
 800b934:	f000 fe30 	bl	800c598 <xQueueGenericCreateStatic>
 800b938:	4603      	mov	r3, r0
 800b93a:	e008      	b.n	800b94e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6818      	ldr	r0, [r3, #0]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	4619      	mov	r1, r3
 800b948:	f000 fe9e 	bl	800c688 <xQueueGenericCreate>
 800b94c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b94e:	4618      	mov	r0, r3
 800b950:	370c      	adds	r7, #12
 800b952:	46bd      	mov	sp, r7
 800b954:	bd90      	pop	{r4, r7, pc}
	...

0800b958 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b964:	2300      	movs	r3, #0
 800b966:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <osMessagePut+0x1e>
    ticks = 1;
 800b972:	2301      	movs	r3, #1
 800b974:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b976:	f7ff fdd7 	bl	800b528 <inHandlerMode>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d018      	beq.n	800b9b2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b980:	f107 0210 	add.w	r2, r7, #16
 800b984:	f107 0108 	add.w	r1, r7, #8
 800b988:	2300      	movs	r3, #0
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f001 f826 	bl	800c9dc <xQueueGenericSendFromISR>
 800b990:	4603      	mov	r3, r0
 800b992:	2b01      	cmp	r3, #1
 800b994:	d001      	beq.n	800b99a <osMessagePut+0x42>
      return osErrorOS;
 800b996:	23ff      	movs	r3, #255	; 0xff
 800b998:	e018      	b.n	800b9cc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d014      	beq.n	800b9ca <osMessagePut+0x72>
 800b9a0:	4b0c      	ldr	r3, [pc, #48]	; (800b9d4 <osMessagePut+0x7c>)
 800b9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	e00b      	b.n	800b9ca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b9b2:	f107 0108 	add.w	r1, r7, #8
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	697a      	ldr	r2, [r7, #20]
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f000 ff10 	bl	800c7e0 <xQueueGenericSend>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d001      	beq.n	800b9ca <osMessagePut+0x72>
      return osErrorOS;
 800b9c6:	23ff      	movs	r3, #255	; 0xff
 800b9c8:	e000      	b.n	800b9cc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3718      	adds	r7, #24
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	e000ed04 	.word	0xe000ed04

0800b9d8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b9d8:	b590      	push	{r4, r7, lr}
 800b9da:	b08b      	sub	sp, #44	; 0x2c
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10a      	bne.n	800ba08 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b9f2:	2380      	movs	r3, #128	; 0x80
 800b9f4:	617b      	str	r3, [r7, #20]
    return event;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	461c      	mov	r4, r3
 800b9fa:	f107 0314 	add.w	r3, r7, #20
 800b9fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ba06:	e054      	b.n	800bab2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba16:	d103      	bne.n	800ba20 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ba18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba1c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba1e:	e009      	b.n	800ba34 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d006      	beq.n	800ba34 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d101      	bne.n	800ba34 <osMessageGet+0x5c>
      ticks = 1;
 800ba30:	2301      	movs	r3, #1
 800ba32:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ba34:	f7ff fd78 	bl	800b528 <inHandlerMode>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d01c      	beq.n	800ba78 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ba3e:	f107 0220 	add.w	r2, r7, #32
 800ba42:	f107 0314 	add.w	r3, r7, #20
 800ba46:	3304      	adds	r3, #4
 800ba48:	4619      	mov	r1, r3
 800ba4a:	68b8      	ldr	r0, [r7, #8]
 800ba4c:	f001 fad8 	bl	800d000 <xQueueReceiveFromISR>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d102      	bne.n	800ba5c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ba56:	2310      	movs	r3, #16
 800ba58:	617b      	str	r3, [r7, #20]
 800ba5a:	e001      	b.n	800ba60 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ba60:	6a3b      	ldr	r3, [r7, #32]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d01d      	beq.n	800baa2 <osMessageGet+0xca>
 800ba66:	4b15      	ldr	r3, [pc, #84]	; (800babc <osMessageGet+0xe4>)
 800ba68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba6c:	601a      	str	r2, [r3, #0]
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	e014      	b.n	800baa2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ba78:	f107 0314 	add.w	r3, r7, #20
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba80:	4619      	mov	r1, r3
 800ba82:	68b8      	ldr	r0, [r7, #8]
 800ba84:	f001 f8d0 	bl	800cc28 <xQueueReceive>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d102      	bne.n	800ba94 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ba8e:	2310      	movs	r3, #16
 800ba90:	617b      	str	r3, [r7, #20]
 800ba92:	e006      	b.n	800baa2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d101      	bne.n	800ba9e <osMessageGet+0xc6>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	e000      	b.n	800baa0 <osMessageGet+0xc8>
 800ba9e:	2340      	movs	r3, #64	; 0x40
 800baa0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	461c      	mov	r4, r3
 800baa6:	f107 0314 	add.w	r3, r7, #20
 800baaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800baae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	372c      	adds	r7, #44	; 0x2c
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd90      	pop	{r4, r7, pc}
 800baba:	bf00      	nop
 800babc:	e000ed04 	.word	0xe000ed04

0800bac0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800bac8:	f7ff fd2e 	bl	800b528 <inHandlerMode>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d004      	beq.n	800badc <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f001 fb32 	bl	800d13c <uxQueueMessagesWaitingFromISR>
 800bad8:	4603      	mov	r3, r0
 800bada:	e003      	b.n	800bae4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f001 fb0f 	bl	800d100 <uxQueueMessagesWaiting>
 800bae2:	4603      	mov	r3, r0
  }
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800baf4:	f7ff fd18 	bl	800b528 <inHandlerMode>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d001      	beq.n	800bb02 <osMessageDelete+0x16>
    return osErrorISR;
 800bafe:	2382      	movs	r3, #130	; 0x82
 800bb00:	e003      	b.n	800bb0a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f001 fb38 	bl	800d178 <vQueueDelete>

  return osOK; 
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
	...

0800bb14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b08a      	sub	sp, #40	; 0x28
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bb20:	f002 fa74 	bl	800e00c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bb24:	4b58      	ldr	r3, [pc, #352]	; (800bc88 <pvPortMalloc+0x174>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d101      	bne.n	800bb30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb2c:	f000 f910 	bl	800bd50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb30:	4b56      	ldr	r3, [pc, #344]	; (800bc8c <pvPortMalloc+0x178>)
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4013      	ands	r3, r2
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f040 808e 	bne.w	800bc5a <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d01d      	beq.n	800bb80 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bb44:	2208      	movs	r2, #8
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	4413      	add	r3, r2
 800bb4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f003 0307 	and.w	r3, r3, #7
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d014      	beq.n	800bb80 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f023 0307 	bic.w	r3, r3, #7
 800bb5c:	3308      	adds	r3, #8
 800bb5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f003 0307 	and.w	r3, r3, #7
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00a      	beq.n	800bb80 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bb7c:	bf00      	nop
 800bb7e:	e7fe      	b.n	800bb7e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d069      	beq.n	800bc5a <pvPortMalloc+0x146>
 800bb86:	4b42      	ldr	r3, [pc, #264]	; (800bc90 <pvPortMalloc+0x17c>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d864      	bhi.n	800bc5a <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb90:	4b40      	ldr	r3, [pc, #256]	; (800bc94 <pvPortMalloc+0x180>)
 800bb92:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb94:	4b3f      	ldr	r3, [pc, #252]	; (800bc94 <pvPortMalloc+0x180>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb9a:	e004      	b.n	800bba6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d903      	bls.n	800bbb8 <pvPortMalloc+0xa4>
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1f1      	bne.n	800bb9c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bbb8:	4b33      	ldr	r3, [pc, #204]	; (800bc88 <pvPortMalloc+0x174>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d04b      	beq.n	800bc5a <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bbc2:	6a3b      	ldr	r3, [r7, #32]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2208      	movs	r2, #8
 800bbc8:	4413      	add	r3, r2
 800bbca:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	6a3b      	ldr	r3, [r7, #32]
 800bbd2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	685a      	ldr	r2, [r3, #4]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	1ad2      	subs	r2, r2, r3
 800bbdc:	2308      	movs	r3, #8
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d91f      	bls.n	800bc24 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bbe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4413      	add	r3, r2
 800bbea:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	f003 0307 	and.w	r3, r3, #7
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00a      	beq.n	800bc0c <pvPortMalloc+0xf8>
	__asm volatile
 800bbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	613b      	str	r3, [r7, #16]
}
 800bc08:	bf00      	nop
 800bc0a:	e7fe      	b.n	800bc0a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0e:	685a      	ldr	r2, [r3, #4]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	1ad2      	subs	r2, r2, r3
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bc1e:	69b8      	ldr	r0, [r7, #24]
 800bc20:	f000 f8f8 	bl	800be14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc24:	4b1a      	ldr	r3, [pc, #104]	; (800bc90 <pvPortMalloc+0x17c>)
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	4a18      	ldr	r2, [pc, #96]	; (800bc90 <pvPortMalloc+0x17c>)
 800bc30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc32:	4b17      	ldr	r3, [pc, #92]	; (800bc90 <pvPortMalloc+0x17c>)
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	4b18      	ldr	r3, [pc, #96]	; (800bc98 <pvPortMalloc+0x184>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d203      	bcs.n	800bc46 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc3e:	4b14      	ldr	r3, [pc, #80]	; (800bc90 <pvPortMalloc+0x17c>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a15      	ldr	r2, [pc, #84]	; (800bc98 <pvPortMalloc+0x184>)
 800bc44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc48:	685a      	ldr	r2, [r3, #4]
 800bc4a:	4b10      	ldr	r3, [pc, #64]	; (800bc8c <pvPortMalloc+0x178>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	431a      	orrs	r2, r3
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc56:	2200      	movs	r2, #0
 800bc58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc5a:	f002 f9e5 	bl	800e028 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	f003 0307 	and.w	r3, r3, #7
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00a      	beq.n	800bc7e <pvPortMalloc+0x16a>
	__asm volatile
 800bc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6c:	f383 8811 	msr	BASEPRI, r3
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	60fb      	str	r3, [r7, #12]
}
 800bc7a:	bf00      	nop
 800bc7c:	e7fe      	b.n	800bc7c <pvPortMalloc+0x168>
	return pvReturn;
 800bc7e:	69fb      	ldr	r3, [r7, #28]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3728      	adds	r7, #40	; 0x28
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	24004690 	.word	0x24004690
 800bc8c:	2400469c 	.word	0x2400469c
 800bc90:	24004694 	.word	0x24004694
 800bc94:	24004688 	.word	0x24004688
 800bc98:	24004698 	.word	0x24004698

0800bc9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d048      	beq.n	800bd40 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bcae:	2308      	movs	r3, #8
 800bcb0:	425b      	negs	r3, r3
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	4b21      	ldr	r3, [pc, #132]	; (800bd48 <vPortFree+0xac>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d10a      	bne.n	800bce0 <vPortFree+0x44>
	__asm volatile
 800bcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	60fb      	str	r3, [r7, #12]
}
 800bcdc:	bf00      	nop
 800bcde:	e7fe      	b.n	800bcde <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00a      	beq.n	800bcfe <vPortFree+0x62>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	60bb      	str	r3, [r7, #8]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	4b11      	ldr	r3, [pc, #68]	; (800bd48 <vPortFree+0xac>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4013      	ands	r3, r2
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d019      	beq.n	800bd40 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d115      	bne.n	800bd40 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	685a      	ldr	r2, [r3, #4]
 800bd18:	4b0b      	ldr	r3, [pc, #44]	; (800bd48 <vPortFree+0xac>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	43db      	mvns	r3, r3
 800bd1e:	401a      	ands	r2, r3
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd24:	f002 f972 	bl	800e00c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	685a      	ldr	r2, [r3, #4]
 800bd2c:	4b07      	ldr	r3, [pc, #28]	; (800bd4c <vPortFree+0xb0>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4413      	add	r3, r2
 800bd32:	4a06      	ldr	r2, [pc, #24]	; (800bd4c <vPortFree+0xb0>)
 800bd34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd36:	6938      	ldr	r0, [r7, #16]
 800bd38:	f000 f86c 	bl	800be14 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bd3c:	f002 f974 	bl	800e028 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd40:	bf00      	nop
 800bd42:	3718      	adds	r7, #24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	2400469c 	.word	0x2400469c
 800bd4c:	24004694 	.word	0x24004694

0800bd50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd56:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bd5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd5c:	4b27      	ldr	r3, [pc, #156]	; (800bdfc <prvHeapInit+0xac>)
 800bd5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f003 0307 	and.w	r3, r3, #7
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00c      	beq.n	800bd84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3307      	adds	r3, #7
 800bd6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f023 0307 	bic.w	r3, r3, #7
 800bd76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd78:	68ba      	ldr	r2, [r7, #8]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	4a1f      	ldr	r2, [pc, #124]	; (800bdfc <prvHeapInit+0xac>)
 800bd80:	4413      	add	r3, r2
 800bd82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd88:	4a1d      	ldr	r2, [pc, #116]	; (800be00 <prvHeapInit+0xb0>)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd8e:	4b1c      	ldr	r3, [pc, #112]	; (800be00 <prvHeapInit+0xb0>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	4413      	add	r3, r2
 800bd9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd9c:	2208      	movs	r2, #8
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	1a9b      	subs	r3, r3, r2
 800bda2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f023 0307 	bic.w	r3, r3, #7
 800bdaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	4a15      	ldr	r2, [pc, #84]	; (800be04 <prvHeapInit+0xb4>)
 800bdb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bdb2:	4b14      	ldr	r3, [pc, #80]	; (800be04 <prvHeapInit+0xb4>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bdba:	4b12      	ldr	r3, [pc, #72]	; (800be04 <prvHeapInit+0xb4>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	1ad2      	subs	r2, r2, r3
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bdd0:	4b0c      	ldr	r3, [pc, #48]	; (800be04 <prvHeapInit+0xb4>)
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	4a0a      	ldr	r2, [pc, #40]	; (800be08 <prvHeapInit+0xb8>)
 800bdde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	4a09      	ldr	r2, [pc, #36]	; (800be0c <prvHeapInit+0xbc>)
 800bde6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bde8:	4b09      	ldr	r3, [pc, #36]	; (800be10 <prvHeapInit+0xc0>)
 800bdea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bdee:	601a      	str	r2, [r3, #0]
}
 800bdf0:	bf00      	nop
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	24000a88 	.word	0x24000a88
 800be00:	24004688 	.word	0x24004688
 800be04:	24004690 	.word	0x24004690
 800be08:	24004698 	.word	0x24004698
 800be0c:	24004694 	.word	0x24004694
 800be10:	2400469c 	.word	0x2400469c

0800be14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be1c:	4b28      	ldr	r3, [pc, #160]	; (800bec0 <prvInsertBlockIntoFreeList+0xac>)
 800be1e:	60fb      	str	r3, [r7, #12]
 800be20:	e002      	b.n	800be28 <prvInsertBlockIntoFreeList+0x14>
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	60fb      	str	r3, [r7, #12]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d8f7      	bhi.n	800be22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	4413      	add	r3, r2
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	429a      	cmp	r2, r3
 800be42:	d108      	bne.n	800be56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	441a      	add	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	441a      	add	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	429a      	cmp	r2, r3
 800be68:	d118      	bne.n	800be9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	4b15      	ldr	r3, [pc, #84]	; (800bec4 <prvInsertBlockIntoFreeList+0xb0>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	429a      	cmp	r2, r3
 800be74:	d00d      	beq.n	800be92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	441a      	add	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	601a      	str	r2, [r3, #0]
 800be90:	e008      	b.n	800bea4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be92:	4b0c      	ldr	r3, [pc, #48]	; (800bec4 <prvInsertBlockIntoFreeList+0xb0>)
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	e003      	b.n	800bea4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d002      	beq.n	800beb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800beb2:	bf00      	nop
 800beb4:	3714      	adds	r7, #20
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	24004688 	.word	0x24004688
 800bec4:	24004690 	.word	0x24004690

0800bec8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f103 0208 	add.w	r2, r3, #8
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bee0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f103 0208 	add.w	r2, r3, #8
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f103 0208 	add.w	r2, r3, #8
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf16:	bf00      	nop
 800bf18:	370c      	adds	r7, #12
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr

0800bf22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf22:	b480      	push	{r7}
 800bf24:	b085      	sub	sp, #20
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
 800bf2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	689a      	ldr	r2, [r3, #8]
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	683a      	ldr	r2, [r7, #0]
 800bf4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	1c5a      	adds	r2, r3, #1
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	601a      	str	r2, [r3, #0]
}
 800bf5e:	bf00      	nop
 800bf60:	3714      	adds	r7, #20
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr

0800bf6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf6a:	b480      	push	{r7}
 800bf6c:	b085      	sub	sp, #20
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
 800bf72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf80:	d103      	bne.n	800bf8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	60fb      	str	r3, [r7, #12]
 800bf88:	e00c      	b.n	800bfa4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	3308      	adds	r3, #8
 800bf8e:	60fb      	str	r3, [r7, #12]
 800bf90:	e002      	b.n	800bf98 <vListInsert+0x2e>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d2f6      	bcs.n	800bf92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	685a      	ldr	r2, [r3, #4]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	683a      	ldr	r2, [r7, #0]
 800bfb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	601a      	str	r2, [r3, #0]
}
 800bfd0:	bf00      	nop
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	6892      	ldr	r2, [r2, #8]
 800bff2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	6852      	ldr	r2, [r2, #4]
 800bffc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	429a      	cmp	r2, r3
 800c006:	d103      	bne.n	800c010 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	689a      	ldr	r2, [r3, #8]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	1e5a      	subs	r2, r3, #1
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3714      	adds	r7, #20
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	3b04      	subs	r3, #4
 800c040:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	3b04      	subs	r3, #4
 800c04e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	f023 0201 	bic.w	r2, r3, #1
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	3b04      	subs	r3, #4
 800c05e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c060:	4a0c      	ldr	r2, [pc, #48]	; (800c094 <pxPortInitialiseStack+0x64>)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	3b14      	subs	r3, #20
 800c06a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	3b04      	subs	r3, #4
 800c076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f06f 0202 	mvn.w	r2, #2
 800c07e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3b20      	subs	r3, #32
 800c084:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c086:	68fb      	ldr	r3, [r7, #12]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3714      	adds	r7, #20
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr
 800c094:	0800c099 	.word	0x0800c099

0800c098 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0a2:	4b12      	ldr	r3, [pc, #72]	; (800c0ec <prvTaskExitError+0x54>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0aa:	d00a      	beq.n	800c0c2 <prvTaskExitError+0x2a>
	__asm volatile
 800c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	60fb      	str	r3, [r7, #12]
}
 800c0be:	bf00      	nop
 800c0c0:	e7fe      	b.n	800c0c0 <prvTaskExitError+0x28>
	__asm volatile
 800c0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c6:	f383 8811 	msr	BASEPRI, r3
 800c0ca:	f3bf 8f6f 	isb	sy
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	60bb      	str	r3, [r7, #8]
}
 800c0d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c0d6:	bf00      	nop
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d0fc      	beq.n	800c0d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c0de:	bf00      	nop
 800c0e0:	bf00      	nop
 800c0e2:	3714      	adds	r7, #20
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr
 800c0ec:	24000024 	.word	0x24000024

0800c0f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c0f0:	4b07      	ldr	r3, [pc, #28]	; (800c110 <pxCurrentTCBConst2>)
 800c0f2:	6819      	ldr	r1, [r3, #0]
 800c0f4:	6808      	ldr	r0, [r1, #0]
 800c0f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fa:	f380 8809 	msr	PSP, r0
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f04f 0000 	mov.w	r0, #0
 800c106:	f380 8811 	msr	BASEPRI, r0
 800c10a:	4770      	bx	lr
 800c10c:	f3af 8000 	nop.w

0800c110 <pxCurrentTCBConst2>:
 800c110:	240046a8 	.word	0x240046a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop

0800c118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c118:	4808      	ldr	r0, [pc, #32]	; (800c13c <prvPortStartFirstTask+0x24>)
 800c11a:	6800      	ldr	r0, [r0, #0]
 800c11c:	6800      	ldr	r0, [r0, #0]
 800c11e:	f380 8808 	msr	MSP, r0
 800c122:	f04f 0000 	mov.w	r0, #0
 800c126:	f380 8814 	msr	CONTROL, r0
 800c12a:	b662      	cpsie	i
 800c12c:	b661      	cpsie	f
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	df00      	svc	0
 800c138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c13a:	bf00      	nop
 800c13c:	e000ed08 	.word	0xe000ed08

0800c140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c146:	4b46      	ldr	r3, [pc, #280]	; (800c260 <xPortStartScheduler+0x120>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a46      	ldr	r2, [pc, #280]	; (800c264 <xPortStartScheduler+0x124>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d10a      	bne.n	800c166 <xPortStartScheduler+0x26>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	613b      	str	r3, [r7, #16]
}
 800c162:	bf00      	nop
 800c164:	e7fe      	b.n	800c164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c166:	4b3e      	ldr	r3, [pc, #248]	; (800c260 <xPortStartScheduler+0x120>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a3f      	ldr	r2, [pc, #252]	; (800c268 <xPortStartScheduler+0x128>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d10a      	bne.n	800c186 <xPortStartScheduler+0x46>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	60fb      	str	r3, [r7, #12]
}
 800c182:	bf00      	nop
 800c184:	e7fe      	b.n	800c184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c186:	4b39      	ldr	r3, [pc, #228]	; (800c26c <xPortStartScheduler+0x12c>)
 800c188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	22ff      	movs	r2, #255	; 0xff
 800c196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	4b31      	ldr	r3, [pc, #196]	; (800c270 <xPortStartScheduler+0x130>)
 800c1ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1ae:	4b31      	ldr	r3, [pc, #196]	; (800c274 <xPortStartScheduler+0x134>)
 800c1b0:	2207      	movs	r2, #7
 800c1b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1b4:	e009      	b.n	800c1ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c1b6:	4b2f      	ldr	r3, [pc, #188]	; (800c274 <xPortStartScheduler+0x134>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	4a2d      	ldr	r2, [pc, #180]	; (800c274 <xPortStartScheduler+0x134>)
 800c1be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1c0:	78fb      	ldrb	r3, [r7, #3]
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	005b      	lsls	r3, r3, #1
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1ca:	78fb      	ldrb	r3, [r7, #3]
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d2:	2b80      	cmp	r3, #128	; 0x80
 800c1d4:	d0ef      	beq.n	800c1b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1d6:	4b27      	ldr	r3, [pc, #156]	; (800c274 <xPortStartScheduler+0x134>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f1c3 0307 	rsb	r3, r3, #7
 800c1de:	2b04      	cmp	r3, #4
 800c1e0:	d00a      	beq.n	800c1f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e6:	f383 8811 	msr	BASEPRI, r3
 800c1ea:	f3bf 8f6f 	isb	sy
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	60bb      	str	r3, [r7, #8]
}
 800c1f4:	bf00      	nop
 800c1f6:	e7fe      	b.n	800c1f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c1f8:	4b1e      	ldr	r3, [pc, #120]	; (800c274 <xPortStartScheduler+0x134>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	021b      	lsls	r3, r3, #8
 800c1fe:	4a1d      	ldr	r2, [pc, #116]	; (800c274 <xPortStartScheduler+0x134>)
 800c200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c202:	4b1c      	ldr	r3, [pc, #112]	; (800c274 <xPortStartScheduler+0x134>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c20a:	4a1a      	ldr	r2, [pc, #104]	; (800c274 <xPortStartScheduler+0x134>)
 800c20c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	b2da      	uxtb	r2, r3
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c216:	4b18      	ldr	r3, [pc, #96]	; (800c278 <xPortStartScheduler+0x138>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a17      	ldr	r2, [pc, #92]	; (800c278 <xPortStartScheduler+0x138>)
 800c21c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c222:	4b15      	ldr	r3, [pc, #84]	; (800c278 <xPortStartScheduler+0x138>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a14      	ldr	r2, [pc, #80]	; (800c278 <xPortStartScheduler+0x138>)
 800c228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c22c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c22e:	f000 f8dd 	bl	800c3ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c232:	4b12      	ldr	r3, [pc, #72]	; (800c27c <xPortStartScheduler+0x13c>)
 800c234:	2200      	movs	r2, #0
 800c236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c238:	f000 f8fc 	bl	800c434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c23c:	4b10      	ldr	r3, [pc, #64]	; (800c280 <xPortStartScheduler+0x140>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a0f      	ldr	r2, [pc, #60]	; (800c280 <xPortStartScheduler+0x140>)
 800c242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c248:	f7ff ff66 	bl	800c118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c24c:	f002 f862 	bl	800e314 <vTaskSwitchContext>
	prvTaskExitError();
 800c250:	f7ff ff22 	bl	800c098 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	e000ed00 	.word	0xe000ed00
 800c264:	410fc271 	.word	0x410fc271
 800c268:	410fc270 	.word	0x410fc270
 800c26c:	e000e400 	.word	0xe000e400
 800c270:	240046a0 	.word	0x240046a0
 800c274:	240046a4 	.word	0x240046a4
 800c278:	e000ed20 	.word	0xe000ed20
 800c27c:	24000024 	.word	0x24000024
 800c280:	e000ef34 	.word	0xe000ef34

0800c284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
	__asm volatile
 800c28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28e:	f383 8811 	msr	BASEPRI, r3
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	607b      	str	r3, [r7, #4]
}
 800c29c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c29e:	4b0f      	ldr	r3, [pc, #60]	; (800c2dc <vPortEnterCritical+0x58>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	4a0d      	ldr	r2, [pc, #52]	; (800c2dc <vPortEnterCritical+0x58>)
 800c2a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2a8:	4b0c      	ldr	r3, [pc, #48]	; (800c2dc <vPortEnterCritical+0x58>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d10f      	bne.n	800c2d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2b0:	4b0b      	ldr	r3, [pc, #44]	; (800c2e0 <vPortEnterCritical+0x5c>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00a      	beq.n	800c2d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	603b      	str	r3, [r7, #0]
}
 800c2cc:	bf00      	nop
 800c2ce:	e7fe      	b.n	800c2ce <vPortEnterCritical+0x4a>
	}
}
 800c2d0:	bf00      	nop
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr
 800c2dc:	24000024 	.word	0x24000024
 800c2e0:	e000ed04 	.word	0xe000ed04

0800c2e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c2ea:	4b12      	ldr	r3, [pc, #72]	; (800c334 <vPortExitCritical+0x50>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d10a      	bne.n	800c308 <vPortExitCritical+0x24>
	__asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	607b      	str	r3, [r7, #4]
}
 800c304:	bf00      	nop
 800c306:	e7fe      	b.n	800c306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c308:	4b0a      	ldr	r3, [pc, #40]	; (800c334 <vPortExitCritical+0x50>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	3b01      	subs	r3, #1
 800c30e:	4a09      	ldr	r2, [pc, #36]	; (800c334 <vPortExitCritical+0x50>)
 800c310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c312:	4b08      	ldr	r3, [pc, #32]	; (800c334 <vPortExitCritical+0x50>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d105      	bne.n	800c326 <vPortExitCritical+0x42>
 800c31a:	2300      	movs	r3, #0
 800c31c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c326:	bf00      	nop
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	24000024 	.word	0x24000024
	...

0800c340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c340:	f3ef 8009 	mrs	r0, PSP
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	4b15      	ldr	r3, [pc, #84]	; (800c3a0 <pxCurrentTCBConst>)
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	f01e 0f10 	tst.w	lr, #16
 800c350:	bf08      	it	eq
 800c352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35a:	6010      	str	r0, [r2, #0]
 800c35c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c360:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c364:	f380 8811 	msr	BASEPRI, r0
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	f3bf 8f6f 	isb	sy
 800c370:	f001 ffd0 	bl	800e314 <vTaskSwitchContext>
 800c374:	f04f 0000 	mov.w	r0, #0
 800c378:	f380 8811 	msr	BASEPRI, r0
 800c37c:	bc09      	pop	{r0, r3}
 800c37e:	6819      	ldr	r1, [r3, #0]
 800c380:	6808      	ldr	r0, [r1, #0]
 800c382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c386:	f01e 0f10 	tst.w	lr, #16
 800c38a:	bf08      	it	eq
 800c38c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c390:	f380 8809 	msr	PSP, r0
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	f3af 8000 	nop.w

0800c3a0 <pxCurrentTCBConst>:
 800c3a0:	240046a8 	.word	0x240046a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3a4:	bf00      	nop
 800c3a6:	bf00      	nop

0800c3a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	607b      	str	r3, [r7, #4]
}
 800c3c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3c2:	f001 feef 	bl	800e1a4 <xTaskIncrementTick>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d003      	beq.n	800c3d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3cc:	4b06      	ldr	r3, [pc, #24]	; (800c3e8 <SysTick_Handler+0x40>)
 800c3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3d2:	601a      	str	r2, [r3, #0]
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	f383 8811 	msr	BASEPRI, r3
}
 800c3de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c3e0:	bf00      	nop
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	e000ed04 	.word	0xe000ed04

0800c3ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3f0:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <vPortSetupTimerInterrupt+0x34>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3f6:	4b0b      	ldr	r3, [pc, #44]	; (800c424 <vPortSetupTimerInterrupt+0x38>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3fc:	4b0a      	ldr	r3, [pc, #40]	; (800c428 <vPortSetupTimerInterrupt+0x3c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a0a      	ldr	r2, [pc, #40]	; (800c42c <vPortSetupTimerInterrupt+0x40>)
 800c402:	fba2 2303 	umull	r2, r3, r2, r3
 800c406:	099b      	lsrs	r3, r3, #6
 800c408:	4a09      	ldr	r2, [pc, #36]	; (800c430 <vPortSetupTimerInterrupt+0x44>)
 800c40a:	3b01      	subs	r3, #1
 800c40c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c40e:	4b04      	ldr	r3, [pc, #16]	; (800c420 <vPortSetupTimerInterrupt+0x34>)
 800c410:	2207      	movs	r2, #7
 800c412:	601a      	str	r2, [r3, #0]
}
 800c414:	bf00      	nop
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	e000e010 	.word	0xe000e010
 800c424:	e000e018 	.word	0xe000e018
 800c428:	24000000 	.word	0x24000000
 800c42c:	10624dd3 	.word	0x10624dd3
 800c430:	e000e014 	.word	0xe000e014

0800c434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c444 <vPortEnableVFP+0x10>
 800c438:	6801      	ldr	r1, [r0, #0]
 800c43a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c43e:	6001      	str	r1, [r0, #0]
 800c440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c442:	bf00      	nop
 800c444:	e000ed88 	.word	0xe000ed88

0800c448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c44e:	f3ef 8305 	mrs	r3, IPSR
 800c452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b0f      	cmp	r3, #15
 800c458:	d914      	bls.n	800c484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c45a:	4a17      	ldr	r2, [pc, #92]	; (800c4b8 <vPortValidateInterruptPriority+0x70>)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	4413      	add	r3, r2
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c464:	4b15      	ldr	r3, [pc, #84]	; (800c4bc <vPortValidateInterruptPriority+0x74>)
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	7afa      	ldrb	r2, [r7, #11]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d20a      	bcs.n	800c484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	607b      	str	r3, [r7, #4]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c484:	4b0e      	ldr	r3, [pc, #56]	; (800c4c0 <vPortValidateInterruptPriority+0x78>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c48c:	4b0d      	ldr	r3, [pc, #52]	; (800c4c4 <vPortValidateInterruptPriority+0x7c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	429a      	cmp	r2, r3
 800c492:	d90a      	bls.n	800c4aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	603b      	str	r3, [r7, #0]
}
 800c4a6:	bf00      	nop
 800c4a8:	e7fe      	b.n	800c4a8 <vPortValidateInterruptPriority+0x60>
	}
 800c4aa:	bf00      	nop
 800c4ac:	3714      	adds	r7, #20
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
 800c4b8:	e000e3f0 	.word	0xe000e3f0
 800c4bc:	240046a0 	.word	0x240046a0
 800c4c0:	e000ed0c 	.word	0xe000ed0c
 800c4c4:	240046a4 	.word	0x240046a4

0800c4c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10a      	bne.n	800c4f2 <xQueueGenericReset+0x2a>
	__asm volatile
 800c4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	60bb      	str	r3, [r7, #8]
}
 800c4ee:	bf00      	nop
 800c4f0:	e7fe      	b.n	800c4f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c4f2:	f7ff fec7 	bl	800c284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fe:	68f9      	ldr	r1, [r7, #12]
 800c500:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c502:	fb01 f303 	mul.w	r3, r1, r3
 800c506:	441a      	add	r2, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c522:	3b01      	subs	r3, #1
 800c524:	68f9      	ldr	r1, [r7, #12]
 800c526:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c528:	fb01 f303 	mul.w	r3, r1, r3
 800c52c:	441a      	add	r2, r3
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	22ff      	movs	r2, #255	; 0xff
 800c536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	22ff      	movs	r2, #255	; 0xff
 800c53e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d114      	bne.n	800c572 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d01a      	beq.n	800c586 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	3310      	adds	r3, #16
 800c554:	4618      	mov	r0, r3
 800c556:	f001 ff5d 	bl	800e414 <xTaskRemoveFromEventList>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d012      	beq.n	800c586 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c560:	4b0c      	ldr	r3, [pc, #48]	; (800c594 <xQueueGenericReset+0xcc>)
 800c562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c566:	601a      	str	r2, [r3, #0]
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	e009      	b.n	800c586 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	3310      	adds	r3, #16
 800c576:	4618      	mov	r0, r3
 800c578:	f7ff fca6 	bl	800bec8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	3324      	adds	r3, #36	; 0x24
 800c580:	4618      	mov	r0, r3
 800c582:	f7ff fca1 	bl	800bec8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c586:	f7ff fead 	bl	800c2e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c58a:	2301      	movs	r3, #1
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	e000ed04 	.word	0xe000ed04

0800c598 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b08e      	sub	sp, #56	; 0x38
 800c59c:	af02      	add	r7, sp, #8
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
 800c5a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10a      	bne.n	800c5c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5be:	bf00      	nop
 800c5c0:	e7fe      	b.n	800c5c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d10a      	bne.n	800c5de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5cc:	f383 8811 	msr	BASEPRI, r3
 800c5d0:	f3bf 8f6f 	isb	sy
 800c5d4:	f3bf 8f4f 	dsb	sy
 800c5d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5da:	bf00      	nop
 800c5dc:	e7fe      	b.n	800c5dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d002      	beq.n	800c5ea <xQueueGenericCreateStatic+0x52>
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d001      	beq.n	800c5ee <xQueueGenericCreateStatic+0x56>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e000      	b.n	800c5f0 <xQueueGenericCreateStatic+0x58>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10a      	bne.n	800c60a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	623b      	str	r3, [r7, #32]
}
 800c606:	bf00      	nop
 800c608:	e7fe      	b.n	800c608 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d102      	bne.n	800c616 <xQueueGenericCreateStatic+0x7e>
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d101      	bne.n	800c61a <xQueueGenericCreateStatic+0x82>
 800c616:	2301      	movs	r3, #1
 800c618:	e000      	b.n	800c61c <xQueueGenericCreateStatic+0x84>
 800c61a:	2300      	movs	r3, #0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10a      	bne.n	800c636 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c624:	f383 8811 	msr	BASEPRI, r3
 800c628:	f3bf 8f6f 	isb	sy
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	61fb      	str	r3, [r7, #28]
}
 800c632:	bf00      	nop
 800c634:	e7fe      	b.n	800c634 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c636:	2348      	movs	r3, #72	; 0x48
 800c638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2b48      	cmp	r3, #72	; 0x48
 800c63e:	d00a      	beq.n	800c656 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	61bb      	str	r3, [r7, #24]
}
 800c652:	bf00      	nop
 800c654:	e7fe      	b.n	800c654 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c656:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00d      	beq.n	800c67e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c664:	2201      	movs	r2, #1
 800c666:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c66a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	4613      	mov	r3, r2
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	68b9      	ldr	r1, [r7, #8]
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f000 f845 	bl	800c708 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c680:	4618      	mov	r0, r3
 800c682:	3730      	adds	r7, #48	; 0x30
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b08a      	sub	sp, #40	; 0x28
 800c68c:	af02      	add	r7, sp, #8
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	4613      	mov	r3, r2
 800c694:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d10a      	bne.n	800c6b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a0:	f383 8811 	msr	BASEPRI, r3
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	613b      	str	r3, [r7, #16]
}
 800c6ae:	bf00      	nop
 800c6b0:	e7fe      	b.n	800c6b0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d102      	bne.n	800c6be <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	61fb      	str	r3, [r7, #28]
 800c6bc:	e004      	b.n	800c6c8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	68ba      	ldr	r2, [r7, #8]
 800c6c2:	fb02 f303 	mul.w	r3, r2, r3
 800c6c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	3348      	adds	r3, #72	; 0x48
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7ff fa21 	bl	800bb14 <pvPortMalloc>
 800c6d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d011      	beq.n	800c6fe <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	3348      	adds	r3, #72	; 0x48
 800c6e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c6ec:	79fa      	ldrb	r2, [r7, #7]
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	68b9      	ldr	r1, [r7, #8]
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f000 f805 	bl	800c708 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c6fe:	69bb      	ldr	r3, [r7, #24]
	}
 800c700:	4618      	mov	r0, r3
 800c702:	3720      	adds	r7, #32
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
 800c714:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d103      	bne.n	800c724 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	69ba      	ldr	r2, [r7, #24]
 800c720:	601a      	str	r2, [r3, #0]
 800c722:	e002      	b.n	800c72a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c736:	2101      	movs	r1, #1
 800c738:	69b8      	ldr	r0, [r7, #24]
 800c73a:	f7ff fec5 	bl	800c4c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c73e:	bf00      	nop
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c746:	b580      	push	{r7, lr}
 800c748:	b082      	sub	sp, #8
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00e      	beq.n	800c772 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c766:	2300      	movs	r3, #0
 800c768:	2200      	movs	r2, #0
 800c76a:	2100      	movs	r1, #0
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 f837 	bl	800c7e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c772:	bf00      	nop
 800c774:	3708      	adds	r7, #8
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b086      	sub	sp, #24
 800c77e:	af00      	add	r7, sp, #0
 800c780:	4603      	mov	r3, r0
 800c782:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c784:	2301      	movs	r3, #1
 800c786:	617b      	str	r3, [r7, #20]
 800c788:	2300      	movs	r3, #0
 800c78a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c78c:	79fb      	ldrb	r3, [r7, #7]
 800c78e:	461a      	mov	r2, r3
 800c790:	6939      	ldr	r1, [r7, #16]
 800c792:	6978      	ldr	r0, [r7, #20]
 800c794:	f7ff ff78 	bl	800c688 <xQueueGenericCreate>
 800c798:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f7ff ffd3 	bl	800c746 <prvInitialiseMutex>

		return xNewQueue;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
	}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3718      	adds	r7, #24
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b088      	sub	sp, #32
 800c7ae:	af02      	add	r7, sp, #8
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	6039      	str	r1, [r7, #0]
 800c7b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	617b      	str	r3, [r7, #20]
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c7be:	79fb      	ldrb	r3, [r7, #7]
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	6939      	ldr	r1, [r7, #16]
 800c7c8:	6978      	ldr	r0, [r7, #20]
 800c7ca:	f7ff fee5 	bl	800c598 <xQueueGenericCreateStatic>
 800c7ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	f7ff ffb8 	bl	800c746 <prvInitialiseMutex>

		return xNewQueue;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
	}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3718      	adds	r7, #24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b08e      	sub	sp, #56	; 0x38
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
 800c7ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10a      	bne.n	800c812 <xQueueGenericSend+0x32>
	__asm volatile
 800c7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c80e:	bf00      	nop
 800c810:	e7fe      	b.n	800c810 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d103      	bne.n	800c820 <xQueueGenericSend+0x40>
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d101      	bne.n	800c824 <xQueueGenericSend+0x44>
 800c820:	2301      	movs	r3, #1
 800c822:	e000      	b.n	800c826 <xQueueGenericSend+0x46>
 800c824:	2300      	movs	r3, #0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10a      	bne.n	800c840 <xQueueGenericSend+0x60>
	__asm volatile
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c83c:	bf00      	nop
 800c83e:	e7fe      	b.n	800c83e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	2b02      	cmp	r3, #2
 800c844:	d103      	bne.n	800c84e <xQueueGenericSend+0x6e>
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d101      	bne.n	800c852 <xQueueGenericSend+0x72>
 800c84e:	2301      	movs	r3, #1
 800c850:	e000      	b.n	800c854 <xQueueGenericSend+0x74>
 800c852:	2300      	movs	r3, #0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10a      	bne.n	800c86e <xQueueGenericSend+0x8e>
	__asm volatile
 800c858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	623b      	str	r3, [r7, #32]
}
 800c86a:	bf00      	nop
 800c86c:	e7fe      	b.n	800c86c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c86e:	f001 ffc3 	bl	800e7f8 <xTaskGetSchedulerState>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d102      	bne.n	800c87e <xQueueGenericSend+0x9e>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d101      	bne.n	800c882 <xQueueGenericSend+0xa2>
 800c87e:	2301      	movs	r3, #1
 800c880:	e000      	b.n	800c884 <xQueueGenericSend+0xa4>
 800c882:	2300      	movs	r3, #0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10a      	bne.n	800c89e <xQueueGenericSend+0xbe>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	61fb      	str	r3, [r7, #28]
}
 800c89a:	bf00      	nop
 800c89c:	e7fe      	b.n	800c89c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c89e:	f7ff fcf1 	bl	800c284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d302      	bcc.n	800c8b4 <xQueueGenericSend+0xd4>
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d129      	bne.n	800c908 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8b4:	683a      	ldr	r2, [r7, #0]
 800c8b6:	68b9      	ldr	r1, [r7, #8]
 800c8b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8ba:	f000 fc98 	bl	800d1ee <prvCopyDataToQueue>
 800c8be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d010      	beq.n	800c8ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ca:	3324      	adds	r3, #36	; 0x24
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f001 fda1 	bl	800e414 <xTaskRemoveFromEventList>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d013      	beq.n	800c900 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c8d8:	4b3f      	ldr	r3, [pc, #252]	; (800c9d8 <xQueueGenericSend+0x1f8>)
 800c8da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8de:	601a      	str	r2, [r3, #0]
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	e00a      	b.n	800c900 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d007      	beq.n	800c900 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c8f0:	4b39      	ldr	r3, [pc, #228]	; (800c9d8 <xQueueGenericSend+0x1f8>)
 800c8f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8f6:	601a      	str	r2, [r3, #0]
 800c8f8:	f3bf 8f4f 	dsb	sy
 800c8fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c900:	f7ff fcf0 	bl	800c2e4 <vPortExitCritical>
				return pdPASS;
 800c904:	2301      	movs	r3, #1
 800c906:	e063      	b.n	800c9d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d103      	bne.n	800c916 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c90e:	f7ff fce9 	bl	800c2e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c912:	2300      	movs	r3, #0
 800c914:	e05c      	b.n	800c9d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d106      	bne.n	800c92a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c91c:	f107 0314 	add.w	r3, r7, #20
 800c920:	4618      	mov	r0, r3
 800c922:	f001 fdff 	bl	800e524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c926:	2301      	movs	r3, #1
 800c928:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c92a:	f7ff fcdb 	bl	800c2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c92e:	f001 fb6d 	bl	800e00c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c932:	f7ff fca7 	bl	800c284 <vPortEnterCritical>
 800c936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c938:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c93c:	b25b      	sxtb	r3, r3
 800c93e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c942:	d103      	bne.n	800c94c <xQueueGenericSend+0x16c>
 800c944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c946:	2200      	movs	r2, #0
 800c948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c952:	b25b      	sxtb	r3, r3
 800c954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c958:	d103      	bne.n	800c962 <xQueueGenericSend+0x182>
 800c95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c962:	f7ff fcbf 	bl	800c2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c966:	1d3a      	adds	r2, r7, #4
 800c968:	f107 0314 	add.w	r3, r7, #20
 800c96c:	4611      	mov	r1, r2
 800c96e:	4618      	mov	r0, r3
 800c970:	f001 fdee 	bl	800e550 <xTaskCheckForTimeOut>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d124      	bne.n	800c9c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c97a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c97c:	f000 fd2f 	bl	800d3de <prvIsQueueFull>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d018      	beq.n	800c9b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c988:	3310      	adds	r3, #16
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	4611      	mov	r1, r2
 800c98e:	4618      	mov	r0, r3
 800c990:	f001 fd1c 	bl	800e3cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c996:	f000 fcba 	bl	800d30e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c99a:	f001 fb45 	bl	800e028 <xTaskResumeAll>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f47f af7c 	bne.w	800c89e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c9a6:	4b0c      	ldr	r3, [pc, #48]	; (800c9d8 <xQueueGenericSend+0x1f8>)
 800c9a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ac:	601a      	str	r2, [r3, #0]
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	e772      	b.n	800c89e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c9b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9ba:	f000 fca8 	bl	800d30e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c9be:	f001 fb33 	bl	800e028 <xTaskResumeAll>
 800c9c2:	e76c      	b.n	800c89e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c9c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9c6:	f000 fca2 	bl	800d30e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c9ca:	f001 fb2d 	bl	800e028 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c9ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3738      	adds	r7, #56	; 0x38
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	e000ed04 	.word	0xe000ed04

0800c9dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b08e      	sub	sp, #56	; 0x38
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	607a      	str	r2, [r7, #4]
 800c9e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10a      	bne.n	800ca0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca06:	bf00      	nop
 800ca08:	e7fe      	b.n	800ca08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d103      	bne.n	800ca18 <xQueueGenericSendFromISR+0x3c>
 800ca10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d101      	bne.n	800ca1c <xQueueGenericSendFromISR+0x40>
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e000      	b.n	800ca1e <xQueueGenericSendFromISR+0x42>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d10a      	bne.n	800ca38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ca22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	623b      	str	r3, [r7, #32]
}
 800ca34:	bf00      	nop
 800ca36:	e7fe      	b.n	800ca36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d103      	bne.n	800ca46 <xQueueGenericSendFromISR+0x6a>
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d101      	bne.n	800ca4a <xQueueGenericSendFromISR+0x6e>
 800ca46:	2301      	movs	r3, #1
 800ca48:	e000      	b.n	800ca4c <xQueueGenericSendFromISR+0x70>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10a      	bne.n	800ca66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	61fb      	str	r3, [r7, #28]
}
 800ca62:	bf00      	nop
 800ca64:	e7fe      	b.n	800ca64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca66:	f7ff fcef 	bl	800c448 <vPortValidateInterruptPriority>
	__asm volatile
 800ca6a:	f3ef 8211 	mrs	r2, BASEPRI
 800ca6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca72:	f383 8811 	msr	BASEPRI, r3
 800ca76:	f3bf 8f6f 	isb	sy
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	61ba      	str	r2, [r7, #24]
 800ca80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ca82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d302      	bcc.n	800ca98 <xQueueGenericSendFromISR+0xbc>
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	2b02      	cmp	r3, #2
 800ca96:	d12c      	bne.n	800caf2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ca98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	68b9      	ldr	r1, [r7, #8]
 800caa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800caa8:	f000 fba1 	bl	800d1ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800caac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cab4:	d112      	bne.n	800cadc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d016      	beq.n	800caec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac0:	3324      	adds	r3, #36	; 0x24
 800cac2:	4618      	mov	r0, r3
 800cac4:	f001 fca6 	bl	800e414 <xTaskRemoveFromEventList>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00e      	beq.n	800caec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00b      	beq.n	800caec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2201      	movs	r2, #1
 800cad8:	601a      	str	r2, [r3, #0]
 800cada:	e007      	b.n	800caec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cadc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cae0:	3301      	adds	r3, #1
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	b25a      	sxtb	r2, r3
 800cae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800caec:	2301      	movs	r3, #1
 800caee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800caf0:	e001      	b.n	800caf6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	637b      	str	r3, [r7, #52]	; 0x34
 800caf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	f383 8811 	msr	BASEPRI, r3
}
 800cb00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3738      	adds	r7, #56	; 0x38
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b08e      	sub	sp, #56	; 0x38
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d10a      	bne.n	800cb36 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb24:	f383 8811 	msr	BASEPRI, r3
 800cb28:	f3bf 8f6f 	isb	sy
 800cb2c:	f3bf 8f4f 	dsb	sy
 800cb30:	623b      	str	r3, [r7, #32]
}
 800cb32:	bf00      	nop
 800cb34:	e7fe      	b.n	800cb34 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d00a      	beq.n	800cb54 <xQueueGiveFromISR+0x48>
	__asm volatile
 800cb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	61fb      	str	r3, [r7, #28]
}
 800cb50:	bf00      	nop
 800cb52:	e7fe      	b.n	800cb52 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d103      	bne.n	800cb64 <xQueueGiveFromISR+0x58>
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d101      	bne.n	800cb68 <xQueueGiveFromISR+0x5c>
 800cb64:	2301      	movs	r3, #1
 800cb66:	e000      	b.n	800cb6a <xQueueGiveFromISR+0x5e>
 800cb68:	2300      	movs	r3, #0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10a      	bne.n	800cb84 <xQueueGiveFromISR+0x78>
	__asm volatile
 800cb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	61bb      	str	r3, [r7, #24]
}
 800cb80:	bf00      	nop
 800cb82:	e7fe      	b.n	800cb82 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb84:	f7ff fc60 	bl	800c448 <vPortValidateInterruptPriority>
	__asm volatile
 800cb88:	f3ef 8211 	mrs	r2, BASEPRI
 800cb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb90:	f383 8811 	msr	BASEPRI, r3
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	617a      	str	r2, [r7, #20]
 800cb9e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cba0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cba2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d22b      	bcs.n	800cc0c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc0:	1c5a      	adds	r2, r3, #1
 800cbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cbc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cbca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbce:	d112      	bne.n	800cbf6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d016      	beq.n	800cc06 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbda:	3324      	adds	r3, #36	; 0x24
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f001 fc19 	bl	800e414 <xTaskRemoveFromEventList>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00e      	beq.n	800cc06 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00b      	beq.n	800cc06 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	e007      	b.n	800cc06 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cbf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	b25a      	sxtb	r2, r3
 800cc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cc06:	2301      	movs	r3, #1
 800cc08:	637b      	str	r3, [r7, #52]	; 0x34
 800cc0a:	e001      	b.n	800cc10 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	637b      	str	r3, [r7, #52]	; 0x34
 800cc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc12:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f383 8811 	msr	BASEPRI, r3
}
 800cc1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3738      	adds	r7, #56	; 0x38
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
	...

0800cc28 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08c      	sub	sp, #48	; 0x30
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cc34:	2300      	movs	r3, #0
 800cc36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d10a      	bne.n	800cc58 <xQueueReceive+0x30>
	__asm volatile
 800cc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc46:	f383 8811 	msr	BASEPRI, r3
 800cc4a:	f3bf 8f6f 	isb	sy
 800cc4e:	f3bf 8f4f 	dsb	sy
 800cc52:	623b      	str	r3, [r7, #32]
}
 800cc54:	bf00      	nop
 800cc56:	e7fe      	b.n	800cc56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d103      	bne.n	800cc66 <xQueueReceive+0x3e>
 800cc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d101      	bne.n	800cc6a <xQueueReceive+0x42>
 800cc66:	2301      	movs	r3, #1
 800cc68:	e000      	b.n	800cc6c <xQueueReceive+0x44>
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10a      	bne.n	800cc86 <xQueueReceive+0x5e>
	__asm volatile
 800cc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc74:	f383 8811 	msr	BASEPRI, r3
 800cc78:	f3bf 8f6f 	isb	sy
 800cc7c:	f3bf 8f4f 	dsb	sy
 800cc80:	61fb      	str	r3, [r7, #28]
}
 800cc82:	bf00      	nop
 800cc84:	e7fe      	b.n	800cc84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc86:	f001 fdb7 	bl	800e7f8 <xTaskGetSchedulerState>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d102      	bne.n	800cc96 <xQueueReceive+0x6e>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d101      	bne.n	800cc9a <xQueueReceive+0x72>
 800cc96:	2301      	movs	r3, #1
 800cc98:	e000      	b.n	800cc9c <xQueueReceive+0x74>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10a      	bne.n	800ccb6 <xQueueReceive+0x8e>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	61bb      	str	r3, [r7, #24]
}
 800ccb2:	bf00      	nop
 800ccb4:	e7fe      	b.n	800ccb4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ccb6:	f7ff fae5 	bl	800c284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccbe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d01f      	beq.n	800cd06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ccc6:	68b9      	ldr	r1, [r7, #8]
 800ccc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccca:	f000 fafa 	bl	800d2c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ccce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd0:	1e5a      	subs	r2, r3, #1
 800ccd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00f      	beq.n	800ccfe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce0:	3310      	adds	r3, #16
 800cce2:	4618      	mov	r0, r3
 800cce4:	f001 fb96 	bl	800e414 <xTaskRemoveFromEventList>
 800cce8:	4603      	mov	r3, r0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d007      	beq.n	800ccfe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ccee:	4b3d      	ldr	r3, [pc, #244]	; (800cde4 <xQueueReceive+0x1bc>)
 800ccf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	f3bf 8f4f 	dsb	sy
 800ccfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ccfe:	f7ff faf1 	bl	800c2e4 <vPortExitCritical>
				return pdPASS;
 800cd02:	2301      	movs	r3, #1
 800cd04:	e069      	b.n	800cdda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d103      	bne.n	800cd14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd0c:	f7ff faea 	bl	800c2e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd10:	2300      	movs	r3, #0
 800cd12:	e062      	b.n	800cdda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd1a:	f107 0310 	add.w	r3, r7, #16
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f001 fc00 	bl	800e524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd24:	2301      	movs	r3, #1
 800cd26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd28:	f7ff fadc 	bl	800c2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd2c:	f001 f96e 	bl	800e00c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd30:	f7ff faa8 	bl	800c284 <vPortEnterCritical>
 800cd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd3a:	b25b      	sxtb	r3, r3
 800cd3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd40:	d103      	bne.n	800cd4a <xQueueReceive+0x122>
 800cd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd50:	b25b      	sxtb	r3, r3
 800cd52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd56:	d103      	bne.n	800cd60 <xQueueReceive+0x138>
 800cd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd60:	f7ff fac0 	bl	800c2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd64:	1d3a      	adds	r2, r7, #4
 800cd66:	f107 0310 	add.w	r3, r7, #16
 800cd6a:	4611      	mov	r1, r2
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f001 fbef 	bl	800e550 <xTaskCheckForTimeOut>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d123      	bne.n	800cdc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd7a:	f000 fb1a 	bl	800d3b2 <prvIsQueueEmpty>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d017      	beq.n	800cdb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd86:	3324      	adds	r3, #36	; 0x24
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f001 fb1d 	bl	800e3cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cd92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd94:	f000 fabb 	bl	800d30e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cd98:	f001 f946 	bl	800e028 <xTaskResumeAll>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d189      	bne.n	800ccb6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cda2:	4b10      	ldr	r3, [pc, #64]	; (800cde4 <xQueueReceive+0x1bc>)
 800cda4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cda8:	601a      	str	r2, [r3, #0]
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	e780      	b.n	800ccb6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cdb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdb6:	f000 faaa 	bl	800d30e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cdba:	f001 f935 	bl	800e028 <xTaskResumeAll>
 800cdbe:	e77a      	b.n	800ccb6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cdc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdc2:	f000 faa4 	bl	800d30e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdc6:	f001 f92f 	bl	800e028 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdcc:	f000 faf1 	bl	800d3b2 <prvIsQueueEmpty>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f43f af6f 	beq.w	800ccb6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cdd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3730      	adds	r7, #48	; 0x30
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	e000ed04 	.word	0xe000ed04

0800cde8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b08e      	sub	sp, #56	; 0x38
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d10a      	bne.n	800ce1a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ce04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce08:	f383 8811 	msr	BASEPRI, r3
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	623b      	str	r3, [r7, #32]
}
 800ce16:	bf00      	nop
 800ce18:	e7fe      	b.n	800ce18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ce1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00a      	beq.n	800ce38 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ce22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce26:	f383 8811 	msr	BASEPRI, r3
 800ce2a:	f3bf 8f6f 	isb	sy
 800ce2e:	f3bf 8f4f 	dsb	sy
 800ce32:	61fb      	str	r3, [r7, #28]
}
 800ce34:	bf00      	nop
 800ce36:	e7fe      	b.n	800ce36 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce38:	f001 fcde 	bl	800e7f8 <xTaskGetSchedulerState>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d102      	bne.n	800ce48 <xQueueSemaphoreTake+0x60>
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d101      	bne.n	800ce4c <xQueueSemaphoreTake+0x64>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e000      	b.n	800ce4e <xQueueSemaphoreTake+0x66>
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d10a      	bne.n	800ce68 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ce52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce56:	f383 8811 	msr	BASEPRI, r3
 800ce5a:	f3bf 8f6f 	isb	sy
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	61bb      	str	r3, [r7, #24]
}
 800ce64:	bf00      	nop
 800ce66:	e7fe      	b.n	800ce66 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce68:	f7ff fa0c 	bl	800c284 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ce6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce70:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ce72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d024      	beq.n	800cec2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ce78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7a:	1e5a      	subs	r2, r3, #1
 800ce7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d104      	bne.n	800ce92 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ce88:	f001 fe74 	bl	800eb74 <pvTaskIncrementMutexHeldCount>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce90:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce94:	691b      	ldr	r3, [r3, #16]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00f      	beq.n	800ceba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9c:	3310      	adds	r3, #16
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f001 fab8 	bl	800e414 <xTaskRemoveFromEventList>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d007      	beq.n	800ceba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ceaa:	4b54      	ldr	r3, [pc, #336]	; (800cffc <xQueueSemaphoreTake+0x214>)
 800ceac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb0:	601a      	str	r2, [r3, #0]
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ceba:	f7ff fa13 	bl	800c2e4 <vPortExitCritical>
				return pdPASS;
 800cebe:	2301      	movs	r3, #1
 800cec0:	e097      	b.n	800cff2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d111      	bne.n	800ceec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00a      	beq.n	800cee4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	617b      	str	r3, [r7, #20]
}
 800cee0:	bf00      	nop
 800cee2:	e7fe      	b.n	800cee2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cee4:	f7ff f9fe 	bl	800c2e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cee8:	2300      	movs	r3, #0
 800ceea:	e082      	b.n	800cff2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ceec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d106      	bne.n	800cf00 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cef2:	f107 030c 	add.w	r3, r7, #12
 800cef6:	4618      	mov	r0, r3
 800cef8:	f001 fb14 	bl	800e524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cefc:	2301      	movs	r3, #1
 800cefe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf00:	f7ff f9f0 	bl	800c2e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf04:	f001 f882 	bl	800e00c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf08:	f7ff f9bc 	bl	800c284 <vPortEnterCritical>
 800cf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf12:	b25b      	sxtb	r3, r3
 800cf14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf18:	d103      	bne.n	800cf22 <xQueueSemaphoreTake+0x13a>
 800cf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf28:	b25b      	sxtb	r3, r3
 800cf2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf2e:	d103      	bne.n	800cf38 <xQueueSemaphoreTake+0x150>
 800cf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf38:	f7ff f9d4 	bl	800c2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf3c:	463a      	mov	r2, r7
 800cf3e:	f107 030c 	add.w	r3, r7, #12
 800cf42:	4611      	mov	r1, r2
 800cf44:	4618      	mov	r0, r3
 800cf46:	f001 fb03 	bl	800e550 <xTaskCheckForTimeOut>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d132      	bne.n	800cfb6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf52:	f000 fa2e 	bl	800d3b2 <prvIsQueueEmpty>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d026      	beq.n	800cfaa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d109      	bne.n	800cf78 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cf64:	f7ff f98e 	bl	800c284 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f001 fc61 	bl	800e834 <xTaskPriorityInherit>
 800cf72:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cf74:	f7ff f9b6 	bl	800c2e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7a:	3324      	adds	r3, #36	; 0x24
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	4611      	mov	r1, r2
 800cf80:	4618      	mov	r0, r3
 800cf82:	f001 fa23 	bl	800e3cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf88:	f000 f9c1 	bl	800d30e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf8c:	f001 f84c 	bl	800e028 <xTaskResumeAll>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f47f af68 	bne.w	800ce68 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cf98:	4b18      	ldr	r3, [pc, #96]	; (800cffc <xQueueSemaphoreTake+0x214>)
 800cf9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf9e:	601a      	str	r2, [r3, #0]
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	e75e      	b.n	800ce68 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cfaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfac:	f000 f9af 	bl	800d30e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfb0:	f001 f83a 	bl	800e028 <xTaskResumeAll>
 800cfb4:	e758      	b.n	800ce68 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cfb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfb8:	f000 f9a9 	bl	800d30e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfbc:	f001 f834 	bl	800e028 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfc2:	f000 f9f6 	bl	800d3b2 <prvIsQueueEmpty>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	f43f af4d 	beq.w	800ce68 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00d      	beq.n	800cff0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cfd4:	f7ff f956 	bl	800c284 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cfd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfda:	f000 f8f0 	bl	800d1be <prvGetDisinheritPriorityAfterTimeout>
 800cfde:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe2:	689b      	ldr	r3, [r3, #8]
 800cfe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f001 fd2a 	bl	800ea40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cfec:	f7ff f97a 	bl	800c2e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cff0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3738      	adds	r7, #56	; 0x38
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	e000ed04 	.word	0xe000ed04

0800d000 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b08e      	sub	sp, #56	; 0x38
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10a      	bne.n	800d02c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	623b      	str	r3, [r7, #32]
}
 800d028:	bf00      	nop
 800d02a:	e7fe      	b.n	800d02a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d103      	bne.n	800d03a <xQueueReceiveFromISR+0x3a>
 800d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d036:	2b00      	cmp	r3, #0
 800d038:	d101      	bne.n	800d03e <xQueueReceiveFromISR+0x3e>
 800d03a:	2301      	movs	r3, #1
 800d03c:	e000      	b.n	800d040 <xQueueReceiveFromISR+0x40>
 800d03e:	2300      	movs	r3, #0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d10a      	bne.n	800d05a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d048:	f383 8811 	msr	BASEPRI, r3
 800d04c:	f3bf 8f6f 	isb	sy
 800d050:	f3bf 8f4f 	dsb	sy
 800d054:	61fb      	str	r3, [r7, #28]
}
 800d056:	bf00      	nop
 800d058:	e7fe      	b.n	800d058 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d05a:	f7ff f9f5 	bl	800c448 <vPortValidateInterruptPriority>
	__asm volatile
 800d05e:	f3ef 8211 	mrs	r2, BASEPRI
 800d062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d066:	f383 8811 	msr	BASEPRI, r3
 800d06a:	f3bf 8f6f 	isb	sy
 800d06e:	f3bf 8f4f 	dsb	sy
 800d072:	61ba      	str	r2, [r7, #24]
 800d074:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d076:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d078:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d082:	2b00      	cmp	r3, #0
 800d084:	d02f      	beq.n	800d0e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d08c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d090:	68b9      	ldr	r1, [r7, #8]
 800d092:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d094:	f000 f915 	bl	800d2c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09a:	1e5a      	subs	r2, r3, #1
 800d09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d0a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0a8:	d112      	bne.n	800d0d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	691b      	ldr	r3, [r3, #16]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d016      	beq.n	800d0e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b4:	3310      	adds	r3, #16
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f001 f9ac 	bl	800e414 <xTaskRemoveFromEventList>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00e      	beq.n	800d0e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00b      	beq.n	800d0e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	601a      	str	r2, [r3, #0]
 800d0ce:	e007      	b.n	800d0e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	b25a      	sxtb	r2, r3
 800d0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	637b      	str	r3, [r7, #52]	; 0x34
 800d0e4:	e001      	b.n	800d0ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	637b      	str	r3, [r7, #52]	; 0x34
 800d0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	f383 8811 	msr	BASEPRI, r3
}
 800d0f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3738      	adds	r7, #56	; 0x38
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d10a      	bne.n	800d124 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800d10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d112:	f383 8811 	msr	BASEPRI, r3
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	f3bf 8f4f 	dsb	sy
 800d11e:	60bb      	str	r3, [r7, #8]
}
 800d120:	bf00      	nop
 800d122:	e7fe      	b.n	800d122 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800d124:	f7ff f8ae 	bl	800c284 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d12e:	f7ff f8d9 	bl	800c2e4 <vPortExitCritical>

	return uxReturn;
 800d132:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800d13c:	b480      	push	{r7}
 800d13e:	b087      	sub	sp, #28
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10a      	bne.n	800d164 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	60fb      	str	r3, [r7, #12]
}
 800d160:	bf00      	nop
 800d162:	e7fe      	b.n	800d162 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d168:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800d16a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d16c:	4618      	mov	r0, r3
 800d16e:	371c      	adds	r7, #28
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10a      	bne.n	800d1a0 <vQueueDelete+0x28>
	__asm volatile
 800d18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	60bb      	str	r3, [r7, #8]
}
 800d19c:	bf00      	nop
 800d19e:	e7fe      	b.n	800d19e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f000 f935 	bl	800d410 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d102      	bne.n	800d1b6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	f7fe fd73 	bl	800bc9c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d1b6:	bf00      	nop
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d1be:	b480      	push	{r7}
 800d1c0:	b085      	sub	sp, #20
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d006      	beq.n	800d1dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f1c3 0307 	rsb	r3, r3, #7
 800d1d8:	60fb      	str	r3, [r7, #12]
 800d1da:	e001      	b.n	800d1e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
	}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3714      	adds	r7, #20
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b086      	sub	sp, #24
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	60f8      	str	r0, [r7, #12]
 800d1f6:	60b9      	str	r1, [r7, #8]
 800d1f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d202:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d10d      	bne.n	800d228 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d14d      	bne.n	800d2b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	4618      	mov	r0, r3
 800d21a:	f001 fb8b 	bl	800e934 <xTaskPriorityDisinherit>
 800d21e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2200      	movs	r2, #0
 800d224:	609a      	str	r2, [r3, #8]
 800d226:	e043      	b.n	800d2b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d119      	bne.n	800d262 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6858      	ldr	r0, [r3, #4]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d236:	461a      	mov	r2, r3
 800d238:	68b9      	ldr	r1, [r7, #8]
 800d23a:	f014 f8fd 	bl	8021438 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	685a      	ldr	r2, [r3, #4]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d246:	441a      	add	r2, r3
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	685a      	ldr	r2, [r3, #4]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	429a      	cmp	r2, r3
 800d256:	d32b      	bcc.n	800d2b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	605a      	str	r2, [r3, #4]
 800d260:	e026      	b.n	800d2b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	68d8      	ldr	r0, [r3, #12]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26a:	461a      	mov	r2, r3
 800d26c:	68b9      	ldr	r1, [r7, #8]
 800d26e:	f014 f8e3 	bl	8021438 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	68da      	ldr	r2, [r3, #12]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27a:	425b      	negs	r3, r3
 800d27c:	441a      	add	r2, r3
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	68da      	ldr	r2, [r3, #12]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d207      	bcs.n	800d29e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	689a      	ldr	r2, [r3, #8]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d296:	425b      	negs	r3, r3
 800d298:	441a      	add	r2, r3
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	d105      	bne.n	800d2b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d002      	beq.n	800d2b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	1c5a      	adds	r2, r3, #1
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d2b8:	697b      	ldr	r3, [r7, #20]
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3718      	adds	r7, #24
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}

0800d2c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	b082      	sub	sp, #8
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
 800d2ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d018      	beq.n	800d306 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	68da      	ldr	r2, [r3, #12]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2dc:	441a      	add	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	68da      	ldr	r2, [r3, #12]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d303      	bcc.n	800d2f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	68d9      	ldr	r1, [r3, #12]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fe:	461a      	mov	r2, r3
 800d300:	6838      	ldr	r0, [r7, #0]
 800d302:	f014 f899 	bl	8021438 <memcpy>
	}
}
 800d306:	bf00      	nop
 800d308:	3708      	adds	r7, #8
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b084      	sub	sp, #16
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d316:	f7fe ffb5 	bl	800c284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d320:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d322:	e011      	b.n	800d348 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d012      	beq.n	800d352 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	3324      	adds	r3, #36	; 0x24
 800d330:	4618      	mov	r0, r3
 800d332:	f001 f86f 	bl	800e414 <xTaskRemoveFromEventList>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d001      	beq.n	800d340 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d33c:	f001 f96a 	bl	800e614 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d340:	7bfb      	ldrb	r3, [r7, #15]
 800d342:	3b01      	subs	r3, #1
 800d344:	b2db      	uxtb	r3, r3
 800d346:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	dce9      	bgt.n	800d324 <prvUnlockQueue+0x16>
 800d350:	e000      	b.n	800d354 <prvUnlockQueue+0x46>
					break;
 800d352:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	22ff      	movs	r2, #255	; 0xff
 800d358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d35c:	f7fe ffc2 	bl	800c2e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d360:	f7fe ff90 	bl	800c284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d36a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d36c:	e011      	b.n	800d392 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d012      	beq.n	800d39c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	3310      	adds	r3, #16
 800d37a:	4618      	mov	r0, r3
 800d37c:	f001 f84a 	bl	800e414 <xTaskRemoveFromEventList>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d001      	beq.n	800d38a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d386:	f001 f945 	bl	800e614 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d38a:	7bbb      	ldrb	r3, [r7, #14]
 800d38c:	3b01      	subs	r3, #1
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d392:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d396:	2b00      	cmp	r3, #0
 800d398:	dce9      	bgt.n	800d36e <prvUnlockQueue+0x60>
 800d39a:	e000      	b.n	800d39e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d39c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	22ff      	movs	r2, #255	; 0xff
 800d3a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d3a6:	f7fe ff9d 	bl	800c2e4 <vPortExitCritical>
}
 800d3aa:	bf00      	nop
 800d3ac:	3710      	adds	r7, #16
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b084      	sub	sp, #16
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3ba:	f7fe ff63 	bl	800c284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d102      	bne.n	800d3cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	60fb      	str	r3, [r7, #12]
 800d3ca:	e001      	b.n	800d3d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3d0:	f7fe ff88 	bl	800c2e4 <vPortExitCritical>

	return xReturn;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3e6:	f7fe ff4d 	bl	800c284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d102      	bne.n	800d3fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	60fb      	str	r3, [r7, #12]
 800d3fa:	e001      	b.n	800d400 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d400:	f7fe ff70 	bl	800c2e4 <vPortExitCritical>

	return xReturn;
 800d404:	68fb      	ldr	r3, [r7, #12]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
	...

0800d410 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d410:	b480      	push	{r7}
 800d412:	b085      	sub	sp, #20
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d418:	2300      	movs	r3, #0
 800d41a:	60fb      	str	r3, [r7, #12]
 800d41c:	e016      	b.n	800d44c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d41e:	4a10      	ldr	r2, [pc, #64]	; (800d460 <vQueueUnregisterQueue+0x50>)
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	00db      	lsls	r3, r3, #3
 800d424:	4413      	add	r3, r2
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d10b      	bne.n	800d446 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d42e:	4a0c      	ldr	r2, [pc, #48]	; (800d460 <vQueueUnregisterQueue+0x50>)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2100      	movs	r1, #0
 800d434:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d438:	4a09      	ldr	r2, [pc, #36]	; (800d460 <vQueueUnregisterQueue+0x50>)
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	00db      	lsls	r3, r3, #3
 800d43e:	4413      	add	r3, r2
 800d440:	2200      	movs	r2, #0
 800d442:	605a      	str	r2, [r3, #4]
				break;
 800d444:	e006      	b.n	800d454 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	3301      	adds	r3, #1
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2b07      	cmp	r3, #7
 800d450:	d9e5      	bls.n	800d41e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d452:	bf00      	nop
 800d454:	bf00      	nop
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	2400a144 	.word	0x2400a144

0800d464 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 800d464:	b580      	push	{r7, lr}
 800d466:	b090      	sub	sp, #64	; 0x40
 800d468:	af02      	add	r7, sp, #8
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	607a      	str	r2, [r7, #4]
 800d470:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 800d472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d474:	62fb      	str	r3, [r7, #44]	; 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10a      	bne.n	800d492 <xStreamBufferGenericCreateStatic+0x2e>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 800d492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d494:	2b00      	cmp	r3, #0
 800d496:	d10a      	bne.n	800d4ae <xStreamBufferGenericCreateStatic+0x4a>
	__asm volatile
 800d498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49c:	f383 8811 	msr	BASEPRI, r3
 800d4a0:	f3bf 8f6f 	isb	sy
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4aa:	bf00      	nop
 800d4ac:	e7fe      	b.n	800d4ac <xStreamBufferGenericCreateStatic+0x48>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800d4ae:	68ba      	ldr	r2, [r7, #8]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d90a      	bls.n	800d4cc <xStreamBufferGenericCreateStatic+0x68>
	__asm volatile
 800d4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ba:	f383 8811 	msr	BASEPRI, r3
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	623b      	str	r3, [r7, #32]
}
 800d4c8:	bf00      	nop
 800d4ca:	e7fe      	b.n	800d4ca <xStreamBufferGenericCreateStatic+0x66>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d101      	bne.n	800d4d6 <xStreamBufferGenericCreateStatic+0x72>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d003      	beq.n	800d4e4 <xStreamBufferGenericCreateStatic+0x80>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 800d4dc:	2303      	movs	r3, #3
 800d4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4e2:	e002      	b.n	800d4ea <xStreamBufferGenericCreateStatic+0x86>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 800d4e4:	2302      	movs	r3, #2
 800d4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2b04      	cmp	r3, #4
 800d4ee:	d80a      	bhi.n	800d506 <xStreamBufferGenericCreateStatic+0xa2>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	61fb      	str	r3, [r7, #28]
}
 800d502:	bf00      	nop
 800d504:	e7fe      	b.n	800d504 <xStreamBufferGenericCreateStatic+0xa0>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 800d506:	2320      	movs	r3, #32
 800d508:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2b20      	cmp	r3, #32
 800d50e:	d00a      	beq.n	800d526 <xStreamBufferGenericCreateStatic+0xc2>
	__asm volatile
 800d510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	61bb      	str	r3, [r7, #24]
}
 800d522:	bf00      	nop
 800d524:	e7fe      	b.n	800d524 <xStreamBufferGenericCreateStatic+0xc0>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d015      	beq.n	800d558 <xStreamBufferGenericCreateStatic+0xf4>
 800d52c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d012      	beq.n	800d558 <xStreamBufferGenericCreateStatic+0xf4>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 800d532:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	6839      	ldr	r1, [r7, #0]
 800d53e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d540:	f000 fb09 	bl	800db56 <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	7f1b      	ldrb	r3, [r3, #28]
 800d548:	f043 0302 	orr.w	r3, r3, #2
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d550:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 800d552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d554:	637b      	str	r3, [r7, #52]	; 0x34
 800d556:	e001      	b.n	800d55c <xStreamBufferGenericCreateStatic+0xf8>
		}
		else
		{
			xReturn = NULL;
 800d558:	2300      	movs	r3, #0
 800d55a:	637b      	str	r3, [r7, #52]	; 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 800d55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d55e:	4618      	mov	r0, r3
 800d560:	3738      	adds	r7, #56	; 0x38
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800d566:	b480      	push	{r7}
 800d568:	b087      	sub	sp, #28
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d10a      	bne.n	800d58e <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800d578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57c:	f383 8811 	msr	BASEPRI, r3
 800d580:	f3bf 8f6f 	isb	sy
 800d584:	f3bf 8f4f 	dsb	sy
 800d588:	60fb      	str	r3, [r7, #12]
}
 800d58a:	bf00      	nop
 800d58c:	e7fe      	b.n	800d58c <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	689a      	ldr	r2, [r3, #8]
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4413      	add	r3, r2
 800d598:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	1ad3      	subs	r3, r2, r3
 800d5a2:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	697a      	ldr	r2, [r7, #20]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d304      	bcc.n	800d5be <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	697a      	ldr	r2, [r7, #20]
 800d5ba:	1ad3      	subs	r3, r2, r3
 800d5bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800d5be:	697b      	ldr	r3, [r7, #20]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	371c      	adds	r7, #28
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b090      	sub	sp, #64	; 0x40
 800d5d0:	af02      	add	r7, sp, #8
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]
 800d5d8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d10a      	bne.n	800d602 <xStreamBufferSend+0x36>
	__asm volatile
 800d5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f0:	f383 8811 	msr	BASEPRI, r3
 800d5f4:	f3bf 8f6f 	isb	sy
 800d5f8:	f3bf 8f4f 	dsb	sy
 800d5fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d5fe:	bf00      	nop
 800d600:	e7fe      	b.n	800d600 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800d602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d604:	2b00      	cmp	r3, #0
 800d606:	d10a      	bne.n	800d61e <xStreamBufferSend+0x52>
	__asm volatile
 800d608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60c:	f383 8811 	msr	BASEPRI, r3
 800d610:	f3bf 8f6f 	isb	sy
 800d614:	f3bf 8f4f 	dsb	sy
 800d618:	623b      	str	r3, [r7, #32]
}
 800d61a:	bf00      	nop
 800d61c:	e7fe      	b.n	800d61c <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800d61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d620:	7f1b      	ldrb	r3, [r3, #28]
 800d622:	f003 0301 	and.w	r3, r3, #1
 800d626:	2b00      	cmp	r3, #0
 800d628:	d011      	beq.n	800d64e <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800d62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62c:	3304      	adds	r3, #4
 800d62e:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 800d630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	429a      	cmp	r2, r3
 800d636:	d80a      	bhi.n	800d64e <xStreamBufferSend+0x82>
	__asm volatile
 800d638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63c:	f383 8811 	msr	BASEPRI, r3
 800d640:	f3bf 8f6f 	isb	sy
 800d644:	f3bf 8f4f 	dsb	sy
 800d648:	61fb      	str	r3, [r7, #28]
}
 800d64a:	bf00      	nop
 800d64c:	e7fe      	b.n	800d64c <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d03e      	beq.n	800d6d2 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800d654:	f107 0310 	add.w	r3, r7, #16
 800d658:	4618      	mov	r0, r3
 800d65a:	f000 ff3d 	bl	800e4d8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800d65e:	f7fe fe11 	bl	800c284 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800d662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d664:	f7ff ff7f 	bl	800d566 <xStreamBufferSpacesAvailable>
 800d668:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800d66a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66e:	429a      	cmp	r2, r3
 800d670:	d217      	bcs.n	800d6a2 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800d672:	2000      	movs	r0, #0
 800d674:	f001 fba2 	bl	800edbc <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800d678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67a:	695b      	ldr	r3, [r3, #20]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00a      	beq.n	800d696 <xStreamBufferSend+0xca>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	61bb      	str	r3, [r7, #24]
}
 800d692:	bf00      	nop
 800d694:	e7fe      	b.n	800d694 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800d696:	f001 f89f 	bl	800e7d8 <xTaskGetCurrentTaskHandle>
 800d69a:	4602      	mov	r2, r0
 800d69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69e:	615a      	str	r2, [r3, #20]
 800d6a0:	e002      	b.n	800d6a8 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 800d6a2:	f7fe fe1f 	bl	800c2e4 <vPortExitCritical>
					break;
 800d6a6:	e014      	b.n	800d6d2 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 800d6a8:	f7fe fe1c 	bl	800c2e4 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	2100      	movs	r1, #0
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	f001 fa72 	bl	800eb9c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800d6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800d6be:	463a      	mov	r2, r7
 800d6c0:	f107 0310 	add.w	r3, r7, #16
 800d6c4:	4611      	mov	r1, r2
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f000 ff42 	bl	800e550 <xTaskCheckForTimeOut>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d0c5      	beq.n	800d65e <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800d6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d103      	bne.n	800d6e0 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800d6d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6da:	f7ff ff44 	bl	800d566 <xStreamBufferSpacesAvailable>
 800d6de:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800d6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e2:	9300      	str	r3, [sp, #0]
 800d6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	68b9      	ldr	r1, [r7, #8]
 800d6ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6ec:	f000 f823 	bl	800d736 <prvWriteMessageToBuffer>
 800d6f0:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800d6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d019      	beq.n	800d72c <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800d6f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6fa:	f000 fa0c 	bl	800db16 <prvBytesInBuffer>
 800d6fe:	4602      	mov	r2, r0
 800d700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	429a      	cmp	r2, r3
 800d706:	d311      	bcc.n	800d72c <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800d708:	f000 fc80 	bl	800e00c <vTaskSuspendAll>
 800d70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70e:	691b      	ldr	r3, [r3, #16]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d009      	beq.n	800d728 <xStreamBufferSend+0x15c>
 800d714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d716:	6918      	ldr	r0, [r3, #16]
 800d718:	2300      	movs	r3, #0
 800d71a:	2200      	movs	r2, #0
 800d71c:	2100      	movs	r1, #0
 800d71e:	f001 fa97 	bl	800ec50 <xTaskGenericNotify>
 800d722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d724:	2200      	movs	r2, #0
 800d726:	611a      	str	r2, [r3, #16]
 800d728:	f000 fc7e 	bl	800e028 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800d72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3738      	adds	r7, #56	; 0x38
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800d736:	b580      	push	{r7, lr}
 800d738:	b086      	sub	sp, #24
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	60f8      	str	r0, [r7, #12]
 800d73e:	60b9      	str	r1, [r7, #8]
 800d740:	607a      	str	r2, [r7, #4]
 800d742:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d102      	bne.n	800d750 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800d74a:	2300      	movs	r3, #0
 800d74c:	617b      	str	r3, [r7, #20]
 800d74e:	e01d      	b.n	800d78c <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	7f1b      	ldrb	r3, [r3, #28]
 800d754:	f003 0301 	and.w	r3, r3, #1
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d108      	bne.n	800d76e <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800d75c:	2301      	movs	r3, #1
 800d75e:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	4293      	cmp	r3, r2
 800d766:	bf28      	it	cs
 800d768:	4613      	movcs	r3, r2
 800d76a:	607b      	str	r3, [r7, #4]
 800d76c:	e00e      	b.n	800d78c <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800d76e:	683a      	ldr	r2, [r7, #0]
 800d770:	6a3b      	ldr	r3, [r7, #32]
 800d772:	429a      	cmp	r2, r3
 800d774:	d308      	bcc.n	800d788 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800d776:	2301      	movs	r3, #1
 800d778:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800d77a:	1d3b      	adds	r3, r7, #4
 800d77c:	2204      	movs	r2, #4
 800d77e:	4619      	mov	r1, r3
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f000 f8dc 	bl	800d93e <prvWriteBytesToBuffer>
 800d786:	e001      	b.n	800d78c <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800d788:	2300      	movs	r3, #0
 800d78a:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d007      	beq.n	800d7a2 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	461a      	mov	r2, r3
 800d796:	68b9      	ldr	r1, [r7, #8]
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f000 f8d0 	bl	800d93e <prvWriteBytesToBuffer>
 800d79e:	6138      	str	r0, [r7, #16]
 800d7a0:	e001      	b.n	800d7a6 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800d7a6:	693b      	ldr	r3, [r7, #16]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3718      	adds	r7, #24
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b08e      	sub	sp, #56	; 0x38
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d10a      	bne.n	800d7e2 <xStreamBufferReceive+0x32>
	__asm volatile
 800d7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d0:	f383 8811 	msr	BASEPRI, r3
 800d7d4:	f3bf 8f6f 	isb	sy
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	61fb      	str	r3, [r7, #28]
}
 800d7de:	bf00      	nop
 800d7e0:	e7fe      	b.n	800d7e0 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800d7e2:	6a3b      	ldr	r3, [r7, #32]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d10a      	bne.n	800d7fe <xStreamBufferReceive+0x4e>
	__asm volatile
 800d7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ec:	f383 8811 	msr	BASEPRI, r3
 800d7f0:	f3bf 8f6f 	isb	sy
 800d7f4:	f3bf 8f4f 	dsb	sy
 800d7f8:	61bb      	str	r3, [r7, #24]
}
 800d7fa:	bf00      	nop
 800d7fc:	e7fe      	b.n	800d7fc <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800d7fe:	6a3b      	ldr	r3, [r7, #32]
 800d800:	7f1b      	ldrb	r3, [r3, #28]
 800d802:	f003 0301 	and.w	r3, r3, #1
 800d806:	2b00      	cmp	r3, #0
 800d808:	d002      	beq.n	800d810 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800d80a:	2304      	movs	r3, #4
 800d80c:	627b      	str	r3, [r7, #36]	; 0x24
 800d80e:	e001      	b.n	800d814 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800d810:	2300      	movs	r3, #0
 800d812:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d034      	beq.n	800d884 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800d81a:	f7fe fd33 	bl	800c284 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800d81e:	6a38      	ldr	r0, [r7, #32]
 800d820:	f000 f979 	bl	800db16 <prvBytesInBuffer>
 800d824:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800d826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d816      	bhi.n	800d85c <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800d82e:	2000      	movs	r0, #0
 800d830:	f001 fac4 	bl	800edbc <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800d834:	6a3b      	ldr	r3, [r7, #32]
 800d836:	691b      	ldr	r3, [r3, #16]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00a      	beq.n	800d852 <xStreamBufferReceive+0xa2>
	__asm volatile
 800d83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d840:	f383 8811 	msr	BASEPRI, r3
 800d844:	f3bf 8f6f 	isb	sy
 800d848:	f3bf 8f4f 	dsb	sy
 800d84c:	617b      	str	r3, [r7, #20]
}
 800d84e:	bf00      	nop
 800d850:	e7fe      	b.n	800d850 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800d852:	f000 ffc1 	bl	800e7d8 <xTaskGetCurrentTaskHandle>
 800d856:	4602      	mov	r2, r0
 800d858:	6a3b      	ldr	r3, [r7, #32]
 800d85a:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d85c:	f7fe fd42 	bl	800c2e4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800d860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d864:	429a      	cmp	r2, r3
 800d866:	d811      	bhi.n	800d88c <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	2200      	movs	r2, #0
 800d86c:	2100      	movs	r1, #0
 800d86e:	2000      	movs	r0, #0
 800d870:	f001 f994 	bl	800eb9c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800d874:	6a3b      	ldr	r3, [r7, #32]
 800d876:	2200      	movs	r2, #0
 800d878:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800d87a:	6a38      	ldr	r0, [r7, #32]
 800d87c:	f000 f94b 	bl	800db16 <prvBytesInBuffer>
 800d880:	62b8      	str	r0, [r7, #40]	; 0x28
 800d882:	e003      	b.n	800d88c <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800d884:	6a38      	ldr	r0, [r7, #32]
 800d886:	f000 f946 	bl	800db16 <prvBytesInBuffer>
 800d88a:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800d88c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d890:	429a      	cmp	r2, r3
 800d892:	d91d      	bls.n	800d8d0 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	68b9      	ldr	r1, [r7, #8]
 800d89e:	6a38      	ldr	r0, [r7, #32]
 800d8a0:	f000 f81b 	bl	800d8da <prvReadMessageFromBuffer>
 800d8a4:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800d8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d011      	beq.n	800d8d0 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800d8ac:	f000 fbae 	bl	800e00c <vTaskSuspendAll>
 800d8b0:	6a3b      	ldr	r3, [r7, #32]
 800d8b2:	695b      	ldr	r3, [r3, #20]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d009      	beq.n	800d8cc <xStreamBufferReceive+0x11c>
 800d8b8:	6a3b      	ldr	r3, [r7, #32]
 800d8ba:	6958      	ldr	r0, [r3, #20]
 800d8bc:	2300      	movs	r3, #0
 800d8be:	2200      	movs	r2, #0
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	f001 f9c5 	bl	800ec50 <xTaskGenericNotify>
 800d8c6:	6a3b      	ldr	r3, [r7, #32]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	615a      	str	r2, [r3, #20]
 800d8cc:	f000 fbac 	bl	800e028 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800d8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3730      	adds	r7, #48	; 0x30
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b088      	sub	sp, #32
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	60f8      	str	r0, [r7, #12]
 800d8e2:	60b9      	str	r1, [r7, #8]
 800d8e4:	607a      	str	r2, [r7, #4]
 800d8e6:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800d8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d019      	beq.n	800d922 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800d8f4:	f107 0110 	add.w	r1, r7, #16
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f000 f890 	bl	800da22 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800d906:	683a      	ldr	r2, [r7, #0]
 800d908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800d90e:	69fa      	ldr	r2, [r7, #28]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	429a      	cmp	r2, r3
 800d914:	d907      	bls.n	800d926 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	69ba      	ldr	r2, [r7, #24]
 800d91a:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800d91c:	2300      	movs	r3, #0
 800d91e:	61fb      	str	r3, [r7, #28]
 800d920:	e001      	b.n	800d926 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	69fa      	ldr	r2, [r7, #28]
 800d92a:	68b9      	ldr	r1, [r7, #8]
 800d92c:	68f8      	ldr	r0, [r7, #12]
 800d92e:	f000 f878 	bl	800da22 <prvReadBytesFromBuffer>
 800d932:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800d934:	697b      	ldr	r3, [r7, #20]
}
 800d936:	4618      	mov	r0, r3
 800d938:	3720      	adds	r7, #32
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}

0800d93e <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800d93e:	b580      	push	{r7, lr}
 800d940:	b08a      	sub	sp, #40	; 0x28
 800d942:	af00      	add	r7, sp, #0
 800d944:	60f8      	str	r0, [r7, #12]
 800d946:	60b9      	str	r1, [r7, #8]
 800d948:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d10a      	bne.n	800d966 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800d950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d954:	f383 8811 	msr	BASEPRI, r3
 800d958:	f3bf 8f6f 	isb	sy
 800d95c:	f3bf 8f4f 	dsb	sy
 800d960:	61fb      	str	r3, [r7, #28]
}
 800d962:	bf00      	nop
 800d964:	e7fe      	b.n	800d964 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	689a      	ldr	r2, [r3, #8]
 800d970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d972:	1ad3      	subs	r3, r2, r3
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	4293      	cmp	r3, r2
 800d978:	bf28      	it	cs
 800d97a:	4613      	movcs	r3, r2
 800d97c:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800d97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	441a      	add	r2, r3
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d90a      	bls.n	800d9a2 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800d98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d990:	f383 8811 	msr	BASEPRI, r3
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	61bb      	str	r3, [r7, #24]
}
 800d99e:	bf00      	nop
 800d9a0:	e7fe      	b.n	800d9a0 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	699a      	ldr	r2, [r3, #24]
 800d9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a8:	4413      	add	r3, r2
 800d9aa:	6a3a      	ldr	r2, [r7, #32]
 800d9ac:	68b9      	ldr	r1, [r7, #8]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f013 fd42 	bl	8021438 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	6a3b      	ldr	r3, [r7, #32]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d91c      	bls.n	800d9f6 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	6a3b      	ldr	r3, [r7, #32]
 800d9c0:	1ad2      	subs	r2, r2, r3
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d90a      	bls.n	800d9e0 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800d9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ce:	f383 8811 	msr	BASEPRI, r3
 800d9d2:	f3bf 8f6f 	isb	sy
 800d9d6:	f3bf 8f4f 	dsb	sy
 800d9da:	617b      	str	r3, [r7, #20]
}
 800d9dc:	bf00      	nop
 800d9de:	e7fe      	b.n	800d9de <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6998      	ldr	r0, [r3, #24]
 800d9e4:	68ba      	ldr	r2, [r7, #8]
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	18d1      	adds	r1, r2, r3
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	6a3b      	ldr	r3, [r7, #32]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	f013 fd21 	bl	8021438 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800d9f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da04:	429a      	cmp	r2, r3
 800da06:	d304      	bcc.n	800da12 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da0e:	1ad3      	subs	r3, r2, r3
 800da10:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da16:	605a      	str	r2, [r3, #4]

	return xCount;
 800da18:	687b      	ldr	r3, [r7, #4]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3728      	adds	r7, #40	; 0x28
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b08a      	sub	sp, #40	; 0x28
 800da26:	af00      	add	r7, sp, #0
 800da28:	60f8      	str	r0, [r7, #12]
 800da2a:	60b9      	str	r1, [r7, #8]
 800da2c:	607a      	str	r2, [r7, #4]
 800da2e:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	4293      	cmp	r3, r2
 800da36:	bf28      	it	cs
 800da38:	4613      	movcs	r3, r2
 800da3a:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800da3c:	6a3b      	ldr	r3, [r7, #32]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d064      	beq.n	800db0c <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	689a      	ldr	r2, [r3, #8]
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	1ad3      	subs	r3, r2, r3
 800da50:	6a3a      	ldr	r2, [r7, #32]
 800da52:	4293      	cmp	r3, r2
 800da54:	bf28      	it	cs
 800da56:	4613      	movcs	r3, r2
 800da58:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800da5a:	69fa      	ldr	r2, [r7, #28]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d90a      	bls.n	800da78 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800da62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da66:	f383 8811 	msr	BASEPRI, r3
 800da6a:	f3bf 8f6f 	isb	sy
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	61bb      	str	r3, [r7, #24]
}
 800da74:	bf00      	nop
 800da76:	e7fe      	b.n	800da76 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800da78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	441a      	add	r2, r3
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	429a      	cmp	r2, r3
 800da84:	d90a      	bls.n	800da9c <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800da86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8a:	f383 8811 	msr	BASEPRI, r3
 800da8e:	f3bf 8f6f 	isb	sy
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	617b      	str	r3, [r7, #20]
}
 800da98:	bf00      	nop
 800da9a:	e7fe      	b.n	800da9a <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	699a      	ldr	r2, [r3, #24]
 800daa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa2:	4413      	add	r3, r2
 800daa4:	69fa      	ldr	r2, [r7, #28]
 800daa6:	4619      	mov	r1, r3
 800daa8:	68b8      	ldr	r0, [r7, #8]
 800daaa:	f013 fcc5 	bl	8021438 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800daae:	6a3a      	ldr	r2, [r7, #32]
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d919      	bls.n	800daea <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800dab6:	6a3a      	ldr	r2, [r7, #32]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d90a      	bls.n	800dad4 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800dabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac2:	f383 8811 	msr	BASEPRI, r3
 800dac6:	f3bf 8f6f 	isb	sy
 800daca:	f3bf 8f4f 	dsb	sy
 800dace:	613b      	str	r3, [r7, #16]
}
 800dad0:	bf00      	nop
 800dad2:	e7fe      	b.n	800dad2 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800dad4:	68ba      	ldr	r2, [r7, #8]
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	18d0      	adds	r0, r2, r3
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6999      	ldr	r1, [r3, #24]
 800dade:	6a3a      	ldr	r2, [r7, #32]
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	1ad3      	subs	r3, r2, r3
 800dae4:	461a      	mov	r2, r3
 800dae6:	f013 fca7 	bl	8021438 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800daea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daec:	6a3b      	ldr	r3, [r7, #32]
 800daee:	4413      	add	r3, r2
 800daf0:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d304      	bcc.n	800db06 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db02:	1ad3      	subs	r3, r2, r3
 800db04:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db0a:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800db0c:	6a3b      	ldr	r3, [r7, #32]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3728      	adds	r7, #40	; 0x28
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800db16:	b480      	push	{r7}
 800db18:	b085      	sub	sp, #20
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	689a      	ldr	r2, [r3, #8]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	4413      	add	r3, r2
 800db28:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	689b      	ldr	r3, [r3, #8]
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d304      	bcc.n	800db48 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	68fa      	ldr	r2, [r7, #12]
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800db48:	68fb      	ldr	r3, [r7, #12]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3714      	adds	r7, #20
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr

0800db56 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800db56:	b580      	push	{r7, lr}
 800db58:	b086      	sub	sp, #24
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	60f8      	str	r0, [r7, #12]
 800db5e:	60b9      	str	r1, [r7, #8]
 800db60:	607a      	str	r2, [r7, #4]
 800db62:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800db64:	2355      	movs	r3, #85	; 0x55
 800db66:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	6979      	ldr	r1, [r7, #20]
 800db6c:	68b8      	ldr	r0, [r7, #8]
 800db6e:	f013 fc8b 	bl	8021488 <memset>
 800db72:	4602      	mov	r2, r0
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	4293      	cmp	r3, r2
 800db78:	d00a      	beq.n	800db90 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800db7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7e:	f383 8811 	msr	BASEPRI, r3
 800db82:	f3bf 8f6f 	isb	sy
 800db86:	f3bf 8f4f 	dsb	sy
 800db8a:	613b      	str	r3, [r7, #16]
}
 800db8c:	bf00      	nop
 800db8e:	e7fe      	b.n	800db8e <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800db90:	2220      	movs	r2, #32
 800db92:	2100      	movs	r1, #0
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f013 fc77 	bl	8021488 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	68ba      	ldr	r2, [r7, #8]
 800db9e:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	683a      	ldr	r2, [r7, #0]
 800dbaa:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f897 2020 	ldrb.w	r2, [r7, #32]
 800dbb2:	771a      	strb	r2, [r3, #28]
}
 800dbb4:	bf00      	nop
 800dbb6:	3718      	adds	r7, #24
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b08e      	sub	sp, #56	; 0x38
 800dbc0:	af04      	add	r7, sp, #16
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
 800dbc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d10a      	bne.n	800dbe6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800dbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd4:	f383 8811 	msr	BASEPRI, r3
 800dbd8:	f3bf 8f6f 	isb	sy
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	623b      	str	r3, [r7, #32]
}
 800dbe2:	bf00      	nop
 800dbe4:	e7fe      	b.n	800dbe4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10a      	bne.n	800dc02 <xTaskCreateStatic+0x46>
	__asm volatile
 800dbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf0:	f383 8811 	msr	BASEPRI, r3
 800dbf4:	f3bf 8f6f 	isb	sy
 800dbf8:	f3bf 8f4f 	dsb	sy
 800dbfc:	61fb      	str	r3, [r7, #28]
}
 800dbfe:	bf00      	nop
 800dc00:	e7fe      	b.n	800dc00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dc02:	2354      	movs	r3, #84	; 0x54
 800dc04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	2b54      	cmp	r3, #84	; 0x54
 800dc0a:	d00a      	beq.n	800dc22 <xTaskCreateStatic+0x66>
	__asm volatile
 800dc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc10:	f383 8811 	msr	BASEPRI, r3
 800dc14:	f3bf 8f6f 	isb	sy
 800dc18:	f3bf 8f4f 	dsb	sy
 800dc1c:	61bb      	str	r3, [r7, #24]
}
 800dc1e:	bf00      	nop
 800dc20:	e7fe      	b.n	800dc20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dc22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d01e      	beq.n	800dc68 <xTaskCreateStatic+0xac>
 800dc2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d01b      	beq.n	800dc68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3c:	2202      	movs	r2, #2
 800dc3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dc42:	2300      	movs	r3, #0
 800dc44:	9303      	str	r3, [sp, #12]
 800dc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc48:	9302      	str	r3, [sp, #8]
 800dc4a:	f107 0314 	add.w	r3, r7, #20
 800dc4e:	9301      	str	r3, [sp, #4]
 800dc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc52:	9300      	str	r3, [sp, #0]
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	68b9      	ldr	r1, [r7, #8]
 800dc5a:	68f8      	ldr	r0, [r7, #12]
 800dc5c:	f000 f850 	bl	800dd00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc62:	f000 f8d5 	bl	800de10 <prvAddNewTaskToReadyList>
 800dc66:	e001      	b.n	800dc6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dc6c:	697b      	ldr	r3, [r7, #20]
	}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3728      	adds	r7, #40	; 0x28
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}

0800dc76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dc76:	b580      	push	{r7, lr}
 800dc78:	b08c      	sub	sp, #48	; 0x30
 800dc7a:	af04      	add	r7, sp, #16
 800dc7c:	60f8      	str	r0, [r7, #12]
 800dc7e:	60b9      	str	r1, [r7, #8]
 800dc80:	603b      	str	r3, [r7, #0]
 800dc82:	4613      	mov	r3, r2
 800dc84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dc86:	88fb      	ldrh	r3, [r7, #6]
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fd ff42 	bl	800bb14 <pvPortMalloc>
 800dc90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d00e      	beq.n	800dcb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dc98:	2054      	movs	r0, #84	; 0x54
 800dc9a:	f7fd ff3b 	bl	800bb14 <pvPortMalloc>
 800dc9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d003      	beq.n	800dcae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	631a      	str	r2, [r3, #48]	; 0x30
 800dcac:	e005      	b.n	800dcba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dcae:	6978      	ldr	r0, [r7, #20]
 800dcb0:	f7fd fff4 	bl	800bc9c <vPortFree>
 800dcb4:	e001      	b.n	800dcba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d017      	beq.n	800dcf0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dcc8:	88fa      	ldrh	r2, [r7, #6]
 800dcca:	2300      	movs	r3, #0
 800dccc:	9303      	str	r3, [sp, #12]
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	9302      	str	r3, [sp, #8]
 800dcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd4:	9301      	str	r3, [sp, #4]
 800dcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd8:	9300      	str	r3, [sp, #0]
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	68b9      	ldr	r1, [r7, #8]
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f000 f80e 	bl	800dd00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dce4:	69f8      	ldr	r0, [r7, #28]
 800dce6:	f000 f893 	bl	800de10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dcea:	2301      	movs	r3, #1
 800dcec:	61bb      	str	r3, [r7, #24]
 800dcee:	e002      	b.n	800dcf6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dcf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcf4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dcf6:	69bb      	ldr	r3, [r7, #24]
	}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3720      	adds	r7, #32
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b088      	sub	sp, #32
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
 800dd0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd12:	6879      	ldr	r1, [r7, #4]
 800dd14:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dd18:	440b      	add	r3, r1
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	4413      	add	r3, r2
 800dd1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	f023 0307 	bic.w	r3, r3, #7
 800dd26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dd28:	69bb      	ldr	r3, [r7, #24]
 800dd2a:	f003 0307 	and.w	r3, r3, #7
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00a      	beq.n	800dd48 <prvInitialiseNewTask+0x48>
	__asm volatile
 800dd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd36:	f383 8811 	msr	BASEPRI, r3
 800dd3a:	f3bf 8f6f 	isb	sy
 800dd3e:	f3bf 8f4f 	dsb	sy
 800dd42:	617b      	str	r3, [r7, #20]
}
 800dd44:	bf00      	nop
 800dd46:	e7fe      	b.n	800dd46 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d01f      	beq.n	800dd8e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd4e:	2300      	movs	r3, #0
 800dd50:	61fb      	str	r3, [r7, #28]
 800dd52:	e012      	b.n	800dd7a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dd54:	68ba      	ldr	r2, [r7, #8]
 800dd56:	69fb      	ldr	r3, [r7, #28]
 800dd58:	4413      	add	r3, r2
 800dd5a:	7819      	ldrb	r1, [r3, #0]
 800dd5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	4413      	add	r3, r2
 800dd62:	3334      	adds	r3, #52	; 0x34
 800dd64:	460a      	mov	r2, r1
 800dd66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d006      	beq.n	800dd82 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	3301      	adds	r3, #1
 800dd78:	61fb      	str	r3, [r7, #28]
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	2b0f      	cmp	r3, #15
 800dd7e:	d9e9      	bls.n	800dd54 <prvInitialiseNewTask+0x54>
 800dd80:	e000      	b.n	800dd84 <prvInitialiseNewTask+0x84>
			{
				break;
 800dd82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dd8c:	e003      	b.n	800dd96 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd90:	2200      	movs	r2, #0
 800dd92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd98:	2b06      	cmp	r3, #6
 800dd9a:	d901      	bls.n	800dda0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dd9c:	2306      	movs	r3, #6
 800dd9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dda4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddaa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ddac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddae:	2200      	movs	r2, #0
 800ddb0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb4:	3304      	adds	r3, #4
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7fe f8a6 	bl	800bf08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ddbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddbe:	3318      	adds	r3, #24
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fe f8a1 	bl	800bf08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ddc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddce:	f1c3 0207 	rsb	r2, r3, #7
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ddd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddde:	2200      	movs	r2, #0
 800dde0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde4:	2200      	movs	r2, #0
 800dde6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	68f9      	ldr	r1, [r7, #12]
 800ddee:	69b8      	ldr	r0, [r7, #24]
 800ddf0:	f7fe f91e 	bl	800c030 <pxPortInitialiseStack>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ddfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800de00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de06:	bf00      	nop
 800de08:	3720      	adds	r7, #32
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
	...

0800de10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800de18:	f7fe fa34 	bl	800c284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800de1c:	4b2a      	ldr	r3, [pc, #168]	; (800dec8 <prvAddNewTaskToReadyList+0xb8>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	3301      	adds	r3, #1
 800de22:	4a29      	ldr	r2, [pc, #164]	; (800dec8 <prvAddNewTaskToReadyList+0xb8>)
 800de24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800de26:	4b29      	ldr	r3, [pc, #164]	; (800decc <prvAddNewTaskToReadyList+0xbc>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d109      	bne.n	800de42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800de2e:	4a27      	ldr	r2, [pc, #156]	; (800decc <prvAddNewTaskToReadyList+0xbc>)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800de34:	4b24      	ldr	r3, [pc, #144]	; (800dec8 <prvAddNewTaskToReadyList+0xb8>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d110      	bne.n	800de5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800de3c:	f000 fc0e 	bl	800e65c <prvInitialiseTaskLists>
 800de40:	e00d      	b.n	800de5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800de42:	4b23      	ldr	r3, [pc, #140]	; (800ded0 <prvAddNewTaskToReadyList+0xc0>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d109      	bne.n	800de5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800de4a:	4b20      	ldr	r3, [pc, #128]	; (800decc <prvAddNewTaskToReadyList+0xbc>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de54:	429a      	cmp	r2, r3
 800de56:	d802      	bhi.n	800de5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800de58:	4a1c      	ldr	r2, [pc, #112]	; (800decc <prvAddNewTaskToReadyList+0xbc>)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800de5e:	4b1d      	ldr	r3, [pc, #116]	; (800ded4 <prvAddNewTaskToReadyList+0xc4>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	3301      	adds	r3, #1
 800de64:	4a1b      	ldr	r2, [pc, #108]	; (800ded4 <prvAddNewTaskToReadyList+0xc4>)
 800de66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de6c:	2201      	movs	r2, #1
 800de6e:	409a      	lsls	r2, r3
 800de70:	4b19      	ldr	r3, [pc, #100]	; (800ded8 <prvAddNewTaskToReadyList+0xc8>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	4313      	orrs	r3, r2
 800de76:	4a18      	ldr	r2, [pc, #96]	; (800ded8 <prvAddNewTaskToReadyList+0xc8>)
 800de78:	6013      	str	r3, [r2, #0]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de7e:	4613      	mov	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4413      	add	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	4a15      	ldr	r2, [pc, #84]	; (800dedc <prvAddNewTaskToReadyList+0xcc>)
 800de88:	441a      	add	r2, r3
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	3304      	adds	r3, #4
 800de8e:	4619      	mov	r1, r3
 800de90:	4610      	mov	r0, r2
 800de92:	f7fe f846 	bl	800bf22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800de96:	f7fe fa25 	bl	800c2e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800de9a:	4b0d      	ldr	r3, [pc, #52]	; (800ded0 <prvAddNewTaskToReadyList+0xc0>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d00e      	beq.n	800dec0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dea2:	4b0a      	ldr	r3, [pc, #40]	; (800decc <prvAddNewTaskToReadyList+0xbc>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deac:	429a      	cmp	r2, r3
 800deae:	d207      	bcs.n	800dec0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800deb0:	4b0b      	ldr	r3, [pc, #44]	; (800dee0 <prvAddNewTaskToReadyList+0xd0>)
 800deb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deb6:	601a      	str	r2, [r3, #0]
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dec0:	bf00      	nop
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	240047a8 	.word	0x240047a8
 800decc:	240046a8 	.word	0x240046a8
 800ded0:	240047b4 	.word	0x240047b4
 800ded4:	240047c4 	.word	0x240047c4
 800ded8:	240047b0 	.word	0x240047b0
 800dedc:	240046ac 	.word	0x240046ac
 800dee0:	e000ed04 	.word	0xe000ed04

0800dee4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800deec:	2300      	movs	r3, #0
 800deee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d017      	beq.n	800df26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800def6:	4b13      	ldr	r3, [pc, #76]	; (800df44 <vTaskDelay+0x60>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00a      	beq.n	800df14 <vTaskDelay+0x30>
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	60bb      	str	r3, [r7, #8]
}
 800df10:	bf00      	nop
 800df12:	e7fe      	b.n	800df12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800df14:	f000 f87a 	bl	800e00c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800df18:	2100      	movs	r1, #0
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 ff74 	bl	800ee08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800df20:	f000 f882 	bl	800e028 <xTaskResumeAll>
 800df24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d107      	bne.n	800df3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800df2c:	4b06      	ldr	r3, [pc, #24]	; (800df48 <vTaskDelay+0x64>)
 800df2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df32:	601a      	str	r2, [r3, #0]
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df3c:	bf00      	nop
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	240047d0 	.word	0x240047d0
 800df48:	e000ed04 	.word	0xe000ed04

0800df4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b08a      	sub	sp, #40	; 0x28
 800df50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df52:	2300      	movs	r3, #0
 800df54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df56:	2300      	movs	r3, #0
 800df58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df5a:	463a      	mov	r2, r7
 800df5c:	1d39      	adds	r1, r7, #4
 800df5e:	f107 0308 	add.w	r3, r7, #8
 800df62:	4618      	mov	r0, r3
 800df64:	f7f2 fd20 	bl	80009a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df68:	6839      	ldr	r1, [r7, #0]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	9202      	str	r2, [sp, #8]
 800df70:	9301      	str	r3, [sp, #4]
 800df72:	2300      	movs	r3, #0
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	2300      	movs	r3, #0
 800df78:	460a      	mov	r2, r1
 800df7a:	491e      	ldr	r1, [pc, #120]	; (800dff4 <vTaskStartScheduler+0xa8>)
 800df7c:	481e      	ldr	r0, [pc, #120]	; (800dff8 <vTaskStartScheduler+0xac>)
 800df7e:	f7ff fe1d 	bl	800dbbc <xTaskCreateStatic>
 800df82:	4603      	mov	r3, r0
 800df84:	4a1d      	ldr	r2, [pc, #116]	; (800dffc <vTaskStartScheduler+0xb0>)
 800df86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df88:	4b1c      	ldr	r3, [pc, #112]	; (800dffc <vTaskStartScheduler+0xb0>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d002      	beq.n	800df96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df90:	2301      	movs	r3, #1
 800df92:	617b      	str	r3, [r7, #20]
 800df94:	e001      	b.n	800df9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df96:	2300      	movs	r3, #0
 800df98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d116      	bne.n	800dfce <vTaskStartScheduler+0x82>
	__asm volatile
 800dfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa4:	f383 8811 	msr	BASEPRI, r3
 800dfa8:	f3bf 8f6f 	isb	sy
 800dfac:	f3bf 8f4f 	dsb	sy
 800dfb0:	613b      	str	r3, [r7, #16]
}
 800dfb2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dfb4:	4b12      	ldr	r3, [pc, #72]	; (800e000 <vTaskStartScheduler+0xb4>)
 800dfb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dfbc:	4b11      	ldr	r3, [pc, #68]	; (800e004 <vTaskStartScheduler+0xb8>)
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dfc2:	4b11      	ldr	r3, [pc, #68]	; (800e008 <vTaskStartScheduler+0xbc>)
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dfc8:	f7fe f8ba 	bl	800c140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dfcc:	e00e      	b.n	800dfec <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfd4:	d10a      	bne.n	800dfec <vTaskStartScheduler+0xa0>
	__asm volatile
 800dfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfda:	f383 8811 	msr	BASEPRI, r3
 800dfde:	f3bf 8f6f 	isb	sy
 800dfe2:	f3bf 8f4f 	dsb	sy
 800dfe6:	60fb      	str	r3, [r7, #12]
}
 800dfe8:	bf00      	nop
 800dfea:	e7fe      	b.n	800dfea <vTaskStartScheduler+0x9e>
}
 800dfec:	bf00      	nop
 800dfee:	3718      	adds	r7, #24
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	080242c0 	.word	0x080242c0
 800dff8:	0800e62d 	.word	0x0800e62d
 800dffc:	240047cc 	.word	0x240047cc
 800e000:	240047c8 	.word	0x240047c8
 800e004:	240047b4 	.word	0x240047b4
 800e008:	240047ac 	.word	0x240047ac

0800e00c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e00c:	b480      	push	{r7}
 800e00e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e010:	4b04      	ldr	r3, [pc, #16]	; (800e024 <vTaskSuspendAll+0x18>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	3301      	adds	r3, #1
 800e016:	4a03      	ldr	r2, [pc, #12]	; (800e024 <vTaskSuspendAll+0x18>)
 800e018:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e01a:	bf00      	nop
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr
 800e024:	240047d0 	.word	0x240047d0

0800e028 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e02e:	2300      	movs	r3, #0
 800e030:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e032:	2300      	movs	r3, #0
 800e034:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e036:	4b41      	ldr	r3, [pc, #260]	; (800e13c <xTaskResumeAll+0x114>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d10a      	bne.n	800e054 <xTaskResumeAll+0x2c>
	__asm volatile
 800e03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e042:	f383 8811 	msr	BASEPRI, r3
 800e046:	f3bf 8f6f 	isb	sy
 800e04a:	f3bf 8f4f 	dsb	sy
 800e04e:	603b      	str	r3, [r7, #0]
}
 800e050:	bf00      	nop
 800e052:	e7fe      	b.n	800e052 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e054:	f7fe f916 	bl	800c284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e058:	4b38      	ldr	r3, [pc, #224]	; (800e13c <xTaskResumeAll+0x114>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	3b01      	subs	r3, #1
 800e05e:	4a37      	ldr	r2, [pc, #220]	; (800e13c <xTaskResumeAll+0x114>)
 800e060:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e062:	4b36      	ldr	r3, [pc, #216]	; (800e13c <xTaskResumeAll+0x114>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d161      	bne.n	800e12e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e06a:	4b35      	ldr	r3, [pc, #212]	; (800e140 <xTaskResumeAll+0x118>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d05d      	beq.n	800e12e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e072:	e02e      	b.n	800e0d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e074:	4b33      	ldr	r3, [pc, #204]	; (800e144 <xTaskResumeAll+0x11c>)
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	3318      	adds	r3, #24
 800e080:	4618      	mov	r0, r3
 800e082:	f7fd ffab 	bl	800bfdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	3304      	adds	r3, #4
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fd ffa6 	bl	800bfdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e094:	2201      	movs	r2, #1
 800e096:	409a      	lsls	r2, r3
 800e098:	4b2b      	ldr	r3, [pc, #172]	; (800e148 <xTaskResumeAll+0x120>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4313      	orrs	r3, r2
 800e09e:	4a2a      	ldr	r2, [pc, #168]	; (800e148 <xTaskResumeAll+0x120>)
 800e0a0:	6013      	str	r3, [r2, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	4413      	add	r3, r2
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	4a27      	ldr	r2, [pc, #156]	; (800e14c <xTaskResumeAll+0x124>)
 800e0b0:	441a      	add	r2, r3
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	3304      	adds	r3, #4
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	f7fd ff32 	bl	800bf22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c2:	4b23      	ldr	r3, [pc, #140]	; (800e150 <xTaskResumeAll+0x128>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d302      	bcc.n	800e0d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e0cc:	4b21      	ldr	r3, [pc, #132]	; (800e154 <xTaskResumeAll+0x12c>)
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0d2:	4b1c      	ldr	r3, [pc, #112]	; (800e144 <xTaskResumeAll+0x11c>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d1cc      	bne.n	800e074 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d001      	beq.n	800e0e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e0e0:	f000 fb5a 	bl	800e798 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e0e4:	4b1c      	ldr	r3, [pc, #112]	; (800e158 <xTaskResumeAll+0x130>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d010      	beq.n	800e112 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e0f0:	f000 f858 	bl	800e1a4 <xTaskIncrementTick>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d002      	beq.n	800e100 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e0fa:	4b16      	ldr	r3, [pc, #88]	; (800e154 <xTaskResumeAll+0x12c>)
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	3b01      	subs	r3, #1
 800e104:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1f1      	bne.n	800e0f0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e10c:	4b12      	ldr	r3, [pc, #72]	; (800e158 <xTaskResumeAll+0x130>)
 800e10e:	2200      	movs	r2, #0
 800e110:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e112:	4b10      	ldr	r3, [pc, #64]	; (800e154 <xTaskResumeAll+0x12c>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d009      	beq.n	800e12e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e11a:	2301      	movs	r3, #1
 800e11c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e11e:	4b0f      	ldr	r3, [pc, #60]	; (800e15c <xTaskResumeAll+0x134>)
 800e120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e124:	601a      	str	r2, [r3, #0]
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e12e:	f7fe f8d9 	bl	800c2e4 <vPortExitCritical>

	return xAlreadyYielded;
 800e132:	68bb      	ldr	r3, [r7, #8]
}
 800e134:	4618      	mov	r0, r3
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	240047d0 	.word	0x240047d0
 800e140:	240047a8 	.word	0x240047a8
 800e144:	24004768 	.word	0x24004768
 800e148:	240047b0 	.word	0x240047b0
 800e14c:	240046ac 	.word	0x240046ac
 800e150:	240046a8 	.word	0x240046a8
 800e154:	240047bc 	.word	0x240047bc
 800e158:	240047b8 	.word	0x240047b8
 800e15c:	e000ed04 	.word	0xe000ed04

0800e160 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e166:	4b05      	ldr	r3, [pc, #20]	; (800e17c <xTaskGetTickCount+0x1c>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e16c:	687b      	ldr	r3, [r7, #4]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	370c      	adds	r7, #12
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr
 800e17a:	bf00      	nop
 800e17c:	240047ac 	.word	0x240047ac

0800e180 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e186:	f7fe f95f 	bl	800c448 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e18a:	2300      	movs	r3, #0
 800e18c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e18e:	4b04      	ldr	r3, [pc, #16]	; (800e1a0 <xTaskGetTickCountFromISR+0x20>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e194:	683b      	ldr	r3, [r7, #0]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	240047ac 	.word	0x240047ac

0800e1a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b086      	sub	sp, #24
 800e1a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1ae:	4b4e      	ldr	r3, [pc, #312]	; (800e2e8 <xTaskIncrementTick+0x144>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	f040 8088 	bne.w	800e2c8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e1b8:	4b4c      	ldr	r3, [pc, #304]	; (800e2ec <xTaskIncrementTick+0x148>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e1c0:	4a4a      	ldr	r2, [pc, #296]	; (800e2ec <xTaskIncrementTick+0x148>)
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d120      	bne.n	800e20e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e1cc:	4b48      	ldr	r3, [pc, #288]	; (800e2f0 <xTaskIncrementTick+0x14c>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00a      	beq.n	800e1ec <xTaskIncrementTick+0x48>
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	603b      	str	r3, [r7, #0]
}
 800e1e8:	bf00      	nop
 800e1ea:	e7fe      	b.n	800e1ea <xTaskIncrementTick+0x46>
 800e1ec:	4b40      	ldr	r3, [pc, #256]	; (800e2f0 <xTaskIncrementTick+0x14c>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	60fb      	str	r3, [r7, #12]
 800e1f2:	4b40      	ldr	r3, [pc, #256]	; (800e2f4 <xTaskIncrementTick+0x150>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a3e      	ldr	r2, [pc, #248]	; (800e2f0 <xTaskIncrementTick+0x14c>)
 800e1f8:	6013      	str	r3, [r2, #0]
 800e1fa:	4a3e      	ldr	r2, [pc, #248]	; (800e2f4 <xTaskIncrementTick+0x150>)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6013      	str	r3, [r2, #0]
 800e200:	4b3d      	ldr	r3, [pc, #244]	; (800e2f8 <xTaskIncrementTick+0x154>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	3301      	adds	r3, #1
 800e206:	4a3c      	ldr	r2, [pc, #240]	; (800e2f8 <xTaskIncrementTick+0x154>)
 800e208:	6013      	str	r3, [r2, #0]
 800e20a:	f000 fac5 	bl	800e798 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e20e:	4b3b      	ldr	r3, [pc, #236]	; (800e2fc <xTaskIncrementTick+0x158>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	693a      	ldr	r2, [r7, #16]
 800e214:	429a      	cmp	r2, r3
 800e216:	d348      	bcc.n	800e2aa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e218:	4b35      	ldr	r3, [pc, #212]	; (800e2f0 <xTaskIncrementTick+0x14c>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d104      	bne.n	800e22c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e222:	4b36      	ldr	r3, [pc, #216]	; (800e2fc <xTaskIncrementTick+0x158>)
 800e224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e228:	601a      	str	r2, [r3, #0]
					break;
 800e22a:	e03e      	b.n	800e2aa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e22c:	4b30      	ldr	r3, [pc, #192]	; (800e2f0 <xTaskIncrementTick+0x14c>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e23c:	693a      	ldr	r2, [r7, #16]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	429a      	cmp	r2, r3
 800e242:	d203      	bcs.n	800e24c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e244:	4a2d      	ldr	r2, [pc, #180]	; (800e2fc <xTaskIncrementTick+0x158>)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e24a:	e02e      	b.n	800e2aa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	3304      	adds	r3, #4
 800e250:	4618      	mov	r0, r3
 800e252:	f7fd fec3 	bl	800bfdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d004      	beq.n	800e268 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	3318      	adds	r3, #24
 800e262:	4618      	mov	r0, r3
 800e264:	f7fd feba 	bl	800bfdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e26c:	2201      	movs	r2, #1
 800e26e:	409a      	lsls	r2, r3
 800e270:	4b23      	ldr	r3, [pc, #140]	; (800e300 <xTaskIncrementTick+0x15c>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4313      	orrs	r3, r2
 800e276:	4a22      	ldr	r2, [pc, #136]	; (800e300 <xTaskIncrementTick+0x15c>)
 800e278:	6013      	str	r3, [r2, #0]
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e27e:	4613      	mov	r3, r2
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	4413      	add	r3, r2
 800e284:	009b      	lsls	r3, r3, #2
 800e286:	4a1f      	ldr	r2, [pc, #124]	; (800e304 <xTaskIncrementTick+0x160>)
 800e288:	441a      	add	r2, r3
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	3304      	adds	r3, #4
 800e28e:	4619      	mov	r1, r3
 800e290:	4610      	mov	r0, r2
 800e292:	f7fd fe46 	bl	800bf22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e29a:	4b1b      	ldr	r3, [pc, #108]	; (800e308 <xTaskIncrementTick+0x164>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d3b9      	bcc.n	800e218 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2a8:	e7b6      	b.n	800e218 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e2aa:	4b17      	ldr	r3, [pc, #92]	; (800e308 <xTaskIncrementTick+0x164>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2b0:	4914      	ldr	r1, [pc, #80]	; (800e304 <xTaskIncrementTick+0x160>)
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4413      	add	r3, r2
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	440b      	add	r3, r1
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d907      	bls.n	800e2d2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	617b      	str	r3, [r7, #20]
 800e2c6:	e004      	b.n	800e2d2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e2c8:	4b10      	ldr	r3, [pc, #64]	; (800e30c <xTaskIncrementTick+0x168>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	4a0f      	ldr	r2, [pc, #60]	; (800e30c <xTaskIncrementTick+0x168>)
 800e2d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e2d2:	4b0f      	ldr	r3, [pc, #60]	; (800e310 <xTaskIncrementTick+0x16c>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d001      	beq.n	800e2de <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e2de:	697b      	ldr	r3, [r7, #20]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3718      	adds	r7, #24
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	240047d0 	.word	0x240047d0
 800e2ec:	240047ac 	.word	0x240047ac
 800e2f0:	24004760 	.word	0x24004760
 800e2f4:	24004764 	.word	0x24004764
 800e2f8:	240047c0 	.word	0x240047c0
 800e2fc:	240047c8 	.word	0x240047c8
 800e300:	240047b0 	.word	0x240047b0
 800e304:	240046ac 	.word	0x240046ac
 800e308:	240046a8 	.word	0x240046a8
 800e30c:	240047b8 	.word	0x240047b8
 800e310:	240047bc 	.word	0x240047bc

0800e314 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e314:	b480      	push	{r7}
 800e316:	b087      	sub	sp, #28
 800e318:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e31a:	4b27      	ldr	r3, [pc, #156]	; (800e3b8 <vTaskSwitchContext+0xa4>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d003      	beq.n	800e32a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e322:	4b26      	ldr	r3, [pc, #152]	; (800e3bc <vTaskSwitchContext+0xa8>)
 800e324:	2201      	movs	r2, #1
 800e326:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e328:	e03f      	b.n	800e3aa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e32a:	4b24      	ldr	r3, [pc, #144]	; (800e3bc <vTaskSwitchContext+0xa8>)
 800e32c:	2200      	movs	r2, #0
 800e32e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e330:	4b23      	ldr	r3, [pc, #140]	; (800e3c0 <vTaskSwitchContext+0xac>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	fab3 f383 	clz	r3, r3
 800e33c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e33e:	7afb      	ldrb	r3, [r7, #11]
 800e340:	f1c3 031f 	rsb	r3, r3, #31
 800e344:	617b      	str	r3, [r7, #20]
 800e346:	491f      	ldr	r1, [pc, #124]	; (800e3c4 <vTaskSwitchContext+0xb0>)
 800e348:	697a      	ldr	r2, [r7, #20]
 800e34a:	4613      	mov	r3, r2
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	4413      	add	r3, r2
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	440b      	add	r3, r1
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10a      	bne.n	800e370 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	607b      	str	r3, [r7, #4]
}
 800e36c:	bf00      	nop
 800e36e:	e7fe      	b.n	800e36e <vTaskSwitchContext+0x5a>
 800e370:	697a      	ldr	r2, [r7, #20]
 800e372:	4613      	mov	r3, r2
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	4413      	add	r3, r2
 800e378:	009b      	lsls	r3, r3, #2
 800e37a:	4a12      	ldr	r2, [pc, #72]	; (800e3c4 <vTaskSwitchContext+0xb0>)
 800e37c:	4413      	add	r3, r2
 800e37e:	613b      	str	r3, [r7, #16]
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	685a      	ldr	r2, [r3, #4]
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	605a      	str	r2, [r3, #4]
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	685a      	ldr	r2, [r3, #4]
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	3308      	adds	r3, #8
 800e392:	429a      	cmp	r2, r3
 800e394:	d104      	bne.n	800e3a0 <vTaskSwitchContext+0x8c>
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	685a      	ldr	r2, [r3, #4]
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	605a      	str	r2, [r3, #4]
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	68db      	ldr	r3, [r3, #12]
 800e3a6:	4a08      	ldr	r2, [pc, #32]	; (800e3c8 <vTaskSwitchContext+0xb4>)
 800e3a8:	6013      	str	r3, [r2, #0]
}
 800e3aa:	bf00      	nop
 800e3ac:	371c      	adds	r7, #28
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop
 800e3b8:	240047d0 	.word	0x240047d0
 800e3bc:	240047bc 	.word	0x240047bc
 800e3c0:	240047b0 	.word	0x240047b0
 800e3c4:	240046ac 	.word	0x240046ac
 800e3c8:	240046a8 	.word	0x240046a8

0800e3cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d10a      	bne.n	800e3f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e0:	f383 8811 	msr	BASEPRI, r3
 800e3e4:	f3bf 8f6f 	isb	sy
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	60fb      	str	r3, [r7, #12]
}
 800e3ee:	bf00      	nop
 800e3f0:	e7fe      	b.n	800e3f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3f2:	4b07      	ldr	r3, [pc, #28]	; (800e410 <vTaskPlaceOnEventList+0x44>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	3318      	adds	r3, #24
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f7fd fdb5 	bl	800bf6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e400:	2101      	movs	r1, #1
 800e402:	6838      	ldr	r0, [r7, #0]
 800e404:	f000 fd00 	bl	800ee08 <prvAddCurrentTaskToDelayedList>
}
 800e408:	bf00      	nop
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	240046a8 	.word	0x240046a8

0800e414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b086      	sub	sp, #24
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	68db      	ldr	r3, [r3, #12]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d10a      	bne.n	800e440 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e42e:	f383 8811 	msr	BASEPRI, r3
 800e432:	f3bf 8f6f 	isb	sy
 800e436:	f3bf 8f4f 	dsb	sy
 800e43a:	60fb      	str	r3, [r7, #12]
}
 800e43c:	bf00      	nop
 800e43e:	e7fe      	b.n	800e43e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	3318      	adds	r3, #24
 800e444:	4618      	mov	r0, r3
 800e446:	f7fd fdc9 	bl	800bfdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e44a:	4b1d      	ldr	r3, [pc, #116]	; (800e4c0 <xTaskRemoveFromEventList+0xac>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d11c      	bne.n	800e48c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	3304      	adds	r3, #4
 800e456:	4618      	mov	r0, r3
 800e458:	f7fd fdc0 	bl	800bfdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e460:	2201      	movs	r2, #1
 800e462:	409a      	lsls	r2, r3
 800e464:	4b17      	ldr	r3, [pc, #92]	; (800e4c4 <xTaskRemoveFromEventList+0xb0>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	4313      	orrs	r3, r2
 800e46a:	4a16      	ldr	r2, [pc, #88]	; (800e4c4 <xTaskRemoveFromEventList+0xb0>)
 800e46c:	6013      	str	r3, [r2, #0]
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e472:	4613      	mov	r3, r2
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	4413      	add	r3, r2
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	4a13      	ldr	r2, [pc, #76]	; (800e4c8 <xTaskRemoveFromEventList+0xb4>)
 800e47c:	441a      	add	r2, r3
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	3304      	adds	r3, #4
 800e482:	4619      	mov	r1, r3
 800e484:	4610      	mov	r0, r2
 800e486:	f7fd fd4c 	bl	800bf22 <vListInsertEnd>
 800e48a:	e005      	b.n	800e498 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	3318      	adds	r3, #24
 800e490:	4619      	mov	r1, r3
 800e492:	480e      	ldr	r0, [pc, #56]	; (800e4cc <xTaskRemoveFromEventList+0xb8>)
 800e494:	f7fd fd45 	bl	800bf22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e49c:	4b0c      	ldr	r3, [pc, #48]	; (800e4d0 <xTaskRemoveFromEventList+0xbc>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d905      	bls.n	800e4b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e4aa:	4b0a      	ldr	r3, [pc, #40]	; (800e4d4 <xTaskRemoveFromEventList+0xc0>)
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	601a      	str	r2, [r3, #0]
 800e4b0:	e001      	b.n	800e4b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e4b6:	697b      	ldr	r3, [r7, #20]
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3718      	adds	r7, #24
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	240047d0 	.word	0x240047d0
 800e4c4:	240047b0 	.word	0x240047b0
 800e4c8:	240046ac 	.word	0x240046ac
 800e4cc:	24004768 	.word	0x24004768
 800e4d0:	240046a8 	.word	0x240046a8
 800e4d4:	240047bc 	.word	0x240047bc

0800e4d8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d10a      	bne.n	800e4fc <vTaskSetTimeOutState+0x24>
	__asm volatile
 800e4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ea:	f383 8811 	msr	BASEPRI, r3
 800e4ee:	f3bf 8f6f 	isb	sy
 800e4f2:	f3bf 8f4f 	dsb	sy
 800e4f6:	60fb      	str	r3, [r7, #12]
}
 800e4f8:	bf00      	nop
 800e4fa:	e7fe      	b.n	800e4fa <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800e4fc:	f7fd fec2 	bl	800c284 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e500:	4b06      	ldr	r3, [pc, #24]	; (800e51c <vTaskSetTimeOutState+0x44>)
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800e508:	4b05      	ldr	r3, [pc, #20]	; (800e520 <vTaskSetTimeOutState+0x48>)
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800e510:	f7fd fee8 	bl	800c2e4 <vPortExitCritical>
}
 800e514:	bf00      	nop
 800e516:	3710      	adds	r7, #16
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	240047c0 	.word	0x240047c0
 800e520:	240047ac 	.word	0x240047ac

0800e524 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e52c:	4b06      	ldr	r3, [pc, #24]	; (800e548 <vTaskInternalSetTimeOutState+0x24>)
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e534:	4b05      	ldr	r3, [pc, #20]	; (800e54c <vTaskInternalSetTimeOutState+0x28>)
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	605a      	str	r2, [r3, #4]
}
 800e53c:	bf00      	nop
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr
 800e548:	240047c0 	.word	0x240047c0
 800e54c:	240047ac 	.word	0x240047ac

0800e550 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b088      	sub	sp, #32
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d10a      	bne.n	800e576 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	613b      	str	r3, [r7, #16]
}
 800e572:	bf00      	nop
 800e574:	e7fe      	b.n	800e574 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d10a      	bne.n	800e592 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e580:	f383 8811 	msr	BASEPRI, r3
 800e584:	f3bf 8f6f 	isb	sy
 800e588:	f3bf 8f4f 	dsb	sy
 800e58c:	60fb      	str	r3, [r7, #12]
}
 800e58e:	bf00      	nop
 800e590:	e7fe      	b.n	800e590 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e592:	f7fd fe77 	bl	800c284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e596:	4b1d      	ldr	r3, [pc, #116]	; (800e60c <xTaskCheckForTimeOut+0xbc>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	69ba      	ldr	r2, [r7, #24]
 800e5a2:	1ad3      	subs	r3, r2, r3
 800e5a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5ae:	d102      	bne.n	800e5b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	61fb      	str	r3, [r7, #28]
 800e5b4:	e023      	b.n	800e5fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	4b15      	ldr	r3, [pc, #84]	; (800e610 <xTaskCheckForTimeOut+0xc0>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d007      	beq.n	800e5d2 <xTaskCheckForTimeOut+0x82>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	69ba      	ldr	r2, [r7, #24]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d302      	bcc.n	800e5d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	61fb      	str	r3, [r7, #28]
 800e5d0:	e015      	b.n	800e5fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	697a      	ldr	r2, [r7, #20]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d20b      	bcs.n	800e5f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	1ad2      	subs	r2, r2, r3
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff ff9b 	bl	800e524 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	61fb      	str	r3, [r7, #28]
 800e5f2:	e004      	b.n	800e5fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e5fe:	f7fd fe71 	bl	800c2e4 <vPortExitCritical>

	return xReturn;
 800e602:	69fb      	ldr	r3, [r7, #28]
}
 800e604:	4618      	mov	r0, r3
 800e606:	3720      	adds	r7, #32
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	240047ac 	.word	0x240047ac
 800e610:	240047c0 	.word	0x240047c0

0800e614 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e614:	b480      	push	{r7}
 800e616:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e618:	4b03      	ldr	r3, [pc, #12]	; (800e628 <vTaskMissedYield+0x14>)
 800e61a:	2201      	movs	r2, #1
 800e61c:	601a      	str	r2, [r3, #0]
}
 800e61e:	bf00      	nop
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr
 800e628:	240047bc 	.word	0x240047bc

0800e62c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e634:	f000 f852 	bl	800e6dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e638:	4b06      	ldr	r3, [pc, #24]	; (800e654 <prvIdleTask+0x28>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d9f9      	bls.n	800e634 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e640:	4b05      	ldr	r3, [pc, #20]	; (800e658 <prvIdleTask+0x2c>)
 800e642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e646:	601a      	str	r2, [r3, #0]
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e650:	e7f0      	b.n	800e634 <prvIdleTask+0x8>
 800e652:	bf00      	nop
 800e654:	240046ac 	.word	0x240046ac
 800e658:	e000ed04 	.word	0xe000ed04

0800e65c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e662:	2300      	movs	r3, #0
 800e664:	607b      	str	r3, [r7, #4]
 800e666:	e00c      	b.n	800e682 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	4613      	mov	r3, r2
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	4413      	add	r3, r2
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	4a12      	ldr	r2, [pc, #72]	; (800e6bc <prvInitialiseTaskLists+0x60>)
 800e674:	4413      	add	r3, r2
 800e676:	4618      	mov	r0, r3
 800e678:	f7fd fc26 	bl	800bec8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	3301      	adds	r3, #1
 800e680:	607b      	str	r3, [r7, #4]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2b06      	cmp	r3, #6
 800e686:	d9ef      	bls.n	800e668 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e688:	480d      	ldr	r0, [pc, #52]	; (800e6c0 <prvInitialiseTaskLists+0x64>)
 800e68a:	f7fd fc1d 	bl	800bec8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e68e:	480d      	ldr	r0, [pc, #52]	; (800e6c4 <prvInitialiseTaskLists+0x68>)
 800e690:	f7fd fc1a 	bl	800bec8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e694:	480c      	ldr	r0, [pc, #48]	; (800e6c8 <prvInitialiseTaskLists+0x6c>)
 800e696:	f7fd fc17 	bl	800bec8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e69a:	480c      	ldr	r0, [pc, #48]	; (800e6cc <prvInitialiseTaskLists+0x70>)
 800e69c:	f7fd fc14 	bl	800bec8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e6a0:	480b      	ldr	r0, [pc, #44]	; (800e6d0 <prvInitialiseTaskLists+0x74>)
 800e6a2:	f7fd fc11 	bl	800bec8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e6a6:	4b0b      	ldr	r3, [pc, #44]	; (800e6d4 <prvInitialiseTaskLists+0x78>)
 800e6a8:	4a05      	ldr	r2, [pc, #20]	; (800e6c0 <prvInitialiseTaskLists+0x64>)
 800e6aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e6ac:	4b0a      	ldr	r3, [pc, #40]	; (800e6d8 <prvInitialiseTaskLists+0x7c>)
 800e6ae:	4a05      	ldr	r2, [pc, #20]	; (800e6c4 <prvInitialiseTaskLists+0x68>)
 800e6b0:	601a      	str	r2, [r3, #0]
}
 800e6b2:	bf00      	nop
 800e6b4:	3708      	adds	r7, #8
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	240046ac 	.word	0x240046ac
 800e6c0:	24004738 	.word	0x24004738
 800e6c4:	2400474c 	.word	0x2400474c
 800e6c8:	24004768 	.word	0x24004768
 800e6cc:	2400477c 	.word	0x2400477c
 800e6d0:	24004794 	.word	0x24004794
 800e6d4:	24004760 	.word	0x24004760
 800e6d8:	24004764 	.word	0x24004764

0800e6dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e6e2:	e019      	b.n	800e718 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e6e4:	f7fd fdce 	bl	800c284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6e8:	4b10      	ldr	r3, [pc, #64]	; (800e72c <prvCheckTasksWaitingTermination+0x50>)
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	68db      	ldr	r3, [r3, #12]
 800e6ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	3304      	adds	r3, #4
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7fd fc71 	bl	800bfdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e6fa:	4b0d      	ldr	r3, [pc, #52]	; (800e730 <prvCheckTasksWaitingTermination+0x54>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	3b01      	subs	r3, #1
 800e700:	4a0b      	ldr	r2, [pc, #44]	; (800e730 <prvCheckTasksWaitingTermination+0x54>)
 800e702:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e704:	4b0b      	ldr	r3, [pc, #44]	; (800e734 <prvCheckTasksWaitingTermination+0x58>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	3b01      	subs	r3, #1
 800e70a:	4a0a      	ldr	r2, [pc, #40]	; (800e734 <prvCheckTasksWaitingTermination+0x58>)
 800e70c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e70e:	f7fd fde9 	bl	800c2e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 f810 	bl	800e738 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e718:	4b06      	ldr	r3, [pc, #24]	; (800e734 <prvCheckTasksWaitingTermination+0x58>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1e1      	bne.n	800e6e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e720:	bf00      	nop
 800e722:	bf00      	nop
 800e724:	3708      	adds	r7, #8
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	2400477c 	.word	0x2400477c
 800e730:	240047a8 	.word	0x240047a8
 800e734:	24004790 	.word	0x24004790

0800e738 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e746:	2b00      	cmp	r3, #0
 800e748:	d108      	bne.n	800e75c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fd faa4 	bl	800bc9c <vPortFree>
				vPortFree( pxTCB );
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f7fd faa1 	bl	800bc9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e75a:	e018      	b.n	800e78e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e762:	2b01      	cmp	r3, #1
 800e764:	d103      	bne.n	800e76e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f7fd fa98 	bl	800bc9c <vPortFree>
	}
 800e76c:	e00f      	b.n	800e78e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e774:	2b02      	cmp	r3, #2
 800e776:	d00a      	beq.n	800e78e <prvDeleteTCB+0x56>
	__asm volatile
 800e778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e77c:	f383 8811 	msr	BASEPRI, r3
 800e780:	f3bf 8f6f 	isb	sy
 800e784:	f3bf 8f4f 	dsb	sy
 800e788:	60fb      	str	r3, [r7, #12]
}
 800e78a:	bf00      	nop
 800e78c:	e7fe      	b.n	800e78c <prvDeleteTCB+0x54>
	}
 800e78e:	bf00      	nop
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
	...

0800e798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e79e:	4b0c      	ldr	r3, [pc, #48]	; (800e7d0 <prvResetNextTaskUnblockTime+0x38>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d104      	bne.n	800e7b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e7a8:	4b0a      	ldr	r3, [pc, #40]	; (800e7d4 <prvResetNextTaskUnblockTime+0x3c>)
 800e7aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e7b0:	e008      	b.n	800e7c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7b2:	4b07      	ldr	r3, [pc, #28]	; (800e7d0 <prvResetNextTaskUnblockTime+0x38>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	4a04      	ldr	r2, [pc, #16]	; (800e7d4 <prvResetNextTaskUnblockTime+0x3c>)
 800e7c2:	6013      	str	r3, [r2, #0]
}
 800e7c4:	bf00      	nop
 800e7c6:	370c      	adds	r7, #12
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr
 800e7d0:	24004760 	.word	0x24004760
 800e7d4:	240047c8 	.word	0x240047c8

0800e7d8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e7de:	4b05      	ldr	r3, [pc, #20]	; (800e7f4 <xTaskGetCurrentTaskHandle+0x1c>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e7e4:	687b      	ldr	r3, [r7, #4]
	}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	370c      	adds	r7, #12
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop
 800e7f4:	240046a8 	.word	0x240046a8

0800e7f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e7fe:	4b0b      	ldr	r3, [pc, #44]	; (800e82c <xTaskGetSchedulerState+0x34>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d102      	bne.n	800e80c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e806:	2301      	movs	r3, #1
 800e808:	607b      	str	r3, [r7, #4]
 800e80a:	e008      	b.n	800e81e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e80c:	4b08      	ldr	r3, [pc, #32]	; (800e830 <xTaskGetSchedulerState+0x38>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d102      	bne.n	800e81a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e814:	2302      	movs	r3, #2
 800e816:	607b      	str	r3, [r7, #4]
 800e818:	e001      	b.n	800e81e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e81a:	2300      	movs	r3, #0
 800e81c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e81e:	687b      	ldr	r3, [r7, #4]
	}
 800e820:	4618      	mov	r0, r3
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr
 800e82c:	240047b4 	.word	0x240047b4
 800e830:	240047d0 	.word	0x240047d0

0800e834 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e834:	b580      	push	{r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e840:	2300      	movs	r3, #0
 800e842:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d069      	beq.n	800e91e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e84e:	4b36      	ldr	r3, [pc, #216]	; (800e928 <xTaskPriorityInherit+0xf4>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e854:	429a      	cmp	r2, r3
 800e856:	d259      	bcs.n	800e90c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	699b      	ldr	r3, [r3, #24]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	db06      	blt.n	800e86e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e860:	4b31      	ldr	r3, [pc, #196]	; (800e928 <xTaskPriorityInherit+0xf4>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e866:	f1c3 0207 	rsb	r2, r3, #7
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	6959      	ldr	r1, [r3, #20]
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e876:	4613      	mov	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	4413      	add	r3, r2
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	4a2b      	ldr	r2, [pc, #172]	; (800e92c <xTaskPriorityInherit+0xf8>)
 800e880:	4413      	add	r3, r2
 800e882:	4299      	cmp	r1, r3
 800e884:	d13a      	bne.n	800e8fc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	3304      	adds	r3, #4
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7fd fba6 	bl	800bfdc <uxListRemove>
 800e890:	4603      	mov	r3, r0
 800e892:	2b00      	cmp	r3, #0
 800e894:	d115      	bne.n	800e8c2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e89a:	4924      	ldr	r1, [pc, #144]	; (800e92c <xTaskPriorityInherit+0xf8>)
 800e89c:	4613      	mov	r3, r2
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	4413      	add	r3, r2
 800e8a2:	009b      	lsls	r3, r3, #2
 800e8a4:	440b      	add	r3, r1
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d10a      	bne.n	800e8c2 <xTaskPriorityInherit+0x8e>
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e8b6:	43da      	mvns	r2, r3
 800e8b8:	4b1d      	ldr	r3, [pc, #116]	; (800e930 <xTaskPriorityInherit+0xfc>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4013      	ands	r3, r2
 800e8be:	4a1c      	ldr	r2, [pc, #112]	; (800e930 <xTaskPriorityInherit+0xfc>)
 800e8c0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e8c2:	4b19      	ldr	r3, [pc, #100]	; (800e928 <xTaskPriorityInherit+0xf4>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	409a      	lsls	r2, r3
 800e8d4:	4b16      	ldr	r3, [pc, #88]	; (800e930 <xTaskPriorityInherit+0xfc>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	4a15      	ldr	r2, [pc, #84]	; (800e930 <xTaskPriorityInherit+0xfc>)
 800e8dc:	6013      	str	r3, [r2, #0]
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8e2:	4613      	mov	r3, r2
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	4413      	add	r3, r2
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4a10      	ldr	r2, [pc, #64]	; (800e92c <xTaskPriorityInherit+0xf8>)
 800e8ec:	441a      	add	r2, r3
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	3304      	adds	r3, #4
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	4610      	mov	r0, r2
 800e8f6:	f7fd fb14 	bl	800bf22 <vListInsertEnd>
 800e8fa:	e004      	b.n	800e906 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e8fc:	4b0a      	ldr	r3, [pc, #40]	; (800e928 <xTaskPriorityInherit+0xf4>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e906:	2301      	movs	r3, #1
 800e908:	60fb      	str	r3, [r7, #12]
 800e90a:	e008      	b.n	800e91e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e910:	4b05      	ldr	r3, [pc, #20]	; (800e928 <xTaskPriorityInherit+0xf4>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e916:	429a      	cmp	r2, r3
 800e918:	d201      	bcs.n	800e91e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e91a:	2301      	movs	r3, #1
 800e91c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e91e:	68fb      	ldr	r3, [r7, #12]
	}
 800e920:	4618      	mov	r0, r3
 800e922:	3710      	adds	r7, #16
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	240046a8 	.word	0x240046a8
 800e92c:	240046ac 	.word	0x240046ac
 800e930:	240047b0 	.word	0x240047b0

0800e934 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e934:	b580      	push	{r7, lr}
 800e936:	b086      	sub	sp, #24
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e940:	2300      	movs	r3, #0
 800e942:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d06e      	beq.n	800ea28 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e94a:	4b3a      	ldr	r3, [pc, #232]	; (800ea34 <xTaskPriorityDisinherit+0x100>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	693a      	ldr	r2, [r7, #16]
 800e950:	429a      	cmp	r2, r3
 800e952:	d00a      	beq.n	800e96a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e958:	f383 8811 	msr	BASEPRI, r3
 800e95c:	f3bf 8f6f 	isb	sy
 800e960:	f3bf 8f4f 	dsb	sy
 800e964:	60fb      	str	r3, [r7, #12]
}
 800e966:	bf00      	nop
 800e968:	e7fe      	b.n	800e968 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d10a      	bne.n	800e988 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e976:	f383 8811 	msr	BASEPRI, r3
 800e97a:	f3bf 8f6f 	isb	sy
 800e97e:	f3bf 8f4f 	dsb	sy
 800e982:	60bb      	str	r3, [r7, #8]
}
 800e984:	bf00      	nop
 800e986:	e7fe      	b.n	800e986 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e98c:	1e5a      	subs	r2, r3, #1
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d044      	beq.n	800ea28 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d140      	bne.n	800ea28 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	3304      	adds	r3, #4
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7fd fb16 	bl	800bfdc <uxListRemove>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d115      	bne.n	800e9e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9ba:	491f      	ldr	r1, [pc, #124]	; (800ea38 <xTaskPriorityDisinherit+0x104>)
 800e9bc:	4613      	mov	r3, r2
 800e9be:	009b      	lsls	r3, r3, #2
 800e9c0:	4413      	add	r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	440b      	add	r3, r1
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d10a      	bne.n	800e9e2 <xTaskPriorityDisinherit+0xae>
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	fa02 f303 	lsl.w	r3, r2, r3
 800e9d6:	43da      	mvns	r2, r3
 800e9d8:	4b18      	ldr	r3, [pc, #96]	; (800ea3c <xTaskPriorityDisinherit+0x108>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4013      	ands	r3, r2
 800e9de:	4a17      	ldr	r2, [pc, #92]	; (800ea3c <xTaskPriorityDisinherit+0x108>)
 800e9e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9ee:	f1c3 0207 	rsb	r2, r3, #7
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	409a      	lsls	r2, r3
 800e9fe:	4b0f      	ldr	r3, [pc, #60]	; (800ea3c <xTaskPriorityDisinherit+0x108>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4313      	orrs	r3, r2
 800ea04:	4a0d      	ldr	r2, [pc, #52]	; (800ea3c <xTaskPriorityDisinherit+0x108>)
 800ea06:	6013      	str	r3, [r2, #0]
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	009b      	lsls	r3, r3, #2
 800ea10:	4413      	add	r3, r2
 800ea12:	009b      	lsls	r3, r3, #2
 800ea14:	4a08      	ldr	r2, [pc, #32]	; (800ea38 <xTaskPriorityDisinherit+0x104>)
 800ea16:	441a      	add	r2, r3
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	3304      	adds	r3, #4
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	4610      	mov	r0, r2
 800ea20:	f7fd fa7f 	bl	800bf22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ea24:	2301      	movs	r3, #1
 800ea26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea28:	697b      	ldr	r3, [r7, #20]
	}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3718      	adds	r7, #24
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	240046a8 	.word	0x240046a8
 800ea38:	240046ac 	.word	0x240046ac
 800ea3c:	240047b0 	.word	0x240047b0

0800ea40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b088      	sub	sp, #32
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f000 8083 	beq.w	800eb60 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d10a      	bne.n	800ea78 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ea62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea66:	f383 8811 	msr	BASEPRI, r3
 800ea6a:	f3bf 8f6f 	isb	sy
 800ea6e:	f3bf 8f4f 	dsb	sy
 800ea72:	60fb      	str	r3, [r7, #12]
}
 800ea74:	bf00      	nop
 800ea76:	e7fe      	b.n	800ea76 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea7c:	683a      	ldr	r2, [r7, #0]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d902      	bls.n	800ea88 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	61fb      	str	r3, [r7, #28]
 800ea86:	e002      	b.n	800ea8e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea8c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea92:	69fa      	ldr	r2, [r7, #28]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d063      	beq.n	800eb60 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ea98:	69bb      	ldr	r3, [r7, #24]
 800ea9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea9c:	697a      	ldr	r2, [r7, #20]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d15e      	bne.n	800eb60 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eaa2:	4b31      	ldr	r3, [pc, #196]	; (800eb68 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	69ba      	ldr	r2, [r7, #24]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d10a      	bne.n	800eac2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800eaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab0:	f383 8811 	msr	BASEPRI, r3
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	60bb      	str	r3, [r7, #8]
}
 800eabe:	bf00      	nop
 800eac0:	e7fe      	b.n	800eac0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	69fa      	ldr	r2, [r7, #28]
 800eacc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eace:	69bb      	ldr	r3, [r7, #24]
 800ead0:	699b      	ldr	r3, [r3, #24]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	db04      	blt.n	800eae0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	f1c3 0207 	rsb	r2, r3, #7
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	6959      	ldr	r1, [r3, #20]
 800eae4:	693a      	ldr	r2, [r7, #16]
 800eae6:	4613      	mov	r3, r2
 800eae8:	009b      	lsls	r3, r3, #2
 800eaea:	4413      	add	r3, r2
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	4a1f      	ldr	r2, [pc, #124]	; (800eb6c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800eaf0:	4413      	add	r3, r2
 800eaf2:	4299      	cmp	r1, r3
 800eaf4:	d134      	bne.n	800eb60 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	3304      	adds	r3, #4
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fd fa6e 	bl	800bfdc <uxListRemove>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d115      	bne.n	800eb32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800eb06:	69bb      	ldr	r3, [r7, #24]
 800eb08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb0a:	4918      	ldr	r1, [pc, #96]	; (800eb6c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800eb0c:	4613      	mov	r3, r2
 800eb0e:	009b      	lsls	r3, r3, #2
 800eb10:	4413      	add	r3, r2
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	440b      	add	r3, r1
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d10a      	bne.n	800eb32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800eb1c:	69bb      	ldr	r3, [r7, #24]
 800eb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb20:	2201      	movs	r2, #1
 800eb22:	fa02 f303 	lsl.w	r3, r2, r3
 800eb26:	43da      	mvns	r2, r3
 800eb28:	4b11      	ldr	r3, [pc, #68]	; (800eb70 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	4013      	ands	r3, r2
 800eb2e:	4a10      	ldr	r2, [pc, #64]	; (800eb70 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800eb30:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb36:	2201      	movs	r2, #1
 800eb38:	409a      	lsls	r2, r3
 800eb3a:	4b0d      	ldr	r3, [pc, #52]	; (800eb70 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	4313      	orrs	r3, r2
 800eb40:	4a0b      	ldr	r2, [pc, #44]	; (800eb70 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800eb42:	6013      	str	r3, [r2, #0]
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb48:	4613      	mov	r3, r2
 800eb4a:	009b      	lsls	r3, r3, #2
 800eb4c:	4413      	add	r3, r2
 800eb4e:	009b      	lsls	r3, r3, #2
 800eb50:	4a06      	ldr	r2, [pc, #24]	; (800eb6c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800eb52:	441a      	add	r2, r3
 800eb54:	69bb      	ldr	r3, [r7, #24]
 800eb56:	3304      	adds	r3, #4
 800eb58:	4619      	mov	r1, r3
 800eb5a:	4610      	mov	r0, r2
 800eb5c:	f7fd f9e1 	bl	800bf22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb60:	bf00      	nop
 800eb62:	3720      	adds	r7, #32
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	240046a8 	.word	0x240046a8
 800eb6c:	240046ac 	.word	0x240046ac
 800eb70:	240047b0 	.word	0x240047b0

0800eb74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eb74:	b480      	push	{r7}
 800eb76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eb78:	4b07      	ldr	r3, [pc, #28]	; (800eb98 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d004      	beq.n	800eb8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eb80:	4b05      	ldr	r3, [pc, #20]	; (800eb98 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb86:	3201      	adds	r2, #1
 800eb88:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800eb8a:	4b03      	ldr	r3, [pc, #12]	; (800eb98 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
	}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr
 800eb98:	240046a8 	.word	0x240046a8

0800eb9c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b086      	sub	sp, #24
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
 800eba8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ebaa:	f7fd fb6b 	bl	800c284 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ebae:	4b26      	ldr	r3, [pc, #152]	; (800ec48 <xTaskNotifyWait+0xac>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	2b02      	cmp	r3, #2
 800ebba:	d01a      	beq.n	800ebf2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ebbc:	4b22      	ldr	r3, [pc, #136]	; (800ec48 <xTaskNotifyWait+0xac>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ebc2:	68fa      	ldr	r2, [r7, #12]
 800ebc4:	43d2      	mvns	r2, r2
 800ebc6:	400a      	ands	r2, r1
 800ebc8:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ebca:	4b1f      	ldr	r3, [pc, #124]	; (800ec48 <xTaskNotifyWait+0xac>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00b      	beq.n	800ebf2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ebda:	2101      	movs	r1, #1
 800ebdc:	6838      	ldr	r0, [r7, #0]
 800ebde:	f000 f913 	bl	800ee08 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ebe2:	4b1a      	ldr	r3, [pc, #104]	; (800ec4c <xTaskNotifyWait+0xb0>)
 800ebe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebe8:	601a      	str	r2, [r3, #0]
 800ebea:	f3bf 8f4f 	dsb	sy
 800ebee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ebf2:	f7fd fb77 	bl	800c2e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ebf6:	f7fd fb45 	bl	800c284 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d004      	beq.n	800ec0a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ec00:	4b11      	ldr	r3, [pc, #68]	; (800ec48 <xTaskNotifyWait+0xac>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ec0a:	4b0f      	ldr	r3, [pc, #60]	; (800ec48 <xTaskNotifyWait+0xac>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d002      	beq.n	800ec1e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	617b      	str	r3, [r7, #20]
 800ec1c:	e008      	b.n	800ec30 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ec1e:	4b0a      	ldr	r3, [pc, #40]	; (800ec48 <xTaskNotifyWait+0xac>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ec24:	68ba      	ldr	r2, [r7, #8]
 800ec26:	43d2      	mvns	r2, r2
 800ec28:	400a      	ands	r2, r1
 800ec2a:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ec30:	4b05      	ldr	r3, [pc, #20]	; (800ec48 <xTaskNotifyWait+0xac>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800ec3a:	f7fd fb53 	bl	800c2e4 <vPortExitCritical>

		return xReturn;
 800ec3e:	697b      	ldr	r3, [r7, #20]
	}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3718      	adds	r7, #24
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	240046a8 	.word	0x240046a8
 800ec4c:	e000ed04 	.word	0xe000ed04

0800ec50 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b08a      	sub	sp, #40	; 0x28
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	603b      	str	r3, [r7, #0]
 800ec5c:	4613      	mov	r3, r2
 800ec5e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ec60:	2301      	movs	r3, #1
 800ec62:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d10a      	bne.n	800ec80 <xTaskGenericNotify+0x30>
	__asm volatile
 800ec6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6e:	f383 8811 	msr	BASEPRI, r3
 800ec72:	f3bf 8f6f 	isb	sy
 800ec76:	f3bf 8f4f 	dsb	sy
 800ec7a:	61bb      	str	r3, [r7, #24]
}
 800ec7c:	bf00      	nop
 800ec7e:	e7fe      	b.n	800ec7e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ec84:	f7fd fafe 	bl	800c284 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d003      	beq.n	800ec96 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ec8e:	6a3b      	ldr	r3, [r7, #32]
 800ec90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ec96:	6a3b      	ldr	r3, [r7, #32]
 800ec98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec9c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ec9e:	6a3b      	ldr	r3, [r7, #32]
 800eca0:	2202      	movs	r2, #2
 800eca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800eca6:	79fb      	ldrb	r3, [r7, #7]
 800eca8:	2b04      	cmp	r3, #4
 800ecaa:	d828      	bhi.n	800ecfe <xTaskGenericNotify+0xae>
 800ecac:	a201      	add	r2, pc, #4	; (adr r2, 800ecb4 <xTaskGenericNotify+0x64>)
 800ecae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb2:	bf00      	nop
 800ecb4:	0800ed1f 	.word	0x0800ed1f
 800ecb8:	0800ecc9 	.word	0x0800ecc9
 800ecbc:	0800ecd7 	.word	0x0800ecd7
 800ecc0:	0800ece3 	.word	0x0800ece3
 800ecc4:	0800eceb 	.word	0x0800eceb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ecc8:	6a3b      	ldr	r3, [r7, #32]
 800ecca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	431a      	orrs	r2, r3
 800ecd0:	6a3b      	ldr	r3, [r7, #32]
 800ecd2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800ecd4:	e026      	b.n	800ed24 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ecd6:	6a3b      	ldr	r3, [r7, #32]
 800ecd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecda:	1c5a      	adds	r2, r3, #1
 800ecdc:	6a3b      	ldr	r3, [r7, #32]
 800ecde:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800ece0:	e020      	b.n	800ed24 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ece2:	6a3b      	ldr	r3, [r7, #32]
 800ece4:	68ba      	ldr	r2, [r7, #8]
 800ece6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800ece8:	e01c      	b.n	800ed24 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ecea:	7ffb      	ldrb	r3, [r7, #31]
 800ecec:	2b02      	cmp	r3, #2
 800ecee:	d003      	beq.n	800ecf8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ecf0:	6a3b      	ldr	r3, [r7, #32]
 800ecf2:	68ba      	ldr	r2, [r7, #8]
 800ecf4:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ecf6:	e015      	b.n	800ed24 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ecfc:	e012      	b.n	800ed24 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ecfe:	6a3b      	ldr	r3, [r7, #32]
 800ed00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed06:	d00c      	beq.n	800ed22 <xTaskGenericNotify+0xd2>
	__asm volatile
 800ed08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0c:	f383 8811 	msr	BASEPRI, r3
 800ed10:	f3bf 8f6f 	isb	sy
 800ed14:	f3bf 8f4f 	dsb	sy
 800ed18:	617b      	str	r3, [r7, #20]
}
 800ed1a:	bf00      	nop
 800ed1c:	e7fe      	b.n	800ed1c <xTaskGenericNotify+0xcc>
					break;
 800ed1e:	bf00      	nop
 800ed20:	e000      	b.n	800ed24 <xTaskGenericNotify+0xd4>

					break;
 800ed22:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ed24:	7ffb      	ldrb	r3, [r7, #31]
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	d139      	bne.n	800ed9e <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed2a:	6a3b      	ldr	r3, [r7, #32]
 800ed2c:	3304      	adds	r3, #4
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fd f954 	bl	800bfdc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ed34:	6a3b      	ldr	r3, [r7, #32]
 800ed36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed38:	2201      	movs	r2, #1
 800ed3a:	409a      	lsls	r2, r3
 800ed3c:	4b1b      	ldr	r3, [pc, #108]	; (800edac <xTaskGenericNotify+0x15c>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4313      	orrs	r3, r2
 800ed42:	4a1a      	ldr	r2, [pc, #104]	; (800edac <xTaskGenericNotify+0x15c>)
 800ed44:	6013      	str	r3, [r2, #0]
 800ed46:	6a3b      	ldr	r3, [r7, #32]
 800ed48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed4a:	4613      	mov	r3, r2
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	4413      	add	r3, r2
 800ed50:	009b      	lsls	r3, r3, #2
 800ed52:	4a17      	ldr	r2, [pc, #92]	; (800edb0 <xTaskGenericNotify+0x160>)
 800ed54:	441a      	add	r2, r3
 800ed56:	6a3b      	ldr	r3, [r7, #32]
 800ed58:	3304      	adds	r3, #4
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	4610      	mov	r0, r2
 800ed5e:	f7fd f8e0 	bl	800bf22 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ed62:	6a3b      	ldr	r3, [r7, #32]
 800ed64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d00a      	beq.n	800ed80 <xTaskGenericNotify+0x130>
	__asm volatile
 800ed6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6e:	f383 8811 	msr	BASEPRI, r3
 800ed72:	f3bf 8f6f 	isb	sy
 800ed76:	f3bf 8f4f 	dsb	sy
 800ed7a:	613b      	str	r3, [r7, #16]
}
 800ed7c:	bf00      	nop
 800ed7e:	e7fe      	b.n	800ed7e <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ed80:	6a3b      	ldr	r3, [r7, #32]
 800ed82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed84:	4b0b      	ldr	r3, [pc, #44]	; (800edb4 <xTaskGenericNotify+0x164>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d907      	bls.n	800ed9e <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ed8e:	4b0a      	ldr	r3, [pc, #40]	; (800edb8 <xTaskGenericNotify+0x168>)
 800ed90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed94:	601a      	str	r2, [r3, #0]
 800ed96:	f3bf 8f4f 	dsb	sy
 800ed9a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ed9e:	f7fd faa1 	bl	800c2e4 <vPortExitCritical>

		return xReturn;
 800eda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3728      	adds	r7, #40	; 0x28
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	240047b0 	.word	0x240047b0
 800edb0:	240046ac 	.word	0x240046ac
 800edb4:	240046a8 	.word	0x240046a8
 800edb8:	e000ed04 	.word	0xe000ed04

0800edbc <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d102      	bne.n	800edd0 <xTaskNotifyStateClear+0x14>
 800edca:	4b0e      	ldr	r3, [pc, #56]	; (800ee04 <xTaskNotifyStateClear+0x48>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	e000      	b.n	800edd2 <xTaskNotifyStateClear+0x16>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800edd4:	f7fd fa56 	bl	800c284 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	2b02      	cmp	r3, #2
 800ede2:	d106      	bne.n	800edf2 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	2200      	movs	r2, #0
 800ede8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				xReturn = pdPASS;
 800edec:	2301      	movs	r3, #1
 800edee:	60fb      	str	r3, [r7, #12]
 800edf0:	e001      	b.n	800edf6 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800edf2:	2300      	movs	r3, #0
 800edf4:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800edf6:	f7fd fa75 	bl	800c2e4 <vPortExitCritical>

		return xReturn;
 800edfa:	68fb      	ldr	r3, [r7, #12]
	}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3710      	adds	r7, #16
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	240046a8 	.word	0x240046a8

0800ee08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee12:	4b29      	ldr	r3, [pc, #164]	; (800eeb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee18:	4b28      	ldr	r3, [pc, #160]	; (800eebc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	3304      	adds	r3, #4
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fd f8dc 	bl	800bfdc <uxListRemove>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d10b      	bne.n	800ee42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ee2a:	4b24      	ldr	r3, [pc, #144]	; (800eebc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee30:	2201      	movs	r2, #1
 800ee32:	fa02 f303 	lsl.w	r3, r2, r3
 800ee36:	43da      	mvns	r2, r3
 800ee38:	4b21      	ldr	r3, [pc, #132]	; (800eec0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4013      	ands	r3, r2
 800ee3e:	4a20      	ldr	r2, [pc, #128]	; (800eec0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ee40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee48:	d10a      	bne.n	800ee60 <prvAddCurrentTaskToDelayedList+0x58>
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d007      	beq.n	800ee60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee50:	4b1a      	ldr	r3, [pc, #104]	; (800eebc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	3304      	adds	r3, #4
 800ee56:	4619      	mov	r1, r3
 800ee58:	481a      	ldr	r0, [pc, #104]	; (800eec4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ee5a:	f7fd f862 	bl	800bf22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ee5e:	e026      	b.n	800eeae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee60:	68fa      	ldr	r2, [r7, #12]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4413      	add	r3, r2
 800ee66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee68:	4b14      	ldr	r3, [pc, #80]	; (800eebc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	68ba      	ldr	r2, [r7, #8]
 800ee6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee70:	68ba      	ldr	r2, [r7, #8]
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d209      	bcs.n	800ee8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee78:	4b13      	ldr	r3, [pc, #76]	; (800eec8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ee7a:	681a      	ldr	r2, [r3, #0]
 800ee7c:	4b0f      	ldr	r3, [pc, #60]	; (800eebc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	3304      	adds	r3, #4
 800ee82:	4619      	mov	r1, r3
 800ee84:	4610      	mov	r0, r2
 800ee86:	f7fd f870 	bl	800bf6a <vListInsert>
}
 800ee8a:	e010      	b.n	800eeae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee8c:	4b0f      	ldr	r3, [pc, #60]	; (800eecc <prvAddCurrentTaskToDelayedList+0xc4>)
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	4b0a      	ldr	r3, [pc, #40]	; (800eebc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	3304      	adds	r3, #4
 800ee96:	4619      	mov	r1, r3
 800ee98:	4610      	mov	r0, r2
 800ee9a:	f7fd f866 	bl	800bf6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee9e:	4b0c      	ldr	r3, [pc, #48]	; (800eed0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d202      	bcs.n	800eeae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800eea8:	4a09      	ldr	r2, [pc, #36]	; (800eed0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	6013      	str	r3, [r2, #0]
}
 800eeae:	bf00      	nop
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	240047ac 	.word	0x240047ac
 800eebc:	240046a8 	.word	0x240046a8
 800eec0:	240047b0 	.word	0x240047b0
 800eec4:	24004794 	.word	0x24004794
 800eec8:	24004764 	.word	0x24004764
 800eecc:	24004760 	.word	0x24004760
 800eed0:	240047c8 	.word	0x240047c8

0800eed4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	330c      	adds	r3, #12
 800eee4:	461a      	mov	r2, r3
 800eee6:	6839      	ldr	r1, [r7, #0]
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f00d fa01 	bl	801c2f0 <tcpip_send_msg_wait_sem>
 800eeee:	4603      	mov	r3, r0
 800eef0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800eef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d103      	bne.n	800ef02 <netconn_apimsg+0x2e>
    return apimsg->err;
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ef00:	e001      	b.n	800ef06 <netconn_apimsg+0x32>
  }
  return err;
 800ef02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
	...

0800ef10 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b08c      	sub	sp, #48	; 0x30
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	4603      	mov	r3, r0
 800ef18:	603a      	str	r2, [r7, #0]
 800ef1a:	71fb      	strb	r3, [r7, #7]
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800ef20:	79fb      	ldrb	r3, [r7, #7]
 800ef22:	6839      	ldr	r1, [r7, #0]
 800ef24:	4618      	mov	r0, r3
 800ef26:	f000 fdd5 	bl	800fad4 <netconn_alloc>
 800ef2a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800ef2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d054      	beq.n	800efdc <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800ef32:	79bb      	ldrb	r3, [r7, #6]
 800ef34:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800ef36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef38:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800ef3a:	f107 0308 	add.w	r3, r7, #8
 800ef3e:	4619      	mov	r1, r3
 800ef40:	4829      	ldr	r0, [pc, #164]	; (800efe8 <netconn_new_with_proto_and_callback+0xd8>)
 800ef42:	f7ff ffc7 	bl	800eed4 <netconn_apimsg>
 800ef46:	4603      	mov	r3, r0
 800ef48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800ef4c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d043      	beq.n	800efdc <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ef54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d005      	beq.n	800ef68 <netconn_new_with_proto_and_callback+0x58>
 800ef5c:	4b23      	ldr	r3, [pc, #140]	; (800efec <netconn_new_with_proto_and_callback+0xdc>)
 800ef5e:	22a3      	movs	r2, #163	; 0xa3
 800ef60:	4923      	ldr	r1, [pc, #140]	; (800eff0 <netconn_new_with_proto_and_callback+0xe0>)
 800ef62:	4824      	ldr	r0, [pc, #144]	; (800eff4 <netconn_new_with_proto_and_callback+0xe4>)
 800ef64:	f012 feda 	bl	8021d1c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ef68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6a:	3310      	adds	r3, #16
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f006 ff1a 	bl	8015da6 <sys_mbox_valid>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d105      	bne.n	800ef84 <netconn_new_with_proto_and_callback+0x74>
 800ef78:	4b1c      	ldr	r3, [pc, #112]	; (800efec <netconn_new_with_proto_and_callback+0xdc>)
 800ef7a:	22a4      	movs	r2, #164	; 0xa4
 800ef7c:	491e      	ldr	r1, [pc, #120]	; (800eff8 <netconn_new_with_proto_and_callback+0xe8>)
 800ef7e:	481d      	ldr	r0, [pc, #116]	; (800eff4 <netconn_new_with_proto_and_callback+0xe4>)
 800ef80:	f012 fecc 	bl	8021d1c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ef84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef86:	3314      	adds	r3, #20
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f006 ff0c 	bl	8015da6 <sys_mbox_valid>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d005      	beq.n	800efa0 <netconn_new_with_proto_and_callback+0x90>
 800ef94:	4b15      	ldr	r3, [pc, #84]	; (800efec <netconn_new_with_proto_and_callback+0xdc>)
 800ef96:	22a6      	movs	r2, #166	; 0xa6
 800ef98:	4918      	ldr	r1, [pc, #96]	; (800effc <netconn_new_with_proto_and_callback+0xec>)
 800ef9a:	4816      	ldr	r0, [pc, #88]	; (800eff4 <netconn_new_with_proto_and_callback+0xe4>)
 800ef9c:	f012 febe 	bl	8021d1c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800efa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa2:	330c      	adds	r3, #12
 800efa4:	4618      	mov	r0, r3
 800efa6:	f006 ff8f 	bl	8015ec8 <sys_sem_valid>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d105      	bne.n	800efbc <netconn_new_with_proto_and_callback+0xac>
 800efb0:	4b0e      	ldr	r3, [pc, #56]	; (800efec <netconn_new_with_proto_and_callback+0xdc>)
 800efb2:	22a9      	movs	r2, #169	; 0xa9
 800efb4:	4912      	ldr	r1, [pc, #72]	; (800f000 <netconn_new_with_proto_and_callback+0xf0>)
 800efb6:	480f      	ldr	r0, [pc, #60]	; (800eff4 <netconn_new_with_proto_and_callback+0xe4>)
 800efb8:	f012 feb0 	bl	8021d1c <iprintf>
      sys_sem_free(&conn->op_completed);
 800efbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbe:	330c      	adds	r3, #12
 800efc0:	4618      	mov	r0, r3
 800efc2:	f006 ff74 	bl	8015eae <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	3310      	adds	r3, #16
 800efca:	4618      	mov	r0, r3
 800efcc:	f006 fe64 	bl	8015c98 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800efd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800efd2:	2007      	movs	r0, #7
 800efd4:	f004 ff54 	bl	8013e80 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800efd8:	2300      	movs	r3, #0
 800efda:	e000      	b.n	800efde <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800efdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3730      	adds	r7, #48	; 0x30
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	0800faa9 	.word	0x0800faa9
 800efec:	080242c8 	.word	0x080242c8
 800eff0:	08024318 	.word	0x08024318
 800eff4:	0802433c 	.word	0x0802433c
 800eff8:	08024364 	.word	0x08024364
 800effc:	0802437c 	.word	0x0802437c
 800f000:	080243a0 	.word	0x080243a0

0800f004 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b08c      	sub	sp, #48	; 0x30
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d101      	bne.n	800f016 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800f012:	2300      	movs	r3, #0
 800f014:	e014      	b.n	800f040 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f01a:	2329      	movs	r3, #41	; 0x29
 800f01c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800f01e:	f107 030c 	add.w	r3, r7, #12
 800f022:	4619      	mov	r1, r3
 800f024:	4808      	ldr	r0, [pc, #32]	; (800f048 <netconn_prepare_delete+0x44>)
 800f026:	f7ff ff55 	bl	800eed4 <netconn_apimsg>
 800f02a:	4603      	mov	r3, r0
 800f02c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800f030:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f034:	2b00      	cmp	r3, #0
 800f036:	d002      	beq.n	800f03e <netconn_prepare_delete+0x3a>
    return err;
 800f038:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800f03c:	e000      	b.n	800f040 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800f03e:	2300      	movs	r3, #0
}
 800f040:	4618      	mov	r0, r3
 800f042:	3730      	adds	r7, #48	; 0x30
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	0801000d 	.word	0x0801000d

0800f04c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b084      	sub	sp, #16
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d101      	bne.n	800f05e <netconn_delete+0x12>
    return ERR_OK;
 800f05a:	2300      	movs	r3, #0
 800f05c:	e00d      	b.n	800f07a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f7ff ffd0 	bl	800f004 <netconn_prepare_delete>
 800f064:	4603      	mov	r3, r0
 800f066:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800f068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d102      	bne.n	800f076 <netconn_delete+0x2a>
    netconn_free(conn);
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f000 fd9d 	bl	800fbb0 <netconn_free>
  }
  return err;
 800f076:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3710      	adds	r7, #16
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
	...

0800f084 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b08e      	sub	sp, #56	; 0x38
 800f088:	af00      	add	r7, sp, #0
 800f08a:	60f8      	str	r0, [r7, #12]
 800f08c:	60b9      	str	r1, [r7, #8]
 800f08e:	4613      	mov	r3, r2
 800f090:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d109      	bne.n	800f0ac <netconn_connect+0x28>
 800f098:	4b11      	ldr	r3, [pc, #68]	; (800f0e0 <netconn_connect+0x5c>)
 800f09a:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800f09e:	4911      	ldr	r1, [pc, #68]	; (800f0e4 <netconn_connect+0x60>)
 800f0a0:	4811      	ldr	r0, [pc, #68]	; (800f0e8 <netconn_connect+0x64>)
 800f0a2:	f012 fe3b 	bl	8021d1c <iprintf>
 800f0a6:	f06f 030f 	mvn.w	r3, #15
 800f0aa:	e015      	b.n	800f0d8 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d101      	bne.n	800f0b6 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800f0b2:	4b0e      	ldr	r3, [pc, #56]	; (800f0ec <netconn_connect+0x68>)
 800f0b4:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800f0be:	88fb      	ldrh	r3, [r7, #6]
 800f0c0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800f0c2:	f107 0314 	add.w	r3, r7, #20
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	4809      	ldr	r0, [pc, #36]	; (800f0f0 <netconn_connect+0x6c>)
 800f0ca:	f7ff ff03 	bl	800eed4 <netconn_apimsg>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800f0d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3738      	adds	r7, #56	; 0x38
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	080242c8 	.word	0x080242c8
 800f0e4:	08024458 	.word	0x08024458
 800f0e8:	0802433c 	.word	0x0802433c
 800f0ec:	0802807c 	.word	0x0802807c
 800f0f0:	080102f5 	.word	0x080102f5

0800f0f4 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b08c      	sub	sp, #48	; 0x30
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d109      	bne.n	800f116 <netconn_disconnect+0x22>
 800f102:	4b0d      	ldr	r3, [pc, #52]	; (800f138 <netconn_disconnect+0x44>)
 800f104:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800f108:	490c      	ldr	r1, [pc, #48]	; (800f13c <netconn_disconnect+0x48>)
 800f10a:	480d      	ldr	r0, [pc, #52]	; (800f140 <netconn_disconnect+0x4c>)
 800f10c:	f012 fe06 	bl	8021d1c <iprintf>
 800f110:	f06f 030f 	mvn.w	r3, #15
 800f114:	e00c      	b.n	800f130 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800f11a:	f107 030c 	add.w	r3, r7, #12
 800f11e:	4619      	mov	r1, r3
 800f120:	4808      	ldr	r0, [pc, #32]	; (800f144 <netconn_disconnect+0x50>)
 800f122:	f7ff fed7 	bl	800eed4 <netconn_apimsg>
 800f126:	4603      	mov	r3, r0
 800f128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f12c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f130:	4618      	mov	r0, r3
 800f132:	3730      	adds	r7, #48	; 0x30
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}
 800f138:	080242c8 	.word	0x080242c8
 800f13c:	08024478 	.word	0x08024478
 800f140:	0802433c 	.word	0x0802433c
 800f144:	08010471 	.word	0x08010471

0800f148 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b08c      	sub	sp, #48	; 0x30
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d109      	bne.n	800f16c <netconn_send+0x24>
 800f158:	4b0e      	ldr	r3, [pc, #56]	; (800f194 <netconn_send+0x4c>)
 800f15a:	f240 32b2 	movw	r2, #946	; 0x3b2
 800f15e:	490e      	ldr	r1, [pc, #56]	; (800f198 <netconn_send+0x50>)
 800f160:	480e      	ldr	r0, [pc, #56]	; (800f19c <netconn_send+0x54>)
 800f162:	f012 fddb 	bl	8021d1c <iprintf>
 800f166:	f06f 030f 	mvn.w	r3, #15
 800f16a:	e00e      	b.n	800f18a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800f174:	f107 030c 	add.w	r3, r7, #12
 800f178:	4619      	mov	r1, r3
 800f17a:	4809      	ldr	r0, [pc, #36]	; (800f1a0 <netconn_send+0x58>)
 800f17c:	f7ff feaa 	bl	800eed4 <netconn_apimsg>
 800f180:	4603      	mov	r3, r0
 800f182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f186:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3730      	adds	r7, #48	; 0x30
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	080242c8 	.word	0x080242c8
 800f198:	080245a0 	.word	0x080245a0
 800f19c:	0802433c 	.word	0x0802433c
 800f1a0:	080104ad 	.word	0x080104ad

0800f1a4 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b088      	sub	sp, #32
 800f1a8:	af02      	add	r7, sp, #8
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
 800f1b0:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800f1ba:	78fa      	ldrb	r2, [r7, #3]
 800f1bc:	f107 0110 	add.w	r1, r7, #16
 800f1c0:	6a3b      	ldr	r3, [r7, #32]
 800f1c2:	9300      	str	r3, [sp, #0]
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	68f8      	ldr	r0, [r7, #12]
 800f1ca:	f000 f805 	bl	800f1d8 <netconn_write_vectors_partly>
 800f1ce:	4603      	mov	r3, r0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3718      	adds	r7, #24
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b092      	sub	sp, #72	; 0x48
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	4611      	mov	r1, r2
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	80fb      	strh	r3, [r7, #6]
 800f1ea:	4613      	mov	r3, r2
 800f1ec:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d109      	bne.n	800f208 <netconn_write_vectors_partly+0x30>
 800f1f4:	4b4e      	ldr	r3, [pc, #312]	; (800f330 <netconn_write_vectors_partly+0x158>)
 800f1f6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f1fa:	494e      	ldr	r1, [pc, #312]	; (800f334 <netconn_write_vectors_partly+0x15c>)
 800f1fc:	484e      	ldr	r0, [pc, #312]	; (800f338 <netconn_write_vectors_partly+0x160>)
 800f1fe:	f012 fd8d 	bl	8021d1c <iprintf>
 800f202:	f06f 030f 	mvn.w	r3, #15
 800f206:	e08e      	b.n	800f326 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f210:	2b10      	cmp	r3, #16
 800f212:	d009      	beq.n	800f228 <netconn_write_vectors_partly+0x50>
 800f214:	4b46      	ldr	r3, [pc, #280]	; (800f330 <netconn_write_vectors_partly+0x158>)
 800f216:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800f21a:	4948      	ldr	r1, [pc, #288]	; (800f33c <netconn_write_vectors_partly+0x164>)
 800f21c:	4846      	ldr	r0, [pc, #280]	; (800f338 <netconn_write_vectors_partly+0x160>)
 800f21e:	f012 fd7d 	bl	8021d1c <iprintf>
 800f222:	f06f 0305 	mvn.w	r3, #5
 800f226:	e07e      	b.n	800f326 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	7f1b      	ldrb	r3, [r3, #28]
 800f22c:	f003 0302 	and.w	r3, r3, #2
 800f230:	2b00      	cmp	r3, #0
 800f232:	d104      	bne.n	800f23e <netconn_write_vectors_partly+0x66>
 800f234:	797b      	ldrb	r3, [r7, #5]
 800f236:	f003 0304 	and.w	r3, r3, #4
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d001      	beq.n	800f242 <netconn_write_vectors_partly+0x6a>
 800f23e:	2301      	movs	r3, #1
 800f240:	e000      	b.n	800f244 <netconn_write_vectors_partly+0x6c>
 800f242:	2300      	movs	r3, #0
 800f244:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800f248:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d005      	beq.n	800f25c <netconn_write_vectors_partly+0x84>
 800f250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f252:	2b00      	cmp	r3, #0
 800f254:	d102      	bne.n	800f25c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800f256:	f06f 0305 	mvn.w	r3, #5
 800f25a:	e064      	b.n	800f326 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800f25c:	2300      	movs	r3, #0
 800f25e:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800f260:	2300      	movs	r3, #0
 800f262:	643b      	str	r3, [r7, #64]	; 0x40
 800f264:	e015      	b.n	800f292 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800f266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f268:	00db      	lsls	r3, r3, #3
 800f26a:	68ba      	ldr	r2, [r7, #8]
 800f26c:	4413      	add	r3, r2
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f272:	4413      	add	r3, r2
 800f274:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800f276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f278:	00db      	lsls	r3, r3, #3
 800f27a:	68ba      	ldr	r2, [r7, #8]
 800f27c:	4413      	add	r3, r2
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f282:	429a      	cmp	r2, r3
 800f284:	d202      	bcs.n	800f28c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800f286:	f06f 0305 	mvn.w	r3, #5
 800f28a:	e04c      	b.n	800f326 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800f28c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f28e:	3301      	adds	r3, #1
 800f290:	643b      	str	r3, [r7, #64]	; 0x40
 800f292:	88fb      	ldrh	r3, [r7, #6]
 800f294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f296:	429a      	cmp	r2, r3
 800f298:	dbe5      	blt.n	800f266 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800f29a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d101      	bne.n	800f2a4 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	e040      	b.n	800f326 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800f2a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	da0a      	bge.n	800f2c0 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800f2aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d102      	bne.n	800f2b6 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800f2b0:	f06f 0305 	mvn.w	r3, #5
 800f2b4:	e037      	b.n	800f326 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800f2b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f2ba:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2be:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800f2c8:	88fb      	ldrh	r3, [r7, #6]
 800f2ca:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800f2d0:	797b      	ldrb	r3, [r7, #5]
 800f2d2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800f2d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2d8:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800f2de:	f107 0314 	add.w	r3, r7, #20
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	4816      	ldr	r0, [pc, #88]	; (800f340 <netconn_write_vectors_partly+0x168>)
 800f2e6:	f7ff fdf5 	bl	800eed4 <netconn_apimsg>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800f2f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d114      	bne.n	800f322 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800f2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d002      	beq.n	800f304 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800f2fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f302:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800f304:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d10a      	bne.n	800f322 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800f30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f310:	429a      	cmp	r2, r3
 800f312:	d006      	beq.n	800f322 <netconn_write_vectors_partly+0x14a>
 800f314:	4b06      	ldr	r3, [pc, #24]	; (800f330 <netconn_write_vectors_partly+0x158>)
 800f316:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f31a:	490a      	ldr	r1, [pc, #40]	; (800f344 <netconn_write_vectors_partly+0x16c>)
 800f31c:	4806      	ldr	r0, [pc, #24]	; (800f338 <netconn_write_vectors_partly+0x160>)
 800f31e:	f012 fcfd 	bl	8021d1c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800f322:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f326:	4618      	mov	r0, r3
 800f328:	3748      	adds	r7, #72	; 0x48
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	080242c8 	.word	0x080242c8
 800f334:	080245bc 	.word	0x080245bc
 800f338:	0802433c 	.word	0x0802433c
 800f33c:	080245d8 	.word	0x080245d8
 800f340:	080108e1 	.word	0x080108e1
 800f344:	080245fc 	.word	0x080245fc

0800f348 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b084      	sub	sp, #16
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d101      	bne.n	800f35a <netconn_err+0x12>
    return ERR_OK;
 800f356:	2300      	movs	r3, #0
 800f358:	e00d      	b.n	800f376 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800f35a:	f006 fe3f 	bl	8015fdc <sys_arch_protect>
 800f35e:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	7a1b      	ldrb	r3, [r3, #8]
 800f364:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2200      	movs	r2, #0
 800f36a:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800f36c:	68f8      	ldr	r0, [r7, #12]
 800f36e:	f006 fe43 	bl	8015ff8 <sys_arch_unprotect>
  return err;
 800f372:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f376:	4618      	mov	r0, r3
 800f378:	3710      	adds	r7, #16
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
	...

0800f380 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	4603      	mov	r3, r0
 800f388:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800f38a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f38e:	f113 0f0d 	cmn.w	r3, #13
 800f392:	d009      	beq.n	800f3a8 <lwip_netconn_err_to_msg+0x28>
 800f394:	f113 0f0d 	cmn.w	r3, #13
 800f398:	dc0c      	bgt.n	800f3b4 <lwip_netconn_err_to_msg+0x34>
 800f39a:	f113 0f0f 	cmn.w	r3, #15
 800f39e:	d007      	beq.n	800f3b0 <lwip_netconn_err_to_msg+0x30>
 800f3a0:	f113 0f0e 	cmn.w	r3, #14
 800f3a4:	d002      	beq.n	800f3ac <lwip_netconn_err_to_msg+0x2c>
 800f3a6:	e005      	b.n	800f3b4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800f3a8:	4b0a      	ldr	r3, [pc, #40]	; (800f3d4 <lwip_netconn_err_to_msg+0x54>)
 800f3aa:	e00e      	b.n	800f3ca <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800f3ac:	4b0a      	ldr	r3, [pc, #40]	; (800f3d8 <lwip_netconn_err_to_msg+0x58>)
 800f3ae:	e00c      	b.n	800f3ca <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800f3b0:	4b0a      	ldr	r3, [pc, #40]	; (800f3dc <lwip_netconn_err_to_msg+0x5c>)
 800f3b2:	e00a      	b.n	800f3ca <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800f3b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d005      	beq.n	800f3c8 <lwip_netconn_err_to_msg+0x48>
 800f3bc:	4b08      	ldr	r3, [pc, #32]	; (800f3e0 <lwip_netconn_err_to_msg+0x60>)
 800f3be:	227d      	movs	r2, #125	; 0x7d
 800f3c0:	4908      	ldr	r1, [pc, #32]	; (800f3e4 <lwip_netconn_err_to_msg+0x64>)
 800f3c2:	4809      	ldr	r0, [pc, #36]	; (800f3e8 <lwip_netconn_err_to_msg+0x68>)
 800f3c4:	f012 fcaa 	bl	8021d1c <iprintf>
      return NULL;
 800f3c8:	2300      	movs	r3, #0
  }
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3708      	adds	r7, #8
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	08028024 	.word	0x08028024
 800f3d8:	08028025 	.word	0x08028025
 800f3dc:	08028026 	.word	0x08028026
 800f3e0:	0802463c 	.word	0x0802463c
 800f3e4:	0802468c 	.word	0x0802468c
 800f3e8:	0802469c 	.word	0x0802469c

0800f3ec <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d105      	bne.n	800f408 <lwip_netconn_is_err_msg+0x1c>
 800f3fc:	4b12      	ldr	r3, [pc, #72]	; (800f448 <lwip_netconn_is_err_msg+0x5c>)
 800f3fe:	2285      	movs	r2, #133	; 0x85
 800f400:	4912      	ldr	r1, [pc, #72]	; (800f44c <lwip_netconn_is_err_msg+0x60>)
 800f402:	4813      	ldr	r0, [pc, #76]	; (800f450 <lwip_netconn_is_err_msg+0x64>)
 800f404:	f012 fc8a 	bl	8021d1c <iprintf>

  if (msg == &netconn_aborted) {
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4a12      	ldr	r2, [pc, #72]	; (800f454 <lwip_netconn_is_err_msg+0x68>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d104      	bne.n	800f41a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	22f3      	movs	r2, #243	; 0xf3
 800f414:	701a      	strb	r2, [r3, #0]
    return 1;
 800f416:	2301      	movs	r3, #1
 800f418:	e012      	b.n	800f440 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	4a0e      	ldr	r2, [pc, #56]	; (800f458 <lwip_netconn_is_err_msg+0x6c>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d104      	bne.n	800f42c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	22f2      	movs	r2, #242	; 0xf2
 800f426:	701a      	strb	r2, [r3, #0]
    return 1;
 800f428:	2301      	movs	r3, #1
 800f42a:	e009      	b.n	800f440 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	4a0b      	ldr	r2, [pc, #44]	; (800f45c <lwip_netconn_is_err_msg+0x70>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d104      	bne.n	800f43e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	22f1      	movs	r2, #241	; 0xf1
 800f438:	701a      	strb	r2, [r3, #0]
    return 1;
 800f43a:	2301      	movs	r3, #1
 800f43c:	e000      	b.n	800f440 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800f43e:	2300      	movs	r3, #0
}
 800f440:	4618      	mov	r0, r3
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	0802463c 	.word	0x0802463c
 800f44c:	080246c4 	.word	0x080246c4
 800f450:	0802469c 	.word	0x0802469c
 800f454:	08028024 	.word	0x08028024
 800f458:	08028025 	.word	0x08028025
 800f45c:	08028026 	.word	0x08028026

0800f460 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b088      	sub	sp, #32
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
 800f46c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d105      	bne.n	800f480 <recv_udp+0x20>
 800f474:	4b34      	ldr	r3, [pc, #208]	; (800f548 <recv_udp+0xe8>)
 800f476:	22e5      	movs	r2, #229	; 0xe5
 800f478:	4934      	ldr	r1, [pc, #208]	; (800f54c <recv_udp+0xec>)
 800f47a:	4835      	ldr	r0, [pc, #212]	; (800f550 <recv_udp+0xf0>)
 800f47c:	f012 fc4e 	bl	8021d1c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d105      	bne.n	800f492 <recv_udp+0x32>
 800f486:	4b30      	ldr	r3, [pc, #192]	; (800f548 <recv_udp+0xe8>)
 800f488:	22e6      	movs	r2, #230	; 0xe6
 800f48a:	4932      	ldr	r1, [pc, #200]	; (800f554 <recv_udp+0xf4>)
 800f48c:	4830      	ldr	r0, [pc, #192]	; (800f550 <recv_udp+0xf0>)
 800f48e:	f012 fc45 	bl	8021d1c <iprintf>
  conn = (struct netconn *)arg;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f496:	69fb      	ldr	r3, [r7, #28]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d103      	bne.n	800f4a4 <recv_udp+0x44>
    pbuf_free(p);
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f005 fc25 	bl	8014cec <pbuf_free>
    return;
 800f4a2:	e04d      	b.n	800f540 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	68ba      	ldr	r2, [r7, #8]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d005      	beq.n	800f4ba <recv_udp+0x5a>
 800f4ae:	4b26      	ldr	r3, [pc, #152]	; (800f548 <recv_udp+0xe8>)
 800f4b0:	22ee      	movs	r2, #238	; 0xee
 800f4b2:	4929      	ldr	r1, [pc, #164]	; (800f558 <recv_udp+0xf8>)
 800f4b4:	4826      	ldr	r0, [pc, #152]	; (800f550 <recv_udp+0xf0>)
 800f4b6:	f012 fc31 	bl	8021d1c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f4ba:	69fb      	ldr	r3, [r7, #28]
 800f4bc:	3310      	adds	r3, #16
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f006 fc71 	bl	8015da6 <sys_mbox_valid>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d103      	bne.n	800f4d2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f005 fc0e 	bl	8014cec <pbuf_free>
    return;
 800f4d0:	e036      	b.n	800f540 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f4d2:	2006      	movs	r0, #6
 800f4d4:	f004 fc5e 	bl	8013d94 <memp_malloc>
 800f4d8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800f4da:	69bb      	ldr	r3, [r7, #24]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d103      	bne.n	800f4e8 <recv_udp+0x88>
    pbuf_free(p);
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f005 fc03 	bl	8014cec <pbuf_free>
    return;
 800f4e6:	e02b      	b.n	800f540 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800f4e8:	69bb      	ldr	r3, [r7, #24]
 800f4ea:	687a      	ldr	r2, [r7, #4]
 800f4ec:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f4ee:	69bb      	ldr	r3, [r7, #24]
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d002      	beq.n	800f500 <recv_udp+0xa0>
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	e000      	b.n	800f502 <recv_udp+0xa2>
 800f500:	2300      	movs	r3, #0
 800f502:	69ba      	ldr	r2, [r7, #24]
 800f504:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f50a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	891b      	ldrh	r3, [r3, #8]
 800f510:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	3310      	adds	r3, #16
 800f516:	69b9      	ldr	r1, [r7, #24]
 800f518:	4618      	mov	r0, r3
 800f51a:	f006 fbcf 	bl	8015cbc <sys_mbox_trypost>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	d003      	beq.n	800f52c <recv_udp+0xcc>
    netbuf_delete(buf);
 800f524:	69b8      	ldr	r0, [r7, #24]
 800f526:	f004 fcd5 	bl	8013ed4 <netbuf_delete>
    return;
 800f52a:	e009      	b.n	800f540 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f530:	2b00      	cmp	r3, #0
 800f532:	d005      	beq.n	800f540 <recv_udp+0xe0>
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f538:	8afa      	ldrh	r2, [r7, #22]
 800f53a:	2100      	movs	r1, #0
 800f53c:	69f8      	ldr	r0, [r7, #28]
 800f53e:	4798      	blx	r3
  }
}
 800f540:	3720      	adds	r7, #32
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	0802463c 	.word	0x0802463c
 800f54c:	080246d0 	.word	0x080246d0
 800f550:	0802469c 	.word	0x0802469c
 800f554:	080246f4 	.word	0x080246f4
 800f558:	08024714 	.word	0x08024714

0800f55c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b088      	sub	sp, #32
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	607a      	str	r2, [r7, #4]
 800f568:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d106      	bne.n	800f57e <recv_tcp+0x22>
 800f570:	4b36      	ldr	r3, [pc, #216]	; (800f64c <recv_tcp+0xf0>)
 800f572:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f576:	4936      	ldr	r1, [pc, #216]	; (800f650 <recv_tcp+0xf4>)
 800f578:	4836      	ldr	r0, [pc, #216]	; (800f654 <recv_tcp+0xf8>)
 800f57a:	f012 fbcf 	bl	8021d1c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d106      	bne.n	800f592 <recv_tcp+0x36>
 800f584:	4b31      	ldr	r3, [pc, #196]	; (800f64c <recv_tcp+0xf0>)
 800f586:	f240 122d 	movw	r2, #301	; 0x12d
 800f58a:	4933      	ldr	r1, [pc, #204]	; (800f658 <recv_tcp+0xfc>)
 800f58c:	4831      	ldr	r0, [pc, #196]	; (800f654 <recv_tcp+0xf8>)
 800f58e:	f012 fbc5 	bl	8021d1c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800f592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d006      	beq.n	800f5a8 <recv_tcp+0x4c>
 800f59a:	4b2c      	ldr	r3, [pc, #176]	; (800f64c <recv_tcp+0xf0>)
 800f59c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800f5a0:	492e      	ldr	r1, [pc, #184]	; (800f65c <recv_tcp+0x100>)
 800f5a2:	482c      	ldr	r0, [pc, #176]	; (800f654 <recv_tcp+0xf8>)
 800f5a4:	f012 fbba 	bl	8021d1c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d102      	bne.n	800f5b8 <recv_tcp+0x5c>
    return ERR_VAL;
 800f5b2:	f06f 0305 	mvn.w	r3, #5
 800f5b6:	e045      	b.n	800f644 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	68ba      	ldr	r2, [r7, #8]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d006      	beq.n	800f5d0 <recv_tcp+0x74>
 800f5c2:	4b22      	ldr	r3, [pc, #136]	; (800f64c <recv_tcp+0xf0>)
 800f5c4:	f240 1235 	movw	r2, #309	; 0x135
 800f5c8:	4925      	ldr	r1, [pc, #148]	; (800f660 <recv_tcp+0x104>)
 800f5ca:	4822      	ldr	r0, [pc, #136]	; (800f654 <recv_tcp+0xf8>)
 800f5cc:	f012 fba6 	bl	8021d1c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	3310      	adds	r3, #16
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f006 fbe6 	bl	8015da6 <sys_mbox_valid>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d10d      	bne.n	800f5fc <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d008      	beq.n	800f5f8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	891b      	ldrh	r3, [r3, #8]
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	68b8      	ldr	r0, [r7, #8]
 800f5ee:	f007 f8cf 	bl	8016790 <tcp_recved>
      pbuf_free(p);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f005 fb7a 	bl	8014cec <pbuf_free>
    }
    return ERR_OK;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	e023      	b.n	800f644 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d005      	beq.n	800f60e <recv_tcp+0xb2>
    msg = p;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	891b      	ldrh	r3, [r3, #8]
 800f60a:	83fb      	strh	r3, [r7, #30]
 800f60c:	e003      	b.n	800f616 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800f60e:	4b15      	ldr	r3, [pc, #84]	; (800f664 <recv_tcp+0x108>)
 800f610:	61bb      	str	r3, [r7, #24]
    len = 0;
 800f612:	2300      	movs	r3, #0
 800f614:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	3310      	adds	r3, #16
 800f61a:	69b9      	ldr	r1, [r7, #24]
 800f61c:	4618      	mov	r0, r3
 800f61e:	f006 fb4d 	bl	8015cbc <sys_mbox_trypost>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d002      	beq.n	800f62e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800f628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f62c:	e00a      	b.n	800f644 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f632:	2b00      	cmp	r3, #0
 800f634:	d005      	beq.n	800f642 <recv_tcp+0xe6>
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f63a:	8bfa      	ldrh	r2, [r7, #30]
 800f63c:	2100      	movs	r1, #0
 800f63e:	6978      	ldr	r0, [r7, #20]
 800f640:	4798      	blx	r3
  }

  return ERR_OK;
 800f642:	2300      	movs	r3, #0
}
 800f644:	4618      	mov	r0, r3
 800f646:	3720      	adds	r7, #32
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	0802463c 	.word	0x0802463c
 800f650:	08024734 	.word	0x08024734
 800f654:	0802469c 	.word	0x0802469c
 800f658:	08024758 	.word	0x08024758
 800f65c:	08024778 	.word	0x08024778
 800f660:	08024790 	.word	0x08024790
 800f664:	08028026 	.word	0x08028026

0800f668 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d106      	bne.n	800f68a <poll_tcp+0x22>
 800f67c:	4b29      	ldr	r3, [pc, #164]	; (800f724 <poll_tcp+0xbc>)
 800f67e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800f682:	4929      	ldr	r1, [pc, #164]	; (800f728 <poll_tcp+0xc0>)
 800f684:	4829      	ldr	r0, [pc, #164]	; (800f72c <poll_tcp+0xc4>)
 800f686:	f012 fb49 	bl	8021d1c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	785b      	ldrb	r3, [r3, #1]
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d104      	bne.n	800f69c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f692:	2101      	movs	r1, #1
 800f694:	68f8      	ldr	r0, [r7, #12]
 800f696:	f000 ff57 	bl	8010548 <lwip_netconn_do_writemore>
 800f69a:	e016      	b.n	800f6ca <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	785b      	ldrb	r3, [r3, #1]
 800f6a0:	2b04      	cmp	r3, #4
 800f6a2:	d112      	bne.n	800f6ca <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6a1b      	ldr	r3, [r3, #32]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d00a      	beq.n	800f6c2 <poll_tcp+0x5a>
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	6a1b      	ldr	r3, [r3, #32]
 800f6b0:	7a5b      	ldrb	r3, [r3, #9]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d005      	beq.n	800f6c2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	6a1b      	ldr	r3, [r3, #32]
 800f6ba:	7a5a      	ldrb	r2, [r3, #9]
 800f6bc:	3a01      	subs	r2, #1
 800f6be:	b2d2      	uxtb	r2, r2
 800f6c0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f6c2:	2101      	movs	r1, #1
 800f6c4:	68f8      	ldr	r0, [r7, #12]
 800f6c6:	f000 fb3b 	bl	800fd40 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	7f1b      	ldrb	r3, [r3, #28]
 800f6ce:	f003 0310 	and.w	r3, r3, #16
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d021      	beq.n	800f71a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d01d      	beq.n	800f71a <poll_tcp+0xb2>
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f6e6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f6ea:	d316      	bcc.n	800f71a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f6f4:	2b04      	cmp	r3, #4
 800f6f6:	d810      	bhi.n	800f71a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	7f1b      	ldrb	r3, [r3, #28]
 800f6fc:	f023 0310 	bic.w	r3, r3, #16
 800f700:	b2da      	uxtb	r2, r3
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d005      	beq.n	800f71a <poll_tcp+0xb2>
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f712:	2200      	movs	r2, #0
 800f714:	2102      	movs	r1, #2
 800f716:	68f8      	ldr	r0, [r7, #12]
 800f718:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f71a:	2300      	movs	r3, #0
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3710      	adds	r7, #16
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	0802463c 	.word	0x0802463c
 800f728:	080247b0 	.word	0x080247b0
 800f72c:	0802469c 	.word	0x0802469c

0800f730 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b086      	sub	sp, #24
 800f734:	af00      	add	r7, sp, #0
 800f736:	60f8      	str	r0, [r7, #12]
 800f738:	60b9      	str	r1, [r7, #8]
 800f73a:	4613      	mov	r3, r2
 800f73c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d106      	bne.n	800f756 <sent_tcp+0x26>
 800f748:	4b20      	ldr	r3, [pc, #128]	; (800f7cc <sent_tcp+0x9c>)
 800f74a:	f240 1293 	movw	r2, #403	; 0x193
 800f74e:	4920      	ldr	r1, [pc, #128]	; (800f7d0 <sent_tcp+0xa0>)
 800f750:	4820      	ldr	r0, [pc, #128]	; (800f7d4 <sent_tcp+0xa4>)
 800f752:	f012 fae3 	bl	8021d1c <iprintf>

  if (conn) {
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d032      	beq.n	800f7c2 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	785b      	ldrb	r3, [r3, #1]
 800f760:	2b01      	cmp	r3, #1
 800f762:	d104      	bne.n	800f76e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f764:	2101      	movs	r1, #1
 800f766:	6978      	ldr	r0, [r7, #20]
 800f768:	f000 feee 	bl	8010548 <lwip_netconn_do_writemore>
 800f76c:	e007      	b.n	800f77e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	785b      	ldrb	r3, [r3, #1]
 800f772:	2b04      	cmp	r3, #4
 800f774:	d103      	bne.n	800f77e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f776:	2101      	movs	r1, #1
 800f778:	6978      	ldr	r0, [r7, #20]
 800f77a:	f000 fae1 	bl	800fd40 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d01d      	beq.n	800f7c2 <sent_tcp+0x92>
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f78e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f792:	d316      	bcc.n	800f7c2 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f79c:	2b04      	cmp	r3, #4
 800f79e:	d810      	bhi.n	800f7c2 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	7f1b      	ldrb	r3, [r3, #28]
 800f7a4:	f023 0310 	bic.w	r3, r3, #16
 800f7a8:	b2da      	uxtb	r2, r3
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d005      	beq.n	800f7c2 <sent_tcp+0x92>
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ba:	88fa      	ldrh	r2, [r7, #6]
 800f7bc:	2102      	movs	r1, #2
 800f7be:	6978      	ldr	r0, [r7, #20]
 800f7c0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f7c2:	2300      	movs	r3, #0
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3718      	adds	r7, #24
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	0802463c 	.word	0x0802463c
 800f7d0:	080247b0 	.word	0x080247b0
 800f7d4:	0802469c 	.word	0x0802469c

0800f7d8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b088      	sub	sp, #32
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d106      	bne.n	800f7fc <err_tcp+0x24>
 800f7ee:	4b5f      	ldr	r3, [pc, #380]	; (800f96c <err_tcp+0x194>)
 800f7f0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f7f4:	495e      	ldr	r1, [pc, #376]	; (800f970 <err_tcp+0x198>)
 800f7f6:	485f      	ldr	r0, [pc, #380]	; (800f974 <err_tcp+0x19c>)
 800f7f8:	f012 fa90 	bl	8021d1c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800f7fc:	f006 fbee 	bl	8015fdc <sys_arch_protect>
 800f800:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800f802:	69fb      	ldr	r3, [r7, #28]
 800f804:	2200      	movs	r2, #0
 800f806:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	78fa      	ldrb	r2, [r7, #3]
 800f80c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	7f1b      	ldrb	r3, [r3, #28]
 800f812:	f043 0301 	orr.w	r3, r3, #1
 800f816:	b2da      	uxtb	r2, r3
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	785b      	ldrb	r3, [r3, #1]
 800f820:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800f822:	69fb      	ldr	r3, [r7, #28]
 800f824:	2200      	movs	r2, #0
 800f826:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800f828:	69b8      	ldr	r0, [r7, #24]
 800f82a:	f006 fbe5 	bl	8015ff8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f832:	2b00      	cmp	r3, #0
 800f834:	d005      	beq.n	800f842 <err_tcp+0x6a>
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83a:	2200      	movs	r2, #0
 800f83c:	2104      	movs	r1, #4
 800f83e:	69f8      	ldr	r0, [r7, #28]
 800f840:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f846:	2b00      	cmp	r3, #0
 800f848:	d005      	beq.n	800f856 <err_tcp+0x7e>
 800f84a:	69fb      	ldr	r3, [r7, #28]
 800f84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f84e:	2200      	movs	r2, #0
 800f850:	2100      	movs	r1, #0
 800f852:	69f8      	ldr	r0, [r7, #28]
 800f854:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d005      	beq.n	800f86a <err_tcp+0x92>
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f862:	2200      	movs	r2, #0
 800f864:	2102      	movs	r1, #2
 800f866:	69f8      	ldr	r0, [r7, #28]
 800f868:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800f86a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f86e:	4618      	mov	r0, r3
 800f870:	f7ff fd86 	bl	800f380 <lwip_netconn_err_to_msg>
 800f874:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	3310      	adds	r3, #16
 800f87a:	4618      	mov	r0, r3
 800f87c:	f006 fa93 	bl	8015da6 <sys_mbox_valid>
 800f880:	4603      	mov	r3, r0
 800f882:	2b00      	cmp	r3, #0
 800f884:	d005      	beq.n	800f892 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	3310      	adds	r3, #16
 800f88a:	6939      	ldr	r1, [r7, #16]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f006 fa15 	bl	8015cbc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	3314      	adds	r3, #20
 800f896:	4618      	mov	r0, r3
 800f898:	f006 fa85 	bl	8015da6 <sys_mbox_valid>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d005      	beq.n	800f8ae <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800f8a2:	69fb      	ldr	r3, [r7, #28]
 800f8a4:	3314      	adds	r3, #20
 800f8a6:	6939      	ldr	r1, [r7, #16]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f006 fa07 	bl	8015cbc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800f8ae:	7dfb      	ldrb	r3, [r7, #23]
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d005      	beq.n	800f8c0 <err_tcp+0xe8>
 800f8b4:	7dfb      	ldrb	r3, [r7, #23]
 800f8b6:	2b04      	cmp	r3, #4
 800f8b8:	d002      	beq.n	800f8c0 <err_tcp+0xe8>
 800f8ba:	7dfb      	ldrb	r3, [r7, #23]
 800f8bc:	2b03      	cmp	r3, #3
 800f8be:	d143      	bne.n	800f948 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	7f1b      	ldrb	r3, [r3, #28]
 800f8c4:	f003 0304 	and.w	r3, r3, #4
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	bf14      	ite	ne
 800f8cc:	2301      	movne	r3, #1
 800f8ce:	2300      	moveq	r3, #0
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	7f1b      	ldrb	r3, [r3, #28]
 800f8d8:	f023 0304 	bic.w	r3, r3, #4
 800f8dc:	b2da      	uxtb	r2, r3
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d13b      	bne.n	800f960 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	6a1b      	ldr	r3, [r3, #32]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d106      	bne.n	800f8fe <err_tcp+0x126>
 800f8f0:	4b1e      	ldr	r3, [pc, #120]	; (800f96c <err_tcp+0x194>)
 800f8f2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f8f6:	4920      	ldr	r1, [pc, #128]	; (800f978 <err_tcp+0x1a0>)
 800f8f8:	481e      	ldr	r0, [pc, #120]	; (800f974 <err_tcp+0x19c>)
 800f8fa:	f012 fa0f 	bl	8021d1c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800f8fe:	7dfb      	ldrb	r3, [r7, #23]
 800f900:	2b04      	cmp	r3, #4
 800f902:	d104      	bne.n	800f90e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	6a1b      	ldr	r3, [r3, #32]
 800f908:	2200      	movs	r2, #0
 800f90a:	711a      	strb	r2, [r3, #4]
 800f90c:	e003      	b.n	800f916 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	6a1b      	ldr	r3, [r3, #32]
 800f912:	78fa      	ldrb	r2, [r7, #3]
 800f914:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f916:	69fb      	ldr	r3, [r7, #28]
 800f918:	6a1b      	ldr	r3, [r3, #32]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	330c      	adds	r3, #12
 800f91e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f920:	68b8      	ldr	r0, [r7, #8]
 800f922:	f006 fad1 	bl	8015ec8 <sys_sem_valid>
 800f926:	4603      	mov	r3, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d106      	bne.n	800f93a <err_tcp+0x162>
 800f92c:	4b0f      	ldr	r3, [pc, #60]	; (800f96c <err_tcp+0x194>)
 800f92e:	f240 12ef 	movw	r2, #495	; 0x1ef
 800f932:	4912      	ldr	r1, [pc, #72]	; (800f97c <err_tcp+0x1a4>)
 800f934:	480f      	ldr	r0, [pc, #60]	; (800f974 <err_tcp+0x19c>)
 800f936:	f012 f9f1 	bl	8021d1c <iprintf>
      conn->current_msg = NULL;
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	2200      	movs	r2, #0
 800f93e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800f940:	68b8      	ldr	r0, [r7, #8]
 800f942:	f006 faa7 	bl	8015e94 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800f946:	e00b      	b.n	800f960 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	6a1b      	ldr	r3, [r3, #32]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d008      	beq.n	800f962 <err_tcp+0x18a>
 800f950:	4b06      	ldr	r3, [pc, #24]	; (800f96c <err_tcp+0x194>)
 800f952:	f240 12f7 	movw	r2, #503	; 0x1f7
 800f956:	490a      	ldr	r1, [pc, #40]	; (800f980 <err_tcp+0x1a8>)
 800f958:	4806      	ldr	r0, [pc, #24]	; (800f974 <err_tcp+0x19c>)
 800f95a:	f012 f9df 	bl	8021d1c <iprintf>
  }
}
 800f95e:	e000      	b.n	800f962 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800f960:	bf00      	nop
}
 800f962:	bf00      	nop
 800f964:	3720      	adds	r7, #32
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	0802463c 	.word	0x0802463c
 800f970:	080247b0 	.word	0x080247b0
 800f974:	0802469c 	.word	0x0802469c
 800f978:	080247c0 	.word	0x080247c0
 800f97c:	080247dc 	.word	0x080247dc
 800f980:	080247f8 	.word	0x080247f8

0800f984 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800f992:	6879      	ldr	r1, [r7, #4]
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f007 fed9 	bl	801774c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800f99a:	490a      	ldr	r1, [pc, #40]	; (800f9c4 <setup_tcp+0x40>)
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f007 fee7 	bl	8017770 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800f9a2:	4909      	ldr	r1, [pc, #36]	; (800f9c8 <setup_tcp+0x44>)
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	f007 ff05 	bl	80177b4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800f9aa:	2202      	movs	r2, #2
 800f9ac:	4907      	ldr	r1, [pc, #28]	; (800f9cc <setup_tcp+0x48>)
 800f9ae:	68f8      	ldr	r0, [r7, #12]
 800f9b0:	f007 ff5c 	bl	801786c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800f9b4:	4906      	ldr	r1, [pc, #24]	; (800f9d0 <setup_tcp+0x4c>)
 800f9b6:	68f8      	ldr	r0, [r7, #12]
 800f9b8:	f007 ff1e 	bl	80177f8 <tcp_err>
}
 800f9bc:	bf00      	nop
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	0800f55d 	.word	0x0800f55d
 800f9c8:	0800f731 	.word	0x0800f731
 800f9cc:	0800f669 	.word	0x0800f669
 800f9d0:	0800f7d9 	.word	0x0800f7d9

0800f9d4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800f9d4:	b590      	push	{r4, r7, lr}
 800f9d6:	b085      	sub	sp, #20
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d006      	beq.n	800f9f8 <pcb_new+0x24>
 800f9ea:	4b2b      	ldr	r3, [pc, #172]	; (800fa98 <pcb_new+0xc4>)
 800f9ec:	f240 2265 	movw	r2, #613	; 0x265
 800f9f0:	492a      	ldr	r1, [pc, #168]	; (800fa9c <pcb_new+0xc8>)
 800f9f2:	482b      	ldr	r0, [pc, #172]	; (800faa0 <pcb_new+0xcc>)
 800f9f4:	f012 f992 	bl	8021d1c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa02:	2b10      	cmp	r3, #16
 800fa04:	d022      	beq.n	800fa4c <pcb_new+0x78>
 800fa06:	2b20      	cmp	r3, #32
 800fa08:	d133      	bne.n	800fa72 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681c      	ldr	r4, [r3, #0]
 800fa0e:	7bfb      	ldrb	r3, [r7, #15]
 800fa10:	4618      	mov	r0, r3
 800fa12:	f00d fbae 	bl	801d172 <udp_new_ip_type>
 800fa16:	4603      	mov	r3, r0
 800fa18:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d02a      	beq.n	800fa7a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	2b22      	cmp	r3, #34	; 0x22
 800fa2c:	d104      	bne.n	800fa38 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	2201      	movs	r2, #1
 800fa36:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	6858      	ldr	r0, [r3, #4]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	461a      	mov	r2, r3
 800fa44:	4917      	ldr	r1, [pc, #92]	; (800faa4 <pcb_new+0xd0>)
 800fa46:	f00d fb1b 	bl	801d080 <udp_recv>
      }
      break;
 800fa4a:	e016      	b.n	800fa7a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681c      	ldr	r4, [r3, #0]
 800fa50:	7bfb      	ldrb	r3, [r7, #15]
 800fa52:	4618      	mov	r0, r3
 800fa54:	f007 fe6c 	bl	8017730 <tcp_new_ip_type>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d00b      	beq.n	800fa7e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7ff ff8a 	bl	800f984 <setup_tcp>
      }
      break;
 800fa70:	e005      	b.n	800fa7e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	22fa      	movs	r2, #250	; 0xfa
 800fa76:	711a      	strb	r2, [r3, #4]
      return;
 800fa78:	e00a      	b.n	800fa90 <pcb_new+0xbc>
      break;
 800fa7a:	bf00      	nop
 800fa7c:	e000      	b.n	800fa80 <pcb_new+0xac>
      break;
 800fa7e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	685b      	ldr	r3, [r3, #4]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d102      	bne.n	800fa90 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	22ff      	movs	r2, #255	; 0xff
 800fa8e:	711a      	strb	r2, [r3, #4]
  }
}
 800fa90:	3714      	adds	r7, #20
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd90      	pop	{r4, r7, pc}
 800fa96:	bf00      	nop
 800fa98:	0802463c 	.word	0x0802463c
 800fa9c:	0802483c 	.word	0x0802483c
 800faa0:	0802469c 	.word	0x0802469c
 800faa4:	0800f461 	.word	0x0800f461

0800faa8 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2200      	movs	r2, #0
 800fab8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d102      	bne.n	800faca <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800fac4:	68f8      	ldr	r0, [r7, #12]
 800fac6:	f7ff ff85 	bl	800f9d4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800faca:	bf00      	nop
 800facc:	3710      	adds	r7, #16
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
	...

0800fad4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b086      	sub	sp, #24
 800fad8:	af00      	add	r7, sp, #0
 800fada:	4603      	mov	r3, r0
 800fadc:	6039      	str	r1, [r7, #0]
 800fade:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800fae0:	2300      	movs	r3, #0
 800fae2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800fae4:	2007      	movs	r0, #7
 800fae6:	f004 f955 	bl	8013d94 <memp_malloc>
 800faea:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d101      	bne.n	800faf6 <netconn_alloc+0x22>
    return NULL;
 800faf2:	2300      	movs	r3, #0
 800faf4:	e052      	b.n	800fb9c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	2200      	movs	r2, #0
 800fafa:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	79fa      	ldrb	r2, [r7, #7]
 800fb00:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	2200      	movs	r2, #0
 800fb06:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800fb08:	79fb      	ldrb	r3, [r7, #7]
 800fb0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb0e:	2b10      	cmp	r3, #16
 800fb10:	d004      	beq.n	800fb1c <netconn_alloc+0x48>
 800fb12:	2b20      	cmp	r3, #32
 800fb14:	d105      	bne.n	800fb22 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800fb16:	2306      	movs	r3, #6
 800fb18:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800fb1a:	e00a      	b.n	800fb32 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800fb1c:	2306      	movs	r3, #6
 800fb1e:	617b      	str	r3, [r7, #20]
      break;
 800fb20:	e007      	b.n	800fb32 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800fb22:	4b20      	ldr	r3, [pc, #128]	; (800fba4 <netconn_alloc+0xd0>)
 800fb24:	f240 22e5 	movw	r2, #741	; 0x2e5
 800fb28:	491f      	ldr	r1, [pc, #124]	; (800fba8 <netconn_alloc+0xd4>)
 800fb2a:	4820      	ldr	r0, [pc, #128]	; (800fbac <netconn_alloc+0xd8>)
 800fb2c:	f012 f8f6 	bl	8021d1c <iprintf>
      goto free_and_return;
 800fb30:	e02f      	b.n	800fb92 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	3310      	adds	r3, #16
 800fb36:	6979      	ldr	r1, [r7, #20]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f006 f88b 	bl	8015c54 <sys_mbox_new>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d125      	bne.n	800fb90 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	330c      	adds	r3, #12
 800fb48:	2100      	movs	r1, #0
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f006 f949 	bl	8015de2 <sys_sem_new>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d005      	beq.n	800fb62 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	3310      	adds	r3, #16
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f006 f89c 	bl	8015c98 <sys_mbox_free>
    goto free_and_return;
 800fb60:	e017      	b.n	800fb92 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	3314      	adds	r3, #20
 800fb66:	4618      	mov	r0, r3
 800fb68:	f006 f92e 	bl	8015dc8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb78:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	683a      	ldr	r2, [r7, #0]
 800fb7e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2200      	movs	r2, #0
 800fb84:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	7cfa      	ldrb	r2, [r7, #19]
 800fb8a:	771a      	strb	r2, [r3, #28]
  return conn;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	e005      	b.n	800fb9c <netconn_alloc+0xc8>
    goto free_and_return;
 800fb90:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800fb92:	68f9      	ldr	r1, [r7, #12]
 800fb94:	2007      	movs	r0, #7
 800fb96:	f004 f973 	bl	8013e80 <memp_free>
  return NULL;
 800fb9a:	2300      	movs	r3, #0
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3718      	adds	r7, #24
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	0802463c 	.word	0x0802463c
 800fba8:	0802485c 	.word	0x0802485c
 800fbac:	0802469c 	.word	0x0802469c

0800fbb0 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d006      	beq.n	800fbce <netconn_free+0x1e>
 800fbc0:	4b1b      	ldr	r3, [pc, #108]	; (800fc30 <netconn_free+0x80>)
 800fbc2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fbc6:	491b      	ldr	r1, [pc, #108]	; (800fc34 <netconn_free+0x84>)
 800fbc8:	481b      	ldr	r0, [pc, #108]	; (800fc38 <netconn_free+0x88>)
 800fbca:	f012 f8a7 	bl	8021d1c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	3310      	adds	r3, #16
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f006 f8e7 	bl	8015da6 <sys_mbox_valid>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d006      	beq.n	800fbec <netconn_free+0x3c>
 800fbde:	4b14      	ldr	r3, [pc, #80]	; (800fc30 <netconn_free+0x80>)
 800fbe0:	f240 3223 	movw	r2, #803	; 0x323
 800fbe4:	4915      	ldr	r1, [pc, #84]	; (800fc3c <netconn_free+0x8c>)
 800fbe6:	4814      	ldr	r0, [pc, #80]	; (800fc38 <netconn_free+0x88>)
 800fbe8:	f012 f898 	bl	8021d1c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	3314      	adds	r3, #20
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f006 f8d8 	bl	8015da6 <sys_mbox_valid>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d006      	beq.n	800fc0a <netconn_free+0x5a>
 800fbfc:	4b0c      	ldr	r3, [pc, #48]	; (800fc30 <netconn_free+0x80>)
 800fbfe:	f240 3226 	movw	r2, #806	; 0x326
 800fc02:	490f      	ldr	r1, [pc, #60]	; (800fc40 <netconn_free+0x90>)
 800fc04:	480c      	ldr	r0, [pc, #48]	; (800fc38 <netconn_free+0x88>)
 800fc06:	f012 f889 	bl	8021d1c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	330c      	adds	r3, #12
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f006 f94d 	bl	8015eae <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	330c      	adds	r3, #12
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f006 f966 	bl	8015eea <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800fc1e:	6879      	ldr	r1, [r7, #4]
 800fc20:	2007      	movs	r0, #7
 800fc22:	f004 f92d 	bl	8013e80 <memp_free>
}
 800fc26:	bf00      	nop
 800fc28:	3708      	adds	r7, #8
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	0802463c 	.word	0x0802463c
 800fc34:	08024884 	.word	0x08024884
 800fc38:	0802469c 	.word	0x0802469c
 800fc3c:	080248b4 	.word	0x080248b4
 800fc40:	080248f0 	.word	0x080248f0

0800fc44 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b086      	sub	sp, #24
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	3310      	adds	r3, #16
 800fc50:	4618      	mov	r0, r3
 800fc52:	f006 f8a8 	bl	8015da6 <sys_mbox_valid>
 800fc56:	4603      	mov	r3, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d02f      	beq.n	800fcbc <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800fc5c:	e018      	b.n	800fc90 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc66:	2b10      	cmp	r3, #16
 800fc68:	d10e      	bne.n	800fc88 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	f107 020f 	add.w	r2, r7, #15
 800fc70:	4611      	mov	r1, r2
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7ff fbba 	bl	800f3ec <lwip_netconn_is_err_msg>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d108      	bne.n	800fc90 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	4618      	mov	r0, r3
 800fc82:	f005 f833 	bl	8014cec <pbuf_free>
 800fc86:	e003      	b.n	800fc90 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f004 f922 	bl	8013ed4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	3310      	adds	r3, #16
 800fc94:	f107 0210 	add.w	r2, r7, #16
 800fc98:	4611      	mov	r1, r2
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f006 f867 	bl	8015d6e <sys_arch_mbox_tryfetch>
 800fca0:	4603      	mov	r3, r0
 800fca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fca6:	d1da      	bne.n	800fc5e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	3310      	adds	r3, #16
 800fcac:	4618      	mov	r0, r3
 800fcae:	f005 fff3 	bl	8015c98 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	3310      	adds	r3, #16
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f006 f886 	bl	8015dc8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	3314      	adds	r3, #20
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f006 f870 	bl	8015da6 <sys_mbox_valid>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d034      	beq.n	800fd36 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fccc:	e01d      	b.n	800fd0a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	f107 020e 	add.w	r2, r7, #14
 800fcd4:	4611      	mov	r1, r2
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7ff fb88 	bl	800f3ec <lwip_netconn_is_err_msg>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d113      	bne.n	800fd0a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800fce6:	6978      	ldr	r0, [r7, #20]
 800fce8:	f7ff ffac 	bl	800fc44 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d007      	beq.n	800fd04 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f006 fce3 	bl	80166c4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	2200      	movs	r2, #0
 800fd02:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800fd04:	6978      	ldr	r0, [r7, #20]
 800fd06:	f7ff ff53 	bl	800fbb0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	3314      	adds	r3, #20
 800fd0e:	f107 0210 	add.w	r2, r7, #16
 800fd12:	4611      	mov	r1, r2
 800fd14:	4618      	mov	r0, r3
 800fd16:	f006 f82a 	bl	8015d6e <sys_arch_mbox_tryfetch>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd20:	d1d5      	bne.n	800fcce <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	3314      	adds	r3, #20
 800fd26:	4618      	mov	r0, r3
 800fd28:	f005 ffb6 	bl	8015c98 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	3314      	adds	r3, #20
 800fd30:	4618      	mov	r0, r3
 800fd32:	f006 f849 	bl	8015dc8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800fd36:	bf00      	nop
 800fd38:	3718      	adds	r7, #24
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
	...

0800fd40 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	460b      	mov	r3, r1
 800fd4a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d106      	bne.n	800fd64 <lwip_netconn_do_close_internal+0x24>
 800fd56:	4ba1      	ldr	r3, [pc, #644]	; (800ffdc <lwip_netconn_do_close_internal+0x29c>)
 800fd58:	f240 32a2 	movw	r2, #930	; 0x3a2
 800fd5c:	49a0      	ldr	r1, [pc, #640]	; (800ffe0 <lwip_netconn_do_close_internal+0x2a0>)
 800fd5e:	48a1      	ldr	r0, [pc, #644]	; (800ffe4 <lwip_netconn_do_close_internal+0x2a4>)
 800fd60:	f011 ffdc 	bl	8021d1c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd6c:	2b10      	cmp	r3, #16
 800fd6e:	d006      	beq.n	800fd7e <lwip_netconn_do_close_internal+0x3e>
 800fd70:	4b9a      	ldr	r3, [pc, #616]	; (800ffdc <lwip_netconn_do_close_internal+0x29c>)
 800fd72:	f240 32a3 	movw	r2, #931	; 0x3a3
 800fd76:	499c      	ldr	r1, [pc, #624]	; (800ffe8 <lwip_netconn_do_close_internal+0x2a8>)
 800fd78:	489a      	ldr	r0, [pc, #616]	; (800ffe4 <lwip_netconn_do_close_internal+0x2a4>)
 800fd7a:	f011 ffcf 	bl	8021d1c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	785b      	ldrb	r3, [r3, #1]
 800fd82:	2b04      	cmp	r3, #4
 800fd84:	d006      	beq.n	800fd94 <lwip_netconn_do_close_internal+0x54>
 800fd86:	4b95      	ldr	r3, [pc, #596]	; (800ffdc <lwip_netconn_do_close_internal+0x29c>)
 800fd88:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800fd8c:	4997      	ldr	r1, [pc, #604]	; (800ffec <lwip_netconn_do_close_internal+0x2ac>)
 800fd8e:	4895      	ldr	r0, [pc, #596]	; (800ffe4 <lwip_netconn_do_close_internal+0x2a4>)
 800fd90:	f011 ffc4 	bl	8021d1c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d106      	bne.n	800fdaa <lwip_netconn_do_close_internal+0x6a>
 800fd9c:	4b8f      	ldr	r3, [pc, #572]	; (800ffdc <lwip_netconn_do_close_internal+0x29c>)
 800fd9e:	f240 32a5 	movw	r2, #933	; 0x3a5
 800fda2:	4993      	ldr	r1, [pc, #588]	; (800fff0 <lwip_netconn_do_close_internal+0x2b0>)
 800fda4:	488f      	ldr	r0, [pc, #572]	; (800ffe4 <lwip_netconn_do_close_internal+0x2a4>)
 800fda6:	f011 ffb9 	bl	8021d1c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6a1b      	ldr	r3, [r3, #32]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d106      	bne.n	800fdc0 <lwip_netconn_do_close_internal+0x80>
 800fdb2:	4b8a      	ldr	r3, [pc, #552]	; (800ffdc <lwip_netconn_do_close_internal+0x29c>)
 800fdb4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fdb8:	498e      	ldr	r1, [pc, #568]	; (800fff4 <lwip_netconn_do_close_internal+0x2b4>)
 800fdba:	488a      	ldr	r0, [pc, #552]	; (800ffe4 <lwip_netconn_do_close_internal+0x2a4>)
 800fdbc:	f011 ffae 	bl	8021d1c <iprintf>

  tpcb = conn->pcb.tcp;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6a1b      	ldr	r3, [r3, #32]
 800fdca:	7a1b      	ldrb	r3, [r3, #8]
 800fdcc:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800fdce:	7bfb      	ldrb	r3, [r7, #15]
 800fdd0:	f003 0301 	and.w	r3, r3, #1
 800fdd4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800fdd6:	7bfb      	ldrb	r3, [r7, #15]
 800fdd8:	f003 0302 	and.w	r3, r3, #2
 800fddc:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800fdde:	7bfb      	ldrb	r3, [r7, #15]
 800fde0:	2b03      	cmp	r3, #3
 800fde2:	d102      	bne.n	800fdea <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800fde4:	2301      	movs	r3, #1
 800fde6:	75bb      	strb	r3, [r7, #22]
 800fde8:	e01f      	b.n	800fe2a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800fdea:	7bbb      	ldrb	r3, [r7, #14]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d00e      	beq.n	800fe0e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800fdf4:	2b05      	cmp	r3, #5
 800fdf6:	d007      	beq.n	800fe08 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800fdfc:	2b06      	cmp	r3, #6
 800fdfe:	d003      	beq.n	800fe08 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800fe04:	2b08      	cmp	r3, #8
 800fe06:	d102      	bne.n	800fe0e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	75bb      	strb	r3, [r7, #22]
 800fe0c:	e00d      	b.n	800fe2a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800fe0e:	7b7b      	ldrb	r3, [r7, #13]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d008      	beq.n	800fe26 <lwip_netconn_do_close_internal+0xe6>
 800fe14:	693b      	ldr	r3, [r7, #16]
 800fe16:	8b5b      	ldrh	r3, [r3, #26]
 800fe18:	f003 0310 	and.w	r3, r3, #16
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d002      	beq.n	800fe26 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800fe20:	2301      	movs	r3, #1
 800fe22:	75bb      	strb	r3, [r7, #22]
 800fe24:	e001      	b.n	800fe2a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800fe26:	2300      	movs	r3, #0
 800fe28:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800fe2a:	7dbb      	ldrb	r3, [r7, #22]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d003      	beq.n	800fe38 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800fe30:	2100      	movs	r1, #0
 800fe32:	6938      	ldr	r0, [r7, #16]
 800fe34:	f007 fc8a 	bl	801774c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	7d1b      	ldrb	r3, [r3, #20]
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	d104      	bne.n	800fe4a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800fe40:	2100      	movs	r1, #0
 800fe42:	6938      	ldr	r0, [r7, #16]
 800fe44:	f007 fcfa 	bl	801783c <tcp_accept>
 800fe48:	e01d      	b.n	800fe86 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800fe4a:	7bbb      	ldrb	r3, [r7, #14]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d007      	beq.n	800fe60 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800fe50:	2100      	movs	r1, #0
 800fe52:	6938      	ldr	r0, [r7, #16]
 800fe54:	f007 fc8c 	bl	8017770 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800fe58:	2100      	movs	r1, #0
 800fe5a:	6938      	ldr	r0, [r7, #16]
 800fe5c:	f007 fcee 	bl	801783c <tcp_accept>
    }
    if (shut_tx) {
 800fe60:	7b7b      	ldrb	r3, [r7, #13]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d003      	beq.n	800fe6e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800fe66:	2100      	movs	r1, #0
 800fe68:	6938      	ldr	r0, [r7, #16]
 800fe6a:	f007 fca3 	bl	80177b4 <tcp_sent>
    }
    if (shut_close) {
 800fe6e:	7dbb      	ldrb	r3, [r7, #22]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d008      	beq.n	800fe86 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800fe74:	2200      	movs	r2, #0
 800fe76:	2100      	movs	r1, #0
 800fe78:	6938      	ldr	r0, [r7, #16]
 800fe7a:	f007 fcf7 	bl	801786c <tcp_poll>
      tcp_err(tpcb, NULL);
 800fe7e:	2100      	movs	r1, #0
 800fe80:	6938      	ldr	r0, [r7, #16]
 800fe82:	f007 fcb9 	bl	80177f8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800fe86:	7dbb      	ldrb	r3, [r7, #22]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d005      	beq.n	800fe98 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800fe8c:	6938      	ldr	r0, [r7, #16]
 800fe8e:	f006 fad3 	bl	8016438 <tcp_close>
 800fe92:	4603      	mov	r3, r0
 800fe94:	75fb      	strb	r3, [r7, #23]
 800fe96:	e007      	b.n	800fea8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800fe98:	7bbb      	ldrb	r3, [r7, #14]
 800fe9a:	7b7a      	ldrb	r2, [r7, #13]
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	6938      	ldr	r0, [r7, #16]
 800fea0:	f006 faf6 	bl	8016490 <tcp_shutdown>
 800fea4:	4603      	mov	r3, r0
 800fea6:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800fea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d102      	bne.n	800feb6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800feb0:	2301      	movs	r3, #1
 800feb2:	757b      	strb	r3, [r7, #21]
 800feb4:	e016      	b.n	800fee4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800feb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800feba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800febe:	d10f      	bne.n	800fee0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6a1b      	ldr	r3, [r3, #32]
 800fec4:	7a5b      	ldrb	r3, [r3, #9]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d10c      	bne.n	800fee4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800feca:	2301      	movs	r3, #1
 800fecc:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800fece:	7dbb      	ldrb	r3, [r7, #22]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d007      	beq.n	800fee4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800fed4:	6938      	ldr	r0, [r7, #16]
 800fed6:	f006 fbf5 	bl	80166c4 <tcp_abort>
          err = ERR_OK;
 800feda:	2300      	movs	r3, #0
 800fedc:	75fb      	strb	r3, [r7, #23]
 800fede:	e001      	b.n	800fee4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800fee0:	2301      	movs	r3, #1
 800fee2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800fee4:	7d7b      	ldrb	r3, [r7, #21]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d044      	beq.n	800ff74 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6a1b      	ldr	r3, [r3, #32]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	330c      	adds	r3, #12
 800fef2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6a1b      	ldr	r3, [r3, #32]
 800fef8:	7dfa      	ldrb	r2, [r7, #23]
 800fefa:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2200      	movs	r2, #0
 800ff00:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800ff08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d129      	bne.n	800ff64 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800ff10:	7dbb      	ldrb	r3, [r7, #22]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d00c      	beq.n	800ff30 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d005      	beq.n	800ff30 <lwip_netconn_do_close_internal+0x1f0>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff28:	2200      	movs	r2, #0
 800ff2a:	2104      	movs	r1, #4
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	4798      	blx	r3
      }
      if (shut_rx) {
 800ff30:	7bbb      	ldrb	r3, [r7, #14]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d009      	beq.n	800ff4a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d005      	beq.n	800ff4a <lwip_netconn_do_close_internal+0x20a>
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff42:	2200      	movs	r2, #0
 800ff44:	2100      	movs	r1, #0
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	4798      	blx	r3
      }
      if (shut_tx) {
 800ff4a:	7b7b      	ldrb	r3, [r7, #13]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d009      	beq.n	800ff64 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d005      	beq.n	800ff64 <lwip_netconn_do_close_internal+0x224>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	2102      	movs	r1, #2
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ff64:	78fb      	ldrb	r3, [r7, #3]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d002      	beq.n	800ff70 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800ff6a:	68b8      	ldr	r0, [r7, #8]
 800ff6c:	f005 ff92 	bl	8015e94 <sys_sem_signal>
    }
    return ERR_OK;
 800ff70:	2300      	movs	r3, #0
 800ff72:	e02e      	b.n	800ffd2 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800ff74:	7d7b      	ldrb	r3, [r7, #21]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d11e      	bne.n	800ffb8 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	7d1b      	ldrb	r3, [r3, #20]
 800ff7e:	2b01      	cmp	r3, #1
 800ff80:	d106      	bne.n	800ff90 <lwip_netconn_do_close_internal+0x250>
 800ff82:	4b16      	ldr	r3, [pc, #88]	; (800ffdc <lwip_netconn_do_close_internal+0x29c>)
 800ff84:	f240 4241 	movw	r2, #1089	; 0x441
 800ff88:	491b      	ldr	r1, [pc, #108]	; (800fff8 <lwip_netconn_do_close_internal+0x2b8>)
 800ff8a:	4816      	ldr	r0, [pc, #88]	; (800ffe4 <lwip_netconn_do_close_internal+0x2a4>)
 800ff8c:	f011 fec6 	bl	8021d1c <iprintf>
    if (shut_tx) {
 800ff90:	7b7b      	ldrb	r3, [r7, #13]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d003      	beq.n	800ff9e <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800ff96:	4919      	ldr	r1, [pc, #100]	; (800fffc <lwip_netconn_do_close_internal+0x2bc>)
 800ff98:	6938      	ldr	r0, [r7, #16]
 800ff9a:	f007 fc0b 	bl	80177b4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	4917      	ldr	r1, [pc, #92]	; (8010000 <lwip_netconn_do_close_internal+0x2c0>)
 800ffa2:	6938      	ldr	r0, [r7, #16]
 800ffa4:	f007 fc62 	bl	801786c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800ffa8:	4916      	ldr	r1, [pc, #88]	; (8010004 <lwip_netconn_do_close_internal+0x2c4>)
 800ffaa:	6938      	ldr	r0, [r7, #16]
 800ffac:	f007 fc24 	bl	80177f8 <tcp_err>
    tcp_arg(tpcb, conn);
 800ffb0:	6879      	ldr	r1, [r7, #4]
 800ffb2:	6938      	ldr	r0, [r7, #16]
 800ffb4:	f007 fbca 	bl	801774c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800ffb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d106      	bne.n	800ffce <lwip_netconn_do_close_internal+0x28e>
 800ffc0:	4b06      	ldr	r3, [pc, #24]	; (800ffdc <lwip_netconn_do_close_internal+0x29c>)
 800ffc2:	f240 424d 	movw	r2, #1101	; 0x44d
 800ffc6:	4910      	ldr	r1, [pc, #64]	; (8010008 <lwip_netconn_do_close_internal+0x2c8>)
 800ffc8:	4806      	ldr	r0, [pc, #24]	; (800ffe4 <lwip_netconn_do_close_internal+0x2a4>)
 800ffca:	f011 fea7 	bl	8021d1c <iprintf>
  return err;
 800ffce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3718      	adds	r7, #24
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop
 800ffdc:	0802463c 	.word	0x0802463c
 800ffe0:	0802492c 	.word	0x0802492c
 800ffe4:	0802469c 	.word	0x0802469c
 800ffe8:	0802493c 	.word	0x0802493c
 800ffec:	0802495c 	.word	0x0802495c
 800fff0:	08024980 	.word	0x08024980
 800fff4:	080247c0 	.word	0x080247c0
 800fff8:	08024994 	.word	0x08024994
 800fffc:	0800f731 	.word	0x0800f731
 8010000:	0800f669 	.word	0x0800f669
 8010004:	0800f7d9 	.word	0x0800f7d9
 8010008:	080249b8 	.word	0x080249b8

0801000c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	785b      	ldrb	r3, [r3, #1]
 801001e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8010020:	7afb      	ldrb	r3, [r7, #11]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d00d      	beq.n	8010042 <lwip_netconn_do_delconn+0x36>
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010030:	2b10      	cmp	r3, #16
 8010032:	d006      	beq.n	8010042 <lwip_netconn_do_delconn+0x36>
 8010034:	4b60      	ldr	r3, [pc, #384]	; (80101b8 <lwip_netconn_do_delconn+0x1ac>)
 8010036:	f240 425e 	movw	r2, #1118	; 0x45e
 801003a:	4960      	ldr	r1, [pc, #384]	; (80101bc <lwip_netconn_do_delconn+0x1b0>)
 801003c:	4860      	ldr	r0, [pc, #384]	; (80101c0 <lwip_netconn_do_delconn+0x1b4>)
 801003e:	f011 fe6d 	bl	8021d1c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8010042:	7afb      	ldrb	r3, [r7, #11]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d005      	beq.n	8010054 <lwip_netconn_do_delconn+0x48>
 8010048:	7afb      	ldrb	r3, [r7, #11]
 801004a:	2b02      	cmp	r3, #2
 801004c:	d002      	beq.n	8010054 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801004e:	7afb      	ldrb	r3, [r7, #11]
 8010050:	2b03      	cmp	r3, #3
 8010052:	d109      	bne.n	8010068 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8010054:	7afb      	ldrb	r3, [r7, #11]
 8010056:	2b03      	cmp	r3, #3
 8010058:	d10a      	bne.n	8010070 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	7f1b      	ldrb	r3, [r3, #28]
 8010060:	f003 0304 	and.w	r3, r3, #4
 8010064:	2b00      	cmp	r3, #0
 8010066:	d103      	bne.n	8010070 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	22fb      	movs	r2, #251	; 0xfb
 801006c:	711a      	strb	r2, [r3, #4]
 801006e:	e097      	b.n	80101a0 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8010070:	7afb      	ldrb	r3, [r7, #11]
 8010072:	2b03      	cmp	r3, #3
 8010074:	d10d      	bne.n	8010092 <lwip_netconn_do_delconn+0x86>
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	7f1b      	ldrb	r3, [r3, #28]
 801007c:	f003 0304 	and.w	r3, r3, #4
 8010080:	2b00      	cmp	r3, #0
 8010082:	d106      	bne.n	8010092 <lwip_netconn_do_delconn+0x86>
 8010084:	4b4c      	ldr	r3, [pc, #304]	; (80101b8 <lwip_netconn_do_delconn+0x1ac>)
 8010086:	f240 427a 	movw	r2, #1146	; 0x47a
 801008a:	494e      	ldr	r1, [pc, #312]	; (80101c4 <lwip_netconn_do_delconn+0x1b8>)
 801008c:	484c      	ldr	r0, [pc, #304]	; (80101c0 <lwip_netconn_do_delconn+0x1b4>)
 801008e:	f011 fe45 	bl	8021d1c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	2200      	movs	r2, #0
 8010096:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4618      	mov	r0, r3
 801009e:	f7ff fdd1 	bl	800fc44 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d05f      	beq.n	801016c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100b6:	2b10      	cmp	r3, #16
 80100b8:	d00d      	beq.n	80100d6 <lwip_netconn_do_delconn+0xca>
 80100ba:	2b20      	cmp	r3, #32
 80100bc:	d151      	bne.n	8010162 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	2200      	movs	r2, #0
 80100c6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f00c fff6 	bl	801d0c0 <udp_remove>
          break;
 80100d4:	e046      	b.n	8010164 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	6a1b      	ldr	r3, [r3, #32]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d006      	beq.n	80100ee <lwip_netconn_do_delconn+0xe2>
 80100e0:	4b35      	ldr	r3, [pc, #212]	; (80101b8 <lwip_netconn_do_delconn+0x1ac>)
 80100e2:	f240 4294 	movw	r2, #1172	; 0x494
 80100e6:	4938      	ldr	r1, [pc, #224]	; (80101c8 <lwip_netconn_do_delconn+0x1bc>)
 80100e8:	4835      	ldr	r0, [pc, #212]	; (80101c0 <lwip_netconn_do_delconn+0x1b4>)
 80100ea:	f011 fe17 	bl	8021d1c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	2204      	movs	r2, #4
 80100f4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2203      	movs	r2, #3
 80100fa:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	68fa      	ldr	r2, [r7, #12]
 8010102:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	2100      	movs	r1, #0
 801010a:	4618      	mov	r0, r3
 801010c:	f7ff fe18 	bl	800fd40 <lwip_netconn_do_close_internal>
 8010110:	4603      	mov	r3, r0
 8010112:	2b00      	cmp	r3, #0
 8010114:	d04b      	beq.n	80101ae <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	785b      	ldrb	r3, [r3, #1]
 801011c:	2b04      	cmp	r3, #4
 801011e:	d006      	beq.n	801012e <lwip_netconn_do_delconn+0x122>
 8010120:	4b25      	ldr	r3, [pc, #148]	; (80101b8 <lwip_netconn_do_delconn+0x1ac>)
 8010122:	f240 429a 	movw	r2, #1178	; 0x49a
 8010126:	4929      	ldr	r1, [pc, #164]	; (80101cc <lwip_netconn_do_delconn+0x1c0>)
 8010128:	4825      	ldr	r0, [pc, #148]	; (80101c0 <lwip_netconn_do_delconn+0x1b4>)
 801012a:	f011 fdf7 	bl	8021d1c <iprintf>
            UNLOCK_TCPIP_CORE();
 801012e:	4828      	ldr	r0, [pc, #160]	; (80101d0 <lwip_netconn_do_delconn+0x1c4>)
 8010130:	f005 ff21 	bl	8015f76 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	330c      	adds	r3, #12
 801013a:	2100      	movs	r1, #0
 801013c:	4618      	mov	r0, r3
 801013e:	f005 fe78 	bl	8015e32 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8010142:	4823      	ldr	r0, [pc, #140]	; (80101d0 <lwip_netconn_do_delconn+0x1c4>)
 8010144:	f005 ff08 	bl	8015f58 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	785b      	ldrb	r3, [r3, #1]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d02d      	beq.n	80101ae <lwip_netconn_do_delconn+0x1a2>
 8010152:	4b19      	ldr	r3, [pc, #100]	; (80101b8 <lwip_netconn_do_delconn+0x1ac>)
 8010154:	f240 429e 	movw	r2, #1182	; 0x49e
 8010158:	491c      	ldr	r1, [pc, #112]	; (80101cc <lwip_netconn_do_delconn+0x1c0>)
 801015a:	4819      	ldr	r0, [pc, #100]	; (80101c0 <lwip_netconn_do_delconn+0x1b4>)
 801015c:	f011 fdde 	bl	8021d1c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8010160:	e025      	b.n	80101ae <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8010162:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	2200      	movs	r2, #0
 801016a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010172:	2b00      	cmp	r3, #0
 8010174:	d007      	beq.n	8010186 <lwip_netconn_do_delconn+0x17a>
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017c:	68fa      	ldr	r2, [r7, #12]
 801017e:	6810      	ldr	r0, [r2, #0]
 8010180:	2200      	movs	r2, #0
 8010182:	2100      	movs	r1, #0
 8010184:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801018c:	2b00      	cmp	r3, #0
 801018e:	d007      	beq.n	80101a0 <lwip_netconn_do_delconn+0x194>
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010196:	68fa      	ldr	r2, [r7, #12]
 8010198:	6810      	ldr	r0, [r2, #0]
 801019a:	2200      	movs	r2, #0
 801019c:	2102      	movs	r1, #2
 801019e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	330c      	adds	r3, #12
 80101a6:	4618      	mov	r0, r3
 80101a8:	f005 fe8e 	bl	8015ec8 <sys_sem_valid>
 80101ac:	e000      	b.n	80101b0 <lwip_netconn_do_delconn+0x1a4>
          return;
 80101ae:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80101b0:	3710      	adds	r7, #16
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}
 80101b6:	bf00      	nop
 80101b8:	0802463c 	.word	0x0802463c
 80101bc:	080249c8 	.word	0x080249c8
 80101c0:	0802469c 	.word	0x0802469c
 80101c4:	080249dc 	.word	0x080249dc
 80101c8:	080249fc 	.word	0x080249fc
 80101cc:	08024a18 	.word	0x08024a18
 80101d0:	2400d264 	.word	0x2400d264

080101d4 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b088      	sub	sp, #32
 80101d8:	af00      	add	r7, sp, #0
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	60b9      	str	r1, [r7, #8]
 80101de:	4613      	mov	r3, r2
 80101e0:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80101e2:	2300      	movs	r3, #0
 80101e4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d102      	bne.n	80101f6 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 80101f0:	f06f 0305 	mvn.w	r3, #5
 80101f4:	e070      	b.n	80102d8 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	785b      	ldrb	r3, [r3, #1]
 80101fa:	2b03      	cmp	r3, #3
 80101fc:	d006      	beq.n	801020c <lwip_netconn_do_connected+0x38>
 80101fe:	4b38      	ldr	r3, [pc, #224]	; (80102e0 <lwip_netconn_do_connected+0x10c>)
 8010200:	f240 5223 	movw	r2, #1315	; 0x523
 8010204:	4937      	ldr	r1, [pc, #220]	; (80102e4 <lwip_netconn_do_connected+0x110>)
 8010206:	4838      	ldr	r0, [pc, #224]	; (80102e8 <lwip_netconn_do_connected+0x114>)
 8010208:	f011 fd88 	bl	8021d1c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 801020c:	69bb      	ldr	r3, [r7, #24]
 801020e:	6a1b      	ldr	r3, [r3, #32]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d10c      	bne.n	801022e <lwip_netconn_do_connected+0x5a>
 8010214:	69bb      	ldr	r3, [r7, #24]
 8010216:	7f1b      	ldrb	r3, [r3, #28]
 8010218:	f003 0304 	and.w	r3, r3, #4
 801021c:	2b00      	cmp	r3, #0
 801021e:	d106      	bne.n	801022e <lwip_netconn_do_connected+0x5a>
 8010220:	4b2f      	ldr	r3, [pc, #188]	; (80102e0 <lwip_netconn_do_connected+0x10c>)
 8010222:	f240 5224 	movw	r2, #1316	; 0x524
 8010226:	4931      	ldr	r1, [pc, #196]	; (80102ec <lwip_netconn_do_connected+0x118>)
 8010228:	482f      	ldr	r0, [pc, #188]	; (80102e8 <lwip_netconn_do_connected+0x114>)
 801022a:	f011 fd77 	bl	8021d1c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 801022e:	69bb      	ldr	r3, [r7, #24]
 8010230:	6a1b      	ldr	r3, [r3, #32]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d008      	beq.n	8010248 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	6a1b      	ldr	r3, [r3, #32]
 801023a:	79fa      	ldrb	r2, [r7, #7]
 801023c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801023e:	69bb      	ldr	r3, [r7, #24]
 8010240:	6a1b      	ldr	r3, [r3, #32]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	330c      	adds	r3, #12
 8010246:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010250:	2b10      	cmp	r3, #16
 8010252:	d106      	bne.n	8010262 <lwip_netconn_do_connected+0x8e>
 8010254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d102      	bne.n	8010262 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 801025c:	69b8      	ldr	r0, [r7, #24]
 801025e:	f7ff fb91 	bl	800f984 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8010262:	69bb      	ldr	r3, [r7, #24]
 8010264:	7f1b      	ldrb	r3, [r3, #28]
 8010266:	f003 0304 	and.w	r3, r3, #4
 801026a:	2b00      	cmp	r3, #0
 801026c:	bf0c      	ite	eq
 801026e:	2301      	moveq	r3, #1
 8010270:	2300      	movne	r3, #0
 8010272:	b2db      	uxtb	r3, r3
 8010274:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	7f1b      	ldrb	r3, [r3, #28]
 801027a:	f023 0304 	bic.w	r3, r3, #4
 801027e:	b2da      	uxtb	r2, r3
 8010280:	69bb      	ldr	r3, [r7, #24]
 8010282:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d002      	beq.n	8010290 <lwip_netconn_do_connected+0xbc>
 801028a:	69fb      	ldr	r3, [r7, #28]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d10c      	bne.n	80102aa <lwip_netconn_do_connected+0xd6>
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d102      	bne.n	801029c <lwip_netconn_do_connected+0xc8>
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d006      	beq.n	80102aa <lwip_netconn_do_connected+0xd6>
 801029c:	4b10      	ldr	r3, [pc, #64]	; (80102e0 <lwip_netconn_do_connected+0x10c>)
 801029e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 80102a2:	4913      	ldr	r1, [pc, #76]	; (80102f0 <lwip_netconn_do_connected+0x11c>)
 80102a4:	4810      	ldr	r0, [pc, #64]	; (80102e8 <lwip_netconn_do_connected+0x114>)
 80102a6:	f011 fd39 	bl	8021d1c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80102aa:	69bb      	ldr	r3, [r7, #24]
 80102ac:	2200      	movs	r2, #0
 80102ae:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 80102b0:	69bb      	ldr	r3, [r7, #24]
 80102b2:	2200      	movs	r2, #0
 80102b4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d005      	beq.n	80102ca <lwip_netconn_do_connected+0xf6>
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c2:	2200      	movs	r2, #0
 80102c4:	2102      	movs	r1, #2
 80102c6:	69b8      	ldr	r0, [r7, #24]
 80102c8:	4798      	blx	r3

  if (was_blocking) {
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d002      	beq.n	80102d6 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 80102d0:	69f8      	ldr	r0, [r7, #28]
 80102d2:	f005 fddf 	bl	8015e94 <sys_sem_signal>
  }
  return ERR_OK;
 80102d6:	2300      	movs	r3, #0
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3720      	adds	r7, #32
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	0802463c 	.word	0x0802463c
 80102e4:	08024a20 	.word	0x08024a20
 80102e8:	0802469c 	.word	0x0802469c
 80102ec:	08024a40 	.word	0x08024a40
 80102f0:	08024a80 	.word	0x08024a80

080102f4 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b086      	sub	sp, #24
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d102      	bne.n	8010310 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 801030a:	23f1      	movs	r3, #241	; 0xf1
 801030c:	75fb      	strb	r3, [r7, #23]
 801030e:	e09b      	b.n	8010448 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801031a:	2b10      	cmp	r3, #16
 801031c:	d00f      	beq.n	801033e <lwip_netconn_do_connect+0x4a>
 801031e:	2b20      	cmp	r3, #32
 8010320:	f040 8087 	bne.w	8010432 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	6858      	ldr	r0, [r3, #4]
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	6899      	ldr	r1, [r3, #8]
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	899b      	ldrh	r3, [r3, #12]
 8010332:	461a      	mov	r2, r3
 8010334:	f00c fe0e 	bl	801cf54 <udp_connect>
 8010338:	4603      	mov	r3, r0
 801033a:	75fb      	strb	r3, [r7, #23]
        break;
 801033c:	e084      	b.n	8010448 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	785b      	ldrb	r3, [r3, #1]
 8010344:	2b03      	cmp	r3, #3
 8010346:	d102      	bne.n	801034e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8010348:	23f7      	movs	r3, #247	; 0xf7
 801034a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 801034c:	e07b      	b.n	8010446 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	785b      	ldrb	r3, [r3, #1]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d002      	beq.n	801035e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8010358:	23f6      	movs	r3, #246	; 0xf6
 801035a:	75fb      	strb	r3, [r7, #23]
        break;
 801035c:	e073      	b.n	8010446 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	4618      	mov	r0, r3
 8010364:	f7ff fb0e 	bl	800f984 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	6858      	ldr	r0, [r3, #4]
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	6899      	ldr	r1, [r3, #8]
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	899a      	ldrh	r2, [r3, #12]
 8010376:	4b38      	ldr	r3, [pc, #224]	; (8010458 <lwip_netconn_do_connect+0x164>)
 8010378:	f006 faa0 	bl	80168bc <tcp_connect>
 801037c:	4603      	mov	r3, r0
 801037e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8010380:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d15e      	bne.n	8010446 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	7f1b      	ldrb	r3, [r3, #28]
 801038e:	f003 0302 	and.w	r3, r3, #2
 8010392:	2b00      	cmp	r3, #0
 8010394:	bf14      	ite	ne
 8010396:	2301      	movne	r3, #1
 8010398:	2300      	moveq	r3, #0
 801039a:	b2db      	uxtb	r3, r3
 801039c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	2203      	movs	r2, #3
 80103a4:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80103a6:	7bfb      	ldrb	r3, [r7, #15]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d009      	beq.n	80103c0 <lwip_netconn_do_connect+0xcc>
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	7f1a      	ldrb	r2, [r3, #28]
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	f042 0204 	orr.w	r2, r2, #4
 80103ba:	b2d2      	uxtb	r2, r2
 80103bc:	771a      	strb	r2, [r3, #28]
 80103be:	e008      	b.n	80103d2 <lwip_netconn_do_connect+0xde>
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	7f1a      	ldrb	r2, [r3, #28]
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f022 0204 	bic.w	r2, r2, #4
 80103ce:	b2d2      	uxtb	r2, r2
 80103d0:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 80103d2:	7bfb      	ldrb	r3, [r7, #15]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d002      	beq.n	80103de <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 80103d8:	23fb      	movs	r3, #251	; 0xfb
 80103da:	75fb      	strb	r3, [r7, #23]
        break;
 80103dc:	e033      	b.n	8010446 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	693a      	ldr	r2, [r7, #16]
 80103e4:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 80103e6:	693b      	ldr	r3, [r7, #16]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	785b      	ldrb	r3, [r3, #1]
 80103ec:	2b03      	cmp	r3, #3
 80103ee:	d006      	beq.n	80103fe <lwip_netconn_do_connect+0x10a>
 80103f0:	4b1a      	ldr	r3, [pc, #104]	; (801045c <lwip_netconn_do_connect+0x168>)
 80103f2:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80103f6:	491a      	ldr	r1, [pc, #104]	; (8010460 <lwip_netconn_do_connect+0x16c>)
 80103f8:	481a      	ldr	r0, [pc, #104]	; (8010464 <lwip_netconn_do_connect+0x170>)
 80103fa:	f011 fc8f 	bl	8021d1c <iprintf>
              UNLOCK_TCPIP_CORE();
 80103fe:	481a      	ldr	r0, [pc, #104]	; (8010468 <lwip_netconn_do_connect+0x174>)
 8010400:	f005 fdb9 	bl	8015f76 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	330c      	adds	r3, #12
 801040a:	2100      	movs	r1, #0
 801040c:	4618      	mov	r0, r3
 801040e:	f005 fd10 	bl	8015e32 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8010412:	4815      	ldr	r0, [pc, #84]	; (8010468 <lwip_netconn_do_connect+0x174>)
 8010414:	f005 fda0 	bl	8015f58 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	785b      	ldrb	r3, [r3, #1]
 801041e:	2b03      	cmp	r3, #3
 8010420:	d116      	bne.n	8010450 <lwip_netconn_do_connect+0x15c>
 8010422:	4b0e      	ldr	r3, [pc, #56]	; (801045c <lwip_netconn_do_connect+0x168>)
 8010424:	f240 5274 	movw	r2, #1396	; 0x574
 8010428:	490d      	ldr	r1, [pc, #52]	; (8010460 <lwip_netconn_do_connect+0x16c>)
 801042a:	480e      	ldr	r0, [pc, #56]	; (8010464 <lwip_netconn_do_connect+0x170>)
 801042c:	f011 fc76 	bl	8021d1c <iprintf>
              return;
 8010430:	e00e      	b.n	8010450 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8010432:	4b0a      	ldr	r3, [pc, #40]	; (801045c <lwip_netconn_do_connect+0x168>)
 8010434:	f240 527d 	movw	r2, #1405	; 0x57d
 8010438:	490c      	ldr	r1, [pc, #48]	; (801046c <lwip_netconn_do_connect+0x178>)
 801043a:	480a      	ldr	r0, [pc, #40]	; (8010464 <lwip_netconn_do_connect+0x170>)
 801043c:	f011 fc6e 	bl	8021d1c <iprintf>
 8010440:	23fa      	movs	r3, #250	; 0xfa
 8010442:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8010444:	e000      	b.n	8010448 <lwip_netconn_do_connect+0x154>
        break;
 8010446:	bf00      	nop
    }
  }
  msg->err = err;
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	7dfa      	ldrb	r2, [r7, #23]
 801044c:	711a      	strb	r2, [r3, #4]
 801044e:	e000      	b.n	8010452 <lwip_netconn_do_connect+0x15e>
              return;
 8010450:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8010452:	3718      	adds	r7, #24
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	080101d5 	.word	0x080101d5
 801045c:	0802463c 	.word	0x0802463c
 8010460:	08024a18 	.word	0x08024a18
 8010464:	0802469c 	.word	0x0802469c
 8010468:	2400d264 	.word	0x2400d264
 801046c:	08024aa0 	.word	0x08024aa0

08010470 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010486:	2b20      	cmp	r3, #32
 8010488:	d109      	bne.n	801049e <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	4618      	mov	r0, r3
 8010492:	f00c fdcd 	bl	801d030 <udp_disconnect>
    msg->err = ERR_OK;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2200      	movs	r2, #0
 801049a:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 801049c:	e002      	b.n	80104a4 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	22fa      	movs	r2, #250	; 0xfa
 80104a2:	711a      	strb	r2, [r3, #4]
}
 80104a4:	bf00      	nop
 80104a6:	3710      	adds	r7, #16
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4618      	mov	r0, r3
 80104be:	f7fe ff43 	bl	800f348 <netconn_err>
 80104c2:	4603      	mov	r3, r0
 80104c4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80104c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d134      	bne.n	8010538 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d02d      	beq.n	8010534 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80104e2:	2b20      	cmp	r3, #32
 80104e4:	d123      	bne.n	801052e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	689b      	ldr	r3, [r3, #8]
 80104ea:	689b      	ldr	r3, [r3, #8]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d10c      	bne.n	801050a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	685a      	ldr	r2, [r3, #4]
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	689b      	ldr	r3, [r3, #8]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4619      	mov	r1, r3
 80104fe:	4610      	mov	r0, r2
 8010500:	f00c fab6 	bl	801ca70 <udp_send>
 8010504:	4603      	mov	r3, r0
 8010506:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8010508:	e016      	b.n	8010538 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	6858      	ldr	r0, [r3, #4]
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	689b      	ldr	r3, [r3, #8]
 8010514:	6819      	ldr	r1, [r3, #0]
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	689b      	ldr	r3, [r3, #8]
 801051a:	f103 0208 	add.w	r2, r3, #8
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	689b      	ldr	r3, [r3, #8]
 8010522:	899b      	ldrh	r3, [r3, #12]
 8010524:	f00c fad8 	bl	801cad8 <udp_sendto>
 8010528:	4603      	mov	r3, r0
 801052a:	73fb      	strb	r3, [r7, #15]
          break;
 801052c:	e004      	b.n	8010538 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 801052e:	23f5      	movs	r3, #245	; 0xf5
 8010530:	73fb      	strb	r3, [r7, #15]
          break;
 8010532:	e001      	b.n	8010538 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8010534:	23f5      	movs	r3, #245	; 0xf5
 8010536:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	7bfa      	ldrb	r2, [r7, #15]
 801053c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801053e:	bf00      	nop
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}
	...

08010548 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b088      	sub	sp, #32
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	460b      	mov	r3, r1
 8010552:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8010554:	2300      	movs	r3, #0
 8010556:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d106      	bne.n	801056c <lwip_netconn_do_writemore+0x24>
 801055e:	4b96      	ldr	r3, [pc, #600]	; (80107b8 <lwip_netconn_do_writemore+0x270>)
 8010560:	f240 6273 	movw	r2, #1651	; 0x673
 8010564:	4995      	ldr	r1, [pc, #596]	; (80107bc <lwip_netconn_do_writemore+0x274>)
 8010566:	4896      	ldr	r0, [pc, #600]	; (80107c0 <lwip_netconn_do_writemore+0x278>)
 8010568:	f011 fbd8 	bl	8021d1c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	785b      	ldrb	r3, [r3, #1]
 8010570:	2b01      	cmp	r3, #1
 8010572:	d006      	beq.n	8010582 <lwip_netconn_do_writemore+0x3a>
 8010574:	4b90      	ldr	r3, [pc, #576]	; (80107b8 <lwip_netconn_do_writemore+0x270>)
 8010576:	f240 6274 	movw	r2, #1652	; 0x674
 801057a:	4992      	ldr	r1, [pc, #584]	; (80107c4 <lwip_netconn_do_writemore+0x27c>)
 801057c:	4890      	ldr	r0, [pc, #576]	; (80107c0 <lwip_netconn_do_writemore+0x278>)
 801057e:	f011 fbcd 	bl	8021d1c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a1b      	ldr	r3, [r3, #32]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d106      	bne.n	8010598 <lwip_netconn_do_writemore+0x50>
 801058a:	4b8b      	ldr	r3, [pc, #556]	; (80107b8 <lwip_netconn_do_writemore+0x270>)
 801058c:	f240 6275 	movw	r2, #1653	; 0x675
 8010590:	498d      	ldr	r1, [pc, #564]	; (80107c8 <lwip_netconn_do_writemore+0x280>)
 8010592:	488b      	ldr	r0, [pc, #556]	; (80107c0 <lwip_netconn_do_writemore+0x278>)
 8010594:	f011 fbc2 	bl	8021d1c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d106      	bne.n	80105ae <lwip_netconn_do_writemore+0x66>
 80105a0:	4b85      	ldr	r3, [pc, #532]	; (80107b8 <lwip_netconn_do_writemore+0x270>)
 80105a2:	f240 6276 	movw	r2, #1654	; 0x676
 80105a6:	4989      	ldr	r1, [pc, #548]	; (80107cc <lwip_netconn_do_writemore+0x284>)
 80105a8:	4885      	ldr	r0, [pc, #532]	; (80107c0 <lwip_netconn_do_writemore+0x278>)
 80105aa:	f011 fbb7 	bl	8021d1c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6a1b      	ldr	r3, [r3, #32]
 80105b2:	699a      	ldr	r2, [r3, #24]
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6a1b      	ldr	r3, [r3, #32]
 80105b8:	695b      	ldr	r3, [r3, #20]
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d306      	bcc.n	80105cc <lwip_netconn_do_writemore+0x84>
 80105be:	4b7e      	ldr	r3, [pc, #504]	; (80107b8 <lwip_netconn_do_writemore+0x270>)
 80105c0:	f240 6277 	movw	r2, #1655	; 0x677
 80105c4:	4982      	ldr	r1, [pc, #520]	; (80107d0 <lwip_netconn_do_writemore+0x288>)
 80105c6:	487e      	ldr	r0, [pc, #504]	; (80107c0 <lwip_netconn_do_writemore+0x278>)
 80105c8:	f011 fba8 	bl	8021d1c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	6a1b      	ldr	r3, [r3, #32]
 80105d0:	899b      	ldrh	r3, [r3, #12]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d106      	bne.n	80105e4 <lwip_netconn_do_writemore+0x9c>
 80105d6:	4b78      	ldr	r3, [pc, #480]	; (80107b8 <lwip_netconn_do_writemore+0x270>)
 80105d8:	f240 6279 	movw	r2, #1657	; 0x679
 80105dc:	497d      	ldr	r1, [pc, #500]	; (80107d4 <lwip_netconn_do_writemore+0x28c>)
 80105de:	4878      	ldr	r0, [pc, #480]	; (80107c0 <lwip_netconn_do_writemore+0x278>)
 80105e0:	f011 fb9c 	bl	8021d1c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6a1b      	ldr	r3, [r3, #32]
 80105e8:	7f1b      	ldrb	r3, [r3, #28]
 80105ea:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	7f1b      	ldrb	r3, [r3, #28]
 80105f0:	f003 0302 	and.w	r3, r3, #2
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d104      	bne.n	8010602 <lwip_netconn_do_writemore+0xba>
 80105f8:	7ebb      	ldrb	r3, [r7, #26]
 80105fa:	f003 0304 	and.w	r3, r3, #4
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d001      	beq.n	8010606 <lwip_netconn_do_writemore+0xbe>
 8010602:	2301      	movs	r3, #1
 8010604:	e000      	b.n	8010608 <lwip_netconn_do_writemore+0xc0>
 8010606:	2300      	movs	r3, #0
 8010608:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6a1b      	ldr	r3, [r3, #32]
 801060e:	689b      	ldr	r3, [r3, #8]
 8010610:	681a      	ldr	r2, [r3, #0]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6a1b      	ldr	r3, [r3, #32]
 8010616:	691b      	ldr	r3, [r3, #16]
 8010618:	4413      	add	r3, r2
 801061a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6a1b      	ldr	r3, [r3, #32]
 8010620:	689b      	ldr	r3, [r3, #8]
 8010622:	685a      	ldr	r2, [r3, #4]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6a1b      	ldr	r3, [r3, #32]
 8010628:	691b      	ldr	r3, [r3, #16]
 801062a:	1ad3      	subs	r3, r2, r3
 801062c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010634:	d307      	bcc.n	8010646 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8010636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801063a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801063c:	7ebb      	ldrb	r3, [r7, #26]
 801063e:	f043 0302 	orr.w	r3, r3, #2
 8010642:	76bb      	strb	r3, [r7, #26]
 8010644:	e001      	b.n	801064a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010652:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8010654:	89fa      	ldrh	r2, [r7, #14]
 8010656:	8bbb      	ldrh	r3, [r7, #28]
 8010658:	429a      	cmp	r2, r3
 801065a:	d216      	bcs.n	801068a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 801065c:	89fb      	ldrh	r3, [r7, #14]
 801065e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010660:	7e3b      	ldrb	r3, [r7, #24]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00d      	beq.n	8010682 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8010666:	8bbb      	ldrh	r3, [r7, #28]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d10e      	bne.n	801068a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6a1b      	ldr	r3, [r3, #32]
 8010670:	699b      	ldr	r3, [r3, #24]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d102      	bne.n	801067c <lwip_netconn_do_writemore+0x134>
 8010676:	f06f 0306 	mvn.w	r3, #6
 801067a:	e000      	b.n	801067e <lwip_netconn_do_writemore+0x136>
 801067c:	2300      	movs	r3, #0
 801067e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010680:	e07d      	b.n	801077e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8010682:	7ebb      	ldrb	r3, [r7, #26]
 8010684:	f043 0302 	orr.w	r3, r3, #2
 8010688:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6a1b      	ldr	r3, [r3, #32]
 801068e:	691a      	ldr	r2, [r3, #16]
 8010690:	8bbb      	ldrh	r3, [r7, #28]
 8010692:	441a      	add	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6a1b      	ldr	r3, [r3, #32]
 8010698:	689b      	ldr	r3, [r3, #8]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	429a      	cmp	r2, r3
 801069e:	d906      	bls.n	80106ae <lwip_netconn_do_writemore+0x166>
 80106a0:	4b45      	ldr	r3, [pc, #276]	; (80107b8 <lwip_netconn_do_writemore+0x270>)
 80106a2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80106a6:	494c      	ldr	r1, [pc, #304]	; (80107d8 <lwip_netconn_do_writemore+0x290>)
 80106a8:	4845      	ldr	r0, [pc, #276]	; (80107c0 <lwip_netconn_do_writemore+0x278>)
 80106aa:	f011 fb37 	bl	8021d1c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80106ae:	8bbb      	ldrh	r3, [r7, #28]
 80106b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d103      	bne.n	80106c0 <lwip_netconn_do_writemore+0x178>
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106be:	d209      	bcs.n	80106d4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80106c4:	8bba      	ldrh	r2, [r7, #28]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d10b      	bne.n	80106e2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6a1b      	ldr	r3, [r3, #32]
 80106ce:	899b      	ldrh	r3, [r3, #12]
 80106d0:	2b01      	cmp	r3, #1
 80106d2:	d906      	bls.n	80106e2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80106d4:	2301      	movs	r3, #1
 80106d6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80106d8:	7ebb      	ldrb	r3, [r7, #26]
 80106da:	f043 0302 	orr.w	r3, r3, #2
 80106de:	76bb      	strb	r3, [r7, #26]
 80106e0:	e001      	b.n	80106e6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80106e2:	2300      	movs	r3, #0
 80106e4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6858      	ldr	r0, [r3, #4]
 80106ea:	7ebb      	ldrb	r3, [r7, #26]
 80106ec:	8bba      	ldrh	r2, [r7, #28]
 80106ee:	6979      	ldr	r1, [r7, #20]
 80106f0:	f009 ff6a 	bl	801a5c8 <tcp_write>
 80106f4:	4603      	mov	r3, r0
 80106f6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80106f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d12c      	bne.n	801075a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6a1b      	ldr	r3, [r3, #32]
 8010704:	6999      	ldr	r1, [r3, #24]
 8010706:	8bba      	ldrh	r2, [r7, #28]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6a1b      	ldr	r3, [r3, #32]
 801070c:	440a      	add	r2, r1
 801070e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6a1b      	ldr	r3, [r3, #32]
 8010714:	6919      	ldr	r1, [r3, #16]
 8010716:	8bba      	ldrh	r2, [r7, #28]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6a1b      	ldr	r3, [r3, #32]
 801071c:	440a      	add	r2, r1
 801071e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6a1b      	ldr	r3, [r3, #32]
 8010724:	691a      	ldr	r2, [r3, #16]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6a1b      	ldr	r3, [r3, #32]
 801072a:	689b      	ldr	r3, [r3, #8]
 801072c:	685b      	ldr	r3, [r3, #4]
 801072e:	429a      	cmp	r2, r3
 8010730:	d113      	bne.n	801075a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6a1b      	ldr	r3, [r3, #32]
 8010736:	899a      	ldrh	r2, [r3, #12]
 8010738:	3a01      	subs	r2, #1
 801073a:	b292      	uxth	r2, r2
 801073c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6a1b      	ldr	r3, [r3, #32]
 8010742:	899b      	ldrh	r3, [r3, #12]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d008      	beq.n	801075a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6a1b      	ldr	r3, [r3, #32]
 801074c:	689a      	ldr	r2, [r3, #8]
 801074e:	3208      	adds	r2, #8
 8010750:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6a1b      	ldr	r3, [r3, #32]
 8010756:	2200      	movs	r2, #0
 8010758:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801075a:	7e7b      	ldrb	r3, [r7, #25]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d004      	beq.n	801076a <lwip_netconn_do_writemore+0x222>
 8010760:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010764:	2b00      	cmp	r3, #0
 8010766:	f43f af50 	beq.w	801060a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801076a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d004      	beq.n	801077c <lwip_netconn_do_writemore+0x234>
 8010772:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801077a:	d146      	bne.n	801080a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 801077c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801077e:	7e3b      	ldrb	r3, [r7, #24]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d02b      	beq.n	80107dc <lwip_netconn_do_writemore+0x294>
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	6a1b      	ldr	r3, [r3, #32]
 8010788:	699a      	ldr	r2, [r3, #24]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6a1b      	ldr	r3, [r3, #32]
 801078e:	695b      	ldr	r3, [r3, #20]
 8010790:	429a      	cmp	r2, r3
 8010792:	d223      	bcs.n	80107dc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010798:	2b00      	cmp	r3, #0
 801079a:	d005      	beq.n	80107a8 <lwip_netconn_do_writemore+0x260>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a0:	2200      	movs	r2, #0
 80107a2:	2103      	movs	r1, #3
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	7f1b      	ldrb	r3, [r3, #28]
 80107ac:	f043 0310 	orr.w	r3, r3, #16
 80107b0:	b2da      	uxtb	r2, r3
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	771a      	strb	r2, [r3, #28]
 80107b6:	e028      	b.n	801080a <lwip_netconn_do_writemore+0x2c2>
 80107b8:	0802463c 	.word	0x0802463c
 80107bc:	080247b0 	.word	0x080247b0
 80107c0:	0802469c 	.word	0x0802469c
 80107c4:	08024ab8 	.word	0x08024ab8
 80107c8:	080247c0 	.word	0x080247c0
 80107cc:	08024ad8 	.word	0x08024ad8
 80107d0:	08024af0 	.word	0x08024af0
 80107d4:	08024b30 	.word	0x08024b30
 80107d8:	08024b58 	.word	0x08024b58
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80107e4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80107e8:	d305      	bcc.n	80107f6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80107f2:	2b04      	cmp	r3, #4
 80107f4:	d909      	bls.n	801080a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d005      	beq.n	801080a <lwip_netconn_do_writemore+0x2c2>
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010802:	2200      	movs	r2, #0
 8010804:	2103      	movs	r1, #3
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801080a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d11d      	bne.n	801084e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6a1b      	ldr	r3, [r3, #32]
 8010816:	699a      	ldr	r2, [r3, #24]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6a1b      	ldr	r3, [r3, #32]
 801081c:	695b      	ldr	r3, [r3, #20]
 801081e:	429a      	cmp	r2, r3
 8010820:	d002      	beq.n	8010828 <lwip_netconn_do_writemore+0x2e0>
 8010822:	7e3b      	ldrb	r3, [r7, #24]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d001      	beq.n	801082c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010828:	2301      	movs	r3, #1
 801082a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	4618      	mov	r0, r3
 8010832:	f00a fcb3 	bl	801b19c <tcp_output>
 8010836:	4603      	mov	r3, r0
 8010838:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 801083a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801083e:	f113 0f04 	cmn.w	r3, #4
 8010842:	d12c      	bne.n	801089e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010844:	7b3b      	ldrb	r3, [r7, #12]
 8010846:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010848:	2301      	movs	r3, #1
 801084a:	76fb      	strb	r3, [r7, #27]
 801084c:	e027      	b.n	801089e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801084e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010856:	d120      	bne.n	801089a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	4618      	mov	r0, r3
 801085e:	f00a fc9d 	bl	801b19c <tcp_output>
 8010862:	4603      	mov	r3, r0
 8010864:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010866:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801086a:	f113 0f04 	cmn.w	r3, #4
 801086e:	d104      	bne.n	801087a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010870:	7b7b      	ldrb	r3, [r7, #13]
 8010872:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010874:	2301      	movs	r3, #1
 8010876:	76fb      	strb	r3, [r7, #27]
 8010878:	e011      	b.n	801089e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 801087a:	7e3b      	ldrb	r3, [r7, #24]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d00e      	beq.n	801089e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6a1b      	ldr	r3, [r3, #32]
 8010884:	699b      	ldr	r3, [r3, #24]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d102      	bne.n	8010890 <lwip_netconn_do_writemore+0x348>
 801088a:	f06f 0306 	mvn.w	r3, #6
 801088e:	e000      	b.n	8010892 <lwip_netconn_do_writemore+0x34a>
 8010890:	2300      	movs	r3, #0
 8010892:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010894:	2301      	movs	r3, #1
 8010896:	76fb      	strb	r3, [r7, #27]
 8010898:	e001      	b.n	801089e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 801089a:	2301      	movs	r3, #1
 801089c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801089e:	7efb      	ldrb	r3, [r7, #27]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d015      	beq.n	80108d0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6a1b      	ldr	r3, [r3, #32]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	330c      	adds	r3, #12
 80108ac:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6a1b      	ldr	r3, [r3, #32]
 80108b2:	7ffa      	ldrb	r2, [r7, #31]
 80108b4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2200      	movs	r2, #0
 80108ba:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2200      	movs	r2, #0
 80108c0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80108c2:	78fb      	ldrb	r3, [r7, #3]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d006      	beq.n	80108d6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80108c8:	68b8      	ldr	r0, [r7, #8]
 80108ca:	f005 fae3 	bl	8015e94 <sys_sem_signal>
 80108ce:	e002      	b.n	80108d6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80108d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108d4:	e000      	b.n	80108d8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80108d6:	2300      	movs	r3, #0
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3720      	adds	r7, #32
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b084      	sub	sp, #16
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7fe fd29 	bl	800f348 <netconn_err>
 80108f6:	4603      	mov	r3, r0
 80108f8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80108fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d166      	bne.n	80109d0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801090c:	2b10      	cmp	r3, #16
 801090e:	d15d      	bne.n	80109cc <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	785b      	ldrb	r3, [r3, #1]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d002      	beq.n	8010920 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 801091a:	23fb      	movs	r3, #251	; 0xfb
 801091c:	73fb      	strb	r3, [r7, #15]
 801091e:	e057      	b.n	80109d0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d04d      	beq.n	80109c6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	2201      	movs	r2, #1
 8010930:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	6a1b      	ldr	r3, [r3, #32]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d006      	beq.n	801094a <lwip_netconn_do_write+0x6a>
 801093c:	4b28      	ldr	r3, [pc, #160]	; (80109e0 <lwip_netconn_do_write+0x100>)
 801093e:	f240 7223 	movw	r2, #1827	; 0x723
 8010942:	4928      	ldr	r1, [pc, #160]	; (80109e4 <lwip_netconn_do_write+0x104>)
 8010944:	4828      	ldr	r0, [pc, #160]	; (80109e8 <lwip_netconn_do_write+0x108>)
 8010946:	f011 f9e9 	bl	8021d1c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	695b      	ldr	r3, [r3, #20]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d106      	bne.n	8010960 <lwip_netconn_do_write+0x80>
 8010952:	4b23      	ldr	r3, [pc, #140]	; (80109e0 <lwip_netconn_do_write+0x100>)
 8010954:	f240 7224 	movw	r2, #1828	; 0x724
 8010958:	4924      	ldr	r1, [pc, #144]	; (80109ec <lwip_netconn_do_write+0x10c>)
 801095a:	4823      	ldr	r0, [pc, #140]	; (80109e8 <lwip_netconn_do_write+0x108>)
 801095c:	f011 f9de 	bl	8021d1c <iprintf>
        msg->conn->current_msg = msg;
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	68ba      	ldr	r2, [r7, #8]
 8010966:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	2100      	movs	r1, #0
 801096e:	4618      	mov	r0, r3
 8010970:	f7ff fdea 	bl	8010548 <lwip_netconn_do_writemore>
 8010974:	4603      	mov	r3, r0
 8010976:	2b00      	cmp	r3, #0
 8010978:	d02e      	beq.n	80109d8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	785b      	ldrb	r3, [r3, #1]
 8010980:	2b01      	cmp	r3, #1
 8010982:	d006      	beq.n	8010992 <lwip_netconn_do_write+0xb2>
 8010984:	4b16      	ldr	r3, [pc, #88]	; (80109e0 <lwip_netconn_do_write+0x100>)
 8010986:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 801098a:	4919      	ldr	r1, [pc, #100]	; (80109f0 <lwip_netconn_do_write+0x110>)
 801098c:	4816      	ldr	r0, [pc, #88]	; (80109e8 <lwip_netconn_do_write+0x108>)
 801098e:	f011 f9c5 	bl	8021d1c <iprintf>
          UNLOCK_TCPIP_CORE();
 8010992:	4818      	ldr	r0, [pc, #96]	; (80109f4 <lwip_netconn_do_write+0x114>)
 8010994:	f005 faef 	bl	8015f76 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	330c      	adds	r3, #12
 801099e:	2100      	movs	r1, #0
 80109a0:	4618      	mov	r0, r3
 80109a2:	f005 fa46 	bl	8015e32 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80109a6:	4813      	ldr	r0, [pc, #76]	; (80109f4 <lwip_netconn_do_write+0x114>)
 80109a8:	f005 fad6 	bl	8015f58 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	785b      	ldrb	r3, [r3, #1]
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d110      	bne.n	80109d8 <lwip_netconn_do_write+0xf8>
 80109b6:	4b0a      	ldr	r3, [pc, #40]	; (80109e0 <lwip_netconn_do_write+0x100>)
 80109b8:	f240 722c 	movw	r2, #1836	; 0x72c
 80109bc:	490c      	ldr	r1, [pc, #48]	; (80109f0 <lwip_netconn_do_write+0x110>)
 80109be:	480a      	ldr	r0, [pc, #40]	; (80109e8 <lwip_netconn_do_write+0x108>)
 80109c0:	f011 f9ac 	bl	8021d1c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80109c4:	e008      	b.n	80109d8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80109c6:	23f5      	movs	r3, #245	; 0xf5
 80109c8:	73fb      	strb	r3, [r7, #15]
 80109ca:	e001      	b.n	80109d0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80109cc:	23fa      	movs	r3, #250	; 0xfa
 80109ce:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	7bfa      	ldrb	r2, [r7, #15]
 80109d4:	711a      	strb	r2, [r3, #4]
 80109d6:	e000      	b.n	80109da <lwip_netconn_do_write+0xfa>
        return;
 80109d8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80109da:	3710      	adds	r7, #16
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	0802463c 	.word	0x0802463c
 80109e4:	080249fc 	.word	0x080249fc
 80109e8:	0802469c 	.word	0x0802469c
 80109ec:	08024b84 	.word	0x08024b84
 80109f0:	08024a18 	.word	0x08024a18
 80109f4:	2400d264 	.word	0x2400d264

080109f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b083      	sub	sp, #12
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	4603      	mov	r3, r0
 8010a00:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010a02:	88fb      	ldrh	r3, [r7, #6]
 8010a04:	021b      	lsls	r3, r3, #8
 8010a06:	b21a      	sxth	r2, r3
 8010a08:	88fb      	ldrh	r3, [r7, #6]
 8010a0a:	0a1b      	lsrs	r3, r3, #8
 8010a0c:	b29b      	uxth	r3, r3
 8010a0e:	b21b      	sxth	r3, r3
 8010a10:	4313      	orrs	r3, r2
 8010a12:	b21b      	sxth	r3, r3
 8010a14:	b29b      	uxth	r3, r3
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	370c      	adds	r7, #12
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a20:	4770      	bx	lr

08010a22 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010a22:	b480      	push	{r7}
 8010a24:	b083      	sub	sp, #12
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	061a      	lsls	r2, r3, #24
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	021b      	lsls	r3, r3, #8
 8010a32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010a36:	431a      	orrs	r2, r3
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	0a1b      	lsrs	r3, r3, #8
 8010a3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010a40:	431a      	orrs	r2, r3
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	0e1b      	lsrs	r3, r3, #24
 8010a46:	4313      	orrs	r3, r2
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	370c      	adds	r7, #12
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr

08010a54 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b083      	sub	sp, #12
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8010a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	dc04      	bgt.n	8010a70 <err_to_errno+0x1c>
 8010a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a6a:	f113 0f10 	cmn.w	r3, #16
 8010a6e:	da01      	bge.n	8010a74 <err_to_errno+0x20>
    return EIO;
 8010a70:	2305      	movs	r3, #5
 8010a72:	e005      	b.n	8010a80 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8010a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a78:	425b      	negs	r3, r3
 8010a7a:	4a04      	ldr	r2, [pc, #16]	; (8010a8c <err_to_errno+0x38>)
 8010a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	370c      	adds	r7, #12
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr
 8010a8c:	08028028 	.word	0x08028028

08010a90 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010a98:	4915      	ldr	r1, [pc, #84]	; (8010af0 <etharp_free_entry+0x60>)
 8010a9a:	687a      	ldr	r2, [r7, #4]
 8010a9c:	4613      	mov	r3, r2
 8010a9e:	005b      	lsls	r3, r3, #1
 8010aa0:	4413      	add	r3, r2
 8010aa2:	00db      	lsls	r3, r3, #3
 8010aa4:	440b      	add	r3, r1
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d013      	beq.n	8010ad4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010aac:	4910      	ldr	r1, [pc, #64]	; (8010af0 <etharp_free_entry+0x60>)
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	4613      	mov	r3, r2
 8010ab2:	005b      	lsls	r3, r3, #1
 8010ab4:	4413      	add	r3, r2
 8010ab6:	00db      	lsls	r3, r3, #3
 8010ab8:	440b      	add	r3, r1
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	4618      	mov	r0, r3
 8010abe:	f004 f915 	bl	8014cec <pbuf_free>
    arp_table[i].q = NULL;
 8010ac2:	490b      	ldr	r1, [pc, #44]	; (8010af0 <etharp_free_entry+0x60>)
 8010ac4:	687a      	ldr	r2, [r7, #4]
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	005b      	lsls	r3, r3, #1
 8010aca:	4413      	add	r3, r2
 8010acc:	00db      	lsls	r3, r3, #3
 8010ace:	440b      	add	r3, r1
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010ad4:	4906      	ldr	r1, [pc, #24]	; (8010af0 <etharp_free_entry+0x60>)
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	4613      	mov	r3, r2
 8010ada:	005b      	lsls	r3, r3, #1
 8010adc:	4413      	add	r3, r2
 8010ade:	00db      	lsls	r3, r3, #3
 8010ae0:	440b      	add	r3, r1
 8010ae2:	3314      	adds	r3, #20
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010ae8:	bf00      	nop
 8010aea:	3708      	adds	r7, #8
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	240047d4 	.word	0x240047d4

08010af4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010afa:	2300      	movs	r3, #0
 8010afc:	607b      	str	r3, [r7, #4]
 8010afe:	e096      	b.n	8010c2e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010b00:	494f      	ldr	r1, [pc, #316]	; (8010c40 <etharp_tmr+0x14c>)
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	4613      	mov	r3, r2
 8010b06:	005b      	lsls	r3, r3, #1
 8010b08:	4413      	add	r3, r2
 8010b0a:	00db      	lsls	r3, r3, #3
 8010b0c:	440b      	add	r3, r1
 8010b0e:	3314      	adds	r3, #20
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010b14:	78fb      	ldrb	r3, [r7, #3]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	f000 8086 	beq.w	8010c28 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010b1c:	4948      	ldr	r1, [pc, #288]	; (8010c40 <etharp_tmr+0x14c>)
 8010b1e:	687a      	ldr	r2, [r7, #4]
 8010b20:	4613      	mov	r3, r2
 8010b22:	005b      	lsls	r3, r3, #1
 8010b24:	4413      	add	r3, r2
 8010b26:	00db      	lsls	r3, r3, #3
 8010b28:	440b      	add	r3, r1
 8010b2a:	3312      	adds	r3, #18
 8010b2c:	881b      	ldrh	r3, [r3, #0]
 8010b2e:	3301      	adds	r3, #1
 8010b30:	b298      	uxth	r0, r3
 8010b32:	4943      	ldr	r1, [pc, #268]	; (8010c40 <etharp_tmr+0x14c>)
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	4613      	mov	r3, r2
 8010b38:	005b      	lsls	r3, r3, #1
 8010b3a:	4413      	add	r3, r2
 8010b3c:	00db      	lsls	r3, r3, #3
 8010b3e:	440b      	add	r3, r1
 8010b40:	3312      	adds	r3, #18
 8010b42:	4602      	mov	r2, r0
 8010b44:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010b46:	493e      	ldr	r1, [pc, #248]	; (8010c40 <etharp_tmr+0x14c>)
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	4613      	mov	r3, r2
 8010b4c:	005b      	lsls	r3, r3, #1
 8010b4e:	4413      	add	r3, r2
 8010b50:	00db      	lsls	r3, r3, #3
 8010b52:	440b      	add	r3, r1
 8010b54:	3312      	adds	r3, #18
 8010b56:	881b      	ldrh	r3, [r3, #0]
 8010b58:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010b5c:	d215      	bcs.n	8010b8a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010b5e:	4938      	ldr	r1, [pc, #224]	; (8010c40 <etharp_tmr+0x14c>)
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	4613      	mov	r3, r2
 8010b64:	005b      	lsls	r3, r3, #1
 8010b66:	4413      	add	r3, r2
 8010b68:	00db      	lsls	r3, r3, #3
 8010b6a:	440b      	add	r3, r1
 8010b6c:	3314      	adds	r3, #20
 8010b6e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d10e      	bne.n	8010b92 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010b74:	4932      	ldr	r1, [pc, #200]	; (8010c40 <etharp_tmr+0x14c>)
 8010b76:	687a      	ldr	r2, [r7, #4]
 8010b78:	4613      	mov	r3, r2
 8010b7a:	005b      	lsls	r3, r3, #1
 8010b7c:	4413      	add	r3, r2
 8010b7e:	00db      	lsls	r3, r3, #3
 8010b80:	440b      	add	r3, r1
 8010b82:	3312      	adds	r3, #18
 8010b84:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010b86:	2b04      	cmp	r3, #4
 8010b88:	d903      	bls.n	8010b92 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f7ff ff80 	bl	8010a90 <etharp_free_entry>
 8010b90:	e04a      	b.n	8010c28 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010b92:	492b      	ldr	r1, [pc, #172]	; (8010c40 <etharp_tmr+0x14c>)
 8010b94:	687a      	ldr	r2, [r7, #4]
 8010b96:	4613      	mov	r3, r2
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	4413      	add	r3, r2
 8010b9c:	00db      	lsls	r3, r3, #3
 8010b9e:	440b      	add	r3, r1
 8010ba0:	3314      	adds	r3, #20
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	2b03      	cmp	r3, #3
 8010ba6:	d10a      	bne.n	8010bbe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010ba8:	4925      	ldr	r1, [pc, #148]	; (8010c40 <etharp_tmr+0x14c>)
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	4613      	mov	r3, r2
 8010bae:	005b      	lsls	r3, r3, #1
 8010bb0:	4413      	add	r3, r2
 8010bb2:	00db      	lsls	r3, r3, #3
 8010bb4:	440b      	add	r3, r1
 8010bb6:	3314      	adds	r3, #20
 8010bb8:	2204      	movs	r2, #4
 8010bba:	701a      	strb	r2, [r3, #0]
 8010bbc:	e034      	b.n	8010c28 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010bbe:	4920      	ldr	r1, [pc, #128]	; (8010c40 <etharp_tmr+0x14c>)
 8010bc0:	687a      	ldr	r2, [r7, #4]
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	005b      	lsls	r3, r3, #1
 8010bc6:	4413      	add	r3, r2
 8010bc8:	00db      	lsls	r3, r3, #3
 8010bca:	440b      	add	r3, r1
 8010bcc:	3314      	adds	r3, #20
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	2b04      	cmp	r3, #4
 8010bd2:	d10a      	bne.n	8010bea <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010bd4:	491a      	ldr	r1, [pc, #104]	; (8010c40 <etharp_tmr+0x14c>)
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	4613      	mov	r3, r2
 8010bda:	005b      	lsls	r3, r3, #1
 8010bdc:	4413      	add	r3, r2
 8010bde:	00db      	lsls	r3, r3, #3
 8010be0:	440b      	add	r3, r1
 8010be2:	3314      	adds	r3, #20
 8010be4:	2202      	movs	r2, #2
 8010be6:	701a      	strb	r2, [r3, #0]
 8010be8:	e01e      	b.n	8010c28 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010bea:	4915      	ldr	r1, [pc, #84]	; (8010c40 <etharp_tmr+0x14c>)
 8010bec:	687a      	ldr	r2, [r7, #4]
 8010bee:	4613      	mov	r3, r2
 8010bf0:	005b      	lsls	r3, r3, #1
 8010bf2:	4413      	add	r3, r2
 8010bf4:	00db      	lsls	r3, r3, #3
 8010bf6:	440b      	add	r3, r1
 8010bf8:	3314      	adds	r3, #20
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	d113      	bne.n	8010c28 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010c00:	490f      	ldr	r1, [pc, #60]	; (8010c40 <etharp_tmr+0x14c>)
 8010c02:	687a      	ldr	r2, [r7, #4]
 8010c04:	4613      	mov	r3, r2
 8010c06:	005b      	lsls	r3, r3, #1
 8010c08:	4413      	add	r3, r2
 8010c0a:	00db      	lsls	r3, r3, #3
 8010c0c:	440b      	add	r3, r1
 8010c0e:	3308      	adds	r3, #8
 8010c10:	6818      	ldr	r0, [r3, #0]
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	4613      	mov	r3, r2
 8010c16:	005b      	lsls	r3, r3, #1
 8010c18:	4413      	add	r3, r2
 8010c1a:	00db      	lsls	r3, r3, #3
 8010c1c:	4a08      	ldr	r2, [pc, #32]	; (8010c40 <etharp_tmr+0x14c>)
 8010c1e:	4413      	add	r3, r2
 8010c20:	3304      	adds	r3, #4
 8010c22:	4619      	mov	r1, r3
 8010c24:	f000 fe6e 	bl	8011904 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	607b      	str	r3, [r7, #4]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	2b09      	cmp	r3, #9
 8010c32:	f77f af65 	ble.w	8010b00 <etharp_tmr+0xc>
      }
    }
  }
}
 8010c36:	bf00      	nop
 8010c38:	bf00      	nop
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	240047d4 	.word	0x240047d4

08010c44 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b08a      	sub	sp, #40	; 0x28
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	607a      	str	r2, [r7, #4]
 8010c50:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010c52:	230a      	movs	r3, #10
 8010c54:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010c56:	230a      	movs	r3, #10
 8010c58:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010c5a:	230a      	movs	r3, #10
 8010c5c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010c62:	230a      	movs	r3, #10
 8010c64:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010c66:	2300      	movs	r3, #0
 8010c68:	83bb      	strh	r3, [r7, #28]
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	837b      	strh	r3, [r7, #26]
 8010c6e:	2300      	movs	r3, #0
 8010c70:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c72:	2300      	movs	r3, #0
 8010c74:	843b      	strh	r3, [r7, #32]
 8010c76:	e0ae      	b.n	8010dd6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010c78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c7c:	49a6      	ldr	r1, [pc, #664]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010c7e:	4613      	mov	r3, r2
 8010c80:	005b      	lsls	r3, r3, #1
 8010c82:	4413      	add	r3, r2
 8010c84:	00db      	lsls	r3, r3, #3
 8010c86:	440b      	add	r3, r1
 8010c88:	3314      	adds	r3, #20
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010c8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010c92:	2b0a      	cmp	r3, #10
 8010c94:	d105      	bne.n	8010ca2 <etharp_find_entry+0x5e>
 8010c96:	7dfb      	ldrb	r3, [r7, #23]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d102      	bne.n	8010ca2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010c9c:	8c3b      	ldrh	r3, [r7, #32]
 8010c9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010ca0:	e095      	b.n	8010dce <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010ca2:	7dfb      	ldrb	r3, [r7, #23]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	f000 8092 	beq.w	8010dce <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010caa:	7dfb      	ldrb	r3, [r7, #23]
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	d009      	beq.n	8010cc4 <etharp_find_entry+0x80>
 8010cb0:	7dfb      	ldrb	r3, [r7, #23]
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	d806      	bhi.n	8010cc4 <etharp_find_entry+0x80>
 8010cb6:	4b99      	ldr	r3, [pc, #612]	; (8010f1c <etharp_find_entry+0x2d8>)
 8010cb8:	f240 1223 	movw	r2, #291	; 0x123
 8010cbc:	4998      	ldr	r1, [pc, #608]	; (8010f20 <etharp_find_entry+0x2dc>)
 8010cbe:	4899      	ldr	r0, [pc, #612]	; (8010f24 <etharp_find_entry+0x2e0>)
 8010cc0:	f011 f82c 	bl	8021d1c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d020      	beq.n	8010d0c <etharp_find_entry+0xc8>
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	6819      	ldr	r1, [r3, #0]
 8010cce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cd2:	4891      	ldr	r0, [pc, #580]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	005b      	lsls	r3, r3, #1
 8010cd8:	4413      	add	r3, r2
 8010cda:	00db      	lsls	r3, r3, #3
 8010cdc:	4403      	add	r3, r0
 8010cde:	3304      	adds	r3, #4
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	4299      	cmp	r1, r3
 8010ce4:	d112      	bne.n	8010d0c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d00c      	beq.n	8010d06 <etharp_find_entry+0xc2>
 8010cec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cf0:	4989      	ldr	r1, [pc, #548]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010cf2:	4613      	mov	r3, r2
 8010cf4:	005b      	lsls	r3, r3, #1
 8010cf6:	4413      	add	r3, r2
 8010cf8:	00db      	lsls	r3, r3, #3
 8010cfa:	440b      	add	r3, r1
 8010cfc:	3308      	adds	r3, #8
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d102      	bne.n	8010d0c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010d06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010d0a:	e100      	b.n	8010f0e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010d0c:	7dfb      	ldrb	r3, [r7, #23]
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d140      	bne.n	8010d94 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010d12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d16:	4980      	ldr	r1, [pc, #512]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010d18:	4613      	mov	r3, r2
 8010d1a:	005b      	lsls	r3, r3, #1
 8010d1c:	4413      	add	r3, r2
 8010d1e:	00db      	lsls	r3, r3, #3
 8010d20:	440b      	add	r3, r1
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d01a      	beq.n	8010d5e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010d28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d2c:	497a      	ldr	r1, [pc, #488]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010d2e:	4613      	mov	r3, r2
 8010d30:	005b      	lsls	r3, r3, #1
 8010d32:	4413      	add	r3, r2
 8010d34:	00db      	lsls	r3, r3, #3
 8010d36:	440b      	add	r3, r1
 8010d38:	3312      	adds	r3, #18
 8010d3a:	881b      	ldrh	r3, [r3, #0]
 8010d3c:	8bba      	ldrh	r2, [r7, #28]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d845      	bhi.n	8010dce <etharp_find_entry+0x18a>
            old_queue = i;
 8010d42:	8c3b      	ldrh	r3, [r7, #32]
 8010d44:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010d46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d4a:	4973      	ldr	r1, [pc, #460]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010d4c:	4613      	mov	r3, r2
 8010d4e:	005b      	lsls	r3, r3, #1
 8010d50:	4413      	add	r3, r2
 8010d52:	00db      	lsls	r3, r3, #3
 8010d54:	440b      	add	r3, r1
 8010d56:	3312      	adds	r3, #18
 8010d58:	881b      	ldrh	r3, [r3, #0]
 8010d5a:	83bb      	strh	r3, [r7, #28]
 8010d5c:	e037      	b.n	8010dce <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010d5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d62:	496d      	ldr	r1, [pc, #436]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010d64:	4613      	mov	r3, r2
 8010d66:	005b      	lsls	r3, r3, #1
 8010d68:	4413      	add	r3, r2
 8010d6a:	00db      	lsls	r3, r3, #3
 8010d6c:	440b      	add	r3, r1
 8010d6e:	3312      	adds	r3, #18
 8010d70:	881b      	ldrh	r3, [r3, #0]
 8010d72:	8b7a      	ldrh	r2, [r7, #26]
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d82a      	bhi.n	8010dce <etharp_find_entry+0x18a>
            old_pending = i;
 8010d78:	8c3b      	ldrh	r3, [r7, #32]
 8010d7a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010d7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d80:	4965      	ldr	r1, [pc, #404]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010d82:	4613      	mov	r3, r2
 8010d84:	005b      	lsls	r3, r3, #1
 8010d86:	4413      	add	r3, r2
 8010d88:	00db      	lsls	r3, r3, #3
 8010d8a:	440b      	add	r3, r1
 8010d8c:	3312      	adds	r3, #18
 8010d8e:	881b      	ldrh	r3, [r3, #0]
 8010d90:	837b      	strh	r3, [r7, #26]
 8010d92:	e01c      	b.n	8010dce <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010d94:	7dfb      	ldrb	r3, [r7, #23]
 8010d96:	2b01      	cmp	r3, #1
 8010d98:	d919      	bls.n	8010dce <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010d9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d9e:	495e      	ldr	r1, [pc, #376]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010da0:	4613      	mov	r3, r2
 8010da2:	005b      	lsls	r3, r3, #1
 8010da4:	4413      	add	r3, r2
 8010da6:	00db      	lsls	r3, r3, #3
 8010da8:	440b      	add	r3, r1
 8010daa:	3312      	adds	r3, #18
 8010dac:	881b      	ldrh	r3, [r3, #0]
 8010dae:	8b3a      	ldrh	r2, [r7, #24]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d80c      	bhi.n	8010dce <etharp_find_entry+0x18a>
            old_stable = i;
 8010db4:	8c3b      	ldrh	r3, [r7, #32]
 8010db6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010db8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010dbc:	4956      	ldr	r1, [pc, #344]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	005b      	lsls	r3, r3, #1
 8010dc2:	4413      	add	r3, r2
 8010dc4:	00db      	lsls	r3, r3, #3
 8010dc6:	440b      	add	r3, r1
 8010dc8:	3312      	adds	r3, #18
 8010dca:	881b      	ldrh	r3, [r3, #0]
 8010dcc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010dce:	8c3b      	ldrh	r3, [r7, #32]
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	b29b      	uxth	r3, r3
 8010dd4:	843b      	strh	r3, [r7, #32]
 8010dd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010dda:	2b09      	cmp	r3, #9
 8010ddc:	f77f af4c 	ble.w	8010c78 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010de0:	7afb      	ldrb	r3, [r7, #11]
 8010de2:	f003 0302 	and.w	r3, r3, #2
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d108      	bne.n	8010dfc <etharp_find_entry+0x1b8>
 8010dea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010dee:	2b0a      	cmp	r3, #10
 8010df0:	d107      	bne.n	8010e02 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010df2:	7afb      	ldrb	r3, [r7, #11]
 8010df4:	f003 0301 	and.w	r3, r3, #1
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d102      	bne.n	8010e02 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e00:	e085      	b.n	8010f0e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010e02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010e06:	2b09      	cmp	r3, #9
 8010e08:	dc02      	bgt.n	8010e10 <etharp_find_entry+0x1cc>
    i = empty;
 8010e0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e0c:	843b      	strh	r3, [r7, #32]
 8010e0e:	e039      	b.n	8010e84 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010e10:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010e14:	2b09      	cmp	r3, #9
 8010e16:	dc14      	bgt.n	8010e42 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e1a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010e1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e20:	493d      	ldr	r1, [pc, #244]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010e22:	4613      	mov	r3, r2
 8010e24:	005b      	lsls	r3, r3, #1
 8010e26:	4413      	add	r3, r2
 8010e28:	00db      	lsls	r3, r3, #3
 8010e2a:	440b      	add	r3, r1
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d018      	beq.n	8010e64 <etharp_find_entry+0x220>
 8010e32:	4b3a      	ldr	r3, [pc, #232]	; (8010f1c <etharp_find_entry+0x2d8>)
 8010e34:	f240 126d 	movw	r2, #365	; 0x16d
 8010e38:	493b      	ldr	r1, [pc, #236]	; (8010f28 <etharp_find_entry+0x2e4>)
 8010e3a:	483a      	ldr	r0, [pc, #232]	; (8010f24 <etharp_find_entry+0x2e0>)
 8010e3c:	f010 ff6e 	bl	8021d1c <iprintf>
 8010e40:	e010      	b.n	8010e64 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010e42:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010e46:	2b09      	cmp	r3, #9
 8010e48:	dc02      	bgt.n	8010e50 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010e4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010e4c:	843b      	strh	r3, [r7, #32]
 8010e4e:	e009      	b.n	8010e64 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010e50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010e54:	2b09      	cmp	r3, #9
 8010e56:	dc02      	bgt.n	8010e5e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010e58:	8bfb      	ldrh	r3, [r7, #30]
 8010e5a:	843b      	strh	r3, [r7, #32]
 8010e5c:	e002      	b.n	8010e64 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e62:	e054      	b.n	8010f0e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010e64:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e68:	2b09      	cmp	r3, #9
 8010e6a:	dd06      	ble.n	8010e7a <etharp_find_entry+0x236>
 8010e6c:	4b2b      	ldr	r3, [pc, #172]	; (8010f1c <etharp_find_entry+0x2d8>)
 8010e6e:	f240 127f 	movw	r2, #383	; 0x17f
 8010e72:	492e      	ldr	r1, [pc, #184]	; (8010f2c <etharp_find_entry+0x2e8>)
 8010e74:	482b      	ldr	r0, [pc, #172]	; (8010f24 <etharp_find_entry+0x2e0>)
 8010e76:	f010 ff51 	bl	8021d1c <iprintf>
    etharp_free_entry(i);
 8010e7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7ff fe06 	bl	8010a90 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010e84:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e88:	2b09      	cmp	r3, #9
 8010e8a:	dd06      	ble.n	8010e9a <etharp_find_entry+0x256>
 8010e8c:	4b23      	ldr	r3, [pc, #140]	; (8010f1c <etharp_find_entry+0x2d8>)
 8010e8e:	f240 1283 	movw	r2, #387	; 0x183
 8010e92:	4926      	ldr	r1, [pc, #152]	; (8010f2c <etharp_find_entry+0x2e8>)
 8010e94:	4823      	ldr	r0, [pc, #140]	; (8010f24 <etharp_find_entry+0x2e0>)
 8010e96:	f010 ff41 	bl	8021d1c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010e9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e9e:	491e      	ldr	r1, [pc, #120]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010ea0:	4613      	mov	r3, r2
 8010ea2:	005b      	lsls	r3, r3, #1
 8010ea4:	4413      	add	r3, r2
 8010ea6:	00db      	lsls	r3, r3, #3
 8010ea8:	440b      	add	r3, r1
 8010eaa:	3314      	adds	r3, #20
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d006      	beq.n	8010ec0 <etharp_find_entry+0x27c>
 8010eb2:	4b1a      	ldr	r3, [pc, #104]	; (8010f1c <etharp_find_entry+0x2d8>)
 8010eb4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010eb8:	491d      	ldr	r1, [pc, #116]	; (8010f30 <etharp_find_entry+0x2ec>)
 8010eba:	481a      	ldr	r0, [pc, #104]	; (8010f24 <etharp_find_entry+0x2e0>)
 8010ebc:	f010 ff2e 	bl	8021d1c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d00b      	beq.n	8010ede <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010ec6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	6819      	ldr	r1, [r3, #0]
 8010ece:	4812      	ldr	r0, [pc, #72]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	005b      	lsls	r3, r3, #1
 8010ed4:	4413      	add	r3, r2
 8010ed6:	00db      	lsls	r3, r3, #3
 8010ed8:	4403      	add	r3, r0
 8010eda:	3304      	adds	r3, #4
 8010edc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010ede:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ee2:	490d      	ldr	r1, [pc, #52]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010ee4:	4613      	mov	r3, r2
 8010ee6:	005b      	lsls	r3, r3, #1
 8010ee8:	4413      	add	r3, r2
 8010eea:	00db      	lsls	r3, r3, #3
 8010eec:	440b      	add	r3, r1
 8010eee:	3312      	adds	r3, #18
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010ef4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ef8:	4907      	ldr	r1, [pc, #28]	; (8010f18 <etharp_find_entry+0x2d4>)
 8010efa:	4613      	mov	r3, r2
 8010efc:	005b      	lsls	r3, r3, #1
 8010efe:	4413      	add	r3, r2
 8010f00:	00db      	lsls	r3, r3, #3
 8010f02:	440b      	add	r3, r1
 8010f04:	3308      	adds	r3, #8
 8010f06:	687a      	ldr	r2, [r7, #4]
 8010f08:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010f0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3728      	adds	r7, #40	; 0x28
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	bf00      	nop
 8010f18:	240047d4 	.word	0x240047d4
 8010f1c:	08024bb0 	.word	0x08024bb0
 8010f20:	08024c04 	.word	0x08024c04
 8010f24:	08024c44 	.word	0x08024c44
 8010f28:	08024c6c 	.word	0x08024c6c
 8010f2c:	08024c84 	.word	0x08024c84
 8010f30:	08024c98 	.word	0x08024c98

08010f34 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b088      	sub	sp, #32
 8010f38:	af02      	add	r7, sp, #8
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	607a      	str	r2, [r7, #4]
 8010f40:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010f48:	2b06      	cmp	r3, #6
 8010f4a:	d006      	beq.n	8010f5a <etharp_update_arp_entry+0x26>
 8010f4c:	4b48      	ldr	r3, [pc, #288]	; (8011070 <etharp_update_arp_entry+0x13c>)
 8010f4e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010f52:	4948      	ldr	r1, [pc, #288]	; (8011074 <etharp_update_arp_entry+0x140>)
 8010f54:	4848      	ldr	r0, [pc, #288]	; (8011078 <etharp_update_arp_entry+0x144>)
 8010f56:	f010 fee1 	bl	8021d1c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d012      	beq.n	8010f86 <etharp_update_arp_entry+0x52>
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00e      	beq.n	8010f86 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	68f9      	ldr	r1, [r7, #12]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f001 face 	bl	8012510 <ip4_addr_isbroadcast_u32>
 8010f74:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d105      	bne.n	8010f86 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f82:	2be0      	cmp	r3, #224	; 0xe0
 8010f84:	d102      	bne.n	8010f8c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010f86:	f06f 030f 	mvn.w	r3, #15
 8010f8a:	e06c      	b.n	8011066 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010f8c:	78fb      	ldrb	r3, [r7, #3]
 8010f8e:	68fa      	ldr	r2, [r7, #12]
 8010f90:	4619      	mov	r1, r3
 8010f92:	68b8      	ldr	r0, [r7, #8]
 8010f94:	f7ff fe56 	bl	8010c44 <etharp_find_entry>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010f9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	da02      	bge.n	8010faa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010fa4:	8afb      	ldrh	r3, [r7, #22]
 8010fa6:	b25b      	sxtb	r3, r3
 8010fa8:	e05d      	b.n	8011066 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010faa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010fae:	4933      	ldr	r1, [pc, #204]	; (801107c <etharp_update_arp_entry+0x148>)
 8010fb0:	4613      	mov	r3, r2
 8010fb2:	005b      	lsls	r3, r3, #1
 8010fb4:	4413      	add	r3, r2
 8010fb6:	00db      	lsls	r3, r3, #3
 8010fb8:	440b      	add	r3, r1
 8010fba:	3314      	adds	r3, #20
 8010fbc:	2202      	movs	r2, #2
 8010fbe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010fc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010fc4:	492d      	ldr	r1, [pc, #180]	; (801107c <etharp_update_arp_entry+0x148>)
 8010fc6:	4613      	mov	r3, r2
 8010fc8:	005b      	lsls	r3, r3, #1
 8010fca:	4413      	add	r3, r2
 8010fcc:	00db      	lsls	r3, r3, #3
 8010fce:	440b      	add	r3, r1
 8010fd0:	3308      	adds	r3, #8
 8010fd2:	68fa      	ldr	r2, [r7, #12]
 8010fd4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010fd6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010fda:	4613      	mov	r3, r2
 8010fdc:	005b      	lsls	r3, r3, #1
 8010fde:	4413      	add	r3, r2
 8010fe0:	00db      	lsls	r3, r3, #3
 8010fe2:	3308      	adds	r3, #8
 8010fe4:	4a25      	ldr	r2, [pc, #148]	; (801107c <etharp_update_arp_entry+0x148>)
 8010fe6:	4413      	add	r3, r2
 8010fe8:	3304      	adds	r3, #4
 8010fea:	2206      	movs	r2, #6
 8010fec:	6879      	ldr	r1, [r7, #4]
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f010 fa22 	bl	8021438 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010ff4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010ff8:	4920      	ldr	r1, [pc, #128]	; (801107c <etharp_update_arp_entry+0x148>)
 8010ffa:	4613      	mov	r3, r2
 8010ffc:	005b      	lsls	r3, r3, #1
 8010ffe:	4413      	add	r3, r2
 8011000:	00db      	lsls	r3, r3, #3
 8011002:	440b      	add	r3, r1
 8011004:	3312      	adds	r3, #18
 8011006:	2200      	movs	r2, #0
 8011008:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801100a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801100e:	491b      	ldr	r1, [pc, #108]	; (801107c <etharp_update_arp_entry+0x148>)
 8011010:	4613      	mov	r3, r2
 8011012:	005b      	lsls	r3, r3, #1
 8011014:	4413      	add	r3, r2
 8011016:	00db      	lsls	r3, r3, #3
 8011018:	440b      	add	r3, r1
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d021      	beq.n	8011064 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011020:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011024:	4915      	ldr	r1, [pc, #84]	; (801107c <etharp_update_arp_entry+0x148>)
 8011026:	4613      	mov	r3, r2
 8011028:	005b      	lsls	r3, r3, #1
 801102a:	4413      	add	r3, r2
 801102c:	00db      	lsls	r3, r3, #3
 801102e:	440b      	add	r3, r1
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011034:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011038:	4910      	ldr	r1, [pc, #64]	; (801107c <etharp_update_arp_entry+0x148>)
 801103a:	4613      	mov	r3, r2
 801103c:	005b      	lsls	r3, r3, #1
 801103e:	4413      	add	r3, r2
 8011040:	00db      	lsls	r3, r3, #3
 8011042:	440b      	add	r3, r1
 8011044:	2200      	movs	r2, #0
 8011046:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801104e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011052:	9300      	str	r3, [sp, #0]
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6939      	ldr	r1, [r7, #16]
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	f000 fcf3 	bl	8011a44 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801105e:	6938      	ldr	r0, [r7, #16]
 8011060:	f003 fe44 	bl	8014cec <pbuf_free>
  }
  return ERR_OK;
 8011064:	2300      	movs	r3, #0
}
 8011066:	4618      	mov	r0, r3
 8011068:	3718      	adds	r7, #24
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
 801106e:	bf00      	nop
 8011070:	08024bb0 	.word	0x08024bb0
 8011074:	08024cc4 	.word	0x08024cc4
 8011078:	08024c44 	.word	0x08024c44
 801107c:	240047d4 	.word	0x240047d4

08011080 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b084      	sub	sp, #16
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011088:	2300      	movs	r3, #0
 801108a:	60fb      	str	r3, [r7, #12]
 801108c:	e01e      	b.n	80110cc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801108e:	4913      	ldr	r1, [pc, #76]	; (80110dc <etharp_cleanup_netif+0x5c>)
 8011090:	68fa      	ldr	r2, [r7, #12]
 8011092:	4613      	mov	r3, r2
 8011094:	005b      	lsls	r3, r3, #1
 8011096:	4413      	add	r3, r2
 8011098:	00db      	lsls	r3, r3, #3
 801109a:	440b      	add	r3, r1
 801109c:	3314      	adds	r3, #20
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80110a2:	7afb      	ldrb	r3, [r7, #11]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d00e      	beq.n	80110c6 <etharp_cleanup_netif+0x46>
 80110a8:	490c      	ldr	r1, [pc, #48]	; (80110dc <etharp_cleanup_netif+0x5c>)
 80110aa:	68fa      	ldr	r2, [r7, #12]
 80110ac:	4613      	mov	r3, r2
 80110ae:	005b      	lsls	r3, r3, #1
 80110b0:	4413      	add	r3, r2
 80110b2:	00db      	lsls	r3, r3, #3
 80110b4:	440b      	add	r3, r1
 80110b6:	3308      	adds	r3, #8
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d102      	bne.n	80110c6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80110c0:	68f8      	ldr	r0, [r7, #12]
 80110c2:	f7ff fce5 	bl	8010a90 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	3301      	adds	r3, #1
 80110ca:	60fb      	str	r3, [r7, #12]
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2b09      	cmp	r3, #9
 80110d0:	dddd      	ble.n	801108e <etharp_cleanup_netif+0xe>
    }
  }
}
 80110d2:	bf00      	nop
 80110d4:	bf00      	nop
 80110d6:	3710      	adds	r7, #16
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	240047d4 	.word	0x240047d4

080110e0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80110e0:	b5b0      	push	{r4, r5, r7, lr}
 80110e2:	b08a      	sub	sp, #40	; 0x28
 80110e4:	af04      	add	r7, sp, #16
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d107      	bne.n	8011100 <etharp_input+0x20>
 80110f0:	4b3d      	ldr	r3, [pc, #244]	; (80111e8 <etharp_input+0x108>)
 80110f2:	f240 228a 	movw	r2, #650	; 0x28a
 80110f6:	493d      	ldr	r1, [pc, #244]	; (80111ec <etharp_input+0x10c>)
 80110f8:	483d      	ldr	r0, [pc, #244]	; (80111f0 <etharp_input+0x110>)
 80110fa:	f010 fe0f 	bl	8021d1c <iprintf>
 80110fe:	e06f      	b.n	80111e0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	881b      	ldrh	r3, [r3, #0]
 801110a:	b29b      	uxth	r3, r3
 801110c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011110:	d10c      	bne.n	801112c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011116:	2b06      	cmp	r3, #6
 8011118:	d108      	bne.n	801112c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801111e:	2b04      	cmp	r3, #4
 8011120:	d104      	bne.n	801112c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	885b      	ldrh	r3, [r3, #2]
 8011126:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011128:	2b08      	cmp	r3, #8
 801112a:	d003      	beq.n	8011134 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f003 fddd 	bl	8014cec <pbuf_free>
    return;
 8011132:	e055      	b.n	80111e0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	330e      	adds	r3, #14
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	3318      	adds	r3, #24
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	3304      	adds	r3, #4
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d102      	bne.n	8011154 <etharp_input+0x74>
    for_us = 0;
 801114e:	2300      	movs	r3, #0
 8011150:	75fb      	strb	r3, [r7, #23]
 8011152:	e009      	b.n	8011168 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011154:	68ba      	ldr	r2, [r7, #8]
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	3304      	adds	r3, #4
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	429a      	cmp	r2, r3
 801115e:	bf0c      	ite	eq
 8011160:	2301      	moveq	r3, #1
 8011162:	2300      	movne	r3, #0
 8011164:	b2db      	uxtb	r3, r3
 8011166:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011168:	693b      	ldr	r3, [r7, #16]
 801116a:	f103 0208 	add.w	r2, r3, #8
 801116e:	7dfb      	ldrb	r3, [r7, #23]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d001      	beq.n	8011178 <etharp_input+0x98>
 8011174:	2301      	movs	r3, #1
 8011176:	e000      	b.n	801117a <etharp_input+0x9a>
 8011178:	2302      	movs	r3, #2
 801117a:	f107 010c 	add.w	r1, r7, #12
 801117e:	6838      	ldr	r0, [r7, #0]
 8011180:	f7ff fed8 	bl	8010f34 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	88db      	ldrh	r3, [r3, #6]
 8011188:	b29b      	uxth	r3, r3
 801118a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801118e:	d003      	beq.n	8011198 <etharp_input+0xb8>
 8011190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011194:	d01e      	beq.n	80111d4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011196:	e020      	b.n	80111da <etharp_input+0xfa>
      if (for_us) {
 8011198:	7dfb      	ldrb	r3, [r7, #23]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d01c      	beq.n	80111d8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80111b4:	693a      	ldr	r2, [r7, #16]
 80111b6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80111b8:	2102      	movs	r1, #2
 80111ba:	9103      	str	r1, [sp, #12]
 80111bc:	f107 010c 	add.w	r1, r7, #12
 80111c0:	9102      	str	r1, [sp, #8]
 80111c2:	9201      	str	r2, [sp, #4]
 80111c4:	9300      	str	r3, [sp, #0]
 80111c6:	462b      	mov	r3, r5
 80111c8:	4622      	mov	r2, r4
 80111ca:	4601      	mov	r1, r0
 80111cc:	6838      	ldr	r0, [r7, #0]
 80111ce:	f000 faeb 	bl	80117a8 <etharp_raw>
      break;
 80111d2:	e001      	b.n	80111d8 <etharp_input+0xf8>
      break;
 80111d4:	bf00      	nop
 80111d6:	e000      	b.n	80111da <etharp_input+0xfa>
      break;
 80111d8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f003 fd86 	bl	8014cec <pbuf_free>
}
 80111e0:	3718      	adds	r7, #24
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bdb0      	pop	{r4, r5, r7, pc}
 80111e6:	bf00      	nop
 80111e8:	08024bb0 	.word	0x08024bb0
 80111ec:	08024d1c 	.word	0x08024d1c
 80111f0:	08024c44 	.word	0x08024c44

080111f4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b086      	sub	sp, #24
 80111f8:	af02      	add	r7, sp, #8
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	60b9      	str	r1, [r7, #8]
 80111fe:	4613      	mov	r3, r2
 8011200:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011202:	79fa      	ldrb	r2, [r7, #7]
 8011204:	4944      	ldr	r1, [pc, #272]	; (8011318 <etharp_output_to_arp_index+0x124>)
 8011206:	4613      	mov	r3, r2
 8011208:	005b      	lsls	r3, r3, #1
 801120a:	4413      	add	r3, r2
 801120c:	00db      	lsls	r3, r3, #3
 801120e:	440b      	add	r3, r1
 8011210:	3314      	adds	r3, #20
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	2b01      	cmp	r3, #1
 8011216:	d806      	bhi.n	8011226 <etharp_output_to_arp_index+0x32>
 8011218:	4b40      	ldr	r3, [pc, #256]	; (801131c <etharp_output_to_arp_index+0x128>)
 801121a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801121e:	4940      	ldr	r1, [pc, #256]	; (8011320 <etharp_output_to_arp_index+0x12c>)
 8011220:	4840      	ldr	r0, [pc, #256]	; (8011324 <etharp_output_to_arp_index+0x130>)
 8011222:	f010 fd7b 	bl	8021d1c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011226:	79fa      	ldrb	r2, [r7, #7]
 8011228:	493b      	ldr	r1, [pc, #236]	; (8011318 <etharp_output_to_arp_index+0x124>)
 801122a:	4613      	mov	r3, r2
 801122c:	005b      	lsls	r3, r3, #1
 801122e:	4413      	add	r3, r2
 8011230:	00db      	lsls	r3, r3, #3
 8011232:	440b      	add	r3, r1
 8011234:	3314      	adds	r3, #20
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	2b02      	cmp	r3, #2
 801123a:	d153      	bne.n	80112e4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801123c:	79fa      	ldrb	r2, [r7, #7]
 801123e:	4936      	ldr	r1, [pc, #216]	; (8011318 <etharp_output_to_arp_index+0x124>)
 8011240:	4613      	mov	r3, r2
 8011242:	005b      	lsls	r3, r3, #1
 8011244:	4413      	add	r3, r2
 8011246:	00db      	lsls	r3, r3, #3
 8011248:	440b      	add	r3, r1
 801124a:	3312      	adds	r3, #18
 801124c:	881b      	ldrh	r3, [r3, #0]
 801124e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011252:	d919      	bls.n	8011288 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011254:	79fa      	ldrb	r2, [r7, #7]
 8011256:	4613      	mov	r3, r2
 8011258:	005b      	lsls	r3, r3, #1
 801125a:	4413      	add	r3, r2
 801125c:	00db      	lsls	r3, r3, #3
 801125e:	4a2e      	ldr	r2, [pc, #184]	; (8011318 <etharp_output_to_arp_index+0x124>)
 8011260:	4413      	add	r3, r2
 8011262:	3304      	adds	r3, #4
 8011264:	4619      	mov	r1, r3
 8011266:	68f8      	ldr	r0, [r7, #12]
 8011268:	f000 fb4c 	bl	8011904 <etharp_request>
 801126c:	4603      	mov	r3, r0
 801126e:	2b00      	cmp	r3, #0
 8011270:	d138      	bne.n	80112e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011272:	79fa      	ldrb	r2, [r7, #7]
 8011274:	4928      	ldr	r1, [pc, #160]	; (8011318 <etharp_output_to_arp_index+0x124>)
 8011276:	4613      	mov	r3, r2
 8011278:	005b      	lsls	r3, r3, #1
 801127a:	4413      	add	r3, r2
 801127c:	00db      	lsls	r3, r3, #3
 801127e:	440b      	add	r3, r1
 8011280:	3314      	adds	r3, #20
 8011282:	2203      	movs	r2, #3
 8011284:	701a      	strb	r2, [r3, #0]
 8011286:	e02d      	b.n	80112e4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011288:	79fa      	ldrb	r2, [r7, #7]
 801128a:	4923      	ldr	r1, [pc, #140]	; (8011318 <etharp_output_to_arp_index+0x124>)
 801128c:	4613      	mov	r3, r2
 801128e:	005b      	lsls	r3, r3, #1
 8011290:	4413      	add	r3, r2
 8011292:	00db      	lsls	r3, r3, #3
 8011294:	440b      	add	r3, r1
 8011296:	3312      	adds	r3, #18
 8011298:	881b      	ldrh	r3, [r3, #0]
 801129a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801129e:	d321      	bcc.n	80112e4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80112a0:	79fa      	ldrb	r2, [r7, #7]
 80112a2:	4613      	mov	r3, r2
 80112a4:	005b      	lsls	r3, r3, #1
 80112a6:	4413      	add	r3, r2
 80112a8:	00db      	lsls	r3, r3, #3
 80112aa:	4a1b      	ldr	r2, [pc, #108]	; (8011318 <etharp_output_to_arp_index+0x124>)
 80112ac:	4413      	add	r3, r2
 80112ae:	1d19      	adds	r1, r3, #4
 80112b0:	79fa      	ldrb	r2, [r7, #7]
 80112b2:	4613      	mov	r3, r2
 80112b4:	005b      	lsls	r3, r3, #1
 80112b6:	4413      	add	r3, r2
 80112b8:	00db      	lsls	r3, r3, #3
 80112ba:	3308      	adds	r3, #8
 80112bc:	4a16      	ldr	r2, [pc, #88]	; (8011318 <etharp_output_to_arp_index+0x124>)
 80112be:	4413      	add	r3, r2
 80112c0:	3304      	adds	r3, #4
 80112c2:	461a      	mov	r2, r3
 80112c4:	68f8      	ldr	r0, [r7, #12]
 80112c6:	f000 fafb 	bl	80118c0 <etharp_request_dst>
 80112ca:	4603      	mov	r3, r0
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d109      	bne.n	80112e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80112d0:	79fa      	ldrb	r2, [r7, #7]
 80112d2:	4911      	ldr	r1, [pc, #68]	; (8011318 <etharp_output_to_arp_index+0x124>)
 80112d4:	4613      	mov	r3, r2
 80112d6:	005b      	lsls	r3, r3, #1
 80112d8:	4413      	add	r3, r2
 80112da:	00db      	lsls	r3, r3, #3
 80112dc:	440b      	add	r3, r1
 80112de:	3314      	adds	r3, #20
 80112e0:	2203      	movs	r2, #3
 80112e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80112ea:	79fa      	ldrb	r2, [r7, #7]
 80112ec:	4613      	mov	r3, r2
 80112ee:	005b      	lsls	r3, r3, #1
 80112f0:	4413      	add	r3, r2
 80112f2:	00db      	lsls	r3, r3, #3
 80112f4:	3308      	adds	r3, #8
 80112f6:	4a08      	ldr	r2, [pc, #32]	; (8011318 <etharp_output_to_arp_index+0x124>)
 80112f8:	4413      	add	r3, r2
 80112fa:	3304      	adds	r3, #4
 80112fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011300:	9200      	str	r2, [sp, #0]
 8011302:	460a      	mov	r2, r1
 8011304:	68b9      	ldr	r1, [r7, #8]
 8011306:	68f8      	ldr	r0, [r7, #12]
 8011308:	f000 fb9c 	bl	8011a44 <ethernet_output>
 801130c:	4603      	mov	r3, r0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	240047d4 	.word	0x240047d4
 801131c:	08024bb0 	.word	0x08024bb0
 8011320:	08024d3c 	.word	0x08024d3c
 8011324:	08024c44 	.word	0x08024c44

08011328 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b08a      	sub	sp, #40	; 0x28
 801132c:	af02      	add	r7, sp, #8
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d106      	bne.n	801134c <etharp_output+0x24>
 801133e:	4b73      	ldr	r3, [pc, #460]	; (801150c <etharp_output+0x1e4>)
 8011340:	f240 321e 	movw	r2, #798	; 0x31e
 8011344:	4972      	ldr	r1, [pc, #456]	; (8011510 <etharp_output+0x1e8>)
 8011346:	4873      	ldr	r0, [pc, #460]	; (8011514 <etharp_output+0x1ec>)
 8011348:	f010 fce8 	bl	8021d1c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d106      	bne.n	8011360 <etharp_output+0x38>
 8011352:	4b6e      	ldr	r3, [pc, #440]	; (801150c <etharp_output+0x1e4>)
 8011354:	f240 321f 	movw	r2, #799	; 0x31f
 8011358:	496f      	ldr	r1, [pc, #444]	; (8011518 <etharp_output+0x1f0>)
 801135a:	486e      	ldr	r0, [pc, #440]	; (8011514 <etharp_output+0x1ec>)
 801135c:	f010 fcde 	bl	8021d1c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d106      	bne.n	8011374 <etharp_output+0x4c>
 8011366:	4b69      	ldr	r3, [pc, #420]	; (801150c <etharp_output+0x1e4>)
 8011368:	f44f 7248 	mov.w	r2, #800	; 0x320
 801136c:	496b      	ldr	r1, [pc, #428]	; (801151c <etharp_output+0x1f4>)
 801136e:	4869      	ldr	r0, [pc, #420]	; (8011514 <etharp_output+0x1ec>)
 8011370:	f010 fcd4 	bl	8021d1c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	68f9      	ldr	r1, [r7, #12]
 801137a:	4618      	mov	r0, r3
 801137c:	f001 f8c8 	bl	8012510 <ip4_addr_isbroadcast_u32>
 8011380:	4603      	mov	r3, r0
 8011382:	2b00      	cmp	r3, #0
 8011384:	d002      	beq.n	801138c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011386:	4b66      	ldr	r3, [pc, #408]	; (8011520 <etharp_output+0x1f8>)
 8011388:	61fb      	str	r3, [r7, #28]
 801138a:	e0af      	b.n	80114ec <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011394:	2be0      	cmp	r3, #224	; 0xe0
 8011396:	d118      	bne.n	80113ca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011398:	2301      	movs	r3, #1
 801139a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801139c:	2300      	movs	r3, #0
 801139e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80113a0:	235e      	movs	r3, #94	; 0x5e
 80113a2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	3301      	adds	r3, #1
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113ae:	b2db      	uxtb	r3, r3
 80113b0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	3302      	adds	r3, #2
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	3303      	adds	r3, #3
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80113c2:	f107 0310 	add.w	r3, r7, #16
 80113c6:	61fb      	str	r3, [r7, #28]
 80113c8:	e090      	b.n	80114ec <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681a      	ldr	r2, [r3, #0]
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	3304      	adds	r3, #4
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	405a      	eors	r2, r3
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	3308      	adds	r3, #8
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4013      	ands	r3, r2
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d012      	beq.n	8011408 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80113e8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80113ec:	4293      	cmp	r3, r2
 80113ee:	d00b      	beq.n	8011408 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	330c      	adds	r3, #12
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d003      	beq.n	8011402 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	330c      	adds	r3, #12
 80113fe:	61bb      	str	r3, [r7, #24]
 8011400:	e002      	b.n	8011408 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011402:	f06f 0303 	mvn.w	r3, #3
 8011406:	e07d      	b.n	8011504 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011408:	4b46      	ldr	r3, [pc, #280]	; (8011524 <etharp_output+0x1fc>)
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	4619      	mov	r1, r3
 801140e:	4a46      	ldr	r2, [pc, #280]	; (8011528 <etharp_output+0x200>)
 8011410:	460b      	mov	r3, r1
 8011412:	005b      	lsls	r3, r3, #1
 8011414:	440b      	add	r3, r1
 8011416:	00db      	lsls	r3, r3, #3
 8011418:	4413      	add	r3, r2
 801141a:	3314      	adds	r3, #20
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	2b01      	cmp	r3, #1
 8011420:	d925      	bls.n	801146e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011422:	4b40      	ldr	r3, [pc, #256]	; (8011524 <etharp_output+0x1fc>)
 8011424:	781b      	ldrb	r3, [r3, #0]
 8011426:	4619      	mov	r1, r3
 8011428:	4a3f      	ldr	r2, [pc, #252]	; (8011528 <etharp_output+0x200>)
 801142a:	460b      	mov	r3, r1
 801142c:	005b      	lsls	r3, r3, #1
 801142e:	440b      	add	r3, r1
 8011430:	00db      	lsls	r3, r3, #3
 8011432:	4413      	add	r3, r2
 8011434:	3308      	adds	r3, #8
 8011436:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011438:	68fa      	ldr	r2, [r7, #12]
 801143a:	429a      	cmp	r2, r3
 801143c:	d117      	bne.n	801146e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801143e:	69bb      	ldr	r3, [r7, #24]
 8011440:	681a      	ldr	r2, [r3, #0]
 8011442:	4b38      	ldr	r3, [pc, #224]	; (8011524 <etharp_output+0x1fc>)
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	4618      	mov	r0, r3
 8011448:	4937      	ldr	r1, [pc, #220]	; (8011528 <etharp_output+0x200>)
 801144a:	4603      	mov	r3, r0
 801144c:	005b      	lsls	r3, r3, #1
 801144e:	4403      	add	r3, r0
 8011450:	00db      	lsls	r3, r3, #3
 8011452:	440b      	add	r3, r1
 8011454:	3304      	adds	r3, #4
 8011456:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011458:	429a      	cmp	r2, r3
 801145a:	d108      	bne.n	801146e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801145c:	4b31      	ldr	r3, [pc, #196]	; (8011524 <etharp_output+0x1fc>)
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	461a      	mov	r2, r3
 8011462:	68b9      	ldr	r1, [r7, #8]
 8011464:	68f8      	ldr	r0, [r7, #12]
 8011466:	f7ff fec5 	bl	80111f4 <etharp_output_to_arp_index>
 801146a:	4603      	mov	r3, r0
 801146c:	e04a      	b.n	8011504 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801146e:	2300      	movs	r3, #0
 8011470:	75fb      	strb	r3, [r7, #23]
 8011472:	e031      	b.n	80114d8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011474:	7dfa      	ldrb	r2, [r7, #23]
 8011476:	492c      	ldr	r1, [pc, #176]	; (8011528 <etharp_output+0x200>)
 8011478:	4613      	mov	r3, r2
 801147a:	005b      	lsls	r3, r3, #1
 801147c:	4413      	add	r3, r2
 801147e:	00db      	lsls	r3, r3, #3
 8011480:	440b      	add	r3, r1
 8011482:	3314      	adds	r3, #20
 8011484:	781b      	ldrb	r3, [r3, #0]
 8011486:	2b01      	cmp	r3, #1
 8011488:	d923      	bls.n	80114d2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801148a:	7dfa      	ldrb	r2, [r7, #23]
 801148c:	4926      	ldr	r1, [pc, #152]	; (8011528 <etharp_output+0x200>)
 801148e:	4613      	mov	r3, r2
 8011490:	005b      	lsls	r3, r3, #1
 8011492:	4413      	add	r3, r2
 8011494:	00db      	lsls	r3, r3, #3
 8011496:	440b      	add	r3, r1
 8011498:	3308      	adds	r3, #8
 801149a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801149c:	68fa      	ldr	r2, [r7, #12]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d117      	bne.n	80114d2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	6819      	ldr	r1, [r3, #0]
 80114a6:	7dfa      	ldrb	r2, [r7, #23]
 80114a8:	481f      	ldr	r0, [pc, #124]	; (8011528 <etharp_output+0x200>)
 80114aa:	4613      	mov	r3, r2
 80114ac:	005b      	lsls	r3, r3, #1
 80114ae:	4413      	add	r3, r2
 80114b0:	00db      	lsls	r3, r3, #3
 80114b2:	4403      	add	r3, r0
 80114b4:	3304      	adds	r3, #4
 80114b6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80114b8:	4299      	cmp	r1, r3
 80114ba:	d10a      	bne.n	80114d2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80114bc:	4a19      	ldr	r2, [pc, #100]	; (8011524 <etharp_output+0x1fc>)
 80114be:	7dfb      	ldrb	r3, [r7, #23]
 80114c0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80114c2:	7dfb      	ldrb	r3, [r7, #23]
 80114c4:	461a      	mov	r2, r3
 80114c6:	68b9      	ldr	r1, [r7, #8]
 80114c8:	68f8      	ldr	r0, [r7, #12]
 80114ca:	f7ff fe93 	bl	80111f4 <etharp_output_to_arp_index>
 80114ce:	4603      	mov	r3, r0
 80114d0:	e018      	b.n	8011504 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80114d2:	7dfb      	ldrb	r3, [r7, #23]
 80114d4:	3301      	adds	r3, #1
 80114d6:	75fb      	strb	r3, [r7, #23]
 80114d8:	7dfb      	ldrb	r3, [r7, #23]
 80114da:	2b09      	cmp	r3, #9
 80114dc:	d9ca      	bls.n	8011474 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80114de:	68ba      	ldr	r2, [r7, #8]
 80114e0:	69b9      	ldr	r1, [r7, #24]
 80114e2:	68f8      	ldr	r0, [r7, #12]
 80114e4:	f000 f822 	bl	801152c <etharp_query>
 80114e8:	4603      	mov	r3, r0
 80114ea:	e00b      	b.n	8011504 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80114f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80114f6:	9300      	str	r3, [sp, #0]
 80114f8:	69fb      	ldr	r3, [r7, #28]
 80114fa:	68b9      	ldr	r1, [r7, #8]
 80114fc:	68f8      	ldr	r0, [r7, #12]
 80114fe:	f000 faa1 	bl	8011a44 <ethernet_output>
 8011502:	4603      	mov	r3, r0
}
 8011504:	4618      	mov	r0, r3
 8011506:	3720      	adds	r7, #32
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}
 801150c:	08024bb0 	.word	0x08024bb0
 8011510:	08024d1c 	.word	0x08024d1c
 8011514:	08024c44 	.word	0x08024c44
 8011518:	08024d6c 	.word	0x08024d6c
 801151c:	08024d0c 	.word	0x08024d0c
 8011520:	0802806c 	.word	0x0802806c
 8011524:	240048c4 	.word	0x240048c4
 8011528:	240047d4 	.word	0x240047d4

0801152c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b08c      	sub	sp, #48	; 0x30
 8011530:	af02      	add	r7, sp, #8
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	60b9      	str	r1, [r7, #8]
 8011536:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	3326      	adds	r3, #38	; 0x26
 801153c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801153e:	23ff      	movs	r3, #255	; 0xff
 8011540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011544:	2300      	movs	r3, #0
 8011546:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	68f9      	ldr	r1, [r7, #12]
 801154e:	4618      	mov	r0, r3
 8011550:	f000 ffde 	bl	8012510 <ip4_addr_isbroadcast_u32>
 8011554:	4603      	mov	r3, r0
 8011556:	2b00      	cmp	r3, #0
 8011558:	d10c      	bne.n	8011574 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011562:	2be0      	cmp	r3, #224	; 0xe0
 8011564:	d006      	beq.n	8011574 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d003      	beq.n	8011574 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d102      	bne.n	801157a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011574:	f06f 030f 	mvn.w	r3, #15
 8011578:	e101      	b.n	801177e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801157a:	68fa      	ldr	r2, [r7, #12]
 801157c:	2101      	movs	r1, #1
 801157e:	68b8      	ldr	r0, [r7, #8]
 8011580:	f7ff fb60 	bl	8010c44 <etharp_find_entry>
 8011584:	4603      	mov	r3, r0
 8011586:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011588:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801158c:	2b00      	cmp	r3, #0
 801158e:	da02      	bge.n	8011596 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011590:	8a7b      	ldrh	r3, [r7, #18]
 8011592:	b25b      	sxtb	r3, r3
 8011594:	e0f3      	b.n	801177e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011596:	8a7b      	ldrh	r3, [r7, #18]
 8011598:	2b7e      	cmp	r3, #126	; 0x7e
 801159a:	d906      	bls.n	80115aa <etharp_query+0x7e>
 801159c:	4b7a      	ldr	r3, [pc, #488]	; (8011788 <etharp_query+0x25c>)
 801159e:	f240 32c1 	movw	r2, #961	; 0x3c1
 80115a2:	497a      	ldr	r1, [pc, #488]	; (801178c <etharp_query+0x260>)
 80115a4:	487a      	ldr	r0, [pc, #488]	; (8011790 <etharp_query+0x264>)
 80115a6:	f010 fbb9 	bl	8021d1c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80115aa:	8a7b      	ldrh	r3, [r7, #18]
 80115ac:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80115ae:	7c7a      	ldrb	r2, [r7, #17]
 80115b0:	4978      	ldr	r1, [pc, #480]	; (8011794 <etharp_query+0x268>)
 80115b2:	4613      	mov	r3, r2
 80115b4:	005b      	lsls	r3, r3, #1
 80115b6:	4413      	add	r3, r2
 80115b8:	00db      	lsls	r3, r3, #3
 80115ba:	440b      	add	r3, r1
 80115bc:	3314      	adds	r3, #20
 80115be:	781b      	ldrb	r3, [r3, #0]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d115      	bne.n	80115f0 <etharp_query+0xc4>
    is_new_entry = 1;
 80115c4:	2301      	movs	r3, #1
 80115c6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80115c8:	7c7a      	ldrb	r2, [r7, #17]
 80115ca:	4972      	ldr	r1, [pc, #456]	; (8011794 <etharp_query+0x268>)
 80115cc:	4613      	mov	r3, r2
 80115ce:	005b      	lsls	r3, r3, #1
 80115d0:	4413      	add	r3, r2
 80115d2:	00db      	lsls	r3, r3, #3
 80115d4:	440b      	add	r3, r1
 80115d6:	3314      	adds	r3, #20
 80115d8:	2201      	movs	r2, #1
 80115da:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80115dc:	7c7a      	ldrb	r2, [r7, #17]
 80115de:	496d      	ldr	r1, [pc, #436]	; (8011794 <etharp_query+0x268>)
 80115e0:	4613      	mov	r3, r2
 80115e2:	005b      	lsls	r3, r3, #1
 80115e4:	4413      	add	r3, r2
 80115e6:	00db      	lsls	r3, r3, #3
 80115e8:	440b      	add	r3, r1
 80115ea:	3308      	adds	r3, #8
 80115ec:	68fa      	ldr	r2, [r7, #12]
 80115ee:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80115f0:	7c7a      	ldrb	r2, [r7, #17]
 80115f2:	4968      	ldr	r1, [pc, #416]	; (8011794 <etharp_query+0x268>)
 80115f4:	4613      	mov	r3, r2
 80115f6:	005b      	lsls	r3, r3, #1
 80115f8:	4413      	add	r3, r2
 80115fa:	00db      	lsls	r3, r3, #3
 80115fc:	440b      	add	r3, r1
 80115fe:	3314      	adds	r3, #20
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	2b01      	cmp	r3, #1
 8011604:	d011      	beq.n	801162a <etharp_query+0xfe>
 8011606:	7c7a      	ldrb	r2, [r7, #17]
 8011608:	4962      	ldr	r1, [pc, #392]	; (8011794 <etharp_query+0x268>)
 801160a:	4613      	mov	r3, r2
 801160c:	005b      	lsls	r3, r3, #1
 801160e:	4413      	add	r3, r2
 8011610:	00db      	lsls	r3, r3, #3
 8011612:	440b      	add	r3, r1
 8011614:	3314      	adds	r3, #20
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	2b01      	cmp	r3, #1
 801161a:	d806      	bhi.n	801162a <etharp_query+0xfe>
 801161c:	4b5a      	ldr	r3, [pc, #360]	; (8011788 <etharp_query+0x25c>)
 801161e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011622:	495d      	ldr	r1, [pc, #372]	; (8011798 <etharp_query+0x26c>)
 8011624:	485a      	ldr	r0, [pc, #360]	; (8011790 <etharp_query+0x264>)
 8011626:	f010 fb79 	bl	8021d1c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801162a:	6a3b      	ldr	r3, [r7, #32]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d102      	bne.n	8011636 <etharp_query+0x10a>
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d10c      	bne.n	8011650 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011636:	68b9      	ldr	r1, [r7, #8]
 8011638:	68f8      	ldr	r0, [r7, #12]
 801163a:	f000 f963 	bl	8011904 <etharp_request>
 801163e:	4603      	mov	r3, r0
 8011640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d102      	bne.n	8011650 <etharp_query+0x124>
      return result;
 801164a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801164e:	e096      	b.n	801177e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d106      	bne.n	8011664 <etharp_query+0x138>
 8011656:	4b4c      	ldr	r3, [pc, #304]	; (8011788 <etharp_query+0x25c>)
 8011658:	f240 32e1 	movw	r2, #993	; 0x3e1
 801165c:	494f      	ldr	r1, [pc, #316]	; (801179c <etharp_query+0x270>)
 801165e:	484c      	ldr	r0, [pc, #304]	; (8011790 <etharp_query+0x264>)
 8011660:	f010 fb5c 	bl	8021d1c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011664:	7c7a      	ldrb	r2, [r7, #17]
 8011666:	494b      	ldr	r1, [pc, #300]	; (8011794 <etharp_query+0x268>)
 8011668:	4613      	mov	r3, r2
 801166a:	005b      	lsls	r3, r3, #1
 801166c:	4413      	add	r3, r2
 801166e:	00db      	lsls	r3, r3, #3
 8011670:	440b      	add	r3, r1
 8011672:	3314      	adds	r3, #20
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	2b01      	cmp	r3, #1
 8011678:	d917      	bls.n	80116aa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801167a:	4a49      	ldr	r2, [pc, #292]	; (80117a0 <etharp_query+0x274>)
 801167c:	7c7b      	ldrb	r3, [r7, #17]
 801167e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011680:	7c7a      	ldrb	r2, [r7, #17]
 8011682:	4613      	mov	r3, r2
 8011684:	005b      	lsls	r3, r3, #1
 8011686:	4413      	add	r3, r2
 8011688:	00db      	lsls	r3, r3, #3
 801168a:	3308      	adds	r3, #8
 801168c:	4a41      	ldr	r2, [pc, #260]	; (8011794 <etharp_query+0x268>)
 801168e:	4413      	add	r3, r2
 8011690:	3304      	adds	r3, #4
 8011692:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011696:	9200      	str	r2, [sp, #0]
 8011698:	697a      	ldr	r2, [r7, #20]
 801169a:	6879      	ldr	r1, [r7, #4]
 801169c:	68f8      	ldr	r0, [r7, #12]
 801169e:	f000 f9d1 	bl	8011a44 <ethernet_output>
 80116a2:	4603      	mov	r3, r0
 80116a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80116a8:	e067      	b.n	801177a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80116aa:	7c7a      	ldrb	r2, [r7, #17]
 80116ac:	4939      	ldr	r1, [pc, #228]	; (8011794 <etharp_query+0x268>)
 80116ae:	4613      	mov	r3, r2
 80116b0:	005b      	lsls	r3, r3, #1
 80116b2:	4413      	add	r3, r2
 80116b4:	00db      	lsls	r3, r3, #3
 80116b6:	440b      	add	r3, r1
 80116b8:	3314      	adds	r3, #20
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	2b01      	cmp	r3, #1
 80116be:	d15c      	bne.n	801177a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80116c0:	2300      	movs	r3, #0
 80116c2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80116c8:	e01c      	b.n	8011704 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80116ca:	69fb      	ldr	r3, [r7, #28]
 80116cc:	895a      	ldrh	r2, [r3, #10]
 80116ce:	69fb      	ldr	r3, [r7, #28]
 80116d0:	891b      	ldrh	r3, [r3, #8]
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d10a      	bne.n	80116ec <etharp_query+0x1c0>
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d006      	beq.n	80116ec <etharp_query+0x1c0>
 80116de:	4b2a      	ldr	r3, [pc, #168]	; (8011788 <etharp_query+0x25c>)
 80116e0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80116e4:	492f      	ldr	r1, [pc, #188]	; (80117a4 <etharp_query+0x278>)
 80116e6:	482a      	ldr	r0, [pc, #168]	; (8011790 <etharp_query+0x264>)
 80116e8:	f010 fb18 	bl	8021d1c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	7b1b      	ldrb	r3, [r3, #12]
 80116f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d002      	beq.n	80116fe <etharp_query+0x1d2>
        copy_needed = 1;
 80116f8:	2301      	movs	r3, #1
 80116fa:	61bb      	str	r3, [r7, #24]
        break;
 80116fc:	e005      	b.n	801170a <etharp_query+0x1de>
      }
      p = p->next;
 80116fe:	69fb      	ldr	r3, [r7, #28]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d1df      	bne.n	80116ca <etharp_query+0x19e>
    }
    if (copy_needed) {
 801170a:	69bb      	ldr	r3, [r7, #24]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d007      	beq.n	8011720 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011710:	687a      	ldr	r2, [r7, #4]
 8011712:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011716:	200e      	movs	r0, #14
 8011718:	f003 fd60 	bl	80151dc <pbuf_clone>
 801171c:	61f8      	str	r0, [r7, #28]
 801171e:	e004      	b.n	801172a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011724:	69f8      	ldr	r0, [r7, #28]
 8011726:	f003 fb87 	bl	8014e38 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801172a:	69fb      	ldr	r3, [r7, #28]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d021      	beq.n	8011774 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011730:	7c7a      	ldrb	r2, [r7, #17]
 8011732:	4918      	ldr	r1, [pc, #96]	; (8011794 <etharp_query+0x268>)
 8011734:	4613      	mov	r3, r2
 8011736:	005b      	lsls	r3, r3, #1
 8011738:	4413      	add	r3, r2
 801173a:	00db      	lsls	r3, r3, #3
 801173c:	440b      	add	r3, r1
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d00a      	beq.n	801175a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011744:	7c7a      	ldrb	r2, [r7, #17]
 8011746:	4913      	ldr	r1, [pc, #76]	; (8011794 <etharp_query+0x268>)
 8011748:	4613      	mov	r3, r2
 801174a:	005b      	lsls	r3, r3, #1
 801174c:	4413      	add	r3, r2
 801174e:	00db      	lsls	r3, r3, #3
 8011750:	440b      	add	r3, r1
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4618      	mov	r0, r3
 8011756:	f003 fac9 	bl	8014cec <pbuf_free>
      }
      arp_table[i].q = p;
 801175a:	7c7a      	ldrb	r2, [r7, #17]
 801175c:	490d      	ldr	r1, [pc, #52]	; (8011794 <etharp_query+0x268>)
 801175e:	4613      	mov	r3, r2
 8011760:	005b      	lsls	r3, r3, #1
 8011762:	4413      	add	r3, r2
 8011764:	00db      	lsls	r3, r3, #3
 8011766:	440b      	add	r3, r1
 8011768:	69fa      	ldr	r2, [r7, #28]
 801176a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801176c:	2300      	movs	r3, #0
 801176e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011772:	e002      	b.n	801177a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011774:	23ff      	movs	r3, #255	; 0xff
 8011776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801177a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801177e:	4618      	mov	r0, r3
 8011780:	3728      	adds	r7, #40	; 0x28
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop
 8011788:	08024bb0 	.word	0x08024bb0
 801178c:	08024d78 	.word	0x08024d78
 8011790:	08024c44 	.word	0x08024c44
 8011794:	240047d4 	.word	0x240047d4
 8011798:	08024d88 	.word	0x08024d88
 801179c:	08024d6c 	.word	0x08024d6c
 80117a0:	240048c4 	.word	0x240048c4
 80117a4:	08024db0 	.word	0x08024db0

080117a8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b08a      	sub	sp, #40	; 0x28
 80117ac:	af02      	add	r7, sp, #8
 80117ae:	60f8      	str	r0, [r7, #12]
 80117b0:	60b9      	str	r1, [r7, #8]
 80117b2:	607a      	str	r2, [r7, #4]
 80117b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80117b6:	2300      	movs	r3, #0
 80117b8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d106      	bne.n	80117ce <etharp_raw+0x26>
 80117c0:	4b3a      	ldr	r3, [pc, #232]	; (80118ac <etharp_raw+0x104>)
 80117c2:	f240 4257 	movw	r2, #1111	; 0x457
 80117c6:	493a      	ldr	r1, [pc, #232]	; (80118b0 <etharp_raw+0x108>)
 80117c8:	483a      	ldr	r0, [pc, #232]	; (80118b4 <etharp_raw+0x10c>)
 80117ca:	f010 faa7 	bl	8021d1c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80117ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80117d2:	211c      	movs	r1, #28
 80117d4:	200e      	movs	r0, #14
 80117d6:	f002 ffa5 	bl	8014724 <pbuf_alloc>
 80117da:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80117dc:	69bb      	ldr	r3, [r7, #24]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d102      	bne.n	80117e8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80117e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117e6:	e05d      	b.n	80118a4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	895b      	ldrh	r3, [r3, #10]
 80117ec:	2b1b      	cmp	r3, #27
 80117ee:	d806      	bhi.n	80117fe <etharp_raw+0x56>
 80117f0:	4b2e      	ldr	r3, [pc, #184]	; (80118ac <etharp_raw+0x104>)
 80117f2:	f240 4262 	movw	r2, #1122	; 0x462
 80117f6:	4930      	ldr	r1, [pc, #192]	; (80118b8 <etharp_raw+0x110>)
 80117f8:	482e      	ldr	r0, [pc, #184]	; (80118b4 <etharp_raw+0x10c>)
 80117fa:	f010 fa8f 	bl	8021d1c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011804:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011806:	4618      	mov	r0, r3
 8011808:	f7ff f8f6 	bl	80109f8 <lwip_htons>
 801180c:	4603      	mov	r3, r0
 801180e:	461a      	mov	r2, r3
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801181a:	2b06      	cmp	r3, #6
 801181c:	d006      	beq.n	801182c <etharp_raw+0x84>
 801181e:	4b23      	ldr	r3, [pc, #140]	; (80118ac <etharp_raw+0x104>)
 8011820:	f240 4269 	movw	r2, #1129	; 0x469
 8011824:	4925      	ldr	r1, [pc, #148]	; (80118bc <etharp_raw+0x114>)
 8011826:	4823      	ldr	r0, [pc, #140]	; (80118b4 <etharp_raw+0x10c>)
 8011828:	f010 fa78 	bl	8021d1c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	3308      	adds	r3, #8
 8011830:	2206      	movs	r2, #6
 8011832:	6839      	ldr	r1, [r7, #0]
 8011834:	4618      	mov	r0, r3
 8011836:	f00f fdff 	bl	8021438 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	3312      	adds	r3, #18
 801183e:	2206      	movs	r2, #6
 8011840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011842:	4618      	mov	r0, r3
 8011844:	f00f fdf8 	bl	8021438 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	330e      	adds	r3, #14
 801184c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801184e:	6812      	ldr	r2, [r2, #0]
 8011850:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	3318      	adds	r3, #24
 8011856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011858:	6812      	ldr	r2, [r2, #0]
 801185a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	2200      	movs	r2, #0
 8011860:	701a      	strb	r2, [r3, #0]
 8011862:	2200      	movs	r2, #0
 8011864:	f042 0201 	orr.w	r2, r2, #1
 8011868:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	2200      	movs	r2, #0
 801186e:	f042 0208 	orr.w	r2, r2, #8
 8011872:	709a      	strb	r2, [r3, #2]
 8011874:	2200      	movs	r2, #0
 8011876:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	2206      	movs	r2, #6
 801187c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	2204      	movs	r2, #4
 8011882:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011884:	f640 0306 	movw	r3, #2054	; 0x806
 8011888:	9300      	str	r3, [sp, #0]
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	68ba      	ldr	r2, [r7, #8]
 801188e:	69b9      	ldr	r1, [r7, #24]
 8011890:	68f8      	ldr	r0, [r7, #12]
 8011892:	f000 f8d7 	bl	8011a44 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011896:	69b8      	ldr	r0, [r7, #24]
 8011898:	f003 fa28 	bl	8014cec <pbuf_free>
  p = NULL;
 801189c:	2300      	movs	r3, #0
 801189e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80118a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3720      	adds	r7, #32
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	08024bb0 	.word	0x08024bb0
 80118b0:	08024d1c 	.word	0x08024d1c
 80118b4:	08024c44 	.word	0x08024c44
 80118b8:	08024dcc 	.word	0x08024dcc
 80118bc:	08024e00 	.word	0x08024e00

080118c0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b088      	sub	sp, #32
 80118c4:	af04      	add	r7, sp, #16
 80118c6:	60f8      	str	r0, [r7, #12]
 80118c8:	60b9      	str	r1, [r7, #8]
 80118ca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80118dc:	2201      	movs	r2, #1
 80118de:	9203      	str	r2, [sp, #12]
 80118e0:	68ba      	ldr	r2, [r7, #8]
 80118e2:	9202      	str	r2, [sp, #8]
 80118e4:	4a06      	ldr	r2, [pc, #24]	; (8011900 <etharp_request_dst+0x40>)
 80118e6:	9201      	str	r2, [sp, #4]
 80118e8:	9300      	str	r3, [sp, #0]
 80118ea:	4603      	mov	r3, r0
 80118ec:	687a      	ldr	r2, [r7, #4]
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f7ff ff5a 	bl	80117a8 <etharp_raw>
 80118f4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3710      	adds	r7, #16
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	08028074 	.word	0x08028074

08011904 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b082      	sub	sp, #8
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801190e:	4a05      	ldr	r2, [pc, #20]	; (8011924 <etharp_request+0x20>)
 8011910:	6839      	ldr	r1, [r7, #0]
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f7ff ffd4 	bl	80118c0 <etharp_request_dst>
 8011918:	4603      	mov	r3, r0
}
 801191a:	4618      	mov	r0, r3
 801191c:	3708      	adds	r7, #8
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
 8011922:	bf00      	nop
 8011924:	0802806c 	.word	0x0802806c

08011928 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b086      	sub	sp, #24
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011932:	230e      	movs	r3, #14
 8011934:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	895b      	ldrh	r3, [r3, #10]
 801193a:	2b0e      	cmp	r3, #14
 801193c:	d96e      	bls.n	8011a1c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	7bdb      	ldrb	r3, [r3, #15]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d106      	bne.n	8011954 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801194c:	3301      	adds	r3, #1
 801194e:	b2da      	uxtb	r2, r3
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	7b1a      	ldrb	r2, [r3, #12]
 801195e:	7b5b      	ldrb	r3, [r3, #13]
 8011960:	021b      	lsls	r3, r3, #8
 8011962:	4313      	orrs	r3, r2
 8011964:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	f003 0301 	and.w	r3, r3, #1
 801196e:	2b00      	cmp	r3, #0
 8011970:	d023      	beq.n	80119ba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	2b01      	cmp	r3, #1
 8011978:	d10f      	bne.n	801199a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	785b      	ldrb	r3, [r3, #1]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d11b      	bne.n	80119ba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011986:	2b5e      	cmp	r3, #94	; 0x5e
 8011988:	d117      	bne.n	80119ba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	7b5b      	ldrb	r3, [r3, #13]
 801198e:	f043 0310 	orr.w	r3, r3, #16
 8011992:	b2da      	uxtb	r2, r3
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	735a      	strb	r2, [r3, #13]
 8011998:	e00f      	b.n	80119ba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	2206      	movs	r2, #6
 801199e:	4928      	ldr	r1, [pc, #160]	; (8011a40 <ethernet_input+0x118>)
 80119a0:	4618      	mov	r0, r3
 80119a2:	f00f fd3b 	bl	802141c <memcmp>
 80119a6:	4603      	mov	r3, r0
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d106      	bne.n	80119ba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	7b5b      	ldrb	r3, [r3, #13]
 80119b0:	f043 0308 	orr.w	r3, r3, #8
 80119b4:	b2da      	uxtb	r2, r3
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80119ba:	89fb      	ldrh	r3, [r7, #14]
 80119bc:	2b08      	cmp	r3, #8
 80119be:	d003      	beq.n	80119c8 <ethernet_input+0xa0>
 80119c0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80119c4:	d014      	beq.n	80119f0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80119c6:	e032      	b.n	8011a2e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80119ce:	f003 0308 	and.w	r3, r3, #8
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d024      	beq.n	8011a20 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80119d6:	8afb      	ldrh	r3, [r7, #22]
 80119d8:	4619      	mov	r1, r3
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f003 f900 	bl	8014be0 <pbuf_remove_header>
 80119e0:	4603      	mov	r3, r0
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d11e      	bne.n	8011a24 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80119e6:	6839      	ldr	r1, [r7, #0]
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f000 fb95 	bl	8012118 <ip4_input>
      break;
 80119ee:	e013      	b.n	8011a18 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80119f6:	f003 0308 	and.w	r3, r3, #8
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d014      	beq.n	8011a28 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80119fe:	8afb      	ldrh	r3, [r7, #22]
 8011a00:	4619      	mov	r1, r3
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f003 f8ec 	bl	8014be0 <pbuf_remove_header>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d10e      	bne.n	8011a2c <ethernet_input+0x104>
        etharp_input(p, netif);
 8011a0e:	6839      	ldr	r1, [r7, #0]
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f7ff fb65 	bl	80110e0 <etharp_input>
      break;
 8011a16:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	e00c      	b.n	8011a36 <ethernet_input+0x10e>
    goto free_and_return;
 8011a1c:	bf00      	nop
 8011a1e:	e006      	b.n	8011a2e <ethernet_input+0x106>
        goto free_and_return;
 8011a20:	bf00      	nop
 8011a22:	e004      	b.n	8011a2e <ethernet_input+0x106>
        goto free_and_return;
 8011a24:	bf00      	nop
 8011a26:	e002      	b.n	8011a2e <ethernet_input+0x106>
        goto free_and_return;
 8011a28:	bf00      	nop
 8011a2a:	e000      	b.n	8011a2e <ethernet_input+0x106>
        goto free_and_return;
 8011a2c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f003 f95c 	bl	8014cec <pbuf_free>
  return ERR_OK;
 8011a34:	2300      	movs	r3, #0
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3718      	adds	r7, #24
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}
 8011a3e:	bf00      	nop
 8011a40:	0802806c 	.word	0x0802806c

08011a44 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b086      	sub	sp, #24
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	60f8      	str	r0, [r7, #12]
 8011a4c:	60b9      	str	r1, [r7, #8]
 8011a4e:	607a      	str	r2, [r7, #4]
 8011a50:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011a52:	8c3b      	ldrh	r3, [r7, #32]
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fe ffcf 	bl	80109f8 <lwip_htons>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011a5e:	210e      	movs	r1, #14
 8011a60:	68b8      	ldr	r0, [r7, #8]
 8011a62:	f003 f8ad 	bl	8014bc0 <pbuf_add_header>
 8011a66:	4603      	mov	r3, r0
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d125      	bne.n	8011ab8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	8afa      	ldrh	r2, [r7, #22]
 8011a76:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011a78:	693b      	ldr	r3, [r7, #16]
 8011a7a:	2206      	movs	r2, #6
 8011a7c:	6839      	ldr	r1, [r7, #0]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f00f fcda 	bl	8021438 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	3306      	adds	r3, #6
 8011a88:	2206      	movs	r2, #6
 8011a8a:	6879      	ldr	r1, [r7, #4]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f00f fcd3 	bl	8021438 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011a98:	2b06      	cmp	r3, #6
 8011a9a:	d006      	beq.n	8011aaa <ethernet_output+0x66>
 8011a9c:	4b0a      	ldr	r3, [pc, #40]	; (8011ac8 <ethernet_output+0x84>)
 8011a9e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011aa2:	490a      	ldr	r1, [pc, #40]	; (8011acc <ethernet_output+0x88>)
 8011aa4:	480a      	ldr	r0, [pc, #40]	; (8011ad0 <ethernet_output+0x8c>)
 8011aa6:	f010 f939 	bl	8021d1c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	699b      	ldr	r3, [r3, #24]
 8011aae:	68b9      	ldr	r1, [r7, #8]
 8011ab0:	68f8      	ldr	r0, [r7, #12]
 8011ab2:	4798      	blx	r3
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	e002      	b.n	8011abe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011ab8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011aba:	f06f 0301 	mvn.w	r3, #1
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3718      	adds	r7, #24
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}
 8011ac6:	bf00      	nop
 8011ac8:	08024e44 	.word	0x08024e44
 8011acc:	08024e98 	.word	0x08024e98
 8011ad0:	08024ecc 	.word	0x08024ecc

08011ad4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b08e      	sub	sp, #56	; 0x38
 8011ad8:	af04      	add	r7, sp, #16
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011ade:	4b87      	ldr	r3, [pc, #540]	; (8011cfc <icmp_input+0x228>)
 8011ae0:	689b      	ldr	r3, [r3, #8]
 8011ae2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	f003 030f 	and.w	r3, r3, #15
 8011aec:	b2db      	uxtb	r3, r3
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	b2db      	uxtb	r3, r3
 8011af2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011af4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011af6:	2b13      	cmp	r3, #19
 8011af8:	f240 80e8 	bls.w	8011ccc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	895b      	ldrh	r3, [r3, #10]
 8011b00:	2b03      	cmp	r3, #3
 8011b02:	f240 80e5 	bls.w	8011cd0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	781b      	ldrb	r3, [r3, #0]
 8011b0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011b10:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	f000 80d2 	beq.w	8011cbe <icmp_input+0x1ea>
 8011b1a:	2b08      	cmp	r3, #8
 8011b1c:	f040 80d2 	bne.w	8011cc4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011b20:	4b77      	ldr	r3, [pc, #476]	; (8011d00 <icmp_input+0x22c>)
 8011b22:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011b24:	4b75      	ldr	r3, [pc, #468]	; (8011cfc <icmp_input+0x228>)
 8011b26:	695b      	ldr	r3, [r3, #20]
 8011b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b2c:	2be0      	cmp	r3, #224	; 0xe0
 8011b2e:	f000 80d6 	beq.w	8011cde <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011b32:	4b72      	ldr	r3, [pc, #456]	; (8011cfc <icmp_input+0x228>)
 8011b34:	695b      	ldr	r3, [r3, #20]
 8011b36:	4a71      	ldr	r2, [pc, #452]	; (8011cfc <icmp_input+0x228>)
 8011b38:	6812      	ldr	r2, [r2, #0]
 8011b3a:	4611      	mov	r1, r2
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f000 fce7 	bl	8012510 <ip4_addr_isbroadcast_u32>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	f040 80cc 	bne.w	8011ce2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	891b      	ldrh	r3, [r3, #8]
 8011b4e:	2b07      	cmp	r3, #7
 8011b50:	f240 80c0 	bls.w	8011cd4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f000 f9e0 	bl	8011f1a <inet_chksum_pbuf>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d003      	beq.n	8011b68 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f003 f8c3 	bl	8014cec <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8011b66:	e0c5      	b.n	8011cf4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011b68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b6a:	330e      	adds	r3, #14
 8011b6c:	4619      	mov	r1, r3
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f003 f826 	bl	8014bc0 <pbuf_add_header>
 8011b74:	4603      	mov	r3, r0
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d04b      	beq.n	8011c12 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	891a      	ldrh	r2, [r3, #8]
 8011b7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b80:	4413      	add	r3, r2
 8011b82:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	891b      	ldrh	r3, [r3, #8]
 8011b88:	8b7a      	ldrh	r2, [r7, #26]
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	f0c0 80ab 	bcc.w	8011ce6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011b90:	8b7b      	ldrh	r3, [r7, #26]
 8011b92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b96:	4619      	mov	r1, r3
 8011b98:	200e      	movs	r0, #14
 8011b9a:	f002 fdc3 	bl	8014724 <pbuf_alloc>
 8011b9e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	f000 80a1 	beq.w	8011cea <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	895b      	ldrh	r3, [r3, #10]
 8011bac:	461a      	mov	r2, r3
 8011bae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011bb0:	3308      	adds	r3, #8
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d203      	bcs.n	8011bbe <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011bb6:	6978      	ldr	r0, [r7, #20]
 8011bb8:	f003 f898 	bl	8014cec <pbuf_free>
          goto icmperr;
 8011bbc:	e096      	b.n	8011cec <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f00f fc36 	bl	8021438 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011bcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011bce:	4619      	mov	r1, r3
 8011bd0:	6978      	ldr	r0, [r7, #20]
 8011bd2:	f003 f805 	bl	8014be0 <pbuf_remove_header>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d009      	beq.n	8011bf0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011bdc:	4b49      	ldr	r3, [pc, #292]	; (8011d04 <icmp_input+0x230>)
 8011bde:	22b6      	movs	r2, #182	; 0xb6
 8011be0:	4949      	ldr	r1, [pc, #292]	; (8011d08 <icmp_input+0x234>)
 8011be2:	484a      	ldr	r0, [pc, #296]	; (8011d0c <icmp_input+0x238>)
 8011be4:	f010 f89a 	bl	8021d1c <iprintf>
          pbuf_free(r);
 8011be8:	6978      	ldr	r0, [r7, #20]
 8011bea:	f003 f87f 	bl	8014cec <pbuf_free>
          goto icmperr;
 8011bee:	e07d      	b.n	8011cec <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011bf0:	6879      	ldr	r1, [r7, #4]
 8011bf2:	6978      	ldr	r0, [r7, #20]
 8011bf4:	f003 f9ae 	bl	8014f54 <pbuf_copy>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d003      	beq.n	8011c06 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011bfe:	6978      	ldr	r0, [r7, #20]
 8011c00:	f003 f874 	bl	8014cec <pbuf_free>
          goto icmperr;
 8011c04:	e072      	b.n	8011cec <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f003 f870 	bl	8014cec <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	607b      	str	r3, [r7, #4]
 8011c10:	e00f      	b.n	8011c32 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011c12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c14:	330e      	adds	r3, #14
 8011c16:	4619      	mov	r1, r3
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f002 ffe1 	bl	8014be0 <pbuf_remove_header>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d006      	beq.n	8011c32 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011c24:	4b37      	ldr	r3, [pc, #220]	; (8011d04 <icmp_input+0x230>)
 8011c26:	22c7      	movs	r2, #199	; 0xc7
 8011c28:	4939      	ldr	r1, [pc, #228]	; (8011d10 <icmp_input+0x23c>)
 8011c2a:	4838      	ldr	r0, [pc, #224]	; (8011d0c <icmp_input+0x238>)
 8011c2c:	f010 f876 	bl	8021d1c <iprintf>
          goto icmperr;
 8011c30:	e05c      	b.n	8011cec <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	685b      	ldr	r3, [r3, #4]
 8011c36:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011c38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f002 ffbf 	bl	8014bc0 <pbuf_add_header>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d13c      	bne.n	8011cc2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	685b      	ldr	r3, [r3, #4]
 8011c4c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011c4e:	69fb      	ldr	r3, [r7, #28]
 8011c50:	681a      	ldr	r2, [r3, #0]
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011c56:	4b29      	ldr	r3, [pc, #164]	; (8011cfc <icmp_input+0x228>)
 8011c58:	691a      	ldr	r2, [r3, #16]
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	2200      	movs	r2, #0
 8011c62:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	885b      	ldrh	r3, [r3, #2]
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d907      	bls.n	8011c82 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	885b      	ldrh	r3, [r3, #2]
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	3309      	adds	r3, #9
 8011c7a:	b29a      	uxth	r2, r3
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	805a      	strh	r2, [r3, #2]
 8011c80:	e006      	b.n	8011c90 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	885b      	ldrh	r3, [r3, #2]
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	3308      	adds	r3, #8
 8011c8a:	b29a      	uxth	r2, r3
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	22ff      	movs	r2, #255	; 0xff
 8011c94:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	2200      	movs	r2, #0
 8011c9a:	729a      	strb	r2, [r3, #10]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	9302      	str	r3, [sp, #8]
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	9301      	str	r3, [sp, #4]
 8011ca8:	2300      	movs	r3, #0
 8011caa:	9300      	str	r3, [sp, #0]
 8011cac:	23ff      	movs	r3, #255	; 0xff
 8011cae:	2200      	movs	r2, #0
 8011cb0:	69f9      	ldr	r1, [r7, #28]
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f000 fb54 	bl	8012360 <ip4_output_if>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011cbc:	e001      	b.n	8011cc2 <icmp_input+0x1ee>
      break;
 8011cbe:	bf00      	nop
 8011cc0:	e000      	b.n	8011cc4 <icmp_input+0x1f0>
      break;
 8011cc2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011cc4:	6878      	ldr	r0, [r7, #4]
 8011cc6:	f003 f811 	bl	8014cec <pbuf_free>
  return;
 8011cca:	e013      	b.n	8011cf4 <icmp_input+0x220>
    goto lenerr;
 8011ccc:	bf00      	nop
 8011cce:	e002      	b.n	8011cd6 <icmp_input+0x202>
    goto lenerr;
 8011cd0:	bf00      	nop
 8011cd2:	e000      	b.n	8011cd6 <icmp_input+0x202>
        goto lenerr;
 8011cd4:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f003 f808 	bl	8014cec <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011cdc:	e00a      	b.n	8011cf4 <icmp_input+0x220>
        goto icmperr;
 8011cde:	bf00      	nop
 8011ce0:	e004      	b.n	8011cec <icmp_input+0x218>
        goto icmperr;
 8011ce2:	bf00      	nop
 8011ce4:	e002      	b.n	8011cec <icmp_input+0x218>
          goto icmperr;
 8011ce6:	bf00      	nop
 8011ce8:	e000      	b.n	8011cec <icmp_input+0x218>
          goto icmperr;
 8011cea:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f002 fffd 	bl	8014cec <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011cf2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011cf4:	3728      	adds	r7, #40	; 0x28
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	2400a184 	.word	0x2400a184
 8011d00:	2400a198 	.word	0x2400a198
 8011d04:	08024ef4 	.word	0x08024ef4
 8011d08:	08024f48 	.word	0x08024f48
 8011d0c:	08024f80 	.word	0x08024f80
 8011d10:	08024fa8 	.word	0x08024fa8

08011d14 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b082      	sub	sp, #8
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	460b      	mov	r3, r1
 8011d1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011d20:	78fb      	ldrb	r3, [r7, #3]
 8011d22:	461a      	mov	r2, r3
 8011d24:	2103      	movs	r1, #3
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f000 f814 	bl	8011d54 <icmp_send_response>
}
 8011d2c:	bf00      	nop
 8011d2e:	3708      	adds	r7, #8
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}

08011d34 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	460b      	mov	r3, r1
 8011d3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011d40:	78fb      	ldrb	r3, [r7, #3]
 8011d42:	461a      	mov	r2, r3
 8011d44:	210b      	movs	r1, #11
 8011d46:	6878      	ldr	r0, [r7, #4]
 8011d48:	f000 f804 	bl	8011d54 <icmp_send_response>
}
 8011d4c:	bf00      	nop
 8011d4e:	3708      	adds	r7, #8
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}

08011d54 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b08c      	sub	sp, #48	; 0x30
 8011d58:	af04      	add	r7, sp, #16
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	460b      	mov	r3, r1
 8011d5e:	70fb      	strb	r3, [r7, #3]
 8011d60:	4613      	mov	r3, r2
 8011d62:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011d64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d68:	2124      	movs	r1, #36	; 0x24
 8011d6a:	2022      	movs	r0, #34	; 0x22
 8011d6c:	f002 fcda 	bl	8014724 <pbuf_alloc>
 8011d70:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011d72:	69fb      	ldr	r3, [r7, #28]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d056      	beq.n	8011e26 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011d78:	69fb      	ldr	r3, [r7, #28]
 8011d7a:	895b      	ldrh	r3, [r3, #10]
 8011d7c:	2b23      	cmp	r3, #35	; 0x23
 8011d7e:	d806      	bhi.n	8011d8e <icmp_send_response+0x3a>
 8011d80:	4b2b      	ldr	r3, [pc, #172]	; (8011e30 <icmp_send_response+0xdc>)
 8011d82:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011d86:	492b      	ldr	r1, [pc, #172]	; (8011e34 <icmp_send_response+0xe0>)
 8011d88:	482b      	ldr	r0, [pc, #172]	; (8011e38 <icmp_send_response+0xe4>)
 8011d8a:	f00f ffc7 	bl	8021d1c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011d94:	69fb      	ldr	r3, [r7, #28]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	78fa      	ldrb	r2, [r7, #3]
 8011d9e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	78ba      	ldrb	r2, [r7, #2]
 8011da4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	2200      	movs	r2, #0
 8011daa:	711a      	strb	r2, [r3, #4]
 8011dac:	2200      	movs	r2, #0
 8011dae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	2200      	movs	r2, #0
 8011db4:	719a      	strb	r2, [r3, #6]
 8011db6:	2200      	movs	r2, #0
 8011db8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011dba:	69fb      	ldr	r3, [r7, #28]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	f103 0008 	add.w	r0, r3, #8
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	685b      	ldr	r3, [r3, #4]
 8011dc6:	221c      	movs	r2, #28
 8011dc8:	4619      	mov	r1, r3
 8011dca:	f00f fb35 	bl	8021438 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011dce:	69bb      	ldr	r3, [r7, #24]
 8011dd0:	68db      	ldr	r3, [r3, #12]
 8011dd2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011dd4:	f107 030c 	add.w	r3, r7, #12
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f000 f903 	bl	8011fe4 <ip4_route>
 8011dde:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d01b      	beq.n	8011e1e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011de6:	697b      	ldr	r3, [r7, #20]
 8011de8:	2200      	movs	r2, #0
 8011dea:	709a      	strb	r2, [r3, #2]
 8011dec:	2200      	movs	r2, #0
 8011dee:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011df0:	69fb      	ldr	r3, [r7, #28]
 8011df2:	895b      	ldrh	r3, [r3, #10]
 8011df4:	4619      	mov	r1, r3
 8011df6:	6978      	ldr	r0, [r7, #20]
 8011df8:	f000 f87d 	bl	8011ef6 <inet_chksum>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	461a      	mov	r2, r3
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011e04:	f107 020c 	add.w	r2, r7, #12
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	9302      	str	r3, [sp, #8]
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	9301      	str	r3, [sp, #4]
 8011e10:	2300      	movs	r3, #0
 8011e12:	9300      	str	r3, [sp, #0]
 8011e14:	23ff      	movs	r3, #255	; 0xff
 8011e16:	2100      	movs	r1, #0
 8011e18:	69f8      	ldr	r0, [r7, #28]
 8011e1a:	f000 faa1 	bl	8012360 <ip4_output_if>
  }
  pbuf_free(q);
 8011e1e:	69f8      	ldr	r0, [r7, #28]
 8011e20:	f002 ff64 	bl	8014cec <pbuf_free>
 8011e24:	e000      	b.n	8011e28 <icmp_send_response+0xd4>
    return;
 8011e26:	bf00      	nop
}
 8011e28:	3720      	adds	r7, #32
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	08024ef4 	.word	0x08024ef4
 8011e34:	08024fdc 	.word	0x08024fdc
 8011e38:	08024f80 	.word	0x08024f80

08011e3c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b089      	sub	sp, #36	; 0x24
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8011e52:	69fb      	ldr	r3, [r7, #28]
 8011e54:	f003 0301 	and.w	r3, r3, #1
 8011e58:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d00d      	beq.n	8011e7c <lwip_standard_chksum+0x40>
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	dd0a      	ble.n	8011e7c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8011e66:	69fa      	ldr	r2, [r7, #28]
 8011e68:	1c53      	adds	r3, r2, #1
 8011e6a:	61fb      	str	r3, [r7, #28]
 8011e6c:	f107 030e 	add.w	r3, r7, #14
 8011e70:	3301      	adds	r3, #1
 8011e72:	7812      	ldrb	r2, [r2, #0]
 8011e74:	701a      	strb	r2, [r3, #0]
    len--;
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	3b01      	subs	r3, #1
 8011e7a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8011e80:	e00a      	b.n	8011e98 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8011e82:	69bb      	ldr	r3, [r7, #24]
 8011e84:	1c9a      	adds	r2, r3, #2
 8011e86:	61ba      	str	r2, [r7, #24]
 8011e88:	881b      	ldrh	r3, [r3, #0]
 8011e8a:	461a      	mov	r2, r3
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	4413      	add	r3, r2
 8011e90:	617b      	str	r3, [r7, #20]
    len -= 2;
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	3b02      	subs	r3, #2
 8011e96:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	2b01      	cmp	r3, #1
 8011e9c:	dcf1      	bgt.n	8011e82 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	dd04      	ble.n	8011eae <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8011ea4:	f107 030e 	add.w	r3, r7, #14
 8011ea8:	69ba      	ldr	r2, [r7, #24]
 8011eaa:	7812      	ldrb	r2, [r2, #0]
 8011eac:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8011eae:	89fb      	ldrh	r3, [r7, #14]
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	4413      	add	r3, r2
 8011eb6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	0c1a      	lsrs	r2, r3, #16
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	4413      	add	r3, r2
 8011ec2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	0c1a      	lsrs	r2, r3, #16
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	b29b      	uxth	r3, r3
 8011ecc:	4413      	add	r3, r2
 8011ece:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d007      	beq.n	8011ee6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	021b      	lsls	r3, r3, #8
 8011eda:	b29a      	uxth	r2, r3
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	0a1b      	lsrs	r3, r3, #8
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	4313      	orrs	r3, r2
 8011ee4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	b29b      	uxth	r3, r3
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3724      	adds	r7, #36	; 0x24
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef4:	4770      	bx	lr

08011ef6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8011ef6:	b580      	push	{r7, lr}
 8011ef8:	b082      	sub	sp, #8
 8011efa:	af00      	add	r7, sp, #0
 8011efc:	6078      	str	r0, [r7, #4]
 8011efe:	460b      	mov	r3, r1
 8011f00:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8011f02:	887b      	ldrh	r3, [r7, #2]
 8011f04:	4619      	mov	r1, r3
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f7ff ff98 	bl	8011e3c <lwip_standard_chksum>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	43db      	mvns	r3, r3
 8011f10:	b29b      	uxth	r3, r3
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3708      	adds	r7, #8
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}

08011f1a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8011f1a:	b580      	push	{r7, lr}
 8011f1c:	b086      	sub	sp, #24
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8011f22:	2300      	movs	r3, #0
 8011f24:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8011f26:	2300      	movs	r3, #0
 8011f28:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	613b      	str	r3, [r7, #16]
 8011f2e:	e02b      	b.n	8011f88 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	685a      	ldr	r2, [r3, #4]
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	895b      	ldrh	r3, [r3, #10]
 8011f38:	4619      	mov	r1, r3
 8011f3a:	4610      	mov	r0, r2
 8011f3c:	f7ff ff7e 	bl	8011e3c <lwip_standard_chksum>
 8011f40:	4603      	mov	r3, r0
 8011f42:	461a      	mov	r2, r3
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	4413      	add	r3, r2
 8011f48:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8011f4a:	697b      	ldr	r3, [r7, #20]
 8011f4c:	0c1a      	lsrs	r2, r3, #16
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	4413      	add	r3, r2
 8011f54:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	895b      	ldrh	r3, [r3, #10]
 8011f5a:	f003 0301 	and.w	r3, r3, #1
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d00e      	beq.n	8011f82 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	bf0c      	ite	eq
 8011f6a:	2301      	moveq	r3, #1
 8011f6c:	2300      	movne	r3, #0
 8011f6e:	b2db      	uxtb	r3, r3
 8011f70:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	021b      	lsls	r3, r3, #8
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	0a1b      	lsrs	r3, r3, #8
 8011f7c:	b2db      	uxtb	r3, r3
 8011f7e:	4313      	orrs	r3, r2
 8011f80:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	613b      	str	r3, [r7, #16]
 8011f88:	693b      	ldr	r3, [r7, #16]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d1d0      	bne.n	8011f30 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d007      	beq.n	8011fa4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	021b      	lsls	r3, r3, #8
 8011f98:	b29a      	uxth	r2, r3
 8011f9a:	697b      	ldr	r3, [r7, #20]
 8011f9c:	0a1b      	lsrs	r3, r3, #8
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	4313      	orrs	r3, r2
 8011fa2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	43db      	mvns	r3, r3
 8011faa:	b29b      	uxth	r3, r3
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	3718      	adds	r7, #24
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8011fbe:	f003 ffa1 	bl	8015f04 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011fc2:	f001 fb13 	bl	80135ec <mem_init>
  memp_init();
 8011fc6:	f001 fe77 	bl	8013cb8 <memp_init>
  pbuf_init();
  netif_init();
 8011fca:	f002 f815 	bl	8013ff8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8011fce:	f00a fb8d 	bl	801c6ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011fd2:	f004 f821 	bl	8016018 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011fd6:	f00a facf 	bl	801c578 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011fda:	bf00      	nop
 8011fdc:	3708      	adds	r7, #8
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
	...

08011fe4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	b085      	sub	sp, #20
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011fec:	4b33      	ldr	r3, [pc, #204]	; (80120bc <ip4_route+0xd8>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	60fb      	str	r3, [r7, #12]
 8011ff2:	e036      	b.n	8012062 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011ffa:	f003 0301 	and.w	r3, r3, #1
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	2b00      	cmp	r3, #0
 8012002:	d02b      	beq.n	801205c <ip4_route+0x78>
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801200a:	089b      	lsrs	r3, r3, #2
 801200c:	f003 0301 	and.w	r3, r3, #1
 8012010:	b2db      	uxtb	r3, r3
 8012012:	2b00      	cmp	r3, #0
 8012014:	d022      	beq.n	801205c <ip4_route+0x78>
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	3304      	adds	r3, #4
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d01d      	beq.n	801205c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	3304      	adds	r3, #4
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	405a      	eors	r2, r3
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	3308      	adds	r3, #8
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	4013      	ands	r3, r2
 8012034:	2b00      	cmp	r3, #0
 8012036:	d101      	bne.n	801203c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	e038      	b.n	80120ae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012042:	f003 0302 	and.w	r3, r3, #2
 8012046:	2b00      	cmp	r3, #0
 8012048:	d108      	bne.n	801205c <ip4_route+0x78>
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	330c      	adds	r3, #12
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	429a      	cmp	r2, r3
 8012056:	d101      	bne.n	801205c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	e028      	b.n	80120ae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	60fb      	str	r3, [r7, #12]
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d1c5      	bne.n	8011ff4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012068:	4b15      	ldr	r3, [pc, #84]	; (80120c0 <ip4_route+0xdc>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d01a      	beq.n	80120a6 <ip4_route+0xc2>
 8012070:	4b13      	ldr	r3, [pc, #76]	; (80120c0 <ip4_route+0xdc>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012078:	f003 0301 	and.w	r3, r3, #1
 801207c:	2b00      	cmp	r3, #0
 801207e:	d012      	beq.n	80120a6 <ip4_route+0xc2>
 8012080:	4b0f      	ldr	r3, [pc, #60]	; (80120c0 <ip4_route+0xdc>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012088:	f003 0304 	and.w	r3, r3, #4
 801208c:	2b00      	cmp	r3, #0
 801208e:	d00a      	beq.n	80120a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012090:	4b0b      	ldr	r3, [pc, #44]	; (80120c0 <ip4_route+0xdc>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	3304      	adds	r3, #4
 8012096:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012098:	2b00      	cmp	r3, #0
 801209a:	d004      	beq.n	80120a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	b2db      	uxtb	r3, r3
 80120a2:	2b7f      	cmp	r3, #127	; 0x7f
 80120a4:	d101      	bne.n	80120aa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80120a6:	2300      	movs	r3, #0
 80120a8:	e001      	b.n	80120ae <ip4_route+0xca>
  }

  return netif_default;
 80120aa:	4b05      	ldr	r3, [pc, #20]	; (80120c0 <ip4_route+0xdc>)
 80120ac:	681b      	ldr	r3, [r3, #0]
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	3714      	adds	r7, #20
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr
 80120ba:	bf00      	nop
 80120bc:	2400d234 	.word	0x2400d234
 80120c0:	2400d238 	.word	0x2400d238

080120c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80120d2:	f003 0301 	and.w	r3, r3, #1
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d016      	beq.n	801210a <ip4_input_accept+0x46>
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	3304      	adds	r3, #4
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d011      	beq.n	801210a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80120e6:	4b0b      	ldr	r3, [pc, #44]	; (8012114 <ip4_input_accept+0x50>)
 80120e8:	695a      	ldr	r2, [r3, #20]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	3304      	adds	r3, #4
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d008      	beq.n	8012106 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80120f4:	4b07      	ldr	r3, [pc, #28]	; (8012114 <ip4_input_accept+0x50>)
 80120f6:	695b      	ldr	r3, [r3, #20]
 80120f8:	6879      	ldr	r1, [r7, #4]
 80120fa:	4618      	mov	r0, r3
 80120fc:	f000 fa08 	bl	8012510 <ip4_addr_isbroadcast_u32>
 8012100:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012102:	2b00      	cmp	r3, #0
 8012104:	d001      	beq.n	801210a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012106:	2301      	movs	r3, #1
 8012108:	e000      	b.n	801210c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801210a:	2300      	movs	r3, #0
}
 801210c:	4618      	mov	r0, r3
 801210e:	3708      	adds	r7, #8
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}
 8012114:	2400a184 	.word	0x2400a184

08012118 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b086      	sub	sp, #24
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	091b      	lsrs	r3, r3, #4
 801212e:	b2db      	uxtb	r3, r3
 8012130:	2b04      	cmp	r3, #4
 8012132:	d004      	beq.n	801213e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f002 fdd9 	bl	8014cec <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801213a:	2300      	movs	r3, #0
 801213c:	e107      	b.n	801234e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	f003 030f 	and.w	r3, r3, #15
 8012146:	b2db      	uxtb	r3, r3
 8012148:	009b      	lsls	r3, r3, #2
 801214a:	b2db      	uxtb	r3, r3
 801214c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	885b      	ldrh	r3, [r3, #2]
 8012152:	b29b      	uxth	r3, r3
 8012154:	4618      	mov	r0, r3
 8012156:	f7fe fc4f 	bl	80109f8 <lwip_htons>
 801215a:	4603      	mov	r3, r0
 801215c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	891b      	ldrh	r3, [r3, #8]
 8012162:	89ba      	ldrh	r2, [r7, #12]
 8012164:	429a      	cmp	r2, r3
 8012166:	d204      	bcs.n	8012172 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012168:	89bb      	ldrh	r3, [r7, #12]
 801216a:	4619      	mov	r1, r3
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f002 fc37 	bl	80149e0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	895b      	ldrh	r3, [r3, #10]
 8012176:	89fa      	ldrh	r2, [r7, #14]
 8012178:	429a      	cmp	r2, r3
 801217a:	d807      	bhi.n	801218c <ip4_input+0x74>
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	891b      	ldrh	r3, [r3, #8]
 8012180:	89ba      	ldrh	r2, [r7, #12]
 8012182:	429a      	cmp	r2, r3
 8012184:	d802      	bhi.n	801218c <ip4_input+0x74>
 8012186:	89fb      	ldrh	r3, [r7, #14]
 8012188:	2b13      	cmp	r3, #19
 801218a:	d804      	bhi.n	8012196 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f002 fdad 	bl	8014cec <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012192:	2300      	movs	r3, #0
 8012194:	e0db      	b.n	801234e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	691b      	ldr	r3, [r3, #16]
 801219a:	4a6f      	ldr	r2, [pc, #444]	; (8012358 <ip4_input+0x240>)
 801219c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	68db      	ldr	r3, [r3, #12]
 80121a2:	4a6d      	ldr	r2, [pc, #436]	; (8012358 <ip4_input+0x240>)
 80121a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80121a6:	4b6c      	ldr	r3, [pc, #432]	; (8012358 <ip4_input+0x240>)
 80121a8:	695b      	ldr	r3, [r3, #20]
 80121aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80121ae:	2be0      	cmp	r3, #224	; 0xe0
 80121b0:	d112      	bne.n	80121d8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80121b8:	f003 0301 	and.w	r3, r3, #1
 80121bc:	b2db      	uxtb	r3, r3
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d007      	beq.n	80121d2 <ip4_input+0xba>
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	3304      	adds	r3, #4
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d002      	beq.n	80121d2 <ip4_input+0xba>
      netif = inp;
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	613b      	str	r3, [r7, #16]
 80121d0:	e02a      	b.n	8012228 <ip4_input+0x110>
    } else {
      netif = NULL;
 80121d2:	2300      	movs	r3, #0
 80121d4:	613b      	str	r3, [r7, #16]
 80121d6:	e027      	b.n	8012228 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80121d8:	6838      	ldr	r0, [r7, #0]
 80121da:	f7ff ff73 	bl	80120c4 <ip4_input_accept>
 80121de:	4603      	mov	r3, r0
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d002      	beq.n	80121ea <ip4_input+0xd2>
      netif = inp;
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	613b      	str	r3, [r7, #16]
 80121e8:	e01e      	b.n	8012228 <ip4_input+0x110>
    } else {
      netif = NULL;
 80121ea:	2300      	movs	r3, #0
 80121ec:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80121ee:	4b5a      	ldr	r3, [pc, #360]	; (8012358 <ip4_input+0x240>)
 80121f0:	695b      	ldr	r3, [r3, #20]
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	2b7f      	cmp	r3, #127	; 0x7f
 80121f6:	d017      	beq.n	8012228 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80121f8:	4b58      	ldr	r3, [pc, #352]	; (801235c <ip4_input+0x244>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	613b      	str	r3, [r7, #16]
 80121fe:	e00e      	b.n	801221e <ip4_input+0x106>
          if (netif == inp) {
 8012200:	693a      	ldr	r2, [r7, #16]
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	429a      	cmp	r2, r3
 8012206:	d006      	beq.n	8012216 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012208:	6938      	ldr	r0, [r7, #16]
 801220a:	f7ff ff5b 	bl	80120c4 <ip4_input_accept>
 801220e:	4603      	mov	r3, r0
 8012210:	2b00      	cmp	r3, #0
 8012212:	d108      	bne.n	8012226 <ip4_input+0x10e>
 8012214:	e000      	b.n	8012218 <ip4_input+0x100>
            continue;
 8012216:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	613b      	str	r3, [r7, #16]
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d1ed      	bne.n	8012200 <ip4_input+0xe8>
 8012224:	e000      	b.n	8012228 <ip4_input+0x110>
            break;
 8012226:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012228:	4b4b      	ldr	r3, [pc, #300]	; (8012358 <ip4_input+0x240>)
 801222a:	691b      	ldr	r3, [r3, #16]
 801222c:	6839      	ldr	r1, [r7, #0]
 801222e:	4618      	mov	r0, r3
 8012230:	f000 f96e 	bl	8012510 <ip4_addr_isbroadcast_u32>
 8012234:	4603      	mov	r3, r0
 8012236:	2b00      	cmp	r3, #0
 8012238:	d105      	bne.n	8012246 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801223a:	4b47      	ldr	r3, [pc, #284]	; (8012358 <ip4_input+0x240>)
 801223c:	691b      	ldr	r3, [r3, #16]
 801223e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012242:	2be0      	cmp	r3, #224	; 0xe0
 8012244:	d104      	bne.n	8012250 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f002 fd50 	bl	8014cec <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801224c:	2300      	movs	r3, #0
 801224e:	e07e      	b.n	801234e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d104      	bne.n	8012260 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f002 fd48 	bl	8014cec <pbuf_free>
    return ERR_OK;
 801225c:	2300      	movs	r3, #0
 801225e:	e076      	b.n	801234e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	88db      	ldrh	r3, [r3, #6]
 8012264:	b29b      	uxth	r3, r3
 8012266:	461a      	mov	r2, r3
 8012268:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801226c:	4013      	ands	r3, r2
 801226e:	2b00      	cmp	r3, #0
 8012270:	d00b      	beq.n	801228a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f000 fdbc 	bl	8012df0 <ip4_reass>
 8012278:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d101      	bne.n	8012284 <ip4_input+0x16c>
      return ERR_OK;
 8012280:	2300      	movs	r3, #0
 8012282:	e064      	b.n	801234e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801228a:	4a33      	ldr	r2, [pc, #204]	; (8012358 <ip4_input+0x240>)
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012290:	4a31      	ldr	r2, [pc, #196]	; (8012358 <ip4_input+0x240>)
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012296:	4a30      	ldr	r2, [pc, #192]	; (8012358 <ip4_input+0x240>)
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	f003 030f 	and.w	r3, r3, #15
 80122a4:	b2db      	uxtb	r3, r3
 80122a6:	009b      	lsls	r3, r3, #2
 80122a8:	b2db      	uxtb	r3, r3
 80122aa:	b29a      	uxth	r2, r3
 80122ac:	4b2a      	ldr	r3, [pc, #168]	; (8012358 <ip4_input+0x240>)
 80122ae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80122b0:	89fb      	ldrh	r3, [r7, #14]
 80122b2:	4619      	mov	r1, r3
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f002 fc93 	bl	8014be0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	7a5b      	ldrb	r3, [r3, #9]
 80122be:	2b11      	cmp	r3, #17
 80122c0:	d006      	beq.n	80122d0 <ip4_input+0x1b8>
 80122c2:	2b11      	cmp	r3, #17
 80122c4:	dc13      	bgt.n	80122ee <ip4_input+0x1d6>
 80122c6:	2b01      	cmp	r3, #1
 80122c8:	d00c      	beq.n	80122e4 <ip4_input+0x1cc>
 80122ca:	2b06      	cmp	r3, #6
 80122cc:	d005      	beq.n	80122da <ip4_input+0x1c2>
 80122ce:	e00e      	b.n	80122ee <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80122d0:	6839      	ldr	r1, [r7, #0]
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f00a fab8 	bl	801c848 <udp_input>
        break;
 80122d8:	e026      	b.n	8012328 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80122da:	6839      	ldr	r1, [r7, #0]
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f005 fcbd 	bl	8017c5c <tcp_input>
        break;
 80122e2:	e021      	b.n	8012328 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80122e4:	6839      	ldr	r1, [r7, #0]
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f7ff fbf4 	bl	8011ad4 <icmp_input>
        break;
 80122ec:	e01c      	b.n	8012328 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80122ee:	4b1a      	ldr	r3, [pc, #104]	; (8012358 <ip4_input+0x240>)
 80122f0:	695b      	ldr	r3, [r3, #20]
 80122f2:	6939      	ldr	r1, [r7, #16]
 80122f4:	4618      	mov	r0, r3
 80122f6:	f000 f90b 	bl	8012510 <ip4_addr_isbroadcast_u32>
 80122fa:	4603      	mov	r3, r0
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d10f      	bne.n	8012320 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012300:	4b15      	ldr	r3, [pc, #84]	; (8012358 <ip4_input+0x240>)
 8012302:	695b      	ldr	r3, [r3, #20]
 8012304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012308:	2be0      	cmp	r3, #224	; 0xe0
 801230a:	d009      	beq.n	8012320 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801230c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012310:	4619      	mov	r1, r3
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f002 fcd7 	bl	8014cc6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012318:	2102      	movs	r1, #2
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f7ff fcfa 	bl	8011d14 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f002 fce3 	bl	8014cec <pbuf_free>
        break;
 8012326:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012328:	4b0b      	ldr	r3, [pc, #44]	; (8012358 <ip4_input+0x240>)
 801232a:	2200      	movs	r2, #0
 801232c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801232e:	4b0a      	ldr	r3, [pc, #40]	; (8012358 <ip4_input+0x240>)
 8012330:	2200      	movs	r2, #0
 8012332:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012334:	4b08      	ldr	r3, [pc, #32]	; (8012358 <ip4_input+0x240>)
 8012336:	2200      	movs	r2, #0
 8012338:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801233a:	4b07      	ldr	r3, [pc, #28]	; (8012358 <ip4_input+0x240>)
 801233c:	2200      	movs	r2, #0
 801233e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012340:	4b05      	ldr	r3, [pc, #20]	; (8012358 <ip4_input+0x240>)
 8012342:	2200      	movs	r2, #0
 8012344:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012346:	4b04      	ldr	r3, [pc, #16]	; (8012358 <ip4_input+0x240>)
 8012348:	2200      	movs	r2, #0
 801234a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801234c:	2300      	movs	r3, #0
}
 801234e:	4618      	mov	r0, r3
 8012350:	3718      	adds	r7, #24
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	2400a184 	.word	0x2400a184
 801235c:	2400d234 	.word	0x2400d234

08012360 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b08a      	sub	sp, #40	; 0x28
 8012364:	af04      	add	r7, sp, #16
 8012366:	60f8      	str	r0, [r7, #12]
 8012368:	60b9      	str	r1, [r7, #8]
 801236a:	607a      	str	r2, [r7, #4]
 801236c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d009      	beq.n	801238c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d003      	beq.n	8012386 <ip4_output_if+0x26>
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d102      	bne.n	801238c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012388:	3304      	adds	r3, #4
 801238a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801238c:	78fa      	ldrb	r2, [r7, #3]
 801238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012390:	9302      	str	r3, [sp, #8]
 8012392:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012396:	9301      	str	r3, [sp, #4]
 8012398:	f897 3020 	ldrb.w	r3, [r7, #32]
 801239c:	9300      	str	r3, [sp, #0]
 801239e:	4613      	mov	r3, r2
 80123a0:	687a      	ldr	r2, [r7, #4]
 80123a2:	6979      	ldr	r1, [r7, #20]
 80123a4:	68f8      	ldr	r0, [r7, #12]
 80123a6:	f000 f805 	bl	80123b4 <ip4_output_if_src>
 80123aa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3718      	adds	r7, #24
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b088      	sub	sp, #32
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	60f8      	str	r0, [r7, #12]
 80123bc:	60b9      	str	r1, [r7, #8]
 80123be:	607a      	str	r2, [r7, #4]
 80123c0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	7b9b      	ldrb	r3, [r3, #14]
 80123c6:	2b01      	cmp	r3, #1
 80123c8:	d006      	beq.n	80123d8 <ip4_output_if_src+0x24>
 80123ca:	4b4b      	ldr	r3, [pc, #300]	; (80124f8 <ip4_output_if_src+0x144>)
 80123cc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80123d0:	494a      	ldr	r1, [pc, #296]	; (80124fc <ip4_output_if_src+0x148>)
 80123d2:	484b      	ldr	r0, [pc, #300]	; (8012500 <ip4_output_if_src+0x14c>)
 80123d4:	f00f fca2 	bl	8021d1c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d060      	beq.n	80124a0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80123de:	2314      	movs	r3, #20
 80123e0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80123e2:	2114      	movs	r1, #20
 80123e4:	68f8      	ldr	r0, [r7, #12]
 80123e6:	f002 fbeb 	bl	8014bc0 <pbuf_add_header>
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d002      	beq.n	80123f6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80123f0:	f06f 0301 	mvn.w	r3, #1
 80123f4:	e07c      	b.n	80124f0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	685b      	ldr	r3, [r3, #4]
 80123fa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	895b      	ldrh	r3, [r3, #10]
 8012400:	2b13      	cmp	r3, #19
 8012402:	d806      	bhi.n	8012412 <ip4_output_if_src+0x5e>
 8012404:	4b3c      	ldr	r3, [pc, #240]	; (80124f8 <ip4_output_if_src+0x144>)
 8012406:	f44f 7262 	mov.w	r2, #904	; 0x388
 801240a:	493e      	ldr	r1, [pc, #248]	; (8012504 <ip4_output_if_src+0x150>)
 801240c:	483c      	ldr	r0, [pc, #240]	; (8012500 <ip4_output_if_src+0x14c>)
 801240e:	f00f fc85 	bl	8021d1c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012412:	69fb      	ldr	r3, [r7, #28]
 8012414:	78fa      	ldrb	r2, [r7, #3]
 8012416:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012418:	69fb      	ldr	r3, [r7, #28]
 801241a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801241e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681a      	ldr	r2, [r3, #0]
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012428:	8b7b      	ldrh	r3, [r7, #26]
 801242a:	089b      	lsrs	r3, r3, #2
 801242c:	b29b      	uxth	r3, r3
 801242e:	b2db      	uxtb	r3, r3
 8012430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012434:	b2da      	uxtb	r2, r3
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012440:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	891b      	ldrh	r3, [r3, #8]
 8012446:	4618      	mov	r0, r3
 8012448:	f7fe fad6 	bl	80109f8 <lwip_htons>
 801244c:	4603      	mov	r3, r0
 801244e:	461a      	mov	r2, r3
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012454:	69fb      	ldr	r3, [r7, #28]
 8012456:	2200      	movs	r2, #0
 8012458:	719a      	strb	r2, [r3, #6]
 801245a:	2200      	movs	r2, #0
 801245c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801245e:	4b2a      	ldr	r3, [pc, #168]	; (8012508 <ip4_output_if_src+0x154>)
 8012460:	881b      	ldrh	r3, [r3, #0]
 8012462:	4618      	mov	r0, r3
 8012464:	f7fe fac8 	bl	80109f8 <lwip_htons>
 8012468:	4603      	mov	r3, r0
 801246a:	461a      	mov	r2, r3
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012470:	4b25      	ldr	r3, [pc, #148]	; (8012508 <ip4_output_if_src+0x154>)
 8012472:	881b      	ldrh	r3, [r3, #0]
 8012474:	3301      	adds	r3, #1
 8012476:	b29a      	uxth	r2, r3
 8012478:	4b23      	ldr	r3, [pc, #140]	; (8012508 <ip4_output_if_src+0x154>)
 801247a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d104      	bne.n	801248c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012482:	4b22      	ldr	r3, [pc, #136]	; (801250c <ip4_output_if_src+0x158>)
 8012484:	681a      	ldr	r2, [r3, #0]
 8012486:	69fb      	ldr	r3, [r7, #28]
 8012488:	60da      	str	r2, [r3, #12]
 801248a:	e003      	b.n	8012494 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801248c:	68bb      	ldr	r3, [r7, #8]
 801248e:	681a      	ldr	r2, [r3, #0]
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	2200      	movs	r2, #0
 8012498:	729a      	strb	r2, [r3, #10]
 801249a:	2200      	movs	r2, #0
 801249c:	72da      	strb	r2, [r3, #11]
 801249e:	e00f      	b.n	80124c0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	895b      	ldrh	r3, [r3, #10]
 80124a4:	2b13      	cmp	r3, #19
 80124a6:	d802      	bhi.n	80124ae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80124a8:	f06f 0301 	mvn.w	r3, #1
 80124ac:	e020      	b.n	80124f0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80124b4:	69fb      	ldr	r3, [r7, #28]
 80124b6:	691b      	ldr	r3, [r3, #16]
 80124b8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80124ba:	f107 0314 	add.w	r3, r7, #20
 80124be:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80124c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d00c      	beq.n	80124e2 <ip4_output_if_src+0x12e>
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	891a      	ldrh	r2, [r3, #8]
 80124cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d906      	bls.n	80124e2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80124d4:	687a      	ldr	r2, [r7, #4]
 80124d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80124d8:	68f8      	ldr	r0, [r7, #12]
 80124da:	f000 fe77 	bl	80131cc <ip4_frag>
 80124de:	4603      	mov	r3, r0
 80124e0:	e006      	b.n	80124f0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80124e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e4:	695b      	ldr	r3, [r3, #20]
 80124e6:	687a      	ldr	r2, [r7, #4]
 80124e8:	68f9      	ldr	r1, [r7, #12]
 80124ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124ec:	4798      	blx	r3
 80124ee:	4603      	mov	r3, r0
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	3720      	adds	r7, #32
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}
 80124f8:	08025008 	.word	0x08025008
 80124fc:	0802505c 	.word	0x0802505c
 8012500:	08025068 	.word	0x08025068
 8012504:	08025090 	.word	0x08025090
 8012508:	240048c6 	.word	0x240048c6
 801250c:	0802807c 	.word	0x0802807c

08012510 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012510:	b480      	push	{r7}
 8012512:	b085      	sub	sp, #20
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012524:	d002      	beq.n	801252c <ip4_addr_isbroadcast_u32+0x1c>
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d101      	bne.n	8012530 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801252c:	2301      	movs	r3, #1
 801252e:	e02a      	b.n	8012586 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012536:	f003 0302 	and.w	r3, r3, #2
 801253a:	2b00      	cmp	r3, #0
 801253c:	d101      	bne.n	8012542 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801253e:	2300      	movs	r3, #0
 8012540:	e021      	b.n	8012586 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	3304      	adds	r3, #4
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	687a      	ldr	r2, [r7, #4]
 801254a:	429a      	cmp	r2, r3
 801254c:	d101      	bne.n	8012552 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801254e:	2300      	movs	r3, #0
 8012550:	e019      	b.n	8012586 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012552:	68fa      	ldr	r2, [r7, #12]
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	3304      	adds	r3, #4
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	405a      	eors	r2, r3
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	3308      	adds	r3, #8
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	4013      	ands	r3, r2
 8012564:	2b00      	cmp	r3, #0
 8012566:	d10d      	bne.n	8012584 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	3308      	adds	r3, #8
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	43da      	mvns	r2, r3
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	3308      	adds	r3, #8
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801257c:	429a      	cmp	r2, r3
 801257e:	d101      	bne.n	8012584 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012580:	2301      	movs	r3, #1
 8012582:	e000      	b.n	8012586 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012584:	2300      	movs	r3, #0
  }
}
 8012586:	4618      	mov	r0, r3
 8012588:	3714      	adds	r7, #20
 801258a:	46bd      	mov	sp, r7
 801258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012590:	4770      	bx	lr
	...

08012594 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b08a      	sub	sp, #40	; 0x28
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801259e:	f107 030c 	add.w	r3, r7, #12
 80125a2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80125ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80125b0:	3301      	adds	r3, #1
 80125b2:	4a89      	ldr	r2, [pc, #548]	; (80127d8 <ip4addr_aton+0x244>)
 80125b4:	4413      	add	r3, r2
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	f003 0304 	and.w	r3, r3, #4
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d101      	bne.n	80125c4 <ip4addr_aton+0x30>
      return 0;
 80125c0:	2300      	movs	r3, #0
 80125c2:	e105      	b.n	80127d0 <ip4addr_aton+0x23c>
    }
    val = 0;
 80125c4:	2300      	movs	r3, #0
 80125c6:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 80125c8:	230a      	movs	r3, #10
 80125ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 80125ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80125d2:	2b30      	cmp	r3, #48	; 0x30
 80125d4:	d11c      	bne.n	8012610 <ip4addr_aton+0x7c>
      c = *++cp;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	3301      	adds	r3, #1
 80125da:	607b      	str	r3, [r7, #4]
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	781b      	ldrb	r3, [r3, #0]
 80125e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 80125e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80125e8:	2b78      	cmp	r3, #120	; 0x78
 80125ea:	d003      	beq.n	80125f4 <ip4addr_aton+0x60>
 80125ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80125f0:	2b58      	cmp	r3, #88	; 0x58
 80125f2:	d10a      	bne.n	801260a <ip4addr_aton+0x76>
        base = 16;
 80125f4:	2310      	movs	r3, #16
 80125f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	3301      	adds	r3, #1
 80125fe:	607b      	str	r3, [r7, #4]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8012608:	e002      	b.n	8012610 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801260a:	2308      	movs	r3, #8
 801260c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8012610:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012614:	3301      	adds	r3, #1
 8012616:	4a70      	ldr	r2, [pc, #448]	; (80127d8 <ip4addr_aton+0x244>)
 8012618:	4413      	add	r3, r2
 801261a:	781b      	ldrb	r3, [r3, #0]
 801261c:	f003 0304 	and.w	r3, r3, #4
 8012620:	2b00      	cmp	r3, #0
 8012622:	d011      	beq.n	8012648 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8012624:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801262a:	fb02 f203 	mul.w	r2, r2, r3
 801262e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012632:	4413      	add	r3, r2
 8012634:	3b30      	subs	r3, #48	; 0x30
 8012636:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	3301      	adds	r3, #1
 801263c:	607b      	str	r3, [r7, #4]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8012646:	e7e3      	b.n	8012610 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8012648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801264c:	2b10      	cmp	r3, #16
 801264e:	d127      	bne.n	80126a0 <ip4addr_aton+0x10c>
 8012650:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012654:	3301      	adds	r3, #1
 8012656:	4a60      	ldr	r2, [pc, #384]	; (80127d8 <ip4addr_aton+0x244>)
 8012658:	4413      	add	r3, r2
 801265a:	781b      	ldrb	r3, [r3, #0]
 801265c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012660:	2b00      	cmp	r3, #0
 8012662:	d01d      	beq.n	80126a0 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8012664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012666:	011b      	lsls	r3, r3, #4
 8012668:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801266c:	f102 010a 	add.w	r1, r2, #10
 8012670:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012674:	3201      	adds	r2, #1
 8012676:	4858      	ldr	r0, [pc, #352]	; (80127d8 <ip4addr_aton+0x244>)
 8012678:	4402      	add	r2, r0
 801267a:	7812      	ldrb	r2, [r2, #0]
 801267c:	f002 0203 	and.w	r2, r2, #3
 8012680:	2a02      	cmp	r2, #2
 8012682:	d101      	bne.n	8012688 <ip4addr_aton+0xf4>
 8012684:	2261      	movs	r2, #97	; 0x61
 8012686:	e000      	b.n	801268a <ip4addr_aton+0xf6>
 8012688:	2241      	movs	r2, #65	; 0x41
 801268a:	1a8a      	subs	r2, r1, r2
 801268c:	4313      	orrs	r3, r2
 801268e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	3301      	adds	r3, #1
 8012694:	607b      	str	r3, [r7, #4]
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	781b      	ldrb	r3, [r3, #0]
 801269a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801269e:	e7b7      	b.n	8012610 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 80126a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80126a4:	2b2e      	cmp	r3, #46	; 0x2e
 80126a6:	d114      	bne.n	80126d2 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80126a8:	f107 030c 	add.w	r3, r7, #12
 80126ac:	330c      	adds	r3, #12
 80126ae:	69fa      	ldr	r2, [r7, #28]
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d301      	bcc.n	80126b8 <ip4addr_aton+0x124>
        return 0;
 80126b4:	2300      	movs	r3, #0
 80126b6:	e08b      	b.n	80127d0 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 80126b8:	69fb      	ldr	r3, [r7, #28]
 80126ba:	1d1a      	adds	r2, r3, #4
 80126bc:	61fa      	str	r2, [r7, #28]
 80126be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126c0:	601a      	str	r2, [r3, #0]
      c = *++cp;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	3301      	adds	r3, #1
 80126c6:	607b      	str	r3, [r7, #4]
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	781b      	ldrb	r3, [r3, #0]
 80126cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 80126d0:	e76c      	b.n	80125ac <ip4addr_aton+0x18>
    } else {
      break;
 80126d2:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 80126d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00b      	beq.n	80126f4 <ip4addr_aton+0x160>
 80126dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80126e0:	3301      	adds	r3, #1
 80126e2:	4a3d      	ldr	r2, [pc, #244]	; (80127d8 <ip4addr_aton+0x244>)
 80126e4:	4413      	add	r3, r2
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	f003 0308 	and.w	r3, r3, #8
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d101      	bne.n	80126f4 <ip4addr_aton+0x160>
    return 0;
 80126f0:	2300      	movs	r3, #0
 80126f2:	e06d      	b.n	80127d0 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 80126f4:	f107 030c 	add.w	r3, r7, #12
 80126f8:	69fa      	ldr	r2, [r7, #28]
 80126fa:	1ad3      	subs	r3, r2, r3
 80126fc:	109b      	asrs	r3, r3, #2
 80126fe:	3301      	adds	r3, #1
 8012700:	2b04      	cmp	r3, #4
 8012702:	d853      	bhi.n	80127ac <ip4addr_aton+0x218>
 8012704:	a201      	add	r2, pc, #4	; (adr r2, 801270c <ip4addr_aton+0x178>)
 8012706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801270a:	bf00      	nop
 801270c:	08012721 	.word	0x08012721
 8012710:	080127bb 	.word	0x080127bb
 8012714:	08012725 	.word	0x08012725
 8012718:	08012747 	.word	0x08012747
 801271c:	08012775 	.word	0x08012775

    case 0:
      return 0;       /* initial nondigit */
 8012720:	2300      	movs	r3, #0
 8012722:	e055      	b.n	80127d0 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8012724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012726:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801272a:	d301      	bcc.n	8012730 <ip4addr_aton+0x19c>
        return 0;
 801272c:	2300      	movs	r3, #0
 801272e:	e04f      	b.n	80127d0 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	2bff      	cmp	r3, #255	; 0xff
 8012734:	d901      	bls.n	801273a <ip4addr_aton+0x1a6>
        return 0;
 8012736:	2300      	movs	r3, #0
 8012738:	e04a      	b.n	80127d0 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	061b      	lsls	r3, r3, #24
 801273e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012740:	4313      	orrs	r3, r2
 8012742:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8012744:	e03a      	b.n	80127bc <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8012746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801274c:	d301      	bcc.n	8012752 <ip4addr_aton+0x1be>
        return 0;
 801274e:	2300      	movs	r3, #0
 8012750:	e03e      	b.n	80127d0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	2bff      	cmp	r3, #255	; 0xff
 8012756:	d802      	bhi.n	801275e <ip4addr_aton+0x1ca>
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	2bff      	cmp	r3, #255	; 0xff
 801275c:	d901      	bls.n	8012762 <ip4addr_aton+0x1ce>
        return 0;
 801275e:	2300      	movs	r3, #0
 8012760:	e036      	b.n	80127d0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	061a      	lsls	r2, r3, #24
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	041b      	lsls	r3, r3, #16
 801276a:	4313      	orrs	r3, r2
 801276c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801276e:	4313      	orrs	r3, r2
 8012770:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8012772:	e023      	b.n	80127bc <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8012774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012776:	2bff      	cmp	r3, #255	; 0xff
 8012778:	d901      	bls.n	801277e <ip4addr_aton+0x1ea>
        return 0;
 801277a:	2300      	movs	r3, #0
 801277c:	e028      	b.n	80127d0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2bff      	cmp	r3, #255	; 0xff
 8012782:	d805      	bhi.n	8012790 <ip4addr_aton+0x1fc>
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	2bff      	cmp	r3, #255	; 0xff
 8012788:	d802      	bhi.n	8012790 <ip4addr_aton+0x1fc>
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	2bff      	cmp	r3, #255	; 0xff
 801278e:	d901      	bls.n	8012794 <ip4addr_aton+0x200>
        return 0;
 8012790:	2300      	movs	r3, #0
 8012792:	e01d      	b.n	80127d0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	061a      	lsls	r2, r3, #24
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	041b      	lsls	r3, r3, #16
 801279c:	431a      	orrs	r2, r3
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	021b      	lsls	r3, r3, #8
 80127a2:	4313      	orrs	r3, r2
 80127a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127a6:	4313      	orrs	r3, r2
 80127a8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80127aa:	e007      	b.n	80127bc <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 80127ac:	4b0b      	ldr	r3, [pc, #44]	; (80127dc <ip4addr_aton+0x248>)
 80127ae:	22f9      	movs	r2, #249	; 0xf9
 80127b0:	490b      	ldr	r1, [pc, #44]	; (80127e0 <ip4addr_aton+0x24c>)
 80127b2:	480c      	ldr	r0, [pc, #48]	; (80127e4 <ip4addr_aton+0x250>)
 80127b4:	f00f fab2 	bl	8021d1c <iprintf>
      break;
 80127b8:	e000      	b.n	80127bc <ip4addr_aton+0x228>
      break;
 80127ba:	bf00      	nop
  }
  if (addr) {
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d005      	beq.n	80127ce <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80127c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127c4:	f7fe f92d 	bl	8010a22 <lwip_htonl>
 80127c8:	4602      	mov	r2, r0
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	601a      	str	r2, [r3, #0]
  }
  return 1;
 80127ce:	2301      	movs	r3, #1
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	3728      	adds	r7, #40	; 0x28
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	0802874d 	.word	0x0802874d
 80127dc:	080250c0 	.word	0x080250c0
 80127e0:	08025118 	.word	0x08025118
 80127e4:	08025124 	.word	0x08025124

080127e8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b084      	sub	sp, #16
 80127ec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80127ee:	2300      	movs	r3, #0
 80127f0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80127f2:	4b12      	ldr	r3, [pc, #72]	; (801283c <ip_reass_tmr+0x54>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80127f8:	e018      	b.n	801282c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	7fdb      	ldrb	r3, [r3, #31]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d00b      	beq.n	801281a <ip_reass_tmr+0x32>
      r->timer--;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	7fdb      	ldrb	r3, [r3, #31]
 8012806:	3b01      	subs	r3, #1
 8012808:	b2da      	uxtb	r2, r3
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	60fb      	str	r3, [r7, #12]
 8012818:	e008      	b.n	801282c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012824:	68b9      	ldr	r1, [r7, #8]
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f000 f80a 	bl	8012840 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d1e3      	bne.n	80127fa <ip_reass_tmr+0x12>
    }
  }
}
 8012832:	bf00      	nop
 8012834:	bf00      	nop
 8012836:	3710      	adds	r7, #16
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}
 801283c:	240048c8 	.word	0x240048c8

08012840 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b088      	sub	sp, #32
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801284a:	2300      	movs	r3, #0
 801284c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801284e:	683a      	ldr	r2, [r7, #0]
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	429a      	cmp	r2, r3
 8012854:	d105      	bne.n	8012862 <ip_reass_free_complete_datagram+0x22>
 8012856:	4b45      	ldr	r3, [pc, #276]	; (801296c <ip_reass_free_complete_datagram+0x12c>)
 8012858:	22ab      	movs	r2, #171	; 0xab
 801285a:	4945      	ldr	r1, [pc, #276]	; (8012970 <ip_reass_free_complete_datagram+0x130>)
 801285c:	4845      	ldr	r0, [pc, #276]	; (8012974 <ip_reass_free_complete_datagram+0x134>)
 801285e:	f00f fa5d 	bl	8021d1c <iprintf>
  if (prev != NULL) {
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d00a      	beq.n	801287e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	687a      	ldr	r2, [r7, #4]
 801286e:	429a      	cmp	r2, r3
 8012870:	d005      	beq.n	801287e <ip_reass_free_complete_datagram+0x3e>
 8012872:	4b3e      	ldr	r3, [pc, #248]	; (801296c <ip_reass_free_complete_datagram+0x12c>)
 8012874:	22ad      	movs	r2, #173	; 0xad
 8012876:	4940      	ldr	r1, [pc, #256]	; (8012978 <ip_reass_free_complete_datagram+0x138>)
 8012878:	483e      	ldr	r0, [pc, #248]	; (8012974 <ip_reass_free_complete_datagram+0x134>)
 801287a:	f00f fa4f 	bl	8021d1c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	685b      	ldr	r3, [r3, #4]
 8012882:	685b      	ldr	r3, [r3, #4]
 8012884:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012886:	697b      	ldr	r3, [r7, #20]
 8012888:	889b      	ldrh	r3, [r3, #4]
 801288a:	b29b      	uxth	r3, r3
 801288c:	2b00      	cmp	r3, #0
 801288e:	d12a      	bne.n	80128e6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801289e:	69bb      	ldr	r3, [r7, #24]
 80128a0:	6858      	ldr	r0, [r3, #4]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	3308      	adds	r3, #8
 80128a6:	2214      	movs	r2, #20
 80128a8:	4619      	mov	r1, r3
 80128aa:	f00e fdc5 	bl	8021438 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80128ae:	2101      	movs	r1, #1
 80128b0:	69b8      	ldr	r0, [r7, #24]
 80128b2:	f7ff fa3f 	bl	8011d34 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80128b6:	69b8      	ldr	r0, [r7, #24]
 80128b8:	f002 faa6 	bl	8014e08 <pbuf_clen>
 80128bc:	4603      	mov	r3, r0
 80128be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80128c0:	8bfa      	ldrh	r2, [r7, #30]
 80128c2:	8a7b      	ldrh	r3, [r7, #18]
 80128c4:	4413      	add	r3, r2
 80128c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80128ca:	db05      	blt.n	80128d8 <ip_reass_free_complete_datagram+0x98>
 80128cc:	4b27      	ldr	r3, [pc, #156]	; (801296c <ip_reass_free_complete_datagram+0x12c>)
 80128ce:	22bc      	movs	r2, #188	; 0xbc
 80128d0:	492a      	ldr	r1, [pc, #168]	; (801297c <ip_reass_free_complete_datagram+0x13c>)
 80128d2:	4828      	ldr	r0, [pc, #160]	; (8012974 <ip_reass_free_complete_datagram+0x134>)
 80128d4:	f00f fa22 	bl	8021d1c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80128d8:	8bfa      	ldrh	r2, [r7, #30]
 80128da:	8a7b      	ldrh	r3, [r7, #18]
 80128dc:	4413      	add	r3, r2
 80128de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80128e0:	69b8      	ldr	r0, [r7, #24]
 80128e2:	f002 fa03 	bl	8014cec <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80128ec:	e01f      	b.n	801292e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80128ee:	69bb      	ldr	r3, [r7, #24]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80128f4:	69bb      	ldr	r3, [r7, #24]
 80128f6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80128fe:	68f8      	ldr	r0, [r7, #12]
 8012900:	f002 fa82 	bl	8014e08 <pbuf_clen>
 8012904:	4603      	mov	r3, r0
 8012906:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012908:	8bfa      	ldrh	r2, [r7, #30]
 801290a:	8a7b      	ldrh	r3, [r7, #18]
 801290c:	4413      	add	r3, r2
 801290e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012912:	db05      	blt.n	8012920 <ip_reass_free_complete_datagram+0xe0>
 8012914:	4b15      	ldr	r3, [pc, #84]	; (801296c <ip_reass_free_complete_datagram+0x12c>)
 8012916:	22cc      	movs	r2, #204	; 0xcc
 8012918:	4918      	ldr	r1, [pc, #96]	; (801297c <ip_reass_free_complete_datagram+0x13c>)
 801291a:	4816      	ldr	r0, [pc, #88]	; (8012974 <ip_reass_free_complete_datagram+0x134>)
 801291c:	f00f f9fe 	bl	8021d1c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012920:	8bfa      	ldrh	r2, [r7, #30]
 8012922:	8a7b      	ldrh	r3, [r7, #18]
 8012924:	4413      	add	r3, r2
 8012926:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012928:	68f8      	ldr	r0, [r7, #12]
 801292a:	f002 f9df 	bl	8014cec <pbuf_free>
  while (p != NULL) {
 801292e:	69bb      	ldr	r3, [r7, #24]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d1dc      	bne.n	80128ee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012934:	6839      	ldr	r1, [r7, #0]
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f000 f8c2 	bl	8012ac0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801293c:	4b10      	ldr	r3, [pc, #64]	; (8012980 <ip_reass_free_complete_datagram+0x140>)
 801293e:	881b      	ldrh	r3, [r3, #0]
 8012940:	8bfa      	ldrh	r2, [r7, #30]
 8012942:	429a      	cmp	r2, r3
 8012944:	d905      	bls.n	8012952 <ip_reass_free_complete_datagram+0x112>
 8012946:	4b09      	ldr	r3, [pc, #36]	; (801296c <ip_reass_free_complete_datagram+0x12c>)
 8012948:	22d2      	movs	r2, #210	; 0xd2
 801294a:	490e      	ldr	r1, [pc, #56]	; (8012984 <ip_reass_free_complete_datagram+0x144>)
 801294c:	4809      	ldr	r0, [pc, #36]	; (8012974 <ip_reass_free_complete_datagram+0x134>)
 801294e:	f00f f9e5 	bl	8021d1c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012952:	4b0b      	ldr	r3, [pc, #44]	; (8012980 <ip_reass_free_complete_datagram+0x140>)
 8012954:	881a      	ldrh	r2, [r3, #0]
 8012956:	8bfb      	ldrh	r3, [r7, #30]
 8012958:	1ad3      	subs	r3, r2, r3
 801295a:	b29a      	uxth	r2, r3
 801295c:	4b08      	ldr	r3, [pc, #32]	; (8012980 <ip_reass_free_complete_datagram+0x140>)
 801295e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012960:	8bfb      	ldrh	r3, [r7, #30]
}
 8012962:	4618      	mov	r0, r3
 8012964:	3720      	adds	r7, #32
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	0802514c 	.word	0x0802514c
 8012970:	080251a4 	.word	0x080251a4
 8012974:	080251b0 	.word	0x080251b0
 8012978:	080251d8 	.word	0x080251d8
 801297c:	080251ec 	.word	0x080251ec
 8012980:	240048cc 	.word	0x240048cc
 8012984:	0802520c 	.word	0x0802520c

08012988 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b08a      	sub	sp, #40	; 0x28
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
 8012990:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012992:	2300      	movs	r3, #0
 8012994:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012996:	2300      	movs	r3, #0
 8012998:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801299a:	2300      	movs	r3, #0
 801299c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801299e:	2300      	movs	r3, #0
 80129a0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80129a2:	2300      	movs	r3, #0
 80129a4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80129a6:	4b28      	ldr	r3, [pc, #160]	; (8012a48 <ip_reass_remove_oldest_datagram+0xc0>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80129ac:	e030      	b.n	8012a10 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80129ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b0:	695a      	ldr	r2, [r3, #20]
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	68db      	ldr	r3, [r3, #12]
 80129b6:	429a      	cmp	r2, r3
 80129b8:	d10c      	bne.n	80129d4 <ip_reass_remove_oldest_datagram+0x4c>
 80129ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129bc:	699a      	ldr	r2, [r3, #24]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	691b      	ldr	r3, [r3, #16]
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d106      	bne.n	80129d4 <ip_reass_remove_oldest_datagram+0x4c>
 80129c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c8:	899a      	ldrh	r2, [r3, #12]
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	889b      	ldrh	r3, [r3, #4]
 80129ce:	b29b      	uxth	r3, r3
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d014      	beq.n	80129fe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80129d4:	693b      	ldr	r3, [r7, #16]
 80129d6:	3301      	adds	r3, #1
 80129d8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80129da:	6a3b      	ldr	r3, [r7, #32]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d104      	bne.n	80129ea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80129e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80129e4:	69fb      	ldr	r3, [r7, #28]
 80129e6:	61bb      	str	r3, [r7, #24]
 80129e8:	e009      	b.n	80129fe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80129ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ec:	7fda      	ldrb	r2, [r3, #31]
 80129ee:	6a3b      	ldr	r3, [r7, #32]
 80129f0:	7fdb      	ldrb	r3, [r3, #31]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d803      	bhi.n	80129fe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80129f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80129fa:	69fb      	ldr	r3, [r7, #28]
 80129fc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80129fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d001      	beq.n	8012a0a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a08:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d1cb      	bne.n	80129ae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012a16:	6a3b      	ldr	r3, [r7, #32]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d008      	beq.n	8012a2e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012a1c:	69b9      	ldr	r1, [r7, #24]
 8012a1e:	6a38      	ldr	r0, [r7, #32]
 8012a20:	f7ff ff0e 	bl	8012840 <ip_reass_free_complete_datagram>
 8012a24:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012a26:	697a      	ldr	r2, [r7, #20]
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	4413      	add	r3, r2
 8012a2c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012a2e:	697a      	ldr	r2, [r7, #20]
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	da02      	bge.n	8012a3c <ip_reass_remove_oldest_datagram+0xb4>
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	dcac      	bgt.n	8012996 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012a3c:	697b      	ldr	r3, [r7, #20]
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3728      	adds	r7, #40	; 0x28
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd80      	pop	{r7, pc}
 8012a46:	bf00      	nop
 8012a48:	240048c8 	.word	0x240048c8

08012a4c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b084      	sub	sp, #16
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
 8012a54:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012a56:	2004      	movs	r0, #4
 8012a58:	f001 f99c 	bl	8013d94 <memp_malloc>
 8012a5c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d110      	bne.n	8012a86 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012a64:	6839      	ldr	r1, [r7, #0]
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f7ff ff8e 	bl	8012988 <ip_reass_remove_oldest_datagram>
 8012a6c:	4602      	mov	r2, r0
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	4293      	cmp	r3, r2
 8012a72:	dc03      	bgt.n	8012a7c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012a74:	2004      	movs	r0, #4
 8012a76:	f001 f98d 	bl	8013d94 <memp_malloc>
 8012a7a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d101      	bne.n	8012a86 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012a82:	2300      	movs	r3, #0
 8012a84:	e016      	b.n	8012ab4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012a86:	2220      	movs	r2, #32
 8012a88:	2100      	movs	r1, #0
 8012a8a:	68f8      	ldr	r0, [r7, #12]
 8012a8c:	f00e fcfc 	bl	8021488 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	220f      	movs	r2, #15
 8012a94:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012a96:	4b09      	ldr	r3, [pc, #36]	; (8012abc <ip_reass_enqueue_new_datagram+0x70>)
 8012a98:	681a      	ldr	r2, [r3, #0]
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012a9e:	4a07      	ldr	r2, [pc, #28]	; (8012abc <ip_reass_enqueue_new_datagram+0x70>)
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	3308      	adds	r3, #8
 8012aa8:	2214      	movs	r2, #20
 8012aaa:	6879      	ldr	r1, [r7, #4]
 8012aac:	4618      	mov	r0, r3
 8012aae:	f00e fcc3 	bl	8021438 <memcpy>
  return ipr;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
}
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	3710      	adds	r7, #16
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd80      	pop	{r7, pc}
 8012abc:	240048c8 	.word	0x240048c8

08012ac0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b082      	sub	sp, #8
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012aca:	4b10      	ldr	r3, [pc, #64]	; (8012b0c <ip_reass_dequeue_datagram+0x4c>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	687a      	ldr	r2, [r7, #4]
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d104      	bne.n	8012ade <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	4a0c      	ldr	r2, [pc, #48]	; (8012b0c <ip_reass_dequeue_datagram+0x4c>)
 8012ada:	6013      	str	r3, [r2, #0]
 8012adc:	e00d      	b.n	8012afa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d106      	bne.n	8012af2 <ip_reass_dequeue_datagram+0x32>
 8012ae4:	4b0a      	ldr	r3, [pc, #40]	; (8012b10 <ip_reass_dequeue_datagram+0x50>)
 8012ae6:	f240 1245 	movw	r2, #325	; 0x145
 8012aea:	490a      	ldr	r1, [pc, #40]	; (8012b14 <ip_reass_dequeue_datagram+0x54>)
 8012aec:	480a      	ldr	r0, [pc, #40]	; (8012b18 <ip_reass_dequeue_datagram+0x58>)
 8012aee:	f00f f915 	bl	8021d1c <iprintf>
    prev->next = ipr->next;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681a      	ldr	r2, [r3, #0]
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012afa:	6879      	ldr	r1, [r7, #4]
 8012afc:	2004      	movs	r0, #4
 8012afe:	f001 f9bf 	bl	8013e80 <memp_free>
}
 8012b02:	bf00      	nop
 8012b04:	3708      	adds	r7, #8
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	240048c8 	.word	0x240048c8
 8012b10:	0802514c 	.word	0x0802514c
 8012b14:	08025230 	.word	0x08025230
 8012b18:	080251b0 	.word	0x080251b0

08012b1c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b08c      	sub	sp, #48	; 0x30
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	60f8      	str	r0, [r7, #12]
 8012b24:	60b9      	str	r1, [r7, #8]
 8012b26:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	685b      	ldr	r3, [r3, #4]
 8012b34:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012b36:	69fb      	ldr	r3, [r7, #28]
 8012b38:	885b      	ldrh	r3, [r3, #2]
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7fd ff5b 	bl	80109f8 <lwip_htons>
 8012b42:	4603      	mov	r3, r0
 8012b44:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012b46:	69fb      	ldr	r3, [r7, #28]
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	f003 030f 	and.w	r3, r3, #15
 8012b4e:	b2db      	uxtb	r3, r3
 8012b50:	009b      	lsls	r3, r3, #2
 8012b52:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012b54:	7e7b      	ldrb	r3, [r7, #25]
 8012b56:	b29b      	uxth	r3, r3
 8012b58:	8b7a      	ldrh	r2, [r7, #26]
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d202      	bcs.n	8012b64 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b62:	e135      	b.n	8012dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012b64:	7e7b      	ldrb	r3, [r7, #25]
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	8b7a      	ldrh	r2, [r7, #26]
 8012b6a:	1ad3      	subs	r3, r2, r3
 8012b6c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012b6e:	69fb      	ldr	r3, [r7, #28]
 8012b70:	88db      	ldrh	r3, [r3, #6]
 8012b72:	b29b      	uxth	r3, r3
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7fd ff3f 	bl	80109f8 <lwip_htons>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b80:	b29b      	uxth	r3, r3
 8012b82:	00db      	lsls	r3, r3, #3
 8012b84:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8e:	2200      	movs	r2, #0
 8012b90:	701a      	strb	r2, [r3, #0]
 8012b92:	2200      	movs	r2, #0
 8012b94:	705a      	strb	r2, [r3, #1]
 8012b96:	2200      	movs	r2, #0
 8012b98:	709a      	strb	r2, [r3, #2]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba0:	8afa      	ldrh	r2, [r7, #22]
 8012ba2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012ba4:	8afa      	ldrh	r2, [r7, #22]
 8012ba6:	8b7b      	ldrh	r3, [r7, #26]
 8012ba8:	4413      	add	r3, r2
 8012baa:	b29a      	uxth	r2, r3
 8012bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb2:	88db      	ldrh	r3, [r3, #6]
 8012bb4:	b29b      	uxth	r3, r3
 8012bb6:	8afa      	ldrh	r2, [r7, #22]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d902      	bls.n	8012bc2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012bc0:	e106      	b.n	8012dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8012bc8:	e068      	b.n	8012c9c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd2:	889b      	ldrh	r3, [r3, #4]
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	693b      	ldr	r3, [r7, #16]
 8012bd8:	889b      	ldrh	r3, [r3, #4]
 8012bda:	b29b      	uxth	r3, r3
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d235      	bcs.n	8012c4c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012be4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d020      	beq.n	8012c2e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bee:	889b      	ldrh	r3, [r3, #4]
 8012bf0:	b29a      	uxth	r2, r3
 8012bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf4:	88db      	ldrh	r3, [r3, #6]
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	429a      	cmp	r2, r3
 8012bfa:	d307      	bcc.n	8012c0c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfe:	88db      	ldrh	r3, [r3, #6]
 8012c00:	b29a      	uxth	r2, r3
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	889b      	ldrh	r3, [r3, #4]
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d902      	bls.n	8012c12 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c10:	e0de      	b.n	8012dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c14:	68ba      	ldr	r2, [r7, #8]
 8012c16:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1a:	88db      	ldrh	r3, [r3, #6]
 8012c1c:	b29a      	uxth	r2, r3
 8012c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c20:	889b      	ldrh	r3, [r3, #4]
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d03d      	beq.n	8012ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012c2c:	e03a      	b.n	8012ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c30:	88db      	ldrh	r3, [r3, #6]
 8012c32:	b29a      	uxth	r2, r3
 8012c34:	693b      	ldr	r3, [r7, #16]
 8012c36:	889b      	ldrh	r3, [r3, #4]
 8012c38:	b29b      	uxth	r3, r3
 8012c3a:	429a      	cmp	r2, r3
 8012c3c:	d902      	bls.n	8012c44 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c42:	e0c5      	b.n	8012dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	68ba      	ldr	r2, [r7, #8]
 8012c48:	605a      	str	r2, [r3, #4]
      break;
 8012c4a:	e02b      	b.n	8012ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4e:	889b      	ldrh	r3, [r3, #4]
 8012c50:	b29a      	uxth	r2, r3
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	889b      	ldrh	r3, [r3, #4]
 8012c56:	b29b      	uxth	r3, r3
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d102      	bne.n	8012c62 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c60:	e0b6      	b.n	8012dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c64:	889b      	ldrh	r3, [r3, #4]
 8012c66:	b29a      	uxth	r2, r3
 8012c68:	693b      	ldr	r3, [r7, #16]
 8012c6a:	88db      	ldrh	r3, [r3, #6]
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d202      	bcs.n	8012c78 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c76:	e0ab      	b.n	8012dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d009      	beq.n	8012c92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c80:	88db      	ldrh	r3, [r3, #6]
 8012c82:	b29a      	uxth	r2, r3
 8012c84:	693b      	ldr	r3, [r7, #16]
 8012c86:	889b      	ldrh	r3, [r3, #4]
 8012c88:	b29b      	uxth	r3, r3
 8012c8a:	429a      	cmp	r2, r3
 8012c8c:	d001      	beq.n	8012c92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d193      	bne.n	8012bca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012ca2:	e000      	b.n	8012ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012ca4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d12d      	bne.n	8012d08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d01c      	beq.n	8012cec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb4:	88db      	ldrh	r3, [r3, #6]
 8012cb6:	b29a      	uxth	r2, r3
 8012cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cba:	889b      	ldrh	r3, [r3, #4]
 8012cbc:	b29b      	uxth	r3, r3
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d906      	bls.n	8012cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012cc2:	4b45      	ldr	r3, [pc, #276]	; (8012dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012cc4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012cc8:	4944      	ldr	r1, [pc, #272]	; (8012ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012cca:	4845      	ldr	r0, [pc, #276]	; (8012de0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012ccc:	f00f f826 	bl	8021d1c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd2:	68ba      	ldr	r2, [r7, #8]
 8012cd4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd8:	88db      	ldrh	r3, [r3, #6]
 8012cda:	b29a      	uxth	r2, r3
 8012cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cde:	889b      	ldrh	r3, [r3, #4]
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	d010      	beq.n	8012d08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	623b      	str	r3, [r7, #32]
 8012cea:	e00d      	b.n	8012d08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	685b      	ldr	r3, [r3, #4]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d006      	beq.n	8012d02 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012cf4:	4b38      	ldr	r3, [pc, #224]	; (8012dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012cf6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012cfa:	493a      	ldr	r1, [pc, #232]	; (8012de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012cfc:	4838      	ldr	r0, [pc, #224]	; (8012de0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012cfe:	f00f f80d 	bl	8021d1c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	68ba      	ldr	r2, [r7, #8]
 8012d06:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d105      	bne.n	8012d1a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	7f9b      	ldrb	r3, [r3, #30]
 8012d12:	f003 0301 	and.w	r3, r3, #1
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d059      	beq.n	8012dce <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012d1a:	6a3b      	ldr	r3, [r7, #32]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d04f      	beq.n	8012dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	685b      	ldr	r3, [r3, #4]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d006      	beq.n	8012d36 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	685b      	ldr	r3, [r3, #4]
 8012d2c:	685b      	ldr	r3, [r3, #4]
 8012d2e:	889b      	ldrh	r3, [r3, #4]
 8012d30:	b29b      	uxth	r3, r3
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d002      	beq.n	8012d3c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012d36:	2300      	movs	r3, #0
 8012d38:	623b      	str	r3, [r7, #32]
 8012d3a:	e041      	b.n	8012dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d3e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012d46:	e012      	b.n	8012d6e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d50:	88db      	ldrh	r3, [r3, #6]
 8012d52:	b29a      	uxth	r2, r3
 8012d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d56:	889b      	ldrh	r3, [r3, #4]
 8012d58:	b29b      	uxth	r3, r3
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d002      	beq.n	8012d64 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012d5e:	2300      	movs	r3, #0
 8012d60:	623b      	str	r3, [r7, #32]
            break;
 8012d62:	e007      	b.n	8012d74 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d66:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d1e9      	bne.n	8012d48 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012d74:	6a3b      	ldr	r3, [r7, #32]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d022      	beq.n	8012dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d106      	bne.n	8012d90 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012d82:	4b15      	ldr	r3, [pc, #84]	; (8012dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012d84:	f240 12df 	movw	r2, #479	; 0x1df
 8012d88:	4917      	ldr	r1, [pc, #92]	; (8012de8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012d8a:	4815      	ldr	r0, [pc, #84]	; (8012de0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012d8c:	f00e ffc6 	bl	8021d1c <iprintf>
          LWIP_ASSERT("sanity check",
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	685b      	ldr	r3, [r3, #4]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d106      	bne.n	8012daa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012d9c:	4b0e      	ldr	r3, [pc, #56]	; (8012dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012d9e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012da2:	4911      	ldr	r1, [pc, #68]	; (8012de8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012da4:	480e      	ldr	r0, [pc, #56]	; (8012de0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012da6:	f00e ffb9 	bl	8021d1c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d006      	beq.n	8012dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012db2:	4b09      	ldr	r3, [pc, #36]	; (8012dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012db4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012db8:	490c      	ldr	r1, [pc, #48]	; (8012dec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012dba:	4809      	ldr	r0, [pc, #36]	; (8012de0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012dbc:	f00e ffae 	bl	8021d1c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012dc0:	6a3b      	ldr	r3, [r7, #32]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	bf14      	ite	ne
 8012dc6:	2301      	movne	r3, #1
 8012dc8:	2300      	moveq	r3, #0
 8012dca:	b2db      	uxtb	r3, r3
 8012dcc:	e000      	b.n	8012dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012dce:	2300      	movs	r3, #0
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3730      	adds	r7, #48	; 0x30
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	0802514c 	.word	0x0802514c
 8012ddc:	0802524c 	.word	0x0802524c
 8012de0:	080251b0 	.word	0x080251b0
 8012de4:	0802526c 	.word	0x0802526c
 8012de8:	080252a4 	.word	0x080252a4
 8012dec:	080252b4 	.word	0x080252b4

08012df0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b08e      	sub	sp, #56	; 0x38
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	685b      	ldr	r3, [r3, #4]
 8012dfc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	f003 030f 	and.w	r3, r3, #15
 8012e06:	b2db      	uxtb	r3, r3
 8012e08:	009b      	lsls	r3, r3, #2
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	2b14      	cmp	r3, #20
 8012e0e:	f040 8167 	bne.w	80130e0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e14:	88db      	ldrh	r3, [r3, #6]
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7fd fded 	bl	80109f8 <lwip_htons>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012e24:	b29b      	uxth	r3, r3
 8012e26:	00db      	lsls	r3, r3, #3
 8012e28:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e2c:	885b      	ldrh	r3, [r3, #2]
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7fd fde1 	bl	80109f8 <lwip_htons>
 8012e36:	4603      	mov	r3, r0
 8012e38:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	f003 030f 	and.w	r3, r3, #15
 8012e42:	b2db      	uxtb	r3, r3
 8012e44:	009b      	lsls	r3, r3, #2
 8012e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012e4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012e4e:	b29b      	uxth	r3, r3
 8012e50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012e52:	429a      	cmp	r2, r3
 8012e54:	f0c0 8146 	bcc.w	80130e4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012e58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012e5c:	b29b      	uxth	r3, r3
 8012e5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012e60:	1ad3      	subs	r3, r2, r3
 8012e62:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f001 ffcf 	bl	8014e08 <pbuf_clen>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012e6e:	4b9f      	ldr	r3, [pc, #636]	; (80130ec <ip4_reass+0x2fc>)
 8012e70:	881b      	ldrh	r3, [r3, #0]
 8012e72:	461a      	mov	r2, r3
 8012e74:	8c3b      	ldrh	r3, [r7, #32]
 8012e76:	4413      	add	r3, r2
 8012e78:	2b0a      	cmp	r3, #10
 8012e7a:	dd10      	ble.n	8012e9e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012e7c:	8c3b      	ldrh	r3, [r7, #32]
 8012e7e:	4619      	mov	r1, r3
 8012e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e82:	f7ff fd81 	bl	8012988 <ip_reass_remove_oldest_datagram>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	f000 812d 	beq.w	80130e8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012e8e:	4b97      	ldr	r3, [pc, #604]	; (80130ec <ip4_reass+0x2fc>)
 8012e90:	881b      	ldrh	r3, [r3, #0]
 8012e92:	461a      	mov	r2, r3
 8012e94:	8c3b      	ldrh	r3, [r7, #32]
 8012e96:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012e98:	2b0a      	cmp	r3, #10
 8012e9a:	f300 8125 	bgt.w	80130e8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012e9e:	4b94      	ldr	r3, [pc, #592]	; (80130f0 <ip4_reass+0x300>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	633b      	str	r3, [r7, #48]	; 0x30
 8012ea4:	e015      	b.n	8012ed2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea8:	695a      	ldr	r2, [r3, #20]
 8012eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eac:	68db      	ldr	r3, [r3, #12]
 8012eae:	429a      	cmp	r2, r3
 8012eb0:	d10c      	bne.n	8012ecc <ip4_reass+0xdc>
 8012eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eb4:	699a      	ldr	r2, [r3, #24]
 8012eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb8:	691b      	ldr	r3, [r3, #16]
 8012eba:	429a      	cmp	r2, r3
 8012ebc:	d106      	bne.n	8012ecc <ip4_reass+0xdc>
 8012ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec0:	899a      	ldrh	r2, [r3, #12]
 8012ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec4:	889b      	ldrh	r3, [r3, #4]
 8012ec6:	b29b      	uxth	r3, r3
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	d006      	beq.n	8012eda <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8012ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d1e6      	bne.n	8012ea6 <ip4_reass+0xb6>
 8012ed8:	e000      	b.n	8012edc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012eda:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d109      	bne.n	8012ef6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012ee2:	8c3b      	ldrh	r3, [r7, #32]
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ee8:	f7ff fdb0 	bl	8012a4c <ip_reass_enqueue_new_datagram>
 8012eec:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d11c      	bne.n	8012f2e <ip4_reass+0x13e>
      goto nullreturn;
 8012ef4:	e109      	b.n	801310a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef8:	88db      	ldrh	r3, [r3, #6]
 8012efa:	b29b      	uxth	r3, r3
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7fd fd7b 	bl	80109f8 <lwip_htons>
 8012f02:	4603      	mov	r3, r0
 8012f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d110      	bne.n	8012f2e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f0e:	89db      	ldrh	r3, [r3, #14]
 8012f10:	4618      	mov	r0, r3
 8012f12:	f7fd fd71 	bl	80109f8 <lwip_htons>
 8012f16:	4603      	mov	r3, r0
 8012f18:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d006      	beq.n	8012f2e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f22:	3308      	adds	r3, #8
 8012f24:	2214      	movs	r2, #20
 8012f26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f00e fa85 	bl	8021438 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f30:	88db      	ldrh	r3, [r3, #6]
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	f003 0320 	and.w	r3, r3, #32
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	bf0c      	ite	eq
 8012f3c:	2301      	moveq	r3, #1
 8012f3e:	2300      	movne	r3, #0
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d00e      	beq.n	8012f68 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012f4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f4e:	4413      	add	r3, r2
 8012f50:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012f52:	8b7a      	ldrh	r2, [r7, #26]
 8012f54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012f56:	429a      	cmp	r2, r3
 8012f58:	f0c0 80a0 	bcc.w	801309c <ip4_reass+0x2ac>
 8012f5c:	8b7b      	ldrh	r3, [r7, #26]
 8012f5e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012f62:	4293      	cmp	r3, r2
 8012f64:	f200 809a 	bhi.w	801309c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012f68:	69fa      	ldr	r2, [r7, #28]
 8012f6a:	6879      	ldr	r1, [r7, #4]
 8012f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f6e:	f7ff fdd5 	bl	8012b1c <ip_reass_chain_frag_into_datagram_and_validate>
 8012f72:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f7a:	f000 8091 	beq.w	80130a0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012f7e:	4b5b      	ldr	r3, [pc, #364]	; (80130ec <ip4_reass+0x2fc>)
 8012f80:	881a      	ldrh	r2, [r3, #0]
 8012f82:	8c3b      	ldrh	r3, [r7, #32]
 8012f84:	4413      	add	r3, r2
 8012f86:	b29a      	uxth	r2, r3
 8012f88:	4b58      	ldr	r3, [pc, #352]	; (80130ec <ip4_reass+0x2fc>)
 8012f8a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012f8c:	69fb      	ldr	r3, [r7, #28]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d00d      	beq.n	8012fae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012f92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012f94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f96:	4413      	add	r3, r2
 8012f98:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f9c:	8a7a      	ldrh	r2, [r7, #18]
 8012f9e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa2:	7f9b      	ldrb	r3, [r3, #30]
 8012fa4:	f043 0301 	orr.w	r3, r3, #1
 8012fa8:	b2da      	uxtb	r2, r3
 8012faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d171      	bne.n	8013098 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb6:	8b9b      	ldrh	r3, [r3, #28]
 8012fb8:	3314      	adds	r3, #20
 8012fba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc8:	685b      	ldr	r3, [r3, #4]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fd0:	3308      	adds	r3, #8
 8012fd2:	2214      	movs	r2, #20
 8012fd4:	4619      	mov	r1, r3
 8012fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012fd8:	f00e fa2e 	bl	8021438 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012fdc:	8a3b      	ldrh	r3, [r7, #16]
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f7fd fd0a 	bl	80109f8 <lwip_htons>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fee:	2200      	movs	r2, #0
 8012ff0:	719a      	strb	r2, [r3, #6]
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	729a      	strb	r2, [r3, #10]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013002:	685b      	ldr	r3, [r3, #4]
 8013004:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013006:	e00d      	b.n	8013024 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801300e:	2114      	movs	r1, #20
 8013010:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013012:	f001 fde5 	bl	8014be0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013016:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f001 ff35 	bl	8014e88 <pbuf_cat>
      r = iprh->next_pbuf;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013026:	2b00      	cmp	r3, #0
 8013028:	d1ee      	bne.n	8013008 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801302a:	4b31      	ldr	r3, [pc, #196]	; (80130f0 <ip4_reass+0x300>)
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013030:	429a      	cmp	r2, r3
 8013032:	d102      	bne.n	801303a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013034:	2300      	movs	r3, #0
 8013036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013038:	e010      	b.n	801305c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801303a:	4b2d      	ldr	r3, [pc, #180]	; (80130f0 <ip4_reass+0x300>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013040:	e007      	b.n	8013052 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013048:	429a      	cmp	r2, r3
 801304a:	d006      	beq.n	801305a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013054:	2b00      	cmp	r3, #0
 8013056:	d1f4      	bne.n	8013042 <ip4_reass+0x252>
 8013058:	e000      	b.n	801305c <ip4_reass+0x26c>
          break;
 801305a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801305c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801305e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013060:	f7ff fd2e 	bl	8012ac0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f001 fecf 	bl	8014e08 <pbuf_clen>
 801306a:	4603      	mov	r3, r0
 801306c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801306e:	4b1f      	ldr	r3, [pc, #124]	; (80130ec <ip4_reass+0x2fc>)
 8013070:	881b      	ldrh	r3, [r3, #0]
 8013072:	8c3a      	ldrh	r2, [r7, #32]
 8013074:	429a      	cmp	r2, r3
 8013076:	d906      	bls.n	8013086 <ip4_reass+0x296>
 8013078:	4b1e      	ldr	r3, [pc, #120]	; (80130f4 <ip4_reass+0x304>)
 801307a:	f240 229b 	movw	r2, #667	; 0x29b
 801307e:	491e      	ldr	r1, [pc, #120]	; (80130f8 <ip4_reass+0x308>)
 8013080:	481e      	ldr	r0, [pc, #120]	; (80130fc <ip4_reass+0x30c>)
 8013082:	f00e fe4b 	bl	8021d1c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013086:	4b19      	ldr	r3, [pc, #100]	; (80130ec <ip4_reass+0x2fc>)
 8013088:	881a      	ldrh	r2, [r3, #0]
 801308a:	8c3b      	ldrh	r3, [r7, #32]
 801308c:	1ad3      	subs	r3, r2, r3
 801308e:	b29a      	uxth	r2, r3
 8013090:	4b16      	ldr	r3, [pc, #88]	; (80130ec <ip4_reass+0x2fc>)
 8013092:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	e03c      	b.n	8013112 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013098:	2300      	movs	r3, #0
 801309a:	e03a      	b.n	8013112 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801309c:	bf00      	nop
 801309e:	e000      	b.n	80130a2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80130a0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80130a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d106      	bne.n	80130b6 <ip4_reass+0x2c6>
 80130a8:	4b12      	ldr	r3, [pc, #72]	; (80130f4 <ip4_reass+0x304>)
 80130aa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80130ae:	4914      	ldr	r1, [pc, #80]	; (8013100 <ip4_reass+0x310>)
 80130b0:	4812      	ldr	r0, [pc, #72]	; (80130fc <ip4_reass+0x30c>)
 80130b2:	f00e fe33 	bl	8021d1c <iprintf>
  if (ipr->p == NULL) {
 80130b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b8:	685b      	ldr	r3, [r3, #4]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d124      	bne.n	8013108 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80130be:	4b0c      	ldr	r3, [pc, #48]	; (80130f0 <ip4_reass+0x300>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d006      	beq.n	80130d6 <ip4_reass+0x2e6>
 80130c8:	4b0a      	ldr	r3, [pc, #40]	; (80130f4 <ip4_reass+0x304>)
 80130ca:	f240 22ab 	movw	r2, #683	; 0x2ab
 80130ce:	490d      	ldr	r1, [pc, #52]	; (8013104 <ip4_reass+0x314>)
 80130d0:	480a      	ldr	r0, [pc, #40]	; (80130fc <ip4_reass+0x30c>)
 80130d2:	f00e fe23 	bl	8021d1c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80130d6:	2100      	movs	r1, #0
 80130d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130da:	f7ff fcf1 	bl	8012ac0 <ip_reass_dequeue_datagram>
 80130de:	e014      	b.n	801310a <ip4_reass+0x31a>
    goto nullreturn;
 80130e0:	bf00      	nop
 80130e2:	e012      	b.n	801310a <ip4_reass+0x31a>
    goto nullreturn;
 80130e4:	bf00      	nop
 80130e6:	e010      	b.n	801310a <ip4_reass+0x31a>
      goto nullreturn;
 80130e8:	bf00      	nop
 80130ea:	e00e      	b.n	801310a <ip4_reass+0x31a>
 80130ec:	240048cc 	.word	0x240048cc
 80130f0:	240048c8 	.word	0x240048c8
 80130f4:	0802514c 	.word	0x0802514c
 80130f8:	080252d8 	.word	0x080252d8
 80130fc:	080251b0 	.word	0x080251b0
 8013100:	080252f4 	.word	0x080252f4
 8013104:	08025300 	.word	0x08025300
  }

nullreturn:
 8013108:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f001 fdee 	bl	8014cec <pbuf_free>
  return NULL;
 8013110:	2300      	movs	r3, #0
}
 8013112:	4618      	mov	r0, r3
 8013114:	3738      	adds	r7, #56	; 0x38
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
 801311a:	bf00      	nop

0801311c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013120:	2005      	movs	r0, #5
 8013122:	f000 fe37 	bl	8013d94 <memp_malloc>
 8013126:	4603      	mov	r3, r0
}
 8013128:	4618      	mov	r0, r3
 801312a:	bd80      	pop	{r7, pc}

0801312c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b082      	sub	sp, #8
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d106      	bne.n	8013148 <ip_frag_free_pbuf_custom_ref+0x1c>
 801313a:	4b07      	ldr	r3, [pc, #28]	; (8013158 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801313c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013140:	4906      	ldr	r1, [pc, #24]	; (801315c <ip_frag_free_pbuf_custom_ref+0x30>)
 8013142:	4807      	ldr	r0, [pc, #28]	; (8013160 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013144:	f00e fdea 	bl	8021d1c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013148:	6879      	ldr	r1, [r7, #4]
 801314a:	2005      	movs	r0, #5
 801314c:	f000 fe98 	bl	8013e80 <memp_free>
}
 8013150:	bf00      	nop
 8013152:	3708      	adds	r7, #8
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	0802514c 	.word	0x0802514c
 801315c:	08025320 	.word	0x08025320
 8013160:	080251b0 	.word	0x080251b0

08013164 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b084      	sub	sp, #16
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d106      	bne.n	8013184 <ipfrag_free_pbuf_custom+0x20>
 8013176:	4b11      	ldr	r3, [pc, #68]	; (80131bc <ipfrag_free_pbuf_custom+0x58>)
 8013178:	f240 22ce 	movw	r2, #718	; 0x2ce
 801317c:	4910      	ldr	r1, [pc, #64]	; (80131c0 <ipfrag_free_pbuf_custom+0x5c>)
 801317e:	4811      	ldr	r0, [pc, #68]	; (80131c4 <ipfrag_free_pbuf_custom+0x60>)
 8013180:	f00e fdcc 	bl	8021d1c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013184:	68fa      	ldr	r2, [r7, #12]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	429a      	cmp	r2, r3
 801318a:	d006      	beq.n	801319a <ipfrag_free_pbuf_custom+0x36>
 801318c:	4b0b      	ldr	r3, [pc, #44]	; (80131bc <ipfrag_free_pbuf_custom+0x58>)
 801318e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013192:	490d      	ldr	r1, [pc, #52]	; (80131c8 <ipfrag_free_pbuf_custom+0x64>)
 8013194:	480b      	ldr	r0, [pc, #44]	; (80131c4 <ipfrag_free_pbuf_custom+0x60>)
 8013196:	f00e fdc1 	bl	8021d1c <iprintf>
  if (pcr->original != NULL) {
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	695b      	ldr	r3, [r3, #20]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d004      	beq.n	80131ac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	695b      	ldr	r3, [r3, #20]
 80131a6:	4618      	mov	r0, r3
 80131a8:	f001 fda0 	bl	8014cec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80131ac:	68f8      	ldr	r0, [r7, #12]
 80131ae:	f7ff ffbd 	bl	801312c <ip_frag_free_pbuf_custom_ref>
}
 80131b2:	bf00      	nop
 80131b4:	3710      	adds	r7, #16
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	0802514c 	.word	0x0802514c
 80131c0:	0802532c 	.word	0x0802532c
 80131c4:	080251b0 	.word	0x080251b0
 80131c8:	08025338 	.word	0x08025338

080131cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b094      	sub	sp, #80	; 0x50
 80131d0:	af02      	add	r7, sp, #8
 80131d2:	60f8      	str	r0, [r7, #12]
 80131d4:	60b9      	str	r1, [r7, #8]
 80131d6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80131d8:	2300      	movs	r3, #0
 80131da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80131e2:	3b14      	subs	r3, #20
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	da00      	bge.n	80131ea <ip4_frag+0x1e>
 80131e8:	3307      	adds	r3, #7
 80131ea:	10db      	asrs	r3, r3, #3
 80131ec:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80131ee:	2314      	movs	r3, #20
 80131f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	685b      	ldr	r3, [r3, #4]
 80131f6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80131f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80131fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131fe:	781b      	ldrb	r3, [r3, #0]
 8013200:	f003 030f 	and.w	r3, r3, #15
 8013204:	b2db      	uxtb	r3, r3
 8013206:	009b      	lsls	r3, r3, #2
 8013208:	b2db      	uxtb	r3, r3
 801320a:	2b14      	cmp	r3, #20
 801320c:	d002      	beq.n	8013214 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801320e:	f06f 0305 	mvn.w	r3, #5
 8013212:	e110      	b.n	8013436 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	895b      	ldrh	r3, [r3, #10]
 8013218:	2b13      	cmp	r3, #19
 801321a:	d809      	bhi.n	8013230 <ip4_frag+0x64>
 801321c:	4b88      	ldr	r3, [pc, #544]	; (8013440 <ip4_frag+0x274>)
 801321e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013222:	4988      	ldr	r1, [pc, #544]	; (8013444 <ip4_frag+0x278>)
 8013224:	4888      	ldr	r0, [pc, #544]	; (8013448 <ip4_frag+0x27c>)
 8013226:	f00e fd79 	bl	8021d1c <iprintf>
 801322a:	f06f 0305 	mvn.w	r3, #5
 801322e:	e102      	b.n	8013436 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013232:	88db      	ldrh	r3, [r3, #6]
 8013234:	b29b      	uxth	r3, r3
 8013236:	4618      	mov	r0, r3
 8013238:	f7fd fbde 	bl	80109f8 <lwip_htons>
 801323c:	4603      	mov	r3, r0
 801323e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013240:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013242:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013246:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801324a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801324c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013250:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	891b      	ldrh	r3, [r3, #8]
 8013256:	3b14      	subs	r3, #20
 8013258:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801325c:	e0e1      	b.n	8013422 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801325e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013260:	00db      	lsls	r3, r3, #3
 8013262:	b29b      	uxth	r3, r3
 8013264:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013268:	4293      	cmp	r3, r2
 801326a:	bf28      	it	cs
 801326c:	4613      	movcs	r3, r2
 801326e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013270:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013274:	2114      	movs	r1, #20
 8013276:	200e      	movs	r0, #14
 8013278:	f001 fa54 	bl	8014724 <pbuf_alloc>
 801327c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013280:	2b00      	cmp	r3, #0
 8013282:	f000 80d5 	beq.w	8013430 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013288:	895b      	ldrh	r3, [r3, #10]
 801328a:	2b13      	cmp	r3, #19
 801328c:	d806      	bhi.n	801329c <ip4_frag+0xd0>
 801328e:	4b6c      	ldr	r3, [pc, #432]	; (8013440 <ip4_frag+0x274>)
 8013290:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013294:	496d      	ldr	r1, [pc, #436]	; (801344c <ip4_frag+0x280>)
 8013296:	486c      	ldr	r0, [pc, #432]	; (8013448 <ip4_frag+0x27c>)
 8013298:	f00e fd40 	bl	8021d1c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801329e:	685b      	ldr	r3, [r3, #4]
 80132a0:	2214      	movs	r2, #20
 80132a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80132a4:	4618      	mov	r0, r3
 80132a6:	f00e f8c7 	bl	8021438 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80132aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ac:	685b      	ldr	r3, [r3, #4]
 80132ae:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80132b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80132b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80132b6:	e064      	b.n	8013382 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	895a      	ldrh	r2, [r3, #10]
 80132bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80132be:	1ad3      	subs	r3, r2, r3
 80132c0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	895b      	ldrh	r3, [r3, #10]
 80132c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d906      	bls.n	80132da <ip4_frag+0x10e>
 80132cc:	4b5c      	ldr	r3, [pc, #368]	; (8013440 <ip4_frag+0x274>)
 80132ce:	f240 322d 	movw	r2, #813	; 0x32d
 80132d2:	495f      	ldr	r1, [pc, #380]	; (8013450 <ip4_frag+0x284>)
 80132d4:	485c      	ldr	r0, [pc, #368]	; (8013448 <ip4_frag+0x27c>)
 80132d6:	f00e fd21 	bl	8021d1c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80132da:	8bfa      	ldrh	r2, [r7, #30]
 80132dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80132e0:	4293      	cmp	r3, r2
 80132e2:	bf28      	it	cs
 80132e4:	4613      	movcs	r3, r2
 80132e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80132ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d105      	bne.n	80132fe <ip4_frag+0x132>
        poff = 0;
 80132f2:	2300      	movs	r3, #0
 80132f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	60fb      	str	r3, [r7, #12]
        continue;
 80132fc:	e041      	b.n	8013382 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80132fe:	f7ff ff0d 	bl	801311c <ip_frag_alloc_pbuf_custom_ref>
 8013302:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013304:	69bb      	ldr	r3, [r7, #24]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d103      	bne.n	8013312 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801330a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801330c:	f001 fcee 	bl	8014cec <pbuf_free>
        goto memerr;
 8013310:	e08f      	b.n	8013432 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013312:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013318:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801331a:	4413      	add	r3, r2
 801331c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013320:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013324:	9201      	str	r2, [sp, #4]
 8013326:	9300      	str	r3, [sp, #0]
 8013328:	4603      	mov	r3, r0
 801332a:	2241      	movs	r2, #65	; 0x41
 801332c:	2000      	movs	r0, #0
 801332e:	f001 fb23 	bl	8014978 <pbuf_alloced_custom>
 8013332:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d106      	bne.n	8013348 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801333a:	69b8      	ldr	r0, [r7, #24]
 801333c:	f7ff fef6 	bl	801312c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013340:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013342:	f001 fcd3 	bl	8014cec <pbuf_free>
        goto memerr;
 8013346:	e074      	b.n	8013432 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013348:	68f8      	ldr	r0, [r7, #12]
 801334a:	f001 fd75 	bl	8014e38 <pbuf_ref>
      pcr->original = p;
 801334e:	69bb      	ldr	r3, [r7, #24]
 8013350:	68fa      	ldr	r2, [r7, #12]
 8013352:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013354:	69bb      	ldr	r3, [r7, #24]
 8013356:	4a3f      	ldr	r2, [pc, #252]	; (8013454 <ip4_frag+0x288>)
 8013358:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801335a:	6979      	ldr	r1, [r7, #20]
 801335c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801335e:	f001 fd93 	bl	8014e88 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013362:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013366:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801336a:	1ad3      	subs	r3, r2, r3
 801336c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013370:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013374:	2b00      	cmp	r3, #0
 8013376:	d004      	beq.n	8013382 <ip4_frag+0x1b6>
        poff = 0;
 8013378:	2300      	movs	r3, #0
 801337a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013382:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013386:	2b00      	cmp	r3, #0
 8013388:	d196      	bne.n	80132b8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801338a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801338c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013390:	4413      	add	r3, r2
 8013392:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013398:	f1a3 0213 	sub.w	r2, r3, #19
 801339c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80133a0:	429a      	cmp	r2, r3
 80133a2:	bfcc      	ite	gt
 80133a4:	2301      	movgt	r3, #1
 80133a6:	2300      	movle	r3, #0
 80133a8:	b2db      	uxtb	r3, r3
 80133aa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80133ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80133b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80133b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80133b6:	6a3b      	ldr	r3, [r7, #32]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d002      	beq.n	80133c2 <ip4_frag+0x1f6>
 80133bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d003      	beq.n	80133ca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80133c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80133c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80133c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80133ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7fd fb13 	bl	80109f8 <lwip_htons>
 80133d2:	4603      	mov	r3, r0
 80133d4:	461a      	mov	r2, r3
 80133d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80133da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80133dc:	3314      	adds	r3, #20
 80133de:	b29b      	uxth	r3, r3
 80133e0:	4618      	mov	r0, r3
 80133e2:	f7fd fb09 	bl	80109f8 <lwip_htons>
 80133e6:	4603      	mov	r3, r0
 80133e8:	461a      	mov	r2, r3
 80133ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80133ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f0:	2200      	movs	r2, #0
 80133f2:	729a      	strb	r2, [r3, #10]
 80133f4:	2200      	movs	r2, #0
 80133f6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	695b      	ldr	r3, [r3, #20]
 80133fc:	687a      	ldr	r2, [r7, #4]
 80133fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013400:	68b8      	ldr	r0, [r7, #8]
 8013402:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013406:	f001 fc71 	bl	8014cec <pbuf_free>
    left = (u16_t)(left - fragsize);
 801340a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801340e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013410:	1ad3      	subs	r3, r2, r3
 8013412:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013416:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801341a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801341c:	4413      	add	r3, r2
 801341e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013422:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013426:	2b00      	cmp	r3, #0
 8013428:	f47f af19 	bne.w	801325e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801342c:	2300      	movs	r3, #0
 801342e:	e002      	b.n	8013436 <ip4_frag+0x26a>
      goto memerr;
 8013430:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013436:	4618      	mov	r0, r3
 8013438:	3748      	adds	r7, #72	; 0x48
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	0802514c 	.word	0x0802514c
 8013444:	08025344 	.word	0x08025344
 8013448:	080251b0 	.word	0x080251b0
 801344c:	08025360 	.word	0x08025360
 8013450:	08025380 	.word	0x08025380
 8013454:	08013165 	.word	0x08013165

08013458 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013458:	b480      	push	{r7}
 801345a:	b083      	sub	sp, #12
 801345c:	af00      	add	r7, sp, #0
 801345e:	4603      	mov	r3, r0
 8013460:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8013462:	4b05      	ldr	r3, [pc, #20]	; (8013478 <ptr_to_mem+0x20>)
 8013464:	681a      	ldr	r2, [r3, #0]
 8013466:	88fb      	ldrh	r3, [r7, #6]
 8013468:	4413      	add	r3, r2
}
 801346a:	4618      	mov	r0, r3
 801346c:	370c      	adds	r7, #12
 801346e:	46bd      	mov	sp, r7
 8013470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013474:	4770      	bx	lr
 8013476:	bf00      	nop
 8013478:	240048d0 	.word	0x240048d0

0801347c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8013484:	4b05      	ldr	r3, [pc, #20]	; (801349c <mem_to_ptr+0x20>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	687a      	ldr	r2, [r7, #4]
 801348a:	1ad3      	subs	r3, r2, r3
 801348c:	b29b      	uxth	r3, r3
}
 801348e:	4618      	mov	r0, r3
 8013490:	370c      	adds	r7, #12
 8013492:	46bd      	mov	sp, r7
 8013494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013498:	4770      	bx	lr
 801349a:	bf00      	nop
 801349c:	240048d0 	.word	0x240048d0

080134a0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80134a0:	b590      	push	{r4, r7, lr}
 80134a2:	b085      	sub	sp, #20
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80134a8:	4b47      	ldr	r3, [pc, #284]	; (80135c8 <plug_holes+0x128>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	687a      	ldr	r2, [r7, #4]
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d206      	bcs.n	80134c0 <plug_holes+0x20>
 80134b2:	4b46      	ldr	r3, [pc, #280]	; (80135cc <plug_holes+0x12c>)
 80134b4:	f240 12df 	movw	r2, #479	; 0x1df
 80134b8:	4945      	ldr	r1, [pc, #276]	; (80135d0 <plug_holes+0x130>)
 80134ba:	4846      	ldr	r0, [pc, #280]	; (80135d4 <plug_holes+0x134>)
 80134bc:	f00e fc2e 	bl	8021d1c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80134c0:	4b45      	ldr	r3, [pc, #276]	; (80135d8 <plug_holes+0x138>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	687a      	ldr	r2, [r7, #4]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d306      	bcc.n	80134d8 <plug_holes+0x38>
 80134ca:	4b40      	ldr	r3, [pc, #256]	; (80135cc <plug_holes+0x12c>)
 80134cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80134d0:	4942      	ldr	r1, [pc, #264]	; (80135dc <plug_holes+0x13c>)
 80134d2:	4840      	ldr	r0, [pc, #256]	; (80135d4 <plug_holes+0x134>)
 80134d4:	f00e fc22 	bl	8021d1c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	791b      	ldrb	r3, [r3, #4]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d006      	beq.n	80134ee <plug_holes+0x4e>
 80134e0:	4b3a      	ldr	r3, [pc, #232]	; (80135cc <plug_holes+0x12c>)
 80134e2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80134e6:	493e      	ldr	r1, [pc, #248]	; (80135e0 <plug_holes+0x140>)
 80134e8:	483a      	ldr	r0, [pc, #232]	; (80135d4 <plug_holes+0x134>)
 80134ea:	f00e fc17 	bl	8021d1c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	881b      	ldrh	r3, [r3, #0]
 80134f2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80134f6:	4293      	cmp	r3, r2
 80134f8:	d906      	bls.n	8013508 <plug_holes+0x68>
 80134fa:	4b34      	ldr	r3, [pc, #208]	; (80135cc <plug_holes+0x12c>)
 80134fc:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8013500:	4938      	ldr	r1, [pc, #224]	; (80135e4 <plug_holes+0x144>)
 8013502:	4834      	ldr	r0, [pc, #208]	; (80135d4 <plug_holes+0x134>)
 8013504:	f00e fc0a 	bl	8021d1c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	881b      	ldrh	r3, [r3, #0]
 801350c:	4618      	mov	r0, r3
 801350e:	f7ff ffa3 	bl	8013458 <ptr_to_mem>
 8013512:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8013514:	687a      	ldr	r2, [r7, #4]
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	429a      	cmp	r2, r3
 801351a:	d025      	beq.n	8013568 <plug_holes+0xc8>
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	791b      	ldrb	r3, [r3, #4]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d121      	bne.n	8013568 <plug_holes+0xc8>
 8013524:	4b2c      	ldr	r3, [pc, #176]	; (80135d8 <plug_holes+0x138>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	68fa      	ldr	r2, [r7, #12]
 801352a:	429a      	cmp	r2, r3
 801352c:	d01c      	beq.n	8013568 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801352e:	4b2e      	ldr	r3, [pc, #184]	; (80135e8 <plug_holes+0x148>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	68fa      	ldr	r2, [r7, #12]
 8013534:	429a      	cmp	r2, r3
 8013536:	d102      	bne.n	801353e <plug_holes+0x9e>
      lfree = mem;
 8013538:	4a2b      	ldr	r2, [pc, #172]	; (80135e8 <plug_holes+0x148>)
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	881a      	ldrh	r2, [r3, #0]
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	881b      	ldrh	r3, [r3, #0]
 801354a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 801354e:	4293      	cmp	r3, r2
 8013550:	d00a      	beq.n	8013568 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	881b      	ldrh	r3, [r3, #0]
 8013556:	4618      	mov	r0, r3
 8013558:	f7ff ff7e 	bl	8013458 <ptr_to_mem>
 801355c:	4604      	mov	r4, r0
 801355e:	6878      	ldr	r0, [r7, #4]
 8013560:	f7ff ff8c 	bl	801347c <mem_to_ptr>
 8013564:	4603      	mov	r3, r0
 8013566:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	885b      	ldrh	r3, [r3, #2]
 801356c:	4618      	mov	r0, r3
 801356e:	f7ff ff73 	bl	8013458 <ptr_to_mem>
 8013572:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8013574:	68ba      	ldr	r2, [r7, #8]
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	429a      	cmp	r2, r3
 801357a:	d020      	beq.n	80135be <plug_holes+0x11e>
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	791b      	ldrb	r3, [r3, #4]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d11c      	bne.n	80135be <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8013584:	4b18      	ldr	r3, [pc, #96]	; (80135e8 <plug_holes+0x148>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	687a      	ldr	r2, [r7, #4]
 801358a:	429a      	cmp	r2, r3
 801358c:	d102      	bne.n	8013594 <plug_holes+0xf4>
      lfree = pmem;
 801358e:	4a16      	ldr	r2, [pc, #88]	; (80135e8 <plug_holes+0x148>)
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	881a      	ldrh	r2, [r3, #0]
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	881b      	ldrh	r3, [r3, #0]
 80135a0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80135a4:	4293      	cmp	r3, r2
 80135a6:	d00a      	beq.n	80135be <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	881b      	ldrh	r3, [r3, #0]
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7ff ff53 	bl	8013458 <ptr_to_mem>
 80135b2:	4604      	mov	r4, r0
 80135b4:	68b8      	ldr	r0, [r7, #8]
 80135b6:	f7ff ff61 	bl	801347c <mem_to_ptr>
 80135ba:	4603      	mov	r3, r0
 80135bc:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80135be:	bf00      	nop
 80135c0:	3714      	adds	r7, #20
 80135c2:	46bd      	mov	sp, r7
 80135c4:	bd90      	pop	{r4, r7, pc}
 80135c6:	bf00      	nop
 80135c8:	240048d0 	.word	0x240048d0
 80135cc:	08025390 	.word	0x08025390
 80135d0:	080253dc 	.word	0x080253dc
 80135d4:	080253f4 	.word	0x080253f4
 80135d8:	240048d4 	.word	0x240048d4
 80135dc:	0802541c 	.word	0x0802541c
 80135e0:	08025438 	.word	0x08025438
 80135e4:	08025454 	.word	0x08025454
 80135e8:	240048dc 	.word	0x240048dc

080135ec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b082      	sub	sp, #8
 80135f0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80135f2:	4b1d      	ldr	r3, [pc, #116]	; (8013668 <mem_init+0x7c>)
 80135f4:	4a1d      	ldr	r2, [pc, #116]	; (801366c <mem_init+0x80>)
 80135f6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80135f8:	4b1b      	ldr	r3, [pc, #108]	; (8013668 <mem_init+0x7c>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013604:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2200      	movs	r2, #0
 801360a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	2200      	movs	r2, #0
 8013610:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8013612:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 8013616:	f7ff ff1f 	bl	8013458 <ptr_to_mem>
 801361a:	4603      	mov	r3, r0
 801361c:	4a14      	ldr	r2, [pc, #80]	; (8013670 <mem_init+0x84>)
 801361e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013620:	4b13      	ldr	r3, [pc, #76]	; (8013670 <mem_init+0x84>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	2201      	movs	r2, #1
 8013626:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013628:	4b11      	ldr	r3, [pc, #68]	; (8013670 <mem_init+0x84>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013630:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013632:	4b0f      	ldr	r3, [pc, #60]	; (8013670 <mem_init+0x84>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 801363a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801363c:	4b0a      	ldr	r3, [pc, #40]	; (8013668 <mem_init+0x7c>)
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	4a0c      	ldr	r2, [pc, #48]	; (8013674 <mem_init+0x88>)
 8013642:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013644:	480c      	ldr	r0, [pc, #48]	; (8013678 <mem_init+0x8c>)
 8013646:	f002 fc6b 	bl	8015f20 <sys_mutex_new>
 801364a:	4603      	mov	r3, r0
 801364c:	2b00      	cmp	r3, #0
 801364e:	d006      	beq.n	801365e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013650:	4b0a      	ldr	r3, [pc, #40]	; (801367c <mem_init+0x90>)
 8013652:	f240 221f 	movw	r2, #543	; 0x21f
 8013656:	490a      	ldr	r1, [pc, #40]	; (8013680 <mem_init+0x94>)
 8013658:	480a      	ldr	r0, [pc, #40]	; (8013684 <mem_init+0x98>)
 801365a:	f00e fb5f 	bl	8021d1c <iprintf>
  }
}
 801365e:	bf00      	nop
 8013660:	3708      	adds	r7, #8
 8013662:	46bd      	mov	sp, r7
 8013664:	bd80      	pop	{r7, pc}
 8013666:	bf00      	nop
 8013668:	240048d0 	.word	0x240048d0
 801366c:	30044000 	.word	0x30044000
 8013670:	240048d4 	.word	0x240048d4
 8013674:	240048dc 	.word	0x240048dc
 8013678:	240048d8 	.word	0x240048d8
 801367c:	08025390 	.word	0x08025390
 8013680:	08025480 	.word	0x08025480
 8013684:	080253f4 	.word	0x080253f4

08013688 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b086      	sub	sp, #24
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8013690:	6878      	ldr	r0, [r7, #4]
 8013692:	f7ff fef3 	bl	801347c <mem_to_ptr>
 8013696:	4603      	mov	r3, r0
 8013698:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	881b      	ldrh	r3, [r3, #0]
 801369e:	4618      	mov	r0, r3
 80136a0:	f7ff feda 	bl	8013458 <ptr_to_mem>
 80136a4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	885b      	ldrh	r3, [r3, #2]
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7ff fed4 	bl	8013458 <ptr_to_mem>
 80136b0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	881b      	ldrh	r3, [r3, #0]
 80136b6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80136ba:	4293      	cmp	r3, r2
 80136bc:	d819      	bhi.n	80136f2 <mem_link_valid+0x6a>
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	885b      	ldrh	r3, [r3, #2]
 80136c2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80136c6:	4293      	cmp	r3, r2
 80136c8:	d813      	bhi.n	80136f2 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80136ce:	8afa      	ldrh	r2, [r7, #22]
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d004      	beq.n	80136de <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	881b      	ldrh	r3, [r3, #0]
 80136d8:	8afa      	ldrh	r2, [r7, #22]
 80136da:	429a      	cmp	r2, r3
 80136dc:	d109      	bne.n	80136f2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80136de:	4b08      	ldr	r3, [pc, #32]	; (8013700 <mem_link_valid+0x78>)
 80136e0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80136e2:	693a      	ldr	r2, [r7, #16]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d006      	beq.n	80136f6 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80136e8:	693b      	ldr	r3, [r7, #16]
 80136ea:	885b      	ldrh	r3, [r3, #2]
 80136ec:	8afa      	ldrh	r2, [r7, #22]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d001      	beq.n	80136f6 <mem_link_valid+0x6e>
    return 0;
 80136f2:	2300      	movs	r3, #0
 80136f4:	e000      	b.n	80136f8 <mem_link_valid+0x70>
  }
  return 1;
 80136f6:	2301      	movs	r3, #1
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3718      	adds	r7, #24
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}
 8013700:	240048d4 	.word	0x240048d4

08013704 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b088      	sub	sp, #32
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d070      	beq.n	80137f4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f003 0303 	and.w	r3, r3, #3
 8013718:	2b00      	cmp	r3, #0
 801371a:	d00d      	beq.n	8013738 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801371c:	4b37      	ldr	r3, [pc, #220]	; (80137fc <mem_free+0xf8>)
 801371e:	f240 2273 	movw	r2, #627	; 0x273
 8013722:	4937      	ldr	r1, [pc, #220]	; (8013800 <mem_free+0xfc>)
 8013724:	4837      	ldr	r0, [pc, #220]	; (8013804 <mem_free+0x100>)
 8013726:	f00e faf9 	bl	8021d1c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801372a:	f002 fc57 	bl	8015fdc <sys_arch_protect>
 801372e:	60f8      	str	r0, [r7, #12]
 8013730:	68f8      	ldr	r0, [r7, #12]
 8013732:	f002 fc61 	bl	8015ff8 <sys_arch_unprotect>
    return;
 8013736:	e05e      	b.n	80137f6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	3b08      	subs	r3, #8
 801373c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801373e:	4b32      	ldr	r3, [pc, #200]	; (8013808 <mem_free+0x104>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	69fa      	ldr	r2, [r7, #28]
 8013744:	429a      	cmp	r2, r3
 8013746:	d306      	bcc.n	8013756 <mem_free+0x52>
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f103 020c 	add.w	r2, r3, #12
 801374e:	4b2f      	ldr	r3, [pc, #188]	; (801380c <mem_free+0x108>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	429a      	cmp	r2, r3
 8013754:	d90d      	bls.n	8013772 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8013756:	4b29      	ldr	r3, [pc, #164]	; (80137fc <mem_free+0xf8>)
 8013758:	f240 227f 	movw	r2, #639	; 0x27f
 801375c:	492c      	ldr	r1, [pc, #176]	; (8013810 <mem_free+0x10c>)
 801375e:	4829      	ldr	r0, [pc, #164]	; (8013804 <mem_free+0x100>)
 8013760:	f00e fadc 	bl	8021d1c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013764:	f002 fc3a 	bl	8015fdc <sys_arch_protect>
 8013768:	6138      	str	r0, [r7, #16]
 801376a:	6938      	ldr	r0, [r7, #16]
 801376c:	f002 fc44 	bl	8015ff8 <sys_arch_unprotect>
    return;
 8013770:	e041      	b.n	80137f6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013772:	4828      	ldr	r0, [pc, #160]	; (8013814 <mem_free+0x110>)
 8013774:	f002 fbf0 	bl	8015f58 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013778:	69fb      	ldr	r3, [r7, #28]
 801377a:	791b      	ldrb	r3, [r3, #4]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d110      	bne.n	80137a2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013780:	4b1e      	ldr	r3, [pc, #120]	; (80137fc <mem_free+0xf8>)
 8013782:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8013786:	4924      	ldr	r1, [pc, #144]	; (8013818 <mem_free+0x114>)
 8013788:	481e      	ldr	r0, [pc, #120]	; (8013804 <mem_free+0x100>)
 801378a:	f00e fac7 	bl	8021d1c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801378e:	4821      	ldr	r0, [pc, #132]	; (8013814 <mem_free+0x110>)
 8013790:	f002 fbf1 	bl	8015f76 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013794:	f002 fc22 	bl	8015fdc <sys_arch_protect>
 8013798:	6178      	str	r0, [r7, #20]
 801379a:	6978      	ldr	r0, [r7, #20]
 801379c:	f002 fc2c 	bl	8015ff8 <sys_arch_unprotect>
    return;
 80137a0:	e029      	b.n	80137f6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80137a2:	69f8      	ldr	r0, [r7, #28]
 80137a4:	f7ff ff70 	bl	8013688 <mem_link_valid>
 80137a8:	4603      	mov	r3, r0
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d110      	bne.n	80137d0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80137ae:	4b13      	ldr	r3, [pc, #76]	; (80137fc <mem_free+0xf8>)
 80137b0:	f240 2295 	movw	r2, #661	; 0x295
 80137b4:	4919      	ldr	r1, [pc, #100]	; (801381c <mem_free+0x118>)
 80137b6:	4813      	ldr	r0, [pc, #76]	; (8013804 <mem_free+0x100>)
 80137b8:	f00e fab0 	bl	8021d1c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80137bc:	4815      	ldr	r0, [pc, #84]	; (8013814 <mem_free+0x110>)
 80137be:	f002 fbda 	bl	8015f76 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80137c2:	f002 fc0b 	bl	8015fdc <sys_arch_protect>
 80137c6:	61b8      	str	r0, [r7, #24]
 80137c8:	69b8      	ldr	r0, [r7, #24]
 80137ca:	f002 fc15 	bl	8015ff8 <sys_arch_unprotect>
    return;
 80137ce:	e012      	b.n	80137f6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80137d0:	69fb      	ldr	r3, [r7, #28]
 80137d2:	2200      	movs	r2, #0
 80137d4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80137d6:	4b12      	ldr	r3, [pc, #72]	; (8013820 <mem_free+0x11c>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	69fa      	ldr	r2, [r7, #28]
 80137dc:	429a      	cmp	r2, r3
 80137de:	d202      	bcs.n	80137e6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80137e0:	4a0f      	ldr	r2, [pc, #60]	; (8013820 <mem_free+0x11c>)
 80137e2:	69fb      	ldr	r3, [r7, #28]
 80137e4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80137e6:	69f8      	ldr	r0, [r7, #28]
 80137e8:	f7ff fe5a 	bl	80134a0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80137ec:	4809      	ldr	r0, [pc, #36]	; (8013814 <mem_free+0x110>)
 80137ee:	f002 fbc2 	bl	8015f76 <sys_mutex_unlock>
 80137f2:	e000      	b.n	80137f6 <mem_free+0xf2>
    return;
 80137f4:	bf00      	nop
}
 80137f6:	3720      	adds	r7, #32
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}
 80137fc:	08025390 	.word	0x08025390
 8013800:	0802549c 	.word	0x0802549c
 8013804:	080253f4 	.word	0x080253f4
 8013808:	240048d0 	.word	0x240048d0
 801380c:	240048d4 	.word	0x240048d4
 8013810:	080254c0 	.word	0x080254c0
 8013814:	240048d8 	.word	0x240048d8
 8013818:	080254dc 	.word	0x080254dc
 801381c:	08025504 	.word	0x08025504
 8013820:	240048dc 	.word	0x240048dc

08013824 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b088      	sub	sp, #32
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	460b      	mov	r3, r1
 801382e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013830:	887b      	ldrh	r3, [r7, #2]
 8013832:	3303      	adds	r3, #3
 8013834:	b29b      	uxth	r3, r3
 8013836:	f023 0303 	bic.w	r3, r3, #3
 801383a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801383c:	8bfb      	ldrh	r3, [r7, #30]
 801383e:	2b0b      	cmp	r3, #11
 8013840:	d801      	bhi.n	8013846 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013842:	230c      	movs	r3, #12
 8013844:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8013846:	8bfb      	ldrh	r3, [r7, #30]
 8013848:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 801384c:	4293      	cmp	r3, r2
 801384e:	d803      	bhi.n	8013858 <mem_trim+0x34>
 8013850:	8bfa      	ldrh	r2, [r7, #30]
 8013852:	887b      	ldrh	r3, [r7, #2]
 8013854:	429a      	cmp	r2, r3
 8013856:	d201      	bcs.n	801385c <mem_trim+0x38>
    return NULL;
 8013858:	2300      	movs	r3, #0
 801385a:	e0dc      	b.n	8013a16 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801385c:	4b70      	ldr	r3, [pc, #448]	; (8013a20 <mem_trim+0x1fc>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	687a      	ldr	r2, [r7, #4]
 8013862:	429a      	cmp	r2, r3
 8013864:	d304      	bcc.n	8013870 <mem_trim+0x4c>
 8013866:	4b6f      	ldr	r3, [pc, #444]	; (8013a24 <mem_trim+0x200>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	429a      	cmp	r2, r3
 801386e:	d306      	bcc.n	801387e <mem_trim+0x5a>
 8013870:	4b6d      	ldr	r3, [pc, #436]	; (8013a28 <mem_trim+0x204>)
 8013872:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013876:	496d      	ldr	r1, [pc, #436]	; (8013a2c <mem_trim+0x208>)
 8013878:	486d      	ldr	r0, [pc, #436]	; (8013a30 <mem_trim+0x20c>)
 801387a:	f00e fa4f 	bl	8021d1c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801387e:	4b68      	ldr	r3, [pc, #416]	; (8013a20 <mem_trim+0x1fc>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	687a      	ldr	r2, [r7, #4]
 8013884:	429a      	cmp	r2, r3
 8013886:	d304      	bcc.n	8013892 <mem_trim+0x6e>
 8013888:	4b66      	ldr	r3, [pc, #408]	; (8013a24 <mem_trim+0x200>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	687a      	ldr	r2, [r7, #4]
 801388e:	429a      	cmp	r2, r3
 8013890:	d307      	bcc.n	80138a2 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013892:	f002 fba3 	bl	8015fdc <sys_arch_protect>
 8013896:	60b8      	str	r0, [r7, #8]
 8013898:	68b8      	ldr	r0, [r7, #8]
 801389a:	f002 fbad 	bl	8015ff8 <sys_arch_unprotect>
    return rmem;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	e0b9      	b.n	8013a16 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	3b08      	subs	r3, #8
 80138a6:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80138a8:	69b8      	ldr	r0, [r7, #24]
 80138aa:	f7ff fde7 	bl	801347c <mem_to_ptr>
 80138ae:	4603      	mov	r3, r0
 80138b0:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80138b2:	69bb      	ldr	r3, [r7, #24]
 80138b4:	881a      	ldrh	r2, [r3, #0]
 80138b6:	8afb      	ldrh	r3, [r7, #22]
 80138b8:	1ad3      	subs	r3, r2, r3
 80138ba:	b29b      	uxth	r3, r3
 80138bc:	3b08      	subs	r3, #8
 80138be:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80138c0:	8bfa      	ldrh	r2, [r7, #30]
 80138c2:	8abb      	ldrh	r3, [r7, #20]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d906      	bls.n	80138d6 <mem_trim+0xb2>
 80138c8:	4b57      	ldr	r3, [pc, #348]	; (8013a28 <mem_trim+0x204>)
 80138ca:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80138ce:	4959      	ldr	r1, [pc, #356]	; (8013a34 <mem_trim+0x210>)
 80138d0:	4857      	ldr	r0, [pc, #348]	; (8013a30 <mem_trim+0x20c>)
 80138d2:	f00e fa23 	bl	8021d1c <iprintf>
  if (newsize > size) {
 80138d6:	8bfa      	ldrh	r2, [r7, #30]
 80138d8:	8abb      	ldrh	r3, [r7, #20]
 80138da:	429a      	cmp	r2, r3
 80138dc:	d901      	bls.n	80138e2 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 80138de:	2300      	movs	r3, #0
 80138e0:	e099      	b.n	8013a16 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 80138e2:	8bfa      	ldrh	r2, [r7, #30]
 80138e4:	8abb      	ldrh	r3, [r7, #20]
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d101      	bne.n	80138ee <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	e093      	b.n	8013a16 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80138ee:	4852      	ldr	r0, [pc, #328]	; (8013a38 <mem_trim+0x214>)
 80138f0:	f002 fb32 	bl	8015f58 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80138f4:	69bb      	ldr	r3, [r7, #24]
 80138f6:	881b      	ldrh	r3, [r3, #0]
 80138f8:	4618      	mov	r0, r3
 80138fa:	f7ff fdad 	bl	8013458 <ptr_to_mem>
 80138fe:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013900:	693b      	ldr	r3, [r7, #16]
 8013902:	791b      	ldrb	r3, [r3, #4]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d141      	bne.n	801398c <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013908:	69bb      	ldr	r3, [r7, #24]
 801390a:	881b      	ldrh	r3, [r3, #0]
 801390c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013910:	4293      	cmp	r3, r2
 8013912:	d106      	bne.n	8013922 <mem_trim+0xfe>
 8013914:	4b44      	ldr	r3, [pc, #272]	; (8013a28 <mem_trim+0x204>)
 8013916:	f240 22f5 	movw	r2, #757	; 0x2f5
 801391a:	4948      	ldr	r1, [pc, #288]	; (8013a3c <mem_trim+0x218>)
 801391c:	4844      	ldr	r0, [pc, #272]	; (8013a30 <mem_trim+0x20c>)
 801391e:	f00e f9fd 	bl	8021d1c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	881b      	ldrh	r3, [r3, #0]
 8013926:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013928:	8afa      	ldrh	r2, [r7, #22]
 801392a:	8bfb      	ldrh	r3, [r7, #30]
 801392c:	4413      	add	r3, r2
 801392e:	b29b      	uxth	r3, r3
 8013930:	3308      	adds	r3, #8
 8013932:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013934:	4b42      	ldr	r3, [pc, #264]	; (8013a40 <mem_trim+0x21c>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	693a      	ldr	r2, [r7, #16]
 801393a:	429a      	cmp	r2, r3
 801393c:	d106      	bne.n	801394c <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 801393e:	89fb      	ldrh	r3, [r7, #14]
 8013940:	4618      	mov	r0, r3
 8013942:	f7ff fd89 	bl	8013458 <ptr_to_mem>
 8013946:	4603      	mov	r3, r0
 8013948:	4a3d      	ldr	r2, [pc, #244]	; (8013a40 <mem_trim+0x21c>)
 801394a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801394c:	89fb      	ldrh	r3, [r7, #14]
 801394e:	4618      	mov	r0, r3
 8013950:	f7ff fd82 	bl	8013458 <ptr_to_mem>
 8013954:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	2200      	movs	r2, #0
 801395a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	89ba      	ldrh	r2, [r7, #12]
 8013960:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	8afa      	ldrh	r2, [r7, #22]
 8013966:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013968:	69bb      	ldr	r3, [r7, #24]
 801396a:	89fa      	ldrh	r2, [r7, #14]
 801396c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	881b      	ldrh	r3, [r3, #0]
 8013972:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013976:	4293      	cmp	r3, r2
 8013978:	d049      	beq.n	8013a0e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	881b      	ldrh	r3, [r3, #0]
 801397e:	4618      	mov	r0, r3
 8013980:	f7ff fd6a 	bl	8013458 <ptr_to_mem>
 8013984:	4602      	mov	r2, r0
 8013986:	89fb      	ldrh	r3, [r7, #14]
 8013988:	8053      	strh	r3, [r2, #2]
 801398a:	e040      	b.n	8013a0e <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801398c:	8bfb      	ldrh	r3, [r7, #30]
 801398e:	f103 0214 	add.w	r2, r3, #20
 8013992:	8abb      	ldrh	r3, [r7, #20]
 8013994:	429a      	cmp	r2, r3
 8013996:	d83a      	bhi.n	8013a0e <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013998:	8afa      	ldrh	r2, [r7, #22]
 801399a:	8bfb      	ldrh	r3, [r7, #30]
 801399c:	4413      	add	r3, r2
 801399e:	b29b      	uxth	r3, r3
 80139a0:	3308      	adds	r3, #8
 80139a2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80139a4:	69bb      	ldr	r3, [r7, #24]
 80139a6:	881b      	ldrh	r3, [r3, #0]
 80139a8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80139ac:	4293      	cmp	r3, r2
 80139ae:	d106      	bne.n	80139be <mem_trim+0x19a>
 80139b0:	4b1d      	ldr	r3, [pc, #116]	; (8013a28 <mem_trim+0x204>)
 80139b2:	f240 3216 	movw	r2, #790	; 0x316
 80139b6:	4921      	ldr	r1, [pc, #132]	; (8013a3c <mem_trim+0x218>)
 80139b8:	481d      	ldr	r0, [pc, #116]	; (8013a30 <mem_trim+0x20c>)
 80139ba:	f00e f9af 	bl	8021d1c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80139be:	89fb      	ldrh	r3, [r7, #14]
 80139c0:	4618      	mov	r0, r3
 80139c2:	f7ff fd49 	bl	8013458 <ptr_to_mem>
 80139c6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80139c8:	4b1d      	ldr	r3, [pc, #116]	; (8013a40 <mem_trim+0x21c>)
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	693a      	ldr	r2, [r7, #16]
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d202      	bcs.n	80139d8 <mem_trim+0x1b4>
      lfree = mem2;
 80139d2:	4a1b      	ldr	r2, [pc, #108]	; (8013a40 <mem_trim+0x21c>)
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	2200      	movs	r2, #0
 80139dc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80139de:	69bb      	ldr	r3, [r7, #24]
 80139e0:	881a      	ldrh	r2, [r3, #0]
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	8afa      	ldrh	r2, [r7, #22]
 80139ea:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80139ec:	69bb      	ldr	r3, [r7, #24]
 80139ee:	89fa      	ldrh	r2, [r7, #14]
 80139f0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	881b      	ldrh	r3, [r3, #0]
 80139f6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80139fa:	4293      	cmp	r3, r2
 80139fc:	d007      	beq.n	8013a0e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80139fe:	693b      	ldr	r3, [r7, #16]
 8013a00:	881b      	ldrh	r3, [r3, #0]
 8013a02:	4618      	mov	r0, r3
 8013a04:	f7ff fd28 	bl	8013458 <ptr_to_mem>
 8013a08:	4602      	mov	r2, r0
 8013a0a:	89fb      	ldrh	r3, [r7, #14]
 8013a0c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013a0e:	480a      	ldr	r0, [pc, #40]	; (8013a38 <mem_trim+0x214>)
 8013a10:	f002 fab1 	bl	8015f76 <sys_mutex_unlock>
  return rmem;
 8013a14:	687b      	ldr	r3, [r7, #4]
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3720      	adds	r7, #32
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	240048d0 	.word	0x240048d0
 8013a24:	240048d4 	.word	0x240048d4
 8013a28:	08025390 	.word	0x08025390
 8013a2c:	08025538 	.word	0x08025538
 8013a30:	080253f4 	.word	0x080253f4
 8013a34:	08025550 	.word	0x08025550
 8013a38:	240048d8 	.word	0x240048d8
 8013a3c:	08025570 	.word	0x08025570
 8013a40:	240048dc 	.word	0x240048dc

08013a44 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b088      	sub	sp, #32
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013a4e:	88fb      	ldrh	r3, [r7, #6]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d101      	bne.n	8013a58 <mem_malloc+0x14>
    return NULL;
 8013a54:	2300      	movs	r3, #0
 8013a56:	e0e6      	b.n	8013c26 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013a58:	88fb      	ldrh	r3, [r7, #6]
 8013a5a:	3303      	adds	r3, #3
 8013a5c:	b29b      	uxth	r3, r3
 8013a5e:	f023 0303 	bic.w	r3, r3, #3
 8013a62:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013a64:	8bbb      	ldrh	r3, [r7, #28]
 8013a66:	2b0b      	cmp	r3, #11
 8013a68:	d801      	bhi.n	8013a6e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013a6a:	230c      	movs	r3, #12
 8013a6c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013a6e:	8bbb      	ldrh	r3, [r7, #28]
 8013a70:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013a74:	4293      	cmp	r3, r2
 8013a76:	d803      	bhi.n	8013a80 <mem_malloc+0x3c>
 8013a78:	8bba      	ldrh	r2, [r7, #28]
 8013a7a:	88fb      	ldrh	r3, [r7, #6]
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	d201      	bcs.n	8013a84 <mem_malloc+0x40>
    return NULL;
 8013a80:	2300      	movs	r3, #0
 8013a82:	e0d0      	b.n	8013c26 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013a84:	486a      	ldr	r0, [pc, #424]	; (8013c30 <mem_malloc+0x1ec>)
 8013a86:	f002 fa67 	bl	8015f58 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013a8a:	4b6a      	ldr	r3, [pc, #424]	; (8013c34 <mem_malloc+0x1f0>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7ff fcf4 	bl	801347c <mem_to_ptr>
 8013a94:	4603      	mov	r3, r0
 8013a96:	83fb      	strh	r3, [r7, #30]
 8013a98:	e0b9      	b.n	8013c0e <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013a9a:	8bfb      	ldrh	r3, [r7, #30]
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7ff fcdb 	bl	8013458 <ptr_to_mem>
 8013aa2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	791b      	ldrb	r3, [r3, #4]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	f040 80a9 	bne.w	8013c00 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	881b      	ldrh	r3, [r3, #0]
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	8bfb      	ldrh	r3, [r7, #30]
 8013ab6:	1ad3      	subs	r3, r2, r3
 8013ab8:	f1a3 0208 	sub.w	r2, r3, #8
 8013abc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	f0c0 809e 	bcc.w	8013c00 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	881b      	ldrh	r3, [r3, #0]
 8013ac8:	461a      	mov	r2, r3
 8013aca:	8bfb      	ldrh	r3, [r7, #30]
 8013acc:	1ad3      	subs	r3, r2, r3
 8013ace:	f1a3 0208 	sub.w	r2, r3, #8
 8013ad2:	8bbb      	ldrh	r3, [r7, #28]
 8013ad4:	3314      	adds	r3, #20
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d335      	bcc.n	8013b46 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013ada:	8bfa      	ldrh	r2, [r7, #30]
 8013adc:	8bbb      	ldrh	r3, [r7, #28]
 8013ade:	4413      	add	r3, r2
 8013ae0:	b29b      	uxth	r3, r3
 8013ae2:	3308      	adds	r3, #8
 8013ae4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013ae6:	8a7b      	ldrh	r3, [r7, #18]
 8013ae8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013aec:	4293      	cmp	r3, r2
 8013aee:	d106      	bne.n	8013afe <mem_malloc+0xba>
 8013af0:	4b51      	ldr	r3, [pc, #324]	; (8013c38 <mem_malloc+0x1f4>)
 8013af2:	f240 3287 	movw	r2, #903	; 0x387
 8013af6:	4951      	ldr	r1, [pc, #324]	; (8013c3c <mem_malloc+0x1f8>)
 8013af8:	4851      	ldr	r0, [pc, #324]	; (8013c40 <mem_malloc+0x1fc>)
 8013afa:	f00e f90f 	bl	8021d1c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013afe:	8a7b      	ldrh	r3, [r7, #18]
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7ff fca9 	bl	8013458 <ptr_to_mem>
 8013b06:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	881a      	ldrh	r2, [r3, #0]
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	8bfa      	ldrh	r2, [r7, #30]
 8013b1a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	8a7a      	ldrh	r2, [r7, #18]
 8013b20:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	2201      	movs	r2, #1
 8013b26:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	881b      	ldrh	r3, [r3, #0]
 8013b2c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013b30:	4293      	cmp	r3, r2
 8013b32:	d00b      	beq.n	8013b4c <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	881b      	ldrh	r3, [r3, #0]
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7ff fc8d 	bl	8013458 <ptr_to_mem>
 8013b3e:	4602      	mov	r2, r0
 8013b40:	8a7b      	ldrh	r3, [r7, #18]
 8013b42:	8053      	strh	r3, [r2, #2]
 8013b44:	e002      	b.n	8013b4c <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	2201      	movs	r2, #1
 8013b4a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013b4c:	4b39      	ldr	r3, [pc, #228]	; (8013c34 <mem_malloc+0x1f0>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	697a      	ldr	r2, [r7, #20]
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d127      	bne.n	8013ba6 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8013b56:	4b37      	ldr	r3, [pc, #220]	; (8013c34 <mem_malloc+0x1f0>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013b5c:	e005      	b.n	8013b6a <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013b5e:	69bb      	ldr	r3, [r7, #24]
 8013b60:	881b      	ldrh	r3, [r3, #0]
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7ff fc78 	bl	8013458 <ptr_to_mem>
 8013b68:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013b6a:	69bb      	ldr	r3, [r7, #24]
 8013b6c:	791b      	ldrb	r3, [r3, #4]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d004      	beq.n	8013b7c <mem_malloc+0x138>
 8013b72:	4b34      	ldr	r3, [pc, #208]	; (8013c44 <mem_malloc+0x200>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	69ba      	ldr	r2, [r7, #24]
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d1f0      	bne.n	8013b5e <mem_malloc+0x11a>
          }
          lfree = cur;
 8013b7c:	4a2d      	ldr	r2, [pc, #180]	; (8013c34 <mem_malloc+0x1f0>)
 8013b7e:	69bb      	ldr	r3, [r7, #24]
 8013b80:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013b82:	4b2c      	ldr	r3, [pc, #176]	; (8013c34 <mem_malloc+0x1f0>)
 8013b84:	681a      	ldr	r2, [r3, #0]
 8013b86:	4b2f      	ldr	r3, [pc, #188]	; (8013c44 <mem_malloc+0x200>)
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d00b      	beq.n	8013ba6 <mem_malloc+0x162>
 8013b8e:	4b29      	ldr	r3, [pc, #164]	; (8013c34 <mem_malloc+0x1f0>)
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	791b      	ldrb	r3, [r3, #4]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d006      	beq.n	8013ba6 <mem_malloc+0x162>
 8013b98:	4b27      	ldr	r3, [pc, #156]	; (8013c38 <mem_malloc+0x1f4>)
 8013b9a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013b9e:	492a      	ldr	r1, [pc, #168]	; (8013c48 <mem_malloc+0x204>)
 8013ba0:	4827      	ldr	r0, [pc, #156]	; (8013c40 <mem_malloc+0x1fc>)
 8013ba2:	f00e f8bb 	bl	8021d1c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013ba6:	4822      	ldr	r0, [pc, #136]	; (8013c30 <mem_malloc+0x1ec>)
 8013ba8:	f002 f9e5 	bl	8015f76 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013bac:	8bba      	ldrh	r2, [r7, #28]
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	4413      	add	r3, r2
 8013bb2:	3308      	adds	r3, #8
 8013bb4:	4a23      	ldr	r2, [pc, #140]	; (8013c44 <mem_malloc+0x200>)
 8013bb6:	6812      	ldr	r2, [r2, #0]
 8013bb8:	4293      	cmp	r3, r2
 8013bba:	d906      	bls.n	8013bca <mem_malloc+0x186>
 8013bbc:	4b1e      	ldr	r3, [pc, #120]	; (8013c38 <mem_malloc+0x1f4>)
 8013bbe:	f240 32b9 	movw	r2, #953	; 0x3b9
 8013bc2:	4922      	ldr	r1, [pc, #136]	; (8013c4c <mem_malloc+0x208>)
 8013bc4:	481e      	ldr	r0, [pc, #120]	; (8013c40 <mem_malloc+0x1fc>)
 8013bc6:	f00e f8a9 	bl	8021d1c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013bca:	697b      	ldr	r3, [r7, #20]
 8013bcc:	f003 0303 	and.w	r3, r3, #3
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d006      	beq.n	8013be2 <mem_malloc+0x19e>
 8013bd4:	4b18      	ldr	r3, [pc, #96]	; (8013c38 <mem_malloc+0x1f4>)
 8013bd6:	f240 32bb 	movw	r2, #955	; 0x3bb
 8013bda:	491d      	ldr	r1, [pc, #116]	; (8013c50 <mem_malloc+0x20c>)
 8013bdc:	4818      	ldr	r0, [pc, #96]	; (8013c40 <mem_malloc+0x1fc>)
 8013bde:	f00e f89d 	bl	8021d1c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	f003 0303 	and.w	r3, r3, #3
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d006      	beq.n	8013bfa <mem_malloc+0x1b6>
 8013bec:	4b12      	ldr	r3, [pc, #72]	; (8013c38 <mem_malloc+0x1f4>)
 8013bee:	f240 32bd 	movw	r2, #957	; 0x3bd
 8013bf2:	4918      	ldr	r1, [pc, #96]	; (8013c54 <mem_malloc+0x210>)
 8013bf4:	4812      	ldr	r0, [pc, #72]	; (8013c40 <mem_malloc+0x1fc>)
 8013bf6:	f00e f891 	bl	8021d1c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013bfa:	697b      	ldr	r3, [r7, #20]
 8013bfc:	3308      	adds	r3, #8
 8013bfe:	e012      	b.n	8013c26 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8013c00:	8bfb      	ldrh	r3, [r7, #30]
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7ff fc28 	bl	8013458 <ptr_to_mem>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	881b      	ldrh	r3, [r3, #0]
 8013c0c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013c0e:	8bfa      	ldrh	r2, [r7, #30]
 8013c10:	8bb9      	ldrh	r1, [r7, #28]
 8013c12:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 8013c16:	1a5b      	subs	r3, r3, r1
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	f4ff af3e 	bcc.w	8013a9a <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013c1e:	4804      	ldr	r0, [pc, #16]	; (8013c30 <mem_malloc+0x1ec>)
 8013c20:	f002 f9a9 	bl	8015f76 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013c24:	2300      	movs	r3, #0
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	3720      	adds	r7, #32
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}
 8013c2e:	bf00      	nop
 8013c30:	240048d8 	.word	0x240048d8
 8013c34:	240048dc 	.word	0x240048dc
 8013c38:	08025390 	.word	0x08025390
 8013c3c:	08025570 	.word	0x08025570
 8013c40:	080253f4 	.word	0x080253f4
 8013c44:	240048d4 	.word	0x240048d4
 8013c48:	08025584 	.word	0x08025584
 8013c4c:	080255a0 	.word	0x080255a0
 8013c50:	080255d0 	.word	0x080255d0
 8013c54:	08025600 	.word	0x08025600

08013c58 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013c58:	b480      	push	{r7}
 8013c5a:	b085      	sub	sp, #20
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	689b      	ldr	r3, [r3, #8]
 8013c64:	2200      	movs	r2, #0
 8013c66:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	685b      	ldr	r3, [r3, #4]
 8013c6c:	3303      	adds	r3, #3
 8013c6e:	f023 0303 	bic.w	r3, r3, #3
 8013c72:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013c74:	2300      	movs	r3, #0
 8013c76:	60fb      	str	r3, [r7, #12]
 8013c78:	e011      	b.n	8013c9e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	689b      	ldr	r3, [r3, #8]
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	689b      	ldr	r3, [r3, #8]
 8013c88:	68ba      	ldr	r2, [r7, #8]
 8013c8a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	881b      	ldrh	r3, [r3, #0]
 8013c90:	461a      	mov	r2, r3
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	4413      	add	r3, r2
 8013c96:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	60fb      	str	r3, [r7, #12]
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	885b      	ldrh	r3, [r3, #2]
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	4293      	cmp	r3, r2
 8013ca8:	dbe7      	blt.n	8013c7a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013caa:	bf00      	nop
 8013cac:	bf00      	nop
 8013cae:	3714      	adds	r7, #20
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb6:	4770      	bx	lr

08013cb8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b082      	sub	sp, #8
 8013cbc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	80fb      	strh	r3, [r7, #6]
 8013cc2:	e009      	b.n	8013cd8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013cc4:	88fb      	ldrh	r3, [r7, #6]
 8013cc6:	4a08      	ldr	r2, [pc, #32]	; (8013ce8 <memp_init+0x30>)
 8013cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f7ff ffc3 	bl	8013c58 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013cd2:	88fb      	ldrh	r3, [r7, #6]
 8013cd4:	3301      	adds	r3, #1
 8013cd6:	80fb      	strh	r3, [r7, #6]
 8013cd8:	88fb      	ldrh	r3, [r7, #6]
 8013cda:	2b0c      	cmp	r3, #12
 8013cdc:	d9f2      	bls.n	8013cc4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013cde:	bf00      	nop
 8013ce0:	bf00      	nop
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	0802811c 	.word	0x0802811c

08013cec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013cf4:	f002 f972 	bl	8015fdc <sys_arch_protect>
 8013cf8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	689b      	ldr	r3, [r3, #8]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d015      	beq.n	8013d34 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	689b      	ldr	r3, [r3, #8]
 8013d0c:	68ba      	ldr	r2, [r7, #8]
 8013d0e:	6812      	ldr	r2, [r2, #0]
 8013d10:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	f003 0303 	and.w	r3, r3, #3
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d006      	beq.n	8013d2a <do_memp_malloc_pool+0x3e>
 8013d1c:	4b09      	ldr	r3, [pc, #36]	; (8013d44 <do_memp_malloc_pool+0x58>)
 8013d1e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8013d22:	4909      	ldr	r1, [pc, #36]	; (8013d48 <do_memp_malloc_pool+0x5c>)
 8013d24:	4809      	ldr	r0, [pc, #36]	; (8013d4c <do_memp_malloc_pool+0x60>)
 8013d26:	f00d fff9 	bl	8021d1c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013d2a:	68f8      	ldr	r0, [r7, #12]
 8013d2c:	f002 f964 	bl	8015ff8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	e003      	b.n	8013d3c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013d34:	68f8      	ldr	r0, [r7, #12]
 8013d36:	f002 f95f 	bl	8015ff8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013d3a:	2300      	movs	r3, #0
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	3710      	adds	r7, #16
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}
 8013d44:	08025624 	.word	0x08025624
 8013d48:	08025674 	.word	0x08025674
 8013d4c:	08025698 	.word	0x08025698

08013d50 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d106      	bne.n	8013d6c <memp_malloc_pool+0x1c>
 8013d5e:	4b0a      	ldr	r3, [pc, #40]	; (8013d88 <memp_malloc_pool+0x38>)
 8013d60:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8013d64:	4909      	ldr	r1, [pc, #36]	; (8013d8c <memp_malloc_pool+0x3c>)
 8013d66:	480a      	ldr	r0, [pc, #40]	; (8013d90 <memp_malloc_pool+0x40>)
 8013d68:	f00d ffd8 	bl	8021d1c <iprintf>
  if (desc == NULL) {
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d101      	bne.n	8013d76 <memp_malloc_pool+0x26>
    return NULL;
 8013d72:	2300      	movs	r3, #0
 8013d74:	e003      	b.n	8013d7e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8013d76:	6878      	ldr	r0, [r7, #4]
 8013d78:	f7ff ffb8 	bl	8013cec <do_memp_malloc_pool>
 8013d7c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	3708      	adds	r7, #8
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd80      	pop	{r7, pc}
 8013d86:	bf00      	nop
 8013d88:	08025624 	.word	0x08025624
 8013d8c:	080256c0 	.word	0x080256c0
 8013d90:	08025698 	.word	0x08025698

08013d94 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b084      	sub	sp, #16
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013d9e:	79fb      	ldrb	r3, [r7, #7]
 8013da0:	2b0c      	cmp	r3, #12
 8013da2:	d908      	bls.n	8013db6 <memp_malloc+0x22>
 8013da4:	4b0a      	ldr	r3, [pc, #40]	; (8013dd0 <memp_malloc+0x3c>)
 8013da6:	f240 1257 	movw	r2, #343	; 0x157
 8013daa:	490a      	ldr	r1, [pc, #40]	; (8013dd4 <memp_malloc+0x40>)
 8013dac:	480a      	ldr	r0, [pc, #40]	; (8013dd8 <memp_malloc+0x44>)
 8013dae:	f00d ffb5 	bl	8021d1c <iprintf>
 8013db2:	2300      	movs	r3, #0
 8013db4:	e008      	b.n	8013dc8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013db6:	79fb      	ldrb	r3, [r7, #7]
 8013db8:	4a08      	ldr	r2, [pc, #32]	; (8013ddc <memp_malloc+0x48>)
 8013dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7ff ff94 	bl	8013cec <do_memp_malloc_pool>
 8013dc4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3710      	adds	r7, #16
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}
 8013dd0:	08025624 	.word	0x08025624
 8013dd4:	080256d4 	.word	0x080256d4
 8013dd8:	08025698 	.word	0x08025698
 8013ddc:	0802811c 	.word	0x0802811c

08013de0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	f003 0303 	and.w	r3, r3, #3
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d006      	beq.n	8013e02 <do_memp_free_pool+0x22>
 8013df4:	4b0d      	ldr	r3, [pc, #52]	; (8013e2c <do_memp_free_pool+0x4c>)
 8013df6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8013dfa:	490d      	ldr	r1, [pc, #52]	; (8013e30 <do_memp_free_pool+0x50>)
 8013dfc:	480d      	ldr	r0, [pc, #52]	; (8013e34 <do_memp_free_pool+0x54>)
 8013dfe:	f00d ff8d 	bl	8021d1c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013e06:	f002 f8e9 	bl	8015fdc <sys_arch_protect>
 8013e0a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	689b      	ldr	r3, [r3, #8]
 8013e10:	681a      	ldr	r2, [r3, #0]
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	689b      	ldr	r3, [r3, #8]
 8013e1a:	68fa      	ldr	r2, [r7, #12]
 8013e1c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013e1e:	68b8      	ldr	r0, [r7, #8]
 8013e20:	f002 f8ea 	bl	8015ff8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013e24:	bf00      	nop
 8013e26:	3710      	adds	r7, #16
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}
 8013e2c:	08025624 	.word	0x08025624
 8013e30:	080256f4 	.word	0x080256f4
 8013e34:	08025698 	.word	0x08025698

08013e38 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b082      	sub	sp, #8
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d106      	bne.n	8013e56 <memp_free_pool+0x1e>
 8013e48:	4b0a      	ldr	r3, [pc, #40]	; (8013e74 <memp_free_pool+0x3c>)
 8013e4a:	f240 1295 	movw	r2, #405	; 0x195
 8013e4e:	490a      	ldr	r1, [pc, #40]	; (8013e78 <memp_free_pool+0x40>)
 8013e50:	480a      	ldr	r0, [pc, #40]	; (8013e7c <memp_free_pool+0x44>)
 8013e52:	f00d ff63 	bl	8021d1c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d007      	beq.n	8013e6c <memp_free_pool+0x34>
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d004      	beq.n	8013e6c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013e62:	6839      	ldr	r1, [r7, #0]
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f7ff ffbb 	bl	8013de0 <do_memp_free_pool>
 8013e6a:	e000      	b.n	8013e6e <memp_free_pool+0x36>
    return;
 8013e6c:	bf00      	nop
}
 8013e6e:	3708      	adds	r7, #8
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}
 8013e74:	08025624 	.word	0x08025624
 8013e78:	080256c0 	.word	0x080256c0
 8013e7c:	08025698 	.word	0x08025698

08013e80 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	4603      	mov	r3, r0
 8013e88:	6039      	str	r1, [r7, #0]
 8013e8a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013e8c:	79fb      	ldrb	r3, [r7, #7]
 8013e8e:	2b0c      	cmp	r3, #12
 8013e90:	d907      	bls.n	8013ea2 <memp_free+0x22>
 8013e92:	4b0c      	ldr	r3, [pc, #48]	; (8013ec4 <memp_free+0x44>)
 8013e94:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013e98:	490b      	ldr	r1, [pc, #44]	; (8013ec8 <memp_free+0x48>)
 8013e9a:	480c      	ldr	r0, [pc, #48]	; (8013ecc <memp_free+0x4c>)
 8013e9c:	f00d ff3e 	bl	8021d1c <iprintf>
 8013ea0:	e00c      	b.n	8013ebc <memp_free+0x3c>

  if (mem == NULL) {
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d008      	beq.n	8013eba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013ea8:	79fb      	ldrb	r3, [r7, #7]
 8013eaa:	4a09      	ldr	r2, [pc, #36]	; (8013ed0 <memp_free+0x50>)
 8013eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013eb0:	6839      	ldr	r1, [r7, #0]
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7ff ff94 	bl	8013de0 <do_memp_free_pool>
 8013eb8:	e000      	b.n	8013ebc <memp_free+0x3c>
    return;
 8013eba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013ebc:	3708      	adds	r7, #8
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd80      	pop	{r7, pc}
 8013ec2:	bf00      	nop
 8013ec4:	08025624 	.word	0x08025624
 8013ec8:	08025714 	.word	0x08025714
 8013ecc:	08025698 	.word	0x08025698
 8013ed0:	0802811c 	.word	0x0802811c

08013ed4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d013      	beq.n	8013f0a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d00b      	beq.n	8013f02 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f000 fefc 	bl	8014cec <pbuf_free>
      buf->p = buf->ptr = NULL;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	605a      	str	r2, [r3, #4]
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	685a      	ldr	r2, [r3, #4]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8013f02:	6879      	ldr	r1, [r7, #4]
 8013f04:	2006      	movs	r0, #6
 8013f06:	f7ff ffbb 	bl	8013e80 <memp_free>
  }
}
 8013f0a:	bf00      	nop
 8013f0c:	3708      	adds	r7, #8
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}
	...

08013f14 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d106      	bne.n	8013f30 <netbuf_free+0x1c>
 8013f22:	4b0d      	ldr	r3, [pc, #52]	; (8013f58 <netbuf_free+0x44>)
 8013f24:	2281      	movs	r2, #129	; 0x81
 8013f26:	490d      	ldr	r1, [pc, #52]	; (8013f5c <netbuf_free+0x48>)
 8013f28:	480d      	ldr	r0, [pc, #52]	; (8013f60 <netbuf_free+0x4c>)
 8013f2a:	f00d fef7 	bl	8021d1c <iprintf>
 8013f2e:	e00f      	b.n	8013f50 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d004      	beq.n	8013f42 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f000 fed5 	bl	8014cec <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2200      	movs	r2, #0
 8013f46:	605a      	str	r2, [r3, #4]
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	685a      	ldr	r2, [r3, #4]
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8013f50:	3708      	adds	r7, #8
 8013f52:	46bd      	mov	sp, r7
 8013f54:	bd80      	pop	{r7, pc}
 8013f56:	bf00      	nop
 8013f58:	08025730 	.word	0x08025730
 8013f5c:	080257e8 	.word	0x080257e8
 8013f60:	0802579c 	.word	0x0802579c

08013f64 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b084      	sub	sp, #16
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	60b9      	str	r1, [r7, #8]
 8013f6e:	4613      	mov	r3, r2
 8013f70:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d108      	bne.n	8013f8a <netbuf_ref+0x26>
 8013f78:	4b1c      	ldr	r3, [pc, #112]	; (8013fec <netbuf_ref+0x88>)
 8013f7a:	2299      	movs	r2, #153	; 0x99
 8013f7c:	491c      	ldr	r1, [pc, #112]	; (8013ff0 <netbuf_ref+0x8c>)
 8013f7e:	481d      	ldr	r0, [pc, #116]	; (8013ff4 <netbuf_ref+0x90>)
 8013f80:	f00d fecc 	bl	8021d1c <iprintf>
 8013f84:	f06f 030f 	mvn.w	r3, #15
 8013f88:	e02b      	b.n	8013fe2 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d004      	beq.n	8013f9c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	4618      	mov	r0, r3
 8013f98:	f000 fea8 	bl	8014cec <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8013f9c:	2241      	movs	r2, #65	; 0x41
 8013f9e:	2100      	movs	r1, #0
 8013fa0:	2036      	movs	r0, #54	; 0x36
 8013fa2:	f000 fbbf 	bl	8014724 <pbuf_alloc>
 8013fa6:	4602      	mov	r2, r0
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d105      	bne.n	8013fc0 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8013fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013fbe:	e010      	b.n	8013fe2 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	68ba      	ldr	r2, [r7, #8]
 8013fc6:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	88fa      	ldrh	r2, [r7, #6]
 8013fce:	811a      	strh	r2, [r3, #8]
 8013fd0:	68fa      	ldr	r2, [r7, #12]
 8013fd2:	6812      	ldr	r2, [r2, #0]
 8013fd4:	891b      	ldrh	r3, [r3, #8]
 8013fd6:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	681a      	ldr	r2, [r3, #0]
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8013fe0:	2300      	movs	r3, #0
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3710      	adds	r7, #16
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}
 8013fea:	bf00      	nop
 8013fec:	08025730 	.word	0x08025730
 8013ff0:	08025804 	.word	0x08025804
 8013ff4:	0802579c 	.word	0x0802579c

08013ff8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013ff8:	b480      	push	{r7}
 8013ffa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013ffc:	bf00      	nop
 8013ffe:	46bd      	mov	sp, r7
 8014000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014004:	4770      	bx	lr
	...

08014008 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b086      	sub	sp, #24
 801400c:	af00      	add	r7, sp, #0
 801400e:	60f8      	str	r0, [r7, #12]
 8014010:	60b9      	str	r1, [r7, #8]
 8014012:	607a      	str	r2, [r7, #4]
 8014014:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d108      	bne.n	801402e <netif_add+0x26>
 801401c:	4b57      	ldr	r3, [pc, #348]	; (801417c <netif_add+0x174>)
 801401e:	f240 1227 	movw	r2, #295	; 0x127
 8014022:	4957      	ldr	r1, [pc, #348]	; (8014180 <netif_add+0x178>)
 8014024:	4857      	ldr	r0, [pc, #348]	; (8014184 <netif_add+0x17c>)
 8014026:	f00d fe79 	bl	8021d1c <iprintf>
 801402a:	2300      	movs	r3, #0
 801402c:	e0a2      	b.n	8014174 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014030:	2b00      	cmp	r3, #0
 8014032:	d108      	bne.n	8014046 <netif_add+0x3e>
 8014034:	4b51      	ldr	r3, [pc, #324]	; (801417c <netif_add+0x174>)
 8014036:	f44f 7294 	mov.w	r2, #296	; 0x128
 801403a:	4953      	ldr	r1, [pc, #332]	; (8014188 <netif_add+0x180>)
 801403c:	4851      	ldr	r0, [pc, #324]	; (8014184 <netif_add+0x17c>)
 801403e:	f00d fe6d 	bl	8021d1c <iprintf>
 8014042:	2300      	movs	r3, #0
 8014044:	e096      	b.n	8014174 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d101      	bne.n	8014050 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801404c:	4b4f      	ldr	r3, [pc, #316]	; (801418c <netif_add+0x184>)
 801404e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d101      	bne.n	801405a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8014056:	4b4d      	ldr	r3, [pc, #308]	; (801418c <netif_add+0x184>)
 8014058:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d101      	bne.n	8014064 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8014060:	4b4a      	ldr	r3, [pc, #296]	; (801418c <netif_add+0x184>)
 8014062:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	2200      	movs	r2, #0
 8014068:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	2200      	movs	r2, #0
 801406e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	2200      	movs	r2, #0
 8014074:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	4a45      	ldr	r2, [pc, #276]	; (8014190 <netif_add+0x188>)
 801407a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	2200      	movs	r2, #0
 8014080:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	2200      	movs	r2, #0
 8014086:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	2200      	movs	r2, #0
 801408e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	6a3a      	ldr	r2, [r7, #32]
 8014094:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8014096:	4b3f      	ldr	r3, [pc, #252]	; (8014194 <netif_add+0x18c>)
 8014098:	781a      	ldrb	r2, [r3, #0]
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140a4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	687a      	ldr	r2, [r7, #4]
 80140aa:	68b9      	ldr	r1, [r7, #8]
 80140ac:	68f8      	ldr	r0, [r7, #12]
 80140ae:	f000 f913 	bl	80142d8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80140b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b4:	68f8      	ldr	r0, [r7, #12]
 80140b6:	4798      	blx	r3
 80140b8:	4603      	mov	r3, r0
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d001      	beq.n	80140c2 <netif_add+0xba>
    return NULL;
 80140be:	2300      	movs	r3, #0
 80140c0:	e058      	b.n	8014174 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80140c8:	2bff      	cmp	r3, #255	; 0xff
 80140ca:	d103      	bne.n	80140d4 <netif_add+0xcc>
        netif->num = 0;
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	2200      	movs	r2, #0
 80140d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80140d4:	2300      	movs	r3, #0
 80140d6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80140d8:	4b2f      	ldr	r3, [pc, #188]	; (8014198 <netif_add+0x190>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	617b      	str	r3, [r7, #20]
 80140de:	e02b      	b.n	8014138 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80140e0:	697a      	ldr	r2, [r7, #20]
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d106      	bne.n	80140f6 <netif_add+0xee>
 80140e8:	4b24      	ldr	r3, [pc, #144]	; (801417c <netif_add+0x174>)
 80140ea:	f240 128b 	movw	r2, #395	; 0x18b
 80140ee:	492b      	ldr	r1, [pc, #172]	; (801419c <netif_add+0x194>)
 80140f0:	4824      	ldr	r0, [pc, #144]	; (8014184 <netif_add+0x17c>)
 80140f2:	f00d fe13 	bl	8021d1c <iprintf>
        num_netifs++;
 80140f6:	693b      	ldr	r3, [r7, #16]
 80140f8:	3301      	adds	r3, #1
 80140fa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80140fc:	693b      	ldr	r3, [r7, #16]
 80140fe:	2bff      	cmp	r3, #255	; 0xff
 8014100:	dd06      	ble.n	8014110 <netif_add+0x108>
 8014102:	4b1e      	ldr	r3, [pc, #120]	; (801417c <netif_add+0x174>)
 8014104:	f240 128d 	movw	r2, #397	; 0x18d
 8014108:	4925      	ldr	r1, [pc, #148]	; (80141a0 <netif_add+0x198>)
 801410a:	481e      	ldr	r0, [pc, #120]	; (8014184 <netif_add+0x17c>)
 801410c:	f00d fe06 	bl	8021d1c <iprintf>
        if (netif2->num == netif->num) {
 8014110:	697b      	ldr	r3, [r7, #20]
 8014112:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801411c:	429a      	cmp	r2, r3
 801411e:	d108      	bne.n	8014132 <netif_add+0x12a>
          netif->num++;
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014126:	3301      	adds	r3, #1
 8014128:	b2da      	uxtb	r2, r3
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8014130:	e005      	b.n	801413e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014132:	697b      	ldr	r3, [r7, #20]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	617b      	str	r3, [r7, #20]
 8014138:	697b      	ldr	r3, [r7, #20]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d1d0      	bne.n	80140e0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801413e:	697b      	ldr	r3, [r7, #20]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d1be      	bne.n	80140c2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801414a:	2bfe      	cmp	r3, #254	; 0xfe
 801414c:	d103      	bne.n	8014156 <netif_add+0x14e>
    netif_num = 0;
 801414e:	4b11      	ldr	r3, [pc, #68]	; (8014194 <netif_add+0x18c>)
 8014150:	2200      	movs	r2, #0
 8014152:	701a      	strb	r2, [r3, #0]
 8014154:	e006      	b.n	8014164 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801415c:	3301      	adds	r3, #1
 801415e:	b2da      	uxtb	r2, r3
 8014160:	4b0c      	ldr	r3, [pc, #48]	; (8014194 <netif_add+0x18c>)
 8014162:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8014164:	4b0c      	ldr	r3, [pc, #48]	; (8014198 <netif_add+0x190>)
 8014166:	681a      	ldr	r2, [r3, #0]
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801416c:	4a0a      	ldr	r2, [pc, #40]	; (8014198 <netif_add+0x190>)
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8014172:	68fb      	ldr	r3, [r7, #12]
}
 8014174:	4618      	mov	r0, r3
 8014176:	3718      	adds	r7, #24
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}
 801417c:	080258e4 	.word	0x080258e4
 8014180:	08025994 	.word	0x08025994
 8014184:	08025950 	.word	0x08025950
 8014188:	080259b0 	.word	0x080259b0
 801418c:	0802807c 	.word	0x0802807c
 8014190:	080145b3 	.word	0x080145b3
 8014194:	24004914 	.word	0x24004914
 8014198:	2400d234 	.word	0x2400d234
 801419c:	080259d4 	.word	0x080259d4
 80141a0:	080259e8 	.word	0x080259e8

080141a4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b082      	sub	sp, #8
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
 80141ac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80141ae:	6839      	ldr	r1, [r7, #0]
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f003 fd01 	bl	8017bb8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80141b6:	6839      	ldr	r1, [r7, #0]
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f008 ffe7 	bl	801d18c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80141be:	bf00      	nop
 80141c0:	3708      	adds	r7, #8
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}
	...

080141c8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b086      	sub	sp, #24
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	60f8      	str	r0, [r7, #12]
 80141d0:	60b9      	str	r1, [r7, #8]
 80141d2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d106      	bne.n	80141e8 <netif_do_set_ipaddr+0x20>
 80141da:	4b1d      	ldr	r3, [pc, #116]	; (8014250 <netif_do_set_ipaddr+0x88>)
 80141dc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80141e0:	491c      	ldr	r1, [pc, #112]	; (8014254 <netif_do_set_ipaddr+0x8c>)
 80141e2:	481d      	ldr	r0, [pc, #116]	; (8014258 <netif_do_set_ipaddr+0x90>)
 80141e4:	f00d fd9a 	bl	8021d1c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d106      	bne.n	80141fc <netif_do_set_ipaddr+0x34>
 80141ee:	4b18      	ldr	r3, [pc, #96]	; (8014250 <netif_do_set_ipaddr+0x88>)
 80141f0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80141f4:	4917      	ldr	r1, [pc, #92]	; (8014254 <netif_do_set_ipaddr+0x8c>)
 80141f6:	4818      	ldr	r0, [pc, #96]	; (8014258 <netif_do_set_ipaddr+0x90>)
 80141f8:	f00d fd90 	bl	8021d1c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	681a      	ldr	r2, [r3, #0]
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	3304      	adds	r3, #4
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	429a      	cmp	r2, r3
 8014208:	d01c      	beq.n	8014244 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	3304      	adds	r3, #4
 8014214:	681a      	ldr	r2, [r3, #0]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801421a:	f107 0314 	add.w	r3, r7, #20
 801421e:	4619      	mov	r1, r3
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f7ff ffbf 	bl	80141a4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d002      	beq.n	8014232 <netif_do_set_ipaddr+0x6a>
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	e000      	b.n	8014234 <netif_do_set_ipaddr+0x6c>
 8014232:	2300      	movs	r3, #0
 8014234:	68fa      	ldr	r2, [r7, #12]
 8014236:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8014238:	2101      	movs	r1, #1
 801423a:	68f8      	ldr	r0, [r7, #12]
 801423c:	f000 f8d2 	bl	80143e4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8014240:	2301      	movs	r3, #1
 8014242:	e000      	b.n	8014246 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8014244:	2300      	movs	r3, #0
}
 8014246:	4618      	mov	r0, r3
 8014248:	3718      	adds	r7, #24
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}
 801424e:	bf00      	nop
 8014250:	080258e4 	.word	0x080258e4
 8014254:	08025a18 	.word	0x08025a18
 8014258:	08025950 	.word	0x08025950

0801425c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801425c:	b480      	push	{r7}
 801425e:	b085      	sub	sp, #20
 8014260:	af00      	add	r7, sp, #0
 8014262:	60f8      	str	r0, [r7, #12]
 8014264:	60b9      	str	r1, [r7, #8]
 8014266:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	681a      	ldr	r2, [r3, #0]
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	3308      	adds	r3, #8
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	429a      	cmp	r2, r3
 8014274:	d00a      	beq.n	801428c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d002      	beq.n	8014282 <netif_do_set_netmask+0x26>
 801427c:	68bb      	ldr	r3, [r7, #8]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	e000      	b.n	8014284 <netif_do_set_netmask+0x28>
 8014282:	2300      	movs	r3, #0
 8014284:	68fa      	ldr	r2, [r7, #12]
 8014286:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8014288:	2301      	movs	r3, #1
 801428a:	e000      	b.n	801428e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801428c:	2300      	movs	r3, #0
}
 801428e:	4618      	mov	r0, r3
 8014290:	3714      	adds	r7, #20
 8014292:	46bd      	mov	sp, r7
 8014294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014298:	4770      	bx	lr

0801429a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801429a:	b480      	push	{r7}
 801429c:	b085      	sub	sp, #20
 801429e:	af00      	add	r7, sp, #0
 80142a0:	60f8      	str	r0, [r7, #12]
 80142a2:	60b9      	str	r1, [r7, #8]
 80142a4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80142a6:	68bb      	ldr	r3, [r7, #8]
 80142a8:	681a      	ldr	r2, [r3, #0]
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	330c      	adds	r3, #12
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d00a      	beq.n	80142ca <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d002      	beq.n	80142c0 <netif_do_set_gw+0x26>
 80142ba:	68bb      	ldr	r3, [r7, #8]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	e000      	b.n	80142c2 <netif_do_set_gw+0x28>
 80142c0:	2300      	movs	r3, #0
 80142c2:	68fa      	ldr	r2, [r7, #12]
 80142c4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80142c6:	2301      	movs	r3, #1
 80142c8:	e000      	b.n	80142cc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80142ca:	2300      	movs	r3, #0
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	3714      	adds	r7, #20
 80142d0:	46bd      	mov	sp, r7
 80142d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d6:	4770      	bx	lr

080142d8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b088      	sub	sp, #32
 80142dc:	af00      	add	r7, sp, #0
 80142de:	60f8      	str	r0, [r7, #12]
 80142e0:	60b9      	str	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
 80142e4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80142e6:	2300      	movs	r3, #0
 80142e8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80142ea:	2300      	movs	r3, #0
 80142ec:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80142ee:	68bb      	ldr	r3, [r7, #8]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d101      	bne.n	80142f8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80142f4:	4b1c      	ldr	r3, [pc, #112]	; (8014368 <netif_set_addr+0x90>)
 80142f6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d101      	bne.n	8014302 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80142fe:	4b1a      	ldr	r3, [pc, #104]	; (8014368 <netif_set_addr+0x90>)
 8014300:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014302:	683b      	ldr	r3, [r7, #0]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d101      	bne.n	801430c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8014308:	4b17      	ldr	r3, [pc, #92]	; (8014368 <netif_set_addr+0x90>)
 801430a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d003      	beq.n	801431a <netif_set_addr+0x42>
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d101      	bne.n	801431e <netif_set_addr+0x46>
 801431a:	2301      	movs	r3, #1
 801431c:	e000      	b.n	8014320 <netif_set_addr+0x48>
 801431e:	2300      	movs	r3, #0
 8014320:	617b      	str	r3, [r7, #20]
  if (remove) {
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d006      	beq.n	8014336 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014328:	f107 0310 	add.w	r3, r7, #16
 801432c:	461a      	mov	r2, r3
 801432e:	68b9      	ldr	r1, [r7, #8]
 8014330:	68f8      	ldr	r0, [r7, #12]
 8014332:	f7ff ff49 	bl	80141c8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8014336:	69fa      	ldr	r2, [r7, #28]
 8014338:	6879      	ldr	r1, [r7, #4]
 801433a:	68f8      	ldr	r0, [r7, #12]
 801433c:	f7ff ff8e 	bl	801425c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8014340:	69ba      	ldr	r2, [r7, #24]
 8014342:	6839      	ldr	r1, [r7, #0]
 8014344:	68f8      	ldr	r0, [r7, #12]
 8014346:	f7ff ffa8 	bl	801429a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801434a:	697b      	ldr	r3, [r7, #20]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d106      	bne.n	801435e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014350:	f107 0310 	add.w	r3, r7, #16
 8014354:	461a      	mov	r2, r3
 8014356:	68b9      	ldr	r1, [r7, #8]
 8014358:	68f8      	ldr	r0, [r7, #12]
 801435a:	f7ff ff35 	bl	80141c8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801435e:	bf00      	nop
 8014360:	3720      	adds	r7, #32
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	0802807c 	.word	0x0802807c

0801436c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801436c:	b480      	push	{r7}
 801436e:	b083      	sub	sp, #12
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8014374:	4a04      	ldr	r2, [pc, #16]	; (8014388 <netif_set_default+0x1c>)
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801437a:	bf00      	nop
 801437c:	370c      	adds	r7, #12
 801437e:	46bd      	mov	sp, r7
 8014380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014384:	4770      	bx	lr
 8014386:	bf00      	nop
 8014388:	2400d238 	.word	0x2400d238

0801438c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b082      	sub	sp, #8
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d107      	bne.n	80143aa <netif_set_up+0x1e>
 801439a:	4b0f      	ldr	r3, [pc, #60]	; (80143d8 <netif_set_up+0x4c>)
 801439c:	f44f 7254 	mov.w	r2, #848	; 0x350
 80143a0:	490e      	ldr	r1, [pc, #56]	; (80143dc <netif_set_up+0x50>)
 80143a2:	480f      	ldr	r0, [pc, #60]	; (80143e0 <netif_set_up+0x54>)
 80143a4:	f00d fcba 	bl	8021d1c <iprintf>
 80143a8:	e013      	b.n	80143d2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143b0:	f003 0301 	and.w	r3, r3, #1
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d10c      	bne.n	80143d2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143be:	f043 0301 	orr.w	r3, r3, #1
 80143c2:	b2da      	uxtb	r2, r3
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80143ca:	2103      	movs	r1, #3
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f000 f809 	bl	80143e4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80143d2:	3708      	adds	r7, #8
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}
 80143d8:	080258e4 	.word	0x080258e4
 80143dc:	08025a88 	.word	0x08025a88
 80143e0:	08025950 	.word	0x08025950

080143e4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b082      	sub	sp, #8
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
 80143ec:	460b      	mov	r3, r1
 80143ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d106      	bne.n	8014404 <netif_issue_reports+0x20>
 80143f6:	4b18      	ldr	r3, [pc, #96]	; (8014458 <netif_issue_reports+0x74>)
 80143f8:	f240 326d 	movw	r2, #877	; 0x36d
 80143fc:	4917      	ldr	r1, [pc, #92]	; (801445c <netif_issue_reports+0x78>)
 80143fe:	4818      	ldr	r0, [pc, #96]	; (8014460 <netif_issue_reports+0x7c>)
 8014400:	f00d fc8c 	bl	8021d1c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801440a:	f003 0304 	and.w	r3, r3, #4
 801440e:	2b00      	cmp	r3, #0
 8014410:	d01e      	beq.n	8014450 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014418:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801441c:	2b00      	cmp	r3, #0
 801441e:	d017      	beq.n	8014450 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014420:	78fb      	ldrb	r3, [r7, #3]
 8014422:	f003 0301 	and.w	r3, r3, #1
 8014426:	2b00      	cmp	r3, #0
 8014428:	d013      	beq.n	8014452 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	3304      	adds	r3, #4
 801442e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014430:	2b00      	cmp	r3, #0
 8014432:	d00e      	beq.n	8014452 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801443a:	f003 0308 	and.w	r3, r3, #8
 801443e:	2b00      	cmp	r3, #0
 8014440:	d007      	beq.n	8014452 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	3304      	adds	r3, #4
 8014446:	4619      	mov	r1, r3
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7fd fa5b 	bl	8011904 <etharp_request>
 801444e:	e000      	b.n	8014452 <netif_issue_reports+0x6e>
    return;
 8014450:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8014452:	3708      	adds	r7, #8
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}
 8014458:	080258e4 	.word	0x080258e4
 801445c:	08025aa4 	.word	0x08025aa4
 8014460:	08025950 	.word	0x08025950

08014464 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b082      	sub	sp, #8
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d107      	bne.n	8014482 <netif_set_down+0x1e>
 8014472:	4b12      	ldr	r3, [pc, #72]	; (80144bc <netif_set_down+0x58>)
 8014474:	f240 329b 	movw	r2, #923	; 0x39b
 8014478:	4911      	ldr	r1, [pc, #68]	; (80144c0 <netif_set_down+0x5c>)
 801447a:	4812      	ldr	r0, [pc, #72]	; (80144c4 <netif_set_down+0x60>)
 801447c:	f00d fc4e 	bl	8021d1c <iprintf>
 8014480:	e019      	b.n	80144b6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014488:	f003 0301 	and.w	r3, r3, #1
 801448c:	2b00      	cmp	r3, #0
 801448e:	d012      	beq.n	80144b6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014496:	f023 0301 	bic.w	r3, r3, #1
 801449a:	b2da      	uxtb	r2, r3
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80144a8:	f003 0308 	and.w	r3, r3, #8
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d002      	beq.n	80144b6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f7fc fde5 	bl	8011080 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80144b6:	3708      	adds	r7, #8
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd80      	pop	{r7, pc}
 80144bc:	080258e4 	.word	0x080258e4
 80144c0:	08025ac8 	.word	0x08025ac8
 80144c4:	08025950 	.word	0x08025950

080144c8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b082      	sub	sp, #8
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d107      	bne.n	80144e6 <netif_set_link_up+0x1e>
 80144d6:	4b13      	ldr	r3, [pc, #76]	; (8014524 <netif_set_link_up+0x5c>)
 80144d8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80144dc:	4912      	ldr	r1, [pc, #72]	; (8014528 <netif_set_link_up+0x60>)
 80144de:	4813      	ldr	r0, [pc, #76]	; (801452c <netif_set_link_up+0x64>)
 80144e0:	f00d fc1c 	bl	8021d1c <iprintf>
 80144e4:	e01b      	b.n	801451e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80144ec:	f003 0304 	and.w	r3, r3, #4
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d114      	bne.n	801451e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80144fa:	f043 0304 	orr.w	r3, r3, #4
 80144fe:	b2da      	uxtb	r2, r3
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014506:	2103      	movs	r1, #3
 8014508:	6878      	ldr	r0, [r7, #4]
 801450a:	f7ff ff6b 	bl	80143e4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	69db      	ldr	r3, [r3, #28]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d003      	beq.n	801451e <netif_set_link_up+0x56>
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	69db      	ldr	r3, [r3, #28]
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801451e:	3708      	adds	r7, #8
 8014520:	46bd      	mov	sp, r7
 8014522:	bd80      	pop	{r7, pc}
 8014524:	080258e4 	.word	0x080258e4
 8014528:	08025ae8 	.word	0x08025ae8
 801452c:	08025950 	.word	0x08025950

08014530 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b082      	sub	sp, #8
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d107      	bne.n	801454e <netif_set_link_down+0x1e>
 801453e:	4b11      	ldr	r3, [pc, #68]	; (8014584 <netif_set_link_down+0x54>)
 8014540:	f240 4206 	movw	r2, #1030	; 0x406
 8014544:	4910      	ldr	r1, [pc, #64]	; (8014588 <netif_set_link_down+0x58>)
 8014546:	4811      	ldr	r0, [pc, #68]	; (801458c <netif_set_link_down+0x5c>)
 8014548:	f00d fbe8 	bl	8021d1c <iprintf>
 801454c:	e017      	b.n	801457e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014554:	f003 0304 	and.w	r3, r3, #4
 8014558:	2b00      	cmp	r3, #0
 801455a:	d010      	beq.n	801457e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014562:	f023 0304 	bic.w	r3, r3, #4
 8014566:	b2da      	uxtb	r2, r3
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	69db      	ldr	r3, [r3, #28]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d003      	beq.n	801457e <netif_set_link_down+0x4e>
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	69db      	ldr	r3, [r3, #28]
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801457e:	3708      	adds	r7, #8
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}
 8014584:	080258e4 	.word	0x080258e4
 8014588:	08025b0c 	.word	0x08025b0c
 801458c:	08025950 	.word	0x08025950

08014590 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8014590:	b480      	push	{r7}
 8014592:	b083      	sub	sp, #12
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
 8014598:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d002      	beq.n	80145a6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	683a      	ldr	r2, [r7, #0]
 80145a4:	61da      	str	r2, [r3, #28]
  }
}
 80145a6:	bf00      	nop
 80145a8:	370c      	adds	r7, #12
 80145aa:	46bd      	mov	sp, r7
 80145ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b0:	4770      	bx	lr

080145b2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80145b2:	b480      	push	{r7}
 80145b4:	b085      	sub	sp, #20
 80145b6:	af00      	add	r7, sp, #0
 80145b8:	60f8      	str	r0, [r7, #12]
 80145ba:	60b9      	str	r1, [r7, #8]
 80145bc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80145be:	f06f 030b 	mvn.w	r3, #11
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	3714      	adds	r7, #20
 80145c6:	46bd      	mov	sp, r7
 80145c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145cc:	4770      	bx	lr
	...

080145d0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80145d0:	b480      	push	{r7}
 80145d2:	b085      	sub	sp, #20
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	4603      	mov	r3, r0
 80145d8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80145da:	79fb      	ldrb	r3, [r7, #7]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d013      	beq.n	8014608 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80145e0:	4b0d      	ldr	r3, [pc, #52]	; (8014618 <netif_get_by_index+0x48>)
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	60fb      	str	r3, [r7, #12]
 80145e6:	e00c      	b.n	8014602 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80145ee:	3301      	adds	r3, #1
 80145f0:	b2db      	uxtb	r3, r3
 80145f2:	79fa      	ldrb	r2, [r7, #7]
 80145f4:	429a      	cmp	r2, r3
 80145f6:	d101      	bne.n	80145fc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	e006      	b.n	801460a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	60fb      	str	r3, [r7, #12]
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d1ef      	bne.n	80145e8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014608:	2300      	movs	r3, #0
}
 801460a:	4618      	mov	r0, r3
 801460c:	3714      	adds	r7, #20
 801460e:	46bd      	mov	sp, r7
 8014610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014614:	4770      	bx	lr
 8014616:	bf00      	nop
 8014618:	2400d234 	.word	0x2400d234

0801461c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b082      	sub	sp, #8
 8014620:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8014622:	f001 fcdb 	bl	8015fdc <sys_arch_protect>
 8014626:	6038      	str	r0, [r7, #0]
 8014628:	4b0d      	ldr	r3, [pc, #52]	; (8014660 <pbuf_free_ooseq+0x44>)
 801462a:	2200      	movs	r2, #0
 801462c:	701a      	strb	r2, [r3, #0]
 801462e:	6838      	ldr	r0, [r7, #0]
 8014630:	f001 fce2 	bl	8015ff8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014634:	4b0b      	ldr	r3, [pc, #44]	; (8014664 <pbuf_free_ooseq+0x48>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	607b      	str	r3, [r7, #4]
 801463a:	e00a      	b.n	8014652 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014640:	2b00      	cmp	r3, #0
 8014642:	d003      	beq.n	801464c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f003 faf5 	bl	8017c34 <tcp_free_ooseq>
      return;
 801464a:	e005      	b.n	8014658 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	68db      	ldr	r3, [r3, #12]
 8014650:	607b      	str	r3, [r7, #4]
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d1f1      	bne.n	801463c <pbuf_free_ooseq+0x20>
    }
  }
}
 8014658:	3708      	adds	r7, #8
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}
 801465e:	bf00      	nop
 8014660:	2400d23c 	.word	0x2400d23c
 8014664:	2400d24c 	.word	0x2400d24c

08014668 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b082      	sub	sp, #8
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8014670:	f7ff ffd4 	bl	801461c <pbuf_free_ooseq>
}
 8014674:	bf00      	nop
 8014676:	3708      	adds	r7, #8
 8014678:	46bd      	mov	sp, r7
 801467a:	bd80      	pop	{r7, pc}

0801467c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b082      	sub	sp, #8
 8014680:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8014682:	f001 fcab 	bl	8015fdc <sys_arch_protect>
 8014686:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014688:	4b0f      	ldr	r3, [pc, #60]	; (80146c8 <pbuf_pool_is_empty+0x4c>)
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801468e:	4b0e      	ldr	r3, [pc, #56]	; (80146c8 <pbuf_pool_is_empty+0x4c>)
 8014690:	2201      	movs	r2, #1
 8014692:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f001 fcaf 	bl	8015ff8 <sys_arch_unprotect>

  if (!queued) {
 801469a:	78fb      	ldrb	r3, [r7, #3]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d10f      	bne.n	80146c0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80146a0:	2100      	movs	r1, #0
 80146a2:	480a      	ldr	r0, [pc, #40]	; (80146cc <pbuf_pool_is_empty+0x50>)
 80146a4:	f007 fde4 	bl	801c270 <tcpip_try_callback>
 80146a8:	4603      	mov	r3, r0
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d008      	beq.n	80146c0 <pbuf_pool_is_empty+0x44>
 80146ae:	f001 fc95 	bl	8015fdc <sys_arch_protect>
 80146b2:	6078      	str	r0, [r7, #4]
 80146b4:	4b04      	ldr	r3, [pc, #16]	; (80146c8 <pbuf_pool_is_empty+0x4c>)
 80146b6:	2200      	movs	r2, #0
 80146b8:	701a      	strb	r2, [r3, #0]
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f001 fc9c 	bl	8015ff8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80146c0:	bf00      	nop
 80146c2:	3708      	adds	r7, #8
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd80      	pop	{r7, pc}
 80146c8:	2400d23c 	.word	0x2400d23c
 80146cc:	08014669 	.word	0x08014669

080146d0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80146d0:	b480      	push	{r7}
 80146d2:	b085      	sub	sp, #20
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	60f8      	str	r0, [r7, #12]
 80146d8:	60b9      	str	r1, [r7, #8]
 80146da:	4611      	mov	r1, r2
 80146dc:	461a      	mov	r2, r3
 80146de:	460b      	mov	r3, r1
 80146e0:	80fb      	strh	r3, [r7, #6]
 80146e2:	4613      	mov	r3, r2
 80146e4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	2200      	movs	r2, #0
 80146ea:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	68ba      	ldr	r2, [r7, #8]
 80146f0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	88fa      	ldrh	r2, [r7, #6]
 80146f6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	88ba      	ldrh	r2, [r7, #4]
 80146fc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80146fe:	8b3b      	ldrh	r3, [r7, #24]
 8014700:	b2da      	uxtb	r2, r3
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	7f3a      	ldrb	r2, [r7, #28]
 801470a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	2201      	movs	r2, #1
 8014710:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	2200      	movs	r2, #0
 8014716:	73da      	strb	r2, [r3, #15]
}
 8014718:	bf00      	nop
 801471a:	3714      	adds	r7, #20
 801471c:	46bd      	mov	sp, r7
 801471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014722:	4770      	bx	lr

08014724 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b08c      	sub	sp, #48	; 0x30
 8014728:	af02      	add	r7, sp, #8
 801472a:	4603      	mov	r3, r0
 801472c:	71fb      	strb	r3, [r7, #7]
 801472e:	460b      	mov	r3, r1
 8014730:	80bb      	strh	r3, [r7, #4]
 8014732:	4613      	mov	r3, r2
 8014734:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014736:	79fb      	ldrb	r3, [r7, #7]
 8014738:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801473a:	887b      	ldrh	r3, [r7, #2]
 801473c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014740:	d07f      	beq.n	8014842 <pbuf_alloc+0x11e>
 8014742:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014746:	f300 80c8 	bgt.w	80148da <pbuf_alloc+0x1b6>
 801474a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801474e:	d010      	beq.n	8014772 <pbuf_alloc+0x4e>
 8014750:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014754:	f300 80c1 	bgt.w	80148da <pbuf_alloc+0x1b6>
 8014758:	2b01      	cmp	r3, #1
 801475a:	d002      	beq.n	8014762 <pbuf_alloc+0x3e>
 801475c:	2b41      	cmp	r3, #65	; 0x41
 801475e:	f040 80bc 	bne.w	80148da <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8014762:	887a      	ldrh	r2, [r7, #2]
 8014764:	88bb      	ldrh	r3, [r7, #4]
 8014766:	4619      	mov	r1, r3
 8014768:	2000      	movs	r0, #0
 801476a:	f000 f8d1 	bl	8014910 <pbuf_alloc_reference>
 801476e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8014770:	e0bd      	b.n	80148ee <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8014772:	2300      	movs	r3, #0
 8014774:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8014776:	2300      	movs	r3, #0
 8014778:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801477a:	88bb      	ldrh	r3, [r7, #4]
 801477c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801477e:	200c      	movs	r0, #12
 8014780:	f7ff fb08 	bl	8013d94 <memp_malloc>
 8014784:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014786:	693b      	ldr	r3, [r7, #16]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d109      	bne.n	80147a0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801478c:	f7ff ff76 	bl	801467c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8014790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014792:	2b00      	cmp	r3, #0
 8014794:	d002      	beq.n	801479c <pbuf_alloc+0x78>
            pbuf_free(p);
 8014796:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014798:	f000 faa8 	bl	8014cec <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801479c:	2300      	movs	r3, #0
 801479e:	e0a7      	b.n	80148f0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80147a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80147a2:	3303      	adds	r3, #3
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	f023 0303 	bic.w	r3, r3, #3
 80147aa:	b29b      	uxth	r3, r3
 80147ac:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	8b7a      	ldrh	r2, [r7, #26]
 80147b4:	4293      	cmp	r3, r2
 80147b6:	bf28      	it	cs
 80147b8:	4613      	movcs	r3, r2
 80147ba:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80147bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80147be:	3310      	adds	r3, #16
 80147c0:	693a      	ldr	r2, [r7, #16]
 80147c2:	4413      	add	r3, r2
 80147c4:	3303      	adds	r3, #3
 80147c6:	f023 0303 	bic.w	r3, r3, #3
 80147ca:	4618      	mov	r0, r3
 80147cc:	89f9      	ldrh	r1, [r7, #14]
 80147ce:	8b7a      	ldrh	r2, [r7, #26]
 80147d0:	2300      	movs	r3, #0
 80147d2:	9301      	str	r3, [sp, #4]
 80147d4:	887b      	ldrh	r3, [r7, #2]
 80147d6:	9300      	str	r3, [sp, #0]
 80147d8:	460b      	mov	r3, r1
 80147da:	4601      	mov	r1, r0
 80147dc:	6938      	ldr	r0, [r7, #16]
 80147de:	f7ff ff77 	bl	80146d0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	685b      	ldr	r3, [r3, #4]
 80147e6:	f003 0303 	and.w	r3, r3, #3
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d006      	beq.n	80147fc <pbuf_alloc+0xd8>
 80147ee:	4b42      	ldr	r3, [pc, #264]	; (80148f8 <pbuf_alloc+0x1d4>)
 80147f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80147f4:	4941      	ldr	r1, [pc, #260]	; (80148fc <pbuf_alloc+0x1d8>)
 80147f6:	4842      	ldr	r0, [pc, #264]	; (8014900 <pbuf_alloc+0x1dc>)
 80147f8:	f00d fa90 	bl	8021d1c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80147fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80147fe:	3303      	adds	r3, #3
 8014800:	f023 0303 	bic.w	r3, r3, #3
 8014804:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8014808:	d106      	bne.n	8014818 <pbuf_alloc+0xf4>
 801480a:	4b3b      	ldr	r3, [pc, #236]	; (80148f8 <pbuf_alloc+0x1d4>)
 801480c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014810:	493c      	ldr	r1, [pc, #240]	; (8014904 <pbuf_alloc+0x1e0>)
 8014812:	483b      	ldr	r0, [pc, #236]	; (8014900 <pbuf_alloc+0x1dc>)
 8014814:	f00d fa82 	bl	8021d1c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801481a:	2b00      	cmp	r3, #0
 801481c:	d102      	bne.n	8014824 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801481e:	693b      	ldr	r3, [r7, #16]
 8014820:	627b      	str	r3, [r7, #36]	; 0x24
 8014822:	e002      	b.n	801482a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014824:	69fb      	ldr	r3, [r7, #28]
 8014826:	693a      	ldr	r2, [r7, #16]
 8014828:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801482e:	8b7a      	ldrh	r2, [r7, #26]
 8014830:	89fb      	ldrh	r3, [r7, #14]
 8014832:	1ad3      	subs	r3, r2, r3
 8014834:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014836:	2300      	movs	r3, #0
 8014838:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801483a:	8b7b      	ldrh	r3, [r7, #26]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d19e      	bne.n	801477e <pbuf_alloc+0x5a>
      break;
 8014840:	e055      	b.n	80148ee <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014844:	3303      	adds	r3, #3
 8014846:	b29b      	uxth	r3, r3
 8014848:	f023 0303 	bic.w	r3, r3, #3
 801484c:	b29a      	uxth	r2, r3
 801484e:	88bb      	ldrh	r3, [r7, #4]
 8014850:	3303      	adds	r3, #3
 8014852:	b29b      	uxth	r3, r3
 8014854:	f023 0303 	bic.w	r3, r3, #3
 8014858:	b29b      	uxth	r3, r3
 801485a:	4413      	add	r3, r2
 801485c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801485e:	8b3b      	ldrh	r3, [r7, #24]
 8014860:	3310      	adds	r3, #16
 8014862:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014864:	8b3a      	ldrh	r2, [r7, #24]
 8014866:	88bb      	ldrh	r3, [r7, #4]
 8014868:	3303      	adds	r3, #3
 801486a:	f023 0303 	bic.w	r3, r3, #3
 801486e:	429a      	cmp	r2, r3
 8014870:	d306      	bcc.n	8014880 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014872:	8afa      	ldrh	r2, [r7, #22]
 8014874:	88bb      	ldrh	r3, [r7, #4]
 8014876:	3303      	adds	r3, #3
 8014878:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801487c:	429a      	cmp	r2, r3
 801487e:	d201      	bcs.n	8014884 <pbuf_alloc+0x160>
        return NULL;
 8014880:	2300      	movs	r3, #0
 8014882:	e035      	b.n	80148f0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014884:	8afb      	ldrh	r3, [r7, #22]
 8014886:	4618      	mov	r0, r3
 8014888:	f7ff f8dc 	bl	8013a44 <mem_malloc>
 801488c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014890:	2b00      	cmp	r3, #0
 8014892:	d101      	bne.n	8014898 <pbuf_alloc+0x174>
        return NULL;
 8014894:	2300      	movs	r3, #0
 8014896:	e02b      	b.n	80148f0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014898:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801489a:	3310      	adds	r3, #16
 801489c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801489e:	4413      	add	r3, r2
 80148a0:	3303      	adds	r3, #3
 80148a2:	f023 0303 	bic.w	r3, r3, #3
 80148a6:	4618      	mov	r0, r3
 80148a8:	88b9      	ldrh	r1, [r7, #4]
 80148aa:	88ba      	ldrh	r2, [r7, #4]
 80148ac:	2300      	movs	r3, #0
 80148ae:	9301      	str	r3, [sp, #4]
 80148b0:	887b      	ldrh	r3, [r7, #2]
 80148b2:	9300      	str	r3, [sp, #0]
 80148b4:	460b      	mov	r3, r1
 80148b6:	4601      	mov	r1, r0
 80148b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148ba:	f7ff ff09 	bl	80146d0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80148be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c0:	685b      	ldr	r3, [r3, #4]
 80148c2:	f003 0303 	and.w	r3, r3, #3
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d010      	beq.n	80148ec <pbuf_alloc+0x1c8>
 80148ca:	4b0b      	ldr	r3, [pc, #44]	; (80148f8 <pbuf_alloc+0x1d4>)
 80148cc:	f44f 7291 	mov.w	r2, #290	; 0x122
 80148d0:	490d      	ldr	r1, [pc, #52]	; (8014908 <pbuf_alloc+0x1e4>)
 80148d2:	480b      	ldr	r0, [pc, #44]	; (8014900 <pbuf_alloc+0x1dc>)
 80148d4:	f00d fa22 	bl	8021d1c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80148d8:	e008      	b.n	80148ec <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80148da:	4b07      	ldr	r3, [pc, #28]	; (80148f8 <pbuf_alloc+0x1d4>)
 80148dc:	f240 1227 	movw	r2, #295	; 0x127
 80148e0:	490a      	ldr	r1, [pc, #40]	; (801490c <pbuf_alloc+0x1e8>)
 80148e2:	4807      	ldr	r0, [pc, #28]	; (8014900 <pbuf_alloc+0x1dc>)
 80148e4:	f00d fa1a 	bl	8021d1c <iprintf>
      return NULL;
 80148e8:	2300      	movs	r3, #0
 80148ea:	e001      	b.n	80148f0 <pbuf_alloc+0x1cc>
      break;
 80148ec:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80148ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3728      	adds	r7, #40	; 0x28
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}
 80148f8:	08025b30 	.word	0x08025b30
 80148fc:	08025b80 	.word	0x08025b80
 8014900:	08025bb0 	.word	0x08025bb0
 8014904:	08025bd8 	.word	0x08025bd8
 8014908:	08025c0c 	.word	0x08025c0c
 801490c:	08025c38 	.word	0x08025c38

08014910 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b086      	sub	sp, #24
 8014914:	af02      	add	r7, sp, #8
 8014916:	6078      	str	r0, [r7, #4]
 8014918:	460b      	mov	r3, r1
 801491a:	807b      	strh	r3, [r7, #2]
 801491c:	4613      	mov	r3, r2
 801491e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014920:	883b      	ldrh	r3, [r7, #0]
 8014922:	2b41      	cmp	r3, #65	; 0x41
 8014924:	d009      	beq.n	801493a <pbuf_alloc_reference+0x2a>
 8014926:	883b      	ldrh	r3, [r7, #0]
 8014928:	2b01      	cmp	r3, #1
 801492a:	d006      	beq.n	801493a <pbuf_alloc_reference+0x2a>
 801492c:	4b0f      	ldr	r3, [pc, #60]	; (801496c <pbuf_alloc_reference+0x5c>)
 801492e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8014932:	490f      	ldr	r1, [pc, #60]	; (8014970 <pbuf_alloc_reference+0x60>)
 8014934:	480f      	ldr	r0, [pc, #60]	; (8014974 <pbuf_alloc_reference+0x64>)
 8014936:	f00d f9f1 	bl	8021d1c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801493a:	200b      	movs	r0, #11
 801493c:	f7ff fa2a 	bl	8013d94 <memp_malloc>
 8014940:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d101      	bne.n	801494c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014948:	2300      	movs	r3, #0
 801494a:	e00b      	b.n	8014964 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801494c:	8879      	ldrh	r1, [r7, #2]
 801494e:	887a      	ldrh	r2, [r7, #2]
 8014950:	2300      	movs	r3, #0
 8014952:	9301      	str	r3, [sp, #4]
 8014954:	883b      	ldrh	r3, [r7, #0]
 8014956:	9300      	str	r3, [sp, #0]
 8014958:	460b      	mov	r3, r1
 801495a:	6879      	ldr	r1, [r7, #4]
 801495c:	68f8      	ldr	r0, [r7, #12]
 801495e:	f7ff feb7 	bl	80146d0 <pbuf_init_alloced_pbuf>
  return p;
 8014962:	68fb      	ldr	r3, [r7, #12]
}
 8014964:	4618      	mov	r0, r3
 8014966:	3710      	adds	r7, #16
 8014968:	46bd      	mov	sp, r7
 801496a:	bd80      	pop	{r7, pc}
 801496c:	08025b30 	.word	0x08025b30
 8014970:	08025c54 	.word	0x08025c54
 8014974:	08025bb0 	.word	0x08025bb0

08014978 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b088      	sub	sp, #32
 801497c:	af02      	add	r7, sp, #8
 801497e:	607b      	str	r3, [r7, #4]
 8014980:	4603      	mov	r3, r0
 8014982:	73fb      	strb	r3, [r7, #15]
 8014984:	460b      	mov	r3, r1
 8014986:	81bb      	strh	r3, [r7, #12]
 8014988:	4613      	mov	r3, r2
 801498a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801498c:	7bfb      	ldrb	r3, [r7, #15]
 801498e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014990:	8a7b      	ldrh	r3, [r7, #18]
 8014992:	3303      	adds	r3, #3
 8014994:	f023 0203 	bic.w	r2, r3, #3
 8014998:	89bb      	ldrh	r3, [r7, #12]
 801499a:	441a      	add	r2, r3
 801499c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801499e:	429a      	cmp	r2, r3
 80149a0:	d901      	bls.n	80149a6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80149a2:	2300      	movs	r3, #0
 80149a4:	e018      	b.n	80149d8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80149a6:	6a3b      	ldr	r3, [r7, #32]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d007      	beq.n	80149bc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80149ac:	8a7b      	ldrh	r3, [r7, #18]
 80149ae:	3303      	adds	r3, #3
 80149b0:	f023 0303 	bic.w	r3, r3, #3
 80149b4:	6a3a      	ldr	r2, [r7, #32]
 80149b6:	4413      	add	r3, r2
 80149b8:	617b      	str	r3, [r7, #20]
 80149ba:	e001      	b.n	80149c0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80149bc:	2300      	movs	r3, #0
 80149be:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	89b9      	ldrh	r1, [r7, #12]
 80149c4:	89ba      	ldrh	r2, [r7, #12]
 80149c6:	2302      	movs	r3, #2
 80149c8:	9301      	str	r3, [sp, #4]
 80149ca:	897b      	ldrh	r3, [r7, #10]
 80149cc:	9300      	str	r3, [sp, #0]
 80149ce:	460b      	mov	r3, r1
 80149d0:	6979      	ldr	r1, [r7, #20]
 80149d2:	f7ff fe7d 	bl	80146d0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80149d6:	687b      	ldr	r3, [r7, #4]
}
 80149d8:	4618      	mov	r0, r3
 80149da:	3718      	adds	r7, #24
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}

080149e0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b084      	sub	sp, #16
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	460b      	mov	r3, r1
 80149ea:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d106      	bne.n	8014a00 <pbuf_realloc+0x20>
 80149f2:	4b3a      	ldr	r3, [pc, #232]	; (8014adc <pbuf_realloc+0xfc>)
 80149f4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80149f8:	4939      	ldr	r1, [pc, #228]	; (8014ae0 <pbuf_realloc+0x100>)
 80149fa:	483a      	ldr	r0, [pc, #232]	; (8014ae4 <pbuf_realloc+0x104>)
 80149fc:	f00d f98e 	bl	8021d1c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	891b      	ldrh	r3, [r3, #8]
 8014a04:	887a      	ldrh	r2, [r7, #2]
 8014a06:	429a      	cmp	r2, r3
 8014a08:	d263      	bcs.n	8014ad2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	891a      	ldrh	r2, [r3, #8]
 8014a0e:	887b      	ldrh	r3, [r7, #2]
 8014a10:	1ad3      	subs	r3, r2, r3
 8014a12:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014a14:	887b      	ldrh	r3, [r7, #2]
 8014a16:	817b      	strh	r3, [r7, #10]
  q = p;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014a1c:	e018      	b.n	8014a50 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	895b      	ldrh	r3, [r3, #10]
 8014a22:	897a      	ldrh	r2, [r7, #10]
 8014a24:	1ad3      	subs	r3, r2, r3
 8014a26:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	891a      	ldrh	r2, [r3, #8]
 8014a2c:	893b      	ldrh	r3, [r7, #8]
 8014a2e:	1ad3      	subs	r3, r2, r3
 8014a30:	b29a      	uxth	r2, r3
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d106      	bne.n	8014a50 <pbuf_realloc+0x70>
 8014a42:	4b26      	ldr	r3, [pc, #152]	; (8014adc <pbuf_realloc+0xfc>)
 8014a44:	f240 12af 	movw	r2, #431	; 0x1af
 8014a48:	4927      	ldr	r1, [pc, #156]	; (8014ae8 <pbuf_realloc+0x108>)
 8014a4a:	4826      	ldr	r0, [pc, #152]	; (8014ae4 <pbuf_realloc+0x104>)
 8014a4c:	f00d f966 	bl	8021d1c <iprintf>
  while (rem_len > q->len) {
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	895b      	ldrh	r3, [r3, #10]
 8014a54:	897a      	ldrh	r2, [r7, #10]
 8014a56:	429a      	cmp	r2, r3
 8014a58:	d8e1      	bhi.n	8014a1e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	7b1b      	ldrb	r3, [r3, #12]
 8014a5e:	f003 030f 	and.w	r3, r3, #15
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d121      	bne.n	8014aaa <pbuf_realloc+0xca>
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	895b      	ldrh	r3, [r3, #10]
 8014a6a:	897a      	ldrh	r2, [r7, #10]
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	d01c      	beq.n	8014aaa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	7b5b      	ldrb	r3, [r3, #13]
 8014a74:	f003 0302 	and.w	r3, r3, #2
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d116      	bne.n	8014aaa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	685a      	ldr	r2, [r3, #4]
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	1ad3      	subs	r3, r2, r3
 8014a84:	b29a      	uxth	r2, r3
 8014a86:	897b      	ldrh	r3, [r7, #10]
 8014a88:	4413      	add	r3, r2
 8014a8a:	b29b      	uxth	r3, r3
 8014a8c:	4619      	mov	r1, r3
 8014a8e:	68f8      	ldr	r0, [r7, #12]
 8014a90:	f7fe fec8 	bl	8013824 <mem_trim>
 8014a94:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d106      	bne.n	8014aaa <pbuf_realloc+0xca>
 8014a9c:	4b0f      	ldr	r3, [pc, #60]	; (8014adc <pbuf_realloc+0xfc>)
 8014a9e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8014aa2:	4912      	ldr	r1, [pc, #72]	; (8014aec <pbuf_realloc+0x10c>)
 8014aa4:	480f      	ldr	r0, [pc, #60]	; (8014ae4 <pbuf_realloc+0x104>)
 8014aa6:	f00d f939 	bl	8021d1c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	897a      	ldrh	r2, [r7, #10]
 8014aae:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	895a      	ldrh	r2, [r3, #10]
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d004      	beq.n	8014aca <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f000 f911 	bl	8014cec <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	2200      	movs	r2, #0
 8014ace:	601a      	str	r2, [r3, #0]
 8014ad0:	e000      	b.n	8014ad4 <pbuf_realloc+0xf4>
    return;
 8014ad2:	bf00      	nop

}
 8014ad4:	3710      	adds	r7, #16
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	bf00      	nop
 8014adc:	08025b30 	.word	0x08025b30
 8014ae0:	08025c68 	.word	0x08025c68
 8014ae4:	08025bb0 	.word	0x08025bb0
 8014ae8:	08025c80 	.word	0x08025c80
 8014aec:	08025c98 	.word	0x08025c98

08014af0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b086      	sub	sp, #24
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	60f8      	str	r0, [r7, #12]
 8014af8:	60b9      	str	r1, [r7, #8]
 8014afa:	4613      	mov	r3, r2
 8014afc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d106      	bne.n	8014b12 <pbuf_add_header_impl+0x22>
 8014b04:	4b2b      	ldr	r3, [pc, #172]	; (8014bb4 <pbuf_add_header_impl+0xc4>)
 8014b06:	f240 12df 	movw	r2, #479	; 0x1df
 8014b0a:	492b      	ldr	r1, [pc, #172]	; (8014bb8 <pbuf_add_header_impl+0xc8>)
 8014b0c:	482b      	ldr	r0, [pc, #172]	; (8014bbc <pbuf_add_header_impl+0xcc>)
 8014b0e:	f00d f905 	bl	8021d1c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d003      	beq.n	8014b20 <pbuf_add_header_impl+0x30>
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b1e:	d301      	bcc.n	8014b24 <pbuf_add_header_impl+0x34>
    return 1;
 8014b20:	2301      	movs	r3, #1
 8014b22:	e043      	b.n	8014bac <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d101      	bne.n	8014b2e <pbuf_add_header_impl+0x3e>
    return 0;
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	e03e      	b.n	8014bac <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	891a      	ldrh	r2, [r3, #8]
 8014b36:	8a7b      	ldrh	r3, [r7, #18]
 8014b38:	4413      	add	r3, r2
 8014b3a:	b29b      	uxth	r3, r3
 8014b3c:	8a7a      	ldrh	r2, [r7, #18]
 8014b3e:	429a      	cmp	r2, r3
 8014b40:	d901      	bls.n	8014b46 <pbuf_add_header_impl+0x56>
    return 1;
 8014b42:	2301      	movs	r3, #1
 8014b44:	e032      	b.n	8014bac <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	7b1b      	ldrb	r3, [r3, #12]
 8014b4a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014b4c:	8a3b      	ldrh	r3, [r7, #16]
 8014b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d00c      	beq.n	8014b70 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	685a      	ldr	r2, [r3, #4]
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	425b      	negs	r3, r3
 8014b5e:	4413      	add	r3, r2
 8014b60:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	3310      	adds	r3, #16
 8014b66:	697a      	ldr	r2, [r7, #20]
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d20d      	bcs.n	8014b88 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	e01d      	b.n	8014bac <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014b70:	79fb      	ldrb	r3, [r7, #7]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d006      	beq.n	8014b84 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	685a      	ldr	r2, [r3, #4]
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	425b      	negs	r3, r3
 8014b7e:	4413      	add	r3, r2
 8014b80:	617b      	str	r3, [r7, #20]
 8014b82:	e001      	b.n	8014b88 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014b84:	2301      	movs	r3, #1
 8014b86:	e011      	b.n	8014bac <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	697a      	ldr	r2, [r7, #20]
 8014b8c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	895a      	ldrh	r2, [r3, #10]
 8014b92:	8a7b      	ldrh	r3, [r7, #18]
 8014b94:	4413      	add	r3, r2
 8014b96:	b29a      	uxth	r2, r3
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	891a      	ldrh	r2, [r3, #8]
 8014ba0:	8a7b      	ldrh	r3, [r7, #18]
 8014ba2:	4413      	add	r3, r2
 8014ba4:	b29a      	uxth	r2, r3
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	811a      	strh	r2, [r3, #8]


  return 0;
 8014baa:	2300      	movs	r3, #0
}
 8014bac:	4618      	mov	r0, r3
 8014bae:	3718      	adds	r7, #24
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}
 8014bb4:	08025b30 	.word	0x08025b30
 8014bb8:	08025cb4 	.word	0x08025cb4
 8014bbc:	08025bb0 	.word	0x08025bb0

08014bc0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b082      	sub	sp, #8
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014bca:	2200      	movs	r2, #0
 8014bcc:	6839      	ldr	r1, [r7, #0]
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f7ff ff8e 	bl	8014af0 <pbuf_add_header_impl>
 8014bd4:	4603      	mov	r3, r0
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3708      	adds	r7, #8
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
	...

08014be0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b084      	sub	sp, #16
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d106      	bne.n	8014bfe <pbuf_remove_header+0x1e>
 8014bf0:	4b20      	ldr	r3, [pc, #128]	; (8014c74 <pbuf_remove_header+0x94>)
 8014bf2:	f240 224b 	movw	r2, #587	; 0x24b
 8014bf6:	4920      	ldr	r1, [pc, #128]	; (8014c78 <pbuf_remove_header+0x98>)
 8014bf8:	4820      	ldr	r0, [pc, #128]	; (8014c7c <pbuf_remove_header+0x9c>)
 8014bfa:	f00d f88f 	bl	8021d1c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d003      	beq.n	8014c0c <pbuf_remove_header+0x2c>
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014c0a:	d301      	bcc.n	8014c10 <pbuf_remove_header+0x30>
    return 1;
 8014c0c:	2301      	movs	r3, #1
 8014c0e:	e02c      	b.n	8014c6a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014c10:	683b      	ldr	r3, [r7, #0]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d101      	bne.n	8014c1a <pbuf_remove_header+0x3a>
    return 0;
 8014c16:	2300      	movs	r3, #0
 8014c18:	e027      	b.n	8014c6a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	895b      	ldrh	r3, [r3, #10]
 8014c22:	89fa      	ldrh	r2, [r7, #14]
 8014c24:	429a      	cmp	r2, r3
 8014c26:	d908      	bls.n	8014c3a <pbuf_remove_header+0x5a>
 8014c28:	4b12      	ldr	r3, [pc, #72]	; (8014c74 <pbuf_remove_header+0x94>)
 8014c2a:	f240 2255 	movw	r2, #597	; 0x255
 8014c2e:	4914      	ldr	r1, [pc, #80]	; (8014c80 <pbuf_remove_header+0xa0>)
 8014c30:	4812      	ldr	r0, [pc, #72]	; (8014c7c <pbuf_remove_header+0x9c>)
 8014c32:	f00d f873 	bl	8021d1c <iprintf>
 8014c36:	2301      	movs	r3, #1
 8014c38:	e017      	b.n	8014c6a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	685b      	ldr	r3, [r3, #4]
 8014c3e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	685a      	ldr	r2, [r3, #4]
 8014c44:	683b      	ldr	r3, [r7, #0]
 8014c46:	441a      	add	r2, r3
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	895a      	ldrh	r2, [r3, #10]
 8014c50:	89fb      	ldrh	r3, [r7, #14]
 8014c52:	1ad3      	subs	r3, r2, r3
 8014c54:	b29a      	uxth	r2, r3
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	891a      	ldrh	r2, [r3, #8]
 8014c5e:	89fb      	ldrh	r3, [r7, #14]
 8014c60:	1ad3      	subs	r3, r2, r3
 8014c62:	b29a      	uxth	r2, r3
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014c68:	2300      	movs	r3, #0
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	3710      	adds	r7, #16
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}
 8014c72:	bf00      	nop
 8014c74:	08025b30 	.word	0x08025b30
 8014c78:	08025cb4 	.word	0x08025cb4
 8014c7c:	08025bb0 	.word	0x08025bb0
 8014c80:	08025cc0 	.word	0x08025cc0

08014c84 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b082      	sub	sp, #8
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	460b      	mov	r3, r1
 8014c8e:	807b      	strh	r3, [r7, #2]
 8014c90:	4613      	mov	r3, r2
 8014c92:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014c94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	da08      	bge.n	8014cae <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014c9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014ca0:	425b      	negs	r3, r3
 8014ca2:	4619      	mov	r1, r3
 8014ca4:	6878      	ldr	r0, [r7, #4]
 8014ca6:	f7ff ff9b 	bl	8014be0 <pbuf_remove_header>
 8014caa:	4603      	mov	r3, r0
 8014cac:	e007      	b.n	8014cbe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014cae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014cb2:	787a      	ldrb	r2, [r7, #1]
 8014cb4:	4619      	mov	r1, r3
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f7ff ff1a 	bl	8014af0 <pbuf_add_header_impl>
 8014cbc:	4603      	mov	r3, r0
  }
}
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	3708      	adds	r7, #8
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	bd80      	pop	{r7, pc}

08014cc6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014cc6:	b580      	push	{r7, lr}
 8014cc8:	b082      	sub	sp, #8
 8014cca:	af00      	add	r7, sp, #0
 8014ccc:	6078      	str	r0, [r7, #4]
 8014cce:	460b      	mov	r3, r1
 8014cd0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014cd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014cd6:	2201      	movs	r2, #1
 8014cd8:	4619      	mov	r1, r3
 8014cda:	6878      	ldr	r0, [r7, #4]
 8014cdc:	f7ff ffd2 	bl	8014c84 <pbuf_header_impl>
 8014ce0:	4603      	mov	r3, r0
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3708      	adds	r7, #8
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}
	...

08014cec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b088      	sub	sp, #32
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d10b      	bne.n	8014d12 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d106      	bne.n	8014d0e <pbuf_free+0x22>
 8014d00:	4b3b      	ldr	r3, [pc, #236]	; (8014df0 <pbuf_free+0x104>)
 8014d02:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8014d06:	493b      	ldr	r1, [pc, #236]	; (8014df4 <pbuf_free+0x108>)
 8014d08:	483b      	ldr	r0, [pc, #236]	; (8014df8 <pbuf_free+0x10c>)
 8014d0a:	f00d f807 	bl	8021d1c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014d0e:	2300      	movs	r3, #0
 8014d10:	e069      	b.n	8014de6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014d12:	2300      	movs	r3, #0
 8014d14:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014d16:	e062      	b.n	8014dde <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014d18:	f001 f960 	bl	8015fdc <sys_arch_protect>
 8014d1c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	7b9b      	ldrb	r3, [r3, #14]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d106      	bne.n	8014d34 <pbuf_free+0x48>
 8014d26:	4b32      	ldr	r3, [pc, #200]	; (8014df0 <pbuf_free+0x104>)
 8014d28:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014d2c:	4933      	ldr	r1, [pc, #204]	; (8014dfc <pbuf_free+0x110>)
 8014d2e:	4832      	ldr	r0, [pc, #200]	; (8014df8 <pbuf_free+0x10c>)
 8014d30:	f00c fff4 	bl	8021d1c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	7b9b      	ldrb	r3, [r3, #14]
 8014d38:	3b01      	subs	r3, #1
 8014d3a:	b2da      	uxtb	r2, r3
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	739a      	strb	r2, [r3, #14]
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	7b9b      	ldrb	r3, [r3, #14]
 8014d44:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014d46:	69b8      	ldr	r0, [r7, #24]
 8014d48:	f001 f956 	bl	8015ff8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014d4c:	7dfb      	ldrb	r3, [r7, #23]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d143      	bne.n	8014dda <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	7b1b      	ldrb	r3, [r3, #12]
 8014d5c:	f003 030f 	and.w	r3, r3, #15
 8014d60:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	7b5b      	ldrb	r3, [r3, #13]
 8014d66:	f003 0302 	and.w	r3, r3, #2
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d011      	beq.n	8014d92 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	691b      	ldr	r3, [r3, #16]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d106      	bne.n	8014d88 <pbuf_free+0x9c>
 8014d7a:	4b1d      	ldr	r3, [pc, #116]	; (8014df0 <pbuf_free+0x104>)
 8014d7c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014d80:	491f      	ldr	r1, [pc, #124]	; (8014e00 <pbuf_free+0x114>)
 8014d82:	481d      	ldr	r0, [pc, #116]	; (8014df8 <pbuf_free+0x10c>)
 8014d84:	f00c ffca 	bl	8021d1c <iprintf>
        pc->custom_free_function(p);
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	691b      	ldr	r3, [r3, #16]
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	4798      	blx	r3
 8014d90:	e01d      	b.n	8014dce <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014d92:	7bfb      	ldrb	r3, [r7, #15]
 8014d94:	2b02      	cmp	r3, #2
 8014d96:	d104      	bne.n	8014da2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014d98:	6879      	ldr	r1, [r7, #4]
 8014d9a:	200c      	movs	r0, #12
 8014d9c:	f7ff f870 	bl	8013e80 <memp_free>
 8014da0:	e015      	b.n	8014dce <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014da2:	7bfb      	ldrb	r3, [r7, #15]
 8014da4:	2b01      	cmp	r3, #1
 8014da6:	d104      	bne.n	8014db2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014da8:	6879      	ldr	r1, [r7, #4]
 8014daa:	200b      	movs	r0, #11
 8014dac:	f7ff f868 	bl	8013e80 <memp_free>
 8014db0:	e00d      	b.n	8014dce <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014db2:	7bfb      	ldrb	r3, [r7, #15]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d103      	bne.n	8014dc0 <pbuf_free+0xd4>
          mem_free(p);
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f7fe fca3 	bl	8013704 <mem_free>
 8014dbe:	e006      	b.n	8014dce <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014dc0:	4b0b      	ldr	r3, [pc, #44]	; (8014df0 <pbuf_free+0x104>)
 8014dc2:	f240 320f 	movw	r2, #783	; 0x30f
 8014dc6:	490f      	ldr	r1, [pc, #60]	; (8014e04 <pbuf_free+0x118>)
 8014dc8:	480b      	ldr	r0, [pc, #44]	; (8014df8 <pbuf_free+0x10c>)
 8014dca:	f00c ffa7 	bl	8021d1c <iprintf>
        }
      }
      count++;
 8014dce:	7ffb      	ldrb	r3, [r7, #31]
 8014dd0:	3301      	adds	r3, #1
 8014dd2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014dd4:	693b      	ldr	r3, [r7, #16]
 8014dd6:	607b      	str	r3, [r7, #4]
 8014dd8:	e001      	b.n	8014dde <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014dda:	2300      	movs	r3, #0
 8014ddc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d199      	bne.n	8014d18 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014de4:	7ffb      	ldrb	r3, [r7, #31]
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	3720      	adds	r7, #32
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}
 8014dee:	bf00      	nop
 8014df0:	08025b30 	.word	0x08025b30
 8014df4:	08025cb4 	.word	0x08025cb4
 8014df8:	08025bb0 	.word	0x08025bb0
 8014dfc:	08025ce0 	.word	0x08025ce0
 8014e00:	08025cf8 	.word	0x08025cf8
 8014e04:	08025d1c 	.word	0x08025d1c

08014e08 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014e08:	b480      	push	{r7}
 8014e0a:	b085      	sub	sp, #20
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014e10:	2300      	movs	r3, #0
 8014e12:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014e14:	e005      	b.n	8014e22 <pbuf_clen+0x1a>
    ++len;
 8014e16:	89fb      	ldrh	r3, [r7, #14]
 8014e18:	3301      	adds	r3, #1
 8014e1a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d1f6      	bne.n	8014e16 <pbuf_clen+0xe>
  }
  return len;
 8014e28:	89fb      	ldrh	r3, [r7, #14]
}
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	3714      	adds	r7, #20
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e34:	4770      	bx	lr
	...

08014e38 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b084      	sub	sp, #16
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d016      	beq.n	8014e74 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014e46:	f001 f8c9 	bl	8015fdc <sys_arch_protect>
 8014e4a:	60f8      	str	r0, [r7, #12]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	7b9b      	ldrb	r3, [r3, #14]
 8014e50:	3301      	adds	r3, #1
 8014e52:	b2da      	uxtb	r2, r3
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	739a      	strb	r2, [r3, #14]
 8014e58:	68f8      	ldr	r0, [r7, #12]
 8014e5a:	f001 f8cd 	bl	8015ff8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	7b9b      	ldrb	r3, [r3, #14]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d106      	bne.n	8014e74 <pbuf_ref+0x3c>
 8014e66:	4b05      	ldr	r3, [pc, #20]	; (8014e7c <pbuf_ref+0x44>)
 8014e68:	f240 3242 	movw	r2, #834	; 0x342
 8014e6c:	4904      	ldr	r1, [pc, #16]	; (8014e80 <pbuf_ref+0x48>)
 8014e6e:	4805      	ldr	r0, [pc, #20]	; (8014e84 <pbuf_ref+0x4c>)
 8014e70:	f00c ff54 	bl	8021d1c <iprintf>
  }
}
 8014e74:	bf00      	nop
 8014e76:	3710      	adds	r7, #16
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd80      	pop	{r7, pc}
 8014e7c:	08025b30 	.word	0x08025b30
 8014e80:	08025d30 	.word	0x08025d30
 8014e84:	08025bb0 	.word	0x08025bb0

08014e88 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b084      	sub	sp, #16
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
 8014e90:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d002      	beq.n	8014e9e <pbuf_cat+0x16>
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d107      	bne.n	8014eae <pbuf_cat+0x26>
 8014e9e:	4b20      	ldr	r3, [pc, #128]	; (8014f20 <pbuf_cat+0x98>)
 8014ea0:	f240 3259 	movw	r2, #857	; 0x359
 8014ea4:	491f      	ldr	r1, [pc, #124]	; (8014f24 <pbuf_cat+0x9c>)
 8014ea6:	4820      	ldr	r0, [pc, #128]	; (8014f28 <pbuf_cat+0xa0>)
 8014ea8:	f00c ff38 	bl	8021d1c <iprintf>
 8014eac:	e034      	b.n	8014f18 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	60fb      	str	r3, [r7, #12]
 8014eb2:	e00a      	b.n	8014eca <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	891a      	ldrh	r2, [r3, #8]
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	891b      	ldrh	r3, [r3, #8]
 8014ebc:	4413      	add	r3, r2
 8014ebe:	b29a      	uxth	r2, r3
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	60fb      	str	r3, [r7, #12]
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d1f0      	bne.n	8014eb4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	891a      	ldrh	r2, [r3, #8]
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	895b      	ldrh	r3, [r3, #10]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d006      	beq.n	8014eec <pbuf_cat+0x64>
 8014ede:	4b10      	ldr	r3, [pc, #64]	; (8014f20 <pbuf_cat+0x98>)
 8014ee0:	f240 3262 	movw	r2, #866	; 0x362
 8014ee4:	4911      	ldr	r1, [pc, #68]	; (8014f2c <pbuf_cat+0xa4>)
 8014ee6:	4810      	ldr	r0, [pc, #64]	; (8014f28 <pbuf_cat+0xa0>)
 8014ee8:	f00c ff18 	bl	8021d1c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d006      	beq.n	8014f02 <pbuf_cat+0x7a>
 8014ef4:	4b0a      	ldr	r3, [pc, #40]	; (8014f20 <pbuf_cat+0x98>)
 8014ef6:	f240 3263 	movw	r2, #867	; 0x363
 8014efa:	490d      	ldr	r1, [pc, #52]	; (8014f30 <pbuf_cat+0xa8>)
 8014efc:	480a      	ldr	r0, [pc, #40]	; (8014f28 <pbuf_cat+0xa0>)
 8014efe:	f00c ff0d 	bl	8021d1c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	891a      	ldrh	r2, [r3, #8]
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	891b      	ldrh	r3, [r3, #8]
 8014f0a:	4413      	add	r3, r2
 8014f0c:	b29a      	uxth	r2, r3
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	683a      	ldr	r2, [r7, #0]
 8014f16:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014f18:	3710      	adds	r7, #16
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}
 8014f1e:	bf00      	nop
 8014f20:	08025b30 	.word	0x08025b30
 8014f24:	08025d44 	.word	0x08025d44
 8014f28:	08025bb0 	.word	0x08025bb0
 8014f2c:	08025d7c 	.word	0x08025d7c
 8014f30:	08025dac 	.word	0x08025dac

08014f34 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b082      	sub	sp, #8
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
 8014f3c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014f3e:	6839      	ldr	r1, [r7, #0]
 8014f40:	6878      	ldr	r0, [r7, #4]
 8014f42:	f7ff ffa1 	bl	8014e88 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014f46:	6838      	ldr	r0, [r7, #0]
 8014f48:	f7ff ff76 	bl	8014e38 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014f4c:	bf00      	nop
 8014f4e:	3708      	adds	r7, #8
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bd80      	pop	{r7, pc}

08014f54 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b086      	sub	sp, #24
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
 8014f5c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	617b      	str	r3, [r7, #20]
 8014f62:	2300      	movs	r3, #0
 8014f64:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d008      	beq.n	8014f7e <pbuf_copy+0x2a>
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d005      	beq.n	8014f7e <pbuf_copy+0x2a>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	891a      	ldrh	r2, [r3, #8]
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	891b      	ldrh	r3, [r3, #8]
 8014f7a:	429a      	cmp	r2, r3
 8014f7c:	d209      	bcs.n	8014f92 <pbuf_copy+0x3e>
 8014f7e:	4b57      	ldr	r3, [pc, #348]	; (80150dc <pbuf_copy+0x188>)
 8014f80:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014f84:	4956      	ldr	r1, [pc, #344]	; (80150e0 <pbuf_copy+0x18c>)
 8014f86:	4857      	ldr	r0, [pc, #348]	; (80150e4 <pbuf_copy+0x190>)
 8014f88:	f00c fec8 	bl	8021d1c <iprintf>
 8014f8c:	f06f 030f 	mvn.w	r3, #15
 8014f90:	e09f      	b.n	80150d2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	895b      	ldrh	r3, [r3, #10]
 8014f96:	461a      	mov	r2, r3
 8014f98:	697b      	ldr	r3, [r7, #20]
 8014f9a:	1ad2      	subs	r2, r2, r3
 8014f9c:	683b      	ldr	r3, [r7, #0]
 8014f9e:	895b      	ldrh	r3, [r3, #10]
 8014fa0:	4619      	mov	r1, r3
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	1acb      	subs	r3, r1, r3
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d306      	bcc.n	8014fb8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	895b      	ldrh	r3, [r3, #10]
 8014fae:	461a      	mov	r2, r3
 8014fb0:	693b      	ldr	r3, [r7, #16]
 8014fb2:	1ad3      	subs	r3, r2, r3
 8014fb4:	60fb      	str	r3, [r7, #12]
 8014fb6:	e005      	b.n	8014fc4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	895b      	ldrh	r3, [r3, #10]
 8014fbc:	461a      	mov	r2, r3
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	1ad3      	subs	r3, r2, r3
 8014fc2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	685a      	ldr	r2, [r3, #4]
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	18d0      	adds	r0, r2, r3
 8014fcc:	683b      	ldr	r3, [r7, #0]
 8014fce:	685a      	ldr	r2, [r3, #4]
 8014fd0:	693b      	ldr	r3, [r7, #16]
 8014fd2:	4413      	add	r3, r2
 8014fd4:	68fa      	ldr	r2, [r7, #12]
 8014fd6:	4619      	mov	r1, r3
 8014fd8:	f00c fa2e 	bl	8021438 <memcpy>
    offset_to += len;
 8014fdc:	697a      	ldr	r2, [r7, #20]
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	4413      	add	r3, r2
 8014fe2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014fe4:	693a      	ldr	r2, [r7, #16]
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	4413      	add	r3, r2
 8014fea:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	895b      	ldrh	r3, [r3, #10]
 8014ff0:	461a      	mov	r2, r3
 8014ff2:	697b      	ldr	r3, [r7, #20]
 8014ff4:	4293      	cmp	r3, r2
 8014ff6:	d906      	bls.n	8015006 <pbuf_copy+0xb2>
 8014ff8:	4b38      	ldr	r3, [pc, #224]	; (80150dc <pbuf_copy+0x188>)
 8014ffa:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014ffe:	493a      	ldr	r1, [pc, #232]	; (80150e8 <pbuf_copy+0x194>)
 8015000:	4838      	ldr	r0, [pc, #224]	; (80150e4 <pbuf_copy+0x190>)
 8015002:	f00c fe8b 	bl	8021d1c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	895b      	ldrh	r3, [r3, #10]
 801500a:	461a      	mov	r2, r3
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	4293      	cmp	r3, r2
 8015010:	d906      	bls.n	8015020 <pbuf_copy+0xcc>
 8015012:	4b32      	ldr	r3, [pc, #200]	; (80150dc <pbuf_copy+0x188>)
 8015014:	f240 32da 	movw	r2, #986	; 0x3da
 8015018:	4934      	ldr	r1, [pc, #208]	; (80150ec <pbuf_copy+0x198>)
 801501a:	4832      	ldr	r0, [pc, #200]	; (80150e4 <pbuf_copy+0x190>)
 801501c:	f00c fe7e 	bl	8021d1c <iprintf>
    if (offset_from >= p_from->len) {
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	895b      	ldrh	r3, [r3, #10]
 8015024:	461a      	mov	r2, r3
 8015026:	693b      	ldr	r3, [r7, #16]
 8015028:	4293      	cmp	r3, r2
 801502a:	d304      	bcc.n	8015036 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801502c:	2300      	movs	r3, #0
 801502e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	895b      	ldrh	r3, [r3, #10]
 801503a:	461a      	mov	r2, r3
 801503c:	697b      	ldr	r3, [r7, #20]
 801503e:	4293      	cmp	r3, r2
 8015040:	d114      	bne.n	801506c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015042:	2300      	movs	r3, #0
 8015044:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d10c      	bne.n	801506c <pbuf_copy+0x118>
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d009      	beq.n	801506c <pbuf_copy+0x118>
 8015058:	4b20      	ldr	r3, [pc, #128]	; (80150dc <pbuf_copy+0x188>)
 801505a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801505e:	4924      	ldr	r1, [pc, #144]	; (80150f0 <pbuf_copy+0x19c>)
 8015060:	4820      	ldr	r0, [pc, #128]	; (80150e4 <pbuf_copy+0x190>)
 8015062:	f00c fe5b 	bl	8021d1c <iprintf>
 8015066:	f06f 030f 	mvn.w	r3, #15
 801506a:	e032      	b.n	80150d2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d013      	beq.n	801509a <pbuf_copy+0x146>
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	895a      	ldrh	r2, [r3, #10]
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	891b      	ldrh	r3, [r3, #8]
 801507a:	429a      	cmp	r2, r3
 801507c:	d10d      	bne.n	801509a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801507e:	683b      	ldr	r3, [r7, #0]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d009      	beq.n	801509a <pbuf_copy+0x146>
 8015086:	4b15      	ldr	r3, [pc, #84]	; (80150dc <pbuf_copy+0x188>)
 8015088:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801508c:	4919      	ldr	r1, [pc, #100]	; (80150f4 <pbuf_copy+0x1a0>)
 801508e:	4815      	ldr	r0, [pc, #84]	; (80150e4 <pbuf_copy+0x190>)
 8015090:	f00c fe44 	bl	8021d1c <iprintf>
 8015094:	f06f 0305 	mvn.w	r3, #5
 8015098:	e01b      	b.n	80150d2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d013      	beq.n	80150c8 <pbuf_copy+0x174>
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	895a      	ldrh	r2, [r3, #10]
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	891b      	ldrh	r3, [r3, #8]
 80150a8:	429a      	cmp	r2, r3
 80150aa:	d10d      	bne.n	80150c8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d009      	beq.n	80150c8 <pbuf_copy+0x174>
 80150b4:	4b09      	ldr	r3, [pc, #36]	; (80150dc <pbuf_copy+0x188>)
 80150b6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80150ba:	490e      	ldr	r1, [pc, #56]	; (80150f4 <pbuf_copy+0x1a0>)
 80150bc:	4809      	ldr	r0, [pc, #36]	; (80150e4 <pbuf_copy+0x190>)
 80150be:	f00c fe2d 	bl	8021d1c <iprintf>
 80150c2:	f06f 0305 	mvn.w	r3, #5
 80150c6:	e004      	b.n	80150d2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	f47f af61 	bne.w	8014f92 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80150d0:	2300      	movs	r3, #0
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3718      	adds	r7, #24
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}
 80150da:	bf00      	nop
 80150dc:	08025b30 	.word	0x08025b30
 80150e0:	08025df8 	.word	0x08025df8
 80150e4:	08025bb0 	.word	0x08025bb0
 80150e8:	08025e28 	.word	0x08025e28
 80150ec:	08025e40 	.word	0x08025e40
 80150f0:	08025e5c 	.word	0x08025e5c
 80150f4:	08025e6c 	.word	0x08025e6c

080150f8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b088      	sub	sp, #32
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	60f8      	str	r0, [r7, #12]
 8015100:	60b9      	str	r1, [r7, #8]
 8015102:	4611      	mov	r1, r2
 8015104:	461a      	mov	r2, r3
 8015106:	460b      	mov	r3, r1
 8015108:	80fb      	strh	r3, [r7, #6]
 801510a:	4613      	mov	r3, r2
 801510c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801510e:	2300      	movs	r3, #0
 8015110:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8015112:	2300      	movs	r3, #0
 8015114:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d108      	bne.n	801512e <pbuf_copy_partial+0x36>
 801511c:	4b2b      	ldr	r3, [pc, #172]	; (80151cc <pbuf_copy_partial+0xd4>)
 801511e:	f240 420a 	movw	r2, #1034	; 0x40a
 8015122:	492b      	ldr	r1, [pc, #172]	; (80151d0 <pbuf_copy_partial+0xd8>)
 8015124:	482b      	ldr	r0, [pc, #172]	; (80151d4 <pbuf_copy_partial+0xdc>)
 8015126:	f00c fdf9 	bl	8021d1c <iprintf>
 801512a:	2300      	movs	r3, #0
 801512c:	e04a      	b.n	80151c4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d108      	bne.n	8015146 <pbuf_copy_partial+0x4e>
 8015134:	4b25      	ldr	r3, [pc, #148]	; (80151cc <pbuf_copy_partial+0xd4>)
 8015136:	f240 420b 	movw	r2, #1035	; 0x40b
 801513a:	4927      	ldr	r1, [pc, #156]	; (80151d8 <pbuf_copy_partial+0xe0>)
 801513c:	4825      	ldr	r0, [pc, #148]	; (80151d4 <pbuf_copy_partial+0xdc>)
 801513e:	f00c fded 	bl	8021d1c <iprintf>
 8015142:	2300      	movs	r3, #0
 8015144:	e03e      	b.n	80151c4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	61fb      	str	r3, [r7, #28]
 801514a:	e034      	b.n	80151b6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801514c:	88bb      	ldrh	r3, [r7, #4]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d00a      	beq.n	8015168 <pbuf_copy_partial+0x70>
 8015152:	69fb      	ldr	r3, [r7, #28]
 8015154:	895b      	ldrh	r3, [r3, #10]
 8015156:	88ba      	ldrh	r2, [r7, #4]
 8015158:	429a      	cmp	r2, r3
 801515a:	d305      	bcc.n	8015168 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801515c:	69fb      	ldr	r3, [r7, #28]
 801515e:	895b      	ldrh	r3, [r3, #10]
 8015160:	88ba      	ldrh	r2, [r7, #4]
 8015162:	1ad3      	subs	r3, r2, r3
 8015164:	80bb      	strh	r3, [r7, #4]
 8015166:	e023      	b.n	80151b0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8015168:	69fb      	ldr	r3, [r7, #28]
 801516a:	895a      	ldrh	r2, [r3, #10]
 801516c:	88bb      	ldrh	r3, [r7, #4]
 801516e:	1ad3      	subs	r3, r2, r3
 8015170:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8015172:	8b3a      	ldrh	r2, [r7, #24]
 8015174:	88fb      	ldrh	r3, [r7, #6]
 8015176:	429a      	cmp	r2, r3
 8015178:	d901      	bls.n	801517e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801517a:	88fb      	ldrh	r3, [r7, #6]
 801517c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801517e:	8b7b      	ldrh	r3, [r7, #26]
 8015180:	68ba      	ldr	r2, [r7, #8]
 8015182:	18d0      	adds	r0, r2, r3
 8015184:	69fb      	ldr	r3, [r7, #28]
 8015186:	685a      	ldr	r2, [r3, #4]
 8015188:	88bb      	ldrh	r3, [r7, #4]
 801518a:	4413      	add	r3, r2
 801518c:	8b3a      	ldrh	r2, [r7, #24]
 801518e:	4619      	mov	r1, r3
 8015190:	f00c f952 	bl	8021438 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015194:	8afa      	ldrh	r2, [r7, #22]
 8015196:	8b3b      	ldrh	r3, [r7, #24]
 8015198:	4413      	add	r3, r2
 801519a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801519c:	8b7a      	ldrh	r2, [r7, #26]
 801519e:	8b3b      	ldrh	r3, [r7, #24]
 80151a0:	4413      	add	r3, r2
 80151a2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80151a4:	88fa      	ldrh	r2, [r7, #6]
 80151a6:	8b3b      	ldrh	r3, [r7, #24]
 80151a8:	1ad3      	subs	r3, r2, r3
 80151aa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80151ac:	2300      	movs	r3, #0
 80151ae:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80151b0:	69fb      	ldr	r3, [r7, #28]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	61fb      	str	r3, [r7, #28]
 80151b6:	88fb      	ldrh	r3, [r7, #6]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d002      	beq.n	80151c2 <pbuf_copy_partial+0xca>
 80151bc:	69fb      	ldr	r3, [r7, #28]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d1c4      	bne.n	801514c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80151c2:	8afb      	ldrh	r3, [r7, #22]
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	3720      	adds	r7, #32
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}
 80151cc:	08025b30 	.word	0x08025b30
 80151d0:	08025e98 	.word	0x08025e98
 80151d4:	08025bb0 	.word	0x08025bb0
 80151d8:	08025eb8 	.word	0x08025eb8

080151dc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b084      	sub	sp, #16
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	4603      	mov	r3, r0
 80151e4:	603a      	str	r2, [r7, #0]
 80151e6:	71fb      	strb	r3, [r7, #7]
 80151e8:	460b      	mov	r3, r1
 80151ea:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	8919      	ldrh	r1, [r3, #8]
 80151f0:	88ba      	ldrh	r2, [r7, #4]
 80151f2:	79fb      	ldrb	r3, [r7, #7]
 80151f4:	4618      	mov	r0, r3
 80151f6:	f7ff fa95 	bl	8014724 <pbuf_alloc>
 80151fa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d101      	bne.n	8015206 <pbuf_clone+0x2a>
    return NULL;
 8015202:	2300      	movs	r3, #0
 8015204:	e011      	b.n	801522a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8015206:	6839      	ldr	r1, [r7, #0]
 8015208:	68f8      	ldr	r0, [r7, #12]
 801520a:	f7ff fea3 	bl	8014f54 <pbuf_copy>
 801520e:	4603      	mov	r3, r0
 8015210:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8015212:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d006      	beq.n	8015228 <pbuf_clone+0x4c>
 801521a:	4b06      	ldr	r3, [pc, #24]	; (8015234 <pbuf_clone+0x58>)
 801521c:	f240 5224 	movw	r2, #1316	; 0x524
 8015220:	4905      	ldr	r1, [pc, #20]	; (8015238 <pbuf_clone+0x5c>)
 8015222:	4806      	ldr	r0, [pc, #24]	; (801523c <pbuf_clone+0x60>)
 8015224:	f00c fd7a 	bl	8021d1c <iprintf>
  return q;
 8015228:	68fb      	ldr	r3, [r7, #12]
}
 801522a:	4618      	mov	r0, r3
 801522c:	3710      	adds	r7, #16
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
 8015232:	bf00      	nop
 8015234:	08025b30 	.word	0x08025b30
 8015238:	08025fc4 	.word	0x08025fc4
 801523c:	08025bb0 	.word	0x08025bb0

08015240 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8015240:	b480      	push	{r7}
 8015242:	b085      	sub	sp, #20
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	2b00      	cmp	r3, #0
 8015250:	db02      	blt.n	8015258 <tryget_socket_unconn_nouse+0x18>
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	2b03      	cmp	r3, #3
 8015256:	dd01      	ble.n	801525c <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8015258:	2300      	movs	r3, #0
 801525a:	e003      	b.n	8015264 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	011b      	lsls	r3, r3, #4
 8015260:	4a03      	ldr	r2, [pc, #12]	; (8015270 <tryget_socket_unconn_nouse+0x30>)
 8015262:	4413      	add	r3, r2
}
 8015264:	4618      	mov	r0, r3
 8015266:	3714      	adds	r7, #20
 8015268:	46bd      	mov	sp, r7
 801526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526e:	4770      	bx	lr
 8015270:	24004918 	.word	0x24004918

08015274 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b084      	sub	sp, #16
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 801527c:	6878      	ldr	r0, [r7, #4]
 801527e:	f7ff ffdf 	bl	8015240 <tryget_socket_unconn_nouse>
 8015282:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8015284:	68fb      	ldr	r3, [r7, #12]
}
 8015286:	4618      	mov	r0, r3
 8015288:	3710      	adds	r7, #16
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}

0801528e <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 801528e:	b580      	push	{r7, lr}
 8015290:	b084      	sub	sp, #16
 8015292:	af00      	add	r7, sp, #0
 8015294:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8015296:	6878      	ldr	r0, [r7, #4]
 8015298:	f7ff ffec 	bl	8015274 <tryget_socket_unconn>
 801529c:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d005      	beq.n	80152b0 <tryget_socket+0x22>
    if (sock->conn) {
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d001      	beq.n	80152b0 <tryget_socket+0x22>
      return sock;
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	e000      	b.n	80152b2 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 80152b0:	2300      	movs	r3, #0
}
 80152b2:	4618      	mov	r0, r3
 80152b4:	3710      	adds	r7, #16
 80152b6:	46bd      	mov	sp, r7
 80152b8:	bd80      	pop	{r7, pc}
	...

080152bc <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b084      	sub	sp, #16
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 80152c4:	6878      	ldr	r0, [r7, #4]
 80152c6:	f7ff ffe2 	bl	801528e <tryget_socket>
 80152ca:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d104      	bne.n	80152dc <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 80152d2:	4b05      	ldr	r3, [pc, #20]	; (80152e8 <get_socket+0x2c>)
 80152d4:	2209      	movs	r2, #9
 80152d6:	601a      	str	r2, [r3, #0]
    return NULL;
 80152d8:	2300      	movs	r3, #0
 80152da:	e000      	b.n	80152de <get_socket+0x22>
  }
  return sock;
 80152dc:	68fb      	ldr	r3, [r7, #12]
}
 80152de:	4618      	mov	r0, r3
 80152e0:	3710      	adds	r7, #16
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd80      	pop	{r7, pc}
 80152e6:	bf00      	nop
 80152e8:	2400d240 	.word	0x2400d240

080152ec <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b084      	sub	sp, #16
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
 80152f4:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80152f6:	2300      	movs	r3, #0
 80152f8:	60fb      	str	r3, [r7, #12]
 80152fa:	e052      	b.n	80153a2 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 80152fc:	f000 fe6e 	bl	8015fdc <sys_arch_protect>
 8015300:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8015302:	4a2c      	ldr	r2, [pc, #176]	; (80153b4 <alloc_socket+0xc8>)
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	011b      	lsls	r3, r3, #4
 8015308:	4413      	add	r3, r2
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d142      	bne.n	8015396 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8015310:	4a28      	ldr	r2, [pc, #160]	; (80153b4 <alloc_socket+0xc8>)
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	011b      	lsls	r3, r3, #4
 8015316:	4413      	add	r3, r2
 8015318:	687a      	ldr	r2, [r7, #4]
 801531a:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 801531c:	68b8      	ldr	r0, [r7, #8]
 801531e:	f000 fe6b 	bl	8015ff8 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8015322:	4a24      	ldr	r2, [pc, #144]	; (80153b4 <alloc_socket+0xc8>)
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	011b      	lsls	r3, r3, #4
 8015328:	4413      	add	r3, r2
 801532a:	3304      	adds	r3, #4
 801532c:	2200      	movs	r2, #0
 801532e:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8015330:	4a20      	ldr	r2, [pc, #128]	; (80153b4 <alloc_socket+0xc8>)
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	011b      	lsls	r3, r3, #4
 8015336:	4413      	add	r3, r2
 8015338:	330e      	adds	r3, #14
 801533a:	781b      	ldrb	r3, [r3, #0]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d006      	beq.n	801534e <alloc_socket+0x62>
 8015340:	4b1d      	ldr	r3, [pc, #116]	; (80153b8 <alloc_socket+0xcc>)
 8015342:	f240 220e 	movw	r2, #526	; 0x20e
 8015346:	491d      	ldr	r1, [pc, #116]	; (80153bc <alloc_socket+0xd0>)
 8015348:	481d      	ldr	r0, [pc, #116]	; (80153c0 <alloc_socket+0xd4>)
 801534a:	f00c fce7 	bl	8021d1c <iprintf>
      sockets[i].rcvevent   = 0;
 801534e:	4a19      	ldr	r2, [pc, #100]	; (80153b4 <alloc_socket+0xc8>)
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	011b      	lsls	r3, r3, #4
 8015354:	4413      	add	r3, r2
 8015356:	3308      	adds	r3, #8
 8015358:	2200      	movs	r2, #0
 801535a:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	781b      	ldrb	r3, [r3, #0]
 8015360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015364:	2b10      	cmp	r3, #16
 8015366:	d102      	bne.n	801536e <alloc_socket+0x82>
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d001      	beq.n	8015372 <alloc_socket+0x86>
 801536e:	2301      	movs	r3, #1
 8015370:	e000      	b.n	8015374 <alloc_socket+0x88>
 8015372:	2300      	movs	r3, #0
 8015374:	b299      	uxth	r1, r3
 8015376:	4a0f      	ldr	r2, [pc, #60]	; (80153b4 <alloc_socket+0xc8>)
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	011b      	lsls	r3, r3, #4
 801537c:	4413      	add	r3, r2
 801537e:	330a      	adds	r3, #10
 8015380:	460a      	mov	r2, r1
 8015382:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8015384:	4a0b      	ldr	r2, [pc, #44]	; (80153b4 <alloc_socket+0xc8>)
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	011b      	lsls	r3, r3, #4
 801538a:	4413      	add	r3, r2
 801538c:	330c      	adds	r3, #12
 801538e:	2200      	movs	r2, #0
 8015390:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	e00a      	b.n	80153ac <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 8015396:	68b8      	ldr	r0, [r7, #8]
 8015398:	f000 fe2e 	bl	8015ff8 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	3301      	adds	r3, #1
 80153a0:	60fb      	str	r3, [r7, #12]
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	2b03      	cmp	r3, #3
 80153a6:	dda9      	ble.n	80152fc <alloc_socket+0x10>
  }
  return -1;
 80153a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80153ac:	4618      	mov	r0, r3
 80153ae:	3710      	adds	r7, #16
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}
 80153b4:	24004918 	.word	0x24004918
 80153b8:	08025fd8 	.word	0x08025fd8
 80153bc:	08026028 	.word	0x08026028
 80153c0:	08026048 	.word	0x08026048

080153c4 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 80153c4:	b480      	push	{r7}
 80153c6:	b085      	sub	sp, #20
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	60f8      	str	r0, [r7, #12]
 80153cc:	60b9      	str	r1, [r7, #8]
 80153ce:	607a      	str	r2, [r7, #4]
 80153d0:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	68fa      	ldr	r2, [r7, #12]
 80153d6:	6852      	ldr	r2, [r2, #4]
 80153d8:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	2200      	movs	r2, #0
 80153de:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	681a      	ldr	r2, [r3, #0]
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2200      	movs	r2, #0
 80153ec:	601a      	str	r2, [r3, #0]
  return 1;
 80153ee:	2301      	movs	r3, #1
}
 80153f0:	4618      	mov	r0, r3
 80153f2:	3714      	adds	r7, #20
 80153f4:	46bd      	mov	sp, r7
 80153f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fa:	4770      	bx	lr

080153fc <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b084      	sub	sp, #16
 8015400:	af00      	add	r7, sp, #0
 8015402:	60f8      	str	r0, [r7, #12]
 8015404:	60b9      	str	r1, [r7, #8]
 8015406:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d00d      	beq.n	801542c <free_socket_free_elements+0x30>
    if (is_tcp) {
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d005      	beq.n	8015422 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	4618      	mov	r0, r3
 801541c:	f7ff fc66 	bl	8014cec <pbuf_free>
 8015420:	e004      	b.n	801542c <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	4618      	mov	r0, r3
 8015428:	f7fe fd54 	bl	8013ed4 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d002      	beq.n	8015438 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8015432:	68b8      	ldr	r0, [r7, #8]
 8015434:	f7f9 fe0a 	bl	800f04c <netconn_delete>
  }
}
 8015438:	bf00      	nop
 801543a:	3710      	adds	r7, #16
 801543c:	46bd      	mov	sp, r7
 801543e:	bd80      	pop	{r7, pc}

08015440 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b086      	sub	sp, #24
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
 8015448:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 801544a:	f000 fdc7 	bl	8015fdc <sys_arch_protect>
 801544e:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8015450:	f107 0308 	add.w	r3, r7, #8
 8015454:	f107 020c 	add.w	r2, r7, #12
 8015458:	6839      	ldr	r1, [r7, #0]
 801545a:	6878      	ldr	r0, [r7, #4]
 801545c:	f7ff ffb2 	bl	80153c4 <free_socket_locked>
 8015460:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 8015462:	6978      	ldr	r0, [r7, #20]
 8015464:	f000 fdc8 	bl	8015ff8 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8015468:	693b      	ldr	r3, [r7, #16]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d006      	beq.n	801547c <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	f107 0208 	add.w	r2, r7, #8
 8015474:	4619      	mov	r1, r3
 8015476:	6838      	ldr	r0, [r7, #0]
 8015478:	f7ff ffc0 	bl	80153fc <free_socket_free_elements>
  }
}
 801547c:	bf00      	nop
 801547e:	3718      	adds	r7, #24
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}

08015484 <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b086      	sub	sp, #24
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 801548c:	2300      	movs	r3, #0
 801548e:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8015490:	6878      	ldr	r0, [r7, #4]
 8015492:	f7ff ff13 	bl	80152bc <get_socket>
 8015496:	6138      	str	r0, [r7, #16]
  if (!sock) {
 8015498:	693b      	ldr	r3, [r7, #16]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d102      	bne.n	80154a4 <lwip_close+0x20>
    return -1;
 801549e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80154a2:	e039      	b.n	8015518 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 80154a4:	693b      	ldr	r3, [r7, #16]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d00b      	beq.n	80154c4 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80154ac:	693b      	ldr	r3, [r7, #16]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	781b      	ldrb	r3, [r3, #0]
 80154b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80154b6:	2b10      	cmp	r3, #16
 80154b8:	bf0c      	ite	eq
 80154ba:	2301      	moveq	r3, #1
 80154bc:	2300      	movne	r3, #0
 80154be:	b2db      	uxtb	r3, r3
 80154c0:	617b      	str	r3, [r7, #20]
 80154c2:	e00a      	b.n	80154da <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 80154c4:	693b      	ldr	r3, [r7, #16]
 80154c6:	685b      	ldr	r3, [r3, #4]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d006      	beq.n	80154da <lwip_close+0x56>
 80154cc:	4b14      	ldr	r3, [pc, #80]	; (8015520 <lwip_close+0x9c>)
 80154ce:	f44f 7245 	mov.w	r2, #788	; 0x314
 80154d2:	4914      	ldr	r1, [pc, #80]	; (8015524 <lwip_close+0xa0>)
 80154d4:	4814      	ldr	r0, [pc, #80]	; (8015528 <lwip_close+0xa4>)
 80154d6:	f00c fc21 	bl	8021d1c <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	4618      	mov	r0, r3
 80154e0:	f7f9 fd90 	bl	800f004 <netconn_prepare_delete>
 80154e4:	4603      	mov	r3, r0
 80154e6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80154e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d00e      	beq.n	801550e <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 80154f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7fb faad 	bl	8010a54 <err_to_errno>
 80154fa:	60b8      	str	r0, [r7, #8]
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d002      	beq.n	8015508 <lwip_close+0x84>
 8015502:	4a0a      	ldr	r2, [pc, #40]	; (801552c <lwip_close+0xa8>)
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8015508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801550c:	e004      	b.n	8015518 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 801550e:	6979      	ldr	r1, [r7, #20]
 8015510:	6938      	ldr	r0, [r7, #16]
 8015512:	f7ff ff95 	bl	8015440 <free_socket>
  set_errno(0);
  return 0;
 8015516:	2300      	movs	r3, #0
}
 8015518:	4618      	mov	r0, r3
 801551a:	3718      	adds	r7, #24
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	08025fd8 	.word	0x08025fd8
 8015524:	080260b4 	.word	0x080260b4
 8015528:	08026048 	.word	0x08026048
 801552c:	2400d240 	.word	0x2400d240

08015530 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b08c      	sub	sp, #48	; 0x30
 8015534:	af00      	add	r7, sp, #0
 8015536:	60f8      	str	r0, [r7, #12]
 8015538:	60b9      	str	r1, [r7, #8]
 801553a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 801553c:	68f8      	ldr	r0, [r7, #12]
 801553e:	f7ff febd 	bl	80152bc <get_socket>
 8015542:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 8015544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015546:	2b00      	cmp	r3, #0
 8015548:	d102      	bne.n	8015550 <lwip_connect+0x20>
    return -1;
 801554a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801554e:	e062      	b.n	8015616 <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 8015550:	68bb      	ldr	r3, [r7, #8]
 8015552:	785b      	ldrb	r3, [r3, #1]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d108      	bne.n	801556a <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 8015558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	4618      	mov	r0, r3
 801555e:	f7f9 fdc9 	bl	800f0f4 <netconn_disconnect>
 8015562:	4603      	mov	r3, r0
 8015564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015568:	e039      	b.n	80155de <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	2b10      	cmp	r3, #16
 801556e:	d10c      	bne.n	801558a <lwip_connect+0x5a>
 8015570:	68bb      	ldr	r3, [r7, #8]
 8015572:	785b      	ldrb	r3, [r3, #1]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d003      	beq.n	8015580 <lwip_connect+0x50>
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	785b      	ldrb	r3, [r3, #1]
 801557c:	2b02      	cmp	r3, #2
 801557e:	d104      	bne.n	801558a <lwip_connect+0x5a>
 8015580:	68bb      	ldr	r3, [r7, #8]
 8015582:	f003 0303 	and.w	r3, r3, #3
 8015586:	2b00      	cmp	r3, #0
 8015588:	d014      	beq.n	80155b4 <lwip_connect+0x84>
 801558a:	4b25      	ldr	r3, [pc, #148]	; (8015620 <lwip_connect+0xf0>)
 801558c:	f240 3247 	movw	r2, #839	; 0x347
 8015590:	4924      	ldr	r1, [pc, #144]	; (8015624 <lwip_connect+0xf4>)
 8015592:	4825      	ldr	r0, [pc, #148]	; (8015628 <lwip_connect+0xf8>)
 8015594:	f00c fbc2 	bl	8021d1c <iprintf>
 8015598:	f06f 000f 	mvn.w	r0, #15
 801559c:	f7fb fa5a 	bl	8010a54 <err_to_errno>
 80155a0:	6238      	str	r0, [r7, #32]
 80155a2:	6a3b      	ldr	r3, [r7, #32]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d002      	beq.n	80155ae <lwip_connect+0x7e>
 80155a8:	4a20      	ldr	r2, [pc, #128]	; (801562c <lwip_connect+0xfc>)
 80155aa:	6a3b      	ldr	r3, [r7, #32]
 80155ac:	6013      	str	r3, [r2, #0]
 80155ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80155b2:	e030      	b.n	8015616 <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	685b      	ldr	r3, [r3, #4]
 80155b8:	617b      	str	r3, [r7, #20]
 80155ba:	68bb      	ldr	r3, [r7, #8]
 80155bc:	885b      	ldrh	r3, [r3, #2]
 80155be:	4618      	mov	r0, r3
 80155c0:	f7fb fa1a 	bl	80109f8 <lwip_htons>
 80155c4:	4603      	mov	r3, r0
 80155c6:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 80155c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80155ce:	f107 0114 	add.w	r1, r7, #20
 80155d2:	4618      	mov	r0, r3
 80155d4:	f7f9 fd56 	bl	800f084 <netconn_connect>
 80155d8:	4603      	mov	r3, r0
 80155da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 80155de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d00e      	beq.n	8015604 <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 80155e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7fb fa32 	bl	8010a54 <err_to_errno>
 80155f0:	61b8      	str	r0, [r7, #24]
 80155f2:	69bb      	ldr	r3, [r7, #24]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d002      	beq.n	80155fe <lwip_connect+0xce>
 80155f8:	4a0c      	ldr	r2, [pc, #48]	; (801562c <lwip_connect+0xfc>)
 80155fa:	69bb      	ldr	r3, [r7, #24]
 80155fc:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80155fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015602:	e008      	b.n	8015616 <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8015604:	2300      	movs	r3, #0
 8015606:	61fb      	str	r3, [r7, #28]
 8015608:	69fb      	ldr	r3, [r7, #28]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d002      	beq.n	8015614 <lwip_connect+0xe4>
 801560e:	4a07      	ldr	r2, [pc, #28]	; (801562c <lwip_connect+0xfc>)
 8015610:	69fb      	ldr	r3, [r7, #28]
 8015612:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8015614:	2300      	movs	r3, #0
}
 8015616:	4618      	mov	r0, r3
 8015618:	3730      	adds	r7, #48	; 0x30
 801561a:	46bd      	mov	sp, r7
 801561c:	bd80      	pop	{r7, pc}
 801561e:	bf00      	nop
 8015620:	08025fd8 	.word	0x08025fd8
 8015624:	080260cc 	.word	0x080260cc
 8015628:	08026048 	.word	0x08026048
 801562c:	2400d240 	.word	0x2400d240

08015630 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b08a      	sub	sp, #40	; 0x28
 8015634:	af02      	add	r7, sp, #8
 8015636:	60f8      	str	r0, [r7, #12]
 8015638:	60b9      	str	r1, [r7, #8]
 801563a:	607a      	str	r2, [r7, #4]
 801563c:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 801563e:	68f8      	ldr	r0, [r7, #12]
 8015640:	f7ff fe3c 	bl	80152bc <get_socket>
 8015644:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8015646:	69fb      	ldr	r3, [r7, #28]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d102      	bne.n	8015652 <lwip_send+0x22>
    return -1;
 801564c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015650:	e046      	b.n	80156e0 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8015652:	69fb      	ldr	r3, [r7, #28]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	781b      	ldrb	r3, [r3, #0]
 8015658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801565c:	2b10      	cmp	r3, #16
 801565e:	d00b      	beq.n	8015678 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8015660:	2300      	movs	r3, #0
 8015662:	9301      	str	r3, [sp, #4]
 8015664:	2300      	movs	r3, #0
 8015666:	9300      	str	r3, [sp, #0]
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	687a      	ldr	r2, [r7, #4]
 801566c:	68b9      	ldr	r1, [r7, #8]
 801566e:	68f8      	ldr	r0, [r7, #12]
 8015670:	f000 f83c 	bl	80156ec <lwip_sendto>
 8015674:	4603      	mov	r3, r0
 8015676:	e033      	b.n	80156e0 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8015678:	683b      	ldr	r3, [r7, #0]
 801567a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 801567e:	2b00      	cmp	r3, #0
 8015680:	d001      	beq.n	8015686 <lwip_send+0x56>
 8015682:	2203      	movs	r2, #3
 8015684:	e000      	b.n	8015688 <lwip_send+0x58>
 8015686:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	105b      	asrs	r3, r3, #1
 801568c:	b25b      	sxtb	r3, r3
 801568e:	f003 0304 	and.w	r3, r3, #4
 8015692:	b25b      	sxtb	r3, r3
 8015694:	4313      	orrs	r3, r2
 8015696:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8015698:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 801569a:	2300      	movs	r3, #0
 801569c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 801569e:	69fb      	ldr	r3, [r7, #28]
 80156a0:	6818      	ldr	r0, [r3, #0]
 80156a2:	7efa      	ldrb	r2, [r7, #27]
 80156a4:	f107 0310 	add.w	r3, r7, #16
 80156a8:	9300      	str	r3, [sp, #0]
 80156aa:	4613      	mov	r3, r2
 80156ac:	687a      	ldr	r2, [r7, #4]
 80156ae:	68b9      	ldr	r1, [r7, #8]
 80156b0:	f7f9 fd78 	bl	800f1a4 <netconn_write_partly>
 80156b4:	4603      	mov	r3, r0
 80156b6:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 80156b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80156bc:	4618      	mov	r0, r3
 80156be:	f7fb f9c9 	bl	8010a54 <err_to_errno>
 80156c2:	6178      	str	r0, [r7, #20]
 80156c4:	697b      	ldr	r3, [r7, #20]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d002      	beq.n	80156d0 <lwip_send+0xa0>
 80156ca:	4a07      	ldr	r2, [pc, #28]	; (80156e8 <lwip_send+0xb8>)
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 80156d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d101      	bne.n	80156dc <lwip_send+0xac>
 80156d8:	693b      	ldr	r3, [r7, #16]
 80156da:	e001      	b.n	80156e0 <lwip_send+0xb0>
 80156dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80156e0:	4618      	mov	r0, r3
 80156e2:	3720      	adds	r7, #32
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}
 80156e8:	2400d240 	.word	0x2400d240

080156ec <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b08e      	sub	sp, #56	; 0x38
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	60f8      	str	r0, [r7, #12]
 80156f4:	60b9      	str	r1, [r7, #8]
 80156f6:	607a      	str	r2, [r7, #4]
 80156f8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 80156fa:	68f8      	ldr	r0, [r7, #12]
 80156fc:	f7ff fdde 	bl	80152bc <get_socket>
 8015700:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 8015702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015704:	2b00      	cmp	r3, #0
 8015706:	d102      	bne.n	801570e <lwip_sendto+0x22>
    return -1;
 8015708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801570c:	e093      	b.n	8015836 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 801570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	781b      	ldrb	r3, [r3, #0]
 8015714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015718:	2b10      	cmp	r3, #16
 801571a:	d107      	bne.n	801572c <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	687a      	ldr	r2, [r7, #4]
 8015720:	68b9      	ldr	r1, [r7, #8]
 8015722:	68f8      	ldr	r0, [r7, #12]
 8015724:	f7ff ff84 	bl	8015630 <lwip_send>
 8015728:	4603      	mov	r3, r0
 801572a:	e084      	b.n	8015836 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015732:	d30a      	bcc.n	801574a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8015734:	235a      	movs	r3, #90	; 0x5a
 8015736:	623b      	str	r3, [r7, #32]
 8015738:	6a3b      	ldr	r3, [r7, #32]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d002      	beq.n	8015744 <lwip_sendto+0x58>
 801573e:	4a40      	ldr	r2, [pc, #256]	; (8015840 <lwip_sendto+0x154>)
 8015740:	6a3b      	ldr	r3, [r7, #32]
 8015742:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8015744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015748:	e075      	b.n	8015836 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 801574e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015750:	2b00      	cmp	r3, #0
 8015752:	d102      	bne.n	801575a <lwip_sendto+0x6e>
 8015754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015756:	2b00      	cmp	r3, #0
 8015758:	d023      	beq.n	80157a2 <lwip_sendto+0xb6>
 801575a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801575c:	2b10      	cmp	r3, #16
 801575e:	d10b      	bne.n	8015778 <lwip_sendto+0x8c>
 8015760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015762:	2b00      	cmp	r3, #0
 8015764:	d008      	beq.n	8015778 <lwip_sendto+0x8c>
 8015766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015768:	785b      	ldrb	r3, [r3, #1]
 801576a:	2b02      	cmp	r3, #2
 801576c:	d104      	bne.n	8015778 <lwip_sendto+0x8c>
 801576e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015770:	f003 0303 	and.w	r3, r3, #3
 8015774:	2b00      	cmp	r3, #0
 8015776:	d014      	beq.n	80157a2 <lwip_sendto+0xb6>
 8015778:	4b32      	ldr	r3, [pc, #200]	; (8015844 <lwip_sendto+0x158>)
 801577a:	f240 6252 	movw	r2, #1618	; 0x652
 801577e:	4932      	ldr	r1, [pc, #200]	; (8015848 <lwip_sendto+0x15c>)
 8015780:	4832      	ldr	r0, [pc, #200]	; (801584c <lwip_sendto+0x160>)
 8015782:	f00c facb 	bl	8021d1c <iprintf>
 8015786:	f06f 000f 	mvn.w	r0, #15
 801578a:	f7fb f963 	bl	8010a54 <err_to_errno>
 801578e:	62b8      	str	r0, [r7, #40]	; 0x28
 8015790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015792:	2b00      	cmp	r3, #0
 8015794:	d002      	beq.n	801579c <lwip_sendto+0xb0>
 8015796:	4a2a      	ldr	r2, [pc, #168]	; (8015840 <lwip_sendto+0x154>)
 8015798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801579a:	6013      	str	r3, [r2, #0]
 801579c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157a0:	e049      	b.n	8015836 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 80157a2:	2300      	movs	r3, #0
 80157a4:	617b      	str	r3, [r7, #20]
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 80157aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d00a      	beq.n	80157c6 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 80157b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80157b2:	685b      	ldr	r3, [r3, #4]
 80157b4:	61bb      	str	r3, [r7, #24]
 80157b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80157b8:	885b      	ldrh	r3, [r3, #2]
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7fb f91c 	bl	80109f8 <lwip_htons>
 80157c0:	4603      	mov	r3, r0
 80157c2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80157c4:	e003      	b.n	80157ce <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 80157c6:	2300      	movs	r3, #0
 80157c8:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 80157ca:	2300      	movs	r3, #0
 80157cc:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 80157ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80157d0:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 80157d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80157d4:	f107 0310 	add.w	r3, r7, #16
 80157d8:	68b9      	ldr	r1, [r7, #8]
 80157da:	4618      	mov	r0, r3
 80157dc:	f7fe fbc2 	bl	8013f64 <netbuf_ref>
 80157e0:	4603      	mov	r3, r0
 80157e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 80157e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d10a      	bne.n	8015804 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 80157ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	f107 0210 	add.w	r2, r7, #16
 80157f6:	4611      	mov	r1, r2
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7f9 fca5 	bl	800f148 <netconn_send>
 80157fe:	4603      	mov	r3, r0
 8015800:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8015804:	f107 0310 	add.w	r3, r7, #16
 8015808:	4618      	mov	r0, r3
 801580a:	f7fe fb83 	bl	8013f14 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 801580e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8015812:	4618      	mov	r0, r3
 8015814:	f7fb f91e 	bl	8010a54 <err_to_errno>
 8015818:	6278      	str	r0, [r7, #36]	; 0x24
 801581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801581c:	2b00      	cmp	r3, #0
 801581e:	d002      	beq.n	8015826 <lwip_sendto+0x13a>
 8015820:	4a07      	ldr	r2, [pc, #28]	; (8015840 <lwip_sendto+0x154>)
 8015822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015824:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 8015826:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801582a:	2b00      	cmp	r3, #0
 801582c:	d101      	bne.n	8015832 <lwip_sendto+0x146>
 801582e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015830:	e001      	b.n	8015836 <lwip_sendto+0x14a>
 8015832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015836:	4618      	mov	r0, r3
 8015838:	3738      	adds	r7, #56	; 0x38
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}
 801583e:	bf00      	nop
 8015840:	2400d240 	.word	0x2400d240
 8015844:	08025fd8 	.word	0x08025fd8
 8015848:	080262d4 	.word	0x080262d4
 801584c:	08026048 	.word	0x08026048

08015850 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b086      	sub	sp, #24
 8015854:	af00      	add	r7, sp, #0
 8015856:	60f8      	str	r0, [r7, #12]
 8015858:	60b9      	str	r1, [r7, #8]
 801585a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	2b03      	cmp	r3, #3
 8015860:	d009      	beq.n	8015876 <lwip_socket+0x26>
 8015862:	68bb      	ldr	r3, [r7, #8]
 8015864:	2b03      	cmp	r3, #3
 8015866:	dc23      	bgt.n	80158b0 <lwip_socket+0x60>
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	2b01      	cmp	r3, #1
 801586c:	d019      	beq.n	80158a2 <lwip_socket+0x52>
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	2b02      	cmp	r3, #2
 8015872:	d009      	beq.n	8015888 <lwip_socket+0x38>
 8015874:	e01c      	b.n	80158b0 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	b2db      	uxtb	r3, r3
 801587a:	4a22      	ldr	r2, [pc, #136]	; (8015904 <lwip_socket+0xb4>)
 801587c:	4619      	mov	r1, r3
 801587e:	2040      	movs	r0, #64	; 0x40
 8015880:	f7f9 fb46 	bl	800ef10 <netconn_new_with_proto_and_callback>
 8015884:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8015886:	e019      	b.n	80158bc <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	2b88      	cmp	r3, #136	; 0x88
 801588c:	d101      	bne.n	8015892 <lwip_socket+0x42>
 801588e:	2321      	movs	r3, #33	; 0x21
 8015890:	e000      	b.n	8015894 <lwip_socket+0x44>
 8015892:	2320      	movs	r3, #32
 8015894:	4a1b      	ldr	r2, [pc, #108]	; (8015904 <lwip_socket+0xb4>)
 8015896:	2100      	movs	r1, #0
 8015898:	4618      	mov	r0, r3
 801589a:	f7f9 fb39 	bl	800ef10 <netconn_new_with_proto_and_callback>
 801589e:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80158a0:	e00c      	b.n	80158bc <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 80158a2:	4a18      	ldr	r2, [pc, #96]	; (8015904 <lwip_socket+0xb4>)
 80158a4:	2100      	movs	r1, #0
 80158a6:	2010      	movs	r0, #16
 80158a8:	f7f9 fb32 	bl	800ef10 <netconn_new_with_proto_and_callback>
 80158ac:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 80158ae:	e005      	b.n	80158bc <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 80158b0:	4b15      	ldr	r3, [pc, #84]	; (8015908 <lwip_socket+0xb8>)
 80158b2:	2216      	movs	r2, #22
 80158b4:	601a      	str	r2, [r3, #0]
      return -1;
 80158b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80158ba:	e01e      	b.n	80158fa <lwip_socket+0xaa>
  }

  if (!conn) {
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d105      	bne.n	80158ce <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 80158c2:	4b11      	ldr	r3, [pc, #68]	; (8015908 <lwip_socket+0xb8>)
 80158c4:	2269      	movs	r2, #105	; 0x69
 80158c6:	601a      	str	r2, [r3, #0]
    return -1;
 80158c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80158cc:	e015      	b.n	80158fa <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 80158ce:	2100      	movs	r1, #0
 80158d0:	6978      	ldr	r0, [r7, #20]
 80158d2:	f7ff fd0b 	bl	80152ec <alloc_socket>
 80158d6:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 80158d8:	693b      	ldr	r3, [r7, #16]
 80158da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80158de:	d108      	bne.n	80158f2 <lwip_socket+0xa2>
    netconn_delete(conn);
 80158e0:	6978      	ldr	r0, [r7, #20]
 80158e2:	f7f9 fbb3 	bl	800f04c <netconn_delete>
    set_errno(ENFILE);
 80158e6:	4b08      	ldr	r3, [pc, #32]	; (8015908 <lwip_socket+0xb8>)
 80158e8:	2217      	movs	r2, #23
 80158ea:	601a      	str	r2, [r3, #0]
    return -1;
 80158ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80158f0:	e003      	b.n	80158fa <lwip_socket+0xaa>
  }
  conn->socket = i;
 80158f2:	697b      	ldr	r3, [r7, #20]
 80158f4:	693a      	ldr	r2, [r7, #16]
 80158f6:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 80158f8:	693b      	ldr	r3, [r7, #16]
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3718      	adds	r7, #24
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
 8015902:	bf00      	nop
 8015904:	08015995 	.word	0x08015995
 8015908:	2400d240 	.word	0x2400d240

0801590c <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 801590c:	b480      	push	{r7}
 801590e:	b087      	sub	sp, #28
 8015910:	af00      	add	r7, sp, #0
 8015912:	60f8      	str	r0, [r7, #12]
 8015914:	60b9      	str	r1, [r7, #8]
 8015916:	607a      	str	r2, [r7, #4]
 8015918:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 801591a:	2300      	movs	r3, #0
 801591c:	617b      	str	r3, [r7, #20]
 801591e:	e02c      	b.n	801597a <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	695a      	ldr	r2, [r3, #20]
 8015924:	697b      	ldr	r3, [r7, #20]
 8015926:	00db      	lsls	r3, r3, #3
 8015928:	4413      	add	r3, r2
 801592a:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 801592c:	693b      	ldr	r3, [r7, #16]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	68ba      	ldr	r2, [r7, #8]
 8015932:	429a      	cmp	r2, r3
 8015934:	d11e      	bne.n	8015974 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d009      	beq.n	8015950 <lwip_poll_should_wake+0x44>
 801593c:	693b      	ldr	r3, [r7, #16]
 801593e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015942:	b29b      	uxth	r3, r3
 8015944:	f003 0301 	and.w	r3, r3, #1
 8015948:	2b00      	cmp	r3, #0
 801594a:	d001      	beq.n	8015950 <lwip_poll_should_wake+0x44>
        return 1;
 801594c:	2301      	movs	r3, #1
 801594e:	e01a      	b.n	8015986 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8015950:	683b      	ldr	r3, [r7, #0]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d009      	beq.n	801596a <lwip_poll_should_wake+0x5e>
 8015956:	693b      	ldr	r3, [r7, #16]
 8015958:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801595c:	b29b      	uxth	r3, r3
 801595e:	f003 0302 	and.w	r3, r3, #2
 8015962:	2b00      	cmp	r3, #0
 8015964:	d001      	beq.n	801596a <lwip_poll_should_wake+0x5e>
        return 1;
 8015966:	2301      	movs	r3, #1
 8015968:	e00d      	b.n	8015986 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 801596a:	6a3b      	ldr	r3, [r7, #32]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d001      	beq.n	8015974 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8015970:	2301      	movs	r3, #1
 8015972:	e008      	b.n	8015986 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8015974:	697b      	ldr	r3, [r7, #20]
 8015976:	3301      	adds	r3, #1
 8015978:	617b      	str	r3, [r7, #20]
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	699b      	ldr	r3, [r3, #24]
 801597e:	697a      	ldr	r2, [r7, #20]
 8015980:	429a      	cmp	r2, r3
 8015982:	d3cd      	bcc.n	8015920 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8015984:	2300      	movs	r3, #0
}
 8015986:	4618      	mov	r0, r3
 8015988:	371c      	adds	r7, #28
 801598a:	46bd      	mov	sp, r7
 801598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015990:	4770      	bx	lr
	...

08015994 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b08a      	sub	sp, #40	; 0x28
 8015998:	af00      	add	r7, sp, #0
 801599a:	6078      	str	r0, [r7, #4]
 801599c:	460b      	mov	r3, r1
 801599e:	70fb      	strb	r3, [r7, #3]
 80159a0:	4613      	mov	r3, r2
 80159a2:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	f000 80a4 	beq.w	8015af4 <event_callback+0x160>
    s = conn->socket;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	699b      	ldr	r3, [r3, #24]
 80159b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 80159b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	da18      	bge.n	80159ea <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 80159b8:	f000 fb10 	bl	8015fdc <sys_arch_protect>
 80159bc:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	699b      	ldr	r3, [r3, #24]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	da0b      	bge.n	80159de <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 80159c6:	78fb      	ldrb	r3, [r7, #3]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d104      	bne.n	80159d6 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	699b      	ldr	r3, [r3, #24]
 80159d0:	1e5a      	subs	r2, r3, #1
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 80159d6:	69f8      	ldr	r0, [r7, #28]
 80159d8:	f000 fb0e 	bl	8015ff8 <sys_arch_unprotect>
        return;
 80159dc:	e08d      	b.n	8015afa <event_callback+0x166>
      }
      s = conn->socket;
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	699b      	ldr	r3, [r3, #24]
 80159e2:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 80159e4:	69f8      	ldr	r0, [r7, #28]
 80159e6:	f000 fb07 	bl	8015ff8 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 80159ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159ec:	f7ff fc66 	bl	80152bc <get_socket>
 80159f0:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 80159f2:	69bb      	ldr	r3, [r7, #24]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d07f      	beq.n	8015af8 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 80159f8:	2301      	movs	r3, #1
 80159fa:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 80159fc:	f000 faee 	bl	8015fdc <sys_arch_protect>
 8015a00:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8015a02:	78fb      	ldrb	r3, [r7, #3]
 8015a04:	2b04      	cmp	r3, #4
 8015a06:	d83e      	bhi.n	8015a86 <event_callback+0xf2>
 8015a08:	a201      	add	r2, pc, #4	; (adr r2, 8015a10 <event_callback+0x7c>)
 8015a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a0e:	bf00      	nop
 8015a10:	08015a25 	.word	0x08015a25
 8015a14:	08015a47 	.word	0x08015a47
 8015a18:	08015a5f 	.word	0x08015a5f
 8015a1c:	08015a73 	.word	0x08015a73
 8015a20:	08015a7f 	.word	0x08015a7f
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8015a24:	69bb      	ldr	r3, [r7, #24]
 8015a26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015a2a:	b29b      	uxth	r3, r3
 8015a2c:	3301      	adds	r3, #1
 8015a2e:	b29b      	uxth	r3, r3
 8015a30:	b21a      	sxth	r2, r3
 8015a32:	69bb      	ldr	r3, [r7, #24]
 8015a34:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 8015a36:	69bb      	ldr	r3, [r7, #24]
 8015a38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015a3c:	2b01      	cmp	r3, #1
 8015a3e:	dd2a      	ble.n	8015a96 <event_callback+0x102>
        check_waiters = 0;
 8015a40:	2300      	movs	r3, #0
 8015a42:	623b      	str	r3, [r7, #32]
      }
      break;
 8015a44:	e027      	b.n	8015a96 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8015a46:	69bb      	ldr	r3, [r7, #24]
 8015a48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015a4c:	b29b      	uxth	r3, r3
 8015a4e:	3b01      	subs	r3, #1
 8015a50:	b29b      	uxth	r3, r3
 8015a52:	b21a      	sxth	r2, r3
 8015a54:	69bb      	ldr	r3, [r7, #24]
 8015a56:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8015a58:	2300      	movs	r3, #0
 8015a5a:	623b      	str	r3, [r7, #32]
      break;
 8015a5c:	e01c      	b.n	8015a98 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 8015a5e:	69bb      	ldr	r3, [r7, #24]
 8015a60:	895b      	ldrh	r3, [r3, #10]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d001      	beq.n	8015a6a <event_callback+0xd6>
        check_waiters = 0;
 8015a66:	2300      	movs	r3, #0
 8015a68:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8015a6a:	69bb      	ldr	r3, [r7, #24]
 8015a6c:	2201      	movs	r2, #1
 8015a6e:	815a      	strh	r2, [r3, #10]
      break;
 8015a70:	e012      	b.n	8015a98 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8015a72:	69bb      	ldr	r3, [r7, #24]
 8015a74:	2200      	movs	r2, #0
 8015a76:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	623b      	str	r3, [r7, #32]
      break;
 8015a7c:	e00c      	b.n	8015a98 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8015a7e:	69bb      	ldr	r3, [r7, #24]
 8015a80:	2201      	movs	r2, #1
 8015a82:	819a      	strh	r2, [r3, #12]
      break;
 8015a84:	e008      	b.n	8015a98 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 8015a86:	4b1e      	ldr	r3, [pc, #120]	; (8015b00 <event_callback+0x16c>)
 8015a88:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8015a8c:	491d      	ldr	r1, [pc, #116]	; (8015b04 <event_callback+0x170>)
 8015a8e:	481e      	ldr	r0, [pc, #120]	; (8015b08 <event_callback+0x174>)
 8015a90:	f00c f944 	bl	8021d1c <iprintf>
      break;
 8015a94:	e000      	b.n	8015a98 <event_callback+0x104>
      break;
 8015a96:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8015a98:	69bb      	ldr	r3, [r7, #24]
 8015a9a:	7b9b      	ldrb	r3, [r3, #14]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d025      	beq.n	8015aec <event_callback+0x158>
 8015aa0:	6a3b      	ldr	r3, [r7, #32]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d022      	beq.n	8015aec <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8015aa6:	69bb      	ldr	r3, [r7, #24]
 8015aa8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	bfcc      	ite	gt
 8015ab0:	2301      	movgt	r3, #1
 8015ab2:	2300      	movle	r3, #0
 8015ab4:	b2db      	uxtb	r3, r3
 8015ab6:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8015ab8:	69bb      	ldr	r3, [r7, #24]
 8015aba:	895b      	ldrh	r3, [r3, #10]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	bf14      	ite	ne
 8015ac0:	2301      	movne	r3, #1
 8015ac2:	2300      	moveq	r3, #0
 8015ac4:	b2db      	uxtb	r3, r3
 8015ac6:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8015ac8:	69bb      	ldr	r3, [r7, #24]
 8015aca:	899b      	ldrh	r3, [r3, #12]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	bf14      	ite	ne
 8015ad0:	2301      	movne	r3, #1
 8015ad2:	2300      	moveq	r3, #0
 8015ad4:	b2db      	uxtb	r3, r3
 8015ad6:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8015ad8:	69f8      	ldr	r0, [r7, #28]
 8015ada:	f000 fa8d 	bl	8015ff8 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	693a      	ldr	r2, [r7, #16]
 8015ae2:	6979      	ldr	r1, [r7, #20]
 8015ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ae6:	f000 f811 	bl	8015b0c <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8015aea:	e006      	b.n	8015afa <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8015aec:	69f8      	ldr	r0, [r7, #28]
 8015aee:	f000 fa83 	bl	8015ff8 <sys_arch_unprotect>
 8015af2:	e002      	b.n	8015afa <event_callback+0x166>
    return;
 8015af4:	bf00      	nop
 8015af6:	e000      	b.n	8015afa <event_callback+0x166>
      return;
 8015af8:	bf00      	nop
  }
  done_socket(sock);
}
 8015afa:	3728      	adds	r7, #40	; 0x28
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bd80      	pop	{r7, pc}
 8015b00:	08025fd8 	.word	0x08025fd8
 8015b04:	08026370 	.word	0x08026370
 8015b08:	08026048 	.word	0x08026048

08015b0c <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b088      	sub	sp, #32
 8015b10:	af02      	add	r7, sp, #8
 8015b12:	60f8      	str	r0, [r7, #12]
 8015b14:	60b9      	str	r1, [r7, #8]
 8015b16:	607a      	str	r2, [r7, #4]
 8015b18:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8015b1a:	4b3e      	ldr	r3, [pc, #248]	; (8015c14 <select_check_waiters+0x108>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	617b      	str	r3, [r7, #20]
 8015b20:	e06f      	b.n	8015c02 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 8015b22:	697b      	ldr	r3, [r7, #20]
 8015b24:	69db      	ldr	r3, [r3, #28]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d168      	bne.n	8015bfc <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 8015b2e:	697b      	ldr	r3, [r7, #20]
 8015b30:	695b      	ldr	r3, [r3, #20]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d009      	beq.n	8015b4a <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	9300      	str	r3, [sp, #0]
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	68ba      	ldr	r2, [r7, #8]
 8015b3e:	68f9      	ldr	r1, [r7, #12]
 8015b40:	6978      	ldr	r0, [r7, #20]
 8015b42:	f7ff fee3 	bl	801590c <lwip_poll_should_wake>
 8015b46:	6138      	str	r0, [r7, #16]
 8015b48:	e04d      	b.n	8015be6 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 8015b4a:	68bb      	ldr	r3, [r7, #8]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d014      	beq.n	8015b7a <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	689b      	ldr	r3, [r3, #8]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d010      	beq.n	8015b7a <select_check_waiters+0x6e>
 8015b58:	697b      	ldr	r3, [r7, #20]
 8015b5a:	689b      	ldr	r3, [r3, #8]
 8015b5c:	68fa      	ldr	r2, [r7, #12]
 8015b5e:	0952      	lsrs	r2, r2, #5
 8015b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b64:	68fa      	ldr	r2, [r7, #12]
 8015b66:	f002 021f 	and.w	r2, r2, #31
 8015b6a:	2101      	movs	r1, #1
 8015b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8015b70:	4013      	ands	r3, r2
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d001      	beq.n	8015b7a <select_check_waiters+0x6e>
            do_signal = 1;
 8015b76:	2301      	movs	r3, #1
 8015b78:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d017      	beq.n	8015bb0 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8015b80:	693b      	ldr	r3, [r7, #16]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d114      	bne.n	8015bb0 <select_check_waiters+0xa4>
 8015b86:	697b      	ldr	r3, [r7, #20]
 8015b88:	68db      	ldr	r3, [r3, #12]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d010      	beq.n	8015bb0 <select_check_waiters+0xa4>
 8015b8e:	697b      	ldr	r3, [r7, #20]
 8015b90:	68db      	ldr	r3, [r3, #12]
 8015b92:	68fa      	ldr	r2, [r7, #12]
 8015b94:	0952      	lsrs	r2, r2, #5
 8015b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b9a:	68fa      	ldr	r2, [r7, #12]
 8015b9c:	f002 021f 	and.w	r2, r2, #31
 8015ba0:	2101      	movs	r1, #1
 8015ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8015ba6:	4013      	ands	r3, r2
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d001      	beq.n	8015bb0 <select_check_waiters+0xa4>
            do_signal = 1;
 8015bac:	2301      	movs	r3, #1
 8015bae:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8015bb0:	683b      	ldr	r3, [r7, #0]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d017      	beq.n	8015be6 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8015bb6:	693b      	ldr	r3, [r7, #16]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d114      	bne.n	8015be6 <select_check_waiters+0xda>
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	691b      	ldr	r3, [r3, #16]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d010      	beq.n	8015be6 <select_check_waiters+0xda>
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	691b      	ldr	r3, [r3, #16]
 8015bc8:	68fa      	ldr	r2, [r7, #12]
 8015bca:	0952      	lsrs	r2, r2, #5
 8015bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bd0:	68fa      	ldr	r2, [r7, #12]
 8015bd2:	f002 021f 	and.w	r2, r2, #31
 8015bd6:	2101      	movs	r1, #1
 8015bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8015bdc:	4013      	ands	r3, r2
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d001      	beq.n	8015be6 <select_check_waiters+0xda>
            do_signal = 1;
 8015be2:	2301      	movs	r3, #1
 8015be4:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8015be6:	693b      	ldr	r3, [r7, #16]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d007      	beq.n	8015bfc <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	2201      	movs	r2, #1
 8015bf0:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	3320      	adds	r3, #32
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	f000 f94c 	bl	8015e94 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8015bfc:	697b      	ldr	r3, [r7, #20]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	617b      	str	r3, [r7, #20]
 8015c02:	697b      	ldr	r3, [r7, #20]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d18c      	bne.n	8015b22 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 8015c08:	bf00      	nop
 8015c0a:	bf00      	nop
 8015c0c:	3718      	adds	r7, #24
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd80      	pop	{r7, pc}
 8015c12:	bf00      	nop
 8015c14:	24004958 	.word	0x24004958

08015c18 <lwip_inet_pton>:
  return ret;
}

int
lwip_inet_pton(int af, const char *src, void *dst)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b086      	sub	sp, #24
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	60f8      	str	r0, [r7, #12]
 8015c20:	60b9      	str	r1, [r7, #8]
 8015c22:	607a      	str	r2, [r7, #4]
  int err;
  switch (af) {
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	2b02      	cmp	r3, #2
 8015c28:	d105      	bne.n	8015c36 <lwip_inet_pton+0x1e>
#if LWIP_IPV4
    case AF_INET:
      err = ip4addr_aton(src, (ip4_addr_t *)dst);
 8015c2a:	6879      	ldr	r1, [r7, #4]
 8015c2c:	68b8      	ldr	r0, [r7, #8]
 8015c2e:	f7fc fcb1 	bl	8012594 <ip4addr_aton>
 8015c32:	6178      	str	r0, [r7, #20]
      break;
 8015c34:	e006      	b.n	8015c44 <lwip_inet_pton+0x2c>
      }
      break;
    }
#endif
    default:
      err = -1;
 8015c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c3a:	617b      	str	r3, [r7, #20]
      set_errno(EAFNOSUPPORT);
 8015c3c:	4b04      	ldr	r3, [pc, #16]	; (8015c50 <lwip_inet_pton+0x38>)
 8015c3e:	2261      	movs	r2, #97	; 0x61
 8015c40:	601a      	str	r2, [r3, #0]
      break;
 8015c42:	bf00      	nop
  }
  return err;
 8015c44:	697b      	ldr	r3, [r7, #20]
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3718      	adds	r7, #24
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	2400d240 	.word	0x2400d240

08015c54 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b086      	sub	sp, #24
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	60bb      	str	r3, [r7, #8]
 8015c62:	2304      	movs	r3, #4
 8015c64:	60fb      	str	r3, [r7, #12]
 8015c66:	2300      	movs	r3, #0
 8015c68:	613b      	str	r3, [r7, #16]
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015c6e:	f107 0308 	add.w	r3, r7, #8
 8015c72:	2100      	movs	r1, #0
 8015c74:	4618      	mov	r0, r3
 8015c76:	f7f5 fe46 	bl	800b906 <osMessageCreate>
 8015c7a:	4602      	mov	r2, r0
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d102      	bne.n	8015c8e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c8c:	e000      	b.n	8015c90 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015c8e:	2300      	movs	r3, #0
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	3718      	adds	r7, #24
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}

08015c98 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b082      	sub	sp, #8
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	f7f5 ff0b 	bl	800bac0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7f5 ff1c 	bl	800baec <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8015cb4:	bf00      	nop
 8015cb6:	3708      	adds	r7, #8
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}

08015cbc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b084      	sub	sp, #16
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
 8015cc4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	6839      	ldr	r1, [r7, #0]
 8015ccc:	2200      	movs	r2, #0
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f7f5 fe42 	bl	800b958 <osMessagePut>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d102      	bne.n	8015ce0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	73fb      	strb	r3, [r7, #15]
 8015cde:	e001      	b.n	8015ce4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015ce0:	23ff      	movs	r3, #255	; 0xff
 8015ce2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3710      	adds	r7, #16
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}

08015cf0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b08c      	sub	sp, #48	; 0x30
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	61f8      	str	r0, [r7, #28]
 8015cf8:	61b9      	str	r1, [r7, #24]
 8015cfa:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015cfc:	f7f5 fc2d 	bl	800b55a <osKernelSysTick>
 8015d00:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d017      	beq.n	8015d38 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015d08:	69fb      	ldr	r3, [r7, #28]
 8015d0a:	6819      	ldr	r1, [r3, #0]
 8015d0c:	f107 0320 	add.w	r3, r7, #32
 8015d10:	697a      	ldr	r2, [r7, #20]
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7f5 fe60 	bl	800b9d8 <osMessageGet>

    if(event.status == osEventMessage)
 8015d18:	6a3b      	ldr	r3, [r7, #32]
 8015d1a:	2b10      	cmp	r3, #16
 8015d1c:	d109      	bne.n	8015d32 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d20:	461a      	mov	r2, r3
 8015d22:	69bb      	ldr	r3, [r7, #24]
 8015d24:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015d26:	f7f5 fc18 	bl	800b55a <osKernelSysTick>
 8015d2a:	4602      	mov	r2, r0
 8015d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d2e:	1ad3      	subs	r3, r2, r3
 8015d30:	e019      	b.n	8015d66 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d36:	e016      	b.n	8015d66 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015d38:	69fb      	ldr	r3, [r7, #28]
 8015d3a:	6819      	ldr	r1, [r3, #0]
 8015d3c:	463b      	mov	r3, r7
 8015d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015d42:	4618      	mov	r0, r3
 8015d44:	f7f5 fe48 	bl	800b9d8 <osMessageGet>
 8015d48:	f107 0320 	add.w	r3, r7, #32
 8015d4c:	463a      	mov	r2, r7
 8015d4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015d50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d56:	461a      	mov	r2, r3
 8015d58:	69bb      	ldr	r3, [r7, #24]
 8015d5a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015d5c:	f7f5 fbfd 	bl	800b55a <osKernelSysTick>
 8015d60:	4602      	mov	r2, r0
 8015d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d64:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	3730      	adds	r7, #48	; 0x30
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}

08015d6e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015d6e:	b580      	push	{r7, lr}
 8015d70:	b086      	sub	sp, #24
 8015d72:	af00      	add	r7, sp, #0
 8015d74:	6078      	str	r0, [r7, #4]
 8015d76:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	6819      	ldr	r1, [r3, #0]
 8015d7c:	f107 030c 	add.w	r3, r7, #12
 8015d80:	2200      	movs	r2, #0
 8015d82:	4618      	mov	r0, r3
 8015d84:	f7f5 fe28 	bl	800b9d8 <osMessageGet>

  if(event.status == osEventMessage)
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	2b10      	cmp	r3, #16
 8015d8c:	d105      	bne.n	8015d9a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8015d8e:	693b      	ldr	r3, [r7, #16]
 8015d90:	461a      	mov	r2, r3
 8015d92:	683b      	ldr	r3, [r7, #0]
 8015d94:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8015d96:	2300      	movs	r3, #0
 8015d98:	e001      	b.n	8015d9e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8015d9e:	4618      	mov	r0, r3
 8015da0:	3718      	adds	r7, #24
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bd80      	pop	{r7, pc}

08015da6 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015da6:	b480      	push	{r7}
 8015da8:	b083      	sub	sp, #12
 8015daa:	af00      	add	r7, sp, #0
 8015dac:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d101      	bne.n	8015dba <sys_mbox_valid+0x14>
    return 0;
 8015db6:	2300      	movs	r3, #0
 8015db8:	e000      	b.n	8015dbc <sys_mbox_valid+0x16>
  else
    return 1;
 8015dba:	2301      	movs	r3, #1
}
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	370c      	adds	r7, #12
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc6:	4770      	bx	lr

08015dc8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8015dc8:	b480      	push	{r7}
 8015dca:	b083      	sub	sp, #12
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	601a      	str	r2, [r3, #0]
}
 8015dd6:	bf00      	nop
 8015dd8:	370c      	adds	r7, #12
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de0:	4770      	bx	lr

08015de2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8015de2:	b580      	push	{r7, lr}
 8015de4:	b084      	sub	sp, #16
 8015de6:	af00      	add	r7, sp, #0
 8015de8:	6078      	str	r0, [r7, #4]
 8015dea:	460b      	mov	r3, r1
 8015dec:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8015dee:	2300      	movs	r3, #0
 8015df0:	60bb      	str	r3, [r7, #8]
 8015df2:	2300      	movs	r3, #0
 8015df4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8015df6:	f107 0308 	add.w	r3, r7, #8
 8015dfa:	2101      	movs	r1, #1
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f7f5 fcb9 	bl	800b774 <osSemaphoreCreate>
 8015e02:	4602      	mov	r2, r0
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d102      	bne.n	8015e16 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e14:	e009      	b.n	8015e2a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8015e16:	78fb      	ldrb	r3, [r7, #3]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d105      	bne.n	8015e28 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	2100      	movs	r1, #0
 8015e22:	4618      	mov	r0, r3
 8015e24:	f7f5 fcd8 	bl	800b7d8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015e28:	2300      	movs	r3, #0
}
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	3710      	adds	r7, #16
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd80      	pop	{r7, pc}

08015e32 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015e32:	b580      	push	{r7, lr}
 8015e34:	b084      	sub	sp, #16
 8015e36:	af00      	add	r7, sp, #0
 8015e38:	6078      	str	r0, [r7, #4]
 8015e3a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8015e3c:	f7f5 fb8d 	bl	800b55a <osKernelSysTick>
 8015e40:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d011      	beq.n	8015e6c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	6839      	ldr	r1, [r7, #0]
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7f5 fcc2 	bl	800b7d8 <osSemaphoreWait>
 8015e54:	4603      	mov	r3, r0
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d105      	bne.n	8015e66 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8015e5a:	f7f5 fb7e 	bl	800b55a <osKernelSysTick>
 8015e5e:	4602      	mov	r2, r0
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	1ad3      	subs	r3, r2, r3
 8015e64:	e012      	b.n	8015e8c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e6a:	e00f      	b.n	8015e8c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8015e6c:	bf00      	nop
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015e76:	4618      	mov	r0, r3
 8015e78:	f7f5 fcae 	bl	800b7d8 <osSemaphoreWait>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d1f5      	bne.n	8015e6e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8015e82:	f7f5 fb6a 	bl	800b55a <osKernelSysTick>
 8015e86:	4602      	mov	r2, r0
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	3710      	adds	r7, #16
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd80      	pop	{r7, pc}

08015e94 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b082      	sub	sp, #8
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f7f5 fce7 	bl	800b874 <osSemaphoreRelease>
}
 8015ea6:	bf00      	nop
 8015ea8:	3708      	adds	r7, #8
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	bd80      	pop	{r7, pc}

08015eae <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015eae:	b580      	push	{r7, lr}
 8015eb0:	b082      	sub	sp, #8
 8015eb2:	af00      	add	r7, sp, #0
 8015eb4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	4618      	mov	r0, r3
 8015ebc:	f7f5 fd10 	bl	800b8e0 <osSemaphoreDelete>
}
 8015ec0:	bf00      	nop
 8015ec2:	3708      	adds	r7, #8
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}

08015ec8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015ec8:	b480      	push	{r7}
 8015eca:	b083      	sub	sp, #12
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d101      	bne.n	8015edc <sys_sem_valid+0x14>
    return 0;
 8015ed8:	2300      	movs	r3, #0
 8015eda:	e000      	b.n	8015ede <sys_sem_valid+0x16>
  else
    return 1;
 8015edc:	2301      	movs	r3, #1
}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	370c      	adds	r7, #12
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee8:	4770      	bx	lr

08015eea <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015eea:	b480      	push	{r7}
 8015eec:	b083      	sub	sp, #12
 8015eee:	af00      	add	r7, sp, #0
 8015ef0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	2200      	movs	r2, #0
 8015ef6:	601a      	str	r2, [r3, #0]
}
 8015ef8:	bf00      	nop
 8015efa:	370c      	adds	r7, #12
 8015efc:	46bd      	mov	sp, r7
 8015efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f02:	4770      	bx	lr

08015f04 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015f08:	4803      	ldr	r0, [pc, #12]	; (8015f18 <sys_init+0x14>)
 8015f0a:	f7f5 fb96 	bl	800b63a <osMutexCreate>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	4a02      	ldr	r2, [pc, #8]	; (8015f1c <sys_init+0x18>)
 8015f12:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015f14:	bf00      	nop
 8015f16:	bd80      	pop	{r7, pc}
 8015f18:	08028150 	.word	0x08028150
 8015f1c:	2400d244 	.word	0x2400d244

08015f20 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b084      	sub	sp, #16
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015f28:	2300      	movs	r3, #0
 8015f2a:	60bb      	str	r3, [r7, #8]
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015f30:	f107 0308 	add.w	r3, r7, #8
 8015f34:	4618      	mov	r0, r3
 8015f36:	f7f5 fb80 	bl	800b63a <osMutexCreate>
 8015f3a:	4602      	mov	r2, r0
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d102      	bne.n	8015f4e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f4c:	e000      	b.n	8015f50 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015f4e:	2300      	movs	r3, #0
}
 8015f50:	4618      	mov	r0, r3
 8015f52:	3710      	adds	r7, #16
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bd80      	pop	{r7, pc}

08015f58 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b082      	sub	sp, #8
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f7f5 fb7f 	bl	800b66c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015f6e:	bf00      	nop
 8015f70:	3708      	adds	r7, #8
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}

08015f76 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015f76:	b580      	push	{r7, lr}
 8015f78:	b082      	sub	sp, #8
 8015f7a:	af00      	add	r7, sp, #0
 8015f7c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7f5 fbc0 	bl	800b708 <osMutexRelease>
}
 8015f88:	bf00      	nop
 8015f8a:	3708      	adds	r7, #8
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}

08015f90 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b08c      	sub	sp, #48	; 0x30
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	60f8      	str	r0, [r7, #12]
 8015f98:	60b9      	str	r1, [r7, #8]
 8015f9a:	607a      	str	r2, [r7, #4]
 8015f9c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015f9e:	f107 0314 	add.w	r3, r7, #20
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	601a      	str	r2, [r3, #0]
 8015fa6:	605a      	str	r2, [r3, #4]
 8015fa8:	609a      	str	r2, [r3, #8]
 8015faa:	60da      	str	r2, [r3, #12]
 8015fac:	611a      	str	r2, [r3, #16]
 8015fae:	615a      	str	r2, [r3, #20]
 8015fb0:	619a      	str	r2, [r3, #24]
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	617b      	str	r3, [r7, #20]
 8015fb6:	68bb      	ldr	r3, [r7, #8]
 8015fb8:	61bb      	str	r3, [r7, #24]
 8015fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fbc:	b21b      	sxth	r3, r3
 8015fbe:	83bb      	strh	r3, [r7, #28]
 8015fc0:	683b      	ldr	r3, [r7, #0]
 8015fc2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015fc4:	f107 0314 	add.w	r3, r7, #20
 8015fc8:	6879      	ldr	r1, [r7, #4]
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7f5 fad5 	bl	800b57a <osThreadCreate>
 8015fd0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3730      	adds	r7, #48	; 0x30
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}
	...

08015fdc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015fe0:	4b04      	ldr	r3, [pc, #16]	; (8015ff4 <sys_arch_protect+0x18>)
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f7f5 fb3f 	bl	800b66c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015fee:	2301      	movs	r3, #1
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	bd80      	pop	{r7, pc}
 8015ff4:	2400d244 	.word	0x2400d244

08015ff8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b082      	sub	sp, #8
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016000:	4b04      	ldr	r3, [pc, #16]	; (8016014 <sys_arch_unprotect+0x1c>)
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	4618      	mov	r0, r3
 8016006:	f7f5 fb7f 	bl	800b708 <osMutexRelease>
}
 801600a:	bf00      	nop
 801600c:	3708      	adds	r7, #8
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}
 8016012:	bf00      	nop
 8016014:	2400d244 	.word	0x2400d244

08016018 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8016018:	b580      	push	{r7, lr}
 801601a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801601c:	f00b fe96 	bl	8021d4c <rand>
 8016020:	4603      	mov	r3, r0
 8016022:	b29b      	uxth	r3, r3
 8016024:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016028:	b29b      	uxth	r3, r3
 801602a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801602e:	b29a      	uxth	r2, r3
 8016030:	4b01      	ldr	r3, [pc, #4]	; (8016038 <tcp_init+0x20>)
 8016032:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016034:	bf00      	nop
 8016036:	bd80      	pop	{r7, pc}
 8016038:	24000028 	.word	0x24000028

0801603c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b082      	sub	sp, #8
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	7d1b      	ldrb	r3, [r3, #20]
 8016048:	2b01      	cmp	r3, #1
 801604a:	d105      	bne.n	8016058 <tcp_free+0x1c>
 801604c:	4b06      	ldr	r3, [pc, #24]	; (8016068 <tcp_free+0x2c>)
 801604e:	22d4      	movs	r2, #212	; 0xd4
 8016050:	4906      	ldr	r1, [pc, #24]	; (801606c <tcp_free+0x30>)
 8016052:	4807      	ldr	r0, [pc, #28]	; (8016070 <tcp_free+0x34>)
 8016054:	f00b fe62 	bl	8021d1c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016058:	6879      	ldr	r1, [r7, #4]
 801605a:	2001      	movs	r0, #1
 801605c:	f7fd ff10 	bl	8013e80 <memp_free>
}
 8016060:	bf00      	nop
 8016062:	3708      	adds	r7, #8
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}
 8016068:	0802643c 	.word	0x0802643c
 801606c:	08026488 	.word	0x08026488
 8016070:	0802649c 	.word	0x0802649c

08016074 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b082      	sub	sp, #8
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	7d1b      	ldrb	r3, [r3, #20]
 8016080:	2b01      	cmp	r3, #1
 8016082:	d105      	bne.n	8016090 <tcp_free_listen+0x1c>
 8016084:	4b06      	ldr	r3, [pc, #24]	; (80160a0 <tcp_free_listen+0x2c>)
 8016086:	22df      	movs	r2, #223	; 0xdf
 8016088:	4906      	ldr	r1, [pc, #24]	; (80160a4 <tcp_free_listen+0x30>)
 801608a:	4807      	ldr	r0, [pc, #28]	; (80160a8 <tcp_free_listen+0x34>)
 801608c:	f00b fe46 	bl	8021d1c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016090:	6879      	ldr	r1, [r7, #4]
 8016092:	2002      	movs	r0, #2
 8016094:	f7fd fef4 	bl	8013e80 <memp_free>
}
 8016098:	bf00      	nop
 801609a:	3708      	adds	r7, #8
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}
 80160a0:	0802643c 	.word	0x0802643c
 80160a4:	080264c4 	.word	0x080264c4
 80160a8:	0802649c 	.word	0x0802649c

080160ac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80160b0:	f001 f85c 	bl	801716c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80160b4:	4b07      	ldr	r3, [pc, #28]	; (80160d4 <tcp_tmr+0x28>)
 80160b6:	781b      	ldrb	r3, [r3, #0]
 80160b8:	3301      	adds	r3, #1
 80160ba:	b2da      	uxtb	r2, r3
 80160bc:	4b05      	ldr	r3, [pc, #20]	; (80160d4 <tcp_tmr+0x28>)
 80160be:	701a      	strb	r2, [r3, #0]
 80160c0:	4b04      	ldr	r3, [pc, #16]	; (80160d4 <tcp_tmr+0x28>)
 80160c2:	781b      	ldrb	r3, [r3, #0]
 80160c4:	f003 0301 	and.w	r3, r3, #1
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d001      	beq.n	80160d0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80160cc:	f000 fd0e 	bl	8016aec <tcp_slowtmr>
  }
}
 80160d0:	bf00      	nop
 80160d2:	bd80      	pop	{r7, pc}
 80160d4:	2400495c 	.word	0x2400495c

080160d8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b084      	sub	sp, #16
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
 80160e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80160e2:	683b      	ldr	r3, [r7, #0]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d105      	bne.n	80160f4 <tcp_remove_listener+0x1c>
 80160e8:	4b0d      	ldr	r3, [pc, #52]	; (8016120 <tcp_remove_listener+0x48>)
 80160ea:	22ff      	movs	r2, #255	; 0xff
 80160ec:	490d      	ldr	r1, [pc, #52]	; (8016124 <tcp_remove_listener+0x4c>)
 80160ee:	480e      	ldr	r0, [pc, #56]	; (8016128 <tcp_remove_listener+0x50>)
 80160f0:	f00b fe14 	bl	8021d1c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	60fb      	str	r3, [r7, #12]
 80160f8:	e00a      	b.n	8016110 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80160fe:	683a      	ldr	r2, [r7, #0]
 8016100:	429a      	cmp	r2, r3
 8016102:	d102      	bne.n	801610a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	2200      	movs	r2, #0
 8016108:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	68db      	ldr	r3, [r3, #12]
 801610e:	60fb      	str	r3, [r7, #12]
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d1f1      	bne.n	80160fa <tcp_remove_listener+0x22>
    }
  }
}
 8016116:	bf00      	nop
 8016118:	bf00      	nop
 801611a:	3710      	adds	r7, #16
 801611c:	46bd      	mov	sp, r7
 801611e:	bd80      	pop	{r7, pc}
 8016120:	0802643c 	.word	0x0802643c
 8016124:	080264e0 	.word	0x080264e0
 8016128:	0802649c 	.word	0x0802649c

0801612c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801612c:	b580      	push	{r7, lr}
 801612e:	b084      	sub	sp, #16
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d106      	bne.n	8016148 <tcp_listen_closed+0x1c>
 801613a:	4b14      	ldr	r3, [pc, #80]	; (801618c <tcp_listen_closed+0x60>)
 801613c:	f240 1211 	movw	r2, #273	; 0x111
 8016140:	4913      	ldr	r1, [pc, #76]	; (8016190 <tcp_listen_closed+0x64>)
 8016142:	4814      	ldr	r0, [pc, #80]	; (8016194 <tcp_listen_closed+0x68>)
 8016144:	f00b fdea 	bl	8021d1c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	7d1b      	ldrb	r3, [r3, #20]
 801614c:	2b01      	cmp	r3, #1
 801614e:	d006      	beq.n	801615e <tcp_listen_closed+0x32>
 8016150:	4b0e      	ldr	r3, [pc, #56]	; (801618c <tcp_listen_closed+0x60>)
 8016152:	f44f 7289 	mov.w	r2, #274	; 0x112
 8016156:	4910      	ldr	r1, [pc, #64]	; (8016198 <tcp_listen_closed+0x6c>)
 8016158:	480e      	ldr	r0, [pc, #56]	; (8016194 <tcp_listen_closed+0x68>)
 801615a:	f00b fddf 	bl	8021d1c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801615e:	2301      	movs	r3, #1
 8016160:	60fb      	str	r3, [r7, #12]
 8016162:	e00b      	b.n	801617c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8016164:	4a0d      	ldr	r2, [pc, #52]	; (801619c <tcp_listen_closed+0x70>)
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	6879      	ldr	r1, [r7, #4]
 8016170:	4618      	mov	r0, r3
 8016172:	f7ff ffb1 	bl	80160d8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	3301      	adds	r3, #1
 801617a:	60fb      	str	r3, [r7, #12]
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	2b03      	cmp	r3, #3
 8016180:	d9f0      	bls.n	8016164 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8016182:	bf00      	nop
 8016184:	bf00      	nop
 8016186:	3710      	adds	r7, #16
 8016188:	46bd      	mov	sp, r7
 801618a:	bd80      	pop	{r7, pc}
 801618c:	0802643c 	.word	0x0802643c
 8016190:	08026508 	.word	0x08026508
 8016194:	0802649c 	.word	0x0802649c
 8016198:	08026514 	.word	0x08026514
 801619c:	08028170 	.word	0x08028170

080161a0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80161a0:	b5b0      	push	{r4, r5, r7, lr}
 80161a2:	b088      	sub	sp, #32
 80161a4:	af04      	add	r7, sp, #16
 80161a6:	6078      	str	r0, [r7, #4]
 80161a8:	460b      	mov	r3, r1
 80161aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d106      	bne.n	80161c0 <tcp_close_shutdown+0x20>
 80161b2:	4b63      	ldr	r3, [pc, #396]	; (8016340 <tcp_close_shutdown+0x1a0>)
 80161b4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80161b8:	4962      	ldr	r1, [pc, #392]	; (8016344 <tcp_close_shutdown+0x1a4>)
 80161ba:	4863      	ldr	r0, [pc, #396]	; (8016348 <tcp_close_shutdown+0x1a8>)
 80161bc:	f00b fdae 	bl	8021d1c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80161c0:	78fb      	ldrb	r3, [r7, #3]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d066      	beq.n	8016294 <tcp_close_shutdown+0xf4>
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	7d1b      	ldrb	r3, [r3, #20]
 80161ca:	2b04      	cmp	r3, #4
 80161cc:	d003      	beq.n	80161d6 <tcp_close_shutdown+0x36>
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	7d1b      	ldrb	r3, [r3, #20]
 80161d2:	2b07      	cmp	r3, #7
 80161d4:	d15e      	bne.n	8016294 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d104      	bne.n	80161e8 <tcp_close_shutdown+0x48>
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80161e6:	d055      	beq.n	8016294 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	8b5b      	ldrh	r3, [r3, #26]
 80161ec:	f003 0310 	and.w	r3, r3, #16
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d106      	bne.n	8016202 <tcp_close_shutdown+0x62>
 80161f4:	4b52      	ldr	r3, [pc, #328]	; (8016340 <tcp_close_shutdown+0x1a0>)
 80161f6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80161fa:	4954      	ldr	r1, [pc, #336]	; (801634c <tcp_close_shutdown+0x1ac>)
 80161fc:	4852      	ldr	r0, [pc, #328]	; (8016348 <tcp_close_shutdown+0x1a8>)
 80161fe:	f00b fd8d 	bl	8021d1c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801620a:	687d      	ldr	r5, [r7, #4]
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	3304      	adds	r3, #4
 8016210:	687a      	ldr	r2, [r7, #4]
 8016212:	8ad2      	ldrh	r2, [r2, #22]
 8016214:	6879      	ldr	r1, [r7, #4]
 8016216:	8b09      	ldrh	r1, [r1, #24]
 8016218:	9102      	str	r1, [sp, #8]
 801621a:	9201      	str	r2, [sp, #4]
 801621c:	9300      	str	r3, [sp, #0]
 801621e:	462b      	mov	r3, r5
 8016220:	4622      	mov	r2, r4
 8016222:	4601      	mov	r1, r0
 8016224:	6878      	ldr	r0, [r7, #4]
 8016226:	f005 fd6d 	bl	801bd04 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801622a:	6878      	ldr	r0, [r7, #4]
 801622c:	f001 fb4e 	bl	80178cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8016230:	4b47      	ldr	r3, [pc, #284]	; (8016350 <tcp_close_shutdown+0x1b0>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	687a      	ldr	r2, [r7, #4]
 8016236:	429a      	cmp	r2, r3
 8016238:	d105      	bne.n	8016246 <tcp_close_shutdown+0xa6>
 801623a:	4b45      	ldr	r3, [pc, #276]	; (8016350 <tcp_close_shutdown+0x1b0>)
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	68db      	ldr	r3, [r3, #12]
 8016240:	4a43      	ldr	r2, [pc, #268]	; (8016350 <tcp_close_shutdown+0x1b0>)
 8016242:	6013      	str	r3, [r2, #0]
 8016244:	e013      	b.n	801626e <tcp_close_shutdown+0xce>
 8016246:	4b42      	ldr	r3, [pc, #264]	; (8016350 <tcp_close_shutdown+0x1b0>)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	60fb      	str	r3, [r7, #12]
 801624c:	e00c      	b.n	8016268 <tcp_close_shutdown+0xc8>
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	68db      	ldr	r3, [r3, #12]
 8016252:	687a      	ldr	r2, [r7, #4]
 8016254:	429a      	cmp	r2, r3
 8016256:	d104      	bne.n	8016262 <tcp_close_shutdown+0xc2>
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	68da      	ldr	r2, [r3, #12]
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	60da      	str	r2, [r3, #12]
 8016260:	e005      	b.n	801626e <tcp_close_shutdown+0xce>
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	68db      	ldr	r3, [r3, #12]
 8016266:	60fb      	str	r3, [r7, #12]
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d1ef      	bne.n	801624e <tcp_close_shutdown+0xae>
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	2200      	movs	r2, #0
 8016272:	60da      	str	r2, [r3, #12]
 8016274:	4b37      	ldr	r3, [pc, #220]	; (8016354 <tcp_close_shutdown+0x1b4>)
 8016276:	2201      	movs	r2, #1
 8016278:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801627a:	4b37      	ldr	r3, [pc, #220]	; (8016358 <tcp_close_shutdown+0x1b8>)
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	687a      	ldr	r2, [r7, #4]
 8016280:	429a      	cmp	r2, r3
 8016282:	d102      	bne.n	801628a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8016284:	f003 ffe2 	bl	801a24c <tcp_trigger_input_pcb_close>
 8016288:	e002      	b.n	8016290 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801628a:	6878      	ldr	r0, [r7, #4]
 801628c:	f7ff fed6 	bl	801603c <tcp_free>
      }
      return ERR_OK;
 8016290:	2300      	movs	r3, #0
 8016292:	e050      	b.n	8016336 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	7d1b      	ldrb	r3, [r3, #20]
 8016298:	2b02      	cmp	r3, #2
 801629a:	d03b      	beq.n	8016314 <tcp_close_shutdown+0x174>
 801629c:	2b02      	cmp	r3, #2
 801629e:	dc44      	bgt.n	801632a <tcp_close_shutdown+0x18a>
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d002      	beq.n	80162aa <tcp_close_shutdown+0x10a>
 80162a4:	2b01      	cmp	r3, #1
 80162a6:	d02a      	beq.n	80162fe <tcp_close_shutdown+0x15e>
 80162a8:	e03f      	b.n	801632a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	8adb      	ldrh	r3, [r3, #22]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d021      	beq.n	80162f6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80162b2:	4b2a      	ldr	r3, [pc, #168]	; (801635c <tcp_close_shutdown+0x1bc>)
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	687a      	ldr	r2, [r7, #4]
 80162b8:	429a      	cmp	r2, r3
 80162ba:	d105      	bne.n	80162c8 <tcp_close_shutdown+0x128>
 80162bc:	4b27      	ldr	r3, [pc, #156]	; (801635c <tcp_close_shutdown+0x1bc>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	68db      	ldr	r3, [r3, #12]
 80162c2:	4a26      	ldr	r2, [pc, #152]	; (801635c <tcp_close_shutdown+0x1bc>)
 80162c4:	6013      	str	r3, [r2, #0]
 80162c6:	e013      	b.n	80162f0 <tcp_close_shutdown+0x150>
 80162c8:	4b24      	ldr	r3, [pc, #144]	; (801635c <tcp_close_shutdown+0x1bc>)
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	60bb      	str	r3, [r7, #8]
 80162ce:	e00c      	b.n	80162ea <tcp_close_shutdown+0x14a>
 80162d0:	68bb      	ldr	r3, [r7, #8]
 80162d2:	68db      	ldr	r3, [r3, #12]
 80162d4:	687a      	ldr	r2, [r7, #4]
 80162d6:	429a      	cmp	r2, r3
 80162d8:	d104      	bne.n	80162e4 <tcp_close_shutdown+0x144>
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	68da      	ldr	r2, [r3, #12]
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	60da      	str	r2, [r3, #12]
 80162e2:	e005      	b.n	80162f0 <tcp_close_shutdown+0x150>
 80162e4:	68bb      	ldr	r3, [r7, #8]
 80162e6:	68db      	ldr	r3, [r3, #12]
 80162e8:	60bb      	str	r3, [r7, #8]
 80162ea:	68bb      	ldr	r3, [r7, #8]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d1ef      	bne.n	80162d0 <tcp_close_shutdown+0x130>
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2200      	movs	r2, #0
 80162f4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80162f6:	6878      	ldr	r0, [r7, #4]
 80162f8:	f7ff fea0 	bl	801603c <tcp_free>
      break;
 80162fc:	e01a      	b.n	8016334 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f7ff ff14 	bl	801612c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8016304:	6879      	ldr	r1, [r7, #4]
 8016306:	4816      	ldr	r0, [pc, #88]	; (8016360 <tcp_close_shutdown+0x1c0>)
 8016308:	f001 fb30 	bl	801796c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801630c:	6878      	ldr	r0, [r7, #4]
 801630e:	f7ff feb1 	bl	8016074 <tcp_free_listen>
      break;
 8016312:	e00f      	b.n	8016334 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016314:	6879      	ldr	r1, [r7, #4]
 8016316:	480e      	ldr	r0, [pc, #56]	; (8016350 <tcp_close_shutdown+0x1b0>)
 8016318:	f001 fb28 	bl	801796c <tcp_pcb_remove>
 801631c:	4b0d      	ldr	r3, [pc, #52]	; (8016354 <tcp_close_shutdown+0x1b4>)
 801631e:	2201      	movs	r2, #1
 8016320:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f7ff fe8a 	bl	801603c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8016328:	e004      	b.n	8016334 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801632a:	6878      	ldr	r0, [r7, #4]
 801632c:	f000 f81a 	bl	8016364 <tcp_close_shutdown_fin>
 8016330:	4603      	mov	r3, r0
 8016332:	e000      	b.n	8016336 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8016334:	2300      	movs	r3, #0
}
 8016336:	4618      	mov	r0, r3
 8016338:	3710      	adds	r7, #16
 801633a:	46bd      	mov	sp, r7
 801633c:	bdb0      	pop	{r4, r5, r7, pc}
 801633e:	bf00      	nop
 8016340:	0802643c 	.word	0x0802643c
 8016344:	0802652c 	.word	0x0802652c
 8016348:	0802649c 	.word	0x0802649c
 801634c:	0802654c 	.word	0x0802654c
 8016350:	2400d24c 	.word	0x2400d24c
 8016354:	2400d248 	.word	0x2400d248
 8016358:	2400d260 	.word	0x2400d260
 801635c:	2400d258 	.word	0x2400d258
 8016360:	2400d254 	.word	0x2400d254

08016364 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b084      	sub	sp, #16
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d106      	bne.n	8016380 <tcp_close_shutdown_fin+0x1c>
 8016372:	4b2e      	ldr	r3, [pc, #184]	; (801642c <tcp_close_shutdown_fin+0xc8>)
 8016374:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8016378:	492d      	ldr	r1, [pc, #180]	; (8016430 <tcp_close_shutdown_fin+0xcc>)
 801637a:	482e      	ldr	r0, [pc, #184]	; (8016434 <tcp_close_shutdown_fin+0xd0>)
 801637c:	f00b fcce 	bl	8021d1c <iprintf>

  switch (pcb->state) {
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	7d1b      	ldrb	r3, [r3, #20]
 8016384:	2b07      	cmp	r3, #7
 8016386:	d020      	beq.n	80163ca <tcp_close_shutdown_fin+0x66>
 8016388:	2b07      	cmp	r3, #7
 801638a:	dc2b      	bgt.n	80163e4 <tcp_close_shutdown_fin+0x80>
 801638c:	2b03      	cmp	r3, #3
 801638e:	d002      	beq.n	8016396 <tcp_close_shutdown_fin+0x32>
 8016390:	2b04      	cmp	r3, #4
 8016392:	d00d      	beq.n	80163b0 <tcp_close_shutdown_fin+0x4c>
 8016394:	e026      	b.n	80163e4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8016396:	6878      	ldr	r0, [r7, #4]
 8016398:	f004 fdc2 	bl	801af20 <tcp_send_fin>
 801639c:	4603      	mov	r3, r0
 801639e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80163a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d11f      	bne.n	80163e8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2205      	movs	r2, #5
 80163ac:	751a      	strb	r2, [r3, #20]
      }
      break;
 80163ae:	e01b      	b.n	80163e8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80163b0:	6878      	ldr	r0, [r7, #4]
 80163b2:	f004 fdb5 	bl	801af20 <tcp_send_fin>
 80163b6:	4603      	mov	r3, r0
 80163b8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80163ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d114      	bne.n	80163ec <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2205      	movs	r2, #5
 80163c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80163c8:	e010      	b.n	80163ec <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	f004 fda8 	bl	801af20 <tcp_send_fin>
 80163d0:	4603      	mov	r3, r0
 80163d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80163d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d109      	bne.n	80163f0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	2209      	movs	r2, #9
 80163e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80163e2:	e005      	b.n	80163f0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80163e4:	2300      	movs	r3, #0
 80163e6:	e01c      	b.n	8016422 <tcp_close_shutdown_fin+0xbe>
      break;
 80163e8:	bf00      	nop
 80163ea:	e002      	b.n	80163f2 <tcp_close_shutdown_fin+0x8e>
      break;
 80163ec:	bf00      	nop
 80163ee:	e000      	b.n	80163f2 <tcp_close_shutdown_fin+0x8e>
      break;
 80163f0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80163f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d103      	bne.n	8016402 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f004 fece 	bl	801b19c <tcp_output>
 8016400:	e00d      	b.n	801641e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8016402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801640a:	d108      	bne.n	801641e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	8b5b      	ldrh	r3, [r3, #26]
 8016410:	f043 0308 	orr.w	r3, r3, #8
 8016414:	b29a      	uxth	r2, r3
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801641a:	2300      	movs	r3, #0
 801641c:	e001      	b.n	8016422 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801641e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016422:	4618      	mov	r0, r3
 8016424:	3710      	adds	r7, #16
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}
 801642a:	bf00      	nop
 801642c:	0802643c 	.word	0x0802643c
 8016430:	08026508 	.word	0x08026508
 8016434:	0802649c 	.word	0x0802649c

08016438 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b082      	sub	sp, #8
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d109      	bne.n	801645a <tcp_close+0x22>
 8016446:	4b0f      	ldr	r3, [pc, #60]	; (8016484 <tcp_close+0x4c>)
 8016448:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801644c:	490e      	ldr	r1, [pc, #56]	; (8016488 <tcp_close+0x50>)
 801644e:	480f      	ldr	r0, [pc, #60]	; (801648c <tcp_close+0x54>)
 8016450:	f00b fc64 	bl	8021d1c <iprintf>
 8016454:	f06f 030f 	mvn.w	r3, #15
 8016458:	e00f      	b.n	801647a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	7d1b      	ldrb	r3, [r3, #20]
 801645e:	2b01      	cmp	r3, #1
 8016460:	d006      	beq.n	8016470 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	8b5b      	ldrh	r3, [r3, #26]
 8016466:	f043 0310 	orr.w	r3, r3, #16
 801646a:	b29a      	uxth	r2, r3
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016470:	2101      	movs	r1, #1
 8016472:	6878      	ldr	r0, [r7, #4]
 8016474:	f7ff fe94 	bl	80161a0 <tcp_close_shutdown>
 8016478:	4603      	mov	r3, r0
}
 801647a:	4618      	mov	r0, r3
 801647c:	3708      	adds	r7, #8
 801647e:	46bd      	mov	sp, r7
 8016480:	bd80      	pop	{r7, pc}
 8016482:	bf00      	nop
 8016484:	0802643c 	.word	0x0802643c
 8016488:	08026568 	.word	0x08026568
 801648c:	0802649c 	.word	0x0802649c

08016490 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8016490:	b580      	push	{r7, lr}
 8016492:	b084      	sub	sp, #16
 8016494:	af00      	add	r7, sp, #0
 8016496:	60f8      	str	r0, [r7, #12]
 8016498:	60b9      	str	r1, [r7, #8]
 801649a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d109      	bne.n	80164b6 <tcp_shutdown+0x26>
 80164a2:	4b26      	ldr	r3, [pc, #152]	; (801653c <tcp_shutdown+0xac>)
 80164a4:	f240 2207 	movw	r2, #519	; 0x207
 80164a8:	4925      	ldr	r1, [pc, #148]	; (8016540 <tcp_shutdown+0xb0>)
 80164aa:	4826      	ldr	r0, [pc, #152]	; (8016544 <tcp_shutdown+0xb4>)
 80164ac:	f00b fc36 	bl	8021d1c <iprintf>
 80164b0:	f06f 030f 	mvn.w	r3, #15
 80164b4:	e03d      	b.n	8016532 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	7d1b      	ldrb	r3, [r3, #20]
 80164ba:	2b01      	cmp	r3, #1
 80164bc:	d102      	bne.n	80164c4 <tcp_shutdown+0x34>
    return ERR_CONN;
 80164be:	f06f 030a 	mvn.w	r3, #10
 80164c2:	e036      	b.n	8016532 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80164c4:	68bb      	ldr	r3, [r7, #8]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d01b      	beq.n	8016502 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	8b5b      	ldrh	r3, [r3, #26]
 80164ce:	f043 0310 	orr.w	r3, r3, #16
 80164d2:	b29a      	uxth	r2, r3
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d005      	beq.n	80164ea <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80164de:	2101      	movs	r1, #1
 80164e0:	68f8      	ldr	r0, [r7, #12]
 80164e2:	f7ff fe5d 	bl	80161a0 <tcp_close_shutdown>
 80164e6:	4603      	mov	r3, r0
 80164e8:	e023      	b.n	8016532 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d007      	beq.n	8016502 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80164f6:	4618      	mov	r0, r3
 80164f8:	f7fe fbf8 	bl	8014cec <pbuf_free>
      pcb->refused_data = NULL;
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	2200      	movs	r2, #0
 8016500:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d013      	beq.n	8016530 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	7d1b      	ldrb	r3, [r3, #20]
 801650c:	2b04      	cmp	r3, #4
 801650e:	dc02      	bgt.n	8016516 <tcp_shutdown+0x86>
 8016510:	2b03      	cmp	r3, #3
 8016512:	da02      	bge.n	801651a <tcp_shutdown+0x8a>
 8016514:	e009      	b.n	801652a <tcp_shutdown+0x9a>
 8016516:	2b07      	cmp	r3, #7
 8016518:	d107      	bne.n	801652a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801651a:	68bb      	ldr	r3, [r7, #8]
 801651c:	b2db      	uxtb	r3, r3
 801651e:	4619      	mov	r1, r3
 8016520:	68f8      	ldr	r0, [r7, #12]
 8016522:	f7ff fe3d 	bl	80161a0 <tcp_close_shutdown>
 8016526:	4603      	mov	r3, r0
 8016528:	e003      	b.n	8016532 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801652a:	f06f 030a 	mvn.w	r3, #10
 801652e:	e000      	b.n	8016532 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8016530:	2300      	movs	r3, #0
}
 8016532:	4618      	mov	r0, r3
 8016534:	3710      	adds	r7, #16
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}
 801653a:	bf00      	nop
 801653c:	0802643c 	.word	0x0802643c
 8016540:	08026580 	.word	0x08026580
 8016544:	0802649c 	.word	0x0802649c

08016548 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b08e      	sub	sp, #56	; 0x38
 801654c:	af04      	add	r7, sp, #16
 801654e:	6078      	str	r0, [r7, #4]
 8016550:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d107      	bne.n	8016568 <tcp_abandon+0x20>
 8016558:	4b52      	ldr	r3, [pc, #328]	; (80166a4 <tcp_abandon+0x15c>)
 801655a:	f240 223d 	movw	r2, #573	; 0x23d
 801655e:	4952      	ldr	r1, [pc, #328]	; (80166a8 <tcp_abandon+0x160>)
 8016560:	4852      	ldr	r0, [pc, #328]	; (80166ac <tcp_abandon+0x164>)
 8016562:	f00b fbdb 	bl	8021d1c <iprintf>
 8016566:	e099      	b.n	801669c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	7d1b      	ldrb	r3, [r3, #20]
 801656c:	2b01      	cmp	r3, #1
 801656e:	d106      	bne.n	801657e <tcp_abandon+0x36>
 8016570:	4b4c      	ldr	r3, [pc, #304]	; (80166a4 <tcp_abandon+0x15c>)
 8016572:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016576:	494e      	ldr	r1, [pc, #312]	; (80166b0 <tcp_abandon+0x168>)
 8016578:	484c      	ldr	r0, [pc, #304]	; (80166ac <tcp_abandon+0x164>)
 801657a:	f00b fbcf 	bl	8021d1c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	7d1b      	ldrb	r3, [r3, #20]
 8016582:	2b0a      	cmp	r3, #10
 8016584:	d107      	bne.n	8016596 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016586:	6879      	ldr	r1, [r7, #4]
 8016588:	484a      	ldr	r0, [pc, #296]	; (80166b4 <tcp_abandon+0x16c>)
 801658a:	f001 f9ef 	bl	801796c <tcp_pcb_remove>
    tcp_free(pcb);
 801658e:	6878      	ldr	r0, [r7, #4]
 8016590:	f7ff fd54 	bl	801603c <tcp_free>
 8016594:	e082      	b.n	801669c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8016596:	2300      	movs	r3, #0
 8016598:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801659a:	2300      	movs	r3, #0
 801659c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80165a2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165a8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165b0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	691b      	ldr	r3, [r3, #16]
 80165b6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	7d1b      	ldrb	r3, [r3, #20]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d126      	bne.n	801660e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	8adb      	ldrh	r3, [r3, #22]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d02e      	beq.n	8016626 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80165c8:	4b3b      	ldr	r3, [pc, #236]	; (80166b8 <tcp_abandon+0x170>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	687a      	ldr	r2, [r7, #4]
 80165ce:	429a      	cmp	r2, r3
 80165d0:	d105      	bne.n	80165de <tcp_abandon+0x96>
 80165d2:	4b39      	ldr	r3, [pc, #228]	; (80166b8 <tcp_abandon+0x170>)
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	68db      	ldr	r3, [r3, #12]
 80165d8:	4a37      	ldr	r2, [pc, #220]	; (80166b8 <tcp_abandon+0x170>)
 80165da:	6013      	str	r3, [r2, #0]
 80165dc:	e013      	b.n	8016606 <tcp_abandon+0xbe>
 80165de:	4b36      	ldr	r3, [pc, #216]	; (80166b8 <tcp_abandon+0x170>)
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	61fb      	str	r3, [r7, #28]
 80165e4:	e00c      	b.n	8016600 <tcp_abandon+0xb8>
 80165e6:	69fb      	ldr	r3, [r7, #28]
 80165e8:	68db      	ldr	r3, [r3, #12]
 80165ea:	687a      	ldr	r2, [r7, #4]
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d104      	bne.n	80165fa <tcp_abandon+0xb2>
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	68da      	ldr	r2, [r3, #12]
 80165f4:	69fb      	ldr	r3, [r7, #28]
 80165f6:	60da      	str	r2, [r3, #12]
 80165f8:	e005      	b.n	8016606 <tcp_abandon+0xbe>
 80165fa:	69fb      	ldr	r3, [r7, #28]
 80165fc:	68db      	ldr	r3, [r3, #12]
 80165fe:	61fb      	str	r3, [r7, #28]
 8016600:	69fb      	ldr	r3, [r7, #28]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d1ef      	bne.n	80165e6 <tcp_abandon+0x9e>
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	2200      	movs	r2, #0
 801660a:	60da      	str	r2, [r3, #12]
 801660c:	e00b      	b.n	8016626 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801660e:	683b      	ldr	r3, [r7, #0]
 8016610:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	8adb      	ldrh	r3, [r3, #22]
 8016616:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016618:	6879      	ldr	r1, [r7, #4]
 801661a:	4828      	ldr	r0, [pc, #160]	; (80166bc <tcp_abandon+0x174>)
 801661c:	f001 f9a6 	bl	801796c <tcp_pcb_remove>
 8016620:	4b27      	ldr	r3, [pc, #156]	; (80166c0 <tcp_abandon+0x178>)
 8016622:	2201      	movs	r2, #1
 8016624:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801662a:	2b00      	cmp	r3, #0
 801662c:	d004      	beq.n	8016638 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016632:	4618      	mov	r0, r3
 8016634:	f000 fe7a 	bl	801732c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801663c:	2b00      	cmp	r3, #0
 801663e:	d004      	beq.n	801664a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016644:	4618      	mov	r0, r3
 8016646:	f000 fe71 	bl	801732c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801664e:	2b00      	cmp	r3, #0
 8016650:	d004      	beq.n	801665c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016656:	4618      	mov	r0, r3
 8016658:	f000 fe68 	bl	801732c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665e:	2b00      	cmp	r3, #0
 8016660:	d00e      	beq.n	8016680 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016662:	6879      	ldr	r1, [r7, #4]
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	3304      	adds	r3, #4
 8016668:	687a      	ldr	r2, [r7, #4]
 801666a:	8b12      	ldrh	r2, [r2, #24]
 801666c:	9202      	str	r2, [sp, #8]
 801666e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016670:	9201      	str	r2, [sp, #4]
 8016672:	9300      	str	r3, [sp, #0]
 8016674:	460b      	mov	r3, r1
 8016676:	697a      	ldr	r2, [r7, #20]
 8016678:	69b9      	ldr	r1, [r7, #24]
 801667a:	6878      	ldr	r0, [r7, #4]
 801667c:	f005 fb42 	bl	801bd04 <tcp_rst>
    }
    last_state = pcb->state;
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	7d1b      	ldrb	r3, [r3, #20]
 8016684:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	f7ff fcd8 	bl	801603c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801668c:	693b      	ldr	r3, [r7, #16]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d004      	beq.n	801669c <tcp_abandon+0x154>
 8016692:	693b      	ldr	r3, [r7, #16]
 8016694:	f06f 010c 	mvn.w	r1, #12
 8016698:	68f8      	ldr	r0, [r7, #12]
 801669a:	4798      	blx	r3
  }
}
 801669c:	3728      	adds	r7, #40	; 0x28
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}
 80166a2:	bf00      	nop
 80166a4:	0802643c 	.word	0x0802643c
 80166a8:	0802659c 	.word	0x0802659c
 80166ac:	0802649c 	.word	0x0802649c
 80166b0:	080265b8 	.word	0x080265b8
 80166b4:	2400d25c 	.word	0x2400d25c
 80166b8:	2400d258 	.word	0x2400d258
 80166bc:	2400d24c 	.word	0x2400d24c
 80166c0:	2400d248 	.word	0x2400d248

080166c4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b082      	sub	sp, #8
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80166cc:	2101      	movs	r1, #1
 80166ce:	6878      	ldr	r0, [r7, #4]
 80166d0:	f7ff ff3a 	bl	8016548 <tcp_abandon>
}
 80166d4:	bf00      	nop
 80166d6:	3708      	adds	r7, #8
 80166d8:	46bd      	mov	sp, r7
 80166da:	bd80      	pop	{r7, pc}

080166dc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b084      	sub	sp, #16
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d106      	bne.n	80166f8 <tcp_update_rcv_ann_wnd+0x1c>
 80166ea:	4b25      	ldr	r3, [pc, #148]	; (8016780 <tcp_update_rcv_ann_wnd+0xa4>)
 80166ec:	f240 32a6 	movw	r2, #934	; 0x3a6
 80166f0:	4924      	ldr	r1, [pc, #144]	; (8016784 <tcp_update_rcv_ann_wnd+0xa8>)
 80166f2:	4825      	ldr	r0, [pc, #148]	; (8016788 <tcp_update_rcv_ann_wnd+0xac>)
 80166f4:	f00b fb12 	bl	8021d1c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166fc:	687a      	ldr	r2, [r7, #4]
 80166fe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8016700:	4413      	add	r3, r2
 8016702:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016708:	687a      	ldr	r2, [r7, #4]
 801670a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801670c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016710:	bf28      	it	cs
 8016712:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016716:	b292      	uxth	r2, r2
 8016718:	4413      	add	r3, r2
 801671a:	68fa      	ldr	r2, [r7, #12]
 801671c:	1ad3      	subs	r3, r2, r3
 801671e:	2b00      	cmp	r3, #0
 8016720:	db08      	blt.n	8016734 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801672e:	68fa      	ldr	r2, [r7, #12]
 8016730:	1ad3      	subs	r3, r2, r3
 8016732:	e020      	b.n	8016776 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801673c:	1ad3      	subs	r3, r2, r3
 801673e:	2b00      	cmp	r3, #0
 8016740:	dd03      	ble.n	801674a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	2200      	movs	r2, #0
 8016746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016748:	e014      	b.n	8016774 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016752:	1ad3      	subs	r3, r2, r3
 8016754:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016756:	68bb      	ldr	r3, [r7, #8]
 8016758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801675c:	d306      	bcc.n	801676c <tcp_update_rcv_ann_wnd+0x90>
 801675e:	4b08      	ldr	r3, [pc, #32]	; (8016780 <tcp_update_rcv_ann_wnd+0xa4>)
 8016760:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016764:	4909      	ldr	r1, [pc, #36]	; (801678c <tcp_update_rcv_ann_wnd+0xb0>)
 8016766:	4808      	ldr	r0, [pc, #32]	; (8016788 <tcp_update_rcv_ann_wnd+0xac>)
 8016768:	f00b fad8 	bl	8021d1c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801676c:	68bb      	ldr	r3, [r7, #8]
 801676e:	b29a      	uxth	r2, r3
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016774:	2300      	movs	r3, #0
  }
}
 8016776:	4618      	mov	r0, r3
 8016778:	3710      	adds	r7, #16
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}
 801677e:	bf00      	nop
 8016780:	0802643c 	.word	0x0802643c
 8016784:	080266b4 	.word	0x080266b4
 8016788:	0802649c 	.word	0x0802649c
 801678c:	080266d8 	.word	0x080266d8

08016790 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b084      	sub	sp, #16
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
 8016798:	460b      	mov	r3, r1
 801679a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d107      	bne.n	80167b2 <tcp_recved+0x22>
 80167a2:	4b1f      	ldr	r3, [pc, #124]	; (8016820 <tcp_recved+0x90>)
 80167a4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80167a8:	491e      	ldr	r1, [pc, #120]	; (8016824 <tcp_recved+0x94>)
 80167aa:	481f      	ldr	r0, [pc, #124]	; (8016828 <tcp_recved+0x98>)
 80167ac:	f00b fab6 	bl	8021d1c <iprintf>
 80167b0:	e032      	b.n	8016818 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	7d1b      	ldrb	r3, [r3, #20]
 80167b6:	2b01      	cmp	r3, #1
 80167b8:	d106      	bne.n	80167c8 <tcp_recved+0x38>
 80167ba:	4b19      	ldr	r3, [pc, #100]	; (8016820 <tcp_recved+0x90>)
 80167bc:	f240 32d2 	movw	r2, #978	; 0x3d2
 80167c0:	491a      	ldr	r1, [pc, #104]	; (801682c <tcp_recved+0x9c>)
 80167c2:	4819      	ldr	r0, [pc, #100]	; (8016828 <tcp_recved+0x98>)
 80167c4:	f00b faaa 	bl	8021d1c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80167cc:	887b      	ldrh	r3, [r7, #2]
 80167ce:	4413      	add	r3, r2
 80167d0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80167d2:	89fb      	ldrh	r3, [r7, #14]
 80167d4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80167d8:	d804      	bhi.n	80167e4 <tcp_recved+0x54>
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80167de:	89fa      	ldrh	r2, [r7, #14]
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d204      	bcs.n	80167ee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80167ea:	851a      	strh	r2, [r3, #40]	; 0x28
 80167ec:	e002      	b.n	80167f4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	89fa      	ldrh	r2, [r7, #14]
 80167f2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80167f4:	6878      	ldr	r0, [r7, #4]
 80167f6:	f7ff ff71 	bl	80166dc <tcp_update_rcv_ann_wnd>
 80167fa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80167fc:	68bb      	ldr	r3, [r7, #8]
 80167fe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016802:	d309      	bcc.n	8016818 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	8b5b      	ldrh	r3, [r3, #26]
 8016808:	f043 0302 	orr.w	r3, r3, #2
 801680c:	b29a      	uxth	r2, r3
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	f004 fcc2 	bl	801b19c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016818:	3710      	adds	r7, #16
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}
 801681e:	bf00      	nop
 8016820:	0802643c 	.word	0x0802643c
 8016824:	080266f4 	.word	0x080266f4
 8016828:	0802649c 	.word	0x0802649c
 801682c:	0802670c 	.word	0x0802670c

08016830 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016830:	b480      	push	{r7}
 8016832:	b083      	sub	sp, #12
 8016834:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016836:	2300      	movs	r3, #0
 8016838:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801683a:	4b1e      	ldr	r3, [pc, #120]	; (80168b4 <tcp_new_port+0x84>)
 801683c:	881b      	ldrh	r3, [r3, #0]
 801683e:	3301      	adds	r3, #1
 8016840:	b29a      	uxth	r2, r3
 8016842:	4b1c      	ldr	r3, [pc, #112]	; (80168b4 <tcp_new_port+0x84>)
 8016844:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016846:	4b1b      	ldr	r3, [pc, #108]	; (80168b4 <tcp_new_port+0x84>)
 8016848:	881b      	ldrh	r3, [r3, #0]
 801684a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801684e:	4293      	cmp	r3, r2
 8016850:	d103      	bne.n	801685a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016852:	4b18      	ldr	r3, [pc, #96]	; (80168b4 <tcp_new_port+0x84>)
 8016854:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016858:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801685a:	2300      	movs	r3, #0
 801685c:	71fb      	strb	r3, [r7, #7]
 801685e:	e01e      	b.n	801689e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016860:	79fb      	ldrb	r3, [r7, #7]
 8016862:	4a15      	ldr	r2, [pc, #84]	; (80168b8 <tcp_new_port+0x88>)
 8016864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	603b      	str	r3, [r7, #0]
 801686c:	e011      	b.n	8016892 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801686e:	683b      	ldr	r3, [r7, #0]
 8016870:	8ada      	ldrh	r2, [r3, #22]
 8016872:	4b10      	ldr	r3, [pc, #64]	; (80168b4 <tcp_new_port+0x84>)
 8016874:	881b      	ldrh	r3, [r3, #0]
 8016876:	429a      	cmp	r2, r3
 8016878:	d108      	bne.n	801688c <tcp_new_port+0x5c>
        n++;
 801687a:	88bb      	ldrh	r3, [r7, #4]
 801687c:	3301      	adds	r3, #1
 801687e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016880:	88bb      	ldrh	r3, [r7, #4]
 8016882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016886:	d3d8      	bcc.n	801683a <tcp_new_port+0xa>
          return 0;
 8016888:	2300      	movs	r3, #0
 801688a:	e00d      	b.n	80168a8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801688c:	683b      	ldr	r3, [r7, #0]
 801688e:	68db      	ldr	r3, [r3, #12]
 8016890:	603b      	str	r3, [r7, #0]
 8016892:	683b      	ldr	r3, [r7, #0]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d1ea      	bne.n	801686e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016898:	79fb      	ldrb	r3, [r7, #7]
 801689a:	3301      	adds	r3, #1
 801689c:	71fb      	strb	r3, [r7, #7]
 801689e:	79fb      	ldrb	r3, [r7, #7]
 80168a0:	2b03      	cmp	r3, #3
 80168a2:	d9dd      	bls.n	8016860 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80168a4:	4b03      	ldr	r3, [pc, #12]	; (80168b4 <tcp_new_port+0x84>)
 80168a6:	881b      	ldrh	r3, [r3, #0]
}
 80168a8:	4618      	mov	r0, r3
 80168aa:	370c      	adds	r7, #12
 80168ac:	46bd      	mov	sp, r7
 80168ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b2:	4770      	bx	lr
 80168b4:	24000028 	.word	0x24000028
 80168b8:	08028170 	.word	0x08028170

080168bc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b08a      	sub	sp, #40	; 0x28
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	60f8      	str	r0, [r7, #12]
 80168c4:	60b9      	str	r1, [r7, #8]
 80168c6:	603b      	str	r3, [r7, #0]
 80168c8:	4613      	mov	r3, r2
 80168ca:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80168cc:	2300      	movs	r3, #0
 80168ce:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d109      	bne.n	80168ea <tcp_connect+0x2e>
 80168d6:	4b7d      	ldr	r3, [pc, #500]	; (8016acc <tcp_connect+0x210>)
 80168d8:	f240 4235 	movw	r2, #1077	; 0x435
 80168dc:	497c      	ldr	r1, [pc, #496]	; (8016ad0 <tcp_connect+0x214>)
 80168de:	487d      	ldr	r0, [pc, #500]	; (8016ad4 <tcp_connect+0x218>)
 80168e0:	f00b fa1c 	bl	8021d1c <iprintf>
 80168e4:	f06f 030f 	mvn.w	r3, #15
 80168e8:	e0ec      	b.n	8016ac4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80168ea:	68bb      	ldr	r3, [r7, #8]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d109      	bne.n	8016904 <tcp_connect+0x48>
 80168f0:	4b76      	ldr	r3, [pc, #472]	; (8016acc <tcp_connect+0x210>)
 80168f2:	f240 4236 	movw	r2, #1078	; 0x436
 80168f6:	4978      	ldr	r1, [pc, #480]	; (8016ad8 <tcp_connect+0x21c>)
 80168f8:	4876      	ldr	r0, [pc, #472]	; (8016ad4 <tcp_connect+0x218>)
 80168fa:	f00b fa0f 	bl	8021d1c <iprintf>
 80168fe:	f06f 030f 	mvn.w	r3, #15
 8016902:	e0df      	b.n	8016ac4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	7d1b      	ldrb	r3, [r3, #20]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d009      	beq.n	8016920 <tcp_connect+0x64>
 801690c:	4b6f      	ldr	r3, [pc, #444]	; (8016acc <tcp_connect+0x210>)
 801690e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8016912:	4972      	ldr	r1, [pc, #456]	; (8016adc <tcp_connect+0x220>)
 8016914:	486f      	ldr	r0, [pc, #444]	; (8016ad4 <tcp_connect+0x218>)
 8016916:	f00b fa01 	bl	8021d1c <iprintf>
 801691a:	f06f 0309 	mvn.w	r3, #9
 801691e:	e0d1      	b.n	8016ac4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8016920:	68bb      	ldr	r3, [r7, #8]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d002      	beq.n	801692c <tcp_connect+0x70>
 8016926:	68bb      	ldr	r3, [r7, #8]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	e000      	b.n	801692e <tcp_connect+0x72>
 801692c:	2300      	movs	r3, #0
 801692e:	68fa      	ldr	r2, [r7, #12]
 8016930:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	88fa      	ldrh	r2, [r7, #6]
 8016936:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	7a1b      	ldrb	r3, [r3, #8]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d006      	beq.n	801694e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	7a1b      	ldrb	r3, [r3, #8]
 8016944:	4618      	mov	r0, r3
 8016946:	f7fd fe43 	bl	80145d0 <netif_get_by_index>
 801694a:	6278      	str	r0, [r7, #36]	; 0x24
 801694c:	e005      	b.n	801695a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	3304      	adds	r3, #4
 8016952:	4618      	mov	r0, r3
 8016954:	f7fb fb46 	bl	8011fe4 <ip4_route>
 8016958:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801695c:	2b00      	cmp	r3, #0
 801695e:	d102      	bne.n	8016966 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8016960:	f06f 0303 	mvn.w	r3, #3
 8016964:	e0ae      	b.n	8016ac4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d003      	beq.n	8016974 <tcp_connect+0xb8>
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d111      	bne.n	8016998 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8016974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016976:	2b00      	cmp	r3, #0
 8016978:	d002      	beq.n	8016980 <tcp_connect+0xc4>
 801697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801697c:	3304      	adds	r3, #4
 801697e:	e000      	b.n	8016982 <tcp_connect+0xc6>
 8016980:	2300      	movs	r3, #0
 8016982:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8016984:	69fb      	ldr	r3, [r7, #28]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d102      	bne.n	8016990 <tcp_connect+0xd4>
      return ERR_RTE;
 801698a:	f06f 0303 	mvn.w	r3, #3
 801698e:	e099      	b.n	8016ac4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016990:	69fb      	ldr	r3, [r7, #28]
 8016992:	681a      	ldr	r2, [r3, #0]
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	8adb      	ldrh	r3, [r3, #22]
 801699c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	8adb      	ldrh	r3, [r3, #22]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d10c      	bne.n	80169c0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80169a6:	f7ff ff43 	bl	8016830 <tcp_new_port>
 80169aa:	4603      	mov	r3, r0
 80169ac:	461a      	mov	r2, r3
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	8adb      	ldrh	r3, [r3, #22]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d102      	bne.n	80169c0 <tcp_connect+0x104>
      return ERR_BUF;
 80169ba:	f06f 0301 	mvn.w	r3, #1
 80169be:	e081      	b.n	8016ac4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80169c0:	68f8      	ldr	r0, [r7, #12]
 80169c2:	f001 f867 	bl	8017a94 <tcp_next_iss>
 80169c6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	2200      	movs	r2, #0
 80169cc:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	697a      	ldr	r2, [r7, #20]
 80169d2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80169d4:	697b      	ldr	r3, [r7, #20]
 80169d6:	1e5a      	subs	r2, r3, #1
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80169dc:	697b      	ldr	r3, [r7, #20]
 80169de:	1e5a      	subs	r2, r3, #1
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80169e4:	697b      	ldr	r3, [r7, #20]
 80169e6:	1e5a      	subs	r2, r3, #1
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80169f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016a0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016a14:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	3304      	adds	r3, #4
 8016a1e:	461a      	mov	r2, r3
 8016a20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a22:	f001 f85d 	bl	8017ae0 <tcp_eff_send_mss_netif>
 8016a26:	4603      	mov	r3, r0
 8016a28:	461a      	mov	r2, r3
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	2201      	movs	r2, #1
 8016a32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	683a      	ldr	r2, [r7, #0]
 8016a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8016a3e:	2102      	movs	r1, #2
 8016a40:	68f8      	ldr	r0, [r7, #12]
 8016a42:	f004 fabd 	bl	801afc0 <tcp_enqueue_flags>
 8016a46:	4603      	mov	r3, r0
 8016a48:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8016a4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d136      	bne.n	8016ac0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	2202      	movs	r2, #2
 8016a56:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8016a58:	8b7b      	ldrh	r3, [r7, #26]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d021      	beq.n	8016aa2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8016a5e:	4b20      	ldr	r3, [pc, #128]	; (8016ae0 <tcp_connect+0x224>)
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	68fa      	ldr	r2, [r7, #12]
 8016a64:	429a      	cmp	r2, r3
 8016a66:	d105      	bne.n	8016a74 <tcp_connect+0x1b8>
 8016a68:	4b1d      	ldr	r3, [pc, #116]	; (8016ae0 <tcp_connect+0x224>)
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	68db      	ldr	r3, [r3, #12]
 8016a6e:	4a1c      	ldr	r2, [pc, #112]	; (8016ae0 <tcp_connect+0x224>)
 8016a70:	6013      	str	r3, [r2, #0]
 8016a72:	e013      	b.n	8016a9c <tcp_connect+0x1e0>
 8016a74:	4b1a      	ldr	r3, [pc, #104]	; (8016ae0 <tcp_connect+0x224>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	623b      	str	r3, [r7, #32]
 8016a7a:	e00c      	b.n	8016a96 <tcp_connect+0x1da>
 8016a7c:	6a3b      	ldr	r3, [r7, #32]
 8016a7e:	68db      	ldr	r3, [r3, #12]
 8016a80:	68fa      	ldr	r2, [r7, #12]
 8016a82:	429a      	cmp	r2, r3
 8016a84:	d104      	bne.n	8016a90 <tcp_connect+0x1d4>
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	68da      	ldr	r2, [r3, #12]
 8016a8a:	6a3b      	ldr	r3, [r7, #32]
 8016a8c:	60da      	str	r2, [r3, #12]
 8016a8e:	e005      	b.n	8016a9c <tcp_connect+0x1e0>
 8016a90:	6a3b      	ldr	r3, [r7, #32]
 8016a92:	68db      	ldr	r3, [r3, #12]
 8016a94:	623b      	str	r3, [r7, #32]
 8016a96:	6a3b      	ldr	r3, [r7, #32]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d1ef      	bne.n	8016a7c <tcp_connect+0x1c0>
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	2200      	movs	r2, #0
 8016aa0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8016aa2:	4b10      	ldr	r3, [pc, #64]	; (8016ae4 <tcp_connect+0x228>)
 8016aa4:	681a      	ldr	r2, [r3, #0]
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	60da      	str	r2, [r3, #12]
 8016aaa:	4a0e      	ldr	r2, [pc, #56]	; (8016ae4 <tcp_connect+0x228>)
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	6013      	str	r3, [r2, #0]
 8016ab0:	f005 fca2 	bl	801c3f8 <tcp_timer_needed>
 8016ab4:	4b0c      	ldr	r3, [pc, #48]	; (8016ae8 <tcp_connect+0x22c>)
 8016ab6:	2201      	movs	r2, #1
 8016ab8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8016aba:	68f8      	ldr	r0, [r7, #12]
 8016abc:	f004 fb6e 	bl	801b19c <tcp_output>
  }
  return ret;
 8016ac0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	3728      	adds	r7, #40	; 0x28
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd80      	pop	{r7, pc}
 8016acc:	0802643c 	.word	0x0802643c
 8016ad0:	08026734 	.word	0x08026734
 8016ad4:	0802649c 	.word	0x0802649c
 8016ad8:	08026750 	.word	0x08026750
 8016adc:	0802676c 	.word	0x0802676c
 8016ae0:	2400d258 	.word	0x2400d258
 8016ae4:	2400d24c 	.word	0x2400d24c
 8016ae8:	2400d248 	.word	0x2400d248

08016aec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016aec:	b5b0      	push	{r4, r5, r7, lr}
 8016aee:	b090      	sub	sp, #64	; 0x40
 8016af0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016af2:	2300      	movs	r3, #0
 8016af4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8016af8:	4b94      	ldr	r3, [pc, #592]	; (8016d4c <tcp_slowtmr+0x260>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	3301      	adds	r3, #1
 8016afe:	4a93      	ldr	r2, [pc, #588]	; (8016d4c <tcp_slowtmr+0x260>)
 8016b00:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016b02:	4b93      	ldr	r3, [pc, #588]	; (8016d50 <tcp_slowtmr+0x264>)
 8016b04:	781b      	ldrb	r3, [r3, #0]
 8016b06:	3301      	adds	r3, #1
 8016b08:	b2da      	uxtb	r2, r3
 8016b0a:	4b91      	ldr	r3, [pc, #580]	; (8016d50 <tcp_slowtmr+0x264>)
 8016b0c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016b12:	4b90      	ldr	r3, [pc, #576]	; (8016d54 <tcp_slowtmr+0x268>)
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8016b18:	e29d      	b.n	8017056 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b1c:	7d1b      	ldrb	r3, [r3, #20]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d106      	bne.n	8016b30 <tcp_slowtmr+0x44>
 8016b22:	4b8d      	ldr	r3, [pc, #564]	; (8016d58 <tcp_slowtmr+0x26c>)
 8016b24:	f240 42be 	movw	r2, #1214	; 0x4be
 8016b28:	498c      	ldr	r1, [pc, #560]	; (8016d5c <tcp_slowtmr+0x270>)
 8016b2a:	488d      	ldr	r0, [pc, #564]	; (8016d60 <tcp_slowtmr+0x274>)
 8016b2c:	f00b f8f6 	bl	8021d1c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b32:	7d1b      	ldrb	r3, [r3, #20]
 8016b34:	2b01      	cmp	r3, #1
 8016b36:	d106      	bne.n	8016b46 <tcp_slowtmr+0x5a>
 8016b38:	4b87      	ldr	r3, [pc, #540]	; (8016d58 <tcp_slowtmr+0x26c>)
 8016b3a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8016b3e:	4989      	ldr	r1, [pc, #548]	; (8016d64 <tcp_slowtmr+0x278>)
 8016b40:	4887      	ldr	r0, [pc, #540]	; (8016d60 <tcp_slowtmr+0x274>)
 8016b42:	f00b f8eb 	bl	8021d1c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b48:	7d1b      	ldrb	r3, [r3, #20]
 8016b4a:	2b0a      	cmp	r3, #10
 8016b4c:	d106      	bne.n	8016b5c <tcp_slowtmr+0x70>
 8016b4e:	4b82      	ldr	r3, [pc, #520]	; (8016d58 <tcp_slowtmr+0x26c>)
 8016b50:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016b54:	4984      	ldr	r1, [pc, #528]	; (8016d68 <tcp_slowtmr+0x27c>)
 8016b56:	4882      	ldr	r0, [pc, #520]	; (8016d60 <tcp_slowtmr+0x274>)
 8016b58:	f00b f8e0 	bl	8021d1c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b5e:	7f9a      	ldrb	r2, [r3, #30]
 8016b60:	4b7b      	ldr	r3, [pc, #492]	; (8016d50 <tcp_slowtmr+0x264>)
 8016b62:	781b      	ldrb	r3, [r3, #0]
 8016b64:	429a      	cmp	r2, r3
 8016b66:	d105      	bne.n	8016b74 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b6a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b6e:	68db      	ldr	r3, [r3, #12]
 8016b70:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8016b72:	e270      	b.n	8017056 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016b74:	4b76      	ldr	r3, [pc, #472]	; (8016d50 <tcp_slowtmr+0x264>)
 8016b76:	781a      	ldrb	r2, [r3, #0]
 8016b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b7a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8016b82:	2300      	movs	r3, #0
 8016b84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b8a:	7d1b      	ldrb	r3, [r3, #20]
 8016b8c:	2b02      	cmp	r3, #2
 8016b8e:	d10a      	bne.n	8016ba6 <tcp_slowtmr+0xba>
 8016b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016b96:	2b05      	cmp	r3, #5
 8016b98:	d905      	bls.n	8016ba6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8016b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b9e:	3301      	adds	r3, #1
 8016ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ba4:	e11e      	b.n	8016de4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016bac:	2b0b      	cmp	r3, #11
 8016bae:	d905      	bls.n	8016bbc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8016bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bb4:	3301      	adds	r3, #1
 8016bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016bba:	e113      	b.n	8016de4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8016bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bbe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d075      	beq.n	8016cb2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d006      	beq.n	8016bdc <tcp_slowtmr+0xf0>
 8016bce:	4b62      	ldr	r3, [pc, #392]	; (8016d58 <tcp_slowtmr+0x26c>)
 8016bd0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8016bd4:	4965      	ldr	r1, [pc, #404]	; (8016d6c <tcp_slowtmr+0x280>)
 8016bd6:	4862      	ldr	r0, [pc, #392]	; (8016d60 <tcp_slowtmr+0x274>)
 8016bd8:	f00b f8a0 	bl	8021d1c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d106      	bne.n	8016bf2 <tcp_slowtmr+0x106>
 8016be4:	4b5c      	ldr	r3, [pc, #368]	; (8016d58 <tcp_slowtmr+0x26c>)
 8016be6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8016bea:	4961      	ldr	r1, [pc, #388]	; (8016d70 <tcp_slowtmr+0x284>)
 8016bec:	485c      	ldr	r0, [pc, #368]	; (8016d60 <tcp_slowtmr+0x274>)
 8016bee:	f00b f895 	bl	8021d1c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8016bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bf4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016bf8:	2b0b      	cmp	r3, #11
 8016bfa:	d905      	bls.n	8016c08 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8016bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c00:	3301      	adds	r3, #1
 8016c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c06:	e0ed      	b.n	8016de4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8016c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c0a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016c0e:	3b01      	subs	r3, #1
 8016c10:	4a58      	ldr	r2, [pc, #352]	; (8016d74 <tcp_slowtmr+0x288>)
 8016c12:	5cd3      	ldrb	r3, [r2, r3]
 8016c14:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8016c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c18:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016c1c:	7c7a      	ldrb	r2, [r7, #17]
 8016c1e:	429a      	cmp	r2, r3
 8016c20:	d907      	bls.n	8016c32 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8016c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016c28:	3301      	adds	r3, #1
 8016c2a:	b2da      	uxtb	r2, r3
 8016c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c2e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8016c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016c38:	7c7a      	ldrb	r2, [r7, #17]
 8016c3a:	429a      	cmp	r2, r3
 8016c3c:	f200 80d2 	bhi.w	8016de4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8016c40:	2301      	movs	r3, #1
 8016c42:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8016c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d108      	bne.n	8016c60 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8016c4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c50:	f005 f94c 	bl	801beec <tcp_zero_window_probe>
 8016c54:	4603      	mov	r3, r0
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d014      	beq.n	8016c84 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	623b      	str	r3, [r7, #32]
 8016c5e:	e011      	b.n	8016c84 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c66:	4619      	mov	r1, r3
 8016c68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c6a:	f004 f811 	bl	801ac90 <tcp_split_unsent_seg>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d107      	bne.n	8016c84 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8016c74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c76:	f004 fa91 	bl	801b19c <tcp_output>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d101      	bne.n	8016c84 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8016c80:	2300      	movs	r3, #0
 8016c82:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8016c84:	6a3b      	ldr	r3, [r7, #32]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	f000 80ac 	beq.w	8016de4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8016c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c8e:	2200      	movs	r2, #0
 8016c90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c96:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016c9a:	2b06      	cmp	r3, #6
 8016c9c:	f200 80a2 	bhi.w	8016de4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8016ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016ca6:	3301      	adds	r3, #1
 8016ca8:	b2da      	uxtb	r2, r3
 8016caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8016cb0:	e098      	b.n	8016de4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8016cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cb4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	db0f      	blt.n	8016cdc <tcp_slowtmr+0x1f0>
 8016cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cbe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016cc2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016cc6:	4293      	cmp	r3, r2
 8016cc8:	d008      	beq.n	8016cdc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8016cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ccc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016cd0:	b29b      	uxth	r3, r3
 8016cd2:	3301      	adds	r3, #1
 8016cd4:	b29b      	uxth	r3, r3
 8016cd6:	b21a      	sxth	r2, r3
 8016cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cda:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8016cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cde:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8016ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ce4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016ce8:	429a      	cmp	r2, r3
 8016cea:	db7b      	blt.n	8016de4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8016cec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016cee:	f004 fd47 	bl	801b780 <tcp_rexmit_rto_prepare>
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d007      	beq.n	8016d08 <tcp_slowtmr+0x21c>
 8016cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d171      	bne.n	8016de4 <tcp_slowtmr+0x2f8>
 8016d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d06d      	beq.n	8016de4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8016d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d0a:	7d1b      	ldrb	r3, [r3, #20]
 8016d0c:	2b02      	cmp	r3, #2
 8016d0e:	d03a      	beq.n	8016d86 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8016d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016d16:	2b0c      	cmp	r3, #12
 8016d18:	bf28      	it	cs
 8016d1a:	230c      	movcs	r3, #12
 8016d1c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8016d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016d24:	10db      	asrs	r3, r3, #3
 8016d26:	b21b      	sxth	r3, r3
 8016d28:	461a      	mov	r2, r3
 8016d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016d30:	4413      	add	r3, r2
 8016d32:	7efa      	ldrb	r2, [r7, #27]
 8016d34:	4910      	ldr	r1, [pc, #64]	; (8016d78 <tcp_slowtmr+0x28c>)
 8016d36:	5c8a      	ldrb	r2, [r1, r2]
 8016d38:	4093      	lsls	r3, r2
 8016d3a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8016d3c:	697b      	ldr	r3, [r7, #20]
 8016d3e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8016d42:	4293      	cmp	r3, r2
 8016d44:	dc1a      	bgt.n	8016d7c <tcp_slowtmr+0x290>
 8016d46:	697b      	ldr	r3, [r7, #20]
 8016d48:	b21a      	sxth	r2, r3
 8016d4a:	e019      	b.n	8016d80 <tcp_slowtmr+0x294>
 8016d4c:	2400d250 	.word	0x2400d250
 8016d50:	2400495d 	.word	0x2400495d
 8016d54:	2400d24c 	.word	0x2400d24c
 8016d58:	0802643c 	.word	0x0802643c
 8016d5c:	0802679c 	.word	0x0802679c
 8016d60:	0802649c 	.word	0x0802649c
 8016d64:	080267c8 	.word	0x080267c8
 8016d68:	080267f4 	.word	0x080267f4
 8016d6c:	08026824 	.word	0x08026824
 8016d70:	08026858 	.word	0x08026858
 8016d74:	08028168 	.word	0x08028168
 8016d78:	08028158 	.word	0x08028158
 8016d7c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8016d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d88:	2200      	movs	r2, #0
 8016d8a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8016d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016d98:	4293      	cmp	r3, r2
 8016d9a:	bf28      	it	cs
 8016d9c:	4613      	movcs	r3, r2
 8016d9e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8016da0:	8a7b      	ldrh	r3, [r7, #18]
 8016da2:	085b      	lsrs	r3, r3, #1
 8016da4:	b29a      	uxth	r2, r3
 8016da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016da8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8016dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016db4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016db6:	005b      	lsls	r3, r3, #1
 8016db8:	b29b      	uxth	r3, r3
 8016dba:	429a      	cmp	r2, r3
 8016dbc:	d206      	bcs.n	8016dcc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8016dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016dc2:	005b      	lsls	r3, r3, #1
 8016dc4:	b29a      	uxth	r2, r3
 8016dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8016dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dce:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8016dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8016dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dd8:	2200      	movs	r2, #0
 8016dda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8016dde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016de0:	f004 fd3e 	bl	801b860 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8016de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016de6:	7d1b      	ldrb	r3, [r3, #20]
 8016de8:	2b06      	cmp	r3, #6
 8016dea:	d111      	bne.n	8016e10 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8016dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dee:	8b5b      	ldrh	r3, [r3, #26]
 8016df0:	f003 0310 	and.w	r3, r3, #16
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d00b      	beq.n	8016e10 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016df8:	4b9c      	ldr	r3, [pc, #624]	; (801706c <tcp_slowtmr+0x580>)
 8016dfa:	681a      	ldr	r2, [r3, #0]
 8016dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dfe:	6a1b      	ldr	r3, [r3, #32]
 8016e00:	1ad3      	subs	r3, r2, r3
 8016e02:	2b28      	cmp	r3, #40	; 0x28
 8016e04:	d904      	bls.n	8016e10 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8016e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e0a:	3301      	adds	r3, #1
 8016e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e12:	7a5b      	ldrb	r3, [r3, #9]
 8016e14:	f003 0308 	and.w	r3, r3, #8
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d04a      	beq.n	8016eb2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8016e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e1e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016e20:	2b04      	cmp	r3, #4
 8016e22:	d003      	beq.n	8016e2c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8016e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e26:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8016e28:	2b07      	cmp	r3, #7
 8016e2a:	d142      	bne.n	8016eb2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016e2c:	4b8f      	ldr	r3, [pc, #572]	; (801706c <tcp_slowtmr+0x580>)
 8016e2e:	681a      	ldr	r2, [r3, #0]
 8016e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e32:	6a1b      	ldr	r3, [r3, #32]
 8016e34:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8016e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e38:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016e3c:	4b8c      	ldr	r3, [pc, #560]	; (8017070 <tcp_slowtmr+0x584>)
 8016e3e:	440b      	add	r3, r1
 8016e40:	498c      	ldr	r1, [pc, #560]	; (8017074 <tcp_slowtmr+0x588>)
 8016e42:	fba1 1303 	umull	r1, r3, r1, r3
 8016e46:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016e48:	429a      	cmp	r2, r3
 8016e4a:	d90a      	bls.n	8016e62 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8016e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e50:	3301      	adds	r3, #1
 8016e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8016e56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e5a:	3301      	adds	r3, #1
 8016e5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016e60:	e027      	b.n	8016eb2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016e62:	4b82      	ldr	r3, [pc, #520]	; (801706c <tcp_slowtmr+0x580>)
 8016e64:	681a      	ldr	r2, [r3, #0]
 8016e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e68:	6a1b      	ldr	r3, [r3, #32]
 8016e6a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e6e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e74:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016e78:	4618      	mov	r0, r3
 8016e7a:	4b7f      	ldr	r3, [pc, #508]	; (8017078 <tcp_slowtmr+0x58c>)
 8016e7c:	fb03 f300 	mul.w	r3, r3, r0
 8016e80:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8016e82:	497c      	ldr	r1, [pc, #496]	; (8017074 <tcp_slowtmr+0x588>)
 8016e84:	fba1 1303 	umull	r1, r3, r1, r3
 8016e88:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016e8a:	429a      	cmp	r2, r3
 8016e8c:	d911      	bls.n	8016eb2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8016e8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e90:	f004 ffec 	bl	801be6c <tcp_keepalive>
 8016e94:	4603      	mov	r3, r0
 8016e96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8016e9a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d107      	bne.n	8016eb2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8016ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ea4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016ea8:	3301      	adds	r3, #1
 8016eaa:	b2da      	uxtb	r2, r3
 8016eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eae:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8016eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d011      	beq.n	8016ede <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8016eba:	4b6c      	ldr	r3, [pc, #432]	; (801706c <tcp_slowtmr+0x580>)
 8016ebc:	681a      	ldr	r2, [r3, #0]
 8016ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ec0:	6a1b      	ldr	r3, [r3, #32]
 8016ec2:	1ad2      	subs	r2, r2, r3
 8016ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ec6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016eca:	4619      	mov	r1, r3
 8016ecc:	460b      	mov	r3, r1
 8016ece:	005b      	lsls	r3, r3, #1
 8016ed0:	440b      	add	r3, r1
 8016ed2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8016ed4:	429a      	cmp	r2, r3
 8016ed6:	d302      	bcc.n	8016ede <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8016ed8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016eda:	f000 feab 	bl	8017c34 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8016ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee0:	7d1b      	ldrb	r3, [r3, #20]
 8016ee2:	2b03      	cmp	r3, #3
 8016ee4:	d10b      	bne.n	8016efe <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016ee6:	4b61      	ldr	r3, [pc, #388]	; (801706c <tcp_slowtmr+0x580>)
 8016ee8:	681a      	ldr	r2, [r3, #0]
 8016eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eec:	6a1b      	ldr	r3, [r3, #32]
 8016eee:	1ad3      	subs	r3, r2, r3
 8016ef0:	2b28      	cmp	r3, #40	; 0x28
 8016ef2:	d904      	bls.n	8016efe <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8016ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ef8:	3301      	adds	r3, #1
 8016efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8016efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f00:	7d1b      	ldrb	r3, [r3, #20]
 8016f02:	2b09      	cmp	r3, #9
 8016f04:	d10b      	bne.n	8016f1e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016f06:	4b59      	ldr	r3, [pc, #356]	; (801706c <tcp_slowtmr+0x580>)
 8016f08:	681a      	ldr	r2, [r3, #0]
 8016f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0c:	6a1b      	ldr	r3, [r3, #32]
 8016f0e:	1ad3      	subs	r3, r2, r3
 8016f10:	2bf0      	cmp	r3, #240	; 0xf0
 8016f12:	d904      	bls.n	8016f1e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8016f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f18:	3301      	adds	r3, #1
 8016f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d060      	beq.n	8016fe8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8016f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f2c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8016f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f30:	f000 fccc 	bl	80178cc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8016f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d010      	beq.n	8016f5c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016f3a:	4b50      	ldr	r3, [pc, #320]	; (801707c <tcp_slowtmr+0x590>)
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f40:	429a      	cmp	r2, r3
 8016f42:	d106      	bne.n	8016f52 <tcp_slowtmr+0x466>
 8016f44:	4b4e      	ldr	r3, [pc, #312]	; (8017080 <tcp_slowtmr+0x594>)
 8016f46:	f240 526d 	movw	r2, #1389	; 0x56d
 8016f4a:	494e      	ldr	r1, [pc, #312]	; (8017084 <tcp_slowtmr+0x598>)
 8016f4c:	484e      	ldr	r0, [pc, #312]	; (8017088 <tcp_slowtmr+0x59c>)
 8016f4e:	f00a fee5 	bl	8021d1c <iprintf>
        prev->next = pcb->next;
 8016f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f54:	68da      	ldr	r2, [r3, #12]
 8016f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f58:	60da      	str	r2, [r3, #12]
 8016f5a:	e00f      	b.n	8016f7c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016f5c:	4b47      	ldr	r3, [pc, #284]	; (801707c <tcp_slowtmr+0x590>)
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f62:	429a      	cmp	r2, r3
 8016f64:	d006      	beq.n	8016f74 <tcp_slowtmr+0x488>
 8016f66:	4b46      	ldr	r3, [pc, #280]	; (8017080 <tcp_slowtmr+0x594>)
 8016f68:	f240 5271 	movw	r2, #1393	; 0x571
 8016f6c:	4947      	ldr	r1, [pc, #284]	; (801708c <tcp_slowtmr+0x5a0>)
 8016f6e:	4846      	ldr	r0, [pc, #280]	; (8017088 <tcp_slowtmr+0x59c>)
 8016f70:	f00a fed4 	bl	8021d1c <iprintf>
        tcp_active_pcbs = pcb->next;
 8016f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f76:	68db      	ldr	r3, [r3, #12]
 8016f78:	4a40      	ldr	r2, [pc, #256]	; (801707c <tcp_slowtmr+0x590>)
 8016f7a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8016f7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d013      	beq.n	8016fac <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f86:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f8a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016f8c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8016f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f90:	3304      	adds	r3, #4
 8016f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f94:	8ad2      	ldrh	r2, [r2, #22]
 8016f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016f98:	8b09      	ldrh	r1, [r1, #24]
 8016f9a:	9102      	str	r1, [sp, #8]
 8016f9c:	9201      	str	r2, [sp, #4]
 8016f9e:	9300      	str	r3, [sp, #0]
 8016fa0:	462b      	mov	r3, r5
 8016fa2:	4622      	mov	r2, r4
 8016fa4:	4601      	mov	r1, r0
 8016fa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016fa8:	f004 feac 	bl	801bd04 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8016fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fae:	691b      	ldr	r3, [r3, #16]
 8016fb0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8016fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fb4:	7d1b      	ldrb	r3, [r3, #20]
 8016fb6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fba:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fbe:	68db      	ldr	r3, [r3, #12]
 8016fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016fc2:	6838      	ldr	r0, [r7, #0]
 8016fc4:	f7ff f83a 	bl	801603c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8016fc8:	4b31      	ldr	r3, [pc, #196]	; (8017090 <tcp_slowtmr+0x5a4>)
 8016fca:	2200      	movs	r2, #0
 8016fcc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d004      	beq.n	8016fde <tcp_slowtmr+0x4f2>
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	f06f 010c 	mvn.w	r1, #12
 8016fda:	68b8      	ldr	r0, [r7, #8]
 8016fdc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016fde:	4b2c      	ldr	r3, [pc, #176]	; (8017090 <tcp_slowtmr+0x5a4>)
 8016fe0:	781b      	ldrb	r3, [r3, #0]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d037      	beq.n	8017056 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8016fe6:	e592      	b.n	8016b0e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8016fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fee:	68db      	ldr	r3, [r3, #12]
 8016ff0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8016ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ff4:	7f1b      	ldrb	r3, [r3, #28]
 8016ff6:	3301      	adds	r3, #1
 8016ff8:	b2da      	uxtb	r2, r3
 8016ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ffc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017000:	7f1a      	ldrb	r2, [r3, #28]
 8017002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017004:	7f5b      	ldrb	r3, [r3, #29]
 8017006:	429a      	cmp	r2, r3
 8017008:	d325      	bcc.n	8017056 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801700c:	2200      	movs	r2, #0
 801700e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8017010:	4b1f      	ldr	r3, [pc, #124]	; (8017090 <tcp_slowtmr+0x5a4>)
 8017012:	2200      	movs	r2, #0
 8017014:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8017016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801701c:	2b00      	cmp	r3, #0
 801701e:	d00b      	beq.n	8017038 <tcp_slowtmr+0x54c>
 8017020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017028:	6912      	ldr	r2, [r2, #16]
 801702a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801702c:	4610      	mov	r0, r2
 801702e:	4798      	blx	r3
 8017030:	4603      	mov	r3, r0
 8017032:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017036:	e002      	b.n	801703e <tcp_slowtmr+0x552>
 8017038:	2300      	movs	r3, #0
 801703a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801703e:	4b14      	ldr	r3, [pc, #80]	; (8017090 <tcp_slowtmr+0x5a4>)
 8017040:	781b      	ldrb	r3, [r3, #0]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d000      	beq.n	8017048 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8017046:	e562      	b.n	8016b0e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8017048:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801704c:	2b00      	cmp	r3, #0
 801704e:	d102      	bne.n	8017056 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8017050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017052:	f004 f8a3 	bl	801b19c <tcp_output>
  while (pcb != NULL) {
 8017056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017058:	2b00      	cmp	r3, #0
 801705a:	f47f ad5e 	bne.w	8016b1a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801705e:	2300      	movs	r3, #0
 8017060:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8017062:	4b0c      	ldr	r3, [pc, #48]	; (8017094 <tcp_slowtmr+0x5a8>)
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017068:	e069      	b.n	801713e <tcp_slowtmr+0x652>
 801706a:	bf00      	nop
 801706c:	2400d250 	.word	0x2400d250
 8017070:	000a4cb8 	.word	0x000a4cb8
 8017074:	10624dd3 	.word	0x10624dd3
 8017078:	000124f8 	.word	0x000124f8
 801707c:	2400d24c 	.word	0x2400d24c
 8017080:	0802643c 	.word	0x0802643c
 8017084:	08026890 	.word	0x08026890
 8017088:	0802649c 	.word	0x0802649c
 801708c:	080268bc 	.word	0x080268bc
 8017090:	2400d248 	.word	0x2400d248
 8017094:	2400d25c 	.word	0x2400d25c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801709a:	7d1b      	ldrb	r3, [r3, #20]
 801709c:	2b0a      	cmp	r3, #10
 801709e:	d006      	beq.n	80170ae <tcp_slowtmr+0x5c2>
 80170a0:	4b2b      	ldr	r3, [pc, #172]	; (8017150 <tcp_slowtmr+0x664>)
 80170a2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80170a6:	492b      	ldr	r1, [pc, #172]	; (8017154 <tcp_slowtmr+0x668>)
 80170a8:	482b      	ldr	r0, [pc, #172]	; (8017158 <tcp_slowtmr+0x66c>)
 80170aa:	f00a fe37 	bl	8021d1c <iprintf>
    pcb_remove = 0;
 80170ae:	2300      	movs	r3, #0
 80170b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80170b4:	4b29      	ldr	r3, [pc, #164]	; (801715c <tcp_slowtmr+0x670>)
 80170b6:	681a      	ldr	r2, [r3, #0]
 80170b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ba:	6a1b      	ldr	r3, [r3, #32]
 80170bc:	1ad3      	subs	r3, r2, r3
 80170be:	2bf0      	cmp	r3, #240	; 0xf0
 80170c0:	d904      	bls.n	80170cc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80170c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170c6:	3301      	adds	r3, #1
 80170c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80170cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d02f      	beq.n	8017134 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80170d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170d6:	f000 fbf9 	bl	80178cc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80170da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d010      	beq.n	8017102 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80170e0:	4b1f      	ldr	r3, [pc, #124]	; (8017160 <tcp_slowtmr+0x674>)
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80170e6:	429a      	cmp	r2, r3
 80170e8:	d106      	bne.n	80170f8 <tcp_slowtmr+0x60c>
 80170ea:	4b19      	ldr	r3, [pc, #100]	; (8017150 <tcp_slowtmr+0x664>)
 80170ec:	f240 52af 	movw	r2, #1455	; 0x5af
 80170f0:	491c      	ldr	r1, [pc, #112]	; (8017164 <tcp_slowtmr+0x678>)
 80170f2:	4819      	ldr	r0, [pc, #100]	; (8017158 <tcp_slowtmr+0x66c>)
 80170f4:	f00a fe12 	bl	8021d1c <iprintf>
        prev->next = pcb->next;
 80170f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170fa:	68da      	ldr	r2, [r3, #12]
 80170fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170fe:	60da      	str	r2, [r3, #12]
 8017100:	e00f      	b.n	8017122 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8017102:	4b17      	ldr	r3, [pc, #92]	; (8017160 <tcp_slowtmr+0x674>)
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017108:	429a      	cmp	r2, r3
 801710a:	d006      	beq.n	801711a <tcp_slowtmr+0x62e>
 801710c:	4b10      	ldr	r3, [pc, #64]	; (8017150 <tcp_slowtmr+0x664>)
 801710e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8017112:	4915      	ldr	r1, [pc, #84]	; (8017168 <tcp_slowtmr+0x67c>)
 8017114:	4810      	ldr	r0, [pc, #64]	; (8017158 <tcp_slowtmr+0x66c>)
 8017116:	f00a fe01 	bl	8021d1c <iprintf>
        tcp_tw_pcbs = pcb->next;
 801711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801711c:	68db      	ldr	r3, [r3, #12]
 801711e:	4a10      	ldr	r2, [pc, #64]	; (8017160 <tcp_slowtmr+0x674>)
 8017120:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8017122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017124:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8017126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017128:	68db      	ldr	r3, [r3, #12]
 801712a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801712c:	69f8      	ldr	r0, [r7, #28]
 801712e:	f7fe ff85 	bl	801603c <tcp_free>
 8017132:	e004      	b.n	801713e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8017134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017136:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801713a:	68db      	ldr	r3, [r3, #12]
 801713c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017140:	2b00      	cmp	r3, #0
 8017142:	d1a9      	bne.n	8017098 <tcp_slowtmr+0x5ac>
    }
  }
}
 8017144:	bf00      	nop
 8017146:	bf00      	nop
 8017148:	3730      	adds	r7, #48	; 0x30
 801714a:	46bd      	mov	sp, r7
 801714c:	bdb0      	pop	{r4, r5, r7, pc}
 801714e:	bf00      	nop
 8017150:	0802643c 	.word	0x0802643c
 8017154:	080268e8 	.word	0x080268e8
 8017158:	0802649c 	.word	0x0802649c
 801715c:	2400d250 	.word	0x2400d250
 8017160:	2400d25c 	.word	0x2400d25c
 8017164:	08026918 	.word	0x08026918
 8017168:	08026940 	.word	0x08026940

0801716c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801716c:	b580      	push	{r7, lr}
 801716e:	b082      	sub	sp, #8
 8017170:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8017172:	4b2d      	ldr	r3, [pc, #180]	; (8017228 <tcp_fasttmr+0xbc>)
 8017174:	781b      	ldrb	r3, [r3, #0]
 8017176:	3301      	adds	r3, #1
 8017178:	b2da      	uxtb	r2, r3
 801717a:	4b2b      	ldr	r3, [pc, #172]	; (8017228 <tcp_fasttmr+0xbc>)
 801717c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801717e:	4b2b      	ldr	r3, [pc, #172]	; (801722c <tcp_fasttmr+0xc0>)
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017184:	e048      	b.n	8017218 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	7f9a      	ldrb	r2, [r3, #30]
 801718a:	4b27      	ldr	r3, [pc, #156]	; (8017228 <tcp_fasttmr+0xbc>)
 801718c:	781b      	ldrb	r3, [r3, #0]
 801718e:	429a      	cmp	r2, r3
 8017190:	d03f      	beq.n	8017212 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8017192:	4b25      	ldr	r3, [pc, #148]	; (8017228 <tcp_fasttmr+0xbc>)
 8017194:	781a      	ldrb	r2, [r3, #0]
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	8b5b      	ldrh	r3, [r3, #26]
 801719e:	f003 0301 	and.w	r3, r3, #1
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d010      	beq.n	80171c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	8b5b      	ldrh	r3, [r3, #26]
 80171aa:	f043 0302 	orr.w	r3, r3, #2
 80171ae:	b29a      	uxth	r2, r3
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f003 fff1 	bl	801b19c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	8b5b      	ldrh	r3, [r3, #26]
 80171be:	f023 0303 	bic.w	r3, r3, #3
 80171c2:	b29a      	uxth	r2, r3
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	8b5b      	ldrh	r3, [r3, #26]
 80171cc:	f003 0308 	and.w	r3, r3, #8
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d009      	beq.n	80171e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	8b5b      	ldrh	r3, [r3, #26]
 80171d8:	f023 0308 	bic.w	r3, r3, #8
 80171dc:	b29a      	uxth	r2, r3
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80171e2:	6878      	ldr	r0, [r7, #4]
 80171e4:	f7ff f8be 	bl	8016364 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	68db      	ldr	r3, [r3, #12]
 80171ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d00a      	beq.n	801720c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80171f6:	4b0e      	ldr	r3, [pc, #56]	; (8017230 <tcp_fasttmr+0xc4>)
 80171f8:	2200      	movs	r2, #0
 80171fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80171fc:	6878      	ldr	r0, [r7, #4]
 80171fe:	f000 f819 	bl	8017234 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8017202:	4b0b      	ldr	r3, [pc, #44]	; (8017230 <tcp_fasttmr+0xc4>)
 8017204:	781b      	ldrb	r3, [r3, #0]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d000      	beq.n	801720c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801720a:	e7b8      	b.n	801717e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	607b      	str	r3, [r7, #4]
 8017210:	e002      	b.n	8017218 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	68db      	ldr	r3, [r3, #12]
 8017216:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d1b3      	bne.n	8017186 <tcp_fasttmr+0x1a>
    }
  }
}
 801721e:	bf00      	nop
 8017220:	bf00      	nop
 8017222:	3708      	adds	r7, #8
 8017224:	46bd      	mov	sp, r7
 8017226:	bd80      	pop	{r7, pc}
 8017228:	2400495d 	.word	0x2400495d
 801722c:	2400d24c 	.word	0x2400d24c
 8017230:	2400d248 	.word	0x2400d248

08017234 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8017234:	b590      	push	{r4, r7, lr}
 8017236:	b085      	sub	sp, #20
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d109      	bne.n	8017256 <tcp_process_refused_data+0x22>
 8017242:	4b37      	ldr	r3, [pc, #220]	; (8017320 <tcp_process_refused_data+0xec>)
 8017244:	f240 6209 	movw	r2, #1545	; 0x609
 8017248:	4936      	ldr	r1, [pc, #216]	; (8017324 <tcp_process_refused_data+0xf0>)
 801724a:	4837      	ldr	r0, [pc, #220]	; (8017328 <tcp_process_refused_data+0xf4>)
 801724c:	f00a fd66 	bl	8021d1c <iprintf>
 8017250:	f06f 030f 	mvn.w	r3, #15
 8017254:	e060      	b.n	8017318 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801725a:	7b5b      	ldrb	r3, [r3, #13]
 801725c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017262:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2200      	movs	r2, #0
 8017268:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017270:	2b00      	cmp	r3, #0
 8017272:	d00b      	beq.n	801728c <tcp_process_refused_data+0x58>
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	6918      	ldr	r0, [r3, #16]
 801727e:	2300      	movs	r3, #0
 8017280:	68ba      	ldr	r2, [r7, #8]
 8017282:	6879      	ldr	r1, [r7, #4]
 8017284:	47a0      	blx	r4
 8017286:	4603      	mov	r3, r0
 8017288:	73fb      	strb	r3, [r7, #15]
 801728a:	e007      	b.n	801729c <tcp_process_refused_data+0x68>
 801728c:	2300      	movs	r3, #0
 801728e:	68ba      	ldr	r2, [r7, #8]
 8017290:	6879      	ldr	r1, [r7, #4]
 8017292:	2000      	movs	r0, #0
 8017294:	f000 f8a4 	bl	80173e0 <tcp_recv_null>
 8017298:	4603      	mov	r3, r0
 801729a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801729c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d12a      	bne.n	80172fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80172a4:	7bbb      	ldrb	r3, [r7, #14]
 80172a6:	f003 0320 	and.w	r3, r3, #32
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d033      	beq.n	8017316 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80172b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80172b6:	d005      	beq.n	80172c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80172bc:	3301      	adds	r3, #1
 80172be:	b29a      	uxth	r2, r3
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d00b      	beq.n	80172e6 <tcp_process_refused_data+0xb2>
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6918      	ldr	r0, [r3, #16]
 80172d8:	2300      	movs	r3, #0
 80172da:	2200      	movs	r2, #0
 80172dc:	6879      	ldr	r1, [r7, #4]
 80172de:	47a0      	blx	r4
 80172e0:	4603      	mov	r3, r0
 80172e2:	73fb      	strb	r3, [r7, #15]
 80172e4:	e001      	b.n	80172ea <tcp_process_refused_data+0xb6>
 80172e6:	2300      	movs	r3, #0
 80172e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80172ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172ee:	f113 0f0d 	cmn.w	r3, #13
 80172f2:	d110      	bne.n	8017316 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80172f4:	f06f 030c 	mvn.w	r3, #12
 80172f8:	e00e      	b.n	8017318 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80172fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172fe:	f113 0f0d 	cmn.w	r3, #13
 8017302:	d102      	bne.n	801730a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8017304:	f06f 030c 	mvn.w	r3, #12
 8017308:	e006      	b.n	8017318 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	68ba      	ldr	r2, [r7, #8]
 801730e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8017310:	f06f 0304 	mvn.w	r3, #4
 8017314:	e000      	b.n	8017318 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8017316:	2300      	movs	r3, #0
}
 8017318:	4618      	mov	r0, r3
 801731a:	3714      	adds	r7, #20
 801731c:	46bd      	mov	sp, r7
 801731e:	bd90      	pop	{r4, r7, pc}
 8017320:	0802643c 	.word	0x0802643c
 8017324:	08026968 	.word	0x08026968
 8017328:	0802649c 	.word	0x0802649c

0801732c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b084      	sub	sp, #16
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017334:	e007      	b.n	8017346 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801733c:	6878      	ldr	r0, [r7, #4]
 801733e:	f000 f80a 	bl	8017356 <tcp_seg_free>
    seg = next;
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d1f4      	bne.n	8017336 <tcp_segs_free+0xa>
  }
}
 801734c:	bf00      	nop
 801734e:	bf00      	nop
 8017350:	3710      	adds	r7, #16
 8017352:	46bd      	mov	sp, r7
 8017354:	bd80      	pop	{r7, pc}

08017356 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8017356:	b580      	push	{r7, lr}
 8017358:	b082      	sub	sp, #8
 801735a:	af00      	add	r7, sp, #0
 801735c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d00c      	beq.n	801737e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	685b      	ldr	r3, [r3, #4]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d004      	beq.n	8017376 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	685b      	ldr	r3, [r3, #4]
 8017370:	4618      	mov	r0, r3
 8017372:	f7fd fcbb 	bl	8014cec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017376:	6879      	ldr	r1, [r7, #4]
 8017378:	2003      	movs	r0, #3
 801737a:	f7fc fd81 	bl	8013e80 <memp_free>
  }
}
 801737e:	bf00      	nop
 8017380:	3708      	adds	r7, #8
 8017382:	46bd      	mov	sp, r7
 8017384:	bd80      	pop	{r7, pc}
	...

08017388 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b084      	sub	sp, #16
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d106      	bne.n	80173a4 <tcp_seg_copy+0x1c>
 8017396:	4b0f      	ldr	r3, [pc, #60]	; (80173d4 <tcp_seg_copy+0x4c>)
 8017398:	f240 6282 	movw	r2, #1666	; 0x682
 801739c:	490e      	ldr	r1, [pc, #56]	; (80173d8 <tcp_seg_copy+0x50>)
 801739e:	480f      	ldr	r0, [pc, #60]	; (80173dc <tcp_seg_copy+0x54>)
 80173a0:	f00a fcbc 	bl	8021d1c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80173a4:	2003      	movs	r0, #3
 80173a6:	f7fc fcf5 	bl	8013d94 <memp_malloc>
 80173aa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d101      	bne.n	80173b6 <tcp_seg_copy+0x2e>
    return NULL;
 80173b2:	2300      	movs	r3, #0
 80173b4:	e00a      	b.n	80173cc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80173b6:	2210      	movs	r2, #16
 80173b8:	6879      	ldr	r1, [r7, #4]
 80173ba:	68f8      	ldr	r0, [r7, #12]
 80173bc:	f00a f83c 	bl	8021438 <memcpy>
  pbuf_ref(cseg->p);
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	685b      	ldr	r3, [r3, #4]
 80173c4:	4618      	mov	r0, r3
 80173c6:	f7fd fd37 	bl	8014e38 <pbuf_ref>
  return cseg;
 80173ca:	68fb      	ldr	r3, [r7, #12]
}
 80173cc:	4618      	mov	r0, r3
 80173ce:	3710      	adds	r7, #16
 80173d0:	46bd      	mov	sp, r7
 80173d2:	bd80      	pop	{r7, pc}
 80173d4:	0802643c 	.word	0x0802643c
 80173d8:	080269ac 	.word	0x080269ac
 80173dc:	0802649c 	.word	0x0802649c

080173e0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b084      	sub	sp, #16
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	60f8      	str	r0, [r7, #12]
 80173e8:	60b9      	str	r1, [r7, #8]
 80173ea:	607a      	str	r2, [r7, #4]
 80173ec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80173ee:	68bb      	ldr	r3, [r7, #8]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d109      	bne.n	8017408 <tcp_recv_null+0x28>
 80173f4:	4b12      	ldr	r3, [pc, #72]	; (8017440 <tcp_recv_null+0x60>)
 80173f6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80173fa:	4912      	ldr	r1, [pc, #72]	; (8017444 <tcp_recv_null+0x64>)
 80173fc:	4812      	ldr	r0, [pc, #72]	; (8017448 <tcp_recv_null+0x68>)
 80173fe:	f00a fc8d 	bl	8021d1c <iprintf>
 8017402:	f06f 030f 	mvn.w	r3, #15
 8017406:	e016      	b.n	8017436 <tcp_recv_null+0x56>

  if (p != NULL) {
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d009      	beq.n	8017422 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	891b      	ldrh	r3, [r3, #8]
 8017412:	4619      	mov	r1, r3
 8017414:	68b8      	ldr	r0, [r7, #8]
 8017416:	f7ff f9bb 	bl	8016790 <tcp_recved>
    pbuf_free(p);
 801741a:	6878      	ldr	r0, [r7, #4]
 801741c:	f7fd fc66 	bl	8014cec <pbuf_free>
 8017420:	e008      	b.n	8017434 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8017422:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d104      	bne.n	8017434 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801742a:	68b8      	ldr	r0, [r7, #8]
 801742c:	f7ff f804 	bl	8016438 <tcp_close>
 8017430:	4603      	mov	r3, r0
 8017432:	e000      	b.n	8017436 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8017434:	2300      	movs	r3, #0
}
 8017436:	4618      	mov	r0, r3
 8017438:	3710      	adds	r7, #16
 801743a:	46bd      	mov	sp, r7
 801743c:	bd80      	pop	{r7, pc}
 801743e:	bf00      	nop
 8017440:	0802643c 	.word	0x0802643c
 8017444:	080269c8 	.word	0x080269c8
 8017448:	0802649c 	.word	0x0802649c

0801744c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801744c:	b580      	push	{r7, lr}
 801744e:	b086      	sub	sp, #24
 8017450:	af00      	add	r7, sp, #0
 8017452:	4603      	mov	r3, r0
 8017454:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801745a:	2b00      	cmp	r3, #0
 801745c:	db01      	blt.n	8017462 <tcp_kill_prio+0x16>
 801745e:	79fb      	ldrb	r3, [r7, #7]
 8017460:	e000      	b.n	8017464 <tcp_kill_prio+0x18>
 8017462:	237f      	movs	r3, #127	; 0x7f
 8017464:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8017466:	7afb      	ldrb	r3, [r7, #11]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d034      	beq.n	80174d6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801746c:	7afb      	ldrb	r3, [r7, #11]
 801746e:	3b01      	subs	r3, #1
 8017470:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8017472:	2300      	movs	r3, #0
 8017474:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017476:	2300      	movs	r3, #0
 8017478:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801747a:	4b19      	ldr	r3, [pc, #100]	; (80174e0 <tcp_kill_prio+0x94>)
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	617b      	str	r3, [r7, #20]
 8017480:	e01f      	b.n	80174c2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8017482:	697b      	ldr	r3, [r7, #20]
 8017484:	7d5b      	ldrb	r3, [r3, #21]
 8017486:	7afa      	ldrb	r2, [r7, #11]
 8017488:	429a      	cmp	r2, r3
 801748a:	d80c      	bhi.n	80174a6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801748c:	697b      	ldr	r3, [r7, #20]
 801748e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8017490:	7afa      	ldrb	r2, [r7, #11]
 8017492:	429a      	cmp	r2, r3
 8017494:	d112      	bne.n	80174bc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017496:	4b13      	ldr	r3, [pc, #76]	; (80174e4 <tcp_kill_prio+0x98>)
 8017498:	681a      	ldr	r2, [r3, #0]
 801749a:	697b      	ldr	r3, [r7, #20]
 801749c:	6a1b      	ldr	r3, [r3, #32]
 801749e:	1ad3      	subs	r3, r2, r3
 80174a0:	68fa      	ldr	r2, [r7, #12]
 80174a2:	429a      	cmp	r2, r3
 80174a4:	d80a      	bhi.n	80174bc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80174a6:	4b0f      	ldr	r3, [pc, #60]	; (80174e4 <tcp_kill_prio+0x98>)
 80174a8:	681a      	ldr	r2, [r3, #0]
 80174aa:	697b      	ldr	r3, [r7, #20]
 80174ac:	6a1b      	ldr	r3, [r3, #32]
 80174ae:	1ad3      	subs	r3, r2, r3
 80174b0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80174b2:	697b      	ldr	r3, [r7, #20]
 80174b4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80174b6:	697b      	ldr	r3, [r7, #20]
 80174b8:	7d5b      	ldrb	r3, [r3, #21]
 80174ba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80174bc:	697b      	ldr	r3, [r7, #20]
 80174be:	68db      	ldr	r3, [r3, #12]
 80174c0:	617b      	str	r3, [r7, #20]
 80174c2:	697b      	ldr	r3, [r7, #20]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d1dc      	bne.n	8017482 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80174c8:	693b      	ldr	r3, [r7, #16]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d004      	beq.n	80174d8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80174ce:	6938      	ldr	r0, [r7, #16]
 80174d0:	f7ff f8f8 	bl	80166c4 <tcp_abort>
 80174d4:	e000      	b.n	80174d8 <tcp_kill_prio+0x8c>
    return;
 80174d6:	bf00      	nop
  }
}
 80174d8:	3718      	adds	r7, #24
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}
 80174de:	bf00      	nop
 80174e0:	2400d24c 	.word	0x2400d24c
 80174e4:	2400d250 	.word	0x2400d250

080174e8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b086      	sub	sp, #24
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	4603      	mov	r3, r0
 80174f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80174f2:	79fb      	ldrb	r3, [r7, #7]
 80174f4:	2b08      	cmp	r3, #8
 80174f6:	d009      	beq.n	801750c <tcp_kill_state+0x24>
 80174f8:	79fb      	ldrb	r3, [r7, #7]
 80174fa:	2b09      	cmp	r3, #9
 80174fc:	d006      	beq.n	801750c <tcp_kill_state+0x24>
 80174fe:	4b1a      	ldr	r3, [pc, #104]	; (8017568 <tcp_kill_state+0x80>)
 8017500:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8017504:	4919      	ldr	r1, [pc, #100]	; (801756c <tcp_kill_state+0x84>)
 8017506:	481a      	ldr	r0, [pc, #104]	; (8017570 <tcp_kill_state+0x88>)
 8017508:	f00a fc08 	bl	8021d1c <iprintf>

  inactivity = 0;
 801750c:	2300      	movs	r3, #0
 801750e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017510:	2300      	movs	r3, #0
 8017512:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017514:	4b17      	ldr	r3, [pc, #92]	; (8017574 <tcp_kill_state+0x8c>)
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	617b      	str	r3, [r7, #20]
 801751a:	e017      	b.n	801754c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801751c:	697b      	ldr	r3, [r7, #20]
 801751e:	7d1b      	ldrb	r3, [r3, #20]
 8017520:	79fa      	ldrb	r2, [r7, #7]
 8017522:	429a      	cmp	r2, r3
 8017524:	d10f      	bne.n	8017546 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017526:	4b14      	ldr	r3, [pc, #80]	; (8017578 <tcp_kill_state+0x90>)
 8017528:	681a      	ldr	r2, [r3, #0]
 801752a:	697b      	ldr	r3, [r7, #20]
 801752c:	6a1b      	ldr	r3, [r3, #32]
 801752e:	1ad3      	subs	r3, r2, r3
 8017530:	68fa      	ldr	r2, [r7, #12]
 8017532:	429a      	cmp	r2, r3
 8017534:	d807      	bhi.n	8017546 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017536:	4b10      	ldr	r3, [pc, #64]	; (8017578 <tcp_kill_state+0x90>)
 8017538:	681a      	ldr	r2, [r3, #0]
 801753a:	697b      	ldr	r3, [r7, #20]
 801753c:	6a1b      	ldr	r3, [r3, #32]
 801753e:	1ad3      	subs	r3, r2, r3
 8017540:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017542:	697b      	ldr	r3, [r7, #20]
 8017544:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017546:	697b      	ldr	r3, [r7, #20]
 8017548:	68db      	ldr	r3, [r3, #12]
 801754a:	617b      	str	r3, [r7, #20]
 801754c:	697b      	ldr	r3, [r7, #20]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d1e4      	bne.n	801751c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017552:	693b      	ldr	r3, [r7, #16]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d003      	beq.n	8017560 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017558:	2100      	movs	r1, #0
 801755a:	6938      	ldr	r0, [r7, #16]
 801755c:	f7fe fff4 	bl	8016548 <tcp_abandon>
  }
}
 8017560:	bf00      	nop
 8017562:	3718      	adds	r7, #24
 8017564:	46bd      	mov	sp, r7
 8017566:	bd80      	pop	{r7, pc}
 8017568:	0802643c 	.word	0x0802643c
 801756c:	080269e4 	.word	0x080269e4
 8017570:	0802649c 	.word	0x0802649c
 8017574:	2400d24c 	.word	0x2400d24c
 8017578:	2400d250 	.word	0x2400d250

0801757c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b084      	sub	sp, #16
 8017580:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017582:	2300      	movs	r3, #0
 8017584:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017586:	2300      	movs	r3, #0
 8017588:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801758a:	4b12      	ldr	r3, [pc, #72]	; (80175d4 <tcp_kill_timewait+0x58>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	60fb      	str	r3, [r7, #12]
 8017590:	e012      	b.n	80175b8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017592:	4b11      	ldr	r3, [pc, #68]	; (80175d8 <tcp_kill_timewait+0x5c>)
 8017594:	681a      	ldr	r2, [r3, #0]
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	6a1b      	ldr	r3, [r3, #32]
 801759a:	1ad3      	subs	r3, r2, r3
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	429a      	cmp	r2, r3
 80175a0:	d807      	bhi.n	80175b2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80175a2:	4b0d      	ldr	r3, [pc, #52]	; (80175d8 <tcp_kill_timewait+0x5c>)
 80175a4:	681a      	ldr	r2, [r3, #0]
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	6a1b      	ldr	r3, [r3, #32]
 80175aa:	1ad3      	subs	r3, r2, r3
 80175ac:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	68db      	ldr	r3, [r3, #12]
 80175b6:	60fb      	str	r3, [r7, #12]
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d1e9      	bne.n	8017592 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80175be:	68bb      	ldr	r3, [r7, #8]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d002      	beq.n	80175ca <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80175c4:	68b8      	ldr	r0, [r7, #8]
 80175c6:	f7ff f87d 	bl	80166c4 <tcp_abort>
  }
}
 80175ca:	bf00      	nop
 80175cc:	3710      	adds	r7, #16
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}
 80175d2:	bf00      	nop
 80175d4:	2400d25c 	.word	0x2400d25c
 80175d8:	2400d250 	.word	0x2400d250

080175dc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b082      	sub	sp, #8
 80175e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80175e2:	4b10      	ldr	r3, [pc, #64]	; (8017624 <tcp_handle_closepend+0x48>)
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80175e8:	e014      	b.n	8017614 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	68db      	ldr	r3, [r3, #12]
 80175ee:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	8b5b      	ldrh	r3, [r3, #26]
 80175f4:	f003 0308 	and.w	r3, r3, #8
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d009      	beq.n	8017610 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	8b5b      	ldrh	r3, [r3, #26]
 8017600:	f023 0308 	bic.w	r3, r3, #8
 8017604:	b29a      	uxth	r2, r3
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801760a:	6878      	ldr	r0, [r7, #4]
 801760c:	f7fe feaa 	bl	8016364 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	2b00      	cmp	r3, #0
 8017618:	d1e7      	bne.n	80175ea <tcp_handle_closepend+0xe>
  }
}
 801761a:	bf00      	nop
 801761c:	bf00      	nop
 801761e:	3708      	adds	r7, #8
 8017620:	46bd      	mov	sp, r7
 8017622:	bd80      	pop	{r7, pc}
 8017624:	2400d24c 	.word	0x2400d24c

08017628 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b084      	sub	sp, #16
 801762c:	af00      	add	r7, sp, #0
 801762e:	4603      	mov	r3, r0
 8017630:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017632:	2001      	movs	r0, #1
 8017634:	f7fc fbae 	bl	8013d94 <memp_malloc>
 8017638:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d126      	bne.n	801768e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017640:	f7ff ffcc 	bl	80175dc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017644:	f7ff ff9a 	bl	801757c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017648:	2001      	movs	r0, #1
 801764a:	f7fc fba3 	bl	8013d94 <memp_malloc>
 801764e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d11b      	bne.n	801768e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017656:	2009      	movs	r0, #9
 8017658:	f7ff ff46 	bl	80174e8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801765c:	2001      	movs	r0, #1
 801765e:	f7fc fb99 	bl	8013d94 <memp_malloc>
 8017662:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	2b00      	cmp	r3, #0
 8017668:	d111      	bne.n	801768e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801766a:	2008      	movs	r0, #8
 801766c:	f7ff ff3c 	bl	80174e8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017670:	2001      	movs	r0, #1
 8017672:	f7fc fb8f 	bl	8013d94 <memp_malloc>
 8017676:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d107      	bne.n	801768e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801767e:	79fb      	ldrb	r3, [r7, #7]
 8017680:	4618      	mov	r0, r3
 8017682:	f7ff fee3 	bl	801744c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017686:	2001      	movs	r0, #1
 8017688:	f7fc fb84 	bl	8013d94 <memp_malloc>
 801768c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d03f      	beq.n	8017714 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017694:	229c      	movs	r2, #156	; 0x9c
 8017696:	2100      	movs	r1, #0
 8017698:	68f8      	ldr	r0, [r7, #12]
 801769a:	f009 fef5 	bl	8021488 <memset>
    pcb->prio = prio;
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	79fa      	ldrb	r2, [r7, #7]
 80176a2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80176aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80176b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	22ff      	movs	r2, #255	; 0xff
 80176c2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80176ca:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	2206      	movs	r2, #6
 80176d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	2206      	movs	r2, #6
 80176d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80176e0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	2201      	movs	r2, #1
 80176e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80176ea:	4b0d      	ldr	r3, [pc, #52]	; (8017720 <tcp_alloc+0xf8>)
 80176ec:	681a      	ldr	r2, [r3, #0]
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80176f2:	4b0c      	ldr	r3, [pc, #48]	; (8017724 <tcp_alloc+0xfc>)
 80176f4:	781a      	ldrb	r2, [r3, #0]
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017700:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	4a08      	ldr	r2, [pc, #32]	; (8017728 <tcp_alloc+0x100>)
 8017708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	4a07      	ldr	r2, [pc, #28]	; (801772c <tcp_alloc+0x104>)
 8017710:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017714:	68fb      	ldr	r3, [r7, #12]
}
 8017716:	4618      	mov	r0, r3
 8017718:	3710      	adds	r7, #16
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}
 801771e:	bf00      	nop
 8017720:	2400d250 	.word	0x2400d250
 8017724:	2400495d 	.word	0x2400495d
 8017728:	080173e1 	.word	0x080173e1
 801772c:	006ddd00 	.word	0x006ddd00

08017730 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b084      	sub	sp, #16
 8017734:	af00      	add	r7, sp, #0
 8017736:	4603      	mov	r3, r0
 8017738:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801773a:	2040      	movs	r0, #64	; 0x40
 801773c:	f7ff ff74 	bl	8017628 <tcp_alloc>
 8017740:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017742:	68fb      	ldr	r3, [r7, #12]
}
 8017744:	4618      	mov	r0, r3
 8017746:	3710      	adds	r7, #16
 8017748:	46bd      	mov	sp, r7
 801774a:	bd80      	pop	{r7, pc}

0801774c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801774c:	b480      	push	{r7}
 801774e:	b083      	sub	sp, #12
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
 8017754:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d002      	beq.n	8017762 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	683a      	ldr	r2, [r7, #0]
 8017760:	611a      	str	r2, [r3, #16]
  }
}
 8017762:	bf00      	nop
 8017764:	370c      	adds	r7, #12
 8017766:	46bd      	mov	sp, r7
 8017768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776c:	4770      	bx	lr
	...

08017770 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017770:	b580      	push	{r7, lr}
 8017772:	b082      	sub	sp, #8
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
 8017778:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d00e      	beq.n	801779e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	7d1b      	ldrb	r3, [r3, #20]
 8017784:	2b01      	cmp	r3, #1
 8017786:	d106      	bne.n	8017796 <tcp_recv+0x26>
 8017788:	4b07      	ldr	r3, [pc, #28]	; (80177a8 <tcp_recv+0x38>)
 801778a:	f240 72df 	movw	r2, #2015	; 0x7df
 801778e:	4907      	ldr	r1, [pc, #28]	; (80177ac <tcp_recv+0x3c>)
 8017790:	4807      	ldr	r0, [pc, #28]	; (80177b0 <tcp_recv+0x40>)
 8017792:	f00a fac3 	bl	8021d1c <iprintf>
    pcb->recv = recv;
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	683a      	ldr	r2, [r7, #0]
 801779a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801779e:	bf00      	nop
 80177a0:	3708      	adds	r7, #8
 80177a2:	46bd      	mov	sp, r7
 80177a4:	bd80      	pop	{r7, pc}
 80177a6:	bf00      	nop
 80177a8:	0802643c 	.word	0x0802643c
 80177ac:	080269f4 	.word	0x080269f4
 80177b0:	0802649c 	.word	0x0802649c

080177b4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
 80177bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d00e      	beq.n	80177e2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	7d1b      	ldrb	r3, [r3, #20]
 80177c8:	2b01      	cmp	r3, #1
 80177ca:	d106      	bne.n	80177da <tcp_sent+0x26>
 80177cc:	4b07      	ldr	r3, [pc, #28]	; (80177ec <tcp_sent+0x38>)
 80177ce:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80177d2:	4907      	ldr	r1, [pc, #28]	; (80177f0 <tcp_sent+0x3c>)
 80177d4:	4807      	ldr	r0, [pc, #28]	; (80177f4 <tcp_sent+0x40>)
 80177d6:	f00a faa1 	bl	8021d1c <iprintf>
    pcb->sent = sent;
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	683a      	ldr	r2, [r7, #0]
 80177de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80177e2:	bf00      	nop
 80177e4:	3708      	adds	r7, #8
 80177e6:	46bd      	mov	sp, r7
 80177e8:	bd80      	pop	{r7, pc}
 80177ea:	bf00      	nop
 80177ec:	0802643c 	.word	0x0802643c
 80177f0:	08026a1c 	.word	0x08026a1c
 80177f4:	0802649c 	.word	0x0802649c

080177f8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
 8017800:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d00e      	beq.n	8017826 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	7d1b      	ldrb	r3, [r3, #20]
 801780c:	2b01      	cmp	r3, #1
 801780e:	d106      	bne.n	801781e <tcp_err+0x26>
 8017810:	4b07      	ldr	r3, [pc, #28]	; (8017830 <tcp_err+0x38>)
 8017812:	f640 020d 	movw	r2, #2061	; 0x80d
 8017816:	4907      	ldr	r1, [pc, #28]	; (8017834 <tcp_err+0x3c>)
 8017818:	4807      	ldr	r0, [pc, #28]	; (8017838 <tcp_err+0x40>)
 801781a:	f00a fa7f 	bl	8021d1c <iprintf>
    pcb->errf = err;
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	683a      	ldr	r2, [r7, #0]
 8017822:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8017826:	bf00      	nop
 8017828:	3708      	adds	r7, #8
 801782a:	46bd      	mov	sp, r7
 801782c:	bd80      	pop	{r7, pc}
 801782e:	bf00      	nop
 8017830:	0802643c 	.word	0x0802643c
 8017834:	08026a44 	.word	0x08026a44
 8017838:	0802649c 	.word	0x0802649c

0801783c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801783c:	b480      	push	{r7}
 801783e:	b085      	sub	sp, #20
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
 8017844:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d008      	beq.n	801785e <tcp_accept+0x22>
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	7d1b      	ldrb	r3, [r3, #20]
 8017850:	2b01      	cmp	r3, #1
 8017852:	d104      	bne.n	801785e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	683a      	ldr	r2, [r7, #0]
 801785c:	619a      	str	r2, [r3, #24]
  }
}
 801785e:	bf00      	nop
 8017860:	3714      	adds	r7, #20
 8017862:	46bd      	mov	sp, r7
 8017864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017868:	4770      	bx	lr
	...

0801786c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b084      	sub	sp, #16
 8017870:	af00      	add	r7, sp, #0
 8017872:	60f8      	str	r0, [r7, #12]
 8017874:	60b9      	str	r1, [r7, #8]
 8017876:	4613      	mov	r3, r2
 8017878:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d107      	bne.n	8017890 <tcp_poll+0x24>
 8017880:	4b0e      	ldr	r3, [pc, #56]	; (80178bc <tcp_poll+0x50>)
 8017882:	f640 023d 	movw	r2, #2109	; 0x83d
 8017886:	490e      	ldr	r1, [pc, #56]	; (80178c0 <tcp_poll+0x54>)
 8017888:	480e      	ldr	r0, [pc, #56]	; (80178c4 <tcp_poll+0x58>)
 801788a:	f00a fa47 	bl	8021d1c <iprintf>
 801788e:	e011      	b.n	80178b4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	7d1b      	ldrb	r3, [r3, #20]
 8017894:	2b01      	cmp	r3, #1
 8017896:	d106      	bne.n	80178a6 <tcp_poll+0x3a>
 8017898:	4b08      	ldr	r3, [pc, #32]	; (80178bc <tcp_poll+0x50>)
 801789a:	f640 023e 	movw	r2, #2110	; 0x83e
 801789e:	490a      	ldr	r1, [pc, #40]	; (80178c8 <tcp_poll+0x5c>)
 80178a0:	4808      	ldr	r0, [pc, #32]	; (80178c4 <tcp_poll+0x58>)
 80178a2:	f00a fa3b 	bl	8021d1c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	68ba      	ldr	r2, [r7, #8]
 80178aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	79fa      	ldrb	r2, [r7, #7]
 80178b2:	775a      	strb	r2, [r3, #29]
}
 80178b4:	3710      	adds	r7, #16
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bd80      	pop	{r7, pc}
 80178ba:	bf00      	nop
 80178bc:	0802643c 	.word	0x0802643c
 80178c0:	08026a6c 	.word	0x08026a6c
 80178c4:	0802649c 	.word	0x0802649c
 80178c8:	08026a84 	.word	0x08026a84

080178cc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b082      	sub	sp, #8
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d107      	bne.n	80178ea <tcp_pcb_purge+0x1e>
 80178da:	4b21      	ldr	r3, [pc, #132]	; (8017960 <tcp_pcb_purge+0x94>)
 80178dc:	f640 0251 	movw	r2, #2129	; 0x851
 80178e0:	4920      	ldr	r1, [pc, #128]	; (8017964 <tcp_pcb_purge+0x98>)
 80178e2:	4821      	ldr	r0, [pc, #132]	; (8017968 <tcp_pcb_purge+0x9c>)
 80178e4:	f00a fa1a 	bl	8021d1c <iprintf>
 80178e8:	e037      	b.n	801795a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	7d1b      	ldrb	r3, [r3, #20]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d033      	beq.n	801795a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80178f6:	2b0a      	cmp	r3, #10
 80178f8:	d02f      	beq.n	801795a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80178fe:	2b01      	cmp	r3, #1
 8017900:	d02b      	beq.n	801795a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017906:	2b00      	cmp	r3, #0
 8017908:	d007      	beq.n	801791a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801790e:	4618      	mov	r0, r3
 8017910:	f7fd f9ec 	bl	8014cec <pbuf_free>
      pcb->refused_data = NULL;
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	2200      	movs	r2, #0
 8017918:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801791e:	2b00      	cmp	r3, #0
 8017920:	d002      	beq.n	8017928 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017922:	6878      	ldr	r0, [r7, #4]
 8017924:	f000 f986 	bl	8017c34 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801792e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017934:	4618      	mov	r0, r3
 8017936:	f7ff fcf9 	bl	801732c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801793e:	4618      	mov	r0, r3
 8017940:	f7ff fcf4 	bl	801732c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	2200      	movs	r2, #0
 8017948:	66da      	str	r2, [r3, #108]	; 0x6c
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	2200      	movs	r2, #0
 8017956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801795a:	3708      	adds	r7, #8
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}
 8017960:	0802643c 	.word	0x0802643c
 8017964:	08026aa4 	.word	0x08026aa4
 8017968:	0802649c 	.word	0x0802649c

0801796c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b084      	sub	sp, #16
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
 8017974:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	2b00      	cmp	r3, #0
 801797a:	d106      	bne.n	801798a <tcp_pcb_remove+0x1e>
 801797c:	4b3e      	ldr	r3, [pc, #248]	; (8017a78 <tcp_pcb_remove+0x10c>)
 801797e:	f640 0283 	movw	r2, #2179	; 0x883
 8017982:	493e      	ldr	r1, [pc, #248]	; (8017a7c <tcp_pcb_remove+0x110>)
 8017984:	483e      	ldr	r0, [pc, #248]	; (8017a80 <tcp_pcb_remove+0x114>)
 8017986:	f00a f9c9 	bl	8021d1c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d106      	bne.n	801799e <tcp_pcb_remove+0x32>
 8017990:	4b39      	ldr	r3, [pc, #228]	; (8017a78 <tcp_pcb_remove+0x10c>)
 8017992:	f640 0284 	movw	r2, #2180	; 0x884
 8017996:	493b      	ldr	r1, [pc, #236]	; (8017a84 <tcp_pcb_remove+0x118>)
 8017998:	4839      	ldr	r0, [pc, #228]	; (8017a80 <tcp_pcb_remove+0x114>)
 801799a:	f00a f9bf 	bl	8021d1c <iprintf>

  TCP_RMV(pcblist, pcb);
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	683a      	ldr	r2, [r7, #0]
 80179a4:	429a      	cmp	r2, r3
 80179a6:	d105      	bne.n	80179b4 <tcp_pcb_remove+0x48>
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	68da      	ldr	r2, [r3, #12]
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	601a      	str	r2, [r3, #0]
 80179b2:	e013      	b.n	80179dc <tcp_pcb_remove+0x70>
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	60fb      	str	r3, [r7, #12]
 80179ba:	e00c      	b.n	80179d6 <tcp_pcb_remove+0x6a>
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	68db      	ldr	r3, [r3, #12]
 80179c0:	683a      	ldr	r2, [r7, #0]
 80179c2:	429a      	cmp	r2, r3
 80179c4:	d104      	bne.n	80179d0 <tcp_pcb_remove+0x64>
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	68da      	ldr	r2, [r3, #12]
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	60da      	str	r2, [r3, #12]
 80179ce:	e005      	b.n	80179dc <tcp_pcb_remove+0x70>
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	68db      	ldr	r3, [r3, #12]
 80179d4:	60fb      	str	r3, [r7, #12]
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d1ef      	bne.n	80179bc <tcp_pcb_remove+0x50>
 80179dc:	683b      	ldr	r3, [r7, #0]
 80179de:	2200      	movs	r2, #0
 80179e0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80179e2:	6838      	ldr	r0, [r7, #0]
 80179e4:	f7ff ff72 	bl	80178cc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	7d1b      	ldrb	r3, [r3, #20]
 80179ec:	2b0a      	cmp	r3, #10
 80179ee:	d013      	beq.n	8017a18 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80179f0:	683b      	ldr	r3, [r7, #0]
 80179f2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80179f4:	2b01      	cmp	r3, #1
 80179f6:	d00f      	beq.n	8017a18 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80179f8:	683b      	ldr	r3, [r7, #0]
 80179fa:	8b5b      	ldrh	r3, [r3, #26]
 80179fc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d009      	beq.n	8017a18 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017a04:	683b      	ldr	r3, [r7, #0]
 8017a06:	8b5b      	ldrh	r3, [r3, #26]
 8017a08:	f043 0302 	orr.w	r3, r3, #2
 8017a0c:	b29a      	uxth	r2, r3
 8017a0e:	683b      	ldr	r3, [r7, #0]
 8017a10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017a12:	6838      	ldr	r0, [r7, #0]
 8017a14:	f003 fbc2 	bl	801b19c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017a18:	683b      	ldr	r3, [r7, #0]
 8017a1a:	7d1b      	ldrb	r3, [r3, #20]
 8017a1c:	2b01      	cmp	r3, #1
 8017a1e:	d020      	beq.n	8017a62 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017a20:	683b      	ldr	r3, [r7, #0]
 8017a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d006      	beq.n	8017a36 <tcp_pcb_remove+0xca>
 8017a28:	4b13      	ldr	r3, [pc, #76]	; (8017a78 <tcp_pcb_remove+0x10c>)
 8017a2a:	f640 0293 	movw	r2, #2195	; 0x893
 8017a2e:	4916      	ldr	r1, [pc, #88]	; (8017a88 <tcp_pcb_remove+0x11c>)
 8017a30:	4813      	ldr	r0, [pc, #76]	; (8017a80 <tcp_pcb_remove+0x114>)
 8017a32:	f00a f973 	bl	8021d1c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017a36:	683b      	ldr	r3, [r7, #0]
 8017a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d006      	beq.n	8017a4c <tcp_pcb_remove+0xe0>
 8017a3e:	4b0e      	ldr	r3, [pc, #56]	; (8017a78 <tcp_pcb_remove+0x10c>)
 8017a40:	f640 0294 	movw	r2, #2196	; 0x894
 8017a44:	4911      	ldr	r1, [pc, #68]	; (8017a8c <tcp_pcb_remove+0x120>)
 8017a46:	480e      	ldr	r0, [pc, #56]	; (8017a80 <tcp_pcb_remove+0x114>)
 8017a48:	f00a f968 	bl	8021d1c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d006      	beq.n	8017a62 <tcp_pcb_remove+0xf6>
 8017a54:	4b08      	ldr	r3, [pc, #32]	; (8017a78 <tcp_pcb_remove+0x10c>)
 8017a56:	f640 0296 	movw	r2, #2198	; 0x896
 8017a5a:	490d      	ldr	r1, [pc, #52]	; (8017a90 <tcp_pcb_remove+0x124>)
 8017a5c:	4808      	ldr	r0, [pc, #32]	; (8017a80 <tcp_pcb_remove+0x114>)
 8017a5e:	f00a f95d 	bl	8021d1c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017a62:	683b      	ldr	r3, [r7, #0]
 8017a64:	2200      	movs	r2, #0
 8017a66:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017a68:	683b      	ldr	r3, [r7, #0]
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8017a6e:	bf00      	nop
 8017a70:	3710      	adds	r7, #16
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bd80      	pop	{r7, pc}
 8017a76:	bf00      	nop
 8017a78:	0802643c 	.word	0x0802643c
 8017a7c:	08026ac0 	.word	0x08026ac0
 8017a80:	0802649c 	.word	0x0802649c
 8017a84:	08026adc 	.word	0x08026adc
 8017a88:	08026afc 	.word	0x08026afc
 8017a8c:	08026b14 	.word	0x08026b14
 8017a90:	08026b30 	.word	0x08026b30

08017a94 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b082      	sub	sp, #8
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d106      	bne.n	8017ab0 <tcp_next_iss+0x1c>
 8017aa2:	4b0a      	ldr	r3, [pc, #40]	; (8017acc <tcp_next_iss+0x38>)
 8017aa4:	f640 02af 	movw	r2, #2223	; 0x8af
 8017aa8:	4909      	ldr	r1, [pc, #36]	; (8017ad0 <tcp_next_iss+0x3c>)
 8017aaa:	480a      	ldr	r0, [pc, #40]	; (8017ad4 <tcp_next_iss+0x40>)
 8017aac:	f00a f936 	bl	8021d1c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017ab0:	4b09      	ldr	r3, [pc, #36]	; (8017ad8 <tcp_next_iss+0x44>)
 8017ab2:	681a      	ldr	r2, [r3, #0]
 8017ab4:	4b09      	ldr	r3, [pc, #36]	; (8017adc <tcp_next_iss+0x48>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	4413      	add	r3, r2
 8017aba:	4a07      	ldr	r2, [pc, #28]	; (8017ad8 <tcp_next_iss+0x44>)
 8017abc:	6013      	str	r3, [r2, #0]
  return iss;
 8017abe:	4b06      	ldr	r3, [pc, #24]	; (8017ad8 <tcp_next_iss+0x44>)
 8017ac0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	3708      	adds	r7, #8
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	bd80      	pop	{r7, pc}
 8017aca:	bf00      	nop
 8017acc:	0802643c 	.word	0x0802643c
 8017ad0:	08026b48 	.word	0x08026b48
 8017ad4:	0802649c 	.word	0x0802649c
 8017ad8:	2400002c 	.word	0x2400002c
 8017adc:	2400d250 	.word	0x2400d250

08017ae0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b086      	sub	sp, #24
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	60b9      	str	r1, [r7, #8]
 8017aea:	607a      	str	r2, [r7, #4]
 8017aec:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d106      	bne.n	8017b02 <tcp_eff_send_mss_netif+0x22>
 8017af4:	4b14      	ldr	r3, [pc, #80]	; (8017b48 <tcp_eff_send_mss_netif+0x68>)
 8017af6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8017afa:	4914      	ldr	r1, [pc, #80]	; (8017b4c <tcp_eff_send_mss_netif+0x6c>)
 8017afc:	4814      	ldr	r0, [pc, #80]	; (8017b50 <tcp_eff_send_mss_netif+0x70>)
 8017afe:	f00a f90d 	bl	8021d1c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017b02:	68bb      	ldr	r3, [r7, #8]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d101      	bne.n	8017b0c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017b08:	89fb      	ldrh	r3, [r7, #14]
 8017b0a:	e019      	b.n	8017b40 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017b0c:	68bb      	ldr	r3, [r7, #8]
 8017b0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017b10:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017b12:	8afb      	ldrh	r3, [r7, #22]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d012      	beq.n	8017b3e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017b18:	2328      	movs	r3, #40	; 0x28
 8017b1a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017b1c:	8afa      	ldrh	r2, [r7, #22]
 8017b1e:	8abb      	ldrh	r3, [r7, #20]
 8017b20:	429a      	cmp	r2, r3
 8017b22:	d904      	bls.n	8017b2e <tcp_eff_send_mss_netif+0x4e>
 8017b24:	8afa      	ldrh	r2, [r7, #22]
 8017b26:	8abb      	ldrh	r3, [r7, #20]
 8017b28:	1ad3      	subs	r3, r2, r3
 8017b2a:	b29b      	uxth	r3, r3
 8017b2c:	e000      	b.n	8017b30 <tcp_eff_send_mss_netif+0x50>
 8017b2e:	2300      	movs	r3, #0
 8017b30:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017b32:	8a7a      	ldrh	r2, [r7, #18]
 8017b34:	89fb      	ldrh	r3, [r7, #14]
 8017b36:	4293      	cmp	r3, r2
 8017b38:	bf28      	it	cs
 8017b3a:	4613      	movcs	r3, r2
 8017b3c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017b3e:	89fb      	ldrh	r3, [r7, #14]
}
 8017b40:	4618      	mov	r0, r3
 8017b42:	3718      	adds	r7, #24
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}
 8017b48:	0802643c 	.word	0x0802643c
 8017b4c:	08026b64 	.word	0x08026b64
 8017b50:	0802649c 	.word	0x0802649c

08017b54 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b084      	sub	sp, #16
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	6078      	str	r0, [r7, #4]
 8017b5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017b5e:	683b      	ldr	r3, [r7, #0]
 8017b60:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d119      	bne.n	8017b9c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8017b68:	4b10      	ldr	r3, [pc, #64]	; (8017bac <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8017b6a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8017b6e:	4910      	ldr	r1, [pc, #64]	; (8017bb0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017b70:	4810      	ldr	r0, [pc, #64]	; (8017bb4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017b72:	f00a f8d3 	bl	8021d1c <iprintf>

  while (pcb != NULL) {
 8017b76:	e011      	b.n	8017b9c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	681a      	ldr	r2, [r3, #0]
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	429a      	cmp	r2, r3
 8017b82:	d108      	bne.n	8017b96 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	68db      	ldr	r3, [r3, #12]
 8017b88:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8017b8a:	68f8      	ldr	r0, [r7, #12]
 8017b8c:	f7fe fd9a 	bl	80166c4 <tcp_abort>
      pcb = next;
 8017b90:	68bb      	ldr	r3, [r7, #8]
 8017b92:	60fb      	str	r3, [r7, #12]
 8017b94:	e002      	b.n	8017b9c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	68db      	ldr	r3, [r3, #12]
 8017b9a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d1ea      	bne.n	8017b78 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017ba2:	bf00      	nop
 8017ba4:	bf00      	nop
 8017ba6:	3710      	adds	r7, #16
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}
 8017bac:	0802643c 	.word	0x0802643c
 8017bb0:	08026b8c 	.word	0x08026b8c
 8017bb4:	0802649c 	.word	0x0802649c

08017bb8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b084      	sub	sp, #16
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
 8017bc0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d02a      	beq.n	8017c1e <tcp_netif_ip_addr_changed+0x66>
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d026      	beq.n	8017c1e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017bd0:	4b15      	ldr	r3, [pc, #84]	; (8017c28 <tcp_netif_ip_addr_changed+0x70>)
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	4619      	mov	r1, r3
 8017bd6:	6878      	ldr	r0, [r7, #4]
 8017bd8:	f7ff ffbc 	bl	8017b54 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017bdc:	4b13      	ldr	r3, [pc, #76]	; (8017c2c <tcp_netif_ip_addr_changed+0x74>)
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	4619      	mov	r1, r3
 8017be2:	6878      	ldr	r0, [r7, #4]
 8017be4:	f7ff ffb6 	bl	8017b54 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017be8:	683b      	ldr	r3, [r7, #0]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d017      	beq.n	8017c1e <tcp_netif_ip_addr_changed+0x66>
 8017bee:	683b      	ldr	r3, [r7, #0]
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d013      	beq.n	8017c1e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017bf6:	4b0e      	ldr	r3, [pc, #56]	; (8017c30 <tcp_netif_ip_addr_changed+0x78>)
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	60fb      	str	r3, [r7, #12]
 8017bfc:	e00c      	b.n	8017c18 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	681a      	ldr	r2, [r3, #0]
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	429a      	cmp	r2, r3
 8017c08:	d103      	bne.n	8017c12 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	681a      	ldr	r2, [r3, #0]
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	68db      	ldr	r3, [r3, #12]
 8017c16:	60fb      	str	r3, [r7, #12]
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d1ef      	bne.n	8017bfe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8017c1e:	bf00      	nop
 8017c20:	3710      	adds	r7, #16
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}
 8017c26:	bf00      	nop
 8017c28:	2400d24c 	.word	0x2400d24c
 8017c2c:	2400d258 	.word	0x2400d258
 8017c30:	2400d254 	.word	0x2400d254

08017c34 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b082      	sub	sp, #8
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d007      	beq.n	8017c54 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017c48:	4618      	mov	r0, r3
 8017c4a:	f7ff fb6f 	bl	801732c <tcp_segs_free>
    pcb->ooseq = NULL;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	2200      	movs	r2, #0
 8017c52:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017c54:	bf00      	nop
 8017c56:	3708      	adds	r7, #8
 8017c58:	46bd      	mov	sp, r7
 8017c5a:	bd80      	pop	{r7, pc}

08017c5c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8017c5c:	b590      	push	{r4, r7, lr}
 8017c5e:	b08d      	sub	sp, #52	; 0x34
 8017c60:	af04      	add	r7, sp, #16
 8017c62:	6078      	str	r0, [r7, #4]
 8017c64:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d105      	bne.n	8017c78 <tcp_input+0x1c>
 8017c6c:	4b9b      	ldr	r3, [pc, #620]	; (8017edc <tcp_input+0x280>)
 8017c6e:	2283      	movs	r2, #131	; 0x83
 8017c70:	499b      	ldr	r1, [pc, #620]	; (8017ee0 <tcp_input+0x284>)
 8017c72:	489c      	ldr	r0, [pc, #624]	; (8017ee4 <tcp_input+0x288>)
 8017c74:	f00a f852 	bl	8021d1c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	685b      	ldr	r3, [r3, #4]
 8017c7c:	4a9a      	ldr	r2, [pc, #616]	; (8017ee8 <tcp_input+0x28c>)
 8017c7e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	895b      	ldrh	r3, [r3, #10]
 8017c84:	2b13      	cmp	r3, #19
 8017c86:	f240 83c4 	bls.w	8018412 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017c8a:	4b98      	ldr	r3, [pc, #608]	; (8017eec <tcp_input+0x290>)
 8017c8c:	695b      	ldr	r3, [r3, #20]
 8017c8e:	4a97      	ldr	r2, [pc, #604]	; (8017eec <tcp_input+0x290>)
 8017c90:	6812      	ldr	r2, [r2, #0]
 8017c92:	4611      	mov	r1, r2
 8017c94:	4618      	mov	r0, r3
 8017c96:	f7fa fc3b 	bl	8012510 <ip4_addr_isbroadcast_u32>
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	f040 83ba 	bne.w	8018416 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017ca2:	4b92      	ldr	r3, [pc, #584]	; (8017eec <tcp_input+0x290>)
 8017ca4:	695b      	ldr	r3, [r3, #20]
 8017ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017caa:	2be0      	cmp	r3, #224	; 0xe0
 8017cac:	f000 83b3 	beq.w	8018416 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8017cb0:	4b8d      	ldr	r3, [pc, #564]	; (8017ee8 <tcp_input+0x28c>)
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	899b      	ldrh	r3, [r3, #12]
 8017cb6:	b29b      	uxth	r3, r3
 8017cb8:	4618      	mov	r0, r3
 8017cba:	f7f8 fe9d 	bl	80109f8 <lwip_htons>
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	0b1b      	lsrs	r3, r3, #12
 8017cc2:	b29b      	uxth	r3, r3
 8017cc4:	b2db      	uxtb	r3, r3
 8017cc6:	009b      	lsls	r3, r3, #2
 8017cc8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8017cca:	7cbb      	ldrb	r3, [r7, #18]
 8017ccc:	2b13      	cmp	r3, #19
 8017cce:	f240 83a4 	bls.w	801841a <tcp_input+0x7be>
 8017cd2:	7cbb      	ldrb	r3, [r7, #18]
 8017cd4:	b29a      	uxth	r2, r3
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	891b      	ldrh	r3, [r3, #8]
 8017cda:	429a      	cmp	r2, r3
 8017cdc:	f200 839d 	bhi.w	801841a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8017ce0:	7cbb      	ldrb	r3, [r7, #18]
 8017ce2:	b29b      	uxth	r3, r3
 8017ce4:	3b14      	subs	r3, #20
 8017ce6:	b29a      	uxth	r2, r3
 8017ce8:	4b81      	ldr	r3, [pc, #516]	; (8017ef0 <tcp_input+0x294>)
 8017cea:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8017cec:	4b81      	ldr	r3, [pc, #516]	; (8017ef4 <tcp_input+0x298>)
 8017cee:	2200      	movs	r2, #0
 8017cf0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	895a      	ldrh	r2, [r3, #10]
 8017cf6:	7cbb      	ldrb	r3, [r7, #18]
 8017cf8:	b29b      	uxth	r3, r3
 8017cfa:	429a      	cmp	r2, r3
 8017cfc:	d309      	bcc.n	8017d12 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8017cfe:	4b7c      	ldr	r3, [pc, #496]	; (8017ef0 <tcp_input+0x294>)
 8017d00:	881a      	ldrh	r2, [r3, #0]
 8017d02:	4b7d      	ldr	r3, [pc, #500]	; (8017ef8 <tcp_input+0x29c>)
 8017d04:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8017d06:	7cbb      	ldrb	r3, [r7, #18]
 8017d08:	4619      	mov	r1, r3
 8017d0a:	6878      	ldr	r0, [r7, #4]
 8017d0c:	f7fc ff68 	bl	8014be0 <pbuf_remove_header>
 8017d10:	e04e      	b.n	8017db0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d105      	bne.n	8017d26 <tcp_input+0xca>
 8017d1a:	4b70      	ldr	r3, [pc, #448]	; (8017edc <tcp_input+0x280>)
 8017d1c:	22c2      	movs	r2, #194	; 0xc2
 8017d1e:	4977      	ldr	r1, [pc, #476]	; (8017efc <tcp_input+0x2a0>)
 8017d20:	4870      	ldr	r0, [pc, #448]	; (8017ee4 <tcp_input+0x288>)
 8017d22:	f009 fffb 	bl	8021d1c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8017d26:	2114      	movs	r1, #20
 8017d28:	6878      	ldr	r0, [r7, #4]
 8017d2a:	f7fc ff59 	bl	8014be0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	895a      	ldrh	r2, [r3, #10]
 8017d32:	4b71      	ldr	r3, [pc, #452]	; (8017ef8 <tcp_input+0x29c>)
 8017d34:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8017d36:	4b6e      	ldr	r3, [pc, #440]	; (8017ef0 <tcp_input+0x294>)
 8017d38:	881a      	ldrh	r2, [r3, #0]
 8017d3a:	4b6f      	ldr	r3, [pc, #444]	; (8017ef8 <tcp_input+0x29c>)
 8017d3c:	881b      	ldrh	r3, [r3, #0]
 8017d3e:	1ad3      	subs	r3, r2, r3
 8017d40:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017d42:	4b6d      	ldr	r3, [pc, #436]	; (8017ef8 <tcp_input+0x29c>)
 8017d44:	881b      	ldrh	r3, [r3, #0]
 8017d46:	4619      	mov	r1, r3
 8017d48:	6878      	ldr	r0, [r7, #4]
 8017d4a:	f7fc ff49 	bl	8014be0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	895b      	ldrh	r3, [r3, #10]
 8017d54:	8a3a      	ldrh	r2, [r7, #16]
 8017d56:	429a      	cmp	r2, r3
 8017d58:	f200 8361 	bhi.w	801841e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	685b      	ldr	r3, [r3, #4]
 8017d62:	4a64      	ldr	r2, [pc, #400]	; (8017ef4 <tcp_input+0x298>)
 8017d64:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	8a3a      	ldrh	r2, [r7, #16]
 8017d6c:	4611      	mov	r1, r2
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f7fc ff36 	bl	8014be0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	891a      	ldrh	r2, [r3, #8]
 8017d78:	8a3b      	ldrh	r3, [r7, #16]
 8017d7a:	1ad3      	subs	r3, r2, r3
 8017d7c:	b29a      	uxth	r2, r3
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	895b      	ldrh	r3, [r3, #10]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d005      	beq.n	8017d96 <tcp_input+0x13a>
 8017d8a:	4b54      	ldr	r3, [pc, #336]	; (8017edc <tcp_input+0x280>)
 8017d8c:	22df      	movs	r2, #223	; 0xdf
 8017d8e:	495c      	ldr	r1, [pc, #368]	; (8017f00 <tcp_input+0x2a4>)
 8017d90:	4854      	ldr	r0, [pc, #336]	; (8017ee4 <tcp_input+0x288>)
 8017d92:	f009 ffc3 	bl	8021d1c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	891a      	ldrh	r2, [r3, #8]
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	891b      	ldrh	r3, [r3, #8]
 8017da0:	429a      	cmp	r2, r3
 8017da2:	d005      	beq.n	8017db0 <tcp_input+0x154>
 8017da4:	4b4d      	ldr	r3, [pc, #308]	; (8017edc <tcp_input+0x280>)
 8017da6:	22e0      	movs	r2, #224	; 0xe0
 8017da8:	4956      	ldr	r1, [pc, #344]	; (8017f04 <tcp_input+0x2a8>)
 8017daa:	484e      	ldr	r0, [pc, #312]	; (8017ee4 <tcp_input+0x288>)
 8017dac:	f009 ffb6 	bl	8021d1c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017db0:	4b4d      	ldr	r3, [pc, #308]	; (8017ee8 <tcp_input+0x28c>)
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	881b      	ldrh	r3, [r3, #0]
 8017db6:	b29b      	uxth	r3, r3
 8017db8:	4a4b      	ldr	r2, [pc, #300]	; (8017ee8 <tcp_input+0x28c>)
 8017dba:	6814      	ldr	r4, [r2, #0]
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f7f8 fe1b 	bl	80109f8 <lwip_htons>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017dc6:	4b48      	ldr	r3, [pc, #288]	; (8017ee8 <tcp_input+0x28c>)
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	885b      	ldrh	r3, [r3, #2]
 8017dcc:	b29b      	uxth	r3, r3
 8017dce:	4a46      	ldr	r2, [pc, #280]	; (8017ee8 <tcp_input+0x28c>)
 8017dd0:	6814      	ldr	r4, [r2, #0]
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	f7f8 fe10 	bl	80109f8 <lwip_htons>
 8017dd8:	4603      	mov	r3, r0
 8017dda:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017ddc:	4b42      	ldr	r3, [pc, #264]	; (8017ee8 <tcp_input+0x28c>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	685b      	ldr	r3, [r3, #4]
 8017de2:	4a41      	ldr	r2, [pc, #260]	; (8017ee8 <tcp_input+0x28c>)
 8017de4:	6814      	ldr	r4, [r2, #0]
 8017de6:	4618      	mov	r0, r3
 8017de8:	f7f8 fe1b 	bl	8010a22 <lwip_htonl>
 8017dec:	4603      	mov	r3, r0
 8017dee:	6063      	str	r3, [r4, #4]
 8017df0:	6863      	ldr	r3, [r4, #4]
 8017df2:	4a45      	ldr	r2, [pc, #276]	; (8017f08 <tcp_input+0x2ac>)
 8017df4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017df6:	4b3c      	ldr	r3, [pc, #240]	; (8017ee8 <tcp_input+0x28c>)
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	689b      	ldr	r3, [r3, #8]
 8017dfc:	4a3a      	ldr	r2, [pc, #232]	; (8017ee8 <tcp_input+0x28c>)
 8017dfe:	6814      	ldr	r4, [r2, #0]
 8017e00:	4618      	mov	r0, r3
 8017e02:	f7f8 fe0e 	bl	8010a22 <lwip_htonl>
 8017e06:	4603      	mov	r3, r0
 8017e08:	60a3      	str	r3, [r4, #8]
 8017e0a:	68a3      	ldr	r3, [r4, #8]
 8017e0c:	4a3f      	ldr	r2, [pc, #252]	; (8017f0c <tcp_input+0x2b0>)
 8017e0e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017e10:	4b35      	ldr	r3, [pc, #212]	; (8017ee8 <tcp_input+0x28c>)
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	89db      	ldrh	r3, [r3, #14]
 8017e16:	b29b      	uxth	r3, r3
 8017e18:	4a33      	ldr	r2, [pc, #204]	; (8017ee8 <tcp_input+0x28c>)
 8017e1a:	6814      	ldr	r4, [r2, #0]
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f7f8 fdeb 	bl	80109f8 <lwip_htons>
 8017e22:	4603      	mov	r3, r0
 8017e24:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017e26:	4b30      	ldr	r3, [pc, #192]	; (8017ee8 <tcp_input+0x28c>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	899b      	ldrh	r3, [r3, #12]
 8017e2c:	b29b      	uxth	r3, r3
 8017e2e:	4618      	mov	r0, r3
 8017e30:	f7f8 fde2 	bl	80109f8 <lwip_htons>
 8017e34:	4603      	mov	r3, r0
 8017e36:	b2db      	uxtb	r3, r3
 8017e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017e3c:	b2da      	uxtb	r2, r3
 8017e3e:	4b34      	ldr	r3, [pc, #208]	; (8017f10 <tcp_input+0x2b4>)
 8017e40:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	891a      	ldrh	r2, [r3, #8]
 8017e46:	4b33      	ldr	r3, [pc, #204]	; (8017f14 <tcp_input+0x2b8>)
 8017e48:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017e4a:	4b31      	ldr	r3, [pc, #196]	; (8017f10 <tcp_input+0x2b4>)
 8017e4c:	781b      	ldrb	r3, [r3, #0]
 8017e4e:	f003 0303 	and.w	r3, r3, #3
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d00c      	beq.n	8017e70 <tcp_input+0x214>
    tcplen++;
 8017e56:	4b2f      	ldr	r3, [pc, #188]	; (8017f14 <tcp_input+0x2b8>)
 8017e58:	881b      	ldrh	r3, [r3, #0]
 8017e5a:	3301      	adds	r3, #1
 8017e5c:	b29a      	uxth	r2, r3
 8017e5e:	4b2d      	ldr	r3, [pc, #180]	; (8017f14 <tcp_input+0x2b8>)
 8017e60:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	891a      	ldrh	r2, [r3, #8]
 8017e66:	4b2b      	ldr	r3, [pc, #172]	; (8017f14 <tcp_input+0x2b8>)
 8017e68:	881b      	ldrh	r3, [r3, #0]
 8017e6a:	429a      	cmp	r2, r3
 8017e6c:	f200 82d9 	bhi.w	8018422 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017e70:	2300      	movs	r3, #0
 8017e72:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e74:	4b28      	ldr	r3, [pc, #160]	; (8017f18 <tcp_input+0x2bc>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	61fb      	str	r3, [r7, #28]
 8017e7a:	e09d      	b.n	8017fb8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017e7c:	69fb      	ldr	r3, [r7, #28]
 8017e7e:	7d1b      	ldrb	r3, [r3, #20]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d105      	bne.n	8017e90 <tcp_input+0x234>
 8017e84:	4b15      	ldr	r3, [pc, #84]	; (8017edc <tcp_input+0x280>)
 8017e86:	22fb      	movs	r2, #251	; 0xfb
 8017e88:	4924      	ldr	r1, [pc, #144]	; (8017f1c <tcp_input+0x2c0>)
 8017e8a:	4816      	ldr	r0, [pc, #88]	; (8017ee4 <tcp_input+0x288>)
 8017e8c:	f009 ff46 	bl	8021d1c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017e90:	69fb      	ldr	r3, [r7, #28]
 8017e92:	7d1b      	ldrb	r3, [r3, #20]
 8017e94:	2b0a      	cmp	r3, #10
 8017e96:	d105      	bne.n	8017ea4 <tcp_input+0x248>
 8017e98:	4b10      	ldr	r3, [pc, #64]	; (8017edc <tcp_input+0x280>)
 8017e9a:	22fc      	movs	r2, #252	; 0xfc
 8017e9c:	4920      	ldr	r1, [pc, #128]	; (8017f20 <tcp_input+0x2c4>)
 8017e9e:	4811      	ldr	r0, [pc, #68]	; (8017ee4 <tcp_input+0x288>)
 8017ea0:	f009 ff3c 	bl	8021d1c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017ea4:	69fb      	ldr	r3, [r7, #28]
 8017ea6:	7d1b      	ldrb	r3, [r3, #20]
 8017ea8:	2b01      	cmp	r3, #1
 8017eaa:	d105      	bne.n	8017eb8 <tcp_input+0x25c>
 8017eac:	4b0b      	ldr	r3, [pc, #44]	; (8017edc <tcp_input+0x280>)
 8017eae:	22fd      	movs	r2, #253	; 0xfd
 8017eb0:	491c      	ldr	r1, [pc, #112]	; (8017f24 <tcp_input+0x2c8>)
 8017eb2:	480c      	ldr	r0, [pc, #48]	; (8017ee4 <tcp_input+0x288>)
 8017eb4:	f009 ff32 	bl	8021d1c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017eb8:	69fb      	ldr	r3, [r7, #28]
 8017eba:	7a1b      	ldrb	r3, [r3, #8]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d033      	beq.n	8017f28 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017ec0:	69fb      	ldr	r3, [r7, #28]
 8017ec2:	7a1a      	ldrb	r2, [r3, #8]
 8017ec4:	4b09      	ldr	r3, [pc, #36]	; (8017eec <tcp_input+0x290>)
 8017ec6:	685b      	ldr	r3, [r3, #4]
 8017ec8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ecc:	3301      	adds	r3, #1
 8017ece:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017ed0:	429a      	cmp	r2, r3
 8017ed2:	d029      	beq.n	8017f28 <tcp_input+0x2cc>
      prev = pcb;
 8017ed4:	69fb      	ldr	r3, [r7, #28]
 8017ed6:	61bb      	str	r3, [r7, #24]
      continue;
 8017ed8:	e06b      	b.n	8017fb2 <tcp_input+0x356>
 8017eda:	bf00      	nop
 8017edc:	08026bc0 	.word	0x08026bc0
 8017ee0:	08026c10 	.word	0x08026c10
 8017ee4:	08026c28 	.word	0x08026c28
 8017ee8:	24004970 	.word	0x24004970
 8017eec:	2400a184 	.word	0x2400a184
 8017ef0:	24004974 	.word	0x24004974
 8017ef4:	24004978 	.word	0x24004978
 8017ef8:	24004976 	.word	0x24004976
 8017efc:	08026c50 	.word	0x08026c50
 8017f00:	08026c60 	.word	0x08026c60
 8017f04:	08026c6c 	.word	0x08026c6c
 8017f08:	24004980 	.word	0x24004980
 8017f0c:	24004984 	.word	0x24004984
 8017f10:	2400498c 	.word	0x2400498c
 8017f14:	2400498a 	.word	0x2400498a
 8017f18:	2400d24c 	.word	0x2400d24c
 8017f1c:	08026c8c 	.word	0x08026c8c
 8017f20:	08026cb4 	.word	0x08026cb4
 8017f24:	08026ce0 	.word	0x08026ce0
    }

    if (pcb->remote_port == tcphdr->src &&
 8017f28:	69fb      	ldr	r3, [r7, #28]
 8017f2a:	8b1a      	ldrh	r2, [r3, #24]
 8017f2c:	4b94      	ldr	r3, [pc, #592]	; (8018180 <tcp_input+0x524>)
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	881b      	ldrh	r3, [r3, #0]
 8017f32:	b29b      	uxth	r3, r3
 8017f34:	429a      	cmp	r2, r3
 8017f36:	d13a      	bne.n	8017fae <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8017f38:	69fb      	ldr	r3, [r7, #28]
 8017f3a:	8ada      	ldrh	r2, [r3, #22]
 8017f3c:	4b90      	ldr	r3, [pc, #576]	; (8018180 <tcp_input+0x524>)
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	885b      	ldrh	r3, [r3, #2]
 8017f42:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017f44:	429a      	cmp	r2, r3
 8017f46:	d132      	bne.n	8017fae <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017f48:	69fb      	ldr	r3, [r7, #28]
 8017f4a:	685a      	ldr	r2, [r3, #4]
 8017f4c:	4b8d      	ldr	r3, [pc, #564]	; (8018184 <tcp_input+0x528>)
 8017f4e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017f50:	429a      	cmp	r2, r3
 8017f52:	d12c      	bne.n	8017fae <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017f54:	69fb      	ldr	r3, [r7, #28]
 8017f56:	681a      	ldr	r2, [r3, #0]
 8017f58:	4b8a      	ldr	r3, [pc, #552]	; (8018184 <tcp_input+0x528>)
 8017f5a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d126      	bne.n	8017fae <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017f60:	69fb      	ldr	r3, [r7, #28]
 8017f62:	68db      	ldr	r3, [r3, #12]
 8017f64:	69fa      	ldr	r2, [r7, #28]
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d106      	bne.n	8017f78 <tcp_input+0x31c>
 8017f6a:	4b87      	ldr	r3, [pc, #540]	; (8018188 <tcp_input+0x52c>)
 8017f6c:	f240 120d 	movw	r2, #269	; 0x10d
 8017f70:	4986      	ldr	r1, [pc, #536]	; (801818c <tcp_input+0x530>)
 8017f72:	4887      	ldr	r0, [pc, #540]	; (8018190 <tcp_input+0x534>)
 8017f74:	f009 fed2 	bl	8021d1c <iprintf>
      if (prev != NULL) {
 8017f78:	69bb      	ldr	r3, [r7, #24]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d00a      	beq.n	8017f94 <tcp_input+0x338>
        prev->next = pcb->next;
 8017f7e:	69fb      	ldr	r3, [r7, #28]
 8017f80:	68da      	ldr	r2, [r3, #12]
 8017f82:	69bb      	ldr	r3, [r7, #24]
 8017f84:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017f86:	4b83      	ldr	r3, [pc, #524]	; (8018194 <tcp_input+0x538>)
 8017f88:	681a      	ldr	r2, [r3, #0]
 8017f8a:	69fb      	ldr	r3, [r7, #28]
 8017f8c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8017f8e:	4a81      	ldr	r2, [pc, #516]	; (8018194 <tcp_input+0x538>)
 8017f90:	69fb      	ldr	r3, [r7, #28]
 8017f92:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017f94:	69fb      	ldr	r3, [r7, #28]
 8017f96:	68db      	ldr	r3, [r3, #12]
 8017f98:	69fa      	ldr	r2, [r7, #28]
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	d111      	bne.n	8017fc2 <tcp_input+0x366>
 8017f9e:	4b7a      	ldr	r3, [pc, #488]	; (8018188 <tcp_input+0x52c>)
 8017fa0:	f240 1215 	movw	r2, #277	; 0x115
 8017fa4:	497c      	ldr	r1, [pc, #496]	; (8018198 <tcp_input+0x53c>)
 8017fa6:	487a      	ldr	r0, [pc, #488]	; (8018190 <tcp_input+0x534>)
 8017fa8:	f009 feb8 	bl	8021d1c <iprintf>
      break;
 8017fac:	e009      	b.n	8017fc2 <tcp_input+0x366>
    }
    prev = pcb;
 8017fae:	69fb      	ldr	r3, [r7, #28]
 8017fb0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fb2:	69fb      	ldr	r3, [r7, #28]
 8017fb4:	68db      	ldr	r3, [r3, #12]
 8017fb6:	61fb      	str	r3, [r7, #28]
 8017fb8:	69fb      	ldr	r3, [r7, #28]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	f47f af5e 	bne.w	8017e7c <tcp_input+0x220>
 8017fc0:	e000      	b.n	8017fc4 <tcp_input+0x368>
      break;
 8017fc2:	bf00      	nop
  }

  if (pcb == NULL) {
 8017fc4:	69fb      	ldr	r3, [r7, #28]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	f040 8095 	bne.w	80180f6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fcc:	4b73      	ldr	r3, [pc, #460]	; (801819c <tcp_input+0x540>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	61fb      	str	r3, [r7, #28]
 8017fd2:	e03f      	b.n	8018054 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017fd4:	69fb      	ldr	r3, [r7, #28]
 8017fd6:	7d1b      	ldrb	r3, [r3, #20]
 8017fd8:	2b0a      	cmp	r3, #10
 8017fda:	d006      	beq.n	8017fea <tcp_input+0x38e>
 8017fdc:	4b6a      	ldr	r3, [pc, #424]	; (8018188 <tcp_input+0x52c>)
 8017fde:	f240 121f 	movw	r2, #287	; 0x11f
 8017fe2:	496f      	ldr	r1, [pc, #444]	; (80181a0 <tcp_input+0x544>)
 8017fe4:	486a      	ldr	r0, [pc, #424]	; (8018190 <tcp_input+0x534>)
 8017fe6:	f009 fe99 	bl	8021d1c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017fea:	69fb      	ldr	r3, [r7, #28]
 8017fec:	7a1b      	ldrb	r3, [r3, #8]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d009      	beq.n	8018006 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017ff2:	69fb      	ldr	r3, [r7, #28]
 8017ff4:	7a1a      	ldrb	r2, [r3, #8]
 8017ff6:	4b63      	ldr	r3, [pc, #396]	; (8018184 <tcp_input+0x528>)
 8017ff8:	685b      	ldr	r3, [r3, #4]
 8017ffa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ffe:	3301      	adds	r3, #1
 8018000:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018002:	429a      	cmp	r2, r3
 8018004:	d122      	bne.n	801804c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8018006:	69fb      	ldr	r3, [r7, #28]
 8018008:	8b1a      	ldrh	r2, [r3, #24]
 801800a:	4b5d      	ldr	r3, [pc, #372]	; (8018180 <tcp_input+0x524>)
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	881b      	ldrh	r3, [r3, #0]
 8018010:	b29b      	uxth	r3, r3
 8018012:	429a      	cmp	r2, r3
 8018014:	d11b      	bne.n	801804e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8018016:	69fb      	ldr	r3, [r7, #28]
 8018018:	8ada      	ldrh	r2, [r3, #22]
 801801a:	4b59      	ldr	r3, [pc, #356]	; (8018180 <tcp_input+0x524>)
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	885b      	ldrh	r3, [r3, #2]
 8018020:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8018022:	429a      	cmp	r2, r3
 8018024:	d113      	bne.n	801804e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018026:	69fb      	ldr	r3, [r7, #28]
 8018028:	685a      	ldr	r2, [r3, #4]
 801802a:	4b56      	ldr	r3, [pc, #344]	; (8018184 <tcp_input+0x528>)
 801802c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801802e:	429a      	cmp	r2, r3
 8018030:	d10d      	bne.n	801804e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018032:	69fb      	ldr	r3, [r7, #28]
 8018034:	681a      	ldr	r2, [r3, #0]
 8018036:	4b53      	ldr	r3, [pc, #332]	; (8018184 <tcp_input+0x528>)
 8018038:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801803a:	429a      	cmp	r2, r3
 801803c:	d107      	bne.n	801804e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801803e:	69f8      	ldr	r0, [r7, #28]
 8018040:	f000 fb54 	bl	80186ec <tcp_timewait_input>
        }
        pbuf_free(p);
 8018044:	6878      	ldr	r0, [r7, #4]
 8018046:	f7fc fe51 	bl	8014cec <pbuf_free>
        return;
 801804a:	e1f0      	b.n	801842e <tcp_input+0x7d2>
        continue;
 801804c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801804e:	69fb      	ldr	r3, [r7, #28]
 8018050:	68db      	ldr	r3, [r3, #12]
 8018052:	61fb      	str	r3, [r7, #28]
 8018054:	69fb      	ldr	r3, [r7, #28]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d1bc      	bne.n	8017fd4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801805a:	2300      	movs	r3, #0
 801805c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801805e:	4b51      	ldr	r3, [pc, #324]	; (80181a4 <tcp_input+0x548>)
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	617b      	str	r3, [r7, #20]
 8018064:	e02a      	b.n	80180bc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8018066:	697b      	ldr	r3, [r7, #20]
 8018068:	7a1b      	ldrb	r3, [r3, #8]
 801806a:	2b00      	cmp	r3, #0
 801806c:	d00c      	beq.n	8018088 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801806e:	697b      	ldr	r3, [r7, #20]
 8018070:	7a1a      	ldrb	r2, [r3, #8]
 8018072:	4b44      	ldr	r3, [pc, #272]	; (8018184 <tcp_input+0x528>)
 8018074:	685b      	ldr	r3, [r3, #4]
 8018076:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801807a:	3301      	adds	r3, #1
 801807c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801807e:	429a      	cmp	r2, r3
 8018080:	d002      	beq.n	8018088 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	61bb      	str	r3, [r7, #24]
        continue;
 8018086:	e016      	b.n	80180b6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8018088:	697b      	ldr	r3, [r7, #20]
 801808a:	8ada      	ldrh	r2, [r3, #22]
 801808c:	4b3c      	ldr	r3, [pc, #240]	; (8018180 <tcp_input+0x524>)
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	885b      	ldrh	r3, [r3, #2]
 8018092:	b29b      	uxth	r3, r3
 8018094:	429a      	cmp	r2, r3
 8018096:	d10c      	bne.n	80180b2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018098:	697b      	ldr	r3, [r7, #20]
 801809a:	681a      	ldr	r2, [r3, #0]
 801809c:	4b39      	ldr	r3, [pc, #228]	; (8018184 <tcp_input+0x528>)
 801809e:	695b      	ldr	r3, [r3, #20]
 80180a0:	429a      	cmp	r2, r3
 80180a2:	d00f      	beq.n	80180c4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80180a4:	697b      	ldr	r3, [r7, #20]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d00d      	beq.n	80180c6 <tcp_input+0x46a>
 80180aa:	697b      	ldr	r3, [r7, #20]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d009      	beq.n	80180c6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80180b2:	697b      	ldr	r3, [r7, #20]
 80180b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80180b6:	697b      	ldr	r3, [r7, #20]
 80180b8:	68db      	ldr	r3, [r3, #12]
 80180ba:	617b      	str	r3, [r7, #20]
 80180bc:	697b      	ldr	r3, [r7, #20]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d1d1      	bne.n	8018066 <tcp_input+0x40a>
 80180c2:	e000      	b.n	80180c6 <tcp_input+0x46a>
            break;
 80180c4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80180c6:	697b      	ldr	r3, [r7, #20]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d014      	beq.n	80180f6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80180cc:	69bb      	ldr	r3, [r7, #24]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d00a      	beq.n	80180e8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80180d2:	697b      	ldr	r3, [r7, #20]
 80180d4:	68da      	ldr	r2, [r3, #12]
 80180d6:	69bb      	ldr	r3, [r7, #24]
 80180d8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80180da:	4b32      	ldr	r3, [pc, #200]	; (80181a4 <tcp_input+0x548>)
 80180dc:	681a      	ldr	r2, [r3, #0]
 80180de:	697b      	ldr	r3, [r7, #20]
 80180e0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80180e2:	4a30      	ldr	r2, [pc, #192]	; (80181a4 <tcp_input+0x548>)
 80180e4:	697b      	ldr	r3, [r7, #20]
 80180e6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80180e8:	6978      	ldr	r0, [r7, #20]
 80180ea:	f000 fa01 	bl	80184f0 <tcp_listen_input>
      }
      pbuf_free(p);
 80180ee:	6878      	ldr	r0, [r7, #4]
 80180f0:	f7fc fdfc 	bl	8014cec <pbuf_free>
      return;
 80180f4:	e19b      	b.n	801842e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80180f6:	69fb      	ldr	r3, [r7, #28]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	f000 8160 	beq.w	80183be <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80180fe:	4b2a      	ldr	r3, [pc, #168]	; (80181a8 <tcp_input+0x54c>)
 8018100:	2200      	movs	r2, #0
 8018102:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	891a      	ldrh	r2, [r3, #8]
 8018108:	4b27      	ldr	r3, [pc, #156]	; (80181a8 <tcp_input+0x54c>)
 801810a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801810c:	4a26      	ldr	r2, [pc, #152]	; (80181a8 <tcp_input+0x54c>)
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8018112:	4b1b      	ldr	r3, [pc, #108]	; (8018180 <tcp_input+0x524>)
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	4a24      	ldr	r2, [pc, #144]	; (80181a8 <tcp_input+0x54c>)
 8018118:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801811a:	4b24      	ldr	r3, [pc, #144]	; (80181ac <tcp_input+0x550>)
 801811c:	2200      	movs	r2, #0
 801811e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8018120:	4b23      	ldr	r3, [pc, #140]	; (80181b0 <tcp_input+0x554>)
 8018122:	2200      	movs	r2, #0
 8018124:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8018126:	4b23      	ldr	r3, [pc, #140]	; (80181b4 <tcp_input+0x558>)
 8018128:	2200      	movs	r2, #0
 801812a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801812c:	4b22      	ldr	r3, [pc, #136]	; (80181b8 <tcp_input+0x55c>)
 801812e:	781b      	ldrb	r3, [r3, #0]
 8018130:	f003 0308 	and.w	r3, r3, #8
 8018134:	2b00      	cmp	r3, #0
 8018136:	d006      	beq.n	8018146 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	7b5b      	ldrb	r3, [r3, #13]
 801813c:	f043 0301 	orr.w	r3, r3, #1
 8018140:	b2da      	uxtb	r2, r3
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8018146:	69fb      	ldr	r3, [r7, #28]
 8018148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801814a:	2b00      	cmp	r3, #0
 801814c:	d038      	beq.n	80181c0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801814e:	69f8      	ldr	r0, [r7, #28]
 8018150:	f7ff f870 	bl	8017234 <tcp_process_refused_data>
 8018154:	4603      	mov	r3, r0
 8018156:	f113 0f0d 	cmn.w	r3, #13
 801815a:	d007      	beq.n	801816c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801815c:	69fb      	ldr	r3, [r7, #28]
 801815e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018160:	2b00      	cmp	r3, #0
 8018162:	d02d      	beq.n	80181c0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018164:	4b15      	ldr	r3, [pc, #84]	; (80181bc <tcp_input+0x560>)
 8018166:	881b      	ldrh	r3, [r3, #0]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d029      	beq.n	80181c0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801816c:	69fb      	ldr	r3, [r7, #28]
 801816e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018170:	2b00      	cmp	r3, #0
 8018172:	f040 8104 	bne.w	801837e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8018176:	69f8      	ldr	r0, [r7, #28]
 8018178:	f003 fe16 	bl	801bda8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801817c:	e0ff      	b.n	801837e <tcp_input+0x722>
 801817e:	bf00      	nop
 8018180:	24004970 	.word	0x24004970
 8018184:	2400a184 	.word	0x2400a184
 8018188:	08026bc0 	.word	0x08026bc0
 801818c:	08026d08 	.word	0x08026d08
 8018190:	08026c28 	.word	0x08026c28
 8018194:	2400d24c 	.word	0x2400d24c
 8018198:	08026d34 	.word	0x08026d34
 801819c:	2400d25c 	.word	0x2400d25c
 80181a0:	08026d60 	.word	0x08026d60
 80181a4:	2400d254 	.word	0x2400d254
 80181a8:	24004960 	.word	0x24004960
 80181ac:	24004990 	.word	0x24004990
 80181b0:	2400498d 	.word	0x2400498d
 80181b4:	24004988 	.word	0x24004988
 80181b8:	2400498c 	.word	0x2400498c
 80181bc:	2400498a 	.word	0x2400498a
      }
    }
    tcp_input_pcb = pcb;
 80181c0:	4a9c      	ldr	r2, [pc, #624]	; (8018434 <tcp_input+0x7d8>)
 80181c2:	69fb      	ldr	r3, [r7, #28]
 80181c4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80181c6:	69f8      	ldr	r0, [r7, #28]
 80181c8:	f000 fb0a 	bl	80187e0 <tcp_process>
 80181cc:	4603      	mov	r3, r0
 80181ce:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80181d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80181d4:	f113 0f0d 	cmn.w	r3, #13
 80181d8:	f000 80d3 	beq.w	8018382 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80181dc:	4b96      	ldr	r3, [pc, #600]	; (8018438 <tcp_input+0x7dc>)
 80181de:	781b      	ldrb	r3, [r3, #0]
 80181e0:	f003 0308 	and.w	r3, r3, #8
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d015      	beq.n	8018214 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80181e8:	69fb      	ldr	r3, [r7, #28]
 80181ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d008      	beq.n	8018204 <tcp_input+0x5a8>
 80181f2:	69fb      	ldr	r3, [r7, #28]
 80181f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181f8:	69fa      	ldr	r2, [r7, #28]
 80181fa:	6912      	ldr	r2, [r2, #16]
 80181fc:	f06f 010d 	mvn.w	r1, #13
 8018200:	4610      	mov	r0, r2
 8018202:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018204:	69f9      	ldr	r1, [r7, #28]
 8018206:	488d      	ldr	r0, [pc, #564]	; (801843c <tcp_input+0x7e0>)
 8018208:	f7ff fbb0 	bl	801796c <tcp_pcb_remove>
        tcp_free(pcb);
 801820c:	69f8      	ldr	r0, [r7, #28]
 801820e:	f7fd ff15 	bl	801603c <tcp_free>
 8018212:	e0c1      	b.n	8018398 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8018214:	2300      	movs	r3, #0
 8018216:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8018218:	4b89      	ldr	r3, [pc, #548]	; (8018440 <tcp_input+0x7e4>)
 801821a:	881b      	ldrh	r3, [r3, #0]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d01d      	beq.n	801825c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8018220:	4b87      	ldr	r3, [pc, #540]	; (8018440 <tcp_input+0x7e4>)
 8018222:	881b      	ldrh	r3, [r3, #0]
 8018224:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8018226:	69fb      	ldr	r3, [r7, #28]
 8018228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801822c:	2b00      	cmp	r3, #0
 801822e:	d00a      	beq.n	8018246 <tcp_input+0x5ea>
 8018230:	69fb      	ldr	r3, [r7, #28]
 8018232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018236:	69fa      	ldr	r2, [r7, #28]
 8018238:	6910      	ldr	r0, [r2, #16]
 801823a:	89fa      	ldrh	r2, [r7, #14]
 801823c:	69f9      	ldr	r1, [r7, #28]
 801823e:	4798      	blx	r3
 8018240:	4603      	mov	r3, r0
 8018242:	74fb      	strb	r3, [r7, #19]
 8018244:	e001      	b.n	801824a <tcp_input+0x5ee>
 8018246:	2300      	movs	r3, #0
 8018248:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801824a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801824e:	f113 0f0d 	cmn.w	r3, #13
 8018252:	f000 8098 	beq.w	8018386 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8018256:	4b7a      	ldr	r3, [pc, #488]	; (8018440 <tcp_input+0x7e4>)
 8018258:	2200      	movs	r2, #0
 801825a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801825c:	69f8      	ldr	r0, [r7, #28]
 801825e:	f000 f907 	bl	8018470 <tcp_input_delayed_close>
 8018262:	4603      	mov	r3, r0
 8018264:	2b00      	cmp	r3, #0
 8018266:	f040 8090 	bne.w	801838a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801826a:	4b76      	ldr	r3, [pc, #472]	; (8018444 <tcp_input+0x7e8>)
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d041      	beq.n	80182f6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8018272:	69fb      	ldr	r3, [r7, #28]
 8018274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018276:	2b00      	cmp	r3, #0
 8018278:	d006      	beq.n	8018288 <tcp_input+0x62c>
 801827a:	4b73      	ldr	r3, [pc, #460]	; (8018448 <tcp_input+0x7ec>)
 801827c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8018280:	4972      	ldr	r1, [pc, #456]	; (801844c <tcp_input+0x7f0>)
 8018282:	4873      	ldr	r0, [pc, #460]	; (8018450 <tcp_input+0x7f4>)
 8018284:	f009 fd4a 	bl	8021d1c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8018288:	69fb      	ldr	r3, [r7, #28]
 801828a:	8b5b      	ldrh	r3, [r3, #26]
 801828c:	f003 0310 	and.w	r3, r3, #16
 8018290:	2b00      	cmp	r3, #0
 8018292:	d008      	beq.n	80182a6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018294:	4b6b      	ldr	r3, [pc, #428]	; (8018444 <tcp_input+0x7e8>)
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	4618      	mov	r0, r3
 801829a:	f7fc fd27 	bl	8014cec <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801829e:	69f8      	ldr	r0, [r7, #28]
 80182a0:	f7fe fa10 	bl	80166c4 <tcp_abort>
            goto aborted;
 80182a4:	e078      	b.n	8018398 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80182a6:	69fb      	ldr	r3, [r7, #28]
 80182a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d00c      	beq.n	80182ca <tcp_input+0x66e>
 80182b0:	69fb      	ldr	r3, [r7, #28]
 80182b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80182b6:	69fb      	ldr	r3, [r7, #28]
 80182b8:	6918      	ldr	r0, [r3, #16]
 80182ba:	4b62      	ldr	r3, [pc, #392]	; (8018444 <tcp_input+0x7e8>)
 80182bc:	681a      	ldr	r2, [r3, #0]
 80182be:	2300      	movs	r3, #0
 80182c0:	69f9      	ldr	r1, [r7, #28]
 80182c2:	47a0      	blx	r4
 80182c4:	4603      	mov	r3, r0
 80182c6:	74fb      	strb	r3, [r7, #19]
 80182c8:	e008      	b.n	80182dc <tcp_input+0x680>
 80182ca:	4b5e      	ldr	r3, [pc, #376]	; (8018444 <tcp_input+0x7e8>)
 80182cc:	681a      	ldr	r2, [r3, #0]
 80182ce:	2300      	movs	r3, #0
 80182d0:	69f9      	ldr	r1, [r7, #28]
 80182d2:	2000      	movs	r0, #0
 80182d4:	f7ff f884 	bl	80173e0 <tcp_recv_null>
 80182d8:	4603      	mov	r3, r0
 80182da:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80182dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80182e0:	f113 0f0d 	cmn.w	r3, #13
 80182e4:	d053      	beq.n	801838e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80182e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d003      	beq.n	80182f6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80182ee:	4b55      	ldr	r3, [pc, #340]	; (8018444 <tcp_input+0x7e8>)
 80182f0:	681a      	ldr	r2, [r3, #0]
 80182f2:	69fb      	ldr	r3, [r7, #28]
 80182f4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80182f6:	4b50      	ldr	r3, [pc, #320]	; (8018438 <tcp_input+0x7dc>)
 80182f8:	781b      	ldrb	r3, [r3, #0]
 80182fa:	f003 0320 	and.w	r3, r3, #32
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d030      	beq.n	8018364 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8018302:	69fb      	ldr	r3, [r7, #28]
 8018304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018306:	2b00      	cmp	r3, #0
 8018308:	d009      	beq.n	801831e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801830a:	69fb      	ldr	r3, [r7, #28]
 801830c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801830e:	7b5a      	ldrb	r2, [r3, #13]
 8018310:	69fb      	ldr	r3, [r7, #28]
 8018312:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018314:	f042 0220 	orr.w	r2, r2, #32
 8018318:	b2d2      	uxtb	r2, r2
 801831a:	735a      	strb	r2, [r3, #13]
 801831c:	e022      	b.n	8018364 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801831e:	69fb      	ldr	r3, [r7, #28]
 8018320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018322:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018326:	d005      	beq.n	8018334 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8018328:	69fb      	ldr	r3, [r7, #28]
 801832a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801832c:	3301      	adds	r3, #1
 801832e:	b29a      	uxth	r2, r3
 8018330:	69fb      	ldr	r3, [r7, #28]
 8018332:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8018334:	69fb      	ldr	r3, [r7, #28]
 8018336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801833a:	2b00      	cmp	r3, #0
 801833c:	d00b      	beq.n	8018356 <tcp_input+0x6fa>
 801833e:	69fb      	ldr	r3, [r7, #28]
 8018340:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018344:	69fb      	ldr	r3, [r7, #28]
 8018346:	6918      	ldr	r0, [r3, #16]
 8018348:	2300      	movs	r3, #0
 801834a:	2200      	movs	r2, #0
 801834c:	69f9      	ldr	r1, [r7, #28]
 801834e:	47a0      	blx	r4
 8018350:	4603      	mov	r3, r0
 8018352:	74fb      	strb	r3, [r7, #19]
 8018354:	e001      	b.n	801835a <tcp_input+0x6fe>
 8018356:	2300      	movs	r3, #0
 8018358:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801835a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801835e:	f113 0f0d 	cmn.w	r3, #13
 8018362:	d016      	beq.n	8018392 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8018364:	4b33      	ldr	r3, [pc, #204]	; (8018434 <tcp_input+0x7d8>)
 8018366:	2200      	movs	r2, #0
 8018368:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801836a:	69f8      	ldr	r0, [r7, #28]
 801836c:	f000 f880 	bl	8018470 <tcp_input_delayed_close>
 8018370:	4603      	mov	r3, r0
 8018372:	2b00      	cmp	r3, #0
 8018374:	d10f      	bne.n	8018396 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8018376:	69f8      	ldr	r0, [r7, #28]
 8018378:	f002 ff10 	bl	801b19c <tcp_output>
 801837c:	e00c      	b.n	8018398 <tcp_input+0x73c>
        goto aborted;
 801837e:	bf00      	nop
 8018380:	e00a      	b.n	8018398 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8018382:	bf00      	nop
 8018384:	e008      	b.n	8018398 <tcp_input+0x73c>
              goto aborted;
 8018386:	bf00      	nop
 8018388:	e006      	b.n	8018398 <tcp_input+0x73c>
          goto aborted;
 801838a:	bf00      	nop
 801838c:	e004      	b.n	8018398 <tcp_input+0x73c>
            goto aborted;
 801838e:	bf00      	nop
 8018390:	e002      	b.n	8018398 <tcp_input+0x73c>
              goto aborted;
 8018392:	bf00      	nop
 8018394:	e000      	b.n	8018398 <tcp_input+0x73c>
          goto aborted;
 8018396:	bf00      	nop
    tcp_input_pcb = NULL;
 8018398:	4b26      	ldr	r3, [pc, #152]	; (8018434 <tcp_input+0x7d8>)
 801839a:	2200      	movs	r2, #0
 801839c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801839e:	4b29      	ldr	r3, [pc, #164]	; (8018444 <tcp_input+0x7e8>)
 80183a0:	2200      	movs	r2, #0
 80183a2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80183a4:	4b2b      	ldr	r3, [pc, #172]	; (8018454 <tcp_input+0x7f8>)
 80183a6:	685b      	ldr	r3, [r3, #4]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d03f      	beq.n	801842c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80183ac:	4b29      	ldr	r3, [pc, #164]	; (8018454 <tcp_input+0x7f8>)
 80183ae:	685b      	ldr	r3, [r3, #4]
 80183b0:	4618      	mov	r0, r3
 80183b2:	f7fc fc9b 	bl	8014cec <pbuf_free>
      inseg.p = NULL;
 80183b6:	4b27      	ldr	r3, [pc, #156]	; (8018454 <tcp_input+0x7f8>)
 80183b8:	2200      	movs	r2, #0
 80183ba:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80183bc:	e036      	b.n	801842c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80183be:	4b26      	ldr	r3, [pc, #152]	; (8018458 <tcp_input+0x7fc>)
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	899b      	ldrh	r3, [r3, #12]
 80183c4:	b29b      	uxth	r3, r3
 80183c6:	4618      	mov	r0, r3
 80183c8:	f7f8 fb16 	bl	80109f8 <lwip_htons>
 80183cc:	4603      	mov	r3, r0
 80183ce:	b2db      	uxtb	r3, r3
 80183d0:	f003 0304 	and.w	r3, r3, #4
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d118      	bne.n	801840a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183d8:	4b20      	ldr	r3, [pc, #128]	; (801845c <tcp_input+0x800>)
 80183da:	6819      	ldr	r1, [r3, #0]
 80183dc:	4b20      	ldr	r3, [pc, #128]	; (8018460 <tcp_input+0x804>)
 80183de:	881b      	ldrh	r3, [r3, #0]
 80183e0:	461a      	mov	r2, r3
 80183e2:	4b20      	ldr	r3, [pc, #128]	; (8018464 <tcp_input+0x808>)
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80183e8:	4b1b      	ldr	r3, [pc, #108]	; (8018458 <tcp_input+0x7fc>)
 80183ea:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183ec:	885b      	ldrh	r3, [r3, #2]
 80183ee:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80183f0:	4a19      	ldr	r2, [pc, #100]	; (8018458 <tcp_input+0x7fc>)
 80183f2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183f4:	8812      	ldrh	r2, [r2, #0]
 80183f6:	b292      	uxth	r2, r2
 80183f8:	9202      	str	r2, [sp, #8]
 80183fa:	9301      	str	r3, [sp, #4]
 80183fc:	4b1a      	ldr	r3, [pc, #104]	; (8018468 <tcp_input+0x80c>)
 80183fe:	9300      	str	r3, [sp, #0]
 8018400:	4b1a      	ldr	r3, [pc, #104]	; (801846c <tcp_input+0x810>)
 8018402:	4602      	mov	r2, r0
 8018404:	2000      	movs	r0, #0
 8018406:	f003 fc7d 	bl	801bd04 <tcp_rst>
    pbuf_free(p);
 801840a:	6878      	ldr	r0, [r7, #4]
 801840c:	f7fc fc6e 	bl	8014cec <pbuf_free>
  return;
 8018410:	e00c      	b.n	801842c <tcp_input+0x7d0>
    goto dropped;
 8018412:	bf00      	nop
 8018414:	e006      	b.n	8018424 <tcp_input+0x7c8>
    goto dropped;
 8018416:	bf00      	nop
 8018418:	e004      	b.n	8018424 <tcp_input+0x7c8>
    goto dropped;
 801841a:	bf00      	nop
 801841c:	e002      	b.n	8018424 <tcp_input+0x7c8>
      goto dropped;
 801841e:	bf00      	nop
 8018420:	e000      	b.n	8018424 <tcp_input+0x7c8>
      goto dropped;
 8018422:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8018424:	6878      	ldr	r0, [r7, #4]
 8018426:	f7fc fc61 	bl	8014cec <pbuf_free>
 801842a:	e000      	b.n	801842e <tcp_input+0x7d2>
  return;
 801842c:	bf00      	nop
}
 801842e:	3724      	adds	r7, #36	; 0x24
 8018430:	46bd      	mov	sp, r7
 8018432:	bd90      	pop	{r4, r7, pc}
 8018434:	2400d260 	.word	0x2400d260
 8018438:	2400498d 	.word	0x2400498d
 801843c:	2400d24c 	.word	0x2400d24c
 8018440:	24004988 	.word	0x24004988
 8018444:	24004990 	.word	0x24004990
 8018448:	08026bc0 	.word	0x08026bc0
 801844c:	08026d90 	.word	0x08026d90
 8018450:	08026c28 	.word	0x08026c28
 8018454:	24004960 	.word	0x24004960
 8018458:	24004970 	.word	0x24004970
 801845c:	24004984 	.word	0x24004984
 8018460:	2400498a 	.word	0x2400498a
 8018464:	24004980 	.word	0x24004980
 8018468:	2400a194 	.word	0x2400a194
 801846c:	2400a198 	.word	0x2400a198

08018470 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018470:	b580      	push	{r7, lr}
 8018472:	b082      	sub	sp, #8
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d106      	bne.n	801848c <tcp_input_delayed_close+0x1c>
 801847e:	4b17      	ldr	r3, [pc, #92]	; (80184dc <tcp_input_delayed_close+0x6c>)
 8018480:	f240 225a 	movw	r2, #602	; 0x25a
 8018484:	4916      	ldr	r1, [pc, #88]	; (80184e0 <tcp_input_delayed_close+0x70>)
 8018486:	4817      	ldr	r0, [pc, #92]	; (80184e4 <tcp_input_delayed_close+0x74>)
 8018488:	f009 fc48 	bl	8021d1c <iprintf>

  if (recv_flags & TF_CLOSED) {
 801848c:	4b16      	ldr	r3, [pc, #88]	; (80184e8 <tcp_input_delayed_close+0x78>)
 801848e:	781b      	ldrb	r3, [r3, #0]
 8018490:	f003 0310 	and.w	r3, r3, #16
 8018494:	2b00      	cmp	r3, #0
 8018496:	d01c      	beq.n	80184d2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	8b5b      	ldrh	r3, [r3, #26]
 801849c:	f003 0310 	and.w	r3, r3, #16
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d10d      	bne.n	80184c0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d008      	beq.n	80184c0 <tcp_input_delayed_close+0x50>
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80184b4:	687a      	ldr	r2, [r7, #4]
 80184b6:	6912      	ldr	r2, [r2, #16]
 80184b8:	f06f 010e 	mvn.w	r1, #14
 80184bc:	4610      	mov	r0, r2
 80184be:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80184c0:	6879      	ldr	r1, [r7, #4]
 80184c2:	480a      	ldr	r0, [pc, #40]	; (80184ec <tcp_input_delayed_close+0x7c>)
 80184c4:	f7ff fa52 	bl	801796c <tcp_pcb_remove>
    tcp_free(pcb);
 80184c8:	6878      	ldr	r0, [r7, #4]
 80184ca:	f7fd fdb7 	bl	801603c <tcp_free>
    return 1;
 80184ce:	2301      	movs	r3, #1
 80184d0:	e000      	b.n	80184d4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80184d2:	2300      	movs	r3, #0
}
 80184d4:	4618      	mov	r0, r3
 80184d6:	3708      	adds	r7, #8
 80184d8:	46bd      	mov	sp, r7
 80184da:	bd80      	pop	{r7, pc}
 80184dc:	08026bc0 	.word	0x08026bc0
 80184e0:	08026dac 	.word	0x08026dac
 80184e4:	08026c28 	.word	0x08026c28
 80184e8:	2400498d 	.word	0x2400498d
 80184ec:	2400d24c 	.word	0x2400d24c

080184f0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80184f0:	b590      	push	{r4, r7, lr}
 80184f2:	b08b      	sub	sp, #44	; 0x2c
 80184f4:	af04      	add	r7, sp, #16
 80184f6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80184f8:	4b6f      	ldr	r3, [pc, #444]	; (80186b8 <tcp_listen_input+0x1c8>)
 80184fa:	781b      	ldrb	r3, [r3, #0]
 80184fc:	f003 0304 	and.w	r3, r3, #4
 8018500:	2b00      	cmp	r3, #0
 8018502:	f040 80d2 	bne.w	80186aa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d106      	bne.n	801851a <tcp_listen_input+0x2a>
 801850c:	4b6b      	ldr	r3, [pc, #428]	; (80186bc <tcp_listen_input+0x1cc>)
 801850e:	f240 2281 	movw	r2, #641	; 0x281
 8018512:	496b      	ldr	r1, [pc, #428]	; (80186c0 <tcp_listen_input+0x1d0>)
 8018514:	486b      	ldr	r0, [pc, #428]	; (80186c4 <tcp_listen_input+0x1d4>)
 8018516:	f009 fc01 	bl	8021d1c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801851a:	4b67      	ldr	r3, [pc, #412]	; (80186b8 <tcp_listen_input+0x1c8>)
 801851c:	781b      	ldrb	r3, [r3, #0]
 801851e:	f003 0310 	and.w	r3, r3, #16
 8018522:	2b00      	cmp	r3, #0
 8018524:	d019      	beq.n	801855a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018526:	4b68      	ldr	r3, [pc, #416]	; (80186c8 <tcp_listen_input+0x1d8>)
 8018528:	6819      	ldr	r1, [r3, #0]
 801852a:	4b68      	ldr	r3, [pc, #416]	; (80186cc <tcp_listen_input+0x1dc>)
 801852c:	881b      	ldrh	r3, [r3, #0]
 801852e:	461a      	mov	r2, r3
 8018530:	4b67      	ldr	r3, [pc, #412]	; (80186d0 <tcp_listen_input+0x1e0>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018536:	4b67      	ldr	r3, [pc, #412]	; (80186d4 <tcp_listen_input+0x1e4>)
 8018538:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801853a:	885b      	ldrh	r3, [r3, #2]
 801853c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801853e:	4a65      	ldr	r2, [pc, #404]	; (80186d4 <tcp_listen_input+0x1e4>)
 8018540:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018542:	8812      	ldrh	r2, [r2, #0]
 8018544:	b292      	uxth	r2, r2
 8018546:	9202      	str	r2, [sp, #8]
 8018548:	9301      	str	r3, [sp, #4]
 801854a:	4b63      	ldr	r3, [pc, #396]	; (80186d8 <tcp_listen_input+0x1e8>)
 801854c:	9300      	str	r3, [sp, #0]
 801854e:	4b63      	ldr	r3, [pc, #396]	; (80186dc <tcp_listen_input+0x1ec>)
 8018550:	4602      	mov	r2, r0
 8018552:	6878      	ldr	r0, [r7, #4]
 8018554:	f003 fbd6 	bl	801bd04 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8018558:	e0a9      	b.n	80186ae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801855a:	4b57      	ldr	r3, [pc, #348]	; (80186b8 <tcp_listen_input+0x1c8>)
 801855c:	781b      	ldrb	r3, [r3, #0]
 801855e:	f003 0302 	and.w	r3, r3, #2
 8018562:	2b00      	cmp	r3, #0
 8018564:	f000 80a3 	beq.w	80186ae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	7d5b      	ldrb	r3, [r3, #21]
 801856c:	4618      	mov	r0, r3
 801856e:	f7ff f85b 	bl	8017628 <tcp_alloc>
 8018572:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018574:	697b      	ldr	r3, [r7, #20]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d111      	bne.n	801859e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	699b      	ldr	r3, [r3, #24]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d00a      	beq.n	8018598 <tcp_listen_input+0xa8>
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	699b      	ldr	r3, [r3, #24]
 8018586:	687a      	ldr	r2, [r7, #4]
 8018588:	6910      	ldr	r0, [r2, #16]
 801858a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801858e:	2100      	movs	r1, #0
 8018590:	4798      	blx	r3
 8018592:	4603      	mov	r3, r0
 8018594:	73bb      	strb	r3, [r7, #14]
      return;
 8018596:	e08b      	b.n	80186b0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018598:	23f0      	movs	r3, #240	; 0xf0
 801859a:	73bb      	strb	r3, [r7, #14]
      return;
 801859c:	e088      	b.n	80186b0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801859e:	4b50      	ldr	r3, [pc, #320]	; (80186e0 <tcp_listen_input+0x1f0>)
 80185a0:	695a      	ldr	r2, [r3, #20]
 80185a2:	697b      	ldr	r3, [r7, #20]
 80185a4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80185a6:	4b4e      	ldr	r3, [pc, #312]	; (80186e0 <tcp_listen_input+0x1f0>)
 80185a8:	691a      	ldr	r2, [r3, #16]
 80185aa:	697b      	ldr	r3, [r7, #20]
 80185ac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	8ada      	ldrh	r2, [r3, #22]
 80185b2:	697b      	ldr	r3, [r7, #20]
 80185b4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80185b6:	4b47      	ldr	r3, [pc, #284]	; (80186d4 <tcp_listen_input+0x1e4>)
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	881b      	ldrh	r3, [r3, #0]
 80185bc:	b29a      	uxth	r2, r3
 80185be:	697b      	ldr	r3, [r7, #20]
 80185c0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80185c2:	697b      	ldr	r3, [r7, #20]
 80185c4:	2203      	movs	r2, #3
 80185c6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80185c8:	4b41      	ldr	r3, [pc, #260]	; (80186d0 <tcp_listen_input+0x1e0>)
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	1c5a      	adds	r2, r3, #1
 80185ce:	697b      	ldr	r3, [r7, #20]
 80185d0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80185d2:	697b      	ldr	r3, [r7, #20]
 80185d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80185d6:	697b      	ldr	r3, [r7, #20]
 80185d8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80185da:	6978      	ldr	r0, [r7, #20]
 80185dc:	f7ff fa5a 	bl	8017a94 <tcp_next_iss>
 80185e0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80185e2:	697b      	ldr	r3, [r7, #20]
 80185e4:	693a      	ldr	r2, [r7, #16]
 80185e6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80185e8:	697b      	ldr	r3, [r7, #20]
 80185ea:	693a      	ldr	r2, [r7, #16]
 80185ec:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80185ee:	697b      	ldr	r3, [r7, #20]
 80185f0:	693a      	ldr	r2, [r7, #16]
 80185f2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80185f4:	697b      	ldr	r3, [r7, #20]
 80185f6:	693a      	ldr	r2, [r7, #16]
 80185f8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80185fa:	4b35      	ldr	r3, [pc, #212]	; (80186d0 <tcp_listen_input+0x1e0>)
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	1e5a      	subs	r2, r3, #1
 8018600:	697b      	ldr	r3, [r7, #20]
 8018602:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	691a      	ldr	r2, [r3, #16]
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801860c:	697b      	ldr	r3, [r7, #20]
 801860e:	687a      	ldr	r2, [r7, #4]
 8018610:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	7a5b      	ldrb	r3, [r3, #9]
 8018616:	f003 030c 	and.w	r3, r3, #12
 801861a:	b2da      	uxtb	r2, r3
 801861c:	697b      	ldr	r3, [r7, #20]
 801861e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	7a1a      	ldrb	r2, [r3, #8]
 8018624:	697b      	ldr	r3, [r7, #20]
 8018626:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018628:	4b2e      	ldr	r3, [pc, #184]	; (80186e4 <tcp_listen_input+0x1f4>)
 801862a:	681a      	ldr	r2, [r3, #0]
 801862c:	697b      	ldr	r3, [r7, #20]
 801862e:	60da      	str	r2, [r3, #12]
 8018630:	4a2c      	ldr	r2, [pc, #176]	; (80186e4 <tcp_listen_input+0x1f4>)
 8018632:	697b      	ldr	r3, [r7, #20]
 8018634:	6013      	str	r3, [r2, #0]
 8018636:	f003 fedf 	bl	801c3f8 <tcp_timer_needed>
 801863a:	4b2b      	ldr	r3, [pc, #172]	; (80186e8 <tcp_listen_input+0x1f8>)
 801863c:	2201      	movs	r2, #1
 801863e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018640:	6978      	ldr	r0, [r7, #20]
 8018642:	f001 fd8d 	bl	801a160 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018646:	4b23      	ldr	r3, [pc, #140]	; (80186d4 <tcp_listen_input+0x1e4>)
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	89db      	ldrh	r3, [r3, #14]
 801864c:	b29a      	uxth	r2, r3
 801864e:	697b      	ldr	r3, [r7, #20]
 8018650:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018654:	697b      	ldr	r3, [r7, #20]
 8018656:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801865a:	697b      	ldr	r3, [r7, #20]
 801865c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018660:	697b      	ldr	r3, [r7, #20]
 8018662:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018664:	697b      	ldr	r3, [r7, #20]
 8018666:	3304      	adds	r3, #4
 8018668:	4618      	mov	r0, r3
 801866a:	f7f9 fcbb 	bl	8011fe4 <ip4_route>
 801866e:	4601      	mov	r1, r0
 8018670:	697b      	ldr	r3, [r7, #20]
 8018672:	3304      	adds	r3, #4
 8018674:	461a      	mov	r2, r3
 8018676:	4620      	mov	r0, r4
 8018678:	f7ff fa32 	bl	8017ae0 <tcp_eff_send_mss_netif>
 801867c:	4603      	mov	r3, r0
 801867e:	461a      	mov	r2, r3
 8018680:	697b      	ldr	r3, [r7, #20]
 8018682:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018684:	2112      	movs	r1, #18
 8018686:	6978      	ldr	r0, [r7, #20]
 8018688:	f002 fc9a 	bl	801afc0 <tcp_enqueue_flags>
 801868c:	4603      	mov	r3, r0
 801868e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d004      	beq.n	80186a2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8018698:	2100      	movs	r1, #0
 801869a:	6978      	ldr	r0, [r7, #20]
 801869c:	f7fd ff54 	bl	8016548 <tcp_abandon>
      return;
 80186a0:	e006      	b.n	80186b0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80186a2:	6978      	ldr	r0, [r7, #20]
 80186a4:	f002 fd7a 	bl	801b19c <tcp_output>
  return;
 80186a8:	e001      	b.n	80186ae <tcp_listen_input+0x1be>
    return;
 80186aa:	bf00      	nop
 80186ac:	e000      	b.n	80186b0 <tcp_listen_input+0x1c0>
  return;
 80186ae:	bf00      	nop
}
 80186b0:	371c      	adds	r7, #28
 80186b2:	46bd      	mov	sp, r7
 80186b4:	bd90      	pop	{r4, r7, pc}
 80186b6:	bf00      	nop
 80186b8:	2400498c 	.word	0x2400498c
 80186bc:	08026bc0 	.word	0x08026bc0
 80186c0:	08026dd4 	.word	0x08026dd4
 80186c4:	08026c28 	.word	0x08026c28
 80186c8:	24004984 	.word	0x24004984
 80186cc:	2400498a 	.word	0x2400498a
 80186d0:	24004980 	.word	0x24004980
 80186d4:	24004970 	.word	0x24004970
 80186d8:	2400a194 	.word	0x2400a194
 80186dc:	2400a198 	.word	0x2400a198
 80186e0:	2400a184 	.word	0x2400a184
 80186e4:	2400d24c 	.word	0x2400d24c
 80186e8:	2400d248 	.word	0x2400d248

080186ec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b086      	sub	sp, #24
 80186f0:	af04      	add	r7, sp, #16
 80186f2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80186f4:	4b2f      	ldr	r3, [pc, #188]	; (80187b4 <tcp_timewait_input+0xc8>)
 80186f6:	781b      	ldrb	r3, [r3, #0]
 80186f8:	f003 0304 	and.w	r3, r3, #4
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d153      	bne.n	80187a8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	2b00      	cmp	r3, #0
 8018704:	d106      	bne.n	8018714 <tcp_timewait_input+0x28>
 8018706:	4b2c      	ldr	r3, [pc, #176]	; (80187b8 <tcp_timewait_input+0xcc>)
 8018708:	f240 22ee 	movw	r2, #750	; 0x2ee
 801870c:	492b      	ldr	r1, [pc, #172]	; (80187bc <tcp_timewait_input+0xd0>)
 801870e:	482c      	ldr	r0, [pc, #176]	; (80187c0 <tcp_timewait_input+0xd4>)
 8018710:	f009 fb04 	bl	8021d1c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018714:	4b27      	ldr	r3, [pc, #156]	; (80187b4 <tcp_timewait_input+0xc8>)
 8018716:	781b      	ldrb	r3, [r3, #0]
 8018718:	f003 0302 	and.w	r3, r3, #2
 801871c:	2b00      	cmp	r3, #0
 801871e:	d02a      	beq.n	8018776 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018720:	4b28      	ldr	r3, [pc, #160]	; (80187c4 <tcp_timewait_input+0xd8>)
 8018722:	681a      	ldr	r2, [r3, #0]
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018728:	1ad3      	subs	r3, r2, r3
 801872a:	2b00      	cmp	r3, #0
 801872c:	db2d      	blt.n	801878a <tcp_timewait_input+0x9e>
 801872e:	4b25      	ldr	r3, [pc, #148]	; (80187c4 <tcp_timewait_input+0xd8>)
 8018730:	681a      	ldr	r2, [r3, #0]
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018736:	6879      	ldr	r1, [r7, #4]
 8018738:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801873a:	440b      	add	r3, r1
 801873c:	1ad3      	subs	r3, r2, r3
 801873e:	2b00      	cmp	r3, #0
 8018740:	dc23      	bgt.n	801878a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018742:	4b21      	ldr	r3, [pc, #132]	; (80187c8 <tcp_timewait_input+0xdc>)
 8018744:	6819      	ldr	r1, [r3, #0]
 8018746:	4b21      	ldr	r3, [pc, #132]	; (80187cc <tcp_timewait_input+0xe0>)
 8018748:	881b      	ldrh	r3, [r3, #0]
 801874a:	461a      	mov	r2, r3
 801874c:	4b1d      	ldr	r3, [pc, #116]	; (80187c4 <tcp_timewait_input+0xd8>)
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018752:	4b1f      	ldr	r3, [pc, #124]	; (80187d0 <tcp_timewait_input+0xe4>)
 8018754:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018756:	885b      	ldrh	r3, [r3, #2]
 8018758:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801875a:	4a1d      	ldr	r2, [pc, #116]	; (80187d0 <tcp_timewait_input+0xe4>)
 801875c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801875e:	8812      	ldrh	r2, [r2, #0]
 8018760:	b292      	uxth	r2, r2
 8018762:	9202      	str	r2, [sp, #8]
 8018764:	9301      	str	r3, [sp, #4]
 8018766:	4b1b      	ldr	r3, [pc, #108]	; (80187d4 <tcp_timewait_input+0xe8>)
 8018768:	9300      	str	r3, [sp, #0]
 801876a:	4b1b      	ldr	r3, [pc, #108]	; (80187d8 <tcp_timewait_input+0xec>)
 801876c:	4602      	mov	r2, r0
 801876e:	6878      	ldr	r0, [r7, #4]
 8018770:	f003 fac8 	bl	801bd04 <tcp_rst>
      return;
 8018774:	e01b      	b.n	80187ae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8018776:	4b0f      	ldr	r3, [pc, #60]	; (80187b4 <tcp_timewait_input+0xc8>)
 8018778:	781b      	ldrb	r3, [r3, #0]
 801877a:	f003 0301 	and.w	r3, r3, #1
 801877e:	2b00      	cmp	r3, #0
 8018780:	d003      	beq.n	801878a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018782:	4b16      	ldr	r3, [pc, #88]	; (80187dc <tcp_timewait_input+0xf0>)
 8018784:	681a      	ldr	r2, [r3, #0]
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801878a:	4b10      	ldr	r3, [pc, #64]	; (80187cc <tcp_timewait_input+0xe0>)
 801878c:	881b      	ldrh	r3, [r3, #0]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d00c      	beq.n	80187ac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	8b5b      	ldrh	r3, [r3, #26]
 8018796:	f043 0302 	orr.w	r3, r3, #2
 801879a:	b29a      	uxth	r2, r3
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80187a0:	6878      	ldr	r0, [r7, #4]
 80187a2:	f002 fcfb 	bl	801b19c <tcp_output>
  }
  return;
 80187a6:	e001      	b.n	80187ac <tcp_timewait_input+0xc0>
    return;
 80187a8:	bf00      	nop
 80187aa:	e000      	b.n	80187ae <tcp_timewait_input+0xc2>
  return;
 80187ac:	bf00      	nop
}
 80187ae:	3708      	adds	r7, #8
 80187b0:	46bd      	mov	sp, r7
 80187b2:	bd80      	pop	{r7, pc}
 80187b4:	2400498c 	.word	0x2400498c
 80187b8:	08026bc0 	.word	0x08026bc0
 80187bc:	08026df4 	.word	0x08026df4
 80187c0:	08026c28 	.word	0x08026c28
 80187c4:	24004980 	.word	0x24004980
 80187c8:	24004984 	.word	0x24004984
 80187cc:	2400498a 	.word	0x2400498a
 80187d0:	24004970 	.word	0x24004970
 80187d4:	2400a194 	.word	0x2400a194
 80187d8:	2400a198 	.word	0x2400a198
 80187dc:	2400d250 	.word	0x2400d250

080187e0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80187e0:	b590      	push	{r4, r7, lr}
 80187e2:	b08d      	sub	sp, #52	; 0x34
 80187e4:	af04      	add	r7, sp, #16
 80187e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80187e8:	2300      	movs	r3, #0
 80187ea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80187ec:	2300      	movs	r3, #0
 80187ee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d106      	bne.n	8018804 <tcp_process+0x24>
 80187f6:	4ba5      	ldr	r3, [pc, #660]	; (8018a8c <tcp_process+0x2ac>)
 80187f8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80187fc:	49a4      	ldr	r1, [pc, #656]	; (8018a90 <tcp_process+0x2b0>)
 80187fe:	48a5      	ldr	r0, [pc, #660]	; (8018a94 <tcp_process+0x2b4>)
 8018800:	f009 fa8c 	bl	8021d1c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018804:	4ba4      	ldr	r3, [pc, #656]	; (8018a98 <tcp_process+0x2b8>)
 8018806:	781b      	ldrb	r3, [r3, #0]
 8018808:	f003 0304 	and.w	r3, r3, #4
 801880c:	2b00      	cmp	r3, #0
 801880e:	d04e      	beq.n	80188ae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	7d1b      	ldrb	r3, [r3, #20]
 8018814:	2b02      	cmp	r3, #2
 8018816:	d108      	bne.n	801882a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801881c:	4b9f      	ldr	r3, [pc, #636]	; (8018a9c <tcp_process+0x2bc>)
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	429a      	cmp	r2, r3
 8018822:	d123      	bne.n	801886c <tcp_process+0x8c>
        acceptable = 1;
 8018824:	2301      	movs	r3, #1
 8018826:	76fb      	strb	r3, [r7, #27]
 8018828:	e020      	b.n	801886c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801882e:	4b9c      	ldr	r3, [pc, #624]	; (8018aa0 <tcp_process+0x2c0>)
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	429a      	cmp	r2, r3
 8018834:	d102      	bne.n	801883c <tcp_process+0x5c>
        acceptable = 1;
 8018836:	2301      	movs	r3, #1
 8018838:	76fb      	strb	r3, [r7, #27]
 801883a:	e017      	b.n	801886c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801883c:	4b98      	ldr	r3, [pc, #608]	; (8018aa0 <tcp_process+0x2c0>)
 801883e:	681a      	ldr	r2, [r3, #0]
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018844:	1ad3      	subs	r3, r2, r3
 8018846:	2b00      	cmp	r3, #0
 8018848:	db10      	blt.n	801886c <tcp_process+0x8c>
 801884a:	4b95      	ldr	r3, [pc, #596]	; (8018aa0 <tcp_process+0x2c0>)
 801884c:	681a      	ldr	r2, [r3, #0]
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018852:	6879      	ldr	r1, [r7, #4]
 8018854:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018856:	440b      	add	r3, r1
 8018858:	1ad3      	subs	r3, r2, r3
 801885a:	2b00      	cmp	r3, #0
 801885c:	dc06      	bgt.n	801886c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	8b5b      	ldrh	r3, [r3, #26]
 8018862:	f043 0302 	orr.w	r3, r3, #2
 8018866:	b29a      	uxth	r2, r3
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801886c:	7efb      	ldrb	r3, [r7, #27]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d01b      	beq.n	80188aa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	7d1b      	ldrb	r3, [r3, #20]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d106      	bne.n	8018888 <tcp_process+0xa8>
 801887a:	4b84      	ldr	r3, [pc, #528]	; (8018a8c <tcp_process+0x2ac>)
 801887c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018880:	4988      	ldr	r1, [pc, #544]	; (8018aa4 <tcp_process+0x2c4>)
 8018882:	4884      	ldr	r0, [pc, #528]	; (8018a94 <tcp_process+0x2b4>)
 8018884:	f009 fa4a 	bl	8021d1c <iprintf>
      recv_flags |= TF_RESET;
 8018888:	4b87      	ldr	r3, [pc, #540]	; (8018aa8 <tcp_process+0x2c8>)
 801888a:	781b      	ldrb	r3, [r3, #0]
 801888c:	f043 0308 	orr.w	r3, r3, #8
 8018890:	b2da      	uxtb	r2, r3
 8018892:	4b85      	ldr	r3, [pc, #532]	; (8018aa8 <tcp_process+0x2c8>)
 8018894:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	8b5b      	ldrh	r3, [r3, #26]
 801889a:	f023 0301 	bic.w	r3, r3, #1
 801889e:	b29a      	uxth	r2, r3
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80188a4:	f06f 030d 	mvn.w	r3, #13
 80188a8:	e37a      	b.n	8018fa0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80188aa:	2300      	movs	r3, #0
 80188ac:	e378      	b.n	8018fa0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80188ae:	4b7a      	ldr	r3, [pc, #488]	; (8018a98 <tcp_process+0x2b8>)
 80188b0:	781b      	ldrb	r3, [r3, #0]
 80188b2:	f003 0302 	and.w	r3, r3, #2
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d010      	beq.n	80188dc <tcp_process+0xfc>
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	7d1b      	ldrb	r3, [r3, #20]
 80188be:	2b02      	cmp	r3, #2
 80188c0:	d00c      	beq.n	80188dc <tcp_process+0xfc>
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	7d1b      	ldrb	r3, [r3, #20]
 80188c6:	2b03      	cmp	r3, #3
 80188c8:	d008      	beq.n	80188dc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	8b5b      	ldrh	r3, [r3, #26]
 80188ce:	f043 0302 	orr.w	r3, r3, #2
 80188d2:	b29a      	uxth	r2, r3
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80188d8:	2300      	movs	r3, #0
 80188da:	e361      	b.n	8018fa0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	8b5b      	ldrh	r3, [r3, #26]
 80188e0:	f003 0310 	and.w	r3, r3, #16
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d103      	bne.n	80188f0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80188e8:	4b70      	ldr	r3, [pc, #448]	; (8018aac <tcp_process+0x2cc>)
 80188ea:	681a      	ldr	r2, [r3, #0]
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	2200      	movs	r2, #0
 80188f4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	2200      	movs	r2, #0
 80188fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018900:	6878      	ldr	r0, [r7, #4]
 8018902:	f001 fc2d 	bl	801a160 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	7d1b      	ldrb	r3, [r3, #20]
 801890a:	3b02      	subs	r3, #2
 801890c:	2b07      	cmp	r3, #7
 801890e:	f200 8337 	bhi.w	8018f80 <tcp_process+0x7a0>
 8018912:	a201      	add	r2, pc, #4	; (adr r2, 8018918 <tcp_process+0x138>)
 8018914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018918:	08018939 	.word	0x08018939
 801891c:	08018b69 	.word	0x08018b69
 8018920:	08018ce1 	.word	0x08018ce1
 8018924:	08018d0b 	.word	0x08018d0b
 8018928:	08018e2f 	.word	0x08018e2f
 801892c:	08018ce1 	.word	0x08018ce1
 8018930:	08018ebb 	.word	0x08018ebb
 8018934:	08018f4b 	.word	0x08018f4b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018938:	4b57      	ldr	r3, [pc, #348]	; (8018a98 <tcp_process+0x2b8>)
 801893a:	781b      	ldrb	r3, [r3, #0]
 801893c:	f003 0310 	and.w	r3, r3, #16
 8018940:	2b00      	cmp	r3, #0
 8018942:	f000 80e4 	beq.w	8018b0e <tcp_process+0x32e>
 8018946:	4b54      	ldr	r3, [pc, #336]	; (8018a98 <tcp_process+0x2b8>)
 8018948:	781b      	ldrb	r3, [r3, #0]
 801894a:	f003 0302 	and.w	r3, r3, #2
 801894e:	2b00      	cmp	r3, #0
 8018950:	f000 80dd 	beq.w	8018b0e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018958:	1c5a      	adds	r2, r3, #1
 801895a:	4b50      	ldr	r3, [pc, #320]	; (8018a9c <tcp_process+0x2bc>)
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	429a      	cmp	r2, r3
 8018960:	f040 80d5 	bne.w	8018b0e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018964:	4b4e      	ldr	r3, [pc, #312]	; (8018aa0 <tcp_process+0x2c0>)
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	1c5a      	adds	r2, r3, #1
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8018976:	4b49      	ldr	r3, [pc, #292]	; (8018a9c <tcp_process+0x2bc>)
 8018978:	681a      	ldr	r2, [r3, #0]
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801897e:	4b4c      	ldr	r3, [pc, #304]	; (8018ab0 <tcp_process+0x2d0>)
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	89db      	ldrh	r3, [r3, #14]
 8018984:	b29a      	uxth	r2, r3
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018998:	4b41      	ldr	r3, [pc, #260]	; (8018aa0 <tcp_process+0x2c0>)
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	1e5a      	subs	r2, r3, #1
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	2204      	movs	r2, #4
 80189a6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	3304      	adds	r3, #4
 80189b0:	4618      	mov	r0, r3
 80189b2:	f7f9 fb17 	bl	8011fe4 <ip4_route>
 80189b6:	4601      	mov	r1, r0
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	3304      	adds	r3, #4
 80189bc:	461a      	mov	r2, r3
 80189be:	4620      	mov	r0, r4
 80189c0:	f7ff f88e 	bl	8017ae0 <tcp_eff_send_mss_netif>
 80189c4:	4603      	mov	r3, r0
 80189c6:	461a      	mov	r2, r3
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80189d0:	009a      	lsls	r2, r3, #2
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80189d6:	005b      	lsls	r3, r3, #1
 80189d8:	f241 111c 	movw	r1, #4380	; 0x111c
 80189dc:	428b      	cmp	r3, r1
 80189de:	bf38      	it	cc
 80189e0:	460b      	movcc	r3, r1
 80189e2:	429a      	cmp	r2, r3
 80189e4:	d204      	bcs.n	80189f0 <tcp_process+0x210>
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80189ea:	009b      	lsls	r3, r3, #2
 80189ec:	b29b      	uxth	r3, r3
 80189ee:	e00d      	b.n	8018a0c <tcp_process+0x22c>
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80189f4:	005b      	lsls	r3, r3, #1
 80189f6:	f241 121c 	movw	r2, #4380	; 0x111c
 80189fa:	4293      	cmp	r3, r2
 80189fc:	d904      	bls.n	8018a08 <tcp_process+0x228>
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a02:	005b      	lsls	r3, r3, #1
 8018a04:	b29b      	uxth	r3, r3
 8018a06:	e001      	b.n	8018a0c <tcp_process+0x22c>
 8018a08:	f241 131c 	movw	r3, #4380	; 0x111c
 8018a0c:	687a      	ldr	r2, [r7, #4]
 8018a0e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d106      	bne.n	8018a2a <tcp_process+0x24a>
 8018a1c:	4b1b      	ldr	r3, [pc, #108]	; (8018a8c <tcp_process+0x2ac>)
 8018a1e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018a22:	4924      	ldr	r1, [pc, #144]	; (8018ab4 <tcp_process+0x2d4>)
 8018a24:	481b      	ldr	r0, [pc, #108]	; (8018a94 <tcp_process+0x2b4>)
 8018a26:	f009 f979 	bl	8021d1c <iprintf>
        --pcb->snd_queuelen;
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018a30:	3b01      	subs	r3, #1
 8018a32:	b29a      	uxth	r2, r3
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a3e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018a40:	69fb      	ldr	r3, [r7, #28]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d111      	bne.n	8018a6a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a4a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018a4c:	69fb      	ldr	r3, [r7, #28]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d106      	bne.n	8018a60 <tcp_process+0x280>
 8018a52:	4b0e      	ldr	r3, [pc, #56]	; (8018a8c <tcp_process+0x2ac>)
 8018a54:	f44f 725d 	mov.w	r2, #884	; 0x374
 8018a58:	4917      	ldr	r1, [pc, #92]	; (8018ab8 <tcp_process+0x2d8>)
 8018a5a:	480e      	ldr	r0, [pc, #56]	; (8018a94 <tcp_process+0x2b4>)
 8018a5c:	f009 f95e 	bl	8021d1c <iprintf>
          pcb->unsent = rseg->next;
 8018a60:	69fb      	ldr	r3, [r7, #28]
 8018a62:	681a      	ldr	r2, [r3, #0]
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	66da      	str	r2, [r3, #108]	; 0x6c
 8018a68:	e003      	b.n	8018a72 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8018a6a:	69fb      	ldr	r3, [r7, #28]
 8018a6c:	681a      	ldr	r2, [r3, #0]
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018a72:	69f8      	ldr	r0, [r7, #28]
 8018a74:	f7fe fc6f 	bl	8017356 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d11d      	bne.n	8018abc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a86:	861a      	strh	r2, [r3, #48]	; 0x30
 8018a88:	e01f      	b.n	8018aca <tcp_process+0x2ea>
 8018a8a:	bf00      	nop
 8018a8c:	08026bc0 	.word	0x08026bc0
 8018a90:	08026e14 	.word	0x08026e14
 8018a94:	08026c28 	.word	0x08026c28
 8018a98:	2400498c 	.word	0x2400498c
 8018a9c:	24004984 	.word	0x24004984
 8018aa0:	24004980 	.word	0x24004980
 8018aa4:	08026e30 	.word	0x08026e30
 8018aa8:	2400498d 	.word	0x2400498d
 8018aac:	2400d250 	.word	0x2400d250
 8018ab0:	24004970 	.word	0x24004970
 8018ab4:	08026e50 	.word	0x08026e50
 8018ab8:	08026e68 	.word	0x08026e68
        } else {
          pcb->rtime = 0;
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	2200      	movs	r2, #0
 8018ac0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	2200      	movs	r2, #0
 8018ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d00a      	beq.n	8018aea <tcp_process+0x30a>
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018ada:	687a      	ldr	r2, [r7, #4]
 8018adc:	6910      	ldr	r0, [r2, #16]
 8018ade:	2200      	movs	r2, #0
 8018ae0:	6879      	ldr	r1, [r7, #4]
 8018ae2:	4798      	blx	r3
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	76bb      	strb	r3, [r7, #26]
 8018ae8:	e001      	b.n	8018aee <tcp_process+0x30e>
 8018aea:	2300      	movs	r3, #0
 8018aec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8018aee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018af2:	f113 0f0d 	cmn.w	r3, #13
 8018af6:	d102      	bne.n	8018afe <tcp_process+0x31e>
          return ERR_ABRT;
 8018af8:	f06f 030c 	mvn.w	r3, #12
 8018afc:	e250      	b.n	8018fa0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	8b5b      	ldrh	r3, [r3, #26]
 8018b02:	f043 0302 	orr.w	r3, r3, #2
 8018b06:	b29a      	uxth	r2, r3
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018b0c:	e23a      	b.n	8018f84 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018b0e:	4b9d      	ldr	r3, [pc, #628]	; (8018d84 <tcp_process+0x5a4>)
 8018b10:	781b      	ldrb	r3, [r3, #0]
 8018b12:	f003 0310 	and.w	r3, r3, #16
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	f000 8234 	beq.w	8018f84 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b1c:	4b9a      	ldr	r3, [pc, #616]	; (8018d88 <tcp_process+0x5a8>)
 8018b1e:	6819      	ldr	r1, [r3, #0]
 8018b20:	4b9a      	ldr	r3, [pc, #616]	; (8018d8c <tcp_process+0x5ac>)
 8018b22:	881b      	ldrh	r3, [r3, #0]
 8018b24:	461a      	mov	r2, r3
 8018b26:	4b9a      	ldr	r3, [pc, #616]	; (8018d90 <tcp_process+0x5b0>)
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b2c:	4b99      	ldr	r3, [pc, #612]	; (8018d94 <tcp_process+0x5b4>)
 8018b2e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b30:	885b      	ldrh	r3, [r3, #2]
 8018b32:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b34:	4a97      	ldr	r2, [pc, #604]	; (8018d94 <tcp_process+0x5b4>)
 8018b36:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b38:	8812      	ldrh	r2, [r2, #0]
 8018b3a:	b292      	uxth	r2, r2
 8018b3c:	9202      	str	r2, [sp, #8]
 8018b3e:	9301      	str	r3, [sp, #4]
 8018b40:	4b95      	ldr	r3, [pc, #596]	; (8018d98 <tcp_process+0x5b8>)
 8018b42:	9300      	str	r3, [sp, #0]
 8018b44:	4b95      	ldr	r3, [pc, #596]	; (8018d9c <tcp_process+0x5bc>)
 8018b46:	4602      	mov	r2, r0
 8018b48:	6878      	ldr	r0, [r7, #4]
 8018b4a:	f003 f8db 	bl	801bd04 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018b54:	2b05      	cmp	r3, #5
 8018b56:	f200 8215 	bhi.w	8018f84 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018b60:	6878      	ldr	r0, [r7, #4]
 8018b62:	f002 fea5 	bl	801b8b0 <tcp_rexmit_rto>
      break;
 8018b66:	e20d      	b.n	8018f84 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8018b68:	4b86      	ldr	r3, [pc, #536]	; (8018d84 <tcp_process+0x5a4>)
 8018b6a:	781b      	ldrb	r3, [r3, #0]
 8018b6c:	f003 0310 	and.w	r3, r3, #16
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	f000 80a1 	beq.w	8018cb8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018b76:	4b84      	ldr	r3, [pc, #528]	; (8018d88 <tcp_process+0x5a8>)
 8018b78:	681a      	ldr	r2, [r3, #0]
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b7e:	1ad3      	subs	r3, r2, r3
 8018b80:	3b01      	subs	r3, #1
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	db7e      	blt.n	8018c84 <tcp_process+0x4a4>
 8018b86:	4b80      	ldr	r3, [pc, #512]	; (8018d88 <tcp_process+0x5a8>)
 8018b88:	681a      	ldr	r2, [r3, #0]
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b8e:	1ad3      	subs	r3, r2, r3
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	dc77      	bgt.n	8018c84 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	2204      	movs	r2, #4
 8018b98:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d102      	bne.n	8018ba8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018ba2:	23fa      	movs	r3, #250	; 0xfa
 8018ba4:	76bb      	strb	r3, [r7, #26]
 8018ba6:	e01d      	b.n	8018be4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018bac:	699b      	ldr	r3, [r3, #24]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d106      	bne.n	8018bc0 <tcp_process+0x3e0>
 8018bb2:	4b7b      	ldr	r3, [pc, #492]	; (8018da0 <tcp_process+0x5c0>)
 8018bb4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8018bb8:	497a      	ldr	r1, [pc, #488]	; (8018da4 <tcp_process+0x5c4>)
 8018bba:	487b      	ldr	r0, [pc, #492]	; (8018da8 <tcp_process+0x5c8>)
 8018bbc:	f009 f8ae 	bl	8021d1c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018bc4:	699b      	ldr	r3, [r3, #24]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d00a      	beq.n	8018be0 <tcp_process+0x400>
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018bce:	699b      	ldr	r3, [r3, #24]
 8018bd0:	687a      	ldr	r2, [r7, #4]
 8018bd2:	6910      	ldr	r0, [r2, #16]
 8018bd4:	2200      	movs	r2, #0
 8018bd6:	6879      	ldr	r1, [r7, #4]
 8018bd8:	4798      	blx	r3
 8018bda:	4603      	mov	r3, r0
 8018bdc:	76bb      	strb	r3, [r7, #26]
 8018bde:	e001      	b.n	8018be4 <tcp_process+0x404>
 8018be0:	23f0      	movs	r3, #240	; 0xf0
 8018be2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8018be4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d00a      	beq.n	8018c02 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018bec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018bf0:	f113 0f0d 	cmn.w	r3, #13
 8018bf4:	d002      	beq.n	8018bfc <tcp_process+0x41c>
              tcp_abort(pcb);
 8018bf6:	6878      	ldr	r0, [r7, #4]
 8018bf8:	f7fd fd64 	bl	80166c4 <tcp_abort>
            }
            return ERR_ABRT;
 8018bfc:	f06f 030c 	mvn.w	r3, #12
 8018c00:	e1ce      	b.n	8018fa0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8018c02:	6878      	ldr	r0, [r7, #4]
 8018c04:	f000 fae0 	bl	80191c8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8018c08:	4b68      	ldr	r3, [pc, #416]	; (8018dac <tcp_process+0x5cc>)
 8018c0a:	881b      	ldrh	r3, [r3, #0]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d005      	beq.n	8018c1c <tcp_process+0x43c>
            recv_acked--;
 8018c10:	4b66      	ldr	r3, [pc, #408]	; (8018dac <tcp_process+0x5cc>)
 8018c12:	881b      	ldrh	r3, [r3, #0]
 8018c14:	3b01      	subs	r3, #1
 8018c16:	b29a      	uxth	r2, r3
 8018c18:	4b64      	ldr	r3, [pc, #400]	; (8018dac <tcp_process+0x5cc>)
 8018c1a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c20:	009a      	lsls	r2, r3, #2
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c26:	005b      	lsls	r3, r3, #1
 8018c28:	f241 111c 	movw	r1, #4380	; 0x111c
 8018c2c:	428b      	cmp	r3, r1
 8018c2e:	bf38      	it	cc
 8018c30:	460b      	movcc	r3, r1
 8018c32:	429a      	cmp	r2, r3
 8018c34:	d204      	bcs.n	8018c40 <tcp_process+0x460>
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c3a:	009b      	lsls	r3, r3, #2
 8018c3c:	b29b      	uxth	r3, r3
 8018c3e:	e00d      	b.n	8018c5c <tcp_process+0x47c>
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c44:	005b      	lsls	r3, r3, #1
 8018c46:	f241 121c 	movw	r2, #4380	; 0x111c
 8018c4a:	4293      	cmp	r3, r2
 8018c4c:	d904      	bls.n	8018c58 <tcp_process+0x478>
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c52:	005b      	lsls	r3, r3, #1
 8018c54:	b29b      	uxth	r3, r3
 8018c56:	e001      	b.n	8018c5c <tcp_process+0x47c>
 8018c58:	f241 131c 	movw	r3, #4380	; 0x111c
 8018c5c:	687a      	ldr	r2, [r7, #4]
 8018c5e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018c62:	4b53      	ldr	r3, [pc, #332]	; (8018db0 <tcp_process+0x5d0>)
 8018c64:	781b      	ldrb	r3, [r3, #0]
 8018c66:	f003 0320 	and.w	r3, r3, #32
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d037      	beq.n	8018cde <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	8b5b      	ldrh	r3, [r3, #26]
 8018c72:	f043 0302 	orr.w	r3, r3, #2
 8018c76:	b29a      	uxth	r2, r3
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	2207      	movs	r2, #7
 8018c80:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018c82:	e02c      	b.n	8018cde <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c84:	4b40      	ldr	r3, [pc, #256]	; (8018d88 <tcp_process+0x5a8>)
 8018c86:	6819      	ldr	r1, [r3, #0]
 8018c88:	4b40      	ldr	r3, [pc, #256]	; (8018d8c <tcp_process+0x5ac>)
 8018c8a:	881b      	ldrh	r3, [r3, #0]
 8018c8c:	461a      	mov	r2, r3
 8018c8e:	4b40      	ldr	r3, [pc, #256]	; (8018d90 <tcp_process+0x5b0>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018c94:	4b3f      	ldr	r3, [pc, #252]	; (8018d94 <tcp_process+0x5b4>)
 8018c96:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c98:	885b      	ldrh	r3, [r3, #2]
 8018c9a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018c9c:	4a3d      	ldr	r2, [pc, #244]	; (8018d94 <tcp_process+0x5b4>)
 8018c9e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ca0:	8812      	ldrh	r2, [r2, #0]
 8018ca2:	b292      	uxth	r2, r2
 8018ca4:	9202      	str	r2, [sp, #8]
 8018ca6:	9301      	str	r3, [sp, #4]
 8018ca8:	4b3b      	ldr	r3, [pc, #236]	; (8018d98 <tcp_process+0x5b8>)
 8018caa:	9300      	str	r3, [sp, #0]
 8018cac:	4b3b      	ldr	r3, [pc, #236]	; (8018d9c <tcp_process+0x5bc>)
 8018cae:	4602      	mov	r2, r0
 8018cb0:	6878      	ldr	r0, [r7, #4]
 8018cb2:	f003 f827 	bl	801bd04 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8018cb6:	e167      	b.n	8018f88 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8018cb8:	4b32      	ldr	r3, [pc, #200]	; (8018d84 <tcp_process+0x5a4>)
 8018cba:	781b      	ldrb	r3, [r3, #0]
 8018cbc:	f003 0302 	and.w	r3, r3, #2
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	f000 8161 	beq.w	8018f88 <tcp_process+0x7a8>
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cca:	1e5a      	subs	r2, r3, #1
 8018ccc:	4b30      	ldr	r3, [pc, #192]	; (8018d90 <tcp_process+0x5b0>)
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	f040 8159 	bne.w	8018f88 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8018cd6:	6878      	ldr	r0, [r7, #4]
 8018cd8:	f002 fe0c 	bl	801b8f4 <tcp_rexmit>
      break;
 8018cdc:	e154      	b.n	8018f88 <tcp_process+0x7a8>
 8018cde:	e153      	b.n	8018f88 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8018ce0:	6878      	ldr	r0, [r7, #4]
 8018ce2:	f000 fa71 	bl	80191c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8018ce6:	4b32      	ldr	r3, [pc, #200]	; (8018db0 <tcp_process+0x5d0>)
 8018ce8:	781b      	ldrb	r3, [r3, #0]
 8018cea:	f003 0320 	and.w	r3, r3, #32
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	f000 814c 	beq.w	8018f8c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	8b5b      	ldrh	r3, [r3, #26]
 8018cf8:	f043 0302 	orr.w	r3, r3, #2
 8018cfc:	b29a      	uxth	r2, r3
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	2207      	movs	r2, #7
 8018d06:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018d08:	e140      	b.n	8018f8c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8018d0a:	6878      	ldr	r0, [r7, #4]
 8018d0c:	f000 fa5c 	bl	80191c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018d10:	4b27      	ldr	r3, [pc, #156]	; (8018db0 <tcp_process+0x5d0>)
 8018d12:	781b      	ldrb	r3, [r3, #0]
 8018d14:	f003 0320 	and.w	r3, r3, #32
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d071      	beq.n	8018e00 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018d1c:	4b19      	ldr	r3, [pc, #100]	; (8018d84 <tcp_process+0x5a4>)
 8018d1e:	781b      	ldrb	r3, [r3, #0]
 8018d20:	f003 0310 	and.w	r3, r3, #16
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d060      	beq.n	8018dea <tcp_process+0x60a>
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018d2c:	4b16      	ldr	r3, [pc, #88]	; (8018d88 <tcp_process+0x5a8>)
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	429a      	cmp	r2, r3
 8018d32:	d15a      	bne.n	8018dea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d156      	bne.n	8018dea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	8b5b      	ldrh	r3, [r3, #26]
 8018d40:	f043 0302 	orr.w	r3, r3, #2
 8018d44:	b29a      	uxth	r2, r3
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8018d4a:	6878      	ldr	r0, [r7, #4]
 8018d4c:	f7fe fdbe 	bl	80178cc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018d50:	4b18      	ldr	r3, [pc, #96]	; (8018db4 <tcp_process+0x5d4>)
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	687a      	ldr	r2, [r7, #4]
 8018d56:	429a      	cmp	r2, r3
 8018d58:	d105      	bne.n	8018d66 <tcp_process+0x586>
 8018d5a:	4b16      	ldr	r3, [pc, #88]	; (8018db4 <tcp_process+0x5d4>)
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	68db      	ldr	r3, [r3, #12]
 8018d60:	4a14      	ldr	r2, [pc, #80]	; (8018db4 <tcp_process+0x5d4>)
 8018d62:	6013      	str	r3, [r2, #0]
 8018d64:	e02e      	b.n	8018dc4 <tcp_process+0x5e4>
 8018d66:	4b13      	ldr	r3, [pc, #76]	; (8018db4 <tcp_process+0x5d4>)
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	617b      	str	r3, [r7, #20]
 8018d6c:	e027      	b.n	8018dbe <tcp_process+0x5de>
 8018d6e:	697b      	ldr	r3, [r7, #20]
 8018d70:	68db      	ldr	r3, [r3, #12]
 8018d72:	687a      	ldr	r2, [r7, #4]
 8018d74:	429a      	cmp	r2, r3
 8018d76:	d11f      	bne.n	8018db8 <tcp_process+0x5d8>
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	68da      	ldr	r2, [r3, #12]
 8018d7c:	697b      	ldr	r3, [r7, #20]
 8018d7e:	60da      	str	r2, [r3, #12]
 8018d80:	e020      	b.n	8018dc4 <tcp_process+0x5e4>
 8018d82:	bf00      	nop
 8018d84:	2400498c 	.word	0x2400498c
 8018d88:	24004984 	.word	0x24004984
 8018d8c:	2400498a 	.word	0x2400498a
 8018d90:	24004980 	.word	0x24004980
 8018d94:	24004970 	.word	0x24004970
 8018d98:	2400a194 	.word	0x2400a194
 8018d9c:	2400a198 	.word	0x2400a198
 8018da0:	08026bc0 	.word	0x08026bc0
 8018da4:	08026e7c 	.word	0x08026e7c
 8018da8:	08026c28 	.word	0x08026c28
 8018dac:	24004988 	.word	0x24004988
 8018db0:	2400498d 	.word	0x2400498d
 8018db4:	2400d24c 	.word	0x2400d24c
 8018db8:	697b      	ldr	r3, [r7, #20]
 8018dba:	68db      	ldr	r3, [r3, #12]
 8018dbc:	617b      	str	r3, [r7, #20]
 8018dbe:	697b      	ldr	r3, [r7, #20]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d1d4      	bne.n	8018d6e <tcp_process+0x58e>
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	60da      	str	r2, [r3, #12]
 8018dca:	4b77      	ldr	r3, [pc, #476]	; (8018fa8 <tcp_process+0x7c8>)
 8018dcc:	2201      	movs	r2, #1
 8018dce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	220a      	movs	r2, #10
 8018dd4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8018dd6:	4b75      	ldr	r3, [pc, #468]	; (8018fac <tcp_process+0x7cc>)
 8018dd8:	681a      	ldr	r2, [r3, #0]
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	60da      	str	r2, [r3, #12]
 8018dde:	4a73      	ldr	r2, [pc, #460]	; (8018fac <tcp_process+0x7cc>)
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	6013      	str	r3, [r2, #0]
 8018de4:	f003 fb08 	bl	801c3f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8018de8:	e0d2      	b.n	8018f90 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	8b5b      	ldrh	r3, [r3, #26]
 8018dee:	f043 0302 	orr.w	r3, r3, #2
 8018df2:	b29a      	uxth	r2, r3
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	2208      	movs	r2, #8
 8018dfc:	751a      	strb	r2, [r3, #20]
      break;
 8018dfe:	e0c7      	b.n	8018f90 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018e00:	4b6b      	ldr	r3, [pc, #428]	; (8018fb0 <tcp_process+0x7d0>)
 8018e02:	781b      	ldrb	r3, [r3, #0]
 8018e04:	f003 0310 	and.w	r3, r3, #16
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	f000 80c1 	beq.w	8018f90 <tcp_process+0x7b0>
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018e12:	4b68      	ldr	r3, [pc, #416]	; (8018fb4 <tcp_process+0x7d4>)
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	429a      	cmp	r2, r3
 8018e18:	f040 80ba 	bne.w	8018f90 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	f040 80b5 	bne.w	8018f90 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	2206      	movs	r2, #6
 8018e2a:	751a      	strb	r2, [r3, #20]
      break;
 8018e2c:	e0b0      	b.n	8018f90 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018e2e:	6878      	ldr	r0, [r7, #4]
 8018e30:	f000 f9ca 	bl	80191c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018e34:	4b60      	ldr	r3, [pc, #384]	; (8018fb8 <tcp_process+0x7d8>)
 8018e36:	781b      	ldrb	r3, [r3, #0]
 8018e38:	f003 0320 	and.w	r3, r3, #32
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	f000 80a9 	beq.w	8018f94 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	8b5b      	ldrh	r3, [r3, #26]
 8018e46:	f043 0302 	orr.w	r3, r3, #2
 8018e4a:	b29a      	uxth	r2, r3
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018e50:	6878      	ldr	r0, [r7, #4]
 8018e52:	f7fe fd3b 	bl	80178cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018e56:	4b59      	ldr	r3, [pc, #356]	; (8018fbc <tcp_process+0x7dc>)
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	687a      	ldr	r2, [r7, #4]
 8018e5c:	429a      	cmp	r2, r3
 8018e5e:	d105      	bne.n	8018e6c <tcp_process+0x68c>
 8018e60:	4b56      	ldr	r3, [pc, #344]	; (8018fbc <tcp_process+0x7dc>)
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	68db      	ldr	r3, [r3, #12]
 8018e66:	4a55      	ldr	r2, [pc, #340]	; (8018fbc <tcp_process+0x7dc>)
 8018e68:	6013      	str	r3, [r2, #0]
 8018e6a:	e013      	b.n	8018e94 <tcp_process+0x6b4>
 8018e6c:	4b53      	ldr	r3, [pc, #332]	; (8018fbc <tcp_process+0x7dc>)
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	613b      	str	r3, [r7, #16]
 8018e72:	e00c      	b.n	8018e8e <tcp_process+0x6ae>
 8018e74:	693b      	ldr	r3, [r7, #16]
 8018e76:	68db      	ldr	r3, [r3, #12]
 8018e78:	687a      	ldr	r2, [r7, #4]
 8018e7a:	429a      	cmp	r2, r3
 8018e7c:	d104      	bne.n	8018e88 <tcp_process+0x6a8>
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	68da      	ldr	r2, [r3, #12]
 8018e82:	693b      	ldr	r3, [r7, #16]
 8018e84:	60da      	str	r2, [r3, #12]
 8018e86:	e005      	b.n	8018e94 <tcp_process+0x6b4>
 8018e88:	693b      	ldr	r3, [r7, #16]
 8018e8a:	68db      	ldr	r3, [r3, #12]
 8018e8c:	613b      	str	r3, [r7, #16]
 8018e8e:	693b      	ldr	r3, [r7, #16]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d1ef      	bne.n	8018e74 <tcp_process+0x694>
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	2200      	movs	r2, #0
 8018e98:	60da      	str	r2, [r3, #12]
 8018e9a:	4b43      	ldr	r3, [pc, #268]	; (8018fa8 <tcp_process+0x7c8>)
 8018e9c:	2201      	movs	r2, #1
 8018e9e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	220a      	movs	r2, #10
 8018ea4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018ea6:	4b41      	ldr	r3, [pc, #260]	; (8018fac <tcp_process+0x7cc>)
 8018ea8:	681a      	ldr	r2, [r3, #0]
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	60da      	str	r2, [r3, #12]
 8018eae:	4a3f      	ldr	r2, [pc, #252]	; (8018fac <tcp_process+0x7cc>)
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	6013      	str	r3, [r2, #0]
 8018eb4:	f003 faa0 	bl	801c3f8 <tcp_timer_needed>
      }
      break;
 8018eb8:	e06c      	b.n	8018f94 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018eba:	6878      	ldr	r0, [r7, #4]
 8018ebc:	f000 f984 	bl	80191c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018ec0:	4b3b      	ldr	r3, [pc, #236]	; (8018fb0 <tcp_process+0x7d0>)
 8018ec2:	781b      	ldrb	r3, [r3, #0]
 8018ec4:	f003 0310 	and.w	r3, r3, #16
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d065      	beq.n	8018f98 <tcp_process+0x7b8>
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018ed0:	4b38      	ldr	r3, [pc, #224]	; (8018fb4 <tcp_process+0x7d4>)
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	429a      	cmp	r2, r3
 8018ed6:	d15f      	bne.n	8018f98 <tcp_process+0x7b8>
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d15b      	bne.n	8018f98 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8018ee0:	6878      	ldr	r0, [r7, #4]
 8018ee2:	f7fe fcf3 	bl	80178cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018ee6:	4b35      	ldr	r3, [pc, #212]	; (8018fbc <tcp_process+0x7dc>)
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	687a      	ldr	r2, [r7, #4]
 8018eec:	429a      	cmp	r2, r3
 8018eee:	d105      	bne.n	8018efc <tcp_process+0x71c>
 8018ef0:	4b32      	ldr	r3, [pc, #200]	; (8018fbc <tcp_process+0x7dc>)
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	68db      	ldr	r3, [r3, #12]
 8018ef6:	4a31      	ldr	r2, [pc, #196]	; (8018fbc <tcp_process+0x7dc>)
 8018ef8:	6013      	str	r3, [r2, #0]
 8018efa:	e013      	b.n	8018f24 <tcp_process+0x744>
 8018efc:	4b2f      	ldr	r3, [pc, #188]	; (8018fbc <tcp_process+0x7dc>)
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	60fb      	str	r3, [r7, #12]
 8018f02:	e00c      	b.n	8018f1e <tcp_process+0x73e>
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	68db      	ldr	r3, [r3, #12]
 8018f08:	687a      	ldr	r2, [r7, #4]
 8018f0a:	429a      	cmp	r2, r3
 8018f0c:	d104      	bne.n	8018f18 <tcp_process+0x738>
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	68da      	ldr	r2, [r3, #12]
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	60da      	str	r2, [r3, #12]
 8018f16:	e005      	b.n	8018f24 <tcp_process+0x744>
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	68db      	ldr	r3, [r3, #12]
 8018f1c:	60fb      	str	r3, [r7, #12]
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d1ef      	bne.n	8018f04 <tcp_process+0x724>
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	2200      	movs	r2, #0
 8018f28:	60da      	str	r2, [r3, #12]
 8018f2a:	4b1f      	ldr	r3, [pc, #124]	; (8018fa8 <tcp_process+0x7c8>)
 8018f2c:	2201      	movs	r2, #1
 8018f2e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	220a      	movs	r2, #10
 8018f34:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018f36:	4b1d      	ldr	r3, [pc, #116]	; (8018fac <tcp_process+0x7cc>)
 8018f38:	681a      	ldr	r2, [r3, #0]
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	60da      	str	r2, [r3, #12]
 8018f3e:	4a1b      	ldr	r2, [pc, #108]	; (8018fac <tcp_process+0x7cc>)
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	6013      	str	r3, [r2, #0]
 8018f44:	f003 fa58 	bl	801c3f8 <tcp_timer_needed>
      }
      break;
 8018f48:	e026      	b.n	8018f98 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018f4a:	6878      	ldr	r0, [r7, #4]
 8018f4c:	f000 f93c 	bl	80191c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018f50:	4b17      	ldr	r3, [pc, #92]	; (8018fb0 <tcp_process+0x7d0>)
 8018f52:	781b      	ldrb	r3, [r3, #0]
 8018f54:	f003 0310 	and.w	r3, r3, #16
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d01f      	beq.n	8018f9c <tcp_process+0x7bc>
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018f60:	4b14      	ldr	r3, [pc, #80]	; (8018fb4 <tcp_process+0x7d4>)
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	429a      	cmp	r2, r3
 8018f66:	d119      	bne.n	8018f9c <tcp_process+0x7bc>
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d115      	bne.n	8018f9c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8018f70:	4b11      	ldr	r3, [pc, #68]	; (8018fb8 <tcp_process+0x7d8>)
 8018f72:	781b      	ldrb	r3, [r3, #0]
 8018f74:	f043 0310 	orr.w	r3, r3, #16
 8018f78:	b2da      	uxtb	r2, r3
 8018f7a:	4b0f      	ldr	r3, [pc, #60]	; (8018fb8 <tcp_process+0x7d8>)
 8018f7c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018f7e:	e00d      	b.n	8018f9c <tcp_process+0x7bc>
    default:
      break;
 8018f80:	bf00      	nop
 8018f82:	e00c      	b.n	8018f9e <tcp_process+0x7be>
      break;
 8018f84:	bf00      	nop
 8018f86:	e00a      	b.n	8018f9e <tcp_process+0x7be>
      break;
 8018f88:	bf00      	nop
 8018f8a:	e008      	b.n	8018f9e <tcp_process+0x7be>
      break;
 8018f8c:	bf00      	nop
 8018f8e:	e006      	b.n	8018f9e <tcp_process+0x7be>
      break;
 8018f90:	bf00      	nop
 8018f92:	e004      	b.n	8018f9e <tcp_process+0x7be>
      break;
 8018f94:	bf00      	nop
 8018f96:	e002      	b.n	8018f9e <tcp_process+0x7be>
      break;
 8018f98:	bf00      	nop
 8018f9a:	e000      	b.n	8018f9e <tcp_process+0x7be>
      break;
 8018f9c:	bf00      	nop
  }
  return ERR_OK;
 8018f9e:	2300      	movs	r3, #0
}
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	3724      	adds	r7, #36	; 0x24
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd90      	pop	{r4, r7, pc}
 8018fa8:	2400d248 	.word	0x2400d248
 8018fac:	2400d25c 	.word	0x2400d25c
 8018fb0:	2400498c 	.word	0x2400498c
 8018fb4:	24004984 	.word	0x24004984
 8018fb8:	2400498d 	.word	0x2400498d
 8018fbc:	2400d24c 	.word	0x2400d24c

08018fc0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018fc0:	b590      	push	{r4, r7, lr}
 8018fc2:	b085      	sub	sp, #20
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]
 8018fc8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d106      	bne.n	8018fde <tcp_oos_insert_segment+0x1e>
 8018fd0:	4b3b      	ldr	r3, [pc, #236]	; (80190c0 <tcp_oos_insert_segment+0x100>)
 8018fd2:	f240 421f 	movw	r2, #1055	; 0x41f
 8018fd6:	493b      	ldr	r1, [pc, #236]	; (80190c4 <tcp_oos_insert_segment+0x104>)
 8018fd8:	483b      	ldr	r0, [pc, #236]	; (80190c8 <tcp_oos_insert_segment+0x108>)
 8018fda:	f008 fe9f 	bl	8021d1c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	68db      	ldr	r3, [r3, #12]
 8018fe2:	899b      	ldrh	r3, [r3, #12]
 8018fe4:	b29b      	uxth	r3, r3
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	f7f7 fd06 	bl	80109f8 <lwip_htons>
 8018fec:	4603      	mov	r3, r0
 8018fee:	b2db      	uxtb	r3, r3
 8018ff0:	f003 0301 	and.w	r3, r3, #1
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d028      	beq.n	801904a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018ff8:	6838      	ldr	r0, [r7, #0]
 8018ffa:	f7fe f997 	bl	801732c <tcp_segs_free>
    next = NULL;
 8018ffe:	2300      	movs	r3, #0
 8019000:	603b      	str	r3, [r7, #0]
 8019002:	e056      	b.n	80190b2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019004:	683b      	ldr	r3, [r7, #0]
 8019006:	68db      	ldr	r3, [r3, #12]
 8019008:	899b      	ldrh	r3, [r3, #12]
 801900a:	b29b      	uxth	r3, r3
 801900c:	4618      	mov	r0, r3
 801900e:	f7f7 fcf3 	bl	80109f8 <lwip_htons>
 8019012:	4603      	mov	r3, r0
 8019014:	b2db      	uxtb	r3, r3
 8019016:	f003 0301 	and.w	r3, r3, #1
 801901a:	2b00      	cmp	r3, #0
 801901c:	d00d      	beq.n	801903a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	68db      	ldr	r3, [r3, #12]
 8019022:	899b      	ldrh	r3, [r3, #12]
 8019024:	b29c      	uxth	r4, r3
 8019026:	2001      	movs	r0, #1
 8019028:	f7f7 fce6 	bl	80109f8 <lwip_htons>
 801902c:	4603      	mov	r3, r0
 801902e:	461a      	mov	r2, r3
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	68db      	ldr	r3, [r3, #12]
 8019034:	4322      	orrs	r2, r4
 8019036:	b292      	uxth	r2, r2
 8019038:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801903a:	683b      	ldr	r3, [r7, #0]
 801903c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801903e:	683b      	ldr	r3, [r7, #0]
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8019044:	68f8      	ldr	r0, [r7, #12]
 8019046:	f7fe f986 	bl	8017356 <tcp_seg_free>
    while (next &&
 801904a:	683b      	ldr	r3, [r7, #0]
 801904c:	2b00      	cmp	r3, #0
 801904e:	d00e      	beq.n	801906e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	891b      	ldrh	r3, [r3, #8]
 8019054:	461a      	mov	r2, r3
 8019056:	4b1d      	ldr	r3, [pc, #116]	; (80190cc <tcp_oos_insert_segment+0x10c>)
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	441a      	add	r2, r3
 801905c:	683b      	ldr	r3, [r7, #0]
 801905e:	68db      	ldr	r3, [r3, #12]
 8019060:	685b      	ldr	r3, [r3, #4]
 8019062:	6839      	ldr	r1, [r7, #0]
 8019064:	8909      	ldrh	r1, [r1, #8]
 8019066:	440b      	add	r3, r1
 8019068:	1ad3      	subs	r3, r2, r3
    while (next &&
 801906a:	2b00      	cmp	r3, #0
 801906c:	daca      	bge.n	8019004 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801906e:	683b      	ldr	r3, [r7, #0]
 8019070:	2b00      	cmp	r3, #0
 8019072:	d01e      	beq.n	80190b2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	891b      	ldrh	r3, [r3, #8]
 8019078:	461a      	mov	r2, r3
 801907a:	4b14      	ldr	r3, [pc, #80]	; (80190cc <tcp_oos_insert_segment+0x10c>)
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	441a      	add	r2, r3
 8019080:	683b      	ldr	r3, [r7, #0]
 8019082:	68db      	ldr	r3, [r3, #12]
 8019084:	685b      	ldr	r3, [r3, #4]
 8019086:	1ad3      	subs	r3, r2, r3
    if (next &&
 8019088:	2b00      	cmp	r3, #0
 801908a:	dd12      	ble.n	80190b2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801908c:	683b      	ldr	r3, [r7, #0]
 801908e:	68db      	ldr	r3, [r3, #12]
 8019090:	685b      	ldr	r3, [r3, #4]
 8019092:	b29a      	uxth	r2, r3
 8019094:	4b0d      	ldr	r3, [pc, #52]	; (80190cc <tcp_oos_insert_segment+0x10c>)
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	b29b      	uxth	r3, r3
 801909a:	1ad3      	subs	r3, r2, r3
 801909c:	b29a      	uxth	r2, r3
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	685a      	ldr	r2, [r3, #4]
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	891b      	ldrh	r3, [r3, #8]
 80190aa:	4619      	mov	r1, r3
 80190ac:	4610      	mov	r0, r2
 80190ae:	f7fb fc97 	bl	80149e0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	683a      	ldr	r2, [r7, #0]
 80190b6:	601a      	str	r2, [r3, #0]
}
 80190b8:	bf00      	nop
 80190ba:	3714      	adds	r7, #20
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd90      	pop	{r4, r7, pc}
 80190c0:	08026bc0 	.word	0x08026bc0
 80190c4:	08026e9c 	.word	0x08026e9c
 80190c8:	08026c28 	.word	0x08026c28
 80190cc:	24004980 	.word	0x24004980

080190d0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80190d0:	b5b0      	push	{r4, r5, r7, lr}
 80190d2:	b086      	sub	sp, #24
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	60f8      	str	r0, [r7, #12]
 80190d8:	60b9      	str	r1, [r7, #8]
 80190da:	607a      	str	r2, [r7, #4]
 80190dc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80190de:	e03e      	b.n	801915e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80190e0:	68bb      	ldr	r3, [r7, #8]
 80190e2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80190e4:	68bb      	ldr	r3, [r7, #8]
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80190ea:	697b      	ldr	r3, [r7, #20]
 80190ec:	685b      	ldr	r3, [r3, #4]
 80190ee:	4618      	mov	r0, r3
 80190f0:	f7fb fe8a 	bl	8014e08 <pbuf_clen>
 80190f4:	4603      	mov	r3, r0
 80190f6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80190fe:	8a7a      	ldrh	r2, [r7, #18]
 8019100:	429a      	cmp	r2, r3
 8019102:	d906      	bls.n	8019112 <tcp_free_acked_segments+0x42>
 8019104:	4b2a      	ldr	r3, [pc, #168]	; (80191b0 <tcp_free_acked_segments+0xe0>)
 8019106:	f240 4257 	movw	r2, #1111	; 0x457
 801910a:	492a      	ldr	r1, [pc, #168]	; (80191b4 <tcp_free_acked_segments+0xe4>)
 801910c:	482a      	ldr	r0, [pc, #168]	; (80191b8 <tcp_free_acked_segments+0xe8>)
 801910e:	f008 fe05 	bl	8021d1c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8019118:	8a7b      	ldrh	r3, [r7, #18]
 801911a:	1ad3      	subs	r3, r2, r3
 801911c:	b29a      	uxth	r2, r3
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8019124:	697b      	ldr	r3, [r7, #20]
 8019126:	891a      	ldrh	r2, [r3, #8]
 8019128:	4b24      	ldr	r3, [pc, #144]	; (80191bc <tcp_free_acked_segments+0xec>)
 801912a:	881b      	ldrh	r3, [r3, #0]
 801912c:	4413      	add	r3, r2
 801912e:	b29a      	uxth	r2, r3
 8019130:	4b22      	ldr	r3, [pc, #136]	; (80191bc <tcp_free_acked_segments+0xec>)
 8019132:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8019134:	6978      	ldr	r0, [r7, #20]
 8019136:	f7fe f90e 	bl	8017356 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019140:	2b00      	cmp	r3, #0
 8019142:	d00c      	beq.n	801915e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8019144:	68bb      	ldr	r3, [r7, #8]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d109      	bne.n	801915e <tcp_free_acked_segments+0x8e>
 801914a:	683b      	ldr	r3, [r7, #0]
 801914c:	2b00      	cmp	r3, #0
 801914e:	d106      	bne.n	801915e <tcp_free_acked_segments+0x8e>
 8019150:	4b17      	ldr	r3, [pc, #92]	; (80191b0 <tcp_free_acked_segments+0xe0>)
 8019152:	f240 4261 	movw	r2, #1121	; 0x461
 8019156:	491a      	ldr	r1, [pc, #104]	; (80191c0 <tcp_free_acked_segments+0xf0>)
 8019158:	4817      	ldr	r0, [pc, #92]	; (80191b8 <tcp_free_acked_segments+0xe8>)
 801915a:	f008 fddf 	bl	8021d1c <iprintf>
  while (seg_list != NULL &&
 801915e:	68bb      	ldr	r3, [r7, #8]
 8019160:	2b00      	cmp	r3, #0
 8019162:	d020      	beq.n	80191a6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8019164:	68bb      	ldr	r3, [r7, #8]
 8019166:	68db      	ldr	r3, [r3, #12]
 8019168:	685b      	ldr	r3, [r3, #4]
 801916a:	4618      	mov	r0, r3
 801916c:	f7f7 fc59 	bl	8010a22 <lwip_htonl>
 8019170:	4604      	mov	r4, r0
 8019172:	68bb      	ldr	r3, [r7, #8]
 8019174:	891b      	ldrh	r3, [r3, #8]
 8019176:	461d      	mov	r5, r3
 8019178:	68bb      	ldr	r3, [r7, #8]
 801917a:	68db      	ldr	r3, [r3, #12]
 801917c:	899b      	ldrh	r3, [r3, #12]
 801917e:	b29b      	uxth	r3, r3
 8019180:	4618      	mov	r0, r3
 8019182:	f7f7 fc39 	bl	80109f8 <lwip_htons>
 8019186:	4603      	mov	r3, r0
 8019188:	b2db      	uxtb	r3, r3
 801918a:	f003 0303 	and.w	r3, r3, #3
 801918e:	2b00      	cmp	r3, #0
 8019190:	d001      	beq.n	8019196 <tcp_free_acked_segments+0xc6>
 8019192:	2301      	movs	r3, #1
 8019194:	e000      	b.n	8019198 <tcp_free_acked_segments+0xc8>
 8019196:	2300      	movs	r3, #0
 8019198:	442b      	add	r3, r5
 801919a:	18e2      	adds	r2, r4, r3
 801919c:	4b09      	ldr	r3, [pc, #36]	; (80191c4 <tcp_free_acked_segments+0xf4>)
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	dd9c      	ble.n	80190e0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80191a6:	68bb      	ldr	r3, [r7, #8]
}
 80191a8:	4618      	mov	r0, r3
 80191aa:	3718      	adds	r7, #24
 80191ac:	46bd      	mov	sp, r7
 80191ae:	bdb0      	pop	{r4, r5, r7, pc}
 80191b0:	08026bc0 	.word	0x08026bc0
 80191b4:	08026ec4 	.word	0x08026ec4
 80191b8:	08026c28 	.word	0x08026c28
 80191bc:	24004988 	.word	0x24004988
 80191c0:	08026eec 	.word	0x08026eec
 80191c4:	24004984 	.word	0x24004984

080191c8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80191c8:	b5b0      	push	{r4, r5, r7, lr}
 80191ca:	b094      	sub	sp, #80	; 0x50
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80191d0:	2300      	movs	r3, #0
 80191d2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d106      	bne.n	80191e8 <tcp_receive+0x20>
 80191da:	4ba6      	ldr	r3, [pc, #664]	; (8019474 <tcp_receive+0x2ac>)
 80191dc:	f240 427b 	movw	r2, #1147	; 0x47b
 80191e0:	49a5      	ldr	r1, [pc, #660]	; (8019478 <tcp_receive+0x2b0>)
 80191e2:	48a6      	ldr	r0, [pc, #664]	; (801947c <tcp_receive+0x2b4>)
 80191e4:	f008 fd9a 	bl	8021d1c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	7d1b      	ldrb	r3, [r3, #20]
 80191ec:	2b03      	cmp	r3, #3
 80191ee:	d806      	bhi.n	80191fe <tcp_receive+0x36>
 80191f0:	4ba0      	ldr	r3, [pc, #640]	; (8019474 <tcp_receive+0x2ac>)
 80191f2:	f240 427c 	movw	r2, #1148	; 0x47c
 80191f6:	49a2      	ldr	r1, [pc, #648]	; (8019480 <tcp_receive+0x2b8>)
 80191f8:	48a0      	ldr	r0, [pc, #640]	; (801947c <tcp_receive+0x2b4>)
 80191fa:	f008 fd8f 	bl	8021d1c <iprintf>

  if (flags & TCP_ACK) {
 80191fe:	4ba1      	ldr	r3, [pc, #644]	; (8019484 <tcp_receive+0x2bc>)
 8019200:	781b      	ldrb	r3, [r3, #0]
 8019202:	f003 0310 	and.w	r3, r3, #16
 8019206:	2b00      	cmp	r3, #0
 8019208:	f000 8263 	beq.w	80196d2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019212:	461a      	mov	r2, r3
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019218:	4413      	add	r3, r2
 801921a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019220:	4b99      	ldr	r3, [pc, #612]	; (8019488 <tcp_receive+0x2c0>)
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	1ad3      	subs	r3, r2, r3
 8019226:	2b00      	cmp	r3, #0
 8019228:	db1b      	blt.n	8019262 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801922e:	4b96      	ldr	r3, [pc, #600]	; (8019488 <tcp_receive+0x2c0>)
 8019230:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019232:	429a      	cmp	r2, r3
 8019234:	d106      	bne.n	8019244 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801923a:	4b94      	ldr	r3, [pc, #592]	; (801948c <tcp_receive+0x2c4>)
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	1ad3      	subs	r3, r2, r3
 8019240:	2b00      	cmp	r3, #0
 8019242:	db0e      	blt.n	8019262 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019248:	4b90      	ldr	r3, [pc, #576]	; (801948c <tcp_receive+0x2c4>)
 801924a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801924c:	429a      	cmp	r2, r3
 801924e:	d125      	bne.n	801929c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019250:	4b8f      	ldr	r3, [pc, #572]	; (8019490 <tcp_receive+0x2c8>)
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	89db      	ldrh	r3, [r3, #14]
 8019256:	b29a      	uxth	r2, r3
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801925e:	429a      	cmp	r2, r3
 8019260:	d91c      	bls.n	801929c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019262:	4b8b      	ldr	r3, [pc, #556]	; (8019490 <tcp_receive+0x2c8>)
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	89db      	ldrh	r3, [r3, #14]
 8019268:	b29a      	uxth	r2, r3
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801927c:	429a      	cmp	r2, r3
 801927e:	d205      	bcs.n	801928c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801928c:	4b7e      	ldr	r3, [pc, #504]	; (8019488 <tcp_receive+0x2c0>)
 801928e:	681a      	ldr	r2, [r3, #0]
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8019294:	4b7d      	ldr	r3, [pc, #500]	; (801948c <tcp_receive+0x2c4>)
 8019296:	681a      	ldr	r2, [r3, #0]
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801929c:	4b7b      	ldr	r3, [pc, #492]	; (801948c <tcp_receive+0x2c4>)
 801929e:	681a      	ldr	r2, [r3, #0]
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192a4:	1ad3      	subs	r3, r2, r3
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	dc58      	bgt.n	801935c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80192aa:	4b7a      	ldr	r3, [pc, #488]	; (8019494 <tcp_receive+0x2cc>)
 80192ac:	881b      	ldrh	r3, [r3, #0]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d14b      	bne.n	801934a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80192b6:	687a      	ldr	r2, [r7, #4]
 80192b8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80192bc:	4413      	add	r3, r2
 80192be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80192c0:	429a      	cmp	r2, r3
 80192c2:	d142      	bne.n	801934a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	db3d      	blt.n	801934a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80192d2:	4b6e      	ldr	r3, [pc, #440]	; (801948c <tcp_receive+0x2c4>)
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	429a      	cmp	r2, r3
 80192d8:	d137      	bne.n	801934a <tcp_receive+0x182>
              found_dupack = 1;
 80192da:	2301      	movs	r3, #1
 80192dc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80192e4:	2bff      	cmp	r3, #255	; 0xff
 80192e6:	d007      	beq.n	80192f8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80192ee:	3301      	adds	r3, #1
 80192f0:	b2da      	uxtb	r2, r3
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80192fe:	2b03      	cmp	r3, #3
 8019300:	d91b      	bls.n	801933a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801930c:	4413      	add	r3, r2
 801930e:	b29a      	uxth	r2, r3
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019316:	429a      	cmp	r2, r3
 8019318:	d30a      	bcc.n	8019330 <tcp_receive+0x168>
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019324:	4413      	add	r3, r2
 8019326:	b29a      	uxth	r2, r3
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801932e:	e004      	b.n	801933a <tcp_receive+0x172>
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019336:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019340:	2b02      	cmp	r3, #2
 8019342:	d902      	bls.n	801934a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8019344:	6878      	ldr	r0, [r7, #4]
 8019346:	f002 fb41 	bl	801b9cc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801934a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801934c:	2b00      	cmp	r3, #0
 801934e:	f040 8160 	bne.w	8019612 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	2200      	movs	r2, #0
 8019356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801935a:	e15a      	b.n	8019612 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801935c:	4b4b      	ldr	r3, [pc, #300]	; (801948c <tcp_receive+0x2c4>)
 801935e:	681a      	ldr	r2, [r3, #0]
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019364:	1ad3      	subs	r3, r2, r3
 8019366:	3b01      	subs	r3, #1
 8019368:	2b00      	cmp	r3, #0
 801936a:	f2c0 814d 	blt.w	8019608 <tcp_receive+0x440>
 801936e:	4b47      	ldr	r3, [pc, #284]	; (801948c <tcp_receive+0x2c4>)
 8019370:	681a      	ldr	r2, [r3, #0]
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019376:	1ad3      	subs	r3, r2, r3
 8019378:	2b00      	cmp	r3, #0
 801937a:	f300 8145 	bgt.w	8019608 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	8b5b      	ldrh	r3, [r3, #26]
 8019382:	f003 0304 	and.w	r3, r3, #4
 8019386:	2b00      	cmp	r3, #0
 8019388:	d010      	beq.n	80193ac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	8b5b      	ldrh	r3, [r3, #26]
 801938e:	f023 0304 	bic.w	r3, r3, #4
 8019392:	b29a      	uxth	r2, r3
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	2200      	movs	r2, #0
 80193a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	2200      	movs	r2, #0
 80193b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80193ba:	10db      	asrs	r3, r3, #3
 80193bc:	b21b      	sxth	r3, r3
 80193be:	b29a      	uxth	r2, r3
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80193c6:	b29b      	uxth	r3, r3
 80193c8:	4413      	add	r3, r2
 80193ca:	b29b      	uxth	r3, r3
 80193cc:	b21a      	sxth	r2, r3
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80193d4:	4b2d      	ldr	r3, [pc, #180]	; (801948c <tcp_receive+0x2c4>)
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	b29a      	uxth	r2, r3
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193de:	b29b      	uxth	r3, r3
 80193e0:	1ad3      	subs	r3, r2, r3
 80193e2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	2200      	movs	r2, #0
 80193e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80193ec:	4b27      	ldr	r3, [pc, #156]	; (801948c <tcp_receive+0x2c4>)
 80193ee:	681a      	ldr	r2, [r3, #0]
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	7d1b      	ldrb	r3, [r3, #20]
 80193f8:	2b03      	cmp	r3, #3
 80193fa:	f240 8096 	bls.w	801952a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801940a:	429a      	cmp	r2, r3
 801940c:	d244      	bcs.n	8019498 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	8b5b      	ldrh	r3, [r3, #26]
 8019412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019416:	2b00      	cmp	r3, #0
 8019418:	d001      	beq.n	801941e <tcp_receive+0x256>
 801941a:	2301      	movs	r3, #1
 801941c:	e000      	b.n	8019420 <tcp_receive+0x258>
 801941e:	2302      	movs	r3, #2
 8019420:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019424:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8019428:	b29a      	uxth	r2, r3
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801942e:	fb12 f303 	smulbb	r3, r2, r3
 8019432:	b29b      	uxth	r3, r3
 8019434:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019436:	4293      	cmp	r3, r2
 8019438:	bf28      	it	cs
 801943a:	4613      	movcs	r3, r2
 801943c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019444:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019446:	4413      	add	r3, r2
 8019448:	b29a      	uxth	r2, r3
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019450:	429a      	cmp	r2, r3
 8019452:	d309      	bcc.n	8019468 <tcp_receive+0x2a0>
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801945a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801945c:	4413      	add	r3, r2
 801945e:	b29a      	uxth	r2, r3
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019466:	e060      	b.n	801952a <tcp_receive+0x362>
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801946e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019472:	e05a      	b.n	801952a <tcp_receive+0x362>
 8019474:	08026bc0 	.word	0x08026bc0
 8019478:	08026f0c 	.word	0x08026f0c
 801947c:	08026c28 	.word	0x08026c28
 8019480:	08026f28 	.word	0x08026f28
 8019484:	2400498c 	.word	0x2400498c
 8019488:	24004980 	.word	0x24004980
 801948c:	24004984 	.word	0x24004984
 8019490:	24004970 	.word	0x24004970
 8019494:	2400498a 	.word	0x2400498a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801949e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80194a0:	4413      	add	r3, r2
 80194a2:	b29a      	uxth	r2, r3
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80194aa:	429a      	cmp	r2, r3
 80194ac:	d309      	bcc.n	80194c2 <tcp_receive+0x2fa>
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80194b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80194b6:	4413      	add	r3, r2
 80194b8:	b29a      	uxth	r2, r3
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80194c0:	e004      	b.n	80194cc <tcp_receive+0x304>
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80194d8:	429a      	cmp	r2, r3
 80194da:	d326      	bcc.n	801952a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80194e8:	1ad3      	subs	r3, r2, r3
 80194ea:	b29a      	uxth	r2, r3
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194fc:	4413      	add	r3, r2
 80194fe:	b29a      	uxth	r2, r3
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019506:	429a      	cmp	r2, r3
 8019508:	d30a      	bcc.n	8019520 <tcp_receive+0x358>
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019514:	4413      	add	r3, r2
 8019516:	b29a      	uxth	r2, r3
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801951e:	e004      	b.n	801952a <tcp_receive+0x362>
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019526:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019532:	4a98      	ldr	r2, [pc, #608]	; (8019794 <tcp_receive+0x5cc>)
 8019534:	6878      	ldr	r0, [r7, #4]
 8019536:	f7ff fdcb 	bl	80190d0 <tcp_free_acked_segments>
 801953a:	4602      	mov	r2, r0
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019548:	4a93      	ldr	r2, [pc, #588]	; (8019798 <tcp_receive+0x5d0>)
 801954a:	6878      	ldr	r0, [r7, #4]
 801954c:	f7ff fdc0 	bl	80190d0 <tcp_free_acked_segments>
 8019550:	4602      	mov	r2, r0
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801955a:	2b00      	cmp	r3, #0
 801955c:	d104      	bne.n	8019568 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019564:	861a      	strh	r2, [r3, #48]	; 0x30
 8019566:	e002      	b.n	801956e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	2200      	movs	r2, #0
 801956c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	2200      	movs	r2, #0
 8019572:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019578:	2b00      	cmp	r3, #0
 801957a:	d103      	bne.n	8019584 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	2200      	movs	r2, #0
 8019580:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801958a:	4b84      	ldr	r3, [pc, #528]	; (801979c <tcp_receive+0x5d4>)
 801958c:	881b      	ldrh	r3, [r3, #0]
 801958e:	4413      	add	r3, r2
 8019590:	b29a      	uxth	r2, r3
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	8b5b      	ldrh	r3, [r3, #26]
 801959c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d035      	beq.n	8019610 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d118      	bne.n	80195de <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d00c      	beq.n	80195ce <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195bc:	68db      	ldr	r3, [r3, #12]
 80195be:	685b      	ldr	r3, [r3, #4]
 80195c0:	4618      	mov	r0, r3
 80195c2:	f7f7 fa2e 	bl	8010a22 <lwip_htonl>
 80195c6:	4603      	mov	r3, r0
 80195c8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	dc20      	bgt.n	8019610 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	8b5b      	ldrh	r3, [r3, #26]
 80195d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80195d6:	b29a      	uxth	r2, r3
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80195dc:	e018      	b.n	8019610 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195e6:	68db      	ldr	r3, [r3, #12]
 80195e8:	685b      	ldr	r3, [r3, #4]
 80195ea:	4618      	mov	r0, r3
 80195ec:	f7f7 fa19 	bl	8010a22 <lwip_htonl>
 80195f0:	4603      	mov	r3, r0
 80195f2:	1ae3      	subs	r3, r4, r3
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	dc0b      	bgt.n	8019610 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	8b5b      	ldrh	r3, [r3, #26]
 80195fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019600:	b29a      	uxth	r2, r3
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019606:	e003      	b.n	8019610 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019608:	6878      	ldr	r0, [r7, #4]
 801960a:	f002 fbcd 	bl	801bda8 <tcp_send_empty_ack>
 801960e:	e000      	b.n	8019612 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019610:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019616:	2b00      	cmp	r3, #0
 8019618:	d05b      	beq.n	80196d2 <tcp_receive+0x50a>
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801961e:	4b60      	ldr	r3, [pc, #384]	; (80197a0 <tcp_receive+0x5d8>)
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	1ad3      	subs	r3, r2, r3
 8019624:	2b00      	cmp	r3, #0
 8019626:	da54      	bge.n	80196d2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019628:	4b5e      	ldr	r3, [pc, #376]	; (80197a4 <tcp_receive+0x5dc>)
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	b29a      	uxth	r2, r3
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019632:	b29b      	uxth	r3, r3
 8019634:	1ad3      	subs	r3, r2, r3
 8019636:	b29b      	uxth	r3, r3
 8019638:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801963c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019646:	10db      	asrs	r3, r3, #3
 8019648:	b21b      	sxth	r3, r3
 801964a:	b29b      	uxth	r3, r3
 801964c:	1ad3      	subs	r3, r2, r3
 801964e:	b29b      	uxth	r3, r3
 8019650:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801965a:	b29a      	uxth	r2, r3
 801965c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019660:	4413      	add	r3, r2
 8019662:	b29b      	uxth	r3, r3
 8019664:	b21a      	sxth	r2, r3
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801966a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801966e:	2b00      	cmp	r3, #0
 8019670:	da05      	bge.n	801967e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8019672:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019676:	425b      	negs	r3, r3
 8019678:	b29b      	uxth	r3, r3
 801967a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801967e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019688:	109b      	asrs	r3, r3, #2
 801968a:	b21b      	sxth	r3, r3
 801968c:	b29b      	uxth	r3, r3
 801968e:	1ad3      	subs	r3, r2, r3
 8019690:	b29b      	uxth	r3, r3
 8019692:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801969c:	b29a      	uxth	r2, r3
 801969e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80196a2:	4413      	add	r3, r2
 80196a4:	b29b      	uxth	r3, r3
 80196a6:	b21a      	sxth	r2, r3
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80196b2:	10db      	asrs	r3, r3, #3
 80196b4:	b21b      	sxth	r3, r3
 80196b6:	b29a      	uxth	r2, r3
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80196be:	b29b      	uxth	r3, r3
 80196c0:	4413      	add	r3, r2
 80196c2:	b29b      	uxth	r3, r3
 80196c4:	b21a      	sxth	r2, r3
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	2200      	movs	r2, #0
 80196d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80196d2:	4b35      	ldr	r3, [pc, #212]	; (80197a8 <tcp_receive+0x5e0>)
 80196d4:	881b      	ldrh	r3, [r3, #0]
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	f000 84e1 	beq.w	801a09e <tcp_receive+0xed6>
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	7d1b      	ldrb	r3, [r3, #20]
 80196e0:	2b06      	cmp	r3, #6
 80196e2:	f200 84dc 	bhi.w	801a09e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80196ea:	4b30      	ldr	r3, [pc, #192]	; (80197ac <tcp_receive+0x5e4>)
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	1ad3      	subs	r3, r2, r3
 80196f0:	3b01      	subs	r3, #1
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	f2c0 808e 	blt.w	8019814 <tcp_receive+0x64c>
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80196fc:	4b2a      	ldr	r3, [pc, #168]	; (80197a8 <tcp_receive+0x5e0>)
 80196fe:	881b      	ldrh	r3, [r3, #0]
 8019700:	4619      	mov	r1, r3
 8019702:	4b2a      	ldr	r3, [pc, #168]	; (80197ac <tcp_receive+0x5e4>)
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	440b      	add	r3, r1
 8019708:	1ad3      	subs	r3, r2, r3
 801970a:	3301      	adds	r3, #1
 801970c:	2b00      	cmp	r3, #0
 801970e:	f300 8081 	bgt.w	8019814 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019712:	4b27      	ldr	r3, [pc, #156]	; (80197b0 <tcp_receive+0x5e8>)
 8019714:	685b      	ldr	r3, [r3, #4]
 8019716:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801971c:	4b23      	ldr	r3, [pc, #140]	; (80197ac <tcp_receive+0x5e4>)
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	1ad3      	subs	r3, r2, r3
 8019722:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019724:	4b22      	ldr	r3, [pc, #136]	; (80197b0 <tcp_receive+0x5e8>)
 8019726:	685b      	ldr	r3, [r3, #4]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d106      	bne.n	801973a <tcp_receive+0x572>
 801972c:	4b21      	ldr	r3, [pc, #132]	; (80197b4 <tcp_receive+0x5ec>)
 801972e:	f240 5294 	movw	r2, #1428	; 0x594
 8019732:	4921      	ldr	r1, [pc, #132]	; (80197b8 <tcp_receive+0x5f0>)
 8019734:	4821      	ldr	r0, [pc, #132]	; (80197bc <tcp_receive+0x5f4>)
 8019736:	f008 faf1 	bl	8021d1c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801973c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019740:	4293      	cmp	r3, r2
 8019742:	d906      	bls.n	8019752 <tcp_receive+0x58a>
 8019744:	4b1b      	ldr	r3, [pc, #108]	; (80197b4 <tcp_receive+0x5ec>)
 8019746:	f240 5295 	movw	r2, #1429	; 0x595
 801974a:	491d      	ldr	r1, [pc, #116]	; (80197c0 <tcp_receive+0x5f8>)
 801974c:	481b      	ldr	r0, [pc, #108]	; (80197bc <tcp_receive+0x5f4>)
 801974e:	f008 fae5 	bl	8021d1c <iprintf>
      off = (u16_t)off32;
 8019752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019754:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019758:	4b15      	ldr	r3, [pc, #84]	; (80197b0 <tcp_receive+0x5e8>)
 801975a:	685b      	ldr	r3, [r3, #4]
 801975c:	891b      	ldrh	r3, [r3, #8]
 801975e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019762:	429a      	cmp	r2, r3
 8019764:	d906      	bls.n	8019774 <tcp_receive+0x5ac>
 8019766:	4b13      	ldr	r3, [pc, #76]	; (80197b4 <tcp_receive+0x5ec>)
 8019768:	f240 5297 	movw	r2, #1431	; 0x597
 801976c:	4915      	ldr	r1, [pc, #84]	; (80197c4 <tcp_receive+0x5fc>)
 801976e:	4813      	ldr	r0, [pc, #76]	; (80197bc <tcp_receive+0x5f4>)
 8019770:	f008 fad4 	bl	8021d1c <iprintf>
      inseg.len -= off;
 8019774:	4b0e      	ldr	r3, [pc, #56]	; (80197b0 <tcp_receive+0x5e8>)
 8019776:	891a      	ldrh	r2, [r3, #8]
 8019778:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801977c:	1ad3      	subs	r3, r2, r3
 801977e:	b29a      	uxth	r2, r3
 8019780:	4b0b      	ldr	r3, [pc, #44]	; (80197b0 <tcp_receive+0x5e8>)
 8019782:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019784:	4b0a      	ldr	r3, [pc, #40]	; (80197b0 <tcp_receive+0x5e8>)
 8019786:	685b      	ldr	r3, [r3, #4]
 8019788:	891a      	ldrh	r2, [r3, #8]
 801978a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801978e:	1ad3      	subs	r3, r2, r3
 8019790:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019792:	e029      	b.n	80197e8 <tcp_receive+0x620>
 8019794:	08026f44 	.word	0x08026f44
 8019798:	08026f4c 	.word	0x08026f4c
 801979c:	24004988 	.word	0x24004988
 80197a0:	24004984 	.word	0x24004984
 80197a4:	2400d250 	.word	0x2400d250
 80197a8:	2400498a 	.word	0x2400498a
 80197ac:	24004980 	.word	0x24004980
 80197b0:	24004960 	.word	0x24004960
 80197b4:	08026bc0 	.word	0x08026bc0
 80197b8:	08026f54 	.word	0x08026f54
 80197bc:	08026c28 	.word	0x08026c28
 80197c0:	08026f64 	.word	0x08026f64
 80197c4:	08026f74 	.word	0x08026f74
        off -= p->len;
 80197c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197ca:	895b      	ldrh	r3, [r3, #10]
 80197cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80197d0:	1ad3      	subs	r3, r2, r3
 80197d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80197d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80197da:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80197dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197de:	2200      	movs	r2, #0
 80197e0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80197e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80197e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197ea:	895b      	ldrh	r3, [r3, #10]
 80197ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80197f0:	429a      	cmp	r2, r3
 80197f2:	d8e9      	bhi.n	80197c8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80197f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80197f8:	4619      	mov	r1, r3
 80197fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80197fc:	f7fb f9f0 	bl	8014be0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019804:	4a91      	ldr	r2, [pc, #580]	; (8019a4c <tcp_receive+0x884>)
 8019806:	6013      	str	r3, [r2, #0]
 8019808:	4b91      	ldr	r3, [pc, #580]	; (8019a50 <tcp_receive+0x888>)
 801980a:	68db      	ldr	r3, [r3, #12]
 801980c:	4a8f      	ldr	r2, [pc, #572]	; (8019a4c <tcp_receive+0x884>)
 801980e:	6812      	ldr	r2, [r2, #0]
 8019810:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019812:	e00d      	b.n	8019830 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019814:	4b8d      	ldr	r3, [pc, #564]	; (8019a4c <tcp_receive+0x884>)
 8019816:	681a      	ldr	r2, [r3, #0]
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801981c:	1ad3      	subs	r3, r2, r3
 801981e:	2b00      	cmp	r3, #0
 8019820:	da06      	bge.n	8019830 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	8b5b      	ldrh	r3, [r3, #26]
 8019826:	f043 0302 	orr.w	r3, r3, #2
 801982a:	b29a      	uxth	r2, r3
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019830:	4b86      	ldr	r3, [pc, #536]	; (8019a4c <tcp_receive+0x884>)
 8019832:	681a      	ldr	r2, [r3, #0]
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019838:	1ad3      	subs	r3, r2, r3
 801983a:	2b00      	cmp	r3, #0
 801983c:	f2c0 842a 	blt.w	801a094 <tcp_receive+0xecc>
 8019840:	4b82      	ldr	r3, [pc, #520]	; (8019a4c <tcp_receive+0x884>)
 8019842:	681a      	ldr	r2, [r3, #0]
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019848:	6879      	ldr	r1, [r7, #4]
 801984a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801984c:	440b      	add	r3, r1
 801984e:	1ad3      	subs	r3, r2, r3
 8019850:	3301      	adds	r3, #1
 8019852:	2b00      	cmp	r3, #0
 8019854:	f300 841e 	bgt.w	801a094 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801985c:	4b7b      	ldr	r3, [pc, #492]	; (8019a4c <tcp_receive+0x884>)
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	429a      	cmp	r2, r3
 8019862:	f040 829a 	bne.w	8019d9a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019866:	4b7a      	ldr	r3, [pc, #488]	; (8019a50 <tcp_receive+0x888>)
 8019868:	891c      	ldrh	r4, [r3, #8]
 801986a:	4b79      	ldr	r3, [pc, #484]	; (8019a50 <tcp_receive+0x888>)
 801986c:	68db      	ldr	r3, [r3, #12]
 801986e:	899b      	ldrh	r3, [r3, #12]
 8019870:	b29b      	uxth	r3, r3
 8019872:	4618      	mov	r0, r3
 8019874:	f7f7 f8c0 	bl	80109f8 <lwip_htons>
 8019878:	4603      	mov	r3, r0
 801987a:	b2db      	uxtb	r3, r3
 801987c:	f003 0303 	and.w	r3, r3, #3
 8019880:	2b00      	cmp	r3, #0
 8019882:	d001      	beq.n	8019888 <tcp_receive+0x6c0>
 8019884:	2301      	movs	r3, #1
 8019886:	e000      	b.n	801988a <tcp_receive+0x6c2>
 8019888:	2300      	movs	r3, #0
 801988a:	4423      	add	r3, r4
 801988c:	b29a      	uxth	r2, r3
 801988e:	4b71      	ldr	r3, [pc, #452]	; (8019a54 <tcp_receive+0x88c>)
 8019890:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019896:	4b6f      	ldr	r3, [pc, #444]	; (8019a54 <tcp_receive+0x88c>)
 8019898:	881b      	ldrh	r3, [r3, #0]
 801989a:	429a      	cmp	r2, r3
 801989c:	d275      	bcs.n	801998a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801989e:	4b6c      	ldr	r3, [pc, #432]	; (8019a50 <tcp_receive+0x888>)
 80198a0:	68db      	ldr	r3, [r3, #12]
 80198a2:	899b      	ldrh	r3, [r3, #12]
 80198a4:	b29b      	uxth	r3, r3
 80198a6:	4618      	mov	r0, r3
 80198a8:	f7f7 f8a6 	bl	80109f8 <lwip_htons>
 80198ac:	4603      	mov	r3, r0
 80198ae:	b2db      	uxtb	r3, r3
 80198b0:	f003 0301 	and.w	r3, r3, #1
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d01f      	beq.n	80198f8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80198b8:	4b65      	ldr	r3, [pc, #404]	; (8019a50 <tcp_receive+0x888>)
 80198ba:	68db      	ldr	r3, [r3, #12]
 80198bc:	899b      	ldrh	r3, [r3, #12]
 80198be:	b29b      	uxth	r3, r3
 80198c0:	b21b      	sxth	r3, r3
 80198c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80198c6:	b21c      	sxth	r4, r3
 80198c8:	4b61      	ldr	r3, [pc, #388]	; (8019a50 <tcp_receive+0x888>)
 80198ca:	68db      	ldr	r3, [r3, #12]
 80198cc:	899b      	ldrh	r3, [r3, #12]
 80198ce:	b29b      	uxth	r3, r3
 80198d0:	4618      	mov	r0, r3
 80198d2:	f7f7 f891 	bl	80109f8 <lwip_htons>
 80198d6:	4603      	mov	r3, r0
 80198d8:	b2db      	uxtb	r3, r3
 80198da:	b29b      	uxth	r3, r3
 80198dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80198e0:	b29b      	uxth	r3, r3
 80198e2:	4618      	mov	r0, r3
 80198e4:	f7f7 f888 	bl	80109f8 <lwip_htons>
 80198e8:	4603      	mov	r3, r0
 80198ea:	b21b      	sxth	r3, r3
 80198ec:	4323      	orrs	r3, r4
 80198ee:	b21a      	sxth	r2, r3
 80198f0:	4b57      	ldr	r3, [pc, #348]	; (8019a50 <tcp_receive+0x888>)
 80198f2:	68db      	ldr	r3, [r3, #12]
 80198f4:	b292      	uxth	r2, r2
 80198f6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80198fc:	4b54      	ldr	r3, [pc, #336]	; (8019a50 <tcp_receive+0x888>)
 80198fe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019900:	4b53      	ldr	r3, [pc, #332]	; (8019a50 <tcp_receive+0x888>)
 8019902:	68db      	ldr	r3, [r3, #12]
 8019904:	899b      	ldrh	r3, [r3, #12]
 8019906:	b29b      	uxth	r3, r3
 8019908:	4618      	mov	r0, r3
 801990a:	f7f7 f875 	bl	80109f8 <lwip_htons>
 801990e:	4603      	mov	r3, r0
 8019910:	b2db      	uxtb	r3, r3
 8019912:	f003 0302 	and.w	r3, r3, #2
 8019916:	2b00      	cmp	r3, #0
 8019918:	d005      	beq.n	8019926 <tcp_receive+0x75e>
            inseg.len -= 1;
 801991a:	4b4d      	ldr	r3, [pc, #308]	; (8019a50 <tcp_receive+0x888>)
 801991c:	891b      	ldrh	r3, [r3, #8]
 801991e:	3b01      	subs	r3, #1
 8019920:	b29a      	uxth	r2, r3
 8019922:	4b4b      	ldr	r3, [pc, #300]	; (8019a50 <tcp_receive+0x888>)
 8019924:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019926:	4b4a      	ldr	r3, [pc, #296]	; (8019a50 <tcp_receive+0x888>)
 8019928:	685b      	ldr	r3, [r3, #4]
 801992a:	4a49      	ldr	r2, [pc, #292]	; (8019a50 <tcp_receive+0x888>)
 801992c:	8912      	ldrh	r2, [r2, #8]
 801992e:	4611      	mov	r1, r2
 8019930:	4618      	mov	r0, r3
 8019932:	f7fb f855 	bl	80149e0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019936:	4b46      	ldr	r3, [pc, #280]	; (8019a50 <tcp_receive+0x888>)
 8019938:	891c      	ldrh	r4, [r3, #8]
 801993a:	4b45      	ldr	r3, [pc, #276]	; (8019a50 <tcp_receive+0x888>)
 801993c:	68db      	ldr	r3, [r3, #12]
 801993e:	899b      	ldrh	r3, [r3, #12]
 8019940:	b29b      	uxth	r3, r3
 8019942:	4618      	mov	r0, r3
 8019944:	f7f7 f858 	bl	80109f8 <lwip_htons>
 8019948:	4603      	mov	r3, r0
 801994a:	b2db      	uxtb	r3, r3
 801994c:	f003 0303 	and.w	r3, r3, #3
 8019950:	2b00      	cmp	r3, #0
 8019952:	d001      	beq.n	8019958 <tcp_receive+0x790>
 8019954:	2301      	movs	r3, #1
 8019956:	e000      	b.n	801995a <tcp_receive+0x792>
 8019958:	2300      	movs	r3, #0
 801995a:	4423      	add	r3, r4
 801995c:	b29a      	uxth	r2, r3
 801995e:	4b3d      	ldr	r3, [pc, #244]	; (8019a54 <tcp_receive+0x88c>)
 8019960:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019962:	4b3c      	ldr	r3, [pc, #240]	; (8019a54 <tcp_receive+0x88c>)
 8019964:	881b      	ldrh	r3, [r3, #0]
 8019966:	461a      	mov	r2, r3
 8019968:	4b38      	ldr	r3, [pc, #224]	; (8019a4c <tcp_receive+0x884>)
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	441a      	add	r2, r3
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019972:	6879      	ldr	r1, [r7, #4]
 8019974:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019976:	440b      	add	r3, r1
 8019978:	429a      	cmp	r2, r3
 801997a:	d006      	beq.n	801998a <tcp_receive+0x7c2>
 801997c:	4b36      	ldr	r3, [pc, #216]	; (8019a58 <tcp_receive+0x890>)
 801997e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8019982:	4936      	ldr	r1, [pc, #216]	; (8019a5c <tcp_receive+0x894>)
 8019984:	4836      	ldr	r0, [pc, #216]	; (8019a60 <tcp_receive+0x898>)
 8019986:	f008 f9c9 	bl	8021d1c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801998e:	2b00      	cmp	r3, #0
 8019990:	f000 80e7 	beq.w	8019b62 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019994:	4b2e      	ldr	r3, [pc, #184]	; (8019a50 <tcp_receive+0x888>)
 8019996:	68db      	ldr	r3, [r3, #12]
 8019998:	899b      	ldrh	r3, [r3, #12]
 801999a:	b29b      	uxth	r3, r3
 801999c:	4618      	mov	r0, r3
 801999e:	f7f7 f82b 	bl	80109f8 <lwip_htons>
 80199a2:	4603      	mov	r3, r0
 80199a4:	b2db      	uxtb	r3, r3
 80199a6:	f003 0301 	and.w	r3, r3, #1
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d010      	beq.n	80199d0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80199ae:	e00a      	b.n	80199c6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80199b4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80199ba:	681a      	ldr	r2, [r3, #0]
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80199c0:	68f8      	ldr	r0, [r7, #12]
 80199c2:	f7fd fcc8 	bl	8017356 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d1f0      	bne.n	80199b0 <tcp_receive+0x7e8>
 80199ce:	e0c8      	b.n	8019b62 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80199d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80199d6:	e052      	b.n	8019a7e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80199d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199da:	68db      	ldr	r3, [r3, #12]
 80199dc:	899b      	ldrh	r3, [r3, #12]
 80199de:	b29b      	uxth	r3, r3
 80199e0:	4618      	mov	r0, r3
 80199e2:	f7f7 f809 	bl	80109f8 <lwip_htons>
 80199e6:	4603      	mov	r3, r0
 80199e8:	b2db      	uxtb	r3, r3
 80199ea:	f003 0301 	and.w	r3, r3, #1
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d03d      	beq.n	8019a6e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80199f2:	4b17      	ldr	r3, [pc, #92]	; (8019a50 <tcp_receive+0x888>)
 80199f4:	68db      	ldr	r3, [r3, #12]
 80199f6:	899b      	ldrh	r3, [r3, #12]
 80199f8:	b29b      	uxth	r3, r3
 80199fa:	4618      	mov	r0, r3
 80199fc:	f7f6 fffc 	bl	80109f8 <lwip_htons>
 8019a00:	4603      	mov	r3, r0
 8019a02:	b2db      	uxtb	r3, r3
 8019a04:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d130      	bne.n	8019a6e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019a0c:	4b10      	ldr	r3, [pc, #64]	; (8019a50 <tcp_receive+0x888>)
 8019a0e:	68db      	ldr	r3, [r3, #12]
 8019a10:	899b      	ldrh	r3, [r3, #12]
 8019a12:	b29c      	uxth	r4, r3
 8019a14:	2001      	movs	r0, #1
 8019a16:	f7f6 ffef 	bl	80109f8 <lwip_htons>
 8019a1a:	4603      	mov	r3, r0
 8019a1c:	461a      	mov	r2, r3
 8019a1e:	4b0c      	ldr	r3, [pc, #48]	; (8019a50 <tcp_receive+0x888>)
 8019a20:	68db      	ldr	r3, [r3, #12]
 8019a22:	4322      	orrs	r2, r4
 8019a24:	b292      	uxth	r2, r2
 8019a26:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019a28:	4b09      	ldr	r3, [pc, #36]	; (8019a50 <tcp_receive+0x888>)
 8019a2a:	891c      	ldrh	r4, [r3, #8]
 8019a2c:	4b08      	ldr	r3, [pc, #32]	; (8019a50 <tcp_receive+0x888>)
 8019a2e:	68db      	ldr	r3, [r3, #12]
 8019a30:	899b      	ldrh	r3, [r3, #12]
 8019a32:	b29b      	uxth	r3, r3
 8019a34:	4618      	mov	r0, r3
 8019a36:	f7f6 ffdf 	bl	80109f8 <lwip_htons>
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	b2db      	uxtb	r3, r3
 8019a3e:	f003 0303 	and.w	r3, r3, #3
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d00e      	beq.n	8019a64 <tcp_receive+0x89c>
 8019a46:	2301      	movs	r3, #1
 8019a48:	e00d      	b.n	8019a66 <tcp_receive+0x89e>
 8019a4a:	bf00      	nop
 8019a4c:	24004980 	.word	0x24004980
 8019a50:	24004960 	.word	0x24004960
 8019a54:	2400498a 	.word	0x2400498a
 8019a58:	08026bc0 	.word	0x08026bc0
 8019a5c:	08026f84 	.word	0x08026f84
 8019a60:	08026c28 	.word	0x08026c28
 8019a64:	2300      	movs	r3, #0
 8019a66:	4423      	add	r3, r4
 8019a68:	b29a      	uxth	r2, r3
 8019a6a:	4b98      	ldr	r3, [pc, #608]	; (8019ccc <tcp_receive+0xb04>)
 8019a6c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a70:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019a78:	6938      	ldr	r0, [r7, #16]
 8019a7a:	f7fd fc6c 	bl	8017356 <tcp_seg_free>
            while (next &&
 8019a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d00e      	beq.n	8019aa2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019a84:	4b91      	ldr	r3, [pc, #580]	; (8019ccc <tcp_receive+0xb04>)
 8019a86:	881b      	ldrh	r3, [r3, #0]
 8019a88:	461a      	mov	r2, r3
 8019a8a:	4b91      	ldr	r3, [pc, #580]	; (8019cd0 <tcp_receive+0xb08>)
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	441a      	add	r2, r3
 8019a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a92:	68db      	ldr	r3, [r3, #12]
 8019a94:	685b      	ldr	r3, [r3, #4]
 8019a96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019a98:	8909      	ldrh	r1, [r1, #8]
 8019a9a:	440b      	add	r3, r1
 8019a9c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	da9a      	bge.n	80199d8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d059      	beq.n	8019b5c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019aa8:	4b88      	ldr	r3, [pc, #544]	; (8019ccc <tcp_receive+0xb04>)
 8019aaa:	881b      	ldrh	r3, [r3, #0]
 8019aac:	461a      	mov	r2, r3
 8019aae:	4b88      	ldr	r3, [pc, #544]	; (8019cd0 <tcp_receive+0xb08>)
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	441a      	add	r2, r3
 8019ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ab6:	68db      	ldr	r3, [r3, #12]
 8019ab8:	685b      	ldr	r3, [r3, #4]
 8019aba:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	dd4d      	ble.n	8019b5c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ac2:	68db      	ldr	r3, [r3, #12]
 8019ac4:	685b      	ldr	r3, [r3, #4]
 8019ac6:	b29a      	uxth	r2, r3
 8019ac8:	4b81      	ldr	r3, [pc, #516]	; (8019cd0 <tcp_receive+0xb08>)
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	b29b      	uxth	r3, r3
 8019ace:	1ad3      	subs	r3, r2, r3
 8019ad0:	b29a      	uxth	r2, r3
 8019ad2:	4b80      	ldr	r3, [pc, #512]	; (8019cd4 <tcp_receive+0xb0c>)
 8019ad4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019ad6:	4b7f      	ldr	r3, [pc, #508]	; (8019cd4 <tcp_receive+0xb0c>)
 8019ad8:	68db      	ldr	r3, [r3, #12]
 8019ada:	899b      	ldrh	r3, [r3, #12]
 8019adc:	b29b      	uxth	r3, r3
 8019ade:	4618      	mov	r0, r3
 8019ae0:	f7f6 ff8a 	bl	80109f8 <lwip_htons>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	b2db      	uxtb	r3, r3
 8019ae8:	f003 0302 	and.w	r3, r3, #2
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d005      	beq.n	8019afc <tcp_receive+0x934>
                inseg.len -= 1;
 8019af0:	4b78      	ldr	r3, [pc, #480]	; (8019cd4 <tcp_receive+0xb0c>)
 8019af2:	891b      	ldrh	r3, [r3, #8]
 8019af4:	3b01      	subs	r3, #1
 8019af6:	b29a      	uxth	r2, r3
 8019af8:	4b76      	ldr	r3, [pc, #472]	; (8019cd4 <tcp_receive+0xb0c>)
 8019afa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019afc:	4b75      	ldr	r3, [pc, #468]	; (8019cd4 <tcp_receive+0xb0c>)
 8019afe:	685b      	ldr	r3, [r3, #4]
 8019b00:	4a74      	ldr	r2, [pc, #464]	; (8019cd4 <tcp_receive+0xb0c>)
 8019b02:	8912      	ldrh	r2, [r2, #8]
 8019b04:	4611      	mov	r1, r2
 8019b06:	4618      	mov	r0, r3
 8019b08:	f7fa ff6a 	bl	80149e0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019b0c:	4b71      	ldr	r3, [pc, #452]	; (8019cd4 <tcp_receive+0xb0c>)
 8019b0e:	891c      	ldrh	r4, [r3, #8]
 8019b10:	4b70      	ldr	r3, [pc, #448]	; (8019cd4 <tcp_receive+0xb0c>)
 8019b12:	68db      	ldr	r3, [r3, #12]
 8019b14:	899b      	ldrh	r3, [r3, #12]
 8019b16:	b29b      	uxth	r3, r3
 8019b18:	4618      	mov	r0, r3
 8019b1a:	f7f6 ff6d 	bl	80109f8 <lwip_htons>
 8019b1e:	4603      	mov	r3, r0
 8019b20:	b2db      	uxtb	r3, r3
 8019b22:	f003 0303 	and.w	r3, r3, #3
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d001      	beq.n	8019b2e <tcp_receive+0x966>
 8019b2a:	2301      	movs	r3, #1
 8019b2c:	e000      	b.n	8019b30 <tcp_receive+0x968>
 8019b2e:	2300      	movs	r3, #0
 8019b30:	4423      	add	r3, r4
 8019b32:	b29a      	uxth	r2, r3
 8019b34:	4b65      	ldr	r3, [pc, #404]	; (8019ccc <tcp_receive+0xb04>)
 8019b36:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019b38:	4b64      	ldr	r3, [pc, #400]	; (8019ccc <tcp_receive+0xb04>)
 8019b3a:	881b      	ldrh	r3, [r3, #0]
 8019b3c:	461a      	mov	r2, r3
 8019b3e:	4b64      	ldr	r3, [pc, #400]	; (8019cd0 <tcp_receive+0xb08>)
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	441a      	add	r2, r3
 8019b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b46:	68db      	ldr	r3, [r3, #12]
 8019b48:	685b      	ldr	r3, [r3, #4]
 8019b4a:	429a      	cmp	r2, r3
 8019b4c:	d006      	beq.n	8019b5c <tcp_receive+0x994>
 8019b4e:	4b62      	ldr	r3, [pc, #392]	; (8019cd8 <tcp_receive+0xb10>)
 8019b50:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8019b54:	4961      	ldr	r1, [pc, #388]	; (8019cdc <tcp_receive+0xb14>)
 8019b56:	4862      	ldr	r0, [pc, #392]	; (8019ce0 <tcp_receive+0xb18>)
 8019b58:	f008 f8e0 	bl	8021d1c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019b60:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019b62:	4b5a      	ldr	r3, [pc, #360]	; (8019ccc <tcp_receive+0xb04>)
 8019b64:	881b      	ldrh	r3, [r3, #0]
 8019b66:	461a      	mov	r2, r3
 8019b68:	4b59      	ldr	r3, [pc, #356]	; (8019cd0 <tcp_receive+0xb08>)
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	441a      	add	r2, r3
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019b76:	4b55      	ldr	r3, [pc, #340]	; (8019ccc <tcp_receive+0xb04>)
 8019b78:	881b      	ldrh	r3, [r3, #0]
 8019b7a:	429a      	cmp	r2, r3
 8019b7c:	d206      	bcs.n	8019b8c <tcp_receive+0x9c4>
 8019b7e:	4b56      	ldr	r3, [pc, #344]	; (8019cd8 <tcp_receive+0xb10>)
 8019b80:	f240 6207 	movw	r2, #1543	; 0x607
 8019b84:	4957      	ldr	r1, [pc, #348]	; (8019ce4 <tcp_receive+0xb1c>)
 8019b86:	4856      	ldr	r0, [pc, #344]	; (8019ce0 <tcp_receive+0xb18>)
 8019b88:	f008 f8c8 	bl	8021d1c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019b90:	4b4e      	ldr	r3, [pc, #312]	; (8019ccc <tcp_receive+0xb04>)
 8019b92:	881b      	ldrh	r3, [r3, #0]
 8019b94:	1ad3      	subs	r3, r2, r3
 8019b96:	b29a      	uxth	r2, r3
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019b9c:	6878      	ldr	r0, [r7, #4]
 8019b9e:	f7fc fd9d 	bl	80166dc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019ba2:	4b4c      	ldr	r3, [pc, #304]	; (8019cd4 <tcp_receive+0xb0c>)
 8019ba4:	685b      	ldr	r3, [r3, #4]
 8019ba6:	891b      	ldrh	r3, [r3, #8]
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d006      	beq.n	8019bba <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019bac:	4b49      	ldr	r3, [pc, #292]	; (8019cd4 <tcp_receive+0xb0c>)
 8019bae:	685b      	ldr	r3, [r3, #4]
 8019bb0:	4a4d      	ldr	r2, [pc, #308]	; (8019ce8 <tcp_receive+0xb20>)
 8019bb2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019bb4:	4b47      	ldr	r3, [pc, #284]	; (8019cd4 <tcp_receive+0xb0c>)
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019bba:	4b46      	ldr	r3, [pc, #280]	; (8019cd4 <tcp_receive+0xb0c>)
 8019bbc:	68db      	ldr	r3, [r3, #12]
 8019bbe:	899b      	ldrh	r3, [r3, #12]
 8019bc0:	b29b      	uxth	r3, r3
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	f7f6 ff18 	bl	80109f8 <lwip_htons>
 8019bc8:	4603      	mov	r3, r0
 8019bca:	b2db      	uxtb	r3, r3
 8019bcc:	f003 0301 	and.w	r3, r3, #1
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	f000 80b8 	beq.w	8019d46 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019bd6:	4b45      	ldr	r3, [pc, #276]	; (8019cec <tcp_receive+0xb24>)
 8019bd8:	781b      	ldrb	r3, [r3, #0]
 8019bda:	f043 0320 	orr.w	r3, r3, #32
 8019bde:	b2da      	uxtb	r2, r3
 8019be0:	4b42      	ldr	r3, [pc, #264]	; (8019cec <tcp_receive+0xb24>)
 8019be2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019be4:	e0af      	b.n	8019d46 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019bea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019bf0:	68db      	ldr	r3, [r3, #12]
 8019bf2:	685b      	ldr	r3, [r3, #4]
 8019bf4:	4a36      	ldr	r2, [pc, #216]	; (8019cd0 <tcp_receive+0xb08>)
 8019bf6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019bf8:	68bb      	ldr	r3, [r7, #8]
 8019bfa:	891b      	ldrh	r3, [r3, #8]
 8019bfc:	461c      	mov	r4, r3
 8019bfe:	68bb      	ldr	r3, [r7, #8]
 8019c00:	68db      	ldr	r3, [r3, #12]
 8019c02:	899b      	ldrh	r3, [r3, #12]
 8019c04:	b29b      	uxth	r3, r3
 8019c06:	4618      	mov	r0, r3
 8019c08:	f7f6 fef6 	bl	80109f8 <lwip_htons>
 8019c0c:	4603      	mov	r3, r0
 8019c0e:	b2db      	uxtb	r3, r3
 8019c10:	f003 0303 	and.w	r3, r3, #3
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d001      	beq.n	8019c1c <tcp_receive+0xa54>
 8019c18:	2301      	movs	r3, #1
 8019c1a:	e000      	b.n	8019c1e <tcp_receive+0xa56>
 8019c1c:	2300      	movs	r3, #0
 8019c1e:	191a      	adds	r2, r3, r4
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c24:	441a      	add	r2, r3
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019c2e:	461c      	mov	r4, r3
 8019c30:	68bb      	ldr	r3, [r7, #8]
 8019c32:	891b      	ldrh	r3, [r3, #8]
 8019c34:	461d      	mov	r5, r3
 8019c36:	68bb      	ldr	r3, [r7, #8]
 8019c38:	68db      	ldr	r3, [r3, #12]
 8019c3a:	899b      	ldrh	r3, [r3, #12]
 8019c3c:	b29b      	uxth	r3, r3
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f7f6 feda 	bl	80109f8 <lwip_htons>
 8019c44:	4603      	mov	r3, r0
 8019c46:	b2db      	uxtb	r3, r3
 8019c48:	f003 0303 	and.w	r3, r3, #3
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d001      	beq.n	8019c54 <tcp_receive+0xa8c>
 8019c50:	2301      	movs	r3, #1
 8019c52:	e000      	b.n	8019c56 <tcp_receive+0xa8e>
 8019c54:	2300      	movs	r3, #0
 8019c56:	442b      	add	r3, r5
 8019c58:	429c      	cmp	r4, r3
 8019c5a:	d206      	bcs.n	8019c6a <tcp_receive+0xaa2>
 8019c5c:	4b1e      	ldr	r3, [pc, #120]	; (8019cd8 <tcp_receive+0xb10>)
 8019c5e:	f240 622b 	movw	r2, #1579	; 0x62b
 8019c62:	4923      	ldr	r1, [pc, #140]	; (8019cf0 <tcp_receive+0xb28>)
 8019c64:	481e      	ldr	r0, [pc, #120]	; (8019ce0 <tcp_receive+0xb18>)
 8019c66:	f008 f859 	bl	8021d1c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019c6a:	68bb      	ldr	r3, [r7, #8]
 8019c6c:	891b      	ldrh	r3, [r3, #8]
 8019c6e:	461c      	mov	r4, r3
 8019c70:	68bb      	ldr	r3, [r7, #8]
 8019c72:	68db      	ldr	r3, [r3, #12]
 8019c74:	899b      	ldrh	r3, [r3, #12]
 8019c76:	b29b      	uxth	r3, r3
 8019c78:	4618      	mov	r0, r3
 8019c7a:	f7f6 febd 	bl	80109f8 <lwip_htons>
 8019c7e:	4603      	mov	r3, r0
 8019c80:	b2db      	uxtb	r3, r3
 8019c82:	f003 0303 	and.w	r3, r3, #3
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d001      	beq.n	8019c8e <tcp_receive+0xac6>
 8019c8a:	2301      	movs	r3, #1
 8019c8c:	e000      	b.n	8019c90 <tcp_receive+0xac8>
 8019c8e:	2300      	movs	r3, #0
 8019c90:	1919      	adds	r1, r3, r4
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019c96:	b28b      	uxth	r3, r1
 8019c98:	1ad3      	subs	r3, r2, r3
 8019c9a:	b29a      	uxth	r2, r3
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019ca0:	6878      	ldr	r0, [r7, #4]
 8019ca2:	f7fc fd1b 	bl	80166dc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8019ca6:	68bb      	ldr	r3, [r7, #8]
 8019ca8:	685b      	ldr	r3, [r3, #4]
 8019caa:	891b      	ldrh	r3, [r3, #8]
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d028      	beq.n	8019d02 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019cb0:	4b0d      	ldr	r3, [pc, #52]	; (8019ce8 <tcp_receive+0xb20>)
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d01d      	beq.n	8019cf4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8019cb8:	4b0b      	ldr	r3, [pc, #44]	; (8019ce8 <tcp_receive+0xb20>)
 8019cba:	681a      	ldr	r2, [r3, #0]
 8019cbc:	68bb      	ldr	r3, [r7, #8]
 8019cbe:	685b      	ldr	r3, [r3, #4]
 8019cc0:	4619      	mov	r1, r3
 8019cc2:	4610      	mov	r0, r2
 8019cc4:	f7fb f8e0 	bl	8014e88 <pbuf_cat>
 8019cc8:	e018      	b.n	8019cfc <tcp_receive+0xb34>
 8019cca:	bf00      	nop
 8019ccc:	2400498a 	.word	0x2400498a
 8019cd0:	24004980 	.word	0x24004980
 8019cd4:	24004960 	.word	0x24004960
 8019cd8:	08026bc0 	.word	0x08026bc0
 8019cdc:	08026fbc 	.word	0x08026fbc
 8019ce0:	08026c28 	.word	0x08026c28
 8019ce4:	08026ff8 	.word	0x08026ff8
 8019ce8:	24004990 	.word	0x24004990
 8019cec:	2400498d 	.word	0x2400498d
 8019cf0:	08027018 	.word	0x08027018
            } else {
              recv_data = cseg->p;
 8019cf4:	68bb      	ldr	r3, [r7, #8]
 8019cf6:	685b      	ldr	r3, [r3, #4]
 8019cf8:	4a70      	ldr	r2, [pc, #448]	; (8019ebc <tcp_receive+0xcf4>)
 8019cfa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019cfc:	68bb      	ldr	r3, [r7, #8]
 8019cfe:	2200      	movs	r2, #0
 8019d00:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019d02:	68bb      	ldr	r3, [r7, #8]
 8019d04:	68db      	ldr	r3, [r3, #12]
 8019d06:	899b      	ldrh	r3, [r3, #12]
 8019d08:	b29b      	uxth	r3, r3
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	f7f6 fe74 	bl	80109f8 <lwip_htons>
 8019d10:	4603      	mov	r3, r0
 8019d12:	b2db      	uxtb	r3, r3
 8019d14:	f003 0301 	and.w	r3, r3, #1
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d00d      	beq.n	8019d38 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019d1c:	4b68      	ldr	r3, [pc, #416]	; (8019ec0 <tcp_receive+0xcf8>)
 8019d1e:	781b      	ldrb	r3, [r3, #0]
 8019d20:	f043 0320 	orr.w	r3, r3, #32
 8019d24:	b2da      	uxtb	r2, r3
 8019d26:	4b66      	ldr	r3, [pc, #408]	; (8019ec0 <tcp_receive+0xcf8>)
 8019d28:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	7d1b      	ldrb	r3, [r3, #20]
 8019d2e:	2b04      	cmp	r3, #4
 8019d30:	d102      	bne.n	8019d38 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	2207      	movs	r2, #7
 8019d36:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019d38:	68bb      	ldr	r3, [r7, #8]
 8019d3a:	681a      	ldr	r2, [r3, #0]
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8019d40:	68b8      	ldr	r0, [r7, #8]
 8019d42:	f7fd fb08 	bl	8017356 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d008      	beq.n	8019d60 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d52:	68db      	ldr	r3, [r3, #12]
 8019d54:	685a      	ldr	r2, [r3, #4]
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8019d5a:	429a      	cmp	r2, r3
 8019d5c:	f43f af43 	beq.w	8019be6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	8b5b      	ldrh	r3, [r3, #26]
 8019d64:	f003 0301 	and.w	r3, r3, #1
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d00e      	beq.n	8019d8a <tcp_receive+0xbc2>
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	8b5b      	ldrh	r3, [r3, #26]
 8019d70:	f023 0301 	bic.w	r3, r3, #1
 8019d74:	b29a      	uxth	r2, r3
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	835a      	strh	r2, [r3, #26]
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	8b5b      	ldrh	r3, [r3, #26]
 8019d7e:	f043 0302 	orr.w	r3, r3, #2
 8019d82:	b29a      	uxth	r2, r3
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019d88:	e188      	b.n	801a09c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	8b5b      	ldrh	r3, [r3, #26]
 8019d8e:	f043 0301 	orr.w	r3, r3, #1
 8019d92:	b29a      	uxth	r2, r3
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019d98:	e180      	b.n	801a09c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d106      	bne.n	8019db0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019da2:	4848      	ldr	r0, [pc, #288]	; (8019ec4 <tcp_receive+0xcfc>)
 8019da4:	f7fd faf0 	bl	8017388 <tcp_seg_copy>
 8019da8:	4602      	mov	r2, r0
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	675a      	str	r2, [r3, #116]	; 0x74
 8019dae:	e16d      	b.n	801a08c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019db0:	2300      	movs	r3, #0
 8019db2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8019dba:	e157      	b.n	801a06c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8019dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019dbe:	68db      	ldr	r3, [r3, #12]
 8019dc0:	685a      	ldr	r2, [r3, #4]
 8019dc2:	4b41      	ldr	r3, [pc, #260]	; (8019ec8 <tcp_receive+0xd00>)
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	429a      	cmp	r2, r3
 8019dc8:	d11d      	bne.n	8019e06 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019dca:	4b3e      	ldr	r3, [pc, #248]	; (8019ec4 <tcp_receive+0xcfc>)
 8019dcc:	891a      	ldrh	r2, [r3, #8]
 8019dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019dd0:	891b      	ldrh	r3, [r3, #8]
 8019dd2:	429a      	cmp	r2, r3
 8019dd4:	f240 814f 	bls.w	801a076 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019dd8:	483a      	ldr	r0, [pc, #232]	; (8019ec4 <tcp_receive+0xcfc>)
 8019dda:	f7fd fad5 	bl	8017388 <tcp_seg_copy>
 8019dde:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8019de0:	697b      	ldr	r3, [r7, #20]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	f000 8149 	beq.w	801a07a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8019de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d003      	beq.n	8019df6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8019dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019df0:	697a      	ldr	r2, [r7, #20]
 8019df2:	601a      	str	r2, [r3, #0]
 8019df4:	e002      	b.n	8019dfc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	697a      	ldr	r2, [r7, #20]
 8019dfa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019dfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019dfe:	6978      	ldr	r0, [r7, #20]
 8019e00:	f7ff f8de 	bl	8018fc0 <tcp_oos_insert_segment>
                }
                break;
 8019e04:	e139      	b.n	801a07a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8019e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d117      	bne.n	8019e3c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019e0c:	4b2e      	ldr	r3, [pc, #184]	; (8019ec8 <tcp_receive+0xd00>)
 8019e0e:	681a      	ldr	r2, [r3, #0]
 8019e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e12:	68db      	ldr	r3, [r3, #12]
 8019e14:	685b      	ldr	r3, [r3, #4]
 8019e16:	1ad3      	subs	r3, r2, r3
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	da57      	bge.n	8019ecc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019e1c:	4829      	ldr	r0, [pc, #164]	; (8019ec4 <tcp_receive+0xcfc>)
 8019e1e:	f7fd fab3 	bl	8017388 <tcp_seg_copy>
 8019e22:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019e24:	69bb      	ldr	r3, [r7, #24]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	f000 8129 	beq.w	801a07e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	69ba      	ldr	r2, [r7, #24]
 8019e30:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8019e32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019e34:	69b8      	ldr	r0, [r7, #24]
 8019e36:	f7ff f8c3 	bl	8018fc0 <tcp_oos_insert_segment>
                  }
                  break;
 8019e3a:	e120      	b.n	801a07e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019e3c:	4b22      	ldr	r3, [pc, #136]	; (8019ec8 <tcp_receive+0xd00>)
 8019e3e:	681a      	ldr	r2, [r3, #0]
 8019e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e42:	68db      	ldr	r3, [r3, #12]
 8019e44:	685b      	ldr	r3, [r3, #4]
 8019e46:	1ad3      	subs	r3, r2, r3
 8019e48:	3b01      	subs	r3, #1
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	db3e      	blt.n	8019ecc <tcp_receive+0xd04>
 8019e4e:	4b1e      	ldr	r3, [pc, #120]	; (8019ec8 <tcp_receive+0xd00>)
 8019e50:	681a      	ldr	r2, [r3, #0]
 8019e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e54:	68db      	ldr	r3, [r3, #12]
 8019e56:	685b      	ldr	r3, [r3, #4]
 8019e58:	1ad3      	subs	r3, r2, r3
 8019e5a:	3301      	adds	r3, #1
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	dc35      	bgt.n	8019ecc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019e60:	4818      	ldr	r0, [pc, #96]	; (8019ec4 <tcp_receive+0xcfc>)
 8019e62:	f7fd fa91 	bl	8017388 <tcp_seg_copy>
 8019e66:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019e68:	69fb      	ldr	r3, [r7, #28]
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	f000 8109 	beq.w	801a082 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e72:	68db      	ldr	r3, [r3, #12]
 8019e74:	685b      	ldr	r3, [r3, #4]
 8019e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019e78:	8912      	ldrh	r2, [r2, #8]
 8019e7a:	441a      	add	r2, r3
 8019e7c:	4b12      	ldr	r3, [pc, #72]	; (8019ec8 <tcp_receive+0xd00>)
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	1ad3      	subs	r3, r2, r3
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	dd12      	ble.n	8019eac <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019e86:	4b10      	ldr	r3, [pc, #64]	; (8019ec8 <tcp_receive+0xd00>)
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	b29a      	uxth	r2, r3
 8019e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e8e:	68db      	ldr	r3, [r3, #12]
 8019e90:	685b      	ldr	r3, [r3, #4]
 8019e92:	b29b      	uxth	r3, r3
 8019e94:	1ad3      	subs	r3, r2, r3
 8019e96:	b29a      	uxth	r2, r3
 8019e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e9a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e9e:	685a      	ldr	r2, [r3, #4]
 8019ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ea2:	891b      	ldrh	r3, [r3, #8]
 8019ea4:	4619      	mov	r1, r3
 8019ea6:	4610      	mov	r0, r2
 8019ea8:	f7fa fd9a 	bl	80149e0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019eae:	69fa      	ldr	r2, [r7, #28]
 8019eb0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019eb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019eb4:	69f8      	ldr	r0, [r7, #28]
 8019eb6:	f7ff f883 	bl	8018fc0 <tcp_oos_insert_segment>
                  }
                  break;
 8019eba:	e0e2      	b.n	801a082 <tcp_receive+0xeba>
 8019ebc:	24004990 	.word	0x24004990
 8019ec0:	2400498d 	.word	0x2400498d
 8019ec4:	24004960 	.word	0x24004960
 8019ec8:	24004980 	.word	0x24004980
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ece:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	f040 80c6 	bne.w	801a066 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019eda:	4b80      	ldr	r3, [pc, #512]	; (801a0dc <tcp_receive+0xf14>)
 8019edc:	681a      	ldr	r2, [r3, #0]
 8019ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ee0:	68db      	ldr	r3, [r3, #12]
 8019ee2:	685b      	ldr	r3, [r3, #4]
 8019ee4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	f340 80bd 	ble.w	801a066 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019eee:	68db      	ldr	r3, [r3, #12]
 8019ef0:	899b      	ldrh	r3, [r3, #12]
 8019ef2:	b29b      	uxth	r3, r3
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f7f6 fd7f 	bl	80109f8 <lwip_htons>
 8019efa:	4603      	mov	r3, r0
 8019efc:	b2db      	uxtb	r3, r3
 8019efe:	f003 0301 	and.w	r3, r3, #1
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	f040 80bf 	bne.w	801a086 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019f08:	4875      	ldr	r0, [pc, #468]	; (801a0e0 <tcp_receive+0xf18>)
 8019f0a:	f7fd fa3d 	bl	8017388 <tcp_seg_copy>
 8019f0e:	4602      	mov	r2, r0
 8019f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f12:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	f000 80b6 	beq.w	801a08a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f20:	68db      	ldr	r3, [r3, #12]
 8019f22:	685b      	ldr	r3, [r3, #4]
 8019f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019f26:	8912      	ldrh	r2, [r2, #8]
 8019f28:	441a      	add	r2, r3
 8019f2a:	4b6c      	ldr	r3, [pc, #432]	; (801a0dc <tcp_receive+0xf14>)
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	1ad3      	subs	r3, r2, r3
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	dd12      	ble.n	8019f5a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019f34:	4b69      	ldr	r3, [pc, #420]	; (801a0dc <tcp_receive+0xf14>)
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	b29a      	uxth	r2, r3
 8019f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f3c:	68db      	ldr	r3, [r3, #12]
 8019f3e:	685b      	ldr	r3, [r3, #4]
 8019f40:	b29b      	uxth	r3, r3
 8019f42:	1ad3      	subs	r3, r2, r3
 8019f44:	b29a      	uxth	r2, r3
 8019f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f48:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f4c:	685a      	ldr	r2, [r3, #4]
 8019f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f50:	891b      	ldrh	r3, [r3, #8]
 8019f52:	4619      	mov	r1, r3
 8019f54:	4610      	mov	r0, r2
 8019f56:	f7fa fd43 	bl	80149e0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019f5a:	4b62      	ldr	r3, [pc, #392]	; (801a0e4 <tcp_receive+0xf1c>)
 8019f5c:	881b      	ldrh	r3, [r3, #0]
 8019f5e:	461a      	mov	r2, r3
 8019f60:	4b5e      	ldr	r3, [pc, #376]	; (801a0dc <tcp_receive+0xf14>)
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	441a      	add	r2, r3
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f6a:	6879      	ldr	r1, [r7, #4]
 8019f6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019f6e:	440b      	add	r3, r1
 8019f70:	1ad3      	subs	r3, r2, r3
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	f340 8089 	ble.w	801a08a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	68db      	ldr	r3, [r3, #12]
 8019f7e:	899b      	ldrh	r3, [r3, #12]
 8019f80:	b29b      	uxth	r3, r3
 8019f82:	4618      	mov	r0, r3
 8019f84:	f7f6 fd38 	bl	80109f8 <lwip_htons>
 8019f88:	4603      	mov	r3, r0
 8019f8a:	b2db      	uxtb	r3, r3
 8019f8c:	f003 0301 	and.w	r3, r3, #1
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d022      	beq.n	8019fda <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	68db      	ldr	r3, [r3, #12]
 8019f9a:	899b      	ldrh	r3, [r3, #12]
 8019f9c:	b29b      	uxth	r3, r3
 8019f9e:	b21b      	sxth	r3, r3
 8019fa0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019fa4:	b21c      	sxth	r4, r3
 8019fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	68db      	ldr	r3, [r3, #12]
 8019fac:	899b      	ldrh	r3, [r3, #12]
 8019fae:	b29b      	uxth	r3, r3
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	f7f6 fd21 	bl	80109f8 <lwip_htons>
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	b2db      	uxtb	r3, r3
 8019fba:	b29b      	uxth	r3, r3
 8019fbc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019fc0:	b29b      	uxth	r3, r3
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	f7f6 fd18 	bl	80109f8 <lwip_htons>
 8019fc8:	4603      	mov	r3, r0
 8019fca:	b21b      	sxth	r3, r3
 8019fcc:	4323      	orrs	r3, r4
 8019fce:	b21a      	sxth	r2, r3
 8019fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	68db      	ldr	r3, [r3, #12]
 8019fd6:	b292      	uxth	r2, r2
 8019fd8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fde:	b29a      	uxth	r2, r3
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019fe4:	4413      	add	r3, r2
 8019fe6:	b299      	uxth	r1, r3
 8019fe8:	4b3c      	ldr	r3, [pc, #240]	; (801a0dc <tcp_receive+0xf14>)
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	b29a      	uxth	r2, r3
 8019fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	1a8a      	subs	r2, r1, r2
 8019ff4:	b292      	uxth	r2, r2
 8019ff6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	685a      	ldr	r2, [r3, #4]
 8019ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	891b      	ldrh	r3, [r3, #8]
 801a004:	4619      	mov	r1, r3
 801a006:	4610      	mov	r0, r2
 801a008:	f7fa fcea 	bl	80149e0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	891c      	ldrh	r4, [r3, #8]
 801a012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	68db      	ldr	r3, [r3, #12]
 801a018:	899b      	ldrh	r3, [r3, #12]
 801a01a:	b29b      	uxth	r3, r3
 801a01c:	4618      	mov	r0, r3
 801a01e:	f7f6 fceb 	bl	80109f8 <lwip_htons>
 801a022:	4603      	mov	r3, r0
 801a024:	b2db      	uxtb	r3, r3
 801a026:	f003 0303 	and.w	r3, r3, #3
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d001      	beq.n	801a032 <tcp_receive+0xe6a>
 801a02e:	2301      	movs	r3, #1
 801a030:	e000      	b.n	801a034 <tcp_receive+0xe6c>
 801a032:	2300      	movs	r3, #0
 801a034:	4423      	add	r3, r4
 801a036:	b29a      	uxth	r2, r3
 801a038:	4b2a      	ldr	r3, [pc, #168]	; (801a0e4 <tcp_receive+0xf1c>)
 801a03a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a03c:	4b29      	ldr	r3, [pc, #164]	; (801a0e4 <tcp_receive+0xf1c>)
 801a03e:	881b      	ldrh	r3, [r3, #0]
 801a040:	461a      	mov	r2, r3
 801a042:	4b26      	ldr	r3, [pc, #152]	; (801a0dc <tcp_receive+0xf14>)
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	441a      	add	r2, r3
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a04c:	6879      	ldr	r1, [r7, #4]
 801a04e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a050:	440b      	add	r3, r1
 801a052:	429a      	cmp	r2, r3
 801a054:	d019      	beq.n	801a08a <tcp_receive+0xec2>
 801a056:	4b24      	ldr	r3, [pc, #144]	; (801a0e8 <tcp_receive+0xf20>)
 801a058:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801a05c:	4923      	ldr	r1, [pc, #140]	; (801a0ec <tcp_receive+0xf24>)
 801a05e:	4824      	ldr	r0, [pc, #144]	; (801a0f0 <tcp_receive+0xf28>)
 801a060:	f007 fe5c 	bl	8021d1c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a064:	e011      	b.n	801a08a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	63bb      	str	r3, [r7, #56]	; 0x38
 801a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a06e:	2b00      	cmp	r3, #0
 801a070:	f47f aea4 	bne.w	8019dbc <tcp_receive+0xbf4>
 801a074:	e00a      	b.n	801a08c <tcp_receive+0xec4>
                break;
 801a076:	bf00      	nop
 801a078:	e008      	b.n	801a08c <tcp_receive+0xec4>
                break;
 801a07a:	bf00      	nop
 801a07c:	e006      	b.n	801a08c <tcp_receive+0xec4>
                  break;
 801a07e:	bf00      	nop
 801a080:	e004      	b.n	801a08c <tcp_receive+0xec4>
                  break;
 801a082:	bf00      	nop
 801a084:	e002      	b.n	801a08c <tcp_receive+0xec4>
                  break;
 801a086:	bf00      	nop
 801a088:	e000      	b.n	801a08c <tcp_receive+0xec4>
                break;
 801a08a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a08c:	6878      	ldr	r0, [r7, #4]
 801a08e:	f001 fe8b 	bl	801bda8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a092:	e003      	b.n	801a09c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a094:	6878      	ldr	r0, [r7, #4]
 801a096:	f001 fe87 	bl	801bda8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a09a:	e01a      	b.n	801a0d2 <tcp_receive+0xf0a>
 801a09c:	e019      	b.n	801a0d2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a09e:	4b0f      	ldr	r3, [pc, #60]	; (801a0dc <tcp_receive+0xf14>)
 801a0a0:	681a      	ldr	r2, [r3, #0]
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0a6:	1ad3      	subs	r3, r2, r3
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	db0a      	blt.n	801a0c2 <tcp_receive+0xefa>
 801a0ac:	4b0b      	ldr	r3, [pc, #44]	; (801a0dc <tcp_receive+0xf14>)
 801a0ae:	681a      	ldr	r2, [r3, #0]
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0b4:	6879      	ldr	r1, [r7, #4]
 801a0b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a0b8:	440b      	add	r3, r1
 801a0ba:	1ad3      	subs	r3, r2, r3
 801a0bc:	3301      	adds	r3, #1
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	dd07      	ble.n	801a0d2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	8b5b      	ldrh	r3, [r3, #26]
 801a0c6:	f043 0302 	orr.w	r3, r3, #2
 801a0ca:	b29a      	uxth	r2, r3
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a0d0:	e7ff      	b.n	801a0d2 <tcp_receive+0xf0a>
 801a0d2:	bf00      	nop
 801a0d4:	3750      	adds	r7, #80	; 0x50
 801a0d6:	46bd      	mov	sp, r7
 801a0d8:	bdb0      	pop	{r4, r5, r7, pc}
 801a0da:	bf00      	nop
 801a0dc:	24004980 	.word	0x24004980
 801a0e0:	24004960 	.word	0x24004960
 801a0e4:	2400498a 	.word	0x2400498a
 801a0e8:	08026bc0 	.word	0x08026bc0
 801a0ec:	08026f84 	.word	0x08026f84
 801a0f0:	08026c28 	.word	0x08026c28

0801a0f4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a0f4:	b480      	push	{r7}
 801a0f6:	b083      	sub	sp, #12
 801a0f8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a0fa:	4b15      	ldr	r3, [pc, #84]	; (801a150 <tcp_get_next_optbyte+0x5c>)
 801a0fc:	881b      	ldrh	r3, [r3, #0]
 801a0fe:	1c5a      	adds	r2, r3, #1
 801a100:	b291      	uxth	r1, r2
 801a102:	4a13      	ldr	r2, [pc, #76]	; (801a150 <tcp_get_next_optbyte+0x5c>)
 801a104:	8011      	strh	r1, [r2, #0]
 801a106:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a108:	4b12      	ldr	r3, [pc, #72]	; (801a154 <tcp_get_next_optbyte+0x60>)
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d004      	beq.n	801a11a <tcp_get_next_optbyte+0x26>
 801a110:	4b11      	ldr	r3, [pc, #68]	; (801a158 <tcp_get_next_optbyte+0x64>)
 801a112:	881b      	ldrh	r3, [r3, #0]
 801a114:	88fa      	ldrh	r2, [r7, #6]
 801a116:	429a      	cmp	r2, r3
 801a118:	d208      	bcs.n	801a12c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a11a:	4b10      	ldr	r3, [pc, #64]	; (801a15c <tcp_get_next_optbyte+0x68>)
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	3314      	adds	r3, #20
 801a120:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a122:	88fb      	ldrh	r3, [r7, #6]
 801a124:	683a      	ldr	r2, [r7, #0]
 801a126:	4413      	add	r3, r2
 801a128:	781b      	ldrb	r3, [r3, #0]
 801a12a:	e00b      	b.n	801a144 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a12c:	88fb      	ldrh	r3, [r7, #6]
 801a12e:	b2da      	uxtb	r2, r3
 801a130:	4b09      	ldr	r3, [pc, #36]	; (801a158 <tcp_get_next_optbyte+0x64>)
 801a132:	881b      	ldrh	r3, [r3, #0]
 801a134:	b2db      	uxtb	r3, r3
 801a136:	1ad3      	subs	r3, r2, r3
 801a138:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a13a:	4b06      	ldr	r3, [pc, #24]	; (801a154 <tcp_get_next_optbyte+0x60>)
 801a13c:	681a      	ldr	r2, [r3, #0]
 801a13e:	797b      	ldrb	r3, [r7, #5]
 801a140:	4413      	add	r3, r2
 801a142:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a144:	4618      	mov	r0, r3
 801a146:	370c      	adds	r7, #12
 801a148:	46bd      	mov	sp, r7
 801a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a14e:	4770      	bx	lr
 801a150:	2400497c 	.word	0x2400497c
 801a154:	24004978 	.word	0x24004978
 801a158:	24004976 	.word	0x24004976
 801a15c:	24004970 	.word	0x24004970

0801a160 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a160:	b580      	push	{r7, lr}
 801a162:	b084      	sub	sp, #16
 801a164:	af00      	add	r7, sp, #0
 801a166:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d106      	bne.n	801a17c <tcp_parseopt+0x1c>
 801a16e:	4b32      	ldr	r3, [pc, #200]	; (801a238 <tcp_parseopt+0xd8>)
 801a170:	f240 727d 	movw	r2, #1917	; 0x77d
 801a174:	4931      	ldr	r1, [pc, #196]	; (801a23c <tcp_parseopt+0xdc>)
 801a176:	4832      	ldr	r0, [pc, #200]	; (801a240 <tcp_parseopt+0xe0>)
 801a178:	f007 fdd0 	bl	8021d1c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a17c:	4b31      	ldr	r3, [pc, #196]	; (801a244 <tcp_parseopt+0xe4>)
 801a17e:	881b      	ldrh	r3, [r3, #0]
 801a180:	2b00      	cmp	r3, #0
 801a182:	d055      	beq.n	801a230 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a184:	4b30      	ldr	r3, [pc, #192]	; (801a248 <tcp_parseopt+0xe8>)
 801a186:	2200      	movs	r2, #0
 801a188:	801a      	strh	r2, [r3, #0]
 801a18a:	e045      	b.n	801a218 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801a18c:	f7ff ffb2 	bl	801a0f4 <tcp_get_next_optbyte>
 801a190:	4603      	mov	r3, r0
 801a192:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a194:	7bfb      	ldrb	r3, [r7, #15]
 801a196:	2b02      	cmp	r3, #2
 801a198:	d006      	beq.n	801a1a8 <tcp_parseopt+0x48>
 801a19a:	2b02      	cmp	r3, #2
 801a19c:	dc2b      	bgt.n	801a1f6 <tcp_parseopt+0x96>
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d041      	beq.n	801a226 <tcp_parseopt+0xc6>
 801a1a2:	2b01      	cmp	r3, #1
 801a1a4:	d127      	bne.n	801a1f6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801a1a6:	e037      	b.n	801a218 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a1a8:	f7ff ffa4 	bl	801a0f4 <tcp_get_next_optbyte>
 801a1ac:	4603      	mov	r3, r0
 801a1ae:	2b04      	cmp	r3, #4
 801a1b0:	d13b      	bne.n	801a22a <tcp_parseopt+0xca>
 801a1b2:	4b25      	ldr	r3, [pc, #148]	; (801a248 <tcp_parseopt+0xe8>)
 801a1b4:	881b      	ldrh	r3, [r3, #0]
 801a1b6:	3301      	adds	r3, #1
 801a1b8:	4a22      	ldr	r2, [pc, #136]	; (801a244 <tcp_parseopt+0xe4>)
 801a1ba:	8812      	ldrh	r2, [r2, #0]
 801a1bc:	4293      	cmp	r3, r2
 801a1be:	da34      	bge.n	801a22a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a1c0:	f7ff ff98 	bl	801a0f4 <tcp_get_next_optbyte>
 801a1c4:	4603      	mov	r3, r0
 801a1c6:	b29b      	uxth	r3, r3
 801a1c8:	021b      	lsls	r3, r3, #8
 801a1ca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a1cc:	f7ff ff92 	bl	801a0f4 <tcp_get_next_optbyte>
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	b29a      	uxth	r2, r3
 801a1d4:	89bb      	ldrh	r3, [r7, #12]
 801a1d6:	4313      	orrs	r3, r2
 801a1d8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a1da:	89bb      	ldrh	r3, [r7, #12]
 801a1dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a1e0:	d804      	bhi.n	801a1ec <tcp_parseopt+0x8c>
 801a1e2:	89bb      	ldrh	r3, [r7, #12]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d001      	beq.n	801a1ec <tcp_parseopt+0x8c>
 801a1e8:	89ba      	ldrh	r2, [r7, #12]
 801a1ea:	e001      	b.n	801a1f0 <tcp_parseopt+0x90>
 801a1ec:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a1f4:	e010      	b.n	801a218 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a1f6:	f7ff ff7d 	bl	801a0f4 <tcp_get_next_optbyte>
 801a1fa:	4603      	mov	r3, r0
 801a1fc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a1fe:	7afb      	ldrb	r3, [r7, #11]
 801a200:	2b01      	cmp	r3, #1
 801a202:	d914      	bls.n	801a22e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a204:	7afb      	ldrb	r3, [r7, #11]
 801a206:	b29a      	uxth	r2, r3
 801a208:	4b0f      	ldr	r3, [pc, #60]	; (801a248 <tcp_parseopt+0xe8>)
 801a20a:	881b      	ldrh	r3, [r3, #0]
 801a20c:	4413      	add	r3, r2
 801a20e:	b29b      	uxth	r3, r3
 801a210:	3b02      	subs	r3, #2
 801a212:	b29a      	uxth	r2, r3
 801a214:	4b0c      	ldr	r3, [pc, #48]	; (801a248 <tcp_parseopt+0xe8>)
 801a216:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a218:	4b0b      	ldr	r3, [pc, #44]	; (801a248 <tcp_parseopt+0xe8>)
 801a21a:	881a      	ldrh	r2, [r3, #0]
 801a21c:	4b09      	ldr	r3, [pc, #36]	; (801a244 <tcp_parseopt+0xe4>)
 801a21e:	881b      	ldrh	r3, [r3, #0]
 801a220:	429a      	cmp	r2, r3
 801a222:	d3b3      	bcc.n	801a18c <tcp_parseopt+0x2c>
 801a224:	e004      	b.n	801a230 <tcp_parseopt+0xd0>
          return;
 801a226:	bf00      	nop
 801a228:	e002      	b.n	801a230 <tcp_parseopt+0xd0>
            return;
 801a22a:	bf00      	nop
 801a22c:	e000      	b.n	801a230 <tcp_parseopt+0xd0>
            return;
 801a22e:	bf00      	nop
      }
    }
  }
}
 801a230:	3710      	adds	r7, #16
 801a232:	46bd      	mov	sp, r7
 801a234:	bd80      	pop	{r7, pc}
 801a236:	bf00      	nop
 801a238:	08026bc0 	.word	0x08026bc0
 801a23c:	08027040 	.word	0x08027040
 801a240:	08026c28 	.word	0x08026c28
 801a244:	24004974 	.word	0x24004974
 801a248:	2400497c 	.word	0x2400497c

0801a24c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a24c:	b480      	push	{r7}
 801a24e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a250:	4b05      	ldr	r3, [pc, #20]	; (801a268 <tcp_trigger_input_pcb_close+0x1c>)
 801a252:	781b      	ldrb	r3, [r3, #0]
 801a254:	f043 0310 	orr.w	r3, r3, #16
 801a258:	b2da      	uxtb	r2, r3
 801a25a:	4b03      	ldr	r3, [pc, #12]	; (801a268 <tcp_trigger_input_pcb_close+0x1c>)
 801a25c:	701a      	strb	r2, [r3, #0]
}
 801a25e:	bf00      	nop
 801a260:	46bd      	mov	sp, r7
 801a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a266:	4770      	bx	lr
 801a268:	2400498d 	.word	0x2400498d

0801a26c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a26c:	b580      	push	{r7, lr}
 801a26e:	b084      	sub	sp, #16
 801a270:	af00      	add	r7, sp, #0
 801a272:	60f8      	str	r0, [r7, #12]
 801a274:	60b9      	str	r1, [r7, #8]
 801a276:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d00a      	beq.n	801a294 <tcp_route+0x28>
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	7a1b      	ldrb	r3, [r3, #8]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d006      	beq.n	801a294 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	7a1b      	ldrb	r3, [r3, #8]
 801a28a:	4618      	mov	r0, r3
 801a28c:	f7fa f9a0 	bl	80145d0 <netif_get_by_index>
 801a290:	4603      	mov	r3, r0
 801a292:	e003      	b.n	801a29c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a294:	6878      	ldr	r0, [r7, #4]
 801a296:	f7f7 fea5 	bl	8011fe4 <ip4_route>
 801a29a:	4603      	mov	r3, r0
  }
}
 801a29c:	4618      	mov	r0, r3
 801a29e:	3710      	adds	r7, #16
 801a2a0:	46bd      	mov	sp, r7
 801a2a2:	bd80      	pop	{r7, pc}

0801a2a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a2a4:	b590      	push	{r4, r7, lr}
 801a2a6:	b087      	sub	sp, #28
 801a2a8:	af00      	add	r7, sp, #0
 801a2aa:	60f8      	str	r0, [r7, #12]
 801a2ac:	60b9      	str	r1, [r7, #8]
 801a2ae:	603b      	str	r3, [r7, #0]
 801a2b0:	4613      	mov	r3, r2
 801a2b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d105      	bne.n	801a2c6 <tcp_create_segment+0x22>
 801a2ba:	4b44      	ldr	r3, [pc, #272]	; (801a3cc <tcp_create_segment+0x128>)
 801a2bc:	22a3      	movs	r2, #163	; 0xa3
 801a2be:	4944      	ldr	r1, [pc, #272]	; (801a3d0 <tcp_create_segment+0x12c>)
 801a2c0:	4844      	ldr	r0, [pc, #272]	; (801a3d4 <tcp_create_segment+0x130>)
 801a2c2:	f007 fd2b 	bl	8021d1c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a2c6:	68bb      	ldr	r3, [r7, #8]
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d105      	bne.n	801a2d8 <tcp_create_segment+0x34>
 801a2cc:	4b3f      	ldr	r3, [pc, #252]	; (801a3cc <tcp_create_segment+0x128>)
 801a2ce:	22a4      	movs	r2, #164	; 0xa4
 801a2d0:	4941      	ldr	r1, [pc, #260]	; (801a3d8 <tcp_create_segment+0x134>)
 801a2d2:	4840      	ldr	r0, [pc, #256]	; (801a3d4 <tcp_create_segment+0x130>)
 801a2d4:	f007 fd22 	bl	8021d1c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a2d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a2dc:	009b      	lsls	r3, r3, #2
 801a2de:	b2db      	uxtb	r3, r3
 801a2e0:	f003 0304 	and.w	r3, r3, #4
 801a2e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a2e6:	2003      	movs	r0, #3
 801a2e8:	f7f9 fd54 	bl	8013d94 <memp_malloc>
 801a2ec:	6138      	str	r0, [r7, #16]
 801a2ee:	693b      	ldr	r3, [r7, #16]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d104      	bne.n	801a2fe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a2f4:	68b8      	ldr	r0, [r7, #8]
 801a2f6:	f7fa fcf9 	bl	8014cec <pbuf_free>
    return NULL;
 801a2fa:	2300      	movs	r3, #0
 801a2fc:	e061      	b.n	801a3c2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a2fe:	693b      	ldr	r3, [r7, #16]
 801a300:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a304:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a306:	693b      	ldr	r3, [r7, #16]
 801a308:	2200      	movs	r2, #0
 801a30a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a30c:	693b      	ldr	r3, [r7, #16]
 801a30e:	68ba      	ldr	r2, [r7, #8]
 801a310:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a312:	68bb      	ldr	r3, [r7, #8]
 801a314:	891a      	ldrh	r2, [r3, #8]
 801a316:	7dfb      	ldrb	r3, [r7, #23]
 801a318:	b29b      	uxth	r3, r3
 801a31a:	429a      	cmp	r2, r3
 801a31c:	d205      	bcs.n	801a32a <tcp_create_segment+0x86>
 801a31e:	4b2b      	ldr	r3, [pc, #172]	; (801a3cc <tcp_create_segment+0x128>)
 801a320:	22b0      	movs	r2, #176	; 0xb0
 801a322:	492e      	ldr	r1, [pc, #184]	; (801a3dc <tcp_create_segment+0x138>)
 801a324:	482b      	ldr	r0, [pc, #172]	; (801a3d4 <tcp_create_segment+0x130>)
 801a326:	f007 fcf9 	bl	8021d1c <iprintf>
  seg->len = p->tot_len - optlen;
 801a32a:	68bb      	ldr	r3, [r7, #8]
 801a32c:	891a      	ldrh	r2, [r3, #8]
 801a32e:	7dfb      	ldrb	r3, [r7, #23]
 801a330:	b29b      	uxth	r3, r3
 801a332:	1ad3      	subs	r3, r2, r3
 801a334:	b29a      	uxth	r2, r3
 801a336:	693b      	ldr	r3, [r7, #16]
 801a338:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a33a:	2114      	movs	r1, #20
 801a33c:	68b8      	ldr	r0, [r7, #8]
 801a33e:	f7fa fc3f 	bl	8014bc0 <pbuf_add_header>
 801a342:	4603      	mov	r3, r0
 801a344:	2b00      	cmp	r3, #0
 801a346:	d004      	beq.n	801a352 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a348:	6938      	ldr	r0, [r7, #16]
 801a34a:	f7fd f804 	bl	8017356 <tcp_seg_free>
    return NULL;
 801a34e:	2300      	movs	r3, #0
 801a350:	e037      	b.n	801a3c2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a352:	693b      	ldr	r3, [r7, #16]
 801a354:	685b      	ldr	r3, [r3, #4]
 801a356:	685a      	ldr	r2, [r3, #4]
 801a358:	693b      	ldr	r3, [r7, #16]
 801a35a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a35c:	68fb      	ldr	r3, [r7, #12]
 801a35e:	8ada      	ldrh	r2, [r3, #22]
 801a360:	693b      	ldr	r3, [r7, #16]
 801a362:	68dc      	ldr	r4, [r3, #12]
 801a364:	4610      	mov	r0, r2
 801a366:	f7f6 fb47 	bl	80109f8 <lwip_htons>
 801a36a:	4603      	mov	r3, r0
 801a36c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	8b1a      	ldrh	r2, [r3, #24]
 801a372:	693b      	ldr	r3, [r7, #16]
 801a374:	68dc      	ldr	r4, [r3, #12]
 801a376:	4610      	mov	r0, r2
 801a378:	f7f6 fb3e 	bl	80109f8 <lwip_htons>
 801a37c:	4603      	mov	r3, r0
 801a37e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a380:	693b      	ldr	r3, [r7, #16]
 801a382:	68dc      	ldr	r4, [r3, #12]
 801a384:	6838      	ldr	r0, [r7, #0]
 801a386:	f7f6 fb4c 	bl	8010a22 <lwip_htonl>
 801a38a:	4603      	mov	r3, r0
 801a38c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a38e:	7dfb      	ldrb	r3, [r7, #23]
 801a390:	089b      	lsrs	r3, r3, #2
 801a392:	b2db      	uxtb	r3, r3
 801a394:	b29b      	uxth	r3, r3
 801a396:	3305      	adds	r3, #5
 801a398:	b29b      	uxth	r3, r3
 801a39a:	031b      	lsls	r3, r3, #12
 801a39c:	b29a      	uxth	r2, r3
 801a39e:	79fb      	ldrb	r3, [r7, #7]
 801a3a0:	b29b      	uxth	r3, r3
 801a3a2:	4313      	orrs	r3, r2
 801a3a4:	b29a      	uxth	r2, r3
 801a3a6:	693b      	ldr	r3, [r7, #16]
 801a3a8:	68dc      	ldr	r4, [r3, #12]
 801a3aa:	4610      	mov	r0, r2
 801a3ac:	f7f6 fb24 	bl	80109f8 <lwip_htons>
 801a3b0:	4603      	mov	r3, r0
 801a3b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a3b4:	693b      	ldr	r3, [r7, #16]
 801a3b6:	68db      	ldr	r3, [r3, #12]
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	749a      	strb	r2, [r3, #18]
 801a3bc:	2200      	movs	r2, #0
 801a3be:	74da      	strb	r2, [r3, #19]
  return seg;
 801a3c0:	693b      	ldr	r3, [r7, #16]
}
 801a3c2:	4618      	mov	r0, r3
 801a3c4:	371c      	adds	r7, #28
 801a3c6:	46bd      	mov	sp, r7
 801a3c8:	bd90      	pop	{r4, r7, pc}
 801a3ca:	bf00      	nop
 801a3cc:	0802705c 	.word	0x0802705c
 801a3d0:	080270ac 	.word	0x080270ac
 801a3d4:	080270cc 	.word	0x080270cc
 801a3d8:	080270f4 	.word	0x080270f4
 801a3dc:	08027118 	.word	0x08027118

0801a3e0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a3e0:	b580      	push	{r7, lr}
 801a3e2:	b086      	sub	sp, #24
 801a3e4:	af00      	add	r7, sp, #0
 801a3e6:	607b      	str	r3, [r7, #4]
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	73fb      	strb	r3, [r7, #15]
 801a3ec:	460b      	mov	r3, r1
 801a3ee:	81bb      	strh	r3, [r7, #12]
 801a3f0:	4613      	mov	r3, r2
 801a3f2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a3f4:	89bb      	ldrh	r3, [r7, #12]
 801a3f6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d105      	bne.n	801a40a <tcp_pbuf_prealloc+0x2a>
 801a3fe:	4b30      	ldr	r3, [pc, #192]	; (801a4c0 <tcp_pbuf_prealloc+0xe0>)
 801a400:	22e8      	movs	r2, #232	; 0xe8
 801a402:	4930      	ldr	r1, [pc, #192]	; (801a4c4 <tcp_pbuf_prealloc+0xe4>)
 801a404:	4830      	ldr	r0, [pc, #192]	; (801a4c8 <tcp_pbuf_prealloc+0xe8>)
 801a406:	f007 fc89 	bl	8021d1c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a40a:	6a3b      	ldr	r3, [r7, #32]
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	d105      	bne.n	801a41c <tcp_pbuf_prealloc+0x3c>
 801a410:	4b2b      	ldr	r3, [pc, #172]	; (801a4c0 <tcp_pbuf_prealloc+0xe0>)
 801a412:	22e9      	movs	r2, #233	; 0xe9
 801a414:	492d      	ldr	r1, [pc, #180]	; (801a4cc <tcp_pbuf_prealloc+0xec>)
 801a416:	482c      	ldr	r0, [pc, #176]	; (801a4c8 <tcp_pbuf_prealloc+0xe8>)
 801a418:	f007 fc80 	bl	8021d1c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a41c:	89ba      	ldrh	r2, [r7, #12]
 801a41e:	897b      	ldrh	r3, [r7, #10]
 801a420:	429a      	cmp	r2, r3
 801a422:	d221      	bcs.n	801a468 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a424:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a428:	f003 0302 	and.w	r3, r3, #2
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	d111      	bne.n	801a454 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801a430:	6a3b      	ldr	r3, [r7, #32]
 801a432:	8b5b      	ldrh	r3, [r3, #26]
 801a434:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d115      	bne.n	801a468 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a43c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a440:	2b00      	cmp	r3, #0
 801a442:	d007      	beq.n	801a454 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a444:	6a3b      	ldr	r3, [r7, #32]
 801a446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d103      	bne.n	801a454 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a44c:	6a3b      	ldr	r3, [r7, #32]
 801a44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801a450:	2b00      	cmp	r3, #0
 801a452:	d009      	beq.n	801a468 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a454:	89bb      	ldrh	r3, [r7, #12]
 801a456:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801a45a:	f023 0203 	bic.w	r2, r3, #3
 801a45e:	897b      	ldrh	r3, [r7, #10]
 801a460:	4293      	cmp	r3, r2
 801a462:	bf28      	it	cs
 801a464:	4613      	movcs	r3, r2
 801a466:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a468:	8af9      	ldrh	r1, [r7, #22]
 801a46a:	7bfb      	ldrb	r3, [r7, #15]
 801a46c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a470:	4618      	mov	r0, r3
 801a472:	f7fa f957 	bl	8014724 <pbuf_alloc>
 801a476:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a478:	693b      	ldr	r3, [r7, #16]
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d101      	bne.n	801a482 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801a47e:	2300      	movs	r3, #0
 801a480:	e019      	b.n	801a4b6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801a482:	693b      	ldr	r3, [r7, #16]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	2b00      	cmp	r3, #0
 801a488:	d006      	beq.n	801a498 <tcp_pbuf_prealloc+0xb8>
 801a48a:	4b0d      	ldr	r3, [pc, #52]	; (801a4c0 <tcp_pbuf_prealloc+0xe0>)
 801a48c:	f240 120b 	movw	r2, #267	; 0x10b
 801a490:	490f      	ldr	r1, [pc, #60]	; (801a4d0 <tcp_pbuf_prealloc+0xf0>)
 801a492:	480d      	ldr	r0, [pc, #52]	; (801a4c8 <tcp_pbuf_prealloc+0xe8>)
 801a494:	f007 fc42 	bl	8021d1c <iprintf>
  *oversize = p->len - length;
 801a498:	693b      	ldr	r3, [r7, #16]
 801a49a:	895a      	ldrh	r2, [r3, #10]
 801a49c:	89bb      	ldrh	r3, [r7, #12]
 801a49e:	1ad3      	subs	r3, r2, r3
 801a4a0:	b29a      	uxth	r2, r3
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801a4a6:	693b      	ldr	r3, [r7, #16]
 801a4a8:	89ba      	ldrh	r2, [r7, #12]
 801a4aa:	811a      	strh	r2, [r3, #8]
 801a4ac:	693b      	ldr	r3, [r7, #16]
 801a4ae:	891a      	ldrh	r2, [r3, #8]
 801a4b0:	693b      	ldr	r3, [r7, #16]
 801a4b2:	815a      	strh	r2, [r3, #10]
  return p;
 801a4b4:	693b      	ldr	r3, [r7, #16]
}
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	3718      	adds	r7, #24
 801a4ba:	46bd      	mov	sp, r7
 801a4bc:	bd80      	pop	{r7, pc}
 801a4be:	bf00      	nop
 801a4c0:	0802705c 	.word	0x0802705c
 801a4c4:	08027130 	.word	0x08027130
 801a4c8:	080270cc 	.word	0x080270cc
 801a4cc:	08027154 	.word	0x08027154
 801a4d0:	08027174 	.word	0x08027174

0801a4d4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801a4d4:	b580      	push	{r7, lr}
 801a4d6:	b082      	sub	sp, #8
 801a4d8:	af00      	add	r7, sp, #0
 801a4da:	6078      	str	r0, [r7, #4]
 801a4dc:	460b      	mov	r3, r1
 801a4de:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d106      	bne.n	801a4f4 <tcp_write_checks+0x20>
 801a4e6:	4b33      	ldr	r3, [pc, #204]	; (801a5b4 <tcp_write_checks+0xe0>)
 801a4e8:	f240 1233 	movw	r2, #307	; 0x133
 801a4ec:	4932      	ldr	r1, [pc, #200]	; (801a5b8 <tcp_write_checks+0xe4>)
 801a4ee:	4833      	ldr	r0, [pc, #204]	; (801a5bc <tcp_write_checks+0xe8>)
 801a4f0:	f007 fc14 	bl	8021d1c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	7d1b      	ldrb	r3, [r3, #20]
 801a4f8:	2b04      	cmp	r3, #4
 801a4fa:	d00e      	beq.n	801a51a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801a500:	2b07      	cmp	r3, #7
 801a502:	d00a      	beq.n	801a51a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801a508:	2b02      	cmp	r3, #2
 801a50a:	d006      	beq.n	801a51a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801a510:	2b03      	cmp	r3, #3
 801a512:	d002      	beq.n	801a51a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801a514:	f06f 030a 	mvn.w	r3, #10
 801a518:	e048      	b.n	801a5ac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801a51a:	887b      	ldrh	r3, [r7, #2]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d101      	bne.n	801a524 <tcp_write_checks+0x50>
    return ERR_OK;
 801a520:	2300      	movs	r3, #0
 801a522:	e043      	b.n	801a5ac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a52a:	887a      	ldrh	r2, [r7, #2]
 801a52c:	429a      	cmp	r2, r3
 801a52e:	d909      	bls.n	801a544 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	8b5b      	ldrh	r3, [r3, #26]
 801a534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a538:	b29a      	uxth	r2, r3
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a53e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a542:	e033      	b.n	801a5ac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a54a:	2b08      	cmp	r3, #8
 801a54c:	d909      	bls.n	801a562 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	8b5b      	ldrh	r3, [r3, #26]
 801a552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a556:	b29a      	uxth	r2, r3
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a55c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a560:	e024      	b.n	801a5ac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d00f      	beq.n	801a58c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a570:	2b00      	cmp	r3, #0
 801a572:	d11a      	bne.n	801a5aa <tcp_write_checks+0xd6>
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d116      	bne.n	801a5aa <tcp_write_checks+0xd6>
 801a57c:	4b0d      	ldr	r3, [pc, #52]	; (801a5b4 <tcp_write_checks+0xe0>)
 801a57e:	f240 1255 	movw	r2, #341	; 0x155
 801a582:	490f      	ldr	r1, [pc, #60]	; (801a5c0 <tcp_write_checks+0xec>)
 801a584:	480d      	ldr	r0, [pc, #52]	; (801a5bc <tcp_write_checks+0xe8>)
 801a586:	f007 fbc9 	bl	8021d1c <iprintf>
 801a58a:	e00e      	b.n	801a5aa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a590:	2b00      	cmp	r3, #0
 801a592:	d103      	bne.n	801a59c <tcp_write_checks+0xc8>
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d006      	beq.n	801a5aa <tcp_write_checks+0xd6>
 801a59c:	4b05      	ldr	r3, [pc, #20]	; (801a5b4 <tcp_write_checks+0xe0>)
 801a59e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801a5a2:	4908      	ldr	r1, [pc, #32]	; (801a5c4 <tcp_write_checks+0xf0>)
 801a5a4:	4805      	ldr	r0, [pc, #20]	; (801a5bc <tcp_write_checks+0xe8>)
 801a5a6:	f007 fbb9 	bl	8021d1c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801a5aa:	2300      	movs	r3, #0
}
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	3708      	adds	r7, #8
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	bd80      	pop	{r7, pc}
 801a5b4:	0802705c 	.word	0x0802705c
 801a5b8:	08027188 	.word	0x08027188
 801a5bc:	080270cc 	.word	0x080270cc
 801a5c0:	080271a8 	.word	0x080271a8
 801a5c4:	080271e4 	.word	0x080271e4

0801a5c8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801a5c8:	b590      	push	{r4, r7, lr}
 801a5ca:	b09b      	sub	sp, #108	; 0x6c
 801a5cc:	af04      	add	r7, sp, #16
 801a5ce:	60f8      	str	r0, [r7, #12]
 801a5d0:	60b9      	str	r1, [r7, #8]
 801a5d2:	4611      	mov	r1, r2
 801a5d4:	461a      	mov	r2, r3
 801a5d6:	460b      	mov	r3, r1
 801a5d8:	80fb      	strh	r3, [r7, #6]
 801a5da:	4613      	mov	r3, r2
 801a5dc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801a5de:	2300      	movs	r3, #0
 801a5e0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	653b      	str	r3, [r7, #80]	; 0x50
 801a5e6:	2300      	movs	r3, #0
 801a5e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	64bb      	str	r3, [r7, #72]	; 0x48
 801a5ee:	2300      	movs	r3, #0
 801a5f0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801a5f2:	2300      	movs	r3, #0
 801a5f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801a5f8:	2300      	movs	r3, #0
 801a5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801a5fe:	2300      	movs	r3, #0
 801a600:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801a602:	2300      	movs	r3, #0
 801a604:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801a606:	2300      	movs	r3, #0
 801a608:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d109      	bne.n	801a624 <tcp_write+0x5c>
 801a610:	4ba4      	ldr	r3, [pc, #656]	; (801a8a4 <tcp_write+0x2dc>)
 801a612:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801a616:	49a4      	ldr	r1, [pc, #656]	; (801a8a8 <tcp_write+0x2e0>)
 801a618:	48a4      	ldr	r0, [pc, #656]	; (801a8ac <tcp_write+0x2e4>)
 801a61a:	f007 fb7f 	bl	8021d1c <iprintf>
 801a61e:	f06f 030f 	mvn.w	r3, #15
 801a622:	e32a      	b.n	801ac7a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801a62a:	085b      	lsrs	r3, r3, #1
 801a62c:	b29a      	uxth	r2, r3
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a632:	4293      	cmp	r3, r2
 801a634:	bf28      	it	cs
 801a636:	4613      	movcs	r3, r2
 801a638:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801a63a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	d102      	bne.n	801a646 <tcp_write+0x7e>
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a644:	e000      	b.n	801a648 <tcp_write+0x80>
 801a646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a648:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a64a:	68bb      	ldr	r3, [r7, #8]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d109      	bne.n	801a664 <tcp_write+0x9c>
 801a650:	4b94      	ldr	r3, [pc, #592]	; (801a8a4 <tcp_write+0x2dc>)
 801a652:	f240 12ad 	movw	r2, #429	; 0x1ad
 801a656:	4996      	ldr	r1, [pc, #600]	; (801a8b0 <tcp_write+0x2e8>)
 801a658:	4894      	ldr	r0, [pc, #592]	; (801a8ac <tcp_write+0x2e4>)
 801a65a:	f007 fb5f 	bl	8021d1c <iprintf>
 801a65e:	f06f 030f 	mvn.w	r3, #15
 801a662:	e30a      	b.n	801ac7a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801a664:	88fb      	ldrh	r3, [r7, #6]
 801a666:	4619      	mov	r1, r3
 801a668:	68f8      	ldr	r0, [r7, #12]
 801a66a:	f7ff ff33 	bl	801a4d4 <tcp_write_checks>
 801a66e:	4603      	mov	r3, r0
 801a670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801a674:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d002      	beq.n	801a682 <tcp_write+0xba>
    return err;
 801a67c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a680:	e2fb      	b.n	801ac7a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a688:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a68c:	2300      	movs	r3, #0
 801a68e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a696:	2b00      	cmp	r3, #0
 801a698:	f000 80f6 	beq.w	801a888 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6a0:	653b      	str	r3, [r7, #80]	; 0x50
 801a6a2:	e002      	b.n	801a6aa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801a6a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a6aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d1f8      	bne.n	801a6a4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801a6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6b4:	7a9b      	ldrb	r3, [r3, #10]
 801a6b6:	009b      	lsls	r3, r3, #2
 801a6b8:	b29b      	uxth	r3, r3
 801a6ba:	f003 0304 	and.w	r3, r3, #4
 801a6be:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a6c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a6c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6c4:	891b      	ldrh	r3, [r3, #8]
 801a6c6:	4619      	mov	r1, r3
 801a6c8:	8c3b      	ldrh	r3, [r7, #32]
 801a6ca:	440b      	add	r3, r1
 801a6cc:	429a      	cmp	r2, r3
 801a6ce:	da06      	bge.n	801a6de <tcp_write+0x116>
 801a6d0:	4b74      	ldr	r3, [pc, #464]	; (801a8a4 <tcp_write+0x2dc>)
 801a6d2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a6d6:	4977      	ldr	r1, [pc, #476]	; (801a8b4 <tcp_write+0x2ec>)
 801a6d8:	4874      	ldr	r0, [pc, #464]	; (801a8ac <tcp_write+0x2e4>)
 801a6da:	f007 fb1f 	bl	8021d1c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a6de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6e0:	891a      	ldrh	r2, [r3, #8]
 801a6e2:	8c3b      	ldrh	r3, [r7, #32]
 801a6e4:	4413      	add	r3, r2
 801a6e6:	b29b      	uxth	r3, r3
 801a6e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a6ea:	1ad3      	subs	r3, r2, r3
 801a6ec:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801a6ee:	68fb      	ldr	r3, [r7, #12]
 801a6f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a6f4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801a6f6:	8a7b      	ldrh	r3, [r7, #18]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d026      	beq.n	801a74a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a6fc:	8a7b      	ldrh	r3, [r7, #18]
 801a6fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a700:	429a      	cmp	r2, r3
 801a702:	d206      	bcs.n	801a712 <tcp_write+0x14a>
 801a704:	4b67      	ldr	r3, [pc, #412]	; (801a8a4 <tcp_write+0x2dc>)
 801a706:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801a70a:	496b      	ldr	r1, [pc, #428]	; (801a8b8 <tcp_write+0x2f0>)
 801a70c:	4867      	ldr	r0, [pc, #412]	; (801a8ac <tcp_write+0x2e4>)
 801a70e:	f007 fb05 	bl	8021d1c <iprintf>
      seg = last_unsent;
 801a712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a714:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a716:	8a7b      	ldrh	r3, [r7, #18]
 801a718:	88fa      	ldrh	r2, [r7, #6]
 801a71a:	4293      	cmp	r3, r2
 801a71c:	bf28      	it	cs
 801a71e:	4613      	movcs	r3, r2
 801a720:	b29b      	uxth	r3, r3
 801a722:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a724:	4293      	cmp	r3, r2
 801a726:	bf28      	it	cs
 801a728:	4613      	movcs	r3, r2
 801a72a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801a72c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a730:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a732:	4413      	add	r3, r2
 801a734:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801a738:	8a7a      	ldrh	r2, [r7, #18]
 801a73a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a73c:	1ad3      	subs	r3, r2, r3
 801a73e:	b29b      	uxth	r3, r3
 801a740:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801a742:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a744:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a746:	1ad3      	subs	r3, r2, r3
 801a748:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a74a:	8a7b      	ldrh	r3, [r7, #18]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d00b      	beq.n	801a768 <tcp_write+0x1a0>
 801a750:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a754:	88fb      	ldrh	r3, [r7, #6]
 801a756:	429a      	cmp	r2, r3
 801a758:	d006      	beq.n	801a768 <tcp_write+0x1a0>
 801a75a:	4b52      	ldr	r3, [pc, #328]	; (801a8a4 <tcp_write+0x2dc>)
 801a75c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a760:	4956      	ldr	r1, [pc, #344]	; (801a8bc <tcp_write+0x2f4>)
 801a762:	4852      	ldr	r0, [pc, #328]	; (801a8ac <tcp_write+0x2e4>)
 801a764:	f007 fada 	bl	8021d1c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a768:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a76c:	88fb      	ldrh	r3, [r7, #6]
 801a76e:	429a      	cmp	r2, r3
 801a770:	f080 8167 	bcs.w	801aa42 <tcp_write+0x47a>
 801a774:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a776:	2b00      	cmp	r3, #0
 801a778:	f000 8163 	beq.w	801aa42 <tcp_write+0x47a>
 801a77c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a77e:	891b      	ldrh	r3, [r3, #8]
 801a780:	2b00      	cmp	r3, #0
 801a782:	f000 815e 	beq.w	801aa42 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a786:	88fa      	ldrh	r2, [r7, #6]
 801a788:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a78c:	1ad2      	subs	r2, r2, r3
 801a78e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a790:	4293      	cmp	r3, r2
 801a792:	bfa8      	it	ge
 801a794:	4613      	movge	r3, r2
 801a796:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801a798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a79a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a79c:	797b      	ldrb	r3, [r7, #5]
 801a79e:	f003 0301 	and.w	r3, r3, #1
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d027      	beq.n	801a7f6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a7a6:	f107 0012 	add.w	r0, r7, #18
 801a7aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a7ac:	8bf9      	ldrh	r1, [r7, #30]
 801a7ae:	2301      	movs	r3, #1
 801a7b0:	9302      	str	r3, [sp, #8]
 801a7b2:	797b      	ldrb	r3, [r7, #5]
 801a7b4:	9301      	str	r3, [sp, #4]
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	9300      	str	r3, [sp, #0]
 801a7ba:	4603      	mov	r3, r0
 801a7bc:	2000      	movs	r0, #0
 801a7be:	f7ff fe0f 	bl	801a3e0 <tcp_pbuf_prealloc>
 801a7c2:	6578      	str	r0, [r7, #84]	; 0x54
 801a7c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	f000 8225 	beq.w	801ac16 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a7cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7ce:	6858      	ldr	r0, [r3, #4]
 801a7d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a7d4:	68ba      	ldr	r2, [r7, #8]
 801a7d6:	4413      	add	r3, r2
 801a7d8:	8bfa      	ldrh	r2, [r7, #30]
 801a7da:	4619      	mov	r1, r3
 801a7dc:	f006 fe2c 	bl	8021438 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a7e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a7e2:	f7fa fb11 	bl	8014e08 <pbuf_clen>
 801a7e6:	4603      	mov	r3, r0
 801a7e8:	461a      	mov	r2, r3
 801a7ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a7ee:	4413      	add	r3, r2
 801a7f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801a7f4:	e041      	b.n	801a87a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a7f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7f8:	685b      	ldr	r3, [r3, #4]
 801a7fa:	637b      	str	r3, [r7, #52]	; 0x34
 801a7fc:	e002      	b.n	801a804 <tcp_write+0x23c>
 801a7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	637b      	str	r3, [r7, #52]	; 0x34
 801a804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d1f8      	bne.n	801a7fe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a80e:	7b1b      	ldrb	r3, [r3, #12]
 801a810:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a814:	2b00      	cmp	r3, #0
 801a816:	d115      	bne.n	801a844 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a81a:	685b      	ldr	r3, [r3, #4]
 801a81c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a81e:	8952      	ldrh	r2, [r2, #10]
 801a820:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a822:	68ba      	ldr	r2, [r7, #8]
 801a824:	429a      	cmp	r2, r3
 801a826:	d10d      	bne.n	801a844 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a828:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d006      	beq.n	801a83e <tcp_write+0x276>
 801a830:	4b1c      	ldr	r3, [pc, #112]	; (801a8a4 <tcp_write+0x2dc>)
 801a832:	f240 2231 	movw	r2, #561	; 0x231
 801a836:	4922      	ldr	r1, [pc, #136]	; (801a8c0 <tcp_write+0x2f8>)
 801a838:	481c      	ldr	r0, [pc, #112]	; (801a8ac <tcp_write+0x2e4>)
 801a83a:	f007 fa6f 	bl	8021d1c <iprintf>
          extendlen = seglen;
 801a83e:	8bfb      	ldrh	r3, [r7, #30]
 801a840:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801a842:	e01a      	b.n	801a87a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a844:	8bfb      	ldrh	r3, [r7, #30]
 801a846:	2201      	movs	r2, #1
 801a848:	4619      	mov	r1, r3
 801a84a:	2000      	movs	r0, #0
 801a84c:	f7f9 ff6a 	bl	8014724 <pbuf_alloc>
 801a850:	6578      	str	r0, [r7, #84]	; 0x54
 801a852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a854:	2b00      	cmp	r3, #0
 801a856:	f000 81e0 	beq.w	801ac1a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a85a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a85e:	68ba      	ldr	r2, [r7, #8]
 801a860:	441a      	add	r2, r3
 801a862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a864:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a866:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a868:	f7fa face 	bl	8014e08 <pbuf_clen>
 801a86c:	4603      	mov	r3, r0
 801a86e:	461a      	mov	r2, r3
 801a870:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a874:	4413      	add	r3, r2
 801a876:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a87a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a87e:	8bfb      	ldrh	r3, [r7, #30]
 801a880:	4413      	add	r3, r2
 801a882:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801a886:	e0dc      	b.n	801aa42 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a888:	68fb      	ldr	r3, [r7, #12]
 801a88a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a88e:	2b00      	cmp	r3, #0
 801a890:	f000 80d7 	beq.w	801aa42 <tcp_write+0x47a>
 801a894:	4b03      	ldr	r3, [pc, #12]	; (801a8a4 <tcp_write+0x2dc>)
 801a896:	f240 224a 	movw	r2, #586	; 0x24a
 801a89a:	490a      	ldr	r1, [pc, #40]	; (801a8c4 <tcp_write+0x2fc>)
 801a89c:	4803      	ldr	r0, [pc, #12]	; (801a8ac <tcp_write+0x2e4>)
 801a89e:	f007 fa3d 	bl	8021d1c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a8a2:	e0ce      	b.n	801aa42 <tcp_write+0x47a>
 801a8a4:	0802705c 	.word	0x0802705c
 801a8a8:	08027218 	.word	0x08027218
 801a8ac:	080270cc 	.word	0x080270cc
 801a8b0:	08027230 	.word	0x08027230
 801a8b4:	08027264 	.word	0x08027264
 801a8b8:	0802727c 	.word	0x0802727c
 801a8bc:	0802729c 	.word	0x0802729c
 801a8c0:	080272bc 	.word	0x080272bc
 801a8c4:	080272e8 	.word	0x080272e8
    struct pbuf *p;
    u16_t left = len - pos;
 801a8c8:	88fa      	ldrh	r2, [r7, #6]
 801a8ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a8ce:	1ad3      	subs	r3, r2, r3
 801a8d0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801a8d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a8d6:	b29b      	uxth	r3, r3
 801a8d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a8da:	1ad3      	subs	r3, r2, r3
 801a8dc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a8de:	8b7a      	ldrh	r2, [r7, #26]
 801a8e0:	8bbb      	ldrh	r3, [r7, #28]
 801a8e2:	4293      	cmp	r3, r2
 801a8e4:	bf28      	it	cs
 801a8e6:	4613      	movcs	r3, r2
 801a8e8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a8ea:	797b      	ldrb	r3, [r7, #5]
 801a8ec:	f003 0301 	and.w	r3, r3, #1
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d036      	beq.n	801a962 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a8f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a8f8:	b29a      	uxth	r2, r3
 801a8fa:	8b3b      	ldrh	r3, [r7, #24]
 801a8fc:	4413      	add	r3, r2
 801a8fe:	b299      	uxth	r1, r3
 801a900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a902:	2b00      	cmp	r3, #0
 801a904:	bf0c      	ite	eq
 801a906:	2301      	moveq	r3, #1
 801a908:	2300      	movne	r3, #0
 801a90a:	b2db      	uxtb	r3, r3
 801a90c:	f107 0012 	add.w	r0, r7, #18
 801a910:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a912:	9302      	str	r3, [sp, #8]
 801a914:	797b      	ldrb	r3, [r7, #5]
 801a916:	9301      	str	r3, [sp, #4]
 801a918:	68fb      	ldr	r3, [r7, #12]
 801a91a:	9300      	str	r3, [sp, #0]
 801a91c:	4603      	mov	r3, r0
 801a91e:	2036      	movs	r0, #54	; 0x36
 801a920:	f7ff fd5e 	bl	801a3e0 <tcp_pbuf_prealloc>
 801a924:	6338      	str	r0, [r7, #48]	; 0x30
 801a926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a928:	2b00      	cmp	r3, #0
 801a92a:	f000 8178 	beq.w	801ac1e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a930:	895b      	ldrh	r3, [r3, #10]
 801a932:	8b3a      	ldrh	r2, [r7, #24]
 801a934:	429a      	cmp	r2, r3
 801a936:	d906      	bls.n	801a946 <tcp_write+0x37e>
 801a938:	4b8c      	ldr	r3, [pc, #560]	; (801ab6c <tcp_write+0x5a4>)
 801a93a:	f240 2266 	movw	r2, #614	; 0x266
 801a93e:	498c      	ldr	r1, [pc, #560]	; (801ab70 <tcp_write+0x5a8>)
 801a940:	488c      	ldr	r0, [pc, #560]	; (801ab74 <tcp_write+0x5ac>)
 801a942:	f007 f9eb 	bl	8021d1c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a948:	685a      	ldr	r2, [r3, #4]
 801a94a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a94e:	18d0      	adds	r0, r2, r3
 801a950:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a954:	68ba      	ldr	r2, [r7, #8]
 801a956:	4413      	add	r3, r2
 801a958:	8b3a      	ldrh	r2, [r7, #24]
 801a95a:	4619      	mov	r1, r3
 801a95c:	f006 fd6c 	bl	8021438 <memcpy>
 801a960:	e02f      	b.n	801a9c2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a962:	8a7b      	ldrh	r3, [r7, #18]
 801a964:	2b00      	cmp	r3, #0
 801a966:	d006      	beq.n	801a976 <tcp_write+0x3ae>
 801a968:	4b80      	ldr	r3, [pc, #512]	; (801ab6c <tcp_write+0x5a4>)
 801a96a:	f240 2271 	movw	r2, #625	; 0x271
 801a96e:	4982      	ldr	r1, [pc, #520]	; (801ab78 <tcp_write+0x5b0>)
 801a970:	4880      	ldr	r0, [pc, #512]	; (801ab74 <tcp_write+0x5ac>)
 801a972:	f007 f9d3 	bl	8021d1c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a976:	8b3b      	ldrh	r3, [r7, #24]
 801a978:	2201      	movs	r2, #1
 801a97a:	4619      	mov	r1, r3
 801a97c:	2036      	movs	r0, #54	; 0x36
 801a97e:	f7f9 fed1 	bl	8014724 <pbuf_alloc>
 801a982:	6178      	str	r0, [r7, #20]
 801a984:	697b      	ldr	r3, [r7, #20]
 801a986:	2b00      	cmp	r3, #0
 801a988:	f000 814b 	beq.w	801ac22 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a98c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a990:	68ba      	ldr	r2, [r7, #8]
 801a992:	441a      	add	r2, r3
 801a994:	697b      	ldr	r3, [r7, #20]
 801a996:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a998:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a99c:	b29b      	uxth	r3, r3
 801a99e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a9a2:	4619      	mov	r1, r3
 801a9a4:	2036      	movs	r0, #54	; 0x36
 801a9a6:	f7f9 febd 	bl	8014724 <pbuf_alloc>
 801a9aa:	6338      	str	r0, [r7, #48]	; 0x30
 801a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d103      	bne.n	801a9ba <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801a9b2:	6978      	ldr	r0, [r7, #20]
 801a9b4:	f7fa f99a 	bl	8014cec <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801a9b8:	e136      	b.n	801ac28 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801a9ba:	6979      	ldr	r1, [r7, #20]
 801a9bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9be:	f7fa fa63 	bl	8014e88 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801a9c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9c4:	f7fa fa20 	bl	8014e08 <pbuf_clen>
 801a9c8:	4603      	mov	r3, r0
 801a9ca:	461a      	mov	r2, r3
 801a9cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a9d0:	4413      	add	r3, r2
 801a9d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a9d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a9da:	2b09      	cmp	r3, #9
 801a9dc:	d903      	bls.n	801a9e6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801a9de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9e0:	f7fa f984 	bl	8014cec <pbuf_free>
      goto memerr;
 801a9e4:	e120      	b.n	801ac28 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a9e6:	68fb      	ldr	r3, [r7, #12]
 801a9e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a9ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a9ee:	441a      	add	r2, r3
 801a9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9f4:	9300      	str	r3, [sp, #0]
 801a9f6:	4613      	mov	r3, r2
 801a9f8:	2200      	movs	r2, #0
 801a9fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a9fc:	68f8      	ldr	r0, [r7, #12]
 801a9fe:	f7ff fc51 	bl	801a2a4 <tcp_create_segment>
 801aa02:	64f8      	str	r0, [r7, #76]	; 0x4c
 801aa04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	f000 810d 	beq.w	801ac26 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801aa0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d102      	bne.n	801aa18 <tcp_write+0x450>
      queue = seg;
 801aa12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aa14:	647b      	str	r3, [r7, #68]	; 0x44
 801aa16:	e00c      	b.n	801aa32 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801aa18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d106      	bne.n	801aa2c <tcp_write+0x464>
 801aa1e:	4b53      	ldr	r3, [pc, #332]	; (801ab6c <tcp_write+0x5a4>)
 801aa20:	f240 22ab 	movw	r2, #683	; 0x2ab
 801aa24:	4955      	ldr	r1, [pc, #340]	; (801ab7c <tcp_write+0x5b4>)
 801aa26:	4853      	ldr	r0, [pc, #332]	; (801ab74 <tcp_write+0x5ac>)
 801aa28:	f007 f978 	bl	8021d1c <iprintf>
      prev_seg->next = seg;
 801aa2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801aa2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801aa30:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801aa32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aa34:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801aa36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aa3a:	8b3b      	ldrh	r3, [r7, #24]
 801aa3c:	4413      	add	r3, r2
 801aa3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801aa42:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aa46:	88fb      	ldrh	r3, [r7, #6]
 801aa48:	429a      	cmp	r2, r3
 801aa4a:	f4ff af3d 	bcc.w	801a8c8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801aa4e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d02c      	beq.n	801aaae <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801aa54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aa56:	685b      	ldr	r3, [r3, #4]
 801aa58:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa5a:	e01e      	b.n	801aa9a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801aa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa5e:	891a      	ldrh	r2, [r3, #8]
 801aa60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aa62:	4413      	add	r3, r2
 801aa64:	b29a      	uxth	r2, r3
 801aa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa68:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801aa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d110      	bne.n	801aa94 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801aa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa74:	685b      	ldr	r3, [r3, #4]
 801aa76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801aa78:	8952      	ldrh	r2, [r2, #10]
 801aa7a:	4413      	add	r3, r2
 801aa7c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801aa7e:	68b9      	ldr	r1, [r7, #8]
 801aa80:	4618      	mov	r0, r3
 801aa82:	f006 fcd9 	bl	8021438 <memcpy>
        p->len += oversize_used;
 801aa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa88:	895a      	ldrh	r2, [r3, #10]
 801aa8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aa8c:	4413      	add	r3, r2
 801aa8e:	b29a      	uxth	r2, r3
 801aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa92:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801aa94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d1dd      	bne.n	801aa5c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801aaa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aaa2:	891a      	ldrh	r2, [r3, #8]
 801aaa4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aaa6:	4413      	add	r3, r2
 801aaa8:	b29a      	uxth	r2, r3
 801aaaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aaac:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801aaae:	8a7a      	ldrh	r2, [r7, #18]
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801aab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d018      	beq.n	801aaee <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801aabc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d106      	bne.n	801aad0 <tcp_write+0x508>
 801aac2:	4b2a      	ldr	r3, [pc, #168]	; (801ab6c <tcp_write+0x5a4>)
 801aac4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801aac8:	492d      	ldr	r1, [pc, #180]	; (801ab80 <tcp_write+0x5b8>)
 801aaca:	482a      	ldr	r0, [pc, #168]	; (801ab74 <tcp_write+0x5ac>)
 801aacc:	f007 f926 	bl	8021d1c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801aad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aad2:	685b      	ldr	r3, [r3, #4]
 801aad4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801aad6:	4618      	mov	r0, r3
 801aad8:	f7fa f9d6 	bl	8014e88 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801aadc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aade:	891a      	ldrh	r2, [r3, #8]
 801aae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aae2:	891b      	ldrh	r3, [r3, #8]
 801aae4:	4413      	add	r3, r2
 801aae6:	b29a      	uxth	r2, r3
 801aae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aaea:	811a      	strh	r2, [r3, #8]
 801aaec:	e037      	b.n	801ab5e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801aaee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d034      	beq.n	801ab5e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801aaf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d003      	beq.n	801ab02 <tcp_write+0x53a>
 801aafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aafc:	685b      	ldr	r3, [r3, #4]
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d106      	bne.n	801ab10 <tcp_write+0x548>
 801ab02:	4b1a      	ldr	r3, [pc, #104]	; (801ab6c <tcp_write+0x5a4>)
 801ab04:	f240 22e6 	movw	r2, #742	; 0x2e6
 801ab08:	491e      	ldr	r1, [pc, #120]	; (801ab84 <tcp_write+0x5bc>)
 801ab0a:	481a      	ldr	r0, [pc, #104]	; (801ab74 <tcp_write+0x5ac>)
 801ab0c:	f007 f906 	bl	8021d1c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ab10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab12:	685b      	ldr	r3, [r3, #4]
 801ab14:	62bb      	str	r3, [r7, #40]	; 0x28
 801ab16:	e009      	b.n	801ab2c <tcp_write+0x564>
      p->tot_len += extendlen;
 801ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab1a:	891a      	ldrh	r2, [r3, #8]
 801ab1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab1e:	4413      	add	r3, r2
 801ab20:	b29a      	uxth	r2, r3
 801ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab24:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	62bb      	str	r3, [r7, #40]	; 0x28
 801ab2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d1f1      	bne.n	801ab18 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801ab34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab36:	891a      	ldrh	r2, [r3, #8]
 801ab38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab3a:	4413      	add	r3, r2
 801ab3c:	b29a      	uxth	r2, r3
 801ab3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab40:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801ab42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab44:	895a      	ldrh	r2, [r3, #10]
 801ab46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab48:	4413      	add	r3, r2
 801ab4a:	b29a      	uxth	r2, r3
 801ab4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab4e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801ab50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab52:	891a      	ldrh	r2, [r3, #8]
 801ab54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab56:	4413      	add	r3, r2
 801ab58:	b29a      	uxth	r2, r3
 801ab5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab5c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801ab5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d111      	bne.n	801ab88 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ab68:	66da      	str	r2, [r3, #108]	; 0x6c
 801ab6a:	e010      	b.n	801ab8e <tcp_write+0x5c6>
 801ab6c:	0802705c 	.word	0x0802705c
 801ab70:	08027318 	.word	0x08027318
 801ab74:	080270cc 	.word	0x080270cc
 801ab78:	08027358 	.word	0x08027358
 801ab7c:	08027368 	.word	0x08027368
 801ab80:	0802737c 	.word	0x0802737c
 801ab84:	080273b4 	.word	0x080273b4
  } else {
    last_unsent->next = queue;
 801ab88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ab8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ab8c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801ab92:	88fb      	ldrh	r3, [r7, #6]
 801ab94:	441a      	add	r2, r3
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801aba0:	88fb      	ldrh	r3, [r7, #6]
 801aba2:	1ad3      	subs	r3, r2, r3
 801aba4:	b29a      	uxth	r2, r3
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801abb2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d00e      	beq.n	801abde <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d10a      	bne.n	801abde <tcp_write+0x616>
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801abcc:	2b00      	cmp	r3, #0
 801abce:	d106      	bne.n	801abde <tcp_write+0x616>
 801abd0:	4b2c      	ldr	r3, [pc, #176]	; (801ac84 <tcp_write+0x6bc>)
 801abd2:	f240 3212 	movw	r2, #786	; 0x312
 801abd6:	492c      	ldr	r1, [pc, #176]	; (801ac88 <tcp_write+0x6c0>)
 801abd8:	482c      	ldr	r0, [pc, #176]	; (801ac8c <tcp_write+0x6c4>)
 801abda:	f007 f89f 	bl	8021d1c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801abde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d016      	beq.n	801ac12 <tcp_write+0x64a>
 801abe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abe6:	68db      	ldr	r3, [r3, #12]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d012      	beq.n	801ac12 <tcp_write+0x64a>
 801abec:	797b      	ldrb	r3, [r7, #5]
 801abee:	f003 0302 	and.w	r3, r3, #2
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d10d      	bne.n	801ac12 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801abf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abf8:	68db      	ldr	r3, [r3, #12]
 801abfa:	899b      	ldrh	r3, [r3, #12]
 801abfc:	b29c      	uxth	r4, r3
 801abfe:	2008      	movs	r0, #8
 801ac00:	f7f5 fefa 	bl	80109f8 <lwip_htons>
 801ac04:	4603      	mov	r3, r0
 801ac06:	461a      	mov	r2, r3
 801ac08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac0a:	68db      	ldr	r3, [r3, #12]
 801ac0c:	4322      	orrs	r2, r4
 801ac0e:	b292      	uxth	r2, r2
 801ac10:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801ac12:	2300      	movs	r3, #0
 801ac14:	e031      	b.n	801ac7a <tcp_write+0x6b2>
          goto memerr;
 801ac16:	bf00      	nop
 801ac18:	e006      	b.n	801ac28 <tcp_write+0x660>
            goto memerr;
 801ac1a:	bf00      	nop
 801ac1c:	e004      	b.n	801ac28 <tcp_write+0x660>
        goto memerr;
 801ac1e:	bf00      	nop
 801ac20:	e002      	b.n	801ac28 <tcp_write+0x660>
        goto memerr;
 801ac22:	bf00      	nop
 801ac24:	e000      	b.n	801ac28 <tcp_write+0x660>
      goto memerr;
 801ac26:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	8b5b      	ldrh	r3, [r3, #26]
 801ac2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac30:	b29a      	uxth	r2, r3
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801ac36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d002      	beq.n	801ac42 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801ac3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ac3e:	f7fa f855 	bl	8014cec <pbuf_free>
  }
  if (queue != NULL) {
 801ac42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	d002      	beq.n	801ac4e <tcp_write+0x686>
    tcp_segs_free(queue);
 801ac48:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ac4a:	f7fc fb6f 	bl	801732c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d00e      	beq.n	801ac76 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801ac58:	68fb      	ldr	r3, [r7, #12]
 801ac5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d10a      	bne.n	801ac76 <tcp_write+0x6ae>
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	d106      	bne.n	801ac76 <tcp_write+0x6ae>
 801ac68:	4b06      	ldr	r3, [pc, #24]	; (801ac84 <tcp_write+0x6bc>)
 801ac6a:	f240 3227 	movw	r2, #807	; 0x327
 801ac6e:	4906      	ldr	r1, [pc, #24]	; (801ac88 <tcp_write+0x6c0>)
 801ac70:	4806      	ldr	r0, [pc, #24]	; (801ac8c <tcp_write+0x6c4>)
 801ac72:	f007 f853 	bl	8021d1c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801ac76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	375c      	adds	r7, #92	; 0x5c
 801ac7e:	46bd      	mov	sp, r7
 801ac80:	bd90      	pop	{r4, r7, pc}
 801ac82:	bf00      	nop
 801ac84:	0802705c 	.word	0x0802705c
 801ac88:	080273ec 	.word	0x080273ec
 801ac8c:	080270cc 	.word	0x080270cc

0801ac90 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801ac90:	b590      	push	{r4, r7, lr}
 801ac92:	b08b      	sub	sp, #44	; 0x2c
 801ac94:	af02      	add	r7, sp, #8
 801ac96:	6078      	str	r0, [r7, #4]
 801ac98:	460b      	mov	r3, r1
 801ac9a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801ac9c:	2300      	movs	r3, #0
 801ac9e:	61fb      	str	r3, [r7, #28]
 801aca0:	2300      	movs	r3, #0
 801aca2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801aca4:	2300      	movs	r3, #0
 801aca6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d106      	bne.n	801acbc <tcp_split_unsent_seg+0x2c>
 801acae:	4b95      	ldr	r3, [pc, #596]	; (801af04 <tcp_split_unsent_seg+0x274>)
 801acb0:	f240 324b 	movw	r2, #843	; 0x34b
 801acb4:	4994      	ldr	r1, [pc, #592]	; (801af08 <tcp_split_unsent_seg+0x278>)
 801acb6:	4895      	ldr	r0, [pc, #596]	; (801af0c <tcp_split_unsent_seg+0x27c>)
 801acb8:	f007 f830 	bl	8021d1c <iprintf>

  useg = pcb->unsent;
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801acc0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801acc2:	697b      	ldr	r3, [r7, #20]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d102      	bne.n	801acce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801acc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801accc:	e116      	b.n	801aefc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801acce:	887b      	ldrh	r3, [r7, #2]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d109      	bne.n	801ace8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801acd4:	4b8b      	ldr	r3, [pc, #556]	; (801af04 <tcp_split_unsent_seg+0x274>)
 801acd6:	f240 3253 	movw	r2, #851	; 0x353
 801acda:	498d      	ldr	r1, [pc, #564]	; (801af10 <tcp_split_unsent_seg+0x280>)
 801acdc:	488b      	ldr	r0, [pc, #556]	; (801af0c <tcp_split_unsent_seg+0x27c>)
 801acde:	f007 f81d 	bl	8021d1c <iprintf>
    return ERR_VAL;
 801ace2:	f06f 0305 	mvn.w	r3, #5
 801ace6:	e109      	b.n	801aefc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801ace8:	697b      	ldr	r3, [r7, #20]
 801acea:	891b      	ldrh	r3, [r3, #8]
 801acec:	887a      	ldrh	r2, [r7, #2]
 801acee:	429a      	cmp	r2, r3
 801acf0:	d301      	bcc.n	801acf6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801acf2:	2300      	movs	r3, #0
 801acf4:	e102      	b.n	801aefc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801acfa:	887a      	ldrh	r2, [r7, #2]
 801acfc:	429a      	cmp	r2, r3
 801acfe:	d906      	bls.n	801ad0e <tcp_split_unsent_seg+0x7e>
 801ad00:	4b80      	ldr	r3, [pc, #512]	; (801af04 <tcp_split_unsent_seg+0x274>)
 801ad02:	f240 325b 	movw	r2, #859	; 0x35b
 801ad06:	4983      	ldr	r1, [pc, #524]	; (801af14 <tcp_split_unsent_seg+0x284>)
 801ad08:	4880      	ldr	r0, [pc, #512]	; (801af0c <tcp_split_unsent_seg+0x27c>)
 801ad0a:	f007 f807 	bl	8021d1c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801ad0e:	697b      	ldr	r3, [r7, #20]
 801ad10:	891b      	ldrh	r3, [r3, #8]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d106      	bne.n	801ad24 <tcp_split_unsent_seg+0x94>
 801ad16:	4b7b      	ldr	r3, [pc, #492]	; (801af04 <tcp_split_unsent_seg+0x274>)
 801ad18:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801ad1c:	497e      	ldr	r1, [pc, #504]	; (801af18 <tcp_split_unsent_seg+0x288>)
 801ad1e:	487b      	ldr	r0, [pc, #492]	; (801af0c <tcp_split_unsent_seg+0x27c>)
 801ad20:	f006 fffc 	bl	8021d1c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801ad24:	697b      	ldr	r3, [r7, #20]
 801ad26:	7a9b      	ldrb	r3, [r3, #10]
 801ad28:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ad2a:	7bfb      	ldrb	r3, [r7, #15]
 801ad2c:	009b      	lsls	r3, r3, #2
 801ad2e:	b2db      	uxtb	r3, r3
 801ad30:	f003 0304 	and.w	r3, r3, #4
 801ad34:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801ad36:	697b      	ldr	r3, [r7, #20]
 801ad38:	891a      	ldrh	r2, [r3, #8]
 801ad3a:	887b      	ldrh	r3, [r7, #2]
 801ad3c:	1ad3      	subs	r3, r2, r3
 801ad3e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ad40:	7bbb      	ldrb	r3, [r7, #14]
 801ad42:	b29a      	uxth	r2, r3
 801ad44:	89bb      	ldrh	r3, [r7, #12]
 801ad46:	4413      	add	r3, r2
 801ad48:	b29b      	uxth	r3, r3
 801ad4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ad4e:	4619      	mov	r1, r3
 801ad50:	2036      	movs	r0, #54	; 0x36
 801ad52:	f7f9 fce7 	bl	8014724 <pbuf_alloc>
 801ad56:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ad58:	693b      	ldr	r3, [r7, #16]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	f000 80b7 	beq.w	801aece <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801ad60:	697b      	ldr	r3, [r7, #20]
 801ad62:	685b      	ldr	r3, [r3, #4]
 801ad64:	891a      	ldrh	r2, [r3, #8]
 801ad66:	697b      	ldr	r3, [r7, #20]
 801ad68:	891b      	ldrh	r3, [r3, #8]
 801ad6a:	1ad3      	subs	r3, r2, r3
 801ad6c:	b29a      	uxth	r2, r3
 801ad6e:	887b      	ldrh	r3, [r7, #2]
 801ad70:	4413      	add	r3, r2
 801ad72:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ad74:	697b      	ldr	r3, [r7, #20]
 801ad76:	6858      	ldr	r0, [r3, #4]
 801ad78:	693b      	ldr	r3, [r7, #16]
 801ad7a:	685a      	ldr	r2, [r3, #4]
 801ad7c:	7bbb      	ldrb	r3, [r7, #14]
 801ad7e:	18d1      	adds	r1, r2, r3
 801ad80:	897b      	ldrh	r3, [r7, #10]
 801ad82:	89ba      	ldrh	r2, [r7, #12]
 801ad84:	f7fa f9b8 	bl	80150f8 <pbuf_copy_partial>
 801ad88:	4603      	mov	r3, r0
 801ad8a:	461a      	mov	r2, r3
 801ad8c:	89bb      	ldrh	r3, [r7, #12]
 801ad8e:	4293      	cmp	r3, r2
 801ad90:	f040 809f 	bne.w	801aed2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801ad94:	697b      	ldr	r3, [r7, #20]
 801ad96:	68db      	ldr	r3, [r3, #12]
 801ad98:	899b      	ldrh	r3, [r3, #12]
 801ad9a:	b29b      	uxth	r3, r3
 801ad9c:	4618      	mov	r0, r3
 801ad9e:	f7f5 fe2b 	bl	80109f8 <lwip_htons>
 801ada2:	4603      	mov	r3, r0
 801ada4:	b2db      	uxtb	r3, r3
 801ada6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801adaa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801adac:	2300      	movs	r3, #0
 801adae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801adb0:	7efb      	ldrb	r3, [r7, #27]
 801adb2:	f003 0308 	and.w	r3, r3, #8
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d007      	beq.n	801adca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801adba:	7efb      	ldrb	r3, [r7, #27]
 801adbc:	f023 0308 	bic.w	r3, r3, #8
 801adc0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801adc2:	7ebb      	ldrb	r3, [r7, #26]
 801adc4:	f043 0308 	orr.w	r3, r3, #8
 801adc8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801adca:	7efb      	ldrb	r3, [r7, #27]
 801adcc:	f003 0301 	and.w	r3, r3, #1
 801add0:	2b00      	cmp	r3, #0
 801add2:	d007      	beq.n	801ade4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801add4:	7efb      	ldrb	r3, [r7, #27]
 801add6:	f023 0301 	bic.w	r3, r3, #1
 801adda:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801addc:	7ebb      	ldrb	r3, [r7, #26]
 801adde:	f043 0301 	orr.w	r3, r3, #1
 801ade2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801ade4:	697b      	ldr	r3, [r7, #20]
 801ade6:	68db      	ldr	r3, [r3, #12]
 801ade8:	685b      	ldr	r3, [r3, #4]
 801adea:	4618      	mov	r0, r3
 801adec:	f7f5 fe19 	bl	8010a22 <lwip_htonl>
 801adf0:	4602      	mov	r2, r0
 801adf2:	887b      	ldrh	r3, [r7, #2]
 801adf4:	18d1      	adds	r1, r2, r3
 801adf6:	7eba      	ldrb	r2, [r7, #26]
 801adf8:	7bfb      	ldrb	r3, [r7, #15]
 801adfa:	9300      	str	r3, [sp, #0]
 801adfc:	460b      	mov	r3, r1
 801adfe:	6939      	ldr	r1, [r7, #16]
 801ae00:	6878      	ldr	r0, [r7, #4]
 801ae02:	f7ff fa4f 	bl	801a2a4 <tcp_create_segment>
 801ae06:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801ae08:	69fb      	ldr	r3, [r7, #28]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d063      	beq.n	801aed6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801ae0e:	697b      	ldr	r3, [r7, #20]
 801ae10:	685b      	ldr	r3, [r3, #4]
 801ae12:	4618      	mov	r0, r3
 801ae14:	f7f9 fff8 	bl	8014e08 <pbuf_clen>
 801ae18:	4603      	mov	r3, r0
 801ae1a:	461a      	mov	r2, r3
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ae22:	1a9b      	subs	r3, r3, r2
 801ae24:	b29a      	uxth	r2, r3
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ae2c:	697b      	ldr	r3, [r7, #20]
 801ae2e:	6858      	ldr	r0, [r3, #4]
 801ae30:	697b      	ldr	r3, [r7, #20]
 801ae32:	685b      	ldr	r3, [r3, #4]
 801ae34:	891a      	ldrh	r2, [r3, #8]
 801ae36:	89bb      	ldrh	r3, [r7, #12]
 801ae38:	1ad3      	subs	r3, r2, r3
 801ae3a:	b29b      	uxth	r3, r3
 801ae3c:	4619      	mov	r1, r3
 801ae3e:	f7f9 fdcf 	bl	80149e0 <pbuf_realloc>
  useg->len -= remainder;
 801ae42:	697b      	ldr	r3, [r7, #20]
 801ae44:	891a      	ldrh	r2, [r3, #8]
 801ae46:	89bb      	ldrh	r3, [r7, #12]
 801ae48:	1ad3      	subs	r3, r2, r3
 801ae4a:	b29a      	uxth	r2, r3
 801ae4c:	697b      	ldr	r3, [r7, #20]
 801ae4e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ae50:	697b      	ldr	r3, [r7, #20]
 801ae52:	68db      	ldr	r3, [r3, #12]
 801ae54:	899b      	ldrh	r3, [r3, #12]
 801ae56:	b29c      	uxth	r4, r3
 801ae58:	7efb      	ldrb	r3, [r7, #27]
 801ae5a:	b29b      	uxth	r3, r3
 801ae5c:	4618      	mov	r0, r3
 801ae5e:	f7f5 fdcb 	bl	80109f8 <lwip_htons>
 801ae62:	4603      	mov	r3, r0
 801ae64:	461a      	mov	r2, r3
 801ae66:	697b      	ldr	r3, [r7, #20]
 801ae68:	68db      	ldr	r3, [r3, #12]
 801ae6a:	4322      	orrs	r2, r4
 801ae6c:	b292      	uxth	r2, r2
 801ae6e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801ae70:	697b      	ldr	r3, [r7, #20]
 801ae72:	685b      	ldr	r3, [r3, #4]
 801ae74:	4618      	mov	r0, r3
 801ae76:	f7f9 ffc7 	bl	8014e08 <pbuf_clen>
 801ae7a:	4603      	mov	r3, r0
 801ae7c:	461a      	mov	r2, r3
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ae84:	4413      	add	r3, r2
 801ae86:	b29a      	uxth	r2, r3
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ae8e:	69fb      	ldr	r3, [r7, #28]
 801ae90:	685b      	ldr	r3, [r3, #4]
 801ae92:	4618      	mov	r0, r3
 801ae94:	f7f9 ffb8 	bl	8014e08 <pbuf_clen>
 801ae98:	4603      	mov	r3, r0
 801ae9a:	461a      	mov	r2, r3
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aea2:	4413      	add	r3, r2
 801aea4:	b29a      	uxth	r2, r3
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801aeac:	697b      	ldr	r3, [r7, #20]
 801aeae:	681a      	ldr	r2, [r3, #0]
 801aeb0:	69fb      	ldr	r3, [r7, #28]
 801aeb2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801aeb4:	697b      	ldr	r3, [r7, #20]
 801aeb6:	69fa      	ldr	r2, [r7, #28]
 801aeb8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801aeba:	69fb      	ldr	r3, [r7, #28]
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d103      	bne.n	801aeca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	2200      	movs	r2, #0
 801aec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801aeca:	2300      	movs	r3, #0
 801aecc:	e016      	b.n	801aefc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801aece:	bf00      	nop
 801aed0:	e002      	b.n	801aed8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801aed2:	bf00      	nop
 801aed4:	e000      	b.n	801aed8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801aed6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801aed8:	69fb      	ldr	r3, [r7, #28]
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d006      	beq.n	801aeec <tcp_split_unsent_seg+0x25c>
 801aede:	4b09      	ldr	r3, [pc, #36]	; (801af04 <tcp_split_unsent_seg+0x274>)
 801aee0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801aee4:	490d      	ldr	r1, [pc, #52]	; (801af1c <tcp_split_unsent_seg+0x28c>)
 801aee6:	4809      	ldr	r0, [pc, #36]	; (801af0c <tcp_split_unsent_seg+0x27c>)
 801aee8:	f006 ff18 	bl	8021d1c <iprintf>
  if (p != NULL) {
 801aeec:	693b      	ldr	r3, [r7, #16]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d002      	beq.n	801aef8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801aef2:	6938      	ldr	r0, [r7, #16]
 801aef4:	f7f9 fefa 	bl	8014cec <pbuf_free>
  }

  return ERR_MEM;
 801aef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801aefc:	4618      	mov	r0, r3
 801aefe:	3724      	adds	r7, #36	; 0x24
 801af00:	46bd      	mov	sp, r7
 801af02:	bd90      	pop	{r4, r7, pc}
 801af04:	0802705c 	.word	0x0802705c
 801af08:	0802740c 	.word	0x0802740c
 801af0c:	080270cc 	.word	0x080270cc
 801af10:	08027430 	.word	0x08027430
 801af14:	08027454 	.word	0x08027454
 801af18:	08027464 	.word	0x08027464
 801af1c:	08027474 	.word	0x08027474

0801af20 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801af20:	b590      	push	{r4, r7, lr}
 801af22:	b085      	sub	sp, #20
 801af24:	af00      	add	r7, sp, #0
 801af26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d106      	bne.n	801af3c <tcp_send_fin+0x1c>
 801af2e:	4b21      	ldr	r3, [pc, #132]	; (801afb4 <tcp_send_fin+0x94>)
 801af30:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801af34:	4920      	ldr	r1, [pc, #128]	; (801afb8 <tcp_send_fin+0x98>)
 801af36:	4821      	ldr	r0, [pc, #132]	; (801afbc <tcp_send_fin+0x9c>)
 801af38:	f006 fef0 	bl	8021d1c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af40:	2b00      	cmp	r3, #0
 801af42:	d02e      	beq.n	801afa2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af48:	60fb      	str	r3, [r7, #12]
 801af4a:	e002      	b.n	801af52 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	2b00      	cmp	r3, #0
 801af58:	d1f8      	bne.n	801af4c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	68db      	ldr	r3, [r3, #12]
 801af5e:	899b      	ldrh	r3, [r3, #12]
 801af60:	b29b      	uxth	r3, r3
 801af62:	4618      	mov	r0, r3
 801af64:	f7f5 fd48 	bl	80109f8 <lwip_htons>
 801af68:	4603      	mov	r3, r0
 801af6a:	b2db      	uxtb	r3, r3
 801af6c:	f003 0307 	and.w	r3, r3, #7
 801af70:	2b00      	cmp	r3, #0
 801af72:	d116      	bne.n	801afa2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	68db      	ldr	r3, [r3, #12]
 801af78:	899b      	ldrh	r3, [r3, #12]
 801af7a:	b29c      	uxth	r4, r3
 801af7c:	2001      	movs	r0, #1
 801af7e:	f7f5 fd3b 	bl	80109f8 <lwip_htons>
 801af82:	4603      	mov	r3, r0
 801af84:	461a      	mov	r2, r3
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	68db      	ldr	r3, [r3, #12]
 801af8a:	4322      	orrs	r2, r4
 801af8c:	b292      	uxth	r2, r2
 801af8e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	8b5b      	ldrh	r3, [r3, #26]
 801af94:	f043 0320 	orr.w	r3, r3, #32
 801af98:	b29a      	uxth	r2, r3
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801af9e:	2300      	movs	r3, #0
 801afa0:	e004      	b.n	801afac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801afa2:	2101      	movs	r1, #1
 801afa4:	6878      	ldr	r0, [r7, #4]
 801afa6:	f000 f80b 	bl	801afc0 <tcp_enqueue_flags>
 801afaa:	4603      	mov	r3, r0
}
 801afac:	4618      	mov	r0, r3
 801afae:	3714      	adds	r7, #20
 801afb0:	46bd      	mov	sp, r7
 801afb2:	bd90      	pop	{r4, r7, pc}
 801afb4:	0802705c 	.word	0x0802705c
 801afb8:	08027480 	.word	0x08027480
 801afbc:	080270cc 	.word	0x080270cc

0801afc0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801afc0:	b580      	push	{r7, lr}
 801afc2:	b08a      	sub	sp, #40	; 0x28
 801afc4:	af02      	add	r7, sp, #8
 801afc6:	6078      	str	r0, [r7, #4]
 801afc8:	460b      	mov	r3, r1
 801afca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801afcc:	2300      	movs	r3, #0
 801afce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801afd0:	2300      	movs	r3, #0
 801afd2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801afd4:	78fb      	ldrb	r3, [r7, #3]
 801afd6:	f003 0303 	and.w	r3, r3, #3
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d106      	bne.n	801afec <tcp_enqueue_flags+0x2c>
 801afde:	4b67      	ldr	r3, [pc, #412]	; (801b17c <tcp_enqueue_flags+0x1bc>)
 801afe0:	f240 4211 	movw	r2, #1041	; 0x411
 801afe4:	4966      	ldr	r1, [pc, #408]	; (801b180 <tcp_enqueue_flags+0x1c0>)
 801afe6:	4867      	ldr	r0, [pc, #412]	; (801b184 <tcp_enqueue_flags+0x1c4>)
 801afe8:	f006 fe98 	bl	8021d1c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d106      	bne.n	801b000 <tcp_enqueue_flags+0x40>
 801aff2:	4b62      	ldr	r3, [pc, #392]	; (801b17c <tcp_enqueue_flags+0x1bc>)
 801aff4:	f240 4213 	movw	r2, #1043	; 0x413
 801aff8:	4963      	ldr	r1, [pc, #396]	; (801b188 <tcp_enqueue_flags+0x1c8>)
 801affa:	4862      	ldr	r0, [pc, #392]	; (801b184 <tcp_enqueue_flags+0x1c4>)
 801affc:	f006 fe8e 	bl	8021d1c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801b000:	78fb      	ldrb	r3, [r7, #3]
 801b002:	f003 0302 	and.w	r3, r3, #2
 801b006:	2b00      	cmp	r3, #0
 801b008:	d001      	beq.n	801b00e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801b00a:	2301      	movs	r3, #1
 801b00c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b00e:	7ffb      	ldrb	r3, [r7, #31]
 801b010:	009b      	lsls	r3, r3, #2
 801b012:	b2db      	uxtb	r3, r3
 801b014:	f003 0304 	and.w	r3, r3, #4
 801b018:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b01a:	7dfb      	ldrb	r3, [r7, #23]
 801b01c:	b29b      	uxth	r3, r3
 801b01e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b022:	4619      	mov	r1, r3
 801b024:	2036      	movs	r0, #54	; 0x36
 801b026:	f7f9 fb7d 	bl	8014724 <pbuf_alloc>
 801b02a:	6138      	str	r0, [r7, #16]
 801b02c:	693b      	ldr	r3, [r7, #16]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d109      	bne.n	801b046 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	8b5b      	ldrh	r3, [r3, #26]
 801b036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b03a:	b29a      	uxth	r2, r3
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b044:	e095      	b.n	801b172 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b046:	693b      	ldr	r3, [r7, #16]
 801b048:	895a      	ldrh	r2, [r3, #10]
 801b04a:	7dfb      	ldrb	r3, [r7, #23]
 801b04c:	b29b      	uxth	r3, r3
 801b04e:	429a      	cmp	r2, r3
 801b050:	d206      	bcs.n	801b060 <tcp_enqueue_flags+0xa0>
 801b052:	4b4a      	ldr	r3, [pc, #296]	; (801b17c <tcp_enqueue_flags+0x1bc>)
 801b054:	f240 4239 	movw	r2, #1081	; 0x439
 801b058:	494c      	ldr	r1, [pc, #304]	; (801b18c <tcp_enqueue_flags+0x1cc>)
 801b05a:	484a      	ldr	r0, [pc, #296]	; (801b184 <tcp_enqueue_flags+0x1c4>)
 801b05c:	f006 fe5e 	bl	8021d1c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801b064:	78fa      	ldrb	r2, [r7, #3]
 801b066:	7ffb      	ldrb	r3, [r7, #31]
 801b068:	9300      	str	r3, [sp, #0]
 801b06a:	460b      	mov	r3, r1
 801b06c:	6939      	ldr	r1, [r7, #16]
 801b06e:	6878      	ldr	r0, [r7, #4]
 801b070:	f7ff f918 	bl	801a2a4 <tcp_create_segment>
 801b074:	60f8      	str	r0, [r7, #12]
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d109      	bne.n	801b090 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	8b5b      	ldrh	r3, [r3, #26]
 801b080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b084:	b29a      	uxth	r2, r3
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b08a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b08e:	e070      	b.n	801b172 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b090:	68fb      	ldr	r3, [r7, #12]
 801b092:	68db      	ldr	r3, [r3, #12]
 801b094:	f003 0303 	and.w	r3, r3, #3
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d006      	beq.n	801b0aa <tcp_enqueue_flags+0xea>
 801b09c:	4b37      	ldr	r3, [pc, #220]	; (801b17c <tcp_enqueue_flags+0x1bc>)
 801b09e:	f240 4242 	movw	r2, #1090	; 0x442
 801b0a2:	493b      	ldr	r1, [pc, #236]	; (801b190 <tcp_enqueue_flags+0x1d0>)
 801b0a4:	4837      	ldr	r0, [pc, #220]	; (801b184 <tcp_enqueue_flags+0x1c4>)
 801b0a6:	f006 fe39 	bl	8021d1c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	891b      	ldrh	r3, [r3, #8]
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d006      	beq.n	801b0c0 <tcp_enqueue_flags+0x100>
 801b0b2:	4b32      	ldr	r3, [pc, #200]	; (801b17c <tcp_enqueue_flags+0x1bc>)
 801b0b4:	f240 4243 	movw	r2, #1091	; 0x443
 801b0b8:	4936      	ldr	r1, [pc, #216]	; (801b194 <tcp_enqueue_flags+0x1d4>)
 801b0ba:	4832      	ldr	r0, [pc, #200]	; (801b184 <tcp_enqueue_flags+0x1c4>)
 801b0bc:	f006 fe2e 	bl	8021d1c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d103      	bne.n	801b0d0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	68fa      	ldr	r2, [r7, #12]
 801b0cc:	66da      	str	r2, [r3, #108]	; 0x6c
 801b0ce:	e00d      	b.n	801b0ec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0d4:	61bb      	str	r3, [r7, #24]
 801b0d6:	e002      	b.n	801b0de <tcp_enqueue_flags+0x11e>
 801b0d8:	69bb      	ldr	r3, [r7, #24]
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	61bb      	str	r3, [r7, #24]
 801b0de:	69bb      	ldr	r3, [r7, #24]
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d1f8      	bne.n	801b0d8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801b0e6:	69bb      	ldr	r3, [r7, #24]
 801b0e8:	68fa      	ldr	r2, [r7, #12]
 801b0ea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	2200      	movs	r2, #0
 801b0f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b0f4:	78fb      	ldrb	r3, [r7, #3]
 801b0f6:	f003 0302 	and.w	r3, r3, #2
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d104      	bne.n	801b108 <tcp_enqueue_flags+0x148>
 801b0fe:	78fb      	ldrb	r3, [r7, #3]
 801b100:	f003 0301 	and.w	r3, r3, #1
 801b104:	2b00      	cmp	r3, #0
 801b106:	d004      	beq.n	801b112 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b10c:	1c5a      	adds	r2, r3, #1
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b112:	78fb      	ldrb	r3, [r7, #3]
 801b114:	f003 0301 	and.w	r3, r3, #1
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d006      	beq.n	801b12a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	8b5b      	ldrh	r3, [r3, #26]
 801b120:	f043 0320 	orr.w	r3, r3, #32
 801b124:	b29a      	uxth	r2, r3
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	685b      	ldr	r3, [r3, #4]
 801b12e:	4618      	mov	r0, r3
 801b130:	f7f9 fe6a 	bl	8014e08 <pbuf_clen>
 801b134:	4603      	mov	r3, r0
 801b136:	461a      	mov	r2, r3
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b13e:	4413      	add	r3, r2
 801b140:	b29a      	uxth	r2, r3
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d00e      	beq.n	801b170 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b156:	2b00      	cmp	r3, #0
 801b158:	d10a      	bne.n	801b170 <tcp_enqueue_flags+0x1b0>
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d106      	bne.n	801b170 <tcp_enqueue_flags+0x1b0>
 801b162:	4b06      	ldr	r3, [pc, #24]	; (801b17c <tcp_enqueue_flags+0x1bc>)
 801b164:	f240 4265 	movw	r2, #1125	; 0x465
 801b168:	490b      	ldr	r1, [pc, #44]	; (801b198 <tcp_enqueue_flags+0x1d8>)
 801b16a:	4806      	ldr	r0, [pc, #24]	; (801b184 <tcp_enqueue_flags+0x1c4>)
 801b16c:	f006 fdd6 	bl	8021d1c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b170:	2300      	movs	r3, #0
}
 801b172:	4618      	mov	r0, r3
 801b174:	3720      	adds	r7, #32
 801b176:	46bd      	mov	sp, r7
 801b178:	bd80      	pop	{r7, pc}
 801b17a:	bf00      	nop
 801b17c:	0802705c 	.word	0x0802705c
 801b180:	0802749c 	.word	0x0802749c
 801b184:	080270cc 	.word	0x080270cc
 801b188:	080274f4 	.word	0x080274f4
 801b18c:	08027514 	.word	0x08027514
 801b190:	08027550 	.word	0x08027550
 801b194:	08027568 	.word	0x08027568
 801b198:	08027594 	.word	0x08027594

0801b19c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b19c:	b5b0      	push	{r4, r5, r7, lr}
 801b19e:	b08a      	sub	sp, #40	; 0x28
 801b1a0:	af00      	add	r7, sp, #0
 801b1a2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d106      	bne.n	801b1b8 <tcp_output+0x1c>
 801b1aa:	4b9e      	ldr	r3, [pc, #632]	; (801b424 <tcp_output+0x288>)
 801b1ac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801b1b0:	499d      	ldr	r1, [pc, #628]	; (801b428 <tcp_output+0x28c>)
 801b1b2:	489e      	ldr	r0, [pc, #632]	; (801b42c <tcp_output+0x290>)
 801b1b4:	f006 fdb2 	bl	8021d1c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	7d1b      	ldrb	r3, [r3, #20]
 801b1bc:	2b01      	cmp	r3, #1
 801b1be:	d106      	bne.n	801b1ce <tcp_output+0x32>
 801b1c0:	4b98      	ldr	r3, [pc, #608]	; (801b424 <tcp_output+0x288>)
 801b1c2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801b1c6:	499a      	ldr	r1, [pc, #616]	; (801b430 <tcp_output+0x294>)
 801b1c8:	4898      	ldr	r0, [pc, #608]	; (801b42c <tcp_output+0x290>)
 801b1ca:	f006 fda7 	bl	8021d1c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b1ce:	4b99      	ldr	r3, [pc, #612]	; (801b434 <tcp_output+0x298>)
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	687a      	ldr	r2, [r7, #4]
 801b1d4:	429a      	cmp	r2, r3
 801b1d6:	d101      	bne.n	801b1dc <tcp_output+0x40>
    return ERR_OK;
 801b1d8:	2300      	movs	r3, #0
 801b1da:	e1ce      	b.n	801b57a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b1e8:	4293      	cmp	r3, r2
 801b1ea:	bf28      	it	cs
 801b1ec:	4613      	movcs	r3, r2
 801b1ee:	b29b      	uxth	r3, r3
 801b1f0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b1f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d10b      	bne.n	801b216 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	8b5b      	ldrh	r3, [r3, #26]
 801b202:	f003 0302 	and.w	r3, r3, #2
 801b206:	2b00      	cmp	r3, #0
 801b208:	f000 81aa 	beq.w	801b560 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801b20c:	6878      	ldr	r0, [r7, #4]
 801b20e:	f000 fdcb 	bl	801bda8 <tcp_send_empty_ack>
 801b212:	4603      	mov	r3, r0
 801b214:	e1b1      	b.n	801b57a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801b216:	6879      	ldr	r1, [r7, #4]
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	3304      	adds	r3, #4
 801b21c:	461a      	mov	r2, r3
 801b21e:	6878      	ldr	r0, [r7, #4]
 801b220:	f7ff f824 	bl	801a26c <tcp_route>
 801b224:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b226:	697b      	ldr	r3, [r7, #20]
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d102      	bne.n	801b232 <tcp_output+0x96>
    return ERR_RTE;
 801b22c:	f06f 0303 	mvn.w	r3, #3
 801b230:	e1a3      	b.n	801b57a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	2b00      	cmp	r3, #0
 801b236:	d003      	beq.n	801b240 <tcp_output+0xa4>
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d111      	bne.n	801b264 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b240:	697b      	ldr	r3, [r7, #20]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d002      	beq.n	801b24c <tcp_output+0xb0>
 801b246:	697b      	ldr	r3, [r7, #20]
 801b248:	3304      	adds	r3, #4
 801b24a:	e000      	b.n	801b24e <tcp_output+0xb2>
 801b24c:	2300      	movs	r3, #0
 801b24e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b250:	693b      	ldr	r3, [r7, #16]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d102      	bne.n	801b25c <tcp_output+0xc0>
      return ERR_RTE;
 801b256:	f06f 0303 	mvn.w	r3, #3
 801b25a:	e18e      	b.n	801b57a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b25c:	693b      	ldr	r3, [r7, #16]
 801b25e:	681a      	ldr	r2, [r3, #0]
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b266:	68db      	ldr	r3, [r3, #12]
 801b268:	685b      	ldr	r3, [r3, #4]
 801b26a:	4618      	mov	r0, r3
 801b26c:	f7f5 fbd9 	bl	8010a22 <lwip_htonl>
 801b270:	4602      	mov	r2, r0
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b276:	1ad3      	subs	r3, r2, r3
 801b278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b27a:	8912      	ldrh	r2, [r2, #8]
 801b27c:	4413      	add	r3, r2
 801b27e:	69ba      	ldr	r2, [r7, #24]
 801b280:	429a      	cmp	r2, r3
 801b282:	d227      	bcs.n	801b2d4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b28a:	461a      	mov	r2, r3
 801b28c:	69bb      	ldr	r3, [r7, #24]
 801b28e:	4293      	cmp	r3, r2
 801b290:	d114      	bne.n	801b2bc <tcp_output+0x120>
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b296:	2b00      	cmp	r3, #0
 801b298:	d110      	bne.n	801b2bc <tcp_output+0x120>
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d10b      	bne.n	801b2bc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	2200      	movs	r2, #0
 801b2a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	2201      	movs	r2, #1
 801b2b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	8b5b      	ldrh	r3, [r3, #26]
 801b2c0:	f003 0302 	and.w	r3, r3, #2
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	f000 814d 	beq.w	801b564 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801b2ca:	6878      	ldr	r0, [r7, #4]
 801b2cc:	f000 fd6c 	bl	801bda8 <tcp_send_empty_ack>
 801b2d0:	4603      	mov	r3, r0
 801b2d2:	e152      	b.n	801b57a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	2200      	movs	r2, #0
 801b2d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b2e2:	6a3b      	ldr	r3, [r7, #32]
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	f000 811c 	beq.w	801b522 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801b2ea:	e002      	b.n	801b2f2 <tcp_output+0x156>
 801b2ec:	6a3b      	ldr	r3, [r7, #32]
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	623b      	str	r3, [r7, #32]
 801b2f2:	6a3b      	ldr	r3, [r7, #32]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d1f8      	bne.n	801b2ec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b2fa:	e112      	b.n	801b522 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2fe:	68db      	ldr	r3, [r3, #12]
 801b300:	899b      	ldrh	r3, [r3, #12]
 801b302:	b29b      	uxth	r3, r3
 801b304:	4618      	mov	r0, r3
 801b306:	f7f5 fb77 	bl	80109f8 <lwip_htons>
 801b30a:	4603      	mov	r3, r0
 801b30c:	b2db      	uxtb	r3, r3
 801b30e:	f003 0304 	and.w	r3, r3, #4
 801b312:	2b00      	cmp	r3, #0
 801b314:	d006      	beq.n	801b324 <tcp_output+0x188>
 801b316:	4b43      	ldr	r3, [pc, #268]	; (801b424 <tcp_output+0x288>)
 801b318:	f240 5236 	movw	r2, #1334	; 0x536
 801b31c:	4946      	ldr	r1, [pc, #280]	; (801b438 <tcp_output+0x29c>)
 801b31e:	4843      	ldr	r0, [pc, #268]	; (801b42c <tcp_output+0x290>)
 801b320:	f006 fcfc 	bl	8021d1c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d01f      	beq.n	801b36c <tcp_output+0x1d0>
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	8b5b      	ldrh	r3, [r3, #26]
 801b330:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801b334:	2b00      	cmp	r3, #0
 801b336:	d119      	bne.n	801b36c <tcp_output+0x1d0>
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d00b      	beq.n	801b358 <tcp_output+0x1bc>
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d110      	bne.n	801b36c <tcp_output+0x1d0>
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b34e:	891a      	ldrh	r2, [r3, #8]
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b354:	429a      	cmp	r2, r3
 801b356:	d209      	bcs.n	801b36c <tcp_output+0x1d0>
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d004      	beq.n	801b36c <tcp_output+0x1d0>
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b368:	2b08      	cmp	r3, #8
 801b36a:	d901      	bls.n	801b370 <tcp_output+0x1d4>
 801b36c:	2301      	movs	r3, #1
 801b36e:	e000      	b.n	801b372 <tcp_output+0x1d6>
 801b370:	2300      	movs	r3, #0
 801b372:	2b00      	cmp	r3, #0
 801b374:	d106      	bne.n	801b384 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	8b5b      	ldrh	r3, [r3, #26]
 801b37a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b37e:	2b00      	cmp	r3, #0
 801b380:	f000 80e4 	beq.w	801b54c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	7d1b      	ldrb	r3, [r3, #20]
 801b388:	2b02      	cmp	r3, #2
 801b38a:	d00d      	beq.n	801b3a8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b38e:	68db      	ldr	r3, [r3, #12]
 801b390:	899b      	ldrh	r3, [r3, #12]
 801b392:	b29c      	uxth	r4, r3
 801b394:	2010      	movs	r0, #16
 801b396:	f7f5 fb2f 	bl	80109f8 <lwip_htons>
 801b39a:	4603      	mov	r3, r0
 801b39c:	461a      	mov	r2, r3
 801b39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3a0:	68db      	ldr	r3, [r3, #12]
 801b3a2:	4322      	orrs	r2, r4
 801b3a4:	b292      	uxth	r2, r2
 801b3a6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b3a8:	697a      	ldr	r2, [r7, #20]
 801b3aa:	6879      	ldr	r1, [r7, #4]
 801b3ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b3ae:	f000 f909 	bl	801b5c4 <tcp_output_segment>
 801b3b2:	4603      	mov	r3, r0
 801b3b4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b3b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d009      	beq.n	801b3d2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	8b5b      	ldrh	r3, [r3, #26]
 801b3c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b3c6:	b29a      	uxth	r2, r3
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	835a      	strh	r2, [r3, #26]
      return err;
 801b3cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b3d0:	e0d3      	b.n	801b57a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3d4:	681a      	ldr	r2, [r3, #0]
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	7d1b      	ldrb	r3, [r3, #20]
 801b3de:	2b02      	cmp	r3, #2
 801b3e0:	d006      	beq.n	801b3f0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	8b5b      	ldrh	r3, [r3, #26]
 801b3e6:	f023 0303 	bic.w	r3, r3, #3
 801b3ea:	b29a      	uxth	r2, r3
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3f2:	68db      	ldr	r3, [r3, #12]
 801b3f4:	685b      	ldr	r3, [r3, #4]
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	f7f5 fb13 	bl	8010a22 <lwip_htonl>
 801b3fc:	4604      	mov	r4, r0
 801b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b400:	891b      	ldrh	r3, [r3, #8]
 801b402:	461d      	mov	r5, r3
 801b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b406:	68db      	ldr	r3, [r3, #12]
 801b408:	899b      	ldrh	r3, [r3, #12]
 801b40a:	b29b      	uxth	r3, r3
 801b40c:	4618      	mov	r0, r3
 801b40e:	f7f5 faf3 	bl	80109f8 <lwip_htons>
 801b412:	4603      	mov	r3, r0
 801b414:	b2db      	uxtb	r3, r3
 801b416:	f003 0303 	and.w	r3, r3, #3
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d00e      	beq.n	801b43c <tcp_output+0x2a0>
 801b41e:	2301      	movs	r3, #1
 801b420:	e00d      	b.n	801b43e <tcp_output+0x2a2>
 801b422:	bf00      	nop
 801b424:	0802705c 	.word	0x0802705c
 801b428:	080275bc 	.word	0x080275bc
 801b42c:	080270cc 	.word	0x080270cc
 801b430:	080275d4 	.word	0x080275d4
 801b434:	2400d260 	.word	0x2400d260
 801b438:	080275fc 	.word	0x080275fc
 801b43c:	2300      	movs	r3, #0
 801b43e:	442b      	add	r3, r5
 801b440:	4423      	add	r3, r4
 801b442:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b448:	68bb      	ldr	r3, [r7, #8]
 801b44a:	1ad3      	subs	r3, r2, r3
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	da02      	bge.n	801b456 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	68ba      	ldr	r2, [r7, #8]
 801b454:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b458:	891b      	ldrh	r3, [r3, #8]
 801b45a:	461c      	mov	r4, r3
 801b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b45e:	68db      	ldr	r3, [r3, #12]
 801b460:	899b      	ldrh	r3, [r3, #12]
 801b462:	b29b      	uxth	r3, r3
 801b464:	4618      	mov	r0, r3
 801b466:	f7f5 fac7 	bl	80109f8 <lwip_htons>
 801b46a:	4603      	mov	r3, r0
 801b46c:	b2db      	uxtb	r3, r3
 801b46e:	f003 0303 	and.w	r3, r3, #3
 801b472:	2b00      	cmp	r3, #0
 801b474:	d001      	beq.n	801b47a <tcp_output+0x2de>
 801b476:	2301      	movs	r3, #1
 801b478:	e000      	b.n	801b47c <tcp_output+0x2e0>
 801b47a:	2300      	movs	r3, #0
 801b47c:	4423      	add	r3, r4
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d049      	beq.n	801b516 <tcp_output+0x37a>
      seg->next = NULL;
 801b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b484:	2200      	movs	r2, #0
 801b486:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d105      	bne.n	801b49c <tcp_output+0x300>
        pcb->unacked = seg;
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b494:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801b496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b498:	623b      	str	r3, [r7, #32]
 801b49a:	e03f      	b.n	801b51c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b49e:	68db      	ldr	r3, [r3, #12]
 801b4a0:	685b      	ldr	r3, [r3, #4]
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	f7f5 fabd 	bl	8010a22 <lwip_htonl>
 801b4a8:	4604      	mov	r4, r0
 801b4aa:	6a3b      	ldr	r3, [r7, #32]
 801b4ac:	68db      	ldr	r3, [r3, #12]
 801b4ae:	685b      	ldr	r3, [r3, #4]
 801b4b0:	4618      	mov	r0, r3
 801b4b2:	f7f5 fab6 	bl	8010a22 <lwip_htonl>
 801b4b6:	4603      	mov	r3, r0
 801b4b8:	1ae3      	subs	r3, r4, r3
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	da24      	bge.n	801b508 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	3370      	adds	r3, #112	; 0x70
 801b4c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b4c4:	e002      	b.n	801b4cc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801b4c6:	69fb      	ldr	r3, [r7, #28]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b4cc:	69fb      	ldr	r3, [r7, #28]
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d011      	beq.n	801b4f8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b4d4:	69fb      	ldr	r3, [r7, #28]
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	68db      	ldr	r3, [r3, #12]
 801b4da:	685b      	ldr	r3, [r3, #4]
 801b4dc:	4618      	mov	r0, r3
 801b4de:	f7f5 faa0 	bl	8010a22 <lwip_htonl>
 801b4e2:	4604      	mov	r4, r0
 801b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4e6:	68db      	ldr	r3, [r3, #12]
 801b4e8:	685b      	ldr	r3, [r3, #4]
 801b4ea:	4618      	mov	r0, r3
 801b4ec:	f7f5 fa99 	bl	8010a22 <lwip_htonl>
 801b4f0:	4603      	mov	r3, r0
 801b4f2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	dbe6      	blt.n	801b4c6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801b4f8:	69fb      	ldr	r3, [r7, #28]
 801b4fa:	681a      	ldr	r2, [r3, #0]
 801b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4fe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b500:	69fb      	ldr	r3, [r7, #28]
 801b502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b504:	601a      	str	r2, [r3, #0]
 801b506:	e009      	b.n	801b51c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b508:	6a3b      	ldr	r3, [r7, #32]
 801b50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b50c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b50e:	6a3b      	ldr	r3, [r7, #32]
 801b510:	681b      	ldr	r3, [r3, #0]
 801b512:	623b      	str	r3, [r7, #32]
 801b514:	e002      	b.n	801b51c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b518:	f7fb ff1d 	bl	8017356 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b520:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801b522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b524:	2b00      	cmp	r3, #0
 801b526:	d012      	beq.n	801b54e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b52a:	68db      	ldr	r3, [r3, #12]
 801b52c:	685b      	ldr	r3, [r3, #4]
 801b52e:	4618      	mov	r0, r3
 801b530:	f7f5 fa77 	bl	8010a22 <lwip_htonl>
 801b534:	4602      	mov	r2, r0
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b53a:	1ad3      	subs	r3, r2, r3
 801b53c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b53e:	8912      	ldrh	r2, [r2, #8]
 801b540:	4413      	add	r3, r2
  while (seg != NULL &&
 801b542:	69ba      	ldr	r2, [r7, #24]
 801b544:	429a      	cmp	r2, r3
 801b546:	f4bf aed9 	bcs.w	801b2fc <tcp_output+0x160>
 801b54a:	e000      	b.n	801b54e <tcp_output+0x3b2>
      break;
 801b54c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b552:	2b00      	cmp	r3, #0
 801b554:	d108      	bne.n	801b568 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	2200      	movs	r2, #0
 801b55a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801b55e:	e004      	b.n	801b56a <tcp_output+0x3ce>
    goto output_done;
 801b560:	bf00      	nop
 801b562:	e002      	b.n	801b56a <tcp_output+0x3ce>
    goto output_done;
 801b564:	bf00      	nop
 801b566:	e000      	b.n	801b56a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801b568:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	8b5b      	ldrh	r3, [r3, #26]
 801b56e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b572:	b29a      	uxth	r2, r3
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b578:	2300      	movs	r3, #0
}
 801b57a:	4618      	mov	r0, r3
 801b57c:	3728      	adds	r7, #40	; 0x28
 801b57e:	46bd      	mov	sp, r7
 801b580:	bdb0      	pop	{r4, r5, r7, pc}
 801b582:	bf00      	nop

0801b584 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b584:	b580      	push	{r7, lr}
 801b586:	b082      	sub	sp, #8
 801b588:	af00      	add	r7, sp, #0
 801b58a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d106      	bne.n	801b5a0 <tcp_output_segment_busy+0x1c>
 801b592:	4b09      	ldr	r3, [pc, #36]	; (801b5b8 <tcp_output_segment_busy+0x34>)
 801b594:	f240 529a 	movw	r2, #1434	; 0x59a
 801b598:	4908      	ldr	r1, [pc, #32]	; (801b5bc <tcp_output_segment_busy+0x38>)
 801b59a:	4809      	ldr	r0, [pc, #36]	; (801b5c0 <tcp_output_segment_busy+0x3c>)
 801b59c:	f006 fbbe 	bl	8021d1c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	685b      	ldr	r3, [r3, #4]
 801b5a4:	7b9b      	ldrb	r3, [r3, #14]
 801b5a6:	2b01      	cmp	r3, #1
 801b5a8:	d001      	beq.n	801b5ae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801b5aa:	2301      	movs	r3, #1
 801b5ac:	e000      	b.n	801b5b0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801b5ae:	2300      	movs	r3, #0
}
 801b5b0:	4618      	mov	r0, r3
 801b5b2:	3708      	adds	r7, #8
 801b5b4:	46bd      	mov	sp, r7
 801b5b6:	bd80      	pop	{r7, pc}
 801b5b8:	0802705c 	.word	0x0802705c
 801b5bc:	08027614 	.word	0x08027614
 801b5c0:	080270cc 	.word	0x080270cc

0801b5c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b5c4:	b5b0      	push	{r4, r5, r7, lr}
 801b5c6:	b08c      	sub	sp, #48	; 0x30
 801b5c8:	af04      	add	r7, sp, #16
 801b5ca:	60f8      	str	r0, [r7, #12]
 801b5cc:	60b9      	str	r1, [r7, #8]
 801b5ce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801b5d0:	68fb      	ldr	r3, [r7, #12]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d106      	bne.n	801b5e4 <tcp_output_segment+0x20>
 801b5d6:	4b63      	ldr	r3, [pc, #396]	; (801b764 <tcp_output_segment+0x1a0>)
 801b5d8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801b5dc:	4962      	ldr	r1, [pc, #392]	; (801b768 <tcp_output_segment+0x1a4>)
 801b5de:	4863      	ldr	r0, [pc, #396]	; (801b76c <tcp_output_segment+0x1a8>)
 801b5e0:	f006 fb9c 	bl	8021d1c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801b5e4:	68bb      	ldr	r3, [r7, #8]
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d106      	bne.n	801b5f8 <tcp_output_segment+0x34>
 801b5ea:	4b5e      	ldr	r3, [pc, #376]	; (801b764 <tcp_output_segment+0x1a0>)
 801b5ec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801b5f0:	495f      	ldr	r1, [pc, #380]	; (801b770 <tcp_output_segment+0x1ac>)
 801b5f2:	485e      	ldr	r0, [pc, #376]	; (801b76c <tcp_output_segment+0x1a8>)
 801b5f4:	f006 fb92 	bl	8021d1c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d106      	bne.n	801b60c <tcp_output_segment+0x48>
 801b5fe:	4b59      	ldr	r3, [pc, #356]	; (801b764 <tcp_output_segment+0x1a0>)
 801b600:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801b604:	495b      	ldr	r1, [pc, #364]	; (801b774 <tcp_output_segment+0x1b0>)
 801b606:	4859      	ldr	r0, [pc, #356]	; (801b76c <tcp_output_segment+0x1a8>)
 801b608:	f006 fb88 	bl	8021d1c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801b60c:	68f8      	ldr	r0, [r7, #12]
 801b60e:	f7ff ffb9 	bl	801b584 <tcp_output_segment_busy>
 801b612:	4603      	mov	r3, r0
 801b614:	2b00      	cmp	r3, #0
 801b616:	d001      	beq.n	801b61c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801b618:	2300      	movs	r3, #0
 801b61a:	e09f      	b.n	801b75c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b61c:	68bb      	ldr	r3, [r7, #8]
 801b61e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	68dc      	ldr	r4, [r3, #12]
 801b624:	4610      	mov	r0, r2
 801b626:	f7f5 f9fc 	bl	8010a22 <lwip_htonl>
 801b62a:	4603      	mov	r3, r0
 801b62c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b62e:	68bb      	ldr	r3, [r7, #8]
 801b630:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	68dc      	ldr	r4, [r3, #12]
 801b636:	4610      	mov	r0, r2
 801b638:	f7f5 f9de 	bl	80109f8 <lwip_htons>
 801b63c:	4603      	mov	r3, r0
 801b63e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b640:	68bb      	ldr	r3, [r7, #8]
 801b642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b644:	68ba      	ldr	r2, [r7, #8]
 801b646:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b648:	441a      	add	r2, r3
 801b64a:	68bb      	ldr	r3, [r7, #8]
 801b64c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b64e:	68fb      	ldr	r3, [r7, #12]
 801b650:	68db      	ldr	r3, [r3, #12]
 801b652:	3314      	adds	r3, #20
 801b654:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	7a9b      	ldrb	r3, [r3, #10]
 801b65a:	f003 0301 	and.w	r3, r3, #1
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d015      	beq.n	801b68e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b662:	68bb      	ldr	r3, [r7, #8]
 801b664:	3304      	adds	r3, #4
 801b666:	461a      	mov	r2, r3
 801b668:	6879      	ldr	r1, [r7, #4]
 801b66a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801b66e:	f7fc fa37 	bl	8017ae0 <tcp_eff_send_mss_netif>
 801b672:	4603      	mov	r3, r0
 801b674:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b676:	8b7b      	ldrh	r3, [r7, #26]
 801b678:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801b67c:	4618      	mov	r0, r3
 801b67e:	f7f5 f9d0 	bl	8010a22 <lwip_htonl>
 801b682:	4602      	mov	r2, r0
 801b684:	69fb      	ldr	r3, [r7, #28]
 801b686:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b688:	69fb      	ldr	r3, [r7, #28]
 801b68a:	3304      	adds	r3, #4
 801b68c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b68e:	68bb      	ldr	r3, [r7, #8]
 801b690:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b694:	2b00      	cmp	r3, #0
 801b696:	da02      	bge.n	801b69e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801b698:	68bb      	ldr	r3, [r7, #8]
 801b69a:	2200      	movs	r2, #0
 801b69c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801b69e:	68bb      	ldr	r3, [r7, #8]
 801b6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d10c      	bne.n	801b6c0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801b6a6:	4b34      	ldr	r3, [pc, #208]	; (801b778 <tcp_output_segment+0x1b4>)
 801b6a8:	681a      	ldr	r2, [r3, #0]
 801b6aa:	68bb      	ldr	r3, [r7, #8]
 801b6ac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b6ae:	68fb      	ldr	r3, [r7, #12]
 801b6b0:	68db      	ldr	r3, [r3, #12]
 801b6b2:	685b      	ldr	r3, [r3, #4]
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	f7f5 f9b4 	bl	8010a22 <lwip_htonl>
 801b6ba:	4602      	mov	r2, r0
 801b6bc:	68bb      	ldr	r3, [r7, #8]
 801b6be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	68da      	ldr	r2, [r3, #12]
 801b6c4:	68fb      	ldr	r3, [r7, #12]
 801b6c6:	685b      	ldr	r3, [r3, #4]
 801b6c8:	685b      	ldr	r3, [r3, #4]
 801b6ca:	1ad3      	subs	r3, r2, r3
 801b6cc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b6ce:	68fb      	ldr	r3, [r7, #12]
 801b6d0:	685b      	ldr	r3, [r3, #4]
 801b6d2:	8959      	ldrh	r1, [r3, #10]
 801b6d4:	68fb      	ldr	r3, [r7, #12]
 801b6d6:	685b      	ldr	r3, [r3, #4]
 801b6d8:	8b3a      	ldrh	r2, [r7, #24]
 801b6da:	1a8a      	subs	r2, r1, r2
 801b6dc:	b292      	uxth	r2, r2
 801b6de:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	685b      	ldr	r3, [r3, #4]
 801b6e4:	8919      	ldrh	r1, [r3, #8]
 801b6e6:	68fb      	ldr	r3, [r7, #12]
 801b6e8:	685b      	ldr	r3, [r3, #4]
 801b6ea:	8b3a      	ldrh	r2, [r7, #24]
 801b6ec:	1a8a      	subs	r2, r1, r2
 801b6ee:	b292      	uxth	r2, r2
 801b6f0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b6f2:	68fb      	ldr	r3, [r7, #12]
 801b6f4:	685b      	ldr	r3, [r3, #4]
 801b6f6:	68fa      	ldr	r2, [r7, #12]
 801b6f8:	68d2      	ldr	r2, [r2, #12]
 801b6fa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b6fc:	68fb      	ldr	r3, [r7, #12]
 801b6fe:	68db      	ldr	r3, [r3, #12]
 801b700:	2200      	movs	r2, #0
 801b702:	741a      	strb	r2, [r3, #16]
 801b704:	2200      	movs	r2, #0
 801b706:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b708:	68fb      	ldr	r3, [r7, #12]
 801b70a:	68db      	ldr	r3, [r3, #12]
 801b70c:	f103 0214 	add.w	r2, r3, #20
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	7a9b      	ldrb	r3, [r3, #10]
 801b714:	009b      	lsls	r3, r3, #2
 801b716:	f003 0304 	and.w	r3, r3, #4
 801b71a:	4413      	add	r3, r2
 801b71c:	69fa      	ldr	r2, [r7, #28]
 801b71e:	429a      	cmp	r2, r3
 801b720:	d006      	beq.n	801b730 <tcp_output_segment+0x16c>
 801b722:	4b10      	ldr	r3, [pc, #64]	; (801b764 <tcp_output_segment+0x1a0>)
 801b724:	f240 621c 	movw	r2, #1564	; 0x61c
 801b728:	4914      	ldr	r1, [pc, #80]	; (801b77c <tcp_output_segment+0x1b8>)
 801b72a:	4810      	ldr	r0, [pc, #64]	; (801b76c <tcp_output_segment+0x1a8>)
 801b72c:	f006 faf6 	bl	8021d1c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b730:	68fb      	ldr	r3, [r7, #12]
 801b732:	6858      	ldr	r0, [r3, #4]
 801b734:	68b9      	ldr	r1, [r7, #8]
 801b736:	68bb      	ldr	r3, [r7, #8]
 801b738:	1d1c      	adds	r4, r3, #4
 801b73a:	68bb      	ldr	r3, [r7, #8]
 801b73c:	7add      	ldrb	r5, [r3, #11]
 801b73e:	68bb      	ldr	r3, [r7, #8]
 801b740:	7a9b      	ldrb	r3, [r3, #10]
 801b742:	687a      	ldr	r2, [r7, #4]
 801b744:	9202      	str	r2, [sp, #8]
 801b746:	2206      	movs	r2, #6
 801b748:	9201      	str	r2, [sp, #4]
 801b74a:	9300      	str	r3, [sp, #0]
 801b74c:	462b      	mov	r3, r5
 801b74e:	4622      	mov	r2, r4
 801b750:	f7f6 fe06 	bl	8012360 <ip4_output_if>
 801b754:	4603      	mov	r3, r0
 801b756:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b758:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b75c:	4618      	mov	r0, r3
 801b75e:	3720      	adds	r7, #32
 801b760:	46bd      	mov	sp, r7
 801b762:	bdb0      	pop	{r4, r5, r7, pc}
 801b764:	0802705c 	.word	0x0802705c
 801b768:	0802763c 	.word	0x0802763c
 801b76c:	080270cc 	.word	0x080270cc
 801b770:	0802765c 	.word	0x0802765c
 801b774:	0802767c 	.word	0x0802767c
 801b778:	2400d250 	.word	0x2400d250
 801b77c:	080276a0 	.word	0x080276a0

0801b780 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b780:	b5b0      	push	{r4, r5, r7, lr}
 801b782:	b084      	sub	sp, #16
 801b784:	af00      	add	r7, sp, #0
 801b786:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	d106      	bne.n	801b79c <tcp_rexmit_rto_prepare+0x1c>
 801b78e:	4b31      	ldr	r3, [pc, #196]	; (801b854 <tcp_rexmit_rto_prepare+0xd4>)
 801b790:	f240 6263 	movw	r2, #1635	; 0x663
 801b794:	4930      	ldr	r1, [pc, #192]	; (801b858 <tcp_rexmit_rto_prepare+0xd8>)
 801b796:	4831      	ldr	r0, [pc, #196]	; (801b85c <tcp_rexmit_rto_prepare+0xdc>)
 801b798:	f006 fac0 	bl	8021d1c <iprintf>

  if (pcb->unacked == NULL) {
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d102      	bne.n	801b7aa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b7a4:	f06f 0305 	mvn.w	r3, #5
 801b7a8:	e050      	b.n	801b84c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b7ae:	60fb      	str	r3, [r7, #12]
 801b7b0:	e00b      	b.n	801b7ca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b7b2:	68f8      	ldr	r0, [r7, #12]
 801b7b4:	f7ff fee6 	bl	801b584 <tcp_output_segment_busy>
 801b7b8:	4603      	mov	r3, r0
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	d002      	beq.n	801b7c4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b7be:	f06f 0305 	mvn.w	r3, #5
 801b7c2:	e043      	b.n	801b84c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	60fb      	str	r3, [r7, #12]
 801b7ca:	68fb      	ldr	r3, [r7, #12]
 801b7cc:	681b      	ldr	r3, [r3, #0]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d1ef      	bne.n	801b7b2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b7d2:	68f8      	ldr	r0, [r7, #12]
 801b7d4:	f7ff fed6 	bl	801b584 <tcp_output_segment_busy>
 801b7d8:	4603      	mov	r3, r0
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	d002      	beq.n	801b7e4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b7de:	f06f 0305 	mvn.w	r3, #5
 801b7e2:	e033      	b.n	801b84c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	2200      	movs	r2, #0
 801b7f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	8b5b      	ldrh	r3, [r3, #26]
 801b7fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b802:	b29a      	uxth	r2, r3
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	68db      	ldr	r3, [r3, #12]
 801b80c:	685b      	ldr	r3, [r3, #4]
 801b80e:	4618      	mov	r0, r3
 801b810:	f7f5 f907 	bl	8010a22 <lwip_htonl>
 801b814:	4604      	mov	r4, r0
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	891b      	ldrh	r3, [r3, #8]
 801b81a:	461d      	mov	r5, r3
 801b81c:	68fb      	ldr	r3, [r7, #12]
 801b81e:	68db      	ldr	r3, [r3, #12]
 801b820:	899b      	ldrh	r3, [r3, #12]
 801b822:	b29b      	uxth	r3, r3
 801b824:	4618      	mov	r0, r3
 801b826:	f7f5 f8e7 	bl	80109f8 <lwip_htons>
 801b82a:	4603      	mov	r3, r0
 801b82c:	b2db      	uxtb	r3, r3
 801b82e:	f003 0303 	and.w	r3, r3, #3
 801b832:	2b00      	cmp	r3, #0
 801b834:	d001      	beq.n	801b83a <tcp_rexmit_rto_prepare+0xba>
 801b836:	2301      	movs	r3, #1
 801b838:	e000      	b.n	801b83c <tcp_rexmit_rto_prepare+0xbc>
 801b83a:	2300      	movs	r3, #0
 801b83c:	442b      	add	r3, r5
 801b83e:	18e2      	adds	r2, r4, r3
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	2200      	movs	r2, #0
 801b848:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801b84a:	2300      	movs	r3, #0
}
 801b84c:	4618      	mov	r0, r3
 801b84e:	3710      	adds	r7, #16
 801b850:	46bd      	mov	sp, r7
 801b852:	bdb0      	pop	{r4, r5, r7, pc}
 801b854:	0802705c 	.word	0x0802705c
 801b858:	080276b4 	.word	0x080276b4
 801b85c:	080270cc 	.word	0x080270cc

0801b860 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b860:	b580      	push	{r7, lr}
 801b862:	b082      	sub	sp, #8
 801b864:	af00      	add	r7, sp, #0
 801b866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d106      	bne.n	801b87c <tcp_rexmit_rto_commit+0x1c>
 801b86e:	4b0d      	ldr	r3, [pc, #52]	; (801b8a4 <tcp_rexmit_rto_commit+0x44>)
 801b870:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b874:	490c      	ldr	r1, [pc, #48]	; (801b8a8 <tcp_rexmit_rto_commit+0x48>)
 801b876:	480d      	ldr	r0, [pc, #52]	; (801b8ac <tcp_rexmit_rto_commit+0x4c>)
 801b878:	f006 fa50 	bl	8021d1c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b882:	2bff      	cmp	r3, #255	; 0xff
 801b884:	d007      	beq.n	801b896 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b88c:	3301      	adds	r3, #1
 801b88e:	b2da      	uxtb	r2, r3
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b896:	6878      	ldr	r0, [r7, #4]
 801b898:	f7ff fc80 	bl	801b19c <tcp_output>
}
 801b89c:	bf00      	nop
 801b89e:	3708      	adds	r7, #8
 801b8a0:	46bd      	mov	sp, r7
 801b8a2:	bd80      	pop	{r7, pc}
 801b8a4:	0802705c 	.word	0x0802705c
 801b8a8:	080276d8 	.word	0x080276d8
 801b8ac:	080270cc 	.word	0x080270cc

0801b8b0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b8b0:	b580      	push	{r7, lr}
 801b8b2:	b082      	sub	sp, #8
 801b8b4:	af00      	add	r7, sp, #0
 801b8b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d106      	bne.n	801b8cc <tcp_rexmit_rto+0x1c>
 801b8be:	4b0a      	ldr	r3, [pc, #40]	; (801b8e8 <tcp_rexmit_rto+0x38>)
 801b8c0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801b8c4:	4909      	ldr	r1, [pc, #36]	; (801b8ec <tcp_rexmit_rto+0x3c>)
 801b8c6:	480a      	ldr	r0, [pc, #40]	; (801b8f0 <tcp_rexmit_rto+0x40>)
 801b8c8:	f006 fa28 	bl	8021d1c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b8cc:	6878      	ldr	r0, [r7, #4]
 801b8ce:	f7ff ff57 	bl	801b780 <tcp_rexmit_rto_prepare>
 801b8d2:	4603      	mov	r3, r0
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d102      	bne.n	801b8de <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b8d8:	6878      	ldr	r0, [r7, #4]
 801b8da:	f7ff ffc1 	bl	801b860 <tcp_rexmit_rto_commit>
  }
}
 801b8de:	bf00      	nop
 801b8e0:	3708      	adds	r7, #8
 801b8e2:	46bd      	mov	sp, r7
 801b8e4:	bd80      	pop	{r7, pc}
 801b8e6:	bf00      	nop
 801b8e8:	0802705c 	.word	0x0802705c
 801b8ec:	080276fc 	.word	0x080276fc
 801b8f0:	080270cc 	.word	0x080270cc

0801b8f4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b8f4:	b590      	push	{r4, r7, lr}
 801b8f6:	b085      	sub	sp, #20
 801b8f8:	af00      	add	r7, sp, #0
 801b8fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d106      	bne.n	801b910 <tcp_rexmit+0x1c>
 801b902:	4b2f      	ldr	r3, [pc, #188]	; (801b9c0 <tcp_rexmit+0xcc>)
 801b904:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801b908:	492e      	ldr	r1, [pc, #184]	; (801b9c4 <tcp_rexmit+0xd0>)
 801b90a:	482f      	ldr	r0, [pc, #188]	; (801b9c8 <tcp_rexmit+0xd4>)
 801b90c:	f006 fa06 	bl	8021d1c <iprintf>

  if (pcb->unacked == NULL) {
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b914:	2b00      	cmp	r3, #0
 801b916:	d102      	bne.n	801b91e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b918:	f06f 0305 	mvn.w	r3, #5
 801b91c:	e04c      	b.n	801b9b8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b922:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b924:	68b8      	ldr	r0, [r7, #8]
 801b926:	f7ff fe2d 	bl	801b584 <tcp_output_segment_busy>
 801b92a:	4603      	mov	r3, r0
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d002      	beq.n	801b936 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b930:	f06f 0305 	mvn.w	r3, #5
 801b934:	e040      	b.n	801b9b8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b936:	68bb      	ldr	r3, [r7, #8]
 801b938:	681a      	ldr	r2, [r3, #0]
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	336c      	adds	r3, #108	; 0x6c
 801b942:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b944:	e002      	b.n	801b94c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b946:	68fb      	ldr	r3, [r7, #12]
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b94c:	68fb      	ldr	r3, [r7, #12]
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	2b00      	cmp	r3, #0
 801b952:	d011      	beq.n	801b978 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b954:	68fb      	ldr	r3, [r7, #12]
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	68db      	ldr	r3, [r3, #12]
 801b95a:	685b      	ldr	r3, [r3, #4]
 801b95c:	4618      	mov	r0, r3
 801b95e:	f7f5 f860 	bl	8010a22 <lwip_htonl>
 801b962:	4604      	mov	r4, r0
 801b964:	68bb      	ldr	r3, [r7, #8]
 801b966:	68db      	ldr	r3, [r3, #12]
 801b968:	685b      	ldr	r3, [r3, #4]
 801b96a:	4618      	mov	r0, r3
 801b96c:	f7f5 f859 	bl	8010a22 <lwip_htonl>
 801b970:	4603      	mov	r3, r0
 801b972:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b974:	2b00      	cmp	r3, #0
 801b976:	dbe6      	blt.n	801b946 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	681a      	ldr	r2, [r3, #0]
 801b97c:	68bb      	ldr	r3, [r7, #8]
 801b97e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b980:	68fb      	ldr	r3, [r7, #12]
 801b982:	68ba      	ldr	r2, [r7, #8]
 801b984:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b986:	68bb      	ldr	r3, [r7, #8]
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d103      	bne.n	801b996 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	2200      	movs	r2, #0
 801b992:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b99c:	2bff      	cmp	r3, #255	; 0xff
 801b99e:	d007      	beq.n	801b9b0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b9a6:	3301      	adds	r3, #1
 801b9a8:	b2da      	uxtb	r2, r3
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	2200      	movs	r2, #0
 801b9b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b9b6:	2300      	movs	r3, #0
}
 801b9b8:	4618      	mov	r0, r3
 801b9ba:	3714      	adds	r7, #20
 801b9bc:	46bd      	mov	sp, r7
 801b9be:	bd90      	pop	{r4, r7, pc}
 801b9c0:	0802705c 	.word	0x0802705c
 801b9c4:	08027718 	.word	0x08027718
 801b9c8:	080270cc 	.word	0x080270cc

0801b9cc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b9cc:	b580      	push	{r7, lr}
 801b9ce:	b082      	sub	sp, #8
 801b9d0:	af00      	add	r7, sp, #0
 801b9d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	d106      	bne.n	801b9e8 <tcp_rexmit_fast+0x1c>
 801b9da:	4b2a      	ldr	r3, [pc, #168]	; (801ba84 <tcp_rexmit_fast+0xb8>)
 801b9dc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b9e0:	4929      	ldr	r1, [pc, #164]	; (801ba88 <tcp_rexmit_fast+0xbc>)
 801b9e2:	482a      	ldr	r0, [pc, #168]	; (801ba8c <tcp_rexmit_fast+0xc0>)
 801b9e4:	f006 f99a 	bl	8021d1c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d045      	beq.n	801ba7c <tcp_rexmit_fast+0xb0>
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	8b5b      	ldrh	r3, [r3, #26]
 801b9f4:	f003 0304 	and.w	r3, r3, #4
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d13f      	bne.n	801ba7c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b9fc:	6878      	ldr	r0, [r7, #4]
 801b9fe:	f7ff ff79 	bl	801b8f4 <tcp_rexmit>
 801ba02:	4603      	mov	r3, r0
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d139      	bne.n	801ba7c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ba14:	4293      	cmp	r3, r2
 801ba16:	bf28      	it	cs
 801ba18:	4613      	movcs	r3, r2
 801ba1a:	b29b      	uxth	r3, r3
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	da00      	bge.n	801ba22 <tcp_rexmit_fast+0x56>
 801ba20:	3301      	adds	r3, #1
 801ba22:	105b      	asrs	r3, r3, #1
 801ba24:	b29a      	uxth	r2, r3
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801ba32:	461a      	mov	r2, r3
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ba38:	005b      	lsls	r3, r3, #1
 801ba3a:	429a      	cmp	r2, r3
 801ba3c:	d206      	bcs.n	801ba4c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ba42:	005b      	lsls	r3, r3, #1
 801ba44:	b29a      	uxth	r2, r3
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ba56:	4619      	mov	r1, r3
 801ba58:	0049      	lsls	r1, r1, #1
 801ba5a:	440b      	add	r3, r1
 801ba5c:	b29b      	uxth	r3, r3
 801ba5e:	4413      	add	r3, r2
 801ba60:	b29a      	uxth	r2, r3
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	8b5b      	ldrh	r3, [r3, #26]
 801ba6c:	f043 0304 	orr.w	r3, r3, #4
 801ba70:	b29a      	uxth	r2, r3
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	2200      	movs	r2, #0
 801ba7a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801ba7c:	bf00      	nop
 801ba7e:	3708      	adds	r7, #8
 801ba80:	46bd      	mov	sp, r7
 801ba82:	bd80      	pop	{r7, pc}
 801ba84:	0802705c 	.word	0x0802705c
 801ba88:	08027730 	.word	0x08027730
 801ba8c:	080270cc 	.word	0x080270cc

0801ba90 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ba90:	b580      	push	{r7, lr}
 801ba92:	b086      	sub	sp, #24
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	60f8      	str	r0, [r7, #12]
 801ba98:	607b      	str	r3, [r7, #4]
 801ba9a:	460b      	mov	r3, r1
 801ba9c:	817b      	strh	r3, [r7, #10]
 801ba9e:	4613      	mov	r3, r2
 801baa0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801baa2:	897a      	ldrh	r2, [r7, #10]
 801baa4:	893b      	ldrh	r3, [r7, #8]
 801baa6:	4413      	add	r3, r2
 801baa8:	b29b      	uxth	r3, r3
 801baaa:	3314      	adds	r3, #20
 801baac:	b29b      	uxth	r3, r3
 801baae:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bab2:	4619      	mov	r1, r3
 801bab4:	2022      	movs	r0, #34	; 0x22
 801bab6:	f7f8 fe35 	bl	8014724 <pbuf_alloc>
 801baba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801babc:	697b      	ldr	r3, [r7, #20]
 801babe:	2b00      	cmp	r3, #0
 801bac0:	d04d      	beq.n	801bb5e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801bac2:	897b      	ldrh	r3, [r7, #10]
 801bac4:	3313      	adds	r3, #19
 801bac6:	697a      	ldr	r2, [r7, #20]
 801bac8:	8952      	ldrh	r2, [r2, #10]
 801baca:	4293      	cmp	r3, r2
 801bacc:	db06      	blt.n	801badc <tcp_output_alloc_header_common+0x4c>
 801bace:	4b26      	ldr	r3, [pc, #152]	; (801bb68 <tcp_output_alloc_header_common+0xd8>)
 801bad0:	f240 7223 	movw	r2, #1827	; 0x723
 801bad4:	4925      	ldr	r1, [pc, #148]	; (801bb6c <tcp_output_alloc_header_common+0xdc>)
 801bad6:	4826      	ldr	r0, [pc, #152]	; (801bb70 <tcp_output_alloc_header_common+0xe0>)
 801bad8:	f006 f920 	bl	8021d1c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801badc:	697b      	ldr	r3, [r7, #20]
 801bade:	685b      	ldr	r3, [r3, #4]
 801bae0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801bae2:	8c3b      	ldrh	r3, [r7, #32]
 801bae4:	4618      	mov	r0, r3
 801bae6:	f7f4 ff87 	bl	80109f8 <lwip_htons>
 801baea:	4603      	mov	r3, r0
 801baec:	461a      	mov	r2, r3
 801baee:	693b      	ldr	r3, [r7, #16]
 801baf0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801baf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801baf4:	4618      	mov	r0, r3
 801baf6:	f7f4 ff7f 	bl	80109f8 <lwip_htons>
 801bafa:	4603      	mov	r3, r0
 801bafc:	461a      	mov	r2, r3
 801bafe:	693b      	ldr	r3, [r7, #16]
 801bb00:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801bb02:	693b      	ldr	r3, [r7, #16]
 801bb04:	687a      	ldr	r2, [r7, #4]
 801bb06:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801bb08:	68f8      	ldr	r0, [r7, #12]
 801bb0a:	f7f4 ff8a 	bl	8010a22 <lwip_htonl>
 801bb0e:	4602      	mov	r2, r0
 801bb10:	693b      	ldr	r3, [r7, #16]
 801bb12:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801bb14:	897b      	ldrh	r3, [r7, #10]
 801bb16:	089b      	lsrs	r3, r3, #2
 801bb18:	b29b      	uxth	r3, r3
 801bb1a:	3305      	adds	r3, #5
 801bb1c:	b29b      	uxth	r3, r3
 801bb1e:	031b      	lsls	r3, r3, #12
 801bb20:	b29a      	uxth	r2, r3
 801bb22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bb26:	b29b      	uxth	r3, r3
 801bb28:	4313      	orrs	r3, r2
 801bb2a:	b29b      	uxth	r3, r3
 801bb2c:	4618      	mov	r0, r3
 801bb2e:	f7f4 ff63 	bl	80109f8 <lwip_htons>
 801bb32:	4603      	mov	r3, r0
 801bb34:	461a      	mov	r2, r3
 801bb36:	693b      	ldr	r3, [r7, #16]
 801bb38:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801bb3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801bb3c:	4618      	mov	r0, r3
 801bb3e:	f7f4 ff5b 	bl	80109f8 <lwip_htons>
 801bb42:	4603      	mov	r3, r0
 801bb44:	461a      	mov	r2, r3
 801bb46:	693b      	ldr	r3, [r7, #16]
 801bb48:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801bb4a:	693b      	ldr	r3, [r7, #16]
 801bb4c:	2200      	movs	r2, #0
 801bb4e:	741a      	strb	r2, [r3, #16]
 801bb50:	2200      	movs	r2, #0
 801bb52:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801bb54:	693b      	ldr	r3, [r7, #16]
 801bb56:	2200      	movs	r2, #0
 801bb58:	749a      	strb	r2, [r3, #18]
 801bb5a:	2200      	movs	r2, #0
 801bb5c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801bb5e:	697b      	ldr	r3, [r7, #20]
}
 801bb60:	4618      	mov	r0, r3
 801bb62:	3718      	adds	r7, #24
 801bb64:	46bd      	mov	sp, r7
 801bb66:	bd80      	pop	{r7, pc}
 801bb68:	0802705c 	.word	0x0802705c
 801bb6c:	08027750 	.word	0x08027750
 801bb70:	080270cc 	.word	0x080270cc

0801bb74 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801bb74:	b5b0      	push	{r4, r5, r7, lr}
 801bb76:	b08a      	sub	sp, #40	; 0x28
 801bb78:	af04      	add	r7, sp, #16
 801bb7a:	60f8      	str	r0, [r7, #12]
 801bb7c:	607b      	str	r3, [r7, #4]
 801bb7e:	460b      	mov	r3, r1
 801bb80:	817b      	strh	r3, [r7, #10]
 801bb82:	4613      	mov	r3, r2
 801bb84:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d106      	bne.n	801bb9a <tcp_output_alloc_header+0x26>
 801bb8c:	4b15      	ldr	r3, [pc, #84]	; (801bbe4 <tcp_output_alloc_header+0x70>)
 801bb8e:	f240 7242 	movw	r2, #1858	; 0x742
 801bb92:	4915      	ldr	r1, [pc, #84]	; (801bbe8 <tcp_output_alloc_header+0x74>)
 801bb94:	4815      	ldr	r0, [pc, #84]	; (801bbec <tcp_output_alloc_header+0x78>)
 801bb96:	f006 f8c1 	bl	8021d1c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801bb9a:	68fb      	ldr	r3, [r7, #12]
 801bb9c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801bb9e:	68fb      	ldr	r3, [r7, #12]
 801bba0:	8adb      	ldrh	r3, [r3, #22]
 801bba2:	68fa      	ldr	r2, [r7, #12]
 801bba4:	8b12      	ldrh	r2, [r2, #24]
 801bba6:	68f9      	ldr	r1, [r7, #12]
 801bba8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801bbaa:	893d      	ldrh	r5, [r7, #8]
 801bbac:	897c      	ldrh	r4, [r7, #10]
 801bbae:	9103      	str	r1, [sp, #12]
 801bbb0:	2110      	movs	r1, #16
 801bbb2:	9102      	str	r1, [sp, #8]
 801bbb4:	9201      	str	r2, [sp, #4]
 801bbb6:	9300      	str	r3, [sp, #0]
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	462a      	mov	r2, r5
 801bbbc:	4621      	mov	r1, r4
 801bbbe:	f7ff ff67 	bl	801ba90 <tcp_output_alloc_header_common>
 801bbc2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801bbc4:	697b      	ldr	r3, [r7, #20]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d006      	beq.n	801bbd8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bbca:	68fb      	ldr	r3, [r7, #12]
 801bbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbce:	68fa      	ldr	r2, [r7, #12]
 801bbd0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801bbd2:	441a      	add	r2, r3
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801bbd8:	697b      	ldr	r3, [r7, #20]
}
 801bbda:	4618      	mov	r0, r3
 801bbdc:	3718      	adds	r7, #24
 801bbde:	46bd      	mov	sp, r7
 801bbe0:	bdb0      	pop	{r4, r5, r7, pc}
 801bbe2:	bf00      	nop
 801bbe4:	0802705c 	.word	0x0802705c
 801bbe8:	08027780 	.word	0x08027780
 801bbec:	080270cc 	.word	0x080270cc

0801bbf0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801bbf0:	b580      	push	{r7, lr}
 801bbf2:	b088      	sub	sp, #32
 801bbf4:	af00      	add	r7, sp, #0
 801bbf6:	60f8      	str	r0, [r7, #12]
 801bbf8:	60b9      	str	r1, [r7, #8]
 801bbfa:	4611      	mov	r1, r2
 801bbfc:	461a      	mov	r2, r3
 801bbfe:	460b      	mov	r3, r1
 801bc00:	71fb      	strb	r3, [r7, #7]
 801bc02:	4613      	mov	r3, r2
 801bc04:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801bc06:	2300      	movs	r3, #0
 801bc08:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801bc0a:	68bb      	ldr	r3, [r7, #8]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d106      	bne.n	801bc1e <tcp_output_fill_options+0x2e>
 801bc10:	4b13      	ldr	r3, [pc, #76]	; (801bc60 <tcp_output_fill_options+0x70>)
 801bc12:	f240 7256 	movw	r2, #1878	; 0x756
 801bc16:	4913      	ldr	r1, [pc, #76]	; (801bc64 <tcp_output_fill_options+0x74>)
 801bc18:	4813      	ldr	r0, [pc, #76]	; (801bc68 <tcp_output_fill_options+0x78>)
 801bc1a:	f006 f87f 	bl	8021d1c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801bc1e:	68bb      	ldr	r3, [r7, #8]
 801bc20:	685b      	ldr	r3, [r3, #4]
 801bc22:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801bc24:	69bb      	ldr	r3, [r7, #24]
 801bc26:	3314      	adds	r3, #20
 801bc28:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801bc2a:	69bb      	ldr	r3, [r7, #24]
 801bc2c:	f103 0214 	add.w	r2, r3, #20
 801bc30:	8bfb      	ldrh	r3, [r7, #30]
 801bc32:	009b      	lsls	r3, r3, #2
 801bc34:	4619      	mov	r1, r3
 801bc36:	79fb      	ldrb	r3, [r7, #7]
 801bc38:	009b      	lsls	r3, r3, #2
 801bc3a:	f003 0304 	and.w	r3, r3, #4
 801bc3e:	440b      	add	r3, r1
 801bc40:	4413      	add	r3, r2
 801bc42:	697a      	ldr	r2, [r7, #20]
 801bc44:	429a      	cmp	r2, r3
 801bc46:	d006      	beq.n	801bc56 <tcp_output_fill_options+0x66>
 801bc48:	4b05      	ldr	r3, [pc, #20]	; (801bc60 <tcp_output_fill_options+0x70>)
 801bc4a:	f240 7275 	movw	r2, #1909	; 0x775
 801bc4e:	4907      	ldr	r1, [pc, #28]	; (801bc6c <tcp_output_fill_options+0x7c>)
 801bc50:	4805      	ldr	r0, [pc, #20]	; (801bc68 <tcp_output_fill_options+0x78>)
 801bc52:	f006 f863 	bl	8021d1c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801bc56:	bf00      	nop
 801bc58:	3720      	adds	r7, #32
 801bc5a:	46bd      	mov	sp, r7
 801bc5c:	bd80      	pop	{r7, pc}
 801bc5e:	bf00      	nop
 801bc60:	0802705c 	.word	0x0802705c
 801bc64:	080277a8 	.word	0x080277a8
 801bc68:	080270cc 	.word	0x080270cc
 801bc6c:	080276a0 	.word	0x080276a0

0801bc70 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801bc70:	b580      	push	{r7, lr}
 801bc72:	b08a      	sub	sp, #40	; 0x28
 801bc74:	af04      	add	r7, sp, #16
 801bc76:	60f8      	str	r0, [r7, #12]
 801bc78:	60b9      	str	r1, [r7, #8]
 801bc7a:	607a      	str	r2, [r7, #4]
 801bc7c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801bc7e:	68bb      	ldr	r3, [r7, #8]
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d106      	bne.n	801bc92 <tcp_output_control_segment+0x22>
 801bc84:	4b1c      	ldr	r3, [pc, #112]	; (801bcf8 <tcp_output_control_segment+0x88>)
 801bc86:	f240 7287 	movw	r2, #1927	; 0x787
 801bc8a:	491c      	ldr	r1, [pc, #112]	; (801bcfc <tcp_output_control_segment+0x8c>)
 801bc8c:	481c      	ldr	r0, [pc, #112]	; (801bd00 <tcp_output_control_segment+0x90>)
 801bc8e:	f006 f845 	bl	8021d1c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801bc92:	683a      	ldr	r2, [r7, #0]
 801bc94:	6879      	ldr	r1, [r7, #4]
 801bc96:	68f8      	ldr	r0, [r7, #12]
 801bc98:	f7fe fae8 	bl	801a26c <tcp_route>
 801bc9c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801bc9e:	693b      	ldr	r3, [r7, #16]
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	d102      	bne.n	801bcaa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801bca4:	23fc      	movs	r3, #252	; 0xfc
 801bca6:	75fb      	strb	r3, [r7, #23]
 801bca8:	e01c      	b.n	801bce4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801bcaa:	68fb      	ldr	r3, [r7, #12]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d006      	beq.n	801bcbe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801bcb0:	68fb      	ldr	r3, [r7, #12]
 801bcb2:	7adb      	ldrb	r3, [r3, #11]
 801bcb4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801bcb6:	68fb      	ldr	r3, [r7, #12]
 801bcb8:	7a9b      	ldrb	r3, [r3, #10]
 801bcba:	757b      	strb	r3, [r7, #21]
 801bcbc:	e003      	b.n	801bcc6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801bcbe:	23ff      	movs	r3, #255	; 0xff
 801bcc0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801bcc2:	2300      	movs	r3, #0
 801bcc4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801bcc6:	7dba      	ldrb	r2, [r7, #22]
 801bcc8:	693b      	ldr	r3, [r7, #16]
 801bcca:	9302      	str	r3, [sp, #8]
 801bccc:	2306      	movs	r3, #6
 801bcce:	9301      	str	r3, [sp, #4]
 801bcd0:	7d7b      	ldrb	r3, [r7, #21]
 801bcd2:	9300      	str	r3, [sp, #0]
 801bcd4:	4613      	mov	r3, r2
 801bcd6:	683a      	ldr	r2, [r7, #0]
 801bcd8:	6879      	ldr	r1, [r7, #4]
 801bcda:	68b8      	ldr	r0, [r7, #8]
 801bcdc:	f7f6 fb40 	bl	8012360 <ip4_output_if>
 801bce0:	4603      	mov	r3, r0
 801bce2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801bce4:	68b8      	ldr	r0, [r7, #8]
 801bce6:	f7f9 f801 	bl	8014cec <pbuf_free>
  return err;
 801bcea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bcee:	4618      	mov	r0, r3
 801bcf0:	3718      	adds	r7, #24
 801bcf2:	46bd      	mov	sp, r7
 801bcf4:	bd80      	pop	{r7, pc}
 801bcf6:	bf00      	nop
 801bcf8:	0802705c 	.word	0x0802705c
 801bcfc:	080277d0 	.word	0x080277d0
 801bd00:	080270cc 	.word	0x080270cc

0801bd04 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801bd04:	b590      	push	{r4, r7, lr}
 801bd06:	b08b      	sub	sp, #44	; 0x2c
 801bd08:	af04      	add	r7, sp, #16
 801bd0a:	60f8      	str	r0, [r7, #12]
 801bd0c:	60b9      	str	r1, [r7, #8]
 801bd0e:	607a      	str	r2, [r7, #4]
 801bd10:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801bd12:	683b      	ldr	r3, [r7, #0]
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d106      	bne.n	801bd26 <tcp_rst+0x22>
 801bd18:	4b1f      	ldr	r3, [pc, #124]	; (801bd98 <tcp_rst+0x94>)
 801bd1a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801bd1e:	491f      	ldr	r1, [pc, #124]	; (801bd9c <tcp_rst+0x98>)
 801bd20:	481f      	ldr	r0, [pc, #124]	; (801bda0 <tcp_rst+0x9c>)
 801bd22:	f005 fffb 	bl	8021d1c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801bd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d106      	bne.n	801bd3a <tcp_rst+0x36>
 801bd2c:	4b1a      	ldr	r3, [pc, #104]	; (801bd98 <tcp_rst+0x94>)
 801bd2e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801bd32:	491c      	ldr	r1, [pc, #112]	; (801bda4 <tcp_rst+0xa0>)
 801bd34:	481a      	ldr	r0, [pc, #104]	; (801bda0 <tcp_rst+0x9c>)
 801bd36:	f005 fff1 	bl	8021d1c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bd3a:	2300      	movs	r3, #0
 801bd3c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801bd3e:	f246 0308 	movw	r3, #24584	; 0x6008
 801bd42:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801bd44:	7dfb      	ldrb	r3, [r7, #23]
 801bd46:	b29c      	uxth	r4, r3
 801bd48:	68b8      	ldr	r0, [r7, #8]
 801bd4a:	f7f4 fe6a 	bl	8010a22 <lwip_htonl>
 801bd4e:	4602      	mov	r2, r0
 801bd50:	8abb      	ldrh	r3, [r7, #20]
 801bd52:	9303      	str	r3, [sp, #12]
 801bd54:	2314      	movs	r3, #20
 801bd56:	9302      	str	r3, [sp, #8]
 801bd58:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801bd5a:	9301      	str	r3, [sp, #4]
 801bd5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801bd5e:	9300      	str	r3, [sp, #0]
 801bd60:	4613      	mov	r3, r2
 801bd62:	2200      	movs	r2, #0
 801bd64:	4621      	mov	r1, r4
 801bd66:	6878      	ldr	r0, [r7, #4]
 801bd68:	f7ff fe92 	bl	801ba90 <tcp_output_alloc_header_common>
 801bd6c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801bd6e:	693b      	ldr	r3, [r7, #16]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d00c      	beq.n	801bd8e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bd74:	7dfb      	ldrb	r3, [r7, #23]
 801bd76:	2200      	movs	r2, #0
 801bd78:	6939      	ldr	r1, [r7, #16]
 801bd7a:	68f8      	ldr	r0, [r7, #12]
 801bd7c:	f7ff ff38 	bl	801bbf0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801bd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd82:	683a      	ldr	r2, [r7, #0]
 801bd84:	6939      	ldr	r1, [r7, #16]
 801bd86:	68f8      	ldr	r0, [r7, #12]
 801bd88:	f7ff ff72 	bl	801bc70 <tcp_output_control_segment>
 801bd8c:	e000      	b.n	801bd90 <tcp_rst+0x8c>
    return;
 801bd8e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801bd90:	371c      	adds	r7, #28
 801bd92:	46bd      	mov	sp, r7
 801bd94:	bd90      	pop	{r4, r7, pc}
 801bd96:	bf00      	nop
 801bd98:	0802705c 	.word	0x0802705c
 801bd9c:	080277fc 	.word	0x080277fc
 801bda0:	080270cc 	.word	0x080270cc
 801bda4:	08027818 	.word	0x08027818

0801bda8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801bda8:	b590      	push	{r4, r7, lr}
 801bdaa:	b087      	sub	sp, #28
 801bdac:	af00      	add	r7, sp, #0
 801bdae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801bdb0:	2300      	movs	r3, #0
 801bdb2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801bdb4:	2300      	movs	r3, #0
 801bdb6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d106      	bne.n	801bdcc <tcp_send_empty_ack+0x24>
 801bdbe:	4b28      	ldr	r3, [pc, #160]	; (801be60 <tcp_send_empty_ack+0xb8>)
 801bdc0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801bdc4:	4927      	ldr	r1, [pc, #156]	; (801be64 <tcp_send_empty_ack+0xbc>)
 801bdc6:	4828      	ldr	r0, [pc, #160]	; (801be68 <tcp_send_empty_ack+0xc0>)
 801bdc8:	f005 ffa8 	bl	8021d1c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801bdcc:	7dfb      	ldrb	r3, [r7, #23]
 801bdce:	009b      	lsls	r3, r3, #2
 801bdd0:	b2db      	uxtb	r3, r3
 801bdd2:	f003 0304 	and.w	r3, r3, #4
 801bdd6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801bdd8:	7d7b      	ldrb	r3, [r7, #21]
 801bdda:	b29c      	uxth	r4, r3
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bde0:	4618      	mov	r0, r3
 801bde2:	f7f4 fe1e 	bl	8010a22 <lwip_htonl>
 801bde6:	4603      	mov	r3, r0
 801bde8:	2200      	movs	r2, #0
 801bdea:	4621      	mov	r1, r4
 801bdec:	6878      	ldr	r0, [r7, #4]
 801bdee:	f7ff fec1 	bl	801bb74 <tcp_output_alloc_header>
 801bdf2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bdf4:	693b      	ldr	r3, [r7, #16]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d109      	bne.n	801be0e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	8b5b      	ldrh	r3, [r3, #26]
 801bdfe:	f043 0303 	orr.w	r3, r3, #3
 801be02:	b29a      	uxth	r2, r3
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801be08:	f06f 0301 	mvn.w	r3, #1
 801be0c:	e023      	b.n	801be56 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801be0e:	7dbb      	ldrb	r3, [r7, #22]
 801be10:	7dfa      	ldrb	r2, [r7, #23]
 801be12:	6939      	ldr	r1, [r7, #16]
 801be14:	6878      	ldr	r0, [r7, #4]
 801be16:	f7ff feeb 	bl	801bbf0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801be1a:	687a      	ldr	r2, [r7, #4]
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	3304      	adds	r3, #4
 801be20:	6939      	ldr	r1, [r7, #16]
 801be22:	6878      	ldr	r0, [r7, #4]
 801be24:	f7ff ff24 	bl	801bc70 <tcp_output_control_segment>
 801be28:	4603      	mov	r3, r0
 801be2a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801be2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801be30:	2b00      	cmp	r3, #0
 801be32:	d007      	beq.n	801be44 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	8b5b      	ldrh	r3, [r3, #26]
 801be38:	f043 0303 	orr.w	r3, r3, #3
 801be3c:	b29a      	uxth	r2, r3
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	835a      	strh	r2, [r3, #26]
 801be42:	e006      	b.n	801be52 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	8b5b      	ldrh	r3, [r3, #26]
 801be48:	f023 0303 	bic.w	r3, r3, #3
 801be4c:	b29a      	uxth	r2, r3
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801be52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801be56:	4618      	mov	r0, r3
 801be58:	371c      	adds	r7, #28
 801be5a:	46bd      	mov	sp, r7
 801be5c:	bd90      	pop	{r4, r7, pc}
 801be5e:	bf00      	nop
 801be60:	0802705c 	.word	0x0802705c
 801be64:	08027834 	.word	0x08027834
 801be68:	080270cc 	.word	0x080270cc

0801be6c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801be6c:	b590      	push	{r4, r7, lr}
 801be6e:	b087      	sub	sp, #28
 801be70:	af00      	add	r7, sp, #0
 801be72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801be74:	2300      	movs	r3, #0
 801be76:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d106      	bne.n	801be8c <tcp_keepalive+0x20>
 801be7e:	4b18      	ldr	r3, [pc, #96]	; (801bee0 <tcp_keepalive+0x74>)
 801be80:	f640 0224 	movw	r2, #2084	; 0x824
 801be84:	4917      	ldr	r1, [pc, #92]	; (801bee4 <tcp_keepalive+0x78>)
 801be86:	4818      	ldr	r0, [pc, #96]	; (801bee8 <tcp_keepalive+0x7c>)
 801be88:	f005 ff48 	bl	8021d1c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801be8c:	7dfb      	ldrb	r3, [r7, #23]
 801be8e:	b29c      	uxth	r4, r3
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801be94:	3b01      	subs	r3, #1
 801be96:	4618      	mov	r0, r3
 801be98:	f7f4 fdc3 	bl	8010a22 <lwip_htonl>
 801be9c:	4603      	mov	r3, r0
 801be9e:	2200      	movs	r2, #0
 801bea0:	4621      	mov	r1, r4
 801bea2:	6878      	ldr	r0, [r7, #4]
 801bea4:	f7ff fe66 	bl	801bb74 <tcp_output_alloc_header>
 801bea8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801beaa:	693b      	ldr	r3, [r7, #16]
 801beac:	2b00      	cmp	r3, #0
 801beae:	d102      	bne.n	801beb6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801beb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801beb4:	e010      	b.n	801bed8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801beb6:	7dfb      	ldrb	r3, [r7, #23]
 801beb8:	2200      	movs	r2, #0
 801beba:	6939      	ldr	r1, [r7, #16]
 801bebc:	6878      	ldr	r0, [r7, #4]
 801bebe:	f7ff fe97 	bl	801bbf0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bec2:	687a      	ldr	r2, [r7, #4]
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	3304      	adds	r3, #4
 801bec8:	6939      	ldr	r1, [r7, #16]
 801beca:	6878      	ldr	r0, [r7, #4]
 801becc:	f7ff fed0 	bl	801bc70 <tcp_output_control_segment>
 801bed0:	4603      	mov	r3, r0
 801bed2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801bed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bed8:	4618      	mov	r0, r3
 801beda:	371c      	adds	r7, #28
 801bedc:	46bd      	mov	sp, r7
 801bede:	bd90      	pop	{r4, r7, pc}
 801bee0:	0802705c 	.word	0x0802705c
 801bee4:	08027854 	.word	0x08027854
 801bee8:	080270cc 	.word	0x080270cc

0801beec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801beec:	b590      	push	{r4, r7, lr}
 801beee:	b08b      	sub	sp, #44	; 0x2c
 801bef0:	af00      	add	r7, sp, #0
 801bef2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bef4:	2300      	movs	r3, #0
 801bef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	2b00      	cmp	r3, #0
 801befe:	d106      	bne.n	801bf0e <tcp_zero_window_probe+0x22>
 801bf00:	4b4c      	ldr	r3, [pc, #304]	; (801c034 <tcp_zero_window_probe+0x148>)
 801bf02:	f640 024f 	movw	r2, #2127	; 0x84f
 801bf06:	494c      	ldr	r1, [pc, #304]	; (801c038 <tcp_zero_window_probe+0x14c>)
 801bf08:	484c      	ldr	r0, [pc, #304]	; (801c03c <tcp_zero_window_probe+0x150>)
 801bf0a:	f005 ff07 	bl	8021d1c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bf12:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801bf14:	6a3b      	ldr	r3, [r7, #32]
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	d101      	bne.n	801bf1e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801bf1a:	2300      	movs	r3, #0
 801bf1c:	e086      	b.n	801c02c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801bf24:	2bff      	cmp	r3, #255	; 0xff
 801bf26:	d007      	beq.n	801bf38 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801bf2e:	3301      	adds	r3, #1
 801bf30:	b2da      	uxtb	r2, r3
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801bf38:	6a3b      	ldr	r3, [r7, #32]
 801bf3a:	68db      	ldr	r3, [r3, #12]
 801bf3c:	899b      	ldrh	r3, [r3, #12]
 801bf3e:	b29b      	uxth	r3, r3
 801bf40:	4618      	mov	r0, r3
 801bf42:	f7f4 fd59 	bl	80109f8 <lwip_htons>
 801bf46:	4603      	mov	r3, r0
 801bf48:	b2db      	uxtb	r3, r3
 801bf4a:	f003 0301 	and.w	r3, r3, #1
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d005      	beq.n	801bf5e <tcp_zero_window_probe+0x72>
 801bf52:	6a3b      	ldr	r3, [r7, #32]
 801bf54:	891b      	ldrh	r3, [r3, #8]
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d101      	bne.n	801bf5e <tcp_zero_window_probe+0x72>
 801bf5a:	2301      	movs	r3, #1
 801bf5c:	e000      	b.n	801bf60 <tcp_zero_window_probe+0x74>
 801bf5e:	2300      	movs	r3, #0
 801bf60:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801bf62:	7ffb      	ldrb	r3, [r7, #31]
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	bf0c      	ite	eq
 801bf68:	2301      	moveq	r3, #1
 801bf6a:	2300      	movne	r3, #0
 801bf6c:	b2db      	uxtb	r3, r3
 801bf6e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801bf70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bf74:	b299      	uxth	r1, r3
 801bf76:	6a3b      	ldr	r3, [r7, #32]
 801bf78:	68db      	ldr	r3, [r3, #12]
 801bf7a:	685b      	ldr	r3, [r3, #4]
 801bf7c:	8bba      	ldrh	r2, [r7, #28]
 801bf7e:	6878      	ldr	r0, [r7, #4]
 801bf80:	f7ff fdf8 	bl	801bb74 <tcp_output_alloc_header>
 801bf84:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801bf86:	69bb      	ldr	r3, [r7, #24]
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d102      	bne.n	801bf92 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801bf8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf90:	e04c      	b.n	801c02c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801bf92:	69bb      	ldr	r3, [r7, #24]
 801bf94:	685b      	ldr	r3, [r3, #4]
 801bf96:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801bf98:	7ffb      	ldrb	r3, [r7, #31]
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d011      	beq.n	801bfc2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801bf9e:	697b      	ldr	r3, [r7, #20]
 801bfa0:	899b      	ldrh	r3, [r3, #12]
 801bfa2:	b29b      	uxth	r3, r3
 801bfa4:	b21b      	sxth	r3, r3
 801bfa6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801bfaa:	b21c      	sxth	r4, r3
 801bfac:	2011      	movs	r0, #17
 801bfae:	f7f4 fd23 	bl	80109f8 <lwip_htons>
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	b21b      	sxth	r3, r3
 801bfb6:	4323      	orrs	r3, r4
 801bfb8:	b21b      	sxth	r3, r3
 801bfba:	b29a      	uxth	r2, r3
 801bfbc:	697b      	ldr	r3, [r7, #20]
 801bfbe:	819a      	strh	r2, [r3, #12]
 801bfc0:	e010      	b.n	801bfe4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801bfc2:	69bb      	ldr	r3, [r7, #24]
 801bfc4:	685b      	ldr	r3, [r3, #4]
 801bfc6:	3314      	adds	r3, #20
 801bfc8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801bfca:	6a3b      	ldr	r3, [r7, #32]
 801bfcc:	6858      	ldr	r0, [r3, #4]
 801bfce:	6a3b      	ldr	r3, [r7, #32]
 801bfd0:	685b      	ldr	r3, [r3, #4]
 801bfd2:	891a      	ldrh	r2, [r3, #8]
 801bfd4:	6a3b      	ldr	r3, [r7, #32]
 801bfd6:	891b      	ldrh	r3, [r3, #8]
 801bfd8:	1ad3      	subs	r3, r2, r3
 801bfda:	b29b      	uxth	r3, r3
 801bfdc:	2201      	movs	r2, #1
 801bfde:	6939      	ldr	r1, [r7, #16]
 801bfe0:	f7f9 f88a 	bl	80150f8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801bfe4:	6a3b      	ldr	r3, [r7, #32]
 801bfe6:	68db      	ldr	r3, [r3, #12]
 801bfe8:	685b      	ldr	r3, [r3, #4]
 801bfea:	4618      	mov	r0, r3
 801bfec:	f7f4 fd19 	bl	8010a22 <lwip_htonl>
 801bff0:	4603      	mov	r3, r0
 801bff2:	3301      	adds	r3, #1
 801bff4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	1ad3      	subs	r3, r2, r3
 801bffe:	2b00      	cmp	r3, #0
 801c000:	da02      	bge.n	801c008 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	68fa      	ldr	r2, [r7, #12]
 801c006:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c00c:	2200      	movs	r2, #0
 801c00e:	69b9      	ldr	r1, [r7, #24]
 801c010:	6878      	ldr	r0, [r7, #4]
 801c012:	f7ff fded 	bl	801bbf0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c016:	687a      	ldr	r2, [r7, #4]
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	3304      	adds	r3, #4
 801c01c:	69b9      	ldr	r1, [r7, #24]
 801c01e:	6878      	ldr	r0, [r7, #4]
 801c020:	f7ff fe26 	bl	801bc70 <tcp_output_control_segment>
 801c024:	4603      	mov	r3, r0
 801c026:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c028:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c02c:	4618      	mov	r0, r3
 801c02e:	372c      	adds	r7, #44	; 0x2c
 801c030:	46bd      	mov	sp, r7
 801c032:	bd90      	pop	{r4, r7, pc}
 801c034:	0802705c 	.word	0x0802705c
 801c038:	08027870 	.word	0x08027870
 801c03c:	080270cc 	.word	0x080270cc

0801c040 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801c040:	b580      	push	{r7, lr}
 801c042:	b084      	sub	sp, #16
 801c044:	af00      	add	r7, sp, #0
 801c046:	6078      	str	r0, [r7, #4]
 801c048:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801c04a:	f000 fb17 	bl	801c67c <sys_timeouts_sleeptime>
 801c04e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801c050:	68fb      	ldr	r3, [r7, #12]
 801c052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c056:	d10b      	bne.n	801c070 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801c058:	4813      	ldr	r0, [pc, #76]	; (801c0a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801c05a:	f7f9 ff8c 	bl	8015f76 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801c05e:	2200      	movs	r2, #0
 801c060:	6839      	ldr	r1, [r7, #0]
 801c062:	6878      	ldr	r0, [r7, #4]
 801c064:	f7f9 fe44 	bl	8015cf0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801c068:	480f      	ldr	r0, [pc, #60]	; (801c0a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801c06a:	f7f9 ff75 	bl	8015f58 <sys_mutex_lock>
    return;
 801c06e:	e018      	b.n	801c0a2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	2b00      	cmp	r3, #0
 801c074:	d102      	bne.n	801c07c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801c076:	f000 fac7 	bl	801c608 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801c07a:	e7e6      	b.n	801c04a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801c07c:	480a      	ldr	r0, [pc, #40]	; (801c0a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801c07e:	f7f9 ff7a 	bl	8015f76 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801c082:	68fa      	ldr	r2, [r7, #12]
 801c084:	6839      	ldr	r1, [r7, #0]
 801c086:	6878      	ldr	r0, [r7, #4]
 801c088:	f7f9 fe32 	bl	8015cf0 <sys_arch_mbox_fetch>
 801c08c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801c08e:	4806      	ldr	r0, [pc, #24]	; (801c0a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801c090:	f7f9 ff62 	bl	8015f58 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801c094:	68bb      	ldr	r3, [r7, #8]
 801c096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c09a:	d102      	bne.n	801c0a2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801c09c:	f000 fab4 	bl	801c608 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801c0a0:	e7d3      	b.n	801c04a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801c0a2:	3710      	adds	r7, #16
 801c0a4:	46bd      	mov	sp, r7
 801c0a6:	bd80      	pop	{r7, pc}
 801c0a8:	2400d264 	.word	0x2400d264

0801c0ac <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801c0ac:	b580      	push	{r7, lr}
 801c0ae:	b084      	sub	sp, #16
 801c0b0:	af00      	add	r7, sp, #0
 801c0b2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801c0b4:	4810      	ldr	r0, [pc, #64]	; (801c0f8 <tcpip_thread+0x4c>)
 801c0b6:	f7f9 ff4f 	bl	8015f58 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801c0ba:	4b10      	ldr	r3, [pc, #64]	; (801c0fc <tcpip_thread+0x50>)
 801c0bc:	681b      	ldr	r3, [r3, #0]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d005      	beq.n	801c0ce <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801c0c2:	4b0e      	ldr	r3, [pc, #56]	; (801c0fc <tcpip_thread+0x50>)
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	4a0e      	ldr	r2, [pc, #56]	; (801c100 <tcpip_thread+0x54>)
 801c0c8:	6812      	ldr	r2, [r2, #0]
 801c0ca:	4610      	mov	r0, r2
 801c0cc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801c0ce:	f107 030c 	add.w	r3, r7, #12
 801c0d2:	4619      	mov	r1, r3
 801c0d4:	480b      	ldr	r0, [pc, #44]	; (801c104 <tcpip_thread+0x58>)
 801c0d6:	f7ff ffb3 	bl	801c040 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d106      	bne.n	801c0ee <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801c0e0:	4b09      	ldr	r3, [pc, #36]	; (801c108 <tcpip_thread+0x5c>)
 801c0e2:	2291      	movs	r2, #145	; 0x91
 801c0e4:	4909      	ldr	r1, [pc, #36]	; (801c10c <tcpip_thread+0x60>)
 801c0e6:	480a      	ldr	r0, [pc, #40]	; (801c110 <tcpip_thread+0x64>)
 801c0e8:	f005 fe18 	bl	8021d1c <iprintf>
      continue;
 801c0ec:	e003      	b.n	801c0f6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	4618      	mov	r0, r3
 801c0f2:	f000 f80f 	bl	801c114 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801c0f6:	e7ea      	b.n	801c0ce <tcpip_thread+0x22>
 801c0f8:	2400d264 	.word	0x2400d264
 801c0fc:	24004994 	.word	0x24004994
 801c100:	24004998 	.word	0x24004998
 801c104:	2400499c 	.word	0x2400499c
 801c108:	08027894 	.word	0x08027894
 801c10c:	080278e4 	.word	0x080278e4
 801c110:	08027904 	.word	0x08027904

0801c114 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801c114:	b580      	push	{r7, lr}
 801c116:	b082      	sub	sp, #8
 801c118:	af00      	add	r7, sp, #0
 801c11a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	781b      	ldrb	r3, [r3, #0]
 801c120:	2b02      	cmp	r3, #2
 801c122:	d026      	beq.n	801c172 <tcpip_thread_handle_msg+0x5e>
 801c124:	2b02      	cmp	r3, #2
 801c126:	dc2b      	bgt.n	801c180 <tcpip_thread_handle_msg+0x6c>
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d002      	beq.n	801c132 <tcpip_thread_handle_msg+0x1e>
 801c12c:	2b01      	cmp	r3, #1
 801c12e:	d015      	beq.n	801c15c <tcpip_thread_handle_msg+0x48>
 801c130:	e026      	b.n	801c180 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	68db      	ldr	r3, [r3, #12]
 801c136:	687a      	ldr	r2, [r7, #4]
 801c138:	6850      	ldr	r0, [r2, #4]
 801c13a:	687a      	ldr	r2, [r7, #4]
 801c13c:	6892      	ldr	r2, [r2, #8]
 801c13e:	4611      	mov	r1, r2
 801c140:	4798      	blx	r3
 801c142:	4603      	mov	r3, r0
 801c144:	2b00      	cmp	r3, #0
 801c146:	d004      	beq.n	801c152 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	685b      	ldr	r3, [r3, #4]
 801c14c:	4618      	mov	r0, r3
 801c14e:	f7f8 fdcd 	bl	8014cec <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801c152:	6879      	ldr	r1, [r7, #4]
 801c154:	2009      	movs	r0, #9
 801c156:	f7f7 fe93 	bl	8013e80 <memp_free>
      break;
 801c15a:	e018      	b.n	801c18e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	685b      	ldr	r3, [r3, #4]
 801c160:	687a      	ldr	r2, [r7, #4]
 801c162:	6892      	ldr	r2, [r2, #8]
 801c164:	4610      	mov	r0, r2
 801c166:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801c168:	6879      	ldr	r1, [r7, #4]
 801c16a:	2008      	movs	r0, #8
 801c16c:	f7f7 fe88 	bl	8013e80 <memp_free>
      break;
 801c170:	e00d      	b.n	801c18e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	685b      	ldr	r3, [r3, #4]
 801c176:	687a      	ldr	r2, [r7, #4]
 801c178:	6892      	ldr	r2, [r2, #8]
 801c17a:	4610      	mov	r0, r2
 801c17c:	4798      	blx	r3
      break;
 801c17e:	e006      	b.n	801c18e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801c180:	4b05      	ldr	r3, [pc, #20]	; (801c198 <tcpip_thread_handle_msg+0x84>)
 801c182:	22cf      	movs	r2, #207	; 0xcf
 801c184:	4905      	ldr	r1, [pc, #20]	; (801c19c <tcpip_thread_handle_msg+0x88>)
 801c186:	4806      	ldr	r0, [pc, #24]	; (801c1a0 <tcpip_thread_handle_msg+0x8c>)
 801c188:	f005 fdc8 	bl	8021d1c <iprintf>
      break;
 801c18c:	bf00      	nop
  }
}
 801c18e:	bf00      	nop
 801c190:	3708      	adds	r7, #8
 801c192:	46bd      	mov	sp, r7
 801c194:	bd80      	pop	{r7, pc}
 801c196:	bf00      	nop
 801c198:	08027894 	.word	0x08027894
 801c19c:	080278e4 	.word	0x080278e4
 801c1a0:	08027904 	.word	0x08027904

0801c1a4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801c1a4:	b580      	push	{r7, lr}
 801c1a6:	b086      	sub	sp, #24
 801c1a8:	af00      	add	r7, sp, #0
 801c1aa:	60f8      	str	r0, [r7, #12]
 801c1ac:	60b9      	str	r1, [r7, #8]
 801c1ae:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801c1b0:	481a      	ldr	r0, [pc, #104]	; (801c21c <tcpip_inpkt+0x78>)
 801c1b2:	f7f9 fdf8 	bl	8015da6 <sys_mbox_valid>
 801c1b6:	4603      	mov	r3, r0
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d105      	bne.n	801c1c8 <tcpip_inpkt+0x24>
 801c1bc:	4b18      	ldr	r3, [pc, #96]	; (801c220 <tcpip_inpkt+0x7c>)
 801c1be:	22fc      	movs	r2, #252	; 0xfc
 801c1c0:	4918      	ldr	r1, [pc, #96]	; (801c224 <tcpip_inpkt+0x80>)
 801c1c2:	4819      	ldr	r0, [pc, #100]	; (801c228 <tcpip_inpkt+0x84>)
 801c1c4:	f005 fdaa 	bl	8021d1c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801c1c8:	2009      	movs	r0, #9
 801c1ca:	f7f7 fde3 	bl	8013d94 <memp_malloc>
 801c1ce:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801c1d0:	697b      	ldr	r3, [r7, #20]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d102      	bne.n	801c1dc <tcpip_inpkt+0x38>
    return ERR_MEM;
 801c1d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c1da:	e01a      	b.n	801c212 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801c1dc:	697b      	ldr	r3, [r7, #20]
 801c1de:	2200      	movs	r2, #0
 801c1e0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801c1e2:	697b      	ldr	r3, [r7, #20]
 801c1e4:	68fa      	ldr	r2, [r7, #12]
 801c1e6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801c1e8:	697b      	ldr	r3, [r7, #20]
 801c1ea:	68ba      	ldr	r2, [r7, #8]
 801c1ec:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801c1ee:	697b      	ldr	r3, [r7, #20]
 801c1f0:	687a      	ldr	r2, [r7, #4]
 801c1f2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801c1f4:	6979      	ldr	r1, [r7, #20]
 801c1f6:	4809      	ldr	r0, [pc, #36]	; (801c21c <tcpip_inpkt+0x78>)
 801c1f8:	f7f9 fd60 	bl	8015cbc <sys_mbox_trypost>
 801c1fc:	4603      	mov	r3, r0
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d006      	beq.n	801c210 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801c202:	6979      	ldr	r1, [r7, #20]
 801c204:	2009      	movs	r0, #9
 801c206:	f7f7 fe3b 	bl	8013e80 <memp_free>
    return ERR_MEM;
 801c20a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c20e:	e000      	b.n	801c212 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801c210:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801c212:	4618      	mov	r0, r3
 801c214:	3718      	adds	r7, #24
 801c216:	46bd      	mov	sp, r7
 801c218:	bd80      	pop	{r7, pc}
 801c21a:	bf00      	nop
 801c21c:	2400499c 	.word	0x2400499c
 801c220:	08027894 	.word	0x08027894
 801c224:	0802792c 	.word	0x0802792c
 801c228:	08027904 	.word	0x08027904

0801c22c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801c22c:	b580      	push	{r7, lr}
 801c22e:	b082      	sub	sp, #8
 801c230:	af00      	add	r7, sp, #0
 801c232:	6078      	str	r0, [r7, #4]
 801c234:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801c236:	683b      	ldr	r3, [r7, #0]
 801c238:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c23c:	f003 0318 	and.w	r3, r3, #24
 801c240:	2b00      	cmp	r3, #0
 801c242:	d006      	beq.n	801c252 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801c244:	4a08      	ldr	r2, [pc, #32]	; (801c268 <tcpip_input+0x3c>)
 801c246:	6839      	ldr	r1, [r7, #0]
 801c248:	6878      	ldr	r0, [r7, #4]
 801c24a:	f7ff ffab 	bl	801c1a4 <tcpip_inpkt>
 801c24e:	4603      	mov	r3, r0
 801c250:	e005      	b.n	801c25e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801c252:	4a06      	ldr	r2, [pc, #24]	; (801c26c <tcpip_input+0x40>)
 801c254:	6839      	ldr	r1, [r7, #0]
 801c256:	6878      	ldr	r0, [r7, #4]
 801c258:	f7ff ffa4 	bl	801c1a4 <tcpip_inpkt>
 801c25c:	4603      	mov	r3, r0
}
 801c25e:	4618      	mov	r0, r3
 801c260:	3708      	adds	r7, #8
 801c262:	46bd      	mov	sp, r7
 801c264:	bd80      	pop	{r7, pc}
 801c266:	bf00      	nop
 801c268:	08011929 	.word	0x08011929
 801c26c:	08012119 	.word	0x08012119

0801c270 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b084      	sub	sp, #16
 801c274:	af00      	add	r7, sp, #0
 801c276:	6078      	str	r0, [r7, #4]
 801c278:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801c27a:	4819      	ldr	r0, [pc, #100]	; (801c2e0 <tcpip_try_callback+0x70>)
 801c27c:	f7f9 fd93 	bl	8015da6 <sys_mbox_valid>
 801c280:	4603      	mov	r3, r0
 801c282:	2b00      	cmp	r3, #0
 801c284:	d106      	bne.n	801c294 <tcpip_try_callback+0x24>
 801c286:	4b17      	ldr	r3, [pc, #92]	; (801c2e4 <tcpip_try_callback+0x74>)
 801c288:	f240 125d 	movw	r2, #349	; 0x15d
 801c28c:	4916      	ldr	r1, [pc, #88]	; (801c2e8 <tcpip_try_callback+0x78>)
 801c28e:	4817      	ldr	r0, [pc, #92]	; (801c2ec <tcpip_try_callback+0x7c>)
 801c290:	f005 fd44 	bl	8021d1c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801c294:	2008      	movs	r0, #8
 801c296:	f7f7 fd7d 	bl	8013d94 <memp_malloc>
 801c29a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d102      	bne.n	801c2a8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801c2a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c2a6:	e017      	b.n	801c2d8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	2201      	movs	r2, #1
 801c2ac:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	687a      	ldr	r2, [r7, #4]
 801c2b2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	683a      	ldr	r2, [r7, #0]
 801c2b8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801c2ba:	68f9      	ldr	r1, [r7, #12]
 801c2bc:	4808      	ldr	r0, [pc, #32]	; (801c2e0 <tcpip_try_callback+0x70>)
 801c2be:	f7f9 fcfd 	bl	8015cbc <sys_mbox_trypost>
 801c2c2:	4603      	mov	r3, r0
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d006      	beq.n	801c2d6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801c2c8:	68f9      	ldr	r1, [r7, #12]
 801c2ca:	2008      	movs	r0, #8
 801c2cc:	f7f7 fdd8 	bl	8013e80 <memp_free>
    return ERR_MEM;
 801c2d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c2d4:	e000      	b.n	801c2d8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801c2d6:	2300      	movs	r3, #0
}
 801c2d8:	4618      	mov	r0, r3
 801c2da:	3710      	adds	r7, #16
 801c2dc:	46bd      	mov	sp, r7
 801c2de:	bd80      	pop	{r7, pc}
 801c2e0:	2400499c 	.word	0x2400499c
 801c2e4:	08027894 	.word	0x08027894
 801c2e8:	0802792c 	.word	0x0802792c
 801c2ec:	08027904 	.word	0x08027904

0801c2f0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	b084      	sub	sp, #16
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	60f8      	str	r0, [r7, #12]
 801c2f8:	60b9      	str	r1, [r7, #8]
 801c2fa:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801c2fc:	4806      	ldr	r0, [pc, #24]	; (801c318 <tcpip_send_msg_wait_sem+0x28>)
 801c2fe:	f7f9 fe2b 	bl	8015f58 <sys_mutex_lock>
  fn(apimsg);
 801c302:	68fb      	ldr	r3, [r7, #12]
 801c304:	68b8      	ldr	r0, [r7, #8]
 801c306:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801c308:	4803      	ldr	r0, [pc, #12]	; (801c318 <tcpip_send_msg_wait_sem+0x28>)
 801c30a:	f7f9 fe34 	bl	8015f76 <sys_mutex_unlock>
  return ERR_OK;
 801c30e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801c310:	4618      	mov	r0, r3
 801c312:	3710      	adds	r7, #16
 801c314:	46bd      	mov	sp, r7
 801c316:	bd80      	pop	{r7, pc}
 801c318:	2400d264 	.word	0x2400d264

0801c31c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801c31c:	b580      	push	{r7, lr}
 801c31e:	b084      	sub	sp, #16
 801c320:	af02      	add	r7, sp, #8
 801c322:	6078      	str	r0, [r7, #4]
 801c324:	6039      	str	r1, [r7, #0]
  lwip_init();
 801c326:	f7f5 fe45 	bl	8011fb4 <lwip_init>

  tcpip_init_done = initfunc;
 801c32a:	4a17      	ldr	r2, [pc, #92]	; (801c388 <tcpip_init+0x6c>)
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801c330:	4a16      	ldr	r2, [pc, #88]	; (801c38c <tcpip_init+0x70>)
 801c332:	683b      	ldr	r3, [r7, #0]
 801c334:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801c336:	2106      	movs	r1, #6
 801c338:	4815      	ldr	r0, [pc, #84]	; (801c390 <tcpip_init+0x74>)
 801c33a:	f7f9 fc8b 	bl	8015c54 <sys_mbox_new>
 801c33e:	4603      	mov	r3, r0
 801c340:	2b00      	cmp	r3, #0
 801c342:	d006      	beq.n	801c352 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801c344:	4b13      	ldr	r3, [pc, #76]	; (801c394 <tcpip_init+0x78>)
 801c346:	f240 2261 	movw	r2, #609	; 0x261
 801c34a:	4913      	ldr	r1, [pc, #76]	; (801c398 <tcpip_init+0x7c>)
 801c34c:	4813      	ldr	r0, [pc, #76]	; (801c39c <tcpip_init+0x80>)
 801c34e:	f005 fce5 	bl	8021d1c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801c352:	4813      	ldr	r0, [pc, #76]	; (801c3a0 <tcpip_init+0x84>)
 801c354:	f7f9 fde4 	bl	8015f20 <sys_mutex_new>
 801c358:	4603      	mov	r3, r0
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d006      	beq.n	801c36c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801c35e:	4b0d      	ldr	r3, [pc, #52]	; (801c394 <tcpip_init+0x78>)
 801c360:	f240 2265 	movw	r2, #613	; 0x265
 801c364:	490f      	ldr	r1, [pc, #60]	; (801c3a4 <tcpip_init+0x88>)
 801c366:	480d      	ldr	r0, [pc, #52]	; (801c39c <tcpip_init+0x80>)
 801c368:	f005 fcd8 	bl	8021d1c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801c36c:	2300      	movs	r3, #0
 801c36e:	9300      	str	r3, [sp, #0]
 801c370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c374:	2200      	movs	r2, #0
 801c376:	490c      	ldr	r1, [pc, #48]	; (801c3a8 <tcpip_init+0x8c>)
 801c378:	480c      	ldr	r0, [pc, #48]	; (801c3ac <tcpip_init+0x90>)
 801c37a:	f7f9 fe09 	bl	8015f90 <sys_thread_new>
}
 801c37e:	bf00      	nop
 801c380:	3708      	adds	r7, #8
 801c382:	46bd      	mov	sp, r7
 801c384:	bd80      	pop	{r7, pc}
 801c386:	bf00      	nop
 801c388:	24004994 	.word	0x24004994
 801c38c:	24004998 	.word	0x24004998
 801c390:	2400499c 	.word	0x2400499c
 801c394:	08027894 	.word	0x08027894
 801c398:	0802793c 	.word	0x0802793c
 801c39c:	08027904 	.word	0x08027904
 801c3a0:	2400d264 	.word	0x2400d264
 801c3a4:	08027960 	.word	0x08027960
 801c3a8:	0801c0ad 	.word	0x0801c0ad
 801c3ac:	08027984 	.word	0x08027984

0801c3b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b082      	sub	sp, #8
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801c3b8:	f7f9 fe78 	bl	80160ac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c3bc:	4b0a      	ldr	r3, [pc, #40]	; (801c3e8 <tcpip_tcp_timer+0x38>)
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d103      	bne.n	801c3cc <tcpip_tcp_timer+0x1c>
 801c3c4:	4b09      	ldr	r3, [pc, #36]	; (801c3ec <tcpip_tcp_timer+0x3c>)
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d005      	beq.n	801c3d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c3cc:	2200      	movs	r2, #0
 801c3ce:	4908      	ldr	r1, [pc, #32]	; (801c3f0 <tcpip_tcp_timer+0x40>)
 801c3d0:	20fa      	movs	r0, #250	; 0xfa
 801c3d2:	f000 f8f3 	bl	801c5bc <sys_timeout>
 801c3d6:	e003      	b.n	801c3e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801c3d8:	4b06      	ldr	r3, [pc, #24]	; (801c3f4 <tcpip_tcp_timer+0x44>)
 801c3da:	2200      	movs	r2, #0
 801c3dc:	601a      	str	r2, [r3, #0]
  }
}
 801c3de:	bf00      	nop
 801c3e0:	bf00      	nop
 801c3e2:	3708      	adds	r7, #8
 801c3e4:	46bd      	mov	sp, r7
 801c3e6:	bd80      	pop	{r7, pc}
 801c3e8:	2400d24c 	.word	0x2400d24c
 801c3ec:	2400d25c 	.word	0x2400d25c
 801c3f0:	0801c3b1 	.word	0x0801c3b1
 801c3f4:	240049a8 	.word	0x240049a8

0801c3f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801c3f8:	b580      	push	{r7, lr}
 801c3fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c3fc:	4b0a      	ldr	r3, [pc, #40]	; (801c428 <tcp_timer_needed+0x30>)
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	2b00      	cmp	r3, #0
 801c402:	d10f      	bne.n	801c424 <tcp_timer_needed+0x2c>
 801c404:	4b09      	ldr	r3, [pc, #36]	; (801c42c <tcp_timer_needed+0x34>)
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d103      	bne.n	801c414 <tcp_timer_needed+0x1c>
 801c40c:	4b08      	ldr	r3, [pc, #32]	; (801c430 <tcp_timer_needed+0x38>)
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d007      	beq.n	801c424 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801c414:	4b04      	ldr	r3, [pc, #16]	; (801c428 <tcp_timer_needed+0x30>)
 801c416:	2201      	movs	r2, #1
 801c418:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c41a:	2200      	movs	r2, #0
 801c41c:	4905      	ldr	r1, [pc, #20]	; (801c434 <tcp_timer_needed+0x3c>)
 801c41e:	20fa      	movs	r0, #250	; 0xfa
 801c420:	f000 f8cc 	bl	801c5bc <sys_timeout>
  }
}
 801c424:	bf00      	nop
 801c426:	bd80      	pop	{r7, pc}
 801c428:	240049a8 	.word	0x240049a8
 801c42c:	2400d24c 	.word	0x2400d24c
 801c430:	2400d25c 	.word	0x2400d25c
 801c434:	0801c3b1 	.word	0x0801c3b1

0801c438 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c438:	b580      	push	{r7, lr}
 801c43a:	b086      	sub	sp, #24
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	60f8      	str	r0, [r7, #12]
 801c440:	60b9      	str	r1, [r7, #8]
 801c442:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c444:	200a      	movs	r0, #10
 801c446:	f7f7 fca5 	bl	8013d94 <memp_malloc>
 801c44a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801c44c:	693b      	ldr	r3, [r7, #16]
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d109      	bne.n	801c466 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c452:	693b      	ldr	r3, [r7, #16]
 801c454:	2b00      	cmp	r3, #0
 801c456:	d151      	bne.n	801c4fc <sys_timeout_abs+0xc4>
 801c458:	4b2a      	ldr	r3, [pc, #168]	; (801c504 <sys_timeout_abs+0xcc>)
 801c45a:	22be      	movs	r2, #190	; 0xbe
 801c45c:	492a      	ldr	r1, [pc, #168]	; (801c508 <sys_timeout_abs+0xd0>)
 801c45e:	482b      	ldr	r0, [pc, #172]	; (801c50c <sys_timeout_abs+0xd4>)
 801c460:	f005 fc5c 	bl	8021d1c <iprintf>
    return;
 801c464:	e04a      	b.n	801c4fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801c466:	693b      	ldr	r3, [r7, #16]
 801c468:	2200      	movs	r2, #0
 801c46a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c46c:	693b      	ldr	r3, [r7, #16]
 801c46e:	68ba      	ldr	r2, [r7, #8]
 801c470:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c472:	693b      	ldr	r3, [r7, #16]
 801c474:	687a      	ldr	r2, [r7, #4]
 801c476:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801c478:	693b      	ldr	r3, [r7, #16]
 801c47a:	68fa      	ldr	r2, [r7, #12]
 801c47c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c47e:	4b24      	ldr	r3, [pc, #144]	; (801c510 <sys_timeout_abs+0xd8>)
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	2b00      	cmp	r3, #0
 801c484:	d103      	bne.n	801c48e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801c486:	4a22      	ldr	r2, [pc, #136]	; (801c510 <sys_timeout_abs+0xd8>)
 801c488:	693b      	ldr	r3, [r7, #16]
 801c48a:	6013      	str	r3, [r2, #0]
    return;
 801c48c:	e037      	b.n	801c4fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801c48e:	693b      	ldr	r3, [r7, #16]
 801c490:	685a      	ldr	r2, [r3, #4]
 801c492:	4b1f      	ldr	r3, [pc, #124]	; (801c510 <sys_timeout_abs+0xd8>)
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	685b      	ldr	r3, [r3, #4]
 801c498:	1ad3      	subs	r3, r2, r3
 801c49a:	0fdb      	lsrs	r3, r3, #31
 801c49c:	f003 0301 	and.w	r3, r3, #1
 801c4a0:	b2db      	uxtb	r3, r3
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d007      	beq.n	801c4b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801c4a6:	4b1a      	ldr	r3, [pc, #104]	; (801c510 <sys_timeout_abs+0xd8>)
 801c4a8:	681a      	ldr	r2, [r3, #0]
 801c4aa:	693b      	ldr	r3, [r7, #16]
 801c4ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c4ae:	4a18      	ldr	r2, [pc, #96]	; (801c510 <sys_timeout_abs+0xd8>)
 801c4b0:	693b      	ldr	r3, [r7, #16]
 801c4b2:	6013      	str	r3, [r2, #0]
 801c4b4:	e023      	b.n	801c4fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c4b6:	4b16      	ldr	r3, [pc, #88]	; (801c510 <sys_timeout_abs+0xd8>)
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	617b      	str	r3, [r7, #20]
 801c4bc:	e01a      	b.n	801c4f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c4be:	697b      	ldr	r3, [r7, #20]
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d00b      	beq.n	801c4de <sys_timeout_abs+0xa6>
 801c4c6:	693b      	ldr	r3, [r7, #16]
 801c4c8:	685a      	ldr	r2, [r3, #4]
 801c4ca:	697b      	ldr	r3, [r7, #20]
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	685b      	ldr	r3, [r3, #4]
 801c4d0:	1ad3      	subs	r3, r2, r3
 801c4d2:	0fdb      	lsrs	r3, r3, #31
 801c4d4:	f003 0301 	and.w	r3, r3, #1
 801c4d8:	b2db      	uxtb	r3, r3
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d007      	beq.n	801c4ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801c4de:	697b      	ldr	r3, [r7, #20]
 801c4e0:	681a      	ldr	r2, [r3, #0]
 801c4e2:	693b      	ldr	r3, [r7, #16]
 801c4e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c4e6:	697b      	ldr	r3, [r7, #20]
 801c4e8:	693a      	ldr	r2, [r7, #16]
 801c4ea:	601a      	str	r2, [r3, #0]
        break;
 801c4ec:	e007      	b.n	801c4fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c4ee:	697b      	ldr	r3, [r7, #20]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	617b      	str	r3, [r7, #20]
 801c4f4:	697b      	ldr	r3, [r7, #20]
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d1e1      	bne.n	801c4be <sys_timeout_abs+0x86>
 801c4fa:	e000      	b.n	801c4fe <sys_timeout_abs+0xc6>
    return;
 801c4fc:	bf00      	nop
      }
    }
  }
}
 801c4fe:	3718      	adds	r7, #24
 801c500:	46bd      	mov	sp, r7
 801c502:	bd80      	pop	{r7, pc}
 801c504:	08027994 	.word	0x08027994
 801c508:	080279e8 	.word	0x080279e8
 801c50c:	08027a28 	.word	0x08027a28
 801c510:	240049a0 	.word	0x240049a0

0801c514 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c514:	b580      	push	{r7, lr}
 801c516:	b086      	sub	sp, #24
 801c518:	af00      	add	r7, sp, #0
 801c51a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c520:	697b      	ldr	r3, [r7, #20]
 801c522:	685b      	ldr	r3, [r3, #4]
 801c524:	4798      	blx	r3

  now = sys_now();
 801c526:	f7ee ff0b 	bl	800b340 <sys_now>
 801c52a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c52c:	697b      	ldr	r3, [r7, #20]
 801c52e:	681a      	ldr	r2, [r3, #0]
 801c530:	4b0f      	ldr	r3, [pc, #60]	; (801c570 <lwip_cyclic_timer+0x5c>)
 801c532:	681b      	ldr	r3, [r3, #0]
 801c534:	4413      	add	r3, r2
 801c536:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c538:	68fa      	ldr	r2, [r7, #12]
 801c53a:	693b      	ldr	r3, [r7, #16]
 801c53c:	1ad3      	subs	r3, r2, r3
 801c53e:	0fdb      	lsrs	r3, r3, #31
 801c540:	f003 0301 	and.w	r3, r3, #1
 801c544:	b2db      	uxtb	r3, r3
 801c546:	2b00      	cmp	r3, #0
 801c548:	d009      	beq.n	801c55e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c54a:	697b      	ldr	r3, [r7, #20]
 801c54c:	681a      	ldr	r2, [r3, #0]
 801c54e:	693b      	ldr	r3, [r7, #16]
 801c550:	4413      	add	r3, r2
 801c552:	687a      	ldr	r2, [r7, #4]
 801c554:	4907      	ldr	r1, [pc, #28]	; (801c574 <lwip_cyclic_timer+0x60>)
 801c556:	4618      	mov	r0, r3
 801c558:	f7ff ff6e 	bl	801c438 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c55c:	e004      	b.n	801c568 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c55e:	687a      	ldr	r2, [r7, #4]
 801c560:	4904      	ldr	r1, [pc, #16]	; (801c574 <lwip_cyclic_timer+0x60>)
 801c562:	68f8      	ldr	r0, [r7, #12]
 801c564:	f7ff ff68 	bl	801c438 <sys_timeout_abs>
}
 801c568:	bf00      	nop
 801c56a:	3718      	adds	r7, #24
 801c56c:	46bd      	mov	sp, r7
 801c56e:	bd80      	pop	{r7, pc}
 801c570:	240049a4 	.word	0x240049a4
 801c574:	0801c515 	.word	0x0801c515

0801c578 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c578:	b580      	push	{r7, lr}
 801c57a:	b082      	sub	sp, #8
 801c57c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c57e:	2301      	movs	r3, #1
 801c580:	607b      	str	r3, [r7, #4]
 801c582:	e00e      	b.n	801c5a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c584:	4a0b      	ldr	r2, [pc, #44]	; (801c5b4 <sys_timeouts_init+0x3c>)
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	00db      	lsls	r3, r3, #3
 801c590:	4a08      	ldr	r2, [pc, #32]	; (801c5b4 <sys_timeouts_init+0x3c>)
 801c592:	4413      	add	r3, r2
 801c594:	461a      	mov	r2, r3
 801c596:	4908      	ldr	r1, [pc, #32]	; (801c5b8 <sys_timeouts_init+0x40>)
 801c598:	f000 f810 	bl	801c5bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	3301      	adds	r3, #1
 801c5a0:	607b      	str	r3, [r7, #4]
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	2b02      	cmp	r3, #2
 801c5a6:	d9ed      	bls.n	801c584 <sys_timeouts_init+0xc>
  }
}
 801c5a8:	bf00      	nop
 801c5aa:	bf00      	nop
 801c5ac:	3708      	adds	r7, #8
 801c5ae:	46bd      	mov	sp, r7
 801c5b0:	bd80      	pop	{r7, pc}
 801c5b2:	bf00      	nop
 801c5b4:	08028180 	.word	0x08028180
 801c5b8:	0801c515 	.word	0x0801c515

0801c5bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c5bc:	b580      	push	{r7, lr}
 801c5be:	b086      	sub	sp, #24
 801c5c0:	af00      	add	r7, sp, #0
 801c5c2:	60f8      	str	r0, [r7, #12]
 801c5c4:	60b9      	str	r1, [r7, #8]
 801c5c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c5c8:	68fb      	ldr	r3, [r7, #12]
 801c5ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c5ce:	d306      	bcc.n	801c5de <sys_timeout+0x22>
 801c5d0:	4b0a      	ldr	r3, [pc, #40]	; (801c5fc <sys_timeout+0x40>)
 801c5d2:	f240 1229 	movw	r2, #297	; 0x129
 801c5d6:	490a      	ldr	r1, [pc, #40]	; (801c600 <sys_timeout+0x44>)
 801c5d8:	480a      	ldr	r0, [pc, #40]	; (801c604 <sys_timeout+0x48>)
 801c5da:	f005 fb9f 	bl	8021d1c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c5de:	f7ee feaf 	bl	800b340 <sys_now>
 801c5e2:	4602      	mov	r2, r0
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	4413      	add	r3, r2
 801c5e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c5ea:	687a      	ldr	r2, [r7, #4]
 801c5ec:	68b9      	ldr	r1, [r7, #8]
 801c5ee:	6978      	ldr	r0, [r7, #20]
 801c5f0:	f7ff ff22 	bl	801c438 <sys_timeout_abs>
#endif
}
 801c5f4:	bf00      	nop
 801c5f6:	3718      	adds	r7, #24
 801c5f8:	46bd      	mov	sp, r7
 801c5fa:	bd80      	pop	{r7, pc}
 801c5fc:	08027994 	.word	0x08027994
 801c600:	08027a50 	.word	0x08027a50
 801c604:	08027a28 	.word	0x08027a28

0801c608 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c608:	b580      	push	{r7, lr}
 801c60a:	b084      	sub	sp, #16
 801c60c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c60e:	f7ee fe97 	bl	800b340 <sys_now>
 801c612:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801c614:	4b17      	ldr	r3, [pc, #92]	; (801c674 <sys_check_timeouts+0x6c>)
 801c616:	681b      	ldr	r3, [r3, #0]
 801c618:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c61a:	68bb      	ldr	r3, [r7, #8]
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d022      	beq.n	801c666 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c620:	68bb      	ldr	r3, [r7, #8]
 801c622:	685b      	ldr	r3, [r3, #4]
 801c624:	68fa      	ldr	r2, [r7, #12]
 801c626:	1ad3      	subs	r3, r2, r3
 801c628:	0fdb      	lsrs	r3, r3, #31
 801c62a:	f003 0301 	and.w	r3, r3, #1
 801c62e:	b2db      	uxtb	r3, r3
 801c630:	2b00      	cmp	r3, #0
 801c632:	d11a      	bne.n	801c66a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c634:	68bb      	ldr	r3, [r7, #8]
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	4a0e      	ldr	r2, [pc, #56]	; (801c674 <sys_check_timeouts+0x6c>)
 801c63a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c63c:	68bb      	ldr	r3, [r7, #8]
 801c63e:	689b      	ldr	r3, [r3, #8]
 801c640:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c642:	68bb      	ldr	r3, [r7, #8]
 801c644:	68db      	ldr	r3, [r3, #12]
 801c646:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c648:	68bb      	ldr	r3, [r7, #8]
 801c64a:	685b      	ldr	r3, [r3, #4]
 801c64c:	4a0a      	ldr	r2, [pc, #40]	; (801c678 <sys_check_timeouts+0x70>)
 801c64e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c650:	68b9      	ldr	r1, [r7, #8]
 801c652:	200a      	movs	r0, #10
 801c654:	f7f7 fc14 	bl	8013e80 <memp_free>
    if (handler != NULL) {
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	d0da      	beq.n	801c614 <sys_check_timeouts+0xc>
      handler(arg);
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	6838      	ldr	r0, [r7, #0]
 801c662:	4798      	blx	r3
  do {
 801c664:	e7d6      	b.n	801c614 <sys_check_timeouts+0xc>
      return;
 801c666:	bf00      	nop
 801c668:	e000      	b.n	801c66c <sys_check_timeouts+0x64>
      return;
 801c66a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c66c:	3710      	adds	r7, #16
 801c66e:	46bd      	mov	sp, r7
 801c670:	bd80      	pop	{r7, pc}
 801c672:	bf00      	nop
 801c674:	240049a0 	.word	0x240049a0
 801c678:	240049a4 	.word	0x240049a4

0801c67c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c67c:	b580      	push	{r7, lr}
 801c67e:	b082      	sub	sp, #8
 801c680:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c682:	4b16      	ldr	r3, [pc, #88]	; (801c6dc <sys_timeouts_sleeptime+0x60>)
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d102      	bne.n	801c690 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c68a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c68e:	e020      	b.n	801c6d2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801c690:	f7ee fe56 	bl	800b340 <sys_now>
 801c694:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c696:	4b11      	ldr	r3, [pc, #68]	; (801c6dc <sys_timeouts_sleeptime+0x60>)
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	685a      	ldr	r2, [r3, #4]
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	1ad3      	subs	r3, r2, r3
 801c6a0:	0fdb      	lsrs	r3, r3, #31
 801c6a2:	f003 0301 	and.w	r3, r3, #1
 801c6a6:	b2db      	uxtb	r3, r3
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d001      	beq.n	801c6b0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	e010      	b.n	801c6d2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801c6b0:	4b0a      	ldr	r3, [pc, #40]	; (801c6dc <sys_timeouts_sleeptime+0x60>)
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	685a      	ldr	r2, [r3, #4]
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	1ad3      	subs	r3, r2, r3
 801c6ba:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801c6bc:	683b      	ldr	r3, [r7, #0]
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	da06      	bge.n	801c6d0 <sys_timeouts_sleeptime+0x54>
 801c6c2:	4b07      	ldr	r3, [pc, #28]	; (801c6e0 <sys_timeouts_sleeptime+0x64>)
 801c6c4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801c6c8:	4906      	ldr	r1, [pc, #24]	; (801c6e4 <sys_timeouts_sleeptime+0x68>)
 801c6ca:	4807      	ldr	r0, [pc, #28]	; (801c6e8 <sys_timeouts_sleeptime+0x6c>)
 801c6cc:	f005 fb26 	bl	8021d1c <iprintf>
    return ret;
 801c6d0:	683b      	ldr	r3, [r7, #0]
  }
}
 801c6d2:	4618      	mov	r0, r3
 801c6d4:	3708      	adds	r7, #8
 801c6d6:	46bd      	mov	sp, r7
 801c6d8:	bd80      	pop	{r7, pc}
 801c6da:	bf00      	nop
 801c6dc:	240049a0 	.word	0x240049a0
 801c6e0:	08027994 	.word	0x08027994
 801c6e4:	08027a88 	.word	0x08027a88
 801c6e8:	08027a28 	.word	0x08027a28

0801c6ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c6ec:	b580      	push	{r7, lr}
 801c6ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c6f0:	f005 fb2c 	bl	8021d4c <rand>
 801c6f4:	4603      	mov	r3, r0
 801c6f6:	b29b      	uxth	r3, r3
 801c6f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c6fc:	b29b      	uxth	r3, r3
 801c6fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c702:	b29a      	uxth	r2, r3
 801c704:	4b01      	ldr	r3, [pc, #4]	; (801c70c <udp_init+0x20>)
 801c706:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c708:	bf00      	nop
 801c70a:	bd80      	pop	{r7, pc}
 801c70c:	24000030 	.word	0x24000030

0801c710 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801c710:	b480      	push	{r7}
 801c712:	b083      	sub	sp, #12
 801c714:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801c716:	2300      	movs	r3, #0
 801c718:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c71a:	4b17      	ldr	r3, [pc, #92]	; (801c778 <udp_new_port+0x68>)
 801c71c:	881b      	ldrh	r3, [r3, #0]
 801c71e:	1c5a      	adds	r2, r3, #1
 801c720:	b291      	uxth	r1, r2
 801c722:	4a15      	ldr	r2, [pc, #84]	; (801c778 <udp_new_port+0x68>)
 801c724:	8011      	strh	r1, [r2, #0]
 801c726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c72a:	4293      	cmp	r3, r2
 801c72c:	d103      	bne.n	801c736 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c72e:	4b12      	ldr	r3, [pc, #72]	; (801c778 <udp_new_port+0x68>)
 801c730:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801c734:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c736:	4b11      	ldr	r3, [pc, #68]	; (801c77c <udp_new_port+0x6c>)
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	603b      	str	r3, [r7, #0]
 801c73c:	e011      	b.n	801c762 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c73e:	683b      	ldr	r3, [r7, #0]
 801c740:	8a5a      	ldrh	r2, [r3, #18]
 801c742:	4b0d      	ldr	r3, [pc, #52]	; (801c778 <udp_new_port+0x68>)
 801c744:	881b      	ldrh	r3, [r3, #0]
 801c746:	429a      	cmp	r2, r3
 801c748:	d108      	bne.n	801c75c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c74a:	88fb      	ldrh	r3, [r7, #6]
 801c74c:	3301      	adds	r3, #1
 801c74e:	80fb      	strh	r3, [r7, #6]
 801c750:	88fb      	ldrh	r3, [r7, #6]
 801c752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c756:	d3e0      	bcc.n	801c71a <udp_new_port+0xa>
        return 0;
 801c758:	2300      	movs	r3, #0
 801c75a:	e007      	b.n	801c76c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c75c:	683b      	ldr	r3, [r7, #0]
 801c75e:	68db      	ldr	r3, [r3, #12]
 801c760:	603b      	str	r3, [r7, #0]
 801c762:	683b      	ldr	r3, [r7, #0]
 801c764:	2b00      	cmp	r3, #0
 801c766:	d1ea      	bne.n	801c73e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c768:	4b03      	ldr	r3, [pc, #12]	; (801c778 <udp_new_port+0x68>)
 801c76a:	881b      	ldrh	r3, [r3, #0]
}
 801c76c:	4618      	mov	r0, r3
 801c76e:	370c      	adds	r7, #12
 801c770:	46bd      	mov	sp, r7
 801c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c776:	4770      	bx	lr
 801c778:	24000030 	.word	0x24000030
 801c77c:	2400d268 	.word	0x2400d268

0801c780 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c780:	b580      	push	{r7, lr}
 801c782:	b084      	sub	sp, #16
 801c784:	af00      	add	r7, sp, #0
 801c786:	60f8      	str	r0, [r7, #12]
 801c788:	60b9      	str	r1, [r7, #8]
 801c78a:	4613      	mov	r3, r2
 801c78c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	2b00      	cmp	r3, #0
 801c792:	d105      	bne.n	801c7a0 <udp_input_local_match+0x20>
 801c794:	4b27      	ldr	r3, [pc, #156]	; (801c834 <udp_input_local_match+0xb4>)
 801c796:	2287      	movs	r2, #135	; 0x87
 801c798:	4927      	ldr	r1, [pc, #156]	; (801c838 <udp_input_local_match+0xb8>)
 801c79a:	4828      	ldr	r0, [pc, #160]	; (801c83c <udp_input_local_match+0xbc>)
 801c79c:	f005 fabe 	bl	8021d1c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c7a0:	68bb      	ldr	r3, [r7, #8]
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d105      	bne.n	801c7b2 <udp_input_local_match+0x32>
 801c7a6:	4b23      	ldr	r3, [pc, #140]	; (801c834 <udp_input_local_match+0xb4>)
 801c7a8:	2288      	movs	r2, #136	; 0x88
 801c7aa:	4925      	ldr	r1, [pc, #148]	; (801c840 <udp_input_local_match+0xc0>)
 801c7ac:	4823      	ldr	r0, [pc, #140]	; (801c83c <udp_input_local_match+0xbc>)
 801c7ae:	f005 fab5 	bl	8021d1c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	7a1b      	ldrb	r3, [r3, #8]
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d00b      	beq.n	801c7d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c7ba:	68fb      	ldr	r3, [r7, #12]
 801c7bc:	7a1a      	ldrb	r2, [r3, #8]
 801c7be:	4b21      	ldr	r3, [pc, #132]	; (801c844 <udp_input_local_match+0xc4>)
 801c7c0:	685b      	ldr	r3, [r3, #4]
 801c7c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c7c6:	3301      	adds	r3, #1
 801c7c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c7ca:	429a      	cmp	r2, r3
 801c7cc:	d001      	beq.n	801c7d2 <udp_input_local_match+0x52>
    return 0;
 801c7ce:	2300      	movs	r3, #0
 801c7d0:	e02b      	b.n	801c82a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c7d2:	79fb      	ldrb	r3, [r7, #7]
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d018      	beq.n	801c80a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d013      	beq.n	801c806 <udp_input_local_match+0x86>
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	681b      	ldr	r3, [r3, #0]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d00f      	beq.n	801c806 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c7e6:	4b17      	ldr	r3, [pc, #92]	; (801c844 <udp_input_local_match+0xc4>)
 801c7e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c7ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c7ee:	d00a      	beq.n	801c806 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	681a      	ldr	r2, [r3, #0]
 801c7f4:	4b13      	ldr	r3, [pc, #76]	; (801c844 <udp_input_local_match+0xc4>)
 801c7f6:	695b      	ldr	r3, [r3, #20]
 801c7f8:	405a      	eors	r2, r3
 801c7fa:	68bb      	ldr	r3, [r7, #8]
 801c7fc:	3308      	adds	r3, #8
 801c7fe:	681b      	ldr	r3, [r3, #0]
 801c800:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c802:	2b00      	cmp	r3, #0
 801c804:	d110      	bne.n	801c828 <udp_input_local_match+0xa8>
          return 1;
 801c806:	2301      	movs	r3, #1
 801c808:	e00f      	b.n	801c82a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d009      	beq.n	801c824 <udp_input_local_match+0xa4>
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	681b      	ldr	r3, [r3, #0]
 801c814:	2b00      	cmp	r3, #0
 801c816:	d005      	beq.n	801c824 <udp_input_local_match+0xa4>
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	681a      	ldr	r2, [r3, #0]
 801c81c:	4b09      	ldr	r3, [pc, #36]	; (801c844 <udp_input_local_match+0xc4>)
 801c81e:	695b      	ldr	r3, [r3, #20]
 801c820:	429a      	cmp	r2, r3
 801c822:	d101      	bne.n	801c828 <udp_input_local_match+0xa8>
        return 1;
 801c824:	2301      	movs	r3, #1
 801c826:	e000      	b.n	801c82a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c828:	2300      	movs	r3, #0
}
 801c82a:	4618      	mov	r0, r3
 801c82c:	3710      	adds	r7, #16
 801c82e:	46bd      	mov	sp, r7
 801c830:	bd80      	pop	{r7, pc}
 801c832:	bf00      	nop
 801c834:	08027a9c 	.word	0x08027a9c
 801c838:	08027ae8 	.word	0x08027ae8
 801c83c:	08027b0c 	.word	0x08027b0c
 801c840:	08027b34 	.word	0x08027b34
 801c844:	2400a184 	.word	0x2400a184

0801c848 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c848:	b590      	push	{r4, r7, lr}
 801c84a:	b08d      	sub	sp, #52	; 0x34
 801c84c:	af02      	add	r7, sp, #8
 801c84e:	6078      	str	r0, [r7, #4]
 801c850:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c852:	2300      	movs	r3, #0
 801c854:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d105      	bne.n	801c868 <udp_input+0x20>
 801c85c:	4b7c      	ldr	r3, [pc, #496]	; (801ca50 <udp_input+0x208>)
 801c85e:	22cf      	movs	r2, #207	; 0xcf
 801c860:	497c      	ldr	r1, [pc, #496]	; (801ca54 <udp_input+0x20c>)
 801c862:	487d      	ldr	r0, [pc, #500]	; (801ca58 <udp_input+0x210>)
 801c864:	f005 fa5a 	bl	8021d1c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c868:	683b      	ldr	r3, [r7, #0]
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d105      	bne.n	801c87a <udp_input+0x32>
 801c86e:	4b78      	ldr	r3, [pc, #480]	; (801ca50 <udp_input+0x208>)
 801c870:	22d0      	movs	r2, #208	; 0xd0
 801c872:	497a      	ldr	r1, [pc, #488]	; (801ca5c <udp_input+0x214>)
 801c874:	4878      	ldr	r0, [pc, #480]	; (801ca58 <udp_input+0x210>)
 801c876:	f005 fa51 	bl	8021d1c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	895b      	ldrh	r3, [r3, #10]
 801c87e:	2b07      	cmp	r3, #7
 801c880:	d803      	bhi.n	801c88a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c882:	6878      	ldr	r0, [r7, #4]
 801c884:	f7f8 fa32 	bl	8014cec <pbuf_free>
    goto end;
 801c888:	e0de      	b.n	801ca48 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	685b      	ldr	r3, [r3, #4]
 801c88e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c890:	4b73      	ldr	r3, [pc, #460]	; (801ca60 <udp_input+0x218>)
 801c892:	695b      	ldr	r3, [r3, #20]
 801c894:	4a72      	ldr	r2, [pc, #456]	; (801ca60 <udp_input+0x218>)
 801c896:	6812      	ldr	r2, [r2, #0]
 801c898:	4611      	mov	r1, r2
 801c89a:	4618      	mov	r0, r3
 801c89c:	f7f5 fe38 	bl	8012510 <ip4_addr_isbroadcast_u32>
 801c8a0:	4603      	mov	r3, r0
 801c8a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c8a4:	697b      	ldr	r3, [r7, #20]
 801c8a6:	881b      	ldrh	r3, [r3, #0]
 801c8a8:	b29b      	uxth	r3, r3
 801c8aa:	4618      	mov	r0, r3
 801c8ac:	f7f4 f8a4 	bl	80109f8 <lwip_htons>
 801c8b0:	4603      	mov	r3, r0
 801c8b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c8b4:	697b      	ldr	r3, [r7, #20]
 801c8b6:	885b      	ldrh	r3, [r3, #2]
 801c8b8:	b29b      	uxth	r3, r3
 801c8ba:	4618      	mov	r0, r3
 801c8bc:	f7f4 f89c 	bl	80109f8 <lwip_htons>
 801c8c0:	4603      	mov	r3, r0
 801c8c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c8c4:	2300      	movs	r3, #0
 801c8c6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801c8c8:	2300      	movs	r3, #0
 801c8ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c8cc:	2300      	movs	r3, #0
 801c8ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c8d0:	4b64      	ldr	r3, [pc, #400]	; (801ca64 <udp_input+0x21c>)
 801c8d2:	681b      	ldr	r3, [r3, #0]
 801c8d4:	627b      	str	r3, [r7, #36]	; 0x24
 801c8d6:	e054      	b.n	801c982 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8da:	8a5b      	ldrh	r3, [r3, #18]
 801c8dc:	89fa      	ldrh	r2, [r7, #14]
 801c8de:	429a      	cmp	r2, r3
 801c8e0:	d14a      	bne.n	801c978 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c8e2:	7cfb      	ldrb	r3, [r7, #19]
 801c8e4:	461a      	mov	r2, r3
 801c8e6:	6839      	ldr	r1, [r7, #0]
 801c8e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c8ea:	f7ff ff49 	bl	801c780 <udp_input_local_match>
 801c8ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d041      	beq.n	801c978 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8f6:	7c1b      	ldrb	r3, [r3, #16]
 801c8f8:	f003 0304 	and.w	r3, r3, #4
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d11d      	bne.n	801c93c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801c900:	69fb      	ldr	r3, [r7, #28]
 801c902:	2b00      	cmp	r3, #0
 801c904:	d102      	bne.n	801c90c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c908:	61fb      	str	r3, [r7, #28]
 801c90a:	e017      	b.n	801c93c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c90c:	7cfb      	ldrb	r3, [r7, #19]
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d014      	beq.n	801c93c <udp_input+0xf4>
 801c912:	4b53      	ldr	r3, [pc, #332]	; (801ca60 <udp_input+0x218>)
 801c914:	695b      	ldr	r3, [r3, #20]
 801c916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c91a:	d10f      	bne.n	801c93c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c91c:	69fb      	ldr	r3, [r7, #28]
 801c91e:	681a      	ldr	r2, [r3, #0]
 801c920:	683b      	ldr	r3, [r7, #0]
 801c922:	3304      	adds	r3, #4
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	429a      	cmp	r2, r3
 801c928:	d008      	beq.n	801c93c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c92c:	681a      	ldr	r2, [r3, #0]
 801c92e:	683b      	ldr	r3, [r7, #0]
 801c930:	3304      	adds	r3, #4
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	429a      	cmp	r2, r3
 801c936:	d101      	bne.n	801c93c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c93a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c93e:	8a9b      	ldrh	r3, [r3, #20]
 801c940:	8a3a      	ldrh	r2, [r7, #16]
 801c942:	429a      	cmp	r2, r3
 801c944:	d118      	bne.n	801c978 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c948:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d005      	beq.n	801c95a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c950:	685a      	ldr	r2, [r3, #4]
 801c952:	4b43      	ldr	r3, [pc, #268]	; (801ca60 <udp_input+0x218>)
 801c954:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c956:	429a      	cmp	r2, r3
 801c958:	d10e      	bne.n	801c978 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c95a:	6a3b      	ldr	r3, [r7, #32]
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	d014      	beq.n	801c98a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c962:	68da      	ldr	r2, [r3, #12]
 801c964:	6a3b      	ldr	r3, [r7, #32]
 801c966:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c968:	4b3e      	ldr	r3, [pc, #248]	; (801ca64 <udp_input+0x21c>)
 801c96a:	681a      	ldr	r2, [r3, #0]
 801c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c96e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c970:	4a3c      	ldr	r2, [pc, #240]	; (801ca64 <udp_input+0x21c>)
 801c972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c974:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c976:	e008      	b.n	801c98a <udp_input+0x142>
      }
    }

    prev = pcb;
 801c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c97a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c97e:	68db      	ldr	r3, [r3, #12]
 801c980:	627b      	str	r3, [r7, #36]	; 0x24
 801c982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c984:	2b00      	cmp	r3, #0
 801c986:	d1a7      	bne.n	801c8d8 <udp_input+0x90>
 801c988:	e000      	b.n	801c98c <udp_input+0x144>
        break;
 801c98a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d101      	bne.n	801c996 <udp_input+0x14e>
    pcb = uncon_pcb;
 801c992:	69fb      	ldr	r3, [r7, #28]
 801c994:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d002      	beq.n	801c9a2 <udp_input+0x15a>
    for_us = 1;
 801c99c:	2301      	movs	r3, #1
 801c99e:	76fb      	strb	r3, [r7, #27]
 801c9a0:	e00a      	b.n	801c9b8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c9a2:	683b      	ldr	r3, [r7, #0]
 801c9a4:	3304      	adds	r3, #4
 801c9a6:	681a      	ldr	r2, [r3, #0]
 801c9a8:	4b2d      	ldr	r3, [pc, #180]	; (801ca60 <udp_input+0x218>)
 801c9aa:	695b      	ldr	r3, [r3, #20]
 801c9ac:	429a      	cmp	r2, r3
 801c9ae:	bf0c      	ite	eq
 801c9b0:	2301      	moveq	r3, #1
 801c9b2:	2300      	movne	r3, #0
 801c9b4:	b2db      	uxtb	r3, r3
 801c9b6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c9b8:	7efb      	ldrb	r3, [r7, #27]
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d041      	beq.n	801ca42 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c9be:	2108      	movs	r1, #8
 801c9c0:	6878      	ldr	r0, [r7, #4]
 801c9c2:	f7f8 f90d 	bl	8014be0 <pbuf_remove_header>
 801c9c6:	4603      	mov	r3, r0
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	d00a      	beq.n	801c9e2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c9cc:	4b20      	ldr	r3, [pc, #128]	; (801ca50 <udp_input+0x208>)
 801c9ce:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801c9d2:	4925      	ldr	r1, [pc, #148]	; (801ca68 <udp_input+0x220>)
 801c9d4:	4820      	ldr	r0, [pc, #128]	; (801ca58 <udp_input+0x210>)
 801c9d6:	f005 f9a1 	bl	8021d1c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c9da:	6878      	ldr	r0, [r7, #4]
 801c9dc:	f7f8 f986 	bl	8014cec <pbuf_free>
      goto end;
 801c9e0:	e032      	b.n	801ca48 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801c9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d012      	beq.n	801ca0e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9ea:	699b      	ldr	r3, [r3, #24]
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	d00a      	beq.n	801ca06 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9f2:	699c      	ldr	r4, [r3, #24]
 801c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9f6:	69d8      	ldr	r0, [r3, #28]
 801c9f8:	8a3b      	ldrh	r3, [r7, #16]
 801c9fa:	9300      	str	r3, [sp, #0]
 801c9fc:	4b1b      	ldr	r3, [pc, #108]	; (801ca6c <udp_input+0x224>)
 801c9fe:	687a      	ldr	r2, [r7, #4]
 801ca00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ca02:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ca04:	e021      	b.n	801ca4a <udp_input+0x202>
        pbuf_free(p);
 801ca06:	6878      	ldr	r0, [r7, #4]
 801ca08:	f7f8 f970 	bl	8014cec <pbuf_free>
        goto end;
 801ca0c:	e01c      	b.n	801ca48 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ca0e:	7cfb      	ldrb	r3, [r7, #19]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d112      	bne.n	801ca3a <udp_input+0x1f2>
 801ca14:	4b12      	ldr	r3, [pc, #72]	; (801ca60 <udp_input+0x218>)
 801ca16:	695b      	ldr	r3, [r3, #20]
 801ca18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ca1c:	2be0      	cmp	r3, #224	; 0xe0
 801ca1e:	d00c      	beq.n	801ca3a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ca20:	4b0f      	ldr	r3, [pc, #60]	; (801ca60 <udp_input+0x218>)
 801ca22:	899b      	ldrh	r3, [r3, #12]
 801ca24:	3308      	adds	r3, #8
 801ca26:	b29b      	uxth	r3, r3
 801ca28:	b21b      	sxth	r3, r3
 801ca2a:	4619      	mov	r1, r3
 801ca2c:	6878      	ldr	r0, [r7, #4]
 801ca2e:	f7f8 f94a 	bl	8014cc6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ca32:	2103      	movs	r1, #3
 801ca34:	6878      	ldr	r0, [r7, #4]
 801ca36:	f7f5 f96d 	bl	8011d14 <icmp_dest_unreach>
      pbuf_free(p);
 801ca3a:	6878      	ldr	r0, [r7, #4]
 801ca3c:	f7f8 f956 	bl	8014cec <pbuf_free>
  return;
 801ca40:	e003      	b.n	801ca4a <udp_input+0x202>
    pbuf_free(p);
 801ca42:	6878      	ldr	r0, [r7, #4]
 801ca44:	f7f8 f952 	bl	8014cec <pbuf_free>
  return;
 801ca48:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ca4a:	372c      	adds	r7, #44	; 0x2c
 801ca4c:	46bd      	mov	sp, r7
 801ca4e:	bd90      	pop	{r4, r7, pc}
 801ca50:	08027a9c 	.word	0x08027a9c
 801ca54:	08027b5c 	.word	0x08027b5c
 801ca58:	08027b0c 	.word	0x08027b0c
 801ca5c:	08027b74 	.word	0x08027b74
 801ca60:	2400a184 	.word	0x2400a184
 801ca64:	2400d268 	.word	0x2400d268
 801ca68:	08027b90 	.word	0x08027b90
 801ca6c:	2400a194 	.word	0x2400a194

0801ca70 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801ca70:	b580      	push	{r7, lr}
 801ca72:	b082      	sub	sp, #8
 801ca74:	af00      	add	r7, sp, #0
 801ca76:	6078      	str	r0, [r7, #4]
 801ca78:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d109      	bne.n	801ca94 <udp_send+0x24>
 801ca80:	4b11      	ldr	r3, [pc, #68]	; (801cac8 <udp_send+0x58>)
 801ca82:	f240 12d5 	movw	r2, #469	; 0x1d5
 801ca86:	4911      	ldr	r1, [pc, #68]	; (801cacc <udp_send+0x5c>)
 801ca88:	4811      	ldr	r0, [pc, #68]	; (801cad0 <udp_send+0x60>)
 801ca8a:	f005 f947 	bl	8021d1c <iprintf>
 801ca8e:	f06f 030f 	mvn.w	r3, #15
 801ca92:	e015      	b.n	801cac0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801ca94:	683b      	ldr	r3, [r7, #0]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d109      	bne.n	801caae <udp_send+0x3e>
 801ca9a:	4b0b      	ldr	r3, [pc, #44]	; (801cac8 <udp_send+0x58>)
 801ca9c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801caa0:	490c      	ldr	r1, [pc, #48]	; (801cad4 <udp_send+0x64>)
 801caa2:	480b      	ldr	r0, [pc, #44]	; (801cad0 <udp_send+0x60>)
 801caa4:	f005 f93a 	bl	8021d1c <iprintf>
 801caa8:	f06f 030f 	mvn.w	r3, #15
 801caac:	e008      	b.n	801cac0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	1d1a      	adds	r2, r3, #4
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	8a9b      	ldrh	r3, [r3, #20]
 801cab6:	6839      	ldr	r1, [r7, #0]
 801cab8:	6878      	ldr	r0, [r7, #4]
 801caba:	f000 f80d 	bl	801cad8 <udp_sendto>
 801cabe:	4603      	mov	r3, r0
}
 801cac0:	4618      	mov	r0, r3
 801cac2:	3708      	adds	r7, #8
 801cac4:	46bd      	mov	sp, r7
 801cac6:	bd80      	pop	{r7, pc}
 801cac8:	08027a9c 	.word	0x08027a9c
 801cacc:	08027bac 	.word	0x08027bac
 801cad0:	08027b0c 	.word	0x08027b0c
 801cad4:	08027bc4 	.word	0x08027bc4

0801cad8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801cad8:	b580      	push	{r7, lr}
 801cada:	b088      	sub	sp, #32
 801cadc:	af02      	add	r7, sp, #8
 801cade:	60f8      	str	r0, [r7, #12]
 801cae0:	60b9      	str	r1, [r7, #8]
 801cae2:	607a      	str	r2, [r7, #4]
 801cae4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801cae6:	68fb      	ldr	r3, [r7, #12]
 801cae8:	2b00      	cmp	r3, #0
 801caea:	d109      	bne.n	801cb00 <udp_sendto+0x28>
 801caec:	4b23      	ldr	r3, [pc, #140]	; (801cb7c <udp_sendto+0xa4>)
 801caee:	f44f 7206 	mov.w	r2, #536	; 0x218
 801caf2:	4923      	ldr	r1, [pc, #140]	; (801cb80 <udp_sendto+0xa8>)
 801caf4:	4823      	ldr	r0, [pc, #140]	; (801cb84 <udp_sendto+0xac>)
 801caf6:	f005 f911 	bl	8021d1c <iprintf>
 801cafa:	f06f 030f 	mvn.w	r3, #15
 801cafe:	e038      	b.n	801cb72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801cb00:	68bb      	ldr	r3, [r7, #8]
 801cb02:	2b00      	cmp	r3, #0
 801cb04:	d109      	bne.n	801cb1a <udp_sendto+0x42>
 801cb06:	4b1d      	ldr	r3, [pc, #116]	; (801cb7c <udp_sendto+0xa4>)
 801cb08:	f240 2219 	movw	r2, #537	; 0x219
 801cb0c:	491e      	ldr	r1, [pc, #120]	; (801cb88 <udp_sendto+0xb0>)
 801cb0e:	481d      	ldr	r0, [pc, #116]	; (801cb84 <udp_sendto+0xac>)
 801cb10:	f005 f904 	bl	8021d1c <iprintf>
 801cb14:	f06f 030f 	mvn.w	r3, #15
 801cb18:	e02b      	b.n	801cb72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d109      	bne.n	801cb34 <udp_sendto+0x5c>
 801cb20:	4b16      	ldr	r3, [pc, #88]	; (801cb7c <udp_sendto+0xa4>)
 801cb22:	f240 221a 	movw	r2, #538	; 0x21a
 801cb26:	4919      	ldr	r1, [pc, #100]	; (801cb8c <udp_sendto+0xb4>)
 801cb28:	4816      	ldr	r0, [pc, #88]	; (801cb84 <udp_sendto+0xac>)
 801cb2a:	f005 f8f7 	bl	8021d1c <iprintf>
 801cb2e:	f06f 030f 	mvn.w	r3, #15
 801cb32:	e01e      	b.n	801cb72 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	7a1b      	ldrb	r3, [r3, #8]
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d006      	beq.n	801cb4a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801cb3c:	68fb      	ldr	r3, [r7, #12]
 801cb3e:	7a1b      	ldrb	r3, [r3, #8]
 801cb40:	4618      	mov	r0, r3
 801cb42:	f7f7 fd45 	bl	80145d0 <netif_get_by_index>
 801cb46:	6178      	str	r0, [r7, #20]
 801cb48:	e003      	b.n	801cb52 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801cb4a:	6878      	ldr	r0, [r7, #4]
 801cb4c:	f7f5 fa4a 	bl	8011fe4 <ip4_route>
 801cb50:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801cb52:	697b      	ldr	r3, [r7, #20]
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d102      	bne.n	801cb5e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801cb58:	f06f 0303 	mvn.w	r3, #3
 801cb5c:	e009      	b.n	801cb72 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801cb5e:	887a      	ldrh	r2, [r7, #2]
 801cb60:	697b      	ldr	r3, [r7, #20]
 801cb62:	9300      	str	r3, [sp, #0]
 801cb64:	4613      	mov	r3, r2
 801cb66:	687a      	ldr	r2, [r7, #4]
 801cb68:	68b9      	ldr	r1, [r7, #8]
 801cb6a:	68f8      	ldr	r0, [r7, #12]
 801cb6c:	f000 f810 	bl	801cb90 <udp_sendto_if>
 801cb70:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801cb72:	4618      	mov	r0, r3
 801cb74:	3718      	adds	r7, #24
 801cb76:	46bd      	mov	sp, r7
 801cb78:	bd80      	pop	{r7, pc}
 801cb7a:	bf00      	nop
 801cb7c:	08027a9c 	.word	0x08027a9c
 801cb80:	08027bdc 	.word	0x08027bdc
 801cb84:	08027b0c 	.word	0x08027b0c
 801cb88:	08027bf4 	.word	0x08027bf4
 801cb8c:	08027c10 	.word	0x08027c10

0801cb90 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801cb90:	b580      	push	{r7, lr}
 801cb92:	b088      	sub	sp, #32
 801cb94:	af02      	add	r7, sp, #8
 801cb96:	60f8      	str	r0, [r7, #12]
 801cb98:	60b9      	str	r1, [r7, #8]
 801cb9a:	607a      	str	r2, [r7, #4]
 801cb9c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d109      	bne.n	801cbb8 <udp_sendto_if+0x28>
 801cba4:	4b2e      	ldr	r3, [pc, #184]	; (801cc60 <udp_sendto_if+0xd0>)
 801cba6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cbaa:	492e      	ldr	r1, [pc, #184]	; (801cc64 <udp_sendto_if+0xd4>)
 801cbac:	482e      	ldr	r0, [pc, #184]	; (801cc68 <udp_sendto_if+0xd8>)
 801cbae:	f005 f8b5 	bl	8021d1c <iprintf>
 801cbb2:	f06f 030f 	mvn.w	r3, #15
 801cbb6:	e04f      	b.n	801cc58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801cbb8:	68bb      	ldr	r3, [r7, #8]
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d109      	bne.n	801cbd2 <udp_sendto_if+0x42>
 801cbbe:	4b28      	ldr	r3, [pc, #160]	; (801cc60 <udp_sendto_if+0xd0>)
 801cbc0:	f240 2281 	movw	r2, #641	; 0x281
 801cbc4:	4929      	ldr	r1, [pc, #164]	; (801cc6c <udp_sendto_if+0xdc>)
 801cbc6:	4828      	ldr	r0, [pc, #160]	; (801cc68 <udp_sendto_if+0xd8>)
 801cbc8:	f005 f8a8 	bl	8021d1c <iprintf>
 801cbcc:	f06f 030f 	mvn.w	r3, #15
 801cbd0:	e042      	b.n	801cc58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d109      	bne.n	801cbec <udp_sendto_if+0x5c>
 801cbd8:	4b21      	ldr	r3, [pc, #132]	; (801cc60 <udp_sendto_if+0xd0>)
 801cbda:	f240 2282 	movw	r2, #642	; 0x282
 801cbde:	4924      	ldr	r1, [pc, #144]	; (801cc70 <udp_sendto_if+0xe0>)
 801cbe0:	4821      	ldr	r0, [pc, #132]	; (801cc68 <udp_sendto_if+0xd8>)
 801cbe2:	f005 f89b 	bl	8021d1c <iprintf>
 801cbe6:	f06f 030f 	mvn.w	r3, #15
 801cbea:	e035      	b.n	801cc58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801cbec:	6a3b      	ldr	r3, [r7, #32]
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d109      	bne.n	801cc06 <udp_sendto_if+0x76>
 801cbf2:	4b1b      	ldr	r3, [pc, #108]	; (801cc60 <udp_sendto_if+0xd0>)
 801cbf4:	f240 2283 	movw	r2, #643	; 0x283
 801cbf8:	491e      	ldr	r1, [pc, #120]	; (801cc74 <udp_sendto_if+0xe4>)
 801cbfa:	481b      	ldr	r0, [pc, #108]	; (801cc68 <udp_sendto_if+0xd8>)
 801cbfc:	f005 f88e 	bl	8021d1c <iprintf>
 801cc00:	f06f 030f 	mvn.w	r3, #15
 801cc04:	e028      	b.n	801cc58 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	d009      	beq.n	801cc20 <udp_sendto_if+0x90>
 801cc0c:	68fb      	ldr	r3, [r7, #12]
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d005      	beq.n	801cc20 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801cc14:	68fb      	ldr	r3, [r7, #12]
 801cc16:	681b      	ldr	r3, [r3, #0]
 801cc18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801cc1c:	2be0      	cmp	r3, #224	; 0xe0
 801cc1e:	d103      	bne.n	801cc28 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801cc20:	6a3b      	ldr	r3, [r7, #32]
 801cc22:	3304      	adds	r3, #4
 801cc24:	617b      	str	r3, [r7, #20]
 801cc26:	e00b      	b.n	801cc40 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	681a      	ldr	r2, [r3, #0]
 801cc2c:	6a3b      	ldr	r3, [r7, #32]
 801cc2e:	3304      	adds	r3, #4
 801cc30:	681b      	ldr	r3, [r3, #0]
 801cc32:	429a      	cmp	r2, r3
 801cc34:	d002      	beq.n	801cc3c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801cc36:	f06f 0303 	mvn.w	r3, #3
 801cc3a:	e00d      	b.n	801cc58 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801cc40:	887a      	ldrh	r2, [r7, #2]
 801cc42:	697b      	ldr	r3, [r7, #20]
 801cc44:	9301      	str	r3, [sp, #4]
 801cc46:	6a3b      	ldr	r3, [r7, #32]
 801cc48:	9300      	str	r3, [sp, #0]
 801cc4a:	4613      	mov	r3, r2
 801cc4c:	687a      	ldr	r2, [r7, #4]
 801cc4e:	68b9      	ldr	r1, [r7, #8]
 801cc50:	68f8      	ldr	r0, [r7, #12]
 801cc52:	f000 f811 	bl	801cc78 <udp_sendto_if_src>
 801cc56:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801cc58:	4618      	mov	r0, r3
 801cc5a:	3718      	adds	r7, #24
 801cc5c:	46bd      	mov	sp, r7
 801cc5e:	bd80      	pop	{r7, pc}
 801cc60:	08027a9c 	.word	0x08027a9c
 801cc64:	08027c2c 	.word	0x08027c2c
 801cc68:	08027b0c 	.word	0x08027b0c
 801cc6c:	08027c48 	.word	0x08027c48
 801cc70:	08027c64 	.word	0x08027c64
 801cc74:	08027c84 	.word	0x08027c84

0801cc78 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801cc78:	b580      	push	{r7, lr}
 801cc7a:	b08c      	sub	sp, #48	; 0x30
 801cc7c:	af04      	add	r7, sp, #16
 801cc7e:	60f8      	str	r0, [r7, #12]
 801cc80:	60b9      	str	r1, [r7, #8]
 801cc82:	607a      	str	r2, [r7, #4]
 801cc84:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801cc86:	68fb      	ldr	r3, [r7, #12]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d109      	bne.n	801cca0 <udp_sendto_if_src+0x28>
 801cc8c:	4b65      	ldr	r3, [pc, #404]	; (801ce24 <udp_sendto_if_src+0x1ac>)
 801cc8e:	f240 22d1 	movw	r2, #721	; 0x2d1
 801cc92:	4965      	ldr	r1, [pc, #404]	; (801ce28 <udp_sendto_if_src+0x1b0>)
 801cc94:	4865      	ldr	r0, [pc, #404]	; (801ce2c <udp_sendto_if_src+0x1b4>)
 801cc96:	f005 f841 	bl	8021d1c <iprintf>
 801cc9a:	f06f 030f 	mvn.w	r3, #15
 801cc9e:	e0bc      	b.n	801ce1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801cca0:	68bb      	ldr	r3, [r7, #8]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d109      	bne.n	801ccba <udp_sendto_if_src+0x42>
 801cca6:	4b5f      	ldr	r3, [pc, #380]	; (801ce24 <udp_sendto_if_src+0x1ac>)
 801cca8:	f240 22d2 	movw	r2, #722	; 0x2d2
 801ccac:	4960      	ldr	r1, [pc, #384]	; (801ce30 <udp_sendto_if_src+0x1b8>)
 801ccae:	485f      	ldr	r0, [pc, #380]	; (801ce2c <udp_sendto_if_src+0x1b4>)
 801ccb0:	f005 f834 	bl	8021d1c <iprintf>
 801ccb4:	f06f 030f 	mvn.w	r3, #15
 801ccb8:	e0af      	b.n	801ce1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d109      	bne.n	801ccd4 <udp_sendto_if_src+0x5c>
 801ccc0:	4b58      	ldr	r3, [pc, #352]	; (801ce24 <udp_sendto_if_src+0x1ac>)
 801ccc2:	f240 22d3 	movw	r2, #723	; 0x2d3
 801ccc6:	495b      	ldr	r1, [pc, #364]	; (801ce34 <udp_sendto_if_src+0x1bc>)
 801ccc8:	4858      	ldr	r0, [pc, #352]	; (801ce2c <udp_sendto_if_src+0x1b4>)
 801ccca:	f005 f827 	bl	8021d1c <iprintf>
 801ccce:	f06f 030f 	mvn.w	r3, #15
 801ccd2:	e0a2      	b.n	801ce1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801ccd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d109      	bne.n	801ccee <udp_sendto_if_src+0x76>
 801ccda:	4b52      	ldr	r3, [pc, #328]	; (801ce24 <udp_sendto_if_src+0x1ac>)
 801ccdc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801cce0:	4955      	ldr	r1, [pc, #340]	; (801ce38 <udp_sendto_if_src+0x1c0>)
 801cce2:	4852      	ldr	r0, [pc, #328]	; (801ce2c <udp_sendto_if_src+0x1b4>)
 801cce4:	f005 f81a 	bl	8021d1c <iprintf>
 801cce8:	f06f 030f 	mvn.w	r3, #15
 801ccec:	e095      	b.n	801ce1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801ccee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d109      	bne.n	801cd08 <udp_sendto_if_src+0x90>
 801ccf4:	4b4b      	ldr	r3, [pc, #300]	; (801ce24 <udp_sendto_if_src+0x1ac>)
 801ccf6:	f240 22d5 	movw	r2, #725	; 0x2d5
 801ccfa:	4950      	ldr	r1, [pc, #320]	; (801ce3c <udp_sendto_if_src+0x1c4>)
 801ccfc:	484b      	ldr	r0, [pc, #300]	; (801ce2c <udp_sendto_if_src+0x1b4>)
 801ccfe:	f005 f80d 	bl	8021d1c <iprintf>
 801cd02:	f06f 030f 	mvn.w	r3, #15
 801cd06:	e088      	b.n	801ce1a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	8a5b      	ldrh	r3, [r3, #18]
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d10f      	bne.n	801cd30 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801cd10:	68f9      	ldr	r1, [r7, #12]
 801cd12:	68fb      	ldr	r3, [r7, #12]
 801cd14:	8a5b      	ldrh	r3, [r3, #18]
 801cd16:	461a      	mov	r2, r3
 801cd18:	68f8      	ldr	r0, [r7, #12]
 801cd1a:	f000 f893 	bl	801ce44 <udp_bind>
 801cd1e:	4603      	mov	r3, r0
 801cd20:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801cd22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	d002      	beq.n	801cd30 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801cd2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801cd2e:	e074      	b.n	801ce1a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801cd30:	68bb      	ldr	r3, [r7, #8]
 801cd32:	891b      	ldrh	r3, [r3, #8]
 801cd34:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801cd38:	4293      	cmp	r3, r2
 801cd3a:	d902      	bls.n	801cd42 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801cd3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cd40:	e06b      	b.n	801ce1a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801cd42:	2108      	movs	r1, #8
 801cd44:	68b8      	ldr	r0, [r7, #8]
 801cd46:	f7f7 ff3b 	bl	8014bc0 <pbuf_add_header>
 801cd4a:	4603      	mov	r3, r0
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	d015      	beq.n	801cd7c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801cd50:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cd54:	2108      	movs	r1, #8
 801cd56:	2022      	movs	r0, #34	; 0x22
 801cd58:	f7f7 fce4 	bl	8014724 <pbuf_alloc>
 801cd5c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801cd5e:	69fb      	ldr	r3, [r7, #28]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d102      	bne.n	801cd6a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801cd64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cd68:	e057      	b.n	801ce1a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801cd6a:	68bb      	ldr	r3, [r7, #8]
 801cd6c:	891b      	ldrh	r3, [r3, #8]
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d006      	beq.n	801cd80 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801cd72:	68b9      	ldr	r1, [r7, #8]
 801cd74:	69f8      	ldr	r0, [r7, #28]
 801cd76:	f7f8 f8dd 	bl	8014f34 <pbuf_chain>
 801cd7a:	e001      	b.n	801cd80 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801cd7c:	68bb      	ldr	r3, [r7, #8]
 801cd7e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801cd80:	69fb      	ldr	r3, [r7, #28]
 801cd82:	895b      	ldrh	r3, [r3, #10]
 801cd84:	2b07      	cmp	r3, #7
 801cd86:	d806      	bhi.n	801cd96 <udp_sendto_if_src+0x11e>
 801cd88:	4b26      	ldr	r3, [pc, #152]	; (801ce24 <udp_sendto_if_src+0x1ac>)
 801cd8a:	f240 320d 	movw	r2, #781	; 0x30d
 801cd8e:	492c      	ldr	r1, [pc, #176]	; (801ce40 <udp_sendto_if_src+0x1c8>)
 801cd90:	4826      	ldr	r0, [pc, #152]	; (801ce2c <udp_sendto_if_src+0x1b4>)
 801cd92:	f004 ffc3 	bl	8021d1c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801cd96:	69fb      	ldr	r3, [r7, #28]
 801cd98:	685b      	ldr	r3, [r3, #4]
 801cd9a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	8a5b      	ldrh	r3, [r3, #18]
 801cda0:	4618      	mov	r0, r3
 801cda2:	f7f3 fe29 	bl	80109f8 <lwip_htons>
 801cda6:	4603      	mov	r3, r0
 801cda8:	461a      	mov	r2, r3
 801cdaa:	697b      	ldr	r3, [r7, #20]
 801cdac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801cdae:	887b      	ldrh	r3, [r7, #2]
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	f7f3 fe21 	bl	80109f8 <lwip_htons>
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	461a      	mov	r2, r3
 801cdba:	697b      	ldr	r3, [r7, #20]
 801cdbc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801cdbe:	697b      	ldr	r3, [r7, #20]
 801cdc0:	2200      	movs	r2, #0
 801cdc2:	719a      	strb	r2, [r3, #6]
 801cdc4:	2200      	movs	r2, #0
 801cdc6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801cdc8:	69fb      	ldr	r3, [r7, #28]
 801cdca:	891b      	ldrh	r3, [r3, #8]
 801cdcc:	4618      	mov	r0, r3
 801cdce:	f7f3 fe13 	bl	80109f8 <lwip_htons>
 801cdd2:	4603      	mov	r3, r0
 801cdd4:	461a      	mov	r2, r3
 801cdd6:	697b      	ldr	r3, [r7, #20]
 801cdd8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801cdda:	2311      	movs	r3, #17
 801cddc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	7adb      	ldrb	r3, [r3, #11]
 801cde2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801cde4:	68fb      	ldr	r3, [r7, #12]
 801cde6:	7a9b      	ldrb	r3, [r3, #10]
 801cde8:	7cb9      	ldrb	r1, [r7, #18]
 801cdea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cdec:	9202      	str	r2, [sp, #8]
 801cdee:	7cfa      	ldrb	r2, [r7, #19]
 801cdf0:	9201      	str	r2, [sp, #4]
 801cdf2:	9300      	str	r3, [sp, #0]
 801cdf4:	460b      	mov	r3, r1
 801cdf6:	687a      	ldr	r2, [r7, #4]
 801cdf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cdfa:	69f8      	ldr	r0, [r7, #28]
 801cdfc:	f7f5 fada 	bl	80123b4 <ip4_output_if_src>
 801ce00:	4603      	mov	r3, r0
 801ce02:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801ce04:	69fa      	ldr	r2, [r7, #28]
 801ce06:	68bb      	ldr	r3, [r7, #8]
 801ce08:	429a      	cmp	r2, r3
 801ce0a:	d004      	beq.n	801ce16 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801ce0c:	69f8      	ldr	r0, [r7, #28]
 801ce0e:	f7f7 ff6d 	bl	8014cec <pbuf_free>
    q = NULL;
 801ce12:	2300      	movs	r3, #0
 801ce14:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801ce16:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801ce1a:	4618      	mov	r0, r3
 801ce1c:	3720      	adds	r7, #32
 801ce1e:	46bd      	mov	sp, r7
 801ce20:	bd80      	pop	{r7, pc}
 801ce22:	bf00      	nop
 801ce24:	08027a9c 	.word	0x08027a9c
 801ce28:	08027ca4 	.word	0x08027ca4
 801ce2c:	08027b0c 	.word	0x08027b0c
 801ce30:	08027cc4 	.word	0x08027cc4
 801ce34:	08027ce4 	.word	0x08027ce4
 801ce38:	08027d08 	.word	0x08027d08
 801ce3c:	08027d2c 	.word	0x08027d2c
 801ce40:	08027d50 	.word	0x08027d50

0801ce44 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b086      	sub	sp, #24
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	60f8      	str	r0, [r7, #12]
 801ce4c:	60b9      	str	r1, [r7, #8]
 801ce4e:	4613      	mov	r3, r2
 801ce50:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801ce52:	68bb      	ldr	r3, [r7, #8]
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d101      	bne.n	801ce5c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801ce58:	4b39      	ldr	r3, [pc, #228]	; (801cf40 <udp_bind+0xfc>)
 801ce5a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801ce5c:	68fb      	ldr	r3, [r7, #12]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d109      	bne.n	801ce76 <udp_bind+0x32>
 801ce62:	4b38      	ldr	r3, [pc, #224]	; (801cf44 <udp_bind+0x100>)
 801ce64:	f240 32b7 	movw	r2, #951	; 0x3b7
 801ce68:	4937      	ldr	r1, [pc, #220]	; (801cf48 <udp_bind+0x104>)
 801ce6a:	4838      	ldr	r0, [pc, #224]	; (801cf4c <udp_bind+0x108>)
 801ce6c:	f004 ff56 	bl	8021d1c <iprintf>
 801ce70:	f06f 030f 	mvn.w	r3, #15
 801ce74:	e060      	b.n	801cf38 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801ce76:	2300      	movs	r3, #0
 801ce78:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ce7a:	4b35      	ldr	r3, [pc, #212]	; (801cf50 <udp_bind+0x10c>)
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	617b      	str	r3, [r7, #20]
 801ce80:	e009      	b.n	801ce96 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801ce82:	68fa      	ldr	r2, [r7, #12]
 801ce84:	697b      	ldr	r3, [r7, #20]
 801ce86:	429a      	cmp	r2, r3
 801ce88:	d102      	bne.n	801ce90 <udp_bind+0x4c>
      rebind = 1;
 801ce8a:	2301      	movs	r3, #1
 801ce8c:	74fb      	strb	r3, [r7, #19]
      break;
 801ce8e:	e005      	b.n	801ce9c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ce90:	697b      	ldr	r3, [r7, #20]
 801ce92:	68db      	ldr	r3, [r3, #12]
 801ce94:	617b      	str	r3, [r7, #20]
 801ce96:	697b      	ldr	r3, [r7, #20]
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	d1f2      	bne.n	801ce82 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801ce9c:	88fb      	ldrh	r3, [r7, #6]
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d109      	bne.n	801ceb6 <udp_bind+0x72>
    port = udp_new_port();
 801cea2:	f7ff fc35 	bl	801c710 <udp_new_port>
 801cea6:	4603      	mov	r3, r0
 801cea8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801ceaa:	88fb      	ldrh	r3, [r7, #6]
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d12c      	bne.n	801cf0a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801ceb0:	f06f 0307 	mvn.w	r3, #7
 801ceb4:	e040      	b.n	801cf38 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ceb6:	4b26      	ldr	r3, [pc, #152]	; (801cf50 <udp_bind+0x10c>)
 801ceb8:	681b      	ldr	r3, [r3, #0]
 801ceba:	617b      	str	r3, [r7, #20]
 801cebc:	e022      	b.n	801cf04 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801cebe:	68fa      	ldr	r2, [r7, #12]
 801cec0:	697b      	ldr	r3, [r7, #20]
 801cec2:	429a      	cmp	r2, r3
 801cec4:	d01b      	beq.n	801cefe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801cec6:	697b      	ldr	r3, [r7, #20]
 801cec8:	8a5b      	ldrh	r3, [r3, #18]
 801ceca:	88fa      	ldrh	r2, [r7, #6]
 801cecc:	429a      	cmp	r2, r3
 801cece:	d116      	bne.n	801cefe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ced0:	697b      	ldr	r3, [r7, #20]
 801ced2:	681a      	ldr	r2, [r3, #0]
 801ced4:	68bb      	ldr	r3, [r7, #8]
 801ced6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801ced8:	429a      	cmp	r2, r3
 801ceda:	d00d      	beq.n	801cef8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801cedc:	68bb      	ldr	r3, [r7, #8]
 801cede:	2b00      	cmp	r3, #0
 801cee0:	d00a      	beq.n	801cef8 <udp_bind+0xb4>
 801cee2:	68bb      	ldr	r3, [r7, #8]
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	d006      	beq.n	801cef8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ceea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d003      	beq.n	801cef8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801cef0:	697b      	ldr	r3, [r7, #20]
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d102      	bne.n	801cefe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801cef8:	f06f 0307 	mvn.w	r3, #7
 801cefc:	e01c      	b.n	801cf38 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cefe:	697b      	ldr	r3, [r7, #20]
 801cf00:	68db      	ldr	r3, [r3, #12]
 801cf02:	617b      	str	r3, [r7, #20]
 801cf04:	697b      	ldr	r3, [r7, #20]
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	d1d9      	bne.n	801cebe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801cf0a:	68bb      	ldr	r3, [r7, #8]
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d002      	beq.n	801cf16 <udp_bind+0xd2>
 801cf10:	68bb      	ldr	r3, [r7, #8]
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	e000      	b.n	801cf18 <udp_bind+0xd4>
 801cf16:	2300      	movs	r3, #0
 801cf18:	68fa      	ldr	r2, [r7, #12]
 801cf1a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	88fa      	ldrh	r2, [r7, #6]
 801cf20:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801cf22:	7cfb      	ldrb	r3, [r7, #19]
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d106      	bne.n	801cf36 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801cf28:	4b09      	ldr	r3, [pc, #36]	; (801cf50 <udp_bind+0x10c>)
 801cf2a:	681a      	ldr	r2, [r3, #0]
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801cf30:	4a07      	ldr	r2, [pc, #28]	; (801cf50 <udp_bind+0x10c>)
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801cf36:	2300      	movs	r3, #0
}
 801cf38:	4618      	mov	r0, r3
 801cf3a:	3718      	adds	r7, #24
 801cf3c:	46bd      	mov	sp, r7
 801cf3e:	bd80      	pop	{r7, pc}
 801cf40:	0802807c 	.word	0x0802807c
 801cf44:	08027a9c 	.word	0x08027a9c
 801cf48:	08027d80 	.word	0x08027d80
 801cf4c:	08027b0c 	.word	0x08027b0c
 801cf50:	2400d268 	.word	0x2400d268

0801cf54 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801cf54:	b580      	push	{r7, lr}
 801cf56:	b086      	sub	sp, #24
 801cf58:	af00      	add	r7, sp, #0
 801cf5a:	60f8      	str	r0, [r7, #12]
 801cf5c:	60b9      	str	r1, [r7, #8]
 801cf5e:	4613      	mov	r3, r2
 801cf60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801cf62:	68fb      	ldr	r3, [r7, #12]
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	d109      	bne.n	801cf7c <udp_connect+0x28>
 801cf68:	4b2c      	ldr	r3, [pc, #176]	; (801d01c <udp_connect+0xc8>)
 801cf6a:	f240 4235 	movw	r2, #1077	; 0x435
 801cf6e:	492c      	ldr	r1, [pc, #176]	; (801d020 <udp_connect+0xcc>)
 801cf70:	482c      	ldr	r0, [pc, #176]	; (801d024 <udp_connect+0xd0>)
 801cf72:	f004 fed3 	bl	8021d1c <iprintf>
 801cf76:	f06f 030f 	mvn.w	r3, #15
 801cf7a:	e04b      	b.n	801d014 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801cf7c:	68bb      	ldr	r3, [r7, #8]
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d109      	bne.n	801cf96 <udp_connect+0x42>
 801cf82:	4b26      	ldr	r3, [pc, #152]	; (801d01c <udp_connect+0xc8>)
 801cf84:	f240 4236 	movw	r2, #1078	; 0x436
 801cf88:	4927      	ldr	r1, [pc, #156]	; (801d028 <udp_connect+0xd4>)
 801cf8a:	4826      	ldr	r0, [pc, #152]	; (801d024 <udp_connect+0xd0>)
 801cf8c:	f004 fec6 	bl	8021d1c <iprintf>
 801cf90:	f06f 030f 	mvn.w	r3, #15
 801cf94:	e03e      	b.n	801d014 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801cf96:	68fb      	ldr	r3, [r7, #12]
 801cf98:	8a5b      	ldrh	r3, [r3, #18]
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d10f      	bne.n	801cfbe <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801cf9e:	68f9      	ldr	r1, [r7, #12]
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	8a5b      	ldrh	r3, [r3, #18]
 801cfa4:	461a      	mov	r2, r3
 801cfa6:	68f8      	ldr	r0, [r7, #12]
 801cfa8:	f7ff ff4c 	bl	801ce44 <udp_bind>
 801cfac:	4603      	mov	r3, r0
 801cfae:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801cfb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	d002      	beq.n	801cfbe <udp_connect+0x6a>
      return err;
 801cfb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cfbc:	e02a      	b.n	801d014 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801cfbe:	68bb      	ldr	r3, [r7, #8]
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d002      	beq.n	801cfca <udp_connect+0x76>
 801cfc4:	68bb      	ldr	r3, [r7, #8]
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	e000      	b.n	801cfcc <udp_connect+0x78>
 801cfca:	2300      	movs	r3, #0
 801cfcc:	68fa      	ldr	r2, [r7, #12]
 801cfce:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801cfd0:	68fb      	ldr	r3, [r7, #12]
 801cfd2:	88fa      	ldrh	r2, [r7, #6]
 801cfd4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	7c1b      	ldrb	r3, [r3, #16]
 801cfda:	f043 0304 	orr.w	r3, r3, #4
 801cfde:	b2da      	uxtb	r2, r3
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cfe4:	4b11      	ldr	r3, [pc, #68]	; (801d02c <udp_connect+0xd8>)
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	617b      	str	r3, [r7, #20]
 801cfea:	e008      	b.n	801cffe <udp_connect+0xaa>
    if (pcb == ipcb) {
 801cfec:	68fa      	ldr	r2, [r7, #12]
 801cfee:	697b      	ldr	r3, [r7, #20]
 801cff0:	429a      	cmp	r2, r3
 801cff2:	d101      	bne.n	801cff8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801cff4:	2300      	movs	r3, #0
 801cff6:	e00d      	b.n	801d014 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cff8:	697b      	ldr	r3, [r7, #20]
 801cffa:	68db      	ldr	r3, [r3, #12]
 801cffc:	617b      	str	r3, [r7, #20]
 801cffe:	697b      	ldr	r3, [r7, #20]
 801d000:	2b00      	cmp	r3, #0
 801d002:	d1f3      	bne.n	801cfec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801d004:	4b09      	ldr	r3, [pc, #36]	; (801d02c <udp_connect+0xd8>)
 801d006:	681a      	ldr	r2, [r3, #0]
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801d00c:	4a07      	ldr	r2, [pc, #28]	; (801d02c <udp_connect+0xd8>)
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801d012:	2300      	movs	r3, #0
}
 801d014:	4618      	mov	r0, r3
 801d016:	3718      	adds	r7, #24
 801d018:	46bd      	mov	sp, r7
 801d01a:	bd80      	pop	{r7, pc}
 801d01c:	08027a9c 	.word	0x08027a9c
 801d020:	08027d98 	.word	0x08027d98
 801d024:	08027b0c 	.word	0x08027b0c
 801d028:	08027db4 	.word	0x08027db4
 801d02c:	2400d268 	.word	0x2400d268

0801d030 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801d030:	b580      	push	{r7, lr}
 801d032:	b082      	sub	sp, #8
 801d034:	af00      	add	r7, sp, #0
 801d036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	d107      	bne.n	801d04e <udp_disconnect+0x1e>
 801d03e:	4b0d      	ldr	r3, [pc, #52]	; (801d074 <udp_disconnect+0x44>)
 801d040:	f240 426a 	movw	r2, #1130	; 0x46a
 801d044:	490c      	ldr	r1, [pc, #48]	; (801d078 <udp_disconnect+0x48>)
 801d046:	480d      	ldr	r0, [pc, #52]	; (801d07c <udp_disconnect+0x4c>)
 801d048:	f004 fe68 	bl	8021d1c <iprintf>
 801d04c:	e00f      	b.n	801d06e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	2200      	movs	r2, #0
 801d052:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	2200      	movs	r2, #0
 801d058:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	2200      	movs	r2, #0
 801d05e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	7c1b      	ldrb	r3, [r3, #16]
 801d064:	f023 0304 	bic.w	r3, r3, #4
 801d068:	b2da      	uxtb	r2, r3
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	741a      	strb	r2, [r3, #16]
}
 801d06e:	3708      	adds	r7, #8
 801d070:	46bd      	mov	sp, r7
 801d072:	bd80      	pop	{r7, pc}
 801d074:	08027a9c 	.word	0x08027a9c
 801d078:	08027dd0 	.word	0x08027dd0
 801d07c:	08027b0c 	.word	0x08027b0c

0801d080 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801d080:	b580      	push	{r7, lr}
 801d082:	b084      	sub	sp, #16
 801d084:	af00      	add	r7, sp, #0
 801d086:	60f8      	str	r0, [r7, #12]
 801d088:	60b9      	str	r1, [r7, #8]
 801d08a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801d08c:	68fb      	ldr	r3, [r7, #12]
 801d08e:	2b00      	cmp	r3, #0
 801d090:	d107      	bne.n	801d0a2 <udp_recv+0x22>
 801d092:	4b08      	ldr	r3, [pc, #32]	; (801d0b4 <udp_recv+0x34>)
 801d094:	f240 428a 	movw	r2, #1162	; 0x48a
 801d098:	4907      	ldr	r1, [pc, #28]	; (801d0b8 <udp_recv+0x38>)
 801d09a:	4808      	ldr	r0, [pc, #32]	; (801d0bc <udp_recv+0x3c>)
 801d09c:	f004 fe3e 	bl	8021d1c <iprintf>
 801d0a0:	e005      	b.n	801d0ae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801d0a2:	68fb      	ldr	r3, [r7, #12]
 801d0a4:	68ba      	ldr	r2, [r7, #8]
 801d0a6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801d0a8:	68fb      	ldr	r3, [r7, #12]
 801d0aa:	687a      	ldr	r2, [r7, #4]
 801d0ac:	61da      	str	r2, [r3, #28]
}
 801d0ae:	3710      	adds	r7, #16
 801d0b0:	46bd      	mov	sp, r7
 801d0b2:	bd80      	pop	{r7, pc}
 801d0b4:	08027a9c 	.word	0x08027a9c
 801d0b8:	08027dec 	.word	0x08027dec
 801d0bc:	08027b0c 	.word	0x08027b0c

0801d0c0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801d0c0:	b580      	push	{r7, lr}
 801d0c2:	b084      	sub	sp, #16
 801d0c4:	af00      	add	r7, sp, #0
 801d0c6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d107      	bne.n	801d0de <udp_remove+0x1e>
 801d0ce:	4b19      	ldr	r3, [pc, #100]	; (801d134 <udp_remove+0x74>)
 801d0d0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801d0d4:	4918      	ldr	r1, [pc, #96]	; (801d138 <udp_remove+0x78>)
 801d0d6:	4819      	ldr	r0, [pc, #100]	; (801d13c <udp_remove+0x7c>)
 801d0d8:	f004 fe20 	bl	8021d1c <iprintf>
 801d0dc:	e026      	b.n	801d12c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801d0de:	4b18      	ldr	r3, [pc, #96]	; (801d140 <udp_remove+0x80>)
 801d0e0:	681b      	ldr	r3, [r3, #0]
 801d0e2:	687a      	ldr	r2, [r7, #4]
 801d0e4:	429a      	cmp	r2, r3
 801d0e6:	d105      	bne.n	801d0f4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801d0e8:	4b15      	ldr	r3, [pc, #84]	; (801d140 <udp_remove+0x80>)
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	68db      	ldr	r3, [r3, #12]
 801d0ee:	4a14      	ldr	r2, [pc, #80]	; (801d140 <udp_remove+0x80>)
 801d0f0:	6013      	str	r3, [r2, #0]
 801d0f2:	e017      	b.n	801d124 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801d0f4:	4b12      	ldr	r3, [pc, #72]	; (801d140 <udp_remove+0x80>)
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	60fb      	str	r3, [r7, #12]
 801d0fa:	e010      	b.n	801d11e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801d0fc:	68fb      	ldr	r3, [r7, #12]
 801d0fe:	68db      	ldr	r3, [r3, #12]
 801d100:	2b00      	cmp	r3, #0
 801d102:	d009      	beq.n	801d118 <udp_remove+0x58>
 801d104:	68fb      	ldr	r3, [r7, #12]
 801d106:	68db      	ldr	r3, [r3, #12]
 801d108:	687a      	ldr	r2, [r7, #4]
 801d10a:	429a      	cmp	r2, r3
 801d10c:	d104      	bne.n	801d118 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	68da      	ldr	r2, [r3, #12]
 801d112:	68fb      	ldr	r3, [r7, #12]
 801d114:	60da      	str	r2, [r3, #12]
        break;
 801d116:	e005      	b.n	801d124 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801d118:	68fb      	ldr	r3, [r7, #12]
 801d11a:	68db      	ldr	r3, [r3, #12]
 801d11c:	60fb      	str	r3, [r7, #12]
 801d11e:	68fb      	ldr	r3, [r7, #12]
 801d120:	2b00      	cmp	r3, #0
 801d122:	d1eb      	bne.n	801d0fc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801d124:	6879      	ldr	r1, [r7, #4]
 801d126:	2000      	movs	r0, #0
 801d128:	f7f6 feaa 	bl	8013e80 <memp_free>
}
 801d12c:	3710      	adds	r7, #16
 801d12e:	46bd      	mov	sp, r7
 801d130:	bd80      	pop	{r7, pc}
 801d132:	bf00      	nop
 801d134:	08027a9c 	.word	0x08027a9c
 801d138:	08027e04 	.word	0x08027e04
 801d13c:	08027b0c 	.word	0x08027b0c
 801d140:	2400d268 	.word	0x2400d268

0801d144 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801d144:	b580      	push	{r7, lr}
 801d146:	b082      	sub	sp, #8
 801d148:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801d14a:	2000      	movs	r0, #0
 801d14c:	f7f6 fe22 	bl	8013d94 <memp_malloc>
 801d150:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	2b00      	cmp	r3, #0
 801d156:	d007      	beq.n	801d168 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801d158:	2220      	movs	r2, #32
 801d15a:	2100      	movs	r1, #0
 801d15c:	6878      	ldr	r0, [r7, #4]
 801d15e:	f004 f993 	bl	8021488 <memset>
    pcb->ttl = UDP_TTL;
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	22ff      	movs	r2, #255	; 0xff
 801d166:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801d168:	687b      	ldr	r3, [r7, #4]
}
 801d16a:	4618      	mov	r0, r3
 801d16c:	3708      	adds	r7, #8
 801d16e:	46bd      	mov	sp, r7
 801d170:	bd80      	pop	{r7, pc}

0801d172 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801d172:	b580      	push	{r7, lr}
 801d174:	b084      	sub	sp, #16
 801d176:	af00      	add	r7, sp, #0
 801d178:	4603      	mov	r3, r0
 801d17a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801d17c:	f7ff ffe2 	bl	801d144 <udp_new>
 801d180:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801d182:	68fb      	ldr	r3, [r7, #12]
}
 801d184:	4618      	mov	r0, r3
 801d186:	3710      	adds	r7, #16
 801d188:	46bd      	mov	sp, r7
 801d18a:	bd80      	pop	{r7, pc}

0801d18c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801d18c:	b480      	push	{r7}
 801d18e:	b085      	sub	sp, #20
 801d190:	af00      	add	r7, sp, #0
 801d192:	6078      	str	r0, [r7, #4]
 801d194:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d01e      	beq.n	801d1da <udp_netif_ip_addr_changed+0x4e>
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	d01a      	beq.n	801d1da <udp_netif_ip_addr_changed+0x4e>
 801d1a4:	683b      	ldr	r3, [r7, #0]
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d017      	beq.n	801d1da <udp_netif_ip_addr_changed+0x4e>
 801d1aa:	683b      	ldr	r3, [r7, #0]
 801d1ac:	681b      	ldr	r3, [r3, #0]
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d013      	beq.n	801d1da <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d1b2:	4b0d      	ldr	r3, [pc, #52]	; (801d1e8 <udp_netif_ip_addr_changed+0x5c>)
 801d1b4:	681b      	ldr	r3, [r3, #0]
 801d1b6:	60fb      	str	r3, [r7, #12]
 801d1b8:	e00c      	b.n	801d1d4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801d1ba:	68fb      	ldr	r3, [r7, #12]
 801d1bc:	681a      	ldr	r2, [r3, #0]
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	681b      	ldr	r3, [r3, #0]
 801d1c2:	429a      	cmp	r2, r3
 801d1c4:	d103      	bne.n	801d1ce <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801d1c6:	683b      	ldr	r3, [r7, #0]
 801d1c8:	681a      	ldr	r2, [r3, #0]
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d1ce:	68fb      	ldr	r3, [r7, #12]
 801d1d0:	68db      	ldr	r3, [r3, #12]
 801d1d2:	60fb      	str	r3, [r7, #12]
 801d1d4:	68fb      	ldr	r3, [r7, #12]
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	d1ef      	bne.n	801d1ba <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801d1da:	bf00      	nop
 801d1dc:	3714      	adds	r7, #20
 801d1de:	46bd      	mov	sp, r7
 801d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1e4:	4770      	bx	lr
 801d1e6:	bf00      	nop
 801d1e8:	2400d268 	.word	0x2400d268

0801d1ec <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:



osSemaphoreDef(console_sem);

Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 801d1ec:	b580      	push	{r7, lr}
 801d1ee:	b082      	sub	sp, #8
 801d1f0:	af00      	add	r7, sp, #0
 801d1f2:	6078      	str	r0, [r7, #4]
 801d1f4:	6039      	str	r1, [r7, #0]
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	683a      	ldr	r2, [r7, #0]
 801d1fa:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	683a      	ldr	r2, [r7, #0]
 801d200:	601a      	str	r2, [r3, #0]
	console_semaphore = osSemaphoreCreate(osSemaphore(console_sem), 3);
 801d202:	2103      	movs	r1, #3
 801d204:	4805      	ldr	r0, [pc, #20]	; (801d21c <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x30>)
 801d206:	f7ee fab5 	bl	800b774 <osSemaphoreCreate>
 801d20a:	4602      	mov	r2, r0
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	605a      	str	r2, [r3, #4]
}
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	4618      	mov	r0, r3
 801d214:	3708      	adds	r7, #8
 801d216:	46bd      	mov	sp, r7
 801d218:	bd80      	pop	{r7, pc}
 801d21a:	bf00      	nop
 801d21c:	08028198 	.word	0x08028198

0801d220 <_ZN7Console8transmitEPhm>:

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
 801d220:	b580      	push	{r7, lr}
 801d222:	b084      	sub	sp, #16
 801d224:	af00      	add	r7, sp, #0
 801d226:	60f8      	str	r0, [r7, #12]
 801d228:	60b9      	str	r1, [r7, #8]
 801d22a:	607a      	str	r2, [r7, #4]
	while(HAL_HSEM_IsSemTaken(HARDWARE_SEMAPHORE));
 801d22c:	2002      	movs	r0, #2
 801d22e:	f7e8 fecf 	bl	8005fd0 <HAL_HSEM_IsSemTaken>
 801d232:	4603      	mov	r3, r0
 801d234:	2b00      	cmp	r3, #0
 801d236:	bf14      	ite	ne
 801d238:	2301      	movne	r3, #1
 801d23a:	2300      	moveq	r3, #0
 801d23c:	b2db      	uxtb	r3, r3
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d000      	beq.n	801d244 <_ZN7Console8transmitEPhm+0x24>
 801d242:	e7f3      	b.n	801d22c <_ZN7Console8transmitEPhm+0xc>

	HAL_HSEM_Take(HARDWARE_SEMAPHORE, 2);
 801d244:	2102      	movs	r1, #2
 801d246:	2002      	movs	r0, #2
 801d248:	f7e8 fe86 	bl	8005f58 <HAL_HSEM_Take>
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	6818      	ldr	r0, [r3, #0]
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	b29a      	uxth	r2, r3
 801d254:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801d258:	68b9      	ldr	r1, [r7, #8]
 801d25a:	f7ec fc4d 	bl	8009af8 <HAL_UART_Transmit>
	HAL_HSEM_Release(HARDWARE_SEMAPHORE, 2);
 801d25e:	2102      	movs	r1, #2
 801d260:	2002      	movs	r0, #2
 801d262:	f7e8 fecb 	bl	8005ffc <HAL_HSEM_Release>
}
 801d266:	bf00      	nop
 801d268:	3710      	adds	r7, #16
 801d26a:	46bd      	mov	sp, r7
 801d26c:	bd80      	pop	{r7, pc}

0801d26e <_ZN7Console5printEPKc>:

void Console::print(const char* buffer) {
 801d26e:	b580      	push	{r7, lr}
 801d270:	b082      	sub	sp, #8
 801d272:	af00      	add	r7, sp, #0
 801d274:	6078      	str	r0, [r7, #4]
 801d276:	6039      	str	r1, [r7, #0]
	transmit((uint8_t*) buffer, strlen(buffer));
 801d278:	6838      	ldr	r0, [r7, #0]
 801d27a:	f7e3 f88b 	bl	8000394 <strlen>
 801d27e:	4603      	mov	r3, r0
 801d280:	461a      	mov	r2, r3
 801d282:	6839      	ldr	r1, [r7, #0]
 801d284:	6878      	ldr	r0, [r7, #4]
 801d286:	f7ff ffcb 	bl	801d220 <_ZN7Console8transmitEPhm>
}
 801d28a:	bf00      	nop
 801d28c:	3708      	adds	r7, #8
 801d28e:	46bd      	mov	sp, r7
 801d290:	bd80      	pop	{r7, pc}

0801d292 <_ZN7Console6printfEPKcz>:

void Console::printf(const char *format, ...) {
 801d292:	b40e      	push	{r1, r2, r3}
 801d294:	b580      	push	{r7, lr}
 801d296:	b085      	sub	sp, #20
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 801d29c:	f107 0320 	add.w	r3, r7, #32
 801d2a0:	60fb      	str	r3, [r7, #12]

	if(vsprintf(buffer, format, args) > 0) {
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	3308      	adds	r3, #8
 801d2a6:	68fa      	ldr	r2, [r7, #12]
 801d2a8:	69f9      	ldr	r1, [r7, #28]
 801d2aa:	4618      	mov	r0, r3
 801d2ac:	f004 fe08 	bl	8021ec0 <vsiprintf>
 801d2b0:	4603      	mov	r3, r0
 801d2b2:	2b00      	cmp	r3, #0
 801d2b4:	bfcc      	ite	gt
 801d2b6:	2301      	movgt	r3, #1
 801d2b8:	2300      	movle	r3, #0
 801d2ba:	b2db      	uxtb	r3, r3
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d005      	beq.n	801d2cc <_ZN7Console6printfEPKcz+0x3a>
		print(buffer);
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	3308      	adds	r3, #8
 801d2c4:	4619      	mov	r1, r3
 801d2c6:	6878      	ldr	r0, [r7, #4]
 801d2c8:	f7ff ffd1 	bl	801d26e <_ZN7Console5printEPKc>
	}

	va_end(args);
}
 801d2cc:	bf00      	nop
 801d2ce:	3714      	adds	r7, #20
 801d2d0:	46bd      	mov	sp, r7
 801d2d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d2d6:	b003      	add	sp, #12
 801d2d8:	4770      	bx	lr
	...

0801d2dc <_Z41__static_initialization_and_destruction_0ii>:


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
 801d2dc:	b580      	push	{r7, lr}
 801d2de:	b082      	sub	sp, #8
 801d2e0:	af00      	add	r7, sp, #0
 801d2e2:	6078      	str	r0, [r7, #4]
 801d2e4:	6039      	str	r1, [r7, #0]
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	2b01      	cmp	r3, #1
 801d2ea:	d108      	bne.n	801d2fe <_Z41__static_initialization_and_destruction_0ii+0x22>
 801d2ec:	683b      	ldr	r3, [r7, #0]
 801d2ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d2f2:	4293      	cmp	r3, r2
 801d2f4:	d103      	bne.n	801d2fe <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 801d2f6:	4904      	ldr	r1, [pc, #16]	; (801d308 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 801d2f8:	4804      	ldr	r0, [pc, #16]	; (801d30c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801d2fa:	f7ff ff77 	bl	801d1ec <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Terminal terminal;
 801d2fe:	bf00      	nop
 801d300:	3708      	adds	r7, #8
 801d302:	46bd      	mov	sp, r7
 801d304:	bd80      	pop	{r7, pc}
 801d306:	bf00      	nop
 801d308:	24009b28 	.word	0x24009b28
 801d30c:	240049ac 	.word	0x240049ac

0801d310 <_GLOBAL__sub_I_console>:
 801d310:	b580      	push	{r7, lr}
 801d312:	af00      	add	r7, sp, #0
 801d314:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d318:	2001      	movs	r0, #1
 801d31a:	f7ff ffdf 	bl	801d2dc <_Z41__static_initialization_and_destruction_0ii>
 801d31e:	bd80      	pop	{r7, pc}

0801d320 <_Znwj>:

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
 801d320:	b580      	push	{r7, lr}
 801d322:	b082      	sub	sp, #8
 801d324:	af00      	add	r7, sp, #0
 801d326:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
 801d328:	6878      	ldr	r0, [r7, #4]
 801d32a:	f7ee fbf3 	bl	800bb14 <pvPortMalloc>
 801d32e:	4603      	mov	r3, r0
}
 801d330:	4618      	mov	r0, r3
 801d332:	3708      	adds	r7, #8
 801d334:	46bd      	mov	sp, r7
 801d336:	bd80      	pop	{r7, pc}

0801d338 <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
 801d338:	b580      	push	{r7, lr}
 801d33a:	b082      	sub	sp, #8
 801d33c:	af00      	add	r7, sp, #0
 801d33e:	6078      	str	r0, [r7, #4]
    vPortFree(ptr);
 801d340:	6878      	ldr	r0, [r7, #4]
 801d342:	f7ee fcab 	bl	800bc9c <vPortFree>
}
 801d346:	bf00      	nop
 801d348:	3708      	adds	r7, #8
 801d34a:	46bd      	mov	sp, r7
 801d34c:	bd80      	pop	{r7, pc}

0801d34e <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 801d34e:	b480      	push	{r7}
 801d350:	b083      	sub	sp, #12
 801d352:	af00      	add	r7, sp, #0
 801d354:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	2203      	movs	r2, #3
 801d35a:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 801d35c:	687b      	ldr	r3, [r7, #4]
 801d35e:	2200      	movs	r2, #0
 801d360:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	2203      	movs	r2, #3
 801d366:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	2203      	movs	r2, #3
 801d36c:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	2203      	movs	r2, #3
 801d372:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	2203      	movs	r2, #3
 801d378:	715a      	strb	r2, [r3, #5]
}
 801d37a:	bf00      	nop
 801d37c:	370c      	adds	r7, #12
 801d37e:	46bd      	mov	sp, r7
 801d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d384:	4770      	bx	lr

0801d386 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 801d386:	b580      	push	{r7, lr}
 801d388:	b08a      	sub	sp, #40	; 0x28
 801d38a:	af04      	add	r7, sp, #16
 801d38c:	60f8      	str	r0, [r7, #12]
 801d38e:	460b      	mov	r3, r1
 801d390:	607a      	str	r2, [r7, #4]
 801d392:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d398:	005b      	lsls	r3, r3, #1
 801d39a:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 801d39c:	68fb      	ldr	r3, [r7, #12]
 801d39e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d3a0:	7afb      	ldrb	r3, [r7, #11]
 801d3a2:	b29a      	uxth	r2, r3
 801d3a4:	8af9      	ldrh	r1, [r7, #22]
 801d3a6:	f241 3388 	movw	r3, #5000	; 0x1388
 801d3aa:	9302      	str	r3, [sp, #8]
 801d3ac:	2302      	movs	r3, #2
 801d3ae:	9301      	str	r3, [sp, #4]
 801d3b0:	f107 0314 	add.w	r3, r7, #20
 801d3b4:	9300      	str	r3, [sp, #0]
 801d3b6:	2301      	movs	r3, #1
 801d3b8:	f7e8 ffd8 	bl	800636c <HAL_I2C_Mem_Read>
 801d3bc:	4603      	mov	r3, r0
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d10b      	bne.n	801d3da <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 801d3c2:	7d7b      	ldrb	r3, [r7, #21]
 801d3c4:	021b      	lsls	r3, r3, #8
 801d3c6:	b21a      	sxth	r2, r3
 801d3c8:	7d3b      	ldrb	r3, [r7, #20]
 801d3ca:	b21b      	sxth	r3, r3
 801d3cc:	4313      	orrs	r3, r2
 801d3ce:	b21b      	sxth	r3, r3
 801d3d0:	b29a      	uxth	r2, r3
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	801a      	strh	r2, [r3, #0]
		return true;
 801d3d6:	2301      	movs	r3, #1
 801d3d8:	e000      	b.n	801d3dc <read_register16+0x56>
	} else {
		return false;
 801d3da:	2300      	movs	r3, #0
	}

}
 801d3dc:	4618      	mov	r0, r3
 801d3de:	3718      	adds	r7, #24
 801d3e0:	46bd      	mov	sp, r7
 801d3e2:	bd80      	pop	{r7, pc}

0801d3e4 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 801d3e4:	b590      	push	{r4, r7, lr}
 801d3e6:	b08b      	sub	sp, #44	; 0x2c
 801d3e8:	af04      	add	r7, sp, #16
 801d3ea:	60f8      	str	r0, [r7, #12]
 801d3ec:	607a      	str	r2, [r7, #4]
 801d3ee:	461a      	mov	r2, r3
 801d3f0:	460b      	mov	r3, r1
 801d3f2:	72fb      	strb	r3, [r7, #11]
 801d3f4:	4613      	mov	r3, r2
 801d3f6:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d3fc:	005b      	lsls	r3, r3, #1
 801d3fe:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK) {
 801d400:	68fb      	ldr	r3, [r7, #12]
 801d402:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d404:	7afb      	ldrb	r3, [r7, #11]
 801d406:	b29a      	uxth	r2, r3
 801d408:	7abb      	ldrb	r3, [r7, #10]
 801d40a:	b29b      	uxth	r3, r3
 801d40c:	8af9      	ldrh	r1, [r7, #22]
 801d40e:	f241 3488 	movw	r4, #5000	; 0x1388
 801d412:	9402      	str	r4, [sp, #8]
 801d414:	9301      	str	r3, [sp, #4]
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	9300      	str	r3, [sp, #0]
 801d41a:	2301      	movs	r3, #1
 801d41c:	f7e8 ffa6 	bl	800636c <HAL_I2C_Mem_Read>
 801d420:	4603      	mov	r3, r0
 801d422:	2b00      	cmp	r3, #0
 801d424:	d101      	bne.n	801d42a <read_data+0x46>
		return 0;
 801d426:	2300      	movs	r3, #0
 801d428:	e000      	b.n	801d42c <read_data+0x48>
	} else {
		return 1;
 801d42a:	2301      	movs	r3, #1
	}

}
 801d42c:	4618      	mov	r0, r3
 801d42e:	371c      	adds	r7, #28
 801d430:	46bd      	mov	sp, r7
 801d432:	bd90      	pop	{r4, r7, pc}

0801d434 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 801d434:	b580      	push	{r7, lr}
 801d436:	b082      	sub	sp, #8
 801d438:	af00      	add	r7, sp, #0
 801d43a:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	461a      	mov	r2, r3
 801d440:	2188      	movs	r1, #136	; 0x88
 801d442:	6878      	ldr	r0, [r7, #4]
 801d444:	f7ff ff9f 	bl	801d386 <read_register16>
 801d448:	4603      	mov	r3, r0
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d06f      	beq.n	801d52e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	3302      	adds	r3, #2
 801d452:	461a      	mov	r2, r3
 801d454:	218a      	movs	r1, #138	; 0x8a
 801d456:	6878      	ldr	r0, [r7, #4]
 801d458:	f7ff ff95 	bl	801d386 <read_register16>
 801d45c:	4603      	mov	r3, r0
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d065      	beq.n	801d52e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	3304      	adds	r3, #4
 801d466:	461a      	mov	r2, r3
 801d468:	218c      	movs	r1, #140	; 0x8c
 801d46a:	6878      	ldr	r0, [r7, #4]
 801d46c:	f7ff ff8b 	bl	801d386 <read_register16>
 801d470:	4603      	mov	r3, r0
 801d472:	2b00      	cmp	r3, #0
 801d474:	d05b      	beq.n	801d52e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	3306      	adds	r3, #6
 801d47a:	461a      	mov	r2, r3
 801d47c:	218e      	movs	r1, #142	; 0x8e
 801d47e:	6878      	ldr	r0, [r7, #4]
 801d480:	f7ff ff81 	bl	801d386 <read_register16>
 801d484:	4603      	mov	r3, r0
 801d486:	2b00      	cmp	r3, #0
 801d488:	d051      	beq.n	801d52e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	3308      	adds	r3, #8
 801d48e:	461a      	mov	r2, r3
 801d490:	2190      	movs	r1, #144	; 0x90
 801d492:	6878      	ldr	r0, [r7, #4]
 801d494:	f7ff ff77 	bl	801d386 <read_register16>
 801d498:	4603      	mov	r3, r0
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	d047      	beq.n	801d52e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	330a      	adds	r3, #10
 801d4a2:	461a      	mov	r2, r3
 801d4a4:	2192      	movs	r1, #146	; 0x92
 801d4a6:	6878      	ldr	r0, [r7, #4]
 801d4a8:	f7ff ff6d 	bl	801d386 <read_register16>
 801d4ac:	4603      	mov	r3, r0
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d03d      	beq.n	801d52e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	330c      	adds	r3, #12
 801d4b6:	461a      	mov	r2, r3
 801d4b8:	2194      	movs	r1, #148	; 0x94
 801d4ba:	6878      	ldr	r0, [r7, #4]
 801d4bc:	f7ff ff63 	bl	801d386 <read_register16>
 801d4c0:	4603      	mov	r3, r0
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	d033      	beq.n	801d52e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 801d4c6:	687b      	ldr	r3, [r7, #4]
 801d4c8:	330e      	adds	r3, #14
 801d4ca:	461a      	mov	r2, r3
 801d4cc:	2196      	movs	r1, #150	; 0x96
 801d4ce:	6878      	ldr	r0, [r7, #4]
 801d4d0:	f7ff ff59 	bl	801d386 <read_register16>
 801d4d4:	4603      	mov	r3, r0
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d029      	beq.n	801d52e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 801d4da:	687b      	ldr	r3, [r7, #4]
 801d4dc:	3310      	adds	r3, #16
 801d4de:	461a      	mov	r2, r3
 801d4e0:	2198      	movs	r1, #152	; 0x98
 801d4e2:	6878      	ldr	r0, [r7, #4]
 801d4e4:	f7ff ff4f 	bl	801d386 <read_register16>
 801d4e8:	4603      	mov	r3, r0
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	d01f      	beq.n	801d52e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	3312      	adds	r3, #18
 801d4f2:	461a      	mov	r2, r3
 801d4f4:	219a      	movs	r1, #154	; 0x9a
 801d4f6:	6878      	ldr	r0, [r7, #4]
 801d4f8:	f7ff ff45 	bl	801d386 <read_register16>
 801d4fc:	4603      	mov	r3, r0
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	d015      	beq.n	801d52e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 801d502:	687b      	ldr	r3, [r7, #4]
 801d504:	3314      	adds	r3, #20
 801d506:	461a      	mov	r2, r3
 801d508:	219c      	movs	r1, #156	; 0x9c
 801d50a:	6878      	ldr	r0, [r7, #4]
 801d50c:	f7ff ff3b 	bl	801d386 <read_register16>
 801d510:	4603      	mov	r3, r0
 801d512:	2b00      	cmp	r3, #0
 801d514:	d00b      	beq.n	801d52e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 801d51a:	461a      	mov	r2, r3
 801d51c:	219e      	movs	r1, #158	; 0x9e
 801d51e:	6878      	ldr	r0, [r7, #4]
 801d520:	f7ff ff31 	bl	801d386 <read_register16>
 801d524:	4603      	mov	r3, r0
 801d526:	2b00      	cmp	r3, #0
 801d528:	d001      	beq.n	801d52e <read_calibration_data+0xfa>

		return true;
 801d52a:	2301      	movs	r3, #1
 801d52c:	e000      	b.n	801d530 <read_calibration_data+0xfc>
	}

	return false;
 801d52e:	2300      	movs	r3, #0
}
 801d530:	4618      	mov	r0, r3
 801d532:	3708      	adds	r7, #8
 801d534:	46bd      	mov	sp, r7
 801d536:	bd80      	pop	{r7, pc}

0801d538 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 801d538:	b580      	push	{r7, lr}
 801d53a:	b084      	sub	sp, #16
 801d53c:	af00      	add	r7, sp, #0
 801d53e:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	f103 0218 	add.w	r2, r3, #24
 801d546:	2301      	movs	r3, #1
 801d548:	21a1      	movs	r1, #161	; 0xa1
 801d54a:	6878      	ldr	r0, [r7, #4]
 801d54c:	f7ff ff4a 	bl	801d3e4 <read_data>
 801d550:	4603      	mov	r3, r0
 801d552:	2b00      	cmp	r3, #0
 801d554:	d14b      	bne.n	801d5ee <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	331a      	adds	r3, #26
 801d55a:	461a      	mov	r2, r3
 801d55c:	21e1      	movs	r1, #225	; 0xe1
 801d55e:	6878      	ldr	r0, [r7, #4]
 801d560:	f7ff ff11 	bl	801d386 <read_register16>
 801d564:	4603      	mov	r3, r0
 801d566:	2b00      	cmp	r3, #0
 801d568:	d041      	beq.n	801d5ee <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	f103 021c 	add.w	r2, r3, #28
 801d570:	2301      	movs	r3, #1
 801d572:	21e3      	movs	r1, #227	; 0xe3
 801d574:	6878      	ldr	r0, [r7, #4]
 801d576:	f7ff ff35 	bl	801d3e4 <read_data>
 801d57a:	4603      	mov	r3, r0
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d136      	bne.n	801d5ee <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 801d580:	f107 030e 	add.w	r3, r7, #14
 801d584:	461a      	mov	r2, r3
 801d586:	21e4      	movs	r1, #228	; 0xe4
 801d588:	6878      	ldr	r0, [r7, #4]
 801d58a:	f7ff fefc 	bl	801d386 <read_register16>
 801d58e:	4603      	mov	r3, r0
 801d590:	2b00      	cmp	r3, #0
 801d592:	d02c      	beq.n	801d5ee <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 801d594:	f107 030c 	add.w	r3, r7, #12
 801d598:	461a      	mov	r2, r3
 801d59a:	21e5      	movs	r1, #229	; 0xe5
 801d59c:	6878      	ldr	r0, [r7, #4]
 801d59e:	f7ff fef2 	bl	801d386 <read_register16>
 801d5a2:	4603      	mov	r3, r0
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d022      	beq.n	801d5ee <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	f103 0222 	add.w	r2, r3, #34	; 0x22
 801d5ae:	2301      	movs	r3, #1
 801d5b0:	21e7      	movs	r1, #231	; 0xe7
 801d5b2:	6878      	ldr	r0, [r7, #4]
 801d5b4:	f7ff ff16 	bl	801d3e4 <read_data>
 801d5b8:	4603      	mov	r3, r0
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d117      	bne.n	801d5ee <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 801d5be:	89fb      	ldrh	r3, [r7, #14]
 801d5c0:	011b      	lsls	r3, r3, #4
 801d5c2:	b21b      	sxth	r3, r3
 801d5c4:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 801d5c8:	b21a      	sxth	r2, r3
 801d5ca:	89fb      	ldrh	r3, [r7, #14]
 801d5cc:	121b      	asrs	r3, r3, #8
 801d5ce:	b21b      	sxth	r3, r3
 801d5d0:	f003 030f 	and.w	r3, r3, #15
 801d5d4:	b21b      	sxth	r3, r3
 801d5d6:	4313      	orrs	r3, r2
 801d5d8:	b21a      	sxth	r2, r3
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 801d5de:	89bb      	ldrh	r3, [r7, #12]
 801d5e0:	091b      	lsrs	r3, r3, #4
 801d5e2:	b29b      	uxth	r3, r3
 801d5e4:	b21a      	sxth	r2, r3
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	841a      	strh	r2, [r3, #32]

		return true;
 801d5ea:	2301      	movs	r3, #1
 801d5ec:	e000      	b.n	801d5f0 <read_hum_calibration_data+0xb8>
	}

	return false;
 801d5ee:	2300      	movs	r3, #0
}
 801d5f0:	4618      	mov	r0, r3
 801d5f2:	3710      	adds	r7, #16
 801d5f4:	46bd      	mov	sp, r7
 801d5f6:	bd80      	pop	{r7, pc}

0801d5f8 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 801d5f8:	b580      	push	{r7, lr}
 801d5fa:	b088      	sub	sp, #32
 801d5fc:	af04      	add	r7, sp, #16
 801d5fe:	6078      	str	r0, [r7, #4]
 801d600:	460b      	mov	r3, r1
 801d602:	70fb      	strb	r3, [r7, #3]
 801d604:	4613      	mov	r3, r2
 801d606:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d60c:	005b      	lsls	r3, r3, #1
 801d60e:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 801d610:	687b      	ldr	r3, [r7, #4]
 801d612:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d614:	78fb      	ldrb	r3, [r7, #3]
 801d616:	b29a      	uxth	r2, r3
 801d618:	89f9      	ldrh	r1, [r7, #14]
 801d61a:	f242 7310 	movw	r3, #10000	; 0x2710
 801d61e:	9302      	str	r3, [sp, #8]
 801d620:	2301      	movs	r3, #1
 801d622:	9301      	str	r3, [sp, #4]
 801d624:	1cbb      	adds	r3, r7, #2
 801d626:	9300      	str	r3, [sp, #0]
 801d628:	2301      	movs	r3, #1
 801d62a:	f7e8 fd8b 	bl	8006144 <HAL_I2C_Mem_Write>
 801d62e:	4603      	mov	r3, r0
 801d630:	2b00      	cmp	r3, #0
 801d632:	d101      	bne.n	801d638 <write_register8+0x40>
		return false;
 801d634:	2300      	movs	r3, #0
 801d636:	e000      	b.n	801d63a <write_register8+0x42>
	else
		return true;
 801d638:	2301      	movs	r3, #1
}
 801d63a:	4618      	mov	r0, r3
 801d63c:	3710      	adds	r7, #16
 801d63e:	46bd      	mov	sp, r7
 801d640:	bd80      	pop	{r7, pc}

0801d642 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 801d642:	b580      	push	{r7, lr}
 801d644:	b084      	sub	sp, #16
 801d646:	af00      	add	r7, sp, #0
 801d648:	6078      	str	r0, [r7, #4]
 801d64a:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d650:	2b76      	cmp	r3, #118	; 0x76
 801d652:	d005      	beq.n	801d660 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d658:	2b77      	cmp	r3, #119	; 0x77
 801d65a:	d001      	beq.n	801d660 <bmp280_init+0x1e>

		return false;
 801d65c:	2300      	movs	r3, #0
 801d65e:	e099      	b.n	801d794 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801d666:	2301      	movs	r3, #1
 801d668:	21d0      	movs	r1, #208	; 0xd0
 801d66a:	6878      	ldr	r0, [r7, #4]
 801d66c:	f7ff feba 	bl	801d3e4 <read_data>
 801d670:	4603      	mov	r3, r0
 801d672:	2b00      	cmp	r3, #0
 801d674:	d001      	beq.n	801d67a <bmp280_init+0x38>
		return false;
 801d676:	2300      	movs	r3, #0
 801d678:	e08c      	b.n	801d794 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801d680:	2b58      	cmp	r3, #88	; 0x58
 801d682:	d006      	beq.n	801d692 <bmp280_init+0x50>
 801d684:	687b      	ldr	r3, [r7, #4]
 801d686:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801d68a:	2b60      	cmp	r3, #96	; 0x60
 801d68c:	d001      	beq.n	801d692 <bmp280_init+0x50>

		return false;
 801d68e:	2300      	movs	r3, #0
 801d690:	e080      	b.n	801d794 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 801d692:	22b6      	movs	r2, #182	; 0xb6
 801d694:	21e0      	movs	r1, #224	; 0xe0
 801d696:	6878      	ldr	r0, [r7, #4]
 801d698:	f7ff ffae 	bl	801d5f8 <write_register8>
 801d69c:	4603      	mov	r3, r0
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	d001      	beq.n	801d6a6 <bmp280_init+0x64>
		return false;
 801d6a2:	2300      	movs	r3, #0
 801d6a4:	e076      	b.n	801d794 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 801d6a6:	f107 020c 	add.w	r2, r7, #12
 801d6aa:	2301      	movs	r3, #1
 801d6ac:	21f3      	movs	r1, #243	; 0xf3
 801d6ae:	6878      	ldr	r0, [r7, #4]
 801d6b0:	f7ff fe98 	bl	801d3e4 <read_data>
 801d6b4:	4603      	mov	r3, r0
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d1f5      	bne.n	801d6a6 <bmp280_init+0x64>
				&& (status & 1) == 0)
 801d6ba:	7b3b      	ldrb	r3, [r7, #12]
 801d6bc:	f003 0301 	and.w	r3, r3, #1
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	d1f0      	bne.n	801d6a6 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 801d6c4:	6878      	ldr	r0, [r7, #4]
 801d6c6:	f7ff feb5 	bl	801d434 <read_calibration_data>
 801d6ca:	4603      	mov	r3, r0
 801d6cc:	f083 0301 	eor.w	r3, r3, #1
 801d6d0:	b2db      	uxtb	r3, r3
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	d100      	bne.n	801d6d8 <bmp280_init+0x96>
 801d6d6:	e001      	b.n	801d6dc <bmp280_init+0x9a>
		return false;
 801d6d8:	2300      	movs	r3, #0
 801d6da:	e05b      	b.n	801d794 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801d6e2:	2b60      	cmp	r3, #96	; 0x60
 801d6e4:	d10a      	bne.n	801d6fc <bmp280_init+0xba>
 801d6e6:	6878      	ldr	r0, [r7, #4]
 801d6e8:	f7ff ff26 	bl	801d538 <read_hum_calibration_data>
 801d6ec:	4603      	mov	r3, r0
 801d6ee:	f083 0301 	eor.w	r3, r3, #1
 801d6f2:	b2db      	uxtb	r3, r3
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	d001      	beq.n	801d6fc <bmp280_init+0xba>
		return false;
 801d6f8:	2300      	movs	r3, #0
 801d6fa:	e04b      	b.n	801d794 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 801d6fc:	683b      	ldr	r3, [r7, #0]
 801d6fe:	795b      	ldrb	r3, [r3, #5]
 801d700:	015b      	lsls	r3, r3, #5
 801d702:	b25a      	sxtb	r2, r3
 801d704:	683b      	ldr	r3, [r7, #0]
 801d706:	785b      	ldrb	r3, [r3, #1]
 801d708:	009b      	lsls	r3, r3, #2
 801d70a:	b25b      	sxtb	r3, r3
 801d70c:	4313      	orrs	r3, r2
 801d70e:	b25b      	sxtb	r3, r3
 801d710:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 801d712:	7bfb      	ldrb	r3, [r7, #15]
 801d714:	461a      	mov	r2, r3
 801d716:	21f5      	movs	r1, #245	; 0xf5
 801d718:	6878      	ldr	r0, [r7, #4]
 801d71a:	f7ff ff6d 	bl	801d5f8 <write_register8>
 801d71e:	4603      	mov	r3, r0
 801d720:	2b00      	cmp	r3, #0
 801d722:	d001      	beq.n	801d728 <bmp280_init+0xe6>
		return false;
 801d724:	2300      	movs	r3, #0
 801d726:	e035      	b.n	801d794 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 801d728:	683b      	ldr	r3, [r7, #0]
 801d72a:	781b      	ldrb	r3, [r3, #0]
 801d72c:	2b01      	cmp	r3, #1
 801d72e:	d102      	bne.n	801d736 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 801d730:	683b      	ldr	r3, [r7, #0]
 801d732:	2200      	movs	r2, #0
 801d734:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d736:	683b      	ldr	r3, [r7, #0]
 801d738:	78db      	ldrb	r3, [r3, #3]
 801d73a:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 801d73c:	b25a      	sxtb	r2, r3
 801d73e:	683b      	ldr	r3, [r7, #0]
 801d740:	789b      	ldrb	r3, [r3, #2]
 801d742:	009b      	lsls	r3, r3, #2
 801d744:	b25b      	sxtb	r3, r3
 801d746:	4313      	orrs	r3, r2
 801d748:	b25a      	sxtb	r2, r3
 801d74a:	683b      	ldr	r3, [r7, #0]
 801d74c:	781b      	ldrb	r3, [r3, #0]
 801d74e:	b25b      	sxtb	r3, r3
 801d750:	4313      	orrs	r3, r2
 801d752:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d754:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801d75c:	2b60      	cmp	r3, #96	; 0x60
 801d75e:	d10d      	bne.n	801d77c <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 801d760:	683b      	ldr	r3, [r7, #0]
 801d762:	791b      	ldrb	r3, [r3, #4]
 801d764:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 801d766:	7b7b      	ldrb	r3, [r7, #13]
 801d768:	461a      	mov	r2, r3
 801d76a:	21f2      	movs	r1, #242	; 0xf2
 801d76c:	6878      	ldr	r0, [r7, #4]
 801d76e:	f7ff ff43 	bl	801d5f8 <write_register8>
 801d772:	4603      	mov	r3, r0
 801d774:	2b00      	cmp	r3, #0
 801d776:	d001      	beq.n	801d77c <bmp280_init+0x13a>
			return false;
 801d778:	2300      	movs	r3, #0
 801d77a:	e00b      	b.n	801d794 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 801d77c:	7bbb      	ldrb	r3, [r7, #14]
 801d77e:	461a      	mov	r2, r3
 801d780:	21f4      	movs	r1, #244	; 0xf4
 801d782:	6878      	ldr	r0, [r7, #4]
 801d784:	f7ff ff38 	bl	801d5f8 <write_register8>
 801d788:	4603      	mov	r3, r0
 801d78a:	2b00      	cmp	r3, #0
 801d78c:	d001      	beq.n	801d792 <bmp280_init+0x150>
		return false;
 801d78e:	2300      	movs	r3, #0
 801d790:	e000      	b.n	801d794 <bmp280_init+0x152>
	}

	return true;
 801d792:	2301      	movs	r3, #1
}
 801d794:	4618      	mov	r0, r3
 801d796:	3710      	adds	r7, #16
 801d798:	46bd      	mov	sp, r7
 801d79a:	bd80      	pop	{r7, pc}

0801d79c <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 801d79c:	b480      	push	{r7}
 801d79e:	b087      	sub	sp, #28
 801d7a0:	af00      	add	r7, sp, #0
 801d7a2:	60f8      	str	r0, [r7, #12]
 801d7a4:	60b9      	str	r1, [r7, #8]
 801d7a6:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d7a8:	68bb      	ldr	r3, [r7, #8]
 801d7aa:	10da      	asrs	r2, r3, #3
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	881b      	ldrh	r3, [r3, #0]
 801d7b0:	005b      	lsls	r3, r3, #1
 801d7b2:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 801d7b4:	68fa      	ldr	r2, [r7, #12]
 801d7b6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801d7ba:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d7be:	12db      	asrs	r3, r3, #11
 801d7c0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d7c2:	68bb      	ldr	r3, [r7, #8]
 801d7c4:	111b      	asrs	r3, r3, #4
 801d7c6:	68fa      	ldr	r2, [r7, #12]
 801d7c8:	8812      	ldrh	r2, [r2, #0]
 801d7ca:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 801d7cc:	68ba      	ldr	r2, [r7, #8]
 801d7ce:	1112      	asrs	r2, r2, #4
 801d7d0:	68f9      	ldr	r1, [r7, #12]
 801d7d2:	8809      	ldrh	r1, [r1, #0]
 801d7d4:	1a52      	subs	r2, r2, r1
 801d7d6:	fb02 f303 	mul.w	r3, r2, r3
 801d7da:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 801d7dc:	68fa      	ldr	r2, [r7, #12]
 801d7de:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801d7e2:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d7e6:	139b      	asrs	r3, r3, #14
 801d7e8:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 801d7ea:	697a      	ldr	r2, [r7, #20]
 801d7ec:	693b      	ldr	r3, [r7, #16]
 801d7ee:	441a      	add	r2, r3
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	681a      	ldr	r2, [r3, #0]
 801d7f8:	4613      	mov	r3, r2
 801d7fa:	009b      	lsls	r3, r3, #2
 801d7fc:	4413      	add	r3, r2
 801d7fe:	3380      	adds	r3, #128	; 0x80
 801d800:	121b      	asrs	r3, r3, #8
}
 801d802:	4618      	mov	r0, r3
 801d804:	371c      	adds	r7, #28
 801d806:	46bd      	mov	sp, r7
 801d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d80c:	4770      	bx	lr

0801d80e <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 801d80e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d812:	b09c      	sub	sp, #112	; 0x70
 801d814:	af00      	add	r7, sp, #0
 801d816:	6578      	str	r0, [r7, #84]	; 0x54
 801d818:	6539      	str	r1, [r7, #80]	; 0x50
 801d81a:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 801d81c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d81e:	461a      	mov	r2, r3
 801d820:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d824:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 801d828:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 801d82c:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 801d830:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d834:	fb03 f102 	mul.w	r1, r3, r2
 801d838:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d83a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d83c:	fb03 f302 	mul.w	r3, r3, r2
 801d840:	18ca      	adds	r2, r1, r3
 801d842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d844:	fba3 4503 	umull	r4, r5, r3, r3
 801d848:	1953      	adds	r3, r2, r5
 801d84a:	461d      	mov	r5, r3
 801d84c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d84e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801d852:	b21a      	sxth	r2, r3
 801d854:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d858:	fb02 f005 	mul.w	r0, r2, r5
 801d85c:	fb04 f103 	mul.w	r1, r4, r3
 801d860:	4401      	add	r1, r0
 801d862:	fba4 2302 	umull	r2, r3, r4, r2
 801d866:	4419      	add	r1, r3
 801d868:	460b      	mov	r3, r1
 801d86a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 801d86e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 801d872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d874:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801d878:	b21a      	sxth	r2, r3
 801d87a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d87e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801d880:	fb03 f001 	mul.w	r0, r3, r1
 801d884:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801d886:	fb02 f101 	mul.w	r1, r2, r1
 801d88a:	4408      	add	r0, r1
 801d88c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801d88e:	fba1 2302 	umull	r2, r3, r1, r2
 801d892:	18c1      	adds	r1, r0, r3
 801d894:	460b      	mov	r3, r1
 801d896:	f04f 0000 	mov.w	r0, #0
 801d89a:	f04f 0100 	mov.w	r1, #0
 801d89e:	0459      	lsls	r1, r3, #17
 801d8a0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 801d8a4:	0450      	lsls	r0, r2, #17
 801d8a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801d8aa:	eb12 0800 	adds.w	r8, r2, r0
 801d8ae:	eb43 0901 	adc.w	r9, r3, r1
 801d8b2:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 801d8b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8b8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801d8bc:	b21a      	sxth	r2, r3
 801d8be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d8c2:	f04f 0000 	mov.w	r0, #0
 801d8c6:	f04f 0100 	mov.w	r1, #0
 801d8ca:	00d1      	lsls	r1, r2, #3
 801d8cc:	2000      	movs	r0, #0
 801d8ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801d8d2:	1814      	adds	r4, r2, r0
 801d8d4:	61bc      	str	r4, [r7, #24]
 801d8d6:	414b      	adcs	r3, r1
 801d8d8:	61fb      	str	r3, [r7, #28]
 801d8da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801d8de:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801d8e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d8e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d8e6:	fb03 f102 	mul.w	r1, r3, r2
 801d8ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d8ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d8ee:	fb03 f302 	mul.w	r3, r3, r2
 801d8f2:	18ca      	adds	r2, r1, r3
 801d8f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d8f6:	fba3 4503 	umull	r4, r5, r3, r3
 801d8fa:	1953      	adds	r3, r2, r5
 801d8fc:	461d      	mov	r5, r3
 801d8fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d900:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801d904:	b21a      	sxth	r2, r3
 801d906:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d90a:	fb02 f005 	mul.w	r0, r2, r5
 801d90e:	fb04 f103 	mul.w	r1, r4, r3
 801d912:	4401      	add	r1, r0
 801d914:	fba4 2302 	umull	r2, r3, r4, r2
 801d918:	4419      	add	r1, r3
 801d91a:	460b      	mov	r3, r1
 801d91c:	f04f 0800 	mov.w	r8, #0
 801d920:	f04f 0900 	mov.w	r9, #0
 801d924:	ea4f 2812 	mov.w	r8, r2, lsr #8
 801d928:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 801d92c:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 801d930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d932:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801d936:	b21a      	sxth	r2, r3
 801d938:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d93c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801d93e:	fb03 f001 	mul.w	r0, r3, r1
 801d942:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801d944:	fb02 f101 	mul.w	r1, r2, r1
 801d948:	1844      	adds	r4, r0, r1
 801d94a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801d94c:	fba1 0102 	umull	r0, r1, r1, r2
 801d950:	1863      	adds	r3, r4, r1
 801d952:	4619      	mov	r1, r3
 801d954:	f04f 0200 	mov.w	r2, #0
 801d958:	f04f 0300 	mov.w	r3, #0
 801d95c:	030b      	lsls	r3, r1, #12
 801d95e:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 801d962:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801d964:	eb18 0102 	adds.w	r1, r8, r2
 801d968:	6139      	str	r1, [r7, #16]
 801d96a:	eb49 0303 	adc.w	r3, r9, r3
 801d96e:	617b      	str	r3, [r7, #20]
 801d970:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801d974:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 801d978:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801d97c:	1c11      	adds	r1, r2, #0
 801d97e:	6439      	str	r1, [r7, #64]	; 0x40
 801d980:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 801d984:	647b      	str	r3, [r7, #68]	; 0x44
 801d986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d988:	88db      	ldrh	r3, [r3, #6]
 801d98a:	b29a      	uxth	r2, r3
 801d98c:	f04f 0300 	mov.w	r3, #0
 801d990:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801d994:	4629      	mov	r1, r5
 801d996:	fb02 f001 	mul.w	r0, r2, r1
 801d99a:	4621      	mov	r1, r4
 801d99c:	fb01 f103 	mul.w	r1, r1, r3
 801d9a0:	4401      	add	r1, r0
 801d9a2:	4620      	mov	r0, r4
 801d9a4:	fba0 2302 	umull	r2, r3, r0, r2
 801d9a8:	4419      	add	r1, r3
 801d9aa:	460b      	mov	r3, r1
 801d9ac:	f04f 0000 	mov.w	r0, #0
 801d9b0:	f04f 0100 	mov.w	r1, #0
 801d9b4:	1058      	asrs	r0, r3, #1
 801d9b6:	17d9      	asrs	r1, r3, #31
 801d9b8:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 801d9bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801d9c0:	4313      	orrs	r3, r2
 801d9c2:	d101      	bne.n	801d9c8 <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 801d9c4:	2300      	movs	r3, #0
 801d9c6:	e0e1      	b.n	801db8c <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 801d9c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d9ca:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 801d9ce:	461a      	mov	r2, r3
 801d9d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d9d4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 801d9d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d9da:	105b      	asrs	r3, r3, #1
 801d9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d9de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d9e0:	07db      	lsls	r3, r3, #31
 801d9e2:	63bb      	str	r3, [r7, #56]	; 0x38
 801d9e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801d9e8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 801d9ec:	4621      	mov	r1, r4
 801d9ee:	ebb1 0a02 	subs.w	sl, r1, r2
 801d9f2:	4629      	mov	r1, r5
 801d9f4:	eb61 0b03 	sbc.w	fp, r1, r3
 801d9f8:	4652      	mov	r2, sl
 801d9fa:	465b      	mov	r3, fp
 801d9fc:	1891      	adds	r1, r2, r2
 801d9fe:	60b9      	str	r1, [r7, #8]
 801da00:	415b      	adcs	r3, r3
 801da02:	60fb      	str	r3, [r7, #12]
 801da04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801da08:	eb12 020a 	adds.w	r2, r2, sl
 801da0c:	eb43 030b 	adc.w	r3, r3, fp
 801da10:	f04f 0000 	mov.w	r0, #0
 801da14:	f04f 0100 	mov.w	r1, #0
 801da18:	0199      	lsls	r1, r3, #6
 801da1a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 801da1e:	0190      	lsls	r0, r2, #6
 801da20:	1812      	adds	r2, r2, r0
 801da22:	eb41 0303 	adc.w	r3, r1, r3
 801da26:	f04f 0000 	mov.w	r0, #0
 801da2a:	f04f 0100 	mov.w	r1, #0
 801da2e:	0099      	lsls	r1, r3, #2
 801da30:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801da34:	0090      	lsls	r0, r2, #2
 801da36:	4602      	mov	r2, r0
 801da38:	460b      	mov	r3, r1
 801da3a:	eb12 020a 	adds.w	r2, r2, sl
 801da3e:	eb43 030b 	adc.w	r3, r3, fp
 801da42:	f04f 0000 	mov.w	r0, #0
 801da46:	f04f 0100 	mov.w	r1, #0
 801da4a:	0099      	lsls	r1, r3, #2
 801da4c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801da50:	0090      	lsls	r0, r2, #2
 801da52:	4602      	mov	r2, r0
 801da54:	460b      	mov	r3, r1
 801da56:	eb12 010a 	adds.w	r1, r2, sl
 801da5a:	6339      	str	r1, [r7, #48]	; 0x30
 801da5c:	eb43 030b 	adc.w	r3, r3, fp
 801da60:	637b      	str	r3, [r7, #52]	; 0x34
 801da62:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801da66:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801da6a:	f7e2 fc9b 	bl	80003a4 <__aeabi_ldivmod>
 801da6e:	4602      	mov	r2, r0
 801da70:	460b      	mov	r3, r1
 801da72:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 801da76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801da78:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801da7c:	b218      	sxth	r0, r3
 801da7e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801da82:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801da86:	f04f 0200 	mov.w	r2, #0
 801da8a:	f04f 0300 	mov.w	r3, #0
 801da8e:	0b62      	lsrs	r2, r4, #13
 801da90:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 801da94:	136b      	asrs	r3, r5, #13
 801da96:	fb02 f501 	mul.w	r5, r2, r1
 801da9a:	fb00 f403 	mul.w	r4, r0, r3
 801da9e:	442c      	add	r4, r5
 801daa0:	fba0 0102 	umull	r0, r1, r0, r2
 801daa4:	1863      	adds	r3, r4, r1
 801daa6:	4619      	mov	r1, r3
 801daa8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801daac:	f04f 0200 	mov.w	r2, #0
 801dab0:	f04f 0300 	mov.w	r3, #0
 801dab4:	0b62      	lsrs	r2, r4, #13
 801dab6:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 801daba:	136b      	asrs	r3, r5, #13
 801dabc:	fb02 f501 	mul.w	r5, r2, r1
 801dac0:	fb00 f403 	mul.w	r4, r0, r3
 801dac4:	442c      	add	r4, r5
 801dac6:	fba0 0102 	umull	r0, r1, r0, r2
 801daca:	1863      	adds	r3, r4, r1
 801dacc:	4619      	mov	r1, r3
 801dace:	f04f 0200 	mov.w	r2, #0
 801dad2:	f04f 0300 	mov.w	r3, #0
 801dad6:	0e42      	lsrs	r2, r0, #25
 801dad8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 801dadc:	164b      	asrs	r3, r1, #25
 801dade:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 801dae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dae4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801dae8:	b21a      	sxth	r2, r3
 801daea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801daee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801daf0:	fb03 f001 	mul.w	r0, r3, r1
 801daf4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801daf6:	fb02 f101 	mul.w	r1, r2, r1
 801dafa:	1844      	adds	r4, r0, r1
 801dafc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801dafe:	fba1 0102 	umull	r0, r1, r1, r2
 801db02:	1863      	adds	r3, r4, r1
 801db04:	4619      	mov	r1, r3
 801db06:	f04f 0200 	mov.w	r2, #0
 801db0a:	f04f 0300 	mov.w	r3, #0
 801db0e:	0cc2      	lsrs	r2, r0, #19
 801db10:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 801db14:	14cb      	asrs	r3, r1, #19
 801db16:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 801db1a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801db1e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801db22:	1884      	adds	r4, r0, r2
 801db24:	62bc      	str	r4, [r7, #40]	; 0x28
 801db26:	eb41 0303 	adc.w	r3, r1, r3
 801db2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db2c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801db30:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 801db34:	4621      	mov	r1, r4
 801db36:	1889      	adds	r1, r1, r2
 801db38:	6239      	str	r1, [r7, #32]
 801db3a:	4629      	mov	r1, r5
 801db3c:	eb43 0101 	adc.w	r1, r3, r1
 801db40:	6279      	str	r1, [r7, #36]	; 0x24
 801db42:	f04f 0000 	mov.w	r0, #0
 801db46:	f04f 0100 	mov.w	r1, #0
 801db4a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 801db4e:	4623      	mov	r3, r4
 801db50:	0a18      	lsrs	r0, r3, #8
 801db52:	462b      	mov	r3, r5
 801db54:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801db58:	462b      	mov	r3, r5
 801db5a:	1219      	asrs	r1, r3, #8
 801db5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801db5e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801db62:	b21c      	sxth	r4, r3
 801db64:	ea4f 75e4 	mov.w	r5, r4, asr #31
 801db68:	f04f 0200 	mov.w	r2, #0
 801db6c:	f04f 0300 	mov.w	r3, #0
 801db70:	012b      	lsls	r3, r5, #4
 801db72:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 801db76:	0122      	lsls	r2, r4, #4
 801db78:	1884      	adds	r4, r0, r2
 801db7a:	603c      	str	r4, [r7, #0]
 801db7c:	eb41 0303 	adc.w	r3, r1, r3
 801db80:	607b      	str	r3, [r7, #4]
 801db82:	e9d7 3400 	ldrd	r3, r4, [r7]
 801db86:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 801db8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 801db8c:	4618      	mov	r0, r3
 801db8e:	3770      	adds	r7, #112	; 0x70
 801db90:	46bd      	mov	sp, r7
 801db92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801db96 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 801db96:	b480      	push	{r7}
 801db98:	b087      	sub	sp, #28
 801db9a:	af00      	add	r7, sp, #0
 801db9c:	60f8      	str	r0, [r7, #12]
 801db9e:	60b9      	str	r1, [r7, #8]
 801dba0:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 801dba8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801dbaa:	68bb      	ldr	r3, [r7, #8]
 801dbac:	039a      	lsls	r2, r3, #14
 801dbae:	68fb      	ldr	r3, [r7, #12]
 801dbb0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801dbb4:	051b      	lsls	r3, r3, #20
 801dbb6:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 801dbb8:	68fb      	ldr	r3, [r7, #12]
 801dbba:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801dbbe:	4619      	mov	r1, r3
 801dbc0:	697b      	ldr	r3, [r7, #20]
 801dbc2:	fb03 f301 	mul.w	r3, r3, r1
 801dbc6:	1ad3      	subs	r3, r2, r3
 801dbc8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801dbcc:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 801dbce:	68fa      	ldr	r2, [r7, #12]
 801dbd0:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 801dbd4:	4611      	mov	r1, r2
 801dbd6:	697a      	ldr	r2, [r7, #20]
 801dbd8:	fb02 f201 	mul.w	r2, r2, r1
 801dbdc:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801dbde:	68f9      	ldr	r1, [r7, #12]
 801dbe0:	7f09      	ldrb	r1, [r1, #28]
 801dbe2:	4608      	mov	r0, r1
 801dbe4:	6979      	ldr	r1, [r7, #20]
 801dbe6:	fb01 f100 	mul.w	r1, r1, r0
 801dbea:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801dbec:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801dbf0:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801dbf4:	1292      	asrs	r2, r2, #10
 801dbf6:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 801dbfa:	68f9      	ldr	r1, [r7, #12]
 801dbfc:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 801dc00:	fb01 f202 	mul.w	r2, r1, r2
 801dc04:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 801dc08:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801dc0a:	fb02 f303 	mul.w	r3, r2, r3
 801dc0e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 801dc10:	697b      	ldr	r3, [r7, #20]
 801dc12:	13db      	asrs	r3, r3, #15
 801dc14:	697a      	ldr	r2, [r7, #20]
 801dc16:	13d2      	asrs	r2, r2, #15
 801dc18:	fb02 f303 	mul.w	r3, r2, r3
 801dc1c:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 801dc1e:	68fa      	ldr	r2, [r7, #12]
 801dc20:	7e12      	ldrb	r2, [r2, #24]
 801dc22:	fb02 f303 	mul.w	r3, r2, r3
 801dc26:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 801dc28:	697a      	ldr	r2, [r7, #20]
 801dc2a:	1ad3      	subs	r3, r2, r3
 801dc2c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 801dc2e:	697b      	ldr	r3, [r7, #20]
 801dc30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc34:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 801dc36:	697b      	ldr	r3, [r7, #20]
 801dc38:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 801dc3c:	bfa8      	it	ge
 801dc3e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 801dc42:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 801dc44:	697b      	ldr	r3, [r7, #20]
 801dc46:	131b      	asrs	r3, r3, #12
}
 801dc48:	4618      	mov	r0, r3
 801dc4a:	371c      	adds	r7, #28
 801dc4c:	46bd      	mov	sp, r7
 801dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc52:	4770      	bx	lr

0801dc54 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 801dc54:	b580      	push	{r7, lr}
 801dc56:	b08c      	sub	sp, #48	; 0x30
 801dc58:	af00      	add	r7, sp, #0
 801dc5a:	60f8      	str	r0, [r7, #12]
 801dc5c:	60b9      	str	r1, [r7, #8]
 801dc5e:	607a      	str	r2, [r7, #4]
 801dc60:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 801dc62:	68fb      	ldr	r3, [r7, #12]
 801dc64:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801dc68:	2b60      	cmp	r3, #96	; 0x60
 801dc6a:	d007      	beq.n	801dc7c <bmp280_read_fixed+0x28>
		if (humidity)
 801dc6c:	683b      	ldr	r3, [r7, #0]
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	d002      	beq.n	801dc78 <bmp280_read_fixed+0x24>
			*humidity = 0;
 801dc72:	683b      	ldr	r3, [r7, #0]
 801dc74:	2200      	movs	r2, #0
 801dc76:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 801dc78:	2300      	movs	r3, #0
 801dc7a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 801dc7c:	683b      	ldr	r3, [r7, #0]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d001      	beq.n	801dc86 <bmp280_read_fixed+0x32>
 801dc82:	2308      	movs	r3, #8
 801dc84:	e000      	b.n	801dc88 <bmp280_read_fixed+0x34>
 801dc86:	2306      	movs	r3, #6
 801dc88:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 801dc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc8c:	b2db      	uxtb	r3, r3
 801dc8e:	f107 0218 	add.w	r2, r7, #24
 801dc92:	21f7      	movs	r1, #247	; 0xf7
 801dc94:	68f8      	ldr	r0, [r7, #12]
 801dc96:	f7ff fba5 	bl	801d3e4 <read_data>
 801dc9a:	4603      	mov	r3, r0
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	d001      	beq.n	801dca4 <bmp280_read_fixed+0x50>
		return false;
 801dca0:	2300      	movs	r3, #0
 801dca2:	e038      	b.n	801dd16 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 801dca4:	7e3b      	ldrb	r3, [r7, #24]
 801dca6:	031a      	lsls	r2, r3, #12
 801dca8:	7e7b      	ldrb	r3, [r7, #25]
 801dcaa:	011b      	lsls	r3, r3, #4
 801dcac:	4313      	orrs	r3, r2
 801dcae:	7eba      	ldrb	r2, [r7, #26]
 801dcb0:	0912      	lsrs	r2, r2, #4
 801dcb2:	b2d2      	uxtb	r2, r2
 801dcb4:	4313      	orrs	r3, r2
 801dcb6:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 801dcb8:	7efb      	ldrb	r3, [r7, #27]
 801dcba:	031a      	lsls	r2, r3, #12
 801dcbc:	7f3b      	ldrb	r3, [r7, #28]
 801dcbe:	011b      	lsls	r3, r3, #4
 801dcc0:	4313      	orrs	r3, r2
 801dcc2:	7f7a      	ldrb	r2, [r7, #29]
 801dcc4:	0912      	lsrs	r2, r2, #4
 801dcc6:	b2d2      	uxtb	r2, r2
 801dcc8:	4313      	orrs	r3, r2
 801dcca:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 801dccc:	f107 0314 	add.w	r3, r7, #20
 801dcd0:	461a      	mov	r2, r3
 801dcd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dcd4:	68f8      	ldr	r0, [r7, #12]
 801dcd6:	f7ff fd61 	bl	801d79c <compensate_temperature>
 801dcda:	4602      	mov	r2, r0
 801dcdc:	68bb      	ldr	r3, [r7, #8]
 801dcde:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 801dce0:	697b      	ldr	r3, [r7, #20]
 801dce2:	461a      	mov	r2, r3
 801dce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801dce6:	68f8      	ldr	r0, [r7, #12]
 801dce8:	f7ff fd91 	bl	801d80e <compensate_pressure>
 801dcec:	4602      	mov	r2, r0
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	601a      	str	r2, [r3, #0]

	if (humidity) {
 801dcf2:	683b      	ldr	r3, [r7, #0]
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	d00d      	beq.n	801dd14 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 801dcf8:	7fbb      	ldrb	r3, [r7, #30]
 801dcfa:	021b      	lsls	r3, r3, #8
 801dcfc:	7ffa      	ldrb	r2, [r7, #31]
 801dcfe:	4313      	orrs	r3, r2
 801dd00:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 801dd02:	697b      	ldr	r3, [r7, #20]
 801dd04:	461a      	mov	r2, r3
 801dd06:	6a39      	ldr	r1, [r7, #32]
 801dd08:	68f8      	ldr	r0, [r7, #12]
 801dd0a:	f7ff ff44 	bl	801db96 <compensate_humidity>
 801dd0e:	4602      	mov	r2, r0
 801dd10:	683b      	ldr	r3, [r7, #0]
 801dd12:	601a      	str	r2, [r3, #0]
	}

	return true;
 801dd14:	2301      	movs	r3, #1
}
 801dd16:	4618      	mov	r0, r3
 801dd18:	3730      	adds	r7, #48	; 0x30
 801dd1a:	46bd      	mov	sp, r7
 801dd1c:	bd80      	pop	{r7, pc}
	...

0801dd20 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 801dd20:	b580      	push	{r7, lr}
 801dd22:	b088      	sub	sp, #32
 801dd24:	af00      	add	r7, sp, #0
 801dd26:	60f8      	str	r0, [r7, #12]
 801dd28:	60b9      	str	r1, [r7, #8]
 801dd2a:	607a      	str	r2, [r7, #4]
 801dd2c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 801dd2e:	683b      	ldr	r3, [r7, #0]
 801dd30:	2b00      	cmp	r3, #0
 801dd32:	d002      	beq.n	801dd3a <bmp280_read_float+0x1a>
 801dd34:	f107 0314 	add.w	r3, r7, #20
 801dd38:	e000      	b.n	801dd3c <bmp280_read_float+0x1c>
 801dd3a:	2300      	movs	r3, #0
 801dd3c:	f107 0218 	add.w	r2, r7, #24
 801dd40:	f107 011c 	add.w	r1, r7, #28
 801dd44:	68f8      	ldr	r0, [r7, #12]
 801dd46:	f7ff ff85 	bl	801dc54 <bmp280_read_fixed>
 801dd4a:	4603      	mov	r3, r0
 801dd4c:	2b00      	cmp	r3, #0
 801dd4e:	d028      	beq.n	801dda2 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 801dd50:	69fb      	ldr	r3, [r7, #28]
 801dd52:	ee07 3a90 	vmov	s15, r3
 801dd56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801dd5a:	eddf 6a14 	vldr	s13, [pc, #80]	; 801ddac <bmp280_read_float+0x8c>
 801dd5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801dd62:	68bb      	ldr	r3, [r7, #8]
 801dd64:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 801dd68:	69bb      	ldr	r3, [r7, #24]
 801dd6a:	ee07 3a90 	vmov	s15, r3
 801dd6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801dd72:	eddf 6a0f 	vldr	s13, [pc, #60]	; 801ddb0 <bmp280_read_float+0x90>
 801dd76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 801dd80:	683b      	ldr	r3, [r7, #0]
 801dd82:	2b00      	cmp	r3, #0
 801dd84:	d00b      	beq.n	801dd9e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 801dd86:	697b      	ldr	r3, [r7, #20]
 801dd88:	ee07 3a90 	vmov	s15, r3
 801dd8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801dd90:	eddf 6a08 	vldr	s13, [pc, #32]	; 801ddb4 <bmp280_read_float+0x94>
 801dd94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801dd98:	683b      	ldr	r3, [r7, #0]
 801dd9a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 801dd9e:	2301      	movs	r3, #1
 801dda0:	e000      	b.n	801dda4 <bmp280_read_float+0x84>
	}

	return false;
 801dda2:	2300      	movs	r3, #0
}
 801dda4:	4618      	mov	r0, r3
 801dda6:	3720      	adds	r7, #32
 801dda8:	46bd      	mov	sp, r7
 801ddaa:	bd80      	pop	{r7, pc}
 801ddac:	42c80000 	.word	0x42c80000
 801ddb0:	43800000 	.word	0x43800000
 801ddb4:	44800000 	.word	0x44800000

0801ddb8 <_ZN8IODriverD1Ev>:
#include <functional>


class IODriver {
public:
	virtual ~IODriver() {}
 801ddb8:	b480      	push	{r7}
 801ddba:	b083      	sub	sp, #12
 801ddbc:	af00      	add	r7, sp, #0
 801ddbe:	6078      	str	r0, [r7, #4]
 801ddc0:	4a04      	ldr	r2, [pc, #16]	; (801ddd4 <_ZN8IODriverD1Ev+0x1c>)
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	601a      	str	r2, [r3, #0]
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	4618      	mov	r0, r3
 801ddca:	370c      	adds	r7, #12
 801ddcc:	46bd      	mov	sp, r7
 801ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddd2:	4770      	bx	lr
 801ddd4:	080281d0 	.word	0x080281d0

0801ddd8 <_ZN8IODriverD0Ev>:
 801ddd8:	b580      	push	{r7, lr}
 801ddda:	b082      	sub	sp, #8
 801dddc:	af00      	add	r7, sp, #0
 801ddde:	6078      	str	r0, [r7, #4]
 801dde0:	6878      	ldr	r0, [r7, #4]
 801dde2:	f7ff ffe9 	bl	801ddb8 <_ZN8IODriverD1Ev>
 801dde6:	2104      	movs	r1, #4
 801dde8:	6878      	ldr	r0, [r7, #4]
 801ddea:	f002 fef9 	bl	8020be0 <_ZdlPvj>
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	3708      	adds	r7, #8
 801ddf4:	46bd      	mov	sp, r7
 801ddf6:	bd80      	pop	{r7, pc}

0801ddf8 <_ZN8IODriverC1Ev>:
class IODriver {
 801ddf8:	b480      	push	{r7}
 801ddfa:	b083      	sub	sp, #12
 801ddfc:	af00      	add	r7, sp, #0
 801ddfe:	6078      	str	r0, [r7, #4]
 801de00:	4a04      	ldr	r2, [pc, #16]	; (801de14 <_ZN8IODriverC1Ev+0x1c>)
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	601a      	str	r2, [r3, #0]
 801de06:	687b      	ldr	r3, [r7, #4]
 801de08:	4618      	mov	r0, r3
 801de0a:	370c      	adds	r7, #12
 801de0c:	46bd      	mov	sp, r7
 801de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de12:	4770      	bx	lr
 801de14:	080281d0 	.word	0x080281d0

0801de18 <_ZN16BufferedIODriverC1EPhS0_j>:
#include "Debug/Debug.h"

#ifdef BUILD_WITH_BUFFERED_IO


BufferedIODriver::BufferedIODriver(uint8_t* queueStorage, uint8_t* bufferStorage, size_t length) : bufferStorage(bufferStorage), bufferLength(length) {
 801de18:	b580      	push	{r7, lr}
 801de1a:	b086      	sub	sp, #24
 801de1c:	af02      	add	r7, sp, #8
 801de1e:	60f8      	str	r0, [r7, #12]
 801de20:	60b9      	str	r1, [r7, #8]
 801de22:	607a      	str	r2, [r7, #4]
 801de24:	603b      	str	r3, [r7, #0]
 801de26:	68fb      	ldr	r3, [r7, #12]
 801de28:	4618      	mov	r0, r3
 801de2a:	f7ff ffe5 	bl	801ddf8 <_ZN8IODriverC1Ev>
 801de2e:	4a0d      	ldr	r2, [pc, #52]	; (801de64 <_ZN16BufferedIODriverC1EPhS0_j+0x4c>)
 801de30:	68fb      	ldr	r3, [r7, #12]
 801de32:	601a      	str	r2, [r3, #0]
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	687a      	ldr	r2, [r7, #4]
 801de38:	629a      	str	r2, [r3, #40]	; 0x28
 801de3a:	68fb      	ldr	r3, [r7, #12]
 801de3c:	683a      	ldr	r2, [r7, #0]
 801de3e:	62da      	str	r2, [r3, #44]	; 0x2c
	buffer = xMessageBufferCreateStatic(length, queueStorage, &staticMessageBuffer);
 801de40:	68fb      	ldr	r3, [r7, #12]
 801de42:	3308      	adds	r3, #8
 801de44:	9300      	str	r3, [sp, #0]
 801de46:	68bb      	ldr	r3, [r7, #8]
 801de48:	2201      	movs	r2, #1
 801de4a:	2100      	movs	r1, #0
 801de4c:	6838      	ldr	r0, [r7, #0]
 801de4e:	f7ef fb09 	bl	800d464 <xStreamBufferGenericCreateStatic>
 801de52:	4602      	mov	r2, r0
 801de54:	68fb      	ldr	r3, [r7, #12]
 801de56:	605a      	str	r2, [r3, #4]
}
 801de58:	68fb      	ldr	r3, [r7, #12]
 801de5a:	4618      	mov	r0, r3
 801de5c:	3710      	adds	r7, #16
 801de5e:	46bd      	mov	sp, r7
 801de60:	bd80      	pop	{r7, pc}
 801de62:	bf00      	nop
 801de64:	080281b8 	.word	0x080281b8

0801de68 <_ZN16BufferedIODriver7receiveERKSt8functionIFvhPhmEE>:

void BufferedIODriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 801de68:	b480      	push	{r7}
 801de6a:	b083      	sub	sp, #12
 801de6c:	af00      	add	r7, sp, #0
 801de6e:	6078      	str	r0, [r7, #4]
 801de70:	6039      	str	r1, [r7, #0]
	// Not implemented
}
 801de72:	bf00      	nop
 801de74:	370c      	adds	r7, #12
 801de76:	46bd      	mov	sp, r7
 801de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de7c:	4770      	bx	lr

0801de7e <_ZN16BufferedIODriver8transmitEPhm>:

/*
 * Writes data to a buffer shared between Cortex-M4 and Cortex-M7
 * Any thread can call this function
 */
void BufferedIODriver::transmit(uint8_t* data, uint32_t length) {
 801de7e:	b580      	push	{r7, lr}
 801de80:	b084      	sub	sp, #16
 801de82:	af00      	add	r7, sp, #0
 801de84:	60f8      	str	r0, [r7, #12]
 801de86:	60b9      	str	r1, [r7, #8]
 801de88:	607a      	str	r2, [r7, #4]
	xMessageBufferSend(buffer, data, length, pdMS_TO_TICKS(5));
 801de8a:	68fb      	ldr	r3, [r7, #12]
 801de8c:	6858      	ldr	r0, [r3, #4]
 801de8e:	2305      	movs	r3, #5
 801de90:	687a      	ldr	r2, [r7, #4]
 801de92:	68b9      	ldr	r1, [r7, #8]
 801de94:	f7ef fb9a 	bl	800d5cc <xStreamBufferSend>
}
 801de98:	bf00      	nop
 801de9a:	3710      	adds	r7, #16
 801de9c:	46bd      	mov	sp, r7
 801de9e:	bd80      	pop	{r7, pc}

0801dea0 <_ZN16BufferedIODriver5flushEP8IODriver>:
/*
 * Passes the buffered data to the real IODriver
 * The flush function must be called from the thread designed to transmit the data
 */

void BufferedIODriver::flush(IODriver* driver) {
 801dea0:	b580      	push	{r7, lr}
 801dea2:	b084      	sub	sp, #16
 801dea4:	af00      	add	r7, sp, #0
 801dea6:	6078      	str	r0, [r7, #4]
 801dea8:	6039      	str	r1, [r7, #0]
	size_t size = 0;
 801deaa:	2300      	movs	r3, #0
 801deac:	60fb      	str	r3, [r7, #12]

	do {
		size = xMessageBufferReceive(buffer, bufferStorage, bufferLength, pdMS_TO_TICKS(5));
 801deae:	687b      	ldr	r3, [r7, #4]
 801deb0:	6858      	ldr	r0, [r3, #4]
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801deba:	2305      	movs	r3, #5
 801debc:	f7ef fc78 	bl	800d7b0 <xStreamBufferReceive>
 801dec0:	60f8      	str	r0, [r7, #12]
		driver->transmit(bufferStorage, size);
 801dec2:	683b      	ldr	r3, [r7, #0]
 801dec4:	681b      	ldr	r3, [r3, #0]
 801dec6:	330c      	adds	r3, #12
 801dec8:	681b      	ldr	r3, [r3, #0]
 801deca:	687a      	ldr	r2, [r7, #4]
 801decc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801dece:	68fa      	ldr	r2, [r7, #12]
 801ded0:	6838      	ldr	r0, [r7, #0]
 801ded2:	4798      	blx	r3
	} while(size > 0);
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	d000      	beq.n	801dedc <_ZN16BufferedIODriver5flushEP8IODriver+0x3c>
	do {
 801deda:	e7e8      	b.n	801deae <_ZN16BufferedIODriver5flushEP8IODriver+0xe>
}
 801dedc:	bf00      	nop
 801dede:	3710      	adds	r7, #16
 801dee0:	46bd      	mov	sp, r7
 801dee2:	bd80      	pop	{r7, pc}

0801dee4 <_ZN16BufferedIODriverD1Ev>:
#include <message_buffer.h>
#include <cstdint>
#include <functional>


class BufferedIODriver : public IODriver {
 801dee4:	b580      	push	{r7, lr}
 801dee6:	b082      	sub	sp, #8
 801dee8:	af00      	add	r7, sp, #0
 801deea:	6078      	str	r0, [r7, #4]
 801deec:	4a05      	ldr	r2, [pc, #20]	; (801df04 <_ZN16BufferedIODriverD1Ev+0x20>)
 801deee:	687b      	ldr	r3, [r7, #4]
 801def0:	601a      	str	r2, [r3, #0]
 801def2:	687b      	ldr	r3, [r7, #4]
 801def4:	4618      	mov	r0, r3
 801def6:	f7ff ff5f 	bl	801ddb8 <_ZN8IODriverD1Ev>
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	4618      	mov	r0, r3
 801defe:	3708      	adds	r7, #8
 801df00:	46bd      	mov	sp, r7
 801df02:	bd80      	pop	{r7, pc}
 801df04:	080281b8 	.word	0x080281b8

0801df08 <_ZN16BufferedIODriverD0Ev>:
 801df08:	b580      	push	{r7, lr}
 801df0a:	b082      	sub	sp, #8
 801df0c:	af00      	add	r7, sp, #0
 801df0e:	6078      	str	r0, [r7, #4]
 801df10:	6878      	ldr	r0, [r7, #4]
 801df12:	f7ff ffe7 	bl	801dee4 <_ZN16BufferedIODriverD1Ev>
 801df16:	2130      	movs	r1, #48	; 0x30
 801df18:	6878      	ldr	r0, [r7, #4]
 801df1a:	f002 fe61 	bl	8020be0 <_ZdlPvj>
 801df1e:	687b      	ldr	r3, [r7, #4]
 801df20:	4618      	mov	r0, r3
 801df22:	3708      	adds	r7, #8
 801df24:	46bd      	mov	sp, r7
 801df26:	bd80      	pop	{r7, pc}

0801df28 <_ZN10MessageBusD1Ev>:
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 801df28:	b480      	push	{r7}
 801df2a:	b083      	sub	sp, #12
 801df2c:	af00      	add	r7, sp, #0
 801df2e:	6078      	str	r0, [r7, #4]
 801df30:	4a04      	ldr	r2, [pc, #16]	; (801df44 <_ZN10MessageBusD1Ev+0x1c>)
 801df32:	687b      	ldr	r3, [r7, #4]
 801df34:	601a      	str	r2, [r3, #0]
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	4618      	mov	r0, r3
 801df3a:	370c      	adds	r7, #12
 801df3c:	46bd      	mov	sp, r7
 801df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df42:	4770      	bx	lr
 801df44:	08028234 	.word	0x08028234

0801df48 <_ZN10MessageBusD0Ev>:
 801df48:	b580      	push	{r7, lr}
 801df4a:	b082      	sub	sp, #8
 801df4c:	af00      	add	r7, sp, #0
 801df4e:	6078      	str	r0, [r7, #4]
 801df50:	6878      	ldr	r0, [r7, #4]
 801df52:	f7ff ffe9 	bl	801df28 <_ZN10MessageBusD1Ev>
 801df56:	f644 0104 	movw	r1, #18436	; 0x4804
 801df5a:	6878      	ldr	r0, [r7, #4]
 801df5c:	f002 fe40 	bl	8020be0 <_ZdlPvj>
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	4618      	mov	r0, r3
 801df64:	3708      	adds	r7, #8
 801df66:	46bd      	mov	sp, r7
 801df68:	bd80      	pop	{r7, pc}

0801df6a <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 801df6a:	b480      	push	{r7}
 801df6c:	b083      	sub	sp, #12
 801df6e:	af00      	add	r7, sp, #0
 801df70:	6078      	str	r0, [r7, #4]
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	4618      	mov	r0, r3
 801df76:	370c      	adds	r7, #12
 801df78:	46bd      	mov	sp, r7
 801df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df7e:	4770      	bx	lr

0801df80 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 801df80:	b480      	push	{r7}
 801df82:	b083      	sub	sp, #12
 801df84:	af00      	add	r7, sp, #0
 801df86:	6078      	str	r0, [r7, #4]
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	4618      	mov	r0, r3
 801df8c:	370c      	adds	r7, #12
 801df8e:	46bd      	mov	sp, r7
 801df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df94:	4770      	bx	lr

0801df96 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 801df96:	b480      	push	{r7}
 801df98:	b083      	sub	sp, #12
 801df9a:	af00      	add	r7, sp, #0
 801df9c:	6078      	str	r0, [r7, #4]
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	2200      	movs	r2, #0
 801dfa2:	609a      	str	r2, [r3, #8]
 801dfa4:	687b      	ldr	r3, [r7, #4]
 801dfa6:	4618      	mov	r0, r3
 801dfa8:	370c      	adds	r7, #12
 801dfaa:	46bd      	mov	sp, r7
 801dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfb0:	4770      	bx	lr

0801dfb2 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 801dfb2:	b580      	push	{r7, lr}
 801dfb4:	b082      	sub	sp, #8
 801dfb6:	af00      	add	r7, sp, #0
 801dfb8:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	689b      	ldr	r3, [r3, #8]
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d005      	beq.n	801dfce <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	689b      	ldr	r3, [r3, #8]
 801dfc6:	6878      	ldr	r0, [r7, #4]
 801dfc8:	6879      	ldr	r1, [r7, #4]
 801dfca:	2203      	movs	r2, #3
 801dfcc:	4798      	blx	r3
    }
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	4618      	mov	r0, r3
 801dfd2:	3708      	adds	r7, #8
 801dfd4:	46bd      	mov	sp, r7
 801dfd6:	bd80      	pop	{r7, pc}

0801dfd8 <_ZN10MessageBusC1Ev>:
class MessageBus {
 801dfd8:	b480      	push	{r7}
 801dfda:	b083      	sub	sp, #12
 801dfdc:	af00      	add	r7, sp, #0
 801dfde:	6078      	str	r0, [r7, #4]
 801dfe0:	4a04      	ldr	r2, [pc, #16]	; (801dff4 <_ZN10MessageBusC1Ev+0x1c>)
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	601a      	str	r2, [r3, #0]
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	4618      	mov	r0, r3
 801dfea:	370c      	adds	r7, #12
 801dfec:	46bd      	mov	sp, r7
 801dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dff2:	4770      	bx	lr
 801dff4:	08028234 	.word	0x08028234

0801dff8 <_ZNSt8functionIFvhPhmEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 801dff8:	b580      	push	{r7, lr}
 801dffa:	b082      	sub	sp, #8
 801dffc:	af00      	add	r7, sp, #0
 801dffe:	6078      	str	r0, [r7, #4]
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	4618      	mov	r0, r3
 801e004:	f7ff ffd5 	bl	801dfb2 <_ZNSt14_Function_baseD1Ev>
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	4618      	mov	r0, r3
 801e00c:	3708      	adds	r7, #8
 801e00e:	46bd      	mov	sp, r7
 801e010:	bd80      	pop	{r7, pc}
	...

0801e014 <_ZN5IOBusC1EP8IODriverPhm>:

#include "IOBus.h"

#include <cstring>

IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 801e014:	b590      	push	{r4, r7, lr}
 801e016:	b091      	sub	sp, #68	; 0x44
 801e018:	af02      	add	r7, sp, #8
 801e01a:	60f8      	str	r0, [r7, #12]
 801e01c:	60b9      	str	r1, [r7, #8]
 801e01e:	607a      	str	r2, [r7, #4]
 801e020:	603b      	str	r3, [r7, #0]
 801e022:	68fb      	ldr	r3, [r7, #12]
 801e024:	4618      	mov	r0, r3
 801e026:	f7ff ffd7 	bl	801dfd8 <_ZN10MessageBusC1Ev>
 801e02a:	4a24      	ldr	r2, [pc, #144]	; (801e0bc <_ZN5IOBusC1EP8IODriverPhm+0xa8>)
 801e02c:	68fb      	ldr	r3, [r7, #12]
 801e02e:	601a      	str	r2, [r3, #0]
	this->driver = driver;
 801e030:	68fa      	ldr	r2, [r7, #12]
 801e032:	f644 0304 	movw	r3, #18436	; 0x4804
 801e036:	4413      	add	r3, r2
 801e038:	68ba      	ldr	r2, [r7, #8]
 801e03a:	601a      	str	r2, [r3, #0]
	this->packet_buffer = buffer;
 801e03c:	68fa      	ldr	r2, [r7, #12]
 801e03e:	f644 0308 	movw	r3, #18440	; 0x4808
 801e042:	4413      	add	r3, r2
 801e044:	687a      	ldr	r2, [r7, #4]
 801e046:	601a      	str	r2, [r3, #0]
	this->buffer_length = length;
 801e048:	68fa      	ldr	r2, [r7, #12]
 801e04a:	f644 030c 	movw	r3, #18444	; 0x480c
 801e04e:	4413      	add	r3, r2
 801e050:	683a      	ldr	r2, [r7, #0]
 801e052:	601a      	str	r2, [r3, #0]
	this->buffer_index = 0;
 801e054:	68fa      	ldr	r2, [r7, #12]
 801e056:	f644 0310 	movw	r3, #18448	; 0x4810
 801e05a:	4413      	add	r3, r2
 801e05c:	2200      	movs	r2, #0
 801e05e:	701a      	strb	r2, [r3, #0]

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 801e060:	68bb      	ldr	r3, [r7, #8]
 801e062:	681b      	ldr	r3, [r3, #0]
 801e064:	3308      	adds	r3, #8
 801e066:	681c      	ldr	r4, [r3, #0]
 801e068:	4b15      	ldr	r3, [pc, #84]	; (801e0c0 <_ZN5IOBusC1EP8IODriverPhm+0xac>)
 801e06a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e06c:	2300      	movs	r3, #0
 801e06e:	633b      	str	r3, [r7, #48]	; 0x30
 801e070:	68fb      	ldr	r3, [r7, #12]
 801e072:	637b      	str	r3, [r7, #52]	; 0x34
 801e074:	f107 0020 	add.w	r0, r7, #32
 801e078:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801e07c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801e080:	4b10      	ldr	r3, [pc, #64]	; (801e0c4 <_ZN5IOBusC1EP8IODriverPhm+0xb0>)
 801e082:	9301      	str	r3, [sp, #4]
 801e084:	4b10      	ldr	r3, [pc, #64]	; (801e0c8 <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 801e086:	9300      	str	r3, [sp, #0]
 801e088:	4b10      	ldr	r3, [pc, #64]	; (801e0cc <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
 801e08a:	f000 f8ba 	bl	801e202 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
 801e08e:	f107 0220 	add.w	r2, r7, #32
 801e092:	f107 0310 	add.w	r3, r7, #16
 801e096:	4611      	mov	r1, r2
 801e098:	4618      	mov	r0, r3
 801e09a:	f000 f90d 	bl	801e2b8 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>
 801e09e:	f107 0310 	add.w	r3, r7, #16
 801e0a2:	4619      	mov	r1, r3
 801e0a4:	68b8      	ldr	r0, [r7, #8]
 801e0a6:	47a0      	blx	r4
 801e0a8:	f107 0310 	add.w	r3, r7, #16
 801e0ac:	4618      	mov	r0, r3
 801e0ae:	f7ff ffa3 	bl	801dff8 <_ZNSt8functionIFvhPhmEED1Ev>
}
 801e0b2:	68fb      	ldr	r3, [r7, #12]
 801e0b4:	4618      	mov	r0, r3
 801e0b6:	373c      	adds	r7, #60	; 0x3c
 801e0b8:	46bd      	mov	sp, r7
 801e0ba:	bd90      	pop	{r4, r7, pc}
 801e0bc:	0802821c 	.word	0x0802821c
 801e0c0:	0801e0d1 	.word	0x0801e0d1
 801e0c4:	0802870a 	.word	0x0802870a
 801e0c8:	08028709 	.word	0x08028709
 801e0cc:	08028708 	.word	0x08028708

0801e0d0 <_ZN5IOBus7receiveEhPhm>:

void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 801e0d0:	b580      	push	{r7, lr}
 801e0d2:	b084      	sub	sp, #16
 801e0d4:	af00      	add	r7, sp, #0
 801e0d6:	60f8      	str	r0, [r7, #12]
 801e0d8:	607a      	str	r2, [r7, #4]
 801e0da:	603b      	str	r3, [r7, #0]
 801e0dc:	460b      	mov	r3, r1
 801e0de:	72fb      	strb	r3, [r7, #11]
	while(length > buffer_length) {
 801e0e0:	68fa      	ldr	r2, [r7, #12]
 801e0e2:	f644 030c 	movw	r3, #18444	; 0x480c
 801e0e6:	4413      	add	r3, r2
 801e0e8:	681b      	ldr	r3, [r3, #0]
 801e0ea:	683a      	ldr	r2, [r7, #0]
 801e0ec:	429a      	cmp	r2, r3
 801e0ee:	d91a      	bls.n	801e126 <_ZN5IOBus7receiveEhPhm+0x56>
		MessageBus::receive(sender_id, buffer, buffer_length);
 801e0f0:	68f8      	ldr	r0, [r7, #12]
 801e0f2:	68fa      	ldr	r2, [r7, #12]
 801e0f4:	f644 030c 	movw	r3, #18444	; 0x480c
 801e0f8:	4413      	add	r3, r2
 801e0fa:	681b      	ldr	r3, [r3, #0]
 801e0fc:	7af9      	ldrb	r1, [r7, #11]
 801e0fe:	687a      	ldr	r2, [r7, #4]
 801e100:	f001 ffdc 	bl	80200bc <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 801e104:	68fa      	ldr	r2, [r7, #12]
 801e106:	f644 030c 	movw	r3, #18444	; 0x480c
 801e10a:	4413      	add	r3, r2
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	683a      	ldr	r2, [r7, #0]
 801e110:	1ad3      	subs	r3, r2, r3
 801e112:	603b      	str	r3, [r7, #0]
		buffer += buffer_length;
 801e114:	68fa      	ldr	r2, [r7, #12]
 801e116:	f644 030c 	movw	r3, #18444	; 0x480c
 801e11a:	4413      	add	r3, r2
 801e11c:	681b      	ldr	r3, [r3, #0]
 801e11e:	687a      	ldr	r2, [r7, #4]
 801e120:	4413      	add	r3, r2
 801e122:	607b      	str	r3, [r7, #4]
	while(length > buffer_length) {
 801e124:	e7dc      	b.n	801e0e0 <_ZN5IOBus7receiveEhPhm+0x10>
	}

	MessageBus::receive(sender_id, buffer, length);
 801e126:	68f8      	ldr	r0, [r7, #12]
 801e128:	7af9      	ldrb	r1, [r7, #11]
 801e12a:	683b      	ldr	r3, [r7, #0]
 801e12c:	687a      	ldr	r2, [r7, #4]
 801e12e:	f001 ffc5 	bl	80200bc <_ZN10MessageBus7receiveEhPhm>
}
 801e132:	bf00      	nop
 801e134:	3710      	adds	r7, #16
 801e136:	46bd      	mov	sp, r7
 801e138:	bd80      	pop	{r7, pc}

0801e13a <_ZN5IOBus6appendEPhm>:

uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
 801e13a:	b580      	push	{r7, lr}
 801e13c:	b086      	sub	sp, #24
 801e13e:	af00      	add	r7, sp, #0
 801e140:	60f8      	str	r0, [r7, #12]
 801e142:	60b9      	str	r1, [r7, #8]
 801e144:	607a      	str	r2, [r7, #4]
	uint32_t remaining_length = buffer_length - buffer_index;
 801e146:	68fa      	ldr	r2, [r7, #12]
 801e148:	f644 030c 	movw	r3, #18444	; 0x480c
 801e14c:	4413      	add	r3, r2
 801e14e:	681a      	ldr	r2, [r3, #0]
 801e150:	68f9      	ldr	r1, [r7, #12]
 801e152:	f644 0310 	movw	r3, #18448	; 0x4810
 801e156:	440b      	add	r3, r1
 801e158:	781b      	ldrb	r3, [r3, #0]
 801e15a:	1ad3      	subs	r3, r2, r3
 801e15c:	617b      	str	r3, [r7, #20]

	if(length > remaining_length) {
 801e15e:	687a      	ldr	r2, [r7, #4]
 801e160:	697b      	ldr	r3, [r7, #20]
 801e162:	429a      	cmp	r2, r3
 801e164:	d901      	bls.n	801e16a <_ZN5IOBus6appendEPhm+0x30>
		length = remaining_length;
 801e166:	697b      	ldr	r3, [r7, #20]
 801e168:	607b      	str	r3, [r7, #4]
	}

	memcpy(packet_buffer + buffer_index, buffer, length);
 801e16a:	68fa      	ldr	r2, [r7, #12]
 801e16c:	f644 0308 	movw	r3, #18440	; 0x4808
 801e170:	4413      	add	r3, r2
 801e172:	681a      	ldr	r2, [r3, #0]
 801e174:	68f9      	ldr	r1, [r7, #12]
 801e176:	f644 0310 	movw	r3, #18448	; 0x4810
 801e17a:	440b      	add	r3, r1
 801e17c:	781b      	ldrb	r3, [r3, #0]
 801e17e:	4413      	add	r3, r2
 801e180:	687a      	ldr	r2, [r7, #4]
 801e182:	68b9      	ldr	r1, [r7, #8]
 801e184:	4618      	mov	r0, r3
 801e186:	f003 f957 	bl	8021438 <memcpy>

	buffer_index += length;
 801e18a:	68fa      	ldr	r2, [r7, #12]
 801e18c:	f644 0310 	movw	r3, #18448	; 0x4810
 801e190:	4413      	add	r3, r2
 801e192:	781a      	ldrb	r2, [r3, #0]
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	b2db      	uxtb	r3, r3
 801e198:	4413      	add	r3, r2
 801e19a:	b2d9      	uxtb	r1, r3
 801e19c:	68fa      	ldr	r2, [r7, #12]
 801e19e:	f644 0310 	movw	r3, #18448	; 0x4810
 801e1a2:	4413      	add	r3, r2
 801e1a4:	460a      	mov	r2, r1
 801e1a6:	701a      	strb	r2, [r3, #0]


	return length;
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	b2db      	uxtb	r3, r3
}
 801e1ac:	4618      	mov	r0, r3
 801e1ae:	3718      	adds	r7, #24
 801e1b0:	46bd      	mov	sp, r7
 801e1b2:	bd80      	pop	{r7, pc}

0801e1b4 <_ZN5IOBus8transmitEv>:

void IOBus::transmit() {
 801e1b4:	b590      	push	{r4, r7, lr}
 801e1b6:	b083      	sub	sp, #12
 801e1b8:	af00      	add	r7, sp, #0
 801e1ba:	6078      	str	r0, [r7, #4]
	driver->transmit(packet_buffer, buffer_index);
 801e1bc:	687a      	ldr	r2, [r7, #4]
 801e1be:	f644 0304 	movw	r3, #18436	; 0x4804
 801e1c2:	4413      	add	r3, r2
 801e1c4:	6818      	ldr	r0, [r3, #0]
 801e1c6:	687a      	ldr	r2, [r7, #4]
 801e1c8:	f644 0304 	movw	r3, #18436	; 0x4804
 801e1cc:	4413      	add	r3, r2
 801e1ce:	681b      	ldr	r3, [r3, #0]
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	330c      	adds	r3, #12
 801e1d4:	681c      	ldr	r4, [r3, #0]
 801e1d6:	687a      	ldr	r2, [r7, #4]
 801e1d8:	f644 0308 	movw	r3, #18440	; 0x4808
 801e1dc:	4413      	add	r3, r2
 801e1de:	6819      	ldr	r1, [r3, #0]
 801e1e0:	687a      	ldr	r2, [r7, #4]
 801e1e2:	f644 0310 	movw	r3, #18448	; 0x4810
 801e1e6:	4413      	add	r3, r2
 801e1e8:	781b      	ldrb	r3, [r3, #0]
 801e1ea:	461a      	mov	r2, r3
 801e1ec:	47a0      	blx	r4
	buffer_index = 0;
 801e1ee:	687a      	ldr	r2, [r7, #4]
 801e1f0:	f644 0310 	movw	r3, #18448	; 0x4810
 801e1f4:	4413      	add	r3, r2
 801e1f6:	2200      	movs	r2, #0
 801e1f8:	701a      	strb	r2, [r3, #0]
}
 801e1fa:	bf00      	nop
 801e1fc:	370c      	adds	r7, #12
 801e1fe:	46bd      	mov	sp, r7
 801e200:	bd90      	pop	{r4, r7, pc}

0801e202 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 801e202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e206:	b086      	sub	sp, #24
 801e208:	af02      	add	r7, sp, #8
 801e20a:	60f8      	str	r0, [r7, #12]
 801e20c:	60b9      	str	r1, [r7, #8]
 801e20e:	607a      	str	r2, [r7, #4]
 801e210:	603b      	str	r3, [r7, #0]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 801e212:	68b8      	ldr	r0, [r7, #8]
 801e214:	f000 f878 	bl	801e308 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e218:	4605      	mov	r5, r0
 801e21a:	6878      	ldr	r0, [r7, #4]
 801e21c:	f000 f87f 	bl	801e31e <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801e220:	4606      	mov	r6, r0
 801e222:	6838      	ldr	r0, [r7, #0]
 801e224:	f000 f886 	bl	801e334 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e228:	4680      	mov	r8, r0
 801e22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e22c:	f000 f88d 	bl	801e34a <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e230:	4604      	mov	r4, r0
 801e232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e234:	f000 f894 	bl	801e360 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e238:	4603      	mov	r3, r0
 801e23a:	9301      	str	r3, [sp, #4]
 801e23c:	9400      	str	r4, [sp, #0]
 801e23e:	4643      	mov	r3, r8
 801e240:	4632      	mov	r2, r6
 801e242:	4629      	mov	r1, r5
 801e244:	68f8      	ldr	r0, [r7, #12]
 801e246:	f000 f896 	bl	801e376 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
    }
 801e24a:	68f8      	ldr	r0, [r7, #12]
 801e24c:	3710      	adds	r7, #16
 801e24e:	46bd      	mov	sp, r7
 801e250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e254 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 801e254:	b580      	push	{r7, lr}
 801e256:	b082      	sub	sp, #8
 801e258:	af00      	add	r7, sp, #0
 801e25a:	6078      	str	r0, [r7, #4]
 801e25c:	6039      	str	r1, [r7, #0]
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	683a      	ldr	r2, [r7, #0]
 801e262:	4611      	mov	r1, r2
 801e264:	4618      	mov	r0, r3
 801e266:	f000 f8cd 	bl	801e404 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	4618      	mov	r0, r3
 801e26e:	3708      	adds	r7, #8
 801e270:	46bd      	mov	sp, r7
 801e272:	bd80      	pop	{r7, pc}

0801e274 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
      _Bind(_Bind&& __b)
 801e274:	b590      	push	{r4, r7, lr}
 801e276:	b083      	sub	sp, #12
 801e278:	af00      	add	r7, sp, #0
 801e27a:	6078      	str	r0, [r7, #4]
 801e27c:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 801e27e:	683b      	ldr	r3, [r7, #0]
 801e280:	4618      	mov	r0, r3
 801e282:	f000 f8a9 	bl	801e3d8 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 801e286:	4602      	mov	r2, r0
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e28e:	e883 0003 	stmia.w	r3, {r0, r1}
 801e292:	687b      	ldr	r3, [r7, #4]
 801e294:	f103 0408 	add.w	r4, r3, #8
 801e298:	683b      	ldr	r3, [r7, #0]
 801e29a:	3308      	adds	r3, #8
 801e29c:	4618      	mov	r0, r3
 801e29e:	f000 f8a6 	bl	801e3ee <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>
 801e2a2:	4603      	mov	r3, r0
 801e2a4:	4619      	mov	r1, r3
 801e2a6:	4620      	mov	r0, r4
 801e2a8:	f7ff ffd4 	bl	801e254 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
      { }
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	4618      	mov	r0, r3
 801e2b0:	370c      	adds	r7, #12
 801e2b2:	46bd      	mov	sp, r7
 801e2b4:	bd90      	pop	{r4, r7, pc}
	...

0801e2b8 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 801e2b8:	b590      	push	{r4, r7, lr}
 801e2ba:	b083      	sub	sp, #12
 801e2bc:	af00      	add	r7, sp, #0
 801e2be:	6078      	str	r0, [r7, #4]
 801e2c0:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	4618      	mov	r0, r3
 801e2c6:	f7ff fe66 	bl	801df96 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 801e2ca:	6838      	ldr	r0, [r7, #0]
 801e2cc:	f000 f8bd 	bl	801e44a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
 801e2d0:	4603      	mov	r3, r0
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	d00e      	beq.n	801e2f4 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x3c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 801e2d6:	687c      	ldr	r4, [r7, #4]
 801e2d8:	6838      	ldr	r0, [r7, #0]
 801e2da:	f000 f8c1 	bl	801e460 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 801e2de:	4603      	mov	r3, r0
 801e2e0:	4619      	mov	r1, r3
 801e2e2:	4620      	mov	r0, r4
 801e2e4:	f000 f8c7 	bl	801e476 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>
	    _M_invoker = &_My_handler::_M_invoke;
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	4a05      	ldr	r2, [pc, #20]	; (801e300 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x48>)
 801e2ec:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	4a04      	ldr	r2, [pc, #16]	; (801e304 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x4c>)
 801e2f2:	609a      	str	r2, [r3, #8]
	  }
      }
 801e2f4:	687b      	ldr	r3, [r7, #4]
 801e2f6:	4618      	mov	r0, r3
 801e2f8:	370c      	adds	r7, #12
 801e2fa:	46bd      	mov	sp, r7
 801e2fc:	bd90      	pop	{r4, r7, pc}
 801e2fe:	bf00      	nop
 801e300:	0801e49b 	.word	0x0801e49b
 801e304:	0801e4dd 	.word	0x0801e4dd

0801e308 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e308:	b480      	push	{r7}
 801e30a:	b083      	sub	sp, #12
 801e30c:	af00      	add	r7, sp, #0
 801e30e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	4618      	mov	r0, r3
 801e314:	370c      	adds	r7, #12
 801e316:	46bd      	mov	sp, r7
 801e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e31c:	4770      	bx	lr

0801e31e <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e31e:	b480      	push	{r7}
 801e320:	b083      	sub	sp, #12
 801e322:	af00      	add	r7, sp, #0
 801e324:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	4618      	mov	r0, r3
 801e32a:	370c      	adds	r7, #12
 801e32c:	46bd      	mov	sp, r7
 801e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e332:	4770      	bx	lr

0801e334 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e334:	b480      	push	{r7}
 801e336:	b083      	sub	sp, #12
 801e338:	af00      	add	r7, sp, #0
 801e33a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	4618      	mov	r0, r3
 801e340:	370c      	adds	r7, #12
 801e342:	46bd      	mov	sp, r7
 801e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e348:	4770      	bx	lr

0801e34a <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e34a:	b480      	push	{r7}
 801e34c:	b083      	sub	sp, #12
 801e34e:	af00      	add	r7, sp, #0
 801e350:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	4618      	mov	r0, r3
 801e356:	370c      	adds	r7, #12
 801e358:	46bd      	mov	sp, r7
 801e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e35e:	4770      	bx	lr

0801e360 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e360:	b480      	push	{r7}
 801e362:	b083      	sub	sp, #12
 801e364:	af00      	add	r7, sp, #0
 801e366:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	4618      	mov	r0, r3
 801e36c:	370c      	adds	r7, #12
 801e36e:	46bd      	mov	sp, r7
 801e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e374:	4770      	bx	lr

0801e376 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 801e376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e37a:	b086      	sub	sp, #24
 801e37c:	af02      	add	r7, sp, #8
 801e37e:	60f8      	str	r0, [r7, #12]
 801e380:	60b9      	str	r1, [r7, #8]
 801e382:	607a      	str	r2, [r7, #4]
 801e384:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 801e386:	68b8      	ldr	r0, [r7, #8]
 801e388:	f000 f826 	bl	801e3d8 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 801e38c:	4602      	mov	r2, r0
 801e38e:	68fb      	ldr	r3, [r7, #12]
 801e390:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e394:	e883 0003 	stmia.w	r3, {r0, r1}
 801e398:	68fb      	ldr	r3, [r7, #12]
 801e39a:	f103 0408 	add.w	r4, r3, #8
 801e39e:	6878      	ldr	r0, [r7, #4]
 801e3a0:	f7ff ffbd 	bl	801e31e <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801e3a4:	4605      	mov	r5, r0
 801e3a6:	6838      	ldr	r0, [r7, #0]
 801e3a8:	f7ff ffc4 	bl	801e334 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e3ac:	4606      	mov	r6, r0
 801e3ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e3b0:	f7ff ffcb 	bl	801e34a <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e3b4:	4680      	mov	r8, r0
 801e3b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e3b8:	f7ff ffd2 	bl	801e360 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e3bc:	4603      	mov	r3, r0
 801e3be:	9300      	str	r3, [sp, #0]
 801e3c0:	4643      	mov	r3, r8
 801e3c2:	4632      	mov	r2, r6
 801e3c4:	4629      	mov	r1, r5
 801e3c6:	4620      	mov	r0, r4
 801e3c8:	f000 f8c2 	bl	801e550 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>
	{ }
 801e3cc:	68fb      	ldr	r3, [r7, #12]
 801e3ce:	4618      	mov	r0, r3
 801e3d0:	3710      	adds	r7, #16
 801e3d2:	46bd      	mov	sp, r7
 801e3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e3d8 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 801e3d8:	b480      	push	{r7}
 801e3da:	b083      	sub	sp, #12
 801e3dc:	af00      	add	r7, sp, #0
 801e3de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801e3e0:	687b      	ldr	r3, [r7, #4]
 801e3e2:	4618      	mov	r0, r3
 801e3e4:	370c      	adds	r7, #12
 801e3e6:	46bd      	mov	sp, r7
 801e3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3ec:	4770      	bx	lr

0801e3ee <_ZSt4moveIRSt5tupleIJP5IOBusSt12_PlaceholderILi1EES3_ILi2EES3_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 801e3ee:	b480      	push	{r7}
 801e3f0:	b083      	sub	sp, #12
 801e3f2:	af00      	add	r7, sp, #0
 801e3f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	4618      	mov	r0, r3
 801e3fa:	370c      	adds	r7, #12
 801e3fc:	46bd      	mov	sp, r7
 801e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e402:	4770      	bx	lr

0801e404 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801e404:	b590      	push	{r4, r7, lr}
 801e406:	b083      	sub	sp, #12
 801e408:	af00      	add	r7, sp, #0
 801e40a:	6078      	str	r0, [r7, #4]
 801e40c:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 801e40e:	6838      	ldr	r0, [r7, #0]
 801e410:	f000 f8c4 	bl	801e59c <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>
 801e414:	4603      	mov	r3, r0
 801e416:	4618      	mov	r0, r3
 801e418:	f000 f8cb 	bl	801e5b2 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>
 801e41c:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 801e41e:	4619      	mov	r1, r3
 801e420:	6878      	ldr	r0, [r7, #4]
 801e422:	f000 f8de 	bl	801e5e2 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
 801e426:	687c      	ldr	r4, [r7, #4]
 801e428:	6838      	ldr	r0, [r7, #0]
 801e42a:	f000 f8cd 	bl	801e5c8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 801e42e:	4603      	mov	r3, r0
 801e430:	4618      	mov	r0, r3
 801e432:	f7ff ff74 	bl	801e31e <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801e436:	4603      	mov	r3, r0
 801e438:	4619      	mov	r1, r3
 801e43a:	4620      	mov	r0, r4
 801e43c:	f000 f8f3 	bl	801e626 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	4618      	mov	r0, r3
 801e444:	370c      	adds	r7, #12
 801e446:	46bd      	mov	sp, r7
 801e448:	bd90      	pop	{r4, r7, pc}

0801e44a <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 801e44a:	b480      	push	{r7}
 801e44c:	b083      	sub	sp, #12
 801e44e:	af00      	add	r7, sp, #0
 801e450:	6078      	str	r0, [r7, #4]
	  { return true; }
 801e452:	2301      	movs	r3, #1
 801e454:	4618      	mov	r0, r3
 801e456:	370c      	adds	r7, #12
 801e458:	46bd      	mov	sp, r7
 801e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e45e:	4770      	bx	lr

0801e460 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
 801e460:	b480      	push	{r7}
 801e462:	b083      	sub	sp, #12
 801e464:	af00      	add	r7, sp, #0
 801e466:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	4618      	mov	r0, r3
 801e46c:	370c      	adds	r7, #12
 801e46e:	46bd      	mov	sp, r7
 801e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e474:	4770      	bx	lr

0801e476 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 801e476:	b590      	push	{r4, r7, lr}
 801e478:	b085      	sub	sp, #20
 801e47a:	af00      	add	r7, sp, #0
 801e47c:	6078      	str	r0, [r7, #4]
 801e47e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 801e480:	6838      	ldr	r0, [r7, #0]
 801e482:	f7ff ffed 	bl	801e460 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 801e486:	4603      	mov	r3, r0
 801e488:	4622      	mov	r2, r4
 801e48a:	4619      	mov	r1, r3
 801e48c:	6878      	ldr	r0, [r7, #4]
 801e48e:	f000 f8db 	bl	801e648 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>
 801e492:	bf00      	nop
 801e494:	3714      	adds	r7, #20
 801e496:	46bd      	mov	sp, r7
 801e498:	bd90      	pop	{r4, r7, pc}

0801e49a <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 801e49a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e49c:	b085      	sub	sp, #20
 801e49e:	af00      	add	r7, sp, #0
 801e4a0:	60f8      	str	r0, [r7, #12]
 801e4a2:	60b9      	str	r1, [r7, #8]
 801e4a4:	607a      	str	r2, [r7, #4]
 801e4a6:	603b      	str	r3, [r7, #0]
	(*_Base::_M_get_pointer(__functor))(
 801e4a8:	68f8      	ldr	r0, [r7, #12]
 801e4aa:	f000 f8e9 	bl	801e680 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 801e4ae:	4604      	mov	r4, r0
 801e4b0:	68b8      	ldr	r0, [r7, #8]
 801e4b2:	f000 f8f2 	bl	801e69a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801e4b6:	4605      	mov	r5, r0
 801e4b8:	6878      	ldr	r0, [r7, #4]
 801e4ba:	f000 f8f9 	bl	801e6b0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e4be:	4606      	mov	r6, r0
 801e4c0:	6838      	ldr	r0, [r7, #0]
 801e4c2:	f000 f900 	bl	801e6c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801e4c6:	4603      	mov	r3, r0
 801e4c8:	4632      	mov	r2, r6
 801e4ca:	4629      	mov	r1, r5
 801e4cc:	4620      	mov	r0, r4
 801e4ce:	f000 f905 	bl	801e6dc <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
      }
 801e4d2:	bf00      	nop
 801e4d4:	3714      	adds	r7, #20
 801e4d6:	46bd      	mov	sp, r7
 801e4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801e4dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 801e4dc:	b5b0      	push	{r4, r5, r7, lr}
 801e4de:	b086      	sub	sp, #24
 801e4e0:	af00      	add	r7, sp, #0
 801e4e2:	60f8      	str	r0, [r7, #12]
 801e4e4:	60b9      	str	r1, [r7, #8]
 801e4e6:	4613      	mov	r3, r2
 801e4e8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 801e4ea:	79fb      	ldrb	r3, [r7, #7]
 801e4ec:	2b03      	cmp	r3, #3
 801e4ee:	d827      	bhi.n	801e540 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
 801e4f0:	a201      	add	r2, pc, #4	; (adr r2, 801e4f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
 801e4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e4f6:	bf00      	nop
 801e4f8:	0801e509 	.word	0x0801e509
 801e4fc:	0801e517 	.word	0x0801e517
 801e500:	0801e52b 	.word	0x0801e52b
 801e504:	0801e537 	.word	0x0801e537
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 801e508:	68f8      	ldr	r0, [r7, #12]
 801e50a:	f000 f90a 	bl	801e722 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 801e50e:	4603      	mov	r3, r0
 801e510:	4a0e      	ldr	r2, [pc, #56]	; (801e54c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x70>)
 801e512:	601a      	str	r2, [r3, #0]
	      break;
 801e514:	e014      	b.n	801e540 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 801e516:	68f8      	ldr	r0, [r7, #12]
 801e518:	f000 f90f 	bl	801e73a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 801e51c:	4604      	mov	r4, r0
 801e51e:	68b8      	ldr	r0, [r7, #8]
 801e520:	f000 f8ae 	bl	801e680 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 801e524:	4603      	mov	r3, r0
 801e526:	6023      	str	r3, [r4, #0]
	      break;
 801e528:	e00a      	b.n	801e540 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 801e52a:	462a      	mov	r2, r5
 801e52c:	68b9      	ldr	r1, [r7, #8]
 801e52e:	68f8      	ldr	r0, [r7, #12]
 801e530:	f000 f90f 	bl	801e752 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>
	      break;
 801e534:	e004      	b.n	801e540 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 801e536:	4621      	mov	r1, r4
 801e538:	68f8      	ldr	r0, [r7, #12]
 801e53a:	f000 f928 	bl	801e78e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 801e53e:	bf00      	nop
	  return false;
 801e540:	2300      	movs	r3, #0
	}
 801e542:	4618      	mov	r0, r3
 801e544:	3718      	adds	r7, #24
 801e546:	46bd      	mov	sp, r7
 801e548:	bdb0      	pop	{r4, r5, r7, pc}
 801e54a:	bf00      	nop
 801e54c:	08028244 	.word	0x08028244

0801e550 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 801e550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e554:	b086      	sub	sp, #24
 801e556:	af02      	add	r7, sp, #8
 801e558:	60f8      	str	r0, [r7, #12]
 801e55a:	60b9      	str	r1, [r7, #8]
 801e55c:	607a      	str	r2, [r7, #4]
 801e55e:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 801e560:	68fc      	ldr	r4, [r7, #12]
 801e562:	68b8      	ldr	r0, [r7, #8]
 801e564:	f7ff fedb 	bl	801e31e <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801e568:	4605      	mov	r5, r0
 801e56a:	6878      	ldr	r0, [r7, #4]
 801e56c:	f7ff fee2 	bl	801e334 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e570:	4606      	mov	r6, r0
 801e572:	6838      	ldr	r0, [r7, #0]
 801e574:	f7ff fee9 	bl	801e34a <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e578:	4680      	mov	r8, r0
 801e57a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e57c:	f7ff fef0 	bl	801e360 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e580:	4603      	mov	r3, r0
 801e582:	9300      	str	r3, [sp, #0]
 801e584:	4643      	mov	r3, r8
 801e586:	4632      	mov	r2, r6
 801e588:	4629      	mov	r1, r5
 801e58a:	4620      	mov	r0, r4
 801e58c:	f000 f913 	bl	801e7b6 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
 801e590:	68fb      	ldr	r3, [r7, #12]
 801e592:	4618      	mov	r0, r3
 801e594:	3710      	adds	r7, #16
 801e596:	46bd      	mov	sp, r7
 801e598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e59c <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 801e59c:	b480      	push	{r7}
 801e59e:	b083      	sub	sp, #12
 801e5a0:	af00      	add	r7, sp, #0
 801e5a2:	6078      	str	r0, [r7, #4]
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	4618      	mov	r0, r3
 801e5a8:	370c      	adds	r7, #12
 801e5aa:	46bd      	mov	sp, r7
 801e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5b0:	4770      	bx	lr

0801e5b2 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 801e5b2:	b480      	push	{r7}
 801e5b4:	b083      	sub	sp, #12
 801e5b6:	af00      	add	r7, sp, #0
 801e5b8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801e5ba:	687b      	ldr	r3, [r7, #4]
 801e5bc:	4618      	mov	r0, r3
 801e5be:	370c      	adds	r7, #12
 801e5c0:	46bd      	mov	sp, r7
 801e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5c6:	4770      	bx	lr

0801e5c8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801e5c8:	b580      	push	{r7, lr}
 801e5ca:	b082      	sub	sp, #8
 801e5cc:	af00      	add	r7, sp, #0
 801e5ce:	6078      	str	r0, [r7, #4]
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	4618      	mov	r0, r3
 801e5d4:	f000 f915 	bl	801e802 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
 801e5d8:	4603      	mov	r3, r0
 801e5da:	4618      	mov	r0, r3
 801e5dc:	3708      	adds	r7, #8
 801e5de:	46bd      	mov	sp, r7
 801e5e0:	bd80      	pop	{r7, pc}

0801e5e2 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801e5e2:	b580      	push	{r7, lr}
 801e5e4:	b082      	sub	sp, #8
 801e5e6:	af00      	add	r7, sp, #0
 801e5e8:	6078      	str	r0, [r7, #4]
 801e5ea:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 801e5ec:	6838      	ldr	r0, [r7, #0]
 801e5ee:	f000 f913 	bl	801e818 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>
 801e5f2:	4603      	mov	r3, r0
 801e5f4:	4618      	mov	r0, r3
 801e5f6:	f000 f91a 	bl	801e82e <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>
 801e5fa:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 801e5fc:	4619      	mov	r1, r3
 801e5fe:	6878      	ldr	r0, [r7, #4]
 801e600:	f000 f937 	bl	801e872 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
 801e604:	6838      	ldr	r0, [r7, #0]
 801e606:	f000 f91d 	bl	801e844 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 801e60a:	4603      	mov	r3, r0
 801e60c:	4618      	mov	r0, r3
 801e60e:	f000 f925 	bl	801e85c <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801e612:	4603      	mov	r3, r0
 801e614:	4619      	mov	r1, r3
 801e616:	6878      	ldr	r0, [r7, #4]
 801e618:	f000 f94d 	bl	801e8b6 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	4618      	mov	r0, r3
 801e620:	3708      	adds	r7, #8
 801e622:	46bd      	mov	sp, r7
 801e624:	bd80      	pop	{r7, pc}

0801e626 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801e626:	b580      	push	{r7, lr}
 801e628:	b082      	sub	sp, #8
 801e62a:	af00      	add	r7, sp, #0
 801e62c:	6078      	str	r0, [r7, #4]
 801e62e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801e630:	6838      	ldr	r0, [r7, #0]
 801e632:	f7ff fe74 	bl	801e31e <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801e636:	4603      	mov	r3, r0
 801e638:	681a      	ldr	r2, [r3, #0]
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	601a      	str	r2, [r3, #0]
 801e63e:	687b      	ldr	r3, [r7, #4]
 801e640:	4618      	mov	r0, r3
 801e642:	3708      	adds	r7, #8
 801e644:	46bd      	mov	sp, r7
 801e646:	bd80      	pop	{r7, pc}

0801e648 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 801e648:	b5b0      	push	{r4, r5, r7, lr}
 801e64a:	b084      	sub	sp, #16
 801e64c:	af00      	add	r7, sp, #0
 801e64e:	60f8      	str	r0, [r7, #12]
 801e650:	60b9      	str	r1, [r7, #8]
 801e652:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801e654:	68b8      	ldr	r0, [r7, #8]
 801e656:	f7ff ff03 	bl	801e460 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 801e65a:	4605      	mov	r5, r0
 801e65c:	200c      	movs	r0, #12
 801e65e:	f7fe fe5f 	bl	801d320 <_Znwj>
 801e662:	4603      	mov	r3, r0
 801e664:	461c      	mov	r4, r3
 801e666:	4629      	mov	r1, r5
 801e668:	4620      	mov	r0, r4
 801e66a:	f7ff fe03 	bl	801e274 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
 801e66e:	68f8      	ldr	r0, [r7, #12]
 801e670:	f000 f863 	bl	801e73a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 801e674:	4603      	mov	r3, r0
 801e676:	601c      	str	r4, [r3, #0]
 801e678:	bf00      	nop
 801e67a:	3710      	adds	r7, #16
 801e67c:	46bd      	mov	sp, r7
 801e67e:	bdb0      	pop	{r4, r5, r7, pc}

0801e680 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 801e680:	b580      	push	{r7, lr}
 801e682:	b082      	sub	sp, #8
 801e684:	af00      	add	r7, sp, #0
 801e686:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 801e688:	6878      	ldr	r0, [r7, #4]
 801e68a:	f000 f921 	bl	801e8d0 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 801e68e:	4603      	mov	r3, r0
 801e690:	681b      	ldr	r3, [r3, #0]
	}
 801e692:	4618      	mov	r0, r3
 801e694:	3708      	adds	r7, #8
 801e696:	46bd      	mov	sp, r7
 801e698:	bd80      	pop	{r7, pc}

0801e69a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e69a:	b480      	push	{r7}
 801e69c:	b083      	sub	sp, #12
 801e69e:	af00      	add	r7, sp, #0
 801e6a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	4618      	mov	r0, r3
 801e6a6:	370c      	adds	r7, #12
 801e6a8:	46bd      	mov	sp, r7
 801e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6ae:	4770      	bx	lr

0801e6b0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e6b0:	b480      	push	{r7}
 801e6b2:	b083      	sub	sp, #12
 801e6b4:	af00      	add	r7, sp, #0
 801e6b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	4618      	mov	r0, r3
 801e6bc:	370c      	adds	r7, #12
 801e6be:	46bd      	mov	sp, r7
 801e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6c4:	4770      	bx	lr

0801e6c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e6c6:	b480      	push	{r7}
 801e6c8:	b083      	sub	sp, #12
 801e6ca:	af00      	add	r7, sp, #0
 801e6cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e6ce:	687b      	ldr	r3, [r7, #4]
 801e6d0:	4618      	mov	r0, r3
 801e6d2:	370c      	adds	r7, #12
 801e6d4:	46bd      	mov	sp, r7
 801e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6da:	4770      	bx	lr

0801e6dc <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 801e6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e6de:	b089      	sub	sp, #36	; 0x24
 801e6e0:	af00      	add	r7, sp, #0
 801e6e2:	60f8      	str	r0, [r7, #12]
 801e6e4:	60b9      	str	r1, [r7, #8]
 801e6e6:	607a      	str	r2, [r7, #4]
 801e6e8:	603b      	str	r3, [r7, #0]
	      _Bound_indexes());
 801e6ea:	68b8      	ldr	r0, [r7, #8]
 801e6ec:	f7ff ffd5 	bl	801e69a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801e6f0:	4604      	mov	r4, r0
 801e6f2:	6878      	ldr	r0, [r7, #4]
 801e6f4:	f7ff ffdc 	bl	801e6b0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e6f8:	4605      	mov	r5, r0
 801e6fa:	6838      	ldr	r0, [r7, #0]
 801e6fc:	f7ff ffe3 	bl	801e6c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801e700:	4603      	mov	r3, r0
 801e702:	f107 0010 	add.w	r0, r7, #16
 801e706:	462a      	mov	r2, r5
 801e708:	4621      	mov	r1, r4
 801e70a:	f000 f8ed 	bl	801e8e8 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
 801e70e:	f107 0310 	add.w	r3, r7, #16
 801e712:	4632      	mov	r2, r6
 801e714:	4619      	mov	r1, r3
 801e716:	68f8      	ldr	r0, [r7, #12]
 801e718:	f000 f902 	bl	801e920 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 801e71c:	3724      	adds	r7, #36	; 0x24
 801e71e:	46bd      	mov	sp, r7
 801e720:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e722 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 801e722:	b580      	push	{r7, lr}
 801e724:	b082      	sub	sp, #8
 801e726:	af00      	add	r7, sp, #0
 801e728:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 801e72a:	6878      	ldr	r0, [r7, #4]
 801e72c:	f7ff fc1d 	bl	801df6a <_ZNSt9_Any_data9_M_accessEv>
 801e730:	4603      	mov	r3, r0
 801e732:	4618      	mov	r0, r3
 801e734:	3708      	adds	r7, #8
 801e736:	46bd      	mov	sp, r7
 801e738:	bd80      	pop	{r7, pc}

0801e73a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access()
 801e73a:	b580      	push	{r7, lr}
 801e73c:	b082      	sub	sp, #8
 801e73e:	af00      	add	r7, sp, #0
 801e740:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 801e742:	6878      	ldr	r0, [r7, #4]
 801e744:	f7ff fc11 	bl	801df6a <_ZNSt9_Any_data9_M_accessEv>
 801e748:	4603      	mov	r3, r0
 801e74a:	4618      	mov	r0, r3
 801e74c:	3708      	adds	r7, #8
 801e74e:	46bd      	mov	sp, r7
 801e750:	bd80      	pop	{r7, pc}

0801e752 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 801e752:	b5b0      	push	{r4, r5, r7, lr}
 801e754:	b084      	sub	sp, #16
 801e756:	af00      	add	r7, sp, #0
 801e758:	60f8      	str	r0, [r7, #12]
 801e75a:	60b9      	str	r1, [r7, #8]
 801e75c:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 801e75e:	68b8      	ldr	r0, [r7, #8]
 801e760:	f000 f926 	bl	801e9b0 <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 801e764:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 801e766:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 801e768:	200c      	movs	r0, #12
 801e76a:	f7fe fdd9 	bl	801d320 <_Znwj>
 801e76e:	4603      	mov	r3, r0
 801e770:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 801e772:	4623      	mov	r3, r4
 801e774:	462a      	mov	r2, r5
 801e776:	ca07      	ldmia	r2, {r0, r1, r2}
 801e778:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e77c:	68f8      	ldr	r0, [r7, #12]
 801e77e:	f7ff ffdc 	bl	801e73a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 801e782:	4603      	mov	r3, r0
 801e784:	601c      	str	r4, [r3, #0]
	}
 801e786:	bf00      	nop
 801e788:	3710      	adds	r7, #16
 801e78a:	46bd      	mov	sp, r7
 801e78c:	bdb0      	pop	{r4, r5, r7, pc}

0801e78e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 801e78e:	b580      	push	{r7, lr}
 801e790:	b082      	sub	sp, #8
 801e792:	af00      	add	r7, sp, #0
 801e794:	6078      	str	r0, [r7, #4]
 801e796:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 801e798:	6878      	ldr	r0, [r7, #4]
 801e79a:	f7ff ffce 	bl	801e73a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 801e79e:	4603      	mov	r3, r0
 801e7a0:	681b      	ldr	r3, [r3, #0]
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d003      	beq.n	801e7ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
 801e7a6:	210c      	movs	r1, #12
 801e7a8:	4618      	mov	r0, r3
 801e7aa:	f002 fa19 	bl	8020be0 <_ZdlPvj>
	}
 801e7ae:	bf00      	nop
 801e7b0:	3708      	adds	r7, #8
 801e7b2:	46bd      	mov	sp, r7
 801e7b4:	bd80      	pop	{r7, pc}

0801e7b6 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801e7b6:	b5b0      	push	{r4, r5, r7, lr}
 801e7b8:	b084      	sub	sp, #16
 801e7ba:	af00      	add	r7, sp, #0
 801e7bc:	60f8      	str	r0, [r7, #12]
 801e7be:	60b9      	str	r1, [r7, #8]
 801e7c0:	607a      	str	r2, [r7, #4]
 801e7c2:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 801e7c4:	6878      	ldr	r0, [r7, #4]
 801e7c6:	f7ff fdb5 	bl	801e334 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e7ca:	4604      	mov	r4, r0
 801e7cc:	6838      	ldr	r0, [r7, #0]
 801e7ce:	f7ff fdbc 	bl	801e34a <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e7d2:	4605      	mov	r5, r0
 801e7d4:	6a38      	ldr	r0, [r7, #32]
 801e7d6:	f7ff fdc3 	bl	801e360 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e7da:	4603      	mov	r3, r0
 801e7dc:	462a      	mov	r2, r5
 801e7de:	4621      	mov	r1, r4
 801e7e0:	68f8      	ldr	r0, [r7, #12]
 801e7e2:	f000 f8f1 	bl	801e9c8 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
 801e7e6:	68fc      	ldr	r4, [r7, #12]
 801e7e8:	68b8      	ldr	r0, [r7, #8]
 801e7ea:	f7ff fd98 	bl	801e31e <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801e7ee:	4603      	mov	r3, r0
 801e7f0:	4619      	mov	r1, r3
 801e7f2:	4620      	mov	r0, r4
 801e7f4:	f7ff ff17 	bl	801e626 <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 801e7f8:	68fb      	ldr	r3, [r7, #12]
 801e7fa:	4618      	mov	r0, r3
 801e7fc:	3710      	adds	r7, #16
 801e7fe:	46bd      	mov	sp, r7
 801e800:	bdb0      	pop	{r4, r5, r7, pc}

0801e802 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801e802:	b480      	push	{r7}
 801e804:	b083      	sub	sp, #12
 801e806:	af00      	add	r7, sp, #0
 801e808:	6078      	str	r0, [r7, #4]
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	4618      	mov	r0, r3
 801e80e:	370c      	adds	r7, #12
 801e810:	46bd      	mov	sp, r7
 801e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e816:	4770      	bx	lr

0801e818 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 801e818:	b480      	push	{r7}
 801e81a:	b083      	sub	sp, #12
 801e81c:	af00      	add	r7, sp, #0
 801e81e:	6078      	str	r0, [r7, #4]
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	4618      	mov	r0, r3
 801e824:	370c      	adds	r7, #12
 801e826:	46bd      	mov	sp, r7
 801e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e82c:	4770      	bx	lr

0801e82e <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 801e82e:	b480      	push	{r7}
 801e830:	b083      	sub	sp, #12
 801e832:	af00      	add	r7, sp, #0
 801e834:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801e836:	687b      	ldr	r3, [r7, #4]
 801e838:	4618      	mov	r0, r3
 801e83a:	370c      	adds	r7, #12
 801e83c:	46bd      	mov	sp, r7
 801e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e842:	4770      	bx	lr

0801e844 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801e844:	b580      	push	{r7, lr}
 801e846:	b082      	sub	sp, #8
 801e848:	af00      	add	r7, sp, #0
 801e84a:	6078      	str	r0, [r7, #4]
 801e84c:	6878      	ldr	r0, [r7, #4]
 801e84e:	f000 f8d0 	bl	801e9f2 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 801e852:	4603      	mov	r3, r0
 801e854:	4618      	mov	r0, r3
 801e856:	3708      	adds	r7, #8
 801e858:	46bd      	mov	sp, r7
 801e85a:	bd80      	pop	{r7, pc}

0801e85c <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801e85c:	b480      	push	{r7}
 801e85e:	b083      	sub	sp, #12
 801e860:	af00      	add	r7, sp, #0
 801e862:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	4618      	mov	r0, r3
 801e868:	370c      	adds	r7, #12
 801e86a:	46bd      	mov	sp, r7
 801e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e870:	4770      	bx	lr

0801e872 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801e872:	b580      	push	{r7, lr}
 801e874:	b082      	sub	sp, #8
 801e876:	af00      	add	r7, sp, #0
 801e878:	6078      	str	r0, [r7, #4]
 801e87a:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 801e87c:	6838      	ldr	r0, [r7, #0]
 801e87e:	f000 f8c3 	bl	801ea08 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>
 801e882:	4603      	mov	r3, r0
 801e884:	4618      	mov	r0, r3
 801e886:	f000 f8ca 	bl	801ea1e <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>
 801e88a:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 801e88c:	4619      	mov	r1, r3
 801e88e:	6878      	ldr	r0, [r7, #4]
 801e890:	f000 f8e7 	bl	801ea62 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
 801e894:	6838      	ldr	r0, [r7, #0]
 801e896:	f000 f8cd 	bl	801ea34 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 801e89a:	4603      	mov	r3, r0
 801e89c:	4618      	mov	r0, r3
 801e89e:	f000 f8d5 	bl	801ea4c <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801e8a2:	4603      	mov	r3, r0
 801e8a4:	4619      	mov	r1, r3
 801e8a6:	6878      	ldr	r0, [r7, #4]
 801e8a8:	f000 f8f1 	bl	801ea8e <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
 801e8ac:	687b      	ldr	r3, [r7, #4]
 801e8ae:	4618      	mov	r0, r3
 801e8b0:	3708      	adds	r7, #8
 801e8b2:	46bd      	mov	sp, r7
 801e8b4:	bd80      	pop	{r7, pc}

0801e8b6 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801e8b6:	b580      	push	{r7, lr}
 801e8b8:	b082      	sub	sp, #8
 801e8ba:	af00      	add	r7, sp, #0
 801e8bc:	6078      	str	r0, [r7, #4]
 801e8be:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 801e8c0:	6838      	ldr	r0, [r7, #0]
 801e8c2:	f7ff ffcb 	bl	801e85c <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801e8c6:	687b      	ldr	r3, [r7, #4]
 801e8c8:	4618      	mov	r0, r3
 801e8ca:	3708      	adds	r7, #8
 801e8cc:	46bd      	mov	sp, r7
 801e8ce:	bd80      	pop	{r7, pc}

0801e8d0 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 801e8d0:	b580      	push	{r7, lr}
 801e8d2:	b082      	sub	sp, #8
 801e8d4:	af00      	add	r7, sp, #0
 801e8d6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 801e8d8:	6878      	ldr	r0, [r7, #4]
 801e8da:	f7ff fb51 	bl	801df80 <_ZNKSt9_Any_data9_M_accessEv>
 801e8de:	4603      	mov	r3, r0
 801e8e0:	4618      	mov	r0, r3
 801e8e2:	3708      	adds	r7, #8
 801e8e4:	46bd      	mov	sp, r7
 801e8e6:	bd80      	pop	{r7, pc}

0801e8e8 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 801e8e8:	b5b0      	push	{r4, r5, r7, lr}
 801e8ea:	b084      	sub	sp, #16
 801e8ec:	af00      	add	r7, sp, #0
 801e8ee:	60f8      	str	r0, [r7, #12]
 801e8f0:	60b9      	str	r1, [r7, #8]
 801e8f2:	607a      	str	r2, [r7, #4]
 801e8f4:	603b      	str	r3, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 801e8f6:	68b8      	ldr	r0, [r7, #8]
 801e8f8:	f7ff fecf 	bl	801e69a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801e8fc:	4604      	mov	r4, r0
 801e8fe:	6878      	ldr	r0, [r7, #4]
 801e900:	f7ff fed6 	bl	801e6b0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801e904:	4605      	mov	r5, r0
 801e906:	6838      	ldr	r0, [r7, #0]
 801e908:	f7ff fedd 	bl	801e6c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801e90c:	4603      	mov	r3, r0
 801e90e:	462a      	mov	r2, r5
 801e910:	4621      	mov	r1, r4
 801e912:	68f8      	ldr	r0, [r7, #12]
 801e914:	f000 f8c8 	bl	801eaa8 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>
 801e918:	68f8      	ldr	r0, [r7, #12]
 801e91a:	3710      	adds	r7, #16
 801e91c:	46bd      	mov	sp, r7
 801e91e:	bdb0      	pop	{r4, r5, r7, pc}

0801e920 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 801e920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e924:	b08a      	sub	sp, #40	; 0x28
 801e926:	af02      	add	r7, sp, #8
 801e928:	60f8      	str	r0, [r7, #12]
 801e92a:	60b9      	str	r1, [r7, #8]
 801e92c:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 801e92e:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801e930:	68fb      	ldr	r3, [r7, #12]
 801e932:	3308      	adds	r3, #8
 801e934:	4618      	mov	r0, r3
 801e936:	f000 f8d5 	bl	801eae4 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801e93a:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801e93c:	f107 0310 	add.w	r3, r7, #16
 801e940:	68ba      	ldr	r2, [r7, #8]
 801e942:	4618      	mov	r0, r3
 801e944:	f000 f8db 	bl	801eafe <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
 801e948:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801e94a:	68fb      	ldr	r3, [r7, #12]
 801e94c:	3308      	adds	r3, #8
 801e94e:	4618      	mov	r0, r3
 801e950:	f000 f8e3 	bl	801eb1a <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801e954:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801e956:	f107 0314 	add.w	r3, r7, #20
 801e95a:	68ba      	ldr	r2, [r7, #8]
 801e95c:	4618      	mov	r0, r3
 801e95e:	f000 f8e8 	bl	801eb32 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
 801e962:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801e964:	68fb      	ldr	r3, [r7, #12]
 801e966:	3308      	adds	r3, #8
 801e968:	4618      	mov	r0, r3
 801e96a:	f000 f8f4 	bl	801eb56 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801e96e:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801e970:	f107 0318 	add.w	r3, r7, #24
 801e974:	68ba      	ldr	r2, [r7, #8]
 801e976:	4618      	mov	r0, r3
 801e978:	f000 f8f9 	bl	801eb6e <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
 801e97c:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801e97e:	68fb      	ldr	r3, [r7, #12]
 801e980:	3308      	adds	r3, #8
 801e982:	4618      	mov	r0, r3
 801e984:	f000 f905 	bl	801eb92 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801e988:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801e98a:	f107 031c 	add.w	r3, r7, #28
 801e98e:	68ba      	ldr	r2, [r7, #8]
 801e990:	4618      	mov	r0, r3
 801e992:	f000 f90a 	bl	801ebaa <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
 801e996:	4603      	mov	r3, r0
 801e998:	9300      	str	r3, [sp, #0]
 801e99a:	4643      	mov	r3, r8
 801e99c:	4632      	mov	r2, r6
 801e99e:	4629      	mov	r1, r5
 801e9a0:	4620      	mov	r0, r4
 801e9a2:	f000 f914 	bl	801ebce <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 801e9a6:	bf00      	nop
	}
 801e9a8:	3720      	adds	r7, #32
 801e9aa:	46bd      	mov	sp, r7
 801e9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e9b0 <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 801e9b0:	b580      	push	{r7, lr}
 801e9b2:	b082      	sub	sp, #8
 801e9b4:	af00      	add	r7, sp, #0
 801e9b6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 801e9b8:	6878      	ldr	r0, [r7, #4]
 801e9ba:	f7ff fae1 	bl	801df80 <_ZNKSt9_Any_data9_M_accessEv>
 801e9be:	4603      	mov	r3, r0
 801e9c0:	4618      	mov	r0, r3
 801e9c2:	3708      	adds	r7, #8
 801e9c4:	46bd      	mov	sp, r7
 801e9c6:	bd80      	pop	{r7, pc}

0801e9c8 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 801e9c8:	b580      	push	{r7, lr}
 801e9ca:	b084      	sub	sp, #16
 801e9cc:	af00      	add	r7, sp, #0
 801e9ce:	60f8      	str	r0, [r7, #12]
 801e9d0:	60b9      	str	r1, [r7, #8]
 801e9d2:	607a      	str	r2, [r7, #4]
 801e9d4:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 801e9d6:	683a      	ldr	r2, [r7, #0]
 801e9d8:	6879      	ldr	r1, [r7, #4]
 801e9da:	68f8      	ldr	r0, [r7, #12]
 801e9dc:	f000 f920 	bl	801ec20 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
 801e9e0:	68b9      	ldr	r1, [r7, #8]
 801e9e2:	68f8      	ldr	r0, [r7, #12]
 801e9e4:	f000 f92f 	bl	801ec46 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
 801e9e8:	68fb      	ldr	r3, [r7, #12]
 801e9ea:	4618      	mov	r0, r3
 801e9ec:	3710      	adds	r7, #16
 801e9ee:	46bd      	mov	sp, r7
 801e9f0:	bd80      	pop	{r7, pc}

0801e9f2 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 801e9f2:	b480      	push	{r7}
 801e9f4:	b083      	sub	sp, #12
 801e9f6:	af00      	add	r7, sp, #0
 801e9f8:	6078      	str	r0, [r7, #4]
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	4618      	mov	r0, r3
 801e9fe:	370c      	adds	r7, #12
 801ea00:	46bd      	mov	sp, r7
 801ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea06:	4770      	bx	lr

0801ea08 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 801ea08:	b480      	push	{r7}
 801ea0a:	b083      	sub	sp, #12
 801ea0c:	af00      	add	r7, sp, #0
 801ea0e:	6078      	str	r0, [r7, #4]
 801ea10:	687b      	ldr	r3, [r7, #4]
 801ea12:	4618      	mov	r0, r3
 801ea14:	370c      	adds	r7, #12
 801ea16:	46bd      	mov	sp, r7
 801ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea1c:	4770      	bx	lr

0801ea1e <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 801ea1e:	b480      	push	{r7}
 801ea20:	b083      	sub	sp, #12
 801ea22:	af00      	add	r7, sp, #0
 801ea24:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801ea26:	687b      	ldr	r3, [r7, #4]
 801ea28:	4618      	mov	r0, r3
 801ea2a:	370c      	adds	r7, #12
 801ea2c:	46bd      	mov	sp, r7
 801ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea32:	4770      	bx	lr

0801ea34 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801ea34:	b580      	push	{r7, lr}
 801ea36:	b082      	sub	sp, #8
 801ea38:	af00      	add	r7, sp, #0
 801ea3a:	6078      	str	r0, [r7, #4]
 801ea3c:	6878      	ldr	r0, [r7, #4]
 801ea3e:	f000 f90e 	bl	801ec5e <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 801ea42:	4603      	mov	r3, r0
 801ea44:	4618      	mov	r0, r3
 801ea46:	3708      	adds	r7, #8
 801ea48:	46bd      	mov	sp, r7
 801ea4a:	bd80      	pop	{r7, pc}

0801ea4c <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801ea4c:	b480      	push	{r7}
 801ea4e:	b083      	sub	sp, #12
 801ea50:	af00      	add	r7, sp, #0
 801ea52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	4618      	mov	r0, r3
 801ea58:	370c      	adds	r7, #12
 801ea5a:	46bd      	mov	sp, r7
 801ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea60:	4770      	bx	lr

0801ea62 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801ea62:	b580      	push	{r7, lr}
 801ea64:	b082      	sub	sp, #8
 801ea66:	af00      	add	r7, sp, #0
 801ea68:	6078      	str	r0, [r7, #4]
 801ea6a:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 801ea6c:	6838      	ldr	r0, [r7, #0]
 801ea6e:	f000 f901 	bl	801ec74 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 801ea72:	4603      	mov	r3, r0
 801ea74:	4618      	mov	r0, r3
 801ea76:	f000 f909 	bl	801ec8c <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801ea7a:	4603      	mov	r3, r0
 801ea7c:	4619      	mov	r1, r3
 801ea7e:	6878      	ldr	r0, [r7, #4]
 801ea80:	f000 f90f 	bl	801eca2 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	4618      	mov	r0, r3
 801ea88:	3708      	adds	r7, #8
 801ea8a:	46bd      	mov	sp, r7
 801ea8c:	bd80      	pop	{r7, pc}

0801ea8e <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801ea8e:	b580      	push	{r7, lr}
 801ea90:	b082      	sub	sp, #8
 801ea92:	af00      	add	r7, sp, #0
 801ea94:	6078      	str	r0, [r7, #4]
 801ea96:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 801ea98:	6838      	ldr	r0, [r7, #0]
 801ea9a:	f7ff ffd7 	bl	801ea4c <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	4618      	mov	r0, r3
 801eaa2:	3708      	adds	r7, #8
 801eaa4:	46bd      	mov	sp, r7
 801eaa6:	bd80      	pop	{r7, pc}

0801eaa8 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 801eaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eaaa:	b085      	sub	sp, #20
 801eaac:	af00      	add	r7, sp, #0
 801eaae:	60f8      	str	r0, [r7, #12]
 801eab0:	60b9      	str	r1, [r7, #8]
 801eab2:	607a      	str	r2, [r7, #4]
 801eab4:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 801eab6:	68fc      	ldr	r4, [r7, #12]
 801eab8:	68b8      	ldr	r0, [r7, #8]
 801eaba:	f7ff fdee 	bl	801e69a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801eabe:	4605      	mov	r5, r0
 801eac0:	6878      	ldr	r0, [r7, #4]
 801eac2:	f7ff fdf5 	bl	801e6b0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801eac6:	4606      	mov	r6, r0
 801eac8:	6838      	ldr	r0, [r7, #0]
 801eaca:	f7ff fdfc 	bl	801e6c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801eace:	4603      	mov	r3, r0
 801ead0:	4632      	mov	r2, r6
 801ead2:	4629      	mov	r1, r5
 801ead4:	4620      	mov	r0, r4
 801ead6:	f000 f8f1 	bl	801ecbc <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
 801eada:	68fb      	ldr	r3, [r7, #12]
 801eadc:	4618      	mov	r0, r3
 801eade:	3714      	adds	r7, #20
 801eae0:	46bd      	mov	sp, r7
 801eae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801eae4 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 801eae4:	b580      	push	{r7, lr}
 801eae6:	b082      	sub	sp, #8
 801eae8:	af00      	add	r7, sp, #0
 801eaea:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	4618      	mov	r0, r3
 801eaf0:	f000 f932 	bl	801ed58 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 801eaf4:	4603      	mov	r3, r0
 801eaf6:	4618      	mov	r0, r3
 801eaf8:	3708      	adds	r7, #8
 801eafa:	46bd      	mov	sp, r7
 801eafc:	bd80      	pop	{r7, pc}

0801eafe <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 801eafe:	b580      	push	{r7, lr}
 801eb00:	b084      	sub	sp, #16
 801eb02:	af00      	add	r7, sp, #0
 801eb04:	60f8      	str	r0, [r7, #12]
 801eb06:	60b9      	str	r1, [r7, #8]
 801eb08:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 801eb0a:	68b8      	ldr	r0, [r7, #8]
 801eb0c:	f000 f930 	bl	801ed70 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 801eb10:	4603      	mov	r3, r0
 801eb12:	4618      	mov	r0, r3
 801eb14:	3710      	adds	r7, #16
 801eb16:	46bd      	mov	sp, r7
 801eb18:	bd80      	pop	{r7, pc}

0801eb1a <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 801eb1a:	b580      	push	{r7, lr}
 801eb1c:	b082      	sub	sp, #8
 801eb1e:	af00      	add	r7, sp, #0
 801eb20:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801eb22:	6878      	ldr	r0, [r7, #4]
 801eb24:	f000 f92f 	bl	801ed86 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801eb28:	4603      	mov	r3, r0
 801eb2a:	4618      	mov	r0, r3
 801eb2c:	3708      	adds	r7, #8
 801eb2e:	46bd      	mov	sp, r7
 801eb30:	bd80      	pop	{r7, pc}

0801eb32 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 801eb32:	b580      	push	{r7, lr}
 801eb34:	b084      	sub	sp, #16
 801eb36:	af00      	add	r7, sp, #0
 801eb38:	60f8      	str	r0, [r7, #12]
 801eb3a:	60b9      	str	r1, [r7, #8]
 801eb3c:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 801eb3e:	6878      	ldr	r0, [r7, #4]
 801eb40:	f000 f92d 	bl	801ed9e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 801eb44:	4603      	mov	r3, r0
 801eb46:	4618      	mov	r0, r3
 801eb48:	f000 f934 	bl	801edb4 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 801eb4c:	4603      	mov	r3, r0
	}
 801eb4e:	4618      	mov	r0, r3
 801eb50:	3710      	adds	r7, #16
 801eb52:	46bd      	mov	sp, r7
 801eb54:	bd80      	pop	{r7, pc}

0801eb56 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 801eb56:	b580      	push	{r7, lr}
 801eb58:	b082      	sub	sp, #8
 801eb5a:	af00      	add	r7, sp, #0
 801eb5c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801eb5e:	6878      	ldr	r0, [r7, #4]
 801eb60:	f000 f938 	bl	801edd4 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801eb64:	4603      	mov	r3, r0
 801eb66:	4618      	mov	r0, r3
 801eb68:	3708      	adds	r7, #8
 801eb6a:	46bd      	mov	sp, r7
 801eb6c:	bd80      	pop	{r7, pc}

0801eb6e <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 801eb6e:	b580      	push	{r7, lr}
 801eb70:	b084      	sub	sp, #16
 801eb72:	af00      	add	r7, sp, #0
 801eb74:	60f8      	str	r0, [r7, #12]
 801eb76:	60b9      	str	r1, [r7, #8]
 801eb78:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 801eb7a:	6878      	ldr	r0, [r7, #4]
 801eb7c:	f000 f90f 	bl	801ed9e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 801eb80:	4603      	mov	r3, r0
 801eb82:	4618      	mov	r0, r3
 801eb84:	f000 f932 	bl	801edec <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 801eb88:	4603      	mov	r3, r0
	}
 801eb8a:	4618      	mov	r0, r3
 801eb8c:	3710      	adds	r7, #16
 801eb8e:	46bd      	mov	sp, r7
 801eb90:	bd80      	pop	{r7, pc}

0801eb92 <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 801eb92:	b580      	push	{r7, lr}
 801eb94:	b082      	sub	sp, #8
 801eb96:	af00      	add	r7, sp, #0
 801eb98:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801eb9a:	6878      	ldr	r0, [r7, #4]
 801eb9c:	f000 f936 	bl	801ee0c <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 801eba0:	4603      	mov	r3, r0
 801eba2:	4618      	mov	r0, r3
 801eba4:	3708      	adds	r7, #8
 801eba6:	46bd      	mov	sp, r7
 801eba8:	bd80      	pop	{r7, pc}

0801ebaa <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 801ebaa:	b580      	push	{r7, lr}
 801ebac:	b084      	sub	sp, #16
 801ebae:	af00      	add	r7, sp, #0
 801ebb0:	60f8      	str	r0, [r7, #12]
 801ebb2:	60b9      	str	r1, [r7, #8]
 801ebb4:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 801ebb6:	6878      	ldr	r0, [r7, #4]
 801ebb8:	f000 f8f1 	bl	801ed9e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 801ebbc:	4603      	mov	r3, r0
 801ebbe:	4618      	mov	r0, r3
 801ebc0:	f000 f930 	bl	801ee24 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 801ebc4:	4603      	mov	r3, r0
	}
 801ebc6:	4618      	mov	r0, r3
 801ebc8:	3710      	adds	r7, #16
 801ebca:	46bd      	mov	sp, r7
 801ebcc:	bd80      	pop	{r7, pc}

0801ebce <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 801ebce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ebd2:	b089      	sub	sp, #36	; 0x24
 801ebd4:	af02      	add	r7, sp, #8
 801ebd6:	60f8      	str	r0, [r7, #12]
 801ebd8:	60b9      	str	r1, [r7, #8]
 801ebda:	607a      	str	r2, [r7, #4]
 801ebdc:	603b      	str	r3, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 801ebde:	68f8      	ldr	r0, [r7, #12]
 801ebe0:	f000 f930 	bl	801ee44 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
 801ebe4:	4605      	mov	r5, r0
 801ebe6:	68b8      	ldr	r0, [r7, #8]
 801ebe8:	f000 f8c2 	bl	801ed70 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 801ebec:	4606      	mov	r6, r0
 801ebee:	6878      	ldr	r0, [r7, #4]
 801ebf0:	f7ff fd53 	bl	801e69a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801ebf4:	4680      	mov	r8, r0
 801ebf6:	6838      	ldr	r0, [r7, #0]
 801ebf8:	f7ff fd5a 	bl	801e6b0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801ebfc:	4604      	mov	r4, r0
 801ebfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ec00:	f7ff fd61 	bl	801e6c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801ec04:	4603      	mov	r3, r0
 801ec06:	9301      	str	r3, [sp, #4]
 801ec08:	9400      	str	r4, [sp, #0]
 801ec0a:	4643      	mov	r3, r8
 801ec0c:	4632      	mov	r2, r6
 801ec0e:	4629      	mov	r1, r5
 801ec10:	4648      	mov	r0, r9
 801ec12:	f000 f922 	bl	801ee5a <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 801ec16:	bf00      	nop
    }
 801ec18:	371c      	adds	r7, #28
 801ec1a:	46bd      	mov	sp, r7
 801ec1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801ec20 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 801ec20:	b580      	push	{r7, lr}
 801ec22:	b084      	sub	sp, #16
 801ec24:	af00      	add	r7, sp, #0
 801ec26:	60f8      	str	r0, [r7, #12]
 801ec28:	60b9      	str	r1, [r7, #8]
 801ec2a:	607a      	str	r2, [r7, #4]
      : _Inherited(__tail...), _Base(__head) { }
 801ec2c:	6879      	ldr	r1, [r7, #4]
 801ec2e:	68f8      	ldr	r0, [r7, #12]
 801ec30:	f000 f94d 	bl	801eece <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
 801ec34:	68b9      	ldr	r1, [r7, #8]
 801ec36:	68f8      	ldr	r0, [r7, #12]
 801ec38:	f000 f957 	bl	801eeea <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
 801ec3c:	68fb      	ldr	r3, [r7, #12]
 801ec3e:	4618      	mov	r0, r3
 801ec40:	3710      	adds	r7, #16
 801ec42:	46bd      	mov	sp, r7
 801ec44:	bd80      	pop	{r7, pc}

0801ec46 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 801ec46:	b480      	push	{r7}
 801ec48:	b083      	sub	sp, #12
 801ec4a:	af00      	add	r7, sp, #0
 801ec4c:	6078      	str	r0, [r7, #4]
 801ec4e:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 801ec50:	687b      	ldr	r3, [r7, #4]
 801ec52:	4618      	mov	r0, r3
 801ec54:	370c      	adds	r7, #12
 801ec56:	46bd      	mov	sp, r7
 801ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec5c:	4770      	bx	lr

0801ec5e <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 801ec5e:	b480      	push	{r7}
 801ec60:	b083      	sub	sp, #12
 801ec62:	af00      	add	r7, sp, #0
 801ec64:	6078      	str	r0, [r7, #4]
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	4618      	mov	r0, r3
 801ec6a:	370c      	adds	r7, #12
 801ec6c:	46bd      	mov	sp, r7
 801ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec72:	4770      	bx	lr

0801ec74 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801ec74:	b580      	push	{r7, lr}
 801ec76:	b082      	sub	sp, #8
 801ec78:	af00      	add	r7, sp, #0
 801ec7a:	6078      	str	r0, [r7, #4]
 801ec7c:	6878      	ldr	r0, [r7, #4]
 801ec7e:	f000 f940 	bl	801ef02 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 801ec82:	4603      	mov	r3, r0
 801ec84:	4618      	mov	r0, r3
 801ec86:	3708      	adds	r7, #8
 801ec88:	46bd      	mov	sp, r7
 801ec8a:	bd80      	pop	{r7, pc}

0801ec8c <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801ec8c:	b480      	push	{r7}
 801ec8e:	b083      	sub	sp, #12
 801ec90:	af00      	add	r7, sp, #0
 801ec92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801ec94:	687b      	ldr	r3, [r7, #4]
 801ec96:	4618      	mov	r0, r3
 801ec98:	370c      	adds	r7, #12
 801ec9a:	46bd      	mov	sp, r7
 801ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eca0:	4770      	bx	lr

0801eca2 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801eca2:	b580      	push	{r7, lr}
 801eca4:	b082      	sub	sp, #8
 801eca6:	af00      	add	r7, sp, #0
 801eca8:	6078      	str	r0, [r7, #4]
 801ecaa:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 801ecac:	6838      	ldr	r0, [r7, #0]
 801ecae:	f7ff ffed 	bl	801ec8c <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	4618      	mov	r0, r3
 801ecb6:	3708      	adds	r7, #8
 801ecb8:	46bd      	mov	sp, r7
 801ecba:	bd80      	pop	{r7, pc}

0801ecbc <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801ecbc:	b5b0      	push	{r4, r5, r7, lr}
 801ecbe:	b084      	sub	sp, #16
 801ecc0:	af00      	add	r7, sp, #0
 801ecc2:	60f8      	str	r0, [r7, #12]
 801ecc4:	60b9      	str	r1, [r7, #8]
 801ecc6:	607a      	str	r2, [r7, #4]
 801ecc8:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 801ecca:	68fc      	ldr	r4, [r7, #12]
 801eccc:	6878      	ldr	r0, [r7, #4]
 801ecce:	f7ff fcef 	bl	801e6b0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801ecd2:	4605      	mov	r5, r0
 801ecd4:	6838      	ldr	r0, [r7, #0]
 801ecd6:	f7ff fcf6 	bl	801e6c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801ecda:	4603      	mov	r3, r0
 801ecdc:	461a      	mov	r2, r3
 801ecde:	4629      	mov	r1, r5
 801ece0:	4620      	mov	r0, r4
 801ece2:	f000 f919 	bl	801ef18 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
 801ece6:	68fb      	ldr	r3, [r7, #12]
 801ece8:	f103 0408 	add.w	r4, r3, #8
 801ecec:	68b8      	ldr	r0, [r7, #8]
 801ecee:	f7ff fcd4 	bl	801e69a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801ecf2:	4603      	mov	r3, r0
 801ecf4:	4619      	mov	r1, r3
 801ecf6:	4620      	mov	r0, r4
 801ecf8:	f000 f81e 	bl	801ed38 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 801ecfc:	68fb      	ldr	r3, [r7, #12]
 801ecfe:	4618      	mov	r0, r3
 801ed00:	3710      	adds	r7, #16
 801ed02:	46bd      	mov	sp, r7
 801ed04:	bdb0      	pop	{r4, r5, r7, pc}

0801ed06 <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801ed06:	b580      	push	{r7, lr}
 801ed08:	b082      	sub	sp, #8
 801ed0a:	af00      	add	r7, sp, #0
 801ed0c:	6078      	str	r0, [r7, #4]
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	3308      	adds	r3, #8
 801ed12:	4618      	mov	r0, r3
 801ed14:	f000 f91e 	bl	801ef54 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 801ed18:	4603      	mov	r3, r0
 801ed1a:	4618      	mov	r0, r3
 801ed1c:	3708      	adds	r7, #8
 801ed1e:	46bd      	mov	sp, r7
 801ed20:	bd80      	pop	{r7, pc}

0801ed22 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801ed22:	b480      	push	{r7}
 801ed24:	b083      	sub	sp, #12
 801ed26:	af00      	add	r7, sp, #0
 801ed28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	4618      	mov	r0, r3
 801ed2e:	370c      	adds	r7, #12
 801ed30:	46bd      	mov	sp, r7
 801ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed36:	4770      	bx	lr

0801ed38 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801ed38:	b580      	push	{r7, lr}
 801ed3a:	b082      	sub	sp, #8
 801ed3c:	af00      	add	r7, sp, #0
 801ed3e:	6078      	str	r0, [r7, #4]
 801ed40:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801ed42:	6838      	ldr	r0, [r7, #0]
 801ed44:	f7ff fca9 	bl	801e69a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801ed48:	4602      	mov	r2, r0
 801ed4a:	687b      	ldr	r3, [r7, #4]
 801ed4c:	601a      	str	r2, [r3, #0]
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	4618      	mov	r0, r3
 801ed52:	3708      	adds	r7, #8
 801ed54:	46bd      	mov	sp, r7
 801ed56:	bd80      	pop	{r7, pc}

0801ed58 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801ed58:	b580      	push	{r7, lr}
 801ed5a:	b082      	sub	sp, #8
 801ed5c:	af00      	add	r7, sp, #0
 801ed5e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801ed60:	6878      	ldr	r0, [r7, #4]
 801ed62:	f7ff fc31 	bl	801e5c8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 801ed66:	4603      	mov	r3, r0
 801ed68:	4618      	mov	r0, r3
 801ed6a:	3708      	adds	r7, #8
 801ed6c:	46bd      	mov	sp, r7
 801ed6e:	bd80      	pop	{r7, pc}

0801ed70 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801ed70:	b480      	push	{r7}
 801ed72:	b083      	sub	sp, #12
 801ed74:	af00      	add	r7, sp, #0
 801ed76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	4618      	mov	r0, r3
 801ed7c:	370c      	adds	r7, #12
 801ed7e:	46bd      	mov	sp, r7
 801ed80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed84:	4770      	bx	lr

0801ed86 <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801ed86:	b580      	push	{r7, lr}
 801ed88:	b082      	sub	sp, #8
 801ed8a:	af00      	add	r7, sp, #0
 801ed8c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801ed8e:	6878      	ldr	r0, [r7, #4]
 801ed90:	f7ff fd58 	bl	801e844 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 801ed94:	4603      	mov	r3, r0
 801ed96:	4618      	mov	r0, r3
 801ed98:	3708      	adds	r7, #8
 801ed9a:	46bd      	mov	sp, r7
 801ed9c:	bd80      	pop	{r7, pc}

0801ed9e <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 801ed9e:	b480      	push	{r7}
 801eda0:	b083      	sub	sp, #12
 801eda2:	af00      	add	r7, sp, #0
 801eda4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	4618      	mov	r0, r3
 801edaa:	370c      	adds	r7, #12
 801edac:	46bd      	mov	sp, r7
 801edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edb2:	4770      	bx	lr

0801edb4 <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 801edb4:	b580      	push	{r7, lr}
 801edb6:	b082      	sub	sp, #8
 801edb8:	af00      	add	r7, sp, #0
 801edba:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 801edbc:	6878      	ldr	r0, [r7, #4]
 801edbe:	f000 f8fe 	bl	801efbe <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801edc2:	4603      	mov	r3, r0
 801edc4:	4618      	mov	r0, r3
 801edc6:	f7ff ffac 	bl	801ed22 <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 801edca:	4603      	mov	r3, r0
    }
 801edcc:	4618      	mov	r0, r3
 801edce:	3708      	adds	r7, #8
 801edd0:	46bd      	mov	sp, r7
 801edd2:	bd80      	pop	{r7, pc}

0801edd4 <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801edd4:	b580      	push	{r7, lr}
 801edd6:	b082      	sub	sp, #8
 801edd8:	af00      	add	r7, sp, #0
 801edda:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801eddc:	6878      	ldr	r0, [r7, #4]
 801edde:	f7ff fe29 	bl	801ea34 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 801ede2:	4603      	mov	r3, r0
 801ede4:	4618      	mov	r0, r3
 801ede6:	3708      	adds	r7, #8
 801ede8:	46bd      	mov	sp, r7
 801edea:	bd80      	pop	{r7, pc}

0801edec <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 801edec:	b580      	push	{r7, lr}
 801edee:	b082      	sub	sp, #8
 801edf0:	af00      	add	r7, sp, #0
 801edf2:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 801edf4:	6878      	ldr	r0, [r7, #4]
 801edf6:	f000 f8ef 	bl	801efd8 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801edfa:	4603      	mov	r3, r0
 801edfc:	4618      	mov	r0, r3
 801edfe:	f000 f8c3 	bl	801ef88 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
 801ee02:	4603      	mov	r3, r0
    }
 801ee04:	4618      	mov	r0, r3
 801ee06:	3708      	adds	r7, #8
 801ee08:	46bd      	mov	sp, r7
 801ee0a:	bd80      	pop	{r7, pc}

0801ee0c <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801ee0c:	b580      	push	{r7, lr}
 801ee0e:	b082      	sub	sp, #8
 801ee10:	af00      	add	r7, sp, #0
 801ee12:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801ee14:	6878      	ldr	r0, [r7, #4]
 801ee16:	f7ff ff2d 	bl	801ec74 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 801ee1a:	4603      	mov	r3, r0
 801ee1c:	4618      	mov	r0, r3
 801ee1e:	3708      	adds	r7, #8
 801ee20:	46bd      	mov	sp, r7
 801ee22:	bd80      	pop	{r7, pc}

0801ee24 <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 801ee24:	b580      	push	{r7, lr}
 801ee26:	b082      	sub	sp, #8
 801ee28:	af00      	add	r7, sp, #0
 801ee2a:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 801ee2c:	6878      	ldr	r0, [r7, #4]
 801ee2e:	f000 f8e0 	bl	801eff2 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801ee32:	4603      	mov	r3, r0
 801ee34:	4618      	mov	r0, r3
 801ee36:	f000 f8e9 	bl	801f00c <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 801ee3a:	4603      	mov	r3, r0
    }
 801ee3c:	4618      	mov	r0, r3
 801ee3e:	3708      	adds	r7, #8
 801ee40:	46bd      	mov	sp, r7
 801ee42:	bd80      	pop	{r7, pc}

0801ee44 <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801ee44:	b480      	push	{r7}
 801ee46:	b083      	sub	sp, #12
 801ee48:	af00      	add	r7, sp, #0
 801ee4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	4618      	mov	r0, r3
 801ee50:	370c      	adds	r7, #12
 801ee52:	46bd      	mov	sp, r7
 801ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee58:	4770      	bx	lr

0801ee5a <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 801ee5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee5c:	b087      	sub	sp, #28
 801ee5e:	af00      	add	r7, sp, #0
 801ee60:	7538      	strb	r0, [r7, #20]
 801ee62:	6139      	str	r1, [r7, #16]
 801ee64:	60fa      	str	r2, [r7, #12]
 801ee66:	60bb      	str	r3, [r7, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 801ee68:	68f8      	ldr	r0, [r7, #12]
 801ee6a:	f7ff ff81 	bl	801ed70 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 801ee6e:	4603      	mov	r3, r0
 801ee70:	681b      	ldr	r3, [r3, #0]
 801ee72:	693a      	ldr	r2, [r7, #16]
 801ee74:	6852      	ldr	r2, [r2, #4]
 801ee76:	1052      	asrs	r2, r2, #1
 801ee78:	189d      	adds	r5, r3, r2
 801ee7a:	693a      	ldr	r2, [r7, #16]
 801ee7c:	6852      	ldr	r2, [r2, #4]
 801ee7e:	f002 0201 	and.w	r2, r2, #1
 801ee82:	2a00      	cmp	r2, #0
 801ee84:	d102      	bne.n	801ee8c <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x32>
 801ee86:	693b      	ldr	r3, [r7, #16]
 801ee88:	681c      	ldr	r4, [r3, #0]
 801ee8a:	e008      	b.n	801ee9e <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x44>
 801ee8c:	693a      	ldr	r2, [r7, #16]
 801ee8e:	6852      	ldr	r2, [r2, #4]
 801ee90:	1052      	asrs	r2, r2, #1
 801ee92:	4413      	add	r3, r2
 801ee94:	681b      	ldr	r3, [r3, #0]
 801ee96:	693a      	ldr	r2, [r7, #16]
 801ee98:	6812      	ldr	r2, [r2, #0]
 801ee9a:	4413      	add	r3, r2
 801ee9c:	681c      	ldr	r4, [r3, #0]
 801ee9e:	68b8      	ldr	r0, [r7, #8]
 801eea0:	f7ff fbfb 	bl	801e69a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801eea4:	4603      	mov	r3, r0
 801eea6:	781e      	ldrb	r6, [r3, #0]
 801eea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801eeaa:	f7ff fc01 	bl	801e6b0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801eeae:	4603      	mov	r3, r0
 801eeb0:	681b      	ldr	r3, [r3, #0]
 801eeb2:	607b      	str	r3, [r7, #4]
 801eeb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801eeb6:	f7ff fc06 	bl	801e6c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801eeba:	4603      	mov	r3, r0
 801eebc:	681b      	ldr	r3, [r3, #0]
 801eebe:	687a      	ldr	r2, [r7, #4]
 801eec0:	4631      	mov	r1, r6
 801eec2:	4628      	mov	r0, r5
 801eec4:	47a0      	blx	r4
 801eec6:	bf00      	nop
    }
 801eec8:	371c      	adds	r7, #28
 801eeca:	46bd      	mov	sp, r7
 801eecc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801eece <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
      constexpr _Tuple_impl(const _Head& __head)
 801eece:	b580      	push	{r7, lr}
 801eed0:	b082      	sub	sp, #8
 801eed2:	af00      	add	r7, sp, #0
 801eed4:	6078      	str	r0, [r7, #4]
 801eed6:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 801eed8:	6839      	ldr	r1, [r7, #0]
 801eeda:	6878      	ldr	r0, [r7, #4]
 801eedc:	f000 f8a1 	bl	801f022 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	4618      	mov	r0, r3
 801eee4:	3708      	adds	r7, #8
 801eee6:	46bd      	mov	sp, r7
 801eee8:	bd80      	pop	{r7, pc}

0801eeea <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 801eeea:	b480      	push	{r7}
 801eeec:	b083      	sub	sp, #12
 801eeee:	af00      	add	r7, sp, #0
 801eef0:	6078      	str	r0, [r7, #4]
 801eef2:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	4618      	mov	r0, r3
 801eef8:	370c      	adds	r7, #12
 801eefa:	46bd      	mov	sp, r7
 801eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef00:	4770      	bx	lr

0801ef02 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 801ef02:	b480      	push	{r7}
 801ef04:	b083      	sub	sp, #12
 801ef06:	af00      	add	r7, sp, #0
 801ef08:	6078      	str	r0, [r7, #4]
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	4618      	mov	r0, r3
 801ef0e:	370c      	adds	r7, #12
 801ef10:	46bd      	mov	sp, r7
 801ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef16:	4770      	bx	lr

0801ef18 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 801ef18:	b590      	push	{r4, r7, lr}
 801ef1a:	b085      	sub	sp, #20
 801ef1c:	af00      	add	r7, sp, #0
 801ef1e:	60f8      	str	r0, [r7, #12]
 801ef20:	60b9      	str	r1, [r7, #8]
 801ef22:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 801ef24:	68fc      	ldr	r4, [r7, #12]
 801ef26:	6878      	ldr	r0, [r7, #4]
 801ef28:	f7ff fbcd 	bl	801e6c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801ef2c:	4603      	mov	r3, r0
 801ef2e:	4619      	mov	r1, r3
 801ef30:	4620      	mov	r0, r4
 801ef32:	f000 f882 	bl	801f03a <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
 801ef36:	68fb      	ldr	r3, [r7, #12]
 801ef38:	1d1c      	adds	r4, r3, #4
 801ef3a:	68b8      	ldr	r0, [r7, #8]
 801ef3c:	f7ff fbb8 	bl	801e6b0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801ef40:	4603      	mov	r3, r0
 801ef42:	4619      	mov	r1, r3
 801ef44:	4620      	mov	r0, r4
 801ef46:	f000 f82a 	bl	801ef9e <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
 801ef4a:	68fb      	ldr	r3, [r7, #12]
 801ef4c:	4618      	mov	r0, r3
 801ef4e:	3714      	adds	r7, #20
 801ef50:	46bd      	mov	sp, r7
 801ef52:	bd90      	pop	{r4, r7, pc}

0801ef54 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801ef54:	b480      	push	{r7}
 801ef56:	b083      	sub	sp, #12
 801ef58:	af00      	add	r7, sp, #0
 801ef5a:	6078      	str	r0, [r7, #4]
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	681b      	ldr	r3, [r3, #0]
 801ef60:	4618      	mov	r0, r3
 801ef62:	370c      	adds	r7, #12
 801ef64:	46bd      	mov	sp, r7
 801ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef6a:	4770      	bx	lr

0801ef6c <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801ef6c:	b580      	push	{r7, lr}
 801ef6e:	b082      	sub	sp, #8
 801ef70:	af00      	add	r7, sp, #0
 801ef72:	6078      	str	r0, [r7, #4]
 801ef74:	687b      	ldr	r3, [r7, #4]
 801ef76:	3304      	adds	r3, #4
 801ef78:	4618      	mov	r0, r3
 801ef7a:	f000 f871 	bl	801f060 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
 801ef7e:	4603      	mov	r3, r0
 801ef80:	4618      	mov	r0, r3
 801ef82:	3708      	adds	r7, #8
 801ef84:	46bd      	mov	sp, r7
 801ef86:	bd80      	pop	{r7, pc}

0801ef88 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801ef88:	b480      	push	{r7}
 801ef8a:	b083      	sub	sp, #12
 801ef8c:	af00      	add	r7, sp, #0
 801ef8e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	4618      	mov	r0, r3
 801ef94:	370c      	adds	r7, #12
 801ef96:	46bd      	mov	sp, r7
 801ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef9c:	4770      	bx	lr

0801ef9e <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801ef9e:	b580      	push	{r7, lr}
 801efa0:	b082      	sub	sp, #8
 801efa2:	af00      	add	r7, sp, #0
 801efa4:	6078      	str	r0, [r7, #4]
 801efa6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801efa8:	6838      	ldr	r0, [r7, #0]
 801efaa:	f7ff fb81 	bl	801e6b0 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801efae:	4602      	mov	r2, r0
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	601a      	str	r2, [r3, #0]
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	4618      	mov	r0, r3
 801efb8:	3708      	adds	r7, #8
 801efba:	46bd      	mov	sp, r7
 801efbc:	bd80      	pop	{r7, pc}

0801efbe <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801efbe:	b580      	push	{r7, lr}
 801efc0:	b082      	sub	sp, #8
 801efc2:	af00      	add	r7, sp, #0
 801efc4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801efc6:	687b      	ldr	r3, [r7, #4]
 801efc8:	4618      	mov	r0, r3
 801efca:	f000 f872 	bl	801f0b2 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801efce:	4603      	mov	r3, r0
 801efd0:	4618      	mov	r0, r3
 801efd2:	3708      	adds	r7, #8
 801efd4:	46bd      	mov	sp, r7
 801efd6:	bd80      	pop	{r7, pc}

0801efd8 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801efd8:	b580      	push	{r7, lr}
 801efda:	b082      	sub	sp, #8
 801efdc:	af00      	add	r7, sp, #0
 801efde:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	4618      	mov	r0, r3
 801efe4:	f000 f871 	bl	801f0ca <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801efe8:	4603      	mov	r3, r0
 801efea:	4618      	mov	r0, r3
 801efec:	3708      	adds	r7, #8
 801efee:	46bd      	mov	sp, r7
 801eff0:	bd80      	pop	{r7, pc}

0801eff2 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801eff2:	b580      	push	{r7, lr}
 801eff4:	b082      	sub	sp, #8
 801eff6:	af00      	add	r7, sp, #0
 801eff8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801effa:	687b      	ldr	r3, [r7, #4]
 801effc:	4618      	mov	r0, r3
 801effe:	f000 f870 	bl	801f0e2 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 801f002:	4603      	mov	r3, r0
 801f004:	4618      	mov	r0, r3
 801f006:	3708      	adds	r7, #8
 801f008:	46bd      	mov	sp, r7
 801f00a:	bd80      	pop	{r7, pc}

0801f00c <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801f00c:	b480      	push	{r7}
 801f00e:	b083      	sub	sp, #12
 801f010:	af00      	add	r7, sp, #0
 801f012:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801f014:	687b      	ldr	r3, [r7, #4]
 801f016:	4618      	mov	r0, r3
 801f018:	370c      	adds	r7, #12
 801f01a:	46bd      	mov	sp, r7
 801f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f020:	4770      	bx	lr

0801f022 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 801f022:	b480      	push	{r7}
 801f024:	b083      	sub	sp, #12
 801f026:	af00      	add	r7, sp, #0
 801f028:	6078      	str	r0, [r7, #4]
 801f02a:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	4618      	mov	r0, r3
 801f030:	370c      	adds	r7, #12
 801f032:	46bd      	mov	sp, r7
 801f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f038:	4770      	bx	lr

0801f03a <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 801f03a:	b590      	push	{r4, r7, lr}
 801f03c:	b083      	sub	sp, #12
 801f03e:	af00      	add	r7, sp, #0
 801f040:	6078      	str	r0, [r7, #4]
 801f042:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 801f044:	687c      	ldr	r4, [r7, #4]
 801f046:	6838      	ldr	r0, [r7, #0]
 801f048:	f7ff fb3d 	bl	801e6c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801f04c:	4603      	mov	r3, r0
 801f04e:	4619      	mov	r1, r3
 801f050:	4620      	mov	r0, r4
 801f052:	f000 f81e 	bl	801f092 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	4618      	mov	r0, r3
 801f05a:	370c      	adds	r7, #12
 801f05c:	46bd      	mov	sp, r7
 801f05e:	bd90      	pop	{r4, r7, pc}

0801f060 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801f060:	b480      	push	{r7}
 801f062:	b083      	sub	sp, #12
 801f064:	af00      	add	r7, sp, #0
 801f066:	6078      	str	r0, [r7, #4]
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	681b      	ldr	r3, [r3, #0]
 801f06c:	4618      	mov	r0, r3
 801f06e:	370c      	adds	r7, #12
 801f070:	46bd      	mov	sp, r7
 801f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f076:	4770      	bx	lr

0801f078 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801f078:	b580      	push	{r7, lr}
 801f07a:	b082      	sub	sp, #8
 801f07c:	af00      	add	r7, sp, #0
 801f07e:	6078      	str	r0, [r7, #4]
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	4618      	mov	r0, r3
 801f084:	f000 f839 	bl	801f0fa <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
 801f088:	4603      	mov	r3, r0
 801f08a:	4618      	mov	r0, r3
 801f08c:	3708      	adds	r7, #8
 801f08e:	46bd      	mov	sp, r7
 801f090:	bd80      	pop	{r7, pc}

0801f092 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801f092:	b580      	push	{r7, lr}
 801f094:	b082      	sub	sp, #8
 801f096:	af00      	add	r7, sp, #0
 801f098:	6078      	str	r0, [r7, #4]
 801f09a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801f09c:	6838      	ldr	r0, [r7, #0]
 801f09e:	f7ff fb12 	bl	801e6c6 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801f0a2:	4602      	mov	r2, r0
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	601a      	str	r2, [r3, #0]
 801f0a8:	687b      	ldr	r3, [r7, #4]
 801f0aa:	4618      	mov	r0, r3
 801f0ac:	3708      	adds	r7, #8
 801f0ae:	46bd      	mov	sp, r7
 801f0b0:	bd80      	pop	{r7, pc}

0801f0b2 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801f0b2:	b580      	push	{r7, lr}
 801f0b4:	b082      	sub	sp, #8
 801f0b6:	af00      	add	r7, sp, #0
 801f0b8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801f0ba:	6878      	ldr	r0, [r7, #4]
 801f0bc:	f7ff fe23 	bl	801ed06 <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
 801f0c0:	4603      	mov	r3, r0
 801f0c2:	4618      	mov	r0, r3
 801f0c4:	3708      	adds	r7, #8
 801f0c6:	46bd      	mov	sp, r7
 801f0c8:	bd80      	pop	{r7, pc}

0801f0ca <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801f0ca:	b580      	push	{r7, lr}
 801f0cc:	b082      	sub	sp, #8
 801f0ce:	af00      	add	r7, sp, #0
 801f0d0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801f0d2:	6878      	ldr	r0, [r7, #4]
 801f0d4:	f7ff ff4a 	bl	801ef6c <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
 801f0d8:	4603      	mov	r3, r0
 801f0da:	4618      	mov	r0, r3
 801f0dc:	3708      	adds	r7, #8
 801f0de:	46bd      	mov	sp, r7
 801f0e0:	bd80      	pop	{r7, pc}

0801f0e2 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801f0e2:	b580      	push	{r7, lr}
 801f0e4:	b082      	sub	sp, #8
 801f0e6:	af00      	add	r7, sp, #0
 801f0e8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801f0ea:	6878      	ldr	r0, [r7, #4]
 801f0ec:	f7ff ffc4 	bl	801f078 <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
 801f0f0:	4603      	mov	r3, r0
 801f0f2:	4618      	mov	r0, r3
 801f0f4:	3708      	adds	r7, #8
 801f0f6:	46bd      	mov	sp, r7
 801f0f8:	bd80      	pop	{r7, pc}

0801f0fa <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801f0fa:	b480      	push	{r7}
 801f0fc:	b083      	sub	sp, #12
 801f0fe:	af00      	add	r7, sp, #0
 801f100:	6078      	str	r0, [r7, #4]
 801f102:	687b      	ldr	r3, [r7, #4]
 801f104:	681b      	ldr	r3, [r3, #0]
 801f106:	4618      	mov	r0, r3
 801f108:	370c      	adds	r7, #12
 801f10a:	46bd      	mov	sp, r7
 801f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f110:	4770      	bx	lr
	...

0801f114 <_ZN5IOBusD1Ev>:

#include "MessageBus.h"
#include "IODriver.h"


class IOBus : public MessageBus {
 801f114:	b580      	push	{r7, lr}
 801f116:	b082      	sub	sp, #8
 801f118:	af00      	add	r7, sp, #0
 801f11a:	6078      	str	r0, [r7, #4]
 801f11c:	4a05      	ldr	r2, [pc, #20]	; (801f134 <_ZN5IOBusD1Ev+0x20>)
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	601a      	str	r2, [r3, #0]
 801f122:	687b      	ldr	r3, [r7, #4]
 801f124:	4618      	mov	r0, r3
 801f126:	f7fe feff 	bl	801df28 <_ZN10MessageBusD1Ev>
 801f12a:	687b      	ldr	r3, [r7, #4]
 801f12c:	4618      	mov	r0, r3
 801f12e:	3708      	adds	r7, #8
 801f130:	46bd      	mov	sp, r7
 801f132:	bd80      	pop	{r7, pc}
 801f134:	0802821c 	.word	0x0802821c

0801f138 <_ZN5IOBusD0Ev>:
 801f138:	b580      	push	{r7, lr}
 801f13a:	b082      	sub	sp, #8
 801f13c:	af00      	add	r7, sp, #0
 801f13e:	6078      	str	r0, [r7, #4]
 801f140:	6878      	ldr	r0, [r7, #4]
 801f142:	f7ff ffe7 	bl	801f114 <_ZN5IOBusD1Ev>
 801f146:	f644 0114 	movw	r1, #18452	; 0x4814
 801f14a:	6878      	ldr	r0, [r7, #4]
 801f14c:	f001 fd48 	bl	8020be0 <_ZdlPvj>
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	4618      	mov	r0, r3
 801f154:	3708      	adds	r7, #8
 801f156:	46bd      	mov	sp, r7
 801f158:	bd80      	pop	{r7, pc}

0801f15a <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 801f15a:	b480      	push	{r7}
 801f15c:	b083      	sub	sp, #12
 801f15e:	af00      	add	r7, sp, #0
 801f160:	6078      	str	r0, [r7, #4]
 801f162:	687b      	ldr	r3, [r7, #4]
 801f164:	689b      	ldr	r3, [r3, #8]
 801f166:	2b00      	cmp	r3, #0
 801f168:	bf0c      	ite	eq
 801f16a:	2301      	moveq	r3, #1
 801f16c:	2300      	movne	r3, #0
 801f16e:	b2db      	uxtb	r3, r3
 801f170:	4618      	mov	r0, r3
 801f172:	370c      	adds	r7, #12
 801f174:	46bd      	mov	sp, r7
 801f176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f17a:	4770      	bx	lr

0801f17c <_ZN12LWIPClientIOC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

/*
 * Creates an IODriver interface using the given port number.
 * This constructor invocation is a light operation.
 */
LWIPClientIO::LWIPClientIO(std::string address_str, uint16_t port) : address_str(address_str) {
 801f17c:	b580      	push	{r7, lr}
 801f17e:	b084      	sub	sp, #16
 801f180:	af00      	add	r7, sp, #0
 801f182:	60f8      	str	r0, [r7, #12]
 801f184:	60b9      	str	r1, [r7, #8]
 801f186:	4613      	mov	r3, r2
 801f188:	80fb      	strh	r3, [r7, #6]
 801f18a:	68fb      	ldr	r3, [r7, #12]
 801f18c:	4618      	mov	r0, r3
 801f18e:	f7fe fe33 	bl	801ddf8 <_ZN8IODriverC1Ev>
 801f192:	4a19      	ldr	r2, [pc, #100]	; (801f1f8 <_ZN12LWIPClientIOC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt+0x7c>)
 801f194:	68fb      	ldr	r3, [r7, #12]
 801f196:	601a      	str	r2, [r3, #0]
 801f198:	68fb      	ldr	r3, [r7, #12]
 801f19a:	3304      	adds	r3, #4
 801f19c:	68b9      	ldr	r1, [r7, #8]
 801f19e:	4618      	mov	r0, r3
 801f1a0:	f002 f8a6 	bl	80212f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801f1a4:	68fb      	ldr	r3, [r7, #12]
 801f1a6:	3334      	adds	r3, #52	; 0x34
 801f1a8:	4618      	mov	r0, r3
 801f1aa:	f000 f91a 	bl	801f3e2 <_ZNSt8functionIFvhPhmEEC1Ev>
	this->address = { 0 };
 801f1ae:	68fb      	ldr	r3, [r7, #12]
 801f1b0:	331c      	adds	r3, #28
 801f1b2:	2200      	movs	r2, #0
 801f1b4:	601a      	str	r2, [r3, #0]
 801f1b6:	605a      	str	r2, [r3, #4]
 801f1b8:	609a      	str	r2, [r3, #8]
 801f1ba:	60da      	str	r2, [r3, #12]
	this->socket_id = 0;
 801f1bc:	68fb      	ldr	r3, [r7, #12]
 801f1be:	2200      	movs	r2, #0
 801f1c0:	62da      	str	r2, [r3, #44]	; 0x2c
	this->connected = false;
 801f1c2:	68fb      	ldr	r3, [r7, #12]
 801f1c4:	2200      	movs	r2, #0
 801f1c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	this->receiver = nullptr;
 801f1ca:	68fb      	ldr	r3, [r7, #12]
 801f1cc:	3334      	adds	r3, #52	; 0x34
 801f1ce:	2100      	movs	r1, #0
 801f1d0:	4618      	mov	r0, r3
 801f1d2:	f000 f913 	bl	801f3fc <_ZNSt8functionIFvhPhmEEaSEDn>

	address.sin_family = AF_INET;
 801f1d6:	68fb      	ldr	r3, [r7, #12]
 801f1d8:	2202      	movs	r2, #2
 801f1da:	775a      	strb	r2, [r3, #29]
	address.sin_port = htons(port);
 801f1dc:	88fb      	ldrh	r3, [r7, #6]
 801f1de:	4618      	mov	r0, r3
 801f1e0:	f7f1 fc0a 	bl	80109f8 <lwip_htons>
 801f1e4:	4603      	mov	r3, r0
 801f1e6:	461a      	mov	r2, r3
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	83da      	strh	r2, [r3, #30]
}
 801f1ec:	68fb      	ldr	r3, [r7, #12]
 801f1ee:	4618      	mov	r0, r3
 801f1f0:	3710      	adds	r7, #16
 801f1f2:	46bd      	mov	sp, r7
 801f1f4:	bd80      	pop	{r7, pc}
 801f1f6:	bf00      	nop
 801f1f8:	0802833c 	.word	0x0802833c

0801f1fc <_ZN12LWIPClientIOD1Ev>:

/*
 * Releases IO resources
 */
LWIPClientIO::~LWIPClientIO() {
 801f1fc:	b580      	push	{r7, lr}
 801f1fe:	b082      	sub	sp, #8
 801f200:	af00      	add	r7, sp, #0
 801f202:	6078      	str	r0, [r7, #4]
 801f204:	4a0c      	ldr	r2, [pc, #48]	; (801f238 <_ZN12LWIPClientIOD1Ev+0x3c>)
 801f206:	687b      	ldr	r3, [r7, #4]
 801f208:	601a      	str	r2, [r3, #0]
	disconnectClient();
 801f20a:	6878      	ldr	r0, [r7, #4]
 801f20c:	f000 f884 	bl	801f318 <_ZN12LWIPClientIO16disconnectClientEv>
LWIPClientIO::~LWIPClientIO() {
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	3334      	adds	r3, #52	; 0x34
 801f214:	4618      	mov	r0, r3
 801f216:	f7fe feef 	bl	801dff8 <_ZNSt8functionIFvhPhmEED1Ev>
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	3304      	adds	r3, #4
 801f21e:	4618      	mov	r0, r3
 801f220:	f002 f839 	bl	8021296 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801f224:	687b      	ldr	r3, [r7, #4]
 801f226:	4618      	mov	r0, r3
 801f228:	f7fe fdc6 	bl	801ddb8 <_ZN8IODriverD1Ev>
}
 801f22c:	687b      	ldr	r3, [r7, #4]
 801f22e:	4618      	mov	r0, r3
 801f230:	3708      	adds	r7, #8
 801f232:	46bd      	mov	sp, r7
 801f234:	bd80      	pop	{r7, pc}
 801f236:	bf00      	nop
 801f238:	0802833c 	.word	0x0802833c

0801f23c <_ZN12LWIPClientIOD0Ev>:
LWIPClientIO::~LWIPClientIO() {
 801f23c:	b580      	push	{r7, lr}
 801f23e:	b082      	sub	sp, #8
 801f240:	af00      	add	r7, sp, #0
 801f242:	6078      	str	r0, [r7, #4]
}
 801f244:	6878      	ldr	r0, [r7, #4]
 801f246:	f7ff ffd9 	bl	801f1fc <_ZN12LWIPClientIOD1Ev>
 801f24a:	2144      	movs	r1, #68	; 0x44
 801f24c:	6878      	ldr	r0, [r7, #4]
 801f24e:	f001 fcc7 	bl	8020be0 <_ZdlPvj>
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	4618      	mov	r0, r3
 801f256:	3708      	adds	r7, #8
 801f258:	46bd      	mov	sp, r7
 801f25a:	bd80      	pop	{r7, pc}

0801f25c <_ZN12LWIPClientIO13connectClientEv>:
 * Creates a client socket and connects it to a remote server
 * through the ip address and port specified by the constructor.
 * This operation is heavy and may fail.
 * Check the returned error code and set breakpoints accordingly if needed.
 */
int8_t LWIPClientIO::connectClient() {
 801f25c:	b580      	push	{r7, lr}
 801f25e:	b084      	sub	sp, #16
 801f260:	af00      	add	r7, sp, #0
 801f262:	6078      	str	r0, [r7, #4]

	if(connected) {
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f26a:	2b00      	cmp	r3, #0
 801f26c:	d002      	beq.n	801f274 <_ZN12LWIPClientIO13connectClientEv+0x18>
		return -1; // Server already connected
 801f26e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f272:	e049      	b.n	801f308 <_ZN12LWIPClientIO13connectClientEv+0xac>
	}

	int32_t result;

	// Creates the socket instance
	socket_id = lwip_socket(AF_INET, SOCK_STREAM, 0);
 801f274:	2200      	movs	r2, #0
 801f276:	2101      	movs	r1, #1
 801f278:	2002      	movs	r0, #2
 801f27a:	f7f6 fae9 	bl	8015850 <lwip_socket>
 801f27e:	4603      	mov	r3, r0
 801f280:	461a      	mov	r2, r3
 801f282:	687b      	ldr	r3, [r7, #4]
 801f284:	62da      	str	r2, [r3, #44]	; 0x2c
	if(socket_id < 0) {
		return -2;
	}

	//adds destination IP address to the remote socket's address
	if(inet_pton(AF_INET, address_str.c_str(), &address.sin_addr) <= 0) {
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	3304      	adds	r3, #4
 801f28a:	4618      	mov	r0, r3
 801f28c:	f002 f809 	bl	80212a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801f290:	4601      	mov	r1, r0
 801f292:	687b      	ldr	r3, [r7, #4]
 801f294:	3320      	adds	r3, #32
 801f296:	461a      	mov	r2, r3
 801f298:	2002      	movs	r0, #2
 801f29a:	f7f6 fcbd 	bl	8015c18 <lwip_inet_pton>
 801f29e:	4603      	mov	r3, r0
 801f2a0:	2b00      	cmp	r3, #0
 801f2a2:	bfd4      	ite	le
 801f2a4:	2301      	movle	r3, #1
 801f2a6:	2300      	movgt	r3, #0
 801f2a8:	b2db      	uxtb	r3, r3
 801f2aa:	2b00      	cmp	r3, #0
 801f2ac:	d007      	beq.n	801f2be <_ZN12LWIPClientIO13connectClientEv+0x62>
		lwip_close(socket_id);
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f2b2:	4618      	mov	r0, r3
 801f2b4:	f7f6 f8e6 	bl	8015484 <lwip_close>
		return -3;
 801f2b8:	f06f 0302 	mvn.w	r3, #2
 801f2bc:	e024      	b.n	801f308 <_ZN12LWIPClientIO13connectClientEv+0xac>
	}

	// Binds the client socket to the remote server socket
	result = lwip_connect(socket_id, (sockaddr*) &address, sizeof(address));
 801f2be:	687b      	ldr	r3, [r7, #4]
 801f2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f2c2:	4618      	mov	r0, r3
 801f2c4:	687b      	ldr	r3, [r7, #4]
 801f2c6:	331c      	adds	r3, #28
 801f2c8:	2210      	movs	r2, #16
 801f2ca:	4619      	mov	r1, r3
 801f2cc:	f7f6 f930 	bl	8015530 <lwip_connect>
 801f2d0:	60f8      	str	r0, [r7, #12]
	if(result < 0) {
 801f2d2:	68fb      	ldr	r3, [r7, #12]
 801f2d4:	2b00      	cmp	r3, #0
 801f2d6:	da07      	bge.n	801f2e8 <_ZN12LWIPClientIO13connectClientEv+0x8c>
		lwip_close(socket_id);
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f2dc:	4618      	mov	r0, r3
 801f2de:	f7f6 f8d1 	bl	8015484 <lwip_close>
		return -4;
 801f2e2:	f06f 0303 	mvn.w	r3, #3
 801f2e6:	e00f      	b.n	801f308 <_ZN12LWIPClientIO13connectClientEv+0xac>
	}

	this->connected = true;
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	2201      	movs	r2, #1
 801f2ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	console.printf("[RoCo] [Client@%d] Client connected\r\n", ntohs(address.sin_port));
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	8bdb      	ldrh	r3, [r3, #30]
 801f2f4:	4618      	mov	r0, r3
 801f2f6:	f7f1 fb7f 	bl	80109f8 <lwip_htons>
 801f2fa:	4603      	mov	r3, r0
 801f2fc:	461a      	mov	r2, r3
 801f2fe:	4904      	ldr	r1, [pc, #16]	; (801f310 <_ZN12LWIPClientIO13connectClientEv+0xb4>)
 801f300:	4804      	ldr	r0, [pc, #16]	; (801f314 <_ZN12LWIPClientIO13connectClientEv+0xb8>)
 801f302:	f7fd ffc6 	bl	801d292 <_ZN7Console6printfEPKcz>


	return 0;
 801f306:	2300      	movs	r3, #0
}
 801f308:	4618      	mov	r0, r3
 801f30a:	3710      	adds	r7, #16
 801f30c:	46bd      	mov	sp, r7
 801f30e:	bd80      	pop	{r7, pc}
 801f310:	08027e1c 	.word	0x08027e1c
 801f314:	240049ac 	.word	0x240049ac

0801f318 <_ZN12LWIPClientIO16disconnectClientEv>:
/*
 * Disconnects the driver instance.
 * In particular, this function resets the IODriver to an initial state and closes all used IO resources.
 * Make sure the disconnect member function is only called in the reception thread.
 */
void LWIPClientIO::disconnectClient() {
 801f318:	b580      	push	{r7, lr}
 801f31a:	b082      	sub	sp, #8
 801f31c:	af00      	add	r7, sp, #0
 801f31e:	6078      	str	r0, [r7, #4]
	if(connected) {
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f326:	2b00      	cmp	r3, #0
 801f328:	d011      	beq.n	801f34e <_ZN12LWIPClientIO16disconnectClientEv+0x36>
		this->connected = false;
 801f32a:	687b      	ldr	r3, [r7, #4]
 801f32c:	2200      	movs	r2, #0
 801f32e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		closeSocket();
 801f332:	6878      	ldr	r0, [r7, #4]
 801f334:	f000 f814 	bl	801f360 <_ZN12LWIPClientIO11closeSocketEv>
		console.printf("[RoCo] [Client@%d] Client disconnected\r\n", ntohs(address.sin_port));
 801f338:	687b      	ldr	r3, [r7, #4]
 801f33a:	8bdb      	ldrh	r3, [r3, #30]
 801f33c:	4618      	mov	r0, r3
 801f33e:	f7f1 fb5b 	bl	80109f8 <lwip_htons>
 801f342:	4603      	mov	r3, r0
 801f344:	461a      	mov	r2, r3
 801f346:	4904      	ldr	r1, [pc, #16]	; (801f358 <_ZN12LWIPClientIO16disconnectClientEv+0x40>)
 801f348:	4804      	ldr	r0, [pc, #16]	; (801f35c <_ZN12LWIPClientIO16disconnectClientEv+0x44>)
 801f34a:	f7fd ffa2 	bl	801d292 <_ZN7Console6printfEPKcz>
	}
}
 801f34e:	bf00      	nop
 801f350:	3708      	adds	r7, #8
 801f352:	46bd      	mov	sp, r7
 801f354:	bd80      	pop	{r7, pc}
 801f356:	bf00      	nop
 801f358:	08027e44 	.word	0x08027e44
 801f35c:	240049ac 	.word	0x240049ac

0801f360 <_ZN12LWIPClientIO11closeSocketEv>:

/*
 * Closes all used IO resources
 */
void LWIPClientIO::closeSocket() {
 801f360:	b580      	push	{r7, lr}
 801f362:	b082      	sub	sp, #8
 801f364:	af00      	add	r7, sp, #0
 801f366:	6078      	str	r0, [r7, #4]
	lwip_close(socket_id);
 801f368:	687b      	ldr	r3, [r7, #4]
 801f36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f36c:	4618      	mov	r0, r3
 801f36e:	f7f6 f889 	bl	8015484 <lwip_close>
}
 801f372:	bf00      	nop
 801f374:	3708      	adds	r7, #8
 801f376:	46bd      	mov	sp, r7
 801f378:	bd80      	pop	{r7, pc}

0801f37a <_ZN12LWIPClientIO7receiveERKSt8functionIFvhPhmEE>:
}

/*
 * Sets the receiver callback function
 */
void LWIPClientIO::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 801f37a:	b580      	push	{r7, lr}
 801f37c:	b082      	sub	sp, #8
 801f37e:	af00      	add	r7, sp, #0
 801f380:	6078      	str	r0, [r7, #4]
 801f382:	6039      	str	r1, [r7, #0]
	this->receiver = receiver;
 801f384:	687b      	ldr	r3, [r7, #4]
 801f386:	3334      	adds	r3, #52	; 0x34
 801f388:	6839      	ldr	r1, [r7, #0]
 801f38a:	4618      	mov	r0, r3
 801f38c:	f000 f850 	bl	801f430 <_ZNSt8functionIFvhPhmEEaSERKS2_>
}
 801f390:	bf00      	nop
 801f392:	3708      	adds	r7, #8
 801f394:	46bd      	mov	sp, r7
 801f396:	bd80      	pop	{r7, pc}

0801f398 <_ZN12LWIPClientIO8transmitEPhm>:

/*
 * Transmits the given data to the server
 * Warning: this function must be thread safe in a multithreaded environment
 */
void LWIPClientIO::transmit(uint8_t* buffer, uint32_t length) {
 801f398:	b580      	push	{r7, lr}
 801f39a:	b086      	sub	sp, #24
 801f39c:	af00      	add	r7, sp, #0
 801f39e:	60f8      	str	r0, [r7, #12]
 801f3a0:	60b9      	str	r1, [r7, #8]
 801f3a2:	607a      	str	r2, [r7, #4]
	if(connected) {
 801f3a4:	68fb      	ldr	r3, [r7, #12]
 801f3a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f3aa:	2b00      	cmp	r3, #0
 801f3ac:	d015      	beq.n	801f3da <_ZN12LWIPClientIO8transmitEPhm+0x42>
		int32_t result;

		while((result = lwip_send(socket_id, buffer, length, 0)) > 0) {
 801f3ae:	68fb      	ldr	r3, [r7, #12]
 801f3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f3b2:	4618      	mov	r0, r3
 801f3b4:	2300      	movs	r3, #0
 801f3b6:	687a      	ldr	r2, [r7, #4]
 801f3b8:	68b9      	ldr	r1, [r7, #8]
 801f3ba:	f7f6 f939 	bl	8015630 <lwip_send>
 801f3be:	6178      	str	r0, [r7, #20]
 801f3c0:	697b      	ldr	r3, [r7, #20]
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	bfcc      	ite	gt
 801f3c6:	2301      	movgt	r3, #1
 801f3c8:	2300      	movle	r3, #0
 801f3ca:	b2db      	uxtb	r3, r3
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	d004      	beq.n	801f3da <_ZN12LWIPClientIO8transmitEPhm+0x42>
			length -= result;
 801f3d0:	697b      	ldr	r3, [r7, #20]
 801f3d2:	687a      	ldr	r2, [r7, #4]
 801f3d4:	1ad3      	subs	r3, r2, r3
 801f3d6:	607b      	str	r3, [r7, #4]
		while((result = lwip_send(socket_id, buffer, length, 0)) > 0) {
 801f3d8:	e7e9      	b.n	801f3ae <_ZN12LWIPClientIO8transmitEPhm+0x16>
		}
	}
}
 801f3da:	bf00      	nop
 801f3dc:	3718      	adds	r7, #24
 801f3de:	46bd      	mov	sp, r7
 801f3e0:	bd80      	pop	{r7, pc}

0801f3e2 <_ZNSt8functionIFvhPhmEEC1Ev>:
      function() noexcept
 801f3e2:	b580      	push	{r7, lr}
 801f3e4:	b082      	sub	sp, #8
 801f3e6:	af00      	add	r7, sp, #0
 801f3e8:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	4618      	mov	r0, r3
 801f3ee:	f7fe fdd2 	bl	801df96 <_ZNSt14_Function_baseC1Ev>
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	4618      	mov	r0, r3
 801f3f6:	3708      	adds	r7, #8
 801f3f8:	46bd      	mov	sp, r7
 801f3fa:	bd80      	pop	{r7, pc}

0801f3fc <_ZNSt8functionIFvhPhmEEaSEDn>:
      operator=(nullptr_t) noexcept
 801f3fc:	b580      	push	{r7, lr}
 801f3fe:	b082      	sub	sp, #8
 801f400:	af00      	add	r7, sp, #0
 801f402:	6078      	str	r0, [r7, #4]
 801f404:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 801f406:	687b      	ldr	r3, [r7, #4]
 801f408:	689b      	ldr	r3, [r3, #8]
 801f40a:	2b00      	cmp	r3, #0
 801f40c:	d00b      	beq.n	801f426 <_ZNSt8functionIFvhPhmEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	689b      	ldr	r3, [r3, #8]
 801f412:	6878      	ldr	r0, [r7, #4]
 801f414:	6879      	ldr	r1, [r7, #4]
 801f416:	2203      	movs	r2, #3
 801f418:	4798      	blx	r3
	    _M_manager = nullptr;
 801f41a:	687b      	ldr	r3, [r7, #4]
 801f41c:	2200      	movs	r2, #0
 801f41e:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 801f420:	687b      	ldr	r3, [r7, #4]
 801f422:	2200      	movs	r2, #0
 801f424:	60da      	str	r2, [r3, #12]
	return *this;
 801f426:	687b      	ldr	r3, [r7, #4]
      }
 801f428:	4618      	mov	r0, r3
 801f42a:	3708      	adds	r7, #8
 801f42c:	46bd      	mov	sp, r7
 801f42e:	bd80      	pop	{r7, pc}

0801f430 <_ZNSt8functionIFvhPhmEEaSERKS2_>:
      operator=(const function& __x)
 801f430:	b580      	push	{r7, lr}
 801f432:	b086      	sub	sp, #24
 801f434:	af00      	add	r7, sp, #0
 801f436:	6078      	str	r0, [r7, #4]
 801f438:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 801f43a:	f107 0308 	add.w	r3, r7, #8
 801f43e:	6839      	ldr	r1, [r7, #0]
 801f440:	4618      	mov	r0, r3
 801f442:	f000 f820 	bl	801f486 <_ZNSt8functionIFvhPhmEEC1ERKS2_>
 801f446:	f107 0308 	add.w	r3, r7, #8
 801f44a:	6879      	ldr	r1, [r7, #4]
 801f44c:	4618      	mov	r0, r3
 801f44e:	f000 f83c 	bl	801f4ca <_ZNSt8functionIFvhPhmEE4swapERS2_>
 801f452:	f107 0308 	add.w	r3, r7, #8
 801f456:	4618      	mov	r0, r3
 801f458:	f7fe fdce 	bl	801dff8 <_ZNSt8functionIFvhPhmEED1Ev>
	return *this;
 801f45c:	687b      	ldr	r3, [r7, #4]
      }
 801f45e:	4618      	mov	r0, r3
 801f460:	3718      	adds	r7, #24
 801f462:	46bd      	mov	sp, r7
 801f464:	bd80      	pop	{r7, pc}

0801f466 <_ZNKSt8functionIFvhPhmEEcvbEv>:
      explicit operator bool() const noexcept
 801f466:	b580      	push	{r7, lr}
 801f468:	b082      	sub	sp, #8
 801f46a:	af00      	add	r7, sp, #0
 801f46c:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 801f46e:	687b      	ldr	r3, [r7, #4]
 801f470:	4618      	mov	r0, r3
 801f472:	f7ff fe72 	bl	801f15a <_ZNKSt14_Function_base8_M_emptyEv>
 801f476:	4603      	mov	r3, r0
 801f478:	f083 0301 	eor.w	r3, r3, #1
 801f47c:	b2db      	uxtb	r3, r3
 801f47e:	4618      	mov	r0, r3
 801f480:	3708      	adds	r7, #8
 801f482:	46bd      	mov	sp, r7
 801f484:	bd80      	pop	{r7, pc}

0801f486 <_ZNSt8functionIFvhPhmEEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
 801f486:	b580      	push	{r7, lr}
 801f488:	b082      	sub	sp, #8
 801f48a:	af00      	add	r7, sp, #0
 801f48c:	6078      	str	r0, [r7, #4]
 801f48e:	6039      	str	r1, [r7, #0]
    : _Function_base()
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	4618      	mov	r0, r3
 801f494:	f7fe fd7f 	bl	801df96 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 801f498:	6838      	ldr	r0, [r7, #0]
 801f49a:	f7ff ffe4 	bl	801f466 <_ZNKSt8functionIFvhPhmEEcvbEv>
 801f49e:	4603      	mov	r3, r0
 801f4a0:	2b00      	cmp	r3, #0
 801f4a2:	d00d      	beq.n	801f4c0 <_ZNSt8functionIFvhPhmEEC1ERKS2_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 801f4a4:	683b      	ldr	r3, [r7, #0]
 801f4a6:	689b      	ldr	r3, [r3, #8]
 801f4a8:	6878      	ldr	r0, [r7, #4]
 801f4aa:	6839      	ldr	r1, [r7, #0]
 801f4ac:	2202      	movs	r2, #2
 801f4ae:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 801f4b0:	683b      	ldr	r3, [r7, #0]
 801f4b2:	68da      	ldr	r2, [r3, #12]
 801f4b4:	687b      	ldr	r3, [r7, #4]
 801f4b6:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 801f4b8:	683b      	ldr	r3, [r7, #0]
 801f4ba:	689a      	ldr	r2, [r3, #8]
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	609a      	str	r2, [r3, #8]
    }
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	4618      	mov	r0, r3
 801f4c4:	3708      	adds	r7, #8
 801f4c6:	46bd      	mov	sp, r7
 801f4c8:	bd80      	pop	{r7, pc}

0801f4ca <_ZNSt8functionIFvhPhmEE4swapERS2_>:
      void swap(function& __x) noexcept
 801f4ca:	b580      	push	{r7, lr}
 801f4cc:	b082      	sub	sp, #8
 801f4ce:	af00      	add	r7, sp, #0
 801f4d0:	6078      	str	r0, [r7, #4]
 801f4d2:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 801f4d4:	687b      	ldr	r3, [r7, #4]
 801f4d6:	683a      	ldr	r2, [r7, #0]
 801f4d8:	4611      	mov	r1, r2
 801f4da:	4618      	mov	r0, r3
 801f4dc:	f000 f821 	bl	801f522 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	f103 0208 	add.w	r2, r3, #8
 801f4e6:	683b      	ldr	r3, [r7, #0]
 801f4e8:	3308      	adds	r3, #8
 801f4ea:	4619      	mov	r1, r3
 801f4ec:	4610      	mov	r0, r2
 801f4ee:	f000 f84a 	bl	801f586 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 801f4f2:	687b      	ldr	r3, [r7, #4]
 801f4f4:	f103 020c 	add.w	r2, r3, #12
 801f4f8:	683b      	ldr	r3, [r7, #0]
 801f4fa:	330c      	adds	r3, #12
 801f4fc:	4619      	mov	r1, r3
 801f4fe:	4610      	mov	r0, r2
 801f500:	f000 f86b 	bl	801f5da <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 801f504:	bf00      	nop
 801f506:	3708      	adds	r7, #8
 801f508:	46bd      	mov	sp, r7
 801f50a:	bd80      	pop	{r7, pc}

0801f50c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 801f50c:	b480      	push	{r7}
 801f50e:	b083      	sub	sp, #12
 801f510:	af00      	add	r7, sp, #0
 801f512:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	4618      	mov	r0, r3
 801f518:	370c      	adds	r7, #12
 801f51a:	46bd      	mov	sp, r7
 801f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f520:	4770      	bx	lr

0801f522 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 801f522:	b580      	push	{r7, lr}
 801f524:	b084      	sub	sp, #16
 801f526:	af00      	add	r7, sp, #0
 801f528:	6078      	str	r0, [r7, #4]
 801f52a:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801f52c:	6878      	ldr	r0, [r7, #4]
 801f52e:	f7ff ffed 	bl	801f50c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801f532:	4602      	mov	r2, r0
 801f534:	f107 0308 	add.w	r3, r7, #8
 801f538:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f53c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 801f540:	6838      	ldr	r0, [r7, #0]
 801f542:	f7ff ffe3 	bl	801f50c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801f546:	4602      	mov	r2, r0
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f54e:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 801f552:	f107 0308 	add.w	r3, r7, #8
 801f556:	4618      	mov	r0, r3
 801f558:	f7ff ffd8 	bl	801f50c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801f55c:	4602      	mov	r2, r0
 801f55e:	683b      	ldr	r3, [r7, #0]
 801f560:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f564:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801f568:	bf00      	nop
 801f56a:	3710      	adds	r7, #16
 801f56c:	46bd      	mov	sp, r7
 801f56e:	bd80      	pop	{r7, pc}

0801f570 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 801f570:	b480      	push	{r7}
 801f572:	b083      	sub	sp, #12
 801f574:	af00      	add	r7, sp, #0
 801f576:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801f578:	687b      	ldr	r3, [r7, #4]
 801f57a:	4618      	mov	r0, r3
 801f57c:	370c      	adds	r7, #12
 801f57e:	46bd      	mov	sp, r7
 801f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f584:	4770      	bx	lr

0801f586 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 801f586:	b580      	push	{r7, lr}
 801f588:	b084      	sub	sp, #16
 801f58a:	af00      	add	r7, sp, #0
 801f58c:	6078      	str	r0, [r7, #4]
 801f58e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801f590:	6878      	ldr	r0, [r7, #4]
 801f592:	f7ff ffed 	bl	801f570 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801f596:	4603      	mov	r3, r0
 801f598:	681b      	ldr	r3, [r3, #0]
 801f59a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801f59c:	6838      	ldr	r0, [r7, #0]
 801f59e:	f7ff ffe7 	bl	801f570 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801f5a2:	4603      	mov	r3, r0
 801f5a4:	681a      	ldr	r2, [r3, #0]
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 801f5aa:	f107 030c 	add.w	r3, r7, #12
 801f5ae:	4618      	mov	r0, r3
 801f5b0:	f7ff ffde 	bl	801f570 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801f5b4:	4603      	mov	r3, r0
 801f5b6:	681a      	ldr	r2, [r3, #0]
 801f5b8:	683b      	ldr	r3, [r7, #0]
 801f5ba:	601a      	str	r2, [r3, #0]
    }
 801f5bc:	bf00      	nop
 801f5be:	3710      	adds	r7, #16
 801f5c0:	46bd      	mov	sp, r7
 801f5c2:	bd80      	pop	{r7, pc}

0801f5c4 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 801f5c4:	b480      	push	{r7}
 801f5c6:	b083      	sub	sp, #12
 801f5c8:	af00      	add	r7, sp, #0
 801f5ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	4618      	mov	r0, r3
 801f5d0:	370c      	adds	r7, #12
 801f5d2:	46bd      	mov	sp, r7
 801f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5d8:	4770      	bx	lr

0801f5da <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 801f5da:	b580      	push	{r7, lr}
 801f5dc:	b084      	sub	sp, #16
 801f5de:	af00      	add	r7, sp, #0
 801f5e0:	6078      	str	r0, [r7, #4]
 801f5e2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801f5e4:	6878      	ldr	r0, [r7, #4]
 801f5e6:	f7ff ffed 	bl	801f5c4 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 801f5ea:	4603      	mov	r3, r0
 801f5ec:	681b      	ldr	r3, [r3, #0]
 801f5ee:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801f5f0:	6838      	ldr	r0, [r7, #0]
 801f5f2:	f7ff ffe7 	bl	801f5c4 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 801f5f6:	4603      	mov	r3, r0
 801f5f8:	681a      	ldr	r2, [r3, #0]
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 801f5fe:	f107 030c 	add.w	r3, r7, #12
 801f602:	4618      	mov	r0, r3
 801f604:	f7ff ffde 	bl	801f5c4 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 801f608:	4603      	mov	r3, r0
 801f60a:	681a      	ldr	r2, [r3, #0]
 801f60c:	683b      	ldr	r3, [r7, #0]
 801f60e:	601a      	str	r2, [r3, #0]
    }
 801f610:	bf00      	nop
 801f612:	3710      	adds	r7, #16
 801f614:	46bd      	mov	sp, r7
 801f616:	bd80      	pop	{r7, pc}

0801f618 <_ZNKSt9type_info4nameEv>:
     *  the runtime-mandated type_info structures in the new-abi.  */
    virtual ~type_info();

    /** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */
    const char* name() const _GLIBCXX_NOEXCEPT
 801f618:	b480      	push	{r7}
 801f61a:	b083      	sub	sp, #12
 801f61c:	af00      	add	r7, sp, #0
 801f61e:	6078      	str	r0, [r7, #4]
    { return __name[0] == '*' ? __name + 1 : __name; }
 801f620:	687b      	ldr	r3, [r7, #4]
 801f622:	685b      	ldr	r3, [r3, #4]
 801f624:	781b      	ldrb	r3, [r3, #0]
 801f626:	2b2a      	cmp	r3, #42	; 0x2a
 801f628:	d103      	bne.n	801f632 <_ZNKSt9type_info4nameEv+0x1a>
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	685b      	ldr	r3, [r3, #4]
 801f62e:	3301      	adds	r3, #1
 801f630:	e001      	b.n	801f636 <_ZNKSt9type_info4nameEv+0x1e>
 801f632:	687b      	ldr	r3, [r7, #4]
 801f634:	685b      	ldr	r3, [r3, #4]
 801f636:	4618      	mov	r0, r3
 801f638:	370c      	adds	r7, #12
 801f63a:	46bd      	mov	sp, r7
 801f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f640:	4770      	bx	lr
	...

0801f644 <_ZNKSt9type_info9hash_codeEv>:
#endif
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
 801f644:	b590      	push	{r4, r7, lr}
 801f646:	b083      	sub	sp, #12
 801f648:	af00      	add	r7, sp, #0
 801f64a:	6078      	str	r0, [r7, #4]
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 801f64c:	6878      	ldr	r0, [r7, #4]
 801f64e:	f7ff ffe3 	bl	801f618 <_ZNKSt9type_info4nameEv>
 801f652:	4604      	mov	r4, r0
 801f654:	6878      	ldr	r0, [r7, #4]
 801f656:	f7ff ffdf 	bl	801f618 <_ZNKSt9type_info4nameEv>
 801f65a:	4603      	mov	r3, r0
 801f65c:	4618      	mov	r0, r3
 801f65e:	f7e0 fe99 	bl	8000394 <strlen>
 801f662:	4603      	mov	r3, r0
 801f664:	4a04      	ldr	r2, [pc, #16]	; (801f678 <_ZNKSt9type_info9hash_codeEv+0x34>)
 801f666:	4619      	mov	r1, r3
 801f668:	4620      	mov	r0, r4
 801f66a:	f001 facb 	bl	8020c04 <_ZSt11_Hash_bytesPKvjj>
 801f66e:	4603      	mov	r3, r0
			 static_cast<size_t>(0xc70f6907UL));
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
 801f670:	4618      	mov	r0, r3
 801f672:	370c      	adds	r7, #12
 801f674:	46bd      	mov	sp, r7
 801f676:	bd90      	pop	{r4, r7, pc}
 801f678:	c70f6907 	.word	0xc70f6907

0801f67c <_ZN10MessageBus6defineI10PingPacketEEbh>:
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f67c:	b580      	push	{r7, lr}
 801f67e:	b086      	sub	sp, #24
 801f680:	af00      	add	r7, sp, #0
 801f682:	6078      	str	r0, [r7, #4]
 801f684:	460b      	mov	r3, r1
 801f686:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f688:	2308      	movs	r3, #8
 801f68a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f68c:	4829      	ldr	r0, [pc, #164]	; (801f734 <_ZN10MessageBus6defineI10PingPacketEEbh+0xb8>)
 801f68e:	f7ff ffd9 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801f692:	60f8      	str	r0, [r7, #12]

	uint32_t insertion_point = hash % 256;
 801f694:	68fb      	ldr	r3, [r7, #12]
 801f696:	b2db      	uxtb	r3, r3
 801f698:	617b      	str	r3, [r7, #20]

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f69a:	78fb      	ldrb	r3, [r7, #3]
 801f69c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f6a0:	687a      	ldr	r2, [r7, #4]
 801f6a2:	00db      	lsls	r3, r3, #3
 801f6a4:	4413      	add	r3, r2
 801f6a6:	689b      	ldr	r3, [r3, #8]
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d001      	beq.n	801f6b0 <_ZN10MessageBus6defineI10PingPacketEEbh+0x34>
		return false; // Packet ID already in use
 801f6ac:	2300      	movs	r3, #0
 801f6ae:	e03c      	b.n	801f72a <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	if(struct_size > max_packet_size) {
 801f6b0:	693b      	ldr	r3, [r7, #16]
 801f6b2:	2bff      	cmp	r3, #255	; 0xff
 801f6b4:	d901      	bls.n	801f6ba <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		return false; // Packet size too large
 801f6b6:	2300      	movs	r3, #0
 801f6b8:	e037      	b.n	801f72a <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	}

	while(definitions_by_type[insertion_point] != nullptr) {
 801f6ba:	687a      	ldr	r2, [r7, #4]
 801f6bc:	697b      	ldr	r3, [r7, #20]
 801f6be:	3380      	adds	r3, #128	; 0x80
 801f6c0:	009b      	lsls	r3, r3, #2
 801f6c2:	4413      	add	r3, r2
 801f6c4:	685b      	ldr	r3, [r3, #4]
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	d015      	beq.n	801f6f6 <_ZN10MessageBus6defineI10PingPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f6ca:	687a      	ldr	r2, [r7, #4]
 801f6cc:	697b      	ldr	r3, [r7, #20]
 801f6ce:	3380      	adds	r3, #128	; 0x80
 801f6d0:	009b      	lsls	r3, r3, #2
 801f6d2:	4413      	add	r3, r2
 801f6d4:	685b      	ldr	r3, [r3, #4]
 801f6d6:	685b      	ldr	r3, [r3, #4]
 801f6d8:	68fa      	ldr	r2, [r7, #12]
 801f6da:	429a      	cmp	r2, r3
 801f6dc:	d101      	bne.n	801f6e2 <_ZN10MessageBus6defineI10PingPacketEEbh+0x66>
			return false; // Packet type already defined
 801f6de:	2300      	movs	r3, #0
 801f6e0:	e023      	b.n	801f72a <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
		}

		insertion_point++;
 801f6e2:	697b      	ldr	r3, [r7, #20]
 801f6e4:	3301      	adds	r3, #1
 801f6e6:	617b      	str	r3, [r7, #20]

		if(insertion_point == 256) {
 801f6e8:	697b      	ldr	r3, [r7, #20]
 801f6ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f6ee:	d1e4      	bne.n	801f6ba <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
			insertion_point = 0;
 801f6f0:	2300      	movs	r3, #0
 801f6f2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f6f4:	e7e1      	b.n	801f6ba <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		}
	}

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f6f6:	78fb      	ldrb	r3, [r7, #3]
 801f6f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f6fc:	00db      	lsls	r3, r3, #3
 801f6fe:	687a      	ldr	r2, [r7, #4]
 801f700:	4413      	add	r3, r2
 801f702:	3304      	adds	r3, #4
 801f704:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
 801f706:	68bb      	ldr	r3, [r7, #8]
 801f708:	78fa      	ldrb	r2, [r7, #3]
 801f70a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f70c:	693b      	ldr	r3, [r7, #16]
 801f70e:	b2da      	uxtb	r2, r3
 801f710:	68bb      	ldr	r3, [r7, #8]
 801f712:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f714:	68bb      	ldr	r3, [r7, #8]
 801f716:	68fa      	ldr	r2, [r7, #12]
 801f718:	605a      	str	r2, [r3, #4]

	definitions_by_type[insertion_point] = def;
 801f71a:	687a      	ldr	r2, [r7, #4]
 801f71c:	697b      	ldr	r3, [r7, #20]
 801f71e:	3380      	adds	r3, #128	; 0x80
 801f720:	009b      	lsls	r3, r3, #2
 801f722:	4413      	add	r3, r2
 801f724:	68ba      	ldr	r2, [r7, #8]
 801f726:	605a      	str	r2, [r3, #4]

	return true;
 801f728:	2301      	movs	r3, #1
}
 801f72a:	4618      	mov	r0, r3
 801f72c:	3718      	adds	r7, #24
 801f72e:	46bd      	mov	sp, r7
 801f730:	bd80      	pop	{r7, pc}
 801f732:	bf00      	nop
 801f734:	080284d4 	.word	0x080284d4

0801f738 <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f738:	b580      	push	{r7, lr}
 801f73a:	b086      	sub	sp, #24
 801f73c:	af00      	add	r7, sp, #0
 801f73e:	6078      	str	r0, [r7, #4]
 801f740:	460b      	mov	r3, r1
 801f742:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f744:	2308      	movs	r3, #8
 801f746:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f748:	4829      	ldr	r0, [pc, #164]	; (801f7f0 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xb8>)
 801f74a:	f7ff ff7b 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801f74e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f750:	68fb      	ldr	r3, [r7, #12]
 801f752:	b2db      	uxtb	r3, r3
 801f754:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f756:	78fb      	ldrb	r3, [r7, #3]
 801f758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f75c:	687a      	ldr	r2, [r7, #4]
 801f75e:	00db      	lsls	r3, r3, #3
 801f760:	4413      	add	r3, r2
 801f762:	689b      	ldr	r3, [r3, #8]
 801f764:	2b00      	cmp	r3, #0
 801f766:	d001      	beq.n	801f76c <_ZN10MessageBus6defineI13RequestPacketEEbh+0x34>
		return false; // Packet ID already in use
 801f768:	2300      	movs	r3, #0
 801f76a:	e03c      	b.n	801f7e6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f76c:	693b      	ldr	r3, [r7, #16]
 801f76e:	2bff      	cmp	r3, #255	; 0xff
 801f770:	d901      	bls.n	801f776 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
		return false; // Packet size too large
 801f772:	2300      	movs	r3, #0
 801f774:	e037      	b.n	801f7e6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f776:	687a      	ldr	r2, [r7, #4]
 801f778:	697b      	ldr	r3, [r7, #20]
 801f77a:	3380      	adds	r3, #128	; 0x80
 801f77c:	009b      	lsls	r3, r3, #2
 801f77e:	4413      	add	r3, r2
 801f780:	685b      	ldr	r3, [r3, #4]
 801f782:	2b00      	cmp	r3, #0
 801f784:	d015      	beq.n	801f7b2 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f786:	687a      	ldr	r2, [r7, #4]
 801f788:	697b      	ldr	r3, [r7, #20]
 801f78a:	3380      	adds	r3, #128	; 0x80
 801f78c:	009b      	lsls	r3, r3, #2
 801f78e:	4413      	add	r3, r2
 801f790:	685b      	ldr	r3, [r3, #4]
 801f792:	685b      	ldr	r3, [r3, #4]
 801f794:	68fa      	ldr	r2, [r7, #12]
 801f796:	429a      	cmp	r2, r3
 801f798:	d101      	bne.n	801f79e <_ZN10MessageBus6defineI13RequestPacketEEbh+0x66>
			return false; // Packet type already defined
 801f79a:	2300      	movs	r3, #0
 801f79c:	e023      	b.n	801f7e6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
		insertion_point++;
 801f79e:	697b      	ldr	r3, [r7, #20]
 801f7a0:	3301      	adds	r3, #1
 801f7a2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f7a4:	697b      	ldr	r3, [r7, #20]
 801f7a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f7aa:	d1e4      	bne.n	801f776 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
			insertion_point = 0;
 801f7ac:	2300      	movs	r3, #0
 801f7ae:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f7b0:	e7e1      	b.n	801f776 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f7b2:	78fb      	ldrb	r3, [r7, #3]
 801f7b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f7b8:	00db      	lsls	r3, r3, #3
 801f7ba:	687a      	ldr	r2, [r7, #4]
 801f7bc:	4413      	add	r3, r2
 801f7be:	3304      	adds	r3, #4
 801f7c0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f7c2:	68bb      	ldr	r3, [r7, #8]
 801f7c4:	78fa      	ldrb	r2, [r7, #3]
 801f7c6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f7c8:	693b      	ldr	r3, [r7, #16]
 801f7ca:	b2da      	uxtb	r2, r3
 801f7cc:	68bb      	ldr	r3, [r7, #8]
 801f7ce:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f7d0:	68bb      	ldr	r3, [r7, #8]
 801f7d2:	68fa      	ldr	r2, [r7, #12]
 801f7d4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f7d6:	687a      	ldr	r2, [r7, #4]
 801f7d8:	697b      	ldr	r3, [r7, #20]
 801f7da:	3380      	adds	r3, #128	; 0x80
 801f7dc:	009b      	lsls	r3, r3, #2
 801f7de:	4413      	add	r3, r2
 801f7e0:	68ba      	ldr	r2, [r7, #8]
 801f7e2:	605a      	str	r2, [r3, #4]
	return true;
 801f7e4:	2301      	movs	r3, #1
}
 801f7e6:	4618      	mov	r0, r3
 801f7e8:	3718      	adds	r7, #24
 801f7ea:	46bd      	mov	sp, r7
 801f7ec:	bd80      	pop	{r7, pc}
 801f7ee:	bf00      	nop
 801f7f0:	080284bc 	.word	0x080284bc

0801f7f4 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f7f4:	b580      	push	{r7, lr}
 801f7f6:	b086      	sub	sp, #24
 801f7f8:	af00      	add	r7, sp, #0
 801f7fa:	6078      	str	r0, [r7, #4]
 801f7fc:	460b      	mov	r3, r1
 801f7fe:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f800:	2308      	movs	r3, #8
 801f802:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f804:	4829      	ldr	r0, [pc, #164]	; (801f8ac <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xb8>)
 801f806:	f7ff ff1d 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801f80a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f80c:	68fb      	ldr	r3, [r7, #12]
 801f80e:	b2db      	uxtb	r3, r3
 801f810:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f812:	78fb      	ldrb	r3, [r7, #3]
 801f814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f818:	687a      	ldr	r2, [r7, #4]
 801f81a:	00db      	lsls	r3, r3, #3
 801f81c:	4413      	add	r3, r2
 801f81e:	689b      	ldr	r3, [r3, #8]
 801f820:	2b00      	cmp	r3, #0
 801f822:	d001      	beq.n	801f828 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x34>
		return false; // Packet ID already in use
 801f824:	2300      	movs	r3, #0
 801f826:	e03c      	b.n	801f8a2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f828:	693b      	ldr	r3, [r7, #16]
 801f82a:	2bff      	cmp	r3, #255	; 0xff
 801f82c:	d901      	bls.n	801f832 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
		return false; // Packet size too large
 801f82e:	2300      	movs	r3, #0
 801f830:	e037      	b.n	801f8a2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f832:	687a      	ldr	r2, [r7, #4]
 801f834:	697b      	ldr	r3, [r7, #20]
 801f836:	3380      	adds	r3, #128	; 0x80
 801f838:	009b      	lsls	r3, r3, #2
 801f83a:	4413      	add	r3, r2
 801f83c:	685b      	ldr	r3, [r3, #4]
 801f83e:	2b00      	cmp	r3, #0
 801f840:	d015      	beq.n	801f86e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f842:	687a      	ldr	r2, [r7, #4]
 801f844:	697b      	ldr	r3, [r7, #20]
 801f846:	3380      	adds	r3, #128	; 0x80
 801f848:	009b      	lsls	r3, r3, #2
 801f84a:	4413      	add	r3, r2
 801f84c:	685b      	ldr	r3, [r3, #4]
 801f84e:	685b      	ldr	r3, [r3, #4]
 801f850:	68fa      	ldr	r2, [r7, #12]
 801f852:	429a      	cmp	r2, r3
 801f854:	d101      	bne.n	801f85a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x66>
			return false; // Packet type already defined
 801f856:	2300      	movs	r3, #0
 801f858:	e023      	b.n	801f8a2 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
		insertion_point++;
 801f85a:	697b      	ldr	r3, [r7, #20]
 801f85c:	3301      	adds	r3, #1
 801f85e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f860:	697b      	ldr	r3, [r7, #20]
 801f862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f866:	d1e4      	bne.n	801f832 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
			insertion_point = 0;
 801f868:	2300      	movs	r3, #0
 801f86a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f86c:	e7e1      	b.n	801f832 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f86e:	78fb      	ldrb	r3, [r7, #3]
 801f870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f874:	00db      	lsls	r3, r3, #3
 801f876:	687a      	ldr	r2, [r7, #4]
 801f878:	4413      	add	r3, r2
 801f87a:	3304      	adds	r3, #4
 801f87c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f87e:	68bb      	ldr	r3, [r7, #8]
 801f880:	78fa      	ldrb	r2, [r7, #3]
 801f882:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f884:	693b      	ldr	r3, [r7, #16]
 801f886:	b2da      	uxtb	r2, r3
 801f888:	68bb      	ldr	r3, [r7, #8]
 801f88a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f88c:	68bb      	ldr	r3, [r7, #8]
 801f88e:	68fa      	ldr	r2, [r7, #12]
 801f890:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f892:	687a      	ldr	r2, [r7, #4]
 801f894:	697b      	ldr	r3, [r7, #20]
 801f896:	3380      	adds	r3, #128	; 0x80
 801f898:	009b      	lsls	r3, r3, #2
 801f89a:	4413      	add	r3, r2
 801f89c:	68ba      	ldr	r2, [r7, #8]
 801f89e:	605a      	str	r2, [r3, #4]
	return true;
 801f8a0:	2301      	movs	r3, #1
}
 801f8a2:	4618      	mov	r0, r3
 801f8a4:	3718      	adds	r7, #24
 801f8a6:	46bd      	mov	sp, r7
 801f8a8:	bd80      	pop	{r7, pc}
 801f8aa:	bf00      	nop
 801f8ac:	080284a0 	.word	0x080284a0

0801f8b0 <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f8b0:	b580      	push	{r7, lr}
 801f8b2:	b086      	sub	sp, #24
 801f8b4:	af00      	add	r7, sp, #0
 801f8b6:	6078      	str	r0, [r7, #4]
 801f8b8:	460b      	mov	r3, r1
 801f8ba:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f8bc:	2305      	movs	r3, #5
 801f8be:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f8c0:	4829      	ldr	r0, [pc, #164]	; (801f968 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xb8>)
 801f8c2:	f7ff febf 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801f8c6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f8c8:	68fb      	ldr	r3, [r7, #12]
 801f8ca:	b2db      	uxtb	r3, r3
 801f8cc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f8ce:	78fb      	ldrb	r3, [r7, #3]
 801f8d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f8d4:	687a      	ldr	r2, [r7, #4]
 801f8d6:	00db      	lsls	r3, r3, #3
 801f8d8:	4413      	add	r3, r2
 801f8da:	689b      	ldr	r3, [r3, #8]
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	d001      	beq.n	801f8e4 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x34>
		return false; // Packet ID already in use
 801f8e0:	2300      	movs	r3, #0
 801f8e2:	e03c      	b.n	801f95e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f8e4:	693b      	ldr	r3, [r7, #16]
 801f8e6:	2bff      	cmp	r3, #255	; 0xff
 801f8e8:	d901      	bls.n	801f8ee <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
		return false; // Packet size too large
 801f8ea:	2300      	movs	r3, #0
 801f8ec:	e037      	b.n	801f95e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f8ee:	687a      	ldr	r2, [r7, #4]
 801f8f0:	697b      	ldr	r3, [r7, #20]
 801f8f2:	3380      	adds	r3, #128	; 0x80
 801f8f4:	009b      	lsls	r3, r3, #2
 801f8f6:	4413      	add	r3, r2
 801f8f8:	685b      	ldr	r3, [r3, #4]
 801f8fa:	2b00      	cmp	r3, #0
 801f8fc:	d015      	beq.n	801f92a <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f8fe:	687a      	ldr	r2, [r7, #4]
 801f900:	697b      	ldr	r3, [r7, #20]
 801f902:	3380      	adds	r3, #128	; 0x80
 801f904:	009b      	lsls	r3, r3, #2
 801f906:	4413      	add	r3, r2
 801f908:	685b      	ldr	r3, [r3, #4]
 801f90a:	685b      	ldr	r3, [r3, #4]
 801f90c:	68fa      	ldr	r2, [r7, #12]
 801f90e:	429a      	cmp	r2, r3
 801f910:	d101      	bne.n	801f916 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x66>
			return false; // Packet type already defined
 801f912:	2300      	movs	r3, #0
 801f914:	e023      	b.n	801f95e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
		insertion_point++;
 801f916:	697b      	ldr	r3, [r7, #20]
 801f918:	3301      	adds	r3, #1
 801f91a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f91c:	697b      	ldr	r3, [r7, #20]
 801f91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f922:	d1e4      	bne.n	801f8ee <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
			insertion_point = 0;
 801f924:	2300      	movs	r3, #0
 801f926:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f928:	e7e1      	b.n	801f8ee <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f92a:	78fb      	ldrb	r3, [r7, #3]
 801f92c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f930:	00db      	lsls	r3, r3, #3
 801f932:	687a      	ldr	r2, [r7, #4]
 801f934:	4413      	add	r3, r2
 801f936:	3304      	adds	r3, #4
 801f938:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f93a:	68bb      	ldr	r3, [r7, #8]
 801f93c:	78fa      	ldrb	r2, [r7, #3]
 801f93e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f940:	693b      	ldr	r3, [r7, #16]
 801f942:	b2da      	uxtb	r2, r3
 801f944:	68bb      	ldr	r3, [r7, #8]
 801f946:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801f948:	68bb      	ldr	r3, [r7, #8]
 801f94a:	68fa      	ldr	r2, [r7, #12]
 801f94c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801f94e:	687a      	ldr	r2, [r7, #4]
 801f950:	697b      	ldr	r3, [r7, #20]
 801f952:	3380      	adds	r3, #128	; 0x80
 801f954:	009b      	lsls	r3, r3, #2
 801f956:	4413      	add	r3, r2
 801f958:	68ba      	ldr	r2, [r7, #8]
 801f95a:	605a      	str	r2, [r3, #4]
	return true;
 801f95c:	2301      	movs	r3, #1
}
 801f95e:	4618      	mov	r0, r3
 801f960:	3718      	adds	r7, #24
 801f962:	46bd      	mov	sp, r7
 801f964:	bd80      	pop	{r7, pc}
 801f966:	bf00      	nop
 801f968:	08028484 	.word	0x08028484

0801f96c <_ZN10MessageBus6defineI10DataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801f96c:	b580      	push	{r7, lr}
 801f96e:	b086      	sub	sp, #24
 801f970:	af00      	add	r7, sp, #0
 801f972:	6078      	str	r0, [r7, #4]
 801f974:	460b      	mov	r3, r1
 801f976:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801f978:	2304      	movs	r3, #4
 801f97a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801f97c:	4829      	ldr	r0, [pc, #164]	; (801fa24 <_ZN10MessageBus6defineI10DataPacketEEbh+0xb8>)
 801f97e:	f7ff fe61 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801f982:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801f984:	68fb      	ldr	r3, [r7, #12]
 801f986:	b2db      	uxtb	r3, r3
 801f988:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801f98a:	78fb      	ldrb	r3, [r7, #3]
 801f98c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f990:	687a      	ldr	r2, [r7, #4]
 801f992:	00db      	lsls	r3, r3, #3
 801f994:	4413      	add	r3, r2
 801f996:	689b      	ldr	r3, [r3, #8]
 801f998:	2b00      	cmp	r3, #0
 801f99a:	d001      	beq.n	801f9a0 <_ZN10MessageBus6defineI10DataPacketEEbh+0x34>
		return false; // Packet ID already in use
 801f99c:	2300      	movs	r3, #0
 801f99e:	e03c      	b.n	801fa1a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801f9a0:	693b      	ldr	r3, [r7, #16]
 801f9a2:	2bff      	cmp	r3, #255	; 0xff
 801f9a4:	d901      	bls.n	801f9aa <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
		return false; // Packet size too large
 801f9a6:	2300      	movs	r3, #0
 801f9a8:	e037      	b.n	801fa1a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801f9aa:	687a      	ldr	r2, [r7, #4]
 801f9ac:	697b      	ldr	r3, [r7, #20]
 801f9ae:	3380      	adds	r3, #128	; 0x80
 801f9b0:	009b      	lsls	r3, r3, #2
 801f9b2:	4413      	add	r3, r2
 801f9b4:	685b      	ldr	r3, [r3, #4]
 801f9b6:	2b00      	cmp	r3, #0
 801f9b8:	d015      	beq.n	801f9e6 <_ZN10MessageBus6defineI10DataPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801f9ba:	687a      	ldr	r2, [r7, #4]
 801f9bc:	697b      	ldr	r3, [r7, #20]
 801f9be:	3380      	adds	r3, #128	; 0x80
 801f9c0:	009b      	lsls	r3, r3, #2
 801f9c2:	4413      	add	r3, r2
 801f9c4:	685b      	ldr	r3, [r3, #4]
 801f9c6:	685b      	ldr	r3, [r3, #4]
 801f9c8:	68fa      	ldr	r2, [r7, #12]
 801f9ca:	429a      	cmp	r2, r3
 801f9cc:	d101      	bne.n	801f9d2 <_ZN10MessageBus6defineI10DataPacketEEbh+0x66>
			return false; // Packet type already defined
 801f9ce:	2300      	movs	r3, #0
 801f9d0:	e023      	b.n	801fa1a <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
		insertion_point++;
 801f9d2:	697b      	ldr	r3, [r7, #20]
 801f9d4:	3301      	adds	r3, #1
 801f9d6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801f9d8:	697b      	ldr	r3, [r7, #20]
 801f9da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f9de:	d1e4      	bne.n	801f9aa <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
			insertion_point = 0;
 801f9e0:	2300      	movs	r3, #0
 801f9e2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801f9e4:	e7e1      	b.n	801f9aa <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801f9e6:	78fb      	ldrb	r3, [r7, #3]
 801f9e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f9ec:	00db      	lsls	r3, r3, #3
 801f9ee:	687a      	ldr	r2, [r7, #4]
 801f9f0:	4413      	add	r3, r2
 801f9f2:	3304      	adds	r3, #4
 801f9f4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801f9f6:	68bb      	ldr	r3, [r7, #8]
 801f9f8:	78fa      	ldrb	r2, [r7, #3]
 801f9fa:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801f9fc:	693b      	ldr	r3, [r7, #16]
 801f9fe:	b2da      	uxtb	r2, r3
 801fa00:	68bb      	ldr	r3, [r7, #8]
 801fa02:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801fa04:	68bb      	ldr	r3, [r7, #8]
 801fa06:	68fa      	ldr	r2, [r7, #12]
 801fa08:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801fa0a:	687a      	ldr	r2, [r7, #4]
 801fa0c:	697b      	ldr	r3, [r7, #20]
 801fa0e:	3380      	adds	r3, #128	; 0x80
 801fa10:	009b      	lsls	r3, r3, #2
 801fa12:	4413      	add	r3, r2
 801fa14:	68ba      	ldr	r2, [r7, #8]
 801fa16:	605a      	str	r2, [r3, #4]
	return true;
 801fa18:	2301      	movs	r3, #1
}
 801fa1a:	4618      	mov	r0, r3
 801fa1c:	3718      	adds	r7, #24
 801fa1e:	46bd      	mov	sp, r7
 801fa20:	bd80      	pop	{r7, pc}
 801fa22:	bf00      	nop
 801fa24:	0802846c 	.word	0x0802846c

0801fa28 <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801fa28:	b580      	push	{r7, lr}
 801fa2a:	b086      	sub	sp, #24
 801fa2c:	af00      	add	r7, sp, #0
 801fa2e:	6078      	str	r0, [r7, #4]
 801fa30:	460b      	mov	r3, r1
 801fa32:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801fa34:	2301      	movs	r3, #1
 801fa36:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801fa38:	4829      	ldr	r0, [pc, #164]	; (801fae0 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xb8>)
 801fa3a:	f7ff fe03 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801fa3e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801fa40:	68fb      	ldr	r3, [r7, #12]
 801fa42:	b2db      	uxtb	r3, r3
 801fa44:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801fa46:	78fb      	ldrb	r3, [r7, #3]
 801fa48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fa4c:	687a      	ldr	r2, [r7, #4]
 801fa4e:	00db      	lsls	r3, r3, #3
 801fa50:	4413      	add	r3, r2
 801fa52:	689b      	ldr	r3, [r3, #8]
 801fa54:	2b00      	cmp	r3, #0
 801fa56:	d001      	beq.n	801fa5c <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x34>
		return false; // Packet ID already in use
 801fa58:	2300      	movs	r3, #0
 801fa5a:	e03c      	b.n	801fad6 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801fa5c:	693b      	ldr	r3, [r7, #16]
 801fa5e:	2bff      	cmp	r3, #255	; 0xff
 801fa60:	d901      	bls.n	801fa66 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
		return false; // Packet size too large
 801fa62:	2300      	movs	r3, #0
 801fa64:	e037      	b.n	801fad6 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801fa66:	687a      	ldr	r2, [r7, #4]
 801fa68:	697b      	ldr	r3, [r7, #20]
 801fa6a:	3380      	adds	r3, #128	; 0x80
 801fa6c:	009b      	lsls	r3, r3, #2
 801fa6e:	4413      	add	r3, r2
 801fa70:	685b      	ldr	r3, [r3, #4]
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	d015      	beq.n	801faa2 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801fa76:	687a      	ldr	r2, [r7, #4]
 801fa78:	697b      	ldr	r3, [r7, #20]
 801fa7a:	3380      	adds	r3, #128	; 0x80
 801fa7c:	009b      	lsls	r3, r3, #2
 801fa7e:	4413      	add	r3, r2
 801fa80:	685b      	ldr	r3, [r3, #4]
 801fa82:	685b      	ldr	r3, [r3, #4]
 801fa84:	68fa      	ldr	r2, [r7, #12]
 801fa86:	429a      	cmp	r2, r3
 801fa88:	d101      	bne.n	801fa8e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x66>
			return false; // Packet type already defined
 801fa8a:	2300      	movs	r3, #0
 801fa8c:	e023      	b.n	801fad6 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
		insertion_point++;
 801fa8e:	697b      	ldr	r3, [r7, #20]
 801fa90:	3301      	adds	r3, #1
 801fa92:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801fa94:	697b      	ldr	r3, [r7, #20]
 801fa96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fa9a:	d1e4      	bne.n	801fa66 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
			insertion_point = 0;
 801fa9c:	2300      	movs	r3, #0
 801fa9e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801faa0:	e7e1      	b.n	801fa66 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801faa2:	78fb      	ldrb	r3, [r7, #3]
 801faa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801faa8:	00db      	lsls	r3, r3, #3
 801faaa:	687a      	ldr	r2, [r7, #4]
 801faac:	4413      	add	r3, r2
 801faae:	3304      	adds	r3, #4
 801fab0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801fab2:	68bb      	ldr	r3, [r7, #8]
 801fab4:	78fa      	ldrb	r2, [r7, #3]
 801fab6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801fab8:	693b      	ldr	r3, [r7, #16]
 801faba:	b2da      	uxtb	r2, r3
 801fabc:	68bb      	ldr	r3, [r7, #8]
 801fabe:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801fac0:	68bb      	ldr	r3, [r7, #8]
 801fac2:	68fa      	ldr	r2, [r7, #12]
 801fac4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801fac6:	687a      	ldr	r2, [r7, #4]
 801fac8:	697b      	ldr	r3, [r7, #20]
 801faca:	3380      	adds	r3, #128	; 0x80
 801facc:	009b      	lsls	r3, r3, #2
 801face:	4413      	add	r3, r2
 801fad0:	68ba      	ldr	r2, [r7, #8]
 801fad2:	605a      	str	r2, [r3, #4]
	return true;
 801fad4:	2301      	movs	r3, #1
}
 801fad6:	4618      	mov	r0, r3
 801fad8:	3718      	adds	r7, #24
 801fada:	46bd      	mov	sp, r7
 801fadc:	bd80      	pop	{r7, pc}
 801fade:	bf00      	nop
 801fae0:	08028454 	.word	0x08028454

0801fae4 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801fae4:	b580      	push	{r7, lr}
 801fae6:	b086      	sub	sp, #24
 801fae8:	af00      	add	r7, sp, #0
 801faea:	6078      	str	r0, [r7, #4]
 801faec:	460b      	mov	r3, r1
 801faee:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801faf0:	2308      	movs	r3, #8
 801faf2:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801faf4:	4829      	ldr	r0, [pc, #164]	; (801fb9c <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xb8>)
 801faf6:	f7ff fda5 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801fafa:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801fafc:	68fb      	ldr	r3, [r7, #12]
 801fafe:	b2db      	uxtb	r3, r3
 801fb00:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801fb02:	78fb      	ldrb	r3, [r7, #3]
 801fb04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fb08:	687a      	ldr	r2, [r7, #4]
 801fb0a:	00db      	lsls	r3, r3, #3
 801fb0c:	4413      	add	r3, r2
 801fb0e:	689b      	ldr	r3, [r3, #8]
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	d001      	beq.n	801fb18 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x34>
		return false; // Packet ID already in use
 801fb14:	2300      	movs	r3, #0
 801fb16:	e03c      	b.n	801fb92 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801fb18:	693b      	ldr	r3, [r7, #16]
 801fb1a:	2bff      	cmp	r3, #255	; 0xff
 801fb1c:	d901      	bls.n	801fb22 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
		return false; // Packet size too large
 801fb1e:	2300      	movs	r3, #0
 801fb20:	e037      	b.n	801fb92 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801fb22:	687a      	ldr	r2, [r7, #4]
 801fb24:	697b      	ldr	r3, [r7, #20]
 801fb26:	3380      	adds	r3, #128	; 0x80
 801fb28:	009b      	lsls	r3, r3, #2
 801fb2a:	4413      	add	r3, r2
 801fb2c:	685b      	ldr	r3, [r3, #4]
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d015      	beq.n	801fb5e <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801fb32:	687a      	ldr	r2, [r7, #4]
 801fb34:	697b      	ldr	r3, [r7, #20]
 801fb36:	3380      	adds	r3, #128	; 0x80
 801fb38:	009b      	lsls	r3, r3, #2
 801fb3a:	4413      	add	r3, r2
 801fb3c:	685b      	ldr	r3, [r3, #4]
 801fb3e:	685b      	ldr	r3, [r3, #4]
 801fb40:	68fa      	ldr	r2, [r7, #12]
 801fb42:	429a      	cmp	r2, r3
 801fb44:	d101      	bne.n	801fb4a <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x66>
			return false; // Packet type already defined
 801fb46:	2300      	movs	r3, #0
 801fb48:	e023      	b.n	801fb92 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0xae>
		insertion_point++;
 801fb4a:	697b      	ldr	r3, [r7, #20]
 801fb4c:	3301      	adds	r3, #1
 801fb4e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801fb50:	697b      	ldr	r3, [r7, #20]
 801fb52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fb56:	d1e4      	bne.n	801fb22 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
			insertion_point = 0;
 801fb58:	2300      	movs	r3, #0
 801fb5a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801fb5c:	e7e1      	b.n	801fb22 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801fb5e:	78fb      	ldrb	r3, [r7, #3]
 801fb60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fb64:	00db      	lsls	r3, r3, #3
 801fb66:	687a      	ldr	r2, [r7, #4]
 801fb68:	4413      	add	r3, r2
 801fb6a:	3304      	adds	r3, #4
 801fb6c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801fb6e:	68bb      	ldr	r3, [r7, #8]
 801fb70:	78fa      	ldrb	r2, [r7, #3]
 801fb72:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801fb74:	693b      	ldr	r3, [r7, #16]
 801fb76:	b2da      	uxtb	r2, r3
 801fb78:	68bb      	ldr	r3, [r7, #8]
 801fb7a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801fb7c:	68bb      	ldr	r3, [r7, #8]
 801fb7e:	68fa      	ldr	r2, [r7, #12]
 801fb80:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801fb82:	687a      	ldr	r2, [r7, #4]
 801fb84:	697b      	ldr	r3, [r7, #20]
 801fb86:	3380      	adds	r3, #128	; 0x80
 801fb88:	009b      	lsls	r3, r3, #2
 801fb8a:	4413      	add	r3, r2
 801fb8c:	68ba      	ldr	r2, [r7, #8]
 801fb8e:	605a      	str	r2, [r3, #4]
	return true;
 801fb90:	2301      	movs	r3, #1
}
 801fb92:	4618      	mov	r0, r3
 801fb94:	3718      	adds	r7, #24
 801fb96:	46bd      	mov	sp, r7
 801fb98:	bd80      	pop	{r7, pc}
 801fb9a:	bf00      	nop
 801fb9c:	08028430 	.word	0x08028430

0801fba0 <_ZN10MessageBus4sendI23Avionics_BaroTempPacketEEbPT_>:
}

/*
 * Sends the given message using the implemented transmission protocol.
 */
template<typename T> bool MessageBus::send(T *message) {
 801fba0:	b580      	push	{r7, lr}
 801fba2:	b084      	sub	sp, #16
 801fba4:	af00      	add	r7, sp, #0
 801fba6:	6078      	str	r0, [r7, #4]
 801fba8:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 801fbaa:	4809      	ldr	r0, [pc, #36]	; (801fbd0 <_ZN10MessageBus4sendI23Avionics_BaroTempPacketEEbPT_+0x30>)
 801fbac:	f7ff fd4a 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801fbb0:	60f8      	str	r0, [r7, #12]

	PacketDefinition* def = retrieve(hash);
 801fbb2:	68f9      	ldr	r1, [r7, #12]
 801fbb4:	6878      	ldr	r0, [r7, #4]
 801fbb6:	f000 fb05 	bl	80201c4 <_ZN10MessageBus8retrieveEj>
 801fbba:	60b8      	str	r0, [r7, #8]

	return send(def, (uint8_t*) message);
 801fbbc:	683a      	ldr	r2, [r7, #0]
 801fbbe:	68b9      	ldr	r1, [r7, #8]
 801fbc0:	6878      	ldr	r0, [r7, #4]
 801fbc2:	f000 fa3b 	bl	802003c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
 801fbc6:	4603      	mov	r3, r0
}
 801fbc8:	4618      	mov	r0, r3
 801fbca:	3710      	adds	r7, #16
 801fbcc:	46bd      	mov	sp, r7
 801fbce:	bd80      	pop	{r7, pc}
 801fbd0:	08028430 	.word	0x08028430

0801fbd4 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801fbd4:	b580      	push	{r7, lr}
 801fbd6:	b086      	sub	sp, #24
 801fbd8:	af00      	add	r7, sp, #0
 801fbda:	6078      	str	r0, [r7, #4]
 801fbdc:	460b      	mov	r3, r1
 801fbde:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801fbe0:	2324      	movs	r3, #36	; 0x24
 801fbe2:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801fbe4:	4829      	ldr	r0, [pc, #164]	; (801fc8c <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xb8>)
 801fbe6:	f7ff fd2d 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801fbea:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801fbec:	68fb      	ldr	r3, [r7, #12]
 801fbee:	b2db      	uxtb	r3, r3
 801fbf0:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801fbf2:	78fb      	ldrb	r3, [r7, #3]
 801fbf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fbf8:	687a      	ldr	r2, [r7, #4]
 801fbfa:	00db      	lsls	r3, r3, #3
 801fbfc:	4413      	add	r3, r2
 801fbfe:	689b      	ldr	r3, [r3, #8]
 801fc00:	2b00      	cmp	r3, #0
 801fc02:	d001      	beq.n	801fc08 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x34>
		return false; // Packet ID already in use
 801fc04:	2300      	movs	r3, #0
 801fc06:	e03c      	b.n	801fc82 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801fc08:	693b      	ldr	r3, [r7, #16]
 801fc0a:	2bff      	cmp	r3, #255	; 0xff
 801fc0c:	d901      	bls.n	801fc12 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
		return false; // Packet size too large
 801fc0e:	2300      	movs	r3, #0
 801fc10:	e037      	b.n	801fc82 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801fc12:	687a      	ldr	r2, [r7, #4]
 801fc14:	697b      	ldr	r3, [r7, #20]
 801fc16:	3380      	adds	r3, #128	; 0x80
 801fc18:	009b      	lsls	r3, r3, #2
 801fc1a:	4413      	add	r3, r2
 801fc1c:	685b      	ldr	r3, [r3, #4]
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	d015      	beq.n	801fc4e <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801fc22:	687a      	ldr	r2, [r7, #4]
 801fc24:	697b      	ldr	r3, [r7, #20]
 801fc26:	3380      	adds	r3, #128	; 0x80
 801fc28:	009b      	lsls	r3, r3, #2
 801fc2a:	4413      	add	r3, r2
 801fc2c:	685b      	ldr	r3, [r3, #4]
 801fc2e:	685b      	ldr	r3, [r3, #4]
 801fc30:	68fa      	ldr	r2, [r7, #12]
 801fc32:	429a      	cmp	r2, r3
 801fc34:	d101      	bne.n	801fc3a <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x66>
			return false; // Packet type already defined
 801fc36:	2300      	movs	r3, #0
 801fc38:	e023      	b.n	801fc82 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0xae>
		insertion_point++;
 801fc3a:	697b      	ldr	r3, [r7, #20]
 801fc3c:	3301      	adds	r3, #1
 801fc3e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801fc40:	697b      	ldr	r3, [r7, #20]
 801fc42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fc46:	d1e4      	bne.n	801fc12 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
			insertion_point = 0;
 801fc48:	2300      	movs	r3, #0
 801fc4a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801fc4c:	e7e1      	b.n	801fc12 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801fc4e:	78fb      	ldrb	r3, [r7, #3]
 801fc50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fc54:	00db      	lsls	r3, r3, #3
 801fc56:	687a      	ldr	r2, [r7, #4]
 801fc58:	4413      	add	r3, r2
 801fc5a:	3304      	adds	r3, #4
 801fc5c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801fc5e:	68bb      	ldr	r3, [r7, #8]
 801fc60:	78fa      	ldrb	r2, [r7, #3]
 801fc62:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801fc64:	693b      	ldr	r3, [r7, #16]
 801fc66:	b2da      	uxtb	r2, r3
 801fc68:	68bb      	ldr	r3, [r7, #8]
 801fc6a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801fc6c:	68bb      	ldr	r3, [r7, #8]
 801fc6e:	68fa      	ldr	r2, [r7, #12]
 801fc70:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801fc72:	687a      	ldr	r2, [r7, #4]
 801fc74:	697b      	ldr	r3, [r7, #20]
 801fc76:	3380      	adds	r3, #128	; 0x80
 801fc78:	009b      	lsls	r3, r3, #2
 801fc7a:	4413      	add	r3, r2
 801fc7c:	68ba      	ldr	r2, [r7, #8]
 801fc7e:	605a      	str	r2, [r3, #4]
	return true;
 801fc80:	2301      	movs	r3, #1
}
 801fc82:	4618      	mov	r0, r3
 801fc84:	3718      	adds	r7, #24
 801fc86:	46bd      	mov	sp, r7
 801fc88:	bd80      	pop	{r7, pc}
 801fc8a:	bf00      	nop
 801fc8c:	0802840c 	.word	0x0802840c

0801fc90 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801fc90:	b580      	push	{r7, lr}
 801fc92:	b086      	sub	sp, #24
 801fc94:	af00      	add	r7, sp, #0
 801fc96:	6078      	str	r0, [r7, #4]
 801fc98:	460b      	mov	r3, r1
 801fc9a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801fc9c:	2304      	movs	r3, #4
 801fc9e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801fca0:	4829      	ldr	r0, [pc, #164]	; (801fd48 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xb8>)
 801fca2:	f7ff fccf 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801fca6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801fca8:	68fb      	ldr	r3, [r7, #12]
 801fcaa:	b2db      	uxtb	r3, r3
 801fcac:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801fcae:	78fb      	ldrb	r3, [r7, #3]
 801fcb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fcb4:	687a      	ldr	r2, [r7, #4]
 801fcb6:	00db      	lsls	r3, r3, #3
 801fcb8:	4413      	add	r3, r2
 801fcba:	689b      	ldr	r3, [r3, #8]
 801fcbc:	2b00      	cmp	r3, #0
 801fcbe:	d001      	beq.n	801fcc4 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x34>
		return false; // Packet ID already in use
 801fcc0:	2300      	movs	r3, #0
 801fcc2:	e03c      	b.n	801fd3e <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801fcc4:	693b      	ldr	r3, [r7, #16]
 801fcc6:	2bff      	cmp	r3, #255	; 0xff
 801fcc8:	d901      	bls.n	801fcce <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
		return false; // Packet size too large
 801fcca:	2300      	movs	r3, #0
 801fccc:	e037      	b.n	801fd3e <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801fcce:	687a      	ldr	r2, [r7, #4]
 801fcd0:	697b      	ldr	r3, [r7, #20]
 801fcd2:	3380      	adds	r3, #128	; 0x80
 801fcd4:	009b      	lsls	r3, r3, #2
 801fcd6:	4413      	add	r3, r2
 801fcd8:	685b      	ldr	r3, [r3, #4]
 801fcda:	2b00      	cmp	r3, #0
 801fcdc:	d015      	beq.n	801fd0a <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801fcde:	687a      	ldr	r2, [r7, #4]
 801fce0:	697b      	ldr	r3, [r7, #20]
 801fce2:	3380      	adds	r3, #128	; 0x80
 801fce4:	009b      	lsls	r3, r3, #2
 801fce6:	4413      	add	r3, r2
 801fce8:	685b      	ldr	r3, [r3, #4]
 801fcea:	685b      	ldr	r3, [r3, #4]
 801fcec:	68fa      	ldr	r2, [r7, #12]
 801fcee:	429a      	cmp	r2, r3
 801fcf0:	d101      	bne.n	801fcf6 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x66>
			return false; // Packet type already defined
 801fcf2:	2300      	movs	r3, #0
 801fcf4:	e023      	b.n	801fd3e <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0xae>
		insertion_point++;
 801fcf6:	697b      	ldr	r3, [r7, #20]
 801fcf8:	3301      	adds	r3, #1
 801fcfa:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801fcfc:	697b      	ldr	r3, [r7, #20]
 801fcfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fd02:	d1e4      	bne.n	801fcce <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
			insertion_point = 0;
 801fd04:	2300      	movs	r3, #0
 801fd06:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801fd08:	e7e1      	b.n	801fcce <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801fd0a:	78fb      	ldrb	r3, [r7, #3]
 801fd0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fd10:	00db      	lsls	r3, r3, #3
 801fd12:	687a      	ldr	r2, [r7, #4]
 801fd14:	4413      	add	r3, r2
 801fd16:	3304      	adds	r3, #4
 801fd18:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801fd1a:	68bb      	ldr	r3, [r7, #8]
 801fd1c:	78fa      	ldrb	r2, [r7, #3]
 801fd1e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801fd20:	693b      	ldr	r3, [r7, #16]
 801fd22:	b2da      	uxtb	r2, r3
 801fd24:	68bb      	ldr	r3, [r7, #8]
 801fd26:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801fd28:	68bb      	ldr	r3, [r7, #8]
 801fd2a:	68fa      	ldr	r2, [r7, #12]
 801fd2c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801fd2e:	687a      	ldr	r2, [r7, #4]
 801fd30:	697b      	ldr	r3, [r7, #20]
 801fd32:	3380      	adds	r3, #128	; 0x80
 801fd34:	009b      	lsls	r3, r3, #2
 801fd36:	4413      	add	r3, r2
 801fd38:	68ba      	ldr	r2, [r7, #8]
 801fd3a:	605a      	str	r2, [r3, #4]
	return true;
 801fd3c:	2301      	movs	r3, #1
}
 801fd3e:	4618      	mov	r0, r3
 801fd40:	3718      	adds	r7, #24
 801fd42:	46bd      	mov	sp, r7
 801fd44:	bd80      	pop	{r7, pc}
 801fd46:	bf00      	nop
 801fd48:	080283e8 	.word	0x080283e8

0801fd4c <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801fd4c:	b580      	push	{r7, lr}
 801fd4e:	b086      	sub	sp, #24
 801fd50:	af00      	add	r7, sp, #0
 801fd52:	6078      	str	r0, [r7, #4]
 801fd54:	460b      	mov	r3, r1
 801fd56:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801fd58:	2310      	movs	r3, #16
 801fd5a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801fd5c:	4829      	ldr	r0, [pc, #164]	; (801fe04 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xb8>)
 801fd5e:	f7ff fc71 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801fd62:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801fd64:	68fb      	ldr	r3, [r7, #12]
 801fd66:	b2db      	uxtb	r3, r3
 801fd68:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801fd6a:	78fb      	ldrb	r3, [r7, #3]
 801fd6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fd70:	687a      	ldr	r2, [r7, #4]
 801fd72:	00db      	lsls	r3, r3, #3
 801fd74:	4413      	add	r3, r2
 801fd76:	689b      	ldr	r3, [r3, #8]
 801fd78:	2b00      	cmp	r3, #0
 801fd7a:	d001      	beq.n	801fd80 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x34>
		return false; // Packet ID already in use
 801fd7c:	2300      	movs	r3, #0
 801fd7e:	e03c      	b.n	801fdfa <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801fd80:	693b      	ldr	r3, [r7, #16]
 801fd82:	2bff      	cmp	r3, #255	; 0xff
 801fd84:	d901      	bls.n	801fd8a <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
		return false; // Packet size too large
 801fd86:	2300      	movs	r3, #0
 801fd88:	e037      	b.n	801fdfa <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801fd8a:	687a      	ldr	r2, [r7, #4]
 801fd8c:	697b      	ldr	r3, [r7, #20]
 801fd8e:	3380      	adds	r3, #128	; 0x80
 801fd90:	009b      	lsls	r3, r3, #2
 801fd92:	4413      	add	r3, r2
 801fd94:	685b      	ldr	r3, [r3, #4]
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d015      	beq.n	801fdc6 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801fd9a:	687a      	ldr	r2, [r7, #4]
 801fd9c:	697b      	ldr	r3, [r7, #20]
 801fd9e:	3380      	adds	r3, #128	; 0x80
 801fda0:	009b      	lsls	r3, r3, #2
 801fda2:	4413      	add	r3, r2
 801fda4:	685b      	ldr	r3, [r3, #4]
 801fda6:	685b      	ldr	r3, [r3, #4]
 801fda8:	68fa      	ldr	r2, [r7, #12]
 801fdaa:	429a      	cmp	r2, r3
 801fdac:	d101      	bne.n	801fdb2 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x66>
			return false; // Packet type already defined
 801fdae:	2300      	movs	r3, #0
 801fdb0:	e023      	b.n	801fdfa <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
		insertion_point++;
 801fdb2:	697b      	ldr	r3, [r7, #20]
 801fdb4:	3301      	adds	r3, #1
 801fdb6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801fdb8:	697b      	ldr	r3, [r7, #20]
 801fdba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fdbe:	d1e4      	bne.n	801fd8a <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
			insertion_point = 0;
 801fdc0:	2300      	movs	r3, #0
 801fdc2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801fdc4:	e7e1      	b.n	801fd8a <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801fdc6:	78fb      	ldrb	r3, [r7, #3]
 801fdc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fdcc:	00db      	lsls	r3, r3, #3
 801fdce:	687a      	ldr	r2, [r7, #4]
 801fdd0:	4413      	add	r3, r2
 801fdd2:	3304      	adds	r3, #4
 801fdd4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801fdd6:	68bb      	ldr	r3, [r7, #8]
 801fdd8:	78fa      	ldrb	r2, [r7, #3]
 801fdda:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801fddc:	693b      	ldr	r3, [r7, #16]
 801fdde:	b2da      	uxtb	r2, r3
 801fde0:	68bb      	ldr	r3, [r7, #8]
 801fde2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801fde4:	68bb      	ldr	r3, [r7, #8]
 801fde6:	68fa      	ldr	r2, [r7, #12]
 801fde8:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801fdea:	687a      	ldr	r2, [r7, #4]
 801fdec:	697b      	ldr	r3, [r7, #20]
 801fdee:	3380      	adds	r3, #128	; 0x80
 801fdf0:	009b      	lsls	r3, r3, #2
 801fdf2:	4413      	add	r3, r2
 801fdf4:	68ba      	ldr	r2, [r7, #8]
 801fdf6:	605a      	str	r2, [r3, #4]
	return true;
 801fdf8:	2301      	movs	r3, #1
}
 801fdfa:	4618      	mov	r0, r3
 801fdfc:	3718      	adds	r7, #24
 801fdfe:	46bd      	mov	sp, r7
 801fe00:	bd80      	pop	{r7, pc}
 801fe02:	bf00      	nop
 801fe04:	080283c8 	.word	0x080283c8

0801fe08 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801fe08:	b580      	push	{r7, lr}
 801fe0a:	b086      	sub	sp, #24
 801fe0c:	af00      	add	r7, sp, #0
 801fe0e:	6078      	str	r0, [r7, #4]
 801fe10:	460b      	mov	r3, r1
 801fe12:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801fe14:	2310      	movs	r3, #16
 801fe16:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801fe18:	4829      	ldr	r0, [pc, #164]	; (801fec0 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xb8>)
 801fe1a:	f7ff fc13 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801fe1e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801fe20:	68fb      	ldr	r3, [r7, #12]
 801fe22:	b2db      	uxtb	r3, r3
 801fe24:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801fe26:	78fb      	ldrb	r3, [r7, #3]
 801fe28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fe2c:	687a      	ldr	r2, [r7, #4]
 801fe2e:	00db      	lsls	r3, r3, #3
 801fe30:	4413      	add	r3, r2
 801fe32:	689b      	ldr	r3, [r3, #8]
 801fe34:	2b00      	cmp	r3, #0
 801fe36:	d001      	beq.n	801fe3c <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x34>
		return false; // Packet ID already in use
 801fe38:	2300      	movs	r3, #0
 801fe3a:	e03c      	b.n	801feb6 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801fe3c:	693b      	ldr	r3, [r7, #16]
 801fe3e:	2bff      	cmp	r3, #255	; 0xff
 801fe40:	d901      	bls.n	801fe46 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
		return false; // Packet size too large
 801fe42:	2300      	movs	r3, #0
 801fe44:	e037      	b.n	801feb6 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801fe46:	687a      	ldr	r2, [r7, #4]
 801fe48:	697b      	ldr	r3, [r7, #20]
 801fe4a:	3380      	adds	r3, #128	; 0x80
 801fe4c:	009b      	lsls	r3, r3, #2
 801fe4e:	4413      	add	r3, r2
 801fe50:	685b      	ldr	r3, [r3, #4]
 801fe52:	2b00      	cmp	r3, #0
 801fe54:	d015      	beq.n	801fe82 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801fe56:	687a      	ldr	r2, [r7, #4]
 801fe58:	697b      	ldr	r3, [r7, #20]
 801fe5a:	3380      	adds	r3, #128	; 0x80
 801fe5c:	009b      	lsls	r3, r3, #2
 801fe5e:	4413      	add	r3, r2
 801fe60:	685b      	ldr	r3, [r3, #4]
 801fe62:	685b      	ldr	r3, [r3, #4]
 801fe64:	68fa      	ldr	r2, [r7, #12]
 801fe66:	429a      	cmp	r2, r3
 801fe68:	d101      	bne.n	801fe6e <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x66>
			return false; // Packet type already defined
 801fe6a:	2300      	movs	r3, #0
 801fe6c:	e023      	b.n	801feb6 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
		insertion_point++;
 801fe6e:	697b      	ldr	r3, [r7, #20]
 801fe70:	3301      	adds	r3, #1
 801fe72:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801fe74:	697b      	ldr	r3, [r7, #20]
 801fe76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fe7a:	d1e4      	bne.n	801fe46 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
			insertion_point = 0;
 801fe7c:	2300      	movs	r3, #0
 801fe7e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801fe80:	e7e1      	b.n	801fe46 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801fe82:	78fb      	ldrb	r3, [r7, #3]
 801fe84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fe88:	00db      	lsls	r3, r3, #3
 801fe8a:	687a      	ldr	r2, [r7, #4]
 801fe8c:	4413      	add	r3, r2
 801fe8e:	3304      	adds	r3, #4
 801fe90:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801fe92:	68bb      	ldr	r3, [r7, #8]
 801fe94:	78fa      	ldrb	r2, [r7, #3]
 801fe96:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801fe98:	693b      	ldr	r3, [r7, #16]
 801fe9a:	b2da      	uxtb	r2, r3
 801fe9c:	68bb      	ldr	r3, [r7, #8]
 801fe9e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801fea0:	68bb      	ldr	r3, [r7, #8]
 801fea2:	68fa      	ldr	r2, [r7, #12]
 801fea4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801fea6:	687a      	ldr	r2, [r7, #4]
 801fea8:	697b      	ldr	r3, [r7, #20]
 801feaa:	3380      	adds	r3, #128	; 0x80
 801feac:	009b      	lsls	r3, r3, #2
 801feae:	4413      	add	r3, r2
 801feb0:	68ba      	ldr	r2, [r7, #8]
 801feb2:	605a      	str	r2, [r3, #4]
	return true;
 801feb4:	2301      	movs	r3, #1
}
 801feb6:	4618      	mov	r0, r3
 801feb8:	3718      	adds	r7, #24
 801feba:	46bd      	mov	sp, r7
 801febc:	bd80      	pop	{r7, pc}
 801febe:	bf00      	nop
 801fec0:	080283a8 	.word	0x080283a8

0801fec4 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801fec4:	b580      	push	{r7, lr}
 801fec6:	b086      	sub	sp, #24
 801fec8:	af00      	add	r7, sp, #0
 801feca:	6078      	str	r0, [r7, #4]
 801fecc:	460b      	mov	r3, r1
 801fece:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801fed0:	2305      	movs	r3, #5
 801fed2:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801fed4:	4829      	ldr	r0, [pc, #164]	; (801ff7c <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xb8>)
 801fed6:	f7ff fbb5 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801feda:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801fedc:	68fb      	ldr	r3, [r7, #12]
 801fede:	b2db      	uxtb	r3, r3
 801fee0:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801fee2:	78fb      	ldrb	r3, [r7, #3]
 801fee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fee8:	687a      	ldr	r2, [r7, #4]
 801feea:	00db      	lsls	r3, r3, #3
 801feec:	4413      	add	r3, r2
 801feee:	689b      	ldr	r3, [r3, #8]
 801fef0:	2b00      	cmp	r3, #0
 801fef2:	d001      	beq.n	801fef8 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x34>
		return false; // Packet ID already in use
 801fef4:	2300      	movs	r3, #0
 801fef6:	e03c      	b.n	801ff72 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801fef8:	693b      	ldr	r3, [r7, #16]
 801fefa:	2bff      	cmp	r3, #255	; 0xff
 801fefc:	d901      	bls.n	801ff02 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
		return false; // Packet size too large
 801fefe:	2300      	movs	r3, #0
 801ff00:	e037      	b.n	801ff72 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801ff02:	687a      	ldr	r2, [r7, #4]
 801ff04:	697b      	ldr	r3, [r7, #20]
 801ff06:	3380      	adds	r3, #128	; 0x80
 801ff08:	009b      	lsls	r3, r3, #2
 801ff0a:	4413      	add	r3, r2
 801ff0c:	685b      	ldr	r3, [r3, #4]
 801ff0e:	2b00      	cmp	r3, #0
 801ff10:	d015      	beq.n	801ff3e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801ff12:	687a      	ldr	r2, [r7, #4]
 801ff14:	697b      	ldr	r3, [r7, #20]
 801ff16:	3380      	adds	r3, #128	; 0x80
 801ff18:	009b      	lsls	r3, r3, #2
 801ff1a:	4413      	add	r3, r2
 801ff1c:	685b      	ldr	r3, [r3, #4]
 801ff1e:	685b      	ldr	r3, [r3, #4]
 801ff20:	68fa      	ldr	r2, [r7, #12]
 801ff22:	429a      	cmp	r2, r3
 801ff24:	d101      	bne.n	801ff2a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x66>
			return false; // Packet type already defined
 801ff26:	2300      	movs	r3, #0
 801ff28:	e023      	b.n	801ff72 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
		insertion_point++;
 801ff2a:	697b      	ldr	r3, [r7, #20]
 801ff2c:	3301      	adds	r3, #1
 801ff2e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801ff30:	697b      	ldr	r3, [r7, #20]
 801ff32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ff36:	d1e4      	bne.n	801ff02 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
			insertion_point = 0;
 801ff38:	2300      	movs	r3, #0
 801ff3a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801ff3c:	e7e1      	b.n	801ff02 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801ff3e:	78fb      	ldrb	r3, [r7, #3]
 801ff40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ff44:	00db      	lsls	r3, r3, #3
 801ff46:	687a      	ldr	r2, [r7, #4]
 801ff48:	4413      	add	r3, r2
 801ff4a:	3304      	adds	r3, #4
 801ff4c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801ff4e:	68bb      	ldr	r3, [r7, #8]
 801ff50:	78fa      	ldrb	r2, [r7, #3]
 801ff52:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801ff54:	693b      	ldr	r3, [r7, #16]
 801ff56:	b2da      	uxtb	r2, r3
 801ff58:	68bb      	ldr	r3, [r7, #8]
 801ff5a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801ff5c:	68bb      	ldr	r3, [r7, #8]
 801ff5e:	68fa      	ldr	r2, [r7, #12]
 801ff60:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801ff62:	687a      	ldr	r2, [r7, #4]
 801ff64:	697b      	ldr	r3, [r7, #20]
 801ff66:	3380      	adds	r3, #128	; 0x80
 801ff68:	009b      	lsls	r3, r3, #2
 801ff6a:	4413      	add	r3, r2
 801ff6c:	68ba      	ldr	r2, [r7, #8]
 801ff6e:	605a      	str	r2, [r3, #4]
	return true;
 801ff70:	2301      	movs	r3, #1
}
 801ff72:	4618      	mov	r0, r3
 801ff74:	3718      	adds	r7, #24
 801ff76:	46bd      	mov	sp, r7
 801ff78:	bd80      	pop	{r7, pc}
 801ff7a:	bf00      	nop
 801ff7c:	08028388 	.word	0x08028388

0801ff80 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801ff80:	b580      	push	{r7, lr}
 801ff82:	b086      	sub	sp, #24
 801ff84:	af00      	add	r7, sp, #0
 801ff86:	6078      	str	r0, [r7, #4]
 801ff88:	460b      	mov	r3, r1
 801ff8a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801ff8c:	2304      	movs	r3, #4
 801ff8e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801ff90:	4829      	ldr	r0, [pc, #164]	; (8020038 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xb8>)
 801ff92:	f7ff fb57 	bl	801f644 <_ZNKSt9type_info9hash_codeEv>
 801ff96:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 801ff98:	68fb      	ldr	r3, [r7, #12]
 801ff9a:	b2db      	uxtb	r3, r3
 801ff9c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801ff9e:	78fb      	ldrb	r3, [r7, #3]
 801ffa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ffa4:	687a      	ldr	r2, [r7, #4]
 801ffa6:	00db      	lsls	r3, r3, #3
 801ffa8:	4413      	add	r3, r2
 801ffaa:	689b      	ldr	r3, [r3, #8]
 801ffac:	2b00      	cmp	r3, #0
 801ffae:	d001      	beq.n	801ffb4 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x34>
		return false; // Packet ID already in use
 801ffb0:	2300      	movs	r3, #0
 801ffb2:	e03c      	b.n	802002e <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801ffb4:	693b      	ldr	r3, [r7, #16]
 801ffb6:	2bff      	cmp	r3, #255	; 0xff
 801ffb8:	d901      	bls.n	801ffbe <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
		return false; // Packet size too large
 801ffba:	2300      	movs	r3, #0
 801ffbc:	e037      	b.n	802002e <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801ffbe:	687a      	ldr	r2, [r7, #4]
 801ffc0:	697b      	ldr	r3, [r7, #20]
 801ffc2:	3380      	adds	r3, #128	; 0x80
 801ffc4:	009b      	lsls	r3, r3, #2
 801ffc6:	4413      	add	r3, r2
 801ffc8:	685b      	ldr	r3, [r3, #4]
 801ffca:	2b00      	cmp	r3, #0
 801ffcc:	d015      	beq.n	801fffa <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801ffce:	687a      	ldr	r2, [r7, #4]
 801ffd0:	697b      	ldr	r3, [r7, #20]
 801ffd2:	3380      	adds	r3, #128	; 0x80
 801ffd4:	009b      	lsls	r3, r3, #2
 801ffd6:	4413      	add	r3, r2
 801ffd8:	685b      	ldr	r3, [r3, #4]
 801ffda:	685b      	ldr	r3, [r3, #4]
 801ffdc:	68fa      	ldr	r2, [r7, #12]
 801ffde:	429a      	cmp	r2, r3
 801ffe0:	d101      	bne.n	801ffe6 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x66>
			return false; // Packet type already defined
 801ffe2:	2300      	movs	r3, #0
 801ffe4:	e023      	b.n	802002e <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0xae>
		insertion_point++;
 801ffe6:	697b      	ldr	r3, [r7, #20]
 801ffe8:	3301      	adds	r3, #1
 801ffea:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 801ffec:	697b      	ldr	r3, [r7, #20]
 801ffee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fff2:	d1e4      	bne.n	801ffbe <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
			insertion_point = 0;
 801fff4:	2300      	movs	r3, #0
 801fff6:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801fff8:	e7e1      	b.n	801ffbe <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801fffa:	78fb      	ldrb	r3, [r7, #3]
 801fffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8020000:	00db      	lsls	r3, r3, #3
 8020002:	687a      	ldr	r2, [r7, #4]
 8020004:	4413      	add	r3, r2
 8020006:	3304      	adds	r3, #4
 8020008:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 802000a:	68bb      	ldr	r3, [r7, #8]
 802000c:	78fa      	ldrb	r2, [r7, #3]
 802000e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8020010:	693b      	ldr	r3, [r7, #16]
 8020012:	b2da      	uxtb	r2, r3
 8020014:	68bb      	ldr	r3, [r7, #8]
 8020016:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8020018:	68bb      	ldr	r3, [r7, #8]
 802001a:	68fa      	ldr	r2, [r7, #12]
 802001c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 802001e:	687a      	ldr	r2, [r7, #4]
 8020020:	697b      	ldr	r3, [r7, #20]
 8020022:	3380      	adds	r3, #128	; 0x80
 8020024:	009b      	lsls	r3, r3, #2
 8020026:	4413      	add	r3, r2
 8020028:	68ba      	ldr	r2, [r7, #8]
 802002a:	605a      	str	r2, [r3, #4]
	return true;
 802002c:	2301      	movs	r3, #1
}
 802002e:	4618      	mov	r0, r3
 8020030:	3718      	adds	r7, #24
 8020032:	46bd      	mov	sp, r7
 8020034:	bd80      	pop	{r7, pc}
 8020036:	bf00      	nop
 8020038:	08028368 	.word	0x08028368

0802003c <_ZN10MessageBus4sendEP16PacketDefinitionPh>:

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
 802003c:	b580      	push	{r7, lr}
 802003e:	b086      	sub	sp, #24
 8020040:	af00      	add	r7, sp, #0
 8020042:	60f8      	str	r0, [r7, #12]
 8020044:	60b9      	str	r1, [r7, #8]
 8020046:	607a      	str	r2, [r7, #4]
	if(def != nullptr) {
 8020048:	68bb      	ldr	r3, [r7, #8]
 802004a:	2b00      	cmp	r3, #0
 802004c:	d031      	beq.n	80200b2 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x76>
		uint32_t data_bytes_written = 0;
 802004e:	2300      	movs	r3, #0
 8020050:	617b      	str	r3, [r7, #20]

		while(data_bytes_written < def->size) {
 8020052:	68bb      	ldr	r3, [r7, #8]
 8020054:	785b      	ldrb	r3, [r3, #1]
 8020056:	461a      	mov	r2, r3
 8020058:	697b      	ldr	r3, [r7, #20]
 802005a:	4293      	cmp	r3, r2
 802005c:	d227      	bcs.n	80200ae <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x72>
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 802005e:	68fb      	ldr	r3, [r7, #12]
 8020060:	681b      	ldr	r3, [r3, #0]
 8020062:	3308      	adds	r3, #8
 8020064:	681b      	ldr	r3, [r3, #0]
 8020066:	68b9      	ldr	r1, [r7, #8]
 8020068:	2201      	movs	r2, #1
 802006a:	68f8      	ldr	r0, [r7, #12]
 802006c:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 802006e:	68fb      	ldr	r3, [r7, #12]
 8020070:	681b      	ldr	r3, [r3, #0]
 8020072:	3308      	adds	r3, #8
 8020074:	681b      	ldr	r3, [r3, #0]
 8020076:	6879      	ldr	r1, [r7, #4]
 8020078:	697a      	ldr	r2, [r7, #20]
 802007a:	4411      	add	r1, r2
 802007c:	68ba      	ldr	r2, [r7, #8]
 802007e:	7852      	ldrb	r2, [r2, #1]
 8020080:	4610      	mov	r0, r2
 8020082:	697a      	ldr	r2, [r7, #20]
 8020084:	1a82      	subs	r2, r0, r2
 8020086:	68f8      	ldr	r0, [r7, #12]
 8020088:	4798      	blx	r3
 802008a:	4603      	mov	r3, r0
 802008c:	613b      	str	r3, [r7, #16]

			if(new_bytes == 0) {
 802008e:	693b      	ldr	r3, [r7, #16]
 8020090:	2b00      	cmp	r3, #0
 8020092:	d101      	bne.n	8020098 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x5c>
				return false;
 8020094:	2300      	movs	r3, #0
 8020096:	e00d      	b.n	80200b4 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
			} else {
				transmit();
 8020098:	68fb      	ldr	r3, [r7, #12]
 802009a:	681b      	ldr	r3, [r3, #0]
 802009c:	330c      	adds	r3, #12
 802009e:	681b      	ldr	r3, [r3, #0]
 80200a0:	68f8      	ldr	r0, [r7, #12]
 80200a2:	4798      	blx	r3
				data_bytes_written += new_bytes;
 80200a4:	697a      	ldr	r2, [r7, #20]
 80200a6:	693b      	ldr	r3, [r7, #16]
 80200a8:	4413      	add	r3, r2
 80200aa:	617b      	str	r3, [r7, #20]
		while(data_bytes_written < def->size) {
 80200ac:	e7d1      	b.n	8020052 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
			}
		}

		return true;
 80200ae:	2301      	movs	r3, #1
 80200b0:	e000      	b.n	80200b4 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
	}

	return false;
 80200b2:	2300      	movs	r3, #0
}
 80200b4:	4618      	mov	r0, r3
 80200b6:	3718      	adds	r7, #24
 80200b8:	46bd      	mov	sp, r7
 80200ba:	bd80      	pop	{r7, pc}

080200bc <_ZN10MessageBus7receiveEhPhm>:
 * Handles the reception of a message.
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 80200bc:	b580      	push	{r7, lr}
 80200be:	b088      	sub	sp, #32
 80200c0:	af00      	add	r7, sp, #0
 80200c2:	60f8      	str	r0, [r7, #12]
 80200c4:	607a      	str	r2, [r7, #4]
 80200c6:	603b      	str	r3, [r7, #0]
 80200c8:	460b      	mov	r3, r1
 80200ca:	72fb      	strb	r3, [r7, #11]
	if(length > 0) {
 80200cc:	683b      	ldr	r3, [r7, #0]
 80200ce:	2b00      	cmp	r3, #0
 80200d0:	d075      	beq.n	80201be <_ZN10MessageBus7receiveEhPhm+0x102>
		// Safe-cast verification
		uint8_t packet_id = *pointer++;
 80200d2:	687b      	ldr	r3, [r7, #4]
 80200d4:	1c5a      	adds	r2, r3, #1
 80200d6:	607a      	str	r2, [r7, #4]
 80200d8:	781b      	ldrb	r3, [r3, #0]
 80200da:	777b      	strb	r3, [r7, #29]

		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 80200dc:	7f7b      	ldrb	r3, [r7, #29]
 80200de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80200e2:	00db      	lsls	r3, r3, #3
 80200e4:	68fa      	ldr	r2, [r7, #12]
 80200e6:	4413      	add	r3, r2
 80200e8:	3304      	adds	r3, #4
 80200ea:	61bb      	str	r3, [r7, #24]
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id];
 80200ec:	7afb      	ldrb	r3, [r7, #11]
 80200ee:	3306      	adds	r3, #6
 80200f0:	021b      	lsls	r3, r3, #8
 80200f2:	68fa      	ldr	r2, [r7, #12]
 80200f4:	4413      	add	r3, r2
 80200f6:	3304      	adds	r3, #4
 80200f8:	617b      	str	r3, [r7, #20]

		if(indexable_buffer->index + length > max_packet_size) {
 80200fa:	697b      	ldr	r3, [r7, #20]
 80200fc:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8020100:	461a      	mov	r2, r3
 8020102:	683b      	ldr	r3, [r7, #0]
 8020104:	4413      	add	r3, r2
 8020106:	2bff      	cmp	r3, #255	; 0xff
 8020108:	d904      	bls.n	8020114 <_ZN10MessageBus7receiveEhPhm+0x58>
			indexable_buffer->index = 0; // Corrupted packet
 802010a:	697b      	ldr	r3, [r7, #20]
 802010c:	2200      	movs	r2, #0
 802010e:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			return;
 8020112:	e054      	b.n	80201be <_ZN10MessageBus7receiveEhPhm+0x102>
		}

		for(uint16_t i = 0; i < length - 1; i++) {
 8020114:	2300      	movs	r3, #0
 8020116:	83fb      	strh	r3, [r7, #30]
 8020118:	8bfa      	ldrh	r2, [r7, #30]
 802011a:	683b      	ldr	r3, [r7, #0]
 802011c:	3b01      	subs	r3, #1
 802011e:	429a      	cmp	r2, r3
 8020120:	d211      	bcs.n	8020146 <_ZN10MessageBus7receiveEhPhm+0x8a>
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	1c5a      	adds	r2, r3, #1
 8020126:	607a      	str	r2, [r7, #4]
 8020128:	697a      	ldr	r2, [r7, #20]
 802012a:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 802012e:	1c51      	adds	r1, r2, #1
 8020130:	b2c8      	uxtb	r0, r1
 8020132:	6979      	ldr	r1, [r7, #20]
 8020134:	f881 00ff 	strb.w	r0, [r1, #255]	; 0xff
 8020138:	7819      	ldrb	r1, [r3, #0]
 802013a:	697b      	ldr	r3, [r7, #20]
 802013c:	5499      	strb	r1, [r3, r2]
		for(uint16_t i = 0; i < length - 1; i++) {
 802013e:	8bfb      	ldrh	r3, [r7, #30]
 8020140:	3301      	adds	r3, #1
 8020142:	83fb      	strh	r3, [r7, #30]
 8020144:	e7e8      	b.n	8020118 <_ZN10MessageBus7receiveEhPhm+0x5c>
		}

		if(indexable_buffer->index >= def->size) {
 8020146:	697b      	ldr	r3, [r7, #20]
 8020148:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 802014c:	69bb      	ldr	r3, [r7, #24]
 802014e:	785b      	ldrb	r3, [r3, #1]
 8020150:	429a      	cmp	r2, r3
 8020152:	d334      	bcc.n	80201be <_ZN10MessageBus7receiveEhPhm+0x102>
			// Packet is complete. Forward buffer to handler.

			if(handlers[packet_id & 0b00111111] != nullptr) {
 8020154:	7f7b      	ldrb	r3, [r7, #29]
 8020156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802015a:	68fa      	ldr	r2, [r7, #12]
 802015c:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8020160:	009b      	lsls	r3, r3, #2
 8020162:	4413      	add	r3, r2
 8020164:	685b      	ldr	r3, [r3, #4]
 8020166:	2b00      	cmp	r3, #0
 8020168:	d00c      	beq.n	8020184 <_ZN10MessageBus7receiveEhPhm+0xc8>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer);
 802016a:	7f7b      	ldrb	r3, [r7, #29]
 802016c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8020170:	68fa      	ldr	r2, [r7, #12]
 8020172:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8020176:	009b      	lsls	r3, r3, #2
 8020178:	4413      	add	r3, r2
 802017a:	685b      	ldr	r3, [r3, #4]
 802017c:	6979      	ldr	r1, [r7, #20]
 802017e:	7afa      	ldrb	r2, [r7, #11]
 8020180:	4610      	mov	r0, r2
 8020182:	4798      	blx	r3
			}

			if(forwarders[packet_id & 0b00111111] != nullptr) {
 8020184:	7f7b      	ldrb	r3, [r7, #29]
 8020186:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802018a:	68fa      	ldr	r2, [r7, #12]
 802018c:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 8020190:	009b      	lsls	r3, r3, #2
 8020192:	4413      	add	r3, r2
 8020194:	685b      	ldr	r3, [r3, #4]
 8020196:	2b00      	cmp	r3, #0
 8020198:	d00d      	beq.n	80201b6 <_ZN10MessageBus7receiveEhPhm+0xfa>
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer);
 802019a:	7f7b      	ldrb	r3, [r7, #29]
 802019c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80201a0:	68fa      	ldr	r2, [r7, #12]
 80201a2:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80201a6:	009b      	lsls	r3, r3, #2
 80201a8:	4413      	add	r3, r2
 80201aa:	685b      	ldr	r3, [r3, #4]
 80201ac:	697a      	ldr	r2, [r7, #20]
 80201ae:	69b9      	ldr	r1, [r7, #24]
 80201b0:	4618      	mov	r0, r3
 80201b2:	f7ff ff43 	bl	802003c <_ZN10MessageBus4sendEP16PacketDefinitionPh>
			}

			indexable_buffer->index = 0;
 80201b6:	697b      	ldr	r3, [r7, #20]
 80201b8:	2200      	movs	r2, #0
 80201ba:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		}
	}
}
 80201be:	3720      	adds	r7, #32
 80201c0:	46bd      	mov	sp, r7
 80201c2:	bd80      	pop	{r7, pc}

080201c4 <_ZN10MessageBus8retrieveEj>:

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
 80201c4:	b480      	push	{r7}
 80201c6:	b085      	sub	sp, #20
 80201c8:	af00      	add	r7, sp, #0
 80201ca:	6078      	str	r0, [r7, #4]
 80201cc:	6039      	str	r1, [r7, #0]
	uint32_t searchPoint = hash % 256;
 80201ce:	683b      	ldr	r3, [r7, #0]
 80201d0:	b2db      	uxtb	r3, r3
 80201d2:	60fb      	str	r3, [r7, #12]
	uint32_t searchStart = searchPoint;
 80201d4:	68fb      	ldr	r3, [r7, #12]
 80201d6:	60bb      	str	r3, [r7, #8]

	while(definitions_by_type[searchPoint] != nullptr) {
 80201d8:	687a      	ldr	r2, [r7, #4]
 80201da:	68fb      	ldr	r3, [r7, #12]
 80201dc:	3380      	adds	r3, #128	; 0x80
 80201de:	009b      	lsls	r3, r3, #2
 80201e0:	4413      	add	r3, r2
 80201e2:	685b      	ldr	r3, [r3, #4]
 80201e4:	2b00      	cmp	r3, #0
 80201e6:	d01f      	beq.n	8020228 <_ZN10MessageBus8retrieveEj+0x64>
		if(definitions_by_type[searchPoint]->hash == hash) {
 80201e8:	687a      	ldr	r2, [r7, #4]
 80201ea:	68fb      	ldr	r3, [r7, #12]
 80201ec:	3380      	adds	r3, #128	; 0x80
 80201ee:	009b      	lsls	r3, r3, #2
 80201f0:	4413      	add	r3, r2
 80201f2:	685b      	ldr	r3, [r3, #4]
 80201f4:	685b      	ldr	r3, [r3, #4]
 80201f6:	683a      	ldr	r2, [r7, #0]
 80201f8:	429a      	cmp	r2, r3
 80201fa:	d106      	bne.n	802020a <_ZN10MessageBus8retrieveEj+0x46>
			return definitions_by_type[searchPoint];
 80201fc:	687a      	ldr	r2, [r7, #4]
 80201fe:	68fb      	ldr	r3, [r7, #12]
 8020200:	3380      	adds	r3, #128	; 0x80
 8020202:	009b      	lsls	r3, r3, #2
 8020204:	4413      	add	r3, r2
 8020206:	685b      	ldr	r3, [r3, #4]
 8020208:	e00f      	b.n	802022a <_ZN10MessageBus8retrieveEj+0x66>
		}

		searchPoint++;
 802020a:	68fb      	ldr	r3, [r7, #12]
 802020c:	3301      	adds	r3, #1
 802020e:	60fb      	str	r3, [r7, #12]

		if(searchPoint == 256) {
 8020210:	68fb      	ldr	r3, [r7, #12]
 8020212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020216:	d101      	bne.n	802021c <_ZN10MessageBus8retrieveEj+0x58>
			searchPoint = 0;
 8020218:	2300      	movs	r3, #0
 802021a:	60fb      	str	r3, [r7, #12]
		}

		if(searchStart == searchPoint) {
 802021c:	68ba      	ldr	r2, [r7, #8]
 802021e:	68fb      	ldr	r3, [r7, #12]
 8020220:	429a      	cmp	r2, r3
 8020222:	d000      	beq.n	8020226 <_ZN10MessageBus8retrieveEj+0x62>
	while(definitions_by_type[searchPoint] != nullptr) {
 8020224:	e7d8      	b.n	80201d8 <_ZN10MessageBus8retrieveEj+0x14>
			break; // No packet definition matching the given template type
 8020226:	bf00      	nop
		}
	}

	return nullptr;
 8020228:	2300      	movs	r3, #0
}
 802022a:	4618      	mov	r0, r3
 802022c:	3714      	adds	r7, #20
 802022e:	46bd      	mov	sp, r7
 8020230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020234:	4770      	bx	lr
	...

08020238 <_ZN10NetworkBusC1EP8IODriver>:


#include "NetworkBus.h"
#include "Protocol/Protocol.h"

NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 8020238:	b580      	push	{r7, lr}
 802023a:	b082      	sub	sp, #8
 802023c:	af00      	add	r7, sp, #0
 802023e:	6078      	str	r0, [r7, #4]
 8020240:	6039      	str	r1, [r7, #0]
 8020242:	6878      	ldr	r0, [r7, #4]
 8020244:	687b      	ldr	r3, [r7, #4]
 8020246:	f644 0211 	movw	r2, #18449	; 0x4811
 802024a:	441a      	add	r2, r3
 802024c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020250:	6839      	ldr	r1, [r7, #0]
 8020252:	f7fd fedf 	bl	801e014 <_ZN5IOBusC1EP8IODriverPhm>
 8020256:	4a24      	ldr	r2, [pc, #144]	; (80202e8 <_ZN10NetworkBusC1EP8IODriver+0xb0>)
 8020258:	687b      	ldr	r3, [r7, #4]
 802025a:	601a      	str	r2, [r3, #0]
	define<PingPacket>(0);
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	2100      	movs	r1, #0
 8020260:	4618      	mov	r0, r3
 8020262:	f7ff fa0b 	bl	801f67c <_ZN10MessageBus6defineI10PingPacketEEbh>
	define<RequestPacket>(1);
 8020266:	687b      	ldr	r3, [r7, #4]
 8020268:	2101      	movs	r1, #1
 802026a:	4618      	mov	r0, r3
 802026c:	f7ff fa64 	bl	801f738 <_ZN10MessageBus6defineI13RequestPacketEEbh>
	define<ResponsePacket>(2);
 8020270:	687b      	ldr	r3, [r7, #4]
 8020272:	2102      	movs	r1, #2
 8020274:	4618      	mov	r0, r3
 8020276:	f7ff fabd 	bl	801f7f4 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
	define<ProgressPacket>(3);
 802027a:	687b      	ldr	r3, [r7, #4]
 802027c:	2103      	movs	r1, #3
 802027e:	4618      	mov	r0, r3
 8020280:	f7ff fb16 	bl	801f8b0 <_ZN10MessageBus6defineI14ProgressPacketEEbh>
	define<DataPacket>(4);
 8020284:	687b      	ldr	r3, [r7, #4]
 8020286:	2104      	movs	r1, #4
 8020288:	4618      	mov	r0, r3
 802028a:	f7ff fb6f 	bl	801f96c <_ZN10MessageBus6defineI10DataPacketEEbh>
	define<Avionics_BaroTempPacket>(5);
 802028e:	687b      	ldr	r3, [r7, #4]
 8020290:	2105      	movs	r1, #5
 8020292:	4618      	mov	r0, r3
 8020294:	f7ff fc26 	bl	801fae4 <_ZN10MessageBus6defineI23Avionics_BaroTempPacketEEbh>
	define<Avionics_AccelMagPacket>(6);
 8020298:	687b      	ldr	r3, [r7, #4]
 802029a:	2106      	movs	r1, #6
 802029c:	4618      	mov	r0, r3
 802029e:	f7ff fc99 	bl	801fbd4 <_ZN10MessageBus6defineI23Avionics_AccelMagPacketEEbh>
	define<Handling_GripperPacket>(7);
 80202a2:	687b      	ldr	r3, [r7, #4]
 80202a4:	2107      	movs	r1, #7
 80202a6:	4618      	mov	r0, r3
 80202a8:	f7ff fcf2 	bl	801fc90 <_ZN10MessageBus6defineI22Handling_GripperPacketEEbh>
	define<Power_VoltagePacket>(8);
 80202ac:	687b      	ldr	r3, [r7, #4]
 80202ae:	2108      	movs	r1, #8
 80202b0:	4618      	mov	r0, r3
 80202b2:	f7ff fd4b 	bl	801fd4c <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>
	define<Power_CurrentPacket>(9);
 80202b6:	687b      	ldr	r3, [r7, #4]
 80202b8:	2109      	movs	r1, #9
 80202ba:	4618      	mov	r0, r3
 80202bc:	f7ff fda4 	bl	801fe08 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>
	define<Power_SystemPacket>(10);
 80202c0:	687b      	ldr	r3, [r7, #4]
 80202c2:	210a      	movs	r1, #10
 80202c4:	4618      	mov	r0, r3
 80202c6:	f7ff fdfd 	bl	801fec4 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>
	define<Science_MeasurePacket>(11);
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	210b      	movs	r1, #11
 80202ce:	4618      	mov	r0, r3
 80202d0:	f7ff fe56 	bl	801ff80 <_ZN10MessageBus6defineI21Science_MeasurePacketEEbh>
	define<ErrorPacket>(63);
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	213f      	movs	r1, #63	; 0x3f
 80202d8:	4618      	mov	r0, r3
 80202da:	f7ff fba5 	bl	801fa28 <_ZN10MessageBus6defineI11ErrorPacketEEbh>
}
 80202de:	687b      	ldr	r3, [r7, #4]
 80202e0:	4618      	mov	r0, r3
 80202e2:	3708      	adds	r7, #8
 80202e4:	46bd      	mov	sp, r7
 80202e6:	bd80      	pop	{r7, pc}
 80202e8:	080284f4 	.word	0x080284f4

080202ec <_ZN10NetworkBusD1Ev>:
#include "IOBus.h"

#define NETWORK_FRAME_SIZE 256


class NetworkBus : public IOBus {
 80202ec:	b580      	push	{r7, lr}
 80202ee:	b082      	sub	sp, #8
 80202f0:	af00      	add	r7, sp, #0
 80202f2:	6078      	str	r0, [r7, #4]
 80202f4:	4a05      	ldr	r2, [pc, #20]	; (802030c <_ZN10NetworkBusD1Ev+0x20>)
 80202f6:	687b      	ldr	r3, [r7, #4]
 80202f8:	601a      	str	r2, [r3, #0]
 80202fa:	687b      	ldr	r3, [r7, #4]
 80202fc:	4618      	mov	r0, r3
 80202fe:	f7fe ff09 	bl	801f114 <_ZN5IOBusD1Ev>
 8020302:	687b      	ldr	r3, [r7, #4]
 8020304:	4618      	mov	r0, r3
 8020306:	3708      	adds	r7, #8
 8020308:	46bd      	mov	sp, r7
 802030a:	bd80      	pop	{r7, pc}
 802030c:	080284f4 	.word	0x080284f4

08020310 <_ZN10NetworkBusD0Ev>:
 8020310:	b580      	push	{r7, lr}
 8020312:	b082      	sub	sp, #8
 8020314:	af00      	add	r7, sp, #0
 8020316:	6078      	str	r0, [r7, #4]
 8020318:	6878      	ldr	r0, [r7, #4]
 802031a:	f7ff ffe7 	bl	80202ec <_ZN10NetworkBusD1Ev>
 802031e:	f644 1114 	movw	r1, #18708	; 0x4914
 8020322:	6878      	ldr	r0, [r7, #4]
 8020324:	f000 fc5c 	bl	8020be0 <_ZdlPvj>
 8020328:	687b      	ldr	r3, [r7, #4]
 802032a:	4618      	mov	r0, r3
 802032c:	3708      	adds	r7, #8
 802032e:	46bd      	mov	sp, r7
 8020330:	bd80      	pop	{r7, pc}

08020332 <_ZN14WatchdogThread4initEv>:
#include "iwdg.h"

#include "Debug/Debug.h"
#include "usart.h"

void WatchdogThread::init() {
 8020332:	b480      	push	{r7}
 8020334:	b083      	sub	sp, #12
 8020336:	af00      	add	r7, sp, #0
 8020338:	6078      	str	r0, [r7, #4]

}
 802033a:	bf00      	nop
 802033c:	370c      	adds	r7, #12
 802033e:	46bd      	mov	sp, r7
 8020340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020344:	4770      	bx	lr

08020346 <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 8020346:	b580      	push	{r7, lr}
 8020348:	b082      	sub	sp, #8
 802034a:	af00      	add	r7, sp, #0
 802034c:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 802034e:	687b      	ldr	r3, [r7, #4]
 8020350:	68db      	ldr	r3, [r3, #12]
 8020352:	4618      	mov	r0, r3
 8020354:	f7e6 fc42 	bl	8006bdc <HAL_IWDG_Refresh>
	osDelay(100);
 8020358:	2064      	movs	r0, #100	; 0x64
 802035a:	f7eb f95a 	bl	800b612 <osDelay>
}
 802035e:	bf00      	nop
 8020360:	3708      	adds	r7, #8
 8020362:	46bd      	mov	sp, r7
 8020364:	bd80      	pop	{r7, pc}
	...

08020368 <_ZN8BaroData8toStringEPc>:
struct BaroData {
	float temperature;
	float pressure;
	float humidity;

	char* toString(char* buffer) {
 8020368:	b580      	push	{r7, lr}
 802036a:	b086      	sub	sp, #24
 802036c:	af04      	add	r7, sp, #16
 802036e:	6078      	str	r0, [r7, #4]
 8020370:	6039      	str	r1, [r7, #0]
		sprintf(buffer, "Tmp: %f, Prs: %f, Hum: %f", temperature, pressure, humidity);
 8020372:	687b      	ldr	r3, [r7, #4]
 8020374:	edd3 7a00 	vldr	s15, [r3]
 8020378:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 802037c:	687b      	ldr	r3, [r7, #4]
 802037e:	edd3 7a01 	vldr	s15, [r3, #4]
 8020382:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8020386:	687b      	ldr	r3, [r7, #4]
 8020388:	edd3 6a02 	vldr	s13, [r3, #8]
 802038c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8020390:	ed8d 6b02 	vstr	d6, [sp, #8]
 8020394:	ed8d 7b00 	vstr	d7, [sp]
 8020398:	ec53 2b15 	vmov	r2, r3, d5
 802039c:	4904      	ldr	r1, [pc, #16]	; (80203b0 <_ZN8BaroData8toStringEPc+0x48>)
 802039e:	6838      	ldr	r0, [r7, #0]
 80203a0:	f001 fd58 	bl	8021e54 <siprintf>
		return buffer;
 80203a4:	683b      	ldr	r3, [r7, #0]
	}
 80203a6:	4618      	mov	r0, r3
 80203a8:	3708      	adds	r7, #8
 80203aa:	46bd      	mov	sp, r7
 80203ac:	bd80      	pop	{r7, pc}
 80203ae:	bf00      	nop
 80203b0:	08027ea4 	.word	0x08027ea4

080203b4 <_ZN8BaroData7toArrayEPf>:

	float* toArray(float* buffer) {
 80203b4:	b480      	push	{r7}
 80203b6:	b083      	sub	sp, #12
 80203b8:	af00      	add	r7, sp, #0
 80203ba:	6078      	str	r0, [r7, #4]
 80203bc:	6039      	str	r1, [r7, #0]
		buffer[0] = pressure;
 80203be:	687b      	ldr	r3, [r7, #4]
 80203c0:	685a      	ldr	r2, [r3, #4]
 80203c2:	683b      	ldr	r3, [r7, #0]
 80203c4:	601a      	str	r2, [r3, #0]
		buffer[1] = temperature;
 80203c6:	683b      	ldr	r3, [r7, #0]
 80203c8:	3304      	adds	r3, #4
 80203ca:	687a      	ldr	r2, [r7, #4]
 80203cc:	6812      	ldr	r2, [r2, #0]
 80203ce:	601a      	str	r2, [r3, #0]
		buffer[2] = humidity;
 80203d0:	683b      	ldr	r3, [r7, #0]
 80203d2:	3308      	adds	r3, #8
 80203d4:	687a      	ldr	r2, [r7, #4]
 80203d6:	6892      	ldr	r2, [r2, #8]
 80203d8:	601a      	str	r2, [r3, #0]
		return buffer;
 80203da:	683b      	ldr	r3, [r7, #0]
	}
 80203dc:	4618      	mov	r0, r3
 80203de:	370c      	adds	r7, #12
 80203e0:	46bd      	mov	sp, r7
 80203e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203e6:	4770      	bx	lr

080203e8 <_ZN15BarometerThread4initEv>:
#include "Debug/Debug.h"


static char cbuf[128];

void BarometerThread::init() {
 80203e8:	b580      	push	{r7, lr}
 80203ea:	b082      	sub	sp, #8
 80203ec:	af00      	add	r7, sp, #0
 80203ee:	6078      	str	r0, [r7, #4]
	bmp280_init_default_params(&bmp280.params);
 80203f0:	687b      	ldr	r3, [r7, #4]
 80203f2:	3338      	adds	r3, #56	; 0x38
 80203f4:	4618      	mov	r0, r3
 80203f6:	f7fc ffaa 	bl	801d34e <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80203fa:	687b      	ldr	r3, [r7, #4]
 80203fc:	2276      	movs	r2, #118	; 0x76
 80203fe:	861a      	strh	r2, [r3, #48]	; 0x30
	bmp280.i2c = hi2c;
 8020400:	687b      	ldr	r3, [r7, #4]
 8020402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8020408:	b672      	cpsid	i
}
 802040a:	bf00      	nop

	__disable_irq();
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 802040c:	687b      	ldr	r3, [r7, #4]
 802040e:	f103 020c 	add.w	r2, r3, #12
 8020412:	687b      	ldr	r3, [r7, #4]
 8020414:	3338      	adds	r3, #56	; 0x38
 8020416:	4619      	mov	r1, r3
 8020418:	4610      	mov	r0, r2
 802041a:	f7fd f912 	bl	801d642 <bmp280_init>
 802041e:	4603      	mov	r3, r0
 8020420:	f083 0301 	eor.w	r3, r3, #1
 8020424:	b2db      	uxtb	r3, r3
 8020426:	2b00      	cmp	r3, #0
 8020428:	d00b      	beq.n	8020442 <_ZN15BarometerThread4initEv+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
 802042a:	b662      	cpsie	i
}
 802042c:	bf00      	nop
		__enable_irq();
		println("BMP280 initialization failed");
 802042e:	687b      	ldr	r3, [r7, #4]
 8020430:	4909      	ldr	r1, [pc, #36]	; (8020458 <_ZN15BarometerThread4initEv+0x70>)
 8020432:	4618      	mov	r0, r3
 8020434:	f000 fa22 	bl	802087c <_ZN6Thread7printlnEPKcz>
	  	osDelay(500);
 8020438:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 802043c:	f7eb f8e9 	bl	800b612 <osDelay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8020440:	e7e4      	b.n	802040c <_ZN15BarometerThread4initEv+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
 8020442:	b662      	cpsie	i
}
 8020444:	bf00      	nop
	}
	__enable_irq();

	println("BMP280 initialized");
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	4904      	ldr	r1, [pc, #16]	; (802045c <_ZN15BarometerThread4initEv+0x74>)
 802044a:	4618      	mov	r0, r3
 802044c:	f000 fa16 	bl	802087c <_ZN6Thread7printlnEPKcz>
}
 8020450:	bf00      	nop
 8020452:	3708      	adds	r7, #8
 8020454:	46bd      	mov	sp, r7
 8020456:	bd80      	pop	{r7, pc}
 8020458:	08027ec0 	.word	0x08027ec0
 802045c:	08027ee0 	.word	0x08027ee0

08020460 <_ZN15BarometerThread4loopEv>:

void BarometerThread::loop() {
 8020460:	b590      	push	{r4, r7, lr}
 8020462:	b089      	sub	sp, #36	; 0x24
 8020464:	af00      	add	r7, sp, #0
 8020466:	6078      	str	r0, [r7, #4]
	BaroData data;

	bmp280_read_float(&bmp280, &data.temperature, &data.pressure, &data.humidity);
 8020468:	687b      	ldr	r3, [r7, #4]
 802046a:	f103 000c 	add.w	r0, r3, #12
 802046e:	f107 0314 	add.w	r3, r7, #20
 8020472:	f103 0408 	add.w	r4, r3, #8
 8020476:	f107 0314 	add.w	r3, r7, #20
 802047a:	1d1a      	adds	r2, r3, #4
 802047c:	f107 0114 	add.w	r1, r7, #20
 8020480:	4623      	mov	r3, r4
 8020482:	f7fd fc4d 	bl	801dd20 <bmp280_read_float>

	println("%s", data.toString(cbuf));
 8020486:	687c      	ldr	r4, [r7, #4]
 8020488:	f107 0314 	add.w	r3, r7, #20
 802048c:	490f      	ldr	r1, [pc, #60]	; (80204cc <_ZN15BarometerThread4loopEv+0x6c>)
 802048e:	4618      	mov	r0, r3
 8020490:	f7ff ff6a 	bl	8020368 <_ZN8BaroData8toStringEPc>
 8020494:	4603      	mov	r3, r0
 8020496:	461a      	mov	r2, r3
 8020498:	490d      	ldr	r1, [pc, #52]	; (80204d0 <_ZN15BarometerThread4loopEv+0x70>)
 802049a:	4620      	mov	r0, r4
 802049c:	f000 f9ee 	bl	802087c <_ZN6Thread7printlnEPKcz>

	Avionics_BaroTempPacket packet;
	data.toArray((float*) &packet);
 80204a0:	f107 020c 	add.w	r2, r7, #12
 80204a4:	f107 0314 	add.w	r3, r7, #20
 80204a8:	4611      	mov	r1, r2
 80204aa:	4618      	mov	r0, r3
 80204ac:	f7ff ff82 	bl	80203b4 <_ZN8BaroData7toArrayEPf>

	network.send(&packet);
 80204b0:	f107 030c 	add.w	r3, r7, #12
 80204b4:	4619      	mov	r1, r3
 80204b6:	4807      	ldr	r0, [pc, #28]	; (80204d4 <_ZN15BarometerThread4loopEv+0x74>)
 80204b8:	f7ff fb72 	bl	801fba0 <_ZN10MessageBus4sendI23Avionics_BaroTempPacketEEbPT_>

	osDelay(100);
 80204bc:	2064      	movs	r0, #100	; 0x64
 80204be:	f7eb f8a8 	bl	800b612 <osDelay>
}
 80204c2:	bf00      	nop
 80204c4:	3724      	adds	r7, #36	; 0x24
 80204c6:	46bd      	mov	sp, r7
 80204c8:	bd90      	pop	{r4, r7, pc}
 80204ca:	bf00      	nop
 80204cc:	24004ab4 	.word	0x24004ab4
 80204d0:	08027ef4 	.word	0x08027ef4
 80204d4:	24004dd0 	.word	0x24004dd0

080204d8 <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	~Thread() {};
 80204d8:	b480      	push	{r7}
 80204da:	b083      	sub	sp, #12
 80204dc:	af00      	add	r7, sp, #0
 80204de:	6078      	str	r0, [r7, #4]
 80204e0:	4a04      	ldr	r2, [pc, #16]	; (80204f4 <_ZN6ThreadD1Ev+0x1c>)
 80204e2:	687b      	ldr	r3, [r7, #4]
 80204e4:	601a      	str	r2, [r3, #0]
 80204e6:	687b      	ldr	r3, [r7, #4]
 80204e8:	4618      	mov	r0, r3
 80204ea:	370c      	adds	r7, #12
 80204ec:	46bd      	mov	sp, r7
 80204ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204f2:	4770      	bx	lr
 80204f4:	080285a0 	.word	0x080285a0

080204f8 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 80204f8:	b580      	push	{r7, lr}
 80204fa:	b082      	sub	sp, #8
 80204fc:	af00      	add	r7, sp, #0
 80204fe:	6078      	str	r0, [r7, #4]
 8020500:	6039      	str	r1, [r7, #0]
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	4907      	ldr	r1, [pc, #28]	; (8020524 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 8020506:	4618      	mov	r0, r3
 8020508:	f000 f94f 	bl	80207aa <_ZN6ThreadC1EPKc>
 802050c:	4a06      	ldr	r2, [pc, #24]	; (8020528 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 802050e:	687b      	ldr	r3, [r7, #4]
 8020510:	601a      	str	r2, [r3, #0]
 8020512:	687b      	ldr	r3, [r7, #4]
 8020514:	683a      	ldr	r2, [r7, #0]
 8020516:	60da      	str	r2, [r3, #12]
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	4618      	mov	r0, r3
 802051c:	3708      	adds	r7, #8
 802051e:	46bd      	mov	sp, r7
 8020520:	bd80      	pop	{r7, pc}
 8020522:	bf00      	nop
 8020524:	08027ef8 	.word	0x08027ef8
 8020528:	08028528 	.word	0x08028528

0802052c <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDef>:
#include "Libraries/BMP280/bmp280.h"


class BarometerThread : Thread {
public:
	BarometerThread(I2C_HandleTypeDef* hi2c) : Thread("Barometer", 1024), bmp280(), hi2c(hi2c) {}
 802052c:	b580      	push	{r7, lr}
 802052e:	b082      	sub	sp, #8
 8020530:	af00      	add	r7, sp, #0
 8020532:	6078      	str	r0, [r7, #4]
 8020534:	6039      	str	r1, [r7, #0]
 8020536:	687b      	ldr	r3, [r7, #4]
 8020538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802053c:	490a      	ldr	r1, [pc, #40]	; (8020568 <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDef+0x3c>)
 802053e:	4618      	mov	r0, r3
 8020540:	f000 f956 	bl	80207f0 <_ZN6ThreadC1EPKcm>
 8020544:	4a09      	ldr	r2, [pc, #36]	; (802056c <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDef+0x40>)
 8020546:	687b      	ldr	r3, [r7, #4]
 8020548:	601a      	str	r2, [r3, #0]
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	330c      	adds	r3, #12
 802054e:	2234      	movs	r2, #52	; 0x34
 8020550:	2100      	movs	r1, #0
 8020552:	4618      	mov	r0, r3
 8020554:	f000 ff98 	bl	8021488 <memset>
 8020558:	687b      	ldr	r3, [r7, #4]
 802055a:	683a      	ldr	r2, [r7, #0]
 802055c:	641a      	str	r2, [r3, #64]	; 0x40
 802055e:	687b      	ldr	r3, [r7, #4]
 8020560:	4618      	mov	r0, r3
 8020562:	3708      	adds	r7, #8
 8020564:	46bd      	mov	sp, r7
 8020566:	bd80      	pop	{r7, pc}
 8020568:	08027f04 	.word	0x08027f04
 802056c:	08028564 	.word	0x08028564

08020570 <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 8020570:	b580      	push	{r7, lr}
 8020572:	b082      	sub	sp, #8
 8020574:	af00      	add	r7, sp, #0
 8020576:	6078      	str	r0, [r7, #4]
 8020578:	4a05      	ldr	r2, [pc, #20]	; (8020590 <_ZN14WatchdogThreadD1Ev+0x20>)
 802057a:	687b      	ldr	r3, [r7, #4]
 802057c:	601a      	str	r2, [r3, #0]
 802057e:	687b      	ldr	r3, [r7, #4]
 8020580:	4618      	mov	r0, r3
 8020582:	f7ff ffa9 	bl	80204d8 <_ZN6ThreadD1Ev>
 8020586:	687b      	ldr	r3, [r7, #4]
 8020588:	4618      	mov	r0, r3
 802058a:	3708      	adds	r7, #8
 802058c:	46bd      	mov	sp, r7
 802058e:	bd80      	pop	{r7, pc}
 8020590:	08028528 	.word	0x08028528

08020594 <__tcf_0>:

#ifdef CORE_CM7
#include "i2c.h"
void initCortexM7() {
	MX_I2C1_Init();
	static WatchdogThread watchdog(&hiwdg1);
 8020594:	b580      	push	{r7, lr}
 8020596:	af00      	add	r7, sp, #0
 8020598:	4801      	ldr	r0, [pc, #4]	; (80205a0 <__tcf_0+0xc>)
 802059a:	f7ff ffe9 	bl	8020570 <_ZN14WatchdogThreadD1Ev>
 802059e:	bd80      	pop	{r7, pc}
 80205a0:	24004b34 	.word	0x24004b34

080205a4 <__tcf_1>:
	static LWIPThread lwip("192.168.1.2", 42666);
 80205a4:	b580      	push	{r7, lr}
 80205a6:	af00      	add	r7, sp, #0
 80205a8:	4801      	ldr	r0, [pc, #4]	; (80205b0 <__tcf_1+0xc>)
 80205aa:	f000 f9e3 	bl	8020974 <_ZN10LWIPThreadD1Ev>
 80205ae:	bd80      	pop	{r7, pc}
 80205b0:	24004b48 	.word	0x24004b48

080205b4 <_ZN15BarometerThreadD1Ev>:
class BarometerThread : Thread {
 80205b4:	b580      	push	{r7, lr}
 80205b6:	b082      	sub	sp, #8
 80205b8:	af00      	add	r7, sp, #0
 80205ba:	6078      	str	r0, [r7, #4]
 80205bc:	4a05      	ldr	r2, [pc, #20]	; (80205d4 <_ZN15BarometerThreadD1Ev+0x20>)
 80205be:	687b      	ldr	r3, [r7, #4]
 80205c0:	601a      	str	r2, [r3, #0]
 80205c2:	687b      	ldr	r3, [r7, #4]
 80205c4:	4618      	mov	r0, r3
 80205c6:	f7ff ff87 	bl	80204d8 <_ZN6ThreadD1Ev>
 80205ca:	687b      	ldr	r3, [r7, #4]
 80205cc:	4618      	mov	r0, r3
 80205ce:	3708      	adds	r7, #8
 80205d0:	46bd      	mov	sp, r7
 80205d2:	bd80      	pop	{r7, pc}
 80205d4:	08028564 	.word	0x08028564

080205d8 <__tcf_2>:
	static BarometerThread barometer(&hi2c1);
 80205d8:	b580      	push	{r7, lr}
 80205da:	af00      	add	r7, sp, #0
 80205dc:	4801      	ldr	r0, [pc, #4]	; (80205e4 <__tcf_2+0xc>)
 80205de:	f7ff ffe9 	bl	80205b4 <_ZN15BarometerThreadD1Ev>
 80205e2:	bd80      	pop	{r7, pc}
 80205e4:	24004b58 	.word	0x24004b58

080205e8 <initCortexM7>:
void initCortexM7() {
 80205e8:	b580      	push	{r7, lr}
 80205ea:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 80205ec:	f7e0 fa82 	bl	8000af4 <MX_I2C1_Init>
	static WatchdogThread watchdog(&hiwdg1);
 80205f0:	4b36      	ldr	r3, [pc, #216]	; (80206cc <initCortexM7+0xe4>)
 80205f2:	781b      	ldrb	r3, [r3, #0]
 80205f4:	f3bf 8f5b 	dmb	ish
 80205f8:	b2db      	uxtb	r3, r3
 80205fa:	f003 0301 	and.w	r3, r3, #1
 80205fe:	2b00      	cmp	r3, #0
 8020600:	bf0c      	ite	eq
 8020602:	2301      	moveq	r3, #1
 8020604:	2300      	movne	r3, #0
 8020606:	b2db      	uxtb	r3, r3
 8020608:	2b00      	cmp	r3, #0
 802060a:	d014      	beq.n	8020636 <initCortexM7+0x4e>
 802060c:	482f      	ldr	r0, [pc, #188]	; (80206cc <initCortexM7+0xe4>)
 802060e:	f000 fae9 	bl	8020be4 <__cxa_guard_acquire>
 8020612:	4603      	mov	r3, r0
 8020614:	2b00      	cmp	r3, #0
 8020616:	bf14      	ite	ne
 8020618:	2301      	movne	r3, #1
 802061a:	2300      	moveq	r3, #0
 802061c:	b2db      	uxtb	r3, r3
 802061e:	2b00      	cmp	r3, #0
 8020620:	d009      	beq.n	8020636 <initCortexM7+0x4e>
 8020622:	492b      	ldr	r1, [pc, #172]	; (80206d0 <initCortexM7+0xe8>)
 8020624:	482b      	ldr	r0, [pc, #172]	; (80206d4 <initCortexM7+0xec>)
 8020626:	f7ff ff67 	bl	80204f8 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 802062a:	4828      	ldr	r0, [pc, #160]	; (80206cc <initCortexM7+0xe4>)
 802062c:	f000 fae6 	bl	8020bfc <__cxa_guard_release>
 8020630:	4829      	ldr	r0, [pc, #164]	; (80206d8 <initCortexM7+0xf0>)
 8020632:	f000 fec8 	bl	80213c6 <atexit>
	static LWIPThread lwip("192.168.1.2", 42666);
 8020636:	4b29      	ldr	r3, [pc, #164]	; (80206dc <initCortexM7+0xf4>)
 8020638:	781b      	ldrb	r3, [r3, #0]
 802063a:	f3bf 8f5b 	dmb	ish
 802063e:	b2db      	uxtb	r3, r3
 8020640:	f003 0301 	and.w	r3, r3, #1
 8020644:	2b00      	cmp	r3, #0
 8020646:	bf0c      	ite	eq
 8020648:	2301      	moveq	r3, #1
 802064a:	2300      	movne	r3, #0
 802064c:	b2db      	uxtb	r3, r3
 802064e:	2b00      	cmp	r3, #0
 8020650:	d016      	beq.n	8020680 <initCortexM7+0x98>
 8020652:	4822      	ldr	r0, [pc, #136]	; (80206dc <initCortexM7+0xf4>)
 8020654:	f000 fac6 	bl	8020be4 <__cxa_guard_acquire>
 8020658:	4603      	mov	r3, r0
 802065a:	2b00      	cmp	r3, #0
 802065c:	bf14      	ite	ne
 802065e:	2301      	movne	r3, #1
 8020660:	2300      	moveq	r3, #0
 8020662:	b2db      	uxtb	r3, r3
 8020664:	2b00      	cmp	r3, #0
 8020666:	d00b      	beq.n	8020680 <initCortexM7+0x98>
 8020668:	f24a 62aa 	movw	r2, #42666	; 0xa6aa
 802066c:	491c      	ldr	r1, [pc, #112]	; (80206e0 <initCortexM7+0xf8>)
 802066e:	481d      	ldr	r0, [pc, #116]	; (80206e4 <initCortexM7+0xfc>)
 8020670:	f000 f93e 	bl	80208f0 <_ZN10LWIPThreadC1EPKct>
 8020674:	4819      	ldr	r0, [pc, #100]	; (80206dc <initCortexM7+0xf4>)
 8020676:	f000 fac1 	bl	8020bfc <__cxa_guard_release>
 802067a:	481b      	ldr	r0, [pc, #108]	; (80206e8 <initCortexM7+0x100>)
 802067c:	f000 fea3 	bl	80213c6 <atexit>
	static BarometerThread barometer(&hi2c1);
 8020680:	4b1a      	ldr	r3, [pc, #104]	; (80206ec <initCortexM7+0x104>)
 8020682:	781b      	ldrb	r3, [r3, #0]
 8020684:	f3bf 8f5b 	dmb	ish
 8020688:	b2db      	uxtb	r3, r3
 802068a:	f003 0301 	and.w	r3, r3, #1
 802068e:	2b00      	cmp	r3, #0
 8020690:	bf0c      	ite	eq
 8020692:	2301      	moveq	r3, #1
 8020694:	2300      	movne	r3, #0
 8020696:	b2db      	uxtb	r3, r3
 8020698:	2b00      	cmp	r3, #0
 802069a:	d014      	beq.n	80206c6 <initCortexM7+0xde>
 802069c:	4813      	ldr	r0, [pc, #76]	; (80206ec <initCortexM7+0x104>)
 802069e:	f000 faa1 	bl	8020be4 <__cxa_guard_acquire>
 80206a2:	4603      	mov	r3, r0
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	bf14      	ite	ne
 80206a8:	2301      	movne	r3, #1
 80206aa:	2300      	moveq	r3, #0
 80206ac:	b2db      	uxtb	r3, r3
 80206ae:	2b00      	cmp	r3, #0
 80206b0:	d009      	beq.n	80206c6 <initCortexM7+0xde>
 80206b2:	490f      	ldr	r1, [pc, #60]	; (80206f0 <initCortexM7+0x108>)
 80206b4:	480f      	ldr	r0, [pc, #60]	; (80206f4 <initCortexM7+0x10c>)
 80206b6:	f7ff ff39 	bl	802052c <_ZN15BarometerThreadC1EP19__I2C_HandleTypeDef>
 80206ba:	480c      	ldr	r0, [pc, #48]	; (80206ec <initCortexM7+0x104>)
 80206bc:	f000 fa9e 	bl	8020bfc <__cxa_guard_release>
 80206c0:	480d      	ldr	r0, [pc, #52]	; (80206f8 <initCortexM7+0x110>)
 80206c2:	f000 fe80 	bl	80213c6 <atexit>
}
 80206c6:	bf00      	nop
 80206c8:	bd80      	pop	{r7, pc}
 80206ca:	bf00      	nop
 80206cc:	24004b44 	.word	0x24004b44
 80206d0:	24009940 	.word	0x24009940
 80206d4:	24004b34 	.word	0x24004b34
 80206d8:	08020595 	.word	0x08020595
 80206dc:	24004b54 	.word	0x24004b54
 80206e0:	08027f10 	.word	0x08027f10
 80206e4:	24004b48 	.word	0x24004b48
 80206e8:	080205a5 	.word	0x080205a5
 80206ec:	24004b9c 	.word	0x24004b9c
 80206f0:	240098a8 	.word	0x240098a8
 80206f4:	24004b58 	.word	0x24004b58
 80206f8:	080205d9 	.word	0x080205d9

080206fc <_Z41__static_initialization_and_destruction_0ii>:


static uint8_t storage1[256];
static uint8_t storage2[256];
BufferedIODriver telemetryDriver(storage1, storage2, 256);
NetworkBus network(&telemetryDriver);
 80206fc:	b580      	push	{r7, lr}
 80206fe:	b082      	sub	sp, #8
 8020700:	af00      	add	r7, sp, #0
 8020702:	6078      	str	r0, [r7, #4]
 8020704:	6039      	str	r1, [r7, #0]
 8020706:	687b      	ldr	r3, [r7, #4]
 8020708:	2b01      	cmp	r3, #1
 802070a:	d10f      	bne.n	802072c <_Z41__static_initialization_and_destruction_0ii+0x30>
 802070c:	683b      	ldr	r3, [r7, #0]
 802070e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020712:	4293      	cmp	r3, r2
 8020714:	d10a      	bne.n	802072c <_Z41__static_initialization_and_destruction_0ii+0x30>
BufferedIODriver telemetryDriver(storage1, storage2, 256);
 8020716:	f44f 7380 	mov.w	r3, #256	; 0x100
 802071a:	4a0d      	ldr	r2, [pc, #52]	; (8020750 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 802071c:	490d      	ldr	r1, [pc, #52]	; (8020754 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 802071e:	480e      	ldr	r0, [pc, #56]	; (8020758 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8020720:	f7fd fb7a 	bl	801de18 <_ZN16BufferedIODriverC1EPhS0_j>
NetworkBus network(&telemetryDriver);
 8020724:	490c      	ldr	r1, [pc, #48]	; (8020758 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8020726:	480d      	ldr	r0, [pc, #52]	; (802075c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8020728:	f7ff fd86 	bl	8020238 <_ZN10NetworkBusC1EP8IODriver>
 802072c:	687b      	ldr	r3, [r7, #4]
 802072e:	2b00      	cmp	r3, #0
 8020730:	d10a      	bne.n	8020748 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8020732:	683b      	ldr	r3, [r7, #0]
 8020734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020738:	4293      	cmp	r3, r2
 802073a:	d105      	bne.n	8020748 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 802073c:	4807      	ldr	r0, [pc, #28]	; (802075c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 802073e:	f7ff fdd5 	bl	80202ec <_ZN10NetworkBusD1Ev>
BufferedIODriver telemetryDriver(storage1, storage2, 256);
 8020742:	4805      	ldr	r0, [pc, #20]	; (8020758 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8020744:	f7fd fbce 	bl	801dee4 <_ZN16BufferedIODriverD1Ev>
NetworkBus network(&telemetryDriver);
 8020748:	bf00      	nop
 802074a:	3708      	adds	r7, #8
 802074c:	46bd      	mov	sp, r7
 802074e:	bd80      	pop	{r7, pc}
 8020750:	24004ca0 	.word	0x24004ca0
 8020754:	24004ba0 	.word	0x24004ba0
 8020758:	24004da0 	.word	0x24004da0
 802075c:	24004dd0 	.word	0x24004dd0

08020760 <_GLOBAL__sub_I_telemetryDriver>:
 8020760:	b580      	push	{r7, lr}
 8020762:	af00      	add	r7, sp, #0
 8020764:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8020768:	2001      	movs	r0, #1
 802076a:	f7ff ffc7 	bl	80206fc <_Z41__static_initialization_and_destruction_0ii>
 802076e:	bd80      	pop	{r7, pc}

08020770 <_GLOBAL__sub_D_telemetryDriver>:
 8020770:	b580      	push	{r7, lr}
 8020772:	af00      	add	r7, sp, #0
 8020774:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8020778:	2000      	movs	r0, #0
 802077a:	f7ff ffbf 	bl	80206fc <_Z41__static_initialization_and_destruction_0ii>
 802077e:	bd80      	pop	{r7, pc}

08020780 <_Z10__task_runPKv>:

#define DEFAULT_STACK_SIZE (256) // Danger zone: changing the stack size might create very nasty bugs

static char buffer[128];

void __task_run(const void* arg) {
 8020780:	b580      	push	{r7, lr}
 8020782:	b084      	sub	sp, #16
 8020784:	af00      	add	r7, sp, #0
 8020786:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 8020788:	687b      	ldr	r3, [r7, #4]
 802078a:	60fb      	str	r3, [r7, #12]

	osDelay(100);
 802078c:	2064      	movs	r0, #100	; 0x64
 802078e:	f7ea ff40 	bl	800b612 <osDelay>

	thread->init();
 8020792:	68fb      	ldr	r3, [r7, #12]
 8020794:	681b      	ldr	r3, [r3, #0]
 8020796:	681b      	ldr	r3, [r3, #0]
 8020798:	68f8      	ldr	r0, [r7, #12]
 802079a:	4798      	blx	r3

	while(true) {
		thread->loop();
 802079c:	68fb      	ldr	r3, [r7, #12]
 802079e:	681b      	ldr	r3, [r3, #0]
 80207a0:	3304      	adds	r3, #4
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	68f8      	ldr	r0, [r7, #12]
 80207a6:	4798      	blx	r3
 80207a8:	e7f8      	b.n	802079c <_Z10__task_runPKv+0x1c>

080207aa <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 80207aa:	b580      	push	{r7, lr}
 80207ac:	b082      	sub	sp, #8
 80207ae:	af00      	add	r7, sp, #0
 80207b0:	6078      	str	r0, [r7, #4]
 80207b2:	6039      	str	r1, [r7, #0]
 80207b4:	2200      	movs	r2, #0
 80207b6:	6839      	ldr	r1, [r7, #0]
 80207b8:	6878      	ldr	r0, [r7, #4]
 80207ba:	f000 f805 	bl	80207c8 <_ZN6ThreadC1EPKc10osPriority>
	;
}
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	4618      	mov	r0, r3
 80207c2:	3708      	adds	r7, #8
 80207c4:	46bd      	mov	sp, r7
 80207c6:	bd80      	pop	{r7, pc}

080207c8 <_ZN6ThreadC1EPKc10osPriority>:

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 80207c8:	b580      	push	{r7, lr}
 80207ca:	b084      	sub	sp, #16
 80207cc:	af00      	add	r7, sp, #0
 80207ce:	60f8      	str	r0, [r7, #12]
 80207d0:	60b9      	str	r1, [r7, #8]
 80207d2:	4613      	mov	r3, r2
 80207d4:	80fb      	strh	r3, [r7, #6]
 80207d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80207da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80207de:	68b9      	ldr	r1, [r7, #8]
 80207e0:	68f8      	ldr	r0, [r7, #12]
 80207e2:	f000 f817 	bl	8020814 <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 80207e6:	68fb      	ldr	r3, [r7, #12]
 80207e8:	4618      	mov	r0, r3
 80207ea:	3710      	adds	r7, #16
 80207ec:	46bd      	mov	sp, r7
 80207ee:	bd80      	pop	{r7, pc}

080207f0 <_ZN6ThreadC1EPKcm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
 80207f0:	b580      	push	{r7, lr}
 80207f2:	b084      	sub	sp, #16
 80207f4:	af00      	add	r7, sp, #0
 80207f6:	60f8      	str	r0, [r7, #12]
 80207f8:	60b9      	str	r1, [r7, #8]
 80207fa:	607a      	str	r2, [r7, #4]
 80207fc:	687b      	ldr	r3, [r7, #4]
 80207fe:	2200      	movs	r2, #0
 8020800:	68b9      	ldr	r1, [r7, #8]
 8020802:	68f8      	ldr	r0, [r7, #12]
 8020804:	f000 f806 	bl	8020814 <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 8020808:	68fb      	ldr	r3, [r7, #12]
 802080a:	4618      	mov	r0, r3
 802080c:	3710      	adds	r7, #16
 802080e:	46bd      	mov	sp, r7
 8020810:	bd80      	pop	{r7, pc}
	...

08020814 <_ZN6ThreadC1EPKc10osPrioritym>:

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 8020814:	b580      	push	{r7, lr}
 8020816:	b08c      	sub	sp, #48	; 0x30
 8020818:	af00      	add	r7, sp, #0
 802081a:	60f8      	str	r0, [r7, #12]
 802081c:	60b9      	str	r1, [r7, #8]
 802081e:	603b      	str	r3, [r7, #0]
 8020820:	4613      	mov	r3, r2
 8020822:	80fb      	strh	r3, [r7, #6]
 8020824:	4a12      	ldr	r2, [pc, #72]	; (8020870 <_ZN6ThreadC1EPKc10osPrioritym+0x5c>)
 8020826:	68fb      	ldr	r3, [r7, #12]
 8020828:	601a      	str	r2, [r3, #0]
	osThreadDef(T, __task_run, priority, 0, stackSize);
 802082a:	f107 0314 	add.w	r3, r7, #20
 802082e:	2200      	movs	r2, #0
 8020830:	601a      	str	r2, [r3, #0]
 8020832:	605a      	str	r2, [r3, #4]
 8020834:	609a      	str	r2, [r3, #8]
 8020836:	60da      	str	r2, [r3, #12]
 8020838:	611a      	str	r2, [r3, #16]
 802083a:	615a      	str	r2, [r3, #20]
 802083c:	619a      	str	r2, [r3, #24]
 802083e:	4b0d      	ldr	r3, [pc, #52]	; (8020874 <_ZN6ThreadC1EPKc10osPrioritym+0x60>)
 8020840:	617b      	str	r3, [r7, #20]
 8020842:	4b0d      	ldr	r3, [pc, #52]	; (8020878 <_ZN6ThreadC1EPKc10osPrioritym+0x64>)
 8020844:	61bb      	str	r3, [r7, #24]
 8020846:	88fb      	ldrh	r3, [r7, #6]
 8020848:	83bb      	strh	r3, [r7, #28]
 802084a:	683b      	ldr	r3, [r7, #0]
 802084c:	627b      	str	r3, [r7, #36]	; 0x24
	this->handle = osThreadCreate(osThread(T), this);
 802084e:	f107 0314 	add.w	r3, r7, #20
 8020852:	68f9      	ldr	r1, [r7, #12]
 8020854:	4618      	mov	r0, r3
 8020856:	f7ea fe90 	bl	800b57a <osThreadCreate>
 802085a:	4602      	mov	r2, r0
 802085c:	68fb      	ldr	r3, [r7, #12]
 802085e:	605a      	str	r2, [r3, #4]
	this->name = name;
 8020860:	68fb      	ldr	r3, [r7, #12]
 8020862:	68ba      	ldr	r2, [r7, #8]
 8020864:	609a      	str	r2, [r3, #8]
}
 8020866:	68fb      	ldr	r3, [r7, #12]
 8020868:	4618      	mov	r0, r3
 802086a:	3730      	adds	r7, #48	; 0x30
 802086c:	46bd      	mov	sp, r7
 802086e:	bd80      	pop	{r7, pc}
 8020870:	080285a0 	.word	0x080285a0
 8020874:	08027f1c 	.word	0x08027f1c
 8020878:	08020781 	.word	0x08020781

0802087c <_ZN6Thread7printlnEPKcz>:

void Thread::println(const char* format, ...) {
 802087c:	b40e      	push	{r1, r2, r3}
 802087e:	b580      	push	{r7, lr}
 8020880:	b085      	sub	sp, #20
 8020882:	af00      	add	r7, sp, #0
 8020884:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 8020886:	f107 0320 	add.w	r3, r7, #32
 802088a:	60fb      	str	r3, [r7, #12]

	sprintf(buffer, "[%s] ", name);
 802088c:	687b      	ldr	r3, [r7, #4]
 802088e:	689b      	ldr	r3, [r3, #8]
 8020890:	461a      	mov	r2, r3
 8020892:	4913      	ldr	r1, [pc, #76]	; (80208e0 <_ZN6Thread7printlnEPKcz+0x64>)
 8020894:	4813      	ldr	r0, [pc, #76]	; (80208e4 <_ZN6Thread7printlnEPKcz+0x68>)
 8020896:	f001 fadd 	bl	8021e54 <siprintf>
	vsprintf(buffer + strlen(buffer), format, args);
 802089a:	4812      	ldr	r0, [pc, #72]	; (80208e4 <_ZN6Thread7printlnEPKcz+0x68>)
 802089c:	f7df fd7a 	bl	8000394 <strlen>
 80208a0:	4603      	mov	r3, r0
 80208a2:	4a10      	ldr	r2, [pc, #64]	; (80208e4 <_ZN6Thread7printlnEPKcz+0x68>)
 80208a4:	4413      	add	r3, r2
 80208a6:	68fa      	ldr	r2, [r7, #12]
 80208a8:	69f9      	ldr	r1, [r7, #28]
 80208aa:	4618      	mov	r0, r3
 80208ac:	f001 fb08 	bl	8021ec0 <vsiprintf>
	strcat(buffer, "\r\n");
 80208b0:	480c      	ldr	r0, [pc, #48]	; (80208e4 <_ZN6Thread7printlnEPKcz+0x68>)
 80208b2:	f7df fd6f 	bl	8000394 <strlen>
 80208b6:	4603      	mov	r3, r0
 80208b8:	461a      	mov	r2, r3
 80208ba:	4b0a      	ldr	r3, [pc, #40]	; (80208e4 <_ZN6Thread7printlnEPKcz+0x68>)
 80208bc:	4413      	add	r3, r2
 80208be:	4a0a      	ldr	r2, [pc, #40]	; (80208e8 <_ZN6Thread7printlnEPKcz+0x6c>)
 80208c0:	8811      	ldrh	r1, [r2, #0]
 80208c2:	7892      	ldrb	r2, [r2, #2]
 80208c4:	8019      	strh	r1, [r3, #0]
 80208c6:	709a      	strb	r2, [r3, #2]

	console.print(buffer);
 80208c8:	4906      	ldr	r1, [pc, #24]	; (80208e4 <_ZN6Thread7printlnEPKcz+0x68>)
 80208ca:	4808      	ldr	r0, [pc, #32]	; (80208ec <_ZN6Thread7printlnEPKcz+0x70>)
 80208cc:	f7fc fccf 	bl	801d26e <_ZN7Console5printEPKc>

	va_end(args);
}
 80208d0:	bf00      	nop
 80208d2:	3714      	adds	r7, #20
 80208d4:	46bd      	mov	sp, r7
 80208d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80208da:	b003      	add	sp, #12
 80208dc:	4770      	bx	lr
 80208de:	bf00      	nop
 80208e0:	08027f20 	.word	0x08027f20
 80208e4:	240096e4 	.word	0x240096e4
 80208e8:	08027f28 	.word	0x08027f28
 80208ec:	240049ac 	.word	0x240049ac

080208f0 <_ZN10LWIPThreadC1EPKct>:


static LWIPClientIO* client;


LWIPThread::LWIPThread(const char* ip, const uint16_t port) : Thread("Telemetry", 256) { // Please, be very careful with the stack
 80208f0:	b5b0      	push	{r4, r5, r7, lr}
 80208f2:	b08c      	sub	sp, #48	; 0x30
 80208f4:	af00      	add	r7, sp, #0
 80208f6:	60f8      	str	r0, [r7, #12]
 80208f8:	60b9      	str	r1, [r7, #8]
 80208fa:	4613      	mov	r3, r2
 80208fc:	80fb      	strh	r3, [r7, #6]
 80208fe:	68fb      	ldr	r3, [r7, #12]
 8020900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8020904:	4918      	ldr	r1, [pc, #96]	; (8020968 <_ZN10LWIPThreadC1EPKct+0x78>)
 8020906:	4618      	mov	r0, r3
 8020908:	f7ff ff72 	bl	80207f0 <_ZN6ThreadC1EPKcm>
 802090c:	4a17      	ldr	r2, [pc, #92]	; (802096c <_ZN10LWIPThreadC1EPKct+0x7c>)
 802090e:	68fb      	ldr	r3, [r7, #12]
 8020910:	601a      	str	r2, [r3, #0]
	client = new LWIPClientIO(ip, port);
 8020912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8020916:	4618      	mov	r0, r3
 8020918:	f000 fc7a 	bl	8021210 <_ZNSaIcEC1Ev>
 802091c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8020920:	f107 0314 	add.w	r3, r7, #20
 8020924:	68b9      	ldr	r1, [r7, #8]
 8020926:	4618      	mov	r0, r3
 8020928:	f000 fd16 	bl	8021358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 802092c:	f107 0514 	add.w	r5, r7, #20
 8020930:	2044      	movs	r0, #68	; 0x44
 8020932:	f7fc fcf5 	bl	801d320 <_Znwj>
 8020936:	4603      	mov	r3, r0
 8020938:	461c      	mov	r4, r3
 802093a:	88fb      	ldrh	r3, [r7, #6]
 802093c:	461a      	mov	r2, r3
 802093e:	4629      	mov	r1, r5
 8020940:	4620      	mov	r0, r4
 8020942:	f7fe fc1b 	bl	801f17c <_ZN12LWIPClientIOC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 8020946:	4b0a      	ldr	r3, [pc, #40]	; (8020970 <_ZN10LWIPThreadC1EPKct+0x80>)
 8020948:	601c      	str	r4, [r3, #0]
 802094a:	f107 0314 	add.w	r3, r7, #20
 802094e:	4618      	mov	r0, r3
 8020950:	f000 fca1 	bl	8021296 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8020954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8020958:	4618      	mov	r0, r3
 802095a:	f000 fc5a 	bl	8021212 <_ZNSaIcED1Ev>
}
 802095e:	68fb      	ldr	r3, [r7, #12]
 8020960:	4618      	mov	r0, r3
 8020962:	3730      	adds	r7, #48	; 0x30
 8020964:	46bd      	mov	sp, r7
 8020966:	bdb0      	pop	{r4, r5, r7, pc}
 8020968:	08027f34 	.word	0x08027f34
 802096c:	080285b0 	.word	0x080285b0
 8020970:	24009798 	.word	0x24009798

08020974 <_ZN10LWIPThreadD1Ev>:

LWIPThread::~LWIPThread() {
 8020974:	b580      	push	{r7, lr}
 8020976:	b082      	sub	sp, #8
 8020978:	af00      	add	r7, sp, #0
 802097a:	6078      	str	r0, [r7, #4]
 802097c:	4a0a      	ldr	r2, [pc, #40]	; (80209a8 <_ZN10LWIPThreadD1Ev+0x34>)
 802097e:	687b      	ldr	r3, [r7, #4]
 8020980:	601a      	str	r2, [r3, #0]
	delete client;
 8020982:	4b0a      	ldr	r3, [pc, #40]	; (80209ac <_ZN10LWIPThreadD1Ev+0x38>)
 8020984:	681b      	ldr	r3, [r3, #0]
 8020986:	2b00      	cmp	r3, #0
 8020988:	d004      	beq.n	8020994 <_ZN10LWIPThreadD1Ev+0x20>
 802098a:	681a      	ldr	r2, [r3, #0]
 802098c:	3204      	adds	r2, #4
 802098e:	6812      	ldr	r2, [r2, #0]
 8020990:	4618      	mov	r0, r3
 8020992:	4790      	blx	r2
LWIPThread::~LWIPThread() {
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	4618      	mov	r0, r3
 8020998:	f7ff fd9e 	bl	80204d8 <_ZN6ThreadD1Ev>
}
 802099c:	687b      	ldr	r3, [r7, #4]
 802099e:	4618      	mov	r0, r3
 80209a0:	3708      	adds	r7, #8
 80209a2:	46bd      	mov	sp, r7
 80209a4:	bd80      	pop	{r7, pc}
 80209a6:	bf00      	nop
 80209a8:	080285b0 	.word	0x080285b0
 80209ac:	24009798 	.word	0x24009798

080209b0 <_ZN10LWIPThread4initEv>:

void LWIPThread::init() {
 80209b0:	b5b0      	push	{r4, r5, r7, lr}
 80209b2:	b090      	sub	sp, #64	; 0x40
 80209b4:	af04      	add	r7, sp, #16
 80209b6:	6078      	str	r0, [r7, #4]
	osDelay(50); // Time to get the shell loaded by Cortex M4
 80209b8:	2032      	movs	r0, #50	; 0x32
 80209ba:	f7ea fe2a 	bl	800b612 <osDelay>

	println("Initializing LWIP...");
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	491d      	ldr	r1, [pc, #116]	; (8020a38 <_ZN10LWIPThread4initEv+0x88>)
 80209c2:	4618      	mov	r0, r3
 80209c4:	f7ff ff5a 	bl	802087c <_ZN6Thread7printlnEPKcz>

	tcpip_init(nullptr, nullptr);
 80209c8:	2100      	movs	r1, #0
 80209ca:	2000      	movs	r0, #0
 80209cc:	f7fb fca6 	bl	801c31c <tcpip_init>
	/* IP addresses initialization with DHCP (IPv4) */
	ip4_addr local_ip;
	ip4_addr netmask;
	ip4_addr gateway;

	IP4_ADDR(&local_ip, 192, 168, 1, 3);
 80209d0:	4b1a      	ldr	r3, [pc, #104]	; (8020a3c <_ZN10LWIPThread4initEv+0x8c>)
 80209d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	IP4_ADDR(&netmask, 255, 255, 255, 0);
 80209d4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80209d8:	62bb      	str	r3, [r7, #40]	; 0x28
	IP4_ADDR(&gateway, 192, 168, 1, 1);
 80209da:	4b19      	ldr	r3, [pc, #100]	; (8020a40 <_ZN10LWIPThread4initEv+0x90>)
 80209dc:	627b      	str	r3, [r7, #36]	; 0x24

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&gnetif, &local_ip, &netmask, &gateway, NULL, &ethernetif_init, &tcpip_input);
 80209de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80209e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80209e6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80209ea:	4816      	ldr	r0, [pc, #88]	; (8020a44 <_ZN10LWIPThread4initEv+0x94>)
 80209ec:	9002      	str	r0, [sp, #8]
 80209ee:	4816      	ldr	r0, [pc, #88]	; (8020a48 <_ZN10LWIPThread4initEv+0x98>)
 80209f0:	9001      	str	r0, [sp, #4]
 80209f2:	2000      	movs	r0, #0
 80209f4:	9000      	str	r0, [sp, #0]
 80209f6:	4815      	ldr	r0, [pc, #84]	; (8020a4c <_ZN10LWIPThread4initEv+0x9c>)
 80209f8:	f7f3 fb06 	bl	8014008 <netif_add>

	/* Registers the default network interface */
	netif_set_default(&gnetif);
 80209fc:	4813      	ldr	r0, [pc, #76]	; (8020a4c <_ZN10LWIPThread4initEv+0x9c>)
 80209fe:	f7f3 fcb5 	bl	801436c <netif_set_default>

	onStatusUpdate(&gnetif);
 8020a02:	4812      	ldr	r0, [pc, #72]	; (8020a4c <_ZN10LWIPThread4initEv+0x9c>)
 8020a04:	f000 f828 	bl	8020a58 <_ZL14onStatusUpdateP5netif>

	netif_set_link_callback(&gnetif, onStatusUpdate);
 8020a08:	4911      	ldr	r1, [pc, #68]	; (8020a50 <_ZN10LWIPThread4initEv+0xa0>)
 8020a0a:	4810      	ldr	r0, [pc, #64]	; (8020a4c <_ZN10LWIPThread4initEv+0x9c>)
 8020a0c:	f7f3 fdc0 	bl	8014590 <netif_set_link_callback>

	osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, 1024);
 8020a10:	4b10      	ldr	r3, [pc, #64]	; (8020a54 <_ZN10LWIPThread4initEv+0xa4>)
 8020a12:	f107 0408 	add.w	r4, r7, #8
 8020a16:	461d      	mov	r5, r3
 8020a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020a1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8020a20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(EthLink), &gnetif);
 8020a24:	f107 0308 	add.w	r3, r7, #8
 8020a28:	4908      	ldr	r1, [pc, #32]	; (8020a4c <_ZN10LWIPThread4initEv+0x9c>)
 8020a2a:	4618      	mov	r0, r3
 8020a2c:	f7ea fda5 	bl	800b57a <osThreadCreate>
}
 8020a30:	bf00      	nop
 8020a32:	3730      	adds	r7, #48	; 0x30
 8020a34:	46bd      	mov	sp, r7
 8020a36:	bdb0      	pop	{r4, r5, r7, pc}
 8020a38:	08027f40 	.word	0x08027f40
 8020a3c:	0301a8c0 	.word	0x0301a8c0
 8020a40:	0101a8c0 	.word	0x0101a8c0
 8020a44:	0801c22d 	.word	0x0801c22d
 8020a48:	0800b2c5 	.word	0x0800b2c5
 8020a4c:	24009764 	.word	0x24009764
 8020a50:	08020a59 	.word	0x08020a59
 8020a54:	08027f58 	.word	0x08027f58

08020a58 <_ZL14onStatusUpdateP5netif>:

void onStatusUpdate(struct netif *netif) {
 8020a58:	b580      	push	{r7, lr}
 8020a5a:	b084      	sub	sp, #16
 8020a5c:	af00      	add	r7, sp, #0
 8020a5e:	6078      	str	r0, [r7, #4]
	if (netif_is_link_up(netif)) {
 8020a60:	687b      	ldr	r3, [r7, #4]
 8020a62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8020a66:	109b      	asrs	r3, r3, #2
 8020a68:	b2db      	uxtb	r3, r3
 8020a6a:	f003 0301 	and.w	r3, r3, #1
 8020a6e:	2b00      	cmp	r3, #0
 8020a70:	d016      	beq.n	8020aa0 <_ZL14onStatusUpdateP5netif+0x48>
		/* When the netif is fully configured this function must be called */
		netif_set_up(netif);
 8020a72:	6878      	ldr	r0, [r7, #4]
 8020a74:	f7f3 fc8a 	bl	801438c <netif_set_up>
		console.printf("[Telemetry] Link is up\r\n");
 8020a78:	4911      	ldr	r1, [pc, #68]	; (8020ac0 <_ZL14onStatusUpdateP5netif+0x68>)
 8020a7a:	4812      	ldr	r0, [pc, #72]	; (8020ac4 <_ZL14onStatusUpdateP5netif+0x6c>)
 8020a7c:	f7fc fc09 	bl	801d292 <_ZN7Console6printfEPKcz>

		int32_t error = client->connectClient();
 8020a80:	4b11      	ldr	r3, [pc, #68]	; (8020ac8 <_ZL14onStatusUpdateP5netif+0x70>)
 8020a82:	681b      	ldr	r3, [r3, #0]
 8020a84:	4618      	mov	r0, r3
 8020a86:	f7fe fbe9 	bl	801f25c <_ZN12LWIPClientIO13connectClientEv>
 8020a8a:	4603      	mov	r3, r0
 8020a8c:	60fb      	str	r3, [r7, #12]

		if(error != 0) {
 8020a8e:	68fb      	ldr	r3, [r7, #12]
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	d011      	beq.n	8020ab8 <_ZL14onStatusUpdateP5netif+0x60>
			console.printf("[Telemetry] Cannot connect to server with error code %d\r\n", error);
 8020a94:	68fa      	ldr	r2, [r7, #12]
 8020a96:	490d      	ldr	r1, [pc, #52]	; (8020acc <_ZL14onStatusUpdateP5netif+0x74>)
 8020a98:	480a      	ldr	r0, [pc, #40]	; (8020ac4 <_ZL14onStatusUpdateP5netif+0x6c>)
 8020a9a:	f7fc fbfa 	bl	801d292 <_ZN7Console6printfEPKcz>
		/* When the netif link is down this function must be called */
		netif_set_down(netif);
		console.printf("[Telemetry] Link is down\r\n");
		client->disconnectClient();
	}
}
 8020a9e:	e00b      	b.n	8020ab8 <_ZL14onStatusUpdateP5netif+0x60>
		netif_set_down(netif);
 8020aa0:	6878      	ldr	r0, [r7, #4]
 8020aa2:	f7f3 fcdf 	bl	8014464 <netif_set_down>
		console.printf("[Telemetry] Link is down\r\n");
 8020aa6:	490a      	ldr	r1, [pc, #40]	; (8020ad0 <_ZL14onStatusUpdateP5netif+0x78>)
 8020aa8:	4806      	ldr	r0, [pc, #24]	; (8020ac4 <_ZL14onStatusUpdateP5netif+0x6c>)
 8020aaa:	f7fc fbf2 	bl	801d292 <_ZN7Console6printfEPKcz>
		client->disconnectClient();
 8020aae:	4b06      	ldr	r3, [pc, #24]	; (8020ac8 <_ZL14onStatusUpdateP5netif+0x70>)
 8020ab0:	681b      	ldr	r3, [r3, #0]
 8020ab2:	4618      	mov	r0, r3
 8020ab4:	f7fe fc30 	bl	801f318 <_ZN12LWIPClientIO16disconnectClientEv>
}
 8020ab8:	bf00      	nop
 8020aba:	3710      	adds	r7, #16
 8020abc:	46bd      	mov	sp, r7
 8020abe:	bd80      	pop	{r7, pc}
 8020ac0:	08027f74 	.word	0x08027f74
 8020ac4:	240049ac 	.word	0x240049ac
 8020ac8:	24009798 	.word	0x24009798
 8020acc:	08027f90 	.word	0x08027f90
 8020ad0:	08027fcc 	.word	0x08027fcc

08020ad4 <_ZN10LWIPThread4loopEv>:

void LWIPThread::loop() {
 8020ad4:	b580      	push	{r7, lr}
 8020ad6:	b082      	sub	sp, #8
 8020ad8:	af00      	add	r7, sp, #0
 8020ada:	6078      	str	r0, [r7, #4]
	//client->update(); // Handle reception
	telemetryDriver.flush(client); // Handle transmission
 8020adc:	4b04      	ldr	r3, [pc, #16]	; (8020af0 <_ZN10LWIPThread4loopEv+0x1c>)
 8020ade:	681b      	ldr	r3, [r3, #0]
 8020ae0:	4619      	mov	r1, r3
 8020ae2:	4804      	ldr	r0, [pc, #16]	; (8020af4 <_ZN10LWIPThread4loopEv+0x20>)
 8020ae4:	f7fd f9dc 	bl	801dea0 <_ZN16BufferedIODriver5flushEP8IODriver>
}
 8020ae8:	bf00      	nop
 8020aea:	3708      	adds	r7, #8
 8020aec:	46bd      	mov	sp, r7
 8020aee:	bd80      	pop	{r7, pc}
 8020af0:	24009798 	.word	0x24009798
 8020af4:	24004da0 	.word	0x24004da0

08020af8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8020af8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8020afa:	2400      	movs	r4, #0
 8020afc:	2310      	movs	r3, #16
 8020afe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8020b02:	6803      	ldr	r3, [r0, #0]
 8020b04:	9400      	str	r4, [sp, #0]
 8020b06:	699e      	ldr	r6, [r3, #24]
 8020b08:	f88d 4004 	strb.w	r4, [sp, #4]
 8020b0c:	4615      	mov	r5, r2
 8020b0e:	466b      	mov	r3, sp
 8020b10:	6812      	ldr	r2, [r2, #0]
 8020b12:	47b0      	blx	r6
 8020b14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8020b18:	f003 0306 	and.w	r3, r3, #6
 8020b1c:	2b06      	cmp	r3, #6
 8020b1e:	bf03      	ittte	eq
 8020b20:	9b00      	ldreq	r3, [sp, #0]
 8020b22:	602b      	streq	r3, [r5, #0]
 8020b24:	2001      	moveq	r0, #1
 8020b26:	4620      	movne	r0, r4
 8020b28:	b004      	add	sp, #16
 8020b2a:	bd70      	pop	{r4, r5, r6, pc}

08020b2c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8020b2c:	9800      	ldr	r0, [sp, #0]
 8020b2e:	4290      	cmp	r0, r2
 8020b30:	bf14      	ite	ne
 8020b32:	2001      	movne	r0, #1
 8020b34:	2006      	moveq	r0, #6
 8020b36:	4770      	bx	lr

08020b38 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8020b38:	b510      	push	{r4, lr}
 8020b3a:	4b03      	ldr	r3, [pc, #12]	; (8020b48 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8020b3c:	6003      	str	r3, [r0, #0]
 8020b3e:	4604      	mov	r4, r0
 8020b40:	f000 f917 	bl	8020d72 <_ZNSt9type_infoD1Ev>
 8020b44:	4620      	mov	r0, r4
 8020b46:	bd10      	pop	{r4, pc}
 8020b48:	0802860c 	.word	0x0802860c

08020b4c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8020b4c:	b510      	push	{r4, lr}
 8020b4e:	4604      	mov	r4, r0
 8020b50:	f7ff fff2 	bl	8020b38 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8020b54:	4620      	mov	r0, r4
 8020b56:	2108      	movs	r1, #8
 8020b58:	f000 f842 	bl	8020be0 <_ZdlPvj>
 8020b5c:	4620      	mov	r0, r4
 8020b5e:	bd10      	pop	{r4, pc}

08020b60 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8020b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b64:	461f      	mov	r7, r3
 8020b66:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8020b6a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8020b6e:	4598      	cmp	r8, r3
 8020b70:	4606      	mov	r6, r0
 8020b72:	4615      	mov	r5, r2
 8020b74:	d107      	bne.n	8020b86 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8020b76:	9907      	ldr	r1, [sp, #28]
 8020b78:	f000 f8fe 	bl	8020d78 <_ZNKSt9type_infoeqERKS_>
 8020b7c:	b118      	cbz	r0, 8020b86 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8020b7e:	7165      	strb	r5, [r4, #5]
 8020b80:	2000      	movs	r0, #0
 8020b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b86:	4639      	mov	r1, r7
 8020b88:	4630      	mov	r0, r6
 8020b8a:	f000 f8f5 	bl	8020d78 <_ZNKSt9type_infoeqERKS_>
 8020b8e:	2800      	cmp	r0, #0
 8020b90:	d0f6      	beq.n	8020b80 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8020b92:	2301      	movs	r3, #1
 8020b94:	f8c4 8000 	str.w	r8, [r4]
 8020b98:	7125      	strb	r5, [r4, #4]
 8020b9a:	71a3      	strb	r3, [r4, #6]
 8020b9c:	e7f0      	b.n	8020b80 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08020b9e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8020b9e:	b538      	push	{r3, r4, r5, lr}
 8020ba0:	4615      	mov	r5, r2
 8020ba2:	461c      	mov	r4, r3
 8020ba4:	f000 f8e8 	bl	8020d78 <_ZNKSt9type_infoeqERKS_>
 8020ba8:	b120      	cbz	r0, 8020bb4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8020baa:	2308      	movs	r3, #8
 8020bac:	60e3      	str	r3, [r4, #12]
 8020bae:	2306      	movs	r3, #6
 8020bb0:	6025      	str	r5, [r4, #0]
 8020bb2:	7123      	strb	r3, [r4, #4]
 8020bb4:	bd38      	pop	{r3, r4, r5, pc}

08020bb6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8020bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020bb8:	4605      	mov	r5, r0
 8020bba:	460c      	mov	r4, r1
 8020bbc:	9201      	str	r2, [sp, #4]
 8020bbe:	461e      	mov	r6, r3
 8020bc0:	f000 f8da 	bl	8020d78 <_ZNKSt9type_infoeqERKS_>
 8020bc4:	b950      	cbnz	r0, 8020bdc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8020bc6:	2e03      	cmp	r6, #3
 8020bc8:	d808      	bhi.n	8020bdc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8020bca:	6823      	ldr	r3, [r4, #0]
 8020bcc:	9a01      	ldr	r2, [sp, #4]
 8020bce:	695b      	ldr	r3, [r3, #20]
 8020bd0:	4629      	mov	r1, r5
 8020bd2:	4620      	mov	r0, r4
 8020bd4:	b002      	add	sp, #8
 8020bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020bda:	4718      	bx	r3
 8020bdc:	b002      	add	sp, #8
 8020bde:	bd70      	pop	{r4, r5, r6, pc}

08020be0 <_ZdlPvj>:
 8020be0:	f7fc bbaa 	b.w	801d338 <_ZdlPv>

08020be4 <__cxa_guard_acquire>:
 8020be4:	6803      	ldr	r3, [r0, #0]
 8020be6:	07db      	lsls	r3, r3, #31
 8020be8:	d406      	bmi.n	8020bf8 <__cxa_guard_acquire+0x14>
 8020bea:	7843      	ldrb	r3, [r0, #1]
 8020bec:	b103      	cbz	r3, 8020bf0 <__cxa_guard_acquire+0xc>
 8020bee:	deff      	udf	#255	; 0xff
 8020bf0:	2301      	movs	r3, #1
 8020bf2:	7043      	strb	r3, [r0, #1]
 8020bf4:	4618      	mov	r0, r3
 8020bf6:	4770      	bx	lr
 8020bf8:	2000      	movs	r0, #0
 8020bfa:	4770      	bx	lr

08020bfc <__cxa_guard_release>:
 8020bfc:	2301      	movs	r3, #1
 8020bfe:	6003      	str	r3, [r0, #0]
 8020c00:	4770      	bx	lr
	...

08020c04 <_ZSt11_Hash_bytesPKvjj>:
 8020c04:	4b18      	ldr	r3, [pc, #96]	; (8020c68 <_ZSt11_Hash_bytesPKvjj+0x64>)
 8020c06:	b570      	push	{r4, r5, r6, lr}
 8020c08:	404a      	eors	r2, r1
 8020c0a:	460d      	mov	r5, r1
 8020c0c:	1846      	adds	r6, r0, r1
 8020c0e:	2d03      	cmp	r5, #3
 8020c10:	eba6 0405 	sub.w	r4, r6, r5
 8020c14:	d908      	bls.n	8020c28 <_ZSt11_Hash_bytesPKvjj+0x24>
 8020c16:	6824      	ldr	r4, [r4, #0]
 8020c18:	435c      	muls	r4, r3
 8020c1a:	ea84 6414 	eor.w	r4, r4, r4, lsr #24
 8020c1e:	435a      	muls	r2, r3
 8020c20:	435c      	muls	r4, r3
 8020c22:	4062      	eors	r2, r4
 8020c24:	3d04      	subs	r5, #4
 8020c26:	e7f2      	b.n	8020c0e <_ZSt11_Hash_bytesPKvjj+0xa>
 8020c28:	088d      	lsrs	r5, r1, #2
 8020c2a:	f06f 0403 	mvn.w	r4, #3
 8020c2e:	fb04 1105 	mla	r1, r4, r5, r1
 8020c32:	2902      	cmp	r1, #2
 8020c34:	eb00 0485 	add.w	r4, r0, r5, lsl #2
 8020c38:	d011      	beq.n	8020c5e <_ZSt11_Hash_bytesPKvjj+0x5a>
 8020c3a:	2903      	cmp	r1, #3
 8020c3c:	d00c      	beq.n	8020c58 <_ZSt11_Hash_bytesPKvjj+0x54>
 8020c3e:	2901      	cmp	r1, #1
 8020c40:	d103      	bne.n	8020c4a <_ZSt11_Hash_bytesPKvjj+0x46>
 8020c42:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
 8020c46:	4042      	eors	r2, r0
 8020c48:	435a      	muls	r2, r3
 8020c4a:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 8020c4e:	fb03 f002 	mul.w	r0, r3, r2
 8020c52:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 8020c56:	bd70      	pop	{r4, r5, r6, pc}
 8020c58:	78a1      	ldrb	r1, [r4, #2]
 8020c5a:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 8020c5e:	7861      	ldrb	r1, [r4, #1]
 8020c60:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 8020c64:	e7ed      	b.n	8020c42 <_ZSt11_Hash_bytesPKvjj+0x3e>
 8020c66:	bf00      	nop
 8020c68:	5bd1e995 	.word	0x5bd1e995

08020c6c <__cxa_pure_virtual>:
 8020c6c:	b508      	push	{r3, lr}
 8020c6e:	f000 fb95 	bl	802139c <_ZSt9terminatev>
	...

08020c74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8020c74:	b510      	push	{r4, lr}
 8020c76:	4b03      	ldr	r3, [pc, #12]	; (8020c84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8020c78:	6003      	str	r3, [r0, #0]
 8020c7a:	4604      	mov	r4, r0
 8020c7c:	f7ff ff5c 	bl	8020b38 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8020c80:	4620      	mov	r0, r4
 8020c82:	bd10      	pop	{r4, pc}
 8020c84:	0802866c 	.word	0x0802866c

08020c88 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8020c88:	b510      	push	{r4, lr}
 8020c8a:	4604      	mov	r4, r0
 8020c8c:	f7ff fff2 	bl	8020c74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8020c90:	4620      	mov	r0, r4
 8020c92:	210c      	movs	r1, #12
 8020c94:	f7ff ffa4 	bl	8020be0 <_ZdlPvj>
 8020c98:	4620      	mov	r0, r4
 8020c9a:	bd10      	pop	{r4, pc}

08020c9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8020c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020c9e:	9f08      	ldr	r7, [sp, #32]
 8020ca0:	4297      	cmp	r7, r2
 8020ca2:	4605      	mov	r5, r0
 8020ca4:	460e      	mov	r6, r1
 8020ca6:	4614      	mov	r4, r2
 8020ca8:	d00a      	beq.n	8020cc0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8020caa:	68a8      	ldr	r0, [r5, #8]
 8020cac:	6802      	ldr	r2, [r0, #0]
 8020cae:	9708      	str	r7, [sp, #32]
 8020cb0:	6a15      	ldr	r5, [r2, #32]
 8020cb2:	4631      	mov	r1, r6
 8020cb4:	4622      	mov	r2, r4
 8020cb6:	46ac      	mov	ip, r5
 8020cb8:	b003      	add	sp, #12
 8020cba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020cbe:	4760      	bx	ip
 8020cc0:	4619      	mov	r1, r3
 8020cc2:	9301      	str	r3, [sp, #4]
 8020cc4:	f000 f858 	bl	8020d78 <_ZNKSt9type_infoeqERKS_>
 8020cc8:	9b01      	ldr	r3, [sp, #4]
 8020cca:	2800      	cmp	r0, #0
 8020ccc:	d0ed      	beq.n	8020caa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8020cce:	2006      	movs	r0, #6
 8020cd0:	b003      	add	sp, #12
 8020cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020cd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8020cd4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cd8:	460d      	mov	r5, r1
 8020cda:	4619      	mov	r1, r3
 8020cdc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8020ce0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8020ce4:	4681      	mov	r9, r0
 8020ce6:	4617      	mov	r7, r2
 8020ce8:	4698      	mov	r8, r3
 8020cea:	f000 f845 	bl	8020d78 <_ZNKSt9type_infoeqERKS_>
 8020cee:	b190      	cbz	r0, 8020d16 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8020cf0:	2d00      	cmp	r5, #0
 8020cf2:	6034      	str	r4, [r6, #0]
 8020cf4:	7137      	strb	r7, [r6, #4]
 8020cf6:	db09      	blt.n	8020d0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8020cf8:	1961      	adds	r1, r4, r5
 8020cfa:	458a      	cmp	sl, r1
 8020cfc:	bf0c      	ite	eq
 8020cfe:	2106      	moveq	r1, #6
 8020d00:	2101      	movne	r1, #1
 8020d02:	71b1      	strb	r1, [r6, #6]
 8020d04:	2000      	movs	r0, #0
 8020d06:	b001      	add	sp, #4
 8020d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d0c:	3502      	adds	r5, #2
 8020d0e:	d1f9      	bne.n	8020d04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8020d10:	2301      	movs	r3, #1
 8020d12:	71b3      	strb	r3, [r6, #6]
 8020d14:	e7f6      	b.n	8020d04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8020d16:	4554      	cmp	r4, sl
 8020d18:	d106      	bne.n	8020d28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8020d1a:	4659      	mov	r1, fp
 8020d1c:	4648      	mov	r0, r9
 8020d1e:	f000 f82b 	bl	8020d78 <_ZNKSt9type_infoeqERKS_>
 8020d22:	b108      	cbz	r0, 8020d28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8020d24:	7177      	strb	r7, [r6, #5]
 8020d26:	e7ed      	b.n	8020d04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8020d28:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8020d2c:	6803      	ldr	r3, [r0, #0]
 8020d2e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8020d32:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8020d36:	69dc      	ldr	r4, [r3, #28]
 8020d38:	463a      	mov	r2, r7
 8020d3a:	4643      	mov	r3, r8
 8020d3c:	4629      	mov	r1, r5
 8020d3e:	46a4      	mov	ip, r4
 8020d40:	b001      	add	sp, #4
 8020d42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d46:	4760      	bx	ip

08020d48 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8020d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d4c:	4607      	mov	r7, r0
 8020d4e:	460c      	mov	r4, r1
 8020d50:	4615      	mov	r5, r2
 8020d52:	461e      	mov	r6, r3
 8020d54:	f7ff ff23 	bl	8020b9e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8020d58:	b948      	cbnz	r0, 8020d6e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8020d5a:	68b8      	ldr	r0, [r7, #8]
 8020d5c:	6803      	ldr	r3, [r0, #0]
 8020d5e:	699f      	ldr	r7, [r3, #24]
 8020d60:	462a      	mov	r2, r5
 8020d62:	4633      	mov	r3, r6
 8020d64:	4621      	mov	r1, r4
 8020d66:	46bc      	mov	ip, r7
 8020d68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020d6c:	4760      	bx	ip
 8020d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020d72 <_ZNSt9type_infoD1Ev>:
 8020d72:	4770      	bx	lr

08020d74 <_ZNKSt9type_info14__is_pointer_pEv>:
 8020d74:	2000      	movs	r0, #0
 8020d76:	4770      	bx	lr

08020d78 <_ZNKSt9type_infoeqERKS_>:
 8020d78:	4281      	cmp	r1, r0
 8020d7a:	b508      	push	{r3, lr}
 8020d7c:	d00e      	beq.n	8020d9c <_ZNKSt9type_infoeqERKS_+0x24>
 8020d7e:	6840      	ldr	r0, [r0, #4]
 8020d80:	7803      	ldrb	r3, [r0, #0]
 8020d82:	2b2a      	cmp	r3, #42	; 0x2a
 8020d84:	d00c      	beq.n	8020da0 <_ZNKSt9type_infoeqERKS_+0x28>
 8020d86:	6849      	ldr	r1, [r1, #4]
 8020d88:	780b      	ldrb	r3, [r1, #0]
 8020d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8020d8c:	bf08      	it	eq
 8020d8e:	3101      	addeq	r1, #1
 8020d90:	f7df faf6 	bl	8000380 <strcmp>
 8020d94:	fab0 f080 	clz	r0, r0
 8020d98:	0940      	lsrs	r0, r0, #5
 8020d9a:	bd08      	pop	{r3, pc}
 8020d9c:	2001      	movs	r0, #1
 8020d9e:	e7fc      	b.n	8020d9a <_ZNKSt9type_infoeqERKS_+0x22>
 8020da0:	2000      	movs	r0, #0
 8020da2:	e7fa      	b.n	8020d9a <_ZNKSt9type_infoeqERKS_+0x22>

08020da4 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 8020da4:	b510      	push	{r4, lr}
 8020da6:	4b03      	ldr	r3, [pc, #12]	; (8020db4 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 8020da8:	6003      	str	r3, [r0, #0]
 8020daa:	4604      	mov	r4, r0
 8020dac:	f7ff fec4 	bl	8020b38 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8020db0:	4620      	mov	r0, r4
 8020db2:	bd10      	pop	{r4, pc}
 8020db4:	080286e4 	.word	0x080286e4

08020db8 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 8020db8:	b510      	push	{r4, lr}
 8020dba:	4604      	mov	r4, r0
 8020dbc:	f7ff fff2 	bl	8020da4 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 8020dc0:	4620      	mov	r0, r4
 8020dc2:	2118      	movs	r1, #24
 8020dc4:	f7ff ff0c 	bl	8020be0 <_ZdlPvj>
 8020dc8:	4620      	mov	r0, r4
 8020dca:	bd10      	pop	{r4, pc}

08020dcc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8020dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dd0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8020dd4:	454a      	cmp	r2, r9
 8020dd6:	4604      	mov	r4, r0
 8020dd8:	460f      	mov	r7, r1
 8020dda:	4616      	mov	r6, r2
 8020ddc:	469a      	mov	sl, r3
 8020dde:	d024      	beq.n	8020e2a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 8020de0:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8020de4:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 8020de8:	f1b8 0f00 	cmp.w	r8, #0
 8020dec:	d028      	beq.n	8020e40 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
 8020dee:	68e5      	ldr	r5, [r4, #12]
 8020df0:	07aa      	lsls	r2, r5, #30
 8020df2:	d521      	bpl.n	8020e38 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8020df4:	122a      	asrs	r2, r5, #8
 8020df6:	f015 0501 	ands.w	r5, r5, #1
 8020dfa:	d003      	beq.n	8020e04 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
 8020dfc:	1cfb      	adds	r3, r7, #3
 8020dfe:	d01b      	beq.n	8020e38 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8020e00:	6833      	ldr	r3, [r6, #0]
 8020e02:	589a      	ldr	r2, [r3, r2]
 8020e04:	68a0      	ldr	r0, [r4, #8]
 8020e06:	6803      	ldr	r3, [r0, #0]
 8020e08:	f8cd 9000 	str.w	r9, [sp]
 8020e0c:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8020e10:	4432      	add	r2, r6
 8020e12:	4653      	mov	r3, sl
 8020e14:	4639      	mov	r1, r7
 8020e16:	47d8      	blx	fp
 8020e18:	2803      	cmp	r0, #3
 8020e1a:	d90d      	bls.n	8020e38 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8020e1c:	b115      	cbz	r5, 8020e24 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8020e1e:	f040 0001 	orr.w	r0, r0, #1
 8020e22:	b2c0      	uxtb	r0, r0
 8020e24:	b003      	add	sp, #12
 8020e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e2a:	4619      	mov	r1, r3
 8020e2c:	f7ff ffa4 	bl	8020d78 <_ZNKSt9type_infoeqERKS_>
 8020e30:	2800      	cmp	r0, #0
 8020e32:	d0d5      	beq.n	8020de0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8020e34:	2006      	movs	r0, #6
 8020e36:	e7f5      	b.n	8020e24 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8020e38:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8020e3c:	3c08      	subs	r4, #8
 8020e3e:	e7d3      	b.n	8020de8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 8020e40:	2001      	movs	r0, #1
 8020e42:	e7ef      	b.n	8020e24 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

08020e44 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 8020e44:	b4f0      	push	{r4, r5, r6, r7}
 8020e46:	1e0c      	subs	r4, r1, #0
 8020e48:	9e04      	ldr	r6, [sp, #16]
 8020e4a:	db06      	blt.n	8020e5a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 8020e4c:	4414      	add	r4, r2
 8020e4e:	42a6      	cmp	r6, r4
 8020e50:	bf14      	ite	ne
 8020e52:	2001      	movne	r0, #1
 8020e54:	2006      	moveq	r0, #6
 8020e56:	bcf0      	pop	{r4, r5, r6, r7}
 8020e58:	4770      	bx	lr
 8020e5a:	3402      	adds	r4, #2
 8020e5c:	d004      	beq.n	8020e68 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x24>
 8020e5e:	6804      	ldr	r4, [r0, #0]
 8020e60:	6a24      	ldr	r4, [r4, #32]
 8020e62:	46a4      	mov	ip, r4
 8020e64:	bcf0      	pop	{r4, r5, r6, r7}
 8020e66:	4760      	bx	ip
 8020e68:	2001      	movs	r0, #1
 8020e6a:	e7f4      	b.n	8020e56 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

08020e6c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8020e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e70:	b091      	sub	sp, #68	; 0x44
 8020e72:	469a      	mov	sl, r3
 8020e74:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8020e76:	9206      	str	r2, [sp, #24]
 8020e78:	68a3      	ldr	r3, [r4, #8]
 8020e7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8020e7c:	4688      	mov	r8, r1
 8020e7e:	06d9      	lsls	r1, r3, #27
 8020e80:	bf44      	itt	mi
 8020e82:	6883      	ldrmi	r3, [r0, #8]
 8020e84:	60a3      	strmi	r3, [r4, #8]
 8020e86:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020e88:	4293      	cmp	r3, r2
 8020e8a:	4681      	mov	r9, r0
 8020e8c:	d107      	bne.n	8020e9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 8020e8e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8020e90:	f7ff ff72 	bl	8020d78 <_ZNKSt9type_infoeqERKS_>
 8020e94:	b118      	cbz	r0, 8020e9e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 8020e96:	9b06      	ldr	r3, [sp, #24]
 8020e98:	7163      	strb	r3, [r4, #5]
 8020e9a:	2700      	movs	r7, #0
 8020e9c:	e082      	b.n	8020fa4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 8020e9e:	4651      	mov	r1, sl
 8020ea0:	4648      	mov	r0, r9
 8020ea2:	f7ff ff69 	bl	8020d78 <_ZNKSt9type_infoeqERKS_>
 8020ea6:	b1c0      	cbz	r0, 8020eda <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 8020ea8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020eaa:	6023      	str	r3, [r4, #0]
 8020eac:	f1b8 0f00 	cmp.w	r8, #0
 8020eb0:	9b06      	ldr	r3, [sp, #24]
 8020eb2:	7123      	strb	r3, [r4, #4]
 8020eb4:	db0b      	blt.n	8020ece <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x62>
 8020eb6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020eb8:	4498      	add	r8, r3
 8020eba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020ebc:	4543      	cmp	r3, r8
 8020ebe:	bf0c      	ite	eq
 8020ec0:	f04f 0806 	moveq.w	r8, #6
 8020ec4:	f04f 0801 	movne.w	r8, #1
 8020ec8:	f884 8006 	strb.w	r8, [r4, #6]
 8020ecc:	e7e5      	b.n	8020e9a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8020ece:	f118 0f02 	cmn.w	r8, #2
 8020ed2:	d1e2      	bne.n	8020e9a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8020ed4:	2301      	movs	r3, #1
 8020ed6:	71a3      	strb	r3, [r4, #6]
 8020ed8:	e7df      	b.n	8020e9a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8020eda:	f1b8 0f00 	cmp.w	r8, #0
 8020ede:	bfa9      	itett	ge
 8020ee0:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 8020ee2:	9007      	strlt	r0, [sp, #28]
 8020ee4:	eba3 0308 	subge.w	r3, r3, r8
 8020ee8:	9307      	strge	r3, [sp, #28]
 8020eea:	2700      	movs	r7, #0
 8020eec:	2302      	movs	r3, #2
 8020eee:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 8020ef2:	2301      	movs	r3, #1
 8020ef4:	9308      	str	r3, [sp, #32]
 8020ef6:	9b06      	ldr	r3, [sp, #24]
 8020ef8:	f043 0301 	orr.w	r3, r3, #1
 8020efc:	930b      	str	r3, [sp, #44]	; 0x2c
 8020efe:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8020f02:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
 8020f06:	9305      	str	r3, [sp, #20]
 8020f08:	f1bb 0f00 	cmp.w	fp, #0
 8020f0c:	f000 80d7 	beq.w	80210be <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x252>
 8020f10:	2300      	movs	r3, #0
 8020f12:	930d      	str	r3, [sp, #52]	; 0x34
 8020f14:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8020f18:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8020f1c:	9b05      	ldr	r3, [sp, #20]
 8020f1e:	68a5      	ldr	r5, [r4, #8]
 8020f20:	68db      	ldr	r3, [r3, #12]
 8020f22:	950f      	str	r5, [sp, #60]	; 0x3c
 8020f24:	07da      	lsls	r2, r3, #31
 8020f26:	bf43      	ittte	mi
 8020f28:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 8020f2a:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 8020f2c:	6800      	ldrmi	r0, [r0, #0]
 8020f2e:	9a06      	ldrpl	r2, [sp, #24]
 8020f30:	ea4f 2123 	mov.w	r1, r3, asr #8
 8020f34:	bf48      	it	mi
 8020f36:	5841      	ldrmi	r1, [r0, r1]
 8020f38:	981a      	ldr	r0, [sp, #104]	; 0x68
 8020f3a:	4401      	add	r1, r0
 8020f3c:	9807      	ldr	r0, [sp, #28]
 8020f3e:	b138      	cbz	r0, 8020f50 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe4>
 8020f40:	4288      	cmp	r0, r1
 8020f42:	9e08      	ldr	r6, [sp, #32]
 8020f44:	bf2c      	ite	cs
 8020f46:	2000      	movcs	r0, #0
 8020f48:	2001      	movcc	r0, #1
 8020f4a:	42b0      	cmp	r0, r6
 8020f4c:	f000 80b3 	beq.w	80210b6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24a>
 8020f50:	079b      	lsls	r3, r3, #30
 8020f52:	d407      	bmi.n	8020f64 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 8020f54:	f118 0f02 	cmn.w	r8, #2
 8020f58:	d102      	bne.n	8020f60 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf4>
 8020f5a:	07ae      	lsls	r6, r5, #30
 8020f5c:	f000 80ad 	beq.w	80210ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24e>
 8020f60:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8020f64:	9b05      	ldr	r3, [sp, #20]
 8020f66:	6898      	ldr	r0, [r3, #8]
 8020f68:	ad0d      	add	r5, sp, #52	; 0x34
 8020f6a:	6803      	ldr	r3, [r0, #0]
 8020f6c:	9503      	str	r5, [sp, #12]
 8020f6e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020f70:	9502      	str	r5, [sp, #8]
 8020f72:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8020f74:	e9cd 1500 	strd	r1, r5, [sp]
 8020f78:	4641      	mov	r1, r8
 8020f7a:	69dd      	ldr	r5, [r3, #28]
 8020f7c:	4653      	mov	r3, sl
 8020f7e:	47a8      	blx	r5
 8020f80:	7963      	ldrb	r3, [r4, #5]
 8020f82:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8020f86:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 8020f8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020f8c:	4313      	orrs	r3, r2
 8020f8e:	2d06      	cmp	r5, #6
 8020f90:	7163      	strb	r3, [r4, #5]
 8020f92:	d001      	beq.n	8020f98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12c>
 8020f94:	2d02      	cmp	r5, #2
 8020f96:	d109      	bne.n	8020fac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 8020f98:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8020f9c:	6021      	str	r1, [r4, #0]
 8020f9e:	7123      	strb	r3, [r4, #4]
 8020fa0:	71a5      	strb	r5, [r4, #6]
 8020fa2:	4607      	mov	r7, r0
 8020fa4:	4638      	mov	r0, r7
 8020fa6:	b011      	add	sp, #68	; 0x44
 8020fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fac:	6822      	ldr	r2, [r4, #0]
 8020fae:	b9a7      	cbnz	r7, 8020fda <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16e>
 8020fb0:	b9aa      	cbnz	r2, 8020fde <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x172>
 8020fb2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8020fb6:	6021      	str	r1, [r4, #0]
 8020fb8:	7122      	strb	r2, [r4, #4]
 8020fba:	b121      	cbz	r1, 8020fc6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 8020fbc:	b11b      	cbz	r3, 8020fc6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 8020fbe:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8020fc2:	07dd      	lsls	r5, r3, #31
 8020fc4:	d5ed      	bpl.n	8020fa2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 8020fc6:	7963      	ldrb	r3, [r4, #5]
 8020fc8:	2b04      	cmp	r3, #4
 8020fca:	d0ea      	beq.n	8020fa2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 8020fcc:	9b05      	ldr	r3, [sp, #20]
 8020fce:	3b08      	subs	r3, #8
 8020fd0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8020fd4:	9305      	str	r3, [sp, #20]
 8020fd6:	4607      	mov	r7, r0
 8020fd8:	e796      	b.n	8020f08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
 8020fda:	2a00      	cmp	r2, #0
 8020fdc:	d037      	beq.n	802104e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
 8020fde:	4291      	cmp	r1, r2
 8020fe0:	d106      	bne.n	8020ff0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 8020fe2:	7923      	ldrb	r3, [r4, #4]
 8020fe4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8020fe8:	4313      	orrs	r3, r2
 8020fea:	7123      	strb	r3, [r4, #4]
 8020fec:	4638      	mov	r0, r7
 8020fee:	e7ea      	b.n	8020fc6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 8020ff0:	b909      	cbnz	r1, 8020ff6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18a>
 8020ff2:	2800      	cmp	r0, #0
 8020ff4:	d0fa      	beq.n	8020fec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x180>
 8020ff6:	2b03      	cmp	r3, #3
 8020ff8:	79a6      	ldrb	r6, [r4, #6]
 8020ffa:	d904      	bls.n	8021006 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x19a>
 8020ffc:	07d9      	lsls	r1, r3, #31
 8020ffe:	d529      	bpl.n	8021054 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e8>
 8021000:	68a3      	ldr	r3, [r4, #8]
 8021002:	079b      	lsls	r3, r3, #30
 8021004:	d526      	bpl.n	8021054 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e8>
 8021006:	b97e      	cbnz	r6, 8021028 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1bc>
 8021008:	2d03      	cmp	r5, #3
 802100a:	d905      	bls.n	8021018 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ac>
 802100c:	07ee      	lsls	r6, r5, #31
 802100e:	d541      	bpl.n	8021094 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 8021010:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8021014:	0798      	lsls	r0, r3, #30
 8021016:	d53d      	bpl.n	8021094 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
 8021018:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802101a:	9300      	str	r3, [sp, #0]
 802101c:	4641      	mov	r1, r8
 802101e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021020:	4650      	mov	r0, sl
 8021022:	f7ff ff0f 	bl	8020e44 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8021026:	4606      	mov	r6, r0
 8021028:	b9e5      	cbnz	r5, 8021064 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 802102a:	2e03      	cmp	r6, #3
 802102c:	d905      	bls.n	802103a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ce>
 802102e:	07f1      	lsls	r1, r6, #31
 8021030:	d532      	bpl.n	8021098 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 8021032:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8021036:	079a      	lsls	r2, r3, #30
 8021038:	d52e      	bpl.n	8021098 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 802103a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802103c:	9300      	str	r3, [sp, #0]
 802103e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021040:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021042:	4641      	mov	r1, r8
 8021044:	4650      	mov	r0, sl
 8021046:	f7ff fefd 	bl	8020e44 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 802104a:	4605      	mov	r5, r0
 802104c:	e00a      	b.n	8021064 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 802104e:	2900      	cmp	r1, #0
 8021050:	d1d1      	bne.n	8020ff6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18a>
 8021052:	e7cb      	b.n	8020fec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x180>
 8021054:	2e01      	cmp	r6, #1
 8021056:	bf38      	it	cc
 8021058:	2601      	movcc	r6, #1
 802105a:	2d01      	cmp	r5, #1
 802105c:	bf38      	it	cc
 802105e:	2501      	movcc	r5, #1
 8021060:	b2f6      	uxtb	r6, r6
 8021062:	b2ed      	uxtb	r5, r5
 8021064:	ea85 0306 	eor.w	r3, r5, r6
 8021068:	b2db      	uxtb	r3, r3
 802106a:	2b03      	cmp	r3, #3
 802106c:	d916      	bls.n	802109c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 802106e:	2d03      	cmp	r5, #3
 8021070:	bf81      	itttt	hi
 8021072:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 8021074:	6023      	strhi	r3, [r4, #0]
 8021076:	462e      	movhi	r6, r5
 8021078:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 802107c:	bf86      	itte	hi
 802107e:	7123      	strbhi	r3, [r4, #4]
 8021080:	2000      	movhi	r0, #0
 8021082:	4638      	movls	r0, r7
 8021084:	07b3      	lsls	r3, r6, #30
 8021086:	71a6      	strb	r6, [r4, #6]
 8021088:	d402      	bmi.n	8021090 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x224>
 802108a:	f016 0601 	ands.w	r6, r6, #1
 802108e:	d19a      	bne.n	8020fc6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 8021090:	2000      	movs	r0, #0
 8021092:	e786      	b.n	8020fa2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 8021094:	2601      	movs	r6, #1
 8021096:	e7e5      	b.n	8021064 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 8021098:	2501      	movs	r5, #1
 802109a:	e7e3      	b.n	8021064 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f8>
 802109c:	4035      	ands	r5, r6
 802109e:	b2ed      	uxtb	r5, r5
 80210a0:	2300      	movs	r3, #0
 80210a2:	2d03      	cmp	r5, #3
 80210a4:	6023      	str	r3, [r4, #0]
 80210a6:	d903      	bls.n	80210b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x244>
 80210a8:	2302      	movs	r3, #2
 80210aa:	71a3      	strb	r3, [r4, #6]
 80210ac:	2001      	movs	r0, #1
 80210ae:	e778      	b.n	8020fa2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x136>
 80210b0:	2001      	movs	r0, #1
 80210b2:	71a0      	strb	r0, [r4, #6]
 80210b4:	e787      	b.n	8020fc6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 80210b6:	2301      	movs	r3, #1
 80210b8:	9309      	str	r3, [sp, #36]	; 0x24
 80210ba:	4638      	mov	r0, r7
 80210bc:	e786      	b.n	8020fcc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x160>
 80210be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210c0:	2b00      	cmp	r3, #0
 80210c2:	f43f af6f 	beq.w	8020fa4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 80210c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80210c8:	2b01      	cmp	r3, #1
 80210ca:	f43f af6b 	beq.w	8020fa4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x138>
 80210ce:	2301      	movs	r3, #1
 80210d0:	930a      	str	r3, [sp, #40]	; 0x28
 80210d2:	f8cd b020 	str.w	fp, [sp, #32]
 80210d6:	e712      	b.n	8020efe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x92>

080210d8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80210d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210dc:	ed2d 8b02 	vpush	{d8}
 80210e0:	b089      	sub	sp, #36	; 0x24
 80210e2:	ee08 1a10 	vmov	s16, r1
 80210e6:	4606      	mov	r6, r0
 80210e8:	4617      	mov	r7, r2
 80210ea:	461c      	mov	r4, r3
 80210ec:	f7ff fd57 	bl	8020b9e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80210f0:	4605      	mov	r5, r0
 80210f2:	2800      	cmp	r0, #0
 80210f4:	d15f      	bne.n	80211b6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 80210f6:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80210fa:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80210fe:	f019 0f10 	tst.w	r9, #16
 8021102:	bf18      	it	ne
 8021104:	f8d6 9008 	ldrne.w	r9, [r6, #8]
 8021108:	f009 0301 	and.w	r3, r9, #1
 802110c:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
 8021110:	9303      	str	r3, [sp, #12]
 8021112:	f10d 0b10 	add.w	fp, sp, #16
 8021116:	f1ba 0f00 	cmp.w	sl, #0
 802111a:	d074      	beq.n	8021206 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12e>
 802111c:	2300      	movs	r3, #0
 802111e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8021122:	9304      	str	r3, [sp, #16]
 8021124:	f88d 3014 	strb.w	r3, [sp, #20]
 8021128:	2300      	movs	r3, #0
 802112a:	9307      	str	r3, [sp, #28]
 802112c:	f002 0301 	and.w	r3, r2, #1
 8021130:	9301      	str	r3, [sp, #4]
 8021132:	f002 0302 	and.w	r3, r2, #2
 8021136:	9302      	str	r3, [sp, #8]
 8021138:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 802113c:	430b      	orrs	r3, r1
 802113e:	f8cd 9018 	str.w	r9, [sp, #24]
 8021142:	d104      	bne.n	802114e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x76>
 8021144:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8021148:	f1a8 0808 	sub.w	r8, r8, #8
 802114c:	e7e3      	b.n	8021116 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3e>
 802114e:	2f00      	cmp	r7, #0
 8021150:	d037      	beq.n	80211c2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xea>
 8021152:	9b01      	ldr	r3, [sp, #4]
 8021154:	1212      	asrs	r2, r2, #8
 8021156:	b10b      	cbz	r3, 802115c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x84>
 8021158:	683b      	ldr	r3, [r7, #0]
 802115a:	589a      	ldr	r2, [r3, r2]
 802115c:	443a      	add	r2, r7
 802115e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8021162:	6803      	ldr	r3, [r0, #0]
 8021164:	ee18 1a10 	vmov	r1, s16
 8021168:	699d      	ldr	r5, [r3, #24]
 802116a:	465b      	mov	r3, fp
 802116c:	47a8      	blx	r5
 802116e:	4605      	mov	r5, r0
 8021170:	2800      	cmp	r0, #0
 8021172:	d0e7      	beq.n	8021144 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 8021174:	9b07      	ldr	r3, [sp, #28]
 8021176:	2b08      	cmp	r3, #8
 8021178:	d104      	bne.n	8021184 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 802117a:	9b01      	ldr	r3, [sp, #4]
 802117c:	b113      	cbz	r3, 8021184 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 802117e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021182:	9307      	str	r3, [sp, #28]
 8021184:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021188:	2b03      	cmp	r3, #3
 802118a:	d905      	bls.n	8021198 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 802118c:	9a02      	ldr	r2, [sp, #8]
 802118e:	b91a      	cbnz	r2, 8021198 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 8021190:	f023 0302 	bic.w	r3, r3, #2
 8021194:	f88d 3014 	strb.w	r3, [sp, #20]
 8021198:	68e1      	ldr	r1, [r4, #12]
 802119a:	b9d1      	cbnz	r1, 80211d2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfa>
 802119c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80211a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80211a4:	7923      	ldrb	r3, [r4, #4]
 80211a6:	2b03      	cmp	r3, #3
 80211a8:	d905      	bls.n	80211b6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 80211aa:	079a      	lsls	r2, r3, #30
 80211ac:	d50b      	bpl.n	80211c6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xee>
 80211ae:	68b3      	ldr	r3, [r6, #8]
 80211b0:	f013 0f01 	tst.w	r3, #1
 80211b4:	d1c6      	bne.n	8021144 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 80211b6:	4628      	mov	r0, r5
 80211b8:	b009      	add	sp, #36	; 0x24
 80211ba:	ecbd 8b02 	vpop	{d8}
 80211be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211c2:	463a      	mov	r2, r7
 80211c4:	e7cb      	b.n	802115e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x86>
 80211c6:	07db      	lsls	r3, r3, #31
 80211c8:	d5f5      	bpl.n	80211b6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 80211ca:	68b3      	ldr	r3, [r6, #8]
 80211cc:	f013 0f02 	tst.w	r3, #2
 80211d0:	e7f0      	b.n	80211b4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
 80211d2:	6823      	ldr	r3, [r4, #0]
 80211d4:	9a04      	ldr	r2, [sp, #16]
 80211d6:	4293      	cmp	r3, r2
 80211d8:	d004      	beq.n	80211e4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 80211da:	2300      	movs	r3, #0
 80211dc:	6023      	str	r3, [r4, #0]
 80211de:	2302      	movs	r3, #2
 80211e0:	7123      	strb	r3, [r4, #4]
 80211e2:	e7e8      	b.n	80211b6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 80211e4:	b12b      	cbz	r3, 80211f2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11a>
 80211e6:	7923      	ldrb	r3, [r4, #4]
 80211e8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80211ec:	4313      	orrs	r3, r2
 80211ee:	7123      	strb	r3, [r4, #4]
 80211f0:	e7a8      	b.n	8021144 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 80211f2:	9807      	ldr	r0, [sp, #28]
 80211f4:	2808      	cmp	r0, #8
 80211f6:	d0f2      	beq.n	80211de <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 80211f8:	2908      	cmp	r1, #8
 80211fa:	d0f0      	beq.n	80211de <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 80211fc:	f7ff fdbc 	bl	8020d78 <_ZNKSt9type_infoeqERKS_>
 8021200:	2800      	cmp	r0, #0
 8021202:	d1f0      	bne.n	80211e6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10e>
 8021204:	e7eb      	b.n	80211de <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 8021206:	7925      	ldrb	r5, [r4, #4]
 8021208:	3d00      	subs	r5, #0
 802120a:	bf18      	it	ne
 802120c:	2501      	movne	r5, #1
 802120e:	e7d2      	b.n	80211b6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>

08021210 <_ZNSaIcEC1Ev>:
 8021210:	4770      	bx	lr

08021212 <_ZNSaIcED1Ev>:
 8021212:	4770      	bx	lr

08021214 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8021214:	b10a      	cbz	r2, 802121a <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8021216:	f000 b90f 	b.w	8021438 <memcpy>
 802121a:	4770      	bx	lr

0802121c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 802121c:	b508      	push	{r3, lr}
 802121e:	680b      	ldr	r3, [r1, #0]
 8021220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021224:	d302      	bcc.n	802122c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8021226:	480d      	ldr	r0, [pc, #52]	; (802125c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8021228:	f000 f8c3 	bl	80213b2 <_ZSt20__throw_length_errorPKc>
 802122c:	4293      	cmp	r3, r2
 802122e:	d90b      	bls.n	8021248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8021230:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8021234:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8021238:	d206      	bcs.n	8021248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 802123a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 802123e:	bf2a      	itet	cs
 8021240:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8021244:	6008      	strcc	r0, [r1, #0]
 8021246:	600b      	strcs	r3, [r1, #0]
 8021248:	6808      	ldr	r0, [r1, #0]
 802124a:	3001      	adds	r0, #1
 802124c:	d501      	bpl.n	8021252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 802124e:	f000 f8aa 	bl	80213a6 <_ZSt17__throw_bad_allocv>
 8021252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021256:	f7fc b863 	b.w	801d320 <_Znwj>
 802125a:	bf00      	nop
 802125c:	0802870b 	.word	0x0802870b

08021260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8021260:	f850 3b08 	ldr.w	r3, [r0], #8
 8021264:	4283      	cmp	r3, r0
 8021266:	d002      	beq.n	802126e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8021268:	4618      	mov	r0, r3
 802126a:	f7fc b865 	b.w	801d338 <_ZdlPv>
 802126e:	4770      	bx	lr

08021270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8021270:	2a01      	cmp	r2, #1
 8021272:	b510      	push	{r4, lr}
 8021274:	d102      	bne.n	802127c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8021276:	780a      	ldrb	r2, [r1, #0]
 8021278:	7002      	strb	r2, [r0, #0]
 802127a:	bd10      	pop	{r4, pc}
 802127c:	f7ff ffca 	bl	8021214 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8021280:	e7fb      	b.n	802127a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08021282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8021282:	b508      	push	{r3, lr}
 8021284:	1a52      	subs	r2, r2, r1
 8021286:	f7ff fff3 	bl	8021270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802128a:	bd08      	pop	{r3, pc}

0802128c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 802128c:	b508      	push	{r3, lr}
 802128e:	1a52      	subs	r2, r2, r1
 8021290:	f7ff ffee 	bl	8021270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8021294:	bd08      	pop	{r3, pc}

08021296 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8021296:	b510      	push	{r4, lr}
 8021298:	4604      	mov	r4, r0
 802129a:	f7ff ffe1 	bl	8021260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 802129e:	4620      	mov	r0, r4
 80212a0:	bd10      	pop	{r4, pc}

080212a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80212a2:	6800      	ldr	r0, [r0, #0]
 80212a4:	4770      	bx	lr
	...

080212a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80212a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80212aa:	4604      	mov	r4, r0
 80212ac:	4616      	mov	r6, r2
 80212ae:	460d      	mov	r5, r1
 80212b0:	b919      	cbnz	r1, 80212ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80212b2:	b112      	cbz	r2, 80212ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80212b4:	480d      	ldr	r0, [pc, #52]	; (80212ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 80212b6:	f000 f879 	bl	80213ac <_ZSt19__throw_logic_errorPKc>
 80212ba:	1b73      	subs	r3, r6, r5
 80212bc:	2b0f      	cmp	r3, #15
 80212be:	9301      	str	r3, [sp, #4]
 80212c0:	d907      	bls.n	80212d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 80212c2:	2200      	movs	r2, #0
 80212c4:	a901      	add	r1, sp, #4
 80212c6:	4620      	mov	r0, r4
 80212c8:	f7ff ffa8 	bl	802121c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80212cc:	9b01      	ldr	r3, [sp, #4]
 80212ce:	6020      	str	r0, [r4, #0]
 80212d0:	60a3      	str	r3, [r4, #8]
 80212d2:	4632      	mov	r2, r6
 80212d4:	4629      	mov	r1, r5
 80212d6:	6820      	ldr	r0, [r4, #0]
 80212d8:	f7ff ffd3 	bl	8021282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80212dc:	9b01      	ldr	r3, [sp, #4]
 80212de:	6822      	ldr	r2, [r4, #0]
 80212e0:	6063      	str	r3, [r4, #4]
 80212e2:	2100      	movs	r1, #0
 80212e4:	54d1      	strb	r1, [r2, r3]
 80212e6:	b002      	add	sp, #8
 80212e8:	bd70      	pop	{r4, r5, r6, pc}
 80212ea:	bf00      	nop
 80212ec:	08028723 	.word	0x08028723

080212f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80212f0:	b538      	push	{r3, r4, r5, lr}
 80212f2:	f100 0308 	add.w	r3, r0, #8
 80212f6:	6003      	str	r3, [r0, #0]
 80212f8:	e9d1 5200 	ldrd	r5, r2, [r1]
 80212fc:	4604      	mov	r4, r0
 80212fe:	f04f 0300 	mov.w	r3, #0
 8021302:	442a      	add	r2, r5
 8021304:	4629      	mov	r1, r5
 8021306:	f7ff ffcf 	bl	80212a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 802130a:	4620      	mov	r0, r4
 802130c:	bd38      	pop	{r3, r4, r5, pc}
	...

08021310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8021310:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021312:	4604      	mov	r4, r0
 8021314:	4616      	mov	r6, r2
 8021316:	460d      	mov	r5, r1
 8021318:	b919      	cbnz	r1, 8021322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 802131a:	b112      	cbz	r2, 8021322 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 802131c:	480d      	ldr	r0, [pc, #52]	; (8021354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 802131e:	f000 f845 	bl	80213ac <_ZSt19__throw_logic_errorPKc>
 8021322:	1b73      	subs	r3, r6, r5
 8021324:	2b0f      	cmp	r3, #15
 8021326:	9301      	str	r3, [sp, #4]
 8021328:	d907      	bls.n	802133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 802132a:	2200      	movs	r2, #0
 802132c:	a901      	add	r1, sp, #4
 802132e:	4620      	mov	r0, r4
 8021330:	f7ff ff74 	bl	802121c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8021334:	9b01      	ldr	r3, [sp, #4]
 8021336:	6020      	str	r0, [r4, #0]
 8021338:	60a3      	str	r3, [r4, #8]
 802133a:	4632      	mov	r2, r6
 802133c:	4629      	mov	r1, r5
 802133e:	6820      	ldr	r0, [r4, #0]
 8021340:	f7ff ffa4 	bl	802128c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8021344:	9b01      	ldr	r3, [sp, #4]
 8021346:	6822      	ldr	r2, [r4, #0]
 8021348:	6063      	str	r3, [r4, #4]
 802134a:	2100      	movs	r1, #0
 802134c:	54d1      	strb	r1, [r2, r3]
 802134e:	b002      	add	sp, #8
 8021350:	bd70      	pop	{r4, r5, r6, pc}
 8021352:	bf00      	nop
 8021354:	08028723 	.word	0x08028723

08021358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8021358:	b538      	push	{r3, r4, r5, lr}
 802135a:	f100 0308 	add.w	r3, r0, #8
 802135e:	4604      	mov	r4, r0
 8021360:	6003      	str	r3, [r0, #0]
 8021362:	460d      	mov	r5, r1
 8021364:	b159      	cbz	r1, 802137e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8021366:	4608      	mov	r0, r1
 8021368:	f7df f814 	bl	8000394 <strlen>
 802136c:	182a      	adds	r2, r5, r0
 802136e:	4620      	mov	r0, r4
 8021370:	f04f 0300 	mov.w	r3, #0
 8021374:	4629      	mov	r1, r5
 8021376:	f7ff ffcb 	bl	8021310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 802137a:	4620      	mov	r0, r4
 802137c:	bd38      	pop	{r3, r4, r5, pc}
 802137e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021382:	e7f4      	b.n	802136e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08021384 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021384:	b508      	push	{r3, lr}
 8021386:	4780      	blx	r0
 8021388:	f000 f816 	bl	80213b8 <abort>

0802138c <_ZSt13get_terminatev>:
 802138c:	4b02      	ldr	r3, [pc, #8]	; (8021398 <_ZSt13get_terminatev+0xc>)
 802138e:	6818      	ldr	r0, [r3, #0]
 8021390:	f3bf 8f5b 	dmb	ish
 8021394:	4770      	bx	lr
 8021396:	bf00      	nop
 8021398:	24000034 	.word	0x24000034

0802139c <_ZSt9terminatev>:
 802139c:	b508      	push	{r3, lr}
 802139e:	f7ff fff5 	bl	802138c <_ZSt13get_terminatev>
 80213a2:	f7ff ffef 	bl	8021384 <_ZN10__cxxabiv111__terminateEPFvvE>

080213a6 <_ZSt17__throw_bad_allocv>:
 80213a6:	b508      	push	{r3, lr}
 80213a8:	f000 f806 	bl	80213b8 <abort>

080213ac <_ZSt19__throw_logic_errorPKc>:
 80213ac:	b508      	push	{r3, lr}
 80213ae:	f000 f803 	bl	80213b8 <abort>

080213b2 <_ZSt20__throw_length_errorPKc>:
 80213b2:	b508      	push	{r3, lr}
 80213b4:	f000 f800 	bl	80213b8 <abort>

080213b8 <abort>:
 80213b8:	b508      	push	{r3, lr}
 80213ba:	2006      	movs	r0, #6
 80213bc:	f000 fd2e 	bl	8021e1c <raise>
 80213c0:	2001      	movs	r0, #1
 80213c2:	f7e0 f81f 	bl	8001404 <_exit>

080213c6 <atexit>:
 80213c6:	2300      	movs	r3, #0
 80213c8:	4601      	mov	r1, r0
 80213ca:	461a      	mov	r2, r3
 80213cc:	4618      	mov	r0, r3
 80213ce:	f000 be41 	b.w	8022054 <__register_exitproc>
	...

080213d4 <__libc_init_array>:
 80213d4:	b570      	push	{r4, r5, r6, lr}
 80213d6:	4d0d      	ldr	r5, [pc, #52]	; (802140c <__libc_init_array+0x38>)
 80213d8:	4c0d      	ldr	r4, [pc, #52]	; (8021410 <__libc_init_array+0x3c>)
 80213da:	1b64      	subs	r4, r4, r5
 80213dc:	10a4      	asrs	r4, r4, #2
 80213de:	2600      	movs	r6, #0
 80213e0:	42a6      	cmp	r6, r4
 80213e2:	d109      	bne.n	80213f8 <__libc_init_array+0x24>
 80213e4:	4d0b      	ldr	r5, [pc, #44]	; (8021414 <__libc_init_array+0x40>)
 80213e6:	4c0c      	ldr	r4, [pc, #48]	; (8021418 <__libc_init_array+0x44>)
 80213e8:	f002 ff06 	bl	80241f8 <_init>
 80213ec:	1b64      	subs	r4, r4, r5
 80213ee:	10a4      	asrs	r4, r4, #2
 80213f0:	2600      	movs	r6, #0
 80213f2:	42a6      	cmp	r6, r4
 80213f4:	d105      	bne.n	8021402 <__libc_init_array+0x2e>
 80213f6:	bd70      	pop	{r4, r5, r6, pc}
 80213f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80213fc:	4798      	blx	r3
 80213fe:	3601      	adds	r6, #1
 8021400:	e7ee      	b.n	80213e0 <__libc_init_array+0xc>
 8021402:	f855 3b04 	ldr.w	r3, [r5], #4
 8021406:	4798      	blx	r3
 8021408:	3601      	adds	r6, #1
 802140a:	e7f2      	b.n	80213f2 <__libc_init_array+0x1e>
 802140c:	08028b98 	.word	0x08028b98
 8021410:	08028b98 	.word	0x08028b98
 8021414:	08028b98 	.word	0x08028b98
 8021418:	08028ba4 	.word	0x08028ba4

0802141c <memcmp>:
 802141c:	b530      	push	{r4, r5, lr}
 802141e:	3901      	subs	r1, #1
 8021420:	2400      	movs	r4, #0
 8021422:	42a2      	cmp	r2, r4
 8021424:	d101      	bne.n	802142a <memcmp+0xe>
 8021426:	2000      	movs	r0, #0
 8021428:	e005      	b.n	8021436 <memcmp+0x1a>
 802142a:	5d03      	ldrb	r3, [r0, r4]
 802142c:	3401      	adds	r4, #1
 802142e:	5d0d      	ldrb	r5, [r1, r4]
 8021430:	42ab      	cmp	r3, r5
 8021432:	d0f6      	beq.n	8021422 <memcmp+0x6>
 8021434:	1b58      	subs	r0, r3, r5
 8021436:	bd30      	pop	{r4, r5, pc}

08021438 <memcpy>:
 8021438:	440a      	add	r2, r1
 802143a:	4291      	cmp	r1, r2
 802143c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8021440:	d100      	bne.n	8021444 <memcpy+0xc>
 8021442:	4770      	bx	lr
 8021444:	b510      	push	{r4, lr}
 8021446:	f811 4b01 	ldrb.w	r4, [r1], #1
 802144a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802144e:	4291      	cmp	r1, r2
 8021450:	d1f9      	bne.n	8021446 <memcpy+0xe>
 8021452:	bd10      	pop	{r4, pc}

08021454 <memmove>:
 8021454:	4288      	cmp	r0, r1
 8021456:	b510      	push	{r4, lr}
 8021458:	eb01 0402 	add.w	r4, r1, r2
 802145c:	d902      	bls.n	8021464 <memmove+0x10>
 802145e:	4284      	cmp	r4, r0
 8021460:	4623      	mov	r3, r4
 8021462:	d807      	bhi.n	8021474 <memmove+0x20>
 8021464:	1e43      	subs	r3, r0, #1
 8021466:	42a1      	cmp	r1, r4
 8021468:	d008      	beq.n	802147c <memmove+0x28>
 802146a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802146e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021472:	e7f8      	b.n	8021466 <memmove+0x12>
 8021474:	4402      	add	r2, r0
 8021476:	4601      	mov	r1, r0
 8021478:	428a      	cmp	r2, r1
 802147a:	d100      	bne.n	802147e <memmove+0x2a>
 802147c:	bd10      	pop	{r4, pc}
 802147e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021486:	e7f7      	b.n	8021478 <memmove+0x24>

08021488 <memset>:
 8021488:	4402      	add	r2, r0
 802148a:	4603      	mov	r3, r0
 802148c:	4293      	cmp	r3, r2
 802148e:	d100      	bne.n	8021492 <memset+0xa>
 8021490:	4770      	bx	lr
 8021492:	f803 1b01 	strb.w	r1, [r3], #1
 8021496:	e7f9      	b.n	802148c <memset+0x4>

08021498 <__cvt>:
 8021498:	b5f0      	push	{r4, r5, r6, r7, lr}
 802149a:	ed2d 8b02 	vpush	{d8}
 802149e:	eeb0 8b40 	vmov.f64	d8, d0
 80214a2:	b085      	sub	sp, #20
 80214a4:	4617      	mov	r7, r2
 80214a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80214a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80214aa:	ee18 2a90 	vmov	r2, s17
 80214ae:	f025 0520 	bic.w	r5, r5, #32
 80214b2:	2a00      	cmp	r2, #0
 80214b4:	bfb6      	itet	lt
 80214b6:	222d      	movlt	r2, #45	; 0x2d
 80214b8:	2200      	movge	r2, #0
 80214ba:	eeb1 8b40 	vneglt.f64	d8, d0
 80214be:	2d46      	cmp	r5, #70	; 0x46
 80214c0:	460c      	mov	r4, r1
 80214c2:	701a      	strb	r2, [r3, #0]
 80214c4:	d004      	beq.n	80214d0 <__cvt+0x38>
 80214c6:	2d45      	cmp	r5, #69	; 0x45
 80214c8:	d100      	bne.n	80214cc <__cvt+0x34>
 80214ca:	3401      	adds	r4, #1
 80214cc:	2102      	movs	r1, #2
 80214ce:	e000      	b.n	80214d2 <__cvt+0x3a>
 80214d0:	2103      	movs	r1, #3
 80214d2:	ab03      	add	r3, sp, #12
 80214d4:	9301      	str	r3, [sp, #4]
 80214d6:	ab02      	add	r3, sp, #8
 80214d8:	9300      	str	r3, [sp, #0]
 80214da:	4622      	mov	r2, r4
 80214dc:	4633      	mov	r3, r6
 80214de:	eeb0 0b48 	vmov.f64	d0, d8
 80214e2:	f000 fec5 	bl	8022270 <_dtoa_r>
 80214e6:	2d47      	cmp	r5, #71	; 0x47
 80214e8:	d109      	bne.n	80214fe <__cvt+0x66>
 80214ea:	07fb      	lsls	r3, r7, #31
 80214ec:	d407      	bmi.n	80214fe <__cvt+0x66>
 80214ee:	9b03      	ldr	r3, [sp, #12]
 80214f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80214f2:	1a1b      	subs	r3, r3, r0
 80214f4:	6013      	str	r3, [r2, #0]
 80214f6:	b005      	add	sp, #20
 80214f8:	ecbd 8b02 	vpop	{d8}
 80214fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214fe:	2d46      	cmp	r5, #70	; 0x46
 8021500:	eb00 0204 	add.w	r2, r0, r4
 8021504:	d10c      	bne.n	8021520 <__cvt+0x88>
 8021506:	7803      	ldrb	r3, [r0, #0]
 8021508:	2b30      	cmp	r3, #48	; 0x30
 802150a:	d107      	bne.n	802151c <__cvt+0x84>
 802150c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8021510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021514:	bf1c      	itt	ne
 8021516:	f1c4 0401 	rsbne	r4, r4, #1
 802151a:	6034      	strne	r4, [r6, #0]
 802151c:	6833      	ldr	r3, [r6, #0]
 802151e:	441a      	add	r2, r3
 8021520:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8021524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021528:	bf08      	it	eq
 802152a:	9203      	streq	r2, [sp, #12]
 802152c:	2130      	movs	r1, #48	; 0x30
 802152e:	9b03      	ldr	r3, [sp, #12]
 8021530:	4293      	cmp	r3, r2
 8021532:	d2dc      	bcs.n	80214ee <__cvt+0x56>
 8021534:	1c5c      	adds	r4, r3, #1
 8021536:	9403      	str	r4, [sp, #12]
 8021538:	7019      	strb	r1, [r3, #0]
 802153a:	e7f8      	b.n	802152e <__cvt+0x96>

0802153c <__exponent>:
 802153c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802153e:	4603      	mov	r3, r0
 8021540:	2900      	cmp	r1, #0
 8021542:	bfb8      	it	lt
 8021544:	4249      	neglt	r1, r1
 8021546:	f803 2b02 	strb.w	r2, [r3], #2
 802154a:	bfb4      	ite	lt
 802154c:	222d      	movlt	r2, #45	; 0x2d
 802154e:	222b      	movge	r2, #43	; 0x2b
 8021550:	2909      	cmp	r1, #9
 8021552:	7042      	strb	r2, [r0, #1]
 8021554:	dd2a      	ble.n	80215ac <__exponent+0x70>
 8021556:	f10d 0407 	add.w	r4, sp, #7
 802155a:	46a4      	mov	ip, r4
 802155c:	270a      	movs	r7, #10
 802155e:	46a6      	mov	lr, r4
 8021560:	460a      	mov	r2, r1
 8021562:	fb91 f6f7 	sdiv	r6, r1, r7
 8021566:	fb07 1516 	mls	r5, r7, r6, r1
 802156a:	3530      	adds	r5, #48	; 0x30
 802156c:	2a63      	cmp	r2, #99	; 0x63
 802156e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8021572:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8021576:	4631      	mov	r1, r6
 8021578:	dcf1      	bgt.n	802155e <__exponent+0x22>
 802157a:	3130      	adds	r1, #48	; 0x30
 802157c:	f1ae 0502 	sub.w	r5, lr, #2
 8021580:	f804 1c01 	strb.w	r1, [r4, #-1]
 8021584:	1c44      	adds	r4, r0, #1
 8021586:	4629      	mov	r1, r5
 8021588:	4561      	cmp	r1, ip
 802158a:	d30a      	bcc.n	80215a2 <__exponent+0x66>
 802158c:	f10d 0209 	add.w	r2, sp, #9
 8021590:	eba2 020e 	sub.w	r2, r2, lr
 8021594:	4565      	cmp	r5, ip
 8021596:	bf88      	it	hi
 8021598:	2200      	movhi	r2, #0
 802159a:	4413      	add	r3, r2
 802159c:	1a18      	subs	r0, r3, r0
 802159e:	b003      	add	sp, #12
 80215a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80215a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80215a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80215aa:	e7ed      	b.n	8021588 <__exponent+0x4c>
 80215ac:	2330      	movs	r3, #48	; 0x30
 80215ae:	3130      	adds	r1, #48	; 0x30
 80215b0:	7083      	strb	r3, [r0, #2]
 80215b2:	70c1      	strb	r1, [r0, #3]
 80215b4:	1d03      	adds	r3, r0, #4
 80215b6:	e7f1      	b.n	802159c <__exponent+0x60>

080215b8 <_printf_float>:
 80215b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215bc:	b08b      	sub	sp, #44	; 0x2c
 80215be:	460c      	mov	r4, r1
 80215c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80215c4:	4616      	mov	r6, r2
 80215c6:	461f      	mov	r7, r3
 80215c8:	4605      	mov	r5, r0
 80215ca:	f001 fd9d 	bl	8023108 <_localeconv_r>
 80215ce:	f8d0 b000 	ldr.w	fp, [r0]
 80215d2:	4658      	mov	r0, fp
 80215d4:	f7de fede 	bl	8000394 <strlen>
 80215d8:	2300      	movs	r3, #0
 80215da:	9308      	str	r3, [sp, #32]
 80215dc:	f8d8 3000 	ldr.w	r3, [r8]
 80215e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80215e4:	6822      	ldr	r2, [r4, #0]
 80215e6:	3307      	adds	r3, #7
 80215e8:	f023 0307 	bic.w	r3, r3, #7
 80215ec:	f103 0108 	add.w	r1, r3, #8
 80215f0:	f8c8 1000 	str.w	r1, [r8]
 80215f4:	4682      	mov	sl, r0
 80215f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80215fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80215fe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8021860 <_printf_float+0x2a8>
 8021602:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8021606:	eeb0 6bc0 	vabs.f64	d6, d0
 802160a:	eeb4 6b47 	vcmp.f64	d6, d7
 802160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021612:	dd24      	ble.n	802165e <_printf_float+0xa6>
 8021614:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8021618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802161c:	d502      	bpl.n	8021624 <_printf_float+0x6c>
 802161e:	232d      	movs	r3, #45	; 0x2d
 8021620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021624:	4b90      	ldr	r3, [pc, #576]	; (8021868 <_printf_float+0x2b0>)
 8021626:	4891      	ldr	r0, [pc, #580]	; (802186c <_printf_float+0x2b4>)
 8021628:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 802162c:	bf94      	ite	ls
 802162e:	4698      	movls	r8, r3
 8021630:	4680      	movhi	r8, r0
 8021632:	2303      	movs	r3, #3
 8021634:	6123      	str	r3, [r4, #16]
 8021636:	f022 0204 	bic.w	r2, r2, #4
 802163a:	2300      	movs	r3, #0
 802163c:	6022      	str	r2, [r4, #0]
 802163e:	9304      	str	r3, [sp, #16]
 8021640:	9700      	str	r7, [sp, #0]
 8021642:	4633      	mov	r3, r6
 8021644:	aa09      	add	r2, sp, #36	; 0x24
 8021646:	4621      	mov	r1, r4
 8021648:	4628      	mov	r0, r5
 802164a:	f000 f9d3 	bl	80219f4 <_printf_common>
 802164e:	3001      	adds	r0, #1
 8021650:	f040 808a 	bne.w	8021768 <_printf_float+0x1b0>
 8021654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021658:	b00b      	add	sp, #44	; 0x2c
 802165a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802165e:	eeb4 0b40 	vcmp.f64	d0, d0
 8021662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021666:	d709      	bvc.n	802167c <_printf_float+0xc4>
 8021668:	ee10 3a90 	vmov	r3, s1
 802166c:	2b00      	cmp	r3, #0
 802166e:	bfbc      	itt	lt
 8021670:	232d      	movlt	r3, #45	; 0x2d
 8021672:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8021676:	487e      	ldr	r0, [pc, #504]	; (8021870 <_printf_float+0x2b8>)
 8021678:	4b7e      	ldr	r3, [pc, #504]	; (8021874 <_printf_float+0x2bc>)
 802167a:	e7d5      	b.n	8021628 <_printf_float+0x70>
 802167c:	6863      	ldr	r3, [r4, #4]
 802167e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8021682:	9104      	str	r1, [sp, #16]
 8021684:	1c59      	adds	r1, r3, #1
 8021686:	d13c      	bne.n	8021702 <_printf_float+0x14a>
 8021688:	2306      	movs	r3, #6
 802168a:	6063      	str	r3, [r4, #4]
 802168c:	2300      	movs	r3, #0
 802168e:	9303      	str	r3, [sp, #12]
 8021690:	ab08      	add	r3, sp, #32
 8021692:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8021696:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802169a:	ab07      	add	r3, sp, #28
 802169c:	6861      	ldr	r1, [r4, #4]
 802169e:	9300      	str	r3, [sp, #0]
 80216a0:	6022      	str	r2, [r4, #0]
 80216a2:	f10d 031b 	add.w	r3, sp, #27
 80216a6:	4628      	mov	r0, r5
 80216a8:	f7ff fef6 	bl	8021498 <__cvt>
 80216ac:	9b04      	ldr	r3, [sp, #16]
 80216ae:	9907      	ldr	r1, [sp, #28]
 80216b0:	2b47      	cmp	r3, #71	; 0x47
 80216b2:	4680      	mov	r8, r0
 80216b4:	d108      	bne.n	80216c8 <_printf_float+0x110>
 80216b6:	1cc8      	adds	r0, r1, #3
 80216b8:	db02      	blt.n	80216c0 <_printf_float+0x108>
 80216ba:	6863      	ldr	r3, [r4, #4]
 80216bc:	4299      	cmp	r1, r3
 80216be:	dd41      	ble.n	8021744 <_printf_float+0x18c>
 80216c0:	f1a9 0902 	sub.w	r9, r9, #2
 80216c4:	fa5f f989 	uxtb.w	r9, r9
 80216c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80216cc:	d820      	bhi.n	8021710 <_printf_float+0x158>
 80216ce:	3901      	subs	r1, #1
 80216d0:	464a      	mov	r2, r9
 80216d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80216d6:	9107      	str	r1, [sp, #28]
 80216d8:	f7ff ff30 	bl	802153c <__exponent>
 80216dc:	9a08      	ldr	r2, [sp, #32]
 80216de:	9004      	str	r0, [sp, #16]
 80216e0:	1813      	adds	r3, r2, r0
 80216e2:	2a01      	cmp	r2, #1
 80216e4:	6123      	str	r3, [r4, #16]
 80216e6:	dc02      	bgt.n	80216ee <_printf_float+0x136>
 80216e8:	6822      	ldr	r2, [r4, #0]
 80216ea:	07d2      	lsls	r2, r2, #31
 80216ec:	d501      	bpl.n	80216f2 <_printf_float+0x13a>
 80216ee:	3301      	adds	r3, #1
 80216f0:	6123      	str	r3, [r4, #16]
 80216f2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80216f6:	2b00      	cmp	r3, #0
 80216f8:	d0a2      	beq.n	8021640 <_printf_float+0x88>
 80216fa:	232d      	movs	r3, #45	; 0x2d
 80216fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021700:	e79e      	b.n	8021640 <_printf_float+0x88>
 8021702:	9904      	ldr	r1, [sp, #16]
 8021704:	2947      	cmp	r1, #71	; 0x47
 8021706:	d1c1      	bne.n	802168c <_printf_float+0xd4>
 8021708:	2b00      	cmp	r3, #0
 802170a:	d1bf      	bne.n	802168c <_printf_float+0xd4>
 802170c:	2301      	movs	r3, #1
 802170e:	e7bc      	b.n	802168a <_printf_float+0xd2>
 8021710:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8021714:	d118      	bne.n	8021748 <_printf_float+0x190>
 8021716:	2900      	cmp	r1, #0
 8021718:	6863      	ldr	r3, [r4, #4]
 802171a:	dd0b      	ble.n	8021734 <_printf_float+0x17c>
 802171c:	6121      	str	r1, [r4, #16]
 802171e:	b913      	cbnz	r3, 8021726 <_printf_float+0x16e>
 8021720:	6822      	ldr	r2, [r4, #0]
 8021722:	07d0      	lsls	r0, r2, #31
 8021724:	d502      	bpl.n	802172c <_printf_float+0x174>
 8021726:	3301      	adds	r3, #1
 8021728:	440b      	add	r3, r1
 802172a:	6123      	str	r3, [r4, #16]
 802172c:	2300      	movs	r3, #0
 802172e:	65a1      	str	r1, [r4, #88]	; 0x58
 8021730:	9304      	str	r3, [sp, #16]
 8021732:	e7de      	b.n	80216f2 <_printf_float+0x13a>
 8021734:	b913      	cbnz	r3, 802173c <_printf_float+0x184>
 8021736:	6822      	ldr	r2, [r4, #0]
 8021738:	07d2      	lsls	r2, r2, #31
 802173a:	d501      	bpl.n	8021740 <_printf_float+0x188>
 802173c:	3302      	adds	r3, #2
 802173e:	e7f4      	b.n	802172a <_printf_float+0x172>
 8021740:	2301      	movs	r3, #1
 8021742:	e7f2      	b.n	802172a <_printf_float+0x172>
 8021744:	f04f 0967 	mov.w	r9, #103	; 0x67
 8021748:	9b08      	ldr	r3, [sp, #32]
 802174a:	4299      	cmp	r1, r3
 802174c:	db05      	blt.n	802175a <_printf_float+0x1a2>
 802174e:	6823      	ldr	r3, [r4, #0]
 8021750:	6121      	str	r1, [r4, #16]
 8021752:	07d8      	lsls	r0, r3, #31
 8021754:	d5ea      	bpl.n	802172c <_printf_float+0x174>
 8021756:	1c4b      	adds	r3, r1, #1
 8021758:	e7e7      	b.n	802172a <_printf_float+0x172>
 802175a:	2900      	cmp	r1, #0
 802175c:	bfd4      	ite	le
 802175e:	f1c1 0202 	rsble	r2, r1, #2
 8021762:	2201      	movgt	r2, #1
 8021764:	4413      	add	r3, r2
 8021766:	e7e0      	b.n	802172a <_printf_float+0x172>
 8021768:	6823      	ldr	r3, [r4, #0]
 802176a:	055a      	lsls	r2, r3, #21
 802176c:	d407      	bmi.n	802177e <_printf_float+0x1c6>
 802176e:	6923      	ldr	r3, [r4, #16]
 8021770:	4642      	mov	r2, r8
 8021772:	4631      	mov	r1, r6
 8021774:	4628      	mov	r0, r5
 8021776:	47b8      	blx	r7
 8021778:	3001      	adds	r0, #1
 802177a:	d12a      	bne.n	80217d2 <_printf_float+0x21a>
 802177c:	e76a      	b.n	8021654 <_printf_float+0x9c>
 802177e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8021782:	f240 80e2 	bls.w	802194a <_printf_float+0x392>
 8021786:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 802178a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021792:	d133      	bne.n	80217fc <_printf_float+0x244>
 8021794:	4a38      	ldr	r2, [pc, #224]	; (8021878 <_printf_float+0x2c0>)
 8021796:	2301      	movs	r3, #1
 8021798:	4631      	mov	r1, r6
 802179a:	4628      	mov	r0, r5
 802179c:	47b8      	blx	r7
 802179e:	3001      	adds	r0, #1
 80217a0:	f43f af58 	beq.w	8021654 <_printf_float+0x9c>
 80217a4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80217a8:	429a      	cmp	r2, r3
 80217aa:	db02      	blt.n	80217b2 <_printf_float+0x1fa>
 80217ac:	6823      	ldr	r3, [r4, #0]
 80217ae:	07d8      	lsls	r0, r3, #31
 80217b0:	d50f      	bpl.n	80217d2 <_printf_float+0x21a>
 80217b2:	4653      	mov	r3, sl
 80217b4:	465a      	mov	r2, fp
 80217b6:	4631      	mov	r1, r6
 80217b8:	4628      	mov	r0, r5
 80217ba:	47b8      	blx	r7
 80217bc:	3001      	adds	r0, #1
 80217be:	f43f af49 	beq.w	8021654 <_printf_float+0x9c>
 80217c2:	f04f 0800 	mov.w	r8, #0
 80217c6:	f104 091a 	add.w	r9, r4, #26
 80217ca:	9b08      	ldr	r3, [sp, #32]
 80217cc:	3b01      	subs	r3, #1
 80217ce:	4543      	cmp	r3, r8
 80217d0:	dc09      	bgt.n	80217e6 <_printf_float+0x22e>
 80217d2:	6823      	ldr	r3, [r4, #0]
 80217d4:	079b      	lsls	r3, r3, #30
 80217d6:	f100 8108 	bmi.w	80219ea <_printf_float+0x432>
 80217da:	68e0      	ldr	r0, [r4, #12]
 80217dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217de:	4298      	cmp	r0, r3
 80217e0:	bfb8      	it	lt
 80217e2:	4618      	movlt	r0, r3
 80217e4:	e738      	b.n	8021658 <_printf_float+0xa0>
 80217e6:	2301      	movs	r3, #1
 80217e8:	464a      	mov	r2, r9
 80217ea:	4631      	mov	r1, r6
 80217ec:	4628      	mov	r0, r5
 80217ee:	47b8      	blx	r7
 80217f0:	3001      	adds	r0, #1
 80217f2:	f43f af2f 	beq.w	8021654 <_printf_float+0x9c>
 80217f6:	f108 0801 	add.w	r8, r8, #1
 80217fa:	e7e6      	b.n	80217ca <_printf_float+0x212>
 80217fc:	9b07      	ldr	r3, [sp, #28]
 80217fe:	2b00      	cmp	r3, #0
 8021800:	dc3c      	bgt.n	802187c <_printf_float+0x2c4>
 8021802:	4a1d      	ldr	r2, [pc, #116]	; (8021878 <_printf_float+0x2c0>)
 8021804:	2301      	movs	r3, #1
 8021806:	4631      	mov	r1, r6
 8021808:	4628      	mov	r0, r5
 802180a:	47b8      	blx	r7
 802180c:	3001      	adds	r0, #1
 802180e:	f43f af21 	beq.w	8021654 <_printf_float+0x9c>
 8021812:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8021816:	4313      	orrs	r3, r2
 8021818:	d102      	bne.n	8021820 <_printf_float+0x268>
 802181a:	6823      	ldr	r3, [r4, #0]
 802181c:	07d9      	lsls	r1, r3, #31
 802181e:	d5d8      	bpl.n	80217d2 <_printf_float+0x21a>
 8021820:	4653      	mov	r3, sl
 8021822:	465a      	mov	r2, fp
 8021824:	4631      	mov	r1, r6
 8021826:	4628      	mov	r0, r5
 8021828:	47b8      	blx	r7
 802182a:	3001      	adds	r0, #1
 802182c:	f43f af12 	beq.w	8021654 <_printf_float+0x9c>
 8021830:	f04f 0900 	mov.w	r9, #0
 8021834:	f104 0a1a 	add.w	sl, r4, #26
 8021838:	9b07      	ldr	r3, [sp, #28]
 802183a:	425b      	negs	r3, r3
 802183c:	454b      	cmp	r3, r9
 802183e:	dc01      	bgt.n	8021844 <_printf_float+0x28c>
 8021840:	9b08      	ldr	r3, [sp, #32]
 8021842:	e795      	b.n	8021770 <_printf_float+0x1b8>
 8021844:	2301      	movs	r3, #1
 8021846:	4652      	mov	r2, sl
 8021848:	4631      	mov	r1, r6
 802184a:	4628      	mov	r0, r5
 802184c:	47b8      	blx	r7
 802184e:	3001      	adds	r0, #1
 8021850:	f43f af00 	beq.w	8021654 <_printf_float+0x9c>
 8021854:	f109 0901 	add.w	r9, r9, #1
 8021858:	e7ee      	b.n	8021838 <_printf_float+0x280>
 802185a:	bf00      	nop
 802185c:	f3af 8000 	nop.w
 8021860:	ffffffff 	.word	0xffffffff
 8021864:	7fefffff 	.word	0x7fefffff
 8021868:	08028854 	.word	0x08028854
 802186c:	08028858 	.word	0x08028858
 8021870:	08028860 	.word	0x08028860
 8021874:	0802885c 	.word	0x0802885c
 8021878:	08028864 	.word	0x08028864
 802187c:	9a08      	ldr	r2, [sp, #32]
 802187e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021880:	429a      	cmp	r2, r3
 8021882:	bfa8      	it	ge
 8021884:	461a      	movge	r2, r3
 8021886:	2a00      	cmp	r2, #0
 8021888:	4691      	mov	r9, r2
 802188a:	dc38      	bgt.n	80218fe <_printf_float+0x346>
 802188c:	2300      	movs	r3, #0
 802188e:	9305      	str	r3, [sp, #20]
 8021890:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021894:	f104 021a 	add.w	r2, r4, #26
 8021898:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802189a:	9905      	ldr	r1, [sp, #20]
 802189c:	9304      	str	r3, [sp, #16]
 802189e:	eba3 0309 	sub.w	r3, r3, r9
 80218a2:	428b      	cmp	r3, r1
 80218a4:	dc33      	bgt.n	802190e <_printf_float+0x356>
 80218a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80218aa:	429a      	cmp	r2, r3
 80218ac:	db3c      	blt.n	8021928 <_printf_float+0x370>
 80218ae:	6823      	ldr	r3, [r4, #0]
 80218b0:	07da      	lsls	r2, r3, #31
 80218b2:	d439      	bmi.n	8021928 <_printf_float+0x370>
 80218b4:	9a08      	ldr	r2, [sp, #32]
 80218b6:	9b04      	ldr	r3, [sp, #16]
 80218b8:	9907      	ldr	r1, [sp, #28]
 80218ba:	1ad3      	subs	r3, r2, r3
 80218bc:	eba2 0901 	sub.w	r9, r2, r1
 80218c0:	4599      	cmp	r9, r3
 80218c2:	bfa8      	it	ge
 80218c4:	4699      	movge	r9, r3
 80218c6:	f1b9 0f00 	cmp.w	r9, #0
 80218ca:	dc35      	bgt.n	8021938 <_printf_float+0x380>
 80218cc:	f04f 0800 	mov.w	r8, #0
 80218d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80218d4:	f104 0a1a 	add.w	sl, r4, #26
 80218d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80218dc:	1a9b      	subs	r3, r3, r2
 80218de:	eba3 0309 	sub.w	r3, r3, r9
 80218e2:	4543      	cmp	r3, r8
 80218e4:	f77f af75 	ble.w	80217d2 <_printf_float+0x21a>
 80218e8:	2301      	movs	r3, #1
 80218ea:	4652      	mov	r2, sl
 80218ec:	4631      	mov	r1, r6
 80218ee:	4628      	mov	r0, r5
 80218f0:	47b8      	blx	r7
 80218f2:	3001      	adds	r0, #1
 80218f4:	f43f aeae 	beq.w	8021654 <_printf_float+0x9c>
 80218f8:	f108 0801 	add.w	r8, r8, #1
 80218fc:	e7ec      	b.n	80218d8 <_printf_float+0x320>
 80218fe:	4613      	mov	r3, r2
 8021900:	4631      	mov	r1, r6
 8021902:	4642      	mov	r2, r8
 8021904:	4628      	mov	r0, r5
 8021906:	47b8      	blx	r7
 8021908:	3001      	adds	r0, #1
 802190a:	d1bf      	bne.n	802188c <_printf_float+0x2d4>
 802190c:	e6a2      	b.n	8021654 <_printf_float+0x9c>
 802190e:	2301      	movs	r3, #1
 8021910:	4631      	mov	r1, r6
 8021912:	4628      	mov	r0, r5
 8021914:	9204      	str	r2, [sp, #16]
 8021916:	47b8      	blx	r7
 8021918:	3001      	adds	r0, #1
 802191a:	f43f ae9b 	beq.w	8021654 <_printf_float+0x9c>
 802191e:	9b05      	ldr	r3, [sp, #20]
 8021920:	9a04      	ldr	r2, [sp, #16]
 8021922:	3301      	adds	r3, #1
 8021924:	9305      	str	r3, [sp, #20]
 8021926:	e7b7      	b.n	8021898 <_printf_float+0x2e0>
 8021928:	4653      	mov	r3, sl
 802192a:	465a      	mov	r2, fp
 802192c:	4631      	mov	r1, r6
 802192e:	4628      	mov	r0, r5
 8021930:	47b8      	blx	r7
 8021932:	3001      	adds	r0, #1
 8021934:	d1be      	bne.n	80218b4 <_printf_float+0x2fc>
 8021936:	e68d      	b.n	8021654 <_printf_float+0x9c>
 8021938:	9a04      	ldr	r2, [sp, #16]
 802193a:	464b      	mov	r3, r9
 802193c:	4442      	add	r2, r8
 802193e:	4631      	mov	r1, r6
 8021940:	4628      	mov	r0, r5
 8021942:	47b8      	blx	r7
 8021944:	3001      	adds	r0, #1
 8021946:	d1c1      	bne.n	80218cc <_printf_float+0x314>
 8021948:	e684      	b.n	8021654 <_printf_float+0x9c>
 802194a:	9a08      	ldr	r2, [sp, #32]
 802194c:	2a01      	cmp	r2, #1
 802194e:	dc01      	bgt.n	8021954 <_printf_float+0x39c>
 8021950:	07db      	lsls	r3, r3, #31
 8021952:	d537      	bpl.n	80219c4 <_printf_float+0x40c>
 8021954:	2301      	movs	r3, #1
 8021956:	4642      	mov	r2, r8
 8021958:	4631      	mov	r1, r6
 802195a:	4628      	mov	r0, r5
 802195c:	47b8      	blx	r7
 802195e:	3001      	adds	r0, #1
 8021960:	f43f ae78 	beq.w	8021654 <_printf_float+0x9c>
 8021964:	4653      	mov	r3, sl
 8021966:	465a      	mov	r2, fp
 8021968:	4631      	mov	r1, r6
 802196a:	4628      	mov	r0, r5
 802196c:	47b8      	blx	r7
 802196e:	3001      	adds	r0, #1
 8021970:	f43f ae70 	beq.w	8021654 <_printf_float+0x9c>
 8021974:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8021978:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021980:	d01b      	beq.n	80219ba <_printf_float+0x402>
 8021982:	9b08      	ldr	r3, [sp, #32]
 8021984:	f108 0201 	add.w	r2, r8, #1
 8021988:	3b01      	subs	r3, #1
 802198a:	4631      	mov	r1, r6
 802198c:	4628      	mov	r0, r5
 802198e:	47b8      	blx	r7
 8021990:	3001      	adds	r0, #1
 8021992:	d10e      	bne.n	80219b2 <_printf_float+0x3fa>
 8021994:	e65e      	b.n	8021654 <_printf_float+0x9c>
 8021996:	2301      	movs	r3, #1
 8021998:	464a      	mov	r2, r9
 802199a:	4631      	mov	r1, r6
 802199c:	4628      	mov	r0, r5
 802199e:	47b8      	blx	r7
 80219a0:	3001      	adds	r0, #1
 80219a2:	f43f ae57 	beq.w	8021654 <_printf_float+0x9c>
 80219a6:	f108 0801 	add.w	r8, r8, #1
 80219aa:	9b08      	ldr	r3, [sp, #32]
 80219ac:	3b01      	subs	r3, #1
 80219ae:	4543      	cmp	r3, r8
 80219b0:	dcf1      	bgt.n	8021996 <_printf_float+0x3de>
 80219b2:	9b04      	ldr	r3, [sp, #16]
 80219b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80219b8:	e6db      	b.n	8021772 <_printf_float+0x1ba>
 80219ba:	f04f 0800 	mov.w	r8, #0
 80219be:	f104 091a 	add.w	r9, r4, #26
 80219c2:	e7f2      	b.n	80219aa <_printf_float+0x3f2>
 80219c4:	2301      	movs	r3, #1
 80219c6:	4642      	mov	r2, r8
 80219c8:	e7df      	b.n	802198a <_printf_float+0x3d2>
 80219ca:	2301      	movs	r3, #1
 80219cc:	464a      	mov	r2, r9
 80219ce:	4631      	mov	r1, r6
 80219d0:	4628      	mov	r0, r5
 80219d2:	47b8      	blx	r7
 80219d4:	3001      	adds	r0, #1
 80219d6:	f43f ae3d 	beq.w	8021654 <_printf_float+0x9c>
 80219da:	f108 0801 	add.w	r8, r8, #1
 80219de:	68e3      	ldr	r3, [r4, #12]
 80219e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80219e2:	1a5b      	subs	r3, r3, r1
 80219e4:	4543      	cmp	r3, r8
 80219e6:	dcf0      	bgt.n	80219ca <_printf_float+0x412>
 80219e8:	e6f7      	b.n	80217da <_printf_float+0x222>
 80219ea:	f04f 0800 	mov.w	r8, #0
 80219ee:	f104 0919 	add.w	r9, r4, #25
 80219f2:	e7f4      	b.n	80219de <_printf_float+0x426>

080219f4 <_printf_common>:
 80219f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80219f8:	4616      	mov	r6, r2
 80219fa:	4699      	mov	r9, r3
 80219fc:	688a      	ldr	r2, [r1, #8]
 80219fe:	690b      	ldr	r3, [r1, #16]
 8021a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021a04:	4293      	cmp	r3, r2
 8021a06:	bfb8      	it	lt
 8021a08:	4613      	movlt	r3, r2
 8021a0a:	6033      	str	r3, [r6, #0]
 8021a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021a10:	4607      	mov	r7, r0
 8021a12:	460c      	mov	r4, r1
 8021a14:	b10a      	cbz	r2, 8021a1a <_printf_common+0x26>
 8021a16:	3301      	adds	r3, #1
 8021a18:	6033      	str	r3, [r6, #0]
 8021a1a:	6823      	ldr	r3, [r4, #0]
 8021a1c:	0699      	lsls	r1, r3, #26
 8021a1e:	bf42      	ittt	mi
 8021a20:	6833      	ldrmi	r3, [r6, #0]
 8021a22:	3302      	addmi	r3, #2
 8021a24:	6033      	strmi	r3, [r6, #0]
 8021a26:	6825      	ldr	r5, [r4, #0]
 8021a28:	f015 0506 	ands.w	r5, r5, #6
 8021a2c:	d106      	bne.n	8021a3c <_printf_common+0x48>
 8021a2e:	f104 0a19 	add.w	sl, r4, #25
 8021a32:	68e3      	ldr	r3, [r4, #12]
 8021a34:	6832      	ldr	r2, [r6, #0]
 8021a36:	1a9b      	subs	r3, r3, r2
 8021a38:	42ab      	cmp	r3, r5
 8021a3a:	dc26      	bgt.n	8021a8a <_printf_common+0x96>
 8021a3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021a40:	1e13      	subs	r3, r2, #0
 8021a42:	6822      	ldr	r2, [r4, #0]
 8021a44:	bf18      	it	ne
 8021a46:	2301      	movne	r3, #1
 8021a48:	0692      	lsls	r2, r2, #26
 8021a4a:	d42b      	bmi.n	8021aa4 <_printf_common+0xb0>
 8021a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021a50:	4649      	mov	r1, r9
 8021a52:	4638      	mov	r0, r7
 8021a54:	47c0      	blx	r8
 8021a56:	3001      	adds	r0, #1
 8021a58:	d01e      	beq.n	8021a98 <_printf_common+0xa4>
 8021a5a:	6823      	ldr	r3, [r4, #0]
 8021a5c:	68e5      	ldr	r5, [r4, #12]
 8021a5e:	6832      	ldr	r2, [r6, #0]
 8021a60:	f003 0306 	and.w	r3, r3, #6
 8021a64:	2b04      	cmp	r3, #4
 8021a66:	bf08      	it	eq
 8021a68:	1aad      	subeq	r5, r5, r2
 8021a6a:	68a3      	ldr	r3, [r4, #8]
 8021a6c:	6922      	ldr	r2, [r4, #16]
 8021a6e:	bf0c      	ite	eq
 8021a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021a74:	2500      	movne	r5, #0
 8021a76:	4293      	cmp	r3, r2
 8021a78:	bfc4      	itt	gt
 8021a7a:	1a9b      	subgt	r3, r3, r2
 8021a7c:	18ed      	addgt	r5, r5, r3
 8021a7e:	2600      	movs	r6, #0
 8021a80:	341a      	adds	r4, #26
 8021a82:	42b5      	cmp	r5, r6
 8021a84:	d11a      	bne.n	8021abc <_printf_common+0xc8>
 8021a86:	2000      	movs	r0, #0
 8021a88:	e008      	b.n	8021a9c <_printf_common+0xa8>
 8021a8a:	2301      	movs	r3, #1
 8021a8c:	4652      	mov	r2, sl
 8021a8e:	4649      	mov	r1, r9
 8021a90:	4638      	mov	r0, r7
 8021a92:	47c0      	blx	r8
 8021a94:	3001      	adds	r0, #1
 8021a96:	d103      	bne.n	8021aa0 <_printf_common+0xac>
 8021a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021aa0:	3501      	adds	r5, #1
 8021aa2:	e7c6      	b.n	8021a32 <_printf_common+0x3e>
 8021aa4:	18e1      	adds	r1, r4, r3
 8021aa6:	1c5a      	adds	r2, r3, #1
 8021aa8:	2030      	movs	r0, #48	; 0x30
 8021aaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021aae:	4422      	add	r2, r4
 8021ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021ab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021ab8:	3302      	adds	r3, #2
 8021aba:	e7c7      	b.n	8021a4c <_printf_common+0x58>
 8021abc:	2301      	movs	r3, #1
 8021abe:	4622      	mov	r2, r4
 8021ac0:	4649      	mov	r1, r9
 8021ac2:	4638      	mov	r0, r7
 8021ac4:	47c0      	blx	r8
 8021ac6:	3001      	adds	r0, #1
 8021ac8:	d0e6      	beq.n	8021a98 <_printf_common+0xa4>
 8021aca:	3601      	adds	r6, #1
 8021acc:	e7d9      	b.n	8021a82 <_printf_common+0x8e>
	...

08021ad0 <_printf_i>:
 8021ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021ad4:	460c      	mov	r4, r1
 8021ad6:	4691      	mov	r9, r2
 8021ad8:	7e27      	ldrb	r7, [r4, #24]
 8021ada:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021adc:	2f78      	cmp	r7, #120	; 0x78
 8021ade:	4680      	mov	r8, r0
 8021ae0:	469a      	mov	sl, r3
 8021ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021ae6:	d807      	bhi.n	8021af8 <_printf_i+0x28>
 8021ae8:	2f62      	cmp	r7, #98	; 0x62
 8021aea:	d80a      	bhi.n	8021b02 <_printf_i+0x32>
 8021aec:	2f00      	cmp	r7, #0
 8021aee:	f000 80d8 	beq.w	8021ca2 <_printf_i+0x1d2>
 8021af2:	2f58      	cmp	r7, #88	; 0x58
 8021af4:	f000 80a3 	beq.w	8021c3e <_printf_i+0x16e>
 8021af8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8021b00:	e03a      	b.n	8021b78 <_printf_i+0xa8>
 8021b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021b06:	2b15      	cmp	r3, #21
 8021b08:	d8f6      	bhi.n	8021af8 <_printf_i+0x28>
 8021b0a:	a001      	add	r0, pc, #4	; (adr r0, 8021b10 <_printf_i+0x40>)
 8021b0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8021b10:	08021b69 	.word	0x08021b69
 8021b14:	08021b7d 	.word	0x08021b7d
 8021b18:	08021af9 	.word	0x08021af9
 8021b1c:	08021af9 	.word	0x08021af9
 8021b20:	08021af9 	.word	0x08021af9
 8021b24:	08021af9 	.word	0x08021af9
 8021b28:	08021b7d 	.word	0x08021b7d
 8021b2c:	08021af9 	.word	0x08021af9
 8021b30:	08021af9 	.word	0x08021af9
 8021b34:	08021af9 	.word	0x08021af9
 8021b38:	08021af9 	.word	0x08021af9
 8021b3c:	08021c89 	.word	0x08021c89
 8021b40:	08021bad 	.word	0x08021bad
 8021b44:	08021c6b 	.word	0x08021c6b
 8021b48:	08021af9 	.word	0x08021af9
 8021b4c:	08021af9 	.word	0x08021af9
 8021b50:	08021cab 	.word	0x08021cab
 8021b54:	08021af9 	.word	0x08021af9
 8021b58:	08021bad 	.word	0x08021bad
 8021b5c:	08021af9 	.word	0x08021af9
 8021b60:	08021af9 	.word	0x08021af9
 8021b64:	08021c73 	.word	0x08021c73
 8021b68:	680b      	ldr	r3, [r1, #0]
 8021b6a:	1d1a      	adds	r2, r3, #4
 8021b6c:	681b      	ldr	r3, [r3, #0]
 8021b6e:	600a      	str	r2, [r1, #0]
 8021b70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021b78:	2301      	movs	r3, #1
 8021b7a:	e0a3      	b.n	8021cc4 <_printf_i+0x1f4>
 8021b7c:	6825      	ldr	r5, [r4, #0]
 8021b7e:	6808      	ldr	r0, [r1, #0]
 8021b80:	062e      	lsls	r6, r5, #24
 8021b82:	f100 0304 	add.w	r3, r0, #4
 8021b86:	d50a      	bpl.n	8021b9e <_printf_i+0xce>
 8021b88:	6805      	ldr	r5, [r0, #0]
 8021b8a:	600b      	str	r3, [r1, #0]
 8021b8c:	2d00      	cmp	r5, #0
 8021b8e:	da03      	bge.n	8021b98 <_printf_i+0xc8>
 8021b90:	232d      	movs	r3, #45	; 0x2d
 8021b92:	426d      	negs	r5, r5
 8021b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021b98:	485e      	ldr	r0, [pc, #376]	; (8021d14 <_printf_i+0x244>)
 8021b9a:	230a      	movs	r3, #10
 8021b9c:	e019      	b.n	8021bd2 <_printf_i+0x102>
 8021b9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8021ba2:	6805      	ldr	r5, [r0, #0]
 8021ba4:	600b      	str	r3, [r1, #0]
 8021ba6:	bf18      	it	ne
 8021ba8:	b22d      	sxthne	r5, r5
 8021baa:	e7ef      	b.n	8021b8c <_printf_i+0xbc>
 8021bac:	680b      	ldr	r3, [r1, #0]
 8021bae:	6825      	ldr	r5, [r4, #0]
 8021bb0:	1d18      	adds	r0, r3, #4
 8021bb2:	6008      	str	r0, [r1, #0]
 8021bb4:	0628      	lsls	r0, r5, #24
 8021bb6:	d501      	bpl.n	8021bbc <_printf_i+0xec>
 8021bb8:	681d      	ldr	r5, [r3, #0]
 8021bba:	e002      	b.n	8021bc2 <_printf_i+0xf2>
 8021bbc:	0669      	lsls	r1, r5, #25
 8021bbe:	d5fb      	bpl.n	8021bb8 <_printf_i+0xe8>
 8021bc0:	881d      	ldrh	r5, [r3, #0]
 8021bc2:	4854      	ldr	r0, [pc, #336]	; (8021d14 <_printf_i+0x244>)
 8021bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8021bc6:	bf0c      	ite	eq
 8021bc8:	2308      	moveq	r3, #8
 8021bca:	230a      	movne	r3, #10
 8021bcc:	2100      	movs	r1, #0
 8021bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8021bd2:	6866      	ldr	r6, [r4, #4]
 8021bd4:	60a6      	str	r6, [r4, #8]
 8021bd6:	2e00      	cmp	r6, #0
 8021bd8:	bfa2      	ittt	ge
 8021bda:	6821      	ldrge	r1, [r4, #0]
 8021bdc:	f021 0104 	bicge.w	r1, r1, #4
 8021be0:	6021      	strge	r1, [r4, #0]
 8021be2:	b90d      	cbnz	r5, 8021be8 <_printf_i+0x118>
 8021be4:	2e00      	cmp	r6, #0
 8021be6:	d04d      	beq.n	8021c84 <_printf_i+0x1b4>
 8021be8:	4616      	mov	r6, r2
 8021bea:	fbb5 f1f3 	udiv	r1, r5, r3
 8021bee:	fb03 5711 	mls	r7, r3, r1, r5
 8021bf2:	5dc7      	ldrb	r7, [r0, r7]
 8021bf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021bf8:	462f      	mov	r7, r5
 8021bfa:	42bb      	cmp	r3, r7
 8021bfc:	460d      	mov	r5, r1
 8021bfe:	d9f4      	bls.n	8021bea <_printf_i+0x11a>
 8021c00:	2b08      	cmp	r3, #8
 8021c02:	d10b      	bne.n	8021c1c <_printf_i+0x14c>
 8021c04:	6823      	ldr	r3, [r4, #0]
 8021c06:	07df      	lsls	r7, r3, #31
 8021c08:	d508      	bpl.n	8021c1c <_printf_i+0x14c>
 8021c0a:	6923      	ldr	r3, [r4, #16]
 8021c0c:	6861      	ldr	r1, [r4, #4]
 8021c0e:	4299      	cmp	r1, r3
 8021c10:	bfde      	ittt	le
 8021c12:	2330      	movle	r3, #48	; 0x30
 8021c14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021c18:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8021c1c:	1b92      	subs	r2, r2, r6
 8021c1e:	6122      	str	r2, [r4, #16]
 8021c20:	f8cd a000 	str.w	sl, [sp]
 8021c24:	464b      	mov	r3, r9
 8021c26:	aa03      	add	r2, sp, #12
 8021c28:	4621      	mov	r1, r4
 8021c2a:	4640      	mov	r0, r8
 8021c2c:	f7ff fee2 	bl	80219f4 <_printf_common>
 8021c30:	3001      	adds	r0, #1
 8021c32:	d14c      	bne.n	8021cce <_printf_i+0x1fe>
 8021c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021c38:	b004      	add	sp, #16
 8021c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021c3e:	4835      	ldr	r0, [pc, #212]	; (8021d14 <_printf_i+0x244>)
 8021c40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8021c44:	6823      	ldr	r3, [r4, #0]
 8021c46:	680e      	ldr	r6, [r1, #0]
 8021c48:	061f      	lsls	r7, r3, #24
 8021c4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8021c4e:	600e      	str	r6, [r1, #0]
 8021c50:	d514      	bpl.n	8021c7c <_printf_i+0x1ac>
 8021c52:	07d9      	lsls	r1, r3, #31
 8021c54:	bf44      	itt	mi
 8021c56:	f043 0320 	orrmi.w	r3, r3, #32
 8021c5a:	6023      	strmi	r3, [r4, #0]
 8021c5c:	b91d      	cbnz	r5, 8021c66 <_printf_i+0x196>
 8021c5e:	6823      	ldr	r3, [r4, #0]
 8021c60:	f023 0320 	bic.w	r3, r3, #32
 8021c64:	6023      	str	r3, [r4, #0]
 8021c66:	2310      	movs	r3, #16
 8021c68:	e7b0      	b.n	8021bcc <_printf_i+0xfc>
 8021c6a:	6823      	ldr	r3, [r4, #0]
 8021c6c:	f043 0320 	orr.w	r3, r3, #32
 8021c70:	6023      	str	r3, [r4, #0]
 8021c72:	2378      	movs	r3, #120	; 0x78
 8021c74:	4828      	ldr	r0, [pc, #160]	; (8021d18 <_printf_i+0x248>)
 8021c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021c7a:	e7e3      	b.n	8021c44 <_printf_i+0x174>
 8021c7c:	065e      	lsls	r6, r3, #25
 8021c7e:	bf48      	it	mi
 8021c80:	b2ad      	uxthmi	r5, r5
 8021c82:	e7e6      	b.n	8021c52 <_printf_i+0x182>
 8021c84:	4616      	mov	r6, r2
 8021c86:	e7bb      	b.n	8021c00 <_printf_i+0x130>
 8021c88:	680b      	ldr	r3, [r1, #0]
 8021c8a:	6826      	ldr	r6, [r4, #0]
 8021c8c:	6960      	ldr	r0, [r4, #20]
 8021c8e:	1d1d      	adds	r5, r3, #4
 8021c90:	600d      	str	r5, [r1, #0]
 8021c92:	0635      	lsls	r5, r6, #24
 8021c94:	681b      	ldr	r3, [r3, #0]
 8021c96:	d501      	bpl.n	8021c9c <_printf_i+0x1cc>
 8021c98:	6018      	str	r0, [r3, #0]
 8021c9a:	e002      	b.n	8021ca2 <_printf_i+0x1d2>
 8021c9c:	0671      	lsls	r1, r6, #25
 8021c9e:	d5fb      	bpl.n	8021c98 <_printf_i+0x1c8>
 8021ca0:	8018      	strh	r0, [r3, #0]
 8021ca2:	2300      	movs	r3, #0
 8021ca4:	6123      	str	r3, [r4, #16]
 8021ca6:	4616      	mov	r6, r2
 8021ca8:	e7ba      	b.n	8021c20 <_printf_i+0x150>
 8021caa:	680b      	ldr	r3, [r1, #0]
 8021cac:	1d1a      	adds	r2, r3, #4
 8021cae:	600a      	str	r2, [r1, #0]
 8021cb0:	681e      	ldr	r6, [r3, #0]
 8021cb2:	6862      	ldr	r2, [r4, #4]
 8021cb4:	2100      	movs	r1, #0
 8021cb6:	4630      	mov	r0, r6
 8021cb8:	f7de fb12 	bl	80002e0 <memchr>
 8021cbc:	b108      	cbz	r0, 8021cc2 <_printf_i+0x1f2>
 8021cbe:	1b80      	subs	r0, r0, r6
 8021cc0:	6060      	str	r0, [r4, #4]
 8021cc2:	6863      	ldr	r3, [r4, #4]
 8021cc4:	6123      	str	r3, [r4, #16]
 8021cc6:	2300      	movs	r3, #0
 8021cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021ccc:	e7a8      	b.n	8021c20 <_printf_i+0x150>
 8021cce:	6923      	ldr	r3, [r4, #16]
 8021cd0:	4632      	mov	r2, r6
 8021cd2:	4649      	mov	r1, r9
 8021cd4:	4640      	mov	r0, r8
 8021cd6:	47d0      	blx	sl
 8021cd8:	3001      	adds	r0, #1
 8021cda:	d0ab      	beq.n	8021c34 <_printf_i+0x164>
 8021cdc:	6823      	ldr	r3, [r4, #0]
 8021cde:	079b      	lsls	r3, r3, #30
 8021ce0:	d413      	bmi.n	8021d0a <_printf_i+0x23a>
 8021ce2:	68e0      	ldr	r0, [r4, #12]
 8021ce4:	9b03      	ldr	r3, [sp, #12]
 8021ce6:	4298      	cmp	r0, r3
 8021ce8:	bfb8      	it	lt
 8021cea:	4618      	movlt	r0, r3
 8021cec:	e7a4      	b.n	8021c38 <_printf_i+0x168>
 8021cee:	2301      	movs	r3, #1
 8021cf0:	4632      	mov	r2, r6
 8021cf2:	4649      	mov	r1, r9
 8021cf4:	4640      	mov	r0, r8
 8021cf6:	47d0      	blx	sl
 8021cf8:	3001      	adds	r0, #1
 8021cfa:	d09b      	beq.n	8021c34 <_printf_i+0x164>
 8021cfc:	3501      	adds	r5, #1
 8021cfe:	68e3      	ldr	r3, [r4, #12]
 8021d00:	9903      	ldr	r1, [sp, #12]
 8021d02:	1a5b      	subs	r3, r3, r1
 8021d04:	42ab      	cmp	r3, r5
 8021d06:	dcf2      	bgt.n	8021cee <_printf_i+0x21e>
 8021d08:	e7eb      	b.n	8021ce2 <_printf_i+0x212>
 8021d0a:	2500      	movs	r5, #0
 8021d0c:	f104 0619 	add.w	r6, r4, #25
 8021d10:	e7f5      	b.n	8021cfe <_printf_i+0x22e>
 8021d12:	bf00      	nop
 8021d14:	08028866 	.word	0x08028866
 8021d18:	08028877 	.word	0x08028877

08021d1c <iprintf>:
 8021d1c:	b40f      	push	{r0, r1, r2, r3}
 8021d1e:	4b0a      	ldr	r3, [pc, #40]	; (8021d48 <iprintf+0x2c>)
 8021d20:	b513      	push	{r0, r1, r4, lr}
 8021d22:	681c      	ldr	r4, [r3, #0]
 8021d24:	b124      	cbz	r4, 8021d30 <iprintf+0x14>
 8021d26:	69a3      	ldr	r3, [r4, #24]
 8021d28:	b913      	cbnz	r3, 8021d30 <iprintf+0x14>
 8021d2a:	4620      	mov	r0, r4
 8021d2c:	f001 f93c 	bl	8022fa8 <__sinit>
 8021d30:	ab05      	add	r3, sp, #20
 8021d32:	9a04      	ldr	r2, [sp, #16]
 8021d34:	68a1      	ldr	r1, [r4, #8]
 8021d36:	9301      	str	r3, [sp, #4]
 8021d38:	4620      	mov	r0, r4
 8021d3a:	f002 f817 	bl	8023d6c <_vfiprintf_r>
 8021d3e:	b002      	add	sp, #8
 8021d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d44:	b004      	add	sp, #16
 8021d46:	4770      	bx	lr
 8021d48:	24000038 	.word	0x24000038

08021d4c <rand>:
 8021d4c:	4b17      	ldr	r3, [pc, #92]	; (8021dac <rand+0x60>)
 8021d4e:	b510      	push	{r4, lr}
 8021d50:	681c      	ldr	r4, [r3, #0]
 8021d52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021d54:	b9b3      	cbnz	r3, 8021d84 <rand+0x38>
 8021d56:	2018      	movs	r0, #24
 8021d58:	f001 fa42 	bl	80231e0 <malloc>
 8021d5c:	63a0      	str	r0, [r4, #56]	; 0x38
 8021d5e:	b928      	cbnz	r0, 8021d6c <rand+0x20>
 8021d60:	4602      	mov	r2, r0
 8021d62:	4b13      	ldr	r3, [pc, #76]	; (8021db0 <rand+0x64>)
 8021d64:	4813      	ldr	r0, [pc, #76]	; (8021db4 <rand+0x68>)
 8021d66:	214e      	movs	r1, #78	; 0x4e
 8021d68:	f000 f9d6 	bl	8022118 <__assert_func>
 8021d6c:	4a12      	ldr	r2, [pc, #72]	; (8021db8 <rand+0x6c>)
 8021d6e:	4b13      	ldr	r3, [pc, #76]	; (8021dbc <rand+0x70>)
 8021d70:	e9c0 2300 	strd	r2, r3, [r0]
 8021d74:	4b12      	ldr	r3, [pc, #72]	; (8021dc0 <rand+0x74>)
 8021d76:	6083      	str	r3, [r0, #8]
 8021d78:	230b      	movs	r3, #11
 8021d7a:	8183      	strh	r3, [r0, #12]
 8021d7c:	2201      	movs	r2, #1
 8021d7e:	2300      	movs	r3, #0
 8021d80:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021d84:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021d86:	480f      	ldr	r0, [pc, #60]	; (8021dc4 <rand+0x78>)
 8021d88:	690a      	ldr	r2, [r1, #16]
 8021d8a:	694b      	ldr	r3, [r1, #20]
 8021d8c:	4c0e      	ldr	r4, [pc, #56]	; (8021dc8 <rand+0x7c>)
 8021d8e:	4350      	muls	r0, r2
 8021d90:	fb04 0003 	mla	r0, r4, r3, r0
 8021d94:	fba2 3404 	umull	r3, r4, r2, r4
 8021d98:	1c5a      	adds	r2, r3, #1
 8021d9a:	4404      	add	r4, r0
 8021d9c:	f144 0000 	adc.w	r0, r4, #0
 8021da0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8021da4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8021da8:	bd10      	pop	{r4, pc}
 8021daa:	bf00      	nop
 8021dac:	24000038 	.word	0x24000038
 8021db0:	08028888 	.word	0x08028888
 8021db4:	0802889f 	.word	0x0802889f
 8021db8:	abcd330e 	.word	0xabcd330e
 8021dbc:	e66d1234 	.word	0xe66d1234
 8021dc0:	0005deec 	.word	0x0005deec
 8021dc4:	5851f42d 	.word	0x5851f42d
 8021dc8:	4c957f2d 	.word	0x4c957f2d

08021dcc <_raise_r>:
 8021dcc:	291f      	cmp	r1, #31
 8021dce:	b538      	push	{r3, r4, r5, lr}
 8021dd0:	4604      	mov	r4, r0
 8021dd2:	460d      	mov	r5, r1
 8021dd4:	d904      	bls.n	8021de0 <_raise_r+0x14>
 8021dd6:	2316      	movs	r3, #22
 8021dd8:	6003      	str	r3, [r0, #0]
 8021dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021dde:	bd38      	pop	{r3, r4, r5, pc}
 8021de0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021de2:	b112      	cbz	r2, 8021dea <_raise_r+0x1e>
 8021de4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021de8:	b94b      	cbnz	r3, 8021dfe <_raise_r+0x32>
 8021dea:	4620      	mov	r0, r4
 8021dec:	f000 f830 	bl	8021e50 <_getpid_r>
 8021df0:	462a      	mov	r2, r5
 8021df2:	4601      	mov	r1, r0
 8021df4:	4620      	mov	r0, r4
 8021df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021dfa:	f000 b817 	b.w	8021e2c <_kill_r>
 8021dfe:	2b01      	cmp	r3, #1
 8021e00:	d00a      	beq.n	8021e18 <_raise_r+0x4c>
 8021e02:	1c59      	adds	r1, r3, #1
 8021e04:	d103      	bne.n	8021e0e <_raise_r+0x42>
 8021e06:	2316      	movs	r3, #22
 8021e08:	6003      	str	r3, [r0, #0]
 8021e0a:	2001      	movs	r0, #1
 8021e0c:	e7e7      	b.n	8021dde <_raise_r+0x12>
 8021e0e:	2400      	movs	r4, #0
 8021e10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021e14:	4628      	mov	r0, r5
 8021e16:	4798      	blx	r3
 8021e18:	2000      	movs	r0, #0
 8021e1a:	e7e0      	b.n	8021dde <_raise_r+0x12>

08021e1c <raise>:
 8021e1c:	4b02      	ldr	r3, [pc, #8]	; (8021e28 <raise+0xc>)
 8021e1e:	4601      	mov	r1, r0
 8021e20:	6818      	ldr	r0, [r3, #0]
 8021e22:	f7ff bfd3 	b.w	8021dcc <_raise_r>
 8021e26:	bf00      	nop
 8021e28:	24000038 	.word	0x24000038

08021e2c <_kill_r>:
 8021e2c:	b538      	push	{r3, r4, r5, lr}
 8021e2e:	4d07      	ldr	r5, [pc, #28]	; (8021e4c <_kill_r+0x20>)
 8021e30:	2300      	movs	r3, #0
 8021e32:	4604      	mov	r4, r0
 8021e34:	4608      	mov	r0, r1
 8021e36:	4611      	mov	r1, r2
 8021e38:	602b      	str	r3, [r5, #0]
 8021e3a:	f7df fad1 	bl	80013e0 <_kill>
 8021e3e:	1c43      	adds	r3, r0, #1
 8021e40:	d102      	bne.n	8021e48 <_kill_r+0x1c>
 8021e42:	682b      	ldr	r3, [r5, #0]
 8021e44:	b103      	cbz	r3, 8021e48 <_kill_r+0x1c>
 8021e46:	6023      	str	r3, [r4, #0]
 8021e48:	bd38      	pop	{r3, r4, r5, pc}
 8021e4a:	bf00      	nop
 8021e4c:	2400d240 	.word	0x2400d240

08021e50 <_getpid_r>:
 8021e50:	f7df babe 	b.w	80013d0 <_getpid>

08021e54 <siprintf>:
 8021e54:	b40e      	push	{r1, r2, r3}
 8021e56:	b500      	push	{lr}
 8021e58:	b09c      	sub	sp, #112	; 0x70
 8021e5a:	ab1d      	add	r3, sp, #116	; 0x74
 8021e5c:	9002      	str	r0, [sp, #8]
 8021e5e:	9006      	str	r0, [sp, #24]
 8021e60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021e64:	4809      	ldr	r0, [pc, #36]	; (8021e8c <siprintf+0x38>)
 8021e66:	9107      	str	r1, [sp, #28]
 8021e68:	9104      	str	r1, [sp, #16]
 8021e6a:	4909      	ldr	r1, [pc, #36]	; (8021e90 <siprintf+0x3c>)
 8021e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8021e70:	9105      	str	r1, [sp, #20]
 8021e72:	6800      	ldr	r0, [r0, #0]
 8021e74:	9301      	str	r3, [sp, #4]
 8021e76:	a902      	add	r1, sp, #8
 8021e78:	f001 fe4e 	bl	8023b18 <_svfiprintf_r>
 8021e7c:	9b02      	ldr	r3, [sp, #8]
 8021e7e:	2200      	movs	r2, #0
 8021e80:	701a      	strb	r2, [r3, #0]
 8021e82:	b01c      	add	sp, #112	; 0x70
 8021e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8021e88:	b003      	add	sp, #12
 8021e8a:	4770      	bx	lr
 8021e8c:	24000038 	.word	0x24000038
 8021e90:	ffff0208 	.word	0xffff0208

08021e94 <_vsiprintf_r>:
 8021e94:	b500      	push	{lr}
 8021e96:	b09b      	sub	sp, #108	; 0x6c
 8021e98:	9100      	str	r1, [sp, #0]
 8021e9a:	9104      	str	r1, [sp, #16]
 8021e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021ea0:	9105      	str	r1, [sp, #20]
 8021ea2:	9102      	str	r1, [sp, #8]
 8021ea4:	4905      	ldr	r1, [pc, #20]	; (8021ebc <_vsiprintf_r+0x28>)
 8021ea6:	9103      	str	r1, [sp, #12]
 8021ea8:	4669      	mov	r1, sp
 8021eaa:	f001 fe35 	bl	8023b18 <_svfiprintf_r>
 8021eae:	9b00      	ldr	r3, [sp, #0]
 8021eb0:	2200      	movs	r2, #0
 8021eb2:	701a      	strb	r2, [r3, #0]
 8021eb4:	b01b      	add	sp, #108	; 0x6c
 8021eb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8021eba:	bf00      	nop
 8021ebc:	ffff0208 	.word	0xffff0208

08021ec0 <vsiprintf>:
 8021ec0:	4613      	mov	r3, r2
 8021ec2:	460a      	mov	r2, r1
 8021ec4:	4601      	mov	r1, r0
 8021ec6:	4802      	ldr	r0, [pc, #8]	; (8021ed0 <vsiprintf+0x10>)
 8021ec8:	6800      	ldr	r0, [r0, #0]
 8021eca:	f7ff bfe3 	b.w	8021e94 <_vsiprintf_r>
 8021ece:	bf00      	nop
 8021ed0:	24000038 	.word	0x24000038

08021ed4 <__swbuf_r>:
 8021ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ed6:	460e      	mov	r6, r1
 8021ed8:	4614      	mov	r4, r2
 8021eda:	4605      	mov	r5, r0
 8021edc:	b118      	cbz	r0, 8021ee6 <__swbuf_r+0x12>
 8021ede:	6983      	ldr	r3, [r0, #24]
 8021ee0:	b90b      	cbnz	r3, 8021ee6 <__swbuf_r+0x12>
 8021ee2:	f001 f861 	bl	8022fa8 <__sinit>
 8021ee6:	4b21      	ldr	r3, [pc, #132]	; (8021f6c <__swbuf_r+0x98>)
 8021ee8:	429c      	cmp	r4, r3
 8021eea:	d12b      	bne.n	8021f44 <__swbuf_r+0x70>
 8021eec:	686c      	ldr	r4, [r5, #4]
 8021eee:	69a3      	ldr	r3, [r4, #24]
 8021ef0:	60a3      	str	r3, [r4, #8]
 8021ef2:	89a3      	ldrh	r3, [r4, #12]
 8021ef4:	071a      	lsls	r2, r3, #28
 8021ef6:	d52f      	bpl.n	8021f58 <__swbuf_r+0x84>
 8021ef8:	6923      	ldr	r3, [r4, #16]
 8021efa:	b36b      	cbz	r3, 8021f58 <__swbuf_r+0x84>
 8021efc:	6923      	ldr	r3, [r4, #16]
 8021efe:	6820      	ldr	r0, [r4, #0]
 8021f00:	1ac0      	subs	r0, r0, r3
 8021f02:	6963      	ldr	r3, [r4, #20]
 8021f04:	b2f6      	uxtb	r6, r6
 8021f06:	4283      	cmp	r3, r0
 8021f08:	4637      	mov	r7, r6
 8021f0a:	dc04      	bgt.n	8021f16 <__swbuf_r+0x42>
 8021f0c:	4621      	mov	r1, r4
 8021f0e:	4628      	mov	r0, r5
 8021f10:	f000 ffb6 	bl	8022e80 <_fflush_r>
 8021f14:	bb30      	cbnz	r0, 8021f64 <__swbuf_r+0x90>
 8021f16:	68a3      	ldr	r3, [r4, #8]
 8021f18:	3b01      	subs	r3, #1
 8021f1a:	60a3      	str	r3, [r4, #8]
 8021f1c:	6823      	ldr	r3, [r4, #0]
 8021f1e:	1c5a      	adds	r2, r3, #1
 8021f20:	6022      	str	r2, [r4, #0]
 8021f22:	701e      	strb	r6, [r3, #0]
 8021f24:	6963      	ldr	r3, [r4, #20]
 8021f26:	3001      	adds	r0, #1
 8021f28:	4283      	cmp	r3, r0
 8021f2a:	d004      	beq.n	8021f36 <__swbuf_r+0x62>
 8021f2c:	89a3      	ldrh	r3, [r4, #12]
 8021f2e:	07db      	lsls	r3, r3, #31
 8021f30:	d506      	bpl.n	8021f40 <__swbuf_r+0x6c>
 8021f32:	2e0a      	cmp	r6, #10
 8021f34:	d104      	bne.n	8021f40 <__swbuf_r+0x6c>
 8021f36:	4621      	mov	r1, r4
 8021f38:	4628      	mov	r0, r5
 8021f3a:	f000 ffa1 	bl	8022e80 <_fflush_r>
 8021f3e:	b988      	cbnz	r0, 8021f64 <__swbuf_r+0x90>
 8021f40:	4638      	mov	r0, r7
 8021f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021f44:	4b0a      	ldr	r3, [pc, #40]	; (8021f70 <__swbuf_r+0x9c>)
 8021f46:	429c      	cmp	r4, r3
 8021f48:	d101      	bne.n	8021f4e <__swbuf_r+0x7a>
 8021f4a:	68ac      	ldr	r4, [r5, #8]
 8021f4c:	e7cf      	b.n	8021eee <__swbuf_r+0x1a>
 8021f4e:	4b09      	ldr	r3, [pc, #36]	; (8021f74 <__swbuf_r+0xa0>)
 8021f50:	429c      	cmp	r4, r3
 8021f52:	bf08      	it	eq
 8021f54:	68ec      	ldreq	r4, [r5, #12]
 8021f56:	e7ca      	b.n	8021eee <__swbuf_r+0x1a>
 8021f58:	4621      	mov	r1, r4
 8021f5a:	4628      	mov	r0, r5
 8021f5c:	f000 f80c 	bl	8021f78 <__swsetup_r>
 8021f60:	2800      	cmp	r0, #0
 8021f62:	d0cb      	beq.n	8021efc <__swbuf_r+0x28>
 8021f64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8021f68:	e7ea      	b.n	8021f40 <__swbuf_r+0x6c>
 8021f6a:	bf00      	nop
 8021f6c:	080289d8 	.word	0x080289d8
 8021f70:	080289f8 	.word	0x080289f8
 8021f74:	080289b8 	.word	0x080289b8

08021f78 <__swsetup_r>:
 8021f78:	4b32      	ldr	r3, [pc, #200]	; (8022044 <__swsetup_r+0xcc>)
 8021f7a:	b570      	push	{r4, r5, r6, lr}
 8021f7c:	681d      	ldr	r5, [r3, #0]
 8021f7e:	4606      	mov	r6, r0
 8021f80:	460c      	mov	r4, r1
 8021f82:	b125      	cbz	r5, 8021f8e <__swsetup_r+0x16>
 8021f84:	69ab      	ldr	r3, [r5, #24]
 8021f86:	b913      	cbnz	r3, 8021f8e <__swsetup_r+0x16>
 8021f88:	4628      	mov	r0, r5
 8021f8a:	f001 f80d 	bl	8022fa8 <__sinit>
 8021f8e:	4b2e      	ldr	r3, [pc, #184]	; (8022048 <__swsetup_r+0xd0>)
 8021f90:	429c      	cmp	r4, r3
 8021f92:	d10f      	bne.n	8021fb4 <__swsetup_r+0x3c>
 8021f94:	686c      	ldr	r4, [r5, #4]
 8021f96:	89a3      	ldrh	r3, [r4, #12]
 8021f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021f9c:	0719      	lsls	r1, r3, #28
 8021f9e:	d42c      	bmi.n	8021ffa <__swsetup_r+0x82>
 8021fa0:	06dd      	lsls	r5, r3, #27
 8021fa2:	d411      	bmi.n	8021fc8 <__swsetup_r+0x50>
 8021fa4:	2309      	movs	r3, #9
 8021fa6:	6033      	str	r3, [r6, #0]
 8021fa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021fac:	81a3      	strh	r3, [r4, #12]
 8021fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021fb2:	e03e      	b.n	8022032 <__swsetup_r+0xba>
 8021fb4:	4b25      	ldr	r3, [pc, #148]	; (802204c <__swsetup_r+0xd4>)
 8021fb6:	429c      	cmp	r4, r3
 8021fb8:	d101      	bne.n	8021fbe <__swsetup_r+0x46>
 8021fba:	68ac      	ldr	r4, [r5, #8]
 8021fbc:	e7eb      	b.n	8021f96 <__swsetup_r+0x1e>
 8021fbe:	4b24      	ldr	r3, [pc, #144]	; (8022050 <__swsetup_r+0xd8>)
 8021fc0:	429c      	cmp	r4, r3
 8021fc2:	bf08      	it	eq
 8021fc4:	68ec      	ldreq	r4, [r5, #12]
 8021fc6:	e7e6      	b.n	8021f96 <__swsetup_r+0x1e>
 8021fc8:	0758      	lsls	r0, r3, #29
 8021fca:	d512      	bpl.n	8021ff2 <__swsetup_r+0x7a>
 8021fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021fce:	b141      	cbz	r1, 8021fe2 <__swsetup_r+0x6a>
 8021fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021fd4:	4299      	cmp	r1, r3
 8021fd6:	d002      	beq.n	8021fde <__swsetup_r+0x66>
 8021fd8:	4630      	mov	r0, r6
 8021fda:	f001 fc97 	bl	802390c <_free_r>
 8021fde:	2300      	movs	r3, #0
 8021fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8021fe2:	89a3      	ldrh	r3, [r4, #12]
 8021fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021fe8:	81a3      	strh	r3, [r4, #12]
 8021fea:	2300      	movs	r3, #0
 8021fec:	6063      	str	r3, [r4, #4]
 8021fee:	6923      	ldr	r3, [r4, #16]
 8021ff0:	6023      	str	r3, [r4, #0]
 8021ff2:	89a3      	ldrh	r3, [r4, #12]
 8021ff4:	f043 0308 	orr.w	r3, r3, #8
 8021ff8:	81a3      	strh	r3, [r4, #12]
 8021ffa:	6923      	ldr	r3, [r4, #16]
 8021ffc:	b94b      	cbnz	r3, 8022012 <__swsetup_r+0x9a>
 8021ffe:	89a3      	ldrh	r3, [r4, #12]
 8022000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022008:	d003      	beq.n	8022012 <__swsetup_r+0x9a>
 802200a:	4621      	mov	r1, r4
 802200c:	4630      	mov	r0, r6
 802200e:	f001 f8a7 	bl	8023160 <__smakebuf_r>
 8022012:	89a0      	ldrh	r0, [r4, #12]
 8022014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022018:	f010 0301 	ands.w	r3, r0, #1
 802201c:	d00a      	beq.n	8022034 <__swsetup_r+0xbc>
 802201e:	2300      	movs	r3, #0
 8022020:	60a3      	str	r3, [r4, #8]
 8022022:	6963      	ldr	r3, [r4, #20]
 8022024:	425b      	negs	r3, r3
 8022026:	61a3      	str	r3, [r4, #24]
 8022028:	6923      	ldr	r3, [r4, #16]
 802202a:	b943      	cbnz	r3, 802203e <__swsetup_r+0xc6>
 802202c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022030:	d1ba      	bne.n	8021fa8 <__swsetup_r+0x30>
 8022032:	bd70      	pop	{r4, r5, r6, pc}
 8022034:	0781      	lsls	r1, r0, #30
 8022036:	bf58      	it	pl
 8022038:	6963      	ldrpl	r3, [r4, #20]
 802203a:	60a3      	str	r3, [r4, #8]
 802203c:	e7f4      	b.n	8022028 <__swsetup_r+0xb0>
 802203e:	2000      	movs	r0, #0
 8022040:	e7f7      	b.n	8022032 <__swsetup_r+0xba>
 8022042:	bf00      	nop
 8022044:	24000038 	.word	0x24000038
 8022048:	080289d8 	.word	0x080289d8
 802204c:	080289f8 	.word	0x080289f8
 8022050:	080289b8 	.word	0x080289b8

08022054 <__register_exitproc>:
 8022054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022058:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8022114 <__register_exitproc+0xc0>
 802205c:	4606      	mov	r6, r0
 802205e:	f8d8 0000 	ldr.w	r0, [r8]
 8022062:	461f      	mov	r7, r3
 8022064:	460d      	mov	r5, r1
 8022066:	4691      	mov	r9, r2
 8022068:	f001 f853 	bl	8023112 <__retarget_lock_acquire_recursive>
 802206c:	4b25      	ldr	r3, [pc, #148]	; (8022104 <__register_exitproc+0xb0>)
 802206e:	681c      	ldr	r4, [r3, #0]
 8022070:	b934      	cbnz	r4, 8022080 <__register_exitproc+0x2c>
 8022072:	4c25      	ldr	r4, [pc, #148]	; (8022108 <__register_exitproc+0xb4>)
 8022074:	601c      	str	r4, [r3, #0]
 8022076:	4b25      	ldr	r3, [pc, #148]	; (802210c <__register_exitproc+0xb8>)
 8022078:	b113      	cbz	r3, 8022080 <__register_exitproc+0x2c>
 802207a:	681b      	ldr	r3, [r3, #0]
 802207c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8022080:	6863      	ldr	r3, [r4, #4]
 8022082:	2b1f      	cmp	r3, #31
 8022084:	dd07      	ble.n	8022096 <__register_exitproc+0x42>
 8022086:	f8d8 0000 	ldr.w	r0, [r8]
 802208a:	f001 f844 	bl	8023116 <__retarget_lock_release_recursive>
 802208e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022096:	b34e      	cbz	r6, 80220ec <__register_exitproc+0x98>
 8022098:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802209c:	b988      	cbnz	r0, 80220c2 <__register_exitproc+0x6e>
 802209e:	4b1c      	ldr	r3, [pc, #112]	; (8022110 <__register_exitproc+0xbc>)
 80220a0:	b923      	cbnz	r3, 80220ac <__register_exitproc+0x58>
 80220a2:	f8d8 0000 	ldr.w	r0, [r8]
 80220a6:	f001 f835 	bl	8023114 <__retarget_lock_release>
 80220aa:	e7f0      	b.n	802208e <__register_exitproc+0x3a>
 80220ac:	f44f 7084 	mov.w	r0, #264	; 0x108
 80220b0:	f001 f896 	bl	80231e0 <malloc>
 80220b4:	2800      	cmp	r0, #0
 80220b6:	d0f4      	beq.n	80220a2 <__register_exitproc+0x4e>
 80220b8:	2300      	movs	r3, #0
 80220ba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80220be:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80220c2:	6863      	ldr	r3, [r4, #4]
 80220c4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80220c8:	2201      	movs	r2, #1
 80220ca:	409a      	lsls	r2, r3
 80220cc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80220d0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80220d4:	4313      	orrs	r3, r2
 80220d6:	2e02      	cmp	r6, #2
 80220d8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80220dc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80220e0:	bf02      	ittt	eq
 80220e2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80220e6:	431a      	orreq	r2, r3
 80220e8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80220ec:	6863      	ldr	r3, [r4, #4]
 80220ee:	f8d8 0000 	ldr.w	r0, [r8]
 80220f2:	1c5a      	adds	r2, r3, #1
 80220f4:	3302      	adds	r3, #2
 80220f6:	6062      	str	r2, [r4, #4]
 80220f8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80220fc:	f001 f80b 	bl	8023116 <__retarget_lock_release_recursive>
 8022100:	2000      	movs	r0, #0
 8022102:	e7c6      	b.n	8022092 <__register_exitproc+0x3e>
 8022104:	24009828 	.word	0x24009828
 8022108:	2400979c 	.word	0x2400979c
 802210c:	00000000 	.word	0x00000000
 8022110:	080231e1 	.word	0x080231e1
 8022114:	2400009c 	.word	0x2400009c

08022118 <__assert_func>:
 8022118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802211a:	4614      	mov	r4, r2
 802211c:	461a      	mov	r2, r3
 802211e:	4b09      	ldr	r3, [pc, #36]	; (8022144 <__assert_func+0x2c>)
 8022120:	681b      	ldr	r3, [r3, #0]
 8022122:	4605      	mov	r5, r0
 8022124:	68d8      	ldr	r0, [r3, #12]
 8022126:	b14c      	cbz	r4, 802213c <__assert_func+0x24>
 8022128:	4b07      	ldr	r3, [pc, #28]	; (8022148 <__assert_func+0x30>)
 802212a:	9100      	str	r1, [sp, #0]
 802212c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022130:	4906      	ldr	r1, [pc, #24]	; (802214c <__assert_func+0x34>)
 8022132:	462b      	mov	r3, r5
 8022134:	f000 ffb6 	bl	80230a4 <fiprintf>
 8022138:	f7ff f93e 	bl	80213b8 <abort>
 802213c:	4b04      	ldr	r3, [pc, #16]	; (8022150 <__assert_func+0x38>)
 802213e:	461c      	mov	r4, r3
 8022140:	e7f3      	b.n	802212a <__assert_func+0x12>
 8022142:	bf00      	nop
 8022144:	24000038 	.word	0x24000038
 8022148:	080288fe 	.word	0x080288fe
 802214c:	0802890b 	.word	0x0802890b
 8022150:	08028939 	.word	0x08028939

08022154 <quorem>:
 8022154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022158:	6903      	ldr	r3, [r0, #16]
 802215a:	690c      	ldr	r4, [r1, #16]
 802215c:	42a3      	cmp	r3, r4
 802215e:	4607      	mov	r7, r0
 8022160:	f2c0 8081 	blt.w	8022266 <quorem+0x112>
 8022164:	3c01      	subs	r4, #1
 8022166:	f101 0814 	add.w	r8, r1, #20
 802216a:	f100 0514 	add.w	r5, r0, #20
 802216e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022172:	9301      	str	r3, [sp, #4]
 8022174:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8022178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802217c:	3301      	adds	r3, #1
 802217e:	429a      	cmp	r2, r3
 8022180:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8022184:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8022188:	fbb2 f6f3 	udiv	r6, r2, r3
 802218c:	d331      	bcc.n	80221f2 <quorem+0x9e>
 802218e:	f04f 0e00 	mov.w	lr, #0
 8022192:	4640      	mov	r0, r8
 8022194:	46ac      	mov	ip, r5
 8022196:	46f2      	mov	sl, lr
 8022198:	f850 2b04 	ldr.w	r2, [r0], #4
 802219c:	b293      	uxth	r3, r2
 802219e:	fb06 e303 	mla	r3, r6, r3, lr
 80221a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80221a6:	b29b      	uxth	r3, r3
 80221a8:	ebaa 0303 	sub.w	r3, sl, r3
 80221ac:	0c12      	lsrs	r2, r2, #16
 80221ae:	f8dc a000 	ldr.w	sl, [ip]
 80221b2:	fb06 e202 	mla	r2, r6, r2, lr
 80221b6:	fa13 f38a 	uxtah	r3, r3, sl
 80221ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80221be:	fa1f fa82 	uxth.w	sl, r2
 80221c2:	f8dc 2000 	ldr.w	r2, [ip]
 80221c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80221ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80221ce:	b29b      	uxth	r3, r3
 80221d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80221d4:	4581      	cmp	r9, r0
 80221d6:	f84c 3b04 	str.w	r3, [ip], #4
 80221da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80221de:	d2db      	bcs.n	8022198 <quorem+0x44>
 80221e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80221e4:	b92b      	cbnz	r3, 80221f2 <quorem+0x9e>
 80221e6:	9b01      	ldr	r3, [sp, #4]
 80221e8:	3b04      	subs	r3, #4
 80221ea:	429d      	cmp	r5, r3
 80221ec:	461a      	mov	r2, r3
 80221ee:	d32e      	bcc.n	802224e <quorem+0xfa>
 80221f0:	613c      	str	r4, [r7, #16]
 80221f2:	4638      	mov	r0, r7
 80221f4:	f001 fa7a 	bl	80236ec <__mcmp>
 80221f8:	2800      	cmp	r0, #0
 80221fa:	db24      	blt.n	8022246 <quorem+0xf2>
 80221fc:	3601      	adds	r6, #1
 80221fe:	4628      	mov	r0, r5
 8022200:	f04f 0c00 	mov.w	ip, #0
 8022204:	f858 2b04 	ldr.w	r2, [r8], #4
 8022208:	f8d0 e000 	ldr.w	lr, [r0]
 802220c:	b293      	uxth	r3, r2
 802220e:	ebac 0303 	sub.w	r3, ip, r3
 8022212:	0c12      	lsrs	r2, r2, #16
 8022214:	fa13 f38e 	uxtah	r3, r3, lr
 8022218:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802221c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022220:	b29b      	uxth	r3, r3
 8022222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022226:	45c1      	cmp	r9, r8
 8022228:	f840 3b04 	str.w	r3, [r0], #4
 802222c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8022230:	d2e8      	bcs.n	8022204 <quorem+0xb0>
 8022232:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802223a:	b922      	cbnz	r2, 8022246 <quorem+0xf2>
 802223c:	3b04      	subs	r3, #4
 802223e:	429d      	cmp	r5, r3
 8022240:	461a      	mov	r2, r3
 8022242:	d30a      	bcc.n	802225a <quorem+0x106>
 8022244:	613c      	str	r4, [r7, #16]
 8022246:	4630      	mov	r0, r6
 8022248:	b003      	add	sp, #12
 802224a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802224e:	6812      	ldr	r2, [r2, #0]
 8022250:	3b04      	subs	r3, #4
 8022252:	2a00      	cmp	r2, #0
 8022254:	d1cc      	bne.n	80221f0 <quorem+0x9c>
 8022256:	3c01      	subs	r4, #1
 8022258:	e7c7      	b.n	80221ea <quorem+0x96>
 802225a:	6812      	ldr	r2, [r2, #0]
 802225c:	3b04      	subs	r3, #4
 802225e:	2a00      	cmp	r2, #0
 8022260:	d1f0      	bne.n	8022244 <quorem+0xf0>
 8022262:	3c01      	subs	r4, #1
 8022264:	e7eb      	b.n	802223e <quorem+0xea>
 8022266:	2000      	movs	r0, #0
 8022268:	e7ee      	b.n	8022248 <quorem+0xf4>
 802226a:	0000      	movs	r0, r0
 802226c:	0000      	movs	r0, r0
	...

08022270 <_dtoa_r>:
 8022270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022274:	ec59 8b10 	vmov	r8, r9, d0
 8022278:	b095      	sub	sp, #84	; 0x54
 802227a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802227c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802227e:	9107      	str	r1, [sp, #28]
 8022280:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8022284:	4606      	mov	r6, r0
 8022286:	9209      	str	r2, [sp, #36]	; 0x24
 8022288:	9310      	str	r3, [sp, #64]	; 0x40
 802228a:	b975      	cbnz	r5, 80222aa <_dtoa_r+0x3a>
 802228c:	2010      	movs	r0, #16
 802228e:	f000 ffa7 	bl	80231e0 <malloc>
 8022292:	4602      	mov	r2, r0
 8022294:	6270      	str	r0, [r6, #36]	; 0x24
 8022296:	b920      	cbnz	r0, 80222a2 <_dtoa_r+0x32>
 8022298:	4bab      	ldr	r3, [pc, #684]	; (8022548 <_dtoa_r+0x2d8>)
 802229a:	21ea      	movs	r1, #234	; 0xea
 802229c:	48ab      	ldr	r0, [pc, #684]	; (802254c <_dtoa_r+0x2dc>)
 802229e:	f7ff ff3b 	bl	8022118 <__assert_func>
 80222a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80222a6:	6005      	str	r5, [r0, #0]
 80222a8:	60c5      	str	r5, [r0, #12]
 80222aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80222ac:	6819      	ldr	r1, [r3, #0]
 80222ae:	b151      	cbz	r1, 80222c6 <_dtoa_r+0x56>
 80222b0:	685a      	ldr	r2, [r3, #4]
 80222b2:	604a      	str	r2, [r1, #4]
 80222b4:	2301      	movs	r3, #1
 80222b6:	4093      	lsls	r3, r2
 80222b8:	608b      	str	r3, [r1, #8]
 80222ba:	4630      	mov	r0, r6
 80222bc:	f000 ffd8 	bl	8023270 <_Bfree>
 80222c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80222c2:	2200      	movs	r2, #0
 80222c4:	601a      	str	r2, [r3, #0]
 80222c6:	f1b9 0300 	subs.w	r3, r9, #0
 80222ca:	bfbb      	ittet	lt
 80222cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80222d0:	9303      	strlt	r3, [sp, #12]
 80222d2:	2300      	movge	r3, #0
 80222d4:	2201      	movlt	r2, #1
 80222d6:	bfac      	ite	ge
 80222d8:	6023      	strge	r3, [r4, #0]
 80222da:	6022      	strlt	r2, [r4, #0]
 80222dc:	4b9c      	ldr	r3, [pc, #624]	; (8022550 <_dtoa_r+0x2e0>)
 80222de:	9c03      	ldr	r4, [sp, #12]
 80222e0:	43a3      	bics	r3, r4
 80222e2:	d11a      	bne.n	802231a <_dtoa_r+0xaa>
 80222e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80222e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80222ea:	6013      	str	r3, [r2, #0]
 80222ec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80222f0:	ea53 0308 	orrs.w	r3, r3, r8
 80222f4:	f000 8512 	beq.w	8022d1c <_dtoa_r+0xaac>
 80222f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80222fa:	b953      	cbnz	r3, 8022312 <_dtoa_r+0xa2>
 80222fc:	4b95      	ldr	r3, [pc, #596]	; (8022554 <_dtoa_r+0x2e4>)
 80222fe:	e01f      	b.n	8022340 <_dtoa_r+0xd0>
 8022300:	4b95      	ldr	r3, [pc, #596]	; (8022558 <_dtoa_r+0x2e8>)
 8022302:	9300      	str	r3, [sp, #0]
 8022304:	3308      	adds	r3, #8
 8022306:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022308:	6013      	str	r3, [r2, #0]
 802230a:	9800      	ldr	r0, [sp, #0]
 802230c:	b015      	add	sp, #84	; 0x54
 802230e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022312:	4b90      	ldr	r3, [pc, #576]	; (8022554 <_dtoa_r+0x2e4>)
 8022314:	9300      	str	r3, [sp, #0]
 8022316:	3303      	adds	r3, #3
 8022318:	e7f5      	b.n	8022306 <_dtoa_r+0x96>
 802231a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802231e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022326:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 802232a:	d10b      	bne.n	8022344 <_dtoa_r+0xd4>
 802232c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802232e:	2301      	movs	r3, #1
 8022330:	6013      	str	r3, [r2, #0]
 8022332:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022334:	2b00      	cmp	r3, #0
 8022336:	f000 84ee 	beq.w	8022d16 <_dtoa_r+0xaa6>
 802233a:	4888      	ldr	r0, [pc, #544]	; (802255c <_dtoa_r+0x2ec>)
 802233c:	6018      	str	r0, [r3, #0]
 802233e:	1e43      	subs	r3, r0, #1
 8022340:	9300      	str	r3, [sp, #0]
 8022342:	e7e2      	b.n	802230a <_dtoa_r+0x9a>
 8022344:	a913      	add	r1, sp, #76	; 0x4c
 8022346:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 802234a:	aa12      	add	r2, sp, #72	; 0x48
 802234c:	4630      	mov	r0, r6
 802234e:	f001 fa71 	bl	8023834 <__d2b>
 8022352:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8022356:	4605      	mov	r5, r0
 8022358:	9812      	ldr	r0, [sp, #72]	; 0x48
 802235a:	2900      	cmp	r1, #0
 802235c:	d047      	beq.n	80223ee <_dtoa_r+0x17e>
 802235e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022360:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8022364:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8022368:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 802236c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022370:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8022374:	2400      	movs	r4, #0
 8022376:	ec43 2b16 	vmov	d6, r2, r3
 802237a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802237e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8022530 <_dtoa_r+0x2c0>
 8022382:	ee36 7b47 	vsub.f64	d7, d6, d7
 8022386:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8022538 <_dtoa_r+0x2c8>
 802238a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802238e:	eeb0 7b46 	vmov.f64	d7, d6
 8022392:	ee06 1a90 	vmov	s13, r1
 8022396:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 802239a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8022540 <_dtoa_r+0x2d0>
 802239e:	eea5 7b06 	vfma.f64	d7, d5, d6
 80223a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80223a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80223aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223ae:	ee16 ba90 	vmov	fp, s13
 80223b2:	9411      	str	r4, [sp, #68]	; 0x44
 80223b4:	d508      	bpl.n	80223c8 <_dtoa_r+0x158>
 80223b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80223ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80223be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223c2:	bf18      	it	ne
 80223c4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80223c8:	f1bb 0f16 	cmp.w	fp, #22
 80223cc:	d832      	bhi.n	8022434 <_dtoa_r+0x1c4>
 80223ce:	4b64      	ldr	r3, [pc, #400]	; (8022560 <_dtoa_r+0x2f0>)
 80223d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80223d4:	ed93 7b00 	vldr	d7, [r3]
 80223d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80223dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80223e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223e4:	d501      	bpl.n	80223ea <_dtoa_r+0x17a>
 80223e6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80223ea:	2300      	movs	r3, #0
 80223ec:	e023      	b.n	8022436 <_dtoa_r+0x1c6>
 80223ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80223f0:	4401      	add	r1, r0
 80223f2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80223f6:	2b20      	cmp	r3, #32
 80223f8:	bfc3      	ittte	gt
 80223fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80223fe:	fa04 f303 	lslgt.w	r3, r4, r3
 8022402:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8022406:	f1c3 0320 	rsble	r3, r3, #32
 802240a:	bfc6      	itte	gt
 802240c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8022410:	ea43 0308 	orrgt.w	r3, r3, r8
 8022414:	fa08 f303 	lslle.w	r3, r8, r3
 8022418:	ee07 3a90 	vmov	s15, r3
 802241c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8022420:	3901      	subs	r1, #1
 8022422:	ed8d 7b00 	vstr	d7, [sp]
 8022426:	9c01      	ldr	r4, [sp, #4]
 8022428:	e9dd 2300 	ldrd	r2, r3, [sp]
 802242c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8022430:	2401      	movs	r4, #1
 8022432:	e7a0      	b.n	8022376 <_dtoa_r+0x106>
 8022434:	2301      	movs	r3, #1
 8022436:	930f      	str	r3, [sp, #60]	; 0x3c
 8022438:	1a43      	subs	r3, r0, r1
 802243a:	1e5a      	subs	r2, r3, #1
 802243c:	bf45      	ittet	mi
 802243e:	f1c3 0301 	rsbmi	r3, r3, #1
 8022442:	9305      	strmi	r3, [sp, #20]
 8022444:	2300      	movpl	r3, #0
 8022446:	2300      	movmi	r3, #0
 8022448:	9206      	str	r2, [sp, #24]
 802244a:	bf54      	ite	pl
 802244c:	9305      	strpl	r3, [sp, #20]
 802244e:	9306      	strmi	r3, [sp, #24]
 8022450:	f1bb 0f00 	cmp.w	fp, #0
 8022454:	db18      	blt.n	8022488 <_dtoa_r+0x218>
 8022456:	9b06      	ldr	r3, [sp, #24]
 8022458:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 802245c:	445b      	add	r3, fp
 802245e:	9306      	str	r3, [sp, #24]
 8022460:	2300      	movs	r3, #0
 8022462:	9a07      	ldr	r2, [sp, #28]
 8022464:	2a09      	cmp	r2, #9
 8022466:	d849      	bhi.n	80224fc <_dtoa_r+0x28c>
 8022468:	2a05      	cmp	r2, #5
 802246a:	bfc4      	itt	gt
 802246c:	3a04      	subgt	r2, #4
 802246e:	9207      	strgt	r2, [sp, #28]
 8022470:	9a07      	ldr	r2, [sp, #28]
 8022472:	f1a2 0202 	sub.w	r2, r2, #2
 8022476:	bfcc      	ite	gt
 8022478:	2400      	movgt	r4, #0
 802247a:	2401      	movle	r4, #1
 802247c:	2a03      	cmp	r2, #3
 802247e:	d848      	bhi.n	8022512 <_dtoa_r+0x2a2>
 8022480:	e8df f002 	tbb	[pc, r2]
 8022484:	3a2c2e0b 	.word	0x3a2c2e0b
 8022488:	9b05      	ldr	r3, [sp, #20]
 802248a:	2200      	movs	r2, #0
 802248c:	eba3 030b 	sub.w	r3, r3, fp
 8022490:	9305      	str	r3, [sp, #20]
 8022492:	920e      	str	r2, [sp, #56]	; 0x38
 8022494:	f1cb 0300 	rsb	r3, fp, #0
 8022498:	e7e3      	b.n	8022462 <_dtoa_r+0x1f2>
 802249a:	2200      	movs	r2, #0
 802249c:	9208      	str	r2, [sp, #32]
 802249e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80224a0:	2a00      	cmp	r2, #0
 80224a2:	dc39      	bgt.n	8022518 <_dtoa_r+0x2a8>
 80224a4:	f04f 0a01 	mov.w	sl, #1
 80224a8:	46d1      	mov	r9, sl
 80224aa:	4652      	mov	r2, sl
 80224ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80224b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80224b2:	2100      	movs	r1, #0
 80224b4:	6079      	str	r1, [r7, #4]
 80224b6:	2004      	movs	r0, #4
 80224b8:	f100 0c14 	add.w	ip, r0, #20
 80224bc:	4594      	cmp	ip, r2
 80224be:	6879      	ldr	r1, [r7, #4]
 80224c0:	d92f      	bls.n	8022522 <_dtoa_r+0x2b2>
 80224c2:	4630      	mov	r0, r6
 80224c4:	930c      	str	r3, [sp, #48]	; 0x30
 80224c6:	f000 fe93 	bl	80231f0 <_Balloc>
 80224ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80224cc:	9000      	str	r0, [sp, #0]
 80224ce:	4602      	mov	r2, r0
 80224d0:	2800      	cmp	r0, #0
 80224d2:	d149      	bne.n	8022568 <_dtoa_r+0x2f8>
 80224d4:	4b23      	ldr	r3, [pc, #140]	; (8022564 <_dtoa_r+0x2f4>)
 80224d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80224da:	e6df      	b.n	802229c <_dtoa_r+0x2c>
 80224dc:	2201      	movs	r2, #1
 80224de:	e7dd      	b.n	802249c <_dtoa_r+0x22c>
 80224e0:	2200      	movs	r2, #0
 80224e2:	9208      	str	r2, [sp, #32]
 80224e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80224e6:	eb0b 0a02 	add.w	sl, fp, r2
 80224ea:	f10a 0901 	add.w	r9, sl, #1
 80224ee:	464a      	mov	r2, r9
 80224f0:	2a01      	cmp	r2, #1
 80224f2:	bfb8      	it	lt
 80224f4:	2201      	movlt	r2, #1
 80224f6:	e7db      	b.n	80224b0 <_dtoa_r+0x240>
 80224f8:	2201      	movs	r2, #1
 80224fa:	e7f2      	b.n	80224e2 <_dtoa_r+0x272>
 80224fc:	2401      	movs	r4, #1
 80224fe:	2200      	movs	r2, #0
 8022500:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8022504:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8022508:	2100      	movs	r1, #0
 802250a:	46d1      	mov	r9, sl
 802250c:	2212      	movs	r2, #18
 802250e:	9109      	str	r1, [sp, #36]	; 0x24
 8022510:	e7ce      	b.n	80224b0 <_dtoa_r+0x240>
 8022512:	2201      	movs	r2, #1
 8022514:	9208      	str	r2, [sp, #32]
 8022516:	e7f5      	b.n	8022504 <_dtoa_r+0x294>
 8022518:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 802251c:	46d1      	mov	r9, sl
 802251e:	4652      	mov	r2, sl
 8022520:	e7c6      	b.n	80224b0 <_dtoa_r+0x240>
 8022522:	3101      	adds	r1, #1
 8022524:	6079      	str	r1, [r7, #4]
 8022526:	0040      	lsls	r0, r0, #1
 8022528:	e7c6      	b.n	80224b8 <_dtoa_r+0x248>
 802252a:	bf00      	nop
 802252c:	f3af 8000 	nop.w
 8022530:	636f4361 	.word	0x636f4361
 8022534:	3fd287a7 	.word	0x3fd287a7
 8022538:	8b60c8b3 	.word	0x8b60c8b3
 802253c:	3fc68a28 	.word	0x3fc68a28
 8022540:	509f79fb 	.word	0x509f79fb
 8022544:	3fd34413 	.word	0x3fd34413
 8022548:	08028888 	.word	0x08028888
 802254c:	08028947 	.word	0x08028947
 8022550:	7ff00000 	.word	0x7ff00000
 8022554:	08028943 	.word	0x08028943
 8022558:	0802893a 	.word	0x0802893a
 802255c:	08028865 	.word	0x08028865
 8022560:	08028aa0 	.word	0x08028aa0
 8022564:	080289a6 	.word	0x080289a6
 8022568:	6a72      	ldr	r2, [r6, #36]	; 0x24
 802256a:	9900      	ldr	r1, [sp, #0]
 802256c:	6011      	str	r1, [r2, #0]
 802256e:	f1b9 0f0e 	cmp.w	r9, #14
 8022572:	d872      	bhi.n	802265a <_dtoa_r+0x3ea>
 8022574:	2c00      	cmp	r4, #0
 8022576:	d070      	beq.n	802265a <_dtoa_r+0x3ea>
 8022578:	f1bb 0f00 	cmp.w	fp, #0
 802257c:	f340 80a6 	ble.w	80226cc <_dtoa_r+0x45c>
 8022580:	49ca      	ldr	r1, [pc, #808]	; (80228ac <_dtoa_r+0x63c>)
 8022582:	f00b 020f 	and.w	r2, fp, #15
 8022586:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802258a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802258e:	ed92 7b00 	vldr	d7, [r2]
 8022592:	ea4f 112b 	mov.w	r1, fp, asr #4
 8022596:	f000 808d 	beq.w	80226b4 <_dtoa_r+0x444>
 802259a:	4ac5      	ldr	r2, [pc, #788]	; (80228b0 <_dtoa_r+0x640>)
 802259c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80225a0:	ed92 6b08 	vldr	d6, [r2, #32]
 80225a4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80225a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80225ac:	f001 010f 	and.w	r1, r1, #15
 80225b0:	2203      	movs	r2, #3
 80225b2:	48bf      	ldr	r0, [pc, #764]	; (80228b0 <_dtoa_r+0x640>)
 80225b4:	2900      	cmp	r1, #0
 80225b6:	d17f      	bne.n	80226b8 <_dtoa_r+0x448>
 80225b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80225bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80225c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80225c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80225c6:	2900      	cmp	r1, #0
 80225c8:	f000 80b2 	beq.w	8022730 <_dtoa_r+0x4c0>
 80225cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80225d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80225d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80225d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225dc:	f140 80a8 	bpl.w	8022730 <_dtoa_r+0x4c0>
 80225e0:	f1b9 0f00 	cmp.w	r9, #0
 80225e4:	f000 80a4 	beq.w	8022730 <_dtoa_r+0x4c0>
 80225e8:	f1ba 0f00 	cmp.w	sl, #0
 80225ec:	dd31      	ble.n	8022652 <_dtoa_r+0x3e2>
 80225ee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80225f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80225f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80225fa:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80225fe:	3201      	adds	r2, #1
 8022600:	4650      	mov	r0, sl
 8022602:	ed9d 6b02 	vldr	d6, [sp, #8]
 8022606:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 802260a:	ee07 2a90 	vmov	s15, r2
 802260e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8022612:	eea7 5b06 	vfma.f64	d5, d7, d6
 8022616:	ed8d 5b02 	vstr	d5, [sp, #8]
 802261a:	9c03      	ldr	r4, [sp, #12]
 802261c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8022620:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8022624:	2800      	cmp	r0, #0
 8022626:	f040 8086 	bne.w	8022736 <_dtoa_r+0x4c6>
 802262a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802262e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8022632:	ec42 1b17 	vmov	d7, r1, r2
 8022636:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802263e:	f300 8272 	bgt.w	8022b26 <_dtoa_r+0x8b6>
 8022642:	eeb1 7b47 	vneg.f64	d7, d7
 8022646:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802264e:	f100 8267 	bmi.w	8022b20 <_dtoa_r+0x8b0>
 8022652:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8022656:	e9cd 1202 	strd	r1, r2, [sp, #8]
 802265a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802265c:	2a00      	cmp	r2, #0
 802265e:	f2c0 8129 	blt.w	80228b4 <_dtoa_r+0x644>
 8022662:	f1bb 0f0e 	cmp.w	fp, #14
 8022666:	f300 8125 	bgt.w	80228b4 <_dtoa_r+0x644>
 802266a:	4b90      	ldr	r3, [pc, #576]	; (80228ac <_dtoa_r+0x63c>)
 802266c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8022670:	ed93 6b00 	vldr	d6, [r3]
 8022674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022676:	2b00      	cmp	r3, #0
 8022678:	f280 80c3 	bge.w	8022802 <_dtoa_r+0x592>
 802267c:	f1b9 0f00 	cmp.w	r9, #0
 8022680:	f300 80bf 	bgt.w	8022802 <_dtoa_r+0x592>
 8022684:	f040 824c 	bne.w	8022b20 <_dtoa_r+0x8b0>
 8022688:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802268c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8022690:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022694:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802269c:	464c      	mov	r4, r9
 802269e:	464f      	mov	r7, r9
 80226a0:	f280 8222 	bge.w	8022ae8 <_dtoa_r+0x878>
 80226a4:	f8dd 8000 	ldr.w	r8, [sp]
 80226a8:	2331      	movs	r3, #49	; 0x31
 80226aa:	f808 3b01 	strb.w	r3, [r8], #1
 80226ae:	f10b 0b01 	add.w	fp, fp, #1
 80226b2:	e21e      	b.n	8022af2 <_dtoa_r+0x882>
 80226b4:	2202      	movs	r2, #2
 80226b6:	e77c      	b.n	80225b2 <_dtoa_r+0x342>
 80226b8:	07cc      	lsls	r4, r1, #31
 80226ba:	d504      	bpl.n	80226c6 <_dtoa_r+0x456>
 80226bc:	ed90 6b00 	vldr	d6, [r0]
 80226c0:	3201      	adds	r2, #1
 80226c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80226c6:	1049      	asrs	r1, r1, #1
 80226c8:	3008      	adds	r0, #8
 80226ca:	e773      	b.n	80225b4 <_dtoa_r+0x344>
 80226cc:	d02e      	beq.n	802272c <_dtoa_r+0x4bc>
 80226ce:	f1cb 0100 	rsb	r1, fp, #0
 80226d2:	4a76      	ldr	r2, [pc, #472]	; (80228ac <_dtoa_r+0x63c>)
 80226d4:	f001 000f 	and.w	r0, r1, #15
 80226d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80226dc:	ed92 7b00 	vldr	d7, [r2]
 80226e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80226e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80226e8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80226ec:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80226f0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80226f4:	486e      	ldr	r0, [pc, #440]	; (80228b0 <_dtoa_r+0x640>)
 80226f6:	1109      	asrs	r1, r1, #4
 80226f8:	2400      	movs	r4, #0
 80226fa:	2202      	movs	r2, #2
 80226fc:	b939      	cbnz	r1, 802270e <_dtoa_r+0x49e>
 80226fe:	2c00      	cmp	r4, #0
 8022700:	f43f af60 	beq.w	80225c4 <_dtoa_r+0x354>
 8022704:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8022708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802270c:	e75a      	b.n	80225c4 <_dtoa_r+0x354>
 802270e:	07cf      	lsls	r7, r1, #31
 8022710:	d509      	bpl.n	8022726 <_dtoa_r+0x4b6>
 8022712:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8022716:	ed90 7b00 	vldr	d7, [r0]
 802271a:	ee26 7b07 	vmul.f64	d7, d6, d7
 802271e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8022722:	3201      	adds	r2, #1
 8022724:	2401      	movs	r4, #1
 8022726:	1049      	asrs	r1, r1, #1
 8022728:	3008      	adds	r0, #8
 802272a:	e7e7      	b.n	80226fc <_dtoa_r+0x48c>
 802272c:	2202      	movs	r2, #2
 802272e:	e749      	b.n	80225c4 <_dtoa_r+0x354>
 8022730:	465f      	mov	r7, fp
 8022732:	4648      	mov	r0, r9
 8022734:	e765      	b.n	8022602 <_dtoa_r+0x392>
 8022736:	ec42 1b17 	vmov	d7, r1, r2
 802273a:	4a5c      	ldr	r2, [pc, #368]	; (80228ac <_dtoa_r+0x63c>)
 802273c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8022740:	ed12 4b02 	vldr	d4, [r2, #-8]
 8022744:	9a00      	ldr	r2, [sp, #0]
 8022746:	1814      	adds	r4, r2, r0
 8022748:	9a08      	ldr	r2, [sp, #32]
 802274a:	b352      	cbz	r2, 80227a2 <_dtoa_r+0x532>
 802274c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8022750:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8022754:	f8dd 8000 	ldr.w	r8, [sp]
 8022758:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802275c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8022760:	ee35 7b47 	vsub.f64	d7, d5, d7
 8022764:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8022768:	ee14 2a90 	vmov	r2, s9
 802276c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8022770:	3230      	adds	r2, #48	; 0x30
 8022772:	ee36 6b45 	vsub.f64	d6, d6, d5
 8022776:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802277e:	f808 2b01 	strb.w	r2, [r8], #1
 8022782:	d439      	bmi.n	80227f8 <_dtoa_r+0x588>
 8022784:	ee32 5b46 	vsub.f64	d5, d2, d6
 8022788:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022790:	d472      	bmi.n	8022878 <_dtoa_r+0x608>
 8022792:	45a0      	cmp	r8, r4
 8022794:	f43f af5d 	beq.w	8022652 <_dtoa_r+0x3e2>
 8022798:	ee27 7b03 	vmul.f64	d7, d7, d3
 802279c:	ee26 6b03 	vmul.f64	d6, d6, d3
 80227a0:	e7e0      	b.n	8022764 <_dtoa_r+0x4f4>
 80227a2:	f8dd 8000 	ldr.w	r8, [sp]
 80227a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80227aa:	4621      	mov	r1, r4
 80227ac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80227b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80227b4:	ee14 2a90 	vmov	r2, s9
 80227b8:	3230      	adds	r2, #48	; 0x30
 80227ba:	f808 2b01 	strb.w	r2, [r8], #1
 80227be:	45a0      	cmp	r8, r4
 80227c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80227c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80227c8:	d118      	bne.n	80227fc <_dtoa_r+0x58c>
 80227ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80227ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 80227d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80227d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227da:	dc4d      	bgt.n	8022878 <_dtoa_r+0x608>
 80227dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80227e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80227e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227e8:	f57f af33 	bpl.w	8022652 <_dtoa_r+0x3e2>
 80227ec:	4688      	mov	r8, r1
 80227ee:	3901      	subs	r1, #1
 80227f0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80227f4:	2b30      	cmp	r3, #48	; 0x30
 80227f6:	d0f9      	beq.n	80227ec <_dtoa_r+0x57c>
 80227f8:	46bb      	mov	fp, r7
 80227fa:	e02a      	b.n	8022852 <_dtoa_r+0x5e2>
 80227fc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8022800:	e7d6      	b.n	80227b0 <_dtoa_r+0x540>
 8022802:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022806:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802280a:	f8dd 8000 	ldr.w	r8, [sp]
 802280e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8022812:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8022816:	ee15 3a10 	vmov	r3, s10
 802281a:	3330      	adds	r3, #48	; 0x30
 802281c:	f808 3b01 	strb.w	r3, [r8], #1
 8022820:	9b00      	ldr	r3, [sp, #0]
 8022822:	eba8 0303 	sub.w	r3, r8, r3
 8022826:	4599      	cmp	r9, r3
 8022828:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 802282c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8022830:	d133      	bne.n	802289a <_dtoa_r+0x62a>
 8022832:	ee37 7b07 	vadd.f64	d7, d7, d7
 8022836:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802283a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802283e:	dc1a      	bgt.n	8022876 <_dtoa_r+0x606>
 8022840:	eeb4 7b46 	vcmp.f64	d7, d6
 8022844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022848:	d103      	bne.n	8022852 <_dtoa_r+0x5e2>
 802284a:	ee15 3a10 	vmov	r3, s10
 802284e:	07d9      	lsls	r1, r3, #31
 8022850:	d411      	bmi.n	8022876 <_dtoa_r+0x606>
 8022852:	4629      	mov	r1, r5
 8022854:	4630      	mov	r0, r6
 8022856:	f000 fd0b 	bl	8023270 <_Bfree>
 802285a:	2300      	movs	r3, #0
 802285c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802285e:	f888 3000 	strb.w	r3, [r8]
 8022862:	f10b 0301 	add.w	r3, fp, #1
 8022866:	6013      	str	r3, [r2, #0]
 8022868:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802286a:	2b00      	cmp	r3, #0
 802286c:	f43f ad4d 	beq.w	802230a <_dtoa_r+0x9a>
 8022870:	f8c3 8000 	str.w	r8, [r3]
 8022874:	e549      	b.n	802230a <_dtoa_r+0x9a>
 8022876:	465f      	mov	r7, fp
 8022878:	4643      	mov	r3, r8
 802287a:	4698      	mov	r8, r3
 802287c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022880:	2a39      	cmp	r2, #57	; 0x39
 8022882:	d106      	bne.n	8022892 <_dtoa_r+0x622>
 8022884:	9a00      	ldr	r2, [sp, #0]
 8022886:	429a      	cmp	r2, r3
 8022888:	d1f7      	bne.n	802287a <_dtoa_r+0x60a>
 802288a:	9900      	ldr	r1, [sp, #0]
 802288c:	2230      	movs	r2, #48	; 0x30
 802288e:	3701      	adds	r7, #1
 8022890:	700a      	strb	r2, [r1, #0]
 8022892:	781a      	ldrb	r2, [r3, #0]
 8022894:	3201      	adds	r2, #1
 8022896:	701a      	strb	r2, [r3, #0]
 8022898:	e7ae      	b.n	80227f8 <_dtoa_r+0x588>
 802289a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802289e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80228a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228a6:	d1b2      	bne.n	802280e <_dtoa_r+0x59e>
 80228a8:	e7d3      	b.n	8022852 <_dtoa_r+0x5e2>
 80228aa:	bf00      	nop
 80228ac:	08028aa0 	.word	0x08028aa0
 80228b0:	08028a78 	.word	0x08028a78
 80228b4:	9908      	ldr	r1, [sp, #32]
 80228b6:	2900      	cmp	r1, #0
 80228b8:	f000 80d1 	beq.w	8022a5e <_dtoa_r+0x7ee>
 80228bc:	9907      	ldr	r1, [sp, #28]
 80228be:	2901      	cmp	r1, #1
 80228c0:	f300 80b4 	bgt.w	8022a2c <_dtoa_r+0x7bc>
 80228c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80228c6:	2900      	cmp	r1, #0
 80228c8:	f000 80ac 	beq.w	8022a24 <_dtoa_r+0x7b4>
 80228cc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80228d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80228d4:	461c      	mov	r4, r3
 80228d6:	930a      	str	r3, [sp, #40]	; 0x28
 80228d8:	9b05      	ldr	r3, [sp, #20]
 80228da:	4413      	add	r3, r2
 80228dc:	9305      	str	r3, [sp, #20]
 80228de:	9b06      	ldr	r3, [sp, #24]
 80228e0:	2101      	movs	r1, #1
 80228e2:	4413      	add	r3, r2
 80228e4:	4630      	mov	r0, r6
 80228e6:	9306      	str	r3, [sp, #24]
 80228e8:	f000 fd7e 	bl	80233e8 <__i2b>
 80228ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80228ee:	4607      	mov	r7, r0
 80228f0:	f1b8 0f00 	cmp.w	r8, #0
 80228f4:	dd0d      	ble.n	8022912 <_dtoa_r+0x6a2>
 80228f6:	9a06      	ldr	r2, [sp, #24]
 80228f8:	2a00      	cmp	r2, #0
 80228fa:	dd0a      	ble.n	8022912 <_dtoa_r+0x6a2>
 80228fc:	4542      	cmp	r2, r8
 80228fe:	9905      	ldr	r1, [sp, #20]
 8022900:	bfa8      	it	ge
 8022902:	4642      	movge	r2, r8
 8022904:	1a89      	subs	r1, r1, r2
 8022906:	9105      	str	r1, [sp, #20]
 8022908:	9906      	ldr	r1, [sp, #24]
 802290a:	eba8 0802 	sub.w	r8, r8, r2
 802290e:	1a8a      	subs	r2, r1, r2
 8022910:	9206      	str	r2, [sp, #24]
 8022912:	b303      	cbz	r3, 8022956 <_dtoa_r+0x6e6>
 8022914:	9a08      	ldr	r2, [sp, #32]
 8022916:	2a00      	cmp	r2, #0
 8022918:	f000 80a6 	beq.w	8022a68 <_dtoa_r+0x7f8>
 802291c:	2c00      	cmp	r4, #0
 802291e:	dd13      	ble.n	8022948 <_dtoa_r+0x6d8>
 8022920:	4639      	mov	r1, r7
 8022922:	4622      	mov	r2, r4
 8022924:	4630      	mov	r0, r6
 8022926:	930c      	str	r3, [sp, #48]	; 0x30
 8022928:	f000 fe1a 	bl	8023560 <__pow5mult>
 802292c:	462a      	mov	r2, r5
 802292e:	4601      	mov	r1, r0
 8022930:	4607      	mov	r7, r0
 8022932:	4630      	mov	r0, r6
 8022934:	f000 fd6e 	bl	8023414 <__multiply>
 8022938:	4629      	mov	r1, r5
 802293a:	900a      	str	r0, [sp, #40]	; 0x28
 802293c:	4630      	mov	r0, r6
 802293e:	f000 fc97 	bl	8023270 <_Bfree>
 8022942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022944:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022946:	4615      	mov	r5, r2
 8022948:	1b1a      	subs	r2, r3, r4
 802294a:	d004      	beq.n	8022956 <_dtoa_r+0x6e6>
 802294c:	4629      	mov	r1, r5
 802294e:	4630      	mov	r0, r6
 8022950:	f000 fe06 	bl	8023560 <__pow5mult>
 8022954:	4605      	mov	r5, r0
 8022956:	2101      	movs	r1, #1
 8022958:	4630      	mov	r0, r6
 802295a:	f000 fd45 	bl	80233e8 <__i2b>
 802295e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022960:	2b00      	cmp	r3, #0
 8022962:	4604      	mov	r4, r0
 8022964:	f340 8082 	ble.w	8022a6c <_dtoa_r+0x7fc>
 8022968:	461a      	mov	r2, r3
 802296a:	4601      	mov	r1, r0
 802296c:	4630      	mov	r0, r6
 802296e:	f000 fdf7 	bl	8023560 <__pow5mult>
 8022972:	9b07      	ldr	r3, [sp, #28]
 8022974:	2b01      	cmp	r3, #1
 8022976:	4604      	mov	r4, r0
 8022978:	dd7b      	ble.n	8022a72 <_dtoa_r+0x802>
 802297a:	2300      	movs	r3, #0
 802297c:	930a      	str	r3, [sp, #40]	; 0x28
 802297e:	6922      	ldr	r2, [r4, #16]
 8022980:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8022984:	6910      	ldr	r0, [r2, #16]
 8022986:	f000 fcdf 	bl	8023348 <__hi0bits>
 802298a:	f1c0 0020 	rsb	r0, r0, #32
 802298e:	9b06      	ldr	r3, [sp, #24]
 8022990:	4418      	add	r0, r3
 8022992:	f010 001f 	ands.w	r0, r0, #31
 8022996:	f000 808d 	beq.w	8022ab4 <_dtoa_r+0x844>
 802299a:	f1c0 0220 	rsb	r2, r0, #32
 802299e:	2a04      	cmp	r2, #4
 80229a0:	f340 8086 	ble.w	8022ab0 <_dtoa_r+0x840>
 80229a4:	f1c0 001c 	rsb	r0, r0, #28
 80229a8:	9b05      	ldr	r3, [sp, #20]
 80229aa:	4403      	add	r3, r0
 80229ac:	9305      	str	r3, [sp, #20]
 80229ae:	9b06      	ldr	r3, [sp, #24]
 80229b0:	4403      	add	r3, r0
 80229b2:	4480      	add	r8, r0
 80229b4:	9306      	str	r3, [sp, #24]
 80229b6:	9b05      	ldr	r3, [sp, #20]
 80229b8:	2b00      	cmp	r3, #0
 80229ba:	dd05      	ble.n	80229c8 <_dtoa_r+0x758>
 80229bc:	4629      	mov	r1, r5
 80229be:	461a      	mov	r2, r3
 80229c0:	4630      	mov	r0, r6
 80229c2:	f000 fe27 	bl	8023614 <__lshift>
 80229c6:	4605      	mov	r5, r0
 80229c8:	9b06      	ldr	r3, [sp, #24]
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	dd05      	ble.n	80229da <_dtoa_r+0x76a>
 80229ce:	4621      	mov	r1, r4
 80229d0:	461a      	mov	r2, r3
 80229d2:	4630      	mov	r0, r6
 80229d4:	f000 fe1e 	bl	8023614 <__lshift>
 80229d8:	4604      	mov	r4, r0
 80229da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80229dc:	2b00      	cmp	r3, #0
 80229de:	d06b      	beq.n	8022ab8 <_dtoa_r+0x848>
 80229e0:	4621      	mov	r1, r4
 80229e2:	4628      	mov	r0, r5
 80229e4:	f000 fe82 	bl	80236ec <__mcmp>
 80229e8:	2800      	cmp	r0, #0
 80229ea:	da65      	bge.n	8022ab8 <_dtoa_r+0x848>
 80229ec:	2300      	movs	r3, #0
 80229ee:	4629      	mov	r1, r5
 80229f0:	220a      	movs	r2, #10
 80229f2:	4630      	mov	r0, r6
 80229f4:	f000 fc5e 	bl	80232b4 <__multadd>
 80229f8:	9b08      	ldr	r3, [sp, #32]
 80229fa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80229fe:	4605      	mov	r5, r0
 8022a00:	2b00      	cmp	r3, #0
 8022a02:	f000 8192 	beq.w	8022d2a <_dtoa_r+0xaba>
 8022a06:	4639      	mov	r1, r7
 8022a08:	2300      	movs	r3, #0
 8022a0a:	220a      	movs	r2, #10
 8022a0c:	4630      	mov	r0, r6
 8022a0e:	f000 fc51 	bl	80232b4 <__multadd>
 8022a12:	f1ba 0f00 	cmp.w	sl, #0
 8022a16:	4607      	mov	r7, r0
 8022a18:	f300 808e 	bgt.w	8022b38 <_dtoa_r+0x8c8>
 8022a1c:	9b07      	ldr	r3, [sp, #28]
 8022a1e:	2b02      	cmp	r3, #2
 8022a20:	dc51      	bgt.n	8022ac6 <_dtoa_r+0x856>
 8022a22:	e089      	b.n	8022b38 <_dtoa_r+0x8c8>
 8022a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022a26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8022a2a:	e751      	b.n	80228d0 <_dtoa_r+0x660>
 8022a2c:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8022a30:	42a3      	cmp	r3, r4
 8022a32:	bfbf      	itttt	lt
 8022a34:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8022a36:	1ae3      	sublt	r3, r4, r3
 8022a38:	18d2      	addlt	r2, r2, r3
 8022a3a:	4613      	movlt	r3, r2
 8022a3c:	bfb7      	itett	lt
 8022a3e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8022a40:	1b1c      	subge	r4, r3, r4
 8022a42:	4623      	movlt	r3, r4
 8022a44:	2400      	movlt	r4, #0
 8022a46:	f1b9 0f00 	cmp.w	r9, #0
 8022a4a:	bfb5      	itete	lt
 8022a4c:	9a05      	ldrlt	r2, [sp, #20]
 8022a4e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8022a52:	eba2 0809 	sublt.w	r8, r2, r9
 8022a56:	464a      	movge	r2, r9
 8022a58:	bfb8      	it	lt
 8022a5a:	2200      	movlt	r2, #0
 8022a5c:	e73b      	b.n	80228d6 <_dtoa_r+0x666>
 8022a5e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8022a62:	9f08      	ldr	r7, [sp, #32]
 8022a64:	461c      	mov	r4, r3
 8022a66:	e743      	b.n	80228f0 <_dtoa_r+0x680>
 8022a68:	461a      	mov	r2, r3
 8022a6a:	e76f      	b.n	802294c <_dtoa_r+0x6dc>
 8022a6c:	9b07      	ldr	r3, [sp, #28]
 8022a6e:	2b01      	cmp	r3, #1
 8022a70:	dc18      	bgt.n	8022aa4 <_dtoa_r+0x834>
 8022a72:	9b02      	ldr	r3, [sp, #8]
 8022a74:	b9b3      	cbnz	r3, 8022aa4 <_dtoa_r+0x834>
 8022a76:	9b03      	ldr	r3, [sp, #12]
 8022a78:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8022a7c:	b9a2      	cbnz	r2, 8022aa8 <_dtoa_r+0x838>
 8022a7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8022a82:	0d12      	lsrs	r2, r2, #20
 8022a84:	0512      	lsls	r2, r2, #20
 8022a86:	b18a      	cbz	r2, 8022aac <_dtoa_r+0x83c>
 8022a88:	9b05      	ldr	r3, [sp, #20]
 8022a8a:	3301      	adds	r3, #1
 8022a8c:	9305      	str	r3, [sp, #20]
 8022a8e:	9b06      	ldr	r3, [sp, #24]
 8022a90:	3301      	adds	r3, #1
 8022a92:	9306      	str	r3, [sp, #24]
 8022a94:	2301      	movs	r3, #1
 8022a96:	930a      	str	r3, [sp, #40]	; 0x28
 8022a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a9a:	2b00      	cmp	r3, #0
 8022a9c:	f47f af6f 	bne.w	802297e <_dtoa_r+0x70e>
 8022aa0:	2001      	movs	r0, #1
 8022aa2:	e774      	b.n	802298e <_dtoa_r+0x71e>
 8022aa4:	2300      	movs	r3, #0
 8022aa6:	e7f6      	b.n	8022a96 <_dtoa_r+0x826>
 8022aa8:	9b02      	ldr	r3, [sp, #8]
 8022aaa:	e7f4      	b.n	8022a96 <_dtoa_r+0x826>
 8022aac:	920a      	str	r2, [sp, #40]	; 0x28
 8022aae:	e7f3      	b.n	8022a98 <_dtoa_r+0x828>
 8022ab0:	d081      	beq.n	80229b6 <_dtoa_r+0x746>
 8022ab2:	4610      	mov	r0, r2
 8022ab4:	301c      	adds	r0, #28
 8022ab6:	e777      	b.n	80229a8 <_dtoa_r+0x738>
 8022ab8:	f1b9 0f00 	cmp.w	r9, #0
 8022abc:	dc37      	bgt.n	8022b2e <_dtoa_r+0x8be>
 8022abe:	9b07      	ldr	r3, [sp, #28]
 8022ac0:	2b02      	cmp	r3, #2
 8022ac2:	dd34      	ble.n	8022b2e <_dtoa_r+0x8be>
 8022ac4:	46ca      	mov	sl, r9
 8022ac6:	f1ba 0f00 	cmp.w	sl, #0
 8022aca:	d10d      	bne.n	8022ae8 <_dtoa_r+0x878>
 8022acc:	4621      	mov	r1, r4
 8022ace:	4653      	mov	r3, sl
 8022ad0:	2205      	movs	r2, #5
 8022ad2:	4630      	mov	r0, r6
 8022ad4:	f000 fbee 	bl	80232b4 <__multadd>
 8022ad8:	4601      	mov	r1, r0
 8022ada:	4604      	mov	r4, r0
 8022adc:	4628      	mov	r0, r5
 8022ade:	f000 fe05 	bl	80236ec <__mcmp>
 8022ae2:	2800      	cmp	r0, #0
 8022ae4:	f73f adde 	bgt.w	80226a4 <_dtoa_r+0x434>
 8022ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022aea:	f8dd 8000 	ldr.w	r8, [sp]
 8022aee:	ea6f 0b03 	mvn.w	fp, r3
 8022af2:	f04f 0900 	mov.w	r9, #0
 8022af6:	4621      	mov	r1, r4
 8022af8:	4630      	mov	r0, r6
 8022afa:	f000 fbb9 	bl	8023270 <_Bfree>
 8022afe:	2f00      	cmp	r7, #0
 8022b00:	f43f aea7 	beq.w	8022852 <_dtoa_r+0x5e2>
 8022b04:	f1b9 0f00 	cmp.w	r9, #0
 8022b08:	d005      	beq.n	8022b16 <_dtoa_r+0x8a6>
 8022b0a:	45b9      	cmp	r9, r7
 8022b0c:	d003      	beq.n	8022b16 <_dtoa_r+0x8a6>
 8022b0e:	4649      	mov	r1, r9
 8022b10:	4630      	mov	r0, r6
 8022b12:	f000 fbad 	bl	8023270 <_Bfree>
 8022b16:	4639      	mov	r1, r7
 8022b18:	4630      	mov	r0, r6
 8022b1a:	f000 fba9 	bl	8023270 <_Bfree>
 8022b1e:	e698      	b.n	8022852 <_dtoa_r+0x5e2>
 8022b20:	2400      	movs	r4, #0
 8022b22:	4627      	mov	r7, r4
 8022b24:	e7e0      	b.n	8022ae8 <_dtoa_r+0x878>
 8022b26:	46bb      	mov	fp, r7
 8022b28:	4604      	mov	r4, r0
 8022b2a:	4607      	mov	r7, r0
 8022b2c:	e5ba      	b.n	80226a4 <_dtoa_r+0x434>
 8022b2e:	9b08      	ldr	r3, [sp, #32]
 8022b30:	46ca      	mov	sl, r9
 8022b32:	2b00      	cmp	r3, #0
 8022b34:	f000 8100 	beq.w	8022d38 <_dtoa_r+0xac8>
 8022b38:	f1b8 0f00 	cmp.w	r8, #0
 8022b3c:	dd05      	ble.n	8022b4a <_dtoa_r+0x8da>
 8022b3e:	4639      	mov	r1, r7
 8022b40:	4642      	mov	r2, r8
 8022b42:	4630      	mov	r0, r6
 8022b44:	f000 fd66 	bl	8023614 <__lshift>
 8022b48:	4607      	mov	r7, r0
 8022b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b4c:	2b00      	cmp	r3, #0
 8022b4e:	d05d      	beq.n	8022c0c <_dtoa_r+0x99c>
 8022b50:	6879      	ldr	r1, [r7, #4]
 8022b52:	4630      	mov	r0, r6
 8022b54:	f000 fb4c 	bl	80231f0 <_Balloc>
 8022b58:	4680      	mov	r8, r0
 8022b5a:	b928      	cbnz	r0, 8022b68 <_dtoa_r+0x8f8>
 8022b5c:	4b82      	ldr	r3, [pc, #520]	; (8022d68 <_dtoa_r+0xaf8>)
 8022b5e:	4602      	mov	r2, r0
 8022b60:	f240 21ea 	movw	r1, #746	; 0x2ea
 8022b64:	f7ff bb9a 	b.w	802229c <_dtoa_r+0x2c>
 8022b68:	693a      	ldr	r2, [r7, #16]
 8022b6a:	3202      	adds	r2, #2
 8022b6c:	0092      	lsls	r2, r2, #2
 8022b6e:	f107 010c 	add.w	r1, r7, #12
 8022b72:	300c      	adds	r0, #12
 8022b74:	f7fe fc60 	bl	8021438 <memcpy>
 8022b78:	2201      	movs	r2, #1
 8022b7a:	4641      	mov	r1, r8
 8022b7c:	4630      	mov	r0, r6
 8022b7e:	f000 fd49 	bl	8023614 <__lshift>
 8022b82:	9b00      	ldr	r3, [sp, #0]
 8022b84:	3301      	adds	r3, #1
 8022b86:	9305      	str	r3, [sp, #20]
 8022b88:	9b00      	ldr	r3, [sp, #0]
 8022b8a:	4453      	add	r3, sl
 8022b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8022b8e:	9b02      	ldr	r3, [sp, #8]
 8022b90:	f003 0301 	and.w	r3, r3, #1
 8022b94:	46b9      	mov	r9, r7
 8022b96:	9308      	str	r3, [sp, #32]
 8022b98:	4607      	mov	r7, r0
 8022b9a:	9b05      	ldr	r3, [sp, #20]
 8022b9c:	4621      	mov	r1, r4
 8022b9e:	3b01      	subs	r3, #1
 8022ba0:	4628      	mov	r0, r5
 8022ba2:	9302      	str	r3, [sp, #8]
 8022ba4:	f7ff fad6 	bl	8022154 <quorem>
 8022ba8:	4603      	mov	r3, r0
 8022baa:	3330      	adds	r3, #48	; 0x30
 8022bac:	9006      	str	r0, [sp, #24]
 8022bae:	4649      	mov	r1, r9
 8022bb0:	4628      	mov	r0, r5
 8022bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8022bb4:	f000 fd9a 	bl	80236ec <__mcmp>
 8022bb8:	463a      	mov	r2, r7
 8022bba:	4682      	mov	sl, r0
 8022bbc:	4621      	mov	r1, r4
 8022bbe:	4630      	mov	r0, r6
 8022bc0:	f000 fdb0 	bl	8023724 <__mdiff>
 8022bc4:	68c2      	ldr	r2, [r0, #12]
 8022bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bc8:	4680      	mov	r8, r0
 8022bca:	bb0a      	cbnz	r2, 8022c10 <_dtoa_r+0x9a0>
 8022bcc:	4601      	mov	r1, r0
 8022bce:	4628      	mov	r0, r5
 8022bd0:	f000 fd8c 	bl	80236ec <__mcmp>
 8022bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bd6:	4602      	mov	r2, r0
 8022bd8:	4641      	mov	r1, r8
 8022bda:	4630      	mov	r0, r6
 8022bdc:	920e      	str	r2, [sp, #56]	; 0x38
 8022bde:	930a      	str	r3, [sp, #40]	; 0x28
 8022be0:	f000 fb46 	bl	8023270 <_Bfree>
 8022be4:	9b07      	ldr	r3, [sp, #28]
 8022be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022be8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8022bec:	ea43 0102 	orr.w	r1, r3, r2
 8022bf0:	9b08      	ldr	r3, [sp, #32]
 8022bf2:	430b      	orrs	r3, r1
 8022bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bf6:	d10d      	bne.n	8022c14 <_dtoa_r+0x9a4>
 8022bf8:	2b39      	cmp	r3, #57	; 0x39
 8022bfa:	d029      	beq.n	8022c50 <_dtoa_r+0x9e0>
 8022bfc:	f1ba 0f00 	cmp.w	sl, #0
 8022c00:	dd01      	ble.n	8022c06 <_dtoa_r+0x996>
 8022c02:	9b06      	ldr	r3, [sp, #24]
 8022c04:	3331      	adds	r3, #49	; 0x31
 8022c06:	9a02      	ldr	r2, [sp, #8]
 8022c08:	7013      	strb	r3, [r2, #0]
 8022c0a:	e774      	b.n	8022af6 <_dtoa_r+0x886>
 8022c0c:	4638      	mov	r0, r7
 8022c0e:	e7b8      	b.n	8022b82 <_dtoa_r+0x912>
 8022c10:	2201      	movs	r2, #1
 8022c12:	e7e1      	b.n	8022bd8 <_dtoa_r+0x968>
 8022c14:	f1ba 0f00 	cmp.w	sl, #0
 8022c18:	db06      	blt.n	8022c28 <_dtoa_r+0x9b8>
 8022c1a:	9907      	ldr	r1, [sp, #28]
 8022c1c:	ea41 0a0a 	orr.w	sl, r1, sl
 8022c20:	9908      	ldr	r1, [sp, #32]
 8022c22:	ea5a 0101 	orrs.w	r1, sl, r1
 8022c26:	d120      	bne.n	8022c6a <_dtoa_r+0x9fa>
 8022c28:	2a00      	cmp	r2, #0
 8022c2a:	ddec      	ble.n	8022c06 <_dtoa_r+0x996>
 8022c2c:	4629      	mov	r1, r5
 8022c2e:	2201      	movs	r2, #1
 8022c30:	4630      	mov	r0, r6
 8022c32:	9305      	str	r3, [sp, #20]
 8022c34:	f000 fcee 	bl	8023614 <__lshift>
 8022c38:	4621      	mov	r1, r4
 8022c3a:	4605      	mov	r5, r0
 8022c3c:	f000 fd56 	bl	80236ec <__mcmp>
 8022c40:	2800      	cmp	r0, #0
 8022c42:	9b05      	ldr	r3, [sp, #20]
 8022c44:	dc02      	bgt.n	8022c4c <_dtoa_r+0x9dc>
 8022c46:	d1de      	bne.n	8022c06 <_dtoa_r+0x996>
 8022c48:	07da      	lsls	r2, r3, #31
 8022c4a:	d5dc      	bpl.n	8022c06 <_dtoa_r+0x996>
 8022c4c:	2b39      	cmp	r3, #57	; 0x39
 8022c4e:	d1d8      	bne.n	8022c02 <_dtoa_r+0x992>
 8022c50:	9a02      	ldr	r2, [sp, #8]
 8022c52:	2339      	movs	r3, #57	; 0x39
 8022c54:	7013      	strb	r3, [r2, #0]
 8022c56:	4643      	mov	r3, r8
 8022c58:	4698      	mov	r8, r3
 8022c5a:	3b01      	subs	r3, #1
 8022c5c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8022c60:	2a39      	cmp	r2, #57	; 0x39
 8022c62:	d051      	beq.n	8022d08 <_dtoa_r+0xa98>
 8022c64:	3201      	adds	r2, #1
 8022c66:	701a      	strb	r2, [r3, #0]
 8022c68:	e745      	b.n	8022af6 <_dtoa_r+0x886>
 8022c6a:	2a00      	cmp	r2, #0
 8022c6c:	dd03      	ble.n	8022c76 <_dtoa_r+0xa06>
 8022c6e:	2b39      	cmp	r3, #57	; 0x39
 8022c70:	d0ee      	beq.n	8022c50 <_dtoa_r+0x9e0>
 8022c72:	3301      	adds	r3, #1
 8022c74:	e7c7      	b.n	8022c06 <_dtoa_r+0x996>
 8022c76:	9a05      	ldr	r2, [sp, #20]
 8022c78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022c7a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8022c7e:	428a      	cmp	r2, r1
 8022c80:	d02b      	beq.n	8022cda <_dtoa_r+0xa6a>
 8022c82:	4629      	mov	r1, r5
 8022c84:	2300      	movs	r3, #0
 8022c86:	220a      	movs	r2, #10
 8022c88:	4630      	mov	r0, r6
 8022c8a:	f000 fb13 	bl	80232b4 <__multadd>
 8022c8e:	45b9      	cmp	r9, r7
 8022c90:	4605      	mov	r5, r0
 8022c92:	f04f 0300 	mov.w	r3, #0
 8022c96:	f04f 020a 	mov.w	r2, #10
 8022c9a:	4649      	mov	r1, r9
 8022c9c:	4630      	mov	r0, r6
 8022c9e:	d107      	bne.n	8022cb0 <_dtoa_r+0xa40>
 8022ca0:	f000 fb08 	bl	80232b4 <__multadd>
 8022ca4:	4681      	mov	r9, r0
 8022ca6:	4607      	mov	r7, r0
 8022ca8:	9b05      	ldr	r3, [sp, #20]
 8022caa:	3301      	adds	r3, #1
 8022cac:	9305      	str	r3, [sp, #20]
 8022cae:	e774      	b.n	8022b9a <_dtoa_r+0x92a>
 8022cb0:	f000 fb00 	bl	80232b4 <__multadd>
 8022cb4:	4639      	mov	r1, r7
 8022cb6:	4681      	mov	r9, r0
 8022cb8:	2300      	movs	r3, #0
 8022cba:	220a      	movs	r2, #10
 8022cbc:	4630      	mov	r0, r6
 8022cbe:	f000 faf9 	bl	80232b4 <__multadd>
 8022cc2:	4607      	mov	r7, r0
 8022cc4:	e7f0      	b.n	8022ca8 <_dtoa_r+0xa38>
 8022cc6:	f1ba 0f00 	cmp.w	sl, #0
 8022cca:	9a00      	ldr	r2, [sp, #0]
 8022ccc:	bfcc      	ite	gt
 8022cce:	46d0      	movgt	r8, sl
 8022cd0:	f04f 0801 	movle.w	r8, #1
 8022cd4:	4490      	add	r8, r2
 8022cd6:	f04f 0900 	mov.w	r9, #0
 8022cda:	4629      	mov	r1, r5
 8022cdc:	2201      	movs	r2, #1
 8022cde:	4630      	mov	r0, r6
 8022ce0:	9302      	str	r3, [sp, #8]
 8022ce2:	f000 fc97 	bl	8023614 <__lshift>
 8022ce6:	4621      	mov	r1, r4
 8022ce8:	4605      	mov	r5, r0
 8022cea:	f000 fcff 	bl	80236ec <__mcmp>
 8022cee:	2800      	cmp	r0, #0
 8022cf0:	dcb1      	bgt.n	8022c56 <_dtoa_r+0x9e6>
 8022cf2:	d102      	bne.n	8022cfa <_dtoa_r+0xa8a>
 8022cf4:	9b02      	ldr	r3, [sp, #8]
 8022cf6:	07db      	lsls	r3, r3, #31
 8022cf8:	d4ad      	bmi.n	8022c56 <_dtoa_r+0x9e6>
 8022cfa:	4643      	mov	r3, r8
 8022cfc:	4698      	mov	r8, r3
 8022cfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022d02:	2a30      	cmp	r2, #48	; 0x30
 8022d04:	d0fa      	beq.n	8022cfc <_dtoa_r+0xa8c>
 8022d06:	e6f6      	b.n	8022af6 <_dtoa_r+0x886>
 8022d08:	9a00      	ldr	r2, [sp, #0]
 8022d0a:	429a      	cmp	r2, r3
 8022d0c:	d1a4      	bne.n	8022c58 <_dtoa_r+0x9e8>
 8022d0e:	f10b 0b01 	add.w	fp, fp, #1
 8022d12:	2331      	movs	r3, #49	; 0x31
 8022d14:	e778      	b.n	8022c08 <_dtoa_r+0x998>
 8022d16:	4b15      	ldr	r3, [pc, #84]	; (8022d6c <_dtoa_r+0xafc>)
 8022d18:	f7ff bb12 	b.w	8022340 <_dtoa_r+0xd0>
 8022d1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022d1e:	2b00      	cmp	r3, #0
 8022d20:	f47f aaee 	bne.w	8022300 <_dtoa_r+0x90>
 8022d24:	4b12      	ldr	r3, [pc, #72]	; (8022d70 <_dtoa_r+0xb00>)
 8022d26:	f7ff bb0b 	b.w	8022340 <_dtoa_r+0xd0>
 8022d2a:	f1ba 0f00 	cmp.w	sl, #0
 8022d2e:	dc03      	bgt.n	8022d38 <_dtoa_r+0xac8>
 8022d30:	9b07      	ldr	r3, [sp, #28]
 8022d32:	2b02      	cmp	r3, #2
 8022d34:	f73f aec7 	bgt.w	8022ac6 <_dtoa_r+0x856>
 8022d38:	f8dd 8000 	ldr.w	r8, [sp]
 8022d3c:	4621      	mov	r1, r4
 8022d3e:	4628      	mov	r0, r5
 8022d40:	f7ff fa08 	bl	8022154 <quorem>
 8022d44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8022d48:	f808 3b01 	strb.w	r3, [r8], #1
 8022d4c:	9a00      	ldr	r2, [sp, #0]
 8022d4e:	eba8 0202 	sub.w	r2, r8, r2
 8022d52:	4592      	cmp	sl, r2
 8022d54:	ddb7      	ble.n	8022cc6 <_dtoa_r+0xa56>
 8022d56:	4629      	mov	r1, r5
 8022d58:	2300      	movs	r3, #0
 8022d5a:	220a      	movs	r2, #10
 8022d5c:	4630      	mov	r0, r6
 8022d5e:	f000 faa9 	bl	80232b4 <__multadd>
 8022d62:	4605      	mov	r5, r0
 8022d64:	e7ea      	b.n	8022d3c <_dtoa_r+0xacc>
 8022d66:	bf00      	nop
 8022d68:	080289a6 	.word	0x080289a6
 8022d6c:	08028864 	.word	0x08028864
 8022d70:	0802893a 	.word	0x0802893a

08022d74 <__sflush_r>:
 8022d74:	898a      	ldrh	r2, [r1, #12]
 8022d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022d7a:	4605      	mov	r5, r0
 8022d7c:	0710      	lsls	r0, r2, #28
 8022d7e:	460c      	mov	r4, r1
 8022d80:	d458      	bmi.n	8022e34 <__sflush_r+0xc0>
 8022d82:	684b      	ldr	r3, [r1, #4]
 8022d84:	2b00      	cmp	r3, #0
 8022d86:	dc05      	bgt.n	8022d94 <__sflush_r+0x20>
 8022d88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	dc02      	bgt.n	8022d94 <__sflush_r+0x20>
 8022d8e:	2000      	movs	r0, #0
 8022d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022d96:	2e00      	cmp	r6, #0
 8022d98:	d0f9      	beq.n	8022d8e <__sflush_r+0x1a>
 8022d9a:	2300      	movs	r3, #0
 8022d9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022da0:	682f      	ldr	r7, [r5, #0]
 8022da2:	602b      	str	r3, [r5, #0]
 8022da4:	d032      	beq.n	8022e0c <__sflush_r+0x98>
 8022da6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022da8:	89a3      	ldrh	r3, [r4, #12]
 8022daa:	075a      	lsls	r2, r3, #29
 8022dac:	d505      	bpl.n	8022dba <__sflush_r+0x46>
 8022dae:	6863      	ldr	r3, [r4, #4]
 8022db0:	1ac0      	subs	r0, r0, r3
 8022db2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022db4:	b10b      	cbz	r3, 8022dba <__sflush_r+0x46>
 8022db6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022db8:	1ac0      	subs	r0, r0, r3
 8022dba:	2300      	movs	r3, #0
 8022dbc:	4602      	mov	r2, r0
 8022dbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022dc0:	6a21      	ldr	r1, [r4, #32]
 8022dc2:	4628      	mov	r0, r5
 8022dc4:	47b0      	blx	r6
 8022dc6:	1c43      	adds	r3, r0, #1
 8022dc8:	89a3      	ldrh	r3, [r4, #12]
 8022dca:	d106      	bne.n	8022dda <__sflush_r+0x66>
 8022dcc:	6829      	ldr	r1, [r5, #0]
 8022dce:	291d      	cmp	r1, #29
 8022dd0:	d82c      	bhi.n	8022e2c <__sflush_r+0xb8>
 8022dd2:	4a2a      	ldr	r2, [pc, #168]	; (8022e7c <__sflush_r+0x108>)
 8022dd4:	40ca      	lsrs	r2, r1
 8022dd6:	07d6      	lsls	r6, r2, #31
 8022dd8:	d528      	bpl.n	8022e2c <__sflush_r+0xb8>
 8022dda:	2200      	movs	r2, #0
 8022ddc:	6062      	str	r2, [r4, #4]
 8022dde:	04d9      	lsls	r1, r3, #19
 8022de0:	6922      	ldr	r2, [r4, #16]
 8022de2:	6022      	str	r2, [r4, #0]
 8022de4:	d504      	bpl.n	8022df0 <__sflush_r+0x7c>
 8022de6:	1c42      	adds	r2, r0, #1
 8022de8:	d101      	bne.n	8022dee <__sflush_r+0x7a>
 8022dea:	682b      	ldr	r3, [r5, #0]
 8022dec:	b903      	cbnz	r3, 8022df0 <__sflush_r+0x7c>
 8022dee:	6560      	str	r0, [r4, #84]	; 0x54
 8022df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022df2:	602f      	str	r7, [r5, #0]
 8022df4:	2900      	cmp	r1, #0
 8022df6:	d0ca      	beq.n	8022d8e <__sflush_r+0x1a>
 8022df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022dfc:	4299      	cmp	r1, r3
 8022dfe:	d002      	beq.n	8022e06 <__sflush_r+0x92>
 8022e00:	4628      	mov	r0, r5
 8022e02:	f000 fd83 	bl	802390c <_free_r>
 8022e06:	2000      	movs	r0, #0
 8022e08:	6360      	str	r0, [r4, #52]	; 0x34
 8022e0a:	e7c1      	b.n	8022d90 <__sflush_r+0x1c>
 8022e0c:	6a21      	ldr	r1, [r4, #32]
 8022e0e:	2301      	movs	r3, #1
 8022e10:	4628      	mov	r0, r5
 8022e12:	47b0      	blx	r6
 8022e14:	1c41      	adds	r1, r0, #1
 8022e16:	d1c7      	bne.n	8022da8 <__sflush_r+0x34>
 8022e18:	682b      	ldr	r3, [r5, #0]
 8022e1a:	2b00      	cmp	r3, #0
 8022e1c:	d0c4      	beq.n	8022da8 <__sflush_r+0x34>
 8022e1e:	2b1d      	cmp	r3, #29
 8022e20:	d001      	beq.n	8022e26 <__sflush_r+0xb2>
 8022e22:	2b16      	cmp	r3, #22
 8022e24:	d101      	bne.n	8022e2a <__sflush_r+0xb6>
 8022e26:	602f      	str	r7, [r5, #0]
 8022e28:	e7b1      	b.n	8022d8e <__sflush_r+0x1a>
 8022e2a:	89a3      	ldrh	r3, [r4, #12]
 8022e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022e30:	81a3      	strh	r3, [r4, #12]
 8022e32:	e7ad      	b.n	8022d90 <__sflush_r+0x1c>
 8022e34:	690f      	ldr	r7, [r1, #16]
 8022e36:	2f00      	cmp	r7, #0
 8022e38:	d0a9      	beq.n	8022d8e <__sflush_r+0x1a>
 8022e3a:	0793      	lsls	r3, r2, #30
 8022e3c:	680e      	ldr	r6, [r1, #0]
 8022e3e:	bf08      	it	eq
 8022e40:	694b      	ldreq	r3, [r1, #20]
 8022e42:	600f      	str	r7, [r1, #0]
 8022e44:	bf18      	it	ne
 8022e46:	2300      	movne	r3, #0
 8022e48:	eba6 0807 	sub.w	r8, r6, r7
 8022e4c:	608b      	str	r3, [r1, #8]
 8022e4e:	f1b8 0f00 	cmp.w	r8, #0
 8022e52:	dd9c      	ble.n	8022d8e <__sflush_r+0x1a>
 8022e54:	6a21      	ldr	r1, [r4, #32]
 8022e56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022e58:	4643      	mov	r3, r8
 8022e5a:	463a      	mov	r2, r7
 8022e5c:	4628      	mov	r0, r5
 8022e5e:	47b0      	blx	r6
 8022e60:	2800      	cmp	r0, #0
 8022e62:	dc06      	bgt.n	8022e72 <__sflush_r+0xfe>
 8022e64:	89a3      	ldrh	r3, [r4, #12]
 8022e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022e6a:	81a3      	strh	r3, [r4, #12]
 8022e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022e70:	e78e      	b.n	8022d90 <__sflush_r+0x1c>
 8022e72:	4407      	add	r7, r0
 8022e74:	eba8 0800 	sub.w	r8, r8, r0
 8022e78:	e7e9      	b.n	8022e4e <__sflush_r+0xda>
 8022e7a:	bf00      	nop
 8022e7c:	20400001 	.word	0x20400001

08022e80 <_fflush_r>:
 8022e80:	b538      	push	{r3, r4, r5, lr}
 8022e82:	690b      	ldr	r3, [r1, #16]
 8022e84:	4605      	mov	r5, r0
 8022e86:	460c      	mov	r4, r1
 8022e88:	b913      	cbnz	r3, 8022e90 <_fflush_r+0x10>
 8022e8a:	2500      	movs	r5, #0
 8022e8c:	4628      	mov	r0, r5
 8022e8e:	bd38      	pop	{r3, r4, r5, pc}
 8022e90:	b118      	cbz	r0, 8022e9a <_fflush_r+0x1a>
 8022e92:	6983      	ldr	r3, [r0, #24]
 8022e94:	b90b      	cbnz	r3, 8022e9a <_fflush_r+0x1a>
 8022e96:	f000 f887 	bl	8022fa8 <__sinit>
 8022e9a:	4b14      	ldr	r3, [pc, #80]	; (8022eec <_fflush_r+0x6c>)
 8022e9c:	429c      	cmp	r4, r3
 8022e9e:	d11b      	bne.n	8022ed8 <_fflush_r+0x58>
 8022ea0:	686c      	ldr	r4, [r5, #4]
 8022ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022ea6:	2b00      	cmp	r3, #0
 8022ea8:	d0ef      	beq.n	8022e8a <_fflush_r+0xa>
 8022eaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022eac:	07d0      	lsls	r0, r2, #31
 8022eae:	d404      	bmi.n	8022eba <_fflush_r+0x3a>
 8022eb0:	0599      	lsls	r1, r3, #22
 8022eb2:	d402      	bmi.n	8022eba <_fflush_r+0x3a>
 8022eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022eb6:	f000 f92c 	bl	8023112 <__retarget_lock_acquire_recursive>
 8022eba:	4628      	mov	r0, r5
 8022ebc:	4621      	mov	r1, r4
 8022ebe:	f7ff ff59 	bl	8022d74 <__sflush_r>
 8022ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022ec4:	07da      	lsls	r2, r3, #31
 8022ec6:	4605      	mov	r5, r0
 8022ec8:	d4e0      	bmi.n	8022e8c <_fflush_r+0xc>
 8022eca:	89a3      	ldrh	r3, [r4, #12]
 8022ecc:	059b      	lsls	r3, r3, #22
 8022ece:	d4dd      	bmi.n	8022e8c <_fflush_r+0xc>
 8022ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022ed2:	f000 f920 	bl	8023116 <__retarget_lock_release_recursive>
 8022ed6:	e7d9      	b.n	8022e8c <_fflush_r+0xc>
 8022ed8:	4b05      	ldr	r3, [pc, #20]	; (8022ef0 <_fflush_r+0x70>)
 8022eda:	429c      	cmp	r4, r3
 8022edc:	d101      	bne.n	8022ee2 <_fflush_r+0x62>
 8022ede:	68ac      	ldr	r4, [r5, #8]
 8022ee0:	e7df      	b.n	8022ea2 <_fflush_r+0x22>
 8022ee2:	4b04      	ldr	r3, [pc, #16]	; (8022ef4 <_fflush_r+0x74>)
 8022ee4:	429c      	cmp	r4, r3
 8022ee6:	bf08      	it	eq
 8022ee8:	68ec      	ldreq	r4, [r5, #12]
 8022eea:	e7da      	b.n	8022ea2 <_fflush_r+0x22>
 8022eec:	080289d8 	.word	0x080289d8
 8022ef0:	080289f8 	.word	0x080289f8
 8022ef4:	080289b8 	.word	0x080289b8

08022ef8 <std>:
 8022ef8:	2300      	movs	r3, #0
 8022efa:	b510      	push	{r4, lr}
 8022efc:	4604      	mov	r4, r0
 8022efe:	e9c0 3300 	strd	r3, r3, [r0]
 8022f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022f06:	6083      	str	r3, [r0, #8]
 8022f08:	8181      	strh	r1, [r0, #12]
 8022f0a:	6643      	str	r3, [r0, #100]	; 0x64
 8022f0c:	81c2      	strh	r2, [r0, #14]
 8022f0e:	6183      	str	r3, [r0, #24]
 8022f10:	4619      	mov	r1, r3
 8022f12:	2208      	movs	r2, #8
 8022f14:	305c      	adds	r0, #92	; 0x5c
 8022f16:	f7fe fab7 	bl	8021488 <memset>
 8022f1a:	4b05      	ldr	r3, [pc, #20]	; (8022f30 <std+0x38>)
 8022f1c:	6263      	str	r3, [r4, #36]	; 0x24
 8022f1e:	4b05      	ldr	r3, [pc, #20]	; (8022f34 <std+0x3c>)
 8022f20:	62a3      	str	r3, [r4, #40]	; 0x28
 8022f22:	4b05      	ldr	r3, [pc, #20]	; (8022f38 <std+0x40>)
 8022f24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022f26:	4b05      	ldr	r3, [pc, #20]	; (8022f3c <std+0x44>)
 8022f28:	6224      	str	r4, [r4, #32]
 8022f2a:	6323      	str	r3, [r4, #48]	; 0x30
 8022f2c:	bd10      	pop	{r4, pc}
 8022f2e:	bf00      	nop
 8022f30:	08023fed 	.word	0x08023fed
 8022f34:	0802400f 	.word	0x0802400f
 8022f38:	08024047 	.word	0x08024047
 8022f3c:	0802406b 	.word	0x0802406b

08022f40 <_cleanup_r>:
 8022f40:	4901      	ldr	r1, [pc, #4]	; (8022f48 <_cleanup_r+0x8>)
 8022f42:	f000 b8c1 	b.w	80230c8 <_fwalk_reent>
 8022f46:	bf00      	nop
 8022f48:	08022e81 	.word	0x08022e81

08022f4c <__sfmoreglue>:
 8022f4c:	b570      	push	{r4, r5, r6, lr}
 8022f4e:	1e4a      	subs	r2, r1, #1
 8022f50:	2568      	movs	r5, #104	; 0x68
 8022f52:	4355      	muls	r5, r2
 8022f54:	460e      	mov	r6, r1
 8022f56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022f5a:	f000 fd27 	bl	80239ac <_malloc_r>
 8022f5e:	4604      	mov	r4, r0
 8022f60:	b140      	cbz	r0, 8022f74 <__sfmoreglue+0x28>
 8022f62:	2100      	movs	r1, #0
 8022f64:	e9c0 1600 	strd	r1, r6, [r0]
 8022f68:	300c      	adds	r0, #12
 8022f6a:	60a0      	str	r0, [r4, #8]
 8022f6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022f70:	f7fe fa8a 	bl	8021488 <memset>
 8022f74:	4620      	mov	r0, r4
 8022f76:	bd70      	pop	{r4, r5, r6, pc}

08022f78 <__sfp_lock_acquire>:
 8022f78:	4801      	ldr	r0, [pc, #4]	; (8022f80 <__sfp_lock_acquire+0x8>)
 8022f7a:	f000 b8ca 	b.w	8023112 <__retarget_lock_acquire_recursive>
 8022f7e:	bf00      	nop
 8022f80:	2400d274 	.word	0x2400d274

08022f84 <__sfp_lock_release>:
 8022f84:	4801      	ldr	r0, [pc, #4]	; (8022f8c <__sfp_lock_release+0x8>)
 8022f86:	f000 b8c6 	b.w	8023116 <__retarget_lock_release_recursive>
 8022f8a:	bf00      	nop
 8022f8c:	2400d274 	.word	0x2400d274

08022f90 <__sinit_lock_acquire>:
 8022f90:	4801      	ldr	r0, [pc, #4]	; (8022f98 <__sinit_lock_acquire+0x8>)
 8022f92:	f000 b8be 	b.w	8023112 <__retarget_lock_acquire_recursive>
 8022f96:	bf00      	nop
 8022f98:	2400d26f 	.word	0x2400d26f

08022f9c <__sinit_lock_release>:
 8022f9c:	4801      	ldr	r0, [pc, #4]	; (8022fa4 <__sinit_lock_release+0x8>)
 8022f9e:	f000 b8ba 	b.w	8023116 <__retarget_lock_release_recursive>
 8022fa2:	bf00      	nop
 8022fa4:	2400d26f 	.word	0x2400d26f

08022fa8 <__sinit>:
 8022fa8:	b510      	push	{r4, lr}
 8022faa:	4604      	mov	r4, r0
 8022fac:	f7ff fff0 	bl	8022f90 <__sinit_lock_acquire>
 8022fb0:	69a3      	ldr	r3, [r4, #24]
 8022fb2:	b11b      	cbz	r3, 8022fbc <__sinit+0x14>
 8022fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022fb8:	f7ff bff0 	b.w	8022f9c <__sinit_lock_release>
 8022fbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022fc0:	6523      	str	r3, [r4, #80]	; 0x50
 8022fc2:	4b13      	ldr	r3, [pc, #76]	; (8023010 <__sinit+0x68>)
 8022fc4:	4a13      	ldr	r2, [pc, #76]	; (8023014 <__sinit+0x6c>)
 8022fc6:	681b      	ldr	r3, [r3, #0]
 8022fc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8022fca:	42a3      	cmp	r3, r4
 8022fcc:	bf04      	itt	eq
 8022fce:	2301      	moveq	r3, #1
 8022fd0:	61a3      	streq	r3, [r4, #24]
 8022fd2:	4620      	mov	r0, r4
 8022fd4:	f000 f820 	bl	8023018 <__sfp>
 8022fd8:	6060      	str	r0, [r4, #4]
 8022fda:	4620      	mov	r0, r4
 8022fdc:	f000 f81c 	bl	8023018 <__sfp>
 8022fe0:	60a0      	str	r0, [r4, #8]
 8022fe2:	4620      	mov	r0, r4
 8022fe4:	f000 f818 	bl	8023018 <__sfp>
 8022fe8:	2200      	movs	r2, #0
 8022fea:	60e0      	str	r0, [r4, #12]
 8022fec:	2104      	movs	r1, #4
 8022fee:	6860      	ldr	r0, [r4, #4]
 8022ff0:	f7ff ff82 	bl	8022ef8 <std>
 8022ff4:	68a0      	ldr	r0, [r4, #8]
 8022ff6:	2201      	movs	r2, #1
 8022ff8:	2109      	movs	r1, #9
 8022ffa:	f7ff ff7d 	bl	8022ef8 <std>
 8022ffe:	68e0      	ldr	r0, [r4, #12]
 8023000:	2202      	movs	r2, #2
 8023002:	2112      	movs	r1, #18
 8023004:	f7ff ff78 	bl	8022ef8 <std>
 8023008:	2301      	movs	r3, #1
 802300a:	61a3      	str	r3, [r4, #24]
 802300c:	e7d2      	b.n	8022fb4 <__sinit+0xc>
 802300e:	bf00      	nop
 8023010:	08028850 	.word	0x08028850
 8023014:	08022f41 	.word	0x08022f41

08023018 <__sfp>:
 8023018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802301a:	4607      	mov	r7, r0
 802301c:	f7ff ffac 	bl	8022f78 <__sfp_lock_acquire>
 8023020:	4b1e      	ldr	r3, [pc, #120]	; (802309c <__sfp+0x84>)
 8023022:	681e      	ldr	r6, [r3, #0]
 8023024:	69b3      	ldr	r3, [r6, #24]
 8023026:	b913      	cbnz	r3, 802302e <__sfp+0x16>
 8023028:	4630      	mov	r0, r6
 802302a:	f7ff ffbd 	bl	8022fa8 <__sinit>
 802302e:	3648      	adds	r6, #72	; 0x48
 8023030:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023034:	3b01      	subs	r3, #1
 8023036:	d503      	bpl.n	8023040 <__sfp+0x28>
 8023038:	6833      	ldr	r3, [r6, #0]
 802303a:	b30b      	cbz	r3, 8023080 <__sfp+0x68>
 802303c:	6836      	ldr	r6, [r6, #0]
 802303e:	e7f7      	b.n	8023030 <__sfp+0x18>
 8023040:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023044:	b9d5      	cbnz	r5, 802307c <__sfp+0x64>
 8023046:	4b16      	ldr	r3, [pc, #88]	; (80230a0 <__sfp+0x88>)
 8023048:	60e3      	str	r3, [r4, #12]
 802304a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802304e:	6665      	str	r5, [r4, #100]	; 0x64
 8023050:	f000 f85e 	bl	8023110 <__retarget_lock_init_recursive>
 8023054:	f7ff ff96 	bl	8022f84 <__sfp_lock_release>
 8023058:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802305c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023060:	6025      	str	r5, [r4, #0]
 8023062:	61a5      	str	r5, [r4, #24]
 8023064:	2208      	movs	r2, #8
 8023066:	4629      	mov	r1, r5
 8023068:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802306c:	f7fe fa0c 	bl	8021488 <memset>
 8023070:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023074:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023078:	4620      	mov	r0, r4
 802307a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802307c:	3468      	adds	r4, #104	; 0x68
 802307e:	e7d9      	b.n	8023034 <__sfp+0x1c>
 8023080:	2104      	movs	r1, #4
 8023082:	4638      	mov	r0, r7
 8023084:	f7ff ff62 	bl	8022f4c <__sfmoreglue>
 8023088:	4604      	mov	r4, r0
 802308a:	6030      	str	r0, [r6, #0]
 802308c:	2800      	cmp	r0, #0
 802308e:	d1d5      	bne.n	802303c <__sfp+0x24>
 8023090:	f7ff ff78 	bl	8022f84 <__sfp_lock_release>
 8023094:	230c      	movs	r3, #12
 8023096:	603b      	str	r3, [r7, #0]
 8023098:	e7ee      	b.n	8023078 <__sfp+0x60>
 802309a:	bf00      	nop
 802309c:	08028850 	.word	0x08028850
 80230a0:	ffff0001 	.word	0xffff0001

080230a4 <fiprintf>:
 80230a4:	b40e      	push	{r1, r2, r3}
 80230a6:	b503      	push	{r0, r1, lr}
 80230a8:	4601      	mov	r1, r0
 80230aa:	ab03      	add	r3, sp, #12
 80230ac:	4805      	ldr	r0, [pc, #20]	; (80230c4 <fiprintf+0x20>)
 80230ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80230b2:	6800      	ldr	r0, [r0, #0]
 80230b4:	9301      	str	r3, [sp, #4]
 80230b6:	f000 fe59 	bl	8023d6c <_vfiprintf_r>
 80230ba:	b002      	add	sp, #8
 80230bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80230c0:	b003      	add	sp, #12
 80230c2:	4770      	bx	lr
 80230c4:	24000038 	.word	0x24000038

080230c8 <_fwalk_reent>:
 80230c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80230cc:	4606      	mov	r6, r0
 80230ce:	4688      	mov	r8, r1
 80230d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80230d4:	2700      	movs	r7, #0
 80230d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80230da:	f1b9 0901 	subs.w	r9, r9, #1
 80230de:	d505      	bpl.n	80230ec <_fwalk_reent+0x24>
 80230e0:	6824      	ldr	r4, [r4, #0]
 80230e2:	2c00      	cmp	r4, #0
 80230e4:	d1f7      	bne.n	80230d6 <_fwalk_reent+0xe>
 80230e6:	4638      	mov	r0, r7
 80230e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80230ec:	89ab      	ldrh	r3, [r5, #12]
 80230ee:	2b01      	cmp	r3, #1
 80230f0:	d907      	bls.n	8023102 <_fwalk_reent+0x3a>
 80230f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80230f6:	3301      	adds	r3, #1
 80230f8:	d003      	beq.n	8023102 <_fwalk_reent+0x3a>
 80230fa:	4629      	mov	r1, r5
 80230fc:	4630      	mov	r0, r6
 80230fe:	47c0      	blx	r8
 8023100:	4307      	orrs	r7, r0
 8023102:	3568      	adds	r5, #104	; 0x68
 8023104:	e7e9      	b.n	80230da <_fwalk_reent+0x12>
	...

08023108 <_localeconv_r>:
 8023108:	4800      	ldr	r0, [pc, #0]	; (802310c <_localeconv_r+0x4>)
 802310a:	4770      	bx	lr
 802310c:	24000190 	.word	0x24000190

08023110 <__retarget_lock_init_recursive>:
 8023110:	4770      	bx	lr

08023112 <__retarget_lock_acquire_recursive>:
 8023112:	4770      	bx	lr

08023114 <__retarget_lock_release>:
 8023114:	4770      	bx	lr

08023116 <__retarget_lock_release_recursive>:
 8023116:	4770      	bx	lr

08023118 <__swhatbuf_r>:
 8023118:	b570      	push	{r4, r5, r6, lr}
 802311a:	460e      	mov	r6, r1
 802311c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023120:	2900      	cmp	r1, #0
 8023122:	b096      	sub	sp, #88	; 0x58
 8023124:	4614      	mov	r4, r2
 8023126:	461d      	mov	r5, r3
 8023128:	da07      	bge.n	802313a <__swhatbuf_r+0x22>
 802312a:	2300      	movs	r3, #0
 802312c:	602b      	str	r3, [r5, #0]
 802312e:	89b3      	ldrh	r3, [r6, #12]
 8023130:	061a      	lsls	r2, r3, #24
 8023132:	d410      	bmi.n	8023156 <__swhatbuf_r+0x3e>
 8023134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023138:	e00e      	b.n	8023158 <__swhatbuf_r+0x40>
 802313a:	466a      	mov	r2, sp
 802313c:	f000 ffbc 	bl	80240b8 <_fstat_r>
 8023140:	2800      	cmp	r0, #0
 8023142:	dbf2      	blt.n	802312a <__swhatbuf_r+0x12>
 8023144:	9a01      	ldr	r2, [sp, #4]
 8023146:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802314a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802314e:	425a      	negs	r2, r3
 8023150:	415a      	adcs	r2, r3
 8023152:	602a      	str	r2, [r5, #0]
 8023154:	e7ee      	b.n	8023134 <__swhatbuf_r+0x1c>
 8023156:	2340      	movs	r3, #64	; 0x40
 8023158:	2000      	movs	r0, #0
 802315a:	6023      	str	r3, [r4, #0]
 802315c:	b016      	add	sp, #88	; 0x58
 802315e:	bd70      	pop	{r4, r5, r6, pc}

08023160 <__smakebuf_r>:
 8023160:	898b      	ldrh	r3, [r1, #12]
 8023162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023164:	079d      	lsls	r5, r3, #30
 8023166:	4606      	mov	r6, r0
 8023168:	460c      	mov	r4, r1
 802316a:	d507      	bpl.n	802317c <__smakebuf_r+0x1c>
 802316c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023170:	6023      	str	r3, [r4, #0]
 8023172:	6123      	str	r3, [r4, #16]
 8023174:	2301      	movs	r3, #1
 8023176:	6163      	str	r3, [r4, #20]
 8023178:	b002      	add	sp, #8
 802317a:	bd70      	pop	{r4, r5, r6, pc}
 802317c:	ab01      	add	r3, sp, #4
 802317e:	466a      	mov	r2, sp
 8023180:	f7ff ffca 	bl	8023118 <__swhatbuf_r>
 8023184:	9900      	ldr	r1, [sp, #0]
 8023186:	4605      	mov	r5, r0
 8023188:	4630      	mov	r0, r6
 802318a:	f000 fc0f 	bl	80239ac <_malloc_r>
 802318e:	b948      	cbnz	r0, 80231a4 <__smakebuf_r+0x44>
 8023190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023194:	059a      	lsls	r2, r3, #22
 8023196:	d4ef      	bmi.n	8023178 <__smakebuf_r+0x18>
 8023198:	f023 0303 	bic.w	r3, r3, #3
 802319c:	f043 0302 	orr.w	r3, r3, #2
 80231a0:	81a3      	strh	r3, [r4, #12]
 80231a2:	e7e3      	b.n	802316c <__smakebuf_r+0xc>
 80231a4:	4b0d      	ldr	r3, [pc, #52]	; (80231dc <__smakebuf_r+0x7c>)
 80231a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80231a8:	89a3      	ldrh	r3, [r4, #12]
 80231aa:	6020      	str	r0, [r4, #0]
 80231ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80231b0:	81a3      	strh	r3, [r4, #12]
 80231b2:	9b00      	ldr	r3, [sp, #0]
 80231b4:	6163      	str	r3, [r4, #20]
 80231b6:	9b01      	ldr	r3, [sp, #4]
 80231b8:	6120      	str	r0, [r4, #16]
 80231ba:	b15b      	cbz	r3, 80231d4 <__smakebuf_r+0x74>
 80231bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80231c0:	4630      	mov	r0, r6
 80231c2:	f000 ff8b 	bl	80240dc <_isatty_r>
 80231c6:	b128      	cbz	r0, 80231d4 <__smakebuf_r+0x74>
 80231c8:	89a3      	ldrh	r3, [r4, #12]
 80231ca:	f023 0303 	bic.w	r3, r3, #3
 80231ce:	f043 0301 	orr.w	r3, r3, #1
 80231d2:	81a3      	strh	r3, [r4, #12]
 80231d4:	89a0      	ldrh	r0, [r4, #12]
 80231d6:	4305      	orrs	r5, r0
 80231d8:	81a5      	strh	r5, [r4, #12]
 80231da:	e7cd      	b.n	8023178 <__smakebuf_r+0x18>
 80231dc:	08022f41 	.word	0x08022f41

080231e0 <malloc>:
 80231e0:	4b02      	ldr	r3, [pc, #8]	; (80231ec <malloc+0xc>)
 80231e2:	4601      	mov	r1, r0
 80231e4:	6818      	ldr	r0, [r3, #0]
 80231e6:	f000 bbe1 	b.w	80239ac <_malloc_r>
 80231ea:	bf00      	nop
 80231ec:	24000038 	.word	0x24000038

080231f0 <_Balloc>:
 80231f0:	b570      	push	{r4, r5, r6, lr}
 80231f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80231f4:	4604      	mov	r4, r0
 80231f6:	460d      	mov	r5, r1
 80231f8:	b976      	cbnz	r6, 8023218 <_Balloc+0x28>
 80231fa:	2010      	movs	r0, #16
 80231fc:	f7ff fff0 	bl	80231e0 <malloc>
 8023200:	4602      	mov	r2, r0
 8023202:	6260      	str	r0, [r4, #36]	; 0x24
 8023204:	b920      	cbnz	r0, 8023210 <_Balloc+0x20>
 8023206:	4b18      	ldr	r3, [pc, #96]	; (8023268 <_Balloc+0x78>)
 8023208:	4818      	ldr	r0, [pc, #96]	; (802326c <_Balloc+0x7c>)
 802320a:	2166      	movs	r1, #102	; 0x66
 802320c:	f7fe ff84 	bl	8022118 <__assert_func>
 8023210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023214:	6006      	str	r6, [r0, #0]
 8023216:	60c6      	str	r6, [r0, #12]
 8023218:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802321a:	68f3      	ldr	r3, [r6, #12]
 802321c:	b183      	cbz	r3, 8023240 <_Balloc+0x50>
 802321e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023220:	68db      	ldr	r3, [r3, #12]
 8023222:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8023226:	b9b8      	cbnz	r0, 8023258 <_Balloc+0x68>
 8023228:	2101      	movs	r1, #1
 802322a:	fa01 f605 	lsl.w	r6, r1, r5
 802322e:	1d72      	adds	r2, r6, #5
 8023230:	0092      	lsls	r2, r2, #2
 8023232:	4620      	mov	r0, r4
 8023234:	f000 fb5a 	bl	80238ec <_calloc_r>
 8023238:	b160      	cbz	r0, 8023254 <_Balloc+0x64>
 802323a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802323e:	e00e      	b.n	802325e <_Balloc+0x6e>
 8023240:	2221      	movs	r2, #33	; 0x21
 8023242:	2104      	movs	r1, #4
 8023244:	4620      	mov	r0, r4
 8023246:	f000 fb51 	bl	80238ec <_calloc_r>
 802324a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802324c:	60f0      	str	r0, [r6, #12]
 802324e:	68db      	ldr	r3, [r3, #12]
 8023250:	2b00      	cmp	r3, #0
 8023252:	d1e4      	bne.n	802321e <_Balloc+0x2e>
 8023254:	2000      	movs	r0, #0
 8023256:	bd70      	pop	{r4, r5, r6, pc}
 8023258:	6802      	ldr	r2, [r0, #0]
 802325a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802325e:	2300      	movs	r3, #0
 8023260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023264:	e7f7      	b.n	8023256 <_Balloc+0x66>
 8023266:	bf00      	nop
 8023268:	08028888 	.word	0x08028888
 802326c:	08028a18 	.word	0x08028a18

08023270 <_Bfree>:
 8023270:	b570      	push	{r4, r5, r6, lr}
 8023272:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023274:	4605      	mov	r5, r0
 8023276:	460c      	mov	r4, r1
 8023278:	b976      	cbnz	r6, 8023298 <_Bfree+0x28>
 802327a:	2010      	movs	r0, #16
 802327c:	f7ff ffb0 	bl	80231e0 <malloc>
 8023280:	4602      	mov	r2, r0
 8023282:	6268      	str	r0, [r5, #36]	; 0x24
 8023284:	b920      	cbnz	r0, 8023290 <_Bfree+0x20>
 8023286:	4b09      	ldr	r3, [pc, #36]	; (80232ac <_Bfree+0x3c>)
 8023288:	4809      	ldr	r0, [pc, #36]	; (80232b0 <_Bfree+0x40>)
 802328a:	218a      	movs	r1, #138	; 0x8a
 802328c:	f7fe ff44 	bl	8022118 <__assert_func>
 8023290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023294:	6006      	str	r6, [r0, #0]
 8023296:	60c6      	str	r6, [r0, #12]
 8023298:	b13c      	cbz	r4, 80232aa <_Bfree+0x3a>
 802329a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802329c:	6862      	ldr	r2, [r4, #4]
 802329e:	68db      	ldr	r3, [r3, #12]
 80232a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80232a4:	6021      	str	r1, [r4, #0]
 80232a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80232aa:	bd70      	pop	{r4, r5, r6, pc}
 80232ac:	08028888 	.word	0x08028888
 80232b0:	08028a18 	.word	0x08028a18

080232b4 <__multadd>:
 80232b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80232b8:	690e      	ldr	r6, [r1, #16]
 80232ba:	4607      	mov	r7, r0
 80232bc:	4698      	mov	r8, r3
 80232be:	460c      	mov	r4, r1
 80232c0:	f101 0014 	add.w	r0, r1, #20
 80232c4:	2300      	movs	r3, #0
 80232c6:	6805      	ldr	r5, [r0, #0]
 80232c8:	b2a9      	uxth	r1, r5
 80232ca:	fb02 8101 	mla	r1, r2, r1, r8
 80232ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80232d2:	0c2d      	lsrs	r5, r5, #16
 80232d4:	fb02 c505 	mla	r5, r2, r5, ip
 80232d8:	b289      	uxth	r1, r1
 80232da:	3301      	adds	r3, #1
 80232dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80232e0:	429e      	cmp	r6, r3
 80232e2:	f840 1b04 	str.w	r1, [r0], #4
 80232e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80232ea:	dcec      	bgt.n	80232c6 <__multadd+0x12>
 80232ec:	f1b8 0f00 	cmp.w	r8, #0
 80232f0:	d022      	beq.n	8023338 <__multadd+0x84>
 80232f2:	68a3      	ldr	r3, [r4, #8]
 80232f4:	42b3      	cmp	r3, r6
 80232f6:	dc19      	bgt.n	802332c <__multadd+0x78>
 80232f8:	6861      	ldr	r1, [r4, #4]
 80232fa:	4638      	mov	r0, r7
 80232fc:	3101      	adds	r1, #1
 80232fe:	f7ff ff77 	bl	80231f0 <_Balloc>
 8023302:	4605      	mov	r5, r0
 8023304:	b928      	cbnz	r0, 8023312 <__multadd+0x5e>
 8023306:	4602      	mov	r2, r0
 8023308:	4b0d      	ldr	r3, [pc, #52]	; (8023340 <__multadd+0x8c>)
 802330a:	480e      	ldr	r0, [pc, #56]	; (8023344 <__multadd+0x90>)
 802330c:	21b5      	movs	r1, #181	; 0xb5
 802330e:	f7fe ff03 	bl	8022118 <__assert_func>
 8023312:	6922      	ldr	r2, [r4, #16]
 8023314:	3202      	adds	r2, #2
 8023316:	f104 010c 	add.w	r1, r4, #12
 802331a:	0092      	lsls	r2, r2, #2
 802331c:	300c      	adds	r0, #12
 802331e:	f7fe f88b 	bl	8021438 <memcpy>
 8023322:	4621      	mov	r1, r4
 8023324:	4638      	mov	r0, r7
 8023326:	f7ff ffa3 	bl	8023270 <_Bfree>
 802332a:	462c      	mov	r4, r5
 802332c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8023330:	3601      	adds	r6, #1
 8023332:	f8c3 8014 	str.w	r8, [r3, #20]
 8023336:	6126      	str	r6, [r4, #16]
 8023338:	4620      	mov	r0, r4
 802333a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802333e:	bf00      	nop
 8023340:	080289a6 	.word	0x080289a6
 8023344:	08028a18 	.word	0x08028a18

08023348 <__hi0bits>:
 8023348:	0c03      	lsrs	r3, r0, #16
 802334a:	041b      	lsls	r3, r3, #16
 802334c:	b9d3      	cbnz	r3, 8023384 <__hi0bits+0x3c>
 802334e:	0400      	lsls	r0, r0, #16
 8023350:	2310      	movs	r3, #16
 8023352:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8023356:	bf04      	itt	eq
 8023358:	0200      	lsleq	r0, r0, #8
 802335a:	3308      	addeq	r3, #8
 802335c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8023360:	bf04      	itt	eq
 8023362:	0100      	lsleq	r0, r0, #4
 8023364:	3304      	addeq	r3, #4
 8023366:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802336a:	bf04      	itt	eq
 802336c:	0080      	lsleq	r0, r0, #2
 802336e:	3302      	addeq	r3, #2
 8023370:	2800      	cmp	r0, #0
 8023372:	db05      	blt.n	8023380 <__hi0bits+0x38>
 8023374:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8023378:	f103 0301 	add.w	r3, r3, #1
 802337c:	bf08      	it	eq
 802337e:	2320      	moveq	r3, #32
 8023380:	4618      	mov	r0, r3
 8023382:	4770      	bx	lr
 8023384:	2300      	movs	r3, #0
 8023386:	e7e4      	b.n	8023352 <__hi0bits+0xa>

08023388 <__lo0bits>:
 8023388:	6803      	ldr	r3, [r0, #0]
 802338a:	f013 0207 	ands.w	r2, r3, #7
 802338e:	4601      	mov	r1, r0
 8023390:	d00b      	beq.n	80233aa <__lo0bits+0x22>
 8023392:	07da      	lsls	r2, r3, #31
 8023394:	d424      	bmi.n	80233e0 <__lo0bits+0x58>
 8023396:	0798      	lsls	r0, r3, #30
 8023398:	bf49      	itett	mi
 802339a:	085b      	lsrmi	r3, r3, #1
 802339c:	089b      	lsrpl	r3, r3, #2
 802339e:	2001      	movmi	r0, #1
 80233a0:	600b      	strmi	r3, [r1, #0]
 80233a2:	bf5c      	itt	pl
 80233a4:	600b      	strpl	r3, [r1, #0]
 80233a6:	2002      	movpl	r0, #2
 80233a8:	4770      	bx	lr
 80233aa:	b298      	uxth	r0, r3
 80233ac:	b9b0      	cbnz	r0, 80233dc <__lo0bits+0x54>
 80233ae:	0c1b      	lsrs	r3, r3, #16
 80233b0:	2010      	movs	r0, #16
 80233b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80233b6:	bf04      	itt	eq
 80233b8:	0a1b      	lsreq	r3, r3, #8
 80233ba:	3008      	addeq	r0, #8
 80233bc:	071a      	lsls	r2, r3, #28
 80233be:	bf04      	itt	eq
 80233c0:	091b      	lsreq	r3, r3, #4
 80233c2:	3004      	addeq	r0, #4
 80233c4:	079a      	lsls	r2, r3, #30
 80233c6:	bf04      	itt	eq
 80233c8:	089b      	lsreq	r3, r3, #2
 80233ca:	3002      	addeq	r0, #2
 80233cc:	07da      	lsls	r2, r3, #31
 80233ce:	d403      	bmi.n	80233d8 <__lo0bits+0x50>
 80233d0:	085b      	lsrs	r3, r3, #1
 80233d2:	f100 0001 	add.w	r0, r0, #1
 80233d6:	d005      	beq.n	80233e4 <__lo0bits+0x5c>
 80233d8:	600b      	str	r3, [r1, #0]
 80233da:	4770      	bx	lr
 80233dc:	4610      	mov	r0, r2
 80233de:	e7e8      	b.n	80233b2 <__lo0bits+0x2a>
 80233e0:	2000      	movs	r0, #0
 80233e2:	4770      	bx	lr
 80233e4:	2020      	movs	r0, #32
 80233e6:	4770      	bx	lr

080233e8 <__i2b>:
 80233e8:	b510      	push	{r4, lr}
 80233ea:	460c      	mov	r4, r1
 80233ec:	2101      	movs	r1, #1
 80233ee:	f7ff feff 	bl	80231f0 <_Balloc>
 80233f2:	4602      	mov	r2, r0
 80233f4:	b928      	cbnz	r0, 8023402 <__i2b+0x1a>
 80233f6:	4b05      	ldr	r3, [pc, #20]	; (802340c <__i2b+0x24>)
 80233f8:	4805      	ldr	r0, [pc, #20]	; (8023410 <__i2b+0x28>)
 80233fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80233fe:	f7fe fe8b 	bl	8022118 <__assert_func>
 8023402:	2301      	movs	r3, #1
 8023404:	6144      	str	r4, [r0, #20]
 8023406:	6103      	str	r3, [r0, #16]
 8023408:	bd10      	pop	{r4, pc}
 802340a:	bf00      	nop
 802340c:	080289a6 	.word	0x080289a6
 8023410:	08028a18 	.word	0x08028a18

08023414 <__multiply>:
 8023414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023418:	4614      	mov	r4, r2
 802341a:	690a      	ldr	r2, [r1, #16]
 802341c:	6923      	ldr	r3, [r4, #16]
 802341e:	429a      	cmp	r2, r3
 8023420:	bfb8      	it	lt
 8023422:	460b      	movlt	r3, r1
 8023424:	460d      	mov	r5, r1
 8023426:	bfbc      	itt	lt
 8023428:	4625      	movlt	r5, r4
 802342a:	461c      	movlt	r4, r3
 802342c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8023430:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023434:	68ab      	ldr	r3, [r5, #8]
 8023436:	6869      	ldr	r1, [r5, #4]
 8023438:	eb0a 0709 	add.w	r7, sl, r9
 802343c:	42bb      	cmp	r3, r7
 802343e:	b085      	sub	sp, #20
 8023440:	bfb8      	it	lt
 8023442:	3101      	addlt	r1, #1
 8023444:	f7ff fed4 	bl	80231f0 <_Balloc>
 8023448:	b930      	cbnz	r0, 8023458 <__multiply+0x44>
 802344a:	4602      	mov	r2, r0
 802344c:	4b42      	ldr	r3, [pc, #264]	; (8023558 <__multiply+0x144>)
 802344e:	4843      	ldr	r0, [pc, #268]	; (802355c <__multiply+0x148>)
 8023450:	f240 115d 	movw	r1, #349	; 0x15d
 8023454:	f7fe fe60 	bl	8022118 <__assert_func>
 8023458:	f100 0614 	add.w	r6, r0, #20
 802345c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8023460:	4633      	mov	r3, r6
 8023462:	2200      	movs	r2, #0
 8023464:	4543      	cmp	r3, r8
 8023466:	d31e      	bcc.n	80234a6 <__multiply+0x92>
 8023468:	f105 0c14 	add.w	ip, r5, #20
 802346c:	f104 0314 	add.w	r3, r4, #20
 8023470:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8023474:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8023478:	9202      	str	r2, [sp, #8]
 802347a:	ebac 0205 	sub.w	r2, ip, r5
 802347e:	3a15      	subs	r2, #21
 8023480:	f022 0203 	bic.w	r2, r2, #3
 8023484:	3204      	adds	r2, #4
 8023486:	f105 0115 	add.w	r1, r5, #21
 802348a:	458c      	cmp	ip, r1
 802348c:	bf38      	it	cc
 802348e:	2204      	movcc	r2, #4
 8023490:	9201      	str	r2, [sp, #4]
 8023492:	9a02      	ldr	r2, [sp, #8]
 8023494:	9303      	str	r3, [sp, #12]
 8023496:	429a      	cmp	r2, r3
 8023498:	d808      	bhi.n	80234ac <__multiply+0x98>
 802349a:	2f00      	cmp	r7, #0
 802349c:	dc55      	bgt.n	802354a <__multiply+0x136>
 802349e:	6107      	str	r7, [r0, #16]
 80234a0:	b005      	add	sp, #20
 80234a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234a6:	f843 2b04 	str.w	r2, [r3], #4
 80234aa:	e7db      	b.n	8023464 <__multiply+0x50>
 80234ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80234b0:	f1ba 0f00 	cmp.w	sl, #0
 80234b4:	d020      	beq.n	80234f8 <__multiply+0xe4>
 80234b6:	f105 0e14 	add.w	lr, r5, #20
 80234ba:	46b1      	mov	r9, r6
 80234bc:	2200      	movs	r2, #0
 80234be:	f85e 4b04 	ldr.w	r4, [lr], #4
 80234c2:	f8d9 b000 	ldr.w	fp, [r9]
 80234c6:	b2a1      	uxth	r1, r4
 80234c8:	fa1f fb8b 	uxth.w	fp, fp
 80234cc:	fb0a b101 	mla	r1, sl, r1, fp
 80234d0:	4411      	add	r1, r2
 80234d2:	f8d9 2000 	ldr.w	r2, [r9]
 80234d6:	0c24      	lsrs	r4, r4, #16
 80234d8:	0c12      	lsrs	r2, r2, #16
 80234da:	fb0a 2404 	mla	r4, sl, r4, r2
 80234de:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80234e2:	b289      	uxth	r1, r1
 80234e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80234e8:	45f4      	cmp	ip, lr
 80234ea:	f849 1b04 	str.w	r1, [r9], #4
 80234ee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80234f2:	d8e4      	bhi.n	80234be <__multiply+0xaa>
 80234f4:	9901      	ldr	r1, [sp, #4]
 80234f6:	5072      	str	r2, [r6, r1]
 80234f8:	9a03      	ldr	r2, [sp, #12]
 80234fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80234fe:	3304      	adds	r3, #4
 8023500:	f1b9 0f00 	cmp.w	r9, #0
 8023504:	d01f      	beq.n	8023546 <__multiply+0x132>
 8023506:	6834      	ldr	r4, [r6, #0]
 8023508:	f105 0114 	add.w	r1, r5, #20
 802350c:	46b6      	mov	lr, r6
 802350e:	f04f 0a00 	mov.w	sl, #0
 8023512:	880a      	ldrh	r2, [r1, #0]
 8023514:	f8be b002 	ldrh.w	fp, [lr, #2]
 8023518:	fb09 b202 	mla	r2, r9, r2, fp
 802351c:	4492      	add	sl, r2
 802351e:	b2a4      	uxth	r4, r4
 8023520:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8023524:	f84e 4b04 	str.w	r4, [lr], #4
 8023528:	f851 4b04 	ldr.w	r4, [r1], #4
 802352c:	f8be 2000 	ldrh.w	r2, [lr]
 8023530:	0c24      	lsrs	r4, r4, #16
 8023532:	fb09 2404 	mla	r4, r9, r4, r2
 8023536:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802353a:	458c      	cmp	ip, r1
 802353c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8023540:	d8e7      	bhi.n	8023512 <__multiply+0xfe>
 8023542:	9a01      	ldr	r2, [sp, #4]
 8023544:	50b4      	str	r4, [r6, r2]
 8023546:	3604      	adds	r6, #4
 8023548:	e7a3      	b.n	8023492 <__multiply+0x7e>
 802354a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802354e:	2b00      	cmp	r3, #0
 8023550:	d1a5      	bne.n	802349e <__multiply+0x8a>
 8023552:	3f01      	subs	r7, #1
 8023554:	e7a1      	b.n	802349a <__multiply+0x86>
 8023556:	bf00      	nop
 8023558:	080289a6 	.word	0x080289a6
 802355c:	08028a18 	.word	0x08028a18

08023560 <__pow5mult>:
 8023560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023564:	4615      	mov	r5, r2
 8023566:	f012 0203 	ands.w	r2, r2, #3
 802356a:	4606      	mov	r6, r0
 802356c:	460f      	mov	r7, r1
 802356e:	d007      	beq.n	8023580 <__pow5mult+0x20>
 8023570:	4c25      	ldr	r4, [pc, #148]	; (8023608 <__pow5mult+0xa8>)
 8023572:	3a01      	subs	r2, #1
 8023574:	2300      	movs	r3, #0
 8023576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802357a:	f7ff fe9b 	bl	80232b4 <__multadd>
 802357e:	4607      	mov	r7, r0
 8023580:	10ad      	asrs	r5, r5, #2
 8023582:	d03d      	beq.n	8023600 <__pow5mult+0xa0>
 8023584:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8023586:	b97c      	cbnz	r4, 80235a8 <__pow5mult+0x48>
 8023588:	2010      	movs	r0, #16
 802358a:	f7ff fe29 	bl	80231e0 <malloc>
 802358e:	4602      	mov	r2, r0
 8023590:	6270      	str	r0, [r6, #36]	; 0x24
 8023592:	b928      	cbnz	r0, 80235a0 <__pow5mult+0x40>
 8023594:	4b1d      	ldr	r3, [pc, #116]	; (802360c <__pow5mult+0xac>)
 8023596:	481e      	ldr	r0, [pc, #120]	; (8023610 <__pow5mult+0xb0>)
 8023598:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802359c:	f7fe fdbc 	bl	8022118 <__assert_func>
 80235a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80235a4:	6004      	str	r4, [r0, #0]
 80235a6:	60c4      	str	r4, [r0, #12]
 80235a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80235ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80235b0:	b94c      	cbnz	r4, 80235c6 <__pow5mult+0x66>
 80235b2:	f240 2171 	movw	r1, #625	; 0x271
 80235b6:	4630      	mov	r0, r6
 80235b8:	f7ff ff16 	bl	80233e8 <__i2b>
 80235bc:	2300      	movs	r3, #0
 80235be:	f8c8 0008 	str.w	r0, [r8, #8]
 80235c2:	4604      	mov	r4, r0
 80235c4:	6003      	str	r3, [r0, #0]
 80235c6:	f04f 0900 	mov.w	r9, #0
 80235ca:	07eb      	lsls	r3, r5, #31
 80235cc:	d50a      	bpl.n	80235e4 <__pow5mult+0x84>
 80235ce:	4639      	mov	r1, r7
 80235d0:	4622      	mov	r2, r4
 80235d2:	4630      	mov	r0, r6
 80235d4:	f7ff ff1e 	bl	8023414 <__multiply>
 80235d8:	4639      	mov	r1, r7
 80235da:	4680      	mov	r8, r0
 80235dc:	4630      	mov	r0, r6
 80235de:	f7ff fe47 	bl	8023270 <_Bfree>
 80235e2:	4647      	mov	r7, r8
 80235e4:	106d      	asrs	r5, r5, #1
 80235e6:	d00b      	beq.n	8023600 <__pow5mult+0xa0>
 80235e8:	6820      	ldr	r0, [r4, #0]
 80235ea:	b938      	cbnz	r0, 80235fc <__pow5mult+0x9c>
 80235ec:	4622      	mov	r2, r4
 80235ee:	4621      	mov	r1, r4
 80235f0:	4630      	mov	r0, r6
 80235f2:	f7ff ff0f 	bl	8023414 <__multiply>
 80235f6:	6020      	str	r0, [r4, #0]
 80235f8:	f8c0 9000 	str.w	r9, [r0]
 80235fc:	4604      	mov	r4, r0
 80235fe:	e7e4      	b.n	80235ca <__pow5mult+0x6a>
 8023600:	4638      	mov	r0, r7
 8023602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023606:	bf00      	nop
 8023608:	08028b68 	.word	0x08028b68
 802360c:	08028888 	.word	0x08028888
 8023610:	08028a18 	.word	0x08028a18

08023614 <__lshift>:
 8023614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023618:	460c      	mov	r4, r1
 802361a:	6849      	ldr	r1, [r1, #4]
 802361c:	6923      	ldr	r3, [r4, #16]
 802361e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8023622:	68a3      	ldr	r3, [r4, #8]
 8023624:	4607      	mov	r7, r0
 8023626:	4691      	mov	r9, r2
 8023628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802362c:	f108 0601 	add.w	r6, r8, #1
 8023630:	42b3      	cmp	r3, r6
 8023632:	db0b      	blt.n	802364c <__lshift+0x38>
 8023634:	4638      	mov	r0, r7
 8023636:	f7ff fddb 	bl	80231f0 <_Balloc>
 802363a:	4605      	mov	r5, r0
 802363c:	b948      	cbnz	r0, 8023652 <__lshift+0x3e>
 802363e:	4602      	mov	r2, r0
 8023640:	4b28      	ldr	r3, [pc, #160]	; (80236e4 <__lshift+0xd0>)
 8023642:	4829      	ldr	r0, [pc, #164]	; (80236e8 <__lshift+0xd4>)
 8023644:	f240 11d9 	movw	r1, #473	; 0x1d9
 8023648:	f7fe fd66 	bl	8022118 <__assert_func>
 802364c:	3101      	adds	r1, #1
 802364e:	005b      	lsls	r3, r3, #1
 8023650:	e7ee      	b.n	8023630 <__lshift+0x1c>
 8023652:	2300      	movs	r3, #0
 8023654:	f100 0114 	add.w	r1, r0, #20
 8023658:	f100 0210 	add.w	r2, r0, #16
 802365c:	4618      	mov	r0, r3
 802365e:	4553      	cmp	r3, sl
 8023660:	db33      	blt.n	80236ca <__lshift+0xb6>
 8023662:	6920      	ldr	r0, [r4, #16]
 8023664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023668:	f104 0314 	add.w	r3, r4, #20
 802366c:	f019 091f 	ands.w	r9, r9, #31
 8023670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023674:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8023678:	d02b      	beq.n	80236d2 <__lshift+0xbe>
 802367a:	f1c9 0e20 	rsb	lr, r9, #32
 802367e:	468a      	mov	sl, r1
 8023680:	2200      	movs	r2, #0
 8023682:	6818      	ldr	r0, [r3, #0]
 8023684:	fa00 f009 	lsl.w	r0, r0, r9
 8023688:	4302      	orrs	r2, r0
 802368a:	f84a 2b04 	str.w	r2, [sl], #4
 802368e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023692:	459c      	cmp	ip, r3
 8023694:	fa22 f20e 	lsr.w	r2, r2, lr
 8023698:	d8f3      	bhi.n	8023682 <__lshift+0x6e>
 802369a:	ebac 0304 	sub.w	r3, ip, r4
 802369e:	3b15      	subs	r3, #21
 80236a0:	f023 0303 	bic.w	r3, r3, #3
 80236a4:	3304      	adds	r3, #4
 80236a6:	f104 0015 	add.w	r0, r4, #21
 80236aa:	4584      	cmp	ip, r0
 80236ac:	bf38      	it	cc
 80236ae:	2304      	movcc	r3, #4
 80236b0:	50ca      	str	r2, [r1, r3]
 80236b2:	b10a      	cbz	r2, 80236b8 <__lshift+0xa4>
 80236b4:	f108 0602 	add.w	r6, r8, #2
 80236b8:	3e01      	subs	r6, #1
 80236ba:	4638      	mov	r0, r7
 80236bc:	612e      	str	r6, [r5, #16]
 80236be:	4621      	mov	r1, r4
 80236c0:	f7ff fdd6 	bl	8023270 <_Bfree>
 80236c4:	4628      	mov	r0, r5
 80236c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80236ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80236ce:	3301      	adds	r3, #1
 80236d0:	e7c5      	b.n	802365e <__lshift+0x4a>
 80236d2:	3904      	subs	r1, #4
 80236d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80236d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80236dc:	459c      	cmp	ip, r3
 80236de:	d8f9      	bhi.n	80236d4 <__lshift+0xc0>
 80236e0:	e7ea      	b.n	80236b8 <__lshift+0xa4>
 80236e2:	bf00      	nop
 80236e4:	080289a6 	.word	0x080289a6
 80236e8:	08028a18 	.word	0x08028a18

080236ec <__mcmp>:
 80236ec:	b530      	push	{r4, r5, lr}
 80236ee:	6902      	ldr	r2, [r0, #16]
 80236f0:	690c      	ldr	r4, [r1, #16]
 80236f2:	1b12      	subs	r2, r2, r4
 80236f4:	d10e      	bne.n	8023714 <__mcmp+0x28>
 80236f6:	f100 0314 	add.w	r3, r0, #20
 80236fa:	3114      	adds	r1, #20
 80236fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8023700:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8023704:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8023708:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802370c:	42a5      	cmp	r5, r4
 802370e:	d003      	beq.n	8023718 <__mcmp+0x2c>
 8023710:	d305      	bcc.n	802371e <__mcmp+0x32>
 8023712:	2201      	movs	r2, #1
 8023714:	4610      	mov	r0, r2
 8023716:	bd30      	pop	{r4, r5, pc}
 8023718:	4283      	cmp	r3, r0
 802371a:	d3f3      	bcc.n	8023704 <__mcmp+0x18>
 802371c:	e7fa      	b.n	8023714 <__mcmp+0x28>
 802371e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023722:	e7f7      	b.n	8023714 <__mcmp+0x28>

08023724 <__mdiff>:
 8023724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023728:	460c      	mov	r4, r1
 802372a:	4606      	mov	r6, r0
 802372c:	4611      	mov	r1, r2
 802372e:	4620      	mov	r0, r4
 8023730:	4617      	mov	r7, r2
 8023732:	f7ff ffdb 	bl	80236ec <__mcmp>
 8023736:	1e05      	subs	r5, r0, #0
 8023738:	d110      	bne.n	802375c <__mdiff+0x38>
 802373a:	4629      	mov	r1, r5
 802373c:	4630      	mov	r0, r6
 802373e:	f7ff fd57 	bl	80231f0 <_Balloc>
 8023742:	b930      	cbnz	r0, 8023752 <__mdiff+0x2e>
 8023744:	4b39      	ldr	r3, [pc, #228]	; (802382c <__mdiff+0x108>)
 8023746:	4602      	mov	r2, r0
 8023748:	f240 2132 	movw	r1, #562	; 0x232
 802374c:	4838      	ldr	r0, [pc, #224]	; (8023830 <__mdiff+0x10c>)
 802374e:	f7fe fce3 	bl	8022118 <__assert_func>
 8023752:	2301      	movs	r3, #1
 8023754:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8023758:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802375c:	bfa4      	itt	ge
 802375e:	463b      	movge	r3, r7
 8023760:	4627      	movge	r7, r4
 8023762:	4630      	mov	r0, r6
 8023764:	6879      	ldr	r1, [r7, #4]
 8023766:	bfa6      	itte	ge
 8023768:	461c      	movge	r4, r3
 802376a:	2500      	movge	r5, #0
 802376c:	2501      	movlt	r5, #1
 802376e:	f7ff fd3f 	bl	80231f0 <_Balloc>
 8023772:	b920      	cbnz	r0, 802377e <__mdiff+0x5a>
 8023774:	4b2d      	ldr	r3, [pc, #180]	; (802382c <__mdiff+0x108>)
 8023776:	4602      	mov	r2, r0
 8023778:	f44f 7110 	mov.w	r1, #576	; 0x240
 802377c:	e7e6      	b.n	802374c <__mdiff+0x28>
 802377e:	693e      	ldr	r6, [r7, #16]
 8023780:	60c5      	str	r5, [r0, #12]
 8023782:	6925      	ldr	r5, [r4, #16]
 8023784:	f107 0114 	add.w	r1, r7, #20
 8023788:	f104 0914 	add.w	r9, r4, #20
 802378c:	f100 0e14 	add.w	lr, r0, #20
 8023790:	f107 0210 	add.w	r2, r7, #16
 8023794:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8023798:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 802379c:	46f2      	mov	sl, lr
 802379e:	2700      	movs	r7, #0
 80237a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80237a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80237a8:	fa1f f883 	uxth.w	r8, r3
 80237ac:	fa17 f78b 	uxtah	r7, r7, fp
 80237b0:	0c1b      	lsrs	r3, r3, #16
 80237b2:	eba7 0808 	sub.w	r8, r7, r8
 80237b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80237ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80237be:	fa1f f888 	uxth.w	r8, r8
 80237c2:	141f      	asrs	r7, r3, #16
 80237c4:	454d      	cmp	r5, r9
 80237c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80237ca:	f84a 3b04 	str.w	r3, [sl], #4
 80237ce:	d8e7      	bhi.n	80237a0 <__mdiff+0x7c>
 80237d0:	1b2b      	subs	r3, r5, r4
 80237d2:	3b15      	subs	r3, #21
 80237d4:	f023 0303 	bic.w	r3, r3, #3
 80237d8:	3304      	adds	r3, #4
 80237da:	3415      	adds	r4, #21
 80237dc:	42a5      	cmp	r5, r4
 80237de:	bf38      	it	cc
 80237e0:	2304      	movcc	r3, #4
 80237e2:	4419      	add	r1, r3
 80237e4:	4473      	add	r3, lr
 80237e6:	469e      	mov	lr, r3
 80237e8:	460d      	mov	r5, r1
 80237ea:	4565      	cmp	r5, ip
 80237ec:	d30e      	bcc.n	802380c <__mdiff+0xe8>
 80237ee:	f10c 0203 	add.w	r2, ip, #3
 80237f2:	1a52      	subs	r2, r2, r1
 80237f4:	f022 0203 	bic.w	r2, r2, #3
 80237f8:	3903      	subs	r1, #3
 80237fa:	458c      	cmp	ip, r1
 80237fc:	bf38      	it	cc
 80237fe:	2200      	movcc	r2, #0
 8023800:	441a      	add	r2, r3
 8023802:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8023806:	b17b      	cbz	r3, 8023828 <__mdiff+0x104>
 8023808:	6106      	str	r6, [r0, #16]
 802380a:	e7a5      	b.n	8023758 <__mdiff+0x34>
 802380c:	f855 8b04 	ldr.w	r8, [r5], #4
 8023810:	fa17 f488 	uxtah	r4, r7, r8
 8023814:	1422      	asrs	r2, r4, #16
 8023816:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802381a:	b2a4      	uxth	r4, r4
 802381c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8023820:	f84e 4b04 	str.w	r4, [lr], #4
 8023824:	1417      	asrs	r7, r2, #16
 8023826:	e7e0      	b.n	80237ea <__mdiff+0xc6>
 8023828:	3e01      	subs	r6, #1
 802382a:	e7ea      	b.n	8023802 <__mdiff+0xde>
 802382c:	080289a6 	.word	0x080289a6
 8023830:	08028a18 	.word	0x08028a18

08023834 <__d2b>:
 8023834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023838:	4689      	mov	r9, r1
 802383a:	2101      	movs	r1, #1
 802383c:	ec57 6b10 	vmov	r6, r7, d0
 8023840:	4690      	mov	r8, r2
 8023842:	f7ff fcd5 	bl	80231f0 <_Balloc>
 8023846:	4604      	mov	r4, r0
 8023848:	b930      	cbnz	r0, 8023858 <__d2b+0x24>
 802384a:	4602      	mov	r2, r0
 802384c:	4b25      	ldr	r3, [pc, #148]	; (80238e4 <__d2b+0xb0>)
 802384e:	4826      	ldr	r0, [pc, #152]	; (80238e8 <__d2b+0xb4>)
 8023850:	f240 310a 	movw	r1, #778	; 0x30a
 8023854:	f7fe fc60 	bl	8022118 <__assert_func>
 8023858:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802385c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8023860:	bb35      	cbnz	r5, 80238b0 <__d2b+0x7c>
 8023862:	2e00      	cmp	r6, #0
 8023864:	9301      	str	r3, [sp, #4]
 8023866:	d028      	beq.n	80238ba <__d2b+0x86>
 8023868:	4668      	mov	r0, sp
 802386a:	9600      	str	r6, [sp, #0]
 802386c:	f7ff fd8c 	bl	8023388 <__lo0bits>
 8023870:	9900      	ldr	r1, [sp, #0]
 8023872:	b300      	cbz	r0, 80238b6 <__d2b+0x82>
 8023874:	9a01      	ldr	r2, [sp, #4]
 8023876:	f1c0 0320 	rsb	r3, r0, #32
 802387a:	fa02 f303 	lsl.w	r3, r2, r3
 802387e:	430b      	orrs	r3, r1
 8023880:	40c2      	lsrs	r2, r0
 8023882:	6163      	str	r3, [r4, #20]
 8023884:	9201      	str	r2, [sp, #4]
 8023886:	9b01      	ldr	r3, [sp, #4]
 8023888:	61a3      	str	r3, [r4, #24]
 802388a:	2b00      	cmp	r3, #0
 802388c:	bf14      	ite	ne
 802388e:	2202      	movne	r2, #2
 8023890:	2201      	moveq	r2, #1
 8023892:	6122      	str	r2, [r4, #16]
 8023894:	b1d5      	cbz	r5, 80238cc <__d2b+0x98>
 8023896:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802389a:	4405      	add	r5, r0
 802389c:	f8c9 5000 	str.w	r5, [r9]
 80238a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80238a4:	f8c8 0000 	str.w	r0, [r8]
 80238a8:	4620      	mov	r0, r4
 80238aa:	b003      	add	sp, #12
 80238ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80238b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80238b4:	e7d5      	b.n	8023862 <__d2b+0x2e>
 80238b6:	6161      	str	r1, [r4, #20]
 80238b8:	e7e5      	b.n	8023886 <__d2b+0x52>
 80238ba:	a801      	add	r0, sp, #4
 80238bc:	f7ff fd64 	bl	8023388 <__lo0bits>
 80238c0:	9b01      	ldr	r3, [sp, #4]
 80238c2:	6163      	str	r3, [r4, #20]
 80238c4:	2201      	movs	r2, #1
 80238c6:	6122      	str	r2, [r4, #16]
 80238c8:	3020      	adds	r0, #32
 80238ca:	e7e3      	b.n	8023894 <__d2b+0x60>
 80238cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80238d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80238d4:	f8c9 0000 	str.w	r0, [r9]
 80238d8:	6918      	ldr	r0, [r3, #16]
 80238da:	f7ff fd35 	bl	8023348 <__hi0bits>
 80238de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80238e2:	e7df      	b.n	80238a4 <__d2b+0x70>
 80238e4:	080289a6 	.word	0x080289a6
 80238e8:	08028a18 	.word	0x08028a18

080238ec <_calloc_r>:
 80238ec:	b513      	push	{r0, r1, r4, lr}
 80238ee:	434a      	muls	r2, r1
 80238f0:	4611      	mov	r1, r2
 80238f2:	9201      	str	r2, [sp, #4]
 80238f4:	f000 f85a 	bl	80239ac <_malloc_r>
 80238f8:	4604      	mov	r4, r0
 80238fa:	b118      	cbz	r0, 8023904 <_calloc_r+0x18>
 80238fc:	9a01      	ldr	r2, [sp, #4]
 80238fe:	2100      	movs	r1, #0
 8023900:	f7fd fdc2 	bl	8021488 <memset>
 8023904:	4620      	mov	r0, r4
 8023906:	b002      	add	sp, #8
 8023908:	bd10      	pop	{r4, pc}
	...

0802390c <_free_r>:
 802390c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802390e:	2900      	cmp	r1, #0
 8023910:	d048      	beq.n	80239a4 <_free_r+0x98>
 8023912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023916:	9001      	str	r0, [sp, #4]
 8023918:	2b00      	cmp	r3, #0
 802391a:	f1a1 0404 	sub.w	r4, r1, #4
 802391e:	bfb8      	it	lt
 8023920:	18e4      	addlt	r4, r4, r3
 8023922:	f000 fc0f 	bl	8024144 <__malloc_lock>
 8023926:	4a20      	ldr	r2, [pc, #128]	; (80239a8 <_free_r+0x9c>)
 8023928:	9801      	ldr	r0, [sp, #4]
 802392a:	6813      	ldr	r3, [r2, #0]
 802392c:	4615      	mov	r5, r2
 802392e:	b933      	cbnz	r3, 802393e <_free_r+0x32>
 8023930:	6063      	str	r3, [r4, #4]
 8023932:	6014      	str	r4, [r2, #0]
 8023934:	b003      	add	sp, #12
 8023936:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802393a:	f000 bc09 	b.w	8024150 <__malloc_unlock>
 802393e:	42a3      	cmp	r3, r4
 8023940:	d90b      	bls.n	802395a <_free_r+0x4e>
 8023942:	6821      	ldr	r1, [r4, #0]
 8023944:	1862      	adds	r2, r4, r1
 8023946:	4293      	cmp	r3, r2
 8023948:	bf04      	itt	eq
 802394a:	681a      	ldreq	r2, [r3, #0]
 802394c:	685b      	ldreq	r3, [r3, #4]
 802394e:	6063      	str	r3, [r4, #4]
 8023950:	bf04      	itt	eq
 8023952:	1852      	addeq	r2, r2, r1
 8023954:	6022      	streq	r2, [r4, #0]
 8023956:	602c      	str	r4, [r5, #0]
 8023958:	e7ec      	b.n	8023934 <_free_r+0x28>
 802395a:	461a      	mov	r2, r3
 802395c:	685b      	ldr	r3, [r3, #4]
 802395e:	b10b      	cbz	r3, 8023964 <_free_r+0x58>
 8023960:	42a3      	cmp	r3, r4
 8023962:	d9fa      	bls.n	802395a <_free_r+0x4e>
 8023964:	6811      	ldr	r1, [r2, #0]
 8023966:	1855      	adds	r5, r2, r1
 8023968:	42a5      	cmp	r5, r4
 802396a:	d10b      	bne.n	8023984 <_free_r+0x78>
 802396c:	6824      	ldr	r4, [r4, #0]
 802396e:	4421      	add	r1, r4
 8023970:	1854      	adds	r4, r2, r1
 8023972:	42a3      	cmp	r3, r4
 8023974:	6011      	str	r1, [r2, #0]
 8023976:	d1dd      	bne.n	8023934 <_free_r+0x28>
 8023978:	681c      	ldr	r4, [r3, #0]
 802397a:	685b      	ldr	r3, [r3, #4]
 802397c:	6053      	str	r3, [r2, #4]
 802397e:	4421      	add	r1, r4
 8023980:	6011      	str	r1, [r2, #0]
 8023982:	e7d7      	b.n	8023934 <_free_r+0x28>
 8023984:	d902      	bls.n	802398c <_free_r+0x80>
 8023986:	230c      	movs	r3, #12
 8023988:	6003      	str	r3, [r0, #0]
 802398a:	e7d3      	b.n	8023934 <_free_r+0x28>
 802398c:	6825      	ldr	r5, [r4, #0]
 802398e:	1961      	adds	r1, r4, r5
 8023990:	428b      	cmp	r3, r1
 8023992:	bf04      	itt	eq
 8023994:	6819      	ldreq	r1, [r3, #0]
 8023996:	685b      	ldreq	r3, [r3, #4]
 8023998:	6063      	str	r3, [r4, #4]
 802399a:	bf04      	itt	eq
 802399c:	1949      	addeq	r1, r1, r5
 802399e:	6021      	streq	r1, [r4, #0]
 80239a0:	6054      	str	r4, [r2, #4]
 80239a2:	e7c7      	b.n	8023934 <_free_r+0x28>
 80239a4:	b003      	add	sp, #12
 80239a6:	bd30      	pop	{r4, r5, pc}
 80239a8:	2400982c 	.word	0x2400982c

080239ac <_malloc_r>:
 80239ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239ae:	1ccd      	adds	r5, r1, #3
 80239b0:	f025 0503 	bic.w	r5, r5, #3
 80239b4:	3508      	adds	r5, #8
 80239b6:	2d0c      	cmp	r5, #12
 80239b8:	bf38      	it	cc
 80239ba:	250c      	movcc	r5, #12
 80239bc:	2d00      	cmp	r5, #0
 80239be:	4606      	mov	r6, r0
 80239c0:	db01      	blt.n	80239c6 <_malloc_r+0x1a>
 80239c2:	42a9      	cmp	r1, r5
 80239c4:	d903      	bls.n	80239ce <_malloc_r+0x22>
 80239c6:	230c      	movs	r3, #12
 80239c8:	6033      	str	r3, [r6, #0]
 80239ca:	2000      	movs	r0, #0
 80239cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80239ce:	f000 fbb9 	bl	8024144 <__malloc_lock>
 80239d2:	4921      	ldr	r1, [pc, #132]	; (8023a58 <_malloc_r+0xac>)
 80239d4:	680a      	ldr	r2, [r1, #0]
 80239d6:	4614      	mov	r4, r2
 80239d8:	b99c      	cbnz	r4, 8023a02 <_malloc_r+0x56>
 80239da:	4f20      	ldr	r7, [pc, #128]	; (8023a5c <_malloc_r+0xb0>)
 80239dc:	683b      	ldr	r3, [r7, #0]
 80239de:	b923      	cbnz	r3, 80239ea <_malloc_r+0x3e>
 80239e0:	4621      	mov	r1, r4
 80239e2:	4630      	mov	r0, r6
 80239e4:	f000 faf2 	bl	8023fcc <_sbrk_r>
 80239e8:	6038      	str	r0, [r7, #0]
 80239ea:	4629      	mov	r1, r5
 80239ec:	4630      	mov	r0, r6
 80239ee:	f000 faed 	bl	8023fcc <_sbrk_r>
 80239f2:	1c43      	adds	r3, r0, #1
 80239f4:	d123      	bne.n	8023a3e <_malloc_r+0x92>
 80239f6:	230c      	movs	r3, #12
 80239f8:	6033      	str	r3, [r6, #0]
 80239fa:	4630      	mov	r0, r6
 80239fc:	f000 fba8 	bl	8024150 <__malloc_unlock>
 8023a00:	e7e3      	b.n	80239ca <_malloc_r+0x1e>
 8023a02:	6823      	ldr	r3, [r4, #0]
 8023a04:	1b5b      	subs	r3, r3, r5
 8023a06:	d417      	bmi.n	8023a38 <_malloc_r+0x8c>
 8023a08:	2b0b      	cmp	r3, #11
 8023a0a:	d903      	bls.n	8023a14 <_malloc_r+0x68>
 8023a0c:	6023      	str	r3, [r4, #0]
 8023a0e:	441c      	add	r4, r3
 8023a10:	6025      	str	r5, [r4, #0]
 8023a12:	e004      	b.n	8023a1e <_malloc_r+0x72>
 8023a14:	6863      	ldr	r3, [r4, #4]
 8023a16:	42a2      	cmp	r2, r4
 8023a18:	bf0c      	ite	eq
 8023a1a:	600b      	streq	r3, [r1, #0]
 8023a1c:	6053      	strne	r3, [r2, #4]
 8023a1e:	4630      	mov	r0, r6
 8023a20:	f000 fb96 	bl	8024150 <__malloc_unlock>
 8023a24:	f104 000b 	add.w	r0, r4, #11
 8023a28:	1d23      	adds	r3, r4, #4
 8023a2a:	f020 0007 	bic.w	r0, r0, #7
 8023a2e:	1ac2      	subs	r2, r0, r3
 8023a30:	d0cc      	beq.n	80239cc <_malloc_r+0x20>
 8023a32:	1a1b      	subs	r3, r3, r0
 8023a34:	50a3      	str	r3, [r4, r2]
 8023a36:	e7c9      	b.n	80239cc <_malloc_r+0x20>
 8023a38:	4622      	mov	r2, r4
 8023a3a:	6864      	ldr	r4, [r4, #4]
 8023a3c:	e7cc      	b.n	80239d8 <_malloc_r+0x2c>
 8023a3e:	1cc4      	adds	r4, r0, #3
 8023a40:	f024 0403 	bic.w	r4, r4, #3
 8023a44:	42a0      	cmp	r0, r4
 8023a46:	d0e3      	beq.n	8023a10 <_malloc_r+0x64>
 8023a48:	1a21      	subs	r1, r4, r0
 8023a4a:	4630      	mov	r0, r6
 8023a4c:	f000 fabe 	bl	8023fcc <_sbrk_r>
 8023a50:	3001      	adds	r0, #1
 8023a52:	d1dd      	bne.n	8023a10 <_malloc_r+0x64>
 8023a54:	e7cf      	b.n	80239f6 <_malloc_r+0x4a>
 8023a56:	bf00      	nop
 8023a58:	2400982c 	.word	0x2400982c
 8023a5c:	24009830 	.word	0x24009830

08023a60 <__ssputs_r>:
 8023a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a64:	688e      	ldr	r6, [r1, #8]
 8023a66:	429e      	cmp	r6, r3
 8023a68:	4682      	mov	sl, r0
 8023a6a:	460c      	mov	r4, r1
 8023a6c:	4690      	mov	r8, r2
 8023a6e:	461f      	mov	r7, r3
 8023a70:	d838      	bhi.n	8023ae4 <__ssputs_r+0x84>
 8023a72:	898a      	ldrh	r2, [r1, #12]
 8023a74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023a78:	d032      	beq.n	8023ae0 <__ssputs_r+0x80>
 8023a7a:	6825      	ldr	r5, [r4, #0]
 8023a7c:	6909      	ldr	r1, [r1, #16]
 8023a7e:	eba5 0901 	sub.w	r9, r5, r1
 8023a82:	6965      	ldr	r5, [r4, #20]
 8023a84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023a88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023a8c:	3301      	adds	r3, #1
 8023a8e:	444b      	add	r3, r9
 8023a90:	106d      	asrs	r5, r5, #1
 8023a92:	429d      	cmp	r5, r3
 8023a94:	bf38      	it	cc
 8023a96:	461d      	movcc	r5, r3
 8023a98:	0553      	lsls	r3, r2, #21
 8023a9a:	d531      	bpl.n	8023b00 <__ssputs_r+0xa0>
 8023a9c:	4629      	mov	r1, r5
 8023a9e:	f7ff ff85 	bl	80239ac <_malloc_r>
 8023aa2:	4606      	mov	r6, r0
 8023aa4:	b950      	cbnz	r0, 8023abc <__ssputs_r+0x5c>
 8023aa6:	230c      	movs	r3, #12
 8023aa8:	f8ca 3000 	str.w	r3, [sl]
 8023aac:	89a3      	ldrh	r3, [r4, #12]
 8023aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023ab2:	81a3      	strh	r3, [r4, #12]
 8023ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023abc:	6921      	ldr	r1, [r4, #16]
 8023abe:	464a      	mov	r2, r9
 8023ac0:	f7fd fcba 	bl	8021438 <memcpy>
 8023ac4:	89a3      	ldrh	r3, [r4, #12]
 8023ac6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023ace:	81a3      	strh	r3, [r4, #12]
 8023ad0:	6126      	str	r6, [r4, #16]
 8023ad2:	6165      	str	r5, [r4, #20]
 8023ad4:	444e      	add	r6, r9
 8023ad6:	eba5 0509 	sub.w	r5, r5, r9
 8023ada:	6026      	str	r6, [r4, #0]
 8023adc:	60a5      	str	r5, [r4, #8]
 8023ade:	463e      	mov	r6, r7
 8023ae0:	42be      	cmp	r6, r7
 8023ae2:	d900      	bls.n	8023ae6 <__ssputs_r+0x86>
 8023ae4:	463e      	mov	r6, r7
 8023ae6:	4632      	mov	r2, r6
 8023ae8:	6820      	ldr	r0, [r4, #0]
 8023aea:	4641      	mov	r1, r8
 8023aec:	f7fd fcb2 	bl	8021454 <memmove>
 8023af0:	68a3      	ldr	r3, [r4, #8]
 8023af2:	6822      	ldr	r2, [r4, #0]
 8023af4:	1b9b      	subs	r3, r3, r6
 8023af6:	4432      	add	r2, r6
 8023af8:	60a3      	str	r3, [r4, #8]
 8023afa:	6022      	str	r2, [r4, #0]
 8023afc:	2000      	movs	r0, #0
 8023afe:	e7db      	b.n	8023ab8 <__ssputs_r+0x58>
 8023b00:	462a      	mov	r2, r5
 8023b02:	f000 fb2b 	bl	802415c <_realloc_r>
 8023b06:	4606      	mov	r6, r0
 8023b08:	2800      	cmp	r0, #0
 8023b0a:	d1e1      	bne.n	8023ad0 <__ssputs_r+0x70>
 8023b0c:	6921      	ldr	r1, [r4, #16]
 8023b0e:	4650      	mov	r0, sl
 8023b10:	f7ff fefc 	bl	802390c <_free_r>
 8023b14:	e7c7      	b.n	8023aa6 <__ssputs_r+0x46>
	...

08023b18 <_svfiprintf_r>:
 8023b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b1c:	4698      	mov	r8, r3
 8023b1e:	898b      	ldrh	r3, [r1, #12]
 8023b20:	061b      	lsls	r3, r3, #24
 8023b22:	b09d      	sub	sp, #116	; 0x74
 8023b24:	4607      	mov	r7, r0
 8023b26:	460d      	mov	r5, r1
 8023b28:	4614      	mov	r4, r2
 8023b2a:	d50e      	bpl.n	8023b4a <_svfiprintf_r+0x32>
 8023b2c:	690b      	ldr	r3, [r1, #16]
 8023b2e:	b963      	cbnz	r3, 8023b4a <_svfiprintf_r+0x32>
 8023b30:	2140      	movs	r1, #64	; 0x40
 8023b32:	f7ff ff3b 	bl	80239ac <_malloc_r>
 8023b36:	6028      	str	r0, [r5, #0]
 8023b38:	6128      	str	r0, [r5, #16]
 8023b3a:	b920      	cbnz	r0, 8023b46 <_svfiprintf_r+0x2e>
 8023b3c:	230c      	movs	r3, #12
 8023b3e:	603b      	str	r3, [r7, #0]
 8023b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023b44:	e0d1      	b.n	8023cea <_svfiprintf_r+0x1d2>
 8023b46:	2340      	movs	r3, #64	; 0x40
 8023b48:	616b      	str	r3, [r5, #20]
 8023b4a:	2300      	movs	r3, #0
 8023b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8023b4e:	2320      	movs	r3, #32
 8023b50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8023b58:	2330      	movs	r3, #48	; 0x30
 8023b5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023d04 <_svfiprintf_r+0x1ec>
 8023b5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023b62:	f04f 0901 	mov.w	r9, #1
 8023b66:	4623      	mov	r3, r4
 8023b68:	469a      	mov	sl, r3
 8023b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023b6e:	b10a      	cbz	r2, 8023b74 <_svfiprintf_r+0x5c>
 8023b70:	2a25      	cmp	r2, #37	; 0x25
 8023b72:	d1f9      	bne.n	8023b68 <_svfiprintf_r+0x50>
 8023b74:	ebba 0b04 	subs.w	fp, sl, r4
 8023b78:	d00b      	beq.n	8023b92 <_svfiprintf_r+0x7a>
 8023b7a:	465b      	mov	r3, fp
 8023b7c:	4622      	mov	r2, r4
 8023b7e:	4629      	mov	r1, r5
 8023b80:	4638      	mov	r0, r7
 8023b82:	f7ff ff6d 	bl	8023a60 <__ssputs_r>
 8023b86:	3001      	adds	r0, #1
 8023b88:	f000 80aa 	beq.w	8023ce0 <_svfiprintf_r+0x1c8>
 8023b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023b8e:	445a      	add	r2, fp
 8023b90:	9209      	str	r2, [sp, #36]	; 0x24
 8023b92:	f89a 3000 	ldrb.w	r3, [sl]
 8023b96:	2b00      	cmp	r3, #0
 8023b98:	f000 80a2 	beq.w	8023ce0 <_svfiprintf_r+0x1c8>
 8023b9c:	2300      	movs	r3, #0
 8023b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023ba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023ba6:	f10a 0a01 	add.w	sl, sl, #1
 8023baa:	9304      	str	r3, [sp, #16]
 8023bac:	9307      	str	r3, [sp, #28]
 8023bae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023bb2:	931a      	str	r3, [sp, #104]	; 0x68
 8023bb4:	4654      	mov	r4, sl
 8023bb6:	2205      	movs	r2, #5
 8023bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023bbc:	4851      	ldr	r0, [pc, #324]	; (8023d04 <_svfiprintf_r+0x1ec>)
 8023bbe:	f7dc fb8f 	bl	80002e0 <memchr>
 8023bc2:	9a04      	ldr	r2, [sp, #16]
 8023bc4:	b9d8      	cbnz	r0, 8023bfe <_svfiprintf_r+0xe6>
 8023bc6:	06d0      	lsls	r0, r2, #27
 8023bc8:	bf44      	itt	mi
 8023bca:	2320      	movmi	r3, #32
 8023bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023bd0:	0711      	lsls	r1, r2, #28
 8023bd2:	bf44      	itt	mi
 8023bd4:	232b      	movmi	r3, #43	; 0x2b
 8023bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023bda:	f89a 3000 	ldrb.w	r3, [sl]
 8023bde:	2b2a      	cmp	r3, #42	; 0x2a
 8023be0:	d015      	beq.n	8023c0e <_svfiprintf_r+0xf6>
 8023be2:	9a07      	ldr	r2, [sp, #28]
 8023be4:	4654      	mov	r4, sl
 8023be6:	2000      	movs	r0, #0
 8023be8:	f04f 0c0a 	mov.w	ip, #10
 8023bec:	4621      	mov	r1, r4
 8023bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023bf2:	3b30      	subs	r3, #48	; 0x30
 8023bf4:	2b09      	cmp	r3, #9
 8023bf6:	d94e      	bls.n	8023c96 <_svfiprintf_r+0x17e>
 8023bf8:	b1b0      	cbz	r0, 8023c28 <_svfiprintf_r+0x110>
 8023bfa:	9207      	str	r2, [sp, #28]
 8023bfc:	e014      	b.n	8023c28 <_svfiprintf_r+0x110>
 8023bfe:	eba0 0308 	sub.w	r3, r0, r8
 8023c02:	fa09 f303 	lsl.w	r3, r9, r3
 8023c06:	4313      	orrs	r3, r2
 8023c08:	9304      	str	r3, [sp, #16]
 8023c0a:	46a2      	mov	sl, r4
 8023c0c:	e7d2      	b.n	8023bb4 <_svfiprintf_r+0x9c>
 8023c0e:	9b03      	ldr	r3, [sp, #12]
 8023c10:	1d19      	adds	r1, r3, #4
 8023c12:	681b      	ldr	r3, [r3, #0]
 8023c14:	9103      	str	r1, [sp, #12]
 8023c16:	2b00      	cmp	r3, #0
 8023c18:	bfbb      	ittet	lt
 8023c1a:	425b      	neglt	r3, r3
 8023c1c:	f042 0202 	orrlt.w	r2, r2, #2
 8023c20:	9307      	strge	r3, [sp, #28]
 8023c22:	9307      	strlt	r3, [sp, #28]
 8023c24:	bfb8      	it	lt
 8023c26:	9204      	strlt	r2, [sp, #16]
 8023c28:	7823      	ldrb	r3, [r4, #0]
 8023c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8023c2c:	d10c      	bne.n	8023c48 <_svfiprintf_r+0x130>
 8023c2e:	7863      	ldrb	r3, [r4, #1]
 8023c30:	2b2a      	cmp	r3, #42	; 0x2a
 8023c32:	d135      	bne.n	8023ca0 <_svfiprintf_r+0x188>
 8023c34:	9b03      	ldr	r3, [sp, #12]
 8023c36:	1d1a      	adds	r2, r3, #4
 8023c38:	681b      	ldr	r3, [r3, #0]
 8023c3a:	9203      	str	r2, [sp, #12]
 8023c3c:	2b00      	cmp	r3, #0
 8023c3e:	bfb8      	it	lt
 8023c40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023c44:	3402      	adds	r4, #2
 8023c46:	9305      	str	r3, [sp, #20]
 8023c48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8023d14 <_svfiprintf_r+0x1fc>
 8023c4c:	7821      	ldrb	r1, [r4, #0]
 8023c4e:	2203      	movs	r2, #3
 8023c50:	4650      	mov	r0, sl
 8023c52:	f7dc fb45 	bl	80002e0 <memchr>
 8023c56:	b140      	cbz	r0, 8023c6a <_svfiprintf_r+0x152>
 8023c58:	2340      	movs	r3, #64	; 0x40
 8023c5a:	eba0 000a 	sub.w	r0, r0, sl
 8023c5e:	fa03 f000 	lsl.w	r0, r3, r0
 8023c62:	9b04      	ldr	r3, [sp, #16]
 8023c64:	4303      	orrs	r3, r0
 8023c66:	3401      	adds	r4, #1
 8023c68:	9304      	str	r3, [sp, #16]
 8023c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023c6e:	4826      	ldr	r0, [pc, #152]	; (8023d08 <_svfiprintf_r+0x1f0>)
 8023c70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023c74:	2206      	movs	r2, #6
 8023c76:	f7dc fb33 	bl	80002e0 <memchr>
 8023c7a:	2800      	cmp	r0, #0
 8023c7c:	d038      	beq.n	8023cf0 <_svfiprintf_r+0x1d8>
 8023c7e:	4b23      	ldr	r3, [pc, #140]	; (8023d0c <_svfiprintf_r+0x1f4>)
 8023c80:	bb1b      	cbnz	r3, 8023cca <_svfiprintf_r+0x1b2>
 8023c82:	9b03      	ldr	r3, [sp, #12]
 8023c84:	3307      	adds	r3, #7
 8023c86:	f023 0307 	bic.w	r3, r3, #7
 8023c8a:	3308      	adds	r3, #8
 8023c8c:	9303      	str	r3, [sp, #12]
 8023c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c90:	4433      	add	r3, r6
 8023c92:	9309      	str	r3, [sp, #36]	; 0x24
 8023c94:	e767      	b.n	8023b66 <_svfiprintf_r+0x4e>
 8023c96:	fb0c 3202 	mla	r2, ip, r2, r3
 8023c9a:	460c      	mov	r4, r1
 8023c9c:	2001      	movs	r0, #1
 8023c9e:	e7a5      	b.n	8023bec <_svfiprintf_r+0xd4>
 8023ca0:	2300      	movs	r3, #0
 8023ca2:	3401      	adds	r4, #1
 8023ca4:	9305      	str	r3, [sp, #20]
 8023ca6:	4619      	mov	r1, r3
 8023ca8:	f04f 0c0a 	mov.w	ip, #10
 8023cac:	4620      	mov	r0, r4
 8023cae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023cb2:	3a30      	subs	r2, #48	; 0x30
 8023cb4:	2a09      	cmp	r2, #9
 8023cb6:	d903      	bls.n	8023cc0 <_svfiprintf_r+0x1a8>
 8023cb8:	2b00      	cmp	r3, #0
 8023cba:	d0c5      	beq.n	8023c48 <_svfiprintf_r+0x130>
 8023cbc:	9105      	str	r1, [sp, #20]
 8023cbe:	e7c3      	b.n	8023c48 <_svfiprintf_r+0x130>
 8023cc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8023cc4:	4604      	mov	r4, r0
 8023cc6:	2301      	movs	r3, #1
 8023cc8:	e7f0      	b.n	8023cac <_svfiprintf_r+0x194>
 8023cca:	ab03      	add	r3, sp, #12
 8023ccc:	9300      	str	r3, [sp, #0]
 8023cce:	462a      	mov	r2, r5
 8023cd0:	4b0f      	ldr	r3, [pc, #60]	; (8023d10 <_svfiprintf_r+0x1f8>)
 8023cd2:	a904      	add	r1, sp, #16
 8023cd4:	4638      	mov	r0, r7
 8023cd6:	f7fd fc6f 	bl	80215b8 <_printf_float>
 8023cda:	1c42      	adds	r2, r0, #1
 8023cdc:	4606      	mov	r6, r0
 8023cde:	d1d6      	bne.n	8023c8e <_svfiprintf_r+0x176>
 8023ce0:	89ab      	ldrh	r3, [r5, #12]
 8023ce2:	065b      	lsls	r3, r3, #25
 8023ce4:	f53f af2c 	bmi.w	8023b40 <_svfiprintf_r+0x28>
 8023ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023cea:	b01d      	add	sp, #116	; 0x74
 8023cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cf0:	ab03      	add	r3, sp, #12
 8023cf2:	9300      	str	r3, [sp, #0]
 8023cf4:	462a      	mov	r2, r5
 8023cf6:	4b06      	ldr	r3, [pc, #24]	; (8023d10 <_svfiprintf_r+0x1f8>)
 8023cf8:	a904      	add	r1, sp, #16
 8023cfa:	4638      	mov	r0, r7
 8023cfc:	f7fd fee8 	bl	8021ad0 <_printf_i>
 8023d00:	e7eb      	b.n	8023cda <_svfiprintf_r+0x1c2>
 8023d02:	bf00      	nop
 8023d04:	08028b74 	.word	0x08028b74
 8023d08:	08028b7e 	.word	0x08028b7e
 8023d0c:	080215b9 	.word	0x080215b9
 8023d10:	08023a61 	.word	0x08023a61
 8023d14:	08028b7a 	.word	0x08028b7a

08023d18 <__sfputc_r>:
 8023d18:	6893      	ldr	r3, [r2, #8]
 8023d1a:	3b01      	subs	r3, #1
 8023d1c:	2b00      	cmp	r3, #0
 8023d1e:	b410      	push	{r4}
 8023d20:	6093      	str	r3, [r2, #8]
 8023d22:	da08      	bge.n	8023d36 <__sfputc_r+0x1e>
 8023d24:	6994      	ldr	r4, [r2, #24]
 8023d26:	42a3      	cmp	r3, r4
 8023d28:	db01      	blt.n	8023d2e <__sfputc_r+0x16>
 8023d2a:	290a      	cmp	r1, #10
 8023d2c:	d103      	bne.n	8023d36 <__sfputc_r+0x1e>
 8023d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023d32:	f7fe b8cf 	b.w	8021ed4 <__swbuf_r>
 8023d36:	6813      	ldr	r3, [r2, #0]
 8023d38:	1c58      	adds	r0, r3, #1
 8023d3a:	6010      	str	r0, [r2, #0]
 8023d3c:	7019      	strb	r1, [r3, #0]
 8023d3e:	4608      	mov	r0, r1
 8023d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023d44:	4770      	bx	lr

08023d46 <__sfputs_r>:
 8023d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023d48:	4606      	mov	r6, r0
 8023d4a:	460f      	mov	r7, r1
 8023d4c:	4614      	mov	r4, r2
 8023d4e:	18d5      	adds	r5, r2, r3
 8023d50:	42ac      	cmp	r4, r5
 8023d52:	d101      	bne.n	8023d58 <__sfputs_r+0x12>
 8023d54:	2000      	movs	r0, #0
 8023d56:	e007      	b.n	8023d68 <__sfputs_r+0x22>
 8023d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023d5c:	463a      	mov	r2, r7
 8023d5e:	4630      	mov	r0, r6
 8023d60:	f7ff ffda 	bl	8023d18 <__sfputc_r>
 8023d64:	1c43      	adds	r3, r0, #1
 8023d66:	d1f3      	bne.n	8023d50 <__sfputs_r+0xa>
 8023d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023d6c <_vfiprintf_r>:
 8023d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d70:	460d      	mov	r5, r1
 8023d72:	b09d      	sub	sp, #116	; 0x74
 8023d74:	4614      	mov	r4, r2
 8023d76:	4698      	mov	r8, r3
 8023d78:	4606      	mov	r6, r0
 8023d7a:	b118      	cbz	r0, 8023d84 <_vfiprintf_r+0x18>
 8023d7c:	6983      	ldr	r3, [r0, #24]
 8023d7e:	b90b      	cbnz	r3, 8023d84 <_vfiprintf_r+0x18>
 8023d80:	f7ff f912 	bl	8022fa8 <__sinit>
 8023d84:	4b89      	ldr	r3, [pc, #548]	; (8023fac <_vfiprintf_r+0x240>)
 8023d86:	429d      	cmp	r5, r3
 8023d88:	d11b      	bne.n	8023dc2 <_vfiprintf_r+0x56>
 8023d8a:	6875      	ldr	r5, [r6, #4]
 8023d8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023d8e:	07d9      	lsls	r1, r3, #31
 8023d90:	d405      	bmi.n	8023d9e <_vfiprintf_r+0x32>
 8023d92:	89ab      	ldrh	r3, [r5, #12]
 8023d94:	059a      	lsls	r2, r3, #22
 8023d96:	d402      	bmi.n	8023d9e <_vfiprintf_r+0x32>
 8023d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023d9a:	f7ff f9ba 	bl	8023112 <__retarget_lock_acquire_recursive>
 8023d9e:	89ab      	ldrh	r3, [r5, #12]
 8023da0:	071b      	lsls	r3, r3, #28
 8023da2:	d501      	bpl.n	8023da8 <_vfiprintf_r+0x3c>
 8023da4:	692b      	ldr	r3, [r5, #16]
 8023da6:	b9eb      	cbnz	r3, 8023de4 <_vfiprintf_r+0x78>
 8023da8:	4629      	mov	r1, r5
 8023daa:	4630      	mov	r0, r6
 8023dac:	f7fe f8e4 	bl	8021f78 <__swsetup_r>
 8023db0:	b1c0      	cbz	r0, 8023de4 <_vfiprintf_r+0x78>
 8023db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023db4:	07dc      	lsls	r4, r3, #31
 8023db6:	d50e      	bpl.n	8023dd6 <_vfiprintf_r+0x6a>
 8023db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023dbc:	b01d      	add	sp, #116	; 0x74
 8023dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023dc2:	4b7b      	ldr	r3, [pc, #492]	; (8023fb0 <_vfiprintf_r+0x244>)
 8023dc4:	429d      	cmp	r5, r3
 8023dc6:	d101      	bne.n	8023dcc <_vfiprintf_r+0x60>
 8023dc8:	68b5      	ldr	r5, [r6, #8]
 8023dca:	e7df      	b.n	8023d8c <_vfiprintf_r+0x20>
 8023dcc:	4b79      	ldr	r3, [pc, #484]	; (8023fb4 <_vfiprintf_r+0x248>)
 8023dce:	429d      	cmp	r5, r3
 8023dd0:	bf08      	it	eq
 8023dd2:	68f5      	ldreq	r5, [r6, #12]
 8023dd4:	e7da      	b.n	8023d8c <_vfiprintf_r+0x20>
 8023dd6:	89ab      	ldrh	r3, [r5, #12]
 8023dd8:	0598      	lsls	r0, r3, #22
 8023dda:	d4ed      	bmi.n	8023db8 <_vfiprintf_r+0x4c>
 8023ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023dde:	f7ff f99a 	bl	8023116 <__retarget_lock_release_recursive>
 8023de2:	e7e9      	b.n	8023db8 <_vfiprintf_r+0x4c>
 8023de4:	2300      	movs	r3, #0
 8023de6:	9309      	str	r3, [sp, #36]	; 0x24
 8023de8:	2320      	movs	r3, #32
 8023dea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8023df2:	2330      	movs	r3, #48	; 0x30
 8023df4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023fb8 <_vfiprintf_r+0x24c>
 8023df8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023dfc:	f04f 0901 	mov.w	r9, #1
 8023e00:	4623      	mov	r3, r4
 8023e02:	469a      	mov	sl, r3
 8023e04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023e08:	b10a      	cbz	r2, 8023e0e <_vfiprintf_r+0xa2>
 8023e0a:	2a25      	cmp	r2, #37	; 0x25
 8023e0c:	d1f9      	bne.n	8023e02 <_vfiprintf_r+0x96>
 8023e0e:	ebba 0b04 	subs.w	fp, sl, r4
 8023e12:	d00b      	beq.n	8023e2c <_vfiprintf_r+0xc0>
 8023e14:	465b      	mov	r3, fp
 8023e16:	4622      	mov	r2, r4
 8023e18:	4629      	mov	r1, r5
 8023e1a:	4630      	mov	r0, r6
 8023e1c:	f7ff ff93 	bl	8023d46 <__sfputs_r>
 8023e20:	3001      	adds	r0, #1
 8023e22:	f000 80aa 	beq.w	8023f7a <_vfiprintf_r+0x20e>
 8023e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023e28:	445a      	add	r2, fp
 8023e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8023e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8023e30:	2b00      	cmp	r3, #0
 8023e32:	f000 80a2 	beq.w	8023f7a <_vfiprintf_r+0x20e>
 8023e36:	2300      	movs	r3, #0
 8023e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023e40:	f10a 0a01 	add.w	sl, sl, #1
 8023e44:	9304      	str	r3, [sp, #16]
 8023e46:	9307      	str	r3, [sp, #28]
 8023e48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023e4c:	931a      	str	r3, [sp, #104]	; 0x68
 8023e4e:	4654      	mov	r4, sl
 8023e50:	2205      	movs	r2, #5
 8023e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023e56:	4858      	ldr	r0, [pc, #352]	; (8023fb8 <_vfiprintf_r+0x24c>)
 8023e58:	f7dc fa42 	bl	80002e0 <memchr>
 8023e5c:	9a04      	ldr	r2, [sp, #16]
 8023e5e:	b9d8      	cbnz	r0, 8023e98 <_vfiprintf_r+0x12c>
 8023e60:	06d1      	lsls	r1, r2, #27
 8023e62:	bf44      	itt	mi
 8023e64:	2320      	movmi	r3, #32
 8023e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023e6a:	0713      	lsls	r3, r2, #28
 8023e6c:	bf44      	itt	mi
 8023e6e:	232b      	movmi	r3, #43	; 0x2b
 8023e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023e74:	f89a 3000 	ldrb.w	r3, [sl]
 8023e78:	2b2a      	cmp	r3, #42	; 0x2a
 8023e7a:	d015      	beq.n	8023ea8 <_vfiprintf_r+0x13c>
 8023e7c:	9a07      	ldr	r2, [sp, #28]
 8023e7e:	4654      	mov	r4, sl
 8023e80:	2000      	movs	r0, #0
 8023e82:	f04f 0c0a 	mov.w	ip, #10
 8023e86:	4621      	mov	r1, r4
 8023e88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023e8c:	3b30      	subs	r3, #48	; 0x30
 8023e8e:	2b09      	cmp	r3, #9
 8023e90:	d94e      	bls.n	8023f30 <_vfiprintf_r+0x1c4>
 8023e92:	b1b0      	cbz	r0, 8023ec2 <_vfiprintf_r+0x156>
 8023e94:	9207      	str	r2, [sp, #28]
 8023e96:	e014      	b.n	8023ec2 <_vfiprintf_r+0x156>
 8023e98:	eba0 0308 	sub.w	r3, r0, r8
 8023e9c:	fa09 f303 	lsl.w	r3, r9, r3
 8023ea0:	4313      	orrs	r3, r2
 8023ea2:	9304      	str	r3, [sp, #16]
 8023ea4:	46a2      	mov	sl, r4
 8023ea6:	e7d2      	b.n	8023e4e <_vfiprintf_r+0xe2>
 8023ea8:	9b03      	ldr	r3, [sp, #12]
 8023eaa:	1d19      	adds	r1, r3, #4
 8023eac:	681b      	ldr	r3, [r3, #0]
 8023eae:	9103      	str	r1, [sp, #12]
 8023eb0:	2b00      	cmp	r3, #0
 8023eb2:	bfbb      	ittet	lt
 8023eb4:	425b      	neglt	r3, r3
 8023eb6:	f042 0202 	orrlt.w	r2, r2, #2
 8023eba:	9307      	strge	r3, [sp, #28]
 8023ebc:	9307      	strlt	r3, [sp, #28]
 8023ebe:	bfb8      	it	lt
 8023ec0:	9204      	strlt	r2, [sp, #16]
 8023ec2:	7823      	ldrb	r3, [r4, #0]
 8023ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8023ec6:	d10c      	bne.n	8023ee2 <_vfiprintf_r+0x176>
 8023ec8:	7863      	ldrb	r3, [r4, #1]
 8023eca:	2b2a      	cmp	r3, #42	; 0x2a
 8023ecc:	d135      	bne.n	8023f3a <_vfiprintf_r+0x1ce>
 8023ece:	9b03      	ldr	r3, [sp, #12]
 8023ed0:	1d1a      	adds	r2, r3, #4
 8023ed2:	681b      	ldr	r3, [r3, #0]
 8023ed4:	9203      	str	r2, [sp, #12]
 8023ed6:	2b00      	cmp	r3, #0
 8023ed8:	bfb8      	it	lt
 8023eda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023ede:	3402      	adds	r4, #2
 8023ee0:	9305      	str	r3, [sp, #20]
 8023ee2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023fc8 <_vfiprintf_r+0x25c>
 8023ee6:	7821      	ldrb	r1, [r4, #0]
 8023ee8:	2203      	movs	r2, #3
 8023eea:	4650      	mov	r0, sl
 8023eec:	f7dc f9f8 	bl	80002e0 <memchr>
 8023ef0:	b140      	cbz	r0, 8023f04 <_vfiprintf_r+0x198>
 8023ef2:	2340      	movs	r3, #64	; 0x40
 8023ef4:	eba0 000a 	sub.w	r0, r0, sl
 8023ef8:	fa03 f000 	lsl.w	r0, r3, r0
 8023efc:	9b04      	ldr	r3, [sp, #16]
 8023efe:	4303      	orrs	r3, r0
 8023f00:	3401      	adds	r4, #1
 8023f02:	9304      	str	r3, [sp, #16]
 8023f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023f08:	482c      	ldr	r0, [pc, #176]	; (8023fbc <_vfiprintf_r+0x250>)
 8023f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023f0e:	2206      	movs	r2, #6
 8023f10:	f7dc f9e6 	bl	80002e0 <memchr>
 8023f14:	2800      	cmp	r0, #0
 8023f16:	d03f      	beq.n	8023f98 <_vfiprintf_r+0x22c>
 8023f18:	4b29      	ldr	r3, [pc, #164]	; (8023fc0 <_vfiprintf_r+0x254>)
 8023f1a:	bb1b      	cbnz	r3, 8023f64 <_vfiprintf_r+0x1f8>
 8023f1c:	9b03      	ldr	r3, [sp, #12]
 8023f1e:	3307      	adds	r3, #7
 8023f20:	f023 0307 	bic.w	r3, r3, #7
 8023f24:	3308      	adds	r3, #8
 8023f26:	9303      	str	r3, [sp, #12]
 8023f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f2a:	443b      	add	r3, r7
 8023f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8023f2e:	e767      	b.n	8023e00 <_vfiprintf_r+0x94>
 8023f30:	fb0c 3202 	mla	r2, ip, r2, r3
 8023f34:	460c      	mov	r4, r1
 8023f36:	2001      	movs	r0, #1
 8023f38:	e7a5      	b.n	8023e86 <_vfiprintf_r+0x11a>
 8023f3a:	2300      	movs	r3, #0
 8023f3c:	3401      	adds	r4, #1
 8023f3e:	9305      	str	r3, [sp, #20]
 8023f40:	4619      	mov	r1, r3
 8023f42:	f04f 0c0a 	mov.w	ip, #10
 8023f46:	4620      	mov	r0, r4
 8023f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023f4c:	3a30      	subs	r2, #48	; 0x30
 8023f4e:	2a09      	cmp	r2, #9
 8023f50:	d903      	bls.n	8023f5a <_vfiprintf_r+0x1ee>
 8023f52:	2b00      	cmp	r3, #0
 8023f54:	d0c5      	beq.n	8023ee2 <_vfiprintf_r+0x176>
 8023f56:	9105      	str	r1, [sp, #20]
 8023f58:	e7c3      	b.n	8023ee2 <_vfiprintf_r+0x176>
 8023f5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8023f5e:	4604      	mov	r4, r0
 8023f60:	2301      	movs	r3, #1
 8023f62:	e7f0      	b.n	8023f46 <_vfiprintf_r+0x1da>
 8023f64:	ab03      	add	r3, sp, #12
 8023f66:	9300      	str	r3, [sp, #0]
 8023f68:	462a      	mov	r2, r5
 8023f6a:	4b16      	ldr	r3, [pc, #88]	; (8023fc4 <_vfiprintf_r+0x258>)
 8023f6c:	a904      	add	r1, sp, #16
 8023f6e:	4630      	mov	r0, r6
 8023f70:	f7fd fb22 	bl	80215b8 <_printf_float>
 8023f74:	4607      	mov	r7, r0
 8023f76:	1c78      	adds	r0, r7, #1
 8023f78:	d1d6      	bne.n	8023f28 <_vfiprintf_r+0x1bc>
 8023f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023f7c:	07d9      	lsls	r1, r3, #31
 8023f7e:	d405      	bmi.n	8023f8c <_vfiprintf_r+0x220>
 8023f80:	89ab      	ldrh	r3, [r5, #12]
 8023f82:	059a      	lsls	r2, r3, #22
 8023f84:	d402      	bmi.n	8023f8c <_vfiprintf_r+0x220>
 8023f86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023f88:	f7ff f8c5 	bl	8023116 <__retarget_lock_release_recursive>
 8023f8c:	89ab      	ldrh	r3, [r5, #12]
 8023f8e:	065b      	lsls	r3, r3, #25
 8023f90:	f53f af12 	bmi.w	8023db8 <_vfiprintf_r+0x4c>
 8023f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023f96:	e711      	b.n	8023dbc <_vfiprintf_r+0x50>
 8023f98:	ab03      	add	r3, sp, #12
 8023f9a:	9300      	str	r3, [sp, #0]
 8023f9c:	462a      	mov	r2, r5
 8023f9e:	4b09      	ldr	r3, [pc, #36]	; (8023fc4 <_vfiprintf_r+0x258>)
 8023fa0:	a904      	add	r1, sp, #16
 8023fa2:	4630      	mov	r0, r6
 8023fa4:	f7fd fd94 	bl	8021ad0 <_printf_i>
 8023fa8:	e7e4      	b.n	8023f74 <_vfiprintf_r+0x208>
 8023faa:	bf00      	nop
 8023fac:	080289d8 	.word	0x080289d8
 8023fb0:	080289f8 	.word	0x080289f8
 8023fb4:	080289b8 	.word	0x080289b8
 8023fb8:	08028b74 	.word	0x08028b74
 8023fbc:	08028b7e 	.word	0x08028b7e
 8023fc0:	080215b9 	.word	0x080215b9
 8023fc4:	08023d47 	.word	0x08023d47
 8023fc8:	08028b7a 	.word	0x08028b7a

08023fcc <_sbrk_r>:
 8023fcc:	b538      	push	{r3, r4, r5, lr}
 8023fce:	4d06      	ldr	r5, [pc, #24]	; (8023fe8 <_sbrk_r+0x1c>)
 8023fd0:	2300      	movs	r3, #0
 8023fd2:	4604      	mov	r4, r0
 8023fd4:	4608      	mov	r0, r1
 8023fd6:	602b      	str	r3, [r5, #0]
 8023fd8:	f7dd fa8c 	bl	80014f4 <_sbrk>
 8023fdc:	1c43      	adds	r3, r0, #1
 8023fde:	d102      	bne.n	8023fe6 <_sbrk_r+0x1a>
 8023fe0:	682b      	ldr	r3, [r5, #0]
 8023fe2:	b103      	cbz	r3, 8023fe6 <_sbrk_r+0x1a>
 8023fe4:	6023      	str	r3, [r4, #0]
 8023fe6:	bd38      	pop	{r3, r4, r5, pc}
 8023fe8:	2400d240 	.word	0x2400d240

08023fec <__sread>:
 8023fec:	b510      	push	{r4, lr}
 8023fee:	460c      	mov	r4, r1
 8023ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023ff4:	f000 f8d8 	bl	80241a8 <_read_r>
 8023ff8:	2800      	cmp	r0, #0
 8023ffa:	bfab      	itete	ge
 8023ffc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8024000:	181b      	addge	r3, r3, r0
 8024002:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024006:	bfac      	ite	ge
 8024008:	6563      	strge	r3, [r4, #84]	; 0x54
 802400a:	81a3      	strhlt	r3, [r4, #12]
 802400c:	bd10      	pop	{r4, pc}

0802400e <__swrite>:
 802400e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024012:	461f      	mov	r7, r3
 8024014:	898b      	ldrh	r3, [r1, #12]
 8024016:	05db      	lsls	r3, r3, #23
 8024018:	4605      	mov	r5, r0
 802401a:	460c      	mov	r4, r1
 802401c:	4616      	mov	r6, r2
 802401e:	d505      	bpl.n	802402c <__swrite+0x1e>
 8024020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024024:	2302      	movs	r3, #2
 8024026:	2200      	movs	r2, #0
 8024028:	f000 f868 	bl	80240fc <_lseek_r>
 802402c:	89a3      	ldrh	r3, [r4, #12]
 802402e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024036:	81a3      	strh	r3, [r4, #12]
 8024038:	4632      	mov	r2, r6
 802403a:	463b      	mov	r3, r7
 802403c:	4628      	mov	r0, r5
 802403e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024042:	f000 b817 	b.w	8024074 <_write_r>

08024046 <__sseek>:
 8024046:	b510      	push	{r4, lr}
 8024048:	460c      	mov	r4, r1
 802404a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802404e:	f000 f855 	bl	80240fc <_lseek_r>
 8024052:	1c43      	adds	r3, r0, #1
 8024054:	89a3      	ldrh	r3, [r4, #12]
 8024056:	bf15      	itete	ne
 8024058:	6560      	strne	r0, [r4, #84]	; 0x54
 802405a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802405e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024062:	81a3      	strheq	r3, [r4, #12]
 8024064:	bf18      	it	ne
 8024066:	81a3      	strhne	r3, [r4, #12]
 8024068:	bd10      	pop	{r4, pc}

0802406a <__sclose>:
 802406a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802406e:	f000 b813 	b.w	8024098 <_close_r>
	...

08024074 <_write_r>:
 8024074:	b538      	push	{r3, r4, r5, lr}
 8024076:	4d07      	ldr	r5, [pc, #28]	; (8024094 <_write_r+0x20>)
 8024078:	4604      	mov	r4, r0
 802407a:	4608      	mov	r0, r1
 802407c:	4611      	mov	r1, r2
 802407e:	2200      	movs	r2, #0
 8024080:	602a      	str	r2, [r5, #0]
 8024082:	461a      	mov	r2, r3
 8024084:	f7dd f9e5 	bl	8001452 <_write>
 8024088:	1c43      	adds	r3, r0, #1
 802408a:	d102      	bne.n	8024092 <_write_r+0x1e>
 802408c:	682b      	ldr	r3, [r5, #0]
 802408e:	b103      	cbz	r3, 8024092 <_write_r+0x1e>
 8024090:	6023      	str	r3, [r4, #0]
 8024092:	bd38      	pop	{r3, r4, r5, pc}
 8024094:	2400d240 	.word	0x2400d240

08024098 <_close_r>:
 8024098:	b538      	push	{r3, r4, r5, lr}
 802409a:	4d06      	ldr	r5, [pc, #24]	; (80240b4 <_close_r+0x1c>)
 802409c:	2300      	movs	r3, #0
 802409e:	4604      	mov	r4, r0
 80240a0:	4608      	mov	r0, r1
 80240a2:	602b      	str	r3, [r5, #0]
 80240a4:	f7dd f9f1 	bl	800148a <_close>
 80240a8:	1c43      	adds	r3, r0, #1
 80240aa:	d102      	bne.n	80240b2 <_close_r+0x1a>
 80240ac:	682b      	ldr	r3, [r5, #0]
 80240ae:	b103      	cbz	r3, 80240b2 <_close_r+0x1a>
 80240b0:	6023      	str	r3, [r4, #0]
 80240b2:	bd38      	pop	{r3, r4, r5, pc}
 80240b4:	2400d240 	.word	0x2400d240

080240b8 <_fstat_r>:
 80240b8:	b538      	push	{r3, r4, r5, lr}
 80240ba:	4d07      	ldr	r5, [pc, #28]	; (80240d8 <_fstat_r+0x20>)
 80240bc:	2300      	movs	r3, #0
 80240be:	4604      	mov	r4, r0
 80240c0:	4608      	mov	r0, r1
 80240c2:	4611      	mov	r1, r2
 80240c4:	602b      	str	r3, [r5, #0]
 80240c6:	f7dd f9ec 	bl	80014a2 <_fstat>
 80240ca:	1c43      	adds	r3, r0, #1
 80240cc:	d102      	bne.n	80240d4 <_fstat_r+0x1c>
 80240ce:	682b      	ldr	r3, [r5, #0]
 80240d0:	b103      	cbz	r3, 80240d4 <_fstat_r+0x1c>
 80240d2:	6023      	str	r3, [r4, #0]
 80240d4:	bd38      	pop	{r3, r4, r5, pc}
 80240d6:	bf00      	nop
 80240d8:	2400d240 	.word	0x2400d240

080240dc <_isatty_r>:
 80240dc:	b538      	push	{r3, r4, r5, lr}
 80240de:	4d06      	ldr	r5, [pc, #24]	; (80240f8 <_isatty_r+0x1c>)
 80240e0:	2300      	movs	r3, #0
 80240e2:	4604      	mov	r4, r0
 80240e4:	4608      	mov	r0, r1
 80240e6:	602b      	str	r3, [r5, #0]
 80240e8:	f7dd f9eb 	bl	80014c2 <_isatty>
 80240ec:	1c43      	adds	r3, r0, #1
 80240ee:	d102      	bne.n	80240f6 <_isatty_r+0x1a>
 80240f0:	682b      	ldr	r3, [r5, #0]
 80240f2:	b103      	cbz	r3, 80240f6 <_isatty_r+0x1a>
 80240f4:	6023      	str	r3, [r4, #0]
 80240f6:	bd38      	pop	{r3, r4, r5, pc}
 80240f8:	2400d240 	.word	0x2400d240

080240fc <_lseek_r>:
 80240fc:	b538      	push	{r3, r4, r5, lr}
 80240fe:	4d07      	ldr	r5, [pc, #28]	; (802411c <_lseek_r+0x20>)
 8024100:	4604      	mov	r4, r0
 8024102:	4608      	mov	r0, r1
 8024104:	4611      	mov	r1, r2
 8024106:	2200      	movs	r2, #0
 8024108:	602a      	str	r2, [r5, #0]
 802410a:	461a      	mov	r2, r3
 802410c:	f7dd f9e4 	bl	80014d8 <_lseek>
 8024110:	1c43      	adds	r3, r0, #1
 8024112:	d102      	bne.n	802411a <_lseek_r+0x1e>
 8024114:	682b      	ldr	r3, [r5, #0]
 8024116:	b103      	cbz	r3, 802411a <_lseek_r+0x1e>
 8024118:	6023      	str	r3, [r4, #0]
 802411a:	bd38      	pop	{r3, r4, r5, pc}
 802411c:	2400d240 	.word	0x2400d240

08024120 <__ascii_mbtowc>:
 8024120:	b082      	sub	sp, #8
 8024122:	b901      	cbnz	r1, 8024126 <__ascii_mbtowc+0x6>
 8024124:	a901      	add	r1, sp, #4
 8024126:	b142      	cbz	r2, 802413a <__ascii_mbtowc+0x1a>
 8024128:	b14b      	cbz	r3, 802413e <__ascii_mbtowc+0x1e>
 802412a:	7813      	ldrb	r3, [r2, #0]
 802412c:	600b      	str	r3, [r1, #0]
 802412e:	7812      	ldrb	r2, [r2, #0]
 8024130:	1e10      	subs	r0, r2, #0
 8024132:	bf18      	it	ne
 8024134:	2001      	movne	r0, #1
 8024136:	b002      	add	sp, #8
 8024138:	4770      	bx	lr
 802413a:	4610      	mov	r0, r2
 802413c:	e7fb      	b.n	8024136 <__ascii_mbtowc+0x16>
 802413e:	f06f 0001 	mvn.w	r0, #1
 8024142:	e7f8      	b.n	8024136 <__ascii_mbtowc+0x16>

08024144 <__malloc_lock>:
 8024144:	4801      	ldr	r0, [pc, #4]	; (802414c <__malloc_lock+0x8>)
 8024146:	f7fe bfe4 	b.w	8023112 <__retarget_lock_acquire_recursive>
 802414a:	bf00      	nop
 802414c:	2400d270 	.word	0x2400d270

08024150 <__malloc_unlock>:
 8024150:	4801      	ldr	r0, [pc, #4]	; (8024158 <__malloc_unlock+0x8>)
 8024152:	f7fe bfe0 	b.w	8023116 <__retarget_lock_release_recursive>
 8024156:	bf00      	nop
 8024158:	2400d270 	.word	0x2400d270

0802415c <_realloc_r>:
 802415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802415e:	4607      	mov	r7, r0
 8024160:	4614      	mov	r4, r2
 8024162:	460e      	mov	r6, r1
 8024164:	b921      	cbnz	r1, 8024170 <_realloc_r+0x14>
 8024166:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802416a:	4611      	mov	r1, r2
 802416c:	f7ff bc1e 	b.w	80239ac <_malloc_r>
 8024170:	b922      	cbnz	r2, 802417c <_realloc_r+0x20>
 8024172:	f7ff fbcb 	bl	802390c <_free_r>
 8024176:	4625      	mov	r5, r4
 8024178:	4628      	mov	r0, r5
 802417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802417c:	f000 f833 	bl	80241e6 <_malloc_usable_size_r>
 8024180:	42a0      	cmp	r0, r4
 8024182:	d20f      	bcs.n	80241a4 <_realloc_r+0x48>
 8024184:	4621      	mov	r1, r4
 8024186:	4638      	mov	r0, r7
 8024188:	f7ff fc10 	bl	80239ac <_malloc_r>
 802418c:	4605      	mov	r5, r0
 802418e:	2800      	cmp	r0, #0
 8024190:	d0f2      	beq.n	8024178 <_realloc_r+0x1c>
 8024192:	4631      	mov	r1, r6
 8024194:	4622      	mov	r2, r4
 8024196:	f7fd f94f 	bl	8021438 <memcpy>
 802419a:	4631      	mov	r1, r6
 802419c:	4638      	mov	r0, r7
 802419e:	f7ff fbb5 	bl	802390c <_free_r>
 80241a2:	e7e9      	b.n	8024178 <_realloc_r+0x1c>
 80241a4:	4635      	mov	r5, r6
 80241a6:	e7e7      	b.n	8024178 <_realloc_r+0x1c>

080241a8 <_read_r>:
 80241a8:	b538      	push	{r3, r4, r5, lr}
 80241aa:	4d07      	ldr	r5, [pc, #28]	; (80241c8 <_read_r+0x20>)
 80241ac:	4604      	mov	r4, r0
 80241ae:	4608      	mov	r0, r1
 80241b0:	4611      	mov	r1, r2
 80241b2:	2200      	movs	r2, #0
 80241b4:	602a      	str	r2, [r5, #0]
 80241b6:	461a      	mov	r2, r3
 80241b8:	f7dd f92e 	bl	8001418 <_read>
 80241bc:	1c43      	adds	r3, r0, #1
 80241be:	d102      	bne.n	80241c6 <_read_r+0x1e>
 80241c0:	682b      	ldr	r3, [r5, #0]
 80241c2:	b103      	cbz	r3, 80241c6 <_read_r+0x1e>
 80241c4:	6023      	str	r3, [r4, #0]
 80241c6:	bd38      	pop	{r3, r4, r5, pc}
 80241c8:	2400d240 	.word	0x2400d240

080241cc <__ascii_wctomb>:
 80241cc:	b149      	cbz	r1, 80241e2 <__ascii_wctomb+0x16>
 80241ce:	2aff      	cmp	r2, #255	; 0xff
 80241d0:	bf85      	ittet	hi
 80241d2:	238a      	movhi	r3, #138	; 0x8a
 80241d4:	6003      	strhi	r3, [r0, #0]
 80241d6:	700a      	strbls	r2, [r1, #0]
 80241d8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80241dc:	bf98      	it	ls
 80241de:	2001      	movls	r0, #1
 80241e0:	4770      	bx	lr
 80241e2:	4608      	mov	r0, r1
 80241e4:	4770      	bx	lr

080241e6 <_malloc_usable_size_r>:
 80241e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80241ea:	1f18      	subs	r0, r3, #4
 80241ec:	2b00      	cmp	r3, #0
 80241ee:	bfbc      	itt	lt
 80241f0:	580b      	ldrlt	r3, [r1, r0]
 80241f2:	18c0      	addlt	r0, r0, r3
 80241f4:	4770      	bx	lr
	...

080241f8 <_init>:
 80241f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241fa:	bf00      	nop
 80241fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80241fe:	bc08      	pop	{r3}
 8024200:	469e      	mov	lr, r3
 8024202:	4770      	bx	lr

08024204 <_fini>:
 8024204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024206:	bf00      	nop
 8024208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802420a:	bc08      	pop	{r3}
 802420c:	469e      	mov	lr, r3
 802420e:	4770      	bx	lr
