
XploreAvionics_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f5f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003538  0801f890  0801f890  0002f890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08022dc8  08022dc8  00032dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08022dd0  08022dd0  00032dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08022dd8  08022dd8  00032dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000000  08022ddc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2000020c  08022fe8  0004020c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  2000026c  08023048  0004026c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxArraySection 000017d0  200002cc  080230a8  000402cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00009fe8  20001a9c  08024878  00041a9c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000ba84  08024878  0004ba84  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00041a9c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0007eb9e  00000000  00000000  00041aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000cc25  00000000  00000000  000c0668  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000033b0  00000000  00000000  000cd290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003048  00000000  00000000  000d0640  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000562df  00000000  00000000  000d3688  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00049477  00000000  00000000  00129967  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    001bd986  00000000  00000000  00172dde  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00330764  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e26c  00000000  00000000  003307e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20001a9c 	.word	0x20001a9c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801f878 	.word	0x0801f878

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20001aa0 	.word	0x20001aa0
 80002dc:	0801f878 	.word	0x0801f878

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <SystemInit+0x104>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a3e      	ldr	r2, [pc, #248]	; (8000794 <SystemInit+0x104>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <SystemInit+0x104>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <SystemInit+0x104>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b0:	4b39      	ldr	r3, [pc, #228]	; (8000798 <SystemInit+0x108>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d807      	bhi.n	80006cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <SystemInit+0x108>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 030f 	bic.w	r3, r3, #15
 80006c4:	4a34      	ldr	r2, [pc, #208]	; (8000798 <SystemInit+0x108>)
 80006c6:	f043 0307 	orr.w	r3, r3, #7
 80006ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <SystemInit+0x10c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a32      	ldr	r2, [pc, #200]	; (800079c <SystemInit+0x10c>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d8:	4b30      	ldr	r3, [pc, #192]	; (800079c <SystemInit+0x10c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <SystemInit+0x10c>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	492e      	ldr	r1, [pc, #184]	; (800079c <SystemInit+0x10c>)
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <SystemInit+0x110>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <SystemInit+0x108>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d907      	bls.n	8000706 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemInit+0x108>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 030f 	bic.w	r3, r3, #15
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <SystemInit+0x108>)
 8000700:	f043 0307 	orr.w	r3, r3, #7
 8000704:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemInit+0x10c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemInit+0x10c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemInit+0x10c>)
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <SystemInit+0x114>)
 800071c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemInit+0x10c>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemInit+0x118>)
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <SystemInit+0x10c>)
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x11c>)
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <SystemInit+0x10c>)
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <SystemInit+0x11c>)
 8000734:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <SystemInit+0x10c>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <SystemInit+0x10c>)
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <SystemInit+0x11c>)
 8000740:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <SystemInit+0x10c>)
 8000744:	2200      	movs	r2, #0
 8000746:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <SystemInit+0x10c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <SystemInit+0x10c>)
 800074e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000752:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x10c>)
 8000756:	2200      	movs	r2, #0
 8000758:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <SystemInit+0x120>)
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <SystemInit+0x120>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <SystemInit+0x124>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x128>)
 800076c:	4013      	ands	r3, r2
 800076e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000772:	d202      	bcs.n	800077a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x12c>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x130>)
 800077c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000780:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SystemInit+0x104>)
 8000784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000788:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	52002000 	.word	0x52002000
 800079c:	58024400 	.word	0x58024400
 80007a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a4:	02020200 	.word	0x02020200
 80007a8:	01ff0000 	.word	0x01ff0000
 80007ac:	01010280 	.word	0x01010280
 80007b0:	580000c0 	.word	0x580000c0
 80007b4:	5c001000 	.word	0x5c001000
 80007b8:	ffff0000 	.word	0xffff0000
 80007bc:	51008108 	.word	0x51008108
 80007c0:	52004000 	.word	0x52004000

080007c4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_CRC_Init+0x3c>)
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <MX_CRC_Init+0x40>)
 80007cc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_CRC_Init+0x3c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_CRC_Init+0x3c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_CRC_Init+0x3c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_CRC_Init+0x3c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_CRC_Init+0x3c>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_CRC_Init+0x3c>)
 80007ee:	f002 fb61 	bl	8002eb4 <HAL_CRC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007f8:	f000 fce4 	bl	80011c4 <Error_Handler>
  }

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20007974 	.word	0x20007974
 8000804:	58024c00 	.word	0x58024c00

08000808 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <HAL_CRC_MspInit+0x3c>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d10e      	bne.n	8000838 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_CRC_MspInit+0x40>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000820:	4a09      	ldr	r2, [pc, #36]	; (8000848 <HAL_CRC_MspInit+0x40>)
 8000822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <HAL_CRC_MspInit+0x40>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	58024c00 	.word	0x58024c00
 8000848:	58024400 	.word	0x58024400

0800084c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000852:	4b41      	ldr	r3, [pc, #260]	; (8000958 <MX_DMA_Init+0x10c>)
 8000854:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000858:	4a3f      	ldr	r2, [pc, #252]	; (8000958 <MX_DMA_Init+0x10c>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000862:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <MX_DMA_Init+0x10c>)
 8000864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000870:	4b39      	ldr	r3, [pc, #228]	; (8000958 <MX_DMA_Init+0x10c>)
 8000872:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000876:	4a38      	ldr	r2, [pc, #224]	; (8000958 <MX_DMA_Init+0x10c>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000880:	4b35      	ldr	r3, [pc, #212]	; (8000958 <MX_DMA_Init+0x10c>)
 8000882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	200d      	movs	r0, #13
 8000894:	f002 fa5a 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000898:	200d      	movs	r0, #13
 800089a:	f002 fa71 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	200e      	movs	r0, #14
 80008a4:	f002 fa52 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008a8:	200e      	movs	r0, #14
 80008aa:	f002 fa69 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	200f      	movs	r0, #15
 80008b4:	f002 fa4a 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80008b8:	200f      	movs	r0, #15
 80008ba:	f002 fa61 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	2010      	movs	r0, #16
 80008c4:	f002 fa42 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008c8:	2010      	movs	r0, #16
 80008ca:	f002 fa59 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	2011      	movs	r0, #17
 80008d4:	f002 fa3a 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008d8:	2011      	movs	r0, #17
 80008da:	f002 fa51 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2105      	movs	r1, #5
 80008e2:	202f      	movs	r0, #47	; 0x2f
 80008e4:	f002 fa32 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80008e8:	202f      	movs	r0, #47	; 0x2f
 80008ea:	f002 fa49 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2105      	movs	r1, #5
 80008f2:	2038      	movs	r0, #56	; 0x38
 80008f4:	f002 fa2a 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008f8:	2038      	movs	r0, #56	; 0x38
 80008fa:	f002 fa41 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2105      	movs	r1, #5
 8000902:	2039      	movs	r0, #57	; 0x39
 8000904:	f002 fa22 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000908:	2039      	movs	r0, #57	; 0x39
 800090a:	f002 fa39 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2105      	movs	r1, #5
 8000912:	203c      	movs	r0, #60	; 0x3c
 8000914:	f002 fa1a 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000918:	203c      	movs	r0, #60	; 0x3c
 800091a:	f002 fa31 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2105      	movs	r1, #5
 8000922:	2044      	movs	r0, #68	; 0x44
 8000924:	f002 fa12 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000928:	2044      	movs	r0, #68	; 0x44
 800092a:	f002 fa29 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2105      	movs	r1, #5
 8000932:	2045      	movs	r0, #69	; 0x45
 8000934:	f002 fa0a 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000938:	2045      	movs	r0, #69	; 0x45
 800093a:	f002 fa21 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2105      	movs	r1, #5
 8000942:	2046      	movs	r0, #70	; 0x46
 8000944:	f002 fa02 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000948:	2046      	movs	r0, #70	; 0x46
 800094a:	f002 fa19 	bl	8002d80 <HAL_NVIC_EnableIRQ>

}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	58024400 	.word	0x58024400

0800095c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* Create the thread(s) */
  /* creation of watchdog */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initCortexM7();
 8000960:	f01c f8ea 	bl	801cb38 <initCortexM7>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	; 0x24
 800096c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096e:	4b3f      	ldr	r3, [pc, #252]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000974:	4a3d      	ldr	r2, [pc, #244]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800097e:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000984:	f003 0310 	and.w	r3, r3, #16
 8000988:	61fb      	str	r3, [r7, #28]
 800098a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098c:	4b37      	ldr	r3, [pc, #220]	; (8000a6c <MX_GPIO_Init+0x104>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000992:	4a36      	ldr	r2, [pc, #216]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099c:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <MX_GPIO_Init+0x104>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a2:	f003 0320 	and.w	r3, r3, #32
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	4b30      	ldr	r3, [pc, #192]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b0:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c8:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ce:	4a27      	ldr	r2, [pc, #156]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	4a1f      	ldr	r2, [pc, #124]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0a:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a28:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

}
 8000a5e:	bf00      	nop
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	58024400 	.word	0x58024400

08000a70 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a76:	4a1d      	ldr	r2, [pc, #116]	; (8000aec <MX_I2C1_Init+0x7c>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a7c:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <MX_I2C1_Init+0x80>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aaa:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000aac:	f006 fa9a 	bl	8006fe4 <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 fb85 	bl	80011c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000abe:	f006 fb21 	bl	8007104 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 fb7c 	bl	80011c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000ad0:	f006 fb63 	bl	800719a <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fb73 	bl	80011c4 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f006 fba8 	bl	8007234 <HAL_I2CEx_EnableFastModePlus>

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200079e4 	.word	0x200079e4
 8000aec:	40005400 	.word	0x40005400
 8000af0:	00401242 	.word	0x00401242

08000af4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000afa:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <MX_I2C2_Init+0x78>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b00:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <MX_I2C2_Init+0x7c>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b2e:	480e      	ldr	r0, [pc, #56]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b30:	f006 fa58 	bl	8006fe4 <HAL_I2C_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b3a:	f000 fb43 	bl	80011c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b42:	f006 fadf 	bl	8007104 <HAL_I2CEx_ConfigAnalogFilter>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b4c:	f000 fb3a 	bl	80011c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b50:	2100      	movs	r1, #0
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b54:	f006 fb21 	bl	800719a <HAL_I2CEx_ConfigDigitalFilter>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b5e:	f000 fb31 	bl	80011c4 <Error_Handler>
  }

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20007a30 	.word	0x20007a30
 8000b6c:	40005800 	.word	0x40005800
 8000b70:	10c0ecff 	.word	0x10c0ecff

08000b74 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <MX_I2C3_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <MX_I2C3_Init+0x7c>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bae:	480e      	ldr	r0, [pc, #56]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000bb0:	f006 fa18 	bl	8006fe4 <HAL_I2C_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000bba:	f000 fb03 	bl	80011c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000bc2:	f006 fa9f 	bl	8007104 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000bcc:	f000 fafa 	bl	80011c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000bd4:	f006 fae1 	bl	800719a <HAL_I2CEx_ConfigDigitalFilter>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000bde:	f000 faf1 	bl	80011c4 <Error_Handler>
  }

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20007998 	.word	0x20007998
 8000bec:	40005c00 	.word	0x40005c00
 8000bf0:	10c0ecff 	.word	0x10c0ecff

08000bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a4f      	ldr	r2, [pc, #316]	; (8000d50 <HAL_I2C_MspInit+0x15c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d10f      	bne.n	8000c36 <HAL_I2C_MspInit+0x42>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c16:	4b4f      	ldr	r3, [pc, #316]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	4a4d      	ldr	r2, [pc, #308]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c26:	4b4b      	ldr	r3, [pc, #300]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c30:	623b      	str	r3, [r7, #32]
 8000c32:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c34:	e088      	b.n	8000d48 <HAL_I2C_MspInit+0x154>
  else if(i2cHandle->Instance==I2C2)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a47      	ldr	r2, [pc, #284]	; (8000d58 <HAL_I2C_MspInit+0x164>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d12f      	bne.n	8000ca0 <HAL_I2C_MspInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c40:	4b44      	ldr	r3, [pc, #272]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a43      	ldr	r2, [pc, #268]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b40      	ldr	r3, [pc, #256]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c64:	2312      	movs	r3, #18
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c70:	2304      	movs	r3, #4
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4838      	ldr	r0, [pc, #224]	; (8000d5c <HAL_I2C_MspInit+0x168>)
 8000c7c:	f005 ff9c 	bl	8006bb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c80:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c86:	4a33      	ldr	r2, [pc, #204]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c90:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
}
 8000c9e:	e053      	b.n	8000d48 <HAL_I2C_MspInit+0x154>
  else if(i2cHandle->Instance==I2C3)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a2e      	ldr	r2, [pc, #184]	; (8000d60 <HAL_I2C_MspInit+0x16c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d14e      	bne.n	8000d48 <HAL_I2C_MspInit+0x154>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	4a28      	ldr	r2, [pc, #160]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cba:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cec:	2312      	movs	r3, #18
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	4818      	ldr	r0, [pc, #96]	; (8000d64 <HAL_I2C_MspInit+0x170>)
 8000d04:	f005 ff58 	bl	8006bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0e:	2312      	movs	r3, #18
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	4810      	ldr	r0, [pc, #64]	; (8000d68 <HAL_I2C_MspInit+0x174>)
 8000d26:	f005 ff47 	bl	8006bb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d30:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000d32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3738      	adds	r7, #56	; 0x38
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40005400 	.word	0x40005400
 8000d54:	58024400 	.word	0x58024400
 8000d58:	40005800 	.word	0x40005800
 8000d5c:	58020400 	.word	0x58020400
 8000d60:	40005c00 	.word	0x40005c00
 8000d64:	58020800 	.word	0x58020800
 8000d68:	58020000 	.word	0x58020000

08000d6c <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  hiwdg1.Instance = IWDG1;
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_IWDG1_Init+0x34>)
 8000d72:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <MX_IWDG1_Init+0x38>)
 8000d74:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_32;
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <MX_IWDG1_Init+0x34>)
 8000d78:	2203      	movs	r2, #3
 8000d7a:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_IWDG1_Init+0x34>)
 8000d7e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d82:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 4095;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_IWDG1_Init+0x34>)
 8000d86:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d8a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_IWDG1_Init+0x34>)
 8000d8e:	f006 fa75 	bl	800727c <HAL_IWDG_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8000d98:	f000 fa14 	bl	80011c4 <Error_Handler>
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20007a7c 	.word	0x20007a7c
 8000da4:	58004800 	.word	0x58004800

08000da8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000db0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <SCB_EnableICache+0x3c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000dbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dc0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <SCB_EnableICache+0x3c>)
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <SCB_EnableICache+0x3c>)
 8000dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dd4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <SCB_EnableDCache+0x7c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000df6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <SCB_EnableDCache+0x7c>)
 8000dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e00:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0b5b      	lsrs	r3, r3, #13
 8000e06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e0a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	08db      	lsrs	r3, r3, #3
 8000e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e14:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	015a      	lsls	r2, r3, #5
 8000e1a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e1e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e24:	490f      	ldr	r1, [pc, #60]	; (8000e64 <SCB_EnableDCache+0x7c>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1e5a      	subs	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1ef      	bne.n	8000e16 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	1e5a      	subs	r2, r3, #1
 8000e3a:	60fa      	str	r2, [r7, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1e5      	bne.n	8000e0c <SCB_EnableDCache+0x24>
 8000e40:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <SCB_EnableDCache+0x7c>)
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <SCB_EnableDCache+0x7c>)
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4e:	6153      	str	r3, [r2, #20]
 8000e50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e54:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e6e:	f000 f94f 	bl	8001110 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000e72:	f7ff ff99 	bl	8000da8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000e76:	f7ff ffb7 	bl	8000de8 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e80:	bf00      	nop
 8000e82:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <main+0xe8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d004      	beq.n	8000e98 <main+0x30>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	1e5a      	subs	r2, r3, #1
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	dcf4      	bgt.n	8000e82 <main+0x1a>
  if ( timeout < 0 )
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da01      	bge.n	8000ea2 <main+0x3a>
  {
  Error_Handler();
 8000e9e:	f000 f991 	bl	80011c4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea2:	f001 fe1f 	bl	8002ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea6:	f000 f855 	bl	8000f54 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <main+0xe8>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <main+0xe8>)
 8000eb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <main+0xe8>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f006 f847 	bl	8006f5c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f006 f873 	bl	8006fbc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eda:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000edc:	bf00      	nop
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <main+0xe8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d104      	bne.n	8000ef4 <main+0x8c>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	1e5a      	subs	r2, r3, #1
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dcf4      	bgt.n	8000ede <main+0x76>
if ( timeout < 0 )
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	da01      	bge.n	8000efe <main+0x96>
{
Error_Handler();
 8000efa:	f000 f963 	bl	80011c4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f7ff fd33 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f02:	f7ff fca3 	bl	800084c <MX_DMA_Init>
  MX_CRC_Init();
 8000f06:	f7ff fc5d 	bl	80007c4 <MX_CRC_Init>
  MX_I2C1_Init();
 8000f0a:	f7ff fdb1 	bl	8000a70 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f0e:	f7ff fdf1 	bl	8000af4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000f12:	f7ff fe2f 	bl	8000b74 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 8000f16:	f000 f959 	bl	80011cc <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000f1a:	f000 fa85 	bl	8001428 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000f1e:	f000 fad9 	bl	80014d4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000f22:	f000 fb2d 	bl	8001580 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000f26:	f000 fb81 	bl	800162c <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000f2a:	f001 f8a5 	bl	8002078 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f2e:	f001 f8ef 	bl	8002110 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f32:	f001 f939 	bl	80021a8 <MX_USART3_UART_Init>
  MX_IWDG1_Init();
 8000f36:	f7ff ff19 	bl	8000d6c <MX_IWDG1_Init>
  MX_USART6_UART_Init();
 8000f3a:	f001 f981 	bl	8002240 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000f3e:	f000 fa31 	bl	80013a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f42:	f00b fb5f 	bl	800c604 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f46:	f7ff fd09 	bl	800095c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000f4a:	f00b fb8f 	bl	800c66c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <main+0xe6>
 8000f50:	58024400 	.word	0x58024400

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b0cc      	sub	sp, #304	; 0x130
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f5e:	224c      	movs	r2, #76	; 0x4c
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f01b ff85 	bl	801ce72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f01b ff7e 	bl	801ce72 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	23bc      	movs	r3, #188	; 0xbc
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2100      	movs	r1, #0
 8000f82:	f01b ff76 	bl	801ce72 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f86:	2004      	movs	r0, #4
 8000f88:	f006 f9ce 	bl	8007328 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	4b5c      	ldr	r3, [pc, #368]	; (8001104 <SystemClock_Config+0x1b0>)
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	4a5b      	ldr	r2, [pc, #364]	; (8001104 <SystemClock_Config+0x1b0>)
 8000f98:	f023 0301 	bic.w	r3, r3, #1
 8000f9c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f9e:	4b59      	ldr	r3, [pc, #356]	; (8001104 <SystemClock_Config+0x1b0>)
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <SystemClock_Config+0x1b4>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a56      	ldr	r2, [pc, #344]	; (8001108 <SystemClock_Config+0x1b4>)
 8000fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b54      	ldr	r3, [pc, #336]	; (8001108 <SystemClock_Config+0x1b4>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fc6:	bf00      	nop
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <SystemClock_Config+0x1b4>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fd4:	d1f8      	bne.n	8000fc8 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000fd6:	230b      	movs	r3, #11
 8000fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fea:	2340      	movs	r3, #64	; 0x40
 8000fec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001008:	2340      	movs	r3, #64	; 0x40
 800100a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800100e:	2302      	movs	r3, #2
 8001010:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001020:	230c      	movs	r3, #12
 8001022:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001036:	4618      	mov	r0, r3
 8001038:	f006 fa8a 	bl	8007550 <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001042:	f000 f8bf 	bl	80011c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	233f      	movs	r3, #63	; 0x3f
 8001048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104c:	2303      	movs	r3, #3
 800104e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001058:	2308      	movs	r3, #8
 800105a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800105e:	2340      	movs	r3, #64	; 0x40
 8001060:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001064:	2340      	movs	r3, #64	; 0x40
 8001066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800106a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001072:	2340      	movs	r3, #64	; 0x40
 8001074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001078:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f006 fe76 	bl	8007d70 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x13a>
  {
    Error_Handler();
 800108a:	f000 f89b 	bl	80011c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	4a1e      	ldr	r2, [pc, #120]	; (800110c <SystemClock_Config+0x1b8>)
 8001094:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_QSPI;
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2200      	movs	r2, #0
 800109c:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	2200      	movs	r2, #0
 80010a4:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2200      	movs	r2, #0
 80010ac:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	2200      	movs	r2, #0
 80010b4:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	2203      	movs	r2, #3
 80010bc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	2218      	movs	r2, #24
 80010c4:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	2200      	movs	r2, #0
 80010d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4618      	mov	r0, r3
 80010ec:	f007 fa06 	bl	80084fc <HAL_RCCEx_PeriphCLKConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x1a6>
  {
    Error_Handler();
 80010f6:	f000 f865 	bl	80011c4 <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	58000400 	.word	0x58000400
 8001108:	58024800 	.word	0x58024800
 800110c:	0240b01b 	.word	0x0240b01b

08001110 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001122:	f001 fe3b 	bl	8002d9c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001126:	2301      	movs	r3, #1
 8001128:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800112a:	2300      	movs	r3, #0
 800112c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MPU_Config+0x8c>)
 8001130:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001132:	230e      	movs	r3, #14
 8001134:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001136:	2300      	movs	r3, #0
 8001138:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800113a:	2301      	movs	r3, #1
 800113c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800113e:	2303      	movs	r3, #3
 8001140:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001142:	2301      	movs	r3, #1
 8001144:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001152:	463b      	mov	r3, r7
 8001154:	4618      	mov	r0, r3
 8001156:	f001 fe55 	bl	8002e04 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800115a:	2301      	movs	r3, #1
 800115c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800115e:	2301      	movs	r3, #1
 8001160:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MPU_Config+0x8c>)
 8001164:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001166:	2307      	movs	r3, #7
 8001168:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800116a:	2300      	movs	r3, #0
 800116c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800116e:	2300      	movs	r3, #0
 8001170:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001172:	2303      	movs	r3, #3
 8001174:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001176:	2301      	movs	r3, #1
 8001178:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800117a:	2301      	movs	r3, #1
 800117c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001186:	463b      	mov	r3, r7
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fe3b 	bl	8002e04 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800118e:	2004      	movs	r0, #4
 8001190:	f001 fe1a 	bl	8002dc8 <HAL_MPU_Enable>

}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	30040000 	.word	0x30040000

080011a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011b2:	f001 fcd3 	bl	8002b5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40001400 	.word	0x40001400

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ca:	e7fe      	b.n	80011ca <Error_Handler+0x6>

080011cc <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011d2:	4a13      	ldr	r2, [pc, #76]	; (8001220 <MX_QUADSPI_Init+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011d8:	22ff      	movs	r2, #255	; 0xff
 80011da:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011de:	2201      	movs	r2, #1
 80011e0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_QUADSPI_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_QUADSPI_Init+0x50>)
 8001208:	f006 f8e8 	bl	80073dc <HAL_QSPI_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001212:	f7ff ffd7 	bl	80011c4 <Error_Handler>
  }

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20007a8c 	.word	0x20007a8c
 8001220:	52005000 	.word	0x52005000

08001224 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_QSPI_MspInit+0x168>)
 8001242:	4293      	cmp	r3, r2
 8001244:	f040 809e 	bne.w	8001384 <HAL_QSPI_MspInit+0x160>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001248:	4b51      	ldr	r3, [pc, #324]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 800124a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800124e:	4a50      	ldr	r2, [pc, #320]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001258:	4b4d      	ldr	r3, [pc, #308]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 800125a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4a48      	ldr	r2, [pc, #288]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b46      	ldr	r3, [pc, #280]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001284:	4b42      	ldr	r3, [pc, #264]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	4a41      	ldr	r2, [pc, #260]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 800128c:	f043 0320 	orr.w	r3, r3, #32
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001294:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	4a39      	ldr	r2, [pc, #228]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c0:	4b33      	ldr	r3, [pc, #204]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	4a32      	ldr	r2, [pc, #200]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 80012c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d0:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012de:	2304      	movs	r3, #4
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012ee:	2309      	movs	r3, #9
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4826      	ldr	r0, [pc, #152]	; (8001394 <HAL_QSPI_MspInit+0x170>)
 80012fa:	f005 fc5d 	bl	8006bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80012fe:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001310:	2309      	movs	r3, #9
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	481f      	ldr	r0, [pc, #124]	; (8001398 <HAL_QSPI_MspInit+0x174>)
 800131c:	f005 fc4c 	bl	8006bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001332:	230a      	movs	r3, #10
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4619      	mov	r1, r3
 800133c:	4816      	ldr	r0, [pc, #88]	; (8001398 <HAL_QSPI_MspInit+0x174>)
 800133e:	f005 fc3b 	bl	8006bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001354:	2309      	movs	r3, #9
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	4619      	mov	r1, r3
 800135e:	480f      	ldr	r0, [pc, #60]	; (800139c <HAL_QSPI_MspInit+0x178>)
 8001360:	f005 fc2a 	bl	8006bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001364:	2340      	movs	r3, #64	; 0x40
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001374:	230a      	movs	r3, #10
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	4808      	ldr	r0, [pc, #32]	; (80013a0 <HAL_QSPI_MspInit+0x17c>)
 8001380:	f005 fc1a 	bl	8006bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	; 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	52005000 	.word	0x52005000
 8001390:	58024400 	.word	0x58024400
 8001394:	58021000 	.word	0x58021000
 8001398:	58021400 	.word	0x58021400
 800139c:	58020c00 	.word	0x58020c00
 80013a0:	58021800 	.word	0x58021800

080013a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_RTC_Init+0x48>)
 80013aa:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <MX_RTC_Init+0x4c>)
 80013ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_RTC_Init+0x48>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_RTC_Init+0x48>)
 80013b6:	227f      	movs	r2, #127	; 0x7f
 80013b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_RTC_Init+0x48>)
 80013bc:	22ff      	movs	r2, #255	; 0xff
 80013be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <MX_RTC_Init+0x48>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_RTC_Init+0x48>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <MX_RTC_Init+0x48>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_RTC_Init+0x48>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_RTC_Init+0x48>)
 80013da:	f008 fb8f 	bl	8009afc <HAL_RTC_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80013e4:	f7ff feee 	bl	80011c4 <Error_Handler>
  }

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20007ad8 	.word	0x20007ad8
 80013f0:	58004000 	.word	0x58004000

080013f4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <HAL_RTC_MspInit+0x2c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d105      	bne.n	8001412 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <HAL_RTC_MspInit+0x30>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_RTC_MspInit+0x30>)
 800140c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	58004000 	.word	0x58004000
 8001424:	58024400 	.word	0x58024400

08001428 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <MX_SPI1_Init+0xa4>)
 800142e:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <MX_SPI1_Init+0xa8>)
 8001430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001434:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800143a:	4b24      	ldr	r3, [pc, #144]	; (80014cc <MX_SPI1_Init+0xa4>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001442:	2203      	movs	r2, #3
 8001444:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <MX_SPI1_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001454:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001458:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_SPI1_Init+0xa4>)
 800145c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001460:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_SPI1_Init+0xa4>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001470:	2200      	movs	r2, #0
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001476:	2200      	movs	r2, #0
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_SPI1_Init+0xa4>)
 800147c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001484:	2200      	movs	r2, #0
 8001486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_SPI1_Init+0xa4>)
 800148a:	2200      	movs	r2, #0
 800148c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001496:	2200      	movs	r2, #0
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_SPI1_Init+0xa4>)
 800149c:	2200      	movs	r2, #0
 800149e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <MX_SPI1_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_SPI1_Init+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <MX_SPI1_Init+0xa4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_SPI1_Init+0xa4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_SPI1_Init+0xa4>)
 80014ba:	f008 fc2b 	bl	8009d14 <HAL_SPI_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80014c4:	f7ff fe7e 	bl	80011c4 <Error_Handler>
  }

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20007e74 	.word	0x20007e74
 80014d0:	40013000 	.word	0x40013000

080014d4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <MX_SPI2_Init+0xa4>)
 80014da:	4a28      	ldr	r2, [pc, #160]	; (800157c <MX_SPI2_Init+0xa8>)
 80014dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <MX_SPI2_Init+0xa4>)
 80014e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <MX_SPI2_Init+0xa4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MX_SPI2_Init+0xa4>)
 80014ee:	2203      	movs	r2, #3
 80014f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_SPI2_Init+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_SPI2_Init+0xa4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001500:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001504:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800150c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_SPI2_Init+0xa4>)
 800151c:	2200      	movs	r2, #0
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001522:	2200      	movs	r2, #0
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001530:	2200      	movs	r2, #0
 8001532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001536:	2200      	movs	r2, #0
 8001538:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_SPI2_Init+0xa4>)
 800153c:	2200      	movs	r2, #0
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001542:	2200      	movs	r2, #0
 8001544:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001548:	2200      	movs	r2, #0
 800154a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <MX_SPI2_Init+0xa4>)
 800154e:	2200      	movs	r2, #0
 8001550:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001554:	2200      	movs	r2, #0
 8001556:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <MX_SPI2_Init+0xa4>)
 800155a:	2200      	movs	r2, #0
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001560:	2200      	movs	r2, #0
 8001562:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001566:	f008 fbd5 	bl	8009d14 <HAL_SPI_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001570:	f7ff fe28 	bl	80011c4 <Error_Handler>
  }

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20007afc 	.word	0x20007afc
 800157c:	40003800 	.word	0x40003800

08001580 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <MX_SPI3_Init+0xa4>)
 8001586:	4a28      	ldr	r2, [pc, #160]	; (8001628 <MX_SPI3_Init+0xa8>)
 8001588:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <MX_SPI3_Init+0xa4>)
 800158c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001590:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <MX_SPI3_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <MX_SPI3_Init+0xa4>)
 800159a:	2203      	movs	r2, #3
 800159c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015b0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_SPI3_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_SPI3_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_SPI3_Init+0xa4>)
 800160c:	2200      	movs	r2, #0
 800160e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_SPI3_Init+0xa4>)
 8001612:	f008 fb7f 	bl	8009d14 <HAL_SPI_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800161c:	f7ff fdd2 	bl	80011c4 <Error_Handler>
  }

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20007c74 	.word	0x20007c74
 8001628:	40003c00 	.word	0x40003c00

0800162c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001632:	4a28      	ldr	r2, [pc, #160]	; (80016d4 <MX_SPI4_Init+0xa8>)
 8001634:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001638:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800163c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001646:	2203      	movs	r2, #3
 8001648:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <MX_SPI4_Init+0xa4>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001658:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800165c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001660:	2200      	movs	r2, #0
 8001662:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001666:	2200      	movs	r2, #0
 8001668:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <MX_SPI4_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_SPI4_Init+0xa4>)
 800167e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001682:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001686:	2200      	movs	r2, #0
 8001688:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_SPI4_Init+0xa4>)
 800168c:	2200      	movs	r2, #0
 800168e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001692:	2200      	movs	r2, #0
 8001694:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001698:	2200      	movs	r2, #0
 800169a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_SPI4_Init+0xa4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_SPI4_Init+0xa4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_SPI4_Init+0xa4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_SPI4_Init+0xa4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_SPI4_Init+0xa4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_SPI4_Init+0xa4>)
 80016bc:	f008 fb2a 	bl	8009d14 <HAL_SPI_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80016c6:	f7ff fd7d 	bl	80011c4 <Error_Handler>
  }

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20007dec 	.word	0x20007dec
 80016d4:	40013400 	.word	0x40013400

080016d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b090      	sub	sp, #64	; 0x40
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a93      	ldr	r2, [pc, #588]	; (8001944 <HAL_SPI_MspInit+0x26c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d16b      	bne.n	80017d2 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fa:	4b93      	ldr	r3, [pc, #588]	; (8001948 <HAL_SPI_MspInit+0x270>)
 80016fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001700:	4a91      	ldr	r2, [pc, #580]	; (8001948 <HAL_SPI_MspInit+0x270>)
 8001702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001706:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800170a:	4b8f      	ldr	r3, [pc, #572]	; (8001948 <HAL_SPI_MspInit+0x270>)
 800170c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
 8001716:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001718:	4b8c      	ldr	r3, [pc, #560]	; (800194c <HAL_SPI_MspInit+0x274>)
 800171a:	4a8d      	ldr	r2, [pc, #564]	; (8001950 <HAL_SPI_MspInit+0x278>)
 800171c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800171e:	4b8b      	ldr	r3, [pc, #556]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001720:	2225      	movs	r2, #37	; 0x25
 8001722:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001724:	4b89      	ldr	r3, [pc, #548]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800172a:	4b88      	ldr	r3, [pc, #544]	; (800194c <HAL_SPI_MspInit+0x274>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001730:	4b86      	ldr	r3, [pc, #536]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001736:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001738:	4b84      	ldr	r3, [pc, #528]	; (800194c <HAL_SPI_MspInit+0x274>)
 800173a:	2200      	movs	r2, #0
 800173c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800173e:	4b83      	ldr	r3, [pc, #524]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001744:	4b81      	ldr	r3, [pc, #516]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800174a:	4b80      	ldr	r3, [pc, #512]	; (800194c <HAL_SPI_MspInit+0x274>)
 800174c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001750:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001752:	4b7e      	ldr	r3, [pc, #504]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001754:	2200      	movs	r2, #0
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001758:	487c      	ldr	r0, [pc, #496]	; (800194c <HAL_SPI_MspInit+0x274>)
 800175a:	f001 fc95 	bl	8003088 <HAL_DMA_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_SPI_MspInit+0x90>
    {
      Error_Handler();
 8001764:	f7ff fd2e 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a78      	ldr	r2, [pc, #480]	; (800194c <HAL_SPI_MspInit+0x274>)
 800176c:	67da      	str	r2, [r3, #124]	; 0x7c
 800176e:	4a77      	ldr	r2, [pc, #476]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8001774:	4b77      	ldr	r3, [pc, #476]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 8001776:	4a78      	ldr	r2, [pc, #480]	; (8001958 <HAL_SPI_MspInit+0x280>)
 8001778:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800177a:	4b76      	ldr	r3, [pc, #472]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 800177c:	2226      	movs	r2, #38	; 0x26
 800177e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001780:	4b74      	ldr	r3, [pc, #464]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 8001782:	2240      	movs	r2, #64	; 0x40
 8001784:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001786:	4b73      	ldr	r3, [pc, #460]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800178c:	4b71      	ldr	r3, [pc, #452]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 800178e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001792:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001794:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 8001796:	2200      	movs	r2, #0
 8001798:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179a:	4b6e      	ldr	r3, [pc, #440]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017a0:	4b6c      	ldr	r3, [pc, #432]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017a6:	4b6b      	ldr	r3, [pc, #428]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 80017a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017ac:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ae:	4b69      	ldr	r3, [pc, #420]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017b4:	4867      	ldr	r0, [pc, #412]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 80017b6:	f001 fc67 	bl	8003088 <HAL_DMA_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 80017c0:	f7ff fd00 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a63      	ldr	r2, [pc, #396]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 80017c8:	679a      	str	r2, [r3, #120]	; 0x78
 80017ca:	4a62      	ldr	r2, [pc, #392]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80017d0:	e222      	b.n	8001c18 <HAL_SPI_MspInit+0x540>
  else if(spiHandle->Instance==SPI2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a61      	ldr	r2, [pc, #388]	; (800195c <HAL_SPI_MspInit+0x284>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	f040 80cd 	bne.w	8001978 <HAL_SPI_MspInit+0x2a0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017de:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_SPI_MspInit+0x270>)
 80017e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017e4:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_SPI_MspInit+0x270>)
 80017e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017ee:	4b56      	ldr	r3, [pc, #344]	; (8001948 <HAL_SPI_MspInit+0x270>)
 80017f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fc:	4b52      	ldr	r3, [pc, #328]	; (8001948 <HAL_SPI_MspInit+0x270>)
 80017fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001802:	4a51      	ldr	r2, [pc, #324]	; (8001948 <HAL_SPI_MspInit+0x270>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800180c:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <HAL_SPI_MspInit+0x270>)
 800180e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	623b      	str	r3, [r7, #32]
 8001818:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b4b      	ldr	r3, [pc, #300]	; (8001948 <HAL_SPI_MspInit+0x270>)
 800181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001820:	4a49      	ldr	r2, [pc, #292]	; (8001948 <HAL_SPI_MspInit+0x270>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_SPI_MspInit+0x270>)
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001838:	230c      	movs	r3, #12
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001848:	2305      	movs	r3, #5
 800184a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001850:	4619      	mov	r1, r3
 8001852:	4843      	ldr	r0, [pc, #268]	; (8001960 <HAL_SPI_MspInit+0x288>)
 8001854:	f005 f9b0 	bl	8006bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800186a:	2305      	movs	r3, #5
 800186c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001872:	4619      	mov	r1, r3
 8001874:	483b      	ldr	r0, [pc, #236]	; (8001964 <HAL_SPI_MspInit+0x28c>)
 8001876:	f005 f99f 	bl	8006bb8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream2;
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <HAL_SPI_MspInit+0x290>)
 800187c:	4a3b      	ldr	r2, [pc, #236]	; (800196c <HAL_SPI_MspInit+0x294>)
 800187e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_SPI_MspInit+0x290>)
 8001882:	2227      	movs	r2, #39	; 0x27
 8001884:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_SPI_MspInit+0x290>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_SPI_MspInit+0x290>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001892:	4b35      	ldr	r3, [pc, #212]	; (8001968 <HAL_SPI_MspInit+0x290>)
 8001894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001898:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800189a:	4b33      	ldr	r3, [pc, #204]	; (8001968 <HAL_SPI_MspInit+0x290>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a0:	4b31      	ldr	r3, [pc, #196]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80018ac:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018b2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b4:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80018ba:	482b      	ldr	r0, [pc, #172]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018bc:	f001 fbe4 	bl	8003088 <HAL_DMA_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_SPI_MspInit+0x1f2>
      Error_Handler();
 80018c6:	f7ff fc7d 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a26      	ldr	r2, [pc, #152]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80018d0:	4a25      	ldr	r2, [pc, #148]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream3;
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018d8:	4a26      	ldr	r2, [pc, #152]	; (8001974 <HAL_SPI_MspInit+0x29c>)
 80018da:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018de:	2228      	movs	r2, #40	; 0x28
 80018e0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018e2:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018e4:	2240      	movs	r2, #64	; 0x40
 80018e6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018f4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_SPI_MspInit+0x298>)
 8001904:	2200      	movs	r2, #0
 8001906:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_SPI_MspInit+0x298>)
 800190a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800190e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_SPI_MspInit+0x298>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001916:	4816      	ldr	r0, [pc, #88]	; (8001970 <HAL_SPI_MspInit+0x298>)
 8001918:	f001 fbb6 	bl	8003088 <HAL_DMA_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_SPI_MspInit+0x24e>
      Error_Handler();
 8001922:	f7ff fc4f 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a11      	ldr	r2, [pc, #68]	; (8001970 <HAL_SPI_MspInit+0x298>)
 800192a:	679a      	str	r2, [r3, #120]	; 0x78
 800192c:	4a10      	ldr	r2, [pc, #64]	; (8001970 <HAL_SPI_MspInit+0x298>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2105      	movs	r1, #5
 8001936:	2024      	movs	r0, #36	; 0x24
 8001938:	f001 fa08 	bl	8002d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800193c:	2024      	movs	r0, #36	; 0x24
 800193e:	f001 fa1f 	bl	8002d80 <HAL_NVIC_EnableIRQ>
}
 8001942:	e169      	b.n	8001c18 <HAL_SPI_MspInit+0x540>
 8001944:	40013000 	.word	0x40013000
 8001948:	58024400 	.word	0x58024400
 800194c:	20007efc 	.word	0x20007efc
 8001950:	40020010 	.word	0x40020010
 8001954:	20007fec 	.word	0x20007fec
 8001958:	40020028 	.word	0x40020028
 800195c:	40003800 	.word	0x40003800
 8001960:	58020800 	.word	0x58020800
 8001964:	58020000 	.word	0x58020000
 8001968:	20007b84 	.word	0x20007b84
 800196c:	40020040 	.word	0x40020040
 8001970:	20007f74 	.word	0x20007f74
 8001974:	40020058 	.word	0x40020058
  else if(spiHandle->Instance==SPI3)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4aa8      	ldr	r2, [pc, #672]	; (8001c20 <HAL_SPI_MspInit+0x548>)
 800197e:	4293      	cmp	r3, r2
 8001980:	f040 80b3 	bne.w	8001aea <HAL_SPI_MspInit+0x412>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001984:	4ba7      	ldr	r3, [pc, #668]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800198a:	4aa6      	ldr	r2, [pc, #664]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 800198c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001990:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001994:	4ba3      	ldr	r3, [pc, #652]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800199a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800199e:	61bb      	str	r3, [r7, #24]
 80019a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	4ba0      	ldr	r3, [pc, #640]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a8:	4a9e      	ldr	r2, [pc, #632]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b2:	4b9c      	ldr	r3, [pc, #624]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c0:	4b98      	ldr	r3, [pc, #608]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 80019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c6:	4a97      	ldr	r2, [pc, #604]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d0:	4b94      	ldr	r3, [pc, #592]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 80019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019de:	2304      	movs	r3, #4
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80019ee:	2307      	movs	r3, #7
 80019f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f6:	4619      	mov	r1, r3
 80019f8:	488b      	ldr	r0, [pc, #556]	; (8001c28 <HAL_SPI_MspInit+0x550>)
 80019fa:	f005 f8dd 	bl	8006bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a10:	2306      	movs	r3, #6
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4884      	ldr	r0, [pc, #528]	; (8001c2c <HAL_SPI_MspInit+0x554>)
 8001a1c:	f005 f8cc 	bl	8006bb8 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream4;
 8001a20:	4b83      	ldr	r3, [pc, #524]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a22:	4a84      	ldr	r2, [pc, #528]	; (8001c34 <HAL_SPI_MspInit+0x55c>)
 8001a24:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8001a26:	4b82      	ldr	r3, [pc, #520]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a28:	223d      	movs	r2, #61	; 0x3d
 8001a2a:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2c:	4b80      	ldr	r3, [pc, #512]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a32:	4b7f      	ldr	r3, [pc, #508]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a38:	4b7d      	ldr	r3, [pc, #500]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3e:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a40:	4b7b      	ldr	r3, [pc, #492]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a46:	4b7a      	ldr	r3, [pc, #488]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001a4c:	4b78      	ldr	r3, [pc, #480]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a52:	4b77      	ldr	r3, [pc, #476]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a58:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5a:	4b75      	ldr	r3, [pc, #468]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001a60:	4873      	ldr	r0, [pc, #460]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a62:	f001 fb11 	bl	8003088 <HAL_DMA_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_SPI_MspInit+0x398>
      Error_Handler();
 8001a6c:	f7ff fbaa 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a6f      	ldr	r2, [pc, #444]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a74:	67da      	str	r2, [r3, #124]	; 0x7c
 8001a76:	4a6e      	ldr	r2, [pc, #440]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001a7c:	4b6e      	ldr	r3, [pc, #440]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001a7e:	4a6f      	ldr	r2, [pc, #444]	; (8001c3c <HAL_SPI_MspInit+0x564>)
 8001a80:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001a82:	4b6d      	ldr	r3, [pc, #436]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001a84:	223e      	movs	r2, #62	; 0x3e
 8001a86:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a88:	4b6b      	ldr	r3, [pc, #428]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001a8a:	2240      	movs	r2, #64	; 0x40
 8001a8c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a8e:	4b6a      	ldr	r3, [pc, #424]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a94:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a9a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a9c:	4b66      	ldr	r3, [pc, #408]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001aa8:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001aae:	4b62      	ldr	r3, [pc, #392]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001ab0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ab4:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ab6:	4b60      	ldr	r3, [pc, #384]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001abc:	485e      	ldr	r0, [pc, #376]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001abe:	f001 fae3 	bl	8003088 <HAL_DMA_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_SPI_MspInit+0x3f4>
      Error_Handler();
 8001ac8:	f7ff fb7c 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a5a      	ldr	r2, [pc, #360]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001ad0:	679a      	str	r2, [r3, #120]	; 0x78
 8001ad2:	4a59      	ldr	r2, [pc, #356]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2105      	movs	r1, #5
 8001adc:	2033      	movs	r0, #51	; 0x33
 8001ade:	f001 f935 	bl	8002d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001ae2:	2033      	movs	r0, #51	; 0x33
 8001ae4:	f001 f94c 	bl	8002d80 <HAL_NVIC_EnableIRQ>
}
 8001ae8:	e096      	b.n	8001c18 <HAL_SPI_MspInit+0x540>
  else if(spiHandle->Instance==SPI4)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a54      	ldr	r2, [pc, #336]	; (8001c40 <HAL_SPI_MspInit+0x568>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	f040 8091 	bne.w	8001c18 <HAL_SPI_MspInit+0x540>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001af6:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001afc:	4a49      	ldr	r2, [pc, #292]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001afe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b06:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b14:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1a:	4a42      	ldr	r2, [pc, #264]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001b1c:	f043 0310 	orr.w	r3, r3, #16
 8001b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b24:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8001b32:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b44:	2305      	movs	r3, #5
 8001b46:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	483d      	ldr	r0, [pc, #244]	; (8001c44 <HAL_SPI_MspInit+0x56c>)
 8001b50:	f005 f832 	bl	8006bb8 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA1_Stream6;
 8001b54:	4b3c      	ldr	r3, [pc, #240]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b56:	4a3d      	ldr	r2, [pc, #244]	; (8001c4c <HAL_SPI_MspInit+0x574>)
 8001b58:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b5c:	2253      	movs	r2, #83	; 0x53
 8001b5e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b60:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b66:	4b38      	ldr	r3, [pc, #224]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b6c:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b72:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b7a:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001b80:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b86:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b8c:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001b92:	482d      	ldr	r0, [pc, #180]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b94:	f001 fa78 	bl	8003088 <HAL_DMA_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_SPI_MspInit+0x4ca>
      Error_Handler();
 8001b9e:	f7ff fb11 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a28      	ldr	r2, [pc, #160]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001ba6:	67da      	str	r2, [r3, #124]	; 0x7c
 8001ba8:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA1_Stream7;
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bb0:	4a28      	ldr	r2, [pc, #160]	; (8001c54 <HAL_SPI_MspInit+0x57c>)
 8001bb2:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001bb4:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bb6:	2254      	movs	r2, #84	; 0x54
 8001bb8:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bba:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bbc:	2240      	movs	r2, #64	; 0x40
 8001bbe:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bcc:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001bec:	4818      	ldr	r0, [pc, #96]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bee:	f001 fa4b 	bl	8003088 <HAL_DMA_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_SPI_MspInit+0x524>
      Error_Handler();
 8001bf8:	f7ff fae4 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001c00:	679a      	str	r2, [r3, #120]	; 0x78
 8001c02:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2105      	movs	r1, #5
 8001c0c:	2054      	movs	r0, #84	; 0x54
 8001c0e:	f001 f89d 	bl	8002d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001c12:	2054      	movs	r0, #84	; 0x54
 8001c14:	f001 f8b4 	bl	8002d80 <HAL_NVIC_EnableIRQ>
}
 8001c18:	bf00      	nop
 8001c1a:	3740      	adds	r7, #64	; 0x40
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40003c00 	.word	0x40003c00
 8001c24:	58024400 	.word	0x58024400
 8001c28:	58020400 	.word	0x58020400
 8001c2c:	58020800 	.word	0x58020800
 8001c30:	20008064 	.word	0x20008064
 8001c34:	40020070 	.word	0x40020070
 8001c38:	20007cfc 	.word	0x20007cfc
 8001c3c:	40020088 	.word	0x40020088
 8001c40:	40013400 	.word	0x40013400
 8001c44:	58021000 	.word	0x58021000
 8001c48:	20007bfc 	.word	0x20007bfc
 8001c4c:	400200a0 	.word	0x400200a0
 8001c50:	20007d74 	.word	0x20007d74
 8001c54:	400200b8 	.word	0x400200b8

08001c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_MspInit+0x38>)
 8001c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_MspInit+0x38>)
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_MspInit+0x38>)
 8001c70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f06f 0001 	mvn.w	r0, #1
 8001c84:	f001 f862 	bl	8002d4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	58024400 	.word	0x58024400

08001c94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b090      	sub	sp, #64	; 0x40
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b0f      	cmp	r3, #15
 8001ca0:	d827      	bhi.n	8001cf2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	2037      	movs	r0, #55	; 0x37
 8001ca8:	f001 f850 	bl	8002d4c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cac:	2037      	movs	r0, #55	; 0x37
 8001cae:	f001 f867 	bl	8002d80 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001cb2:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <HAL_InitTick+0xc4>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001cb8:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <HAL_InitTick+0xc8>)
 8001cba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cbe:	4a27      	ldr	r2, [pc, #156]	; (8001d5c <HAL_InitTick+0xc8>)
 8001cc0:	f043 0320 	orr.w	r3, r3, #32
 8001cc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_InitTick+0xc8>)
 8001cca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cd6:	f107 0210 	add.w	r2, r7, #16
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f006 fbc9 	bl	8008478 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d106      	bne.n	8001cfe <HAL_InitTick+0x6a>
 8001cf0:	e001      	b.n	8001cf6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e02b      	b.n	8001d4e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cf6:	f006 fb93 	bl	8008420 <HAL_RCC_GetPCLK1Freq>
 8001cfa:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001cfc:	e004      	b.n	8001d08 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cfe:	f006 fb8f 	bl	8008420 <HAL_RCC_GetPCLK1Freq>
 8001d02:	4603      	mov	r3, r0
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d0a:	4a15      	ldr	r2, [pc, #84]	; (8001d60 <HAL_InitTick+0xcc>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	0c9b      	lsrs	r3, r3, #18
 8001d12:	3b01      	subs	r3, #1
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d18:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <HAL_InitTick+0xd4>)
 8001d1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d22:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d28:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001d36:	480b      	ldr	r0, [pc, #44]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d38:	f008 fbc3 	bl	800a4c2 <HAL_TIM_Base_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d104      	bne.n	8001d4c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001d42:	4808      	ldr	r0, [pc, #32]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d44:	f008 fc1e 	bl	800a584 <HAL_TIM_Base_Start_IT>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	e000      	b.n	8001d4e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3740      	adds	r7, #64	; 0x40
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	58024400 	.word	0x58024400
 8001d60:	431bde83 	.word	0x431bde83
 8001d64:	200080dc 	.word	0x200080dc
 8001d68:	40001400 	.word	0x40001400

08001d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <NMI_Handler+0x4>

08001d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <MemManage_Handler+0x4>

08001d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <DMA1_Stream2_IRQHandler+0x10>)
 8001d9e:	f001 ff13 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20007b84 	.word	0x20007b84

08001dac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <DMA1_Stream3_IRQHandler+0x10>)
 8001db2:	f001 ff09 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20007f74 	.word	0x20007f74

08001dc0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <DMA1_Stream4_IRQHandler+0x10>)
 8001dc6:	f001 feff 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20008064 	.word	0x20008064

08001dd4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <DMA1_Stream5_IRQHandler+0x10>)
 8001dda:	f001 fef5 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20007cfc 	.word	0x20007cfc

08001de8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <DMA1_Stream6_IRQHandler+0x10>)
 8001dee:	f001 feeb 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20007bfc 	.word	0x20007bfc

08001dfc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <SPI2_IRQHandler+0x10>)
 8001e02:	f008 f87f 	bl	8009f04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20007afc 	.word	0x20007afc

08001e10 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <DMA1_Stream7_IRQHandler+0x10>)
 8001e16:	f001 fed7 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20007d74 	.word	0x20007d74

08001e24 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <SPI3_IRQHandler+0x10>)
 8001e2a:	f008 f86b 	bl	8009f04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20007c74 	.word	0x20007c74

08001e38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <TIM7_IRQHandler+0x10>)
 8001e3e:	f008 fbd7 	bl	800a5f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200080dc 	.word	0x200080dc

08001e4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <DMA2_Stream0_IRQHandler+0x10>)
 8001e52:	f001 feb9 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20008484 	.word	0x20008484

08001e60 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <DMA2_Stream1_IRQHandler+0x10>)
 8001e66:	f001 feaf 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20008394 	.word	0x20008394

08001e74 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <DMA2_Stream4_IRQHandler+0x10>)
 8001e7a:	f001 fea5 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20008128 	.word	0x20008128

08001e88 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <ETH_IRQHandler+0x10>)
 8001e8e:	f003 fcdb 	bl	8005848 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20008870 	.word	0x20008870

08001e9c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <DMA2_Stream5_IRQHandler+0x10>)
 8001ea2:	f001 fe91 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200084fc 	.word	0x200084fc

08001eb0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <DMA2_Stream6_IRQHandler+0x10>)
 8001eb6:	f001 fe87 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200081a0 	.word	0x200081a0

08001ec4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <DMA2_Stream7_IRQHandler+0x10>)
 8001eca:	f001 fe7d 	bl	8003bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000840c 	.word	0x2000840c

08001ed8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <SPI4_IRQHandler+0x10>)
 8001ede:	f008 f811 	bl	8009f04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20007dec 	.word	0x20007dec

08001eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
	return 1;
 8001ef0:	2301      	movs	r3, #1
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_kill>:

int _kill(int pid, int sig)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f06:	f01a ff45 	bl	801cd94 <__errno>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	2316      	movs	r3, #22
 8001f0e:	6013      	str	r3, [r2, #0]
	return -1;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_exit>:

void _exit (int status)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ffe7 	bl	8001efc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f2e:	e7fe      	b.n	8001f2e <_exit+0x12>

08001f30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	e00a      	b.n	8001f58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f42:	f3af 8000 	nop.w
 8001f46:	4601      	mov	r1, r0
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	60ba      	str	r2, [r7, #8]
 8001f4e:	b2ca      	uxtb	r2, r1
 8001f50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3301      	adds	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	dbf0      	blt.n	8001f42 <_read+0x12>
	}

return len;
 8001f60:	687b      	ldr	r3, [r7, #4]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b086      	sub	sp, #24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	e009      	b.n	8001f90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	60ba      	str	r2, [r7, #8]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	dbf1      	blt.n	8001f7c <_write+0x12>
	}
	return len;
 8001f98:	687b      	ldr	r3, [r7, #4]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <_close>:

int _close(int file)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
	return -1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fca:	605a      	str	r2, [r3, #4]
	return 0;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <_isatty>:

int _isatty(int file)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
	return 1;
 8001fe2:	2301      	movs	r3, #1
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
	return 0;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002014:	4a14      	ldr	r2, [pc, #80]	; (8002068 <_sbrk+0x5c>)
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <_sbrk+0x60>)
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <_sbrk+0x64>)
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <_sbrk+0x68>)
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <_sbrk+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	429a      	cmp	r2, r3
 800203a:	d207      	bcs.n	800204c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800203c:	f01a feaa 	bl	801cd94 <__errno>
 8002040:	4602      	mov	r2, r0
 8002042:	230c      	movs	r3, #12
 8002044:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800204a:	e009      	b.n	8002060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <_sbrk+0x64>)
 800205c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205e:	68fb      	ldr	r3, [r7, #12]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20020000 	.word	0x20020000
 800206c:	00000400 	.word	0x00000400
 8002070:	20001ab8 	.word	0x20001ab8
 8002074:	2000ba88 	.word	0x2000ba88

08002078 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <MX_USART1_UART_Init+0x90>)
 800207e:	4a23      	ldr	r2, [pc, #140]	; (800210c <MX_USART1_UART_Init+0x94>)
 8002080:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <MX_USART1_UART_Init+0x90>)
 8002084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002088:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <MX_USART1_UART_Init+0x90>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_USART1_UART_Init+0x90>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <MX_USART1_UART_Init+0x90>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_USART1_UART_Init+0x90>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <MX_USART1_UART_Init+0x90>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_USART1_UART_Init+0x90>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_USART1_UART_Init+0x90>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_USART1_UART_Init+0x90>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <MX_USART1_UART_Init+0x90>)
 80020bc:	2200      	movs	r2, #0
 80020be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020c0:	4811      	ldr	r0, [pc, #68]	; (8002108 <MX_USART1_UART_Init+0x90>)
 80020c2:	f008 fc95 	bl	800a9f0 <HAL_UART_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80020cc:	f7ff f87a 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d0:	2100      	movs	r1, #0
 80020d2:	480d      	ldr	r0, [pc, #52]	; (8002108 <MX_USART1_UART_Init+0x90>)
 80020d4:	f009 fcc5 	bl	800ba62 <HAL_UARTEx_SetTxFifoThreshold>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020de:	f7ff f871 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e2:	2100      	movs	r1, #0
 80020e4:	4808      	ldr	r0, [pc, #32]	; (8002108 <MX_USART1_UART_Init+0x90>)
 80020e6:	f009 fcfa 	bl	800bade <HAL_UARTEx_SetRxFifoThreshold>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020f0:	f7ff f868 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <MX_USART1_UART_Init+0x90>)
 80020f6:	f009 fc7b 	bl	800b9f0 <HAL_UARTEx_DisableFifoMode>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002100:	f7ff f860 	bl	80011c4 <Error_Handler>
  }

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20008574 	.word	0x20008574
 800210c:	40011000 	.word	0x40011000

08002110 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 8002116:	4a23      	ldr	r2, [pc, #140]	; (80021a4 <MX_USART2_UART_Init+0x94>)
 8002118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800211a:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 800211c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002122:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 8002136:	220c      	movs	r2, #12
 8002138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002146:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 8002148:	2200      	movs	r2, #0
 800214a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 800214e:	2200      	movs	r2, #0
 8002150:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 8002154:	2200      	movs	r2, #0
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002158:	4811      	ldr	r0, [pc, #68]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 800215a:	f008 fc49 	bl	800a9f0 <HAL_UART_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002164:	f7ff f82e 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002168:	2100      	movs	r1, #0
 800216a:	480d      	ldr	r0, [pc, #52]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 800216c:	f009 fc79 	bl	800ba62 <HAL_UARTEx_SetTxFifoThreshold>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002176:	f7ff f825 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800217a:	2100      	movs	r1, #0
 800217c:	4808      	ldr	r0, [pc, #32]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 800217e:	f009 fcae 	bl	800bade <HAL_UARTEx_SetRxFifoThreshold>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002188:	f7ff f81c 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800218c:	4804      	ldr	r0, [pc, #16]	; (80021a0 <MX_USART2_UART_Init+0x90>)
 800218e:	f009 fc2f 	bl	800b9f0 <HAL_UARTEx_DisableFifoMode>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002198:	f7ff f814 	bl	80011c4 <Error_Handler>
  }

}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	2000868c 	.word	0x2000868c
 80021a4:	40004400 	.word	0x40004400

080021a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80021ac:	4b22      	ldr	r3, [pc, #136]	; (8002238 <MX_USART3_UART_Init+0x90>)
 80021ae:	4a23      	ldr	r2, [pc, #140]	; (800223c <MX_USART3_UART_Init+0x94>)
 80021b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021b2:	4b21      	ldr	r3, [pc, #132]	; (8002238 <MX_USART3_UART_Init+0x90>)
 80021b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ba:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <MX_USART3_UART_Init+0x90>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <MX_USART3_UART_Init+0x90>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021c6:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <MX_USART3_UART_Init+0x90>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <MX_USART3_UART_Init+0x90>)
 80021ce:	220c      	movs	r2, #12
 80021d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <MX_USART3_UART_Init+0x90>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <MX_USART3_UART_Init+0x90>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <MX_USART3_UART_Init+0x90>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <MX_USART3_UART_Init+0x90>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <MX_USART3_UART_Init+0x90>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021f0:	4811      	ldr	r0, [pc, #68]	; (8002238 <MX_USART3_UART_Init+0x90>)
 80021f2:	f008 fbfd 	bl	800a9f0 <HAL_UART_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021fc:	f7fe ffe2 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002200:	2100      	movs	r1, #0
 8002202:	480d      	ldr	r0, [pc, #52]	; (8002238 <MX_USART3_UART_Init+0x90>)
 8002204:	f009 fc2d 	bl	800ba62 <HAL_UARTEx_SetTxFifoThreshold>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800220e:	f7fe ffd9 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002212:	2100      	movs	r1, #0
 8002214:	4808      	ldr	r0, [pc, #32]	; (8002238 <MX_USART3_UART_Init+0x90>)
 8002216:	f009 fc62 	bl	800bade <HAL_UARTEx_SetRxFifoThreshold>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002220:	f7fe ffd0 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002224:	4804      	ldr	r0, [pc, #16]	; (8002238 <MX_USART3_UART_Init+0x90>)
 8002226:	f009 fbe3 	bl	800b9f0 <HAL_UARTEx_DisableFifoMode>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002230:	f7fe ffc8 	bl	80011c4 <Error_Handler>
  }

}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20008290 	.word	0x20008290
 800223c:	40004800 	.word	0x40004800

08002240 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 8002246:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <MX_USART6_UART_Init+0x94>)
 8002248:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 800224c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002250:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002252:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 8002266:	220c      	movs	r2, #12
 8002268:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 8002278:	2200      	movs	r2, #0
 800227a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 800227e:	2200      	movs	r2, #0
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 8002284:	2200      	movs	r2, #0
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002288:	4811      	ldr	r0, [pc, #68]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 800228a:	f008 fbb1 	bl	800a9f0 <HAL_UART_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002294:	f7fe ff96 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002298:	2100      	movs	r1, #0
 800229a:	480d      	ldr	r0, [pc, #52]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 800229c:	f009 fbe1 	bl	800ba62 <HAL_UARTEx_SetTxFifoThreshold>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80022a6:	f7fe ff8d 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022aa:	2100      	movs	r1, #0
 80022ac:	4808      	ldr	r0, [pc, #32]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 80022ae:	f009 fc16 	bl	800bade <HAL_UARTEx_SetRxFifoThreshold>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80022b8:	f7fe ff84 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80022bc:	4804      	ldr	r0, [pc, #16]	; (80022d0 <MX_USART6_UART_Init+0x90>)
 80022be:	f009 fb97 	bl	800b9f0 <HAL_UARTEx_DisableFifoMode>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80022c8:	f7fe ff7c 	bl	80011c4 <Error_Handler>
  }

}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20008600 	.word	0x20008600
 80022d4:	40011400 	.word	0x40011400

080022d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b090      	sub	sp, #64	; 0x40
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a9f      	ldr	r2, [pc, #636]	; (8002574 <HAL_UART_MspInit+0x29c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	f040 808c 	bne.w	8002414 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022fc:	4b9e      	ldr	r3, [pc, #632]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 80022fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002302:	4a9d      	ldr	r2, [pc, #628]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 8002304:	f043 0310 	orr.w	r3, r3, #16
 8002308:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800230c:	4b9a      	ldr	r3, [pc, #616]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 800230e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	4b97      	ldr	r3, [pc, #604]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 800231c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002320:	4a95      	ldr	r2, [pc, #596]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800232a:	4b93      	ldr	r3, [pc, #588]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 800232c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002338:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800234a:	2304      	movs	r3, #4
 800234c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002352:	4619      	mov	r1, r3
 8002354:	4889      	ldr	r0, [pc, #548]	; (800257c <HAL_UART_MspInit+0x2a4>)
 8002356:	f004 fc2f 	bl	8006bb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 800235a:	4b89      	ldr	r3, [pc, #548]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 800235c:	4a89      	ldr	r2, [pc, #548]	; (8002584 <HAL_UART_MspInit+0x2ac>)
 800235e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002360:	4b87      	ldr	r3, [pc, #540]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 8002362:	2229      	movs	r2, #41	; 0x29
 8002364:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002366:	4b86      	ldr	r3, [pc, #536]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800236c:	4b84      	ldr	r3, [pc, #528]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002372:	4b83      	ldr	r3, [pc, #524]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 8002374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002378:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800237a:	4b81      	ldr	r3, [pc, #516]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002380:	4b7f      	ldr	r3, [pc, #508]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002386:	4b7e      	ldr	r3, [pc, #504]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 8002388:	2200      	movs	r2, #0
 800238a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800238c:	4b7c      	ldr	r3, [pc, #496]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 800238e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002392:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002394:	4b7a      	ldr	r3, [pc, #488]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 8002396:	2200      	movs	r2, #0
 8002398:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800239a:	4879      	ldr	r0, [pc, #484]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 800239c:	f000 fe74 	bl	8003088 <HAL_DMA_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80023a6:	f7fe ff0d 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a74      	ldr	r2, [pc, #464]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 80023ae:	679a      	str	r2, [r3, #120]	; 0x78
 80023b0:	4a73      	ldr	r2, [pc, #460]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream1;
 80023b6:	4b74      	ldr	r3, [pc, #464]	; (8002588 <HAL_UART_MspInit+0x2b0>)
 80023b8:	4a74      	ldr	r2, [pc, #464]	; (800258c <HAL_UART_MspInit+0x2b4>)
 80023ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80023bc:	4b72      	ldr	r3, [pc, #456]	; (8002588 <HAL_UART_MspInit+0x2b0>)
 80023be:	222a      	movs	r2, #42	; 0x2a
 80023c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023c2:	4b71      	ldr	r3, [pc, #452]	; (8002588 <HAL_UART_MspInit+0x2b0>)
 80023c4:	2240      	movs	r2, #64	; 0x40
 80023c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c8:	4b6f      	ldr	r3, [pc, #444]	; (8002588 <HAL_UART_MspInit+0x2b0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ce:	4b6e      	ldr	r3, [pc, #440]	; (8002588 <HAL_UART_MspInit+0x2b0>)
 80023d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d6:	4b6c      	ldr	r3, [pc, #432]	; (8002588 <HAL_UART_MspInit+0x2b0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023dc:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <HAL_UART_MspInit+0x2b0>)
 80023de:	2200      	movs	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80023e2:	4b69      	ldr	r3, [pc, #420]	; (8002588 <HAL_UART_MspInit+0x2b0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023e8:	4b67      	ldr	r3, [pc, #412]	; (8002588 <HAL_UART_MspInit+0x2b0>)
 80023ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80023ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023f0:	4b65      	ldr	r3, [pc, #404]	; (8002588 <HAL_UART_MspInit+0x2b0>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023f6:	4864      	ldr	r0, [pc, #400]	; (8002588 <HAL_UART_MspInit+0x2b0>)
 80023f8:	f000 fe46 	bl	8003088 <HAL_DMA_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002402:	f7fe fedf 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a5f      	ldr	r2, [pc, #380]	; (8002588 <HAL_UART_MspInit+0x2b0>)
 800240a:	675a      	str	r2, [r3, #116]	; 0x74
 800240c:	4a5e      	ldr	r2, [pc, #376]	; (8002588 <HAL_UART_MspInit+0x2b0>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002412:	e1ca      	b.n	80027aa <HAL_UART_MspInit+0x4d2>
  else if(uartHandle->Instance==USART2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a5d      	ldr	r2, [pc, #372]	; (8002590 <HAL_UART_MspInit+0x2b8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	f040 80c6 	bne.w	80025ac <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002420:	4b55      	ldr	r3, [pc, #340]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 8002422:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002426:	4a54      	ldr	r2, [pc, #336]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 8002428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002430:	4b51      	ldr	r3, [pc, #324]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 8002432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	623b      	str	r3, [r7, #32]
 800243c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	4b4e      	ldr	r3, [pc, #312]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 8002440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002444:	4a4c      	ldr	r2, [pc, #304]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800244e:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 8002450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800245c:	4b46      	ldr	r3, [pc, #280]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	4a45      	ldr	r2, [pc, #276]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 8002464:	f043 0308 	orr.w	r3, r3, #8
 8002468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800246c:	4b42      	ldr	r3, [pc, #264]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 800246e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800247a:	2308      	movs	r3, #8
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800248a:	2307      	movs	r3, #7
 800248c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002492:	4619      	mov	r1, r3
 8002494:	483f      	ldr	r0, [pc, #252]	; (8002594 <HAL_UART_MspInit+0x2bc>)
 8002496:	f004 fb8f 	bl	8006bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800249a:	2320      	movs	r3, #32
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024aa:	2307      	movs	r3, #7
 80024ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b2:	4619      	mov	r1, r3
 80024b4:	4838      	ldr	r0, [pc, #224]	; (8002598 <HAL_UART_MspInit+0x2c0>)
 80024b6:	f004 fb7f 	bl	8006bb8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Stream4;
 80024ba:	4b38      	ldr	r3, [pc, #224]	; (800259c <HAL_UART_MspInit+0x2c4>)
 80024bc:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <HAL_UART_MspInit+0x2c8>)
 80024be:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80024c0:	4b36      	ldr	r3, [pc, #216]	; (800259c <HAL_UART_MspInit+0x2c4>)
 80024c2:	222b      	movs	r2, #43	; 0x2b
 80024c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024c6:	4b35      	ldr	r3, [pc, #212]	; (800259c <HAL_UART_MspInit+0x2c4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024cc:	4b33      	ldr	r3, [pc, #204]	; (800259c <HAL_UART_MspInit+0x2c4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024d2:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_UART_MspInit+0x2c4>)
 80024d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_UART_MspInit+0x2c4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e0:	4b2e      	ldr	r3, [pc, #184]	; (800259c <HAL_UART_MspInit+0x2c4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80024e6:	4b2d      	ldr	r3, [pc, #180]	; (800259c <HAL_UART_MspInit+0x2c4>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <HAL_UART_MspInit+0x2c4>)
 80024ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024f2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024f4:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_UART_MspInit+0x2c4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80024fa:	4828      	ldr	r0, [pc, #160]	; (800259c <HAL_UART_MspInit+0x2c4>)
 80024fc:	f000 fdc4 	bl	8003088 <HAL_DMA_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_UART_MspInit+0x232>
      Error_Handler();
 8002506:	f7fe fe5d 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a23      	ldr	r2, [pc, #140]	; (800259c <HAL_UART_MspInit+0x2c4>)
 800250e:	679a      	str	r2, [r3, #120]	; 0x78
 8002510:	4a22      	ldr	r2, [pc, #136]	; (800259c <HAL_UART_MspInit+0x2c4>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream5;
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_UART_MspInit+0x2cc>)
 8002518:	4a23      	ldr	r2, [pc, #140]	; (80025a8 <HAL_UART_MspInit+0x2d0>)
 800251a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_UART_MspInit+0x2cc>)
 800251e:	222c      	movs	r2, #44	; 0x2c
 8002520:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_UART_MspInit+0x2cc>)
 8002524:	2240      	movs	r2, #64	; 0x40
 8002526:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002528:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <HAL_UART_MspInit+0x2cc>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_UART_MspInit+0x2cc>)
 8002530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002534:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_UART_MspInit+0x2cc>)
 8002538:	2200      	movs	r2, #0
 800253a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_UART_MspInit+0x2cc>)
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <HAL_UART_MspInit+0x2cc>)
 8002544:	2200      	movs	r2, #0
 8002546:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <HAL_UART_MspInit+0x2cc>)
 800254a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800254e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_UART_MspInit+0x2cc>)
 8002552:	2200      	movs	r2, #0
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002556:	4813      	ldr	r0, [pc, #76]	; (80025a4 <HAL_UART_MspInit+0x2cc>)
 8002558:	f000 fd96 	bl	8003088 <HAL_DMA_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8002562:	f7fe fe2f 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <HAL_UART_MspInit+0x2cc>)
 800256a:	675a      	str	r2, [r3, #116]	; 0x74
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <HAL_UART_MspInit+0x2cc>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002572:	e11a      	b.n	80027aa <HAL_UART_MspInit+0x4d2>
 8002574:	40011000 	.word	0x40011000
 8002578:	58024400 	.word	0x58024400
 800257c:	58020400 	.word	0x58020400
 8002580:	20008484 	.word	0x20008484
 8002584:	40020410 	.word	0x40020410
 8002588:	20008394 	.word	0x20008394
 800258c:	40020428 	.word	0x40020428
 8002590:	40004400 	.word	0x40004400
 8002594:	58020000 	.word	0x58020000
 8002598:	58020c00 	.word	0x58020c00
 800259c:	20008128 	.word	0x20008128
 80025a0:	40020470 	.word	0x40020470
 80025a4:	200084fc 	.word	0x200084fc
 80025a8:	40020488 	.word	0x40020488
  else if(uartHandle->Instance==USART3)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a80      	ldr	r2, [pc, #512]	; (80027b4 <HAL_UART_MspInit+0x4dc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d16b      	bne.n	800268e <HAL_UART_MspInit+0x3b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025b6:	4b80      	ldr	r3, [pc, #512]	; (80027b8 <HAL_UART_MspInit+0x4e0>)
 80025b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025bc:	4a7e      	ldr	r2, [pc, #504]	; (80027b8 <HAL_UART_MspInit+0x4e0>)
 80025be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025c6:	4b7c      	ldr	r3, [pc, #496]	; (80027b8 <HAL_UART_MspInit+0x4e0>)
 80025c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	697b      	ldr	r3, [r7, #20]
    hdma_usart3_rx.Instance = DMA2_Stream2;
 80025d4:	4b79      	ldr	r3, [pc, #484]	; (80027bc <HAL_UART_MspInit+0x4e4>)
 80025d6:	4a7a      	ldr	r2, [pc, #488]	; (80027c0 <HAL_UART_MspInit+0x4e8>)
 80025d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80025da:	4b78      	ldr	r3, [pc, #480]	; (80027bc <HAL_UART_MspInit+0x4e4>)
 80025dc:	222d      	movs	r2, #45	; 0x2d
 80025de:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025e0:	4b76      	ldr	r3, [pc, #472]	; (80027bc <HAL_UART_MspInit+0x4e4>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e6:	4b75      	ldr	r3, [pc, #468]	; (80027bc <HAL_UART_MspInit+0x4e4>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025ec:	4b73      	ldr	r3, [pc, #460]	; (80027bc <HAL_UART_MspInit+0x4e4>)
 80025ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f4:	4b71      	ldr	r3, [pc, #452]	; (80027bc <HAL_UART_MspInit+0x4e4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025fa:	4b70      	ldr	r3, [pc, #448]	; (80027bc <HAL_UART_MspInit+0x4e4>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002600:	4b6e      	ldr	r3, [pc, #440]	; (80027bc <HAL_UART_MspInit+0x4e4>)
 8002602:	2200      	movs	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002606:	4b6d      	ldr	r3, [pc, #436]	; (80027bc <HAL_UART_MspInit+0x4e4>)
 8002608:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800260c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800260e:	4b6b      	ldr	r3, [pc, #428]	; (80027bc <HAL_UART_MspInit+0x4e4>)
 8002610:	2200      	movs	r2, #0
 8002612:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002614:	4869      	ldr	r0, [pc, #420]	; (80027bc <HAL_UART_MspInit+0x4e4>)
 8002616:	f000 fd37 	bl	8003088 <HAL_DMA_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8002620:	f7fe fdd0 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a65      	ldr	r2, [pc, #404]	; (80027bc <HAL_UART_MspInit+0x4e4>)
 8002628:	679a      	str	r2, [r3, #120]	; 0x78
 800262a:	4a64      	ldr	r2, [pc, #400]	; (80027bc <HAL_UART_MspInit+0x4e4>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA2_Stream3;
 8002630:	4b64      	ldr	r3, [pc, #400]	; (80027c4 <HAL_UART_MspInit+0x4ec>)
 8002632:	4a65      	ldr	r2, [pc, #404]	; (80027c8 <HAL_UART_MspInit+0x4f0>)
 8002634:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_UART_MspInit+0x4ec>)
 8002638:	222e      	movs	r2, #46	; 0x2e
 800263a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800263c:	4b61      	ldr	r3, [pc, #388]	; (80027c4 <HAL_UART_MspInit+0x4ec>)
 800263e:	2240      	movs	r2, #64	; 0x40
 8002640:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002642:	4b60      	ldr	r3, [pc, #384]	; (80027c4 <HAL_UART_MspInit+0x4ec>)
 8002644:	2200      	movs	r2, #0
 8002646:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002648:	4b5e      	ldr	r3, [pc, #376]	; (80027c4 <HAL_UART_MspInit+0x4ec>)
 800264a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800264e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002650:	4b5c      	ldr	r3, [pc, #368]	; (80027c4 <HAL_UART_MspInit+0x4ec>)
 8002652:	2200      	movs	r2, #0
 8002654:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002656:	4b5b      	ldr	r3, [pc, #364]	; (80027c4 <HAL_UART_MspInit+0x4ec>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <HAL_UART_MspInit+0x4ec>)
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002662:	4b58      	ldr	r3, [pc, #352]	; (80027c4 <HAL_UART_MspInit+0x4ec>)
 8002664:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002668:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800266a:	4b56      	ldr	r3, [pc, #344]	; (80027c4 <HAL_UART_MspInit+0x4ec>)
 800266c:	2200      	movs	r2, #0
 800266e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002670:	4854      	ldr	r0, [pc, #336]	; (80027c4 <HAL_UART_MspInit+0x4ec>)
 8002672:	f000 fd09 	bl	8003088 <HAL_DMA_Init>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_UART_MspInit+0x3a8>
      Error_Handler();
 800267c:	f7fe fda2 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a50      	ldr	r2, [pc, #320]	; (80027c4 <HAL_UART_MspInit+0x4ec>)
 8002684:	675a      	str	r2, [r3, #116]	; 0x74
 8002686:	4a4f      	ldr	r2, [pc, #316]	; (80027c4 <HAL_UART_MspInit+0x4ec>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800268c:	e08d      	b.n	80027aa <HAL_UART_MspInit+0x4d2>
  else if(uartHandle->Instance==USART6)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a4e      	ldr	r2, [pc, #312]	; (80027cc <HAL_UART_MspInit+0x4f4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	f040 8088 	bne.w	80027aa <HAL_UART_MspInit+0x4d2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800269a:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <HAL_UART_MspInit+0x4e0>)
 800269c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026a0:	4a45      	ldr	r2, [pc, #276]	; (80027b8 <HAL_UART_MspInit+0x4e0>)
 80026a2:	f043 0320 	orr.w	r3, r3, #32
 80026a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026aa:	4b43      	ldr	r3, [pc, #268]	; (80027b8 <HAL_UART_MspInit+0x4e0>)
 80026ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b8:	4b3f      	ldr	r3, [pc, #252]	; (80027b8 <HAL_UART_MspInit+0x4e0>)
 80026ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026be:	4a3e      	ldr	r2, [pc, #248]	; (80027b8 <HAL_UART_MspInit+0x4e0>)
 80026c0:	f043 0304 	orr.w	r3, r3, #4
 80026c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c8:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <HAL_UART_MspInit+0x4e0>)
 80026ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026d6:	23c0      	movs	r3, #192	; 0xc0
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80026e6:	2307      	movs	r3, #7
 80026e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ee:	4619      	mov	r1, r3
 80026f0:	4837      	ldr	r0, [pc, #220]	; (80027d0 <HAL_UART_MspInit+0x4f8>)
 80026f2:	f004 fa61 	bl	8006bb8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream6;
 80026f6:	4b37      	ldr	r3, [pc, #220]	; (80027d4 <HAL_UART_MspInit+0x4fc>)
 80026f8:	4a37      	ldr	r2, [pc, #220]	; (80027d8 <HAL_UART_MspInit+0x500>)
 80026fa:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 80026fc:	4b35      	ldr	r3, [pc, #212]	; (80027d4 <HAL_UART_MspInit+0x4fc>)
 80026fe:	2247      	movs	r2, #71	; 0x47
 8002700:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002702:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_UART_MspInit+0x4fc>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002708:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_UART_MspInit+0x4fc>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <HAL_UART_MspInit+0x4fc>)
 8002710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002714:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_UART_MspInit+0x4fc>)
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800271c:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <HAL_UART_MspInit+0x4fc>)
 800271e:	2200      	movs	r2, #0
 8002720:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002722:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <HAL_UART_MspInit+0x4fc>)
 8002724:	2200      	movs	r2, #0
 8002726:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002728:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <HAL_UART_MspInit+0x4fc>)
 800272a:	2200      	movs	r2, #0
 800272c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_UART_MspInit+0x4fc>)
 8002730:	2200      	movs	r2, #0
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002734:	4827      	ldr	r0, [pc, #156]	; (80027d4 <HAL_UART_MspInit+0x4fc>)
 8002736:	f000 fca7 	bl	8003088 <HAL_DMA_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_UART_MspInit+0x46c>
      Error_Handler();
 8002740:	f7fe fd40 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <HAL_UART_MspInit+0x4fc>)
 8002748:	679a      	str	r2, [r3, #120]	; 0x78
 800274a:	4a22      	ldr	r2, [pc, #136]	; (80027d4 <HAL_UART_MspInit+0x4fc>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 8002750:	4b22      	ldr	r3, [pc, #136]	; (80027dc <HAL_UART_MspInit+0x504>)
 8002752:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <HAL_UART_MspInit+0x508>)
 8002754:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8002756:	4b21      	ldr	r3, [pc, #132]	; (80027dc <HAL_UART_MspInit+0x504>)
 8002758:	2248      	movs	r2, #72	; 0x48
 800275a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800275c:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <HAL_UART_MspInit+0x504>)
 800275e:	2240      	movs	r2, #64	; 0x40
 8002760:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_UART_MspInit+0x504>)
 8002764:	2200      	movs	r2, #0
 8002766:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002768:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <HAL_UART_MspInit+0x504>)
 800276a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800276e:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002770:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <HAL_UART_MspInit+0x504>)
 8002772:	2200      	movs	r2, #0
 8002774:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002776:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_UART_MspInit+0x504>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800277c:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_UART_MspInit+0x504>)
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002782:	4b16      	ldr	r3, [pc, #88]	; (80027dc <HAL_UART_MspInit+0x504>)
 8002784:	2200      	movs	r2, #0
 8002786:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_UART_MspInit+0x504>)
 800278a:	2200      	movs	r2, #0
 800278c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800278e:	4813      	ldr	r0, [pc, #76]	; (80027dc <HAL_UART_MspInit+0x504>)
 8002790:	f000 fc7a 	bl	8003088 <HAL_DMA_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_UART_MspInit+0x4c6>
      Error_Handler();
 800279a:	f7fe fd13 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <HAL_UART_MspInit+0x504>)
 80027a2:	675a      	str	r2, [r3, #116]	; 0x74
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <HAL_UART_MspInit+0x504>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80027aa:	bf00      	nop
 80027ac:	3740      	adds	r7, #64	; 0x40
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40004800 	.word	0x40004800
 80027b8:	58024400 	.word	0x58024400
 80027bc:	20008218 	.word	0x20008218
 80027c0:	40020440 	.word	0x40020440
 80027c4:	2000831c 	.word	0x2000831c
 80027c8:	40020458 	.word	0x40020458
 80027cc:	40011400 	.word	0x40011400
 80027d0:	58020800 	.word	0x58020800
 80027d4:	200081a0 	.word	0x200081a0
 80027d8:	400204a0 	.word	0x400204a0
 80027dc:	2000840c 	.word	0x2000840c
 80027e0:	400204b8 	.word	0x400204b8

080027e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 80027e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800281c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80027e8:	f7fd ff52 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027ee:	e003      	b.n	80027f8 <LoopCopyDataInit>

080027f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80027f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027f6:	3104      	adds	r1, #4

080027f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027f8:	480a      	ldr	r0, [pc, #40]	; (8002824 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80027fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002800:	d3f6      	bcc.n	80027f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002804:	e002      	b.n	800280c <LoopFillZerobss>

08002806 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002806:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002808:	f842 3b04 	str.w	r3, [r2], #4

0800280c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800280e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002810:	d3f9      	bcc.n	8002806 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8002812:	f01a fac5 	bl	801cda0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002816:	f7fe fb27 	bl	8000e68 <main>
  bx  lr    
 800281a:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 800281c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002820:	08022ddc 	.word	0x08022ddc
  ldr  r0, =_sdata
 8002824:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002828:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 800282c:	20001a9c 	.word	0x20001a9c
  ldr  r3, = _ebss
 8002830:	2000ba84 	.word	0x2000ba84

08002834 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002834:	e7fe      	b.n	8002834 <ADC3_IRQHandler>

08002836 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <LAN8742_RegisterBusIO+0x28>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <LAN8742_RegisterBusIO+0x28>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <LAN8742_RegisterBusIO+0x28>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002862:	e014      	b.n	800288e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d17c      	bne.n	80029b4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e01c      	b.n	800290e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f107 0208 	add.w	r2, r7, #8
 80028dc:	2112      	movs	r1, #18
 80028de:	6978      	ldr	r0, [r7, #20]
 80028e0:	4798      	blx	r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	da03      	bge.n	80028f0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80028e8:	f06f 0304 	mvn.w	r3, #4
 80028ec:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80028ee:	e00b      	b.n	8002908 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d105      	bne.n	8002908 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
         break;
 8002906:	e005      	b.n	8002914 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3301      	adds	r3, #1
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b1f      	cmp	r3, #31
 8002912:	d9df      	bls.n	80028d4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b1f      	cmp	r3, #31
 800291a:	d902      	bls.n	8002922 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800291c:	f06f 0302 	mvn.w	r3, #2
 8002920:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d145      	bne.n	80029b4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6810      	ldr	r0, [r2, #0]
 8002930:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002934:	2100      	movs	r1, #0
 8002936:	4798      	blx	r3
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	db37      	blt.n	80029ae <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6810      	ldr	r0, [r2, #0]
 8002946:	f107 0208 	add.w	r2, r7, #8
 800294a:	2100      	movs	r1, #0
 800294c:	4798      	blx	r3
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	db28      	blt.n	80029a6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	4798      	blx	r3
 800295a:	4603      	mov	r3, r0
 800295c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800295e:	e01c      	b.n	800299a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	4798      	blx	r3
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002972:	d80e      	bhi.n	8002992 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6810      	ldr	r0, [r2, #0]
 800297c:	f107 0208 	add.w	r2, r7, #8
 8002980:	2100      	movs	r1, #0
 8002982:	4798      	blx	r3
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	da07      	bge.n	800299a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800298a:	f06f 0304 	mvn.w	r3, #4
 800298e:	613b      	str	r3, [r7, #16]
                 break;
 8002990:	e010      	b.n	80029b4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002992:	f06f 0301 	mvn.w	r3, #1
 8002996:	613b      	str	r3, [r7, #16]
               break;
 8002998:	e00c      	b.n	80029b4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1dd      	bne.n	8002960 <LAN8742_Init+0xc6>
 80029a4:	e006      	b.n	80029b4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80029a6:	f06f 0304 	mvn.w	r3, #4
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	e002      	b.n	80029b4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80029ae:	f06f 0303 	mvn.w	r3, #3
 80029b2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d107      	bne.n	80029ca <LAN8742_Init+0x130>
   {
     tickstart =  pObj->IO.GetTick();
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	4798      	blx	r3
 80029c0:	4603      	mov	r3, r0
 80029c2:	60fb      	str	r3, [r7, #12]
     /* Wait for 2s to perform initialization */
     /*while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
     {
     }*/

     pObj->Is_Initialized = 1;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80029ca:	693b      	ldr	r3, [r7, #16]
 }
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6810      	ldr	r0, [r2, #0]
 80029e8:	f107 020c 	add.w	r2, r7, #12
 80029ec:	2101      	movs	r1, #1
 80029ee:	4798      	blx	r3
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	da02      	bge.n	80029fc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80029f6:	f06f 0304 	mvn.w	r3, #4
 80029fa:	e06e      	b.n	8002ada <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6810      	ldr	r0, [r2, #0]
 8002a04:	f107 020c 	add.w	r2, r7, #12
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4798      	blx	r3
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da02      	bge.n	8002a18 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002a12:	f06f 0304 	mvn.w	r3, #4
 8002a16:	e060      	b.n	8002ada <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002a22:	2301      	movs	r3, #1
 8002a24:	e059      	b.n	8002ada <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6810      	ldr	r0, [r2, #0]
 8002a2e:	f107 020c 	add.w	r2, r7, #12
 8002a32:	2100      	movs	r1, #0
 8002a34:	4798      	blx	r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da02      	bge.n	8002a42 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002a3c:	f06f 0304 	mvn.w	r3, #4
 8002a40:	e04b      	b.n	8002ada <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d11b      	bne.n	8002a84 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <LAN8742_GetLinkState+0x90>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002a60:	2302      	movs	r3, #2
 8002a62:	e03a      	b.n	8002ada <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e033      	b.n	8002ada <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	e02c      	b.n	8002ada <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002a80:	2305      	movs	r3, #5
 8002a82:	e02a      	b.n	8002ada <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6810      	ldr	r0, [r2, #0]
 8002a8c:	f107 020c 	add.w	r2, r7, #12
 8002a90:	211f      	movs	r1, #31
 8002a92:	4798      	blx	r3
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da02      	bge.n	8002aa0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002a9a:	f06f 0304 	mvn.w	r3, #4
 8002a9e:	e01c      	b.n	8002ada <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002aaa:	2306      	movs	r3, #6
 8002aac:	e015      	b.n	8002ada <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 031c 	and.w	r3, r3, #28
 8002ab4:	2b18      	cmp	r3, #24
 8002ab6:	d101      	bne.n	8002abc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e00e      	b.n	8002ada <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 031c 	and.w	r3, r3, #28
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d101      	bne.n	8002aca <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e007      	b.n	8002ada <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 031c 	and.w	r3, r3, #28
 8002ad0:	2b14      	cmp	r3, #20
 8002ad2:	d101      	bne.n	8002ad8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	e000      	b.n	8002ada <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002ad8:	2305      	movs	r3, #5
    }				
  }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aea:	2003      	movs	r0, #3
 8002aec:	f000 f923 	bl	8002d36 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002af0:	f005 faf4 	bl	80080dc <HAL_RCC_GetSysClockFreq>
 8002af4:	4601      	mov	r1, r0
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <HAL_Init+0x68>)
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <HAL_Init+0x6c>)
 8002b02:	5cd3      	ldrb	r3, [r2, r3]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	fa21 f303 	lsr.w	r3, r1, r3
 8002b0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <HAL_Init+0x68>)
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_Init+0x6c>)
 8002b18:	5cd3      	ldrb	r3, [r2, r3]
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
 8002b24:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <HAL_Init+0x70>)
 8002b26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b28:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <HAL_Init+0x74>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7ff f8b0 	bl	8001c94 <HAL_InitTick>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e002      	b.n	8002b44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b3e:	f7ff f88b 	bl	8001c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	58024400 	.word	0x58024400
 8002b50:	08022960 	.word	0x08022960
 8002b54:	20000004 	.word	0x20000004
 8002b58:	20000000 	.word	0x20000000

08002b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_IncTick+0x20>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_IncTick+0x24>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <HAL_IncTick+0x24>)
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	2000000c 	.word	0x2000000c
 8002b80:	20008718 	.word	0x20008718

08002b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return uwTick;
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_GetTick+0x14>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20008718 	.word	0x20008718

08002b9c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_GetREVID+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0c1b      	lsrs	r3, r3, #16
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	5c001000 	.word	0x5c001000

08002bb4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002bc4:	4904      	ldr	r1, [pc, #16]	; (8002bd8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	58000400 	.word	0x58000400

08002bdc <__NVIC_SetPriorityGrouping>:
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <__NVIC_SetPriorityGrouping+0x40>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0a:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <__NVIC_SetPriorityGrouping+0x40>)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	60d3      	str	r3, [r2, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00
 8002c20:	05fa0000 	.word	0x05fa0000

08002c24 <__NVIC_GetPriorityGrouping>:
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <__NVIC_GetPriorityGrouping+0x18>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	f003 0307 	and.w	r3, r3, #7
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_EnableIRQ>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	db0b      	blt.n	8002c6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	4907      	ldr	r1, [pc, #28]	; (8002c78 <__NVIC_EnableIRQ+0x38>)
 8002c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2001      	movs	r0, #1
 8002c62:	fa00 f202 	lsl.w	r2, r0, r2
 8002c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000e100 	.word	0xe000e100

08002c7c <__NVIC_SetPriority>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	6039      	str	r1, [r7, #0]
 8002c86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	db0a      	blt.n	8002ca6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	490c      	ldr	r1, [pc, #48]	; (8002cc8 <__NVIC_SetPriority+0x4c>)
 8002c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ca4:	e00a      	b.n	8002cbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4908      	ldr	r1, [pc, #32]	; (8002ccc <__NVIC_SetPriority+0x50>)
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	3b04      	subs	r3, #4
 8002cb4:	0112      	lsls	r2, r2, #4
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	440b      	add	r3, r1
 8002cba:	761a      	strb	r2, [r3, #24]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000e100 	.word	0xe000e100
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <NVIC_EncodePriority>:
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	; 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f1c3 0307 	rsb	r3, r3, #7
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	bf28      	it	cs
 8002cee:	2304      	movcs	r3, #4
 8002cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d902      	bls.n	8002d00 <NVIC_EncodePriority+0x30>
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3b03      	subs	r3, #3
 8002cfe:	e000      	b.n	8002d02 <NVIC_EncodePriority+0x32>
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	401a      	ands	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43d9      	mvns	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	4313      	orrs	r3, r2
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	; 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ff4c 	bl	8002bdc <__NVIC_SetPriorityGrouping>
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5a:	f7ff ff63 	bl	8002c24 <__NVIC_GetPriorityGrouping>
 8002d5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	6978      	ldr	r0, [r7, #20]
 8002d66:	f7ff ffb3 	bl	8002cd0 <NVIC_EncodePriority>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff82 	bl	8002c7c <__NVIC_SetPriority>
}
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff56 	bl	8002c40 <__NVIC_EnableIRQ>
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002da0:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_MPU_Disable+0x24>)
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <HAL_MPU_Disable+0x24>)
 8002daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dae:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <HAL_MPU_Disable+0x28>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	605a      	str	r2, [r3, #4]
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00
 8002dc4:	e000ed90 	.word	0xe000ed90

08002dc8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002dd0:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <HAL_MPU_Enable+0x34>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_MPU_Enable+0x38>)
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	4a08      	ldr	r2, [pc, #32]	; (8002e00 <HAL_MPU_Enable+0x38>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002de6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002dea:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000ed90 	.word	0xe000ed90
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	785a      	ldrb	r2, [r3, #1]
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_MPU_ConfigRegion+0x84>)
 8002e12:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d029      	beq.n	8002e70 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002e1c:	4a1a      	ldr	r2, [pc, #104]	; (8002e88 <HAL_MPU_ConfigRegion+0x84>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7b1b      	ldrb	r3, [r3, #12]
 8002e28:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7adb      	ldrb	r3, [r3, #11]
 8002e2e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7a9b      	ldrb	r3, [r3, #10]
 8002e36:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002e38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7b5b      	ldrb	r3, [r3, #13]
 8002e3e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002e40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	7b9b      	ldrb	r3, [r3, #14]
 8002e46:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002e48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	7bdb      	ldrb	r3, [r3, #15]
 8002e4e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002e50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7a5b      	ldrb	r3, [r3, #9]
 8002e56:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002e58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	7a1b      	ldrb	r3, [r3, #8]
 8002e5e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002e60:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e68:	4a07      	ldr	r2, [pc, #28]	; (8002e88 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002e6a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e6c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002e6e:	e005      	b.n	8002e7c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_MPU_ConfigRegion+0x84>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002e76:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <HAL_MPU_ConfigRegion+0x84>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed90 	.word	0xe000ed90

08002e8c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002e90:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <HAL_GetCurrentCPUID+0x24>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	2b07      	cmp	r3, #7
 8002e9c:	d101      	bne.n	8002ea2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e000      	b.n	8002ea4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002ea2:	2301      	movs	r3, #1
  }
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e054      	b.n	8002f70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7f5b      	ldrb	r3, [r3, #29]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fd fc96 	bl	8000808 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	791b      	ldrb	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <HAL_CRC_Init+0xc4>)
 8002ef0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0218 	bic.w	r2, r2, #24
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	e00c      	b.n	8002f1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6899      	ldr	r1, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f834 	bl	8002f7c <HAL_CRCEx_Polynomial_Set>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e028      	b.n	8002f70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	795b      	ldrb	r3, [r3, #5]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f2e:	611a      	str	r2, [r3, #16]
 8002f30:	e004      	b.n	8002f3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6912      	ldr	r2, [r2, #16]
 8002f3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	04c11db7 	.word	0x04c11db7

08002f7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002f8c:	231f      	movs	r3, #31
 8002f8e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002f90:	bf00      	nop
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1e5a      	subs	r2, r3, #1
 8002f96:	613a      	str	r2, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <HAL_CRCEx_Polynomial_Set+0x34>
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b18      	cmp	r3, #24
 8002fb4:	d846      	bhi.n	8003044 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <HAL_CRCEx_Polynomial_Set+0x40>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	0800304b 	.word	0x0800304b
 8002fc0:	08003045 	.word	0x08003045
 8002fc4:	08003045 	.word	0x08003045
 8002fc8:	08003045 	.word	0x08003045
 8002fcc:	08003045 	.word	0x08003045
 8002fd0:	08003045 	.word	0x08003045
 8002fd4:	08003045 	.word	0x08003045
 8002fd8:	08003045 	.word	0x08003045
 8002fdc:	08003039 	.word	0x08003039
 8002fe0:	08003045 	.word	0x08003045
 8002fe4:	08003045 	.word	0x08003045
 8002fe8:	08003045 	.word	0x08003045
 8002fec:	08003045 	.word	0x08003045
 8002ff0:	08003045 	.word	0x08003045
 8002ff4:	08003045 	.word	0x08003045
 8002ff8:	08003045 	.word	0x08003045
 8002ffc:	0800302d 	.word	0x0800302d
 8003000:	08003045 	.word	0x08003045
 8003004:	08003045 	.word	0x08003045
 8003008:	08003045 	.word	0x08003045
 800300c:	08003045 	.word	0x08003045
 8003010:	08003045 	.word	0x08003045
 8003014:	08003045 	.word	0x08003045
 8003018:	08003045 	.word	0x08003045
 800301c:	08003021 	.word	0x08003021
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2b06      	cmp	r3, #6
 8003024:	d913      	bls.n	800304e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800302a:	e010      	b.n	800304e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	2b07      	cmp	r3, #7
 8003030:	d90f      	bls.n	8003052 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003036:	e00c      	b.n	8003052 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	d90b      	bls.n	8003056 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003042:	e008      	b.n	8003056 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	75fb      	strb	r3, [r7, #23]
      break;
 8003048:	e006      	b.n	8003058 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800304a:	bf00      	nop
 800304c:	e004      	b.n	8003058 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800304e:	bf00      	nop
 8003050:	e002      	b.n	8003058 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003052:	bf00      	nop
 8003054:	e000      	b.n	8003058 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003056:	bf00      	nop
  }
  if (status == HAL_OK)
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10d      	bne.n	800307a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f023 0118 	bic.w	r1, r3, #24
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	430a      	orrs	r2, r1
 8003078:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800307a:	7dfb      	ldrb	r3, [r7, #23]
}
 800307c:	4618      	mov	r0, r3
 800307e:	371c      	adds	r7, #28
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003090:	f7ff fd78 	bl	8002b84 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e316      	b.n	80036ce <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a66      	ldr	r2, [pc, #408]	; (8003240 <HAL_DMA_Init+0x1b8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d04a      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a65      	ldr	r2, [pc, #404]	; (8003244 <HAL_DMA_Init+0x1bc>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d045      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a63      	ldr	r2, [pc, #396]	; (8003248 <HAL_DMA_Init+0x1c0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d040      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a62      	ldr	r2, [pc, #392]	; (800324c <HAL_DMA_Init+0x1c4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d03b      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a60      	ldr	r2, [pc, #384]	; (8003250 <HAL_DMA_Init+0x1c8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d036      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a5f      	ldr	r2, [pc, #380]	; (8003254 <HAL_DMA_Init+0x1cc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d031      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a5d      	ldr	r2, [pc, #372]	; (8003258 <HAL_DMA_Init+0x1d0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d02c      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a5c      	ldr	r2, [pc, #368]	; (800325c <HAL_DMA_Init+0x1d4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d027      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a5a      	ldr	r2, [pc, #360]	; (8003260 <HAL_DMA_Init+0x1d8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d022      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a59      	ldr	r2, [pc, #356]	; (8003264 <HAL_DMA_Init+0x1dc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d01d      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a57      	ldr	r2, [pc, #348]	; (8003268 <HAL_DMA_Init+0x1e0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d018      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a56      	ldr	r2, [pc, #344]	; (800326c <HAL_DMA_Init+0x1e4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d013      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a54      	ldr	r2, [pc, #336]	; (8003270 <HAL_DMA_Init+0x1e8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00e      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a53      	ldr	r2, [pc, #332]	; (8003274 <HAL_DMA_Init+0x1ec>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d009      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a51      	ldr	r2, [pc, #324]	; (8003278 <HAL_DMA_Init+0x1f0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <HAL_DMA_Init+0xb8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a50      	ldr	r2, [pc, #320]	; (800327c <HAL_DMA_Init+0x1f4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d101      	bne.n	8003144 <HAL_DMA_Init+0xbc>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_DMA_Init+0xbe>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 813b 	beq.w	80033c2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a37      	ldr	r2, [pc, #220]	; (8003240 <HAL_DMA_Init+0x1b8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d04a      	beq.n	80031fc <HAL_DMA_Init+0x174>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a36      	ldr	r2, [pc, #216]	; (8003244 <HAL_DMA_Init+0x1bc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d045      	beq.n	80031fc <HAL_DMA_Init+0x174>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a34      	ldr	r2, [pc, #208]	; (8003248 <HAL_DMA_Init+0x1c0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d040      	beq.n	80031fc <HAL_DMA_Init+0x174>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a33      	ldr	r2, [pc, #204]	; (800324c <HAL_DMA_Init+0x1c4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d03b      	beq.n	80031fc <HAL_DMA_Init+0x174>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a31      	ldr	r2, [pc, #196]	; (8003250 <HAL_DMA_Init+0x1c8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d036      	beq.n	80031fc <HAL_DMA_Init+0x174>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a30      	ldr	r2, [pc, #192]	; (8003254 <HAL_DMA_Init+0x1cc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d031      	beq.n	80031fc <HAL_DMA_Init+0x174>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a2e      	ldr	r2, [pc, #184]	; (8003258 <HAL_DMA_Init+0x1d0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02c      	beq.n	80031fc <HAL_DMA_Init+0x174>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a2d      	ldr	r2, [pc, #180]	; (800325c <HAL_DMA_Init+0x1d4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d027      	beq.n	80031fc <HAL_DMA_Init+0x174>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2b      	ldr	r2, [pc, #172]	; (8003260 <HAL_DMA_Init+0x1d8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d022      	beq.n	80031fc <HAL_DMA_Init+0x174>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2a      	ldr	r2, [pc, #168]	; (8003264 <HAL_DMA_Init+0x1dc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d01d      	beq.n	80031fc <HAL_DMA_Init+0x174>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a28      	ldr	r2, [pc, #160]	; (8003268 <HAL_DMA_Init+0x1e0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d018      	beq.n	80031fc <HAL_DMA_Init+0x174>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a27      	ldr	r2, [pc, #156]	; (800326c <HAL_DMA_Init+0x1e4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <HAL_DMA_Init+0x174>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a25      	ldr	r2, [pc, #148]	; (8003270 <HAL_DMA_Init+0x1e8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00e      	beq.n	80031fc <HAL_DMA_Init+0x174>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a24      	ldr	r2, [pc, #144]	; (8003274 <HAL_DMA_Init+0x1ec>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_DMA_Init+0x174>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a22      	ldr	r2, [pc, #136]	; (8003278 <HAL_DMA_Init+0x1f0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_DMA_Init+0x174>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a21      	ldr	r2, [pc, #132]	; (800327c <HAL_DMA_Init+0x1f4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d108      	bne.n	800320e <HAL_DMA_Init+0x186>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e007      	b.n	800321e <HAL_DMA_Init+0x196>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800321e:	e02f      	b.n	8003280 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003220:	f7ff fcb0 	bl	8002b84 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b05      	cmp	r3, #5
 800322c:	d928      	bls.n	8003280 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2203      	movs	r2, #3
 8003238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e246      	b.n	80036ce <HAL_DMA_Init+0x646>
 8003240:	40020010 	.word	0x40020010
 8003244:	40020028 	.word	0x40020028
 8003248:	40020040 	.word	0x40020040
 800324c:	40020058 	.word	0x40020058
 8003250:	40020070 	.word	0x40020070
 8003254:	40020088 	.word	0x40020088
 8003258:	400200a0 	.word	0x400200a0
 800325c:	400200b8 	.word	0x400200b8
 8003260:	40020410 	.word	0x40020410
 8003264:	40020428 	.word	0x40020428
 8003268:	40020440 	.word	0x40020440
 800326c:	40020458 	.word	0x40020458
 8003270:	40020470 	.word	0x40020470
 8003274:	40020488 	.word	0x40020488
 8003278:	400204a0 	.word	0x400204a0
 800327c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1c8      	bne.n	8003220 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4b83      	ldr	r3, [pc, #524]	; (80034a8 <HAL_DMA_Init+0x420>)
 800329a:	4013      	ands	r3, r2
 800329c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80032a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d107      	bne.n	80032e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	4313      	orrs	r3, r2
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80032e4:	4b71      	ldr	r3, [pc, #452]	; (80034ac <HAL_DMA_Init+0x424>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b71      	ldr	r3, [pc, #452]	; (80034b0 <HAL_DMA_Init+0x428>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f0:	d328      	bcc.n	8003344 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b28      	cmp	r3, #40	; 0x28
 80032f8:	d903      	bls.n	8003302 <HAL_DMA_Init+0x27a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b2e      	cmp	r3, #46	; 0x2e
 8003300:	d917      	bls.n	8003332 <HAL_DMA_Init+0x2aa>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b3e      	cmp	r3, #62	; 0x3e
 8003308:	d903      	bls.n	8003312 <HAL_DMA_Init+0x28a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b42      	cmp	r3, #66	; 0x42
 8003310:	d90f      	bls.n	8003332 <HAL_DMA_Init+0x2aa>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b46      	cmp	r3, #70	; 0x46
 8003318:	d903      	bls.n	8003322 <HAL_DMA_Init+0x29a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b48      	cmp	r3, #72	; 0x48
 8003320:	d907      	bls.n	8003332 <HAL_DMA_Init+0x2aa>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b4e      	cmp	r3, #78	; 0x4e
 8003328:	d905      	bls.n	8003336 <HAL_DMA_Init+0x2ae>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b52      	cmp	r3, #82	; 0x52
 8003330:	d801      	bhi.n	8003336 <HAL_DMA_Init+0x2ae>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_DMA_Init+0x2b0>
 8003336:	2300      	movs	r3, #0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003342:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f023 0307 	bic.w	r3, r3, #7
 800335a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	2b04      	cmp	r3, #4
 800336c:	d117      	bne.n	800339e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00e      	beq.n	800339e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f001 fbfd 	bl	8004b80 <DMA_CheckFifoParam>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2240      	movs	r2, #64	; 0x40
 8003390:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e197      	b.n	80036ce <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f001 fb38 	bl	8004a1c <DMA_CalcBaseAndBitshift>
 80033ac:	4603      	mov	r3, r0
 80033ae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	223f      	movs	r2, #63	; 0x3f
 80033ba:	409a      	lsls	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	e0cd      	b.n	800355e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3b      	ldr	r2, [pc, #236]	; (80034b4 <HAL_DMA_Init+0x42c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_Init+0x38a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a39      	ldr	r2, [pc, #228]	; (80034b8 <HAL_DMA_Init+0x430>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_Init+0x38a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a38      	ldr	r2, [pc, #224]	; (80034bc <HAL_DMA_Init+0x434>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_DMA_Init+0x38a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a36      	ldr	r2, [pc, #216]	; (80034c0 <HAL_DMA_Init+0x438>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_DMA_Init+0x38a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a35      	ldr	r2, [pc, #212]	; (80034c4 <HAL_DMA_Init+0x43c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_DMA_Init+0x38a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a33      	ldr	r2, [pc, #204]	; (80034c8 <HAL_DMA_Init+0x440>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_DMA_Init+0x38a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a32      	ldr	r2, [pc, #200]	; (80034cc <HAL_DMA_Init+0x444>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_Init+0x38a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a30      	ldr	r2, [pc, #192]	; (80034d0 <HAL_DMA_Init+0x448>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Init+0x38e>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_DMA_Init+0x390>
 8003416:	2300      	movs	r3, #0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8097 	beq.w	800354c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a24      	ldr	r2, [pc, #144]	; (80034b4 <HAL_DMA_Init+0x42c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d021      	beq.n	800346c <HAL_DMA_Init+0x3e4>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a22      	ldr	r2, [pc, #136]	; (80034b8 <HAL_DMA_Init+0x430>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01c      	beq.n	800346c <HAL_DMA_Init+0x3e4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a21      	ldr	r2, [pc, #132]	; (80034bc <HAL_DMA_Init+0x434>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d017      	beq.n	800346c <HAL_DMA_Init+0x3e4>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <HAL_DMA_Init+0x438>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d012      	beq.n	800346c <HAL_DMA_Init+0x3e4>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1e      	ldr	r2, [pc, #120]	; (80034c4 <HAL_DMA_Init+0x43c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00d      	beq.n	800346c <HAL_DMA_Init+0x3e4>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1c      	ldr	r2, [pc, #112]	; (80034c8 <HAL_DMA_Init+0x440>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d008      	beq.n	800346c <HAL_DMA_Init+0x3e4>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <HAL_DMA_Init+0x444>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <HAL_DMA_Init+0x3e4>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <HAL_DMA_Init+0x448>)
 800346a:	4293      	cmp	r3, r2
 800346c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2202      	movs	r2, #2
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_DMA_Init+0x44c>)
 800348a:	4013      	ands	r3, r2
 800348c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d020      	beq.n	80034d8 <HAL_DMA_Init+0x450>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b80      	cmp	r3, #128	; 0x80
 800349c:	d102      	bne.n	80034a4 <HAL_DMA_Init+0x41c>
 800349e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034a2:	e01a      	b.n	80034da <HAL_DMA_Init+0x452>
 80034a4:	2300      	movs	r3, #0
 80034a6:	e018      	b.n	80034da <HAL_DMA_Init+0x452>
 80034a8:	fe10803f 	.word	0xfe10803f
 80034ac:	5c001000 	.word	0x5c001000
 80034b0:	ffff0000 	.word	0xffff0000
 80034b4:	58025408 	.word	0x58025408
 80034b8:	5802541c 	.word	0x5802541c
 80034bc:	58025430 	.word	0x58025430
 80034c0:	58025444 	.word	0x58025444
 80034c4:	58025458 	.word	0x58025458
 80034c8:	5802546c 	.word	0x5802546c
 80034cc:	58025480 	.word	0x58025480
 80034d0:	58025494 	.word	0x58025494
 80034d4:	fffe000f 	.word	0xfffe000f
 80034d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68d2      	ldr	r2, [r2, #12]
 80034de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80034e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80034f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80034f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003500:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003508:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	4b6e      	ldr	r3, [pc, #440]	; (80036d8 <HAL_DMA_Init+0x650>)
 8003520:	4413      	add	r3, r2
 8003522:	4a6e      	ldr	r2, [pc, #440]	; (80036dc <HAL_DMA_Init+0x654>)
 8003524:	fba2 2303 	umull	r2, r3, r2, r3
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	009a      	lsls	r2, r3, #2
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f001 fa73 	bl	8004a1c <DMA_CalcBaseAndBitshift>
 8003536:	4603      	mov	r3, r0
 8003538:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2201      	movs	r2, #1
 8003544:	409a      	lsls	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	e008      	b.n	800355e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2240      	movs	r2, #64	; 0x40
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2203      	movs	r2, #3
 8003556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0b7      	b.n	80036ce <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a5f      	ldr	r2, [pc, #380]	; (80036e0 <HAL_DMA_Init+0x658>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d072      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a5d      	ldr	r2, [pc, #372]	; (80036e4 <HAL_DMA_Init+0x65c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d06d      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a5c      	ldr	r2, [pc, #368]	; (80036e8 <HAL_DMA_Init+0x660>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d068      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a5a      	ldr	r2, [pc, #360]	; (80036ec <HAL_DMA_Init+0x664>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d063      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a59      	ldr	r2, [pc, #356]	; (80036f0 <HAL_DMA_Init+0x668>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d05e      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a57      	ldr	r2, [pc, #348]	; (80036f4 <HAL_DMA_Init+0x66c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d059      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a56      	ldr	r2, [pc, #344]	; (80036f8 <HAL_DMA_Init+0x670>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d054      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a54      	ldr	r2, [pc, #336]	; (80036fc <HAL_DMA_Init+0x674>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d04f      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a53      	ldr	r2, [pc, #332]	; (8003700 <HAL_DMA_Init+0x678>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d04a      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a51      	ldr	r2, [pc, #324]	; (8003704 <HAL_DMA_Init+0x67c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d045      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a50      	ldr	r2, [pc, #320]	; (8003708 <HAL_DMA_Init+0x680>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d040      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a4e      	ldr	r2, [pc, #312]	; (800370c <HAL_DMA_Init+0x684>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d03b      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a4d      	ldr	r2, [pc, #308]	; (8003710 <HAL_DMA_Init+0x688>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d036      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a4b      	ldr	r2, [pc, #300]	; (8003714 <HAL_DMA_Init+0x68c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d031      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a4a      	ldr	r2, [pc, #296]	; (8003718 <HAL_DMA_Init+0x690>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d02c      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a48      	ldr	r2, [pc, #288]	; (800371c <HAL_DMA_Init+0x694>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d027      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a47      	ldr	r2, [pc, #284]	; (8003720 <HAL_DMA_Init+0x698>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d022      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a45      	ldr	r2, [pc, #276]	; (8003724 <HAL_DMA_Init+0x69c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01d      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a44      	ldr	r2, [pc, #272]	; (8003728 <HAL_DMA_Init+0x6a0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d018      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a42      	ldr	r2, [pc, #264]	; (800372c <HAL_DMA_Init+0x6a4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a41      	ldr	r2, [pc, #260]	; (8003730 <HAL_DMA_Init+0x6a8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00e      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a3f      	ldr	r2, [pc, #252]	; (8003734 <HAL_DMA_Init+0x6ac>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a3e      	ldr	r2, [pc, #248]	; (8003738 <HAL_DMA_Init+0x6b0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_DMA_Init+0x5c6>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a3c      	ldr	r2, [pc, #240]	; (800373c <HAL_DMA_Init+0x6b4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_DMA_Init+0x5ca>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <HAL_DMA_Init+0x5cc>
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d032      	beq.n	80036be <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f001 fb0d 	bl	8004c78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b80      	cmp	r3, #128	; 0x80
 8003664:	d102      	bne.n	800366c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003680:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d010      	beq.n	80036ac <HAL_DMA_Init+0x624>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b08      	cmp	r3, #8
 8003690:	d80c      	bhi.n	80036ac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f001 fb8a 	bl	8004dac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	e008      	b.n	80036be <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	a7fdabf8 	.word	0xa7fdabf8
 80036dc:	cccccccd 	.word	0xcccccccd
 80036e0:	40020010 	.word	0x40020010
 80036e4:	40020028 	.word	0x40020028
 80036e8:	40020040 	.word	0x40020040
 80036ec:	40020058 	.word	0x40020058
 80036f0:	40020070 	.word	0x40020070
 80036f4:	40020088 	.word	0x40020088
 80036f8:	400200a0 	.word	0x400200a0
 80036fc:	400200b8 	.word	0x400200b8
 8003700:	40020410 	.word	0x40020410
 8003704:	40020428 	.word	0x40020428
 8003708:	40020440 	.word	0x40020440
 800370c:	40020458 	.word	0x40020458
 8003710:	40020470 	.word	0x40020470
 8003714:	40020488 	.word	0x40020488
 8003718:	400204a0 	.word	0x400204a0
 800371c:	400204b8 	.word	0x400204b8
 8003720:	58025408 	.word	0x58025408
 8003724:	5802541c 	.word	0x5802541c
 8003728:	58025430 	.word	0x58025430
 800372c:	58025444 	.word	0x58025444
 8003730:	58025458 	.word	0x58025458
 8003734:	5802546c 	.word	0x5802546c
 8003738:	58025480 	.word	0x58025480
 800373c:	58025494 	.word	0x58025494

08003740 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e205      	b.n	8003b5e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d004      	beq.n	8003768 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e1fa      	b.n	8003b5e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a8c      	ldr	r2, [pc, #560]	; (80039a0 <HAL_DMA_Abort_IT+0x260>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d04a      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a8b      	ldr	r2, [pc, #556]	; (80039a4 <HAL_DMA_Abort_IT+0x264>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d045      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a89      	ldr	r2, [pc, #548]	; (80039a8 <HAL_DMA_Abort_IT+0x268>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d040      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a88      	ldr	r2, [pc, #544]	; (80039ac <HAL_DMA_Abort_IT+0x26c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d03b      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a86      	ldr	r2, [pc, #536]	; (80039b0 <HAL_DMA_Abort_IT+0x270>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d036      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a85      	ldr	r2, [pc, #532]	; (80039b4 <HAL_DMA_Abort_IT+0x274>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d031      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a83      	ldr	r2, [pc, #524]	; (80039b8 <HAL_DMA_Abort_IT+0x278>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02c      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a82      	ldr	r2, [pc, #520]	; (80039bc <HAL_DMA_Abort_IT+0x27c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d027      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a80      	ldr	r2, [pc, #512]	; (80039c0 <HAL_DMA_Abort_IT+0x280>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d022      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a7f      	ldr	r2, [pc, #508]	; (80039c4 <HAL_DMA_Abort_IT+0x284>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d01d      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a7d      	ldr	r2, [pc, #500]	; (80039c8 <HAL_DMA_Abort_IT+0x288>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d018      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a7c      	ldr	r2, [pc, #496]	; (80039cc <HAL_DMA_Abort_IT+0x28c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d013      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a7a      	ldr	r2, [pc, #488]	; (80039d0 <HAL_DMA_Abort_IT+0x290>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00e      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a79      	ldr	r2, [pc, #484]	; (80039d4 <HAL_DMA_Abort_IT+0x294>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d009      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a77      	ldr	r2, [pc, #476]	; (80039d8 <HAL_DMA_Abort_IT+0x298>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_DMA_Abort_IT+0xc8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a76      	ldr	r2, [pc, #472]	; (80039dc <HAL_DMA_Abort_IT+0x29c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d101      	bne.n	800380c <HAL_DMA_Abort_IT+0xcc>
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_DMA_Abort_IT+0xce>
 800380c:	2300      	movs	r3, #0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d065      	beq.n	80038de <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2204      	movs	r2, #4
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a60      	ldr	r2, [pc, #384]	; (80039a0 <HAL_DMA_Abort_IT+0x260>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d04a      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5e      	ldr	r2, [pc, #376]	; (80039a4 <HAL_DMA_Abort_IT+0x264>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d045      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5d      	ldr	r2, [pc, #372]	; (80039a8 <HAL_DMA_Abort_IT+0x268>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d040      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a5b      	ldr	r2, [pc, #364]	; (80039ac <HAL_DMA_Abort_IT+0x26c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d03b      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a5a      	ldr	r2, [pc, #360]	; (80039b0 <HAL_DMA_Abort_IT+0x270>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d036      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_DMA_Abort_IT+0x274>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d031      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a57      	ldr	r2, [pc, #348]	; (80039b8 <HAL_DMA_Abort_IT+0x278>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d02c      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a55      	ldr	r2, [pc, #340]	; (80039bc <HAL_DMA_Abort_IT+0x27c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d027      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a54      	ldr	r2, [pc, #336]	; (80039c0 <HAL_DMA_Abort_IT+0x280>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d022      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a52      	ldr	r2, [pc, #328]	; (80039c4 <HAL_DMA_Abort_IT+0x284>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01d      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a51      	ldr	r2, [pc, #324]	; (80039c8 <HAL_DMA_Abort_IT+0x288>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d018      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a4f      	ldr	r2, [pc, #316]	; (80039cc <HAL_DMA_Abort_IT+0x28c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a4e      	ldr	r2, [pc, #312]	; (80039d0 <HAL_DMA_Abort_IT+0x290>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00e      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a4c      	ldr	r2, [pc, #304]	; (80039d4 <HAL_DMA_Abort_IT+0x294>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a4b      	ldr	r2, [pc, #300]	; (80039d8 <HAL_DMA_Abort_IT+0x298>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d004      	beq.n	80038ba <HAL_DMA_Abort_IT+0x17a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a49      	ldr	r2, [pc, #292]	; (80039dc <HAL_DMA_Abort_IT+0x29c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d108      	bne.n	80038cc <HAL_DMA_Abort_IT+0x18c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e147      	b.n	8003b5c <HAL_DMA_Abort_IT+0x41c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	e13e      	b.n	8003b5c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 020e 	bic.w	r2, r2, #14
 80038ec:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2b      	ldr	r2, [pc, #172]	; (80039a0 <HAL_DMA_Abort_IT+0x260>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d04a      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a29      	ldr	r2, [pc, #164]	; (80039a4 <HAL_DMA_Abort_IT+0x264>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d045      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a28      	ldr	r2, [pc, #160]	; (80039a8 <HAL_DMA_Abort_IT+0x268>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d040      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a26      	ldr	r2, [pc, #152]	; (80039ac <HAL_DMA_Abort_IT+0x26c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d03b      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a25      	ldr	r2, [pc, #148]	; (80039b0 <HAL_DMA_Abort_IT+0x270>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d036      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <HAL_DMA_Abort_IT+0x274>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d031      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a22      	ldr	r2, [pc, #136]	; (80039b8 <HAL_DMA_Abort_IT+0x278>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d02c      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a20      	ldr	r2, [pc, #128]	; (80039bc <HAL_DMA_Abort_IT+0x27c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d027      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1f      	ldr	r2, [pc, #124]	; (80039c0 <HAL_DMA_Abort_IT+0x280>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d022      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <HAL_DMA_Abort_IT+0x284>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d01d      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1c      	ldr	r2, [pc, #112]	; (80039c8 <HAL_DMA_Abort_IT+0x288>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d018      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <HAL_DMA_Abort_IT+0x28c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <HAL_DMA_Abort_IT+0x290>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00e      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a17      	ldr	r2, [pc, #92]	; (80039d4 <HAL_DMA_Abort_IT+0x294>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d009      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <HAL_DMA_Abort_IT+0x298>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d004      	beq.n	800398e <HAL_DMA_Abort_IT+0x24e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a14      	ldr	r2, [pc, #80]	; (80039dc <HAL_DMA_Abort_IT+0x29c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d128      	bne.n	80039e0 <HAL_DMA_Abort_IT+0x2a0>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0201 	bic.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e027      	b.n	80039f0 <HAL_DMA_Abort_IT+0x2b0>
 80039a0:	40020010 	.word	0x40020010
 80039a4:	40020028 	.word	0x40020028
 80039a8:	40020040 	.word	0x40020040
 80039ac:	40020058 	.word	0x40020058
 80039b0:	40020070 	.word	0x40020070
 80039b4:	40020088 	.word	0x40020088
 80039b8:	400200a0 	.word	0x400200a0
 80039bc:	400200b8 	.word	0x400200b8
 80039c0:	40020410 	.word	0x40020410
 80039c4:	40020428 	.word	0x40020428
 80039c8:	40020440 	.word	0x40020440
 80039cc:	40020458 	.word	0x40020458
 80039d0:	40020470 	.word	0x40020470
 80039d4:	40020488 	.word	0x40020488
 80039d8:	400204a0 	.word	0x400204a0
 80039dc:	400204b8 	.word	0x400204b8
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a5c      	ldr	r2, [pc, #368]	; (8003b68 <HAL_DMA_Abort_IT+0x428>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d072      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a5b      	ldr	r2, [pc, #364]	; (8003b6c <HAL_DMA_Abort_IT+0x42c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d06d      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a59      	ldr	r2, [pc, #356]	; (8003b70 <HAL_DMA_Abort_IT+0x430>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d068      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a58      	ldr	r2, [pc, #352]	; (8003b74 <HAL_DMA_Abort_IT+0x434>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d063      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a56      	ldr	r2, [pc, #344]	; (8003b78 <HAL_DMA_Abort_IT+0x438>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d05e      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a55      	ldr	r2, [pc, #340]	; (8003b7c <HAL_DMA_Abort_IT+0x43c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d059      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a53      	ldr	r2, [pc, #332]	; (8003b80 <HAL_DMA_Abort_IT+0x440>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d054      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a52      	ldr	r2, [pc, #328]	; (8003b84 <HAL_DMA_Abort_IT+0x444>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d04f      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a50      	ldr	r2, [pc, #320]	; (8003b88 <HAL_DMA_Abort_IT+0x448>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d04a      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4f      	ldr	r2, [pc, #316]	; (8003b8c <HAL_DMA_Abort_IT+0x44c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d045      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a4d      	ldr	r2, [pc, #308]	; (8003b90 <HAL_DMA_Abort_IT+0x450>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d040      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a4c      	ldr	r2, [pc, #304]	; (8003b94 <HAL_DMA_Abort_IT+0x454>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d03b      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a4a      	ldr	r2, [pc, #296]	; (8003b98 <HAL_DMA_Abort_IT+0x458>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d036      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a49      	ldr	r2, [pc, #292]	; (8003b9c <HAL_DMA_Abort_IT+0x45c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d031      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a47      	ldr	r2, [pc, #284]	; (8003ba0 <HAL_DMA_Abort_IT+0x460>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02c      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a46      	ldr	r2, [pc, #280]	; (8003ba4 <HAL_DMA_Abort_IT+0x464>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d027      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a44      	ldr	r2, [pc, #272]	; (8003ba8 <HAL_DMA_Abort_IT+0x468>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d022      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a43      	ldr	r2, [pc, #268]	; (8003bac <HAL_DMA_Abort_IT+0x46c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d01d      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a41      	ldr	r2, [pc, #260]	; (8003bb0 <HAL_DMA_Abort_IT+0x470>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d018      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a40      	ldr	r2, [pc, #256]	; (8003bb4 <HAL_DMA_Abort_IT+0x474>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a3e      	ldr	r2, [pc, #248]	; (8003bb8 <HAL_DMA_Abort_IT+0x478>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a3d      	ldr	r2, [pc, #244]	; (8003bbc <HAL_DMA_Abort_IT+0x47c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a3b      	ldr	r2, [pc, #236]	; (8003bc0 <HAL_DMA_Abort_IT+0x480>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x3a0>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a3a      	ldr	r2, [pc, #232]	; (8003bc4 <HAL_DMA_Abort_IT+0x484>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <HAL_DMA_Abort_IT+0x3a4>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <HAL_DMA_Abort_IT+0x3a6>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d028      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003af8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	2201      	movs	r2, #1
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b18:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00c      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b30:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b3a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40020010 	.word	0x40020010
 8003b6c:	40020028 	.word	0x40020028
 8003b70:	40020040 	.word	0x40020040
 8003b74:	40020058 	.word	0x40020058
 8003b78:	40020070 	.word	0x40020070
 8003b7c:	40020088 	.word	0x40020088
 8003b80:	400200a0 	.word	0x400200a0
 8003b84:	400200b8 	.word	0x400200b8
 8003b88:	40020410 	.word	0x40020410
 8003b8c:	40020428 	.word	0x40020428
 8003b90:	40020440 	.word	0x40020440
 8003b94:	40020458 	.word	0x40020458
 8003b98:	40020470 	.word	0x40020470
 8003b9c:	40020488 	.word	0x40020488
 8003ba0:	400204a0 	.word	0x400204a0
 8003ba4:	400204b8 	.word	0x400204b8
 8003ba8:	58025408 	.word	0x58025408
 8003bac:	5802541c 	.word	0x5802541c
 8003bb0:	58025430 	.word	0x58025430
 8003bb4:	58025444 	.word	0x58025444
 8003bb8:	58025458 	.word	0x58025458
 8003bbc:	5802546c 	.word	0x5802546c
 8003bc0:	58025480 	.word	0x58025480
 8003bc4:	58025494 	.word	0x58025494

08003bc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bd4:	4b67      	ldr	r3, [pc, #412]	; (8003d74 <HAL_DMA_IRQHandler+0x1ac>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a67      	ldr	r2, [pc, #412]	; (8003d78 <HAL_DMA_IRQHandler+0x1b0>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	0a9b      	lsrs	r3, r3, #10
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a5f      	ldr	r2, [pc, #380]	; (8003d7c <HAL_DMA_IRQHandler+0x1b4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d04a      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a5d      	ldr	r2, [pc, #372]	; (8003d80 <HAL_DMA_IRQHandler+0x1b8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d045      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a5c      	ldr	r2, [pc, #368]	; (8003d84 <HAL_DMA_IRQHandler+0x1bc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d040      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a5a      	ldr	r2, [pc, #360]	; (8003d88 <HAL_DMA_IRQHandler+0x1c0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d03b      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a59      	ldr	r2, [pc, #356]	; (8003d8c <HAL_DMA_IRQHandler+0x1c4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d036      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a57      	ldr	r2, [pc, #348]	; (8003d90 <HAL_DMA_IRQHandler+0x1c8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d031      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a56      	ldr	r2, [pc, #344]	; (8003d94 <HAL_DMA_IRQHandler+0x1cc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d02c      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a54      	ldr	r2, [pc, #336]	; (8003d98 <HAL_DMA_IRQHandler+0x1d0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d027      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a53      	ldr	r2, [pc, #332]	; (8003d9c <HAL_DMA_IRQHandler+0x1d4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d022      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a51      	ldr	r2, [pc, #324]	; (8003da0 <HAL_DMA_IRQHandler+0x1d8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01d      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a50      	ldr	r2, [pc, #320]	; (8003da4 <HAL_DMA_IRQHandler+0x1dc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d018      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a4e      	ldr	r2, [pc, #312]	; (8003da8 <HAL_DMA_IRQHandler+0x1e0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a4d      	ldr	r2, [pc, #308]	; (8003dac <HAL_DMA_IRQHandler+0x1e4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a4b      	ldr	r2, [pc, #300]	; (8003db0 <HAL_DMA_IRQHandler+0x1e8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a4a      	ldr	r2, [pc, #296]	; (8003db4 <HAL_DMA_IRQHandler+0x1ec>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xd2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a48      	ldr	r2, [pc, #288]	; (8003db8 <HAL_DMA_IRQHandler+0x1f0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <HAL_DMA_IRQHandler+0xd6>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_DMA_IRQHandler+0xd8>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 842b 	beq.w	80044fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	2208      	movs	r2, #8
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80a2 	beq.w	8003e00 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a2e      	ldr	r2, [pc, #184]	; (8003d7c <HAL_DMA_IRQHandler+0x1b4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d04a      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a2d      	ldr	r2, [pc, #180]	; (8003d80 <HAL_DMA_IRQHandler+0x1b8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d045      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2b      	ldr	r2, [pc, #172]	; (8003d84 <HAL_DMA_IRQHandler+0x1bc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d040      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2a      	ldr	r2, [pc, #168]	; (8003d88 <HAL_DMA_IRQHandler+0x1c0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d03b      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a28      	ldr	r2, [pc, #160]	; (8003d8c <HAL_DMA_IRQHandler+0x1c4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d036      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a27      	ldr	r2, [pc, #156]	; (8003d90 <HAL_DMA_IRQHandler+0x1c8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d031      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a25      	ldr	r2, [pc, #148]	; (8003d94 <HAL_DMA_IRQHandler+0x1cc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d02c      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a24      	ldr	r2, [pc, #144]	; (8003d98 <HAL_DMA_IRQHandler+0x1d0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d027      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a22      	ldr	r2, [pc, #136]	; (8003d9c <HAL_DMA_IRQHandler+0x1d4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d022      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <HAL_DMA_IRQHandler+0x1d8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d01d      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a1f      	ldr	r2, [pc, #124]	; (8003da4 <HAL_DMA_IRQHandler+0x1dc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d018      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <HAL_DMA_IRQHandler+0x1e0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d013      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <HAL_DMA_IRQHandler+0x1e4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00e      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <HAL_DMA_IRQHandler+0x1e8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d009      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <HAL_DMA_IRQHandler+0x1ec>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d004      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x194>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <HAL_DMA_IRQHandler+0x1f0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d12f      	bne.n	8003dbc <HAL_DMA_IRQHandler+0x1f4>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bf14      	ite	ne
 8003d6a:	2301      	movne	r3, #1
 8003d6c:	2300      	moveq	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	e02e      	b.n	8003dd0 <HAL_DMA_IRQHandler+0x208>
 8003d72:	bf00      	nop
 8003d74:	20000000 	.word	0x20000000
 8003d78:	1b4e81b5 	.word	0x1b4e81b5
 8003d7c:	40020010 	.word	0x40020010
 8003d80:	40020028 	.word	0x40020028
 8003d84:	40020040 	.word	0x40020040
 8003d88:	40020058 	.word	0x40020058
 8003d8c:	40020070 	.word	0x40020070
 8003d90:	40020088 	.word	0x40020088
 8003d94:	400200a0 	.word	0x400200a0
 8003d98:	400200b8 	.word	0x400200b8
 8003d9c:	40020410 	.word	0x40020410
 8003da0:	40020428 	.word	0x40020428
 8003da4:	40020440 	.word	0x40020440
 8003da8:	40020458 	.word	0x40020458
 8003dac:	40020470 	.word	0x40020470
 8003db0:	40020488 	.word	0x40020488
 8003db4:	400204a0 	.word	0x400204a0
 8003db8:	400204b8 	.word	0x400204b8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	bf14      	ite	ne
 8003dca:	2301      	movne	r3, #1
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0204 	bic.w	r2, r2, #4
 8003de2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	2208      	movs	r2, #8
 8003dee:	409a      	lsls	r2, r3
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d06e      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a69      	ldr	r2, [pc, #420]	; (8003fc0 <HAL_DMA_IRQHandler+0x3f8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d04a      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a67      	ldr	r2, [pc, #412]	; (8003fc4 <HAL_DMA_IRQHandler+0x3fc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d045      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a66      	ldr	r2, [pc, #408]	; (8003fc8 <HAL_DMA_IRQHandler+0x400>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d040      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a64      	ldr	r2, [pc, #400]	; (8003fcc <HAL_DMA_IRQHandler+0x404>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d03b      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a63      	ldr	r2, [pc, #396]	; (8003fd0 <HAL_DMA_IRQHandler+0x408>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d036      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a61      	ldr	r2, [pc, #388]	; (8003fd4 <HAL_DMA_IRQHandler+0x40c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d031      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a60      	ldr	r2, [pc, #384]	; (8003fd8 <HAL_DMA_IRQHandler+0x410>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d02c      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a5e      	ldr	r2, [pc, #376]	; (8003fdc <HAL_DMA_IRQHandler+0x414>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d027      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a5d      	ldr	r2, [pc, #372]	; (8003fe0 <HAL_DMA_IRQHandler+0x418>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d022      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a5b      	ldr	r2, [pc, #364]	; (8003fe4 <HAL_DMA_IRQHandler+0x41c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01d      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a5a      	ldr	r2, [pc, #360]	; (8003fe8 <HAL_DMA_IRQHandler+0x420>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d018      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a58      	ldr	r2, [pc, #352]	; (8003fec <HAL_DMA_IRQHandler+0x424>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a57      	ldr	r2, [pc, #348]	; (8003ff0 <HAL_DMA_IRQHandler+0x428>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00e      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a55      	ldr	r2, [pc, #340]	; (8003ff4 <HAL_DMA_IRQHandler+0x42c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d009      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a54      	ldr	r2, [pc, #336]	; (8003ff8 <HAL_DMA_IRQHandler+0x430>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d004      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2ee>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a52      	ldr	r2, [pc, #328]	; (8003ffc <HAL_DMA_IRQHandler+0x434>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d10a      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x304>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf14      	ite	ne
 8003ec4:	2301      	movne	r3, #1
 8003ec6:	2300      	moveq	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e003      	b.n	8003ed4 <HAL_DMA_IRQHandler+0x30c>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00d      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	f043 0202 	orr.w	r2, r3, #2
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	2204      	movs	r2, #4
 8003efe:	409a      	lsls	r2, r3
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 808f 	beq.w	8004028 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a2c      	ldr	r2, [pc, #176]	; (8003fc0 <HAL_DMA_IRQHandler+0x3f8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d04a      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a2a      	ldr	r2, [pc, #168]	; (8003fc4 <HAL_DMA_IRQHandler+0x3fc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d045      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <HAL_DMA_IRQHandler+0x400>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d040      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <HAL_DMA_IRQHandler+0x404>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d03b      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a26      	ldr	r2, [pc, #152]	; (8003fd0 <HAL_DMA_IRQHandler+0x408>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d036      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <HAL_DMA_IRQHandler+0x40c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d031      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <HAL_DMA_IRQHandler+0x410>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d02c      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <HAL_DMA_IRQHandler+0x414>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d027      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a20      	ldr	r2, [pc, #128]	; (8003fe0 <HAL_DMA_IRQHandler+0x418>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d022      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1e      	ldr	r2, [pc, #120]	; (8003fe4 <HAL_DMA_IRQHandler+0x41c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01d      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1d      	ldr	r2, [pc, #116]	; (8003fe8 <HAL_DMA_IRQHandler+0x420>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d018      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1b      	ldr	r2, [pc, #108]	; (8003fec <HAL_DMA_IRQHandler+0x424>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1a      	ldr	r2, [pc, #104]	; (8003ff0 <HAL_DMA_IRQHandler+0x428>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00e      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a18      	ldr	r2, [pc, #96]	; (8003ff4 <HAL_DMA_IRQHandler+0x42c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d009      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <HAL_DMA_IRQHandler+0x430>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_DMA_IRQHandler+0x3e2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a15      	ldr	r2, [pc, #84]	; (8003ffc <HAL_DMA_IRQHandler+0x434>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d12a      	bne.n	8004000 <HAL_DMA_IRQHandler+0x438>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	e023      	b.n	8004008 <HAL_DMA_IRQHandler+0x440>
 8003fc0:	40020010 	.word	0x40020010
 8003fc4:	40020028 	.word	0x40020028
 8003fc8:	40020040 	.word	0x40020040
 8003fcc:	40020058 	.word	0x40020058
 8003fd0:	40020070 	.word	0x40020070
 8003fd4:	40020088 	.word	0x40020088
 8003fd8:	400200a0 	.word	0x400200a0
 8003fdc:	400200b8 	.word	0x400200b8
 8003fe0:	40020410 	.word	0x40020410
 8003fe4:	40020428 	.word	0x40020428
 8003fe8:	40020440 	.word	0x40020440
 8003fec:	40020458 	.word	0x40020458
 8003ff0:	40020470 	.word	0x40020470
 8003ff4:	40020488 	.word	0x40020488
 8003ff8:	400204a0 	.word	0x400204a0
 8003ffc:	400204b8 	.word	0x400204b8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2300      	movs	r3, #0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00d      	beq.n	8004028 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	2204      	movs	r2, #4
 8004016:	409a      	lsls	r2, r3
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004020:	f043 0204 	orr.w	r2, r3, #4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2210      	movs	r2, #16
 8004032:	409a      	lsls	r2, r3
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 80a6 	beq.w	800418a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a85      	ldr	r2, [pc, #532]	; (8004258 <HAL_DMA_IRQHandler+0x690>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d04a      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a83      	ldr	r2, [pc, #524]	; (800425c <HAL_DMA_IRQHandler+0x694>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d045      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a82      	ldr	r2, [pc, #520]	; (8004260 <HAL_DMA_IRQHandler+0x698>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d040      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a80      	ldr	r2, [pc, #512]	; (8004264 <HAL_DMA_IRQHandler+0x69c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d03b      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a7f      	ldr	r2, [pc, #508]	; (8004268 <HAL_DMA_IRQHandler+0x6a0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d036      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a7d      	ldr	r2, [pc, #500]	; (800426c <HAL_DMA_IRQHandler+0x6a4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d031      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a7c      	ldr	r2, [pc, #496]	; (8004270 <HAL_DMA_IRQHandler+0x6a8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d02c      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a7a      	ldr	r2, [pc, #488]	; (8004274 <HAL_DMA_IRQHandler+0x6ac>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d027      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a79      	ldr	r2, [pc, #484]	; (8004278 <HAL_DMA_IRQHandler+0x6b0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d022      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a77      	ldr	r2, [pc, #476]	; (800427c <HAL_DMA_IRQHandler+0x6b4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d01d      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a76      	ldr	r2, [pc, #472]	; (8004280 <HAL_DMA_IRQHandler+0x6b8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d018      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a74      	ldr	r2, [pc, #464]	; (8004284 <HAL_DMA_IRQHandler+0x6bc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a73      	ldr	r2, [pc, #460]	; (8004288 <HAL_DMA_IRQHandler+0x6c0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00e      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a71      	ldr	r2, [pc, #452]	; (800428c <HAL_DMA_IRQHandler+0x6c4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d009      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a70      	ldr	r2, [pc, #448]	; (8004290 <HAL_DMA_IRQHandler+0x6c8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d004      	beq.n	80040de <HAL_DMA_IRQHandler+0x516>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a6e      	ldr	r2, [pc, #440]	; (8004294 <HAL_DMA_IRQHandler+0x6cc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10a      	bne.n	80040f4 <HAL_DMA_IRQHandler+0x52c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf14      	ite	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	2300      	moveq	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e009      	b.n	8004108 <HAL_DMA_IRQHandler+0x540>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bf14      	ite	ne
 8004102:	2301      	movne	r3, #1
 8004104:	2300      	moveq	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d03e      	beq.n	800418a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2210      	movs	r2, #16
 8004116:	409a      	lsls	r2, r3
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d018      	beq.n	800415c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d108      	bne.n	800414a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d024      	beq.n	800418a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	4798      	blx	r3
 8004148:	e01f      	b.n	800418a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01b      	beq.n	800418a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4798      	blx	r3
 800415a:	e016      	b.n	800418a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d107      	bne.n	800417a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0208 	bic.w	r2, r2, #8
 8004178:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2220      	movs	r2, #32
 8004194:	409a      	lsls	r2, r3
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8110 	beq.w	80043c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a2c      	ldr	r2, [pc, #176]	; (8004258 <HAL_DMA_IRQHandler+0x690>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d04a      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2b      	ldr	r2, [pc, #172]	; (800425c <HAL_DMA_IRQHandler+0x694>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d045      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a29      	ldr	r2, [pc, #164]	; (8004260 <HAL_DMA_IRQHandler+0x698>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d040      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a28      	ldr	r2, [pc, #160]	; (8004264 <HAL_DMA_IRQHandler+0x69c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d03b      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a26      	ldr	r2, [pc, #152]	; (8004268 <HAL_DMA_IRQHandler+0x6a0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d036      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a25      	ldr	r2, [pc, #148]	; (800426c <HAL_DMA_IRQHandler+0x6a4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d031      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a23      	ldr	r2, [pc, #140]	; (8004270 <HAL_DMA_IRQHandler+0x6a8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d02c      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a22      	ldr	r2, [pc, #136]	; (8004274 <HAL_DMA_IRQHandler+0x6ac>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d027      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a20      	ldr	r2, [pc, #128]	; (8004278 <HAL_DMA_IRQHandler+0x6b0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d022      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1f      	ldr	r2, [pc, #124]	; (800427c <HAL_DMA_IRQHandler+0x6b4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d01d      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1d      	ldr	r2, [pc, #116]	; (8004280 <HAL_DMA_IRQHandler+0x6b8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d018      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1c      	ldr	r2, [pc, #112]	; (8004284 <HAL_DMA_IRQHandler+0x6bc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d013      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1a      	ldr	r2, [pc, #104]	; (8004288 <HAL_DMA_IRQHandler+0x6c0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00e      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a19      	ldr	r2, [pc, #100]	; (800428c <HAL_DMA_IRQHandler+0x6c4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d009      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a17      	ldr	r2, [pc, #92]	; (8004290 <HAL_DMA_IRQHandler+0x6c8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <HAL_DMA_IRQHandler+0x678>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a16      	ldr	r2, [pc, #88]	; (8004294 <HAL_DMA_IRQHandler+0x6cc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d12b      	bne.n	8004298 <HAL_DMA_IRQHandler+0x6d0>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b00      	cmp	r3, #0
 800424c:	bf14      	ite	ne
 800424e:	2301      	movne	r3, #1
 8004250:	2300      	moveq	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	e02a      	b.n	80042ac <HAL_DMA_IRQHandler+0x6e4>
 8004256:	bf00      	nop
 8004258:	40020010 	.word	0x40020010
 800425c:	40020028 	.word	0x40020028
 8004260:	40020040 	.word	0x40020040
 8004264:	40020058 	.word	0x40020058
 8004268:	40020070 	.word	0x40020070
 800426c:	40020088 	.word	0x40020088
 8004270:	400200a0 	.word	0x400200a0
 8004274:	400200b8 	.word	0x400200b8
 8004278:	40020410 	.word	0x40020410
 800427c:	40020428 	.word	0x40020428
 8004280:	40020440 	.word	0x40020440
 8004284:	40020458 	.word	0x40020458
 8004288:	40020470 	.word	0x40020470
 800428c:	40020488 	.word	0x40020488
 8004290:	400204a0 	.word	0x400204a0
 8004294:	400204b8 	.word	0x400204b8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bf14      	ite	ne
 80042a6:	2301      	movne	r3, #1
 80042a8:	2300      	moveq	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8087 	beq.w	80043c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	2220      	movs	r2, #32
 80042bc:	409a      	lsls	r2, r3
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d139      	bne.n	8004342 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0216 	bic.w	r2, r2, #22
 80042dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d103      	bne.n	80042fe <HAL_DMA_IRQHandler+0x736>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0208 	bic.w	r2, r2, #8
 800430c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	223f      	movs	r2, #63	; 0x3f
 8004318:	409a      	lsls	r2, r3
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 834a 	beq.w	80049cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4798      	blx	r3
          }
          return;
 8004340:	e344      	b.n	80049cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d018      	beq.n	8004382 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d108      	bne.n	8004370 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	2b00      	cmp	r3, #0
 8004364:	d02c      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	4798      	blx	r3
 800436e:	e027      	b.n	80043c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d023      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
 8004380:	e01e      	b.n	80043c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10f      	bne.n	80043b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0210 	bic.w	r2, r2, #16
 800439e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8306 	beq.w	80049d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 8088 	beq.w	80044e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2204      	movs	r2, #4
 80043dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a7a      	ldr	r2, [pc, #488]	; (80045d0 <HAL_DMA_IRQHandler+0xa08>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d04a      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a79      	ldr	r2, [pc, #484]	; (80045d4 <HAL_DMA_IRQHandler+0xa0c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d045      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a77      	ldr	r2, [pc, #476]	; (80045d8 <HAL_DMA_IRQHandler+0xa10>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d040      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a76      	ldr	r2, [pc, #472]	; (80045dc <HAL_DMA_IRQHandler+0xa14>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d03b      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a74      	ldr	r2, [pc, #464]	; (80045e0 <HAL_DMA_IRQHandler+0xa18>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d036      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a73      	ldr	r2, [pc, #460]	; (80045e4 <HAL_DMA_IRQHandler+0xa1c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d031      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a71      	ldr	r2, [pc, #452]	; (80045e8 <HAL_DMA_IRQHandler+0xa20>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d02c      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a70      	ldr	r2, [pc, #448]	; (80045ec <HAL_DMA_IRQHandler+0xa24>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d027      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a6e      	ldr	r2, [pc, #440]	; (80045f0 <HAL_DMA_IRQHandler+0xa28>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d022      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a6d      	ldr	r2, [pc, #436]	; (80045f4 <HAL_DMA_IRQHandler+0xa2c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d01d      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a6b      	ldr	r2, [pc, #428]	; (80045f8 <HAL_DMA_IRQHandler+0xa30>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d018      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a6a      	ldr	r2, [pc, #424]	; (80045fc <HAL_DMA_IRQHandler+0xa34>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a68      	ldr	r2, [pc, #416]	; (8004600 <HAL_DMA_IRQHandler+0xa38>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00e      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a67      	ldr	r2, [pc, #412]	; (8004604 <HAL_DMA_IRQHandler+0xa3c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d009      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a65      	ldr	r2, [pc, #404]	; (8004608 <HAL_DMA_IRQHandler+0xa40>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_DMA_IRQHandler+0x8b8>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a64      	ldr	r2, [pc, #400]	; (800460c <HAL_DMA_IRQHandler+0xa44>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d108      	bne.n	8004492 <HAL_DMA_IRQHandler+0x8ca>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	e007      	b.n	80044a2 <HAL_DMA_IRQHandler+0x8da>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3301      	adds	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d307      	bcc.n	80044be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f2      	bne.n	80044a2 <HAL_DMA_IRQHandler+0x8da>
 80044bc:	e000      	b.n	80044c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80044be:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d004      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2203      	movs	r2, #3
 80044da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80044de:	e003      	b.n	80044e8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8272 	beq.w	80049d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	4798      	blx	r3
 80044fa:	e26c      	b.n	80049d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a43      	ldr	r2, [pc, #268]	; (8004610 <HAL_DMA_IRQHandler+0xa48>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d022      	beq.n	800454c <HAL_DMA_IRQHandler+0x984>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a42      	ldr	r2, [pc, #264]	; (8004614 <HAL_DMA_IRQHandler+0xa4c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d01d      	beq.n	800454c <HAL_DMA_IRQHandler+0x984>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a40      	ldr	r2, [pc, #256]	; (8004618 <HAL_DMA_IRQHandler+0xa50>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d018      	beq.n	800454c <HAL_DMA_IRQHandler+0x984>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a3f      	ldr	r2, [pc, #252]	; (800461c <HAL_DMA_IRQHandler+0xa54>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <HAL_DMA_IRQHandler+0x984>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a3d      	ldr	r2, [pc, #244]	; (8004620 <HAL_DMA_IRQHandler+0xa58>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00e      	beq.n	800454c <HAL_DMA_IRQHandler+0x984>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a3c      	ldr	r2, [pc, #240]	; (8004624 <HAL_DMA_IRQHandler+0xa5c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d009      	beq.n	800454c <HAL_DMA_IRQHandler+0x984>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a3a      	ldr	r2, [pc, #232]	; (8004628 <HAL_DMA_IRQHandler+0xa60>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_DMA_IRQHandler+0x984>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a39      	ldr	r2, [pc, #228]	; (800462c <HAL_DMA_IRQHandler+0xa64>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d101      	bne.n	8004550 <HAL_DMA_IRQHandler+0x988>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <HAL_DMA_IRQHandler+0x98a>
 8004550:	2300      	movs	r3, #0
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 823f 	beq.w	80049d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2204      	movs	r2, #4
 800456a:	409a      	lsls	r2, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80cd 	beq.w	8004710 <HAL_DMA_IRQHandler+0xb48>
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80c7 	beq.w	8004710 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	2204      	movs	r2, #4
 800458c:	409a      	lsls	r2, r3
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d049      	beq.n	8004630 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 8210 	beq.w	80049d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045b8:	e20a      	b.n	80049d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 8206 	beq.w	80049d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045cc:	e200      	b.n	80049d0 <HAL_DMA_IRQHandler+0xe08>
 80045ce:	bf00      	nop
 80045d0:	40020010 	.word	0x40020010
 80045d4:	40020028 	.word	0x40020028
 80045d8:	40020040 	.word	0x40020040
 80045dc:	40020058 	.word	0x40020058
 80045e0:	40020070 	.word	0x40020070
 80045e4:	40020088 	.word	0x40020088
 80045e8:	400200a0 	.word	0x400200a0
 80045ec:	400200b8 	.word	0x400200b8
 80045f0:	40020410 	.word	0x40020410
 80045f4:	40020428 	.word	0x40020428
 80045f8:	40020440 	.word	0x40020440
 80045fc:	40020458 	.word	0x40020458
 8004600:	40020470 	.word	0x40020470
 8004604:	40020488 	.word	0x40020488
 8004608:	400204a0 	.word	0x400204a0
 800460c:	400204b8 	.word	0x400204b8
 8004610:	58025408 	.word	0x58025408
 8004614:	5802541c 	.word	0x5802541c
 8004618:	58025430 	.word	0x58025430
 800461c:	58025444 	.word	0x58025444
 8004620:	58025458 	.word	0x58025458
 8004624:	5802546c 	.word	0x5802546c
 8004628:	58025480 	.word	0x58025480
 800462c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d160      	bne.n	80046fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a8c      	ldr	r2, [pc, #560]	; (8004870 <HAL_DMA_IRQHandler+0xca8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d04a      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a8a      	ldr	r2, [pc, #552]	; (8004874 <HAL_DMA_IRQHandler+0xcac>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d045      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a89      	ldr	r2, [pc, #548]	; (8004878 <HAL_DMA_IRQHandler+0xcb0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d040      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a87      	ldr	r2, [pc, #540]	; (800487c <HAL_DMA_IRQHandler+0xcb4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d03b      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a86      	ldr	r2, [pc, #536]	; (8004880 <HAL_DMA_IRQHandler+0xcb8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d036      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a84      	ldr	r2, [pc, #528]	; (8004884 <HAL_DMA_IRQHandler+0xcbc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d031      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a83      	ldr	r2, [pc, #524]	; (8004888 <HAL_DMA_IRQHandler+0xcc0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d02c      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a81      	ldr	r2, [pc, #516]	; (800488c <HAL_DMA_IRQHandler+0xcc4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d027      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a80      	ldr	r2, [pc, #512]	; (8004890 <HAL_DMA_IRQHandler+0xcc8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d022      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a7e      	ldr	r2, [pc, #504]	; (8004894 <HAL_DMA_IRQHandler+0xccc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01d      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a7d      	ldr	r2, [pc, #500]	; (8004898 <HAL_DMA_IRQHandler+0xcd0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d018      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a7b      	ldr	r2, [pc, #492]	; (800489c <HAL_DMA_IRQHandler+0xcd4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d013      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a7a      	ldr	r2, [pc, #488]	; (80048a0 <HAL_DMA_IRQHandler+0xcd8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00e      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a78      	ldr	r2, [pc, #480]	; (80048a4 <HAL_DMA_IRQHandler+0xcdc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d009      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a77      	ldr	r2, [pc, #476]	; (80048a8 <HAL_DMA_IRQHandler+0xce0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <HAL_DMA_IRQHandler+0xb12>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a75      	ldr	r2, [pc, #468]	; (80048ac <HAL_DMA_IRQHandler+0xce4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d108      	bne.n	80046ec <HAL_DMA_IRQHandler+0xb24>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0208 	bic.w	r2, r2, #8
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e007      	b.n	80046fc <HAL_DMA_IRQHandler+0xb34>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0204 	bic.w	r2, r2, #4
 80046fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8165 	beq.w	80049d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800470e:	e15f      	b.n	80049d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	2202      	movs	r2, #2
 800471a:	409a      	lsls	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80c5 	beq.w	80048b0 <HAL_DMA_IRQHandler+0xce8>
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80bf 	beq.w	80048b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004736:	f003 031f 	and.w	r3, r3, #31
 800473a:	2202      	movs	r2, #2
 800473c:	409a      	lsls	r2, r3
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d018      	beq.n	800477e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 813a 	beq.w	80049d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004768:	e134      	b.n	80049d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8130 	beq.w	80049d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800477c:	e12a      	b.n	80049d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b00      	cmp	r3, #0
 8004786:	d168      	bne.n	800485a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a38      	ldr	r2, [pc, #224]	; (8004870 <HAL_DMA_IRQHandler+0xca8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d04a      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a37      	ldr	r2, [pc, #220]	; (8004874 <HAL_DMA_IRQHandler+0xcac>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d045      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a35      	ldr	r2, [pc, #212]	; (8004878 <HAL_DMA_IRQHandler+0xcb0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d040      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a34      	ldr	r2, [pc, #208]	; (800487c <HAL_DMA_IRQHandler+0xcb4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d03b      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a32      	ldr	r2, [pc, #200]	; (8004880 <HAL_DMA_IRQHandler+0xcb8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d036      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a31      	ldr	r2, [pc, #196]	; (8004884 <HAL_DMA_IRQHandler+0xcbc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d031      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a2f      	ldr	r2, [pc, #188]	; (8004888 <HAL_DMA_IRQHandler+0xcc0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d02c      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a2e      	ldr	r2, [pc, #184]	; (800488c <HAL_DMA_IRQHandler+0xcc4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d027      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a2c      	ldr	r2, [pc, #176]	; (8004890 <HAL_DMA_IRQHandler+0xcc8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d022      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2b      	ldr	r2, [pc, #172]	; (8004894 <HAL_DMA_IRQHandler+0xccc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d01d      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a29      	ldr	r2, [pc, #164]	; (8004898 <HAL_DMA_IRQHandler+0xcd0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d018      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a28      	ldr	r2, [pc, #160]	; (800489c <HAL_DMA_IRQHandler+0xcd4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d013      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a26      	ldr	r2, [pc, #152]	; (80048a0 <HAL_DMA_IRQHandler+0xcd8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00e      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a25      	ldr	r2, [pc, #148]	; (80048a4 <HAL_DMA_IRQHandler+0xcdc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d009      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a23      	ldr	r2, [pc, #140]	; (80048a8 <HAL_DMA_IRQHandler+0xce0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d004      	beq.n	8004828 <HAL_DMA_IRQHandler+0xc60>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a22      	ldr	r2, [pc, #136]	; (80048ac <HAL_DMA_IRQHandler+0xce4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d108      	bne.n	800483a <HAL_DMA_IRQHandler+0xc72>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0214 	bic.w	r2, r2, #20
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e007      	b.n	800484a <HAL_DMA_IRQHandler+0xc82>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 020a 	bic.w	r2, r2, #10
 8004848:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80b8 	beq.w	80049d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486c:	e0b2      	b.n	80049d4 <HAL_DMA_IRQHandler+0xe0c>
 800486e:	bf00      	nop
 8004870:	40020010 	.word	0x40020010
 8004874:	40020028 	.word	0x40020028
 8004878:	40020040 	.word	0x40020040
 800487c:	40020058 	.word	0x40020058
 8004880:	40020070 	.word	0x40020070
 8004884:	40020088 	.word	0x40020088
 8004888:	400200a0 	.word	0x400200a0
 800488c:	400200b8 	.word	0x400200b8
 8004890:	40020410 	.word	0x40020410
 8004894:	40020428 	.word	0x40020428
 8004898:	40020440 	.word	0x40020440
 800489c:	40020458 	.word	0x40020458
 80048a0:	40020470 	.word	0x40020470
 80048a4:	40020488 	.word	0x40020488
 80048a8:	400204a0 	.word	0x400204a0
 80048ac:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	2208      	movs	r2, #8
 80048ba:	409a      	lsls	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8088 	beq.w	80049d6 <HAL_DMA_IRQHandler+0xe0e>
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8082 	beq.w	80049d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a41      	ldr	r2, [pc, #260]	; (80049dc <HAL_DMA_IRQHandler+0xe14>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d04a      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a3f      	ldr	r2, [pc, #252]	; (80049e0 <HAL_DMA_IRQHandler+0xe18>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d045      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a3e      	ldr	r2, [pc, #248]	; (80049e4 <HAL_DMA_IRQHandler+0xe1c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d040      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a3c      	ldr	r2, [pc, #240]	; (80049e8 <HAL_DMA_IRQHandler+0xe20>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d03b      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a3b      	ldr	r2, [pc, #236]	; (80049ec <HAL_DMA_IRQHandler+0xe24>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d036      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a39      	ldr	r2, [pc, #228]	; (80049f0 <HAL_DMA_IRQHandler+0xe28>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d031      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a38      	ldr	r2, [pc, #224]	; (80049f4 <HAL_DMA_IRQHandler+0xe2c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d02c      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a36      	ldr	r2, [pc, #216]	; (80049f8 <HAL_DMA_IRQHandler+0xe30>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d027      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a35      	ldr	r2, [pc, #212]	; (80049fc <HAL_DMA_IRQHandler+0xe34>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d022      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a33      	ldr	r2, [pc, #204]	; (8004a00 <HAL_DMA_IRQHandler+0xe38>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01d      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a32      	ldr	r2, [pc, #200]	; (8004a04 <HAL_DMA_IRQHandler+0xe3c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a30      	ldr	r2, [pc, #192]	; (8004a08 <HAL_DMA_IRQHandler+0xe40>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a2f      	ldr	r2, [pc, #188]	; (8004a0c <HAL_DMA_IRQHandler+0xe44>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a2d      	ldr	r2, [pc, #180]	; (8004a10 <HAL_DMA_IRQHandler+0xe48>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2c      	ldr	r2, [pc, #176]	; (8004a14 <HAL_DMA_IRQHandler+0xe4c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_DMA_IRQHandler+0xdaa>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <HAL_DMA_IRQHandler+0xe50>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d108      	bne.n	8004984 <HAL_DMA_IRQHandler+0xdbc>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 021c 	bic.w	r2, r2, #28
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e007      	b.n	8004994 <HAL_DMA_IRQHandler+0xdcc>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 020e 	bic.w	r2, r2, #14
 8004992:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2201      	movs	r2, #1
 800499e:	409a      	lsls	r2, r3
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	4798      	blx	r3
 80049ca:	e004      	b.n	80049d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80049cc:	bf00      	nop
 80049ce:	e002      	b.n	80049d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049d6:	3728      	adds	r7, #40	; 0x28
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40020010 	.word	0x40020010
 80049e0:	40020028 	.word	0x40020028
 80049e4:	40020040 	.word	0x40020040
 80049e8:	40020058 	.word	0x40020058
 80049ec:	40020070 	.word	0x40020070
 80049f0:	40020088 	.word	0x40020088
 80049f4:	400200a0 	.word	0x400200a0
 80049f8:	400200b8 	.word	0x400200b8
 80049fc:	40020410 	.word	0x40020410
 8004a00:	40020428 	.word	0x40020428
 8004a04:	40020440 	.word	0x40020440
 8004a08:	40020458 	.word	0x40020458
 8004a0c:	40020470 	.word	0x40020470
 8004a10:	40020488 	.word	0x40020488
 8004a14:	400204a0 	.word	0x400204a0
 8004a18:	400204b8 	.word	0x400204b8

08004a1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a42      	ldr	r2, [pc, #264]	; (8004b34 <DMA_CalcBaseAndBitshift+0x118>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d04a      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a41      	ldr	r2, [pc, #260]	; (8004b38 <DMA_CalcBaseAndBitshift+0x11c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d045      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a3f      	ldr	r2, [pc, #252]	; (8004b3c <DMA_CalcBaseAndBitshift+0x120>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d040      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a3e      	ldr	r2, [pc, #248]	; (8004b40 <DMA_CalcBaseAndBitshift+0x124>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d03b      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a3c      	ldr	r2, [pc, #240]	; (8004b44 <DMA_CalcBaseAndBitshift+0x128>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d036      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a3b      	ldr	r2, [pc, #236]	; (8004b48 <DMA_CalcBaseAndBitshift+0x12c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d031      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a39      	ldr	r2, [pc, #228]	; (8004b4c <DMA_CalcBaseAndBitshift+0x130>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d02c      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a38      	ldr	r2, [pc, #224]	; (8004b50 <DMA_CalcBaseAndBitshift+0x134>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d027      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a36      	ldr	r2, [pc, #216]	; (8004b54 <DMA_CalcBaseAndBitshift+0x138>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d022      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a35      	ldr	r2, [pc, #212]	; (8004b58 <DMA_CalcBaseAndBitshift+0x13c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d01d      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a33      	ldr	r2, [pc, #204]	; (8004b5c <DMA_CalcBaseAndBitshift+0x140>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d018      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a32      	ldr	r2, [pc, #200]	; (8004b60 <DMA_CalcBaseAndBitshift+0x144>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a30      	ldr	r2, [pc, #192]	; (8004b64 <DMA_CalcBaseAndBitshift+0x148>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00e      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a2f      	ldr	r2, [pc, #188]	; (8004b68 <DMA_CalcBaseAndBitshift+0x14c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d009      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2d      	ldr	r2, [pc, #180]	; (8004b6c <DMA_CalcBaseAndBitshift+0x150>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <DMA_CalcBaseAndBitshift+0xa8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a2c      	ldr	r2, [pc, #176]	; (8004b70 <DMA_CalcBaseAndBitshift+0x154>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d101      	bne.n	8004ac8 <DMA_CalcBaseAndBitshift+0xac>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <DMA_CalcBaseAndBitshift+0xae>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d024      	beq.n	8004b18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	3b10      	subs	r3, #16
 8004ad6:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <DMA_CalcBaseAndBitshift+0x158>)
 8004ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8004adc:	091b      	lsrs	r3, r3, #4
 8004ade:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	4a24      	ldr	r2, [pc, #144]	; (8004b78 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ae8:	5cd3      	ldrb	r3, [r2, r3]
 8004aea:	461a      	mov	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d908      	bls.n	8004b08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	4b1f      	ldr	r3, [pc, #124]	; (8004b7c <DMA_CalcBaseAndBitshift+0x160>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	1d1a      	adds	r2, r3, #4
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	659a      	str	r2, [r3, #88]	; 0x58
 8004b06:	e00d      	b.n	8004b24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <DMA_CalcBaseAndBitshift+0x160>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6593      	str	r3, [r2, #88]	; 0x58
 8004b16:	e005      	b.n	8004b24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	40020010 	.word	0x40020010
 8004b38:	40020028 	.word	0x40020028
 8004b3c:	40020040 	.word	0x40020040
 8004b40:	40020058 	.word	0x40020058
 8004b44:	40020070 	.word	0x40020070
 8004b48:	40020088 	.word	0x40020088
 8004b4c:	400200a0 	.word	0x400200a0
 8004b50:	400200b8 	.word	0x400200b8
 8004b54:	40020410 	.word	0x40020410
 8004b58:	40020428 	.word	0x40020428
 8004b5c:	40020440 	.word	0x40020440
 8004b60:	40020458 	.word	0x40020458
 8004b64:	40020470 	.word	0x40020470
 8004b68:	40020488 	.word	0x40020488
 8004b6c:	400204a0 	.word	0x400204a0
 8004b70:	400204b8 	.word	0x400204b8
 8004b74:	aaaaaaab 	.word	0xaaaaaaab
 8004b78:	08022970 	.word	0x08022970
 8004b7c:	fffffc00 	.word	0xfffffc00

08004b80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d120      	bne.n	8004bd6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d858      	bhi.n	8004c4e <DMA_CheckFifoParam+0xce>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <DMA_CheckFifoParam+0x24>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bb5 	.word	0x08004bb5
 8004ba8:	08004bc7 	.word	0x08004bc7
 8004bac:	08004bb5 	.word	0x08004bb5
 8004bb0:	08004c4f 	.word	0x08004c4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d048      	beq.n	8004c52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bc4:	e045      	b.n	8004c52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bce:	d142      	bne.n	8004c56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bd4:	e03f      	b.n	8004c56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bde:	d123      	bne.n	8004c28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d838      	bhi.n	8004c5a <DMA_CheckFifoParam+0xda>
 8004be8:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <DMA_CheckFifoParam+0x70>)
 8004bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bee:	bf00      	nop
 8004bf0:	08004c01 	.word	0x08004c01
 8004bf4:	08004c07 	.word	0x08004c07
 8004bf8:	08004c01 	.word	0x08004c01
 8004bfc:	08004c19 	.word	0x08004c19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
        break;
 8004c04:	e030      	b.n	8004c68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d025      	beq.n	8004c5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c16:	e022      	b.n	8004c5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c20:	d11f      	bne.n	8004c62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c26:	e01c      	b.n	8004c62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d902      	bls.n	8004c36 <DMA_CheckFifoParam+0xb6>
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d003      	beq.n	8004c3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c34:	e018      	b.n	8004c68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
        break;
 8004c3a:	e015      	b.n	8004c68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00e      	beq.n	8004c66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8004c4c:	e00b      	b.n	8004c66 <DMA_CheckFifoParam+0xe6>
        break;
 8004c4e:	bf00      	nop
 8004c50:	e00a      	b.n	8004c68 <DMA_CheckFifoParam+0xe8>
        break;
 8004c52:	bf00      	nop
 8004c54:	e008      	b.n	8004c68 <DMA_CheckFifoParam+0xe8>
        break;
 8004c56:	bf00      	nop
 8004c58:	e006      	b.n	8004c68 <DMA_CheckFifoParam+0xe8>
        break;
 8004c5a:	bf00      	nop
 8004c5c:	e004      	b.n	8004c68 <DMA_CheckFifoParam+0xe8>
        break;
 8004c5e:	bf00      	nop
 8004c60:	e002      	b.n	8004c68 <DMA_CheckFifoParam+0xe8>
        break;
 8004c62:	bf00      	nop
 8004c64:	e000      	b.n	8004c68 <DMA_CheckFifoParam+0xe8>
    break;
 8004c66:	bf00      	nop
    }
  }

  return status;
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop

08004c78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a38      	ldr	r2, [pc, #224]	; (8004d6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d022      	beq.n	8004cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a36      	ldr	r2, [pc, #216]	; (8004d70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01d      	beq.n	8004cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a35      	ldr	r2, [pc, #212]	; (8004d74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d018      	beq.n	8004cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a33      	ldr	r2, [pc, #204]	; (8004d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d013      	beq.n	8004cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a32      	ldr	r2, [pc, #200]	; (8004d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00e      	beq.n	8004cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a30      	ldr	r2, [pc, #192]	; (8004d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d009      	beq.n	8004cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d004      	beq.n	8004cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a2d      	ldr	r2, [pc, #180]	; (8004d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01a      	beq.n	8004d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	3b08      	subs	r3, #8
 8004ce8:	4a28      	ldr	r2, [pc, #160]	; (8004d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a24      	ldr	r2, [pc, #144]	; (8004d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	409a      	lsls	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d14:	e024      	b.n	8004d60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	3b10      	subs	r3, #16
 8004d1e:	4a1e      	ldr	r2, [pc, #120]	; (8004d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4a1c      	ldr	r2, [pc, #112]	; (8004d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d806      	bhi.n	8004d3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4a1b      	ldr	r2, [pc, #108]	; (8004da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d902      	bls.n	8004d3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4b18      	ldr	r3, [pc, #96]	; (8004da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	461a      	mov	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a16      	ldr	r2, [pc, #88]	; (8004da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	2201      	movs	r2, #1
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	58025408 	.word	0x58025408
 8004d70:	5802541c 	.word	0x5802541c
 8004d74:	58025430 	.word	0x58025430
 8004d78:	58025444 	.word	0x58025444
 8004d7c:	58025458 	.word	0x58025458
 8004d80:	5802546c 	.word	0x5802546c
 8004d84:	58025480 	.word	0x58025480
 8004d88:	58025494 	.word	0x58025494
 8004d8c:	cccccccd 	.word	0xcccccccd
 8004d90:	16009600 	.word	0x16009600
 8004d94:	58025880 	.word	0x58025880
 8004d98:	aaaaaaab 	.word	0xaaaaaaab
 8004d9c:	400204b8 	.word	0x400204b8
 8004da0:	4002040f 	.word	0x4002040f
 8004da4:	10008200 	.word	0x10008200
 8004da8:	40020880 	.word	0x40020880

08004dac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d04a      	beq.n	8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d847      	bhi.n	8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a25      	ldr	r2, [pc, #148]	; (8004e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d022      	beq.n	8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a24      	ldr	r2, [pc, #144]	; (8004e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d01d      	beq.n	8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d018      	beq.n	8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a21      	ldr	r2, [pc, #132]	; (8004e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1f      	ldr	r2, [pc, #124]	; (8004e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00e      	beq.n	8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1e      	ldr	r2, [pc, #120]	; (8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d009      	beq.n	8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1c      	ldr	r2, [pc, #112]	; (8004e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d004      	beq.n	8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1b      	ldr	r2, [pc, #108]	; (8004e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d101      	bne.n	8004e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e34:	671a      	str	r2, [r3, #112]	; 0x70
 8004e36:	e009      	b.n	8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	461a      	mov	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a11      	ldr	r2, [pc, #68]	; (8004e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e4a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	2201      	movs	r2, #1
 8004e52:	409a      	lsls	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004e58:	bf00      	nop
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	58025408 	.word	0x58025408
 8004e68:	5802541c 	.word	0x5802541c
 8004e6c:	58025430 	.word	0x58025430
 8004e70:	58025444 	.word	0x58025444
 8004e74:	58025458 	.word	0x58025458
 8004e78:	5802546c 	.word	0x5802546c
 8004e7c:	58025480 	.word	0x58025480
 8004e80:	58025494 	.word	0x58025494
 8004e84:	1600963f 	.word	0x1600963f
 8004e88:	58025940 	.word	0x58025940
 8004e8c:	1000823f 	.word	0x1000823f
 8004e90:	40020940 	.word	0x40020940

08004e94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e0c6      	b.n	8005034 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f006 ff52 	bl	800bd58 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2223      	movs	r2, #35	; 0x23
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eba:	4b60      	ldr	r3, [pc, #384]	; (800503c <HAL_ETH_Init+0x1a8>)
 8004ebc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ec0:	4a5e      	ldr	r2, [pc, #376]	; (800503c <HAL_ETH_Init+0x1a8>)
 8004ec2:	f043 0302 	orr.w	r3, r3, #2
 8004ec6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004eca:	4b5c      	ldr	r3, [pc, #368]	; (800503c <HAL_ETH_Init+0x1a8>)
 8004ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	7a1b      	ldrb	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d103      	bne.n	8004ee8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	f7fd fe67 	bl	8002bb4 <HAL_SYSCFG_ETHInterfaceSelect>
 8004ee6:	e003      	b.n	8004ef0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004ee8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004eec:	f7fd fe62 	bl	8002bb4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f08:	f7fd fe3c 	bl	8002b84 <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004f0e:	e00f      	b.n	8004f30 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004f10:	f7fd fe38 	bl	8002b84 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f1e:	d907      	bls.n	8004f30 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2204      	movs	r2, #4
 8004f24:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	22e0      	movs	r2, #224	; 0xe0
 8004f2a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e081      	b.n	8005034 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e6      	bne.n	8004f10 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 fae8 	bl	8006518 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004f48:	f003 fa3a 	bl	80083c0 <HAL_RCC_GetHCLKFreq>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	4b3c      	ldr	r3, [pc, #240]	; (8005040 <HAL_ETH_Init+0x1ac>)
 8004f50:	fba3 2302 	umull	r2, r3, r3, r2
 8004f54:	0c9a      	lsrs	r2, r3, #18
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3a01      	subs	r2, #1
 8004f5c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f001 fa3b 	bl	80063dc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004f7c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004f80:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	22e0      	movs	r2, #224	; 0xe0
 8004f98:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e04a      	b.n	8005034 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	f241 1308 	movw	r3, #4360	; 0x1108
 8004fa6:	4413      	add	r3, r2
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4b26      	ldr	r3, [pc, #152]	; (8005044 <HAL_ETH_Init+0x1b0>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6952      	ldr	r2, [r2, #20]
 8004fb2:	0052      	lsls	r2, r2, #1
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	6809      	ldr	r1, [r1, #0]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	f241 1308 	movw	r3, #4360	; 0x1108
 8004fbe:	440b      	add	r3, r1
 8004fc0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f001 fb00 	bl	80065c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f001 fb44 	bl	8006656 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	3305      	adds	r3, #5
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	021a      	lsls	r2, r3, #8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	3303      	adds	r3, #3
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	061a      	lsls	r2, r3, #24
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	3302      	adds	r3, #2
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	041b      	lsls	r3, r3, #16
 8005000:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	3301      	adds	r3, #1
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800500c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800501a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800501c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2210      	movs	r2, #16
 800502a:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2210      	movs	r2, #16
 8005030:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	58024400 	.word	0x58024400
 8005040:	431bde83 	.word	0x431bde83
 8005044:	ffff8001 	.word	0xffff8001

08005048 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	330a      	adds	r3, #10
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_ETH_DescAssignMemory+0x28>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b03      	cmp	r3, #3
 800506e:	d904      	bls.n	800507a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2201      	movs	r2, #1
 8005074:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e021      	b.n	80050be <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00b      	beq.n	80050b0 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	d174      	bne.n	80051c4 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2223      	movs	r2, #35	; 0x23
 80050de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e00f      	b.n	8005106 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	330a      	adds	r3, #10
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3301      	adds	r3, #1
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b03      	cmp	r3, #3
 800510a:	d9ec      	bls.n	80050e6 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0202 	orr.w	r2, r2, #2
 8005120:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	f241 1304 	movw	r3, #4356	; 0x1104
 800514e:	4413      	add	r3, r2
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6811      	ldr	r1, [r2, #0]
 8005156:	f043 0201 	orr.w	r2, r3, #1
 800515a:	f241 1304 	movw	r3, #4356	; 0x1104
 800515e:	440b      	add	r3, r1
 8005160:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	f241 1308 	movw	r3, #4360	; 0x1108
 800516a:	4413      	add	r3, r2
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6811      	ldr	r1, [r2, #0]
 8005172:	f043 0201 	orr.w	r2, r3, #1
 8005176:	f241 1308 	movw	r3, #4360	; 0x1108
 800517a:	440b      	add	r3, r1
 800517c:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8005190:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005194:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	f241 1334 	movw	r3, #4404	; 0x1134
 800519e:	4413      	add	r3, r2
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6811      	ldr	r1, [r2, #0]
 80051a6:	f24d 0241 	movw	r2, #53313	; 0xd041
 80051aa:	431a      	orrs	r2, r3
 80051ac:	f241 1334 	movw	r3, #4404	; 0x1134
 80051b0:	440b      	add	r3, r1
 80051b2:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2210      	movs	r2, #16
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2222      	movs	r2, #34	; 0x22
 80051be:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e000      	b.n	80051c6 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
  }
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d067      	beq.n	80052b4 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2223      	movs	r2, #35	; 0x23
 80051e8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	f241 1334 	movw	r3, #4404	; 0x1134
 80051f2:	4413      	add	r3, r2
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6811      	ldr	r1, [r2, #0]
 80051fa:	4a32      	ldr	r2, [pc, #200]	; (80052c4 <HAL_ETH_Stop_IT+0xf0>)
 80051fc:	401a      	ands	r2, r3
 80051fe:	f241 1334 	movw	r3, #4404	; 0x1134
 8005202:	440b      	add	r3, r1
 8005204:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	f241 1304 	movw	r3, #4356	; 0x1104
 800520e:	4413      	add	r3, r2
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6811      	ldr	r1, [r2, #0]
 8005216:	f023 0201 	bic.w	r2, r3, #1
 800521a:	f241 1304 	movw	r3, #4356	; 0x1104
 800521e:	440b      	add	r3, r1
 8005220:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	f241 1308 	movw	r3, #4360	; 0x1108
 800522a:	4413      	add	r3, r2
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6811      	ldr	r1, [r2, #0]
 8005232:	f023 0201 	bic.w	r2, r3, #1
 8005236:	f241 1308 	movw	r3, #4360	; 0x1108
 800523a:	440b      	add	r3, r1
 800523c:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0201 	bic.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0202 	bic.w	r2, r2, #2
 8005270:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	e00f      	b.n	8005298 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	330a      	adds	r3, #10
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3301      	adds	r3, #1
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b03      	cmp	r3, #3
 800529c:	d9ec      	bls.n	8005278 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2210      	movs	r2, #16
 80052a8:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2210      	movs	r2, #16
 80052ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	ffff2fbe 	.word	0xffff2fbe

080052c8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d107      	bne.n	80052ea <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052de:	f043 0201 	orr.w	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e073      	b.n	80053d2 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ee:	2b10      	cmp	r3, #16
 80052f0:	d16e      	bne.n	80053d0 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80052f2:	2200      	movs	r2, #0
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f001 fa0a 	bl	8006710 <ETH_Prepare_Tx_Descriptors>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005306:	f043 0202 	orr.w	r2, r3, #2
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e05f      	b.n	80053d2 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3206      	adds	r2, #6
 800531a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	629a      	str	r2, [r3, #40]	; 0x28
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	2b03      	cmp	r3, #3
 8005330:	d904      	bls.n	800533c <HAL_ETH_Transmit+0x74>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	1f1a      	subs	r2, r3, #4
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	3106      	adds	r1, #6
 8005348:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800534c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005350:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8005352:	f7fd fc17 	bl	8002b84 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8005358:	e034      	b.n	80053c4 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d011      	beq.n	8005390 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005370:	f043 0208 	orr.w	r2, r3, #8
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	22e0      	movs	r2, #224	; 0xe0
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e020      	b.n	80053d2 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005396:	d015      	beq.n	80053c4 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8005398:	f7fd fbf4 	bl	8002b84 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d302      	bcc.n	80053ae <HAL_ETH_Transmit+0xe6>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b2:	f043 0204 	orr.w	r2, r3, #4
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	22e0      	movs	r2, #224	; 0xe0
 80053be:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e006      	b.n	80053d2 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	dbc6      	blt.n	800535a <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 80053da:	b480      	push	{r7}
 80053dc:	b089      	sub	sp, #36	; 0x24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	332c      	adds	r3, #44	; 0x2c
 80053e6:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f6:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d06b      	beq.n	80054e4 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 800540c:	2300      	movs	r3, #0
 800540e:	e0ce      	b.n	80055ae <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	3301      	adds	r3, #1
 8005414:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d036      	beq.n	8005490 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	3301      	adds	r3, #1
 8005426:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d101      	bne.n	8005432 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3301      	adds	r3, #1
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	2b03      	cmp	r3, #3
 800543c:	d902      	bls.n	8005444 <HAL_ETH_IsRxDataAvailable+0x6a>
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	3b04      	subs	r3, #4
 8005442:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800544c:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	db11      	blt.n	800547a <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2201      	movs	r2, #1
 8005466:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	3301      	adds	r3, #1
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d902      	bls.n	800547a <HAL_ETH_IsRxDataAvailable+0xa0>
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	3b04      	subs	r3, #4
 8005478:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 800548c:	2301      	movs	r3, #1
 800548e:	e08e      	b.n	80055ae <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d012      	beq.n	80054c2 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80054a0:	2301      	movs	r3, #1
 80054a2:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	3301      	adds	r3, #1
 80054a8:	61fb      	str	r3, [r7, #28]
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d902      	bls.n	80054b6 <HAL_ETH_IsRxDataAvailable+0xdc>
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	3b04      	subs	r3, #4
 80054b4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054be:	61bb      	str	r3, [r7, #24]
 80054c0:	e010      	b.n	80054e4 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	3301      	adds	r3, #1
 80054c6:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	3301      	adds	r3, #1
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d902      	bls.n	80054da <HAL_ETH_IsRxDataAvailable+0x100>
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3b04      	subs	r3, #4
 80054d8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e2:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	db02      	blt.n	80054f2 <HAL_ETH_IsRxDataAvailable+0x118>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d98e      	bls.n	8005410 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d056      	beq.n	80055a6 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005510:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e03b      	b.n	8005590 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005526:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	695a      	ldr	r2, [r3, #20]
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	3b01      	subs	r3, #1
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	429a      	cmp	r2, r3
 800556c:	d20d      	bcs.n	800558a <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3301      	adds	r3, #1
 8005572:	61fb      	str	r3, [r7, #28]
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	2b03      	cmp	r3, #3
 8005578:	d902      	bls.n	8005580 <HAL_ETH_IsRxDataAvailable+0x1a6>
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	3b04      	subs	r3, #4
 800557e:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005588:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	3301      	adds	r3, #1
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	429a      	cmp	r2, r3
 8005596:	d3bf      	bcc.n	8005518 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6819      	ldr	r1, [r3, #0]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	f241 1328 	movw	r3, #4392	; 0x1128
 80055a2:	440b      	add	r3, r1
 80055a4:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2200      	movs	r2, #0
 80055aa:	619a      	str	r2, [r3, #24]

  return 0;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3724      	adds	r7, #36	; 0x24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b08a      	sub	sp, #40	; 0x28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	332c      	adds	r3, #44	; 0x2c
 80055c8:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055dc:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d104      	bne.n	80055f2 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e07d      	b.n	80056ee <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10f      	bne.n	800561a <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff feed 	bl	80053da <HAL_ETH_IsRxDataAvailable>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e071      	b.n	80056ee <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005618:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800561a:	2300      	movs	r3, #0
 800561c:	623b      	str	r3, [r7, #32]
 800561e:	e031      	b.n	8005684 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	461a      	mov	r2, r3
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00b      	beq.n	8005652 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	461a      	mov	r2, r3
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800565a:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	3301      	adds	r3, #1
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	2b03      	cmp	r3, #3
 8005666:	d902      	bls.n	800566e <HAL_ETH_GetRxDataBuffer+0xb4>
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	3b04      	subs	r3, #4
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005676:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	3301      	adds	r3, #1
 8005682:	623b      	str	r3, [r7, #32]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	3b01      	subs	r3, #1
 800568a:	6a3a      	ldr	r2, [r7, #32]
 800568c:	429a      	cmp	r2, r3
 800568e:	d3c7      	bcc.n	8005620 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	461a      	mov	r2, r3
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d803      	bhi.n	80056ba <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	605a      	str	r2, [r3, #4]
 80056b8:	e018      	b.n	80056ec <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d012      	beq.n	80056e8 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	695a      	ldr	r2, [r3, #20]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	461a      	mov	r2, r3
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	1ad2      	subs	r2, r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	e001      	b.n	80056ec <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3728      	adds	r7, #40	; 0x28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b086      	sub	sp, #24
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	332c      	adds	r3, #44	; 0x2c
 8005704:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d107      	bne.n	8005724 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff fe60 	bl	80053da <HAL_ETH_IsRxDataAvailable>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e017      	b.n	8005754 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	699a      	ldr	r2, [r3, #24]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4413      	add	r3, r2
 800572c:	3b01      	subs	r3, #1
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2b03      	cmp	r3, #3
 8005734:	d902      	bls.n	800573c <HAL_ETH_GetRxDataLength+0x46>
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	3b04      	subs	r3, #4
 800573a:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005744:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800575c:	b480      	push	{r7}
 800575e:	b089      	sub	sp, #36	; 0x24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	332c      	adds	r3, #44	; 0x2c
 8005768:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005778:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e057      	b.n	800583c <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	3301      	adds	r3, #1
 8005798:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800579a:	2300      	movs	r3, #0
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	e03b      	b.n	8005818 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057ae:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d009      	beq.n	80057cc <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d20d      	bcs.n	8005812 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	3301      	adds	r3, #1
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d902      	bls.n	8005808 <HAL_ETH_BuildRxDescriptors+0xac>
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	3b04      	subs	r3, #4
 8005806:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005810:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	3301      	adds	r3, #1
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	429a      	cmp	r2, r3
 800581e:	d3bf      	bcc.n	80057a0 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6819      	ldr	r1, [r3, #0]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	f241 1328 	movw	r3, #4392	; 0x1128
 800582a:	440b      	add	r3, r1
 800582c:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3724      	adds	r7, #36	; 0x24
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	d113      	bne.n	800588a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	f241 1334 	movw	r3, #4404	; 0x1134
 800586a:	4413      	add	r3, r2
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b40      	cmp	r3, #64	; 0x40
 8005874:	d109      	bne.n	800588a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f006 fb44 	bl	800bf04 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005884:	f248 0240 	movw	r2, #32832	; 0x8040
 8005888:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b01      	cmp	r3, #1
 800589a:	d113      	bne.n	80058c4 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	f241 1334 	movw	r3, #4404	; 0x1134
 80058a4:	4413      	add	r3, r2
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d109      	bne.n	80058c4 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f8c7 	bl	8005a44 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80058be:	f248 0201 	movw	r2, #32769	; 0x8001
 80058c2:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058d6:	d149      	bne.n	800596c <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	f241 1334 	movw	r3, #4404	; 0x1134
 80058e0:	4413      	add	r3, r2
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058ec:	d13e      	bne.n	800596c <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f2:	f043 0208 	orr.w	r2, r3, #8
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590c:	d11b      	bne.n	8005946 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	f241 1302 	movw	r3, #4354	; 0x1102
 800591c:	4013      	ands	r3, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	f241 1334 	movw	r3, #4404	; 0x1134
 800592a:	4413      	add	r3, r2
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6811      	ldr	r1, [r2, #0]
 8005932:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005936:	f241 1334 	movw	r3, #4404	; 0x1134
 800593a:	440b      	add	r3, r1
 800593c:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	22e0      	movs	r2, #224	; 0xe0
 8005942:	655a      	str	r2, [r3, #84]	; 0x54
 8005944:	e00f      	b.n	8005966 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8005960:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8005964:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f876 	bl	8005a58 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005974:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8005978:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800597c:	d10e      	bne.n	800599c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	22e0      	movs	r2, #224	; 0xe0
 800598e:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f86b 	bl	8005a6c <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d10d      	bne.n	80059c8 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80059b4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f85f 	bl	8005a80 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d10d      	bne.n	80059f4 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80059e0:	f003 020f 	and.w	r2, r3, #15
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f853 	bl	8005a94 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80059f4:	f7fd fa4a 	bl	8002e8c <HAL_GetCurrentCPUID>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d10d      	bne.n	8005a1a <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80059fe:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <HAL_ETH_IRQHandler+0x1f4>)
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d014      	beq.n	8005a34 <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <HAL_ETH_IRQHandler+0x1f4>)
 8005a0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005a10:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f848 	bl	8005aa8 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8005a18:	e00c      	b.n	8005a34 <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8005a1a:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <HAL_ETH_IRQHandler+0x1f8>)
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d006      	beq.n	8005a34 <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <HAL_ETH_IRQHandler+0x1f8>)
 8005a28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005a2c:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f83a 	bl	8005aa8 <HAL_ETH_WakeUpCallback>
}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	58000080 	.word	0x58000080
 8005a40:	580000c0 	.word	0x580000c0

08005a44 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e03e      	b.n	8005b5c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ae6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	055b      	lsls	r3, r3, #21
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	041b      	lsls	r3, r3, #16
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f043 030c 	orr.w	r3, r3, #12
 8005b0a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f043 0301 	orr.w	r3, r3, #1
 8005b12:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8005b1e:	f7fd f831 	bl	8002b84 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005b24:	e009      	b.n	8005b3a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8005b26:	f7fd f82d 	bl	8002b84 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b34:	d901      	bls.n	8005b3a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e010      	b.n	8005b5c <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1ed      	bne.n	8005b26 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e03c      	b.n	8005c00 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b8e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	055b      	lsls	r3, r3, #21
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	041b      	lsls	r3, r3, #16
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f023 030c 	bic.w	r3, r3, #12
 8005bb2:	f043 0304 	orr.w	r3, r3, #4
 8005bb6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <HAL_ETH_WritePHYRegister+0xa4>)
 8005bc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8005bca:	4a0f      	ldr	r2, [pc, #60]	; (8005c08 <HAL_ETH_WritePHYRegister+0xa4>)
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8005bd2:	f7fc ffd7 	bl	8002b84 <HAL_GetTick>
 8005bd6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005bd8:	e009      	b.n	8005bee <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8005bda:	f7fc ffd3 	bl	8002b84 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005be8:	d901      	bls.n	8005bee <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e008      	b.n	8005c00 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1ed      	bne.n	8005bda <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40028000 	.word	0x40028000

08005c0c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e1c3      	b.n	8005fa8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 020c 	and.w	r2, r3, #12
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	bf0c      	ite	eq
 8005c66:	2301      	moveq	r3, #1
 8005c68:	2300      	movne	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bf14      	ite	ne
 8005c82:	2301      	movne	r3, #1
 8005c84:	2300      	moveq	r3, #0
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bf14      	ite	ne
 8005cb6:	2301      	movne	r3, #1
 8005cb8:	2300      	moveq	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	bf14      	ite	ne
 8005cd0:	2301      	movne	r3, #1
 8005cd2:	2300      	moveq	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bf14      	ite	ne
 8005d06:	2301      	movne	r3, #1
 8005d08:	2300      	moveq	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	bf0c      	ite	eq
 8005d20:	2301      	moveq	r3, #1
 8005d22:	2300      	movne	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bf0c      	ite	eq
 8005d3a:	2301      	moveq	r3, #1
 8005d3c:	2300      	movne	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	bf14      	ite	ne
 8005d54:	2301      	movne	r3, #1
 8005d56:	2300      	moveq	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	bf14      	ite	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	2300      	moveq	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bf14      	ite	ne
 8005d88:	2301      	movne	r3, #1
 8005d8a:	2300      	moveq	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bf14      	ite	ne
 8005da2:	2301      	movne	r3, #1
 8005da4:	2300      	moveq	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bf14      	ite	ne
 8005dca:	2301      	movne	r3, #1
 8005dcc:	2300      	moveq	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bf0c      	ite	eq
 8005e00:	2301      	moveq	r3, #1
 8005e02:	2300      	movne	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	bf14      	ite	ne
 8005e1c:	2301      	movne	r3, #1
 8005e1e:	2300      	moveq	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	bf14      	ite	ne
 8005e38:	2301      	movne	r3, #1
 8005e3a:	2300      	moveq	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	461a      	mov	r2, r3
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	bf14      	ite	ne
 8005e54:	2301      	movne	r3, #1
 8005e56:	2300      	moveq	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	0e5b      	lsrs	r3, r3, #25
 8005e6a:	f003 021f 	and.w	r2, r3, #31
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf14      	ite	ne
 8005e80:	2301      	movne	r3, #1
 8005e82:	2300      	moveq	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f003 020f 	and.w	r2, r3, #15
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	bf14      	ite	ne
 8005eaa:	2301      	movne	r3, #1
 8005eac:	2300      	moveq	r3, #0
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bf0c      	ite	eq
 8005ec6:	2301      	moveq	r3, #1
 8005ec8:	2300      	movne	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee8:	0c1b      	lsrs	r3, r3, #16
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bf14      	ite	ne
 8005f00:	2301      	movne	r3, #1
 8005f02:	2300      	moveq	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bf14      	ite	ne
 8005f1e:	2301      	movne	r3, #1
 8005f20:	2300      	moveq	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005f34:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005f44:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bf14      	ite	ne
 8005f5c:	2301      	movne	r3, #1
 8005f5e:	2300      	moveq	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bf14      	ite	ne
 8005f7a:	2301      	movne	r3, #1
 8005f7c:	2300      	moveq	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	bf0c      	ite	eq
 8005f98:	2301      	moveq	r3, #1
 8005f9a:	2300      	movne	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e00a      	b.n	8005fde <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fcc:	2b10      	cmp	r3, #16
 8005fce:	d105      	bne.n	8005fdc <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f860 	bl	8006098 <ETH_SetMACConfig>

    return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e000      	b.n	8005fde <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
  }
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ff8:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006000:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006002:	f002 f9dd 	bl	80083c0 <HAL_RCC_GetHCLKFreq>
 8006006:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4a1e      	ldr	r2, [pc, #120]	; (8006084 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d908      	bls.n	8006022 <HAL_ETH_SetMDIOClockRange+0x3a>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4a1d      	ldr	r2, [pc, #116]	; (8006088 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d804      	bhi.n	8006022 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	e027      	b.n	8006072 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	4a18      	ldr	r2, [pc, #96]	; (8006088 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d908      	bls.n	800603c <HAL_ETH_SetMDIOClockRange+0x54>
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4a17      	ldr	r2, [pc, #92]	; (800608c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d804      	bhi.n	800603c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e01a      	b.n	8006072 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4a13      	ldr	r2, [pc, #76]	; (800608c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d903      	bls.n	800604c <HAL_ETH_SetMDIOClockRange+0x64>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4a12      	ldr	r2, [pc, #72]	; (8006090 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d911      	bls.n	8006070 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4a10      	ldr	r2, [pc, #64]	; (8006090 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d908      	bls.n	8006066 <HAL_ETH_SetMDIOClockRange+0x7e>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4a0f      	ldr	r2, [pc, #60]	; (8006094 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d804      	bhi.n	8006066 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e005      	b.n	8006072 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	e000      	b.n	8006072 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006070:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800607c:	bf00      	nop
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	01312cff 	.word	0x01312cff
 8006088:	02160ebf 	.word	0x02160ebf
 800608c:	039386ff 	.word	0x039386ff
 8006090:	05f5e0ff 	.word	0x05f5e0ff
 8006094:	08f0d17f 	.word	0x08f0d17f

08006098 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80060aa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	791b      	ldrb	r3, [r3, #4]
 80060b0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80060b2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	7b1b      	ldrb	r3, [r3, #12]
 80060b8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80060ba:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	7b5b      	ldrb	r3, [r3, #13]
 80060c0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80060c2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	7b9b      	ldrb	r3, [r3, #14]
 80060c8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80060ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	7bdb      	ldrb	r3, [r3, #15]
 80060d0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80060d2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	7c12      	ldrb	r2, [r2, #16]
 80060d8:	2a00      	cmp	r2, #0
 80060da:	d102      	bne.n	80060e2 <ETH_SetMACConfig+0x4a>
 80060dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80060e0:	e000      	b.n	80060e4 <ETH_SetMACConfig+0x4c>
 80060e2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80060e4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	7c52      	ldrb	r2, [r2, #17]
 80060ea:	2a00      	cmp	r2, #0
 80060ec:	d102      	bne.n	80060f4 <ETH_SetMACConfig+0x5c>
 80060ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060f2:	e000      	b.n	80060f6 <ETH_SetMACConfig+0x5e>
 80060f4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80060f6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	7c9b      	ldrb	r3, [r3, #18]
 80060fc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80060fe:	431a      	orrs	r2, r3
                                macconf->Speed |
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006104:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800610a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	7f1b      	ldrb	r3, [r3, #28]
 8006110:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8006112:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	7f5b      	ldrb	r3, [r3, #29]
 8006118:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800611a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	7f92      	ldrb	r2, [r2, #30]
 8006120:	2a00      	cmp	r2, #0
 8006122:	d102      	bne.n	800612a <ETH_SetMACConfig+0x92>
 8006124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006128:	e000      	b.n	800612c <ETH_SetMACConfig+0x94>
 800612a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800612c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	7fdb      	ldrb	r3, [r3, #31]
 8006132:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8006134:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	f892 2020 	ldrb.w	r2, [r2, #32]
 800613c:	2a00      	cmp	r2, #0
 800613e:	d102      	bne.n	8006146 <ETH_SetMACConfig+0xae>
 8006140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006144:	e000      	b.n	8006148 <ETH_SetMACConfig+0xb0>
 8006146:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8006148:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800614e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006156:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8006158:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4b56      	ldr	r3, [pc, #344]	; (80062c4 <ETH_SetMACConfig+0x22c>)
 800616a:	4013      	ands	r3, r2
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	68f9      	ldr	r1, [r7, #12]
 8006172:	430b      	orrs	r3, r1
 8006174:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006182:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8006184:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800618c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800618e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006196:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8006198:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80061a0:	2a00      	cmp	r2, #0
 80061a2:	d102      	bne.n	80061aa <ETH_SetMACConfig+0x112>
 80061a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80061a8:	e000      	b.n	80061ac <ETH_SetMACConfig+0x114>
 80061aa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80061ac:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	4b42      	ldr	r3, [pc, #264]	; (80062c8 <ETH_SetMACConfig+0x230>)
 80061be:	4013      	ands	r3, r2
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	68f9      	ldr	r1, [r7, #12]
 80061c6:	430b      	orrs	r3, r1
 80061c8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061d0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	4b3a      	ldr	r3, [pc, #232]	; (80062cc <ETH_SetMACConfig+0x234>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	68f9      	ldr	r1, [r7, #12]
 80061ea:	430b      	orrs	r3, r1
 80061ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80061f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80061fa:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006202:	2a00      	cmp	r2, #0
 8006204:	d101      	bne.n	800620a <ETH_SetMACConfig+0x172>
 8006206:	2280      	movs	r2, #128	; 0x80
 8006208:	e000      	b.n	800620c <ETH_SetMACConfig+0x174>
 800620a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800620c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006212:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800621e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006222:	4013      	ands	r3, r2
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	68f9      	ldr	r1, [r7, #12]
 800622a:	430b      	orrs	r3, r1
 800622c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006234:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800623c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624a:	f023 0103 	bic.w	r1, r3, #3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	430a      	orrs	r2, r1
 8006256:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006262:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800627e:	2a00      	cmp	r2, #0
 8006280:	d101      	bne.n	8006286 <ETH_SetMACConfig+0x1ee>
 8006282:	2240      	movs	r2, #64	; 0x40
 8006284:	e000      	b.n	8006288 <ETH_SetMACConfig+0x1f0>
 8006286:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006288:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006290:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006292:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800629a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80062a8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	00048083 	.word	0x00048083
 80062c8:	c0f88000 	.word	0xc0f88000
 80062cc:	fffffef0 	.word	0xfffffef0

080062d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	4b38      	ldr	r3, [pc, #224]	; (80063c8 <ETH_SetDMAConfig+0xf8>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	6812      	ldr	r2, [r2, #0]
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	6809      	ldr	r1, [r1, #0]
 80062f0:	431a      	orrs	r2, r3
 80062f2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80062f6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	791b      	ldrb	r3, [r3, #4]
 80062fc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006302:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	7b1b      	ldrb	r3, [r3, #12]
 8006308:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	f241 0304 	movw	r3, #4100	; 0x1004
 8006316:	4413      	add	r3, r2
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	4b2c      	ldr	r3, [pc, #176]	; (80063cc <ETH_SetDMAConfig+0xfc>)
 800631c:	4013      	ands	r3, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6811      	ldr	r1, [r2, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	431a      	orrs	r2, r3
 8006326:	f241 0304 	movw	r3, #4100	; 0x1004
 800632a:	440b      	add	r3, r1
 800632c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	7b5b      	ldrb	r3, [r3, #13]
 8006332:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4b22      	ldr	r3, [pc, #136]	; (80063d0 <ETH_SetDMAConfig+0x100>)
 8006348:	4013      	ands	r3, r2
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6811      	ldr	r1, [r2, #0]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	431a      	orrs	r2, r3
 8006352:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8006356:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	7d1b      	ldrb	r3, [r3, #20]
 8006360:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006362:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	7f5b      	ldrb	r3, [r3, #29]
 8006368:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	f241 1304 	movw	r3, #4356	; 0x1104
 8006376:	4413      	add	r3, r2
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b16      	ldr	r3, [pc, #88]	; (80063d4 <ETH_SetDMAConfig+0x104>)
 800637c:	4013      	ands	r3, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6811      	ldr	r1, [r2, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	431a      	orrs	r2, r3
 8006386:	f241 1304 	movw	r3, #4356	; 0x1104
 800638a:	440b      	add	r3, r1
 800638c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	7f1b      	ldrb	r3, [r3, #28]
 8006392:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	f241 1308 	movw	r3, #4360	; 0x1108
 80063a4:	4413      	add	r3, r2
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <ETH_SetDMAConfig+0x108>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6811      	ldr	r1, [r2, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	f241 1308 	movw	r3, #4360	; 0x1108
 80063b8:	440b      	add	r3, r1
 80063ba:	601a      	str	r2, [r3, #0]
}
 80063bc:	bf00      	nop
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	ffff87fd 	.word	0xffff87fd
 80063cc:	ffff2ffe 	.word	0xffff2ffe
 80063d0:	fffec000 	.word	0xfffec000
 80063d4:	ffc0efef 	.word	0xffc0efef
 80063d8:	7fc0ffff 	.word	0x7fc0ffff

080063dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b0a4      	sub	sp, #144	; 0x90
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80063ea:	2300      	movs	r3, #0
 80063ec:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80063ee:	2300      	movs	r3, #0
 80063f0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800640c:	2300      	movs	r3, #0
 800640e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800641c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800641e:	2300      	movs	r3, #0
 8006420:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006424:	2300      	movs	r3, #0
 8006426:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006428:	2300      	movs	r3, #0
 800642a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800642e:	2300      	movs	r3, #0
 8006430:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006434:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006438:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800643a:	2300      	movs	r3, #0
 800643c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006440:	2300      	movs	r3, #0
 8006442:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006444:	2301      	movs	r3, #1
 8006446:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800644a:	2300      	movs	r3, #0
 800644c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006450:	2300      	movs	r3, #0
 8006452:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006456:	2300      	movs	r3, #0
 8006458:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800645a:	2300      	movs	r3, #0
 800645c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800645e:	2300      	movs	r3, #0
 8006460:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006462:	2300      	movs	r3, #0
 8006464:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006468:	2300      	movs	r3, #0
 800646a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006474:	2320      	movs	r3, #32
 8006476:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006480:	2300      	movs	r3, #0
 8006482:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006486:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800648c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006490:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006492:	2300      	movs	r3, #0
 8006494:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006498:	2302      	movs	r3, #2
 800649a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800649e:	2300      	movs	r3, #0
 80064a0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80064b6:	2300      	movs	r3, #0
 80064b8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80064c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff fde6 	bl	8006098 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80064cc:	2301      	movs	r3, #1
 80064ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80064d0:	2301      	movs	r3, #1
 80064d2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80064d8:	2300      	movs	r3, #0
 80064da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80064de:	2300      	movs	r3, #0
 80064e0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80064e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80064ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80064f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80064f4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80064fc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006500:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006502:	f107 0308 	add.w	r3, r7, #8
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7ff fee1 	bl	80062d0 <ETH_SetDMAConfig>
}
 800650e:	bf00      	nop
 8006510:	3790      	adds	r7, #144	; 0x90
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006528:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006530:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006532:	f001 ff45 	bl	80083c0 <HAL_RCC_GetHCLKFreq>
 8006536:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4a1e      	ldr	r2, [pc, #120]	; (80065b4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d908      	bls.n	8006552 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4a1d      	ldr	r2, [pc, #116]	; (80065b8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d804      	bhi.n	8006552 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e027      	b.n	80065a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	4a18      	ldr	r2, [pc, #96]	; (80065b8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d908      	bls.n	800656c <ETH_MAC_MDIO_ClkConfig+0x54>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4a17      	ldr	r2, [pc, #92]	; (80065bc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d804      	bhi.n	800656c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	e01a      	b.n	80065a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4a13      	ldr	r2, [pc, #76]	; (80065bc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d903      	bls.n	800657c <ETH_MAC_MDIO_ClkConfig+0x64>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4a12      	ldr	r2, [pc, #72]	; (80065c0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d911      	bls.n	80065a0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4a10      	ldr	r2, [pc, #64]	; (80065c0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d908      	bls.n	8006596 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4a0f      	ldr	r2, [pc, #60]	; (80065c4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d804      	bhi.n	8006596 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	e005      	b.n	80065a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	e000      	b.n	80065a2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80065a0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80065ac:	bf00      	nop
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	01312cff 	.word	0x01312cff
 80065b8:	02160ebf 	.word	0x02160ebf
 80065bc:	039386ff 	.word	0x039386ff
 80065c0:	05f5e0ff 	.word	0x05f5e0ff
 80065c4:	08f0d17f 	.word	0x08f0d17f

080065c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e01d      	b.n	8006612 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68d9      	ldr	r1, [r3, #12]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4613      	mov	r3, r2
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	4413      	add	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	440b      	add	r3, r1
 80065e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2200      	movs	r2, #0
 80065f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2200      	movs	r2, #0
 80065f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2200      	movs	r2, #0
 80065fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	3206      	adds	r2, #6
 8006608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b03      	cmp	r3, #3
 8006616:	d9de      	bls.n	80065d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	f241 132c 	movw	r3, #4396	; 0x112c
 8006626:	4413      	add	r3, r2
 8006628:	2203      	movs	r2, #3
 800662a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68d9      	ldr	r1, [r3, #12]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	f241 1314 	movw	r3, #4372	; 0x1114
 8006638:	4413      	add	r3, r2
 800663a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006648:	601a      	str	r2, [r3, #0]
}
 800664a:	bf00      	nop
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	e024      	b.n	80066ae <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6919      	ldr	r1, [r3, #16]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4613      	mov	r3, r2
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	4413      	add	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	440b      	add	r3, r1
 8006674:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2200      	movs	r2, #0
 8006680:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2200      	movs	r2, #0
 8006686:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2200      	movs	r2, #0
 800668c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2200      	movs	r2, #0
 8006692:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2200      	movs	r2, #0
 8006698:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	330a      	adds	r3, #10
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	440b      	add	r3, r1
 80066a6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3301      	adds	r3, #1
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b03      	cmp	r3, #3
 80066b2:	d9d7      	bls.n	8006664 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	f241 1330 	movw	r3, #4400	; 0x1130
 80066da:	4413      	add	r3, r2
 80066dc:	2203      	movs	r2, #3
 80066de:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6919      	ldr	r1, [r3, #16]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	f241 131c 	movw	r3, #4380	; 0x111c
 80066ec:	4413      	add	r3, r2
 80066ee:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	f241 1328 	movw	r3, #4392	; 0x1128
 8006700:	4413      	add	r3, r2
 8006702:	6019      	str	r1, [r3, #0]
}
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8006710:	b480      	push	{r7}
 8006712:	b08d      	sub	sp, #52	; 0x34
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3318      	adds	r3, #24
 8006720:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 800672e:	2300      	movs	r3, #0
 8006730:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800674a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800674e:	d101      	bne.n	8006754 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8006750:	2302      	movs	r3, #2
 8006752:	e223      	b.n	8006b9c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d044      	beq.n	80067ea <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	4b72      	ldr	r3, [pc, #456]	; (8006930 <ETH_Prepare_Tx_Descriptors+0x220>)
 8006766:	4013      	ands	r3, r2
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800676c:	431a      	orrs	r2, r3
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800678c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d027      	beq.n	80067ea <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	041b      	lsls	r3, r3, #16
 80067a6:	431a      	orrs	r2, r3
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	431a      	orrs	r2, r3
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80067d8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80067e8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0310 	and.w	r3, r3, #16
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00e      	beq.n	8006814 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	4b4e      	ldr	r3, [pc, #312]	; (8006934 <ETH_Prepare_Tx_Descriptors+0x224>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	6992      	ldr	r2, [r2, #24]
 8006802:	431a      	orrs	r2, r3
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d105      	bne.n	800682c <ETH_Prepare_Tx_Descriptors+0x11c>
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0310 	and.w	r3, r3, #16
 8006828:	2b00      	cmp	r3, #0
 800682a:	d030      	beq.n	800688e <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	3301      	adds	r3, #1
 8006848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	2b03      	cmp	r3, #3
 800684e:	d902      	bls.n	8006856 <ETH_Prepare_Tx_Descriptors+0x146>
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	3b04      	subs	r3, #4
 8006854:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800685a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685e:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	3301      	adds	r3, #1
 8006864:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800686e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006872:	d10c      	bne.n	800688e <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687c:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800688a:	2302      	movs	r3, #2
 800688c:	e186      	b.n	8006b9c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	3301      	adds	r3, #1
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	4b24      	ldr	r3, [pc, #144]	; (8006934 <ETH_Prepare_Tx_Descriptors+0x224>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	69fa      	ldr	r2, [r7, #28]
 80068a8:	6852      	ldr	r2, [r2, #4]
 80068aa:	431a      	orrs	r2, r3
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d012      	beq.n	80068de <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <ETH_Prepare_Tx_Descriptors+0x228>)
 80068ce:	4013      	ands	r3, r2
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	6852      	ldr	r2, [r2, #4]
 80068d4:	0412      	lsls	r2, r2, #16
 80068d6:	431a      	orrs	r2, r3
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	609a      	str	r2, [r3, #8]
 80068dc:	e008      	b.n	80068f0 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	2200      	movs	r2, #0
 80068e2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	4b13      	ldr	r3, [pc, #76]	; (8006938 <ETH_Prepare_Tx_Descriptors+0x228>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	6a3a      	ldr	r2, [r7, #32]
 80068ee:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d021      	beq.n	8006940 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	04db      	lsls	r3, r3, #19
 800690a:	431a      	orrs	r2, r3
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	4b09      	ldr	r3, [pc, #36]	; (800693c <ETH_Prepare_Tx_Descriptors+0x22c>)
 8006916:	4013      	ands	r3, r2
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	69d2      	ldr	r2, [r2, #28]
 800691c:	431a      	orrs	r2, r3
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	60da      	str	r2, [r3, #12]
 800692e:	e02e      	b.n	800698e <ETH_Prepare_Tx_Descriptors+0x27e>
 8006930:	ffff0000 	.word	0xffff0000
 8006934:	ffffc000 	.word	0xffffc000
 8006938:	c000ffff 	.word	0xc000ffff
 800693c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	4b98      	ldr	r3, [pc, #608]	; (8006ba8 <ETH_Prepare_Tx_Descriptors+0x498>)
 8006946:	4013      	ands	r3, r2
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	6852      	ldr	r2, [r2, #4]
 800694c:	431a      	orrs	r2, r3
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d008      	beq.n	8006970 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	431a      	orrs	r2, r3
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0320 	and.w	r3, r3, #32
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	431a      	orrs	r2, r3
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	431a      	orrs	r2, r3
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 80c0 	beq.w	8006b5e <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80069f0:	e0b5      	b.n	8006b5e <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	3301      	adds	r3, #1
 8006a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d902      	bls.n	8006a10 <ETH_Prepare_Tx_Descriptors+0x300>
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	3b04      	subs	r3, #4
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a18:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a32:	d126      	bne.n	8006a82 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a40:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8006a42:	2300      	movs	r3, #0
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
 8006a46:	e016      	b.n	8006a76 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	3301      	adds	r3, #1
 8006a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d902      	bls.n	8006a66 <ETH_Prepare_Tx_Descriptors+0x356>
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	3b04      	subs	r3, #4
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6e:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	3301      	adds	r3, #1
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
 8006a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d3e4      	bcc.n	8006a48 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e08c      	b.n	8006b9c <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	3301      	adds	r3, #1
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	4b43      	ldr	r3, [pc, #268]	; (8006bac <ETH_Prepare_Tx_Descriptors+0x49c>)
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	6852      	ldr	r2, [r2, #4]
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d012      	beq.n	8006ad8 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	4b3a      	ldr	r3, [pc, #232]	; (8006bb0 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	6852      	ldr	r2, [r2, #4]
 8006ace:	0412      	lsls	r2, r2, #16
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	609a      	str	r2, [r3, #8]
 8006ad6:	e008      	b.n	8006aea <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	2200      	movs	r2, #0
 8006adc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	4b33      	ldr	r3, [pc, #204]	; (8006bb0 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	6a3a      	ldr	r2, [r7, #32]
 8006ae8:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0310 	and.w	r3, r3, #16
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00f      	beq.n	8006b16 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	4b2e      	ldr	r3, [pc, #184]	; (8006bb4 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	69d2      	ldr	r2, [r2, #28]
 8006b02:	431a      	orrs	r2, r3
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	60da      	str	r2, [r3, #12]
 8006b14:	e017      	b.n	8006b46 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	4b23      	ldr	r3, [pc, #140]	; (8006ba8 <ETH_Prepare_Tx_Descriptors+0x498>)
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	6852      	ldr	r2, [r2, #4]
 8006b22:	431a      	orrs	r2, r3
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	431a      	orrs	r2, r3
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f47f af45 	bne.w	80069f2 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d006      	beq.n	8006b7c <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	609a      	str	r2, [r3, #8]
 8006b7a:	e005      	b.n	8006b88 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b98:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3734      	adds	r7, #52	; 0x34
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	ffff8000 	.word	0xffff8000
 8006bac:	ffffc000 	.word	0xffffc000
 8006bb0:	c000ffff 	.word	0xc000ffff
 8006bb4:	fffc0000 	.word	0xfffc0000

08006bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b089      	sub	sp, #36	; 0x24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006bc6:	4b89      	ldr	r3, [pc, #548]	; (8006dec <HAL_GPIO_Init+0x234>)
 8006bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006bca:	e194      	b.n	8006ef6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd8:	4013      	ands	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 8186 	beq.w	8006ef0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d00b      	beq.n	8006c04 <HAL_GPIO_Init+0x4c>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d007      	beq.n	8006c04 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006bf8:	2b11      	cmp	r3, #17
 8006bfa:	d003      	beq.n	8006c04 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	2b12      	cmp	r3, #18
 8006c02:	d130      	bne.n	8006c66 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	2203      	movs	r2, #3
 8006c10:	fa02 f303 	lsl.w	r3, r2, r3
 8006c14:	43db      	mvns	r3, r3
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	fa02 f303 	lsl.w	r3, r2, r3
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c42:	43db      	mvns	r3, r3
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	4013      	ands	r3, r2
 8006c48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	091b      	lsrs	r3, r3, #4
 8006c50:	f003 0201 	and.w	r2, r3, #1
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	2203      	movs	r2, #3
 8006c72:	fa02 f303 	lsl.w	r3, r2, r3
 8006c76:	43db      	mvns	r3, r3
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d003      	beq.n	8006ca6 <HAL_GPIO_Init+0xee>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b12      	cmp	r3, #18
 8006ca4:	d123      	bne.n	8006cee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	08da      	lsrs	r2, r3, #3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3208      	adds	r2, #8
 8006cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	220f      	movs	r2, #15
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	08da      	lsrs	r2, r3, #3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3208      	adds	r2, #8
 8006ce8:	69b9      	ldr	r1, [r7, #24]
 8006cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	2203      	movs	r2, #3
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	43db      	mvns	r3, r3
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	4013      	ands	r3, r2
 8006d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f003 0203 	and.w	r2, r3, #3
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	69ba      	ldr	r2, [r7, #24]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 80e0 	beq.w	8006ef0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d30:	4b2f      	ldr	r3, [pc, #188]	; (8006df0 <HAL_GPIO_Init+0x238>)
 8006d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d36:	4a2e      	ldr	r2, [pc, #184]	; (8006df0 <HAL_GPIO_Init+0x238>)
 8006d38:	f043 0302 	orr.w	r3, r3, #2
 8006d3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006d40:	4b2b      	ldr	r3, [pc, #172]	; (8006df0 <HAL_GPIO_Init+0x238>)
 8006d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d4e:	4a29      	ldr	r2, [pc, #164]	; (8006df4 <HAL_GPIO_Init+0x23c>)
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	089b      	lsrs	r3, r3, #2
 8006d54:	3302      	adds	r3, #2
 8006d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	220f      	movs	r2, #15
 8006d66:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6a:	43db      	mvns	r3, r3
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a20      	ldr	r2, [pc, #128]	; (8006df8 <HAL_GPIO_Init+0x240>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d052      	beq.n	8006e20 <HAL_GPIO_Init+0x268>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a1f      	ldr	r2, [pc, #124]	; (8006dfc <HAL_GPIO_Init+0x244>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d031      	beq.n	8006de6 <HAL_GPIO_Init+0x22e>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a1e      	ldr	r2, [pc, #120]	; (8006e00 <HAL_GPIO_Init+0x248>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d02b      	beq.n	8006de2 <HAL_GPIO_Init+0x22a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a1d      	ldr	r2, [pc, #116]	; (8006e04 <HAL_GPIO_Init+0x24c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d025      	beq.n	8006dde <HAL_GPIO_Init+0x226>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a1c      	ldr	r2, [pc, #112]	; (8006e08 <HAL_GPIO_Init+0x250>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d01f      	beq.n	8006dda <HAL_GPIO_Init+0x222>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a1b      	ldr	r2, [pc, #108]	; (8006e0c <HAL_GPIO_Init+0x254>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d019      	beq.n	8006dd6 <HAL_GPIO_Init+0x21e>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a1a      	ldr	r2, [pc, #104]	; (8006e10 <HAL_GPIO_Init+0x258>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d013      	beq.n	8006dd2 <HAL_GPIO_Init+0x21a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a19      	ldr	r2, [pc, #100]	; (8006e14 <HAL_GPIO_Init+0x25c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00d      	beq.n	8006dce <HAL_GPIO_Init+0x216>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a18      	ldr	r2, [pc, #96]	; (8006e18 <HAL_GPIO_Init+0x260>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d007      	beq.n	8006dca <HAL_GPIO_Init+0x212>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a17      	ldr	r2, [pc, #92]	; (8006e1c <HAL_GPIO_Init+0x264>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d101      	bne.n	8006dc6 <HAL_GPIO_Init+0x20e>
 8006dc2:	2309      	movs	r3, #9
 8006dc4:	e02d      	b.n	8006e22 <HAL_GPIO_Init+0x26a>
 8006dc6:	230a      	movs	r3, #10
 8006dc8:	e02b      	b.n	8006e22 <HAL_GPIO_Init+0x26a>
 8006dca:	2308      	movs	r3, #8
 8006dcc:	e029      	b.n	8006e22 <HAL_GPIO_Init+0x26a>
 8006dce:	2307      	movs	r3, #7
 8006dd0:	e027      	b.n	8006e22 <HAL_GPIO_Init+0x26a>
 8006dd2:	2306      	movs	r3, #6
 8006dd4:	e025      	b.n	8006e22 <HAL_GPIO_Init+0x26a>
 8006dd6:	2305      	movs	r3, #5
 8006dd8:	e023      	b.n	8006e22 <HAL_GPIO_Init+0x26a>
 8006dda:	2304      	movs	r3, #4
 8006ddc:	e021      	b.n	8006e22 <HAL_GPIO_Init+0x26a>
 8006dde:	2303      	movs	r3, #3
 8006de0:	e01f      	b.n	8006e22 <HAL_GPIO_Init+0x26a>
 8006de2:	2302      	movs	r3, #2
 8006de4:	e01d      	b.n	8006e22 <HAL_GPIO_Init+0x26a>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e01b      	b.n	8006e22 <HAL_GPIO_Init+0x26a>
 8006dea:	bf00      	nop
 8006dec:	58000080 	.word	0x58000080
 8006df0:	58024400 	.word	0x58024400
 8006df4:	58000400 	.word	0x58000400
 8006df8:	58020000 	.word	0x58020000
 8006dfc:	58020400 	.word	0x58020400
 8006e00:	58020800 	.word	0x58020800
 8006e04:	58020c00 	.word	0x58020c00
 8006e08:	58021000 	.word	0x58021000
 8006e0c:	58021400 	.word	0x58021400
 8006e10:	58021800 	.word	0x58021800
 8006e14:	58021c00 	.word	0x58021c00
 8006e18:	58022000 	.word	0x58022000
 8006e1c:	58022400 	.word	0x58022400
 8006e20:	2300      	movs	r3, #0
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	f002 0203 	and.w	r2, r2, #3
 8006e28:	0092      	lsls	r2, r2, #2
 8006e2a:	4093      	lsls	r3, r2
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e32:	4938      	ldr	r1, [pc, #224]	; (8006f14 <HAL_GPIO_Init+0x35c>)
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	089b      	lsrs	r3, r3, #2
 8006e38:	3302      	adds	r3, #2
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	43db      	mvns	r3, r3
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	4013      	ands	r3, r2
 8006e78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	43db      	mvns	r3, r3
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	43db      	mvns	r3, r3
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	fa22 f303 	lsr.w	r3, r2, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f47f ae63 	bne.w	8006bcc <HAL_GPIO_Init+0x14>
  }
}
 8006f06:	bf00      	nop
 8006f08:	3724      	adds	r7, #36	; 0x24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	58000400 	.word	0x58000400

08006f18 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8006f22:	490c      	ldr	r1, [pc, #48]	; (8006f54 <HAL_HSEM_Take+0x3c>)
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <HAL_HSEM_Take+0x40>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8006f30:	4a08      	ldr	r2, [pc, #32]	; (8006f54 <HAL_HSEM_Take+0x3c>)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <HAL_HSEM_Take+0x40>)
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d101      	bne.n	8006f46 <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e000      	b.n	8006f48 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	58026400 	.word	0x58026400
 8006f58:	80000300 	.word	0x80000300

08006f5c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006f64:	4a08      	ldr	r2, [pc, #32]	; (8006f88 <HAL_HSEM_FastTake+0x2c>)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	3320      	adds	r3, #32
 8006f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f6e:	4a07      	ldr	r2, [pc, #28]	; (8006f8c <HAL_HSEM_FastTake+0x30>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d101      	bne.n	8006f78 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	e000      	b.n	8006f7a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	58026400 	.word	0x58026400
 8006f8c:	80000300 	.word	0x80000300

08006f90 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 8006f98:	4a07      	ldr	r2, [pc, #28]	; (8006fb8 <HAL_HSEM_IsSemTaken+0x28>)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	da01      	bge.n	8006fa8 <HAL_HSEM_IsSemTaken+0x18>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e000      	b.n	8006faa <HAL_HSEM_IsSemTaken+0x1a>
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	58026400 	.word	0x58026400

08006fbc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006fc6:	4906      	ldr	r1, [pc, #24]	; (8006fe0 <HAL_HSEM_Release+0x24>)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	58026400 	.word	0x58026400

08006fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e07f      	b.n	80070f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d106      	bne.n	8007010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7f9 fdf2 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2224      	movs	r2, #36	; 0x24
 8007014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0201 	bic.w	r2, r2, #1
 8007026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007034:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007044:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d107      	bne.n	800705e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800705a:	609a      	str	r2, [r3, #8]
 800705c:	e006      	b.n	800706c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800706a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2b02      	cmp	r3, #2
 8007072:	d104      	bne.n	800707e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800707c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6859      	ldr	r1, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	4b1d      	ldr	r3, [pc, #116]	; (8007100 <HAL_I2C_Init+0x11c>)
 800708a:	430b      	orrs	r3, r1
 800708c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800709c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691a      	ldr	r2, [r3, #16]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	ea42 0103 	orr.w	r1, r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	021a      	lsls	r2, r3, #8
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	69d9      	ldr	r1, [r3, #28]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a1a      	ldr	r2, [r3, #32]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0201 	orr.w	r2, r2, #1
 80070d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	02008000 	.word	0x02008000

08007104 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b20      	cmp	r3, #32
 8007118:	d138      	bne.n	800718c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007124:	2302      	movs	r3, #2
 8007126:	e032      	b.n	800718e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2224      	movs	r2, #36	; 0x24
 8007134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0201 	bic.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007156:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6819      	ldr	r1, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	e000      	b.n	800718e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800718c:	2302      	movs	r3, #2
  }
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800719a:	b480      	push	{r7}
 800719c:	b085      	sub	sp, #20
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	d139      	bne.n	8007224 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071ba:	2302      	movs	r3, #2
 80071bc:	e033      	b.n	8007226 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2224      	movs	r2, #36	; 0x24
 80071ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0201 	bic.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	021b      	lsls	r3, r3, #8
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0201 	orr.w	r2, r2, #1
 800720e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	e000      	b.n	8007226 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007224:	2302      	movs	r3, #2
  }
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800723c:	4b0d      	ldr	r3, [pc, #52]	; (8007274 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800723e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007242:	4a0c      	ldr	r2, [pc, #48]	; (8007274 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007244:	f043 0302 	orr.w	r3, r3, #2
 8007248:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800724e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	4906      	ldr	r1, [pc, #24]	; (8007278 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4313      	orrs	r3, r2
 8007264:	604b      	str	r3, [r1, #4]
}
 8007266:	bf00      	nop
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	58024400 	.word	0x58024400
 8007278:	58000400 	.word	0x58000400

0800727c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e038      	b.n	8007300 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007296:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f245 5255 	movw	r2, #21845	; 0x5555
 80072a0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6852      	ldr	r2, [r2, #4]
 80072aa:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6892      	ldr	r2, [r2, #8]
 80072b4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80072b6:	f7fb fc65 	bl	8002b84 <HAL_GetTick>
 80072ba:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80072bc:	e008      	b.n	80072d0 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80072be:	f7fb fc61 	bl	8002b84 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b30      	cmp	r3, #48	; 0x30
 80072ca:	d901      	bls.n	80072d0 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e017      	b.n	8007300 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1f1      	bne.n	80072be <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	691a      	ldr	r2, [r3, #16]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d005      	beq.n	80072f4 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	68d2      	ldr	r2, [r2, #12]
 80072f0:	611a      	str	r2, [r3, #16]
 80072f2:	e004      	b.n	80072fe <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80072fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007318:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007330:	4b29      	ldr	r3, [pc, #164]	; (80073d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f003 0307 	and.w	r3, r3, #7
 8007338:	2b06      	cmp	r3, #6
 800733a:	d00a      	beq.n	8007352 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800733c:	4b26      	ldr	r3, [pc, #152]	; (80073d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	429a      	cmp	r2, r3
 8007348:	d001      	beq.n	800734e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e040      	b.n	80073d0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	e03e      	b.n	80073d0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007352:	4b21      	ldr	r3, [pc, #132]	; (80073d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800735a:	491f      	ldr	r1, [pc, #124]	; (80073d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4313      	orrs	r3, r2
 8007360:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007362:	f7fb fc0f 	bl	8002b84 <HAL_GetTick>
 8007366:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007368:	e009      	b.n	800737e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800736a:	f7fb fc0b 	bl	8002b84 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007378:	d901      	bls.n	800737e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e028      	b.n	80073d0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800737e:	4b16      	ldr	r3, [pc, #88]	; (80073d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738a:	d1ee      	bne.n	800736a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b1e      	cmp	r3, #30
 8007390:	d008      	beq.n	80073a4 <HAL_PWREx_ConfigSupply+0x7c>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b2e      	cmp	r3, #46	; 0x2e
 8007396:	d005      	beq.n	80073a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b1d      	cmp	r3, #29
 800739c:	d002      	beq.n	80073a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b2d      	cmp	r3, #45	; 0x2d
 80073a2:	d114      	bne.n	80073ce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80073a4:	f7fb fbee 	bl	8002b84 <HAL_GetTick>
 80073a8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80073aa:	e009      	b.n	80073c0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80073ac:	f7fb fbea 	bl	8002b84 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073ba:	d901      	bls.n	80073c0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e007      	b.n	80073d0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80073c0:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <HAL_PWREx_ConfigSupply+0xb0>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073cc:	d1ee      	bne.n	80073ac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	58024800 	.word	0x58024800

080073dc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af02      	add	r7, sp, #8
 80073e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80073e4:	f7fb fbce 	bl	8002b84 <HAL_GetTick>
 80073e8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e05f      	b.n	80074b4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d107      	bne.n	8007410 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7f9 ff0f 	bl	8001224 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007406:	f241 3188 	movw	r1, #5000	; 0x1388
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f85a 	bl	80074c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	3b01      	subs	r3, #1
 8007420:	021a      	lsls	r2, r3, #8
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	2120      	movs	r1, #32
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f852 	bl	80074e0 <QSPI_WaitFlagStateUntilTimeout>
 800743c:	4603      	mov	r3, r0
 800743e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007440:	7afb      	ldrb	r3, [r7, #11]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d135      	bne.n	80074b2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	4b1b      	ldr	r3, [pc, #108]	; (80074bc <HAL_QSPI_Init+0xe0>)
 800744e:	4013      	ands	r3, r2
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6852      	ldr	r2, [r2, #4]
 8007454:	0611      	lsls	r1, r2, #24
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	68d2      	ldr	r2, [r2, #12]
 800745a:	4311      	orrs	r1, r2
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	69d2      	ldr	r2, [r2, #28]
 8007460:	4311      	orrs	r1, r2
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6a12      	ldr	r2, [r2, #32]
 8007466:	4311      	orrs	r1, r2
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6812      	ldr	r2, [r2, #0]
 800746c:	430b      	orrs	r3, r1
 800746e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	4b12      	ldr	r3, [pc, #72]	; (80074c0 <HAL_QSPI_Init+0xe4>)
 8007478:	4013      	ands	r3, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6912      	ldr	r2, [r2, #16]
 800747e:	0411      	lsls	r1, r2, #16
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6952      	ldr	r2, [r2, #20]
 8007484:	4311      	orrs	r1, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6992      	ldr	r2, [r2, #24]
 800748a:	4311      	orrs	r1, r2
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6812      	ldr	r2, [r2, #0]
 8007490:	430b      	orrs	r3, r1
 8007492:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80074b2:	7afb      	ldrb	r3, [r7, #11]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	00ffff2f 	.word	0x00ffff2f
 80074c0:	ffe0f8fe 	.word	0xffe0f8fe

080074c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	4613      	mov	r3, r2
 80074ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80074f0:	e01a      	b.n	8007528 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074f8:	d016      	beq.n	8007528 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074fa:	f7fb fb43 	bl	8002b84 <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	429a      	cmp	r2, r3
 8007508:	d302      	bcc.n	8007510 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10b      	bne.n	8007528 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2204      	movs	r2, #4
 8007514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751c:	f043 0201 	orr.w	r2, r3, #1
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e00e      	b.n	8007546 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	4013      	ands	r3, r2
 8007532:	2b00      	cmp	r3, #0
 8007534:	bf14      	ite	ne
 8007536:	2301      	movne	r3, #1
 8007538:	2300      	moveq	r3, #0
 800753a:	b2db      	uxtb	r3, r3
 800753c:	461a      	mov	r2, r3
 800753e:	79fb      	ldrb	r3, [r7, #7]
 8007540:	429a      	cmp	r2, r3
 8007542:	d1d6      	bne.n	80074f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b08c      	sub	sp, #48	; 0x30
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e3ff      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 8087 	beq.w	800767e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007570:	4b99      	ldr	r3, [pc, #612]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007578:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800757a:	4b97      	ldr	r3, [pc, #604]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007582:	2b10      	cmp	r3, #16
 8007584:	d007      	beq.n	8007596 <HAL_RCC_OscConfig+0x46>
 8007586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007588:	2b18      	cmp	r3, #24
 800758a:	d110      	bne.n	80075ae <HAL_RCC_OscConfig+0x5e>
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d10b      	bne.n	80075ae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007596:	4b90      	ldr	r3, [pc, #576]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d06c      	beq.n	800767c <HAL_RCC_OscConfig+0x12c>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d168      	bne.n	800767c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e3d9      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b6:	d106      	bne.n	80075c6 <HAL_RCC_OscConfig+0x76>
 80075b8:	4b87      	ldr	r3, [pc, #540]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a86      	ldr	r2, [pc, #536]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80075be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	e02e      	b.n	8007624 <HAL_RCC_OscConfig+0xd4>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10c      	bne.n	80075e8 <HAL_RCC_OscConfig+0x98>
 80075ce:	4b82      	ldr	r3, [pc, #520]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a81      	ldr	r2, [pc, #516]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80075d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	4b7f      	ldr	r3, [pc, #508]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a7e      	ldr	r2, [pc, #504]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80075e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075e4:	6013      	str	r3, [r2, #0]
 80075e6:	e01d      	b.n	8007624 <HAL_RCC_OscConfig+0xd4>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075f0:	d10c      	bne.n	800760c <HAL_RCC_OscConfig+0xbc>
 80075f2:	4b79      	ldr	r3, [pc, #484]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a78      	ldr	r2, [pc, #480]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80075f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	4b76      	ldr	r3, [pc, #472]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a75      	ldr	r2, [pc, #468]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	e00b      	b.n	8007624 <HAL_RCC_OscConfig+0xd4>
 800760c:	4b72      	ldr	r3, [pc, #456]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a71      	ldr	r2, [pc, #452]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	4b6f      	ldr	r3, [pc, #444]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a6e      	ldr	r2, [pc, #440]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 800761e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d013      	beq.n	8007654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800762c:	f7fb faaa 	bl	8002b84 <HAL_GetTick>
 8007630:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007632:	e008      	b.n	8007646 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007634:	f7fb faa6 	bl	8002b84 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b64      	cmp	r3, #100	; 0x64
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e38d      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007646:	4b64      	ldr	r3, [pc, #400]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0f0      	beq.n	8007634 <HAL_RCC_OscConfig+0xe4>
 8007652:	e014      	b.n	800767e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007654:	f7fb fa96 	bl	8002b84 <HAL_GetTick>
 8007658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800765c:	f7fb fa92 	bl	8002b84 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b64      	cmp	r3, #100	; 0x64
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e379      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800766e:	4b5a      	ldr	r3, [pc, #360]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1f0      	bne.n	800765c <HAL_RCC_OscConfig+0x10c>
 800767a:	e000      	b.n	800767e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800767c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 80ae 	beq.w	80077e8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800768c:	4b52      	ldr	r3, [pc, #328]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007694:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007696:	4b50      	ldr	r3, [pc, #320]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d007      	beq.n	80076b2 <HAL_RCC_OscConfig+0x162>
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	2b18      	cmp	r3, #24
 80076a6:	d13a      	bne.n	800771e <HAL_RCC_OscConfig+0x1ce>
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d135      	bne.n	800771e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076b2:	4b49      	ldr	r3, [pc, #292]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0304 	and.w	r3, r3, #4
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <HAL_RCC_OscConfig+0x17a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e34b      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ca:	f7fb fa67 	bl	8002b9c <HAL_GetREVID>
 80076ce:	4602      	mov	r2, r0
 80076d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d817      	bhi.n	8007708 <HAL_RCC_OscConfig+0x1b8>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b40      	cmp	r3, #64	; 0x40
 80076de:	d108      	bne.n	80076f2 <HAL_RCC_OscConfig+0x1a2>
 80076e0:	4b3d      	ldr	r3, [pc, #244]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80076e8:	4a3b      	ldr	r2, [pc, #236]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80076ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076f0:	e07a      	b.n	80077e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f2:	4b39      	ldr	r3, [pc, #228]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	031b      	lsls	r3, r3, #12
 8007700:	4935      	ldr	r1, [pc, #212]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007702:	4313      	orrs	r3, r2
 8007704:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007706:	e06f      	b.n	80077e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007708:	4b33      	ldr	r3, [pc, #204]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	061b      	lsls	r3, r3, #24
 8007716:	4930      	ldr	r1, [pc, #192]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007718:	4313      	orrs	r3, r2
 800771a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800771c:	e064      	b.n	80077e8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d045      	beq.n	80077b2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007726:	4b2c      	ldr	r3, [pc, #176]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f023 0219 	bic.w	r2, r3, #25
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	4929      	ldr	r1, [pc, #164]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007734:	4313      	orrs	r3, r2
 8007736:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007738:	f7fb fa24 	bl	8002b84 <HAL_GetTick>
 800773c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800773e:	e008      	b.n	8007752 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007740:	f7fb fa20 	bl	8002b84 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d901      	bls.n	8007752 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e307      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007752:	4b21      	ldr	r3, [pc, #132]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0304 	and.w	r3, r3, #4
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0f0      	beq.n	8007740 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800775e:	f7fb fa1d 	bl	8002b9c <HAL_GetREVID>
 8007762:	4602      	mov	r2, r0
 8007764:	f241 0303 	movw	r3, #4099	; 0x1003
 8007768:	429a      	cmp	r2, r3
 800776a:	d817      	bhi.n	800779c <HAL_RCC_OscConfig+0x24c>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	2b40      	cmp	r3, #64	; 0x40
 8007772:	d108      	bne.n	8007786 <HAL_RCC_OscConfig+0x236>
 8007774:	4b18      	ldr	r3, [pc, #96]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800777c:	4a16      	ldr	r2, [pc, #88]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 800777e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007782:	6053      	str	r3, [r2, #4]
 8007784:	e030      	b.n	80077e8 <HAL_RCC_OscConfig+0x298>
 8007786:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	031b      	lsls	r3, r3, #12
 8007794:	4910      	ldr	r1, [pc, #64]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 8007796:	4313      	orrs	r3, r2
 8007798:	604b      	str	r3, [r1, #4]
 800779a:	e025      	b.n	80077e8 <HAL_RCC_OscConfig+0x298>
 800779c:	4b0e      	ldr	r3, [pc, #56]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	061b      	lsls	r3, r3, #24
 80077aa:	490b      	ldr	r1, [pc, #44]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	604b      	str	r3, [r1, #4]
 80077b0:	e01a      	b.n	80077e8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077b2:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a08      	ldr	r2, [pc, #32]	; (80077d8 <HAL_RCC_OscConfig+0x288>)
 80077b8:	f023 0301 	bic.w	r3, r3, #1
 80077bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077be:	f7fb f9e1 	bl	8002b84 <HAL_GetTick>
 80077c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077c4:	e00a      	b.n	80077dc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077c6:	f7fb f9dd 	bl	8002b84 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d903      	bls.n	80077dc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e2c4      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
 80077d8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077dc:	4ba4      	ldr	r3, [pc, #656]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1ee      	bne.n	80077c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0310 	and.w	r3, r3, #16
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 80a9 	beq.w	8007948 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077f6:	4b9e      	ldr	r3, [pc, #632]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007800:	4b9b      	ldr	r3, [pc, #620]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007804:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b08      	cmp	r3, #8
 800780a:	d007      	beq.n	800781c <HAL_RCC_OscConfig+0x2cc>
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	2b18      	cmp	r3, #24
 8007810:	d13a      	bne.n	8007888 <HAL_RCC_OscConfig+0x338>
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f003 0303 	and.w	r3, r3, #3
 8007818:	2b01      	cmp	r3, #1
 800781a:	d135      	bne.n	8007888 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800781c:	4b94      	ldr	r3, [pc, #592]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <HAL_RCC_OscConfig+0x2e4>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	2b80      	cmp	r3, #128	; 0x80
 800782e:	d001      	beq.n	8007834 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e296      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007834:	f7fb f9b2 	bl	8002b9c <HAL_GetREVID>
 8007838:	4602      	mov	r2, r0
 800783a:	f241 0303 	movw	r3, #4099	; 0x1003
 800783e:	429a      	cmp	r2, r3
 8007840:	d817      	bhi.n	8007872 <HAL_RCC_OscConfig+0x322>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	2b20      	cmp	r3, #32
 8007848:	d108      	bne.n	800785c <HAL_RCC_OscConfig+0x30c>
 800784a:	4b89      	ldr	r3, [pc, #548]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007852:	4a87      	ldr	r2, [pc, #540]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007858:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800785a:	e075      	b.n	8007948 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800785c:	4b84      	ldr	r3, [pc, #528]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	069b      	lsls	r3, r3, #26
 800786a:	4981      	ldr	r1, [pc, #516]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 800786c:	4313      	orrs	r3, r2
 800786e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007870:	e06a      	b.n	8007948 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007872:	4b7f      	ldr	r3, [pc, #508]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	061b      	lsls	r3, r3, #24
 8007880:	497b      	ldr	r1, [pc, #492]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007882:	4313      	orrs	r3, r2
 8007884:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007886:	e05f      	b.n	8007948 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d042      	beq.n	8007916 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007890:	4b77      	ldr	r3, [pc, #476]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a76      	ldr	r2, [pc, #472]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800789a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789c:	f7fb f972 	bl	8002b84 <HAL_GetTick>
 80078a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078a2:	e008      	b.n	80078b6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80078a4:	f7fb f96e 	bl	8002b84 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e255      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078b6:	4b6e      	ldr	r3, [pc, #440]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0f0      	beq.n	80078a4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078c2:	f7fb f96b 	bl	8002b9c <HAL_GetREVID>
 80078c6:	4602      	mov	r2, r0
 80078c8:	f241 0303 	movw	r3, #4099	; 0x1003
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d817      	bhi.n	8007900 <HAL_RCC_OscConfig+0x3b0>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d108      	bne.n	80078ea <HAL_RCC_OscConfig+0x39a>
 80078d8:	4b65      	ldr	r3, [pc, #404]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80078e0:	4a63      	ldr	r2, [pc, #396]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 80078e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078e6:	6053      	str	r3, [r2, #4]
 80078e8:	e02e      	b.n	8007948 <HAL_RCC_OscConfig+0x3f8>
 80078ea:	4b61      	ldr	r3, [pc, #388]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	069b      	lsls	r3, r3, #26
 80078f8:	495d      	ldr	r1, [pc, #372]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	604b      	str	r3, [r1, #4]
 80078fe:	e023      	b.n	8007948 <HAL_RCC_OscConfig+0x3f8>
 8007900:	4b5b      	ldr	r3, [pc, #364]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	061b      	lsls	r3, r3, #24
 800790e:	4958      	ldr	r1, [pc, #352]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007910:	4313      	orrs	r3, r2
 8007912:	60cb      	str	r3, [r1, #12]
 8007914:	e018      	b.n	8007948 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007916:	4b56      	ldr	r3, [pc, #344]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a55      	ldr	r2, [pc, #340]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 800791c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007922:	f7fb f92f 	bl	8002b84 <HAL_GetTick>
 8007926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007928:	e008      	b.n	800793c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800792a:	f7fb f92b 	bl	8002b84 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d901      	bls.n	800793c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e212      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800793c:	4b4c      	ldr	r3, [pc, #304]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1f0      	bne.n	800792a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	2b00      	cmp	r3, #0
 8007952:	d036      	beq.n	80079c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d019      	beq.n	8007990 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800795c:	4b44      	ldr	r3, [pc, #272]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 800795e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007960:	4a43      	ldr	r2, [pc, #268]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007962:	f043 0301 	orr.w	r3, r3, #1
 8007966:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007968:	f7fb f90c 	bl	8002b84 <HAL_GetTick>
 800796c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800796e:	e008      	b.n	8007982 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007970:	f7fb f908 	bl	8002b84 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	2b02      	cmp	r3, #2
 800797c:	d901      	bls.n	8007982 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e1ef      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007982:	4b3b      	ldr	r3, [pc, #236]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0f0      	beq.n	8007970 <HAL_RCC_OscConfig+0x420>
 800798e:	e018      	b.n	80079c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007990:	4b37      	ldr	r3, [pc, #220]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007994:	4a36      	ldr	r2, [pc, #216]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007996:	f023 0301 	bic.w	r3, r3, #1
 800799a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800799c:	f7fb f8f2 	bl	8002b84 <HAL_GetTick>
 80079a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079a2:	e008      	b.n	80079b6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079a4:	f7fb f8ee 	bl	8002b84 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e1d5      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079b6:	4b2e      	ldr	r3, [pc, #184]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 80079b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1f0      	bne.n	80079a4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d036      	beq.n	8007a3c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d019      	beq.n	8007a0a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80079d6:	4b26      	ldr	r3, [pc, #152]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a25      	ldr	r2, [pc, #148]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 80079dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80079e2:	f7fb f8cf 	bl	8002b84 <HAL_GetTick>
 80079e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80079e8:	e008      	b.n	80079fc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80079ea:	f7fb f8cb 	bl	8002b84 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d901      	bls.n	80079fc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e1b2      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80079fc:	4b1c      	ldr	r3, [pc, #112]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0f0      	beq.n	80079ea <HAL_RCC_OscConfig+0x49a>
 8007a08:	e018      	b.n	8007a3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a0a:	4b19      	ldr	r3, [pc, #100]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a18      	ldr	r2, [pc, #96]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007a10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a16:	f7fb f8b5 	bl	8002b84 <HAL_GetTick>
 8007a1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a1c:	e008      	b.n	8007a30 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007a1e:	f7fb f8b1 	bl	8002b84 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d901      	bls.n	8007a30 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e198      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a30:	4b0f      	ldr	r3, [pc, #60]	; (8007a70 <HAL_RCC_OscConfig+0x520>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1f0      	bne.n	8007a1e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 8085 	beq.w	8007b54 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a4a:	4b0a      	ldr	r3, [pc, #40]	; (8007a74 <HAL_RCC_OscConfig+0x524>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a09      	ldr	r2, [pc, #36]	; (8007a74 <HAL_RCC_OscConfig+0x524>)
 8007a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a56:	f7fb f895 	bl	8002b84 <HAL_GetTick>
 8007a5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a5c:	e00c      	b.n	8007a78 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007a5e:	f7fb f891 	bl	8002b84 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b64      	cmp	r3, #100	; 0x64
 8007a6a:	d905      	bls.n	8007a78 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e178      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
 8007a70:	58024400 	.word	0x58024400
 8007a74:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a78:	4b96      	ldr	r3, [pc, #600]	; (8007cd4 <HAL_RCC_OscConfig+0x784>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0ec      	beq.n	8007a5e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d106      	bne.n	8007a9a <HAL_RCC_OscConfig+0x54a>
 8007a8c:	4b92      	ldr	r3, [pc, #584]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a90:	4a91      	ldr	r2, [pc, #580]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	6713      	str	r3, [r2, #112]	; 0x70
 8007a98:	e02d      	b.n	8007af6 <HAL_RCC_OscConfig+0x5a6>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10c      	bne.n	8007abc <HAL_RCC_OscConfig+0x56c>
 8007aa2:	4b8d      	ldr	r3, [pc, #564]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa6:	4a8c      	ldr	r2, [pc, #560]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007aa8:	f023 0301 	bic.w	r3, r3, #1
 8007aac:	6713      	str	r3, [r2, #112]	; 0x70
 8007aae:	4b8a      	ldr	r3, [pc, #552]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab2:	4a89      	ldr	r2, [pc, #548]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007ab4:	f023 0304 	bic.w	r3, r3, #4
 8007ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8007aba:	e01c      	b.n	8007af6 <HAL_RCC_OscConfig+0x5a6>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	2b05      	cmp	r3, #5
 8007ac2:	d10c      	bne.n	8007ade <HAL_RCC_OscConfig+0x58e>
 8007ac4:	4b84      	ldr	r3, [pc, #528]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac8:	4a83      	ldr	r2, [pc, #524]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007aca:	f043 0304 	orr.w	r3, r3, #4
 8007ace:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad0:	4b81      	ldr	r3, [pc, #516]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad4:	4a80      	ldr	r2, [pc, #512]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007ad6:	f043 0301 	orr.w	r3, r3, #1
 8007ada:	6713      	str	r3, [r2, #112]	; 0x70
 8007adc:	e00b      	b.n	8007af6 <HAL_RCC_OscConfig+0x5a6>
 8007ade:	4b7e      	ldr	r3, [pc, #504]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae2:	4a7d      	ldr	r2, [pc, #500]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007ae4:	f023 0301 	bic.w	r3, r3, #1
 8007ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8007aea:	4b7b      	ldr	r3, [pc, #492]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aee:	4a7a      	ldr	r2, [pc, #488]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007af0:	f023 0304 	bic.w	r3, r3, #4
 8007af4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d015      	beq.n	8007b2a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007afe:	f7fb f841 	bl	8002b84 <HAL_GetTick>
 8007b02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b04:	e00a      	b.n	8007b1c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b06:	f7fb f83d 	bl	8002b84 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d901      	bls.n	8007b1c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e122      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b1c:	4b6e      	ldr	r3, [pc, #440]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0ee      	beq.n	8007b06 <HAL_RCC_OscConfig+0x5b6>
 8007b28:	e014      	b.n	8007b54 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b2a:	f7fb f82b 	bl	8002b84 <HAL_GetTick>
 8007b2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b30:	e00a      	b.n	8007b48 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b32:	f7fb f827 	bl	8002b84 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d901      	bls.n	8007b48 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e10c      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b48:	4b63      	ldr	r3, [pc, #396]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1ee      	bne.n	8007b32 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8101 	beq.w	8007d60 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007b5e:	4b5e      	ldr	r3, [pc, #376]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b66:	2b18      	cmp	r3, #24
 8007b68:	f000 80bc 	beq.w	8007ce4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	f040 8095 	bne.w	8007ca0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b76:	4b58      	ldr	r3, [pc, #352]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a57      	ldr	r2, [pc, #348]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007b7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b82:	f7fa ffff 	bl	8002b84 <HAL_GetTick>
 8007b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b88:	e008      	b.n	8007b9c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b8a:	f7fa fffb 	bl	8002b84 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d901      	bls.n	8007b9c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e0e2      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b9c:	4b4e      	ldr	r3, [pc, #312]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1f0      	bne.n	8007b8a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ba8:	4b4b      	ldr	r3, [pc, #300]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bac:	4b4b      	ldr	r3, [pc, #300]	; (8007cdc <HAL_RCC_OscConfig+0x78c>)
 8007bae:	4013      	ands	r3, r2
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bb8:	0112      	lsls	r2, r2, #4
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	4946      	ldr	r1, [pc, #280]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	628b      	str	r3, [r1, #40]	; 0x28
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	025b      	lsls	r3, r3, #9
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	041b      	lsls	r3, r3, #16
 8007be0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007be4:	431a      	orrs	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bea:	3b01      	subs	r3, #1
 8007bec:	061b      	lsls	r3, r3, #24
 8007bee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bf2:	4939      	ldr	r1, [pc, #228]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007bf8:	4b37      	ldr	r3, [pc, #220]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfc:	4a36      	ldr	r2, [pc, #216]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007bfe:	f023 0301 	bic.w	r3, r3, #1
 8007c02:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c04:	4b34      	ldr	r3, [pc, #208]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c08:	4b35      	ldr	r3, [pc, #212]	; (8007ce0 <HAL_RCC_OscConfig+0x790>)
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007c10:	00d2      	lsls	r2, r2, #3
 8007c12:	4931      	ldr	r1, [pc, #196]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007c18:	4b2f      	ldr	r3, [pc, #188]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1c:	f023 020c 	bic.w	r2, r3, #12
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	492c      	ldr	r1, [pc, #176]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007c2a:	4b2b      	ldr	r3, [pc, #172]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	f023 0202 	bic.w	r2, r3, #2
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c36:	4928      	ldr	r1, [pc, #160]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c3c:	4b26      	ldr	r3, [pc, #152]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	4a25      	ldr	r2, [pc, #148]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c48:	4b23      	ldr	r3, [pc, #140]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	4a22      	ldr	r2, [pc, #136]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007c54:	4b20      	ldr	r3, [pc, #128]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	4a1f      	ldr	r2, [pc, #124]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007c60:	4b1d      	ldr	r3, [pc, #116]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	4a1c      	ldr	r2, [pc, #112]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c66:	f043 0301 	orr.w	r3, r3, #1
 8007c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c6c:	4b1a      	ldr	r3, [pc, #104]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a19      	ldr	r2, [pc, #100]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c78:	f7fa ff84 	bl	8002b84 <HAL_GetTick>
 8007c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c7e:	e008      	b.n	8007c92 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c80:	f7fa ff80 	bl	8002b84 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e067      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c92:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0f0      	beq.n	8007c80 <HAL_RCC_OscConfig+0x730>
 8007c9e:	e05f      	b.n	8007d60 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ca0:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a0c      	ldr	r2, [pc, #48]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cac:	f7fa ff6a 	bl	8002b84 <HAL_GetTick>
 8007cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cb2:	e008      	b.n	8007cc6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cb4:	f7fa ff66 	bl	8002b84 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e04d      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cc6:	4b04      	ldr	r3, [pc, #16]	; (8007cd8 <HAL_RCC_OscConfig+0x788>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1f0      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x764>
 8007cd2:	e045      	b.n	8007d60 <HAL_RCC_OscConfig+0x810>
 8007cd4:	58024800 	.word	0x58024800
 8007cd8:	58024400 	.word	0x58024400
 8007cdc:	fffffc0c 	.word	0xfffffc0c
 8007ce0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007ce4:	4b21      	ldr	r3, [pc, #132]	; (8007d6c <HAL_RCC_OscConfig+0x81c>)
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007cea:	4b20      	ldr	r3, [pc, #128]	; (8007d6c <HAL_RCC_OscConfig+0x81c>)
 8007cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d031      	beq.n	8007d5c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f003 0203 	and.w	r2, r3, #3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d12a      	bne.n	8007d5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	091b      	lsrs	r3, r3, #4
 8007d0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d122      	bne.n	8007d5c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d20:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d11a      	bne.n	8007d5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	0a5b      	lsrs	r3, r3, #9
 8007d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d32:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d111      	bne.n	8007d5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	0c1b      	lsrs	r3, r3, #16
 8007d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d108      	bne.n	8007d5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	0e1b      	lsrs	r3, r3, #24
 8007d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d56:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d001      	beq.n	8007d60 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e000      	b.n	8007d62 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3730      	adds	r7, #48	; 0x30
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	58024400 	.word	0x58024400

08007d70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e19c      	b.n	80080be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d84:	4b8a      	ldr	r3, [pc, #552]	; (8007fb0 <HAL_RCC_ClockConfig+0x240>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 030f 	and.w	r3, r3, #15
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d910      	bls.n	8007db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d92:	4b87      	ldr	r3, [pc, #540]	; (8007fb0 <HAL_RCC_ClockConfig+0x240>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f023 020f 	bic.w	r2, r3, #15
 8007d9a:	4985      	ldr	r1, [pc, #532]	; (8007fb0 <HAL_RCC_ClockConfig+0x240>)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007da2:	4b83      	ldr	r3, [pc, #524]	; (8007fb0 <HAL_RCC_ClockConfig+0x240>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 030f 	and.w	r3, r3, #15
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d001      	beq.n	8007db4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e184      	b.n	80080be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d010      	beq.n	8007de2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	691a      	ldr	r2, [r3, #16]
 8007dc4:	4b7b      	ldr	r3, [pc, #492]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d908      	bls.n	8007de2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007dd0:	4b78      	ldr	r3, [pc, #480]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	4975      	ldr	r1, [pc, #468]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0308 	and.w	r3, r3, #8
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d010      	beq.n	8007e10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695a      	ldr	r2, [r3, #20]
 8007df2:	4b70      	ldr	r3, [pc, #448]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d908      	bls.n	8007e10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007dfe:	4b6d      	ldr	r3, [pc, #436]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	496a      	ldr	r1, [pc, #424]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0310 	and.w	r3, r3, #16
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d010      	beq.n	8007e3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	699a      	ldr	r2, [r3, #24]
 8007e20:	4b64      	ldr	r3, [pc, #400]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d908      	bls.n	8007e3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e2c:	4b61      	ldr	r3, [pc, #388]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	495e      	ldr	r1, [pc, #376]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d010      	beq.n	8007e6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69da      	ldr	r2, [r3, #28]
 8007e4e:	4b59      	ldr	r3, [pc, #356]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d908      	bls.n	8007e6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007e5a:	4b56      	ldr	r3, [pc, #344]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	4953      	ldr	r1, [pc, #332]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d010      	beq.n	8007e9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	4b4d      	ldr	r3, [pc, #308]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	f003 030f 	and.w	r3, r3, #15
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d908      	bls.n	8007e9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e88:	4b4a      	ldr	r3, [pc, #296]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	f023 020f 	bic.w	r2, r3, #15
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	4947      	ldr	r1, [pc, #284]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d055      	beq.n	8007f52 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007ea6:	4b43      	ldr	r3, [pc, #268]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	4940      	ldr	r1, [pc, #256]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d107      	bne.n	8007ed0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ec0:	4b3c      	ldr	r3, [pc, #240]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d121      	bne.n	8007f10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e0f6      	b.n	80080be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	2b03      	cmp	r3, #3
 8007ed6:	d107      	bne.n	8007ee8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ed8:	4b36      	ldr	r3, [pc, #216]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d115      	bne.n	8007f10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e0ea      	b.n	80080be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d107      	bne.n	8007f00 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ef0:	4b30      	ldr	r3, [pc, #192]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d109      	bne.n	8007f10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e0de      	b.n	80080be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f00:	4b2c      	ldr	r3, [pc, #176]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0304 	and.w	r3, r3, #4
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e0d6      	b.n	80080be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f10:	4b28      	ldr	r3, [pc, #160]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f023 0207 	bic.w	r2, r3, #7
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	4925      	ldr	r1, [pc, #148]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f22:	f7fa fe2f 	bl	8002b84 <HAL_GetTick>
 8007f26:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f28:	e00a      	b.n	8007f40 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f2a:	f7fa fe2b 	bl	8002b84 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d901      	bls.n	8007f40 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e0be      	b.n	80080be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f40:	4b1c      	ldr	r3, [pc, #112]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d1eb      	bne.n	8007f2a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d010      	beq.n	8007f80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	4b14      	ldr	r3, [pc, #80]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	f003 030f 	and.w	r3, r3, #15
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d208      	bcs.n	8007f80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f6e:	4b11      	ldr	r3, [pc, #68]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	f023 020f 	bic.w	r2, r3, #15
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	490e      	ldr	r1, [pc, #56]	; (8007fb4 <HAL_RCC_ClockConfig+0x244>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f80:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <HAL_RCC_ClockConfig+0x240>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 030f 	and.w	r3, r3, #15
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d214      	bcs.n	8007fb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f8e:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <HAL_RCC_ClockConfig+0x240>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f023 020f 	bic.w	r2, r3, #15
 8007f96:	4906      	ldr	r1, [pc, #24]	; (8007fb0 <HAL_RCC_ClockConfig+0x240>)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f9e:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <HAL_RCC_ClockConfig+0x240>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 030f 	and.w	r3, r3, #15
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d005      	beq.n	8007fb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e086      	b.n	80080be <HAL_RCC_ClockConfig+0x34e>
 8007fb0:	52002000 	.word	0x52002000
 8007fb4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0304 	and.w	r3, r3, #4
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d010      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691a      	ldr	r2, [r3, #16]
 8007fc8:	4b3f      	ldr	r3, [pc, #252]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d208      	bcs.n	8007fe6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007fd4:	4b3c      	ldr	r3, [pc, #240]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	4939      	ldr	r1, [pc, #228]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d010      	beq.n	8008014 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	695a      	ldr	r2, [r3, #20]
 8007ff6:	4b34      	ldr	r3, [pc, #208]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d208      	bcs.n	8008014 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008002:	4b31      	ldr	r3, [pc, #196]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	492e      	ldr	r1, [pc, #184]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 8008010:	4313      	orrs	r3, r2
 8008012:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0310 	and.w	r3, r3, #16
 800801c:	2b00      	cmp	r3, #0
 800801e:	d010      	beq.n	8008042 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	699a      	ldr	r2, [r3, #24]
 8008024:	4b28      	ldr	r3, [pc, #160]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800802c:	429a      	cmp	r2, r3
 800802e:	d208      	bcs.n	8008042 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008030:	4b25      	ldr	r3, [pc, #148]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	4922      	ldr	r1, [pc, #136]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 800803e:	4313      	orrs	r3, r2
 8008040:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b00      	cmp	r3, #0
 800804c:	d010      	beq.n	8008070 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	69da      	ldr	r2, [r3, #28]
 8008052:	4b1d      	ldr	r3, [pc, #116]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800805a:	429a      	cmp	r2, r3
 800805c:	d208      	bcs.n	8008070 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800805e:	4b1a      	ldr	r3, [pc, #104]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	4917      	ldr	r1, [pc, #92]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 800806c:	4313      	orrs	r3, r2
 800806e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008070:	f000 f834 	bl	80080dc <HAL_RCC_GetSysClockFreq>
 8008074:	4601      	mov	r1, r0
 8008076:	4b14      	ldr	r3, [pc, #80]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	0a1b      	lsrs	r3, r3, #8
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	4a12      	ldr	r2, [pc, #72]	; (80080cc <HAL_RCC_ClockConfig+0x35c>)
 8008082:	5cd3      	ldrb	r3, [r2, r3]
 8008084:	f003 031f 	and.w	r3, r3, #31
 8008088:	fa21 f303 	lsr.w	r3, r1, r3
 800808c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800808e:	4b0e      	ldr	r3, [pc, #56]	; (80080c8 <HAL_RCC_ClockConfig+0x358>)
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	f003 030f 	and.w	r3, r3, #15
 8008096:	4a0d      	ldr	r2, [pc, #52]	; (80080cc <HAL_RCC_ClockConfig+0x35c>)
 8008098:	5cd3      	ldrb	r3, [r2, r3]
 800809a:	f003 031f 	and.w	r3, r3, #31
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	fa22 f303 	lsr.w	r3, r2, r3
 80080a4:	4a0a      	ldr	r2, [pc, #40]	; (80080d0 <HAL_RCC_ClockConfig+0x360>)
 80080a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80080a8:	4a0a      	ldr	r2, [pc, #40]	; (80080d4 <HAL_RCC_ClockConfig+0x364>)
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80080ae:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <HAL_RCC_ClockConfig+0x368>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7f9 fdee 	bl	8001c94 <HAL_InitTick>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	58024400 	.word	0x58024400
 80080cc:	08022960 	.word	0x08022960
 80080d0:	20000004 	.word	0x20000004
 80080d4:	20000000 	.word	0x20000000
 80080d8:	20000008 	.word	0x20000008

080080dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080dc:	b480      	push	{r7}
 80080de:	b089      	sub	sp, #36	; 0x24
 80080e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080e2:	4baf      	ldr	r3, [pc, #700]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080ea:	2b18      	cmp	r3, #24
 80080ec:	f200 814e 	bhi.w	800838c <HAL_RCC_GetSysClockFreq+0x2b0>
 80080f0:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80080f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f6:	bf00      	nop
 80080f8:	0800815d 	.word	0x0800815d
 80080fc:	0800838d 	.word	0x0800838d
 8008100:	0800838d 	.word	0x0800838d
 8008104:	0800838d 	.word	0x0800838d
 8008108:	0800838d 	.word	0x0800838d
 800810c:	0800838d 	.word	0x0800838d
 8008110:	0800838d 	.word	0x0800838d
 8008114:	0800838d 	.word	0x0800838d
 8008118:	08008183 	.word	0x08008183
 800811c:	0800838d 	.word	0x0800838d
 8008120:	0800838d 	.word	0x0800838d
 8008124:	0800838d 	.word	0x0800838d
 8008128:	0800838d 	.word	0x0800838d
 800812c:	0800838d 	.word	0x0800838d
 8008130:	0800838d 	.word	0x0800838d
 8008134:	0800838d 	.word	0x0800838d
 8008138:	08008189 	.word	0x08008189
 800813c:	0800838d 	.word	0x0800838d
 8008140:	0800838d 	.word	0x0800838d
 8008144:	0800838d 	.word	0x0800838d
 8008148:	0800838d 	.word	0x0800838d
 800814c:	0800838d 	.word	0x0800838d
 8008150:	0800838d 	.word	0x0800838d
 8008154:	0800838d 	.word	0x0800838d
 8008158:	0800818f 	.word	0x0800818f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800815c:	4b90      	ldr	r3, [pc, #576]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b00      	cmp	r3, #0
 8008166:	d009      	beq.n	800817c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008168:	4b8d      	ldr	r3, [pc, #564]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	08db      	lsrs	r3, r3, #3
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	4a8c      	ldr	r2, [pc, #560]	; (80083a4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008174:	fa22 f303 	lsr.w	r3, r2, r3
 8008178:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800817a:	e10a      	b.n	8008392 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800817c:	4b89      	ldr	r3, [pc, #548]	; (80083a4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800817e:	61bb      	str	r3, [r7, #24]
    break;
 8008180:	e107      	b.n	8008392 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008182:	4b89      	ldr	r3, [pc, #548]	; (80083a8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008184:	61bb      	str	r3, [r7, #24]
    break;
 8008186:	e104      	b.n	8008392 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008188:	4b88      	ldr	r3, [pc, #544]	; (80083ac <HAL_RCC_GetSysClockFreq+0x2d0>)
 800818a:	61bb      	str	r3, [r7, #24]
    break;
 800818c:	e101      	b.n	8008392 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800818e:	4b84      	ldr	r3, [pc, #528]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008198:	4b81      	ldr	r3, [pc, #516]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800819a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819c:	091b      	lsrs	r3, r3, #4
 800819e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80081a4:	4b7e      	ldr	r3, [pc, #504]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80081ae:	4b7c      	ldr	r3, [pc, #496]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80081b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b2:	08db      	lsrs	r3, r3, #3
 80081b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	fb02 f303 	mul.w	r3, r2, r3
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 80da 	beq.w	8008386 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d05a      	beq.n	800828e <HAL_RCC_GetSysClockFreq+0x1b2>
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d302      	bcc.n	80081e2 <HAL_RCC_GetSysClockFreq+0x106>
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d078      	beq.n	80082d2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80081e0:	e099      	b.n	8008316 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081e2:	4b6f      	ldr	r3, [pc, #444]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d02d      	beq.n	800824a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081ee:	4b6c      	ldr	r3, [pc, #432]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	08db      	lsrs	r3, r3, #3
 80081f4:	f003 0303 	and.w	r3, r3, #3
 80081f8:	4a6a      	ldr	r2, [pc, #424]	; (80083a4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80081fa:	fa22 f303 	lsr.w	r3, r2, r3
 80081fe:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	ee07 3a90 	vmov	s15, r3
 8008206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	ee07 3a90 	vmov	s15, r3
 8008210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008218:	4b61      	ldr	r3, [pc, #388]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800821a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008220:	ee07 3a90 	vmov	s15, r3
 8008224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008228:	ed97 6a02 	vldr	s12, [r7, #8]
 800822c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80083b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800823c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008244:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008248:	e087      	b.n	800835a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	ee07 3a90 	vmov	s15, r3
 8008250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008254:	eddf 6a57 	vldr	s13, [pc, #348]	; 80083b4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8008258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825c:	4b50      	ldr	r3, [pc, #320]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800825e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008264:	ee07 3a90 	vmov	s15, r3
 8008268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008270:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80083b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008288:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800828c:	e065      	b.n	800835a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	ee07 3a90 	vmov	s15, r3
 8008294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008298:	eddf 6a47 	vldr	s13, [pc, #284]	; 80083b8 <HAL_RCC_GetSysClockFreq+0x2dc>
 800829c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a0:	4b3f      	ldr	r3, [pc, #252]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80082a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a8:	ee07 3a90 	vmov	s15, r3
 80082ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80082b4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80083b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80082b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082d0:	e043      	b.n	800835a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	ee07 3a90 	vmov	s15, r3
 80082d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082dc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80083bc <HAL_RCC_GetSysClockFreq+0x2e0>
 80082e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e4:	4b2e      	ldr	r3, [pc, #184]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80082e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ec:	ee07 3a90 	vmov	s15, r3
 80082f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80082f8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80083b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80082fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008310:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008314:	e021      	b.n	800835a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	ee07 3a90 	vmov	s15, r3
 800831c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008320:	eddf 6a25 	vldr	s13, [pc, #148]	; 80083b8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008328:	4b1d      	ldr	r3, [pc, #116]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800832a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008330:	ee07 3a90 	vmov	s15, r3
 8008334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008338:	ed97 6a02 	vldr	s12, [r7, #8]
 800833c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80083b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008340:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008344:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008348:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800834c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008354:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008358:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800835a:	4b11      	ldr	r3, [pc, #68]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	0a5b      	lsrs	r3, r3, #9
 8008360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008364:	3301      	adds	r3, #1
 8008366:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008372:	edd7 6a07 	vldr	s13, [r7, #28]
 8008376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800837a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800837e:	ee17 3a90 	vmov	r3, s15
 8008382:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008384:	e005      	b.n	8008392 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	61bb      	str	r3, [r7, #24]
    break;
 800838a:	e002      	b.n	8008392 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800838c:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800838e:	61bb      	str	r3, [r7, #24]
    break;
 8008390:	bf00      	nop
  }

  return sysclockfreq;
 8008392:	69bb      	ldr	r3, [r7, #24]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3724      	adds	r7, #36	; 0x24
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	58024400 	.word	0x58024400
 80083a4:	03d09000 	.word	0x03d09000
 80083a8:	003d0900 	.word	0x003d0900
 80083ac:	017d7840 	.word	0x017d7840
 80083b0:	46000000 	.word	0x46000000
 80083b4:	4c742400 	.word	0x4c742400
 80083b8:	4a742400 	.word	0x4a742400
 80083bc:	4bbebc20 	.word	0x4bbebc20

080083c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80083c6:	f7ff fe89 	bl	80080dc <HAL_RCC_GetSysClockFreq>
 80083ca:	4601      	mov	r1, r0
 80083cc:	4b10      	ldr	r3, [pc, #64]	; (8008410 <HAL_RCC_GetHCLKFreq+0x50>)
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	0a1b      	lsrs	r3, r3, #8
 80083d2:	f003 030f 	and.w	r3, r3, #15
 80083d6:	4a0f      	ldr	r2, [pc, #60]	; (8008414 <HAL_RCC_GetHCLKFreq+0x54>)
 80083d8:	5cd3      	ldrb	r3, [r2, r3]
 80083da:	f003 031f 	and.w	r3, r3, #31
 80083de:	fa21 f303 	lsr.w	r3, r1, r3
 80083e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80083e4:	4b0a      	ldr	r3, [pc, #40]	; (8008410 <HAL_RCC_GetHCLKFreq+0x50>)
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	f003 030f 	and.w	r3, r3, #15
 80083ec:	4a09      	ldr	r2, [pc, #36]	; (8008414 <HAL_RCC_GetHCLKFreq+0x54>)
 80083ee:	5cd3      	ldrb	r3, [r2, r3]
 80083f0:	f003 031f 	and.w	r3, r3, #31
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	fa22 f303 	lsr.w	r3, r2, r3
 80083fa:	4a07      	ldr	r2, [pc, #28]	; (8008418 <HAL_RCC_GetHCLKFreq+0x58>)
 80083fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80083fe:	4a07      	ldr	r2, [pc, #28]	; (800841c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008404:	4b04      	ldr	r3, [pc, #16]	; (8008418 <HAL_RCC_GetHCLKFreq+0x58>)
 8008406:	681b      	ldr	r3, [r3, #0]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	58024400 	.word	0x58024400
 8008414:	08022960 	.word	0x08022960
 8008418:	20000004 	.word	0x20000004
 800841c:	20000000 	.word	0x20000000

08008420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008424:	f7ff ffcc 	bl	80083c0 <HAL_RCC_GetHCLKFreq>
 8008428:	4601      	mov	r1, r0
 800842a:	4b06      	ldr	r3, [pc, #24]	; (8008444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	091b      	lsrs	r3, r3, #4
 8008430:	f003 0307 	and.w	r3, r3, #7
 8008434:	4a04      	ldr	r2, [pc, #16]	; (8008448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008436:	5cd3      	ldrb	r3, [r2, r3]
 8008438:	f003 031f 	and.w	r3, r3, #31
 800843c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008440:	4618      	mov	r0, r3
 8008442:	bd80      	pop	{r7, pc}
 8008444:	58024400 	.word	0x58024400
 8008448:	08022960 	.word	0x08022960

0800844c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008450:	f7ff ffb6 	bl	80083c0 <HAL_RCC_GetHCLKFreq>
 8008454:	4601      	mov	r1, r0
 8008456:	4b06      	ldr	r3, [pc, #24]	; (8008470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	0a1b      	lsrs	r3, r3, #8
 800845c:	f003 0307 	and.w	r3, r3, #7
 8008460:	4a04      	ldr	r2, [pc, #16]	; (8008474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008462:	5cd3      	ldrb	r3, [r2, r3]
 8008464:	f003 031f 	and.w	r3, r3, #31
 8008468:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800846c:	4618      	mov	r0, r3
 800846e:	bd80      	pop	{r7, pc}
 8008470:	58024400 	.word	0x58024400
 8008474:	08022960 	.word	0x08022960

08008478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	223f      	movs	r2, #63	; 0x3f
 8008486:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008488:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <HAL_RCC_GetClockConfig+0x7c>)
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	f003 0207 	and.w	r2, r3, #7
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008494:	4b17      	ldr	r3, [pc, #92]	; (80084f4 <HAL_RCC_GetClockConfig+0x7c>)
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80084a0:	4b14      	ldr	r3, [pc, #80]	; (80084f4 <HAL_RCC_GetClockConfig+0x7c>)
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	f003 020f 	and.w	r2, r3, #15
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80084ac:	4b11      	ldr	r3, [pc, #68]	; (80084f4 <HAL_RCC_GetClockConfig+0x7c>)
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80084b8:	4b0e      	ldr	r3, [pc, #56]	; (80084f4 <HAL_RCC_GetClockConfig+0x7c>)
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80084c4:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <HAL_RCC_GetClockConfig+0x7c>)
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80084d0:	4b08      	ldr	r3, [pc, #32]	; (80084f4 <HAL_RCC_GetClockConfig+0x7c>)
 80084d2:	6a1b      	ldr	r3, [r3, #32]
 80084d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80084dc:	4b06      	ldr	r3, [pc, #24]	; (80084f8 <HAL_RCC_GetClockConfig+0x80>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 020f 	and.w	r2, r3, #15
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	601a      	str	r2, [r3, #0]
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	58024400 	.word	0x58024400
 80084f8:	52002000 	.word	0x52002000

080084fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008504:	2300      	movs	r3, #0
 8008506:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008508:	2300      	movs	r3, #0
 800850a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d03d      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800851c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008520:	d013      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008526:	d802      	bhi.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008528:	2b00      	cmp	r3, #0
 800852a:	d007      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800852c:	e01f      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800852e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008532:	d013      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008534:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008538:	d01c      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800853a:	e018      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800853c:	4baf      	ldr	r3, [pc, #700]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	4aae      	ldr	r2, [pc, #696]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008548:	e015      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3304      	adds	r3, #4
 800854e:	2102      	movs	r1, #2
 8008550:	4618      	mov	r0, r3
 8008552:	f001 f96f 	bl	8009834 <RCCEx_PLL2_Config>
 8008556:	4603      	mov	r3, r0
 8008558:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800855a:	e00c      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3324      	adds	r3, #36	; 0x24
 8008560:	2102      	movs	r1, #2
 8008562:	4618      	mov	r0, r3
 8008564:	f001 fa18 	bl	8009998 <RCCEx_PLL3_Config>
 8008568:	4603      	mov	r3, r0
 800856a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800856c:	e003      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	75fb      	strb	r3, [r7, #23]
      break;
 8008572:	e000      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8008574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008576:	7dfb      	ldrb	r3, [r7, #23]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d109      	bne.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800857c:	4b9f      	ldr	r3, [pc, #636]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800857e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008588:	499c      	ldr	r1, [pc, #624]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800858a:	4313      	orrs	r3, r2
 800858c:	650b      	str	r3, [r1, #80]	; 0x50
 800858e:	e001      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008590:	7dfb      	ldrb	r3, [r7, #23]
 8008592:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800859c:	2b00      	cmp	r3, #0
 800859e:	d03d      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a4:	2b04      	cmp	r3, #4
 80085a6:	d826      	bhi.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80085a8:	a201      	add	r2, pc, #4	; (adr r2, 80085b0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80085aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ae:	bf00      	nop
 80085b0:	080085c5 	.word	0x080085c5
 80085b4:	080085d3 	.word	0x080085d3
 80085b8:	080085e5 	.word	0x080085e5
 80085bc:	080085fd 	.word	0x080085fd
 80085c0:	080085fd 	.word	0x080085fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085c4:	4b8d      	ldr	r3, [pc, #564]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	4a8c      	ldr	r2, [pc, #560]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80085ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085d0:	e015      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	3304      	adds	r3, #4
 80085d6:	2100      	movs	r1, #0
 80085d8:	4618      	mov	r0, r3
 80085da:	f001 f92b 	bl	8009834 <RCCEx_PLL2_Config>
 80085de:	4603      	mov	r3, r0
 80085e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085e2:	e00c      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	3324      	adds	r3, #36	; 0x24
 80085e8:	2100      	movs	r1, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 f9d4 	bl	8009998 <RCCEx_PLL3_Config>
 80085f0:	4603      	mov	r3, r0
 80085f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085f4:	e003      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	75fb      	strb	r3, [r7, #23]
      break;
 80085fa:	e000      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80085fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d109      	bne.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008604:	4b7d      	ldr	r3, [pc, #500]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008608:	f023 0207 	bic.w	r2, r3, #7
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008610:	497a      	ldr	r1, [pc, #488]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008612:	4313      	orrs	r3, r2
 8008614:	650b      	str	r3, [r1, #80]	; 0x50
 8008616:	e001      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008618:	7dfb      	ldrb	r3, [r7, #23]
 800861a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008624:	2b00      	cmp	r3, #0
 8008626:	d03e      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800862c:	2b80      	cmp	r3, #128	; 0x80
 800862e:	d01c      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008630:	2b80      	cmp	r3, #128	; 0x80
 8008632:	d804      	bhi.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008634:	2b00      	cmp	r3, #0
 8008636:	d008      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008638:	2b40      	cmp	r3, #64	; 0x40
 800863a:	d00d      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800863c:	e01e      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800863e:	2bc0      	cmp	r3, #192	; 0xc0
 8008640:	d01f      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008646:	d01e      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008648:	e018      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800864a:	4b6c      	ldr	r3, [pc, #432]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	4a6b      	ldr	r2, [pc, #428]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008654:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008656:	e017      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3304      	adds	r3, #4
 800865c:	2100      	movs	r1, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f001 f8e8 	bl	8009834 <RCCEx_PLL2_Config>
 8008664:	4603      	mov	r3, r0
 8008666:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008668:	e00e      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	3324      	adds	r3, #36	; 0x24
 800866e:	2100      	movs	r1, #0
 8008670:	4618      	mov	r0, r3
 8008672:	f001 f991 	bl	8009998 <RCCEx_PLL3_Config>
 8008676:	4603      	mov	r3, r0
 8008678:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800867a:	e005      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	75fb      	strb	r3, [r7, #23]
      break;
 8008680:	e002      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008682:	bf00      	nop
 8008684:	e000      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008688:	7dfb      	ldrb	r3, [r7, #23]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d109      	bne.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800868e:	4b5b      	ldr	r3, [pc, #364]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008692:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869a:	4958      	ldr	r1, [pc, #352]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800869c:	4313      	orrs	r3, r2
 800869e:	650b      	str	r3, [r1, #80]	; 0x50
 80086a0:	e001      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d044      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80086b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086bc:	d01f      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x202>
 80086be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086c2:	d805      	bhi.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00a      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086cc:	d00e      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80086ce:	e01f      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80086d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80086d4:	d01f      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80086d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086da:	d01e      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80086dc:	e018      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086de:	4b47      	ldr	r3, [pc, #284]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80086e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e2:	4a46      	ldr	r2, [pc, #280]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80086e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086ea:	e017      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3304      	adds	r3, #4
 80086f0:	2100      	movs	r1, #0
 80086f2:	4618      	mov	r0, r3
 80086f4:	f001 f89e 	bl	8009834 <RCCEx_PLL2_Config>
 80086f8:	4603      	mov	r3, r0
 80086fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80086fc:	e00e      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3324      	adds	r3, #36	; 0x24
 8008702:	2100      	movs	r1, #0
 8008704:	4618      	mov	r0, r3
 8008706:	f001 f947 	bl	8009998 <RCCEx_PLL3_Config>
 800870a:	4603      	mov	r3, r0
 800870c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800870e:	e005      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	75fb      	strb	r3, [r7, #23]
      break;
 8008714:	e002      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008716:	bf00      	nop
 8008718:	e000      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800871a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008722:	4b36      	ldr	r3, [pc, #216]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008726:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008730:	4932      	ldr	r1, [pc, #200]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008732:	4313      	orrs	r3, r2
 8008734:	658b      	str	r3, [r1, #88]	; 0x58
 8008736:	e001      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008744:	2b00      	cmp	r3, #0
 8008746:	d044      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800874e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008752:	d01f      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008758:	d805      	bhi.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800875e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008762:	d00e      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008764:	e01f      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8008766:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800876a:	d01f      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800876c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008770:	d01e      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008772:	e018      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008774:	4b21      	ldr	r3, [pc, #132]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008778:	4a20      	ldr	r2, [pc, #128]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800877a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800877e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008780:	e017      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3304      	adds	r3, #4
 8008786:	2100      	movs	r1, #0
 8008788:	4618      	mov	r0, r3
 800878a:	f001 f853 	bl	8009834 <RCCEx_PLL2_Config>
 800878e:	4603      	mov	r3, r0
 8008790:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008792:	e00e      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3324      	adds	r3, #36	; 0x24
 8008798:	2100      	movs	r1, #0
 800879a:	4618      	mov	r0, r3
 800879c:	f001 f8fc 	bl	8009998 <RCCEx_PLL3_Config>
 80087a0:	4603      	mov	r3, r0
 80087a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087a4:	e005      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	75fb      	strb	r3, [r7, #23]
      break;
 80087aa:	e002      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80087ac:	bf00      	nop
 80087ae:	e000      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80087b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80087b8:	4b10      	ldr	r3, [pc, #64]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80087c6:	490d      	ldr	r1, [pc, #52]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	658b      	str	r3, [r1, #88]	; 0x58
 80087cc:	e001      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ce:	7dfb      	ldrb	r3, [r7, #23]
 80087d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d035      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087e2:	2b10      	cmp	r3, #16
 80087e4:	d00c      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80087e6:	2b10      	cmp	r3, #16
 80087e8:	d802      	bhi.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d01b      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80087ee:	e017      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80087f0:	2b20      	cmp	r3, #32
 80087f2:	d00c      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x312>
 80087f4:	2b30      	cmp	r3, #48	; 0x30
 80087f6:	d018      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80087f8:	e012      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80087fa:	bf00      	nop
 80087fc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008800:	4baf      	ldr	r3, [pc, #700]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008804:	4aae      	ldr	r2, [pc, #696]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800880a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800880c:	e00e      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	3304      	adds	r3, #4
 8008812:	2102      	movs	r1, #2
 8008814:	4618      	mov	r0, r3
 8008816:	f001 f80d 	bl	8009834 <RCCEx_PLL2_Config>
 800881a:	4603      	mov	r3, r0
 800881c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800881e:	e005      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	75fb      	strb	r3, [r7, #23]
      break;
 8008824:	e002      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008826:	bf00      	nop
 8008828:	e000      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800882a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d109      	bne.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008832:	4ba3      	ldr	r3, [pc, #652]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008836:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800883e:	49a0      	ldr	r1, [pc, #640]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008840:	4313      	orrs	r3, r2
 8008842:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008844:	e001      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d042      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800885e:	d01f      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008864:	d805      	bhi.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800886a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800886e:	d00e      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008870:	e01f      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008872:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008876:	d01f      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800887c:	d01e      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800887e:	e018      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008880:	4b8f      	ldr	r3, [pc, #572]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	4a8e      	ldr	r2, [pc, #568]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800888a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800888c:	e017      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3304      	adds	r3, #4
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f000 ffcd 	bl	8009834 <RCCEx_PLL2_Config>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800889e:	e00e      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3324      	adds	r3, #36	; 0x24
 80088a4:	2100      	movs	r1, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f001 f876 	bl	8009998 <RCCEx_PLL3_Config>
 80088ac:	4603      	mov	r3, r0
 80088ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088b0:	e005      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	75fb      	strb	r3, [r7, #23]
      break;
 80088b6:	e002      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80088b8:	bf00      	nop
 80088ba:	e000      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80088bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d109      	bne.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80088c4:	4b7e      	ldr	r3, [pc, #504]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80088c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d0:	497b      	ldr	r1, [pc, #492]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80088d2:	4313      	orrs	r3, r2
 80088d4:	650b      	str	r3, [r1, #80]	; 0x50
 80088d6:	e001      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d8:	7dfb      	ldrb	r3, [r7, #23]
 80088da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d042      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088f0:	d01b      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80088f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088f6:	d805      	bhi.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d022      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80088fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008900:	d00a      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008902:	e01b      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008904:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008908:	d01d      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800890a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800890e:	d01c      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008910:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008914:	d01b      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008916:	e011      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3304      	adds	r3, #4
 800891c:	2101      	movs	r1, #1
 800891e:	4618      	mov	r0, r3
 8008920:	f000 ff88 	bl	8009834 <RCCEx_PLL2_Config>
 8008924:	4603      	mov	r3, r0
 8008926:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008928:	e012      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3324      	adds	r3, #36	; 0x24
 800892e:	2101      	movs	r1, #1
 8008930:	4618      	mov	r0, r3
 8008932:	f001 f831 	bl	8009998 <RCCEx_PLL3_Config>
 8008936:	4603      	mov	r3, r0
 8008938:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800893a:	e009      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	75fb      	strb	r3, [r7, #23]
      break;
 8008940:	e006      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008942:	bf00      	nop
 8008944:	e004      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008946:	bf00      	nop
 8008948:	e002      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800894a:	bf00      	nop
 800894c:	e000      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800894e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d109      	bne.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008956:	4b5a      	ldr	r3, [pc, #360]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800895a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008962:	4957      	ldr	r1, [pc, #348]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008964:	4313      	orrs	r3, r2
 8008966:	650b      	str	r3, [r1, #80]	; 0x50
 8008968:	e001      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800896a:	7dfb      	ldrb	r3, [r7, #23]
 800896c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d044      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008984:	d01b      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800898a:	d805      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800898c:	2b00      	cmp	r3, #0
 800898e:	d022      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008994:	d00a      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008996:	e01b      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8008998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800899c:	d01d      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800899e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089a2:	d01c      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80089a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089a8:	d01b      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80089aa:	e011      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3304      	adds	r3, #4
 80089b0:	2101      	movs	r1, #1
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 ff3e 	bl	8009834 <RCCEx_PLL2_Config>
 80089b8:	4603      	mov	r3, r0
 80089ba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80089bc:	e012      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	3324      	adds	r3, #36	; 0x24
 80089c2:	2101      	movs	r1, #1
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 ffe7 	bl	8009998 <RCCEx_PLL3_Config>
 80089ca:	4603      	mov	r3, r0
 80089cc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80089ce:	e009      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	75fb      	strb	r3, [r7, #23]
      break;
 80089d4:	e006      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80089d6:	bf00      	nop
 80089d8:	e004      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80089da:	bf00      	nop
 80089dc:	e002      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80089de:	bf00      	nop
 80089e0:	e000      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80089e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10a      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80089ea:	4b35      	ldr	r3, [pc, #212]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80089ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089f8:	4931      	ldr	r1, [pc, #196]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	658b      	str	r3, [r1, #88]	; 0x58
 80089fe:	e001      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a00:	7dfb      	ldrb	r3, [r7, #23]
 8008a02:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d02d      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a18:	d005      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a1e:	d009      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d013      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008a24:	e00f      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a26:	4b26      	ldr	r3, [pc, #152]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2a:	4a25      	ldr	r2, [pc, #148]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a32:	e00c      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3304      	adds	r3, #4
 8008a38:	2101      	movs	r1, #1
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 fefa 	bl	8009834 <RCCEx_PLL2_Config>
 8008a40:	4603      	mov	r3, r0
 8008a42:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a44:	e003      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	75fb      	strb	r3, [r7, #23]
      break;
 8008a4a:	e000      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8008a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d109      	bne.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a54:	4b1a      	ldr	r3, [pc, #104]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a60:	4917      	ldr	r1, [pc, #92]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	650b      	str	r3, [r1, #80]	; 0x50
 8008a66:	e001      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
 8008a6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d035      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d81b      	bhi.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008a80:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a86:	bf00      	nop
 8008a88:	08008ac5 	.word	0x08008ac5
 8008a8c:	08008a99 	.word	0x08008a99
 8008a90:	08008aa7 	.word	0x08008aa7
 8008a94:	08008ac5 	.word	0x08008ac5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a98:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9c:	4a08      	ldr	r2, [pc, #32]	; (8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008aa4:	e00f      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	2102      	movs	r1, #2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 fec1 	bl	8009834 <RCCEx_PLL2_Config>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ab6:	e006      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	75fb      	strb	r3, [r7, #23]
      break;
 8008abc:	e003      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8008abe:	bf00      	nop
 8008ac0:	58024400 	.word	0x58024400
      break;
 8008ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ac6:	7dfb      	ldrb	r3, [r7, #23]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d109      	bne.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008acc:	4bba      	ldr	r3, [pc, #744]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad0:	f023 0203 	bic.w	r2, r3, #3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad8:	49b7      	ldr	r1, [pc, #732]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ade:	e001      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 8086 	beq.w	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008af2:	4bb2      	ldr	r3, [pc, #712]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4ab1      	ldr	r2, [pc, #708]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008afc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008afe:	f7fa f841 	bl	8002b84 <HAL_GetTick>
 8008b02:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b04:	e009      	b.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b06:	f7fa f83d 	bl	8002b84 <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	2b64      	cmp	r3, #100	; 0x64
 8008b12:	d902      	bls.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	75fb      	strb	r3, [r7, #23]
        break;
 8008b18:	e005      	b.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b1a:	4ba8      	ldr	r3, [pc, #672]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0ef      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d166      	bne.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008b2c:	4ba2      	ldr	r3, [pc, #648]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b36:	4053      	eors	r3, r2
 8008b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d013      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b40:	4b9d      	ldr	r3, [pc, #628]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b48:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b4a:	4b9b      	ldr	r3, [pc, #620]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4e:	4a9a      	ldr	r2, [pc, #616]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b54:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b56:	4b98      	ldr	r3, [pc, #608]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5a:	4a97      	ldr	r2, [pc, #604]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b60:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008b62:	4a95      	ldr	r2, [pc, #596]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b72:	d115      	bne.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b74:	f7fa f806 	bl	8002b84 <HAL_GetTick>
 8008b78:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b7a:	e00b      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b7c:	f7fa f802 	bl	8002b84 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d902      	bls.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	75fb      	strb	r3, [r7, #23]
            break;
 8008b92:	e005      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b94:	4b88      	ldr	r3, [pc, #544]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0ed      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d126      	bne.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bb4:	d10d      	bne.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008bb6:	4b80      	ldr	r3, [pc, #512]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bc4:	0919      	lsrs	r1, r3, #4
 8008bc6:	4b7e      	ldr	r3, [pc, #504]	; (8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008bc8:	400b      	ands	r3, r1
 8008bca:	497b      	ldr	r1, [pc, #492]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	610b      	str	r3, [r1, #16]
 8008bd0:	e005      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008bd2:	4b79      	ldr	r3, [pc, #484]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	4a78      	ldr	r2, [pc, #480]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008bd8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008bdc:	6113      	str	r3, [r2, #16]
 8008bde:	4b76      	ldr	r3, [pc, #472]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008be0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bec:	4972      	ldr	r1, [pc, #456]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	670b      	str	r3, [r1, #112]	; 0x70
 8008bf2:	e004      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	75bb      	strb	r3, [r7, #22]
 8008bf8:	e001      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d07d      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c0e:	2b28      	cmp	r3, #40	; 0x28
 8008c10:	d866      	bhi.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008c12:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c18:	08008ce7 	.word	0x08008ce7
 8008c1c:	08008ce1 	.word	0x08008ce1
 8008c20:	08008ce1 	.word	0x08008ce1
 8008c24:	08008ce1 	.word	0x08008ce1
 8008c28:	08008ce1 	.word	0x08008ce1
 8008c2c:	08008ce1 	.word	0x08008ce1
 8008c30:	08008ce1 	.word	0x08008ce1
 8008c34:	08008ce1 	.word	0x08008ce1
 8008c38:	08008cbd 	.word	0x08008cbd
 8008c3c:	08008ce1 	.word	0x08008ce1
 8008c40:	08008ce1 	.word	0x08008ce1
 8008c44:	08008ce1 	.word	0x08008ce1
 8008c48:	08008ce1 	.word	0x08008ce1
 8008c4c:	08008ce1 	.word	0x08008ce1
 8008c50:	08008ce1 	.word	0x08008ce1
 8008c54:	08008ce1 	.word	0x08008ce1
 8008c58:	08008ccf 	.word	0x08008ccf
 8008c5c:	08008ce1 	.word	0x08008ce1
 8008c60:	08008ce1 	.word	0x08008ce1
 8008c64:	08008ce1 	.word	0x08008ce1
 8008c68:	08008ce1 	.word	0x08008ce1
 8008c6c:	08008ce1 	.word	0x08008ce1
 8008c70:	08008ce1 	.word	0x08008ce1
 8008c74:	08008ce1 	.word	0x08008ce1
 8008c78:	08008ce7 	.word	0x08008ce7
 8008c7c:	08008ce1 	.word	0x08008ce1
 8008c80:	08008ce1 	.word	0x08008ce1
 8008c84:	08008ce1 	.word	0x08008ce1
 8008c88:	08008ce1 	.word	0x08008ce1
 8008c8c:	08008ce1 	.word	0x08008ce1
 8008c90:	08008ce1 	.word	0x08008ce1
 8008c94:	08008ce1 	.word	0x08008ce1
 8008c98:	08008ce7 	.word	0x08008ce7
 8008c9c:	08008ce1 	.word	0x08008ce1
 8008ca0:	08008ce1 	.word	0x08008ce1
 8008ca4:	08008ce1 	.word	0x08008ce1
 8008ca8:	08008ce1 	.word	0x08008ce1
 8008cac:	08008ce1 	.word	0x08008ce1
 8008cb0:	08008ce1 	.word	0x08008ce1
 8008cb4:	08008ce1 	.word	0x08008ce1
 8008cb8:	08008ce7 	.word	0x08008ce7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fdb6 	bl	8009834 <RCCEx_PLL2_Config>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ccc:	e00c      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	3324      	adds	r3, #36	; 0x24
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 fe5f 	bl	8009998 <RCCEx_PLL3_Config>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008cde:	e003      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ce4:	e000      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8008ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d109      	bne.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008cee:	4b32      	ldr	r3, [pc, #200]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cfa:	492f      	ldr	r1, [pc, #188]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	654b      	str	r3, [r1, #84]	; 0x54
 8008d00:	e001      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d02:	7dfb      	ldrb	r3, [r7, #23]
 8008d04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0302 	and.w	r3, r3, #2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d037      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d16:	2b05      	cmp	r3, #5
 8008d18:	d820      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008d1a:	a201      	add	r2, pc, #4	; (adr r2, 8008d20 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d20:	08008d63 	.word	0x08008d63
 8008d24:	08008d39 	.word	0x08008d39
 8008d28:	08008d4b 	.word	0x08008d4b
 8008d2c:	08008d63 	.word	0x08008d63
 8008d30:	08008d63 	.word	0x08008d63
 8008d34:	08008d63 	.word	0x08008d63
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fd78 	bl	8009834 <RCCEx_PLL2_Config>
 8008d44:	4603      	mov	r3, r0
 8008d46:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008d48:	e00c      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3324      	adds	r3, #36	; 0x24
 8008d4e:	2101      	movs	r1, #1
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 fe21 	bl	8009998 <RCCEx_PLL3_Config>
 8008d56:	4603      	mov	r3, r0
 8008d58:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008d5a:	e003      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d60:	e000      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8008d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d109      	bne.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008d6a:	4b13      	ldr	r3, [pc, #76]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d6e:	f023 0207 	bic.w	r2, r3, #7
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d76:	4910      	ldr	r1, [pc, #64]	; (8008db8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	654b      	str	r3, [r1, #84]	; 0x54
 8008d7c:	e001      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
 8008d80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0304 	and.w	r3, r3, #4
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d040      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d94:	2b05      	cmp	r3, #5
 8008d96:	d827      	bhi.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008d98:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8008d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9e:	bf00      	nop
 8008da0:	08008def 	.word	0x08008def
 8008da4:	08008dc5 	.word	0x08008dc5
 8008da8:	08008dd7 	.word	0x08008dd7
 8008dac:	08008def 	.word	0x08008def
 8008db0:	08008def 	.word	0x08008def
 8008db4:	08008def 	.word	0x08008def
 8008db8:	58024400 	.word	0x58024400
 8008dbc:	58024800 	.word	0x58024800
 8008dc0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	2101      	movs	r1, #1
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 fd32 	bl	8009834 <RCCEx_PLL2_Config>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008dd4:	e00c      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3324      	adds	r3, #36	; 0x24
 8008dda:	2101      	movs	r1, #1
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fddb 	bl	8009998 <RCCEx_PLL3_Config>
 8008de2:	4603      	mov	r3, r0
 8008de4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008de6:	e003      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	75fb      	strb	r3, [r7, #23]
      break;
 8008dec:	e000      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8008dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008df0:	7dfb      	ldrb	r3, [r7, #23]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10a      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008df6:	4bb2      	ldr	r3, [pc, #712]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfa:	f023 0207 	bic.w	r2, r3, #7
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e04:	49ae      	ldr	r1, [pc, #696]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	658b      	str	r3, [r1, #88]	; 0x58
 8008e0a:	e001      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0320 	and.w	r3, r3, #32
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d044      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e26:	d01b      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e2c:	d805      	bhi.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d022      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e36:	d00a      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008e38:	e01b      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3e:	d01d      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e44:	d01c      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8008e46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e4a:	d01b      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008e4c:	e011      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3304      	adds	r3, #4
 8008e52:	2100      	movs	r1, #0
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fced 	bl	8009834 <RCCEx_PLL2_Config>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008e5e:	e012      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3324      	adds	r3, #36	; 0x24
 8008e64:	2102      	movs	r1, #2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 fd96 	bl	8009998 <RCCEx_PLL3_Config>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008e70:	e009      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	75fb      	strb	r3, [r7, #23]
      break;
 8008e76:	e006      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008e78:	bf00      	nop
 8008e7a:	e004      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008e7c:	bf00      	nop
 8008e7e:	e002      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008e80:	bf00      	nop
 8008e82:	e000      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10a      	bne.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e8c:	4b8c      	ldr	r3, [pc, #560]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e90:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e9a:	4989      	ldr	r1, [pc, #548]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	654b      	str	r3, [r1, #84]	; 0x54
 8008ea0:	e001      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d044      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ebc:	d01b      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8008ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ec2:	d805      	bhi.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d022      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ecc:	d00a      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8008ece:	e01b      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ed4:	d01d      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008ed6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008eda:	d01c      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8008edc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ee0:	d01b      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8008ee2:	e011      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	2100      	movs	r1, #0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fca2 	bl	8009834 <RCCEx_PLL2_Config>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008ef4:	e012      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3324      	adds	r3, #36	; 0x24
 8008efa:	2102      	movs	r1, #2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 fd4b 	bl	8009998 <RCCEx_PLL3_Config>
 8008f02:	4603      	mov	r3, r0
 8008f04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008f06:	e009      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f0c:	e006      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008f0e:	bf00      	nop
 8008f10:	e004      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008f12:	bf00      	nop
 8008f14:	e002      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10a      	bne.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008f22:	4b67      	ldr	r3, [pc, #412]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f26:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f30:	4963      	ldr	r1, [pc, #396]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	658b      	str	r3, [r1, #88]	; 0x58
 8008f36:	e001      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
 8008f3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d044      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f52:	d01b      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8008f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f58:	d805      	bhi.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d022      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f62:	d00a      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008f64:	e01b      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8008f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f6a:	d01d      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008f6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008f70:	d01c      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008f72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008f76:	d01b      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008f78:	e011      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	2100      	movs	r1, #0
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fc57 	bl	8009834 <RCCEx_PLL2_Config>
 8008f86:	4603      	mov	r3, r0
 8008f88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008f8a:	e012      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3324      	adds	r3, #36	; 0x24
 8008f90:	2102      	movs	r1, #2
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 fd00 	bl	8009998 <RCCEx_PLL3_Config>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008f9c:	e009      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fa2:	e006      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008fa4:	bf00      	nop
 8008fa6:	e004      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008fa8:	bf00      	nop
 8008faa:	e002      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008fac:	bf00      	nop
 8008fae:	e000      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fb2:	7dfb      	ldrb	r3, [r7, #23]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008fb8:	4b41      	ldr	r3, [pc, #260]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fc6:	493e      	ldr	r1, [pc, #248]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	658b      	str	r3, [r1, #88]	; 0x58
 8008fcc:	e001      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
 8008fd0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0308 	and.w	r3, r3, #8
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d01a      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe8:	d10a      	bne.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3324      	adds	r3, #36	; 0x24
 8008fee:	2102      	movs	r1, #2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 fcd1 	bl	8009998 <RCCEx_PLL3_Config>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009000:	4b2f      	ldr	r3, [pc, #188]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009004:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800900e:	492c      	ldr	r1, [pc, #176]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009010:	4313      	orrs	r3, r2
 8009012:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0310 	and.w	r3, r3, #16
 800901c:	2b00      	cmp	r3, #0
 800901e:	d01a      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800902a:	d10a      	bne.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3324      	adds	r3, #36	; 0x24
 8009030:	2102      	movs	r1, #2
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fcb0 	bl	8009998 <RCCEx_PLL3_Config>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009042:	4b1f      	ldr	r3, [pc, #124]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009046:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009050:	491b      	ldr	r1, [pc, #108]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009052:	4313      	orrs	r3, r2
 8009054:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d032      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800906c:	d00d      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800906e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009072:	d016      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8009074:	2b00      	cmp	r3, #0
 8009076:	d111      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3304      	adds	r3, #4
 800907c:	2100      	movs	r1, #0
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fbd8 	bl	8009834 <RCCEx_PLL2_Config>
 8009084:	4603      	mov	r3, r0
 8009086:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009088:	e00c      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	3324      	adds	r3, #36	; 0x24
 800908e:	2102      	movs	r1, #2
 8009090:	4618      	mov	r0, r3
 8009092:	f000 fc81 	bl	8009998 <RCCEx_PLL3_Config>
 8009096:	4603      	mov	r3, r0
 8009098:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800909a:	e003      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	75fb      	strb	r3, [r7, #23]
      break;
 80090a0:	e000      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80090a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090a4:	7dfb      	ldrb	r3, [r7, #23]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10c      	bne.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090aa:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80090ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090b8:	4901      	ldr	r1, [pc, #4]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	658b      	str	r3, [r1, #88]	; 0x58
 80090be:	e003      	b.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80090c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
 80090c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d02f      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090de:	d00c      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80090e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090e4:	d015      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80090e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090ea:	d10f      	bne.n	800910c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ec:	4b79      	ldr	r3, [pc, #484]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	4a78      	ldr	r2, [pc, #480]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80090f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80090f8:	e00c      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3324      	adds	r3, #36	; 0x24
 80090fe:	2101      	movs	r1, #1
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fc49 	bl	8009998 <RCCEx_PLL3_Config>
 8009106:	4603      	mov	r3, r0
 8009108:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800910a:	e003      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	75fb      	strb	r3, [r7, #23]
      break;
 8009110:	e000      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10a      	bne.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800911a:	4b6e      	ldr	r3, [pc, #440]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800911c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009128:	496a      	ldr	r1, [pc, #424]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800912a:	4313      	orrs	r3, r2
 800912c:	654b      	str	r3, [r1, #84]	; 0x54
 800912e:	e001      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009130:	7dfb      	ldrb	r3, [r7, #23]
 8009132:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d029      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d003      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8009148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800914c:	d007      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800914e:	e00f      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009150:	4b60      	ldr	r3, [pc, #384]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	4a5f      	ldr	r2, [pc, #380]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800915a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800915c:	e00b      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	3304      	adds	r3, #4
 8009162:	2102      	movs	r1, #2
 8009164:	4618      	mov	r0, r3
 8009166:	f000 fb65 	bl	8009834 <RCCEx_PLL2_Config>
 800916a:	4603      	mov	r3, r0
 800916c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800916e:	e002      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	75fb      	strb	r3, [r7, #23]
      break;
 8009174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d109      	bne.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800917c:	4b55      	ldr	r3, [pc, #340]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800917e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009180:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009188:	4952      	ldr	r1, [pc, #328]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800918a:	4313      	orrs	r3, r2
 800918c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800918e:	e001      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009190:	7dfb      	ldrb	r3, [r7, #23]
 8009192:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00a      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3324      	adds	r3, #36	; 0x24
 80091a4:	2102      	movs	r1, #2
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fbf6 	bl	8009998 <RCCEx_PLL3_Config>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d02f      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ca:	d00c      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80091cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091d0:	d802      	bhi.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d011      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80091d6:	e00d      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80091d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091dc:	d00f      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80091de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091e2:	d00e      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80091e4:	e006      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091e6:	4b3b      	ldr	r3, [pc, #236]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80091e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ea:	4a3a      	ldr	r2, [pc, #232]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80091ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80091f2:	e007      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	75fb      	strb	r3, [r7, #23]
      break;
 80091f8:	e004      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80091fa:	bf00      	nop
 80091fc:	e002      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80091fe:	bf00      	nop
 8009200:	e000      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009204:	7dfb      	ldrb	r3, [r7, #23]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d109      	bne.n	800921e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800920a:	4b32      	ldr	r3, [pc, #200]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800920c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800920e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009216:	492f      	ldr	r1, [pc, #188]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009218:	4313      	orrs	r3, r2
 800921a:	654b      	str	r3, [r1, #84]	; 0x54
 800921c:	e001      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d008      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800922e:	4b29      	ldr	r3, [pc, #164]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009232:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923a:	4926      	ldr	r1, [pc, #152]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800923c:	4313      	orrs	r3, r2
 800923e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d009      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800924c:	4b21      	ldr	r3, [pc, #132]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800925a:	491e      	ldr	r1, [pc, #120]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800925c:	4313      	orrs	r3, r2
 800925e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d008      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800926c:	4b19      	ldr	r3, [pc, #100]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800926e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009270:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009278:	4916      	ldr	r1, [pc, #88]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800927a:	4313      	orrs	r3, r2
 800927c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00d      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800928a:	4b12      	ldr	r3, [pc, #72]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	4a11      	ldr	r2, [pc, #68]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009290:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009294:	6113      	str	r3, [r2, #16]
 8009296:	4b0f      	ldr	r3, [pc, #60]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009298:	691a      	ldr	r2, [r3, #16]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80092a0:	490c      	ldr	r1, [pc, #48]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	da08      	bge.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80092ae:	4b09      	ldr	r3, [pc, #36]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80092b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ba:	4906      	ldr	r1, [pc, #24]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80092bc:	4313      	orrs	r3, r2
 80092be:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80092c0:	7dbb      	ldrb	r3, [r7, #22]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	e000      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	58024400 	.word	0x58024400

080092d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80092dc:	f7ff f870 	bl	80083c0 <HAL_RCC_GetHCLKFreq>
 80092e0:	4601      	mov	r1, r0
 80092e2:	4b06      	ldr	r3, [pc, #24]	; (80092fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	091b      	lsrs	r3, r3, #4
 80092e8:	f003 0307 	and.w	r3, r3, #7
 80092ec:	4a04      	ldr	r2, [pc, #16]	; (8009300 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80092ee:	5cd3      	ldrb	r3, [r2, r3]
 80092f0:	f003 031f 	and.w	r3, r3, #31
 80092f4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	58024400 	.word	0x58024400
 8009300:	08022960 	.word	0x08022960

08009304 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009304:	b480      	push	{r7}
 8009306:	b089      	sub	sp, #36	; 0x24
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800930c:	4b9d      	ldr	r3, [pc, #628]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800930e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009310:	f003 0303 	and.w	r3, r3, #3
 8009314:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009316:	4b9b      	ldr	r3, [pc, #620]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931a:	0b1b      	lsrs	r3, r3, #12
 800931c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009320:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009322:	4b98      	ldr	r3, [pc, #608]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009326:	091b      	lsrs	r3, r3, #4
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800932e:	4b95      	ldr	r3, [pc, #596]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009332:	08db      	lsrs	r3, r3, #3
 8009334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	fb02 f303 	mul.w	r3, r2, r3
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009346:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 810a 	beq.w	8009566 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d05a      	beq.n	800940e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8009358:	2b01      	cmp	r3, #1
 800935a:	d302      	bcc.n	8009362 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800935c:	2b02      	cmp	r3, #2
 800935e:	d078      	beq.n	8009452 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009360:	e099      	b.n	8009496 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009362:	4b88      	ldr	r3, [pc, #544]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0320 	and.w	r3, r3, #32
 800936a:	2b00      	cmp	r3, #0
 800936c:	d02d      	beq.n	80093ca <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800936e:	4b85      	ldr	r3, [pc, #532]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	08db      	lsrs	r3, r3, #3
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	4a83      	ldr	r2, [pc, #524]	; (8009588 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800937a:	fa22 f303 	lsr.w	r3, r2, r3
 800937e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	ee07 3a90 	vmov	s15, r3
 8009386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	ee07 3a90 	vmov	s15, r3
 8009390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009398:	4b7a      	ldr	r3, [pc, #488]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800939a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ac:	eddf 5a77 	vldr	s11, [pc, #476]	; 800958c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80093b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80093c8:	e087      	b.n	80094da <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	ee07 3a90 	vmov	s15, r3
 80093d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80093d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093dc:	4b69      	ldr	r3, [pc, #420]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80093de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e4:	ee07 3a90 	vmov	s15, r3
 80093e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800958c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80093f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009408:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800940c:	e065      	b.n	80094da <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	ee07 3a90 	vmov	s15, r3
 8009414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009418:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800941c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009420:	4b58      	ldr	r3, [pc, #352]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009428:	ee07 3a90 	vmov	s15, r3
 800942c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009430:	ed97 6a03 	vldr	s12, [r7, #12]
 8009434:	eddf 5a55 	vldr	s11, [pc, #340]	; 800958c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009450:	e043      	b.n	80094da <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	ee07 3a90 	vmov	s15, r3
 8009458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009598 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009464:	4b47      	ldr	r3, [pc, #284]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800946c:	ee07 3a90 	vmov	s15, r3
 8009470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009474:	ed97 6a03 	vldr	s12, [r7, #12]
 8009478:	eddf 5a44 	vldr	s11, [pc, #272]	; 800958c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800947c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800948c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009490:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009494:	e021      	b.n	80094da <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	ee07 3a90 	vmov	s15, r3
 800949c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80094a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a8:	4b36      	ldr	r3, [pc, #216]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80094aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b0:	ee07 3a90 	vmov	s15, r3
 80094b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80094bc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800958c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80094c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094d8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80094da:	4b2a      	ldr	r3, [pc, #168]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80094dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094de:	0a5b      	lsrs	r3, r3, #9
 80094e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094e4:	ee07 3a90 	vmov	s15, r3
 80094e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80094f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009500:	ee17 2a90 	vmov	r2, s15
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009508:	4b1e      	ldr	r3, [pc, #120]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	0c1b      	lsrs	r3, r3, #16
 800950e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009512:	ee07 3a90 	vmov	s15, r3
 8009516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800951e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009522:	edd7 6a07 	vldr	s13, [r7, #28]
 8009526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800952a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800952e:	ee17 2a90 	vmov	r2, s15
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009536:	4b13      	ldr	r3, [pc, #76]	; (8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	0e1b      	lsrs	r3, r3, #24
 800953c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009540:	ee07 3a90 	vmov	s15, r3
 8009544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800954c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009550:	edd7 6a07 	vldr	s13, [r7, #28]
 8009554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800955c:	ee17 2a90 	vmov	r2, s15
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009564:	e008      	b.n	8009578 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	609a      	str	r2, [r3, #8]
}
 8009578:	bf00      	nop
 800957a:	3724      	adds	r7, #36	; 0x24
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	58024400 	.word	0x58024400
 8009588:	03d09000 	.word	0x03d09000
 800958c:	46000000 	.word	0x46000000
 8009590:	4c742400 	.word	0x4c742400
 8009594:	4a742400 	.word	0x4a742400
 8009598:	4bbebc20 	.word	0x4bbebc20

0800959c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800959c:	b480      	push	{r7}
 800959e:	b089      	sub	sp, #36	; 0x24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095a4:	4b9d      	ldr	r3, [pc, #628]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a8:	f003 0303 	and.w	r3, r3, #3
 80095ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80095ae:	4b9b      	ldr	r3, [pc, #620]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b2:	0d1b      	lsrs	r3, r3, #20
 80095b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80095ba:	4b98      	ldr	r3, [pc, #608]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095be:	0a1b      	lsrs	r3, r3, #8
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80095c6:	4b95      	ldr	r3, [pc, #596]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ca:	08db      	lsrs	r3, r3, #3
 80095cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	fb02 f303 	mul.w	r3, r2, r3
 80095d6:	ee07 3a90 	vmov	s15, r3
 80095da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 810a 	beq.w	80097fe <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d05a      	beq.n	80096a6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d302      	bcc.n	80095fa <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d078      	beq.n	80096ea <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80095f8:	e099      	b.n	800972e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095fa:	4b88      	ldr	r3, [pc, #544]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0320 	and.w	r3, r3, #32
 8009602:	2b00      	cmp	r3, #0
 8009604:	d02d      	beq.n	8009662 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009606:	4b85      	ldr	r3, [pc, #532]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	08db      	lsrs	r3, r3, #3
 800960c:	f003 0303 	and.w	r3, r3, #3
 8009610:	4a83      	ldr	r2, [pc, #524]	; (8009820 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009612:	fa22 f303 	lsr.w	r3, r2, r3
 8009616:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	ee07 3a90 	vmov	s15, r3
 800961e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	ee07 3a90 	vmov	s15, r3
 8009628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009630:	4b7a      	ldr	r3, [pc, #488]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009638:	ee07 3a90 	vmov	s15, r3
 800963c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009640:	ed97 6a03 	vldr	s12, [r7, #12]
 8009644:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800964c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800965c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009660:	e087      	b.n	8009772 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	ee07 3a90 	vmov	s15, r3
 8009668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800966c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009828 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009674:	4b69      	ldr	r3, [pc, #420]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800967c:	ee07 3a90 	vmov	s15, r3
 8009680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009684:	ed97 6a03 	vldr	s12, [r7, #12]
 8009688:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800968c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800969c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096a4:	e065      	b.n	8009772 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	ee07 3a90 	vmov	s15, r3
 80096ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800982c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80096b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b8:	4b58      	ldr	r3, [pc, #352]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80096ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c0:	ee07 3a90 	vmov	s15, r3
 80096c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80096cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80096d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096e8:	e043      	b.n	8009772 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	ee07 3a90 	vmov	s15, r3
 80096f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009830 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80096f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096fc:	4b47      	ldr	r3, [pc, #284]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009704:	ee07 3a90 	vmov	s15, r3
 8009708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800970c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009710:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009714:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009718:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800971c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009728:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800972c:	e021      	b.n	8009772 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	ee07 3a90 	vmov	s15, r3
 8009734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009738:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800982c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800973c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009740:	4b36      	ldr	r3, [pc, #216]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009748:	ee07 3a90 	vmov	s15, r3
 800974c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009750:	ed97 6a03 	vldr	s12, [r7, #12]
 8009754:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800975c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800976c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009770:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009772:	4b2a      	ldr	r3, [pc, #168]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009776:	0a5b      	lsrs	r3, r3, #9
 8009778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800977c:	ee07 3a90 	vmov	s15, r3
 8009780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009788:	ee37 7a87 	vadd.f32	s14, s15, s14
 800978c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009798:	ee17 2a90 	vmov	r2, s15
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80097a0:	4b1e      	ldr	r3, [pc, #120]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80097a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a4:	0c1b      	lsrs	r3, r3, #16
 80097a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097aa:	ee07 3a90 	vmov	s15, r3
 80097ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80097be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097c6:	ee17 2a90 	vmov	r2, s15
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80097ce:	4b13      	ldr	r3, [pc, #76]	; (800981c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80097d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d2:	0e1b      	lsrs	r3, r3, #24
 80097d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097d8:	ee07 3a90 	vmov	s15, r3
 80097dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80097ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097f4:	ee17 2a90 	vmov	r2, s15
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80097fc:	e008      	b.n	8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	609a      	str	r2, [r3, #8]
}
 8009810:	bf00      	nop
 8009812:	3724      	adds	r7, #36	; 0x24
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	58024400 	.word	0x58024400
 8009820:	03d09000 	.word	0x03d09000
 8009824:	46000000 	.word	0x46000000
 8009828:	4c742400 	.word	0x4c742400
 800982c:	4a742400 	.word	0x4a742400
 8009830:	4bbebc20 	.word	0x4bbebc20

08009834 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009842:	4b53      	ldr	r3, [pc, #332]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 8009844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009846:	f003 0303 	and.w	r3, r3, #3
 800984a:	2b03      	cmp	r3, #3
 800984c:	d101      	bne.n	8009852 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e099      	b.n	8009986 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009852:	4b4f      	ldr	r3, [pc, #316]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a4e      	ldr	r2, [pc, #312]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 8009858:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800985c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800985e:	f7f9 f991 	bl	8002b84 <HAL_GetTick>
 8009862:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009864:	e008      	b.n	8009878 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009866:	f7f9 f98d 	bl	8002b84 <HAL_GetTick>
 800986a:	4602      	mov	r2, r0
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	2b02      	cmp	r3, #2
 8009872:	d901      	bls.n	8009878 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009874:	2303      	movs	r3, #3
 8009876:	e086      	b.n	8009986 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009878:	4b45      	ldr	r3, [pc, #276]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1f0      	bne.n	8009866 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009884:	4b42      	ldr	r3, [pc, #264]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 8009886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009888:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	031b      	lsls	r3, r3, #12
 8009892:	493f      	ldr	r1, [pc, #252]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 8009894:	4313      	orrs	r3, r2
 8009896:	628b      	str	r3, [r1, #40]	; 0x28
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	3b01      	subs	r3, #1
 800989e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	3b01      	subs	r3, #1
 80098a8:	025b      	lsls	r3, r3, #9
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	431a      	orrs	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	041b      	lsls	r3, r3, #16
 80098b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80098ba:	431a      	orrs	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	3b01      	subs	r3, #1
 80098c2:	061b      	lsls	r3, r3, #24
 80098c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80098c8:	4931      	ldr	r1, [pc, #196]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098ce:	4b30      	ldr	r3, [pc, #192]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 80098d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	492d      	ldr	r1, [pc, #180]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098e0:	4b2b      	ldr	r3, [pc, #172]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 80098e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e4:	f023 0220 	bic.w	r2, r3, #32
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	4928      	ldr	r1, [pc, #160]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098f2:	4b27      	ldr	r3, [pc, #156]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 80098f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f6:	4a26      	ldr	r2, [pc, #152]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 80098f8:	f023 0310 	bic.w	r3, r3, #16
 80098fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098fe:	4b24      	ldr	r3, [pc, #144]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 8009900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009902:	4b24      	ldr	r3, [pc, #144]	; (8009994 <RCCEx_PLL2_Config+0x160>)
 8009904:	4013      	ands	r3, r2
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	69d2      	ldr	r2, [r2, #28]
 800990a:	00d2      	lsls	r2, r2, #3
 800990c:	4920      	ldr	r1, [pc, #128]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 800990e:	4313      	orrs	r3, r2
 8009910:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009912:	4b1f      	ldr	r3, [pc, #124]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 8009914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009916:	4a1e      	ldr	r2, [pc, #120]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 8009918:	f043 0310 	orr.w	r3, r3, #16
 800991c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d106      	bne.n	8009932 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009924:	4b1a      	ldr	r3, [pc, #104]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 8009926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009928:	4a19      	ldr	r2, [pc, #100]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 800992a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800992e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009930:	e00f      	b.n	8009952 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d106      	bne.n	8009946 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009938:	4b15      	ldr	r3, [pc, #84]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 800993a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993c:	4a14      	ldr	r2, [pc, #80]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 800993e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009942:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009944:	e005      	b.n	8009952 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009946:	4b12      	ldr	r3, [pc, #72]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 8009948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994a:	4a11      	ldr	r2, [pc, #68]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 800994c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009950:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009952:	4b0f      	ldr	r3, [pc, #60]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a0e      	ldr	r2, [pc, #56]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 8009958:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800995c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800995e:	f7f9 f911 	bl	8002b84 <HAL_GetTick>
 8009962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009964:	e008      	b.n	8009978 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009966:	f7f9 f90d 	bl	8002b84 <HAL_GetTick>
 800996a:	4602      	mov	r2, r0
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	2b02      	cmp	r3, #2
 8009972:	d901      	bls.n	8009978 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009974:	2303      	movs	r3, #3
 8009976:	e006      	b.n	8009986 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009978:	4b05      	ldr	r3, [pc, #20]	; (8009990 <RCCEx_PLL2_Config+0x15c>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0f0      	beq.n	8009966 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009984:	7bfb      	ldrb	r3, [r7, #15]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	58024400 	.word	0x58024400
 8009994:	ffff0007 	.word	0xffff0007

08009998 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099a6:	4b53      	ldr	r3, [pc, #332]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 80099a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099aa:	f003 0303 	and.w	r3, r3, #3
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d101      	bne.n	80099b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e099      	b.n	8009aea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099b6:	4b4f      	ldr	r3, [pc, #316]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a4e      	ldr	r2, [pc, #312]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 80099bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099c2:	f7f9 f8df 	bl	8002b84 <HAL_GetTick>
 80099c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099c8:	e008      	b.n	80099dc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80099ca:	f7f9 f8db 	bl	8002b84 <HAL_GetTick>
 80099ce:	4602      	mov	r2, r0
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d901      	bls.n	80099dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099d8:	2303      	movs	r3, #3
 80099da:	e086      	b.n	8009aea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099dc:	4b45      	ldr	r3, [pc, #276]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1f0      	bne.n	80099ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099e8:	4b42      	ldr	r3, [pc, #264]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 80099ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	051b      	lsls	r3, r3, #20
 80099f6:	493f      	ldr	r1, [pc, #252]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 80099f8:	4313      	orrs	r3, r2
 80099fa:	628b      	str	r3, [r1, #40]	; 0x28
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	025b      	lsls	r3, r3, #9
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	431a      	orrs	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	041b      	lsls	r3, r3, #16
 8009a1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a1e:	431a      	orrs	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	061b      	lsls	r3, r3, #24
 8009a28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a2c:	4931      	ldr	r1, [pc, #196]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a32:	4b30      	ldr	r3, [pc, #192]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	492d      	ldr	r1, [pc, #180]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a40:	4313      	orrs	r3, r2
 8009a42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a44:	4b2b      	ldr	r3, [pc, #172]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	4928      	ldr	r1, [pc, #160]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a52:	4313      	orrs	r3, r2
 8009a54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a56:	4b27      	ldr	r3, [pc, #156]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5a:	4a26      	ldr	r2, [pc, #152]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a62:	4b24      	ldr	r3, [pc, #144]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a66:	4b24      	ldr	r3, [pc, #144]	; (8009af8 <RCCEx_PLL3_Config+0x160>)
 8009a68:	4013      	ands	r3, r2
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	69d2      	ldr	r2, [r2, #28]
 8009a6e:	00d2      	lsls	r2, r2, #3
 8009a70:	4920      	ldr	r1, [pc, #128]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a72:	4313      	orrs	r3, r2
 8009a74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a76:	4b1f      	ldr	r3, [pc, #124]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7a:	4a1e      	ldr	r2, [pc, #120]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d106      	bne.n	8009a96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a88:	4b1a      	ldr	r3, [pc, #104]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	4a19      	ldr	r2, [pc, #100]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009a92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a94:	e00f      	b.n	8009ab6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d106      	bne.n	8009aaa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a9c:	4b15      	ldr	r3, [pc, #84]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	4a14      	ldr	r2, [pc, #80]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009aa2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009aa8:	e005      	b.n	8009ab6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009aaa:	4b12      	ldr	r3, [pc, #72]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aae:	4a11      	ldr	r2, [pc, #68]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009ab0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ab6:	4b0f      	ldr	r3, [pc, #60]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a0e      	ldr	r2, [pc, #56]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ac2:	f7f9 f85f 	bl	8002b84 <HAL_GetTick>
 8009ac6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ac8:	e008      	b.n	8009adc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009aca:	f7f9 f85b 	bl	8002b84 <HAL_GetTick>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	1ad3      	subs	r3, r2, r3
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d901      	bls.n	8009adc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e006      	b.n	8009aea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009adc:	4b05      	ldr	r3, [pc, #20]	; (8009af4 <RCCEx_PLL3_Config+0x15c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d0f0      	beq.n	8009aca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	58024400 	.word	0x58024400
 8009af8:	ffff0007 	.word	0xffff0007

08009afc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d067      	beq.n	8009bde <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d106      	bne.n	8009b28 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7f7 fc66 	bl	80013f4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	22ca      	movs	r2, #202	; 0xca
 8009b36:	625a      	str	r2, [r3, #36]	; 0x24
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2253      	movs	r2, #83	; 0x53
 8009b3e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f879 	bl	8009c38 <RTC_EnterInitMode>
 8009b46:	4603      	mov	r3, r0
 8009b48:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d13b      	bne.n	8009bc8 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6899      	ldr	r1, [r3, #8]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	4b23      	ldr	r3, [pc, #140]	; (8009be8 <HAL_RTC_Init+0xec>)
 8009b5c:	400b      	ands	r3, r1
 8009b5e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	6899      	ldr	r1, [r3, #8]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	431a      	orrs	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	431a      	orrs	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	0419      	lsls	r1, r3, #16
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f881 	bl	8009c98 <RTC_ExitInitMode>
 8009b96:	4603      	mov	r3, r0
 8009b98:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d113      	bne.n	8009bc8 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f022 0203 	bic.w	r2, r2, #3
 8009bae:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	69da      	ldr	r2, [r3, #28]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	431a      	orrs	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	22ff      	movs	r2, #255	; 0xff
 8009bce:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d103      	bne.n	8009bde <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	ff8fffbf 	.word	0xff8fffbf

08009bec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68da      	ldr	r2, [r3, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009c02:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8009c04:	f7f8 ffbe 	bl	8002b84 <HAL_GetTick>
 8009c08:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c0a:	e009      	b.n	8009c20 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c0c:	f7f8 ffba 	bl	8002b84 <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c1a:	d901      	bls.n	8009c20 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e007      	b.n	8009c30 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	f003 0320 	and.w	r3, r3, #32
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d0ee      	beq.n	8009c0c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c40:	2300      	movs	r3, #0
 8009c42:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d11d      	bne.n	8009c8e <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c5a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009c5c:	f7f8 ff92 	bl	8002b84 <HAL_GetTick>
 8009c60:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009c62:	e00d      	b.n	8009c80 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009c64:	f7f8 ff8e 	bl	8002b84 <HAL_GetTick>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c72:	d905      	bls.n	8009c80 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2203      	movs	r2, #3
 8009c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0ea      	beq.n	8009c64 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009ca4:	4b1a      	ldr	r3, [pc, #104]	; (8009d10 <RTC_ExitInitMode+0x78>)
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	4a19      	ldr	r2, [pc, #100]	; (8009d10 <RTC_ExitInitMode+0x78>)
 8009caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cae:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009cb0:	4b17      	ldr	r3, [pc, #92]	; (8009d10 <RTC_ExitInitMode+0x78>)
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f003 0320 	and.w	r3, r3, #32
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d10c      	bne.n	8009cd6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff ff95 	bl	8009bec <HAL_RTC_WaitForSynchro>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d01e      	beq.n	8009d06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2203      	movs	r2, #3
 8009ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	73fb      	strb	r3, [r7, #15]
 8009cd4:	e017      	b.n	8009d06 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009cd6:	4b0e      	ldr	r3, [pc, #56]	; (8009d10 <RTC_ExitInitMode+0x78>)
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	4a0d      	ldr	r2, [pc, #52]	; (8009d10 <RTC_ExitInitMode+0x78>)
 8009cdc:	f023 0320 	bic.w	r3, r3, #32
 8009ce0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7ff ff82 	bl	8009bec <HAL_RTC_WaitForSynchro>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d005      	beq.n	8009cfa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2203      	movs	r2, #3
 8009cf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009cfa:	4b05      	ldr	r3, [pc, #20]	; (8009d10 <RTC_ExitInitMode+0x78>)
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	4a04      	ldr	r2, [pc, #16]	; (8009d10 <RTC_ExitInitMode+0x78>)
 8009d00:	f043 0320 	orr.w	r3, r3, #32
 8009d04:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	58004000 	.word	0x58004000

08009d14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d101      	bne.n	8009d2a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e0e2      	b.n	8009ef0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a70      	ldr	r2, [pc, #448]	; (8009ef8 <HAL_SPI_Init+0x1e4>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d00f      	beq.n	8009d5a <HAL_SPI_Init+0x46>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a6f      	ldr	r2, [pc, #444]	; (8009efc <HAL_SPI_Init+0x1e8>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d00a      	beq.n	8009d5a <HAL_SPI_Init+0x46>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a6d      	ldr	r2, [pc, #436]	; (8009f00 <HAL_SPI_Init+0x1ec>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d005      	beq.n	8009d5a <HAL_SPI_Init+0x46>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	2b0f      	cmp	r3, #15
 8009d54:	d901      	bls.n	8009d5a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e0ca      	b.n	8009ef0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fb96 	bl	800a48c <SPI_GetPacketSize>
 8009d60:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a64      	ldr	r2, [pc, #400]	; (8009ef8 <HAL_SPI_Init+0x1e4>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d00c      	beq.n	8009d86 <HAL_SPI_Init+0x72>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a62      	ldr	r2, [pc, #392]	; (8009efc <HAL_SPI_Init+0x1e8>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d007      	beq.n	8009d86 <HAL_SPI_Init+0x72>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a61      	ldr	r2, [pc, #388]	; (8009f00 <HAL_SPI_Init+0x1ec>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d002      	beq.n	8009d86 <HAL_SPI_Init+0x72>
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b08      	cmp	r3, #8
 8009d84:	d811      	bhi.n	8009daa <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d8a:	4a5b      	ldr	r2, [pc, #364]	; (8009ef8 <HAL_SPI_Init+0x1e4>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d009      	beq.n	8009da4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a59      	ldr	r2, [pc, #356]	; (8009efc <HAL_SPI_Init+0x1e8>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d004      	beq.n	8009da4 <HAL_SPI_Init+0x90>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a58      	ldr	r2, [pc, #352]	; (8009f00 <HAL_SPI_Init+0x1ec>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d104      	bne.n	8009dae <HAL_SPI_Init+0x9a>
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2b10      	cmp	r3, #16
 8009da8:	d901      	bls.n	8009dae <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e0a0      	b.n	8009ef0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d106      	bne.n	8009dc8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7f7 fc88 	bl	80016d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f022 0201 	bic.w	r2, r2, #1
 8009dde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009de8:	d110      	bne.n	8009e0c <HAL_SPI_Init+0xf8>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009df2:	d10b      	bne.n	8009e0c <HAL_SPI_Init+0xf8>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d107      	bne.n	8009e0c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009e0a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	69da      	ldr	r2, [r3, #28]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e14:	431a      	orrs	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e1e:	ea42 0103 	orr.w	r1, r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68da      	ldr	r2, [r3, #12]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	430a      	orrs	r2, r1
 8009e2c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e36:	431a      	orrs	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3c:	431a      	orrs	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	431a      	orrs	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	431a      	orrs	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a1b      	ldr	r3, [r3, #32]
 8009e54:	431a      	orrs	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e60:	431a      	orrs	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	431a      	orrs	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e6c:	ea42 0103 	orr.w	r1, r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d113      	bne.n	8009eac <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e96:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009eaa:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f022 0201 	bic.w	r2, r2, #1
 8009eba:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00a      	beq.n	8009ede <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	40013000 	.word	0x40013000
 8009efc:	40003800 	.word	0x40003800
 8009f00:	40003c00 	.word	0x40003c00

08009f04 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b08a      	sub	sp, #40	; 0x28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009f1c:	6a3a      	ldr	r2, [r7, #32]
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	4013      	ands	r3, r2
 8009f22:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009f36:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3330      	adds	r3, #48	; 0x30
 8009f3e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d113      	bne.n	8009f72 <HAL_SPI_IRQHandler+0x6e>
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10e      	bne.n	8009f72 <HAL_SPI_IRQHandler+0x6e>
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	f003 0304 	and.w	r3, r3, #4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d009      	beq.n	8009f72 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	4798      	blx	r3
    handled = 1UL;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10f      	bne.n	8009f9c <HAL_SPI_IRQHandler+0x98>
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	f003 0301 	and.w	r3, r3, #1
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00a      	beq.n	8009f9c <HAL_SPI_IRQHandler+0x98>
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	f003 0304 	and.w	r3, r3, #4
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d105      	bne.n	8009f9c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	4798      	blx	r3
    handled = 1UL;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	f003 0320 	and.w	r3, r3, #32
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d10f      	bne.n	8009fc6 <HAL_SPI_IRQHandler+0xc2>
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	f003 0302 	and.w	r3, r3, #2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00a      	beq.n	8009fc6 <HAL_SPI_IRQHandler+0xc2>
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	f003 0304 	and.w	r3, r3, #4
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d105      	bne.n	8009fc6 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	4798      	blx	r3
    handled = 1UL;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f040 8170 	bne.w	800a2ae <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	f003 0308 	and.w	r3, r3, #8
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 80a0 	beq.w	800a11a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	699a      	ldr	r2, [r3, #24]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f042 0208 	orr.w	r2, r2, #8
 8009fe8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	699a      	ldr	r2, [r3, #24]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f042 0210 	orr.w	r2, r2, #16
 8009ff8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	699a      	ldr	r2, [r3, #24]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a008:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	691a      	ldr	r2, [r3, #16]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f022 0208 	bic.w	r2, r2, #8
 800a018:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00f      	beq.n	800a044 <HAL_SPI_IRQHandler+0x140>
 800a024:	7cfb      	ldrb	r3, [r7, #19]
 800a026:	2b04      	cmp	r3, #4
 800a028:	d004      	beq.n	800a034 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d007      	beq.n	800a044 <HAL_SPI_IRQHandler+0x140>
 800a034:	7cfb      	ldrb	r3, [r7, #19]
 800a036:	2b03      	cmp	r3, #3
 800a038:	d059      	beq.n	800a0ee <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d154      	bne.n	800a0ee <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d13d      	bne.n	800a0ce <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a052:	e036      	b.n	800a0c2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	2b0f      	cmp	r3, #15
 800a05a:	d90b      	bls.n	800a074 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a064:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a066:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a06c:	1d1a      	adds	r2, r3, #4
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	665a      	str	r2, [r3, #100]	; 0x64
 800a072:	e01d      	b.n	800a0b0 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	2b07      	cmp	r3, #7
 800a07a:	d90b      	bls.n	800a094 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	8812      	ldrh	r2, [r2, #0]
 800a084:	b292      	uxth	r2, r2
 800a086:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a08c:	1c9a      	adds	r2, r3, #2
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	665a      	str	r2, [r3, #100]	; 0x64
 800a092:	e00d      	b.n	800a0b0 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0a0:	7812      	ldrb	r2, [r2, #0]
 800a0a2:	b2d2      	uxtb	r2, r2
 800a0a4:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1c2      	bne.n	800a054 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f93c 	bl	800a34c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f90c 	bl	800a304 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a0ec:	e0e4      	b.n	800a2b8 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a0ee:	7cfb      	ldrb	r3, [r7, #19]
 800a0f0:	2b05      	cmp	r3, #5
 800a0f2:	d103      	bne.n	800a0fc <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f8fb 	bl	800a2f0 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 800a0fa:	e0da      	b.n	800a2b2 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a0fc:	7cfb      	ldrb	r3, [r7, #19]
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d103      	bne.n	800a10a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f8ea 	bl	800a2dc <HAL_SPI_RxCpltCallback>
    return;
 800a108:	e0d3      	b.n	800a2b2 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a10a:	7cfb      	ldrb	r3, [r7, #19]
 800a10c:	2b03      	cmp	r3, #3
 800a10e:	f040 80d0 	bne.w	800a2b2 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f8d8 	bl	800a2c8 <HAL_SPI_TxCpltCallback>
    return;
 800a118:	e0cb      	b.n	800a2b2 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00d      	beq.n	800a140 <HAL_SPI_IRQHandler+0x23c>
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	f003 0308 	and.w	r3, r3, #8
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d008      	beq.n	800a140 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	699a      	ldr	r2, [r3, #24]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a13c:	619a      	str	r2, [r3, #24]

    return;
 800a13e:	e0bb      	b.n	800a2b8 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 80b6 	beq.w	800a2b8 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00f      	beq.n	800a176 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a15c:	f043 0204 	orr.w	r2, r3, #4
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	699a      	ldr	r2, [r3, #24]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a174:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00f      	beq.n	800a1a0 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a186:	f043 0201 	orr.w	r2, r3, #1
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	699a      	ldr	r2, [r3, #24]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a19e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00f      	beq.n	800a1ca <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1b0:	f043 0208 	orr.w	r2, r3, #8
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	699a      	ldr	r2, [r3, #24]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1c8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	f003 0320 	and.w	r3, r3, #32
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00f      	beq.n	800a1f4 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	699a      	ldr	r2, [r3, #24]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f042 0220 	orr.w	r2, r2, #32
 800a1f2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d05b      	beq.n	800a2b6 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f022 0201 	bic.w	r2, r2, #1
 800a20c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6919      	ldr	r1, [r3, #16]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	4b29      	ldr	r3, [pc, #164]	; (800a2c0 <HAL_SPI_IRQHandler+0x3bc>)
 800a21a:	400b      	ands	r3, r1
 800a21c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a224:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a228:	d138      	bne.n	800a29c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a238:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d013      	beq.n	800a26a <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a246:	4a1f      	ldr	r2, [pc, #124]	; (800a2c4 <HAL_SPI_IRQHandler+0x3c0>)
 800a248:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a24e:	4618      	mov	r0, r3
 800a250:	f7f9 fa76 	bl	8003740 <HAL_DMA_Abort_IT>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d007      	beq.n	800a26a <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a260:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d021      	beq.n	800a2b6 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a276:	4a13      	ldr	r2, [pc, #76]	; (800a2c4 <HAL_SPI_IRQHandler+0x3c0>)
 800a278:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a27e:	4618      	mov	r0, r3
 800a280:	f7f9 fa5e 	bl	8003740 <HAL_DMA_Abort_IT>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d015      	beq.n	800a2b6 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a290:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a29a:	e00c      	b.n	800a2b6 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f82d 	bl	800a304 <HAL_SPI_ErrorCallback>
    return;
 800a2aa:	bf00      	nop
 800a2ac:	e003      	b.n	800a2b6 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a2ae:	bf00      	nop
 800a2b0:	e002      	b.n	800a2b8 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800a2b2:	bf00      	nop
 800a2b4:	e000      	b.n	800a2b8 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800a2b6:	bf00      	nop
  }
}
 800a2b8:	3728      	adds	r7, #40	; 0x28
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	fffffc94 	.word	0xfffffc94
 800a2c4:	0800a319 	.word	0x0800a319

0800a2c8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a324:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f7ff ffe0 	bl	800a304 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a344:	bf00      	nop
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	699a      	ldr	r2, [r3, #24]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f042 0208 	orr.w	r2, r2, #8
 800a36a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	699a      	ldr	r2, [r3, #24]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f042 0210 	orr.w	r2, r2, #16
 800a37a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f022 0201 	bic.w	r2, r2, #1
 800a38a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6919      	ldr	r1, [r3, #16]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	4b3c      	ldr	r3, [pc, #240]	; (800a488 <SPI_CloseTransfer+0x13c>)
 800a398:	400b      	ands	r3, r1
 800a39a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	689a      	ldr	r2, [r3, #8]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a3aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	d014      	beq.n	800a3e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f003 0320 	and.w	r3, r3, #32
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00f      	beq.n	800a3e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	699a      	ldr	r2, [r3, #24]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f042 0220 	orr.w	r2, r2, #32
 800a3e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d014      	beq.n	800a418 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00f      	beq.n	800a418 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3fe:	f043 0204 	orr.w	r2, r3, #4
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	699a      	ldr	r2, [r3, #24]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a416:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00f      	beq.n	800a442 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a428:	f043 0201 	orr.w	r2, r3, #1
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	699a      	ldr	r2, [r3, #24]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a440:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00f      	beq.n	800a46c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a452:	f043 0208 	orr.w	r2, r3, #8
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	699a      	ldr	r2, [r3, #24]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a46a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a47c:	bf00      	nop
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	fffffc90 	.word	0xfffffc90

0800a48c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a498:	095b      	lsrs	r3, r3, #5
 800a49a:	3301      	adds	r3, #1
 800a49c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	3307      	adds	r3, #7
 800a4aa:	08db      	lsrs	r3, r3, #3
 800a4ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	fb02 f303 	mul.w	r3, r2, r3
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b082      	sub	sp, #8
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d101      	bne.n	800a4d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e049      	b.n	800a568 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d106      	bne.n	800a4ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f841 	bl	800a570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2202      	movs	r2, #2
 800a4f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	4619      	mov	r1, r3
 800a500:	4610      	mov	r0, r2
 800a502:	f000 f9bd 	bl	800a880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a592:	b2db      	uxtb	r3, r3
 800a594:	2b01      	cmp	r3, #1
 800a596:	d001      	beq.n	800a59c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e021      	b.n	800a5e0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68da      	ldr	r2, [r3, #12]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f042 0201 	orr.w	r2, r2, #1
 800a5b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	689a      	ldr	r2, [r3, #8]
 800a5ba:	4b0c      	ldr	r3, [pc, #48]	; (800a5ec <HAL_TIM_Base_Start_IT+0x68>)
 800a5bc:	4013      	ands	r3, r2
 800a5be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2b06      	cmp	r3, #6
 800a5c4:	d00b      	beq.n	800a5de <HAL_TIM_Base_Start_IT+0x5a>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5cc:	d007      	beq.n	800a5de <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f042 0201 	orr.w	r2, r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	00010007 	.word	0x00010007

0800a5f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	f003 0302 	and.w	r3, r3, #2
 800a602:	2b02      	cmp	r3, #2
 800a604:	d122      	bne.n	800a64c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	f003 0302 	and.w	r3, r3, #2
 800a610:	2b02      	cmp	r3, #2
 800a612:	d11b      	bne.n	800a64c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f06f 0202 	mvn.w	r2, #2
 800a61c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	f003 0303 	and.w	r3, r3, #3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f905 	bl	800a842 <HAL_TIM_IC_CaptureCallback>
 800a638:	e005      	b.n	800a646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 f8f7 	bl	800a82e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f908 	bl	800a856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	2b04      	cmp	r3, #4
 800a658:	d122      	bne.n	800a6a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	f003 0304 	and.w	r3, r3, #4
 800a664:	2b04      	cmp	r3, #4
 800a666:	d11b      	bne.n	800a6a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f06f 0204 	mvn.w	r2, #4
 800a670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2202      	movs	r2, #2
 800a676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f8db 	bl	800a842 <HAL_TIM_IC_CaptureCallback>
 800a68c:	e005      	b.n	800a69a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f8cd 	bl	800a82e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f8de 	bl	800a856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	f003 0308 	and.w	r3, r3, #8
 800a6aa:	2b08      	cmp	r3, #8
 800a6ac:	d122      	bne.n	800a6f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f003 0308 	and.w	r3, r3, #8
 800a6b8:	2b08      	cmp	r3, #8
 800a6ba:	d11b      	bne.n	800a6f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f06f 0208 	mvn.w	r2, #8
 800a6c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2204      	movs	r2, #4
 800a6ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	f003 0303 	and.w	r3, r3, #3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f8b1 	bl	800a842 <HAL_TIM_IC_CaptureCallback>
 800a6e0:	e005      	b.n	800a6ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f8a3 	bl	800a82e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f8b4 	bl	800a856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	f003 0310 	and.w	r3, r3, #16
 800a6fe:	2b10      	cmp	r3, #16
 800a700:	d122      	bne.n	800a748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	f003 0310 	and.w	r3, r3, #16
 800a70c:	2b10      	cmp	r3, #16
 800a70e:	d11b      	bne.n	800a748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f06f 0210 	mvn.w	r2, #16
 800a718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2208      	movs	r2, #8
 800a71e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d003      	beq.n	800a736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f887 	bl	800a842 <HAL_TIM_IC_CaptureCallback>
 800a734:	e005      	b.n	800a742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f879 	bl	800a82e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 f88a 	bl	800a856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b01      	cmp	r3, #1
 800a754:	d10e      	bne.n	800a774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	2b01      	cmp	r3, #1
 800a762:	d107      	bne.n	800a774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f06f 0201 	mvn.w	r2, #1
 800a76c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7f6 fd16 	bl	80011a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a77e:	2b80      	cmp	r3, #128	; 0x80
 800a780:	d10e      	bne.n	800a7a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a78c:	2b80      	cmp	r3, #128	; 0x80
 800a78e:	d107      	bne.n	800a7a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f914 	bl	800a9c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7ae:	d10e      	bne.n	800a7ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ba:	2b80      	cmp	r3, #128	; 0x80
 800a7bc:	d107      	bne.n	800a7ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a7c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f907 	bl	800a9dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d8:	2b40      	cmp	r3, #64	; 0x40
 800a7da:	d10e      	bne.n	800a7fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e6:	2b40      	cmp	r3, #64	; 0x40
 800a7e8:	d107      	bne.n	800a7fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f838 	bl	800a86a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	f003 0320 	and.w	r3, r3, #32
 800a804:	2b20      	cmp	r3, #32
 800a806:	d10e      	bne.n	800a826 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	f003 0320 	and.w	r3, r3, #32
 800a812:	2b20      	cmp	r3, #32
 800a814:	d107      	bne.n	800a826 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f06f 0220 	mvn.w	r2, #32
 800a81e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f8c7 	bl	800a9b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a826:	bf00      	nop
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a82e:	b480      	push	{r7}
 800a830:	b083      	sub	sp, #12
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a836:	bf00      	nop
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a842:	b480      	push	{r7}
 800a844:	b083      	sub	sp, #12
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a84a:	bf00      	nop
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a856:	b480      	push	{r7}
 800a858:	b083      	sub	sp, #12
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a85e:	bf00      	nop
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a872:	bf00      	nop
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
	...

0800a880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a40      	ldr	r2, [pc, #256]	; (800a994 <TIM_Base_SetConfig+0x114>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d013      	beq.n	800a8c0 <TIM_Base_SetConfig+0x40>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a89e:	d00f      	beq.n	800a8c0 <TIM_Base_SetConfig+0x40>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a3d      	ldr	r2, [pc, #244]	; (800a998 <TIM_Base_SetConfig+0x118>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d00b      	beq.n	800a8c0 <TIM_Base_SetConfig+0x40>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a3c      	ldr	r2, [pc, #240]	; (800a99c <TIM_Base_SetConfig+0x11c>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d007      	beq.n	800a8c0 <TIM_Base_SetConfig+0x40>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a3b      	ldr	r2, [pc, #236]	; (800a9a0 <TIM_Base_SetConfig+0x120>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d003      	beq.n	800a8c0 <TIM_Base_SetConfig+0x40>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a3a      	ldr	r2, [pc, #232]	; (800a9a4 <TIM_Base_SetConfig+0x124>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d108      	bne.n	800a8d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a2f      	ldr	r2, [pc, #188]	; (800a994 <TIM_Base_SetConfig+0x114>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d01f      	beq.n	800a91a <TIM_Base_SetConfig+0x9a>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e0:	d01b      	beq.n	800a91a <TIM_Base_SetConfig+0x9a>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a2c      	ldr	r2, [pc, #176]	; (800a998 <TIM_Base_SetConfig+0x118>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d017      	beq.n	800a91a <TIM_Base_SetConfig+0x9a>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4a2b      	ldr	r2, [pc, #172]	; (800a99c <TIM_Base_SetConfig+0x11c>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d013      	beq.n	800a91a <TIM_Base_SetConfig+0x9a>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a2a      	ldr	r2, [pc, #168]	; (800a9a0 <TIM_Base_SetConfig+0x120>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d00f      	beq.n	800a91a <TIM_Base_SetConfig+0x9a>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a29      	ldr	r2, [pc, #164]	; (800a9a4 <TIM_Base_SetConfig+0x124>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d00b      	beq.n	800a91a <TIM_Base_SetConfig+0x9a>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a28      	ldr	r2, [pc, #160]	; (800a9a8 <TIM_Base_SetConfig+0x128>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d007      	beq.n	800a91a <TIM_Base_SetConfig+0x9a>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a27      	ldr	r2, [pc, #156]	; (800a9ac <TIM_Base_SetConfig+0x12c>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d003      	beq.n	800a91a <TIM_Base_SetConfig+0x9a>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a26      	ldr	r2, [pc, #152]	; (800a9b0 <TIM_Base_SetConfig+0x130>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d108      	bne.n	800a92c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	4313      	orrs	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	4313      	orrs	r3, r2
 800a938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	689a      	ldr	r2, [r3, #8]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a10      	ldr	r2, [pc, #64]	; (800a994 <TIM_Base_SetConfig+0x114>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d00f      	beq.n	800a978 <TIM_Base_SetConfig+0xf8>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a12      	ldr	r2, [pc, #72]	; (800a9a4 <TIM_Base_SetConfig+0x124>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d00b      	beq.n	800a978 <TIM_Base_SetConfig+0xf8>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a11      	ldr	r2, [pc, #68]	; (800a9a8 <TIM_Base_SetConfig+0x128>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d007      	beq.n	800a978 <TIM_Base_SetConfig+0xf8>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a10      	ldr	r2, [pc, #64]	; (800a9ac <TIM_Base_SetConfig+0x12c>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d003      	beq.n	800a978 <TIM_Base_SetConfig+0xf8>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a0f      	ldr	r2, [pc, #60]	; (800a9b0 <TIM_Base_SetConfig+0x130>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d103      	bne.n	800a980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	691a      	ldr	r2, [r3, #16]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	615a      	str	r2, [r3, #20]
}
 800a986:	bf00      	nop
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	40010000 	.word	0x40010000
 800a998:	40000400 	.word	0x40000400
 800a99c:	40000800 	.word	0x40000800
 800a9a0:	40000c00 	.word	0x40000c00
 800a9a4:	40010400 	.word	0x40010400
 800a9a8:	40014000 	.word	0x40014000
 800a9ac:	40014400 	.word	0x40014400
 800a9b0:	40014800 	.word	0x40014800

0800a9b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a9d0:	bf00      	nop
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e042      	b.n	800aa88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d106      	bne.n	800aa1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7f7 fc5f 	bl	80022d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2224      	movs	r2, #36	; 0x24
 800aa1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f022 0201 	bic.w	r2, r2, #1
 800aa30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f8c2 	bl	800abbc <UART_SetConfig>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d101      	bne.n	800aa42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e022      	b.n	800aa88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d002      	beq.n	800aa50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fe66 	bl	800b71c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	689a      	ldr	r2, [r3, #8]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f042 0201 	orr.w	r2, r2, #1
 800aa7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 feed 	bl	800b860 <UART_CheckIdleState>
 800aa86:	4603      	mov	r3, r0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08a      	sub	sp, #40	; 0x28
 800aa94:	af02      	add	r7, sp, #8
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	603b      	str	r3, [r7, #0]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaa6:	2b20      	cmp	r3, #32
 800aaa8:	f040 8083 	bne.w	800abb2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d002      	beq.n	800aab8 <HAL_UART_Transmit+0x28>
 800aab2:	88fb      	ldrh	r3, [r7, #6]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	e07b      	b.n	800abb4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d101      	bne.n	800aaca <HAL_UART_Transmit+0x3a>
 800aac6:	2302      	movs	r3, #2
 800aac8:	e074      	b.n	800abb4 <HAL_UART_Transmit+0x124>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2201      	movs	r2, #1
 800aace:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2221      	movs	r2, #33	; 0x21
 800aade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800aae2:	f7f8 f84f 	bl	8002b84 <HAL_GetTick>
 800aae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	88fa      	ldrh	r2, [r7, #6]
 800aaec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	88fa      	ldrh	r2, [r7, #6]
 800aaf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab00:	d108      	bne.n	800ab14 <HAL_UART_Transmit+0x84>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d104      	bne.n	800ab14 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	61bb      	str	r3, [r7, #24]
 800ab12:	e003      	b.n	800ab1c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800ab24:	e02c      	b.n	800ab80 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	2180      	movs	r1, #128	; 0x80
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 fedd 	bl	800b8f0 <UART_WaitOnFlagUntilTimeout>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e039      	b.n	800abb4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d10b      	bne.n	800ab5e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	3302      	adds	r3, #2
 800ab5a:	61bb      	str	r3, [r7, #24]
 800ab5c:	e007      	b.n	800ab6e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	781a      	ldrb	r2, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	3b01      	subs	r3, #1
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1cc      	bne.n	800ab26 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	2200      	movs	r2, #0
 800ab94:	2140      	movs	r1, #64	; 0x40
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f000 feaa 	bl	800b8f0 <UART_WaitOnFlagUntilTimeout>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d001      	beq.n	800aba6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e006      	b.n	800abb4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2220      	movs	r2, #32
 800abaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800abae:	2300      	movs	r3, #0
 800abb0:	e000      	b.n	800abb4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800abb2:	2302      	movs	r3, #2
  }
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3720      	adds	r7, #32
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abbc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800abc0:	b08e      	sub	sp, #56	; 0x38
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800abc6:	2300      	movs	r3, #0
 800abc8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	689a      	ldr	r2, [r3, #8]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	431a      	orrs	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	431a      	orrs	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	69db      	ldr	r3, [r3, #28]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abea:	4313      	orrs	r3, r2
 800abec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	4bc1      	ldr	r3, [pc, #772]	; (800aefc <UART_SetConfig+0x340>)
 800abf6:	4013      	ands	r3, r2
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	6812      	ldr	r2, [r2, #0]
 800abfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800abfe:	430b      	orrs	r3, r1
 800ac00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	68da      	ldr	r2, [r3, #12]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	430a      	orrs	r2, r1
 800ac16:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4ab7      	ldr	r2, [pc, #732]	; (800af00 <UART_SetConfig+0x344>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d004      	beq.n	800ac32 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a1b      	ldr	r3, [r3, #32]
 800ac2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	689a      	ldr	r2, [r3, #8]
 800ac38:	4bb2      	ldr	r3, [pc, #712]	; (800af04 <UART_SetConfig+0x348>)
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	6812      	ldr	r2, [r2, #0]
 800ac40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac42:	430b      	orrs	r3, r1
 800ac44:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4c:	f023 010f 	bic.w	r1, r3, #15
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	430a      	orrs	r2, r1
 800ac5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4aa9      	ldr	r2, [pc, #676]	; (800af08 <UART_SetConfig+0x34c>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d177      	bne.n	800ad56 <UART_SetConfig+0x19a>
 800ac66:	4ba9      	ldr	r3, [pc, #676]	; (800af0c <UART_SetConfig+0x350>)
 800ac68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac6e:	2b28      	cmp	r3, #40	; 0x28
 800ac70:	d86c      	bhi.n	800ad4c <UART_SetConfig+0x190>
 800ac72:	a201      	add	r2, pc, #4	; (adr r2, 800ac78 <UART_SetConfig+0xbc>)
 800ac74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac78:	0800ad1d 	.word	0x0800ad1d
 800ac7c:	0800ad4d 	.word	0x0800ad4d
 800ac80:	0800ad4d 	.word	0x0800ad4d
 800ac84:	0800ad4d 	.word	0x0800ad4d
 800ac88:	0800ad4d 	.word	0x0800ad4d
 800ac8c:	0800ad4d 	.word	0x0800ad4d
 800ac90:	0800ad4d 	.word	0x0800ad4d
 800ac94:	0800ad4d 	.word	0x0800ad4d
 800ac98:	0800ad25 	.word	0x0800ad25
 800ac9c:	0800ad4d 	.word	0x0800ad4d
 800aca0:	0800ad4d 	.word	0x0800ad4d
 800aca4:	0800ad4d 	.word	0x0800ad4d
 800aca8:	0800ad4d 	.word	0x0800ad4d
 800acac:	0800ad4d 	.word	0x0800ad4d
 800acb0:	0800ad4d 	.word	0x0800ad4d
 800acb4:	0800ad4d 	.word	0x0800ad4d
 800acb8:	0800ad2d 	.word	0x0800ad2d
 800acbc:	0800ad4d 	.word	0x0800ad4d
 800acc0:	0800ad4d 	.word	0x0800ad4d
 800acc4:	0800ad4d 	.word	0x0800ad4d
 800acc8:	0800ad4d 	.word	0x0800ad4d
 800accc:	0800ad4d 	.word	0x0800ad4d
 800acd0:	0800ad4d 	.word	0x0800ad4d
 800acd4:	0800ad4d 	.word	0x0800ad4d
 800acd8:	0800ad35 	.word	0x0800ad35
 800acdc:	0800ad4d 	.word	0x0800ad4d
 800ace0:	0800ad4d 	.word	0x0800ad4d
 800ace4:	0800ad4d 	.word	0x0800ad4d
 800ace8:	0800ad4d 	.word	0x0800ad4d
 800acec:	0800ad4d 	.word	0x0800ad4d
 800acf0:	0800ad4d 	.word	0x0800ad4d
 800acf4:	0800ad4d 	.word	0x0800ad4d
 800acf8:	0800ad3d 	.word	0x0800ad3d
 800acfc:	0800ad4d 	.word	0x0800ad4d
 800ad00:	0800ad4d 	.word	0x0800ad4d
 800ad04:	0800ad4d 	.word	0x0800ad4d
 800ad08:	0800ad4d 	.word	0x0800ad4d
 800ad0c:	0800ad4d 	.word	0x0800ad4d
 800ad10:	0800ad4d 	.word	0x0800ad4d
 800ad14:	0800ad4d 	.word	0x0800ad4d
 800ad18:	0800ad45 	.word	0x0800ad45
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad22:	e233      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ad24:	2304      	movs	r3, #4
 800ad26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad2a:	e22f      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ad2c:	2308      	movs	r3, #8
 800ad2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad32:	e22b      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ad34:	2310      	movs	r3, #16
 800ad36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad3a:	e227      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ad3c:	2320      	movs	r3, #32
 800ad3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad42:	e223      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ad44:	2340      	movs	r3, #64	; 0x40
 800ad46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad4a:	e21f      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ad4c:	2380      	movs	r3, #128	; 0x80
 800ad4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad52:	bf00      	nop
 800ad54:	e21a      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a6d      	ldr	r2, [pc, #436]	; (800af10 <UART_SetConfig+0x354>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d132      	bne.n	800adc6 <UART_SetConfig+0x20a>
 800ad60:	4b6a      	ldr	r3, [pc, #424]	; (800af0c <UART_SetConfig+0x350>)
 800ad62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad64:	f003 0307 	and.w	r3, r3, #7
 800ad68:	2b05      	cmp	r3, #5
 800ad6a:	d827      	bhi.n	800adbc <UART_SetConfig+0x200>
 800ad6c:	a201      	add	r2, pc, #4	; (adr r2, 800ad74 <UART_SetConfig+0x1b8>)
 800ad6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad72:	bf00      	nop
 800ad74:	0800ad8d 	.word	0x0800ad8d
 800ad78:	0800ad95 	.word	0x0800ad95
 800ad7c:	0800ad9d 	.word	0x0800ad9d
 800ad80:	0800ada5 	.word	0x0800ada5
 800ad84:	0800adad 	.word	0x0800adad
 800ad88:	0800adb5 	.word	0x0800adb5
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad92:	e1fb      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ad94:	2304      	movs	r3, #4
 800ad96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad9a:	e1f7      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ad9c:	2308      	movs	r3, #8
 800ad9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ada2:	e1f3      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ada4:	2310      	movs	r3, #16
 800ada6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adaa:	e1ef      	b.n	800b18c <UART_SetConfig+0x5d0>
 800adac:	2320      	movs	r3, #32
 800adae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adb2:	e1eb      	b.n	800b18c <UART_SetConfig+0x5d0>
 800adb4:	2340      	movs	r3, #64	; 0x40
 800adb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adba:	e1e7      	b.n	800b18c <UART_SetConfig+0x5d0>
 800adbc:	2380      	movs	r3, #128	; 0x80
 800adbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adc2:	bf00      	nop
 800adc4:	e1e2      	b.n	800b18c <UART_SetConfig+0x5d0>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a52      	ldr	r2, [pc, #328]	; (800af14 <UART_SetConfig+0x358>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d132      	bne.n	800ae36 <UART_SetConfig+0x27a>
 800add0:	4b4e      	ldr	r3, [pc, #312]	; (800af0c <UART_SetConfig+0x350>)
 800add2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800add4:	f003 0307 	and.w	r3, r3, #7
 800add8:	2b05      	cmp	r3, #5
 800adda:	d827      	bhi.n	800ae2c <UART_SetConfig+0x270>
 800addc:	a201      	add	r2, pc, #4	; (adr r2, 800ade4 <UART_SetConfig+0x228>)
 800adde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade2:	bf00      	nop
 800ade4:	0800adfd 	.word	0x0800adfd
 800ade8:	0800ae05 	.word	0x0800ae05
 800adec:	0800ae0d 	.word	0x0800ae0d
 800adf0:	0800ae15 	.word	0x0800ae15
 800adf4:	0800ae1d 	.word	0x0800ae1d
 800adf8:	0800ae25 	.word	0x0800ae25
 800adfc:	2300      	movs	r3, #0
 800adfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae02:	e1c3      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ae04:	2304      	movs	r3, #4
 800ae06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae0a:	e1bf      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ae0c:	2308      	movs	r3, #8
 800ae0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae12:	e1bb      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ae14:	2310      	movs	r3, #16
 800ae16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae1a:	e1b7      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ae1c:	2320      	movs	r3, #32
 800ae1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae22:	e1b3      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ae24:	2340      	movs	r3, #64	; 0x40
 800ae26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae2a:	e1af      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ae2c:	2380      	movs	r3, #128	; 0x80
 800ae2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae32:	bf00      	nop
 800ae34:	e1aa      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a37      	ldr	r2, [pc, #220]	; (800af18 <UART_SetConfig+0x35c>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d132      	bne.n	800aea6 <UART_SetConfig+0x2ea>
 800ae40:	4b32      	ldr	r3, [pc, #200]	; (800af0c <UART_SetConfig+0x350>)
 800ae42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae44:	f003 0307 	and.w	r3, r3, #7
 800ae48:	2b05      	cmp	r3, #5
 800ae4a:	d827      	bhi.n	800ae9c <UART_SetConfig+0x2e0>
 800ae4c:	a201      	add	r2, pc, #4	; (adr r2, 800ae54 <UART_SetConfig+0x298>)
 800ae4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae52:	bf00      	nop
 800ae54:	0800ae6d 	.word	0x0800ae6d
 800ae58:	0800ae75 	.word	0x0800ae75
 800ae5c:	0800ae7d 	.word	0x0800ae7d
 800ae60:	0800ae85 	.word	0x0800ae85
 800ae64:	0800ae8d 	.word	0x0800ae8d
 800ae68:	0800ae95 	.word	0x0800ae95
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae72:	e18b      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ae74:	2304      	movs	r3, #4
 800ae76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae7a:	e187      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ae7c:	2308      	movs	r3, #8
 800ae7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae82:	e183      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ae84:	2310      	movs	r3, #16
 800ae86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae8a:	e17f      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ae8c:	2320      	movs	r3, #32
 800ae8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae92:	e17b      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ae94:	2340      	movs	r3, #64	; 0x40
 800ae96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae9a:	e177      	b.n	800b18c <UART_SetConfig+0x5d0>
 800ae9c:	2380      	movs	r3, #128	; 0x80
 800ae9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aea2:	bf00      	nop
 800aea4:	e172      	b.n	800b18c <UART_SetConfig+0x5d0>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a1c      	ldr	r2, [pc, #112]	; (800af1c <UART_SetConfig+0x360>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d144      	bne.n	800af3a <UART_SetConfig+0x37e>
 800aeb0:	4b16      	ldr	r3, [pc, #88]	; (800af0c <UART_SetConfig+0x350>)
 800aeb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb4:	f003 0307 	and.w	r3, r3, #7
 800aeb8:	2b05      	cmp	r3, #5
 800aeba:	d839      	bhi.n	800af30 <UART_SetConfig+0x374>
 800aebc:	a201      	add	r2, pc, #4	; (adr r2, 800aec4 <UART_SetConfig+0x308>)
 800aebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec2:	bf00      	nop
 800aec4:	0800aedd 	.word	0x0800aedd
 800aec8:	0800aee5 	.word	0x0800aee5
 800aecc:	0800aeed 	.word	0x0800aeed
 800aed0:	0800aef5 	.word	0x0800aef5
 800aed4:	0800af21 	.word	0x0800af21
 800aed8:	0800af29 	.word	0x0800af29
 800aedc:	2300      	movs	r3, #0
 800aede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aee2:	e153      	b.n	800b18c <UART_SetConfig+0x5d0>
 800aee4:	2304      	movs	r3, #4
 800aee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeea:	e14f      	b.n	800b18c <UART_SetConfig+0x5d0>
 800aeec:	2308      	movs	r3, #8
 800aeee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aef2:	e14b      	b.n	800b18c <UART_SetConfig+0x5d0>
 800aef4:	2310      	movs	r3, #16
 800aef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aefa:	e147      	b.n	800b18c <UART_SetConfig+0x5d0>
 800aefc:	cfff69f3 	.word	0xcfff69f3
 800af00:	58000c00 	.word	0x58000c00
 800af04:	11fff4ff 	.word	0x11fff4ff
 800af08:	40011000 	.word	0x40011000
 800af0c:	58024400 	.word	0x58024400
 800af10:	40004400 	.word	0x40004400
 800af14:	40004800 	.word	0x40004800
 800af18:	40004c00 	.word	0x40004c00
 800af1c:	40005000 	.word	0x40005000
 800af20:	2320      	movs	r3, #32
 800af22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af26:	e131      	b.n	800b18c <UART_SetConfig+0x5d0>
 800af28:	2340      	movs	r3, #64	; 0x40
 800af2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af2e:	e12d      	b.n	800b18c <UART_SetConfig+0x5d0>
 800af30:	2380      	movs	r3, #128	; 0x80
 800af32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af36:	bf00      	nop
 800af38:	e128      	b.n	800b18c <UART_SetConfig+0x5d0>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4ab6      	ldr	r2, [pc, #728]	; (800b218 <UART_SetConfig+0x65c>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d178      	bne.n	800b036 <UART_SetConfig+0x47a>
 800af44:	4bb5      	ldr	r3, [pc, #724]	; (800b21c <UART_SetConfig+0x660>)
 800af46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af4c:	2b28      	cmp	r3, #40	; 0x28
 800af4e:	d86d      	bhi.n	800b02c <UART_SetConfig+0x470>
 800af50:	a201      	add	r2, pc, #4	; (adr r2, 800af58 <UART_SetConfig+0x39c>)
 800af52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af56:	bf00      	nop
 800af58:	0800affd 	.word	0x0800affd
 800af5c:	0800b02d 	.word	0x0800b02d
 800af60:	0800b02d 	.word	0x0800b02d
 800af64:	0800b02d 	.word	0x0800b02d
 800af68:	0800b02d 	.word	0x0800b02d
 800af6c:	0800b02d 	.word	0x0800b02d
 800af70:	0800b02d 	.word	0x0800b02d
 800af74:	0800b02d 	.word	0x0800b02d
 800af78:	0800b005 	.word	0x0800b005
 800af7c:	0800b02d 	.word	0x0800b02d
 800af80:	0800b02d 	.word	0x0800b02d
 800af84:	0800b02d 	.word	0x0800b02d
 800af88:	0800b02d 	.word	0x0800b02d
 800af8c:	0800b02d 	.word	0x0800b02d
 800af90:	0800b02d 	.word	0x0800b02d
 800af94:	0800b02d 	.word	0x0800b02d
 800af98:	0800b00d 	.word	0x0800b00d
 800af9c:	0800b02d 	.word	0x0800b02d
 800afa0:	0800b02d 	.word	0x0800b02d
 800afa4:	0800b02d 	.word	0x0800b02d
 800afa8:	0800b02d 	.word	0x0800b02d
 800afac:	0800b02d 	.word	0x0800b02d
 800afb0:	0800b02d 	.word	0x0800b02d
 800afb4:	0800b02d 	.word	0x0800b02d
 800afb8:	0800b015 	.word	0x0800b015
 800afbc:	0800b02d 	.word	0x0800b02d
 800afc0:	0800b02d 	.word	0x0800b02d
 800afc4:	0800b02d 	.word	0x0800b02d
 800afc8:	0800b02d 	.word	0x0800b02d
 800afcc:	0800b02d 	.word	0x0800b02d
 800afd0:	0800b02d 	.word	0x0800b02d
 800afd4:	0800b02d 	.word	0x0800b02d
 800afd8:	0800b01d 	.word	0x0800b01d
 800afdc:	0800b02d 	.word	0x0800b02d
 800afe0:	0800b02d 	.word	0x0800b02d
 800afe4:	0800b02d 	.word	0x0800b02d
 800afe8:	0800b02d 	.word	0x0800b02d
 800afec:	0800b02d 	.word	0x0800b02d
 800aff0:	0800b02d 	.word	0x0800b02d
 800aff4:	0800b02d 	.word	0x0800b02d
 800aff8:	0800b025 	.word	0x0800b025
 800affc:	2301      	movs	r3, #1
 800affe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b002:	e0c3      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b004:	2304      	movs	r3, #4
 800b006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b00a:	e0bf      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b00c:	2308      	movs	r3, #8
 800b00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b012:	e0bb      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b014:	2310      	movs	r3, #16
 800b016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b01a:	e0b7      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b01c:	2320      	movs	r3, #32
 800b01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b022:	e0b3      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b024:	2340      	movs	r3, #64	; 0x40
 800b026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b02a:	e0af      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b02c:	2380      	movs	r3, #128	; 0x80
 800b02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b032:	bf00      	nop
 800b034:	e0aa      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a79      	ldr	r2, [pc, #484]	; (800b220 <UART_SetConfig+0x664>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d132      	bne.n	800b0a6 <UART_SetConfig+0x4ea>
 800b040:	4b76      	ldr	r3, [pc, #472]	; (800b21c <UART_SetConfig+0x660>)
 800b042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b044:	f003 0307 	and.w	r3, r3, #7
 800b048:	2b05      	cmp	r3, #5
 800b04a:	d827      	bhi.n	800b09c <UART_SetConfig+0x4e0>
 800b04c:	a201      	add	r2, pc, #4	; (adr r2, 800b054 <UART_SetConfig+0x498>)
 800b04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b052:	bf00      	nop
 800b054:	0800b06d 	.word	0x0800b06d
 800b058:	0800b075 	.word	0x0800b075
 800b05c:	0800b07d 	.word	0x0800b07d
 800b060:	0800b085 	.word	0x0800b085
 800b064:	0800b08d 	.word	0x0800b08d
 800b068:	0800b095 	.word	0x0800b095
 800b06c:	2300      	movs	r3, #0
 800b06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b072:	e08b      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b074:	2304      	movs	r3, #4
 800b076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b07a:	e087      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b07c:	2308      	movs	r3, #8
 800b07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b082:	e083      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b084:	2310      	movs	r3, #16
 800b086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b08a:	e07f      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b08c:	2320      	movs	r3, #32
 800b08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b092:	e07b      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b094:	2340      	movs	r3, #64	; 0x40
 800b096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b09a:	e077      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b09c:	2380      	movs	r3, #128	; 0x80
 800b09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0a2:	bf00      	nop
 800b0a4:	e072      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a5e      	ldr	r2, [pc, #376]	; (800b224 <UART_SetConfig+0x668>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d132      	bne.n	800b116 <UART_SetConfig+0x55a>
 800b0b0:	4b5a      	ldr	r3, [pc, #360]	; (800b21c <UART_SetConfig+0x660>)
 800b0b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0b4:	f003 0307 	and.w	r3, r3, #7
 800b0b8:	2b05      	cmp	r3, #5
 800b0ba:	d827      	bhi.n	800b10c <UART_SetConfig+0x550>
 800b0bc:	a201      	add	r2, pc, #4	; (adr r2, 800b0c4 <UART_SetConfig+0x508>)
 800b0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c2:	bf00      	nop
 800b0c4:	0800b0dd 	.word	0x0800b0dd
 800b0c8:	0800b0e5 	.word	0x0800b0e5
 800b0cc:	0800b0ed 	.word	0x0800b0ed
 800b0d0:	0800b0f5 	.word	0x0800b0f5
 800b0d4:	0800b0fd 	.word	0x0800b0fd
 800b0d8:	0800b105 	.word	0x0800b105
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0e2:	e053      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b0e4:	2304      	movs	r3, #4
 800b0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ea:	e04f      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b0ec:	2308      	movs	r3, #8
 800b0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0f2:	e04b      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b0f4:	2310      	movs	r3, #16
 800b0f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0fa:	e047      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b0fc:	2320      	movs	r3, #32
 800b0fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b102:	e043      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b104:	2340      	movs	r3, #64	; 0x40
 800b106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b10a:	e03f      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b10c:	2380      	movs	r3, #128	; 0x80
 800b10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b112:	bf00      	nop
 800b114:	e03a      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a43      	ldr	r2, [pc, #268]	; (800b228 <UART_SetConfig+0x66c>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d132      	bne.n	800b186 <UART_SetConfig+0x5ca>
 800b120:	4b3e      	ldr	r3, [pc, #248]	; (800b21c <UART_SetConfig+0x660>)
 800b122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b124:	f003 0307 	and.w	r3, r3, #7
 800b128:	2b05      	cmp	r3, #5
 800b12a:	d827      	bhi.n	800b17c <UART_SetConfig+0x5c0>
 800b12c:	a201      	add	r2, pc, #4	; (adr r2, 800b134 <UART_SetConfig+0x578>)
 800b12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b132:	bf00      	nop
 800b134:	0800b14d 	.word	0x0800b14d
 800b138:	0800b155 	.word	0x0800b155
 800b13c:	0800b15d 	.word	0x0800b15d
 800b140:	0800b165 	.word	0x0800b165
 800b144:	0800b16d 	.word	0x0800b16d
 800b148:	0800b175 	.word	0x0800b175
 800b14c:	2302      	movs	r3, #2
 800b14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b152:	e01b      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b154:	2304      	movs	r3, #4
 800b156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b15a:	e017      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b15c:	2308      	movs	r3, #8
 800b15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b162:	e013      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b164:	2310      	movs	r3, #16
 800b166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b16a:	e00f      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b16c:	2320      	movs	r3, #32
 800b16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b172:	e00b      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b174:	2340      	movs	r3, #64	; 0x40
 800b176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b17a:	e007      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b17c:	2380      	movs	r3, #128	; 0x80
 800b17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b182:	bf00      	nop
 800b184:	e002      	b.n	800b18c <UART_SetConfig+0x5d0>
 800b186:	2380      	movs	r3, #128	; 0x80
 800b188:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a25      	ldr	r2, [pc, #148]	; (800b228 <UART_SetConfig+0x66c>)
 800b192:	4293      	cmp	r3, r2
 800b194:	f040 80b8 	bne.w	800b308 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b198:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b19c:	2b08      	cmp	r3, #8
 800b19e:	d019      	beq.n	800b1d4 <UART_SetConfig+0x618>
 800b1a0:	2b08      	cmp	r3, #8
 800b1a2:	dc04      	bgt.n	800b1ae <UART_SetConfig+0x5f2>
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d009      	beq.n	800b1bc <UART_SetConfig+0x600>
 800b1a8:	2b04      	cmp	r3, #4
 800b1aa:	d00b      	beq.n	800b1c4 <UART_SetConfig+0x608>
 800b1ac:	e042      	b.n	800b234 <UART_SetConfig+0x678>
 800b1ae:	2b20      	cmp	r3, #32
 800b1b0:	d02b      	beq.n	800b20a <UART_SetConfig+0x64e>
 800b1b2:	2b40      	cmp	r3, #64	; 0x40
 800b1b4:	d02c      	beq.n	800b210 <UART_SetConfig+0x654>
 800b1b6:	2b10      	cmp	r3, #16
 800b1b8:	d014      	beq.n	800b1e4 <UART_SetConfig+0x628>
 800b1ba:	e03b      	b.n	800b234 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b1bc:	f7fe f88c 	bl	80092d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b1c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b1c2:	e03d      	b.n	800b240 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1c4:	f107 0314 	add.w	r3, r7, #20
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7fe f89b 	bl	8009304 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1d2:	e035      	b.n	800b240 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1d4:	f107 0308 	add.w	r3, r7, #8
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fe f9df 	bl	800959c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1e2:	e02d      	b.n	800b240 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1e4:	4b0d      	ldr	r3, [pc, #52]	; (800b21c <UART_SetConfig+0x660>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f003 0320 	and.w	r3, r3, #32
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d009      	beq.n	800b204 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1f0:	4b0a      	ldr	r3, [pc, #40]	; (800b21c <UART_SetConfig+0x660>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	08db      	lsrs	r3, r3, #3
 800b1f6:	f003 0303 	and.w	r3, r3, #3
 800b1fa:	4a0c      	ldr	r2, [pc, #48]	; (800b22c <UART_SetConfig+0x670>)
 800b1fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b200:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b202:	e01d      	b.n	800b240 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800b204:	4b09      	ldr	r3, [pc, #36]	; (800b22c <UART_SetConfig+0x670>)
 800b206:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b208:	e01a      	b.n	800b240 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b20a:	4b09      	ldr	r3, [pc, #36]	; (800b230 <UART_SetConfig+0x674>)
 800b20c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b20e:	e017      	b.n	800b240 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b214:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b216:	e013      	b.n	800b240 <UART_SetConfig+0x684>
 800b218:	40011400 	.word	0x40011400
 800b21c:	58024400 	.word	0x58024400
 800b220:	40007800 	.word	0x40007800
 800b224:	40007c00 	.word	0x40007c00
 800b228:	58000c00 	.word	0x58000c00
 800b22c:	03d09000 	.word	0x03d09000
 800b230:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b234:	2300      	movs	r3, #0
 800b236:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b23e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b242:	2b00      	cmp	r3, #0
 800b244:	f000 824d 	beq.w	800b6e2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24c:	4aad      	ldr	r2, [pc, #692]	; (800b504 <UART_SetConfig+0x948>)
 800b24e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b252:	461a      	mov	r2, r3
 800b254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b256:	fbb3 f3f2 	udiv	r3, r3, r2
 800b25a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	4613      	mov	r3, r2
 800b262:	005b      	lsls	r3, r3, #1
 800b264:	4413      	add	r3, r2
 800b266:	6a3a      	ldr	r2, [r7, #32]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d305      	bcc.n	800b278 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b272:	6a3a      	ldr	r2, [r7, #32]
 800b274:	429a      	cmp	r2, r3
 800b276:	d903      	bls.n	800b280 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b27e:	e230      	b.n	800b6e2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b282:	4618      	mov	r0, r3
 800b284:	f04f 0100 	mov.w	r1, #0
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28c:	4a9d      	ldr	r2, [pc, #628]	; (800b504 <UART_SetConfig+0x948>)
 800b28e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b292:	b29b      	uxth	r3, r3
 800b294:	f04f 0400 	mov.w	r4, #0
 800b298:	461a      	mov	r2, r3
 800b29a:	4623      	mov	r3, r4
 800b29c:	f7f5 f878 	bl	8000390 <__aeabi_uldivmod>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	f04f 0300 	mov.w	r3, #0
 800b2ac:	f04f 0400 	mov.w	r4, #0
 800b2b0:	0214      	lsls	r4, r2, #8
 800b2b2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b2b6:	020b      	lsls	r3, r1, #8
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	6852      	ldr	r2, [r2, #4]
 800b2bc:	0852      	lsrs	r2, r2, #1
 800b2be:	4611      	mov	r1, r2
 800b2c0:	f04f 0200 	mov.w	r2, #0
 800b2c4:	eb13 0b01 	adds.w	fp, r3, r1
 800b2c8:	eb44 0c02 	adc.w	ip, r4, r2
 800b2cc:	4658      	mov	r0, fp
 800b2ce:	4661      	mov	r1, ip
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	f04f 0400 	mov.w	r4, #0
 800b2d8:	461a      	mov	r2, r3
 800b2da:	4623      	mov	r3, r4
 800b2dc:	f7f5 f858 	bl	8000390 <__aeabi_uldivmod>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2ec:	d308      	bcc.n	800b300 <UART_SetConfig+0x744>
 800b2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2f4:	d204      	bcs.n	800b300 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2fc:	60da      	str	r2, [r3, #12]
 800b2fe:	e1f0      	b.n	800b6e2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b306:	e1ec      	b.n	800b6e2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	69db      	ldr	r3, [r3, #28]
 800b30c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b310:	f040 8100 	bne.w	800b514 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800b314:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b318:	2b40      	cmp	r3, #64	; 0x40
 800b31a:	f200 80b7 	bhi.w	800b48c <UART_SetConfig+0x8d0>
 800b31e:	a201      	add	r2, pc, #4	; (adr r2, 800b324 <UART_SetConfig+0x768>)
 800b320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b324:	0800b429 	.word	0x0800b429
 800b328:	0800b431 	.word	0x0800b431
 800b32c:	0800b48d 	.word	0x0800b48d
 800b330:	0800b48d 	.word	0x0800b48d
 800b334:	0800b439 	.word	0x0800b439
 800b338:	0800b48d 	.word	0x0800b48d
 800b33c:	0800b48d 	.word	0x0800b48d
 800b340:	0800b48d 	.word	0x0800b48d
 800b344:	0800b449 	.word	0x0800b449
 800b348:	0800b48d 	.word	0x0800b48d
 800b34c:	0800b48d 	.word	0x0800b48d
 800b350:	0800b48d 	.word	0x0800b48d
 800b354:	0800b48d 	.word	0x0800b48d
 800b358:	0800b48d 	.word	0x0800b48d
 800b35c:	0800b48d 	.word	0x0800b48d
 800b360:	0800b48d 	.word	0x0800b48d
 800b364:	0800b459 	.word	0x0800b459
 800b368:	0800b48d 	.word	0x0800b48d
 800b36c:	0800b48d 	.word	0x0800b48d
 800b370:	0800b48d 	.word	0x0800b48d
 800b374:	0800b48d 	.word	0x0800b48d
 800b378:	0800b48d 	.word	0x0800b48d
 800b37c:	0800b48d 	.word	0x0800b48d
 800b380:	0800b48d 	.word	0x0800b48d
 800b384:	0800b48d 	.word	0x0800b48d
 800b388:	0800b48d 	.word	0x0800b48d
 800b38c:	0800b48d 	.word	0x0800b48d
 800b390:	0800b48d 	.word	0x0800b48d
 800b394:	0800b48d 	.word	0x0800b48d
 800b398:	0800b48d 	.word	0x0800b48d
 800b39c:	0800b48d 	.word	0x0800b48d
 800b3a0:	0800b48d 	.word	0x0800b48d
 800b3a4:	0800b47f 	.word	0x0800b47f
 800b3a8:	0800b48d 	.word	0x0800b48d
 800b3ac:	0800b48d 	.word	0x0800b48d
 800b3b0:	0800b48d 	.word	0x0800b48d
 800b3b4:	0800b48d 	.word	0x0800b48d
 800b3b8:	0800b48d 	.word	0x0800b48d
 800b3bc:	0800b48d 	.word	0x0800b48d
 800b3c0:	0800b48d 	.word	0x0800b48d
 800b3c4:	0800b48d 	.word	0x0800b48d
 800b3c8:	0800b48d 	.word	0x0800b48d
 800b3cc:	0800b48d 	.word	0x0800b48d
 800b3d0:	0800b48d 	.word	0x0800b48d
 800b3d4:	0800b48d 	.word	0x0800b48d
 800b3d8:	0800b48d 	.word	0x0800b48d
 800b3dc:	0800b48d 	.word	0x0800b48d
 800b3e0:	0800b48d 	.word	0x0800b48d
 800b3e4:	0800b48d 	.word	0x0800b48d
 800b3e8:	0800b48d 	.word	0x0800b48d
 800b3ec:	0800b48d 	.word	0x0800b48d
 800b3f0:	0800b48d 	.word	0x0800b48d
 800b3f4:	0800b48d 	.word	0x0800b48d
 800b3f8:	0800b48d 	.word	0x0800b48d
 800b3fc:	0800b48d 	.word	0x0800b48d
 800b400:	0800b48d 	.word	0x0800b48d
 800b404:	0800b48d 	.word	0x0800b48d
 800b408:	0800b48d 	.word	0x0800b48d
 800b40c:	0800b48d 	.word	0x0800b48d
 800b410:	0800b48d 	.word	0x0800b48d
 800b414:	0800b48d 	.word	0x0800b48d
 800b418:	0800b48d 	.word	0x0800b48d
 800b41c:	0800b48d 	.word	0x0800b48d
 800b420:	0800b48d 	.word	0x0800b48d
 800b424:	0800b485 	.word	0x0800b485
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b428:	f7fc fffa 	bl	8008420 <HAL_RCC_GetPCLK1Freq>
 800b42c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b42e:	e033      	b.n	800b498 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b430:	f7fd f80c 	bl	800844c <HAL_RCC_GetPCLK2Freq>
 800b434:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b436:	e02f      	b.n	800b498 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b438:	f107 0314 	add.w	r3, r7, #20
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fd ff61 	bl	8009304 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b446:	e027      	b.n	800b498 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b448:	f107 0308 	add.w	r3, r7, #8
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7fe f8a5 	bl	800959c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b456:	e01f      	b.n	800b498 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b458:	4b2b      	ldr	r3, [pc, #172]	; (800b508 <UART_SetConfig+0x94c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 0320 	and.w	r3, r3, #32
 800b460:	2b00      	cmp	r3, #0
 800b462:	d009      	beq.n	800b478 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b464:	4b28      	ldr	r3, [pc, #160]	; (800b508 <UART_SetConfig+0x94c>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	08db      	lsrs	r3, r3, #3
 800b46a:	f003 0303 	and.w	r3, r3, #3
 800b46e:	4a27      	ldr	r2, [pc, #156]	; (800b50c <UART_SetConfig+0x950>)
 800b470:	fa22 f303 	lsr.w	r3, r2, r3
 800b474:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b476:	e00f      	b.n	800b498 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800b478:	4b24      	ldr	r3, [pc, #144]	; (800b50c <UART_SetConfig+0x950>)
 800b47a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b47c:	e00c      	b.n	800b498 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b47e:	4b24      	ldr	r3, [pc, #144]	; (800b510 <UART_SetConfig+0x954>)
 800b480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b482:	e009      	b.n	800b498 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b488:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b48a:	e005      	b.n	800b498 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800b48c:	2300      	movs	r3, #0
 800b48e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b490:	2301      	movs	r3, #1
 800b492:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b496:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f000 8121 	beq.w	800b6e2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a4:	4a17      	ldr	r2, [pc, #92]	; (800b504 <UART_SetConfig+0x948>)
 800b4a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4b2:	005a      	lsls	r2, r3, #1
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	085b      	lsrs	r3, r3, #1
 800b4ba:	441a      	add	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ca:	2b0f      	cmp	r3, #15
 800b4cc:	d916      	bls.n	800b4fc <UART_SetConfig+0x940>
 800b4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4d4:	d212      	bcs.n	800b4fc <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	f023 030f 	bic.w	r3, r3, #15
 800b4de:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e2:	085b      	lsrs	r3, r3, #1
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	f003 0307 	and.w	r3, r3, #7
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b4f8:	60da      	str	r2, [r3, #12]
 800b4fa:	e0f2      	b.n	800b6e2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b502:	e0ee      	b.n	800b6e2 <UART_SetConfig+0xb26>
 800b504:	08022978 	.word	0x08022978
 800b508:	58024400 	.word	0x58024400
 800b50c:	03d09000 	.word	0x03d09000
 800b510:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800b514:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b518:	2b40      	cmp	r3, #64	; 0x40
 800b51a:	f200 80b7 	bhi.w	800b68c <UART_SetConfig+0xad0>
 800b51e:	a201      	add	r2, pc, #4	; (adr r2, 800b524 <UART_SetConfig+0x968>)
 800b520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b524:	0800b629 	.word	0x0800b629
 800b528:	0800b631 	.word	0x0800b631
 800b52c:	0800b68d 	.word	0x0800b68d
 800b530:	0800b68d 	.word	0x0800b68d
 800b534:	0800b639 	.word	0x0800b639
 800b538:	0800b68d 	.word	0x0800b68d
 800b53c:	0800b68d 	.word	0x0800b68d
 800b540:	0800b68d 	.word	0x0800b68d
 800b544:	0800b649 	.word	0x0800b649
 800b548:	0800b68d 	.word	0x0800b68d
 800b54c:	0800b68d 	.word	0x0800b68d
 800b550:	0800b68d 	.word	0x0800b68d
 800b554:	0800b68d 	.word	0x0800b68d
 800b558:	0800b68d 	.word	0x0800b68d
 800b55c:	0800b68d 	.word	0x0800b68d
 800b560:	0800b68d 	.word	0x0800b68d
 800b564:	0800b659 	.word	0x0800b659
 800b568:	0800b68d 	.word	0x0800b68d
 800b56c:	0800b68d 	.word	0x0800b68d
 800b570:	0800b68d 	.word	0x0800b68d
 800b574:	0800b68d 	.word	0x0800b68d
 800b578:	0800b68d 	.word	0x0800b68d
 800b57c:	0800b68d 	.word	0x0800b68d
 800b580:	0800b68d 	.word	0x0800b68d
 800b584:	0800b68d 	.word	0x0800b68d
 800b588:	0800b68d 	.word	0x0800b68d
 800b58c:	0800b68d 	.word	0x0800b68d
 800b590:	0800b68d 	.word	0x0800b68d
 800b594:	0800b68d 	.word	0x0800b68d
 800b598:	0800b68d 	.word	0x0800b68d
 800b59c:	0800b68d 	.word	0x0800b68d
 800b5a0:	0800b68d 	.word	0x0800b68d
 800b5a4:	0800b67f 	.word	0x0800b67f
 800b5a8:	0800b68d 	.word	0x0800b68d
 800b5ac:	0800b68d 	.word	0x0800b68d
 800b5b0:	0800b68d 	.word	0x0800b68d
 800b5b4:	0800b68d 	.word	0x0800b68d
 800b5b8:	0800b68d 	.word	0x0800b68d
 800b5bc:	0800b68d 	.word	0x0800b68d
 800b5c0:	0800b68d 	.word	0x0800b68d
 800b5c4:	0800b68d 	.word	0x0800b68d
 800b5c8:	0800b68d 	.word	0x0800b68d
 800b5cc:	0800b68d 	.word	0x0800b68d
 800b5d0:	0800b68d 	.word	0x0800b68d
 800b5d4:	0800b68d 	.word	0x0800b68d
 800b5d8:	0800b68d 	.word	0x0800b68d
 800b5dc:	0800b68d 	.word	0x0800b68d
 800b5e0:	0800b68d 	.word	0x0800b68d
 800b5e4:	0800b68d 	.word	0x0800b68d
 800b5e8:	0800b68d 	.word	0x0800b68d
 800b5ec:	0800b68d 	.word	0x0800b68d
 800b5f0:	0800b68d 	.word	0x0800b68d
 800b5f4:	0800b68d 	.word	0x0800b68d
 800b5f8:	0800b68d 	.word	0x0800b68d
 800b5fc:	0800b68d 	.word	0x0800b68d
 800b600:	0800b68d 	.word	0x0800b68d
 800b604:	0800b68d 	.word	0x0800b68d
 800b608:	0800b68d 	.word	0x0800b68d
 800b60c:	0800b68d 	.word	0x0800b68d
 800b610:	0800b68d 	.word	0x0800b68d
 800b614:	0800b68d 	.word	0x0800b68d
 800b618:	0800b68d 	.word	0x0800b68d
 800b61c:	0800b68d 	.word	0x0800b68d
 800b620:	0800b68d 	.word	0x0800b68d
 800b624:	0800b685 	.word	0x0800b685
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b628:	f7fc fefa 	bl	8008420 <HAL_RCC_GetPCLK1Freq>
 800b62c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b62e:	e033      	b.n	800b698 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b630:	f7fc ff0c 	bl	800844c <HAL_RCC_GetPCLK2Freq>
 800b634:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b636:	e02f      	b.n	800b698 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b638:	f107 0314 	add.w	r3, r7, #20
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fd fe61 	bl	8009304 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b646:	e027      	b.n	800b698 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b648:	f107 0308 	add.w	r3, r7, #8
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7fd ffa5 	bl	800959c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b656:	e01f      	b.n	800b698 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b658:	4b2c      	ldr	r3, [pc, #176]	; (800b70c <UART_SetConfig+0xb50>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 0320 	and.w	r3, r3, #32
 800b660:	2b00      	cmp	r3, #0
 800b662:	d009      	beq.n	800b678 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b664:	4b29      	ldr	r3, [pc, #164]	; (800b70c <UART_SetConfig+0xb50>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	08db      	lsrs	r3, r3, #3
 800b66a:	f003 0303 	and.w	r3, r3, #3
 800b66e:	4a28      	ldr	r2, [pc, #160]	; (800b710 <UART_SetConfig+0xb54>)
 800b670:	fa22 f303 	lsr.w	r3, r2, r3
 800b674:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b676:	e00f      	b.n	800b698 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800b678:	4b25      	ldr	r3, [pc, #148]	; (800b710 <UART_SetConfig+0xb54>)
 800b67a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b67c:	e00c      	b.n	800b698 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b67e:	4b25      	ldr	r3, [pc, #148]	; (800b714 <UART_SetConfig+0xb58>)
 800b680:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b682:	e009      	b.n	800b698 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b688:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b68a:	e005      	b.n	800b698 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800b68c:	2300      	movs	r3, #0
 800b68e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b696:	bf00      	nop
    }

    if (pclk != 0U)
 800b698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d021      	beq.n	800b6e2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a2:	4a1d      	ldr	r2, [pc, #116]	; (800b718 <UART_SetConfig+0xb5c>)
 800b6a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	085b      	lsrs	r3, r3, #1
 800b6b6:	441a      	add	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c6:	2b0f      	cmp	r3, #15
 800b6c8:	d908      	bls.n	800b6dc <UART_SetConfig+0xb20>
 800b6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6d0:	d204      	bcs.n	800b6dc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6d8:	60da      	str	r2, [r3, #12]
 800b6da:	e002      	b.n	800b6e2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b6fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b702:	4618      	mov	r0, r3
 800b704:	3738      	adds	r7, #56	; 0x38
 800b706:	46bd      	mov	sp, r7
 800b708:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b70c:	58024400 	.word	0x58024400
 800b710:	03d09000 	.word	0x03d09000
 800b714:	003d0900 	.word	0x003d0900
 800b718:	08022978 	.word	0x08022978

0800b71c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00a      	beq.n	800b746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	430a      	orrs	r2, r1
 800b744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b74a:	f003 0302 	and.w	r3, r3, #2
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00a      	beq.n	800b768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	430a      	orrs	r2, r1
 800b766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b76c:	f003 0304 	and.w	r3, r3, #4
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00a      	beq.n	800b78a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	430a      	orrs	r2, r1
 800b788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78e:	f003 0308 	and.w	r3, r3, #8
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	430a      	orrs	r2, r1
 800b7aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b0:	f003 0310 	and.w	r3, r3, #16
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00a      	beq.n	800b7ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	430a      	orrs	r2, r1
 800b7cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d2:	f003 0320 	and.w	r3, r3, #32
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00a      	beq.n	800b7f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	430a      	orrs	r2, r1
 800b7ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d01a      	beq.n	800b832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	430a      	orrs	r2, r1
 800b810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b81a:	d10a      	bne.n	800b832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	430a      	orrs	r2, r1
 800b830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00a      	beq.n	800b854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	430a      	orrs	r2, r1
 800b852:	605a      	str	r2, [r3, #4]
  }
}
 800b854:	bf00      	nop
 800b856:	370c      	adds	r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af02      	add	r7, sp, #8
 800b866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b870:	f7f7 f988 	bl	8002b84 <HAL_GetTick>
 800b874:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 0308 	and.w	r3, r3, #8
 800b880:	2b08      	cmp	r3, #8
 800b882:	d10e      	bne.n	800b8a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f82c 	bl	800b8f0 <UART_WaitOnFlagUntilTimeout>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d001      	beq.n	800b8a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b89e:	2303      	movs	r3, #3
 800b8a0:	e022      	b.n	800b8e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f003 0304 	and.w	r3, r3, #4
 800b8ac:	2b04      	cmp	r3, #4
 800b8ae:	d10e      	bne.n	800b8ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f816 	bl	800b8f0 <UART_WaitOnFlagUntilTimeout>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d001      	beq.n	800b8ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	e00c      	b.n	800b8e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2220      	movs	r2, #32
 800b8d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2220      	movs	r2, #32
 800b8da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	603b      	str	r3, [r7, #0]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b900:	e062      	b.n	800b9c8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b908:	d05e      	beq.n	800b9c8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b90a:	f7f7 f93b 	bl	8002b84 <HAL_GetTick>
 800b90e:	4602      	mov	r2, r0
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	69ba      	ldr	r2, [r7, #24]
 800b916:	429a      	cmp	r2, r3
 800b918:	d302      	bcc.n	800b920 <UART_WaitOnFlagUntilTimeout+0x30>
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d11d      	bne.n	800b95c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b92e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	689a      	ldr	r2, [r3, #8]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f022 0201 	bic.w	r2, r2, #1
 800b93e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2220      	movs	r2, #32
 800b944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2220      	movs	r2, #32
 800b94c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b958:	2303      	movs	r3, #3
 800b95a:	e045      	b.n	800b9e8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 0304 	and.w	r3, r3, #4
 800b966:	2b00      	cmp	r3, #0
 800b968:	d02e      	beq.n	800b9c8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	69db      	ldr	r3, [r3, #28]
 800b970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b978:	d126      	bne.n	800b9c8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b982:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b992:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	689a      	ldr	r2, [r3, #8]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f022 0201 	bic.w	r2, r2, #1
 800b9a2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2220      	movs	r2, #32
 800b9b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2220      	movs	r2, #32
 800b9b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e00f      	b.n	800b9e8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	69da      	ldr	r2, [r3, #28]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	bf0c      	ite	eq
 800b9d8:	2301      	moveq	r3, #1
 800b9da:	2300      	movne	r3, #0
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	461a      	mov	r2, r3
 800b9e0:	79fb      	ldrb	r3, [r7, #7]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d08d      	beq.n	800b902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d101      	bne.n	800ba06 <HAL_UARTEx_DisableFifoMode+0x16>
 800ba02:	2302      	movs	r3, #2
 800ba04:	e027      	b.n	800ba56 <HAL_UARTEx_DisableFifoMode+0x66>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2224      	movs	r2, #36	; 0x24
 800ba12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f022 0201 	bic.w	r2, r2, #1
 800ba2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ba34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2220      	movs	r2, #32
 800ba48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b084      	sub	sp, #16
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d101      	bne.n	800ba7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba76:	2302      	movs	r3, #2
 800ba78:	e02d      	b.n	800bad6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2224      	movs	r2, #36	; 0x24
 800ba86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f022 0201 	bic.w	r2, r2, #1
 800baa0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	683a      	ldr	r2, [r7, #0]
 800bab2:	430a      	orrs	r2, r1
 800bab4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f850 	bl	800bb5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2220      	movs	r2, #32
 800bac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b084      	sub	sp, #16
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d101      	bne.n	800baf6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800baf2:	2302      	movs	r3, #2
 800baf4:	e02d      	b.n	800bb52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2201      	movs	r2, #1
 800bafa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2224      	movs	r2, #36	; 0x24
 800bb02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f022 0201 	bic.w	r2, r2, #1
 800bb1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	683a      	ldr	r2, [r7, #0]
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f812 	bl	800bb5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2220      	movs	r2, #32
 800bb44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
	...

0800bb5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b089      	sub	sp, #36	; 0x24
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bb64:	4a2f      	ldr	r2, [pc, #188]	; (800bc24 <UARTEx_SetNbDataToProcess+0xc8>)
 800bb66:	f107 0314 	add.w	r3, r7, #20
 800bb6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb6e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bb72:	4a2d      	ldr	r2, [pc, #180]	; (800bc28 <UARTEx_SetNbDataToProcess+0xcc>)
 800bb74:	f107 030c 	add.w	r3, r7, #12
 800bb78:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb7c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d108      	bne.n	800bb9a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb98:	e03d      	b.n	800bc16 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb9a:	2310      	movs	r3, #16
 800bb9c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb9e:	2310      	movs	r3, #16
 800bba0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	0e5b      	lsrs	r3, r3, #25
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	f003 0307 	and.w	r3, r3, #7
 800bbb0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	0f5b      	lsrs	r3, r3, #29
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	f003 0307 	and.w	r3, r3, #7
 800bbc0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bbc2:	7fbb      	ldrb	r3, [r7, #30]
 800bbc4:	7f3a      	ldrb	r2, [r7, #28]
 800bbc6:	f107 0120 	add.w	r1, r7, #32
 800bbca:	440a      	add	r2, r1
 800bbcc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bbd0:	fb02 f303 	mul.w	r3, r2, r3
 800bbd4:	7f3a      	ldrb	r2, [r7, #28]
 800bbd6:	f107 0120 	add.w	r1, r7, #32
 800bbda:	440a      	add	r2, r1
 800bbdc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bbe0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bbec:	7ffb      	ldrb	r3, [r7, #31]
 800bbee:	7f7a      	ldrb	r2, [r7, #29]
 800bbf0:	f107 0120 	add.w	r1, r7, #32
 800bbf4:	440a      	add	r2, r1
 800bbf6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bbfa:	fb02 f303 	mul.w	r3, r2, r3
 800bbfe:	7f7a      	ldrb	r2, [r7, #29]
 800bc00:	f107 0120 	add.w	r1, r7, #32
 800bc04:	440a      	add	r2, r1
 800bc06:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bc0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bc16:	bf00      	nop
 800bc18:	3724      	adds	r7, #36	; 0x24
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	0801f890 	.word	0x0801f890
 800bc28:	0801f898 	.word	0x0801f898

0800bc2c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800bc32:	2100      	movs	r1, #0
 800bc34:	2000      	movs	r0, #0
 800bc36:	f00f ffd7 	bl	801bbe8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800bc3a:	4b23      	ldr	r3, [pc, #140]	; (800bcc8 <MX_LWIP_Init+0x9c>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800bc40:	4b22      	ldr	r3, [pc, #136]	; (800bccc <MX_LWIP_Init+0xa0>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800bc46:	4b22      	ldr	r3, [pc, #136]	; (800bcd0 <MX_LWIP_Init+0xa4>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bc4c:	4b21      	ldr	r3, [pc, #132]	; (800bcd4 <MX_LWIP_Init+0xa8>)
 800bc4e:	9302      	str	r3, [sp, #8]
 800bc50:	4b21      	ldr	r3, [pc, #132]	; (800bcd8 <MX_LWIP_Init+0xac>)
 800bc52:	9301      	str	r3, [sp, #4]
 800bc54:	2300      	movs	r3, #0
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	4b1d      	ldr	r3, [pc, #116]	; (800bcd0 <MX_LWIP_Init+0xa4>)
 800bc5a:	4a1c      	ldr	r2, [pc, #112]	; (800bccc <MX_LWIP_Init+0xa0>)
 800bc5c:	491a      	ldr	r1, [pc, #104]	; (800bcc8 <MX_LWIP_Init+0x9c>)
 800bc5e:	481f      	ldr	r0, [pc, #124]	; (800bcdc <MX_LWIP_Init+0xb0>)
 800bc60:	f009 fb20 	bl	80152a4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bc64:	481d      	ldr	r0, [pc, #116]	; (800bcdc <MX_LWIP_Init+0xb0>)
 800bc66:	f009 fcd7 	bl	8015618 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800bc6a:	4b1c      	ldr	r3, [pc, #112]	; (800bcdc <MX_LWIP_Init+0xb0>)
 800bc6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc70:	089b      	lsrs	r3, r3, #2
 800bc72:	f003 0301 	and.w	r3, r3, #1
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d003      	beq.n	800bc84 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800bc7c:	4817      	ldr	r0, [pc, #92]	; (800bcdc <MX_LWIP_Init+0xb0>)
 800bc7e:	f009 fcdb 	bl	8015638 <netif_set_up>
 800bc82:	e002      	b.n	800bc8a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800bc84:	4815      	ldr	r0, [pc, #84]	; (800bcdc <MX_LWIP_Init+0xb0>)
 800bc86:	f009 fd43 	bl	8015710 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bc8a:	4915      	ldr	r1, [pc, #84]	; (800bce0 <MX_LWIP_Init+0xb4>)
 800bc8c:	4813      	ldr	r0, [pc, #76]	; (800bcdc <MX_LWIP_Init+0xb0>)
 800bc8e:	f009 fdd9 	bl	8015844 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bc92:	2224      	movs	r2, #36	; 0x24
 800bc94:	2100      	movs	r1, #0
 800bc96:	4813      	ldr	r0, [pc, #76]	; (800bce4 <MX_LWIP_Init+0xb8>)
 800bc98:	f011 f8eb 	bl	801ce72 <memset>
  attributes.name = "EthLink";
 800bc9c:	4b11      	ldr	r3, [pc, #68]	; (800bce4 <MX_LWIP_Init+0xb8>)
 800bc9e:	4a12      	ldr	r2, [pc, #72]	; (800bce8 <MX_LWIP_Init+0xbc>)
 800bca0:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bca2:	4b10      	ldr	r3, [pc, #64]	; (800bce4 <MX_LWIP_Init+0xb8>)
 800bca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bca8:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800bcaa:	4b0e      	ldr	r3, [pc, #56]	; (800bce4 <MX_LWIP_Init+0xb8>)
 800bcac:	2210      	movs	r2, #16
 800bcae:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800bcb0:	4a0c      	ldr	r2, [pc, #48]	; (800bce4 <MX_LWIP_Init+0xb8>)
 800bcb2:	490a      	ldr	r1, [pc, #40]	; (800bcdc <MX_LWIP_Init+0xb0>)
 800bcb4:	480d      	ldr	r0, [pc, #52]	; (800bcec <MX_LWIP_Init+0xc0>)
 800bcb6:	f000 fd37 	bl	800c728 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800bcba:	4808      	ldr	r0, [pc, #32]	; (800bcdc <MX_LWIP_Init+0xb0>)
 800bcbc:	f004 feb0 	bl	8010a20 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bcc0:	bf00      	nop
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20008778 	.word	0x20008778
 800bccc:	2000877c 	.word	0x2000877c
 800bcd0:	20008780 	.word	0x20008780
 800bcd4:	0801bb25 	.word	0x0801bb25
 800bcd8:	0800c3c1 	.word	0x0800c3c1
 800bcdc:	20008740 	.word	0x20008740
 800bce0:	0800bcf1 	.word	0x0800bcf1
 800bce4:	2000871c 	.word	0x2000871c
 800bce8:	0801f8a0 	.word	0x0801f8a0
 800bcec:	0800c4e9 	.word	0x0800c4e9

0800bcf0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b087      	sub	sp, #28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800bd16:	2320      	movs	r3, #32
 800bd18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bd1a:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800bd1e:	e00b      	b.n	800bd38 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800bd20:	4a0c      	ldr	r2, [pc, #48]	; (800bd54 <SCB_InvalidateDCache_by_Addr+0x50>)
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800bd30:	697a      	ldr	r2, [r7, #20]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	dcf0      	bgt.n	800bd20 <SCB_InvalidateDCache_by_Addr+0x1c>
 800bd3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bd42:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800bd46:	bf00      	nop
 800bd48:	371c      	adds	r7, #28
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	e000ed00 	.word	0xe000ed00

0800bd58 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b08e      	sub	sp, #56	; 0x38
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd64:	2200      	movs	r2, #0
 800bd66:	601a      	str	r2, [r3, #0]
 800bd68:	605a      	str	r2, [r3, #4]
 800bd6a:	609a      	str	r2, [r3, #8]
 800bd6c:	60da      	str	r2, [r3, #12]
 800bd6e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a5d      	ldr	r2, [pc, #372]	; (800beec <HAL_ETH_MspInit+0x194>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	f040 80b3 	bne.w	800bee2 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800bd7c:	4b5c      	ldr	r3, [pc, #368]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bd7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd82:	4a5b      	ldr	r2, [pc, #364]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bd84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bd8c:	4b58      	ldr	r3, [pc, #352]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bd8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd96:	623b      	str	r3, [r7, #32]
 800bd98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800bd9a:	4b55      	ldr	r3, [pc, #340]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bd9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bda0:	4a53      	ldr	r2, [pc, #332]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bda2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bda6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bdaa:	4b51      	ldr	r3, [pc, #324]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bdac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bdb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdb4:	61fb      	str	r3, [r7, #28]
 800bdb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800bdb8:	4b4d      	ldr	r3, [pc, #308]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bdba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bdbe:	4a4c      	ldr	r2, [pc, #304]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bdc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdc4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bdc8:	4b49      	ldr	r3, [pc, #292]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bdca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bdce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdd2:	61bb      	str	r3, [r7, #24]
 800bdd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bdd6:	4b46      	ldr	r3, [pc, #280]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bdd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bddc:	4a44      	ldr	r2, [pc, #272]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bdde:	f043 0304 	orr.w	r3, r3, #4
 800bde2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bde6:	4b42      	ldr	r3, [pc, #264]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bde8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdec:	f003 0304 	and.w	r3, r3, #4
 800bdf0:	617b      	str	r3, [r7, #20]
 800bdf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdf4:	4b3e      	ldr	r3, [pc, #248]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bdf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdfa:	4a3d      	ldr	r2, [pc, #244]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800bdfc:	f043 0301 	orr.w	r3, r3, #1
 800be00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be04:	4b3a      	ldr	r3, [pc, #232]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800be06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be0a:	f003 0301 	and.w	r3, r3, #1
 800be0e:	613b      	str	r3, [r7, #16]
 800be10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be12:	4b37      	ldr	r3, [pc, #220]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800be14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be18:	4a35      	ldr	r2, [pc, #212]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800be1a:	f043 0302 	orr.w	r3, r3, #2
 800be1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be22:	4b33      	ldr	r3, [pc, #204]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800be24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be28:	f003 0302 	and.w	r3, r3, #2
 800be2c:	60fb      	str	r3, [r7, #12]
 800be2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800be30:	4b2f      	ldr	r3, [pc, #188]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800be32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be36:	4a2e      	ldr	r2, [pc, #184]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800be38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be40:	4b2b      	ldr	r3, [pc, #172]	; (800bef0 <HAL_ETH_MspInit+0x198>)
 800be42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be4a:	60bb      	str	r3, [r7, #8]
 800be4c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800be4e:	2332      	movs	r3, #50	; 0x32
 800be50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be52:	2302      	movs	r3, #2
 800be54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be56:	2300      	movs	r3, #0
 800be58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be5a:	2303      	movs	r3, #3
 800be5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800be5e:	230b      	movs	r3, #11
 800be60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be66:	4619      	mov	r1, r3
 800be68:	4822      	ldr	r0, [pc, #136]	; (800bef4 <HAL_ETH_MspInit+0x19c>)
 800be6a:	f7fa fea5 	bl	8006bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800be6e:	2386      	movs	r3, #134	; 0x86
 800be70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be72:	2302      	movs	r3, #2
 800be74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be76:	2300      	movs	r3, #0
 800be78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be7a:	2303      	movs	r3, #3
 800be7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800be7e:	230b      	movs	r3, #11
 800be80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be86:	4619      	mov	r1, r3
 800be88:	481b      	ldr	r0, [pc, #108]	; (800bef8 <HAL_ETH_MspInit+0x1a0>)
 800be8a:	f7fa fe95 	bl	8006bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800be8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800be92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be94:	2302      	movs	r3, #2
 800be96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be98:	2300      	movs	r3, #0
 800be9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be9c:	2303      	movs	r3, #3
 800be9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bea0:	230b      	movs	r3, #11
 800bea2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bea8:	4619      	mov	r1, r3
 800beaa:	4814      	ldr	r0, [pc, #80]	; (800befc <HAL_ETH_MspInit+0x1a4>)
 800beac:	f7fa fe84 	bl	8006bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800beb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800beb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800beb6:	2302      	movs	r3, #2
 800beb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beba:	2300      	movs	r3, #0
 800bebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bebe:	2303      	movs	r3, #3
 800bec0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bec2:	230b      	movs	r3, #11
 800bec4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800beca:	4619      	mov	r1, r3
 800becc:	480c      	ldr	r0, [pc, #48]	; (800bf00 <HAL_ETH_MspInit+0x1a8>)
 800bece:	f7fa fe73 	bl	8006bb8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800bed2:	2200      	movs	r2, #0
 800bed4:	2105      	movs	r1, #5
 800bed6:	203d      	movs	r0, #61	; 0x3d
 800bed8:	f7f6 ff38 	bl	8002d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bedc:	203d      	movs	r0, #61	; 0x3d
 800bede:	f7f6 ff4f 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bee2:	bf00      	nop
 800bee4:	3738      	adds	r7, #56	; 0x38
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	40028000 	.word	0x40028000
 800bef0:	58024400 	.word	0x58024400
 800bef4:	58020800 	.word	0x58020800
 800bef8:	58020000 	.word	0x58020000
 800befc:	58020400 	.word	0x58020400
 800bf00:	58021800 	.word	0x58021800

0800bf04 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800bf0c:	4b04      	ldr	r3, [pc, #16]	; (800bf20 <HAL_ETH_RxCpltCallback+0x1c>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f000 ff29 	bl	800cd68 <osSemaphoreRelease>
}
 800bf16:	bf00      	nop
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	20001abc 	.word	0x20001abc

0800bf24 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b0ac      	sub	sp, #176	; 0xb0
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t idx = 0;
 800bf32:	2300      	movs	r3, #0
 800bf34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bf3e:	4b8f      	ldr	r3, [pc, #572]	; (800c17c <low_level_init+0x258>)
 800bf40:	4a8f      	ldr	r2, [pc, #572]	; (800c180 <low_level_init+0x25c>)
 800bf42:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800bf44:	2300      	movs	r3, #0
 800bf46:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800bf48:	2380      	movs	r3, #128	; 0x80
 800bf4a:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800bf4c:	23e1      	movs	r3, #225	; 0xe1
 800bf4e:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800bf50:	2300      	movs	r3, #0
 800bf52:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800bf54:	2300      	movs	r3, #0
 800bf56:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800bf5c:	4a87      	ldr	r2, [pc, #540]	; (800c17c <low_level_init+0x258>)
 800bf5e:	f107 030c 	add.w	r3, r7, #12
 800bf62:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bf64:	4b85      	ldr	r3, [pc, #532]	; (800c17c <low_level_init+0x258>)
 800bf66:	2201      	movs	r2, #1
 800bf68:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bf6a:	4b84      	ldr	r3, [pc, #528]	; (800c17c <low_level_init+0x258>)
 800bf6c:	4a85      	ldr	r2, [pc, #532]	; (800c184 <low_level_init+0x260>)
 800bf6e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bf70:	4b82      	ldr	r3, [pc, #520]	; (800c17c <low_level_init+0x258>)
 800bf72:	4a85      	ldr	r2, [pc, #532]	; (800c188 <low_level_init+0x264>)
 800bf74:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800bf76:	4b81      	ldr	r3, [pc, #516]	; (800c17c <low_level_init+0x258>)
 800bf78:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bf7c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bf7e:	487f      	ldr	r0, [pc, #508]	; (800c17c <low_level_init+0x258>)
 800bf80:	f7f8 ff88 	bl	8004e94 <HAL_ETH_Init>
 800bf84:	4603      	mov	r3, r0
 800bf86:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bf8a:	2234      	movs	r2, #52	; 0x34
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	487f      	ldr	r0, [pc, #508]	; (800c18c <low_level_init+0x268>)
 800bf90:	f010 ff6f 	bl	801ce72 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bf94:	4b7d      	ldr	r3, [pc, #500]	; (800c18c <low_level_init+0x268>)
 800bf96:	2221      	movs	r2, #33	; 0x21
 800bf98:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bf9a:	4b7c      	ldr	r3, [pc, #496]	; (800c18c <low_level_init+0x268>)
 800bf9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800bfa0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bfa2:	4b7a      	ldr	r3, [pc, #488]	; (800c18c <low_level_init+0x268>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bfa8:	4879      	ldr	r0, [pc, #484]	; (800c190 <low_level_init+0x26c>)
 800bfaa:	f009 f835 	bl	8015018 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2206      	movs	r2, #6
 800bfb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bfb6:	4b71      	ldr	r3, [pc, #452]	; (800c17c <low_level_init+0x258>)
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	781a      	ldrb	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bfc2:	4b6e      	ldr	r3, [pc, #440]	; (800c17c <low_level_init+0x258>)
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	785a      	ldrb	r2, [r3, #1]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bfce:	4b6b      	ldr	r3, [pc, #428]	; (800c17c <low_level_init+0x258>)
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	789a      	ldrb	r2, [r3, #2]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bfda:	4b68      	ldr	r3, [pc, #416]	; (800c17c <low_level_init+0x258>)
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	78da      	ldrb	r2, [r3, #3]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bfe6:	4b65      	ldr	r3, [pc, #404]	; (800c17c <low_level_init+0x258>)
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	791a      	ldrb	r2, [r3, #4]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bff2:	4b62      	ldr	r3, [pc, #392]	; (800c17c <low_level_init+0x258>)
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	795a      	ldrb	r2, [r3, #5]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c004:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c00c:	f043 030a 	orr.w	r3, r3, #10
 800c010:	b2da      	uxtb	r2, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800c018:	2300      	movs	r3, #0
 800c01a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c01e:	e012      	b.n	800c046 <low_level_init+0x122>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800c020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c024:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c028:	fb02 f303 	mul.w	r3, r2, r3
 800c02c:	4a59      	ldr	r2, [pc, #356]	; (800c194 <low_level_init+0x270>)
 800c02e:	441a      	add	r2, r3
 800c030:	2300      	movs	r3, #0
 800c032:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800c036:	4851      	ldr	r0, [pc, #324]	; (800c17c <low_level_init+0x258>)
 800c038:	f7f9 f806 	bl	8005048 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800c03c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c040:	3301      	adds	r3, #1
 800c042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c04a:	2b03      	cmp	r3, #3
 800c04c:	d9e8      	bls.n	800c020 <low_level_init+0xfc>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800c04e:	2200      	movs	r2, #0
 800c050:	2101      	movs	r1, #1
 800c052:	2001      	movs	r0, #1
 800c054:	f000 fd84 	bl	800cb60 <osSemaphoreNew>
 800c058:	4602      	mov	r2, r0
 800c05a:	4b4f      	ldr	r3, [pc, #316]	; (800c198 <low_level_init+0x274>)
 800c05c:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c05e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c062:	2224      	movs	r2, #36	; 0x24
 800c064:	2100      	movs	r1, #0
 800c066:	4618      	mov	r0, r3
 800c068:	f010 ff03 	bl	801ce72 <memset>
  attributes.name = "EthIf";
 800c06c:	4b4b      	ldr	r3, [pc, #300]	; (800c19c <low_level_init+0x278>)
 800c06e:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c070:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800c074:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityNormal;
 800c078:	2318      	movs	r3, #24
 800c07a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 800c07e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c082:	461a      	mov	r2, r3
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	4846      	ldr	r0, [pc, #280]	; (800c1a0 <low_level_init+0x27c>)
 800c088:	f000 fb4e 	bl	800c728 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c08c:	4945      	ldr	r1, [pc, #276]	; (800c1a4 <low_level_init+0x280>)
 800c08e:	4846      	ldr	r0, [pc, #280]	; (800c1a8 <low_level_init+0x284>)
 800c090:	f7f6 fbd1 	bl	8002836 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800c094:	4844      	ldr	r0, [pc, #272]	; (800c1a8 <low_level_init+0x284>)
 800c096:	f7f6 fc00 	bl	800289a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800c09a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d165      	bne.n	800c16e <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c0a2:	4841      	ldr	r0, [pc, #260]	; (800c1a8 <low_level_init+0x284>)
 800c0a4:	f7f6 fc96 	bl	80029d4 <LAN8742_GetLinkState>
 800c0a8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c0ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	dc06      	bgt.n	800c0c2 <low_level_init+0x19e>
    {
      netif_set_link_down(netif);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f009 fb95 	bl	80157e4 <netif_set_link_down>
      netif_set_down(netif);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f009 fb28 	bl	8015710 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800c0c0:	e057      	b.n	800c172 <low_level_init+0x24e>
      switch (PHYLinkState)
 800c0c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0c6:	3b02      	subs	r3, #2
 800c0c8:	2b03      	cmp	r3, #3
 800c0ca:	d82b      	bhi.n	800c124 <low_level_init+0x200>
 800c0cc:	a201      	add	r2, pc, #4	; (adr r2, 800c0d4 <low_level_init+0x1b0>)
 800c0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d2:	bf00      	nop
 800c0d4:	0800c0e5 	.word	0x0800c0e5
 800c0d8:	0800c0f7 	.word	0x0800c0f7
 800c0dc:	0800c107 	.word	0x0800c107
 800c0e0:	0800c117 	.word	0x0800c117
        duplex = ETH_FULLDUPLEX_MODE;
 800c0e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800c0ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c0f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800c0f4:	e01f      	b.n	800c136 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800c0fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800c104:	e017      	b.n	800c136 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800c106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c10a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800c10e:	2300      	movs	r3, #0
 800c110:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800c114:	e00f      	b.n	800c136 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800c116:	2300      	movs	r3, #0
 800c118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800c11c:	2300      	movs	r3, #0
 800c11e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800c122:	e008      	b.n	800c136 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800c124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800c12c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800c134:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c136:	f107 0314 	add.w	r3, r7, #20
 800c13a:	4619      	mov	r1, r3
 800c13c:	480f      	ldr	r0, [pc, #60]	; (800c17c <low_level_init+0x258>)
 800c13e:	f7f9 fd65 	bl	8005c0c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c146:	62fb      	str	r3, [r7, #44]	; 0x2c
    MACConf.Speed = speed;
 800c148:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c14c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c14e:	f107 0314 	add.w	r3, r7, #20
 800c152:	4619      	mov	r1, r3
 800c154:	4809      	ldr	r0, [pc, #36]	; (800c17c <low_level_init+0x258>)
 800c156:	f7f9 ff2d 	bl	8005fb4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800c15a:	4808      	ldr	r0, [pc, #32]	; (800c17c <low_level_init+0x258>)
 800c15c:	f7f8 ffb5 	bl	80050ca <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f009 fa69 	bl	8015638 <netif_set_up>
    netif_set_link_up(netif);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f009 fb04 	bl	8015774 <netif_set_link_up>
}
 800c16c:	e001      	b.n	800c172 <low_level_init+0x24e>
    Error_Handler();
 800c16e:	f7f5 f829 	bl	80011c4 <Error_Handler>
}
 800c172:	bf00      	nop
 800c174:	37b0      	adds	r7, #176	; 0xb0
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	20008870 	.word	0x20008870
 800c180:	40028000 	.word	0x40028000
 800c184:	2000026c 	.word	0x2000026c
 800c188:	2000020c 	.word	0x2000020c
 800c18c:	200088e0 	.word	0x200088e0
 800c190:	08022990 	.word	0x08022990
 800c194:	200002cc 	.word	0x200002cc
 800c198:	20001abc 	.word	0x20001abc
 800c19c:	0801f8a8 	.word	0x0801f8a8
 800c1a0:	0800c371 	.word	0x0800c371
 800c1a4:	20000010 	.word	0x20000010
 800c1a8:	20008850 	.word	0x20008850

0800c1ac <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b092      	sub	sp, #72	; 0x48
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c1c0:	f107 030c 	add.w	r3, r7, #12
 800c1c4:	2230      	movs	r2, #48	; 0x30
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f010 fe52 	bl	801ce72 <memset>

  for(q = p; q != NULL; q = q->next)
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	643b      	str	r3, [r7, #64]	; 0x40
 800c1d2:	e049      	b.n	800c268 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d902      	bls.n	800c1e0 <low_level_output+0x34>
      return ERR_IF;
 800c1da:	f06f 030b 	mvn.w	r3, #11
 800c1de:	e056      	b.n	800c28e <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800c1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e2:	6859      	ldr	r1, [r3, #4]
 800c1e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	005b      	lsls	r3, r3, #1
 800c1ea:	4413      	add	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c1f2:	4413      	add	r3, r2
 800c1f4:	3b3c      	subs	r3, #60	; 0x3c
 800c1f6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1fa:	895b      	ldrh	r3, [r3, #10]
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c200:	4613      	mov	r3, r2
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	4413      	add	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c20c:	4413      	add	r3, r2
 800c20e:	3b38      	subs	r3, #56	; 0x38
 800c210:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c214:	2b00      	cmp	r3, #0
 800c216:	d012      	beq.n	800c23e <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c21a:	1e5a      	subs	r2, r3, #1
 800c21c:	f107 000c 	add.w	r0, r7, #12
 800c220:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c222:	460b      	mov	r3, r1
 800c224:	005b      	lsls	r3, r3, #1
 800c226:	440b      	add	r3, r1
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	18c1      	adds	r1, r0, r3
 800c22c:	4613      	mov	r3, r2
 800c22e:	005b      	lsls	r3, r3, #1
 800c230:	4413      	add	r3, r2
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c238:	4413      	add	r3, r2
 800c23a:	3b34      	subs	r3, #52	; 0x34
 800c23c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10a      	bne.n	800c25c <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800c246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c248:	4613      	mov	r3, r2
 800c24a:	005b      	lsls	r3, r3, #1
 800c24c:	4413      	add	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c254:	4413      	add	r3, r2
 800c256:	3b34      	subs	r3, #52	; 0x34
 800c258:	2200      	movs	r2, #0
 800c25a:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c25c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c25e:	3301      	adds	r3, #1
 800c260:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800c262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	643b      	str	r3, [r7, #64]	; 0x40
 800c268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1b2      	bne.n	800c1d4 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	891b      	ldrh	r3, [r3, #8]
 800c272:	461a      	mov	r2, r3
 800c274:	4b08      	ldr	r3, [pc, #32]	; (800c298 <low_level_output+0xec>)
 800c276:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c278:	4a07      	ldr	r2, [pc, #28]	; (800c298 <low_level_output+0xec>)
 800c27a:	f107 030c 	add.w	r3, r7, #12
 800c27e:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800c280:	2214      	movs	r2, #20
 800c282:	4905      	ldr	r1, [pc, #20]	; (800c298 <low_level_output+0xec>)
 800c284:	4805      	ldr	r0, [pc, #20]	; (800c29c <low_level_output+0xf0>)
 800c286:	f7f9 f81f 	bl	80052c8 <HAL_ETH_Transmit>

  return errval;
 800c28a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3748      	adds	r7, #72	; 0x48
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	200088e0 	.word	0x200088e0
 800c29c:	20008870 	.word	0x20008870

0800c2a0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b094      	sub	sp, #80	; 0x50
 800c2a4:	af02      	add	r7, sp, #8
 800c2a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	647b      	str	r3, [r7, #68]	; 0x44
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	60bb      	str	r3, [r7, #8]
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c2b4:	f107 030c 	add.w	r3, r7, #12
 800c2b8:	2230      	movs	r2, #48	; 0x30
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f010 fdd8 	bl	801ce72 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	643b      	str	r3, [r7, #64]	; 0x40
 800c2c6:	e015      	b.n	800c2f4 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800c2c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2ca:	1c5a      	adds	r2, r3, #1
 800c2cc:	f107 010c 	add.w	r1, r7, #12
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	005b      	lsls	r3, r3, #1
 800c2d4:	4413      	add	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4419      	add	r1, r3
 800c2da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2dc:	4613      	mov	r3, r2
 800c2de:	005b      	lsls	r3, r3, #1
 800c2e0:	4413      	add	r3, r2
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c2e8:	4413      	add	r3, r2
 800c2ea:	3b34      	subs	r3, #52	; 0x34
 800c2ec:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800c2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	643b      	str	r3, [r7, #64]	; 0x40
 800c2f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	d9e6      	bls.n	800c2c8 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800c2fa:	f107 030c 	add.w	r3, r7, #12
 800c2fe:	4619      	mov	r1, r3
 800c300:	4818      	ldr	r0, [pc, #96]	; (800c364 <low_level_input+0xc4>)
 800c302:	f7f9 f95a 	bl	80055ba <HAL_ETH_GetRxDataBuffer>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d125      	bne.n	800c358 <low_level_input+0xb8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800c30c:	f107 0308 	add.w	r3, r7, #8
 800c310:	4619      	mov	r1, r3
 800c312:	4814      	ldr	r0, [pc, #80]	; (800c364 <low_level_input+0xc4>)
 800c314:	f7f9 f9ef 	bl	80056f6 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800c318:	4812      	ldr	r0, [pc, #72]	; (800c364 <low_level_input+0xc4>)
 800c31a:	f7f9 fa1f 	bl	800575c <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	4611      	mov	r1, r2
 800c324:	4618      	mov	r0, r3
 800c326:	f7ff fced 	bl	800bd04 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c32a:	480f      	ldr	r0, [pc, #60]	; (800c368 <low_level_input+0xc8>)
 800c32c:	f008 fef0 	bl	8015110 <memp_malloc_pool>
 800c330:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(custom_pbuf != NULL)
 800c332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c334:	2b00      	cmp	r3, #0
 800c336:	d00f      	beq.n	800c358 <low_level_input+0xb8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800c338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33a:	4a0c      	ldr	r2, [pc, #48]	; (800c36c <low_level_input+0xcc>)
 800c33c:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	b299      	uxth	r1, r3
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	b292      	uxth	r2, r2
 800c348:	9201      	str	r2, [sp, #4]
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c34e:	2241      	movs	r2, #65	; 0x41
 800c350:	2000      	movs	r0, #0
 800c352:	f009 fc67 	bl	8015c24 <pbuf_alloced_custom>
 800c356:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  return p;
 800c358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3748      	adds	r7, #72	; 0x48
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	20008870 	.word	0x20008870
 800c368:	08022990 	.word	0x08022990
 800c36c:	0800c41d 	.word	0x0800c41d

0800c370 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c37c:	4b0f      	ldr	r3, [pc, #60]	; (800c3bc <ethernetif_input+0x4c>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c384:	4618      	mov	r0, r3
 800c386:	f000 fc89 	bl	800cc9c <osSemaphoreAcquire>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d1f5      	bne.n	800c37c <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f7ff ff85 	bl	800c2a0 <low_level_input>
 800c396:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00a      	beq.n	800c3b4 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	691b      	ldr	r3, [r3, #16]
 800c3a2:	68f9      	ldr	r1, [r7, #12]
 800c3a4:	68b8      	ldr	r0, [r7, #8]
 800c3a6:	4798      	blx	r3
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d002      	beq.n	800c3b4 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800c3ae:	68b8      	ldr	r0, [r7, #8]
 800c3b0:	f009 fdf2 	bl	8015f98 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1ea      	bne.n	800c390 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c3ba:	e7df      	b.n	800c37c <ethernetif_input+0xc>
 800c3bc:	20001abc 	.word	0x20001abc

0800c3c0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d106      	bne.n	800c3dc <ethernetif_init+0x1c>
 800c3ce:	4b0e      	ldr	r3, [pc, #56]	; (800c408 <ethernetif_init+0x48>)
 800c3d0:	f240 224d 	movw	r2, #589	; 0x24d
 800c3d4:	490d      	ldr	r1, [pc, #52]	; (800c40c <ethernetif_init+0x4c>)
 800c3d6:	480e      	ldr	r0, [pc, #56]	; (800c410 <ethernetif_init+0x50>)
 800c3d8:	f011 f98e 	bl	801d6f8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2273      	movs	r2, #115	; 0x73
 800c3e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2274      	movs	r2, #116	; 0x74
 800c3e8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a09      	ldr	r2, [pc, #36]	; (800c414 <ethernetif_init+0x54>)
 800c3f0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a08      	ldr	r2, [pc, #32]	; (800c418 <ethernetif_init+0x58>)
 800c3f6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f7ff fd93 	bl	800bf24 <low_level_init>

  return ERR_OK;
 800c3fe:	2300      	movs	r3, #0
}
 800c400:	4618      	mov	r0, r3
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	0801f8b0 	.word	0x0801f8b0
 800c40c:	0801f8cc 	.word	0x0801f8cc
 800c410:	0801f8dc 	.word	0x0801f8dc
 800c414:	0801290d 	.word	0x0801290d
 800c418:	0800c1ad 	.word	0x0800c1ad

0800c41c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c428:	68f9      	ldr	r1, [r7, #12]
 800c42a:	4803      	ldr	r0, [pc, #12]	; (800c438 <pbuf_free_custom+0x1c>)
 800c42c:	f008 fee4 	bl	80151f8 <memp_free_pool>
}
 800c430:	bf00      	nop
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	08022990 	.word	0x08022990

0800c43c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c440:	f7f6 fba0 	bl	8002b84 <HAL_GetTick>
 800c444:	4603      	mov	r3, r0
}
 800c446:	4618      	mov	r0, r3
 800c448:	bd80      	pop	{r7, pc}
	...

0800c44c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c450:	4802      	ldr	r0, [pc, #8]	; (800c45c <ETH_PHY_IO_Init+0x10>)
 800c452:	f7f9 fdc9 	bl	8005fe8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	20008870 	.word	0x20008870

0800c460 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c460:	b480      	push	{r7}
 800c462:	af00      	add	r7, sp, #0
  return 0;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	68f9      	ldr	r1, [r7, #12]
 800c482:	4807      	ldr	r0, [pc, #28]	; (800c4a0 <ETH_PHY_IO_ReadReg+0x30>)
 800c484:	f7f9 fb1a 	bl	8005abc <HAL_ETH_ReadPHYRegister>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d002      	beq.n	800c494 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c48e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c492:	e000      	b.n	800c496 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	20008870 	.word	0x20008870

0800c4a4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	68f9      	ldr	r1, [r7, #12]
 800c4b6:	4807      	ldr	r0, [pc, #28]	; (800c4d4 <ETH_PHY_IO_WriteReg+0x30>)
 800c4b8:	f7f9 fb54 	bl	8005b64 <HAL_ETH_WritePHYRegister>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d002      	beq.n	800c4c8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c4c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4c6:	e000      	b.n	800c4ca <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c4c8:	2300      	movs	r3, #0
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20008870 	.word	0x20008870

0800c4d8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c4dc:	f7f6 fb52 	bl	8002b84 <HAL_GetTick>
 800c4e0:	4603      	mov	r3, r0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	bd80      	pop	{r7, pc}
	...

0800c4e8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b0a0      	sub	sp, #128	; 0x80
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c500:	483a      	ldr	r0, [pc, #232]	; (800c5ec <ethernet_link_thread+0x104>)
 800c502:	f7f6 fa67 	bl	80029d4 <LAN8742_GetLinkState>
 800c506:	4603      	mov	r3, r0
 800c508:	66fb      	str	r3, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c50a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c50c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c510:	089b      	lsrs	r3, r3, #2
 800c512:	f003 0301 	and.w	r3, r3, #1
 800c516:	b2db      	uxtb	r3, r3
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00c      	beq.n	800c536 <ethernet_link_thread+0x4e>
 800c51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d809      	bhi.n	800c536 <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c522:	4833      	ldr	r0, [pc, #204]	; (800c5f0 <ethernet_link_thread+0x108>)
 800c524:	f7f8 fe56 	bl	80051d4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c528:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c52a:	f009 f8f1 	bl	8015710 <netif_set_down>
    netif_set_link_down(netif);
 800c52e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c530:	f009 f958 	bl	80157e4 <netif_set_link_down>
 800c534:	e055      	b.n	800c5e2 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c538:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c53c:	f003 0304 	and.w	r3, r3, #4
 800c540:	2b00      	cmp	r3, #0
 800c542:	d14e      	bne.n	800c5e2 <ethernet_link_thread+0xfa>
 800c544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c546:	2b01      	cmp	r3, #1
 800c548:	d94b      	bls.n	800c5e2 <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 800c54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c54c:	3b02      	subs	r3, #2
 800c54e:	2b03      	cmp	r3, #3
 800c550:	d82a      	bhi.n	800c5a8 <ethernet_link_thread+0xc0>
 800c552:	a201      	add	r2, pc, #4	; (adr r2, 800c558 <ethernet_link_thread+0x70>)
 800c554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c558:	0800c569 	.word	0x0800c569
 800c55c:	0800c57b 	.word	0x0800c57b
 800c560:	0800c58b 	.word	0x0800c58b
 800c564:	0800c59b 	.word	0x0800c59b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c56c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c56e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c572:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c574:	2301      	movs	r3, #1
 800c576:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c578:	e017      	b.n	800c5aa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c57a:	2300      	movs	r3, #0
 800c57c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c57e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c582:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c584:	2301      	movs	r3, #1
 800c586:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c588:	e00f      	b.n	800c5aa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c58a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c58e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c590:	2300      	movs	r3, #0
 800c592:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c594:	2301      	movs	r3, #1
 800c596:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c598:	e007      	b.n	800c5aa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c59a:	2300      	movs	r3, #0
 800c59c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c5a6:	e000      	b.n	800c5aa <ethernet_link_thread+0xc2>
    default:
      break;
 800c5a8:	bf00      	nop
    }

    if(linkchanged)
 800c5aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d018      	beq.n	800c5e2 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c5b0:	f107 0308 	add.w	r3, r7, #8
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	480e      	ldr	r0, [pc, #56]	; (800c5f0 <ethernet_link_thread+0x108>)
 800c5b8:	f7f9 fb28 	bl	8005c0c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c5bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5be:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c5c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5c2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c5c4:	f107 0308 	add.w	r3, r7, #8
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	4809      	ldr	r0, [pc, #36]	; (800c5f0 <ethernet_link_thread+0x108>)
 800c5cc:	f7f9 fcf2 	bl	8005fb4 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800c5d0:	4807      	ldr	r0, [pc, #28]	; (800c5f0 <ethernet_link_thread+0x108>)
 800c5d2:	f7f8 fd7a 	bl	80050ca <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c5d6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c5d8:	f009 f82e 	bl	8015638 <netif_set_up>
      netif_set_link_up(netif);
 800c5dc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c5de:	f009 f8c9 	bl	8015774 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c5e2:	2064      	movs	r0, #100	; 0x64
 800c5e4:	f000 f946 	bl	800c874 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c5e8:	e78a      	b.n	800c500 <ethernet_link_thread+0x18>
 800c5ea:	bf00      	nop
 800c5ec:	20008850 	.word	0x20008850
 800c5f0:	20008870 	.word	0x20008870

0800c5f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c5f4:	b480      	push	{r7}
 800c5f6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800c5f8:	bf00      	nop
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
	...

0800c604 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c60a:	f3ef 8305 	mrs	r3, IPSR
 800c60e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c610:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c612:	2b00      	cmp	r3, #0
 800c614:	d10f      	bne.n	800c636 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c616:	f3ef 8310 	mrs	r3, PRIMASK
 800c61a:	607b      	str	r3, [r7, #4]
  return(result);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d105      	bne.n	800c62e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c622:	f3ef 8311 	mrs	r3, BASEPRI
 800c626:	603b      	str	r3, [r7, #0]
  return(result);
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d007      	beq.n	800c63e <osKernelInitialize+0x3a>
 800c62e:	4b0e      	ldr	r3, [pc, #56]	; (800c668 <osKernelInitialize+0x64>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b02      	cmp	r3, #2
 800c634:	d103      	bne.n	800c63e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800c636:	f06f 0305 	mvn.w	r3, #5
 800c63a:	60fb      	str	r3, [r7, #12]
 800c63c:	e00c      	b.n	800c658 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c63e:	4b0a      	ldr	r3, [pc, #40]	; (800c668 <osKernelInitialize+0x64>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d105      	bne.n	800c652 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c646:	4b08      	ldr	r3, [pc, #32]	; (800c668 <osKernelInitialize+0x64>)
 800c648:	2201      	movs	r2, #1
 800c64a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c64c:	2300      	movs	r3, #0
 800c64e:	60fb      	str	r3, [r7, #12]
 800c650:	e002      	b.n	800c658 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800c652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c656:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c658:	68fb      	ldr	r3, [r7, #12]
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3714      	adds	r7, #20
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
 800c666:	bf00      	nop
 800c668:	20001ac4 	.word	0x20001ac4

0800c66c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c672:	f3ef 8305 	mrs	r3, IPSR
 800c676:	60bb      	str	r3, [r7, #8]
  return(result);
 800c678:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10f      	bne.n	800c69e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c67e:	f3ef 8310 	mrs	r3, PRIMASK
 800c682:	607b      	str	r3, [r7, #4]
  return(result);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d105      	bne.n	800c696 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c68a:	f3ef 8311 	mrs	r3, BASEPRI
 800c68e:	603b      	str	r3, [r7, #0]
  return(result);
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d007      	beq.n	800c6a6 <osKernelStart+0x3a>
 800c696:	4b0f      	ldr	r3, [pc, #60]	; (800c6d4 <osKernelStart+0x68>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	d103      	bne.n	800c6a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800c69e:	f06f 0305 	mvn.w	r3, #5
 800c6a2:	60fb      	str	r3, [r7, #12]
 800c6a4:	e010      	b.n	800c6c8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c6a6:	4b0b      	ldr	r3, [pc, #44]	; (800c6d4 <osKernelStart+0x68>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d109      	bne.n	800c6c2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c6ae:	f7ff ffa1 	bl	800c5f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c6b2:	4b08      	ldr	r3, [pc, #32]	; (800c6d4 <osKernelStart+0x68>)
 800c6b4:	2202      	movs	r2, #2
 800c6b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c6b8:	f002 fc8e 	bl	800efd8 <vTaskStartScheduler>
      stat = osOK;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	e002      	b.n	800c6c8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800c6c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	20001ac4 	.word	0x20001ac4

0800c6d8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6de:	f3ef 8305 	mrs	r3, IPSR
 800c6e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c6e4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d10f      	bne.n	800c70a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6ea:	f3ef 8310 	mrs	r3, PRIMASK
 800c6ee:	607b      	str	r3, [r7, #4]
  return(result);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d105      	bne.n	800c702 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c6f6:	f3ef 8311 	mrs	r3, BASEPRI
 800c6fa:	603b      	str	r3, [r7, #0]
  return(result);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d007      	beq.n	800c712 <osKernelGetTickCount+0x3a>
 800c702:	4b08      	ldr	r3, [pc, #32]	; (800c724 <osKernelGetTickCount+0x4c>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b02      	cmp	r3, #2
 800c708:	d103      	bne.n	800c712 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800c70a:	f002 fd83 	bl	800f214 <xTaskGetTickCountFromISR>
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	e002      	b.n	800c718 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800c712:	f002 fd6f 	bl	800f1f4 <xTaskGetTickCount>
 800c716:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800c718:	68fb      	ldr	r3, [r7, #12]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	20001ac4 	.word	0x20001ac4

0800c728 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c728:	b580      	push	{r7, lr}
 800c72a:	b090      	sub	sp, #64	; 0x40
 800c72c:	af04      	add	r7, sp, #16
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c734:	2300      	movs	r3, #0
 800c736:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c738:	f3ef 8305 	mrs	r3, IPSR
 800c73c:	61fb      	str	r3, [r7, #28]
  return(result);
 800c73e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800c740:	2b00      	cmp	r3, #0
 800c742:	f040 8090 	bne.w	800c866 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c746:	f3ef 8310 	mrs	r3, PRIMASK
 800c74a:	61bb      	str	r3, [r7, #24]
  return(result);
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d105      	bne.n	800c75e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c752:	f3ef 8311 	mrs	r3, BASEPRI
 800c756:	617b      	str	r3, [r7, #20]
  return(result);
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d003      	beq.n	800c766 <osThreadNew+0x3e>
 800c75e:	4b44      	ldr	r3, [pc, #272]	; (800c870 <osThreadNew+0x148>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	2b02      	cmp	r3, #2
 800c764:	d07f      	beq.n	800c866 <osThreadNew+0x13e>
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d07c      	beq.n	800c866 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800c76c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c770:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800c772:	2318      	movs	r3, #24
 800c774:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800c776:	2300      	movs	r3, #0
 800c778:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800c77a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c77e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d045      	beq.n	800c812 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d002      	beq.n	800c794 <osThreadNew+0x6c>
        name = attr->name;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	699b      	ldr	r3, [r3, #24]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d002      	beq.n	800c7a2 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d008      	beq.n	800c7ba <osThreadNew+0x92>
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7aa:	2b38      	cmp	r3, #56	; 0x38
 800c7ac:	d805      	bhi.n	800c7ba <osThreadNew+0x92>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	f003 0301 	and.w	r3, r3, #1
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d001      	beq.n	800c7be <osThreadNew+0x96>
        return (NULL);
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e054      	b.n	800c868 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d003      	beq.n	800c7ce <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	695b      	ldr	r3, [r3, #20]
 800c7ca:	089b      	lsrs	r3, r3, #2
 800c7cc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00e      	beq.n	800c7f4 <osThreadNew+0xcc>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	2b5b      	cmp	r3, #91	; 0x5b
 800c7dc:	d90a      	bls.n	800c7f4 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d006      	beq.n	800c7f4 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	695b      	ldr	r3, [r3, #20]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d002      	beq.n	800c7f4 <osThreadNew+0xcc>
        mem = 1;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	623b      	str	r3, [r7, #32]
 800c7f2:	e010      	b.n	800c816 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10c      	bne.n	800c816 <osThreadNew+0xee>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d108      	bne.n	800c816 <osThreadNew+0xee>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d104      	bne.n	800c816 <osThreadNew+0xee>
          mem = 0;
 800c80c:	2300      	movs	r3, #0
 800c80e:	623b      	str	r3, [r7, #32]
 800c810:	e001      	b.n	800c816 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800c812:	2300      	movs	r3, #0
 800c814:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c816:	6a3b      	ldr	r3, [r7, #32]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d110      	bne.n	800c83e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c824:	9202      	str	r2, [sp, #8]
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c830:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f002 f9fe 	bl	800ec34 <xTaskCreateStatic>
 800c838:	4603      	mov	r3, r0
 800c83a:	613b      	str	r3, [r7, #16]
 800c83c:	e013      	b.n	800c866 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800c83e:	6a3b      	ldr	r3, [r7, #32]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d110      	bne.n	800c866 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c846:	b29a      	uxth	r2, r3
 800c848:	f107 0310 	add.w	r3, r7, #16
 800c84c:	9301      	str	r3, [sp, #4]
 800c84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c856:	68f8      	ldr	r0, [r7, #12]
 800c858:	f002 fa46 	bl	800ece8 <xTaskCreate>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d001      	beq.n	800c866 <osThreadNew+0x13e>
          hTask = NULL;
 800c862:	2300      	movs	r3, #0
 800c864:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c866:	693b      	ldr	r3, [r7, #16]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3730      	adds	r7, #48	; 0x30
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	20001ac4 	.word	0x20001ac4

0800c874 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c87c:	f3ef 8305 	mrs	r3, IPSR
 800c880:	613b      	str	r3, [r7, #16]
  return(result);
 800c882:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10f      	bne.n	800c8a8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c888:	f3ef 8310 	mrs	r3, PRIMASK
 800c88c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d105      	bne.n	800c8a0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c894:	f3ef 8311 	mrs	r3, BASEPRI
 800c898:	60bb      	str	r3, [r7, #8]
  return(result);
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d007      	beq.n	800c8b0 <osDelay+0x3c>
 800c8a0:	4b0a      	ldr	r3, [pc, #40]	; (800c8cc <osDelay+0x58>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d103      	bne.n	800c8b0 <osDelay+0x3c>
    stat = osErrorISR;
 800c8a8:	f06f 0305 	mvn.w	r3, #5
 800c8ac:	617b      	str	r3, [r7, #20]
 800c8ae:	e007      	b.n	800c8c0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d002      	beq.n	800c8c0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f002 fb58 	bl	800ef70 <vTaskDelay>
    }
  }

  return (stat);
 800c8c0:	697b      	ldr	r3, [r7, #20]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3718      	adds	r7, #24
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	20001ac4 	.word	0x20001ac4

0800c8d0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b08a      	sub	sp, #40	; 0x28
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8dc:	f3ef 8305 	mrs	r3, IPSR
 800c8e0:	613b      	str	r3, [r7, #16]
  return(result);
 800c8e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f040 8085 	bne.w	800c9f4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8ea:	f3ef 8310 	mrs	r3, PRIMASK
 800c8ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d105      	bne.n	800c902 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c8f6:	f3ef 8311 	mrs	r3, BASEPRI
 800c8fa:	60bb      	str	r3, [r7, #8]
  return(result);
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d003      	beq.n	800c90a <osMutexNew+0x3a>
 800c902:	4b3f      	ldr	r3, [pc, #252]	; (800ca00 <osMutexNew+0x130>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b02      	cmp	r3, #2
 800c908:	d074      	beq.n	800c9f4 <osMutexNew+0x124>
    if (attr != NULL) {
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d003      	beq.n	800c918 <osMutexNew+0x48>
      type = attr->attr_bits;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	623b      	str	r3, [r7, #32]
 800c916:	e001      	b.n	800c91c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800c918:	2300      	movs	r3, #0
 800c91a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c91c:	6a3b      	ldr	r3, [r7, #32]
 800c91e:	f003 0301 	and.w	r3, r3, #1
 800c922:	2b00      	cmp	r3, #0
 800c924:	d002      	beq.n	800c92c <osMutexNew+0x5c>
      rmtx = 1U;
 800c926:	2301      	movs	r3, #1
 800c928:	61fb      	str	r3, [r7, #28]
 800c92a:	e001      	b.n	800c930 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800c92c:	2300      	movs	r3, #0
 800c92e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c930:	6a3b      	ldr	r3, [r7, #32]
 800c932:	f003 0308 	and.w	r3, r3, #8
 800c936:	2b00      	cmp	r3, #0
 800c938:	d15c      	bne.n	800c9f4 <osMutexNew+0x124>
      mem = -1;
 800c93a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c93e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d015      	beq.n	800c972 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d006      	beq.n	800c95c <osMutexNew+0x8c>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	2b4f      	cmp	r3, #79	; 0x4f
 800c954:	d902      	bls.n	800c95c <osMutexNew+0x8c>
          mem = 1;
 800c956:	2301      	movs	r3, #1
 800c958:	61bb      	str	r3, [r7, #24]
 800c95a:	e00c      	b.n	800c976 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d108      	bne.n	800c976 <osMutexNew+0xa6>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d104      	bne.n	800c976 <osMutexNew+0xa6>
            mem = 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	61bb      	str	r3, [r7, #24]
 800c970:	e001      	b.n	800c976 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800c972:	2300      	movs	r3, #0
 800c974:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d112      	bne.n	800c9a2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d007      	beq.n	800c992 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	4619      	mov	r1, r3
 800c988:	2004      	movs	r0, #4
 800c98a:	f001 fa20 	bl	800ddce <xQueueCreateMutexStatic>
 800c98e:	6278      	str	r0, [r7, #36]	; 0x24
 800c990:	e016      	b.n	800c9c0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	4619      	mov	r1, r3
 800c998:	2001      	movs	r0, #1
 800c99a:	f001 fa18 	bl	800ddce <xQueueCreateMutexStatic>
 800c99e:	6278      	str	r0, [r7, #36]	; 0x24
 800c9a0:	e00e      	b.n	800c9c0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10b      	bne.n	800c9c0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d004      	beq.n	800c9b8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800c9ae:	2004      	movs	r0, #4
 800c9b0:	f001 f9f5 	bl	800dd9e <xQueueCreateMutex>
 800c9b4:	6278      	str	r0, [r7, #36]	; 0x24
 800c9b6:	e003      	b.n	800c9c0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800c9b8:	2001      	movs	r0, #1
 800c9ba:	f001 f9f0 	bl	800dd9e <xQueueCreateMutex>
 800c9be:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00c      	beq.n	800c9e0 <osMutexNew+0x110>
        if (attr != NULL) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d003      	beq.n	800c9d4 <osMutexNew+0x104>
          name = attr->name;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	617b      	str	r3, [r7, #20]
 800c9d2:	e001      	b.n	800c9d8 <osMutexNew+0x108>
        } else {
          name = NULL;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800c9d8:	6979      	ldr	r1, [r7, #20]
 800c9da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9dc:	f002 f8a4 	bl	800eb28 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d006      	beq.n	800c9f4 <osMutexNew+0x124>
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d003      	beq.n	800c9f4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ee:	f043 0301 	orr.w	r3, r3, #1
 800c9f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3728      	adds	r7, #40	; 0x28
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20001ac4 	.word	0x20001ac4

0800ca04 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b088      	sub	sp, #32
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f023 0301 	bic.w	r3, r3, #1
 800ca14:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca22:	f3ef 8305 	mrs	r3, IPSR
 800ca26:	613b      	str	r3, [r7, #16]
  return(result);
 800ca28:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d10f      	bne.n	800ca4e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca2e:	f3ef 8310 	mrs	r3, PRIMASK
 800ca32:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d105      	bne.n	800ca46 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ca3a:	f3ef 8311 	mrs	r3, BASEPRI
 800ca3e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d007      	beq.n	800ca56 <osMutexAcquire+0x52>
 800ca46:	4b1d      	ldr	r3, [pc, #116]	; (800cabc <osMutexAcquire+0xb8>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	d103      	bne.n	800ca56 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ca4e:	f06f 0305 	mvn.w	r3, #5
 800ca52:	61fb      	str	r3, [r7, #28]
 800ca54:	e02c      	b.n	800cab0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d103      	bne.n	800ca64 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800ca5c:	f06f 0303 	mvn.w	r3, #3
 800ca60:	61fb      	str	r3, [r7, #28]
 800ca62:	e025      	b.n	800cab0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d011      	beq.n	800ca8e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ca6a:	6839      	ldr	r1, [r7, #0]
 800ca6c:	69b8      	ldr	r0, [r7, #24]
 800ca6e:	f001 f9fc 	bl	800de6a <xQueueTakeMutexRecursive>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d01b      	beq.n	800cab0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d003      	beq.n	800ca86 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ca7e:	f06f 0301 	mvn.w	r3, #1
 800ca82:	61fb      	str	r3, [r7, #28]
 800ca84:	e014      	b.n	800cab0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ca86:	f06f 0302 	mvn.w	r3, #2
 800ca8a:	61fb      	str	r3, [r7, #28]
 800ca8c:	e010      	b.n	800cab0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	69b8      	ldr	r0, [r7, #24]
 800ca92:	f001 fd79 	bl	800e588 <xQueueSemaphoreTake>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d009      	beq.n	800cab0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d003      	beq.n	800caaa <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800caa2:	f06f 0301 	mvn.w	r3, #1
 800caa6:	61fb      	str	r3, [r7, #28]
 800caa8:	e002      	b.n	800cab0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800caaa:	f06f 0302 	mvn.w	r3, #2
 800caae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cab0:	69fb      	ldr	r3, [r7, #28]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3720      	adds	r7, #32
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	20001ac4 	.word	0x20001ac4

0800cac0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b088      	sub	sp, #32
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f023 0301 	bic.w	r3, r3, #1
 800cace:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f003 0301 	and.w	r3, r3, #1
 800cad6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800cad8:	2300      	movs	r3, #0
 800cada:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cadc:	f3ef 8305 	mrs	r3, IPSR
 800cae0:	613b      	str	r3, [r7, #16]
  return(result);
 800cae2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10f      	bne.n	800cb08 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cae8:	f3ef 8310 	mrs	r3, PRIMASK
 800caec:	60fb      	str	r3, [r7, #12]
  return(result);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d105      	bne.n	800cb00 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800caf4:	f3ef 8311 	mrs	r3, BASEPRI
 800caf8:	60bb      	str	r3, [r7, #8]
  return(result);
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d007      	beq.n	800cb10 <osMutexRelease+0x50>
 800cb00:	4b16      	ldr	r3, [pc, #88]	; (800cb5c <osMutexRelease+0x9c>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b02      	cmp	r3, #2
 800cb06:	d103      	bne.n	800cb10 <osMutexRelease+0x50>
    stat = osErrorISR;
 800cb08:	f06f 0305 	mvn.w	r3, #5
 800cb0c:	61fb      	str	r3, [r7, #28]
 800cb0e:	e01f      	b.n	800cb50 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d103      	bne.n	800cb1e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800cb16:	f06f 0303 	mvn.w	r3, #3
 800cb1a:	61fb      	str	r3, [r7, #28]
 800cb1c:	e018      	b.n	800cb50 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d009      	beq.n	800cb38 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cb24:	69b8      	ldr	r0, [r7, #24]
 800cb26:	f001 f96d 	bl	800de04 <xQueueGiveMutexRecursive>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d00f      	beq.n	800cb50 <osMutexRelease+0x90>
        stat = osErrorResource;
 800cb30:	f06f 0302 	mvn.w	r3, #2
 800cb34:	61fb      	str	r3, [r7, #28]
 800cb36:	e00b      	b.n	800cb50 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cb38:	2300      	movs	r3, #0
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	69b8      	ldr	r0, [r7, #24]
 800cb40:	f001 fa2e 	bl	800dfa0 <xQueueGenericSend>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d002      	beq.n	800cb50 <osMutexRelease+0x90>
        stat = osErrorResource;
 800cb4a:	f06f 0302 	mvn.w	r3, #2
 800cb4e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800cb50:	69fb      	ldr	r3, [r7, #28]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3720      	adds	r7, #32
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	20001ac4 	.word	0x20001ac4

0800cb60 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b08c      	sub	sp, #48	; 0x30
 800cb64:	af02      	add	r7, sp, #8
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb70:	f3ef 8305 	mrs	r3, IPSR
 800cb74:	61bb      	str	r3, [r7, #24]
  return(result);
 800cb76:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f040 8087 	bne.w	800cc8c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb7e:	f3ef 8310 	mrs	r3, PRIMASK
 800cb82:	617b      	str	r3, [r7, #20]
  return(result);
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d105      	bne.n	800cb96 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb8a:	f3ef 8311 	mrs	r3, BASEPRI
 800cb8e:	613b      	str	r3, [r7, #16]
  return(result);
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d003      	beq.n	800cb9e <osSemaphoreNew+0x3e>
 800cb96:	4b40      	ldr	r3, [pc, #256]	; (800cc98 <osSemaphoreNew+0x138>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d076      	beq.n	800cc8c <osSemaphoreNew+0x12c>
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d073      	beq.n	800cc8c <osSemaphoreNew+0x12c>
 800cba4:	68ba      	ldr	r2, [r7, #8]
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d86f      	bhi.n	800cc8c <osSemaphoreNew+0x12c>
    mem = -1;
 800cbac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbb0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d015      	beq.n	800cbe4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d006      	beq.n	800cbce <osSemaphoreNew+0x6e>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	2b4f      	cmp	r3, #79	; 0x4f
 800cbc6:	d902      	bls.n	800cbce <osSemaphoreNew+0x6e>
        mem = 1;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	623b      	str	r3, [r7, #32]
 800cbcc:	e00c      	b.n	800cbe8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d108      	bne.n	800cbe8 <osSemaphoreNew+0x88>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d104      	bne.n	800cbe8 <osSemaphoreNew+0x88>
          mem = 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	623b      	str	r3, [r7, #32]
 800cbe2:	e001      	b.n	800cbe8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800cbe8:	6a3b      	ldr	r3, [r7, #32]
 800cbea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbee:	d04d      	beq.n	800cc8c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d129      	bne.n	800cc4a <osSemaphoreNew+0xea>
        if (mem == 1) {
 800cbf6:	6a3b      	ldr	r3, [r7, #32]
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d10b      	bne.n	800cc14 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	689a      	ldr	r2, [r3, #8]
 800cc00:	2303      	movs	r3, #3
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	4613      	mov	r3, r2
 800cc06:	2200      	movs	r2, #0
 800cc08:	2100      	movs	r1, #0
 800cc0a:	2001      	movs	r0, #1
 800cc0c:	f000 ffd8 	bl	800dbc0 <xQueueGenericCreateStatic>
 800cc10:	6278      	str	r0, [r7, #36]	; 0x24
 800cc12:	e005      	b.n	800cc20 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800cc14:	2203      	movs	r2, #3
 800cc16:	2100      	movs	r1, #0
 800cc18:	2001      	movs	r0, #1
 800cc1a:	f001 f844 	bl	800dca6 <xQueueGenericCreate>
 800cc1e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d022      	beq.n	800cc6c <osSemaphoreNew+0x10c>
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d01f      	beq.n	800cc6c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	2200      	movs	r2, #0
 800cc30:	2100      	movs	r1, #0
 800cc32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc34:	f001 f9b4 	bl	800dfa0 <xQueueGenericSend>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d016      	beq.n	800cc6c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800cc3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc40:	f001 fe27 	bl	800e892 <vQueueDelete>
            hSemaphore = NULL;
 800cc44:	2300      	movs	r3, #0
 800cc46:	627b      	str	r3, [r7, #36]	; 0x24
 800cc48:	e010      	b.n	800cc6c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d108      	bne.n	800cc62 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	461a      	mov	r2, r3
 800cc56:	68b9      	ldr	r1, [r7, #8]
 800cc58:	68f8      	ldr	r0, [r7, #12]
 800cc5a:	f001 f93b 	bl	800ded4 <xQueueCreateCountingSemaphoreStatic>
 800cc5e:	6278      	str	r0, [r7, #36]	; 0x24
 800cc60:	e004      	b.n	800cc6c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cc62:	68b9      	ldr	r1, [r7, #8]
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f001 f96a 	bl	800df3e <xQueueCreateCountingSemaphore>
 800cc6a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00c      	beq.n	800cc8c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d003      	beq.n	800cc80 <osSemaphoreNew+0x120>
          name = attr->name;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	61fb      	str	r3, [r7, #28]
 800cc7e:	e001      	b.n	800cc84 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800cc80:	2300      	movs	r3, #0
 800cc82:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cc84:	69f9      	ldr	r1, [r7, #28]
 800cc86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc88:	f001 ff4e 	bl	800eb28 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3728      	adds	r7, #40	; 0x28
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	20001ac4 	.word	0x20001ac4

0800cc9c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b088      	sub	sp, #32
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d103      	bne.n	800ccbc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ccb4:	f06f 0303 	mvn.w	r3, #3
 800ccb8:	61fb      	str	r3, [r7, #28]
 800ccba:	e04b      	b.n	800cd54 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccbc:	f3ef 8305 	mrs	r3, IPSR
 800ccc0:	617b      	str	r3, [r7, #20]
  return(result);
 800ccc2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d10f      	bne.n	800cce8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccc8:	f3ef 8310 	mrs	r3, PRIMASK
 800cccc:	613b      	str	r3, [r7, #16]
  return(result);
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d105      	bne.n	800cce0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ccd4:	f3ef 8311 	mrs	r3, BASEPRI
 800ccd8:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d026      	beq.n	800cd2e <osSemaphoreAcquire+0x92>
 800cce0:	4b1f      	ldr	r3, [pc, #124]	; (800cd60 <osSemaphoreAcquire+0xc4>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d122      	bne.n	800cd2e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d003      	beq.n	800ccf6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800ccee:	f06f 0303 	mvn.w	r3, #3
 800ccf2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ccf4:	e02d      	b.n	800cd52 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ccfa:	f107 0308 	add.w	r3, r7, #8
 800ccfe:	461a      	mov	r2, r3
 800cd00:	2100      	movs	r1, #0
 800cd02:	69b8      	ldr	r0, [r7, #24]
 800cd04:	f001 fd48 	bl	800e798 <xQueueReceiveFromISR>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d003      	beq.n	800cd16 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800cd0e:	f06f 0302 	mvn.w	r3, #2
 800cd12:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800cd14:	e01d      	b.n	800cd52 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d01a      	beq.n	800cd52 <osSemaphoreAcquire+0xb6>
 800cd1c:	4b11      	ldr	r3, [pc, #68]	; (800cd64 <osSemaphoreAcquire+0xc8>)
 800cd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd22:	601a      	str	r2, [r3, #0]
 800cd24:	f3bf 8f4f 	dsb	sy
 800cd28:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800cd2c:	e011      	b.n	800cd52 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	69b8      	ldr	r0, [r7, #24]
 800cd32:	f001 fc29 	bl	800e588 <xQueueSemaphoreTake>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d00b      	beq.n	800cd54 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d003      	beq.n	800cd4a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800cd42:	f06f 0301 	mvn.w	r3, #1
 800cd46:	61fb      	str	r3, [r7, #28]
 800cd48:	e004      	b.n	800cd54 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800cd4a:	f06f 0302 	mvn.w	r3, #2
 800cd4e:	61fb      	str	r3, [r7, #28]
 800cd50:	e000      	b.n	800cd54 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800cd52:	bf00      	nop
      }
    }
  }

  return (stat);
 800cd54:	69fb      	ldr	r3, [r7, #28]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3720      	adds	r7, #32
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	20001ac4 	.word	0x20001ac4
 800cd64:	e000ed04 	.word	0xe000ed04

0800cd68 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b088      	sub	sp, #32
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cd74:	2300      	movs	r3, #0
 800cd76:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800cd78:	69bb      	ldr	r3, [r7, #24]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d103      	bne.n	800cd86 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800cd7e:	f06f 0303 	mvn.w	r3, #3
 800cd82:	61fb      	str	r3, [r7, #28]
 800cd84:	e03e      	b.n	800ce04 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd86:	f3ef 8305 	mrs	r3, IPSR
 800cd8a:	617b      	str	r3, [r7, #20]
  return(result);
 800cd8c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d10f      	bne.n	800cdb2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd92:	f3ef 8310 	mrs	r3, PRIMASK
 800cd96:	613b      	str	r3, [r7, #16]
  return(result);
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d105      	bne.n	800cdaa <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd9e:	f3ef 8311 	mrs	r3, BASEPRI
 800cda2:	60fb      	str	r3, [r7, #12]
  return(result);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d01e      	beq.n	800cde8 <osSemaphoreRelease+0x80>
 800cdaa:	4b19      	ldr	r3, [pc, #100]	; (800ce10 <osSemaphoreRelease+0xa8>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d11a      	bne.n	800cde8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cdb6:	f107 0308 	add.w	r3, r7, #8
 800cdba:	4619      	mov	r1, r3
 800cdbc:	69b8      	ldr	r0, [r7, #24]
 800cdbe:	f001 fa7d 	bl	800e2bc <xQueueGiveFromISR>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d003      	beq.n	800cdd0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800cdc8:	f06f 0302 	mvn.w	r3, #2
 800cdcc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cdce:	e018      	b.n	800ce02 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d015      	beq.n	800ce02 <osSemaphoreRelease+0x9a>
 800cdd6:	4b0f      	ldr	r3, [pc, #60]	; (800ce14 <osSemaphoreRelease+0xac>)
 800cdd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cddc:	601a      	str	r2, [r3, #0]
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cde6:	e00c      	b.n	800ce02 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cde8:	2300      	movs	r3, #0
 800cdea:	2200      	movs	r2, #0
 800cdec:	2100      	movs	r1, #0
 800cdee:	69b8      	ldr	r0, [r7, #24]
 800cdf0:	f001 f8d6 	bl	800dfa0 <xQueueGenericSend>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d004      	beq.n	800ce04 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800cdfa:	f06f 0302 	mvn.w	r3, #2
 800cdfe:	61fb      	str	r3, [r7, #28]
 800ce00:	e000      	b.n	800ce04 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ce02:	bf00      	nop
    }
  }

  return (stat);
 800ce04:	69fb      	ldr	r3, [r7, #28]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3720      	adds	r7, #32
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	20001ac4 	.word	0x20001ac4
 800ce14:	e000ed04 	.word	0xe000ed04

0800ce18 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b08c      	sub	sp, #48	; 0x30
 800ce1c:	af02      	add	r7, sp, #8
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ce24:	2300      	movs	r3, #0
 800ce26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce28:	f3ef 8305 	mrs	r3, IPSR
 800ce2c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ce2e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d170      	bne.n	800cf16 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce34:	f3ef 8310 	mrs	r3, PRIMASK
 800ce38:	617b      	str	r3, [r7, #20]
  return(result);
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d105      	bne.n	800ce4c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce40:	f3ef 8311 	mrs	r3, BASEPRI
 800ce44:	613b      	str	r3, [r7, #16]
  return(result);
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d003      	beq.n	800ce54 <osMessageQueueNew+0x3c>
 800ce4c:	4b34      	ldr	r3, [pc, #208]	; (800cf20 <osMessageQueueNew+0x108>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	d060      	beq.n	800cf16 <osMessageQueueNew+0xfe>
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d05d      	beq.n	800cf16 <osMessageQueueNew+0xfe>
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d05a      	beq.n	800cf16 <osMessageQueueNew+0xfe>
    mem = -1;
 800ce60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce64:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d029      	beq.n	800cec0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d012      	beq.n	800ce9a <osMessageQueueNew+0x82>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	2b4f      	cmp	r3, #79	; 0x4f
 800ce7a:	d90e      	bls.n	800ce9a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d00a      	beq.n	800ce9a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	695a      	ldr	r2, [r3, #20]
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	68b9      	ldr	r1, [r7, #8]
 800ce8c:	fb01 f303 	mul.w	r3, r1, r3
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d302      	bcc.n	800ce9a <osMessageQueueNew+0x82>
        mem = 1;
 800ce94:	2301      	movs	r3, #1
 800ce96:	623b      	str	r3, [r7, #32]
 800ce98:	e014      	b.n	800cec4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d110      	bne.n	800cec4 <osMessageQueueNew+0xac>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d10c      	bne.n	800cec4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d108      	bne.n	800cec4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	695b      	ldr	r3, [r3, #20]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d104      	bne.n	800cec4 <osMessageQueueNew+0xac>
          mem = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	623b      	str	r3, [r7, #32]
 800cebe:	e001      	b.n	800cec4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800cec0:	2300      	movs	r3, #0
 800cec2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cec4:	6a3b      	ldr	r3, [r7, #32]
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d10c      	bne.n	800cee4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	691a      	ldr	r2, [r3, #16]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6899      	ldr	r1, [r3, #8]
 800ced2:	2300      	movs	r3, #0
 800ced4:	9300      	str	r3, [sp, #0]
 800ced6:	460b      	mov	r3, r1
 800ced8:	68b9      	ldr	r1, [r7, #8]
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f000 fe70 	bl	800dbc0 <xQueueGenericCreateStatic>
 800cee0:	6278      	str	r0, [r7, #36]	; 0x24
 800cee2:	e008      	b.n	800cef6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800cee4:	6a3b      	ldr	r3, [r7, #32]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d105      	bne.n	800cef6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ceea:	2200      	movs	r2, #0
 800ceec:	68b9      	ldr	r1, [r7, #8]
 800ceee:	68f8      	ldr	r0, [r7, #12]
 800cef0:	f000 fed9 	bl	800dca6 <xQueueGenericCreate>
 800cef4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00c      	beq.n	800cf16 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d003      	beq.n	800cf0a <osMessageQueueNew+0xf2>
        name = attr->name;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	61fb      	str	r3, [r7, #28]
 800cf08:	e001      	b.n	800cf0e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800cf0e:	69f9      	ldr	r1, [r7, #28]
 800cf10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf12:	f001 fe09 	bl	800eb28 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3728      	adds	r7, #40	; 0x28
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	20001ac4 	.word	0x20001ac4

0800cf24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b08a      	sub	sp, #40	; 0x28
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	603b      	str	r3, [r7, #0]
 800cf30:	4613      	mov	r3, r2
 800cf32:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf3c:	f3ef 8305 	mrs	r3, IPSR
 800cf40:	61fb      	str	r3, [r7, #28]
  return(result);
 800cf42:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10f      	bne.n	800cf68 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf48:	f3ef 8310 	mrs	r3, PRIMASK
 800cf4c:	61bb      	str	r3, [r7, #24]
  return(result);
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d105      	bne.n	800cf60 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf54:	f3ef 8311 	mrs	r3, BASEPRI
 800cf58:	617b      	str	r3, [r7, #20]
  return(result);
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d02c      	beq.n	800cfba <osMessageQueuePut+0x96>
 800cf60:	4b28      	ldr	r3, [pc, #160]	; (800d004 <osMessageQueuePut+0xe0>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b02      	cmp	r3, #2
 800cf66:	d128      	bne.n	800cfba <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf68:	6a3b      	ldr	r3, [r7, #32]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d005      	beq.n	800cf7a <osMessageQueuePut+0x56>
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d002      	beq.n	800cf7a <osMessageQueuePut+0x56>
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d003      	beq.n	800cf82 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800cf7a:	f06f 0303 	mvn.w	r3, #3
 800cf7e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf80:	e039      	b.n	800cff6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800cf82:	2300      	movs	r3, #0
 800cf84:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cf86:	f107 0210 	add.w	r2, r7, #16
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	68b9      	ldr	r1, [r7, #8]
 800cf8e:	6a38      	ldr	r0, [r7, #32]
 800cf90:	f001 f900 	bl	800e194 <xQueueGenericSendFromISR>
 800cf94:	4603      	mov	r3, r0
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d003      	beq.n	800cfa2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800cf9a:	f06f 0302 	mvn.w	r3, #2
 800cf9e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cfa0:	e029      	b.n	800cff6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d026      	beq.n	800cff6 <osMessageQueuePut+0xd2>
 800cfa8:	4b17      	ldr	r3, [pc, #92]	; (800d008 <osMessageQueuePut+0xe4>)
 800cfaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfae:	601a      	str	r2, [r3, #0]
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cfb8:	e01d      	b.n	800cff6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cfba:	6a3b      	ldr	r3, [r7, #32]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d002      	beq.n	800cfc6 <osMessageQueuePut+0xa2>
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d103      	bne.n	800cfce <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800cfc6:	f06f 0303 	mvn.w	r3, #3
 800cfca:	627b      	str	r3, [r7, #36]	; 0x24
 800cfcc:	e014      	b.n	800cff8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cfce:	2300      	movs	r3, #0
 800cfd0:	683a      	ldr	r2, [r7, #0]
 800cfd2:	68b9      	ldr	r1, [r7, #8]
 800cfd4:	6a38      	ldr	r0, [r7, #32]
 800cfd6:	f000 ffe3 	bl	800dfa0 <xQueueGenericSend>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d00b      	beq.n	800cff8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d003      	beq.n	800cfee <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800cfe6:	f06f 0301 	mvn.w	r3, #1
 800cfea:	627b      	str	r3, [r7, #36]	; 0x24
 800cfec:	e004      	b.n	800cff8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800cfee:	f06f 0302 	mvn.w	r3, #2
 800cff2:	627b      	str	r3, [r7, #36]	; 0x24
 800cff4:	e000      	b.n	800cff8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cff6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3728      	adds	r7, #40	; 0x28
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	20001ac4 	.word	0x20001ac4
 800d008:	e000ed04 	.word	0xe000ed04

0800d00c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b08a      	sub	sp, #40	; 0x28
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
 800d018:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d01e:	2300      	movs	r3, #0
 800d020:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d022:	f3ef 8305 	mrs	r3, IPSR
 800d026:	61fb      	str	r3, [r7, #28]
  return(result);
 800d028:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d10f      	bne.n	800d04e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d02e:	f3ef 8310 	mrs	r3, PRIMASK
 800d032:	61bb      	str	r3, [r7, #24]
  return(result);
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d105      	bne.n	800d046 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d03a:	f3ef 8311 	mrs	r3, BASEPRI
 800d03e:	617b      	str	r3, [r7, #20]
  return(result);
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d02c      	beq.n	800d0a0 <osMessageQueueGet+0x94>
 800d046:	4b28      	ldr	r3, [pc, #160]	; (800d0e8 <osMessageQueueGet+0xdc>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2b02      	cmp	r3, #2
 800d04c:	d128      	bne.n	800d0a0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d04e:	6a3b      	ldr	r3, [r7, #32]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d005      	beq.n	800d060 <osMessageQueueGet+0x54>
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d002      	beq.n	800d060 <osMessageQueueGet+0x54>
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d003      	beq.n	800d068 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d060:	f06f 0303 	mvn.w	r3, #3
 800d064:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d066:	e038      	b.n	800d0da <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d068:	2300      	movs	r3, #0
 800d06a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d06c:	f107 0310 	add.w	r3, r7, #16
 800d070:	461a      	mov	r2, r3
 800d072:	68b9      	ldr	r1, [r7, #8]
 800d074:	6a38      	ldr	r0, [r7, #32]
 800d076:	f001 fb8f 	bl	800e798 <xQueueReceiveFromISR>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d003      	beq.n	800d088 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d080:	f06f 0302 	mvn.w	r3, #2
 800d084:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d086:	e028      	b.n	800d0da <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d025      	beq.n	800d0da <osMessageQueueGet+0xce>
 800d08e:	4b17      	ldr	r3, [pc, #92]	; (800d0ec <osMessageQueueGet+0xe0>)
 800d090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d094:	601a      	str	r2, [r3, #0]
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d09e:	e01c      	b.n	800d0da <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d002      	beq.n	800d0ac <osMessageQueueGet+0xa0>
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d103      	bne.n	800d0b4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d0ac:	f06f 0303 	mvn.w	r3, #3
 800d0b0:	627b      	str	r3, [r7, #36]	; 0x24
 800d0b2:	e013      	b.n	800d0dc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d0b4:	683a      	ldr	r2, [r7, #0]
 800d0b6:	68b9      	ldr	r1, [r7, #8]
 800d0b8:	6a38      	ldr	r0, [r7, #32]
 800d0ba:	f001 f989 	bl	800e3d0 <xQueueReceive>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d00b      	beq.n	800d0dc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d003      	beq.n	800d0d2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d0ca:	f06f 0301 	mvn.w	r3, #1
 800d0ce:	627b      	str	r3, [r7, #36]	; 0x24
 800d0d0:	e004      	b.n	800d0dc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d0d2:	f06f 0302 	mvn.w	r3, #2
 800d0d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d0d8:	e000      	b.n	800d0dc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0da:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3728      	adds	r7, #40	; 0x28
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	20001ac4 	.word	0x20001ac4
 800d0ec:	e000ed04 	.word	0xe000ed04

0800d0f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d0f0:	b480      	push	{r7}
 800d0f2:	b085      	sub	sp, #20
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	4a07      	ldr	r2, [pc, #28]	; (800d11c <vApplicationGetIdleTaskMemory+0x2c>)
 800d100:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	4a06      	ldr	r2, [pc, #24]	; (800d120 <vApplicationGetIdleTaskMemory+0x30>)
 800d106:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d10e:	601a      	str	r2, [r3, #0]
}
 800d110:	bf00      	nop
 800d112:	3714      	adds	r7, #20
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr
 800d11c:	20001ac8 	.word	0x20001ac8
 800d120:	20001b24 	.word	0x20001b24

0800d124 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	4a07      	ldr	r2, [pc, #28]	; (800d150 <vApplicationGetTimerTaskMemory+0x2c>)
 800d134:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	4a06      	ldr	r2, [pc, #24]	; (800d154 <vApplicationGetTimerTaskMemory+0x30>)
 800d13a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d142:	601a      	str	r2, [r3, #0]
}
 800d144:	bf00      	nop
 800d146:	3714      	adds	r7, #20
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr
 800d150:	20002324 	.word	0x20002324
 800d154:	20002380 	.word	0x20002380

0800d158 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b08a      	sub	sp, #40	; 0x28
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d160:	2300      	movs	r3, #0
 800d162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d164:	f001 ff9c 	bl	800f0a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d168:	4b57      	ldr	r3, [pc, #348]	; (800d2c8 <pvPortMalloc+0x170>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d101      	bne.n	800d174 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d170:	f000 f90c 	bl	800d38c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d174:	4b55      	ldr	r3, [pc, #340]	; (800d2cc <pvPortMalloc+0x174>)
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	4013      	ands	r3, r2
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	f040 808c 	bne.w	800d29a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d01c      	beq.n	800d1c2 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800d188:	2208      	movs	r2, #8
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4413      	add	r3, r2
 800d18e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f003 0307 	and.w	r3, r3, #7
 800d196:	2b00      	cmp	r3, #0
 800d198:	d013      	beq.n	800d1c2 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f023 0307 	bic.w	r3, r3, #7
 800d1a0:	3308      	adds	r3, #8
 800d1a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f003 0307 	and.w	r3, r3, #7
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d009      	beq.n	800d1c2 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	617b      	str	r3, [r7, #20]
 800d1c0:	e7fe      	b.n	800d1c0 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d068      	beq.n	800d29a <pvPortMalloc+0x142>
 800d1c8:	4b41      	ldr	r3, [pc, #260]	; (800d2d0 <pvPortMalloc+0x178>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d863      	bhi.n	800d29a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d1d2:	4b40      	ldr	r3, [pc, #256]	; (800d2d4 <pvPortMalloc+0x17c>)
 800d1d4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d1d6:	4b3f      	ldr	r3, [pc, #252]	; (800d2d4 <pvPortMalloc+0x17c>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1dc:	e004      	b.n	800d1e8 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800d1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d903      	bls.n	800d1fa <pvPortMalloc+0xa2>
 800d1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1f1      	bne.n	800d1de <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d1fa:	4b33      	ldr	r3, [pc, #204]	; (800d2c8 <pvPortMalloc+0x170>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d200:	429a      	cmp	r2, r3
 800d202:	d04a      	beq.n	800d29a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	2208      	movs	r2, #8
 800d20a:	4413      	add	r3, r2
 800d20c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	6a3b      	ldr	r3, [r7, #32]
 800d214:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d218:	685a      	ldr	r2, [r3, #4]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	1ad2      	subs	r2, r2, r3
 800d21e:	2308      	movs	r3, #8
 800d220:	005b      	lsls	r3, r3, #1
 800d222:	429a      	cmp	r2, r3
 800d224:	d91e      	bls.n	800d264 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	4413      	add	r3, r2
 800d22c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	f003 0307 	and.w	r3, r3, #7
 800d234:	2b00      	cmp	r3, #0
 800d236:	d009      	beq.n	800d24c <pvPortMalloc+0xf4>
 800d238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23c:	f383 8811 	msr	BASEPRI, r3
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	613b      	str	r3, [r7, #16]
 800d24a:	e7fe      	b.n	800d24a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24e:	685a      	ldr	r2, [r3, #4]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	1ad2      	subs	r2, r2, r3
 800d254:	69bb      	ldr	r3, [r7, #24]
 800d256:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d25e:	69b8      	ldr	r0, [r7, #24]
 800d260:	f000 f8f6 	bl	800d450 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d264:	4b1a      	ldr	r3, [pc, #104]	; (800d2d0 <pvPortMalloc+0x178>)
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	1ad3      	subs	r3, r2, r3
 800d26e:	4a18      	ldr	r2, [pc, #96]	; (800d2d0 <pvPortMalloc+0x178>)
 800d270:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d272:	4b17      	ldr	r3, [pc, #92]	; (800d2d0 <pvPortMalloc+0x178>)
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	4b18      	ldr	r3, [pc, #96]	; (800d2d8 <pvPortMalloc+0x180>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d203      	bcs.n	800d286 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d27e:	4b14      	ldr	r3, [pc, #80]	; (800d2d0 <pvPortMalloc+0x178>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4a15      	ldr	r2, [pc, #84]	; (800d2d8 <pvPortMalloc+0x180>)
 800d284:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d288:	685a      	ldr	r2, [r3, #4]
 800d28a:	4b10      	ldr	r3, [pc, #64]	; (800d2cc <pvPortMalloc+0x174>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	431a      	orrs	r2, r3
 800d290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d292:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d296:	2200      	movs	r2, #0
 800d298:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d29a:	f001 ff0f 	bl	800f0bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	f003 0307 	and.w	r3, r3, #7
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d009      	beq.n	800d2bc <pvPortMalloc+0x164>
 800d2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ac:	f383 8811 	msr	BASEPRI, r3
 800d2b0:	f3bf 8f6f 	isb	sy
 800d2b4:	f3bf 8f4f 	dsb	sy
 800d2b8:	60fb      	str	r3, [r7, #12]
 800d2ba:	e7fe      	b.n	800d2ba <pvPortMalloc+0x162>
	return pvReturn;
 800d2bc:	69fb      	ldr	r3, [r7, #28]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3728      	adds	r7, #40	; 0x28
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	20006f88 	.word	0x20006f88
 800d2cc:	20006f94 	.word	0x20006f94
 800d2d0:	20006f8c 	.word	0x20006f8c
 800d2d4:	20006f80 	.word	0x20006f80
 800d2d8:	20006f90 	.word	0x20006f90

0800d2dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b086      	sub	sp, #24
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d046      	beq.n	800d37c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d2ee:	2308      	movs	r3, #8
 800d2f0:	425b      	negs	r3, r3
 800d2f2:	697a      	ldr	r2, [r7, #20]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	685a      	ldr	r2, [r3, #4]
 800d300:	4b20      	ldr	r3, [pc, #128]	; (800d384 <vPortFree+0xa8>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4013      	ands	r3, r2
 800d306:	2b00      	cmp	r3, #0
 800d308:	d109      	bne.n	800d31e <vPortFree+0x42>
 800d30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30e:	f383 8811 	msr	BASEPRI, r3
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	60fb      	str	r3, [r7, #12]
 800d31c:	e7fe      	b.n	800d31c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d009      	beq.n	800d33a <vPortFree+0x5e>
 800d326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32a:	f383 8811 	msr	BASEPRI, r3
 800d32e:	f3bf 8f6f 	isb	sy
 800d332:	f3bf 8f4f 	dsb	sy
 800d336:	60bb      	str	r3, [r7, #8]
 800d338:	e7fe      	b.n	800d338 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	685a      	ldr	r2, [r3, #4]
 800d33e:	4b11      	ldr	r3, [pc, #68]	; (800d384 <vPortFree+0xa8>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4013      	ands	r3, r2
 800d344:	2b00      	cmp	r3, #0
 800d346:	d019      	beq.n	800d37c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d115      	bne.n	800d37c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	685a      	ldr	r2, [r3, #4]
 800d354:	4b0b      	ldr	r3, [pc, #44]	; (800d384 <vPortFree+0xa8>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	43db      	mvns	r3, r3
 800d35a:	401a      	ands	r2, r3
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d360:	f001 fe9e 	bl	800f0a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	685a      	ldr	r2, [r3, #4]
 800d368:	4b07      	ldr	r3, [pc, #28]	; (800d388 <vPortFree+0xac>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4413      	add	r3, r2
 800d36e:	4a06      	ldr	r2, [pc, #24]	; (800d388 <vPortFree+0xac>)
 800d370:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d372:	6938      	ldr	r0, [r7, #16]
 800d374:	f000 f86c 	bl	800d450 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d378:	f001 fea0 	bl	800f0bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d37c:	bf00      	nop
 800d37e:	3718      	adds	r7, #24
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	20006f94 	.word	0x20006f94
 800d388:	20006f8c 	.word	0x20006f8c

0800d38c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d38c:	b480      	push	{r7}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d392:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d396:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d398:	4b27      	ldr	r3, [pc, #156]	; (800d438 <prvHeapInit+0xac>)
 800d39a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f003 0307 	and.w	r3, r3, #7
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d00c      	beq.n	800d3c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	3307      	adds	r3, #7
 800d3aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f023 0307 	bic.w	r3, r3, #7
 800d3b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d3b4:	68ba      	ldr	r2, [r7, #8]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	1ad3      	subs	r3, r2, r3
 800d3ba:	4a1f      	ldr	r2, [pc, #124]	; (800d438 <prvHeapInit+0xac>)
 800d3bc:	4413      	add	r3, r2
 800d3be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d3c4:	4a1d      	ldr	r2, [pc, #116]	; (800d43c <prvHeapInit+0xb0>)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d3ca:	4b1c      	ldr	r3, [pc, #112]	; (800d43c <prvHeapInit+0xb0>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d3d8:	2208      	movs	r2, #8
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	1a9b      	subs	r3, r3, r2
 800d3de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f023 0307 	bic.w	r3, r3, #7
 800d3e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	4a15      	ldr	r2, [pc, #84]	; (800d440 <prvHeapInit+0xb4>)
 800d3ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d3ee:	4b14      	ldr	r3, [pc, #80]	; (800d440 <prvHeapInit+0xb4>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d3f6:	4b12      	ldr	r3, [pc, #72]	; (800d440 <prvHeapInit+0xb4>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	1ad2      	subs	r2, r2, r3
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d40c:	4b0c      	ldr	r3, [pc, #48]	; (800d440 <prvHeapInit+0xb4>)
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	4a0a      	ldr	r2, [pc, #40]	; (800d444 <prvHeapInit+0xb8>)
 800d41a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	4a09      	ldr	r2, [pc, #36]	; (800d448 <prvHeapInit+0xbc>)
 800d422:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d424:	4b09      	ldr	r3, [pc, #36]	; (800d44c <prvHeapInit+0xc0>)
 800d426:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d42a:	601a      	str	r2, [r3, #0]
}
 800d42c:	bf00      	nop
 800d42e:	3714      	adds	r7, #20
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr
 800d438:	20003380 	.word	0x20003380
 800d43c:	20006f80 	.word	0x20006f80
 800d440:	20006f88 	.word	0x20006f88
 800d444:	20006f90 	.word	0x20006f90
 800d448:	20006f8c 	.word	0x20006f8c
 800d44c:	20006f94 	.word	0x20006f94

0800d450 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d458:	4b28      	ldr	r3, [pc, #160]	; (800d4fc <prvInsertBlockIntoFreeList+0xac>)
 800d45a:	60fb      	str	r3, [r7, #12]
 800d45c:	e002      	b.n	800d464 <prvInsertBlockIntoFreeList+0x14>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	60fb      	str	r3, [r7, #12]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d8f7      	bhi.n	800d45e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	4413      	add	r3, r2
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d108      	bne.n	800d492 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	685a      	ldr	r2, [r3, #4]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	441a      	add	r2, r3
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	68ba      	ldr	r2, [r7, #8]
 800d49c:	441a      	add	r2, r3
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d118      	bne.n	800d4d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	4b15      	ldr	r3, [pc, #84]	; (800d500 <prvInsertBlockIntoFreeList+0xb0>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d00d      	beq.n	800d4ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	685a      	ldr	r2, [r3, #4]
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	441a      	add	r2, r3
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	601a      	str	r2, [r3, #0]
 800d4cc:	e008      	b.n	800d4e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d4ce:	4b0c      	ldr	r3, [pc, #48]	; (800d500 <prvInsertBlockIntoFreeList+0xb0>)
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	601a      	str	r2, [r3, #0]
 800d4d6:	e003      	b.n	800d4e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d002      	beq.n	800d4ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4ee:	bf00      	nop
 800d4f0:	3714      	adds	r7, #20
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	20006f80 	.word	0x20006f80
 800d500:	20006f88 	.word	0x20006f88

0800d504 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f103 0208 	add.w	r2, r3, #8
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d51c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f103 0208 	add.w	r2, r3, #8
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f103 0208 	add.w	r2, r3, #8
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2200      	movs	r2, #0
 800d536:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d538:	bf00      	nop
 800d53a:	370c      	adds	r7, #12
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d552:	bf00      	nop
 800d554:	370c      	adds	r7, #12
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr

0800d55e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d55e:	b480      	push	{r7}
 800d560:	b085      	sub	sp, #20
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
 800d566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	689a      	ldr	r2, [r3, #8]
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	683a      	ldr	r2, [r7, #0]
 800d582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	683a      	ldr	r2, [r7, #0]
 800d588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	1c5a      	adds	r2, r3, #1
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	601a      	str	r2, [r3, #0]
}
 800d59a:	bf00      	nop
 800d59c:	3714      	adds	r7, #20
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr

0800d5a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d5a6:	b480      	push	{r7}
 800d5a8:	b085      	sub	sp, #20
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
 800d5ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5bc:	d103      	bne.n	800d5c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	60fb      	str	r3, [r7, #12]
 800d5c4:	e00c      	b.n	800d5e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	3308      	adds	r3, #8
 800d5ca:	60fb      	str	r3, [r7, #12]
 800d5cc:	e002      	b.n	800d5d4 <vListInsert+0x2e>
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	60fb      	str	r3, [r7, #12]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d2f6      	bcs.n	800d5ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	685a      	ldr	r2, [r3, #4]
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	683a      	ldr	r2, [r7, #0]
 800d5ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	68fa      	ldr	r2, [r7, #12]
 800d5f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	683a      	ldr	r2, [r7, #0]
 800d5fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	1c5a      	adds	r2, r3, #1
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	601a      	str	r2, [r3, #0]
}
 800d60c:	bf00      	nop
 800d60e:	3714      	adds	r7, #20
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d618:	b480      	push	{r7}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	6892      	ldr	r2, [r2, #8]
 800d62e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	6852      	ldr	r2, [r2, #4]
 800d638:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	429a      	cmp	r2, r3
 800d642:	d103      	bne.n	800d64c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	689a      	ldr	r2, [r3, #8]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	1e5a      	subs	r2, r3, #1
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3714      	adds	r7, #20
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d66c:	b480      	push	{r7}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	3b04      	subs	r3, #4
 800d67c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	3b04      	subs	r3, #4
 800d68a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	f023 0201 	bic.w	r2, r3, #1
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	3b04      	subs	r3, #4
 800d69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d69c:	4a0c      	ldr	r2, [pc, #48]	; (800d6d0 <pxPortInitialiseStack+0x64>)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	3b14      	subs	r3, #20
 800d6a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	3b04      	subs	r3, #4
 800d6b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f06f 0202 	mvn.w	r2, #2
 800d6ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	3b20      	subs	r3, #32
 800d6c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	0800d6d5 	.word	0x0800d6d5

0800d6d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d6de:	4b11      	ldr	r3, [pc, #68]	; (800d724 <prvTaskExitError+0x50>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6e6:	d009      	beq.n	800d6fc <prvTaskExitError+0x28>
 800d6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	60fb      	str	r3, [r7, #12]
 800d6fa:	e7fe      	b.n	800d6fa <prvTaskExitError+0x26>
 800d6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d700:	f383 8811 	msr	BASEPRI, r3
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d70e:	bf00      	nop
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d0fc      	beq.n	800d710 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d716:	bf00      	nop
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	20000024 	.word	0x20000024
	...

0800d730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d730:	4b07      	ldr	r3, [pc, #28]	; (800d750 <pxCurrentTCBConst2>)
 800d732:	6819      	ldr	r1, [r3, #0]
 800d734:	6808      	ldr	r0, [r1, #0]
 800d736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73a:	f380 8809 	msr	PSP, r0
 800d73e:	f3bf 8f6f 	isb	sy
 800d742:	f04f 0000 	mov.w	r0, #0
 800d746:	f380 8811 	msr	BASEPRI, r0
 800d74a:	4770      	bx	lr
 800d74c:	f3af 8000 	nop.w

0800d750 <pxCurrentTCBConst2>:
 800d750:	20006fa0 	.word	0x20006fa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d754:	bf00      	nop
 800d756:	bf00      	nop

0800d758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d758:	4808      	ldr	r0, [pc, #32]	; (800d77c <prvPortStartFirstTask+0x24>)
 800d75a:	6800      	ldr	r0, [r0, #0]
 800d75c:	6800      	ldr	r0, [r0, #0]
 800d75e:	f380 8808 	msr	MSP, r0
 800d762:	f04f 0000 	mov.w	r0, #0
 800d766:	f380 8814 	msr	CONTROL, r0
 800d76a:	b662      	cpsie	i
 800d76c:	b661      	cpsie	f
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	df00      	svc	0
 800d778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d77a:	bf00      	nop
 800d77c:	e000ed08 	.word	0xe000ed08

0800d780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d786:	4b44      	ldr	r3, [pc, #272]	; (800d898 <xPortStartScheduler+0x118>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a44      	ldr	r2, [pc, #272]	; (800d89c <xPortStartScheduler+0x11c>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d109      	bne.n	800d7a4 <xPortStartScheduler+0x24>
 800d790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d794:	f383 8811 	msr	BASEPRI, r3
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	f3bf 8f4f 	dsb	sy
 800d7a0:	613b      	str	r3, [r7, #16]
 800d7a2:	e7fe      	b.n	800d7a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d7a4:	4b3c      	ldr	r3, [pc, #240]	; (800d898 <xPortStartScheduler+0x118>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a3d      	ldr	r2, [pc, #244]	; (800d8a0 <xPortStartScheduler+0x120>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d109      	bne.n	800d7c2 <xPortStartScheduler+0x42>
 800d7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b2:	f383 8811 	msr	BASEPRI, r3
 800d7b6:	f3bf 8f6f 	isb	sy
 800d7ba:	f3bf 8f4f 	dsb	sy
 800d7be:	60fb      	str	r3, [r7, #12]
 800d7c0:	e7fe      	b.n	800d7c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d7c2:	4b38      	ldr	r3, [pc, #224]	; (800d8a4 <xPortStartScheduler+0x124>)
 800d7c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	22ff      	movs	r2, #255	; 0xff
 800d7d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d7dc:	78fb      	ldrb	r3, [r7, #3]
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d7e4:	b2da      	uxtb	r2, r3
 800d7e6:	4b30      	ldr	r3, [pc, #192]	; (800d8a8 <xPortStartScheduler+0x128>)
 800d7e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d7ea:	4b30      	ldr	r3, [pc, #192]	; (800d8ac <xPortStartScheduler+0x12c>)
 800d7ec:	2207      	movs	r2, #7
 800d7ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7f0:	e009      	b.n	800d806 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800d7f2:	4b2e      	ldr	r3, [pc, #184]	; (800d8ac <xPortStartScheduler+0x12c>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	4a2c      	ldr	r2, [pc, #176]	; (800d8ac <xPortStartScheduler+0x12c>)
 800d7fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d7fc:	78fb      	ldrb	r3, [r7, #3]
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	005b      	lsls	r3, r3, #1
 800d802:	b2db      	uxtb	r3, r3
 800d804:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d806:	78fb      	ldrb	r3, [r7, #3]
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d80e:	2b80      	cmp	r3, #128	; 0x80
 800d810:	d0ef      	beq.n	800d7f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d812:	4b26      	ldr	r3, [pc, #152]	; (800d8ac <xPortStartScheduler+0x12c>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f1c3 0307 	rsb	r3, r3, #7
 800d81a:	2b04      	cmp	r3, #4
 800d81c:	d009      	beq.n	800d832 <xPortStartScheduler+0xb2>
 800d81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d822:	f383 8811 	msr	BASEPRI, r3
 800d826:	f3bf 8f6f 	isb	sy
 800d82a:	f3bf 8f4f 	dsb	sy
 800d82e:	60bb      	str	r3, [r7, #8]
 800d830:	e7fe      	b.n	800d830 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d832:	4b1e      	ldr	r3, [pc, #120]	; (800d8ac <xPortStartScheduler+0x12c>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	021b      	lsls	r3, r3, #8
 800d838:	4a1c      	ldr	r2, [pc, #112]	; (800d8ac <xPortStartScheduler+0x12c>)
 800d83a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d83c:	4b1b      	ldr	r3, [pc, #108]	; (800d8ac <xPortStartScheduler+0x12c>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d844:	4a19      	ldr	r2, [pc, #100]	; (800d8ac <xPortStartScheduler+0x12c>)
 800d846:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d850:	4b17      	ldr	r3, [pc, #92]	; (800d8b0 <xPortStartScheduler+0x130>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a16      	ldr	r2, [pc, #88]	; (800d8b0 <xPortStartScheduler+0x130>)
 800d856:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d85a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d85c:	4b14      	ldr	r3, [pc, #80]	; (800d8b0 <xPortStartScheduler+0x130>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a13      	ldr	r2, [pc, #76]	; (800d8b0 <xPortStartScheduler+0x130>)
 800d862:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d866:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d868:	f000 f8d6 	bl	800da18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d86c:	4b11      	ldr	r3, [pc, #68]	; (800d8b4 <xPortStartScheduler+0x134>)
 800d86e:	2200      	movs	r2, #0
 800d870:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d872:	f000 f8f5 	bl	800da60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d876:	4b10      	ldr	r3, [pc, #64]	; (800d8b8 <xPortStartScheduler+0x138>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a0f      	ldr	r2, [pc, #60]	; (800d8b8 <xPortStartScheduler+0x138>)
 800d87c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d880:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d882:	f7ff ff69 	bl	800d758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d886:	f001 fd8f 	bl	800f3a8 <vTaskSwitchContext>
	prvTaskExitError();
 800d88a:	f7ff ff23 	bl	800d6d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3718      	adds	r7, #24
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	e000ed00 	.word	0xe000ed00
 800d89c:	410fc271 	.word	0x410fc271
 800d8a0:	410fc270 	.word	0x410fc270
 800d8a4:	e000e400 	.word	0xe000e400
 800d8a8:	20006f98 	.word	0x20006f98
 800d8ac:	20006f9c 	.word	0x20006f9c
 800d8b0:	e000ed20 	.word	0xe000ed20
 800d8b4:	20000024 	.word	0x20000024
 800d8b8:	e000ef34 	.word	0xe000ef34

0800d8bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c6:	f383 8811 	msr	BASEPRI, r3
 800d8ca:	f3bf 8f6f 	isb	sy
 800d8ce:	f3bf 8f4f 	dsb	sy
 800d8d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d8d4:	4b0e      	ldr	r3, [pc, #56]	; (800d910 <vPortEnterCritical+0x54>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	4a0d      	ldr	r2, [pc, #52]	; (800d910 <vPortEnterCritical+0x54>)
 800d8dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d8de:	4b0c      	ldr	r3, [pc, #48]	; (800d910 <vPortEnterCritical+0x54>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d10e      	bne.n	800d904 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d8e6:	4b0b      	ldr	r3, [pc, #44]	; (800d914 <vPortEnterCritical+0x58>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d009      	beq.n	800d904 <vPortEnterCritical+0x48>
 800d8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f4:	f383 8811 	msr	BASEPRI, r3
 800d8f8:	f3bf 8f6f 	isb	sy
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	603b      	str	r3, [r7, #0]
 800d902:	e7fe      	b.n	800d902 <vPortEnterCritical+0x46>
	}
}
 800d904:	bf00      	nop
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr
 800d910:	20000024 	.word	0x20000024
 800d914:	e000ed04 	.word	0xe000ed04

0800d918 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d91e:	4b11      	ldr	r3, [pc, #68]	; (800d964 <vPortExitCritical+0x4c>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d109      	bne.n	800d93a <vPortExitCritical+0x22>
 800d926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	607b      	str	r3, [r7, #4]
 800d938:	e7fe      	b.n	800d938 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800d93a:	4b0a      	ldr	r3, [pc, #40]	; (800d964 <vPortExitCritical+0x4c>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	3b01      	subs	r3, #1
 800d940:	4a08      	ldr	r2, [pc, #32]	; (800d964 <vPortExitCritical+0x4c>)
 800d942:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d944:	4b07      	ldr	r3, [pc, #28]	; (800d964 <vPortExitCritical+0x4c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d104      	bne.n	800d956 <vPortExitCritical+0x3e>
 800d94c:	2300      	movs	r3, #0
 800d94e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d956:	bf00      	nop
 800d958:	370c      	adds	r7, #12
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	20000024 	.word	0x20000024
	...

0800d970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d970:	f3ef 8009 	mrs	r0, PSP
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	4b15      	ldr	r3, [pc, #84]	; (800d9d0 <pxCurrentTCBConst>)
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	f01e 0f10 	tst.w	lr, #16
 800d980:	bf08      	it	eq
 800d982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d98a:	6010      	str	r0, [r2, #0]
 800d98c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d990:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d994:	f380 8811 	msr	BASEPRI, r0
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	f3bf 8f6f 	isb	sy
 800d9a0:	f001 fd02 	bl	800f3a8 <vTaskSwitchContext>
 800d9a4:	f04f 0000 	mov.w	r0, #0
 800d9a8:	f380 8811 	msr	BASEPRI, r0
 800d9ac:	bc09      	pop	{r0, r3}
 800d9ae:	6819      	ldr	r1, [r3, #0]
 800d9b0:	6808      	ldr	r0, [r1, #0]
 800d9b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b6:	f01e 0f10 	tst.w	lr, #16
 800d9ba:	bf08      	it	eq
 800d9bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d9c0:	f380 8809 	msr	PSP, r0
 800d9c4:	f3bf 8f6f 	isb	sy
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	f3af 8000 	nop.w

0800d9d0 <pxCurrentTCBConst>:
 800d9d0:	20006fa0 	.word	0x20006fa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d9d4:	bf00      	nop
 800d9d6:	bf00      	nop

0800d9d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d9f0:	f001 fc22 	bl	800f238 <xTaskIncrementTick>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d003      	beq.n	800da02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d9fa:	4b06      	ldr	r3, [pc, #24]	; (800da14 <SysTick_Handler+0x3c>)
 800d9fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da00:	601a      	str	r2, [r3, #0]
 800da02:	2300      	movs	r3, #0
 800da04:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800da0c:	bf00      	nop
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	e000ed04 	.word	0xe000ed04

0800da18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da18:	b480      	push	{r7}
 800da1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da1c:	4b0b      	ldr	r3, [pc, #44]	; (800da4c <vPortSetupTimerInterrupt+0x34>)
 800da1e:	2200      	movs	r2, #0
 800da20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da22:	4b0b      	ldr	r3, [pc, #44]	; (800da50 <vPortSetupTimerInterrupt+0x38>)
 800da24:	2200      	movs	r2, #0
 800da26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da28:	4b0a      	ldr	r3, [pc, #40]	; (800da54 <vPortSetupTimerInterrupt+0x3c>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a0a      	ldr	r2, [pc, #40]	; (800da58 <vPortSetupTimerInterrupt+0x40>)
 800da2e:	fba2 2303 	umull	r2, r3, r2, r3
 800da32:	099b      	lsrs	r3, r3, #6
 800da34:	4a09      	ldr	r2, [pc, #36]	; (800da5c <vPortSetupTimerInterrupt+0x44>)
 800da36:	3b01      	subs	r3, #1
 800da38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da3a:	4b04      	ldr	r3, [pc, #16]	; (800da4c <vPortSetupTimerInterrupt+0x34>)
 800da3c:	2207      	movs	r2, #7
 800da3e:	601a      	str	r2, [r3, #0]
}
 800da40:	bf00      	nop
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr
 800da4a:	bf00      	nop
 800da4c:	e000e010 	.word	0xe000e010
 800da50:	e000e018 	.word	0xe000e018
 800da54:	20000000 	.word	0x20000000
 800da58:	10624dd3 	.word	0x10624dd3
 800da5c:	e000e014 	.word	0xe000e014

0800da60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800da60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800da70 <vPortEnableVFP+0x10>
 800da64:	6801      	ldr	r1, [r0, #0]
 800da66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800da6a:	6001      	str	r1, [r0, #0]
 800da6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800da6e:	bf00      	nop
 800da70:	e000ed88 	.word	0xe000ed88

0800da74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800da7a:	f3ef 8305 	mrs	r3, IPSR
 800da7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2b0f      	cmp	r3, #15
 800da84:	d913      	bls.n	800daae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800da86:	4a16      	ldr	r2, [pc, #88]	; (800dae0 <vPortValidateInterruptPriority+0x6c>)
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	4413      	add	r3, r2
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800da90:	4b14      	ldr	r3, [pc, #80]	; (800dae4 <vPortValidateInterruptPriority+0x70>)
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	7afa      	ldrb	r2, [r7, #11]
 800da96:	429a      	cmp	r2, r3
 800da98:	d209      	bcs.n	800daae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800da9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9e:	f383 8811 	msr	BASEPRI, r3
 800daa2:	f3bf 8f6f 	isb	sy
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	607b      	str	r3, [r7, #4]
 800daac:	e7fe      	b.n	800daac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800daae:	4b0e      	ldr	r3, [pc, #56]	; (800dae8 <vPortValidateInterruptPriority+0x74>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dab6:	4b0d      	ldr	r3, [pc, #52]	; (800daec <vPortValidateInterruptPriority+0x78>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d909      	bls.n	800dad2 <vPortValidateInterruptPriority+0x5e>
 800dabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac2:	f383 8811 	msr	BASEPRI, r3
 800dac6:	f3bf 8f6f 	isb	sy
 800daca:	f3bf 8f4f 	dsb	sy
 800dace:	603b      	str	r3, [r7, #0]
 800dad0:	e7fe      	b.n	800dad0 <vPortValidateInterruptPriority+0x5c>
	}
 800dad2:	bf00      	nop
 800dad4:	3714      	adds	r7, #20
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr
 800dade:	bf00      	nop
 800dae0:	e000e3f0 	.word	0xe000e3f0
 800dae4:	20006f98 	.word	0x20006f98
 800dae8:	e000ed0c 	.word	0xe000ed0c
 800daec:	20006f9c 	.word	0x20006f9c

0800daf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d109      	bne.n	800db18 <xQueueGenericReset+0x28>
 800db04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	60bb      	str	r3, [r7, #8]
 800db16:	e7fe      	b.n	800db16 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800db18:	f7ff fed0 	bl	800d8bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db24:	68f9      	ldr	r1, [r7, #12]
 800db26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800db28:	fb01 f303 	mul.w	r3, r1, r3
 800db2c:	441a      	add	r2, r3
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2200      	movs	r2, #0
 800db36:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681a      	ldr	r2, [r3, #0]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db48:	3b01      	subs	r3, #1
 800db4a:	68f9      	ldr	r1, [r7, #12]
 800db4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800db4e:	fb01 f303 	mul.w	r3, r1, r3
 800db52:	441a      	add	r2, r3
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	22ff      	movs	r2, #255	; 0xff
 800db5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	22ff      	movs	r2, #255	; 0xff
 800db64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d114      	bne.n	800db98 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d01a      	beq.n	800dbac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	3310      	adds	r3, #16
 800db7a:	4618      	mov	r0, r3
 800db7c:	f001 fcbe 	bl	800f4fc <xTaskRemoveFromEventList>
 800db80:	4603      	mov	r3, r0
 800db82:	2b00      	cmp	r3, #0
 800db84:	d012      	beq.n	800dbac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800db86:	4b0d      	ldr	r3, [pc, #52]	; (800dbbc <xQueueGenericReset+0xcc>)
 800db88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	e009      	b.n	800dbac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	3310      	adds	r3, #16
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7ff fcb1 	bl	800d504 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	3324      	adds	r3, #36	; 0x24
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7ff fcac 	bl	800d504 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dbac:	f7ff feb4 	bl	800d918 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dbb0:	2301      	movs	r3, #1
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3710      	adds	r7, #16
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	e000ed04 	.word	0xe000ed04

0800dbc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b08e      	sub	sp, #56	; 0x38
 800dbc4:	af02      	add	r7, sp, #8
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
 800dbcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d109      	bne.n	800dbe8 <xQueueGenericCreateStatic+0x28>
 800dbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbe6:	e7fe      	b.n	800dbe6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d109      	bne.n	800dc02 <xQueueGenericCreateStatic+0x42>
 800dbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf2:	f383 8811 	msr	BASEPRI, r3
 800dbf6:	f3bf 8f6f 	isb	sy
 800dbfa:	f3bf 8f4f 	dsb	sy
 800dbfe:	627b      	str	r3, [r7, #36]	; 0x24
 800dc00:	e7fe      	b.n	800dc00 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d002      	beq.n	800dc0e <xQueueGenericCreateStatic+0x4e>
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d001      	beq.n	800dc12 <xQueueGenericCreateStatic+0x52>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e000      	b.n	800dc14 <xQueueGenericCreateStatic+0x54>
 800dc12:	2300      	movs	r3, #0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d109      	bne.n	800dc2c <xQueueGenericCreateStatic+0x6c>
 800dc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1c:	f383 8811 	msr	BASEPRI, r3
 800dc20:	f3bf 8f6f 	isb	sy
 800dc24:	f3bf 8f4f 	dsb	sy
 800dc28:	623b      	str	r3, [r7, #32]
 800dc2a:	e7fe      	b.n	800dc2a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d102      	bne.n	800dc38 <xQueueGenericCreateStatic+0x78>
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d101      	bne.n	800dc3c <xQueueGenericCreateStatic+0x7c>
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e000      	b.n	800dc3e <xQueueGenericCreateStatic+0x7e>
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d109      	bne.n	800dc56 <xQueueGenericCreateStatic+0x96>
 800dc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc46:	f383 8811 	msr	BASEPRI, r3
 800dc4a:	f3bf 8f6f 	isb	sy
 800dc4e:	f3bf 8f4f 	dsb	sy
 800dc52:	61fb      	str	r3, [r7, #28]
 800dc54:	e7fe      	b.n	800dc54 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dc56:	2350      	movs	r3, #80	; 0x50
 800dc58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	2b50      	cmp	r3, #80	; 0x50
 800dc5e:	d009      	beq.n	800dc74 <xQueueGenericCreateStatic+0xb4>
 800dc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc64:	f383 8811 	msr	BASEPRI, r3
 800dc68:	f3bf 8f6f 	isb	sy
 800dc6c:	f3bf 8f4f 	dsb	sy
 800dc70:	61bb      	str	r3, [r7, #24]
 800dc72:	e7fe      	b.n	800dc72 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dc74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00d      	beq.n	800dc9c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc82:	2201      	movs	r2, #1
 800dc84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dc88:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8e:	9300      	str	r3, [sp, #0]
 800dc90:	4613      	mov	r3, r2
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	68b9      	ldr	r1, [r7, #8]
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f000 f844 	bl	800dd24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3730      	adds	r7, #48	; 0x30
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b08a      	sub	sp, #40	; 0x28
 800dcaa:	af02      	add	r7, sp, #8
 800dcac:	60f8      	str	r0, [r7, #12]
 800dcae:	60b9      	str	r1, [r7, #8]
 800dcb0:	4613      	mov	r3, r2
 800dcb2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d109      	bne.n	800dcce <xQueueGenericCreate+0x28>
 800dcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbe:	f383 8811 	msr	BASEPRI, r3
 800dcc2:	f3bf 8f6f 	isb	sy
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	613b      	str	r3, [r7, #16]
 800dccc:	e7fe      	b.n	800dccc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d102      	bne.n	800dcda <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	61fb      	str	r3, [r7, #28]
 800dcd8:	e004      	b.n	800dce4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	68ba      	ldr	r2, [r7, #8]
 800dcde:	fb02 f303 	mul.w	r3, r2, r3
 800dce2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	3350      	adds	r3, #80	; 0x50
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7ff fa35 	bl	800d158 <pvPortMalloc>
 800dcee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dcf0:	69bb      	ldr	r3, [r7, #24]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d011      	beq.n	800dd1a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	3350      	adds	r3, #80	; 0x50
 800dcfe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dd08:	79fa      	ldrb	r2, [r7, #7]
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	9300      	str	r3, [sp, #0]
 800dd0e:	4613      	mov	r3, r2
 800dd10:	697a      	ldr	r2, [r7, #20]
 800dd12:	68b9      	ldr	r1, [r7, #8]
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f000 f805 	bl	800dd24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dd1a:	69bb      	ldr	r3, [r7, #24]
	}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3720      	adds	r7, #32
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	607a      	str	r2, [r7, #4]
 800dd30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d103      	bne.n	800dd40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	69ba      	ldr	r2, [r7, #24]
 800dd3c:	601a      	str	r2, [r3, #0]
 800dd3e:	e002      	b.n	800dd46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	68fa      	ldr	r2, [r7, #12]
 800dd4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dd4c:	69bb      	ldr	r3, [r7, #24]
 800dd4e:	68ba      	ldr	r2, [r7, #8]
 800dd50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dd52:	2101      	movs	r1, #1
 800dd54:	69b8      	ldr	r0, [r7, #24]
 800dd56:	f7ff fecb 	bl	800daf0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	78fa      	ldrb	r2, [r7, #3]
 800dd5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dd62:	bf00      	nop
 800dd64:	3710      	adds	r7, #16
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b082      	sub	sp, #8
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00e      	beq.n	800dd96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2200      	movs	r2, #0
 800dd82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	2100      	movs	r1, #0
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 f905 	bl	800dfa0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dd96:	bf00      	nop
 800dd98:	3708      	adds	r7, #8
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}

0800dd9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b086      	sub	sp, #24
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	4603      	mov	r3, r0
 800dda6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	617b      	str	r3, [r7, #20]
 800ddac:	2300      	movs	r3, #0
 800ddae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ddb0:	79fb      	ldrb	r3, [r7, #7]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	6939      	ldr	r1, [r7, #16]
 800ddb6:	6978      	ldr	r0, [r7, #20]
 800ddb8:	f7ff ff75 	bl	800dca6 <xQueueGenericCreate>
 800ddbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ddbe:	68f8      	ldr	r0, [r7, #12]
 800ddc0:	f7ff ffd3 	bl	800dd6a <prvInitialiseMutex>

		return xNewQueue;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
	}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3718      	adds	r7, #24
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b088      	sub	sp, #32
 800ddd2:	af02      	add	r7, sp, #8
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	6039      	str	r1, [r7, #0]
 800ddd8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ddda:	2301      	movs	r3, #1
 800dddc:	617b      	str	r3, [r7, #20]
 800ddde:	2300      	movs	r3, #0
 800dde0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dde2:	79fb      	ldrb	r3, [r7, #7]
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	2200      	movs	r2, #0
 800ddea:	6939      	ldr	r1, [r7, #16]
 800ddec:	6978      	ldr	r0, [r7, #20]
 800ddee:	f7ff fee7 	bl	800dbc0 <xQueueGenericCreateStatic>
 800ddf2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f7ff ffb8 	bl	800dd6a <prvInitialiseMutex>

		return xNewQueue;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
	}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3718      	adds	r7, #24
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800de04:	b590      	push	{r4, r7, lr}
 800de06:	b087      	sub	sp, #28
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d109      	bne.n	800de2a <xQueueGiveMutexRecursive+0x26>
 800de16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de1a:	f383 8811 	msr	BASEPRI, r3
 800de1e:	f3bf 8f6f 	isb	sy
 800de22:	f3bf 8f4f 	dsb	sy
 800de26:	60fb      	str	r3, [r7, #12]
 800de28:	e7fe      	b.n	800de28 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	689c      	ldr	r4, [r3, #8]
 800de2e:	f001 fd1b 	bl	800f868 <xTaskGetCurrentTaskHandle>
 800de32:	4603      	mov	r3, r0
 800de34:	429c      	cmp	r4, r3
 800de36:	d111      	bne.n	800de5c <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	1e5a      	subs	r2, r3, #1
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d105      	bne.n	800de56 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800de4a:	2300      	movs	r3, #0
 800de4c:	2200      	movs	r2, #0
 800de4e:	2100      	movs	r1, #0
 800de50:	6938      	ldr	r0, [r7, #16]
 800de52:	f000 f8a5 	bl	800dfa0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800de56:	2301      	movs	r3, #1
 800de58:	617b      	str	r3, [r7, #20]
 800de5a:	e001      	b.n	800de60 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800de5c:	2300      	movs	r3, #0
 800de5e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800de60:	697b      	ldr	r3, [r7, #20]
	}
 800de62:	4618      	mov	r0, r3
 800de64:	371c      	adds	r7, #28
 800de66:	46bd      	mov	sp, r7
 800de68:	bd90      	pop	{r4, r7, pc}

0800de6a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800de6a:	b590      	push	{r4, r7, lr}
 800de6c:	b087      	sub	sp, #28
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
 800de72:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d109      	bne.n	800de92 <xQueueTakeMutexRecursive+0x28>
 800de7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de82:	f383 8811 	msr	BASEPRI, r3
 800de86:	f3bf 8f6f 	isb	sy
 800de8a:	f3bf 8f4f 	dsb	sy
 800de8e:	60fb      	str	r3, [r7, #12]
 800de90:	e7fe      	b.n	800de90 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	689c      	ldr	r4, [r3, #8]
 800de96:	f001 fce7 	bl	800f868 <xTaskGetCurrentTaskHandle>
 800de9a:	4603      	mov	r3, r0
 800de9c:	429c      	cmp	r4, r3
 800de9e:	d107      	bne.n	800deb0 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	1c5a      	adds	r2, r3, #1
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800deaa:	2301      	movs	r3, #1
 800deac:	617b      	str	r3, [r7, #20]
 800deae:	e00c      	b.n	800deca <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800deb0:	6839      	ldr	r1, [r7, #0]
 800deb2:	6938      	ldr	r0, [r7, #16]
 800deb4:	f000 fb68 	bl	800e588 <xQueueSemaphoreTake>
 800deb8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d004      	beq.n	800deca <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	1c5a      	adds	r2, r3, #1
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800deca:	697b      	ldr	r3, [r7, #20]
	}
 800decc:	4618      	mov	r0, r3
 800dece:	371c      	adds	r7, #28
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd90      	pop	{r4, r7, pc}

0800ded4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b08a      	sub	sp, #40	; 0x28
 800ded8:	af02      	add	r7, sp, #8
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d109      	bne.n	800defa <xQueueCreateCountingSemaphoreStatic+0x26>
 800dee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deea:	f383 8811 	msr	BASEPRI, r3
 800deee:	f3bf 8f6f 	isb	sy
 800def2:	f3bf 8f4f 	dsb	sy
 800def6:	61bb      	str	r3, [r7, #24]
 800def8:	e7fe      	b.n	800def8 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800defa:	68ba      	ldr	r2, [r7, #8]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	429a      	cmp	r2, r3
 800df00:	d909      	bls.n	800df16 <xQueueCreateCountingSemaphoreStatic+0x42>
 800df02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df06:	f383 8811 	msr	BASEPRI, r3
 800df0a:	f3bf 8f6f 	isb	sy
 800df0e:	f3bf 8f4f 	dsb	sy
 800df12:	617b      	str	r3, [r7, #20]
 800df14:	e7fe      	b.n	800df14 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800df16:	2302      	movs	r3, #2
 800df18:	9300      	str	r3, [sp, #0]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2200      	movs	r2, #0
 800df1e:	2100      	movs	r1, #0
 800df20:	68f8      	ldr	r0, [r7, #12]
 800df22:	f7ff fe4d 	bl	800dbc0 <xQueueGenericCreateStatic>
 800df26:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d002      	beq.n	800df34 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	68ba      	ldr	r2, [r7, #8]
 800df32:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800df34:	69fb      	ldr	r3, [r7, #28]
	}
 800df36:	4618      	mov	r0, r3
 800df38:	3720      	adds	r7, #32
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800df3e:	b580      	push	{r7, lr}
 800df40:	b086      	sub	sp, #24
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
 800df46:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d109      	bne.n	800df62 <xQueueCreateCountingSemaphore+0x24>
 800df4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df52:	f383 8811 	msr	BASEPRI, r3
 800df56:	f3bf 8f6f 	isb	sy
 800df5a:	f3bf 8f4f 	dsb	sy
 800df5e:	613b      	str	r3, [r7, #16]
 800df60:	e7fe      	b.n	800df60 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800df62:	683a      	ldr	r2, [r7, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	429a      	cmp	r2, r3
 800df68:	d909      	bls.n	800df7e <xQueueCreateCountingSemaphore+0x40>
 800df6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6e:	f383 8811 	msr	BASEPRI, r3
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	60fb      	str	r3, [r7, #12]
 800df7c:	e7fe      	b.n	800df7c <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800df7e:	2202      	movs	r2, #2
 800df80:	2100      	movs	r1, #0
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7ff fe8f 	bl	800dca6 <xQueueGenericCreate>
 800df88:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d002      	beq.n	800df96 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	683a      	ldr	r2, [r7, #0]
 800df94:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800df96:	697b      	ldr	r3, [r7, #20]
	}
 800df98:	4618      	mov	r0, r3
 800df9a:	3718      	adds	r7, #24
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b08e      	sub	sp, #56	; 0x38
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
 800dfac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d109      	bne.n	800dfd0 <xQueueGenericSend+0x30>
 800dfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc0:	f383 8811 	msr	BASEPRI, r3
 800dfc4:	f3bf 8f6f 	isb	sy
 800dfc8:	f3bf 8f4f 	dsb	sy
 800dfcc:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfce:	e7fe      	b.n	800dfce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d103      	bne.n	800dfde <xQueueGenericSend+0x3e>
 800dfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d101      	bne.n	800dfe2 <xQueueGenericSend+0x42>
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e000      	b.n	800dfe4 <xQueueGenericSend+0x44>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d109      	bne.n	800dffc <xQueueGenericSend+0x5c>
 800dfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfec:	f383 8811 	msr	BASEPRI, r3
 800dff0:	f3bf 8f6f 	isb	sy
 800dff4:	f3bf 8f4f 	dsb	sy
 800dff8:	627b      	str	r3, [r7, #36]	; 0x24
 800dffa:	e7fe      	b.n	800dffa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	2b02      	cmp	r3, #2
 800e000:	d103      	bne.n	800e00a <xQueueGenericSend+0x6a>
 800e002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e006:	2b01      	cmp	r3, #1
 800e008:	d101      	bne.n	800e00e <xQueueGenericSend+0x6e>
 800e00a:	2301      	movs	r3, #1
 800e00c:	e000      	b.n	800e010 <xQueueGenericSend+0x70>
 800e00e:	2300      	movs	r3, #0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d109      	bne.n	800e028 <xQueueGenericSend+0x88>
 800e014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	623b      	str	r3, [r7, #32]
 800e026:	e7fe      	b.n	800e026 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e028:	f001 fc2e 	bl	800f888 <xTaskGetSchedulerState>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d102      	bne.n	800e038 <xQueueGenericSend+0x98>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d101      	bne.n	800e03c <xQueueGenericSend+0x9c>
 800e038:	2301      	movs	r3, #1
 800e03a:	e000      	b.n	800e03e <xQueueGenericSend+0x9e>
 800e03c:	2300      	movs	r3, #0
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d109      	bne.n	800e056 <xQueueGenericSend+0xb6>
 800e042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e046:	f383 8811 	msr	BASEPRI, r3
 800e04a:	f3bf 8f6f 	isb	sy
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	61fb      	str	r3, [r7, #28]
 800e054:	e7fe      	b.n	800e054 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e056:	f7ff fc31 	bl	800d8bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e062:	429a      	cmp	r2, r3
 800e064:	d302      	bcc.n	800e06c <xQueueGenericSend+0xcc>
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	2b02      	cmp	r3, #2
 800e06a:	d129      	bne.n	800e0c0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e06c:	683a      	ldr	r2, [r7, #0]
 800e06e:	68b9      	ldr	r1, [r7, #8]
 800e070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e072:	f000 fc48 	bl	800e906 <prvCopyDataToQueue>
 800e076:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d010      	beq.n	800e0a2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e082:	3324      	adds	r3, #36	; 0x24
 800e084:	4618      	mov	r0, r3
 800e086:	f001 fa39 	bl	800f4fc <xTaskRemoveFromEventList>
 800e08a:	4603      	mov	r3, r0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d013      	beq.n	800e0b8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e090:	4b3f      	ldr	r3, [pc, #252]	; (800e190 <xQueueGenericSend+0x1f0>)
 800e092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e096:	601a      	str	r2, [r3, #0]
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	f3bf 8f6f 	isb	sy
 800e0a0:	e00a      	b.n	800e0b8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d007      	beq.n	800e0b8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e0a8:	4b39      	ldr	r3, [pc, #228]	; (800e190 <xQueueGenericSend+0x1f0>)
 800e0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0ae:	601a      	str	r2, [r3, #0]
 800e0b0:	f3bf 8f4f 	dsb	sy
 800e0b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e0b8:	f7ff fc2e 	bl	800d918 <vPortExitCritical>
				return pdPASS;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	e063      	b.n	800e188 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d103      	bne.n	800e0ce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e0c6:	f7ff fc27 	bl	800d918 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	e05c      	b.n	800e188 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d106      	bne.n	800e0e2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0d4:	f107 0314 	add.w	r3, r7, #20
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f001 fa71 	bl	800f5c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e0e2:	f7ff fc19 	bl	800d918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e0e6:	f000 ffdb 	bl	800f0a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e0ea:	f7ff fbe7 	bl	800d8bc <vPortEnterCritical>
 800e0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0f4:	b25b      	sxtb	r3, r3
 800e0f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0fa:	d103      	bne.n	800e104 <xQueueGenericSend+0x164>
 800e0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fe:	2200      	movs	r2, #0
 800e100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e10a:	b25b      	sxtb	r3, r3
 800e10c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e110:	d103      	bne.n	800e11a <xQueueGenericSend+0x17a>
 800e112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e114:	2200      	movs	r2, #0
 800e116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e11a:	f7ff fbfd 	bl	800d918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e11e:	1d3a      	adds	r2, r7, #4
 800e120:	f107 0314 	add.w	r3, r7, #20
 800e124:	4611      	mov	r1, r2
 800e126:	4618      	mov	r0, r3
 800e128:	f001 fa60 	bl	800f5ec <xTaskCheckForTimeOut>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d124      	bne.n	800e17c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e134:	f000 fcdf 	bl	800eaf6 <prvIsQueueFull>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d018      	beq.n	800e170 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e140:	3310      	adds	r3, #16
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	4611      	mov	r1, r2
 800e146:	4618      	mov	r0, r3
 800e148:	f001 f98a 	bl	800f460 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e14c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e14e:	f000 fc6a 	bl	800ea26 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e152:	f000 ffb3 	bl	800f0bc <xTaskResumeAll>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f47f af7c 	bne.w	800e056 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800e15e:	4b0c      	ldr	r3, [pc, #48]	; (800e190 <xQueueGenericSend+0x1f0>)
 800e160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e164:	601a      	str	r2, [r3, #0]
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	e772      	b.n	800e056 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e172:	f000 fc58 	bl	800ea26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e176:	f000 ffa1 	bl	800f0bc <xTaskResumeAll>
 800e17a:	e76c      	b.n	800e056 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e17c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e17e:	f000 fc52 	bl	800ea26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e182:	f000 ff9b 	bl	800f0bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e186:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3738      	adds	r7, #56	; 0x38
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	e000ed04 	.word	0xe000ed04

0800e194 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b08e      	sub	sp, #56	; 0x38
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	607a      	str	r2, [r7, #4]
 800e1a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d109      	bne.n	800e1c0 <xQueueGenericSendFromISR+0x2c>
 800e1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b0:	f383 8811 	msr	BASEPRI, r3
 800e1b4:	f3bf 8f6f 	isb	sy
 800e1b8:	f3bf 8f4f 	dsb	sy
 800e1bc:	627b      	str	r3, [r7, #36]	; 0x24
 800e1be:	e7fe      	b.n	800e1be <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d103      	bne.n	800e1ce <xQueueGenericSendFromISR+0x3a>
 800e1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d101      	bne.n	800e1d2 <xQueueGenericSendFromISR+0x3e>
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e000      	b.n	800e1d4 <xQueueGenericSendFromISR+0x40>
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d109      	bne.n	800e1ec <xQueueGenericSendFromISR+0x58>
 800e1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1dc:	f383 8811 	msr	BASEPRI, r3
 800e1e0:	f3bf 8f6f 	isb	sy
 800e1e4:	f3bf 8f4f 	dsb	sy
 800e1e8:	623b      	str	r3, [r7, #32]
 800e1ea:	e7fe      	b.n	800e1ea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	2b02      	cmp	r3, #2
 800e1f0:	d103      	bne.n	800e1fa <xQueueGenericSendFromISR+0x66>
 800e1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1f6:	2b01      	cmp	r3, #1
 800e1f8:	d101      	bne.n	800e1fe <xQueueGenericSendFromISR+0x6a>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	e000      	b.n	800e200 <xQueueGenericSendFromISR+0x6c>
 800e1fe:	2300      	movs	r3, #0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d109      	bne.n	800e218 <xQueueGenericSendFromISR+0x84>
 800e204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e208:	f383 8811 	msr	BASEPRI, r3
 800e20c:	f3bf 8f6f 	isb	sy
 800e210:	f3bf 8f4f 	dsb	sy
 800e214:	61fb      	str	r3, [r7, #28]
 800e216:	e7fe      	b.n	800e216 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e218:	f7ff fc2c 	bl	800da74 <vPortValidateInterruptPriority>
	__asm volatile
 800e21c:	f3ef 8211 	mrs	r2, BASEPRI
 800e220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e224:	f383 8811 	msr	BASEPRI, r3
 800e228:	f3bf 8f6f 	isb	sy
 800e22c:	f3bf 8f4f 	dsb	sy
 800e230:	61ba      	str	r2, [r7, #24]
 800e232:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e234:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e236:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e240:	429a      	cmp	r2, r3
 800e242:	d302      	bcc.n	800e24a <xQueueGenericSendFromISR+0xb6>
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	2b02      	cmp	r3, #2
 800e248:	d12c      	bne.n	800e2a4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e254:	683a      	ldr	r2, [r7, #0]
 800e256:	68b9      	ldr	r1, [r7, #8]
 800e258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e25a:	f000 fb54 	bl	800e906 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e25e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e266:	d112      	bne.n	800e28e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d016      	beq.n	800e29e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e272:	3324      	adds	r3, #36	; 0x24
 800e274:	4618      	mov	r0, r3
 800e276:	f001 f941 	bl	800f4fc <xTaskRemoveFromEventList>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d00e      	beq.n	800e29e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d00b      	beq.n	800e29e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2201      	movs	r2, #1
 800e28a:	601a      	str	r2, [r3, #0]
 800e28c:	e007      	b.n	800e29e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e28e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e292:	3301      	adds	r3, #1
 800e294:	b2db      	uxtb	r3, r3
 800e296:	b25a      	sxtb	r2, r3
 800e298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e29e:	2301      	movs	r3, #1
 800e2a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e2a2:	e001      	b.n	800e2a8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	637b      	str	r3, [r7, #52]	; 0x34
 800e2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2aa:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3738      	adds	r7, #56	; 0x38
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b08e      	sub	sp, #56	; 0x38
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d109      	bne.n	800e2e4 <xQueueGiveFromISR+0x28>
	__asm volatile
 800e2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d4:	f383 8811 	msr	BASEPRI, r3
 800e2d8:	f3bf 8f6f 	isb	sy
 800e2dc:	f3bf 8f4f 	dsb	sy
 800e2e0:	623b      	str	r3, [r7, #32]
 800e2e2:	e7fe      	b.n	800e2e2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d009      	beq.n	800e300 <xQueueGiveFromISR+0x44>
 800e2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f0:	f383 8811 	msr	BASEPRI, r3
 800e2f4:	f3bf 8f6f 	isb	sy
 800e2f8:	f3bf 8f4f 	dsb	sy
 800e2fc:	61fb      	str	r3, [r7, #28]
 800e2fe:	e7fe      	b.n	800e2fe <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d103      	bne.n	800e310 <xQueueGiveFromISR+0x54>
 800e308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e30a:	689b      	ldr	r3, [r3, #8]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d101      	bne.n	800e314 <xQueueGiveFromISR+0x58>
 800e310:	2301      	movs	r3, #1
 800e312:	e000      	b.n	800e316 <xQueueGiveFromISR+0x5a>
 800e314:	2300      	movs	r3, #0
 800e316:	2b00      	cmp	r3, #0
 800e318:	d109      	bne.n	800e32e <xQueueGiveFromISR+0x72>
 800e31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31e:	f383 8811 	msr	BASEPRI, r3
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	f3bf 8f4f 	dsb	sy
 800e32a:	61bb      	str	r3, [r7, #24]
 800e32c:	e7fe      	b.n	800e32c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e32e:	f7ff fba1 	bl	800da74 <vPortValidateInterruptPriority>
	__asm volatile
 800e332:	f3ef 8211 	mrs	r2, BASEPRI
 800e336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33a:	f383 8811 	msr	BASEPRI, r3
 800e33e:	f3bf 8f6f 	isb	sy
 800e342:	f3bf 8f4f 	dsb	sy
 800e346:	617a      	str	r2, [r7, #20]
 800e348:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e34a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e34c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e352:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d22b      	bcs.n	800e3b6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36a:	1c5a      	adds	r2, r3, #1
 800e36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e378:	d112      	bne.n	800e3a0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d016      	beq.n	800e3b0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e384:	3324      	adds	r3, #36	; 0x24
 800e386:	4618      	mov	r0, r3
 800e388:	f001 f8b8 	bl	800f4fc <xTaskRemoveFromEventList>
 800e38c:	4603      	mov	r3, r0
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00e      	beq.n	800e3b0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00b      	beq.n	800e3b0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	2201      	movs	r2, #1
 800e39c:	601a      	str	r2, [r3, #0]
 800e39e:	e007      	b.n	800e3b0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	b25a      	sxtb	r2, r3
 800e3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	637b      	str	r3, [r7, #52]	; 0x34
 800e3b4:	e001      	b.n	800e3ba <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	637b      	str	r3, [r7, #52]	; 0x34
 800e3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3738      	adds	r7, #56	; 0x38
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
	...

0800e3d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b08c      	sub	sp, #48	; 0x30
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d109      	bne.n	800e3fe <xQueueReceive+0x2e>
	__asm volatile
 800e3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ee:	f383 8811 	msr	BASEPRI, r3
 800e3f2:	f3bf 8f6f 	isb	sy
 800e3f6:	f3bf 8f4f 	dsb	sy
 800e3fa:	623b      	str	r3, [r7, #32]
 800e3fc:	e7fe      	b.n	800e3fc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d103      	bne.n	800e40c <xQueueReceive+0x3c>
 800e404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d101      	bne.n	800e410 <xQueueReceive+0x40>
 800e40c:	2301      	movs	r3, #1
 800e40e:	e000      	b.n	800e412 <xQueueReceive+0x42>
 800e410:	2300      	movs	r3, #0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d109      	bne.n	800e42a <xQueueReceive+0x5a>
 800e416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41a:	f383 8811 	msr	BASEPRI, r3
 800e41e:	f3bf 8f6f 	isb	sy
 800e422:	f3bf 8f4f 	dsb	sy
 800e426:	61fb      	str	r3, [r7, #28]
 800e428:	e7fe      	b.n	800e428 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e42a:	f001 fa2d 	bl	800f888 <xTaskGetSchedulerState>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d102      	bne.n	800e43a <xQueueReceive+0x6a>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d101      	bne.n	800e43e <xQueueReceive+0x6e>
 800e43a:	2301      	movs	r3, #1
 800e43c:	e000      	b.n	800e440 <xQueueReceive+0x70>
 800e43e:	2300      	movs	r3, #0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d109      	bne.n	800e458 <xQueueReceive+0x88>
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	61bb      	str	r3, [r7, #24]
 800e456:	e7fe      	b.n	800e456 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e458:	f7ff fa30 	bl	800d8bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e460:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e464:	2b00      	cmp	r3, #0
 800e466:	d01f      	beq.n	800e4a8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e468:	68b9      	ldr	r1, [r7, #8]
 800e46a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e46c:	f000 fab5 	bl	800e9da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e472:	1e5a      	subs	r2, r3, #1
 800e474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e476:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47a:	691b      	ldr	r3, [r3, #16]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00f      	beq.n	800e4a0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e482:	3310      	adds	r3, #16
 800e484:	4618      	mov	r0, r3
 800e486:	f001 f839 	bl	800f4fc <xTaskRemoveFromEventList>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d007      	beq.n	800e4a0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e490:	4b3c      	ldr	r3, [pc, #240]	; (800e584 <xQueueReceive+0x1b4>)
 800e492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e496:	601a      	str	r2, [r3, #0]
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e4a0:	f7ff fa3a 	bl	800d918 <vPortExitCritical>
				return pdPASS;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e069      	b.n	800e57c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d103      	bne.n	800e4b6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e4ae:	f7ff fa33 	bl	800d918 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	e062      	b.n	800e57c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d106      	bne.n	800e4ca <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4bc:	f107 0310 	add.w	r3, r7, #16
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f001 f87d 	bl	800f5c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e4ca:	f7ff fa25 	bl	800d918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e4ce:	f000 fde7 	bl	800f0a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4d2:	f7ff f9f3 	bl	800d8bc <vPortEnterCritical>
 800e4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4dc:	b25b      	sxtb	r3, r3
 800e4de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4e2:	d103      	bne.n	800e4ec <xQueueReceive+0x11c>
 800e4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4f2:	b25b      	sxtb	r3, r3
 800e4f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4f8:	d103      	bne.n	800e502 <xQueueReceive+0x132>
 800e4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e502:	f7ff fa09 	bl	800d918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e506:	1d3a      	adds	r2, r7, #4
 800e508:	f107 0310 	add.w	r3, r7, #16
 800e50c:	4611      	mov	r1, r2
 800e50e:	4618      	mov	r0, r3
 800e510:	f001 f86c 	bl	800f5ec <xTaskCheckForTimeOut>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d123      	bne.n	800e562 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e51a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e51c:	f000 fad5 	bl	800eaca <prvIsQueueEmpty>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d017      	beq.n	800e556 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e528:	3324      	adds	r3, #36	; 0x24
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	4611      	mov	r1, r2
 800e52e:	4618      	mov	r0, r3
 800e530:	f000 ff96 	bl	800f460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e536:	f000 fa76 	bl	800ea26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e53a:	f000 fdbf 	bl	800f0bc <xTaskResumeAll>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d189      	bne.n	800e458 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800e544:	4b0f      	ldr	r3, [pc, #60]	; (800e584 <xQueueReceive+0x1b4>)
 800e546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e54a:	601a      	str	r2, [r3, #0]
 800e54c:	f3bf 8f4f 	dsb	sy
 800e550:	f3bf 8f6f 	isb	sy
 800e554:	e780      	b.n	800e458 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e558:	f000 fa65 	bl	800ea26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e55c:	f000 fdae 	bl	800f0bc <xTaskResumeAll>
 800e560:	e77a      	b.n	800e458 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e564:	f000 fa5f 	bl	800ea26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e568:	f000 fda8 	bl	800f0bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e56c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e56e:	f000 faac 	bl	800eaca <prvIsQueueEmpty>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	f43f af6f 	beq.w	800e458 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e57a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3730      	adds	r7, #48	; 0x30
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	e000ed04 	.word	0xe000ed04

0800e588 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b08e      	sub	sp, #56	; 0x38
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e592:	2300      	movs	r3, #0
 800e594:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e59a:	2300      	movs	r3, #0
 800e59c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d109      	bne.n	800e5b8 <xQueueSemaphoreTake+0x30>
 800e5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a8:	f383 8811 	msr	BASEPRI, r3
 800e5ac:	f3bf 8f6f 	isb	sy
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	623b      	str	r3, [r7, #32]
 800e5b6:	e7fe      	b.n	800e5b6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d009      	beq.n	800e5d4 <xQueueSemaphoreTake+0x4c>
 800e5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c4:	f383 8811 	msr	BASEPRI, r3
 800e5c8:	f3bf 8f6f 	isb	sy
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	61fb      	str	r3, [r7, #28]
 800e5d2:	e7fe      	b.n	800e5d2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5d4:	f001 f958 	bl	800f888 <xTaskGetSchedulerState>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d102      	bne.n	800e5e4 <xQueueSemaphoreTake+0x5c>
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d101      	bne.n	800e5e8 <xQueueSemaphoreTake+0x60>
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	e000      	b.n	800e5ea <xQueueSemaphoreTake+0x62>
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d109      	bne.n	800e602 <xQueueSemaphoreTake+0x7a>
 800e5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f2:	f383 8811 	msr	BASEPRI, r3
 800e5f6:	f3bf 8f6f 	isb	sy
 800e5fa:	f3bf 8f4f 	dsb	sy
 800e5fe:	61bb      	str	r3, [r7, #24]
 800e600:	e7fe      	b.n	800e600 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e602:	f7ff f95b 	bl	800d8bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e60a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d024      	beq.n	800e65c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e614:	1e5a      	subs	r2, r3, #1
 800e616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e618:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d104      	bne.n	800e62c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e622:	f001 faa3 	bl	800fb6c <pvTaskIncrementMutexHeldCount>
 800e626:	4602      	mov	r2, r0
 800e628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e62a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e62e:	691b      	ldr	r3, [r3, #16]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00f      	beq.n	800e654 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e636:	3310      	adds	r3, #16
 800e638:	4618      	mov	r0, r3
 800e63a:	f000 ff5f 	bl	800f4fc <xTaskRemoveFromEventList>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d007      	beq.n	800e654 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e644:	4b53      	ldr	r3, [pc, #332]	; (800e794 <xQueueSemaphoreTake+0x20c>)
 800e646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e64a:	601a      	str	r2, [r3, #0]
 800e64c:	f3bf 8f4f 	dsb	sy
 800e650:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e654:	f7ff f960 	bl	800d918 <vPortExitCritical>
				return pdPASS;
 800e658:	2301      	movs	r3, #1
 800e65a:	e096      	b.n	800e78a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d110      	bne.n	800e684 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e664:	2b00      	cmp	r3, #0
 800e666:	d009      	beq.n	800e67c <xQueueSemaphoreTake+0xf4>
 800e668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66c:	f383 8811 	msr	BASEPRI, r3
 800e670:	f3bf 8f6f 	isb	sy
 800e674:	f3bf 8f4f 	dsb	sy
 800e678:	617b      	str	r3, [r7, #20]
 800e67a:	e7fe      	b.n	800e67a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e67c:	f7ff f94c 	bl	800d918 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e680:	2300      	movs	r3, #0
 800e682:	e082      	b.n	800e78a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e686:	2b00      	cmp	r3, #0
 800e688:	d106      	bne.n	800e698 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e68a:	f107 030c 	add.w	r3, r7, #12
 800e68e:	4618      	mov	r0, r3
 800e690:	f000 ff96 	bl	800f5c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e694:	2301      	movs	r3, #1
 800e696:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e698:	f7ff f93e 	bl	800d918 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e69c:	f000 fd00 	bl	800f0a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6a0:	f7ff f90c 	bl	800d8bc <vPortEnterCritical>
 800e6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6aa:	b25b      	sxtb	r3, r3
 800e6ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6b0:	d103      	bne.n	800e6ba <xQueueSemaphoreTake+0x132>
 800e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6c0:	b25b      	sxtb	r3, r3
 800e6c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6c6:	d103      	bne.n	800e6d0 <xQueueSemaphoreTake+0x148>
 800e6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6d0:	f7ff f922 	bl	800d918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6d4:	463a      	mov	r2, r7
 800e6d6:	f107 030c 	add.w	r3, r7, #12
 800e6da:	4611      	mov	r1, r2
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f000 ff85 	bl	800f5ec <xTaskCheckForTimeOut>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d132      	bne.n	800e74e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6ea:	f000 f9ee 	bl	800eaca <prvIsQueueEmpty>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d026      	beq.n	800e742 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d109      	bne.n	800e710 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800e6fc:	f7ff f8de 	bl	800d8bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e702:	689b      	ldr	r3, [r3, #8]
 800e704:	4618      	mov	r0, r3
 800e706:	f001 f8dd 	bl	800f8c4 <xTaskPriorityInherit>
 800e70a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e70c:	f7ff f904 	bl	800d918 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e712:	3324      	adds	r3, #36	; 0x24
 800e714:	683a      	ldr	r2, [r7, #0]
 800e716:	4611      	mov	r1, r2
 800e718:	4618      	mov	r0, r3
 800e71a:	f000 fea1 	bl	800f460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e71e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e720:	f000 f981 	bl	800ea26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e724:	f000 fcca 	bl	800f0bc <xTaskResumeAll>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	f47f af69 	bne.w	800e602 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800e730:	4b18      	ldr	r3, [pc, #96]	; (800e794 <xQueueSemaphoreTake+0x20c>)
 800e732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e736:	601a      	str	r2, [r3, #0]
 800e738:	f3bf 8f4f 	dsb	sy
 800e73c:	f3bf 8f6f 	isb	sy
 800e740:	e75f      	b.n	800e602 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e744:	f000 f96f 	bl	800ea26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e748:	f000 fcb8 	bl	800f0bc <xTaskResumeAll>
 800e74c:	e759      	b.n	800e602 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e74e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e750:	f000 f969 	bl	800ea26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e754:	f000 fcb2 	bl	800f0bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e75a:	f000 f9b6 	bl	800eaca <prvIsQueueEmpty>
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	f43f af4e 	beq.w	800e602 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d00d      	beq.n	800e788 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800e76c:	f7ff f8a6 	bl	800d8bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e772:	f000 f8b0 	bl	800e8d6 <prvGetDisinheritPriorityAfterTimeout>
 800e776:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e77e:	4618      	mov	r0, r3
 800e780:	f001 f974 	bl	800fa6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e784:	f7ff f8c8 	bl	800d918 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e788:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3738      	adds	r7, #56	; 0x38
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	e000ed04 	.word	0xe000ed04

0800e798 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b08e      	sub	sp, #56	; 0x38
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d109      	bne.n	800e7c2 <xQueueReceiveFromISR+0x2a>
 800e7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	623b      	str	r3, [r7, #32]
 800e7c0:	e7fe      	b.n	800e7c0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d103      	bne.n	800e7d0 <xQueueReceiveFromISR+0x38>
 800e7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d101      	bne.n	800e7d4 <xQueueReceiveFromISR+0x3c>
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	e000      	b.n	800e7d6 <xQueueReceiveFromISR+0x3e>
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d109      	bne.n	800e7ee <xQueueReceiveFromISR+0x56>
 800e7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7de:	f383 8811 	msr	BASEPRI, r3
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	f3bf 8f4f 	dsb	sy
 800e7ea:	61fb      	str	r3, [r7, #28]
 800e7ec:	e7fe      	b.n	800e7ec <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7ee:	f7ff f941 	bl	800da74 <vPortValidateInterruptPriority>
	__asm volatile
 800e7f2:	f3ef 8211 	mrs	r2, BASEPRI
 800e7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fa:	f383 8811 	msr	BASEPRI, r3
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	61ba      	str	r2, [r7, #24]
 800e808:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e80a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e80c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e812:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e816:	2b00      	cmp	r3, #0
 800e818:	d02f      	beq.n	800e87a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e824:	68b9      	ldr	r1, [r7, #8]
 800e826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e828:	f000 f8d7 	bl	800e9da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82e:	1e5a      	subs	r2, r3, #1
 800e830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e832:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e834:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e83c:	d112      	bne.n	800e864 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e840:	691b      	ldr	r3, [r3, #16]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d016      	beq.n	800e874 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e848:	3310      	adds	r3, #16
 800e84a:	4618      	mov	r0, r3
 800e84c:	f000 fe56 	bl	800f4fc <xTaskRemoveFromEventList>
 800e850:	4603      	mov	r3, r0
 800e852:	2b00      	cmp	r3, #0
 800e854:	d00e      	beq.n	800e874 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d00b      	beq.n	800e874 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2201      	movs	r2, #1
 800e860:	601a      	str	r2, [r3, #0]
 800e862:	e007      	b.n	800e874 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e868:	3301      	adds	r3, #1
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	b25a      	sxtb	r2, r3
 800e86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e874:	2301      	movs	r3, #1
 800e876:	637b      	str	r3, [r7, #52]	; 0x34
 800e878:	e001      	b.n	800e87e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800e87a:	2300      	movs	r3, #0
 800e87c:	637b      	str	r3, [r7, #52]	; 0x34
 800e87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e880:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3738      	adds	r7, #56	; 0x38
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}

0800e892 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b084      	sub	sp, #16
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d109      	bne.n	800e8b8 <vQueueDelete+0x26>
	__asm volatile
 800e8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a8:	f383 8811 	msr	BASEPRI, r3
 800e8ac:	f3bf 8f6f 	isb	sy
 800e8b0:	f3bf 8f4f 	dsb	sy
 800e8b4:	60bb      	str	r3, [r7, #8]
 800e8b6:	e7fe      	b.n	800e8b6 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e8b8:	68f8      	ldr	r0, [r7, #12]
 800e8ba:	f000 f95d 	bl	800eb78 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d102      	bne.n	800e8ce <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800e8c8:	68f8      	ldr	r0, [r7, #12]
 800e8ca:	f7fe fd07 	bl	800d2dc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e8ce:	bf00      	nop
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e8d6:	b480      	push	{r7}
 800e8d8:	b085      	sub	sp, #20
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d006      	beq.n	800e8f4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e8f0:	60fb      	str	r3, [r7, #12]
 800e8f2:	e001      	b.n	800e8f8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
	}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3714      	adds	r7, #20
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr

0800e906 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b086      	sub	sp, #24
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	60f8      	str	r0, [r7, #12]
 800e90e:	60b9      	str	r1, [r7, #8]
 800e910:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e912:	2300      	movs	r3, #0
 800e914:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e91a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e920:	2b00      	cmp	r3, #0
 800e922:	d10d      	bne.n	800e940 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d14d      	bne.n	800e9c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	4618      	mov	r0, r3
 800e932:	f001 f82f 	bl	800f994 <xTaskPriorityDisinherit>
 800e936:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2200      	movs	r2, #0
 800e93c:	609a      	str	r2, [r3, #8]
 800e93e:	e043      	b.n	800e9c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d119      	bne.n	800e97a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6858      	ldr	r0, [r3, #4]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e94e:	461a      	mov	r2, r3
 800e950:	68b9      	ldr	r1, [r7, #8]
 800e952:	f00e fa6a 	bl	801ce2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	685a      	ldr	r2, [r3, #4]
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e95e:	441a      	add	r2, r3
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	685a      	ldr	r2, [r3, #4]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d32b      	bcc.n	800e9c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	605a      	str	r2, [r3, #4]
 800e978:	e026      	b.n	800e9c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	68d8      	ldr	r0, [r3, #12]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e982:	461a      	mov	r2, r3
 800e984:	68b9      	ldr	r1, [r7, #8]
 800e986:	f00e fa50 	bl	801ce2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	68da      	ldr	r2, [r3, #12]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e992:	425b      	negs	r3, r3
 800e994:	441a      	add	r2, r3
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	68da      	ldr	r2, [r3, #12]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d207      	bcs.n	800e9b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	689a      	ldr	r2, [r3, #8]
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ae:	425b      	negs	r3, r3
 800e9b0:	441a      	add	r2, r3
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b02      	cmp	r3, #2
 800e9ba:	d105      	bne.n	800e9c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d002      	beq.n	800e9c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	3b01      	subs	r3, #1
 800e9c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	1c5a      	adds	r2, r3, #1
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e9d0:	697b      	ldr	r3, [r7, #20]
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3718      	adds	r7, #24
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b082      	sub	sp, #8
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
 800e9e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d018      	beq.n	800ea1e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	68da      	ldr	r2, [r3, #12]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9f4:	441a      	add	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	68da      	ldr	r2, [r3, #12]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	689b      	ldr	r3, [r3, #8]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d303      	bcc.n	800ea0e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	68d9      	ldr	r1, [r3, #12]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea16:	461a      	mov	r2, r3
 800ea18:	6838      	ldr	r0, [r7, #0]
 800ea1a:	f00e fa06 	bl	801ce2a <memcpy>
	}
}
 800ea1e:	bf00      	nop
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}

0800ea26 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ea26:	b580      	push	{r7, lr}
 800ea28:	b084      	sub	sp, #16
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ea2e:	f7fe ff45 	bl	800d8bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea38:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea3a:	e011      	b.n	800ea60 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d012      	beq.n	800ea6a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	3324      	adds	r3, #36	; 0x24
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f000 fd57 	bl	800f4fc <xTaskRemoveFromEventList>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d001      	beq.n	800ea58 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ea54:	f000 fe2a 	bl	800f6ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ea58:	7bfb      	ldrb	r3, [r7, #15]
 800ea5a:	3b01      	subs	r3, #1
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	dce9      	bgt.n	800ea3c <prvUnlockQueue+0x16>
 800ea68:	e000      	b.n	800ea6c <prvUnlockQueue+0x46>
					break;
 800ea6a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	22ff      	movs	r2, #255	; 0xff
 800ea70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ea74:	f7fe ff50 	bl	800d918 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ea78:	f7fe ff20 	bl	800d8bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea82:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea84:	e011      	b.n	800eaaa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	691b      	ldr	r3, [r3, #16]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d012      	beq.n	800eab4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	3310      	adds	r3, #16
 800ea92:	4618      	mov	r0, r3
 800ea94:	f000 fd32 	bl	800f4fc <xTaskRemoveFromEventList>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d001      	beq.n	800eaa2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ea9e:	f000 fe05 	bl	800f6ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eaa2:	7bbb      	ldrb	r3, [r7, #14]
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eaaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	dce9      	bgt.n	800ea86 <prvUnlockQueue+0x60>
 800eab2:	e000      	b.n	800eab6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eab4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	22ff      	movs	r2, #255	; 0xff
 800eaba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800eabe:	f7fe ff2b 	bl	800d918 <vPortExitCritical>
}
 800eac2:	bf00      	nop
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b084      	sub	sp, #16
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ead2:	f7fe fef3 	bl	800d8bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d102      	bne.n	800eae4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eade:	2301      	movs	r3, #1
 800eae0:	60fb      	str	r3, [r7, #12]
 800eae2:	e001      	b.n	800eae8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eae4:	2300      	movs	r3, #0
 800eae6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eae8:	f7fe ff16 	bl	800d918 <vPortExitCritical>

	return xReturn;
 800eaec:	68fb      	ldr	r3, [r7, #12]
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}

0800eaf6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b084      	sub	sp, #16
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eafe:	f7fe fedd 	bl	800d8bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d102      	bne.n	800eb14 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eb0e:	2301      	movs	r3, #1
 800eb10:	60fb      	str	r3, [r7, #12]
 800eb12:	e001      	b.n	800eb18 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eb14:	2300      	movs	r3, #0
 800eb16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eb18:	f7fe fefe 	bl	800d918 <vPortExitCritical>

	return xReturn;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
	...

0800eb28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb32:	2300      	movs	r3, #0
 800eb34:	60fb      	str	r3, [r7, #12]
 800eb36:	e014      	b.n	800eb62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eb38:	4a0e      	ldr	r2, [pc, #56]	; (800eb74 <vQueueAddToRegistry+0x4c>)
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d10b      	bne.n	800eb5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eb44:	490b      	ldr	r1, [pc, #44]	; (800eb74 <vQueueAddToRegistry+0x4c>)
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	683a      	ldr	r2, [r7, #0]
 800eb4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eb4e:	4a09      	ldr	r2, [pc, #36]	; (800eb74 <vQueueAddToRegistry+0x4c>)
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	00db      	lsls	r3, r3, #3
 800eb54:	4413      	add	r3, r2
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eb5a:	e005      	b.n	800eb68 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	60fb      	str	r3, [r7, #12]
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2b07      	cmp	r3, #7
 800eb66:	d9e7      	bls.n	800eb38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eb68:	bf00      	nop
 800eb6a:	3714      	adds	r7, #20
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr
 800eb74:	20008914 	.word	0x20008914

0800eb78 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800eb78:	b480      	push	{r7}
 800eb7a:	b085      	sub	sp, #20
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb80:	2300      	movs	r3, #0
 800eb82:	60fb      	str	r3, [r7, #12]
 800eb84:	e016      	b.n	800ebb4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800eb86:	4a10      	ldr	r2, [pc, #64]	; (800ebc8 <vQueueUnregisterQueue+0x50>)
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	00db      	lsls	r3, r3, #3
 800eb8c:	4413      	add	r3, r2
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d10b      	bne.n	800ebae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800eb96:	4a0c      	ldr	r2, [pc, #48]	; (800ebc8 <vQueueUnregisterQueue+0x50>)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2100      	movs	r1, #0
 800eb9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800eba0:	4a09      	ldr	r2, [pc, #36]	; (800ebc8 <vQueueUnregisterQueue+0x50>)
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	00db      	lsls	r3, r3, #3
 800eba6:	4413      	add	r3, r2
 800eba8:	2200      	movs	r2, #0
 800ebaa:	605a      	str	r2, [r3, #4]
				break;
 800ebac:	e005      	b.n	800ebba <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	60fb      	str	r3, [r7, #12]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2b07      	cmp	r3, #7
 800ebb8:	d9e5      	bls.n	800eb86 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ebba:	bf00      	nop
 800ebbc:	3714      	adds	r7, #20
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop
 800ebc8:	20008914 	.word	0x20008914

0800ebcc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b086      	sub	sp, #24
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	60f8      	str	r0, [r7, #12]
 800ebd4:	60b9      	str	r1, [r7, #8]
 800ebd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ebdc:	f7fe fe6e 	bl	800d8bc <vPortEnterCritical>
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebe6:	b25b      	sxtb	r3, r3
 800ebe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebec:	d103      	bne.n	800ebf6 <vQueueWaitForMessageRestricted+0x2a>
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebfc:	b25b      	sxtb	r3, r3
 800ebfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec02:	d103      	bne.n	800ec0c <vQueueWaitForMessageRestricted+0x40>
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	2200      	movs	r2, #0
 800ec08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec0c:	f7fe fe84 	bl	800d918 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d106      	bne.n	800ec26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	3324      	adds	r3, #36	; 0x24
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	68b9      	ldr	r1, [r7, #8]
 800ec20:	4618      	mov	r0, r3
 800ec22:	f000 fc41 	bl	800f4a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ec26:	6978      	ldr	r0, [r7, #20]
 800ec28:	f7ff fefd 	bl	800ea26 <prvUnlockQueue>
	}
 800ec2c:	bf00      	nop
 800ec2e:	3718      	adds	r7, #24
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b08e      	sub	sp, #56	; 0x38
 800ec38:	af04      	add	r7, sp, #16
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	607a      	str	r2, [r7, #4]
 800ec40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ec42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d109      	bne.n	800ec5c <xTaskCreateStatic+0x28>
 800ec48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4c:	f383 8811 	msr	BASEPRI, r3
 800ec50:	f3bf 8f6f 	isb	sy
 800ec54:	f3bf 8f4f 	dsb	sy
 800ec58:	623b      	str	r3, [r7, #32]
 800ec5a:	e7fe      	b.n	800ec5a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ec5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d109      	bne.n	800ec76 <xTaskCreateStatic+0x42>
 800ec62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec66:	f383 8811 	msr	BASEPRI, r3
 800ec6a:	f3bf 8f6f 	isb	sy
 800ec6e:	f3bf 8f4f 	dsb	sy
 800ec72:	61fb      	str	r3, [r7, #28]
 800ec74:	e7fe      	b.n	800ec74 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ec76:	235c      	movs	r3, #92	; 0x5c
 800ec78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	2b5c      	cmp	r3, #92	; 0x5c
 800ec7e:	d009      	beq.n	800ec94 <xTaskCreateStatic+0x60>
 800ec80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec84:	f383 8811 	msr	BASEPRI, r3
 800ec88:	f3bf 8f6f 	isb	sy
 800ec8c:	f3bf 8f4f 	dsb	sy
 800ec90:	61bb      	str	r3, [r7, #24]
 800ec92:	e7fe      	b.n	800ec92 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ec94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ec96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d01e      	beq.n	800ecda <xTaskCreateStatic+0xa6>
 800ec9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d01b      	beq.n	800ecda <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800eca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecaa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecae:	2202      	movs	r2, #2
 800ecb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	9303      	str	r3, [sp, #12]
 800ecb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecba:	9302      	str	r3, [sp, #8]
 800ecbc:	f107 0314 	add.w	r3, r7, #20
 800ecc0:	9301      	str	r3, [sp, #4]
 800ecc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	68b9      	ldr	r1, [r7, #8]
 800eccc:	68f8      	ldr	r0, [r7, #12]
 800ecce:	f000 f850 	bl	800ed72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ecd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecd4:	f000 f8dc 	bl	800ee90 <prvAddNewTaskToReadyList>
 800ecd8:	e001      	b.n	800ecde <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ecde:	697b      	ldr	r3, [r7, #20]
	}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3728      	adds	r7, #40	; 0x28
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b08c      	sub	sp, #48	; 0x30
 800ecec:	af04      	add	r7, sp, #16
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	60b9      	str	r1, [r7, #8]
 800ecf2:	603b      	str	r3, [r7, #0]
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ecf8:	88fb      	ldrh	r3, [r7, #6]
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7fe fa2b 	bl	800d158 <pvPortMalloc>
 800ed02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00e      	beq.n	800ed28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ed0a:	205c      	movs	r0, #92	; 0x5c
 800ed0c:	f7fe fa24 	bl	800d158 <pvPortMalloc>
 800ed10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d003      	beq.n	800ed20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	697a      	ldr	r2, [r7, #20]
 800ed1c:	631a      	str	r2, [r3, #48]	; 0x30
 800ed1e:	e005      	b.n	800ed2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ed20:	6978      	ldr	r0, [r7, #20]
 800ed22:	f7fe fadb 	bl	800d2dc <vPortFree>
 800ed26:	e001      	b.n	800ed2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d017      	beq.n	800ed62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	2200      	movs	r2, #0
 800ed36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ed3a:	88fa      	ldrh	r2, [r7, #6]
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	9303      	str	r3, [sp, #12]
 800ed40:	69fb      	ldr	r3, [r7, #28]
 800ed42:	9302      	str	r3, [sp, #8]
 800ed44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed46:	9301      	str	r3, [sp, #4]
 800ed48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	68b9      	ldr	r1, [r7, #8]
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f000 f80e 	bl	800ed72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed56:	69f8      	ldr	r0, [r7, #28]
 800ed58:	f000 f89a 	bl	800ee90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	61bb      	str	r3, [r7, #24]
 800ed60:	e002      	b.n	800ed68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ed62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ed68:	69bb      	ldr	r3, [r7, #24]
	}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3720      	adds	r7, #32
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b088      	sub	sp, #32
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	60f8      	str	r0, [r7, #12]
 800ed7a:	60b9      	str	r1, [r7, #8]
 800ed7c:	607a      	str	r2, [r7, #4]
 800ed7e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ed80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed82:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	009b      	lsls	r3, r3, #2
 800ed88:	461a      	mov	r2, r3
 800ed8a:	21a5      	movs	r1, #165	; 0xa5
 800ed8c:	f00e f871 	bl	801ce72 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ed90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed94:	6879      	ldr	r1, [r7, #4]
 800ed96:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ed9a:	440b      	add	r3, r1
 800ed9c:	009b      	lsls	r3, r3, #2
 800ed9e:	4413      	add	r3, r2
 800eda0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	f023 0307 	bic.w	r3, r3, #7
 800eda8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	f003 0307 	and.w	r3, r3, #7
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d009      	beq.n	800edc8 <prvInitialiseNewTask+0x56>
 800edb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb8:	f383 8811 	msr	BASEPRI, r3
 800edbc:	f3bf 8f6f 	isb	sy
 800edc0:	f3bf 8f4f 	dsb	sy
 800edc4:	617b      	str	r3, [r7, #20]
 800edc6:	e7fe      	b.n	800edc6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d01f      	beq.n	800ee0e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800edce:	2300      	movs	r3, #0
 800edd0:	61fb      	str	r3, [r7, #28]
 800edd2:	e012      	b.n	800edfa <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800edd4:	68ba      	ldr	r2, [r7, #8]
 800edd6:	69fb      	ldr	r3, [r7, #28]
 800edd8:	4413      	add	r3, r2
 800edda:	7819      	ldrb	r1, [r3, #0]
 800eddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	4413      	add	r3, r2
 800ede2:	3334      	adds	r3, #52	; 0x34
 800ede4:	460a      	mov	r2, r1
 800ede6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ede8:	68ba      	ldr	r2, [r7, #8]
 800edea:	69fb      	ldr	r3, [r7, #28]
 800edec:	4413      	add	r3, r2
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d006      	beq.n	800ee02 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800edf4:	69fb      	ldr	r3, [r7, #28]
 800edf6:	3301      	adds	r3, #1
 800edf8:	61fb      	str	r3, [r7, #28]
 800edfa:	69fb      	ldr	r3, [r7, #28]
 800edfc:	2b0f      	cmp	r3, #15
 800edfe:	d9e9      	bls.n	800edd4 <prvInitialiseNewTask+0x62>
 800ee00:	e000      	b.n	800ee04 <prvInitialiseNewTask+0x92>
			{
				break;
 800ee02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ee04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee06:	2200      	movs	r2, #0
 800ee08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ee0c:	e003      	b.n	800ee16 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ee0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee10:	2200      	movs	r2, #0
 800ee12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ee16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee18:	2b37      	cmp	r3, #55	; 0x37
 800ee1a:	d901      	bls.n	800ee20 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ee1c:	2337      	movs	r3, #55	; 0x37
 800ee1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ee20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ee26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ee2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2e:	2200      	movs	r2, #0
 800ee30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ee32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee34:	3304      	adds	r3, #4
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fe fb84 	bl	800d544 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ee3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3e:	3318      	adds	r3, #24
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7fe fb7f 	bl	800d544 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ee46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ee52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ee56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ee5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5e:	2200      	movs	r2, #0
 800ee60:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee64:	2200      	movs	r2, #0
 800ee66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee6a:	683a      	ldr	r2, [r7, #0]
 800ee6c:	68f9      	ldr	r1, [r7, #12]
 800ee6e:	69b8      	ldr	r0, [r7, #24]
 800ee70:	f7fe fbfc 	bl	800d66c <pxPortInitialiseStack>
 800ee74:	4602      	mov	r2, r0
 800ee76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ee7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d002      	beq.n	800ee86 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ee80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee86:	bf00      	nop
 800ee88:	3720      	adds	r7, #32
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
	...

0800ee90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ee98:	f7fe fd10 	bl	800d8bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ee9c:	4b2d      	ldr	r3, [pc, #180]	; (800ef54 <prvAddNewTaskToReadyList+0xc4>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	3301      	adds	r3, #1
 800eea2:	4a2c      	ldr	r2, [pc, #176]	; (800ef54 <prvAddNewTaskToReadyList+0xc4>)
 800eea4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eea6:	4b2c      	ldr	r3, [pc, #176]	; (800ef58 <prvAddNewTaskToReadyList+0xc8>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d109      	bne.n	800eec2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eeae:	4a2a      	ldr	r2, [pc, #168]	; (800ef58 <prvAddNewTaskToReadyList+0xc8>)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eeb4:	4b27      	ldr	r3, [pc, #156]	; (800ef54 <prvAddNewTaskToReadyList+0xc4>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d110      	bne.n	800eede <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eebc:	f000 fc1a 	bl	800f6f4 <prvInitialiseTaskLists>
 800eec0:	e00d      	b.n	800eede <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eec2:	4b26      	ldr	r3, [pc, #152]	; (800ef5c <prvAddNewTaskToReadyList+0xcc>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d109      	bne.n	800eede <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eeca:	4b23      	ldr	r3, [pc, #140]	; (800ef58 <prvAddNewTaskToReadyList+0xc8>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d802      	bhi.n	800eede <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eed8:	4a1f      	ldr	r2, [pc, #124]	; (800ef58 <prvAddNewTaskToReadyList+0xc8>)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eede:	4b20      	ldr	r3, [pc, #128]	; (800ef60 <prvAddNewTaskToReadyList+0xd0>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	3301      	adds	r3, #1
 800eee4:	4a1e      	ldr	r2, [pc, #120]	; (800ef60 <prvAddNewTaskToReadyList+0xd0>)
 800eee6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eee8:	4b1d      	ldr	r3, [pc, #116]	; (800ef60 <prvAddNewTaskToReadyList+0xd0>)
 800eeea:	681a      	ldr	r2, [r3, #0]
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef4:	4b1b      	ldr	r3, [pc, #108]	; (800ef64 <prvAddNewTaskToReadyList+0xd4>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d903      	bls.n	800ef04 <prvAddNewTaskToReadyList+0x74>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef00:	4a18      	ldr	r2, [pc, #96]	; (800ef64 <prvAddNewTaskToReadyList+0xd4>)
 800ef02:	6013      	str	r3, [r2, #0]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef08:	4613      	mov	r3, r2
 800ef0a:	009b      	lsls	r3, r3, #2
 800ef0c:	4413      	add	r3, r2
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	4a15      	ldr	r2, [pc, #84]	; (800ef68 <prvAddNewTaskToReadyList+0xd8>)
 800ef12:	441a      	add	r2, r3
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	3304      	adds	r3, #4
 800ef18:	4619      	mov	r1, r3
 800ef1a:	4610      	mov	r0, r2
 800ef1c:	f7fe fb1f 	bl	800d55e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ef20:	f7fe fcfa 	bl	800d918 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ef24:	4b0d      	ldr	r3, [pc, #52]	; (800ef5c <prvAddNewTaskToReadyList+0xcc>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d00e      	beq.n	800ef4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ef2c:	4b0a      	ldr	r3, [pc, #40]	; (800ef58 <prvAddNewTaskToReadyList+0xc8>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d207      	bcs.n	800ef4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ef3a:	4b0c      	ldr	r3, [pc, #48]	; (800ef6c <prvAddNewTaskToReadyList+0xdc>)
 800ef3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef40:	601a      	str	r2, [r3, #0]
 800ef42:	f3bf 8f4f 	dsb	sy
 800ef46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef4a:	bf00      	nop
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	20007474 	.word	0x20007474
 800ef58:	20006fa0 	.word	0x20006fa0
 800ef5c:	20007480 	.word	0x20007480
 800ef60:	20007490 	.word	0x20007490
 800ef64:	2000747c 	.word	0x2000747c
 800ef68:	20006fa4 	.word	0x20006fa4
 800ef6c:	e000ed04 	.word	0xe000ed04

0800ef70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d016      	beq.n	800efb0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ef82:	4b13      	ldr	r3, [pc, #76]	; (800efd0 <vTaskDelay+0x60>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d009      	beq.n	800ef9e <vTaskDelay+0x2e>
 800ef8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8e:	f383 8811 	msr	BASEPRI, r3
 800ef92:	f3bf 8f6f 	isb	sy
 800ef96:	f3bf 8f4f 	dsb	sy
 800ef9a:	60bb      	str	r3, [r7, #8]
 800ef9c:	e7fe      	b.n	800ef9c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ef9e:	f000 f87f 	bl	800f0a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800efa2:	2100      	movs	r1, #0
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f000 fdf5 	bl	800fb94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800efaa:	f000 f887 	bl	800f0bc <xTaskResumeAll>
 800efae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d107      	bne.n	800efc6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800efb6:	4b07      	ldr	r3, [pc, #28]	; (800efd4 <vTaskDelay+0x64>)
 800efb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efbc:	601a      	str	r2, [r3, #0]
 800efbe:	f3bf 8f4f 	dsb	sy
 800efc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800efc6:	bf00      	nop
 800efc8:	3710      	adds	r7, #16
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	2000749c 	.word	0x2000749c
 800efd4:	e000ed04 	.word	0xe000ed04

0800efd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b08a      	sub	sp, #40	; 0x28
 800efdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800efde:	2300      	movs	r3, #0
 800efe0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800efe2:	2300      	movs	r3, #0
 800efe4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800efe6:	463a      	mov	r2, r7
 800efe8:	1d39      	adds	r1, r7, #4
 800efea:	f107 0308 	add.w	r3, r7, #8
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fe f87e 	bl	800d0f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eff4:	6839      	ldr	r1, [r7, #0]
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	9202      	str	r2, [sp, #8]
 800effc:	9301      	str	r3, [sp, #4]
 800effe:	2300      	movs	r3, #0
 800f000:	9300      	str	r3, [sp, #0]
 800f002:	2300      	movs	r3, #0
 800f004:	460a      	mov	r2, r1
 800f006:	4920      	ldr	r1, [pc, #128]	; (800f088 <vTaskStartScheduler+0xb0>)
 800f008:	4820      	ldr	r0, [pc, #128]	; (800f08c <vTaskStartScheduler+0xb4>)
 800f00a:	f7ff fe13 	bl	800ec34 <xTaskCreateStatic>
 800f00e:	4602      	mov	r2, r0
 800f010:	4b1f      	ldr	r3, [pc, #124]	; (800f090 <vTaskStartScheduler+0xb8>)
 800f012:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f014:	4b1e      	ldr	r3, [pc, #120]	; (800f090 <vTaskStartScheduler+0xb8>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d002      	beq.n	800f022 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f01c:	2301      	movs	r3, #1
 800f01e:	617b      	str	r3, [r7, #20]
 800f020:	e001      	b.n	800f026 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f022:	2300      	movs	r3, #0
 800f024:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d102      	bne.n	800f032 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f02c:	f000 fe06 	bl	800fc3c <xTimerCreateTimerTask>
 800f030:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	2b01      	cmp	r3, #1
 800f036:	d115      	bne.n	800f064 <vTaskStartScheduler+0x8c>
 800f038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f04a:	4b12      	ldr	r3, [pc, #72]	; (800f094 <vTaskStartScheduler+0xbc>)
 800f04c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f050:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f052:	4b11      	ldr	r3, [pc, #68]	; (800f098 <vTaskStartScheduler+0xc0>)
 800f054:	2201      	movs	r2, #1
 800f056:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f058:	4b10      	ldr	r3, [pc, #64]	; (800f09c <vTaskStartScheduler+0xc4>)
 800f05a:	2200      	movs	r2, #0
 800f05c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f05e:	f7fe fb8f 	bl	800d780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f062:	e00d      	b.n	800f080 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f06a:	d109      	bne.n	800f080 <vTaskStartScheduler+0xa8>
 800f06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f070:	f383 8811 	msr	BASEPRI, r3
 800f074:	f3bf 8f6f 	isb	sy
 800f078:	f3bf 8f4f 	dsb	sy
 800f07c:	60fb      	str	r3, [r7, #12]
 800f07e:	e7fe      	b.n	800f07e <vTaskStartScheduler+0xa6>
}
 800f080:	bf00      	nop
 800f082:	3718      	adds	r7, #24
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	0801f904 	.word	0x0801f904
 800f08c:	0800f6c5 	.word	0x0800f6c5
 800f090:	20007498 	.word	0x20007498
 800f094:	20007494 	.word	0x20007494
 800f098:	20007480 	.word	0x20007480
 800f09c:	20007478 	.word	0x20007478

0800f0a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f0a4:	4b04      	ldr	r3, [pc, #16]	; (800f0b8 <vTaskSuspendAll+0x18>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	4a03      	ldr	r2, [pc, #12]	; (800f0b8 <vTaskSuspendAll+0x18>)
 800f0ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f0ae:	bf00      	nop
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr
 800f0b8:	2000749c 	.word	0x2000749c

0800f0bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f0ca:	4b41      	ldr	r3, [pc, #260]	; (800f1d0 <xTaskResumeAll+0x114>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d109      	bne.n	800f0e6 <xTaskResumeAll+0x2a>
 800f0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d6:	f383 8811 	msr	BASEPRI, r3
 800f0da:	f3bf 8f6f 	isb	sy
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	603b      	str	r3, [r7, #0]
 800f0e4:	e7fe      	b.n	800f0e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f0e6:	f7fe fbe9 	bl	800d8bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f0ea:	4b39      	ldr	r3, [pc, #228]	; (800f1d0 <xTaskResumeAll+0x114>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	4a37      	ldr	r2, [pc, #220]	; (800f1d0 <xTaskResumeAll+0x114>)
 800f0f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0f4:	4b36      	ldr	r3, [pc, #216]	; (800f1d0 <xTaskResumeAll+0x114>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d162      	bne.n	800f1c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f0fc:	4b35      	ldr	r3, [pc, #212]	; (800f1d4 <xTaskResumeAll+0x118>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d05e      	beq.n	800f1c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f104:	e02f      	b.n	800f166 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f106:	4b34      	ldr	r3, [pc, #208]	; (800f1d8 <xTaskResumeAll+0x11c>)
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	3318      	adds	r3, #24
 800f112:	4618      	mov	r0, r3
 800f114:	f7fe fa80 	bl	800d618 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	3304      	adds	r3, #4
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7fe fa7b 	bl	800d618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f126:	4b2d      	ldr	r3, [pc, #180]	; (800f1dc <xTaskResumeAll+0x120>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d903      	bls.n	800f136 <xTaskResumeAll+0x7a>
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f132:	4a2a      	ldr	r2, [pc, #168]	; (800f1dc <xTaskResumeAll+0x120>)
 800f134:	6013      	str	r3, [r2, #0]
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f13a:	4613      	mov	r3, r2
 800f13c:	009b      	lsls	r3, r3, #2
 800f13e:	4413      	add	r3, r2
 800f140:	009b      	lsls	r3, r3, #2
 800f142:	4a27      	ldr	r2, [pc, #156]	; (800f1e0 <xTaskResumeAll+0x124>)
 800f144:	441a      	add	r2, r3
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	3304      	adds	r3, #4
 800f14a:	4619      	mov	r1, r3
 800f14c:	4610      	mov	r0, r2
 800f14e:	f7fe fa06 	bl	800d55e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f156:	4b23      	ldr	r3, [pc, #140]	; (800f1e4 <xTaskResumeAll+0x128>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d302      	bcc.n	800f166 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f160:	4b21      	ldr	r3, [pc, #132]	; (800f1e8 <xTaskResumeAll+0x12c>)
 800f162:	2201      	movs	r2, #1
 800f164:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f166:	4b1c      	ldr	r3, [pc, #112]	; (800f1d8 <xTaskResumeAll+0x11c>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d1cb      	bne.n	800f106 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d001      	beq.n	800f178 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f174:	f000 fb58 	bl	800f828 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f178:	4b1c      	ldr	r3, [pc, #112]	; (800f1ec <xTaskResumeAll+0x130>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d010      	beq.n	800f1a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f184:	f000 f858 	bl	800f238 <xTaskIncrementTick>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d002      	beq.n	800f194 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f18e:	4b16      	ldr	r3, [pc, #88]	; (800f1e8 <xTaskResumeAll+0x12c>)
 800f190:	2201      	movs	r2, #1
 800f192:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	3b01      	subs	r3, #1
 800f198:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d1f1      	bne.n	800f184 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800f1a0:	4b12      	ldr	r3, [pc, #72]	; (800f1ec <xTaskResumeAll+0x130>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f1a6:	4b10      	ldr	r3, [pc, #64]	; (800f1e8 <xTaskResumeAll+0x12c>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d009      	beq.n	800f1c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f1b2:	4b0f      	ldr	r3, [pc, #60]	; (800f1f0 <xTaskResumeAll+0x134>)
 800f1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1b8:	601a      	str	r2, [r3, #0]
 800f1ba:	f3bf 8f4f 	dsb	sy
 800f1be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f1c2:	f7fe fba9 	bl	800d918 <vPortExitCritical>

	return xAlreadyYielded;
 800f1c6:	68bb      	ldr	r3, [r7, #8]
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3710      	adds	r7, #16
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}
 800f1d0:	2000749c 	.word	0x2000749c
 800f1d4:	20007474 	.word	0x20007474
 800f1d8:	20007434 	.word	0x20007434
 800f1dc:	2000747c 	.word	0x2000747c
 800f1e0:	20006fa4 	.word	0x20006fa4
 800f1e4:	20006fa0 	.word	0x20006fa0
 800f1e8:	20007488 	.word	0x20007488
 800f1ec:	20007484 	.word	0x20007484
 800f1f0:	e000ed04 	.word	0xe000ed04

0800f1f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f1fa:	4b05      	ldr	r3, [pc, #20]	; (800f210 <xTaskGetTickCount+0x1c>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f200:	687b      	ldr	r3, [r7, #4]
}
 800f202:	4618      	mov	r0, r3
 800f204:	370c      	adds	r7, #12
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr
 800f20e:	bf00      	nop
 800f210:	20007478 	.word	0x20007478

0800f214 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f21a:	f7fe fc2b 	bl	800da74 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f21e:	2300      	movs	r3, #0
 800f220:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f222:	4b04      	ldr	r3, [pc, #16]	; (800f234 <xTaskGetTickCountFromISR+0x20>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f228:	683b      	ldr	r3, [r7, #0]
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3708      	adds	r7, #8
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	20007478 	.word	0x20007478

0800f238 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b086      	sub	sp, #24
 800f23c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f23e:	2300      	movs	r3, #0
 800f240:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f242:	4b4e      	ldr	r3, [pc, #312]	; (800f37c <xTaskIncrementTick+0x144>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	2b00      	cmp	r3, #0
 800f248:	f040 8088 	bne.w	800f35c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f24c:	4b4c      	ldr	r3, [pc, #304]	; (800f380 <xTaskIncrementTick+0x148>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	3301      	adds	r3, #1
 800f252:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f254:	4a4a      	ldr	r2, [pc, #296]	; (800f380 <xTaskIncrementTick+0x148>)
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d11f      	bne.n	800f2a0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f260:	4b48      	ldr	r3, [pc, #288]	; (800f384 <xTaskIncrementTick+0x14c>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d009      	beq.n	800f27e <xTaskIncrementTick+0x46>
 800f26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f26e:	f383 8811 	msr	BASEPRI, r3
 800f272:	f3bf 8f6f 	isb	sy
 800f276:	f3bf 8f4f 	dsb	sy
 800f27a:	603b      	str	r3, [r7, #0]
 800f27c:	e7fe      	b.n	800f27c <xTaskIncrementTick+0x44>
 800f27e:	4b41      	ldr	r3, [pc, #260]	; (800f384 <xTaskIncrementTick+0x14c>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	60fb      	str	r3, [r7, #12]
 800f284:	4b40      	ldr	r3, [pc, #256]	; (800f388 <xTaskIncrementTick+0x150>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	4a3e      	ldr	r2, [pc, #248]	; (800f384 <xTaskIncrementTick+0x14c>)
 800f28a:	6013      	str	r3, [r2, #0]
 800f28c:	4a3e      	ldr	r2, [pc, #248]	; (800f388 <xTaskIncrementTick+0x150>)
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	6013      	str	r3, [r2, #0]
 800f292:	4b3e      	ldr	r3, [pc, #248]	; (800f38c <xTaskIncrementTick+0x154>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	3301      	adds	r3, #1
 800f298:	4a3c      	ldr	r2, [pc, #240]	; (800f38c <xTaskIncrementTick+0x154>)
 800f29a:	6013      	str	r3, [r2, #0]
 800f29c:	f000 fac4 	bl	800f828 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f2a0:	4b3b      	ldr	r3, [pc, #236]	; (800f390 <xTaskIncrementTick+0x158>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	693a      	ldr	r2, [r7, #16]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d349      	bcc.n	800f33e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2aa:	4b36      	ldr	r3, [pc, #216]	; (800f384 <xTaskIncrementTick+0x14c>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d104      	bne.n	800f2be <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2b4:	4b36      	ldr	r3, [pc, #216]	; (800f390 <xTaskIncrementTick+0x158>)
 800f2b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2ba:	601a      	str	r2, [r3, #0]
					break;
 800f2bc:	e03f      	b.n	800f33e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2be:	4b31      	ldr	r3, [pc, #196]	; (800f384 <xTaskIncrementTick+0x14c>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	68db      	ldr	r3, [r3, #12]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f2ce:	693a      	ldr	r2, [r7, #16]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d203      	bcs.n	800f2de <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f2d6:	4a2e      	ldr	r2, [pc, #184]	; (800f390 <xTaskIncrementTick+0x158>)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f2dc:	e02f      	b.n	800f33e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	3304      	adds	r3, #4
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7fe f998 	bl	800d618 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d004      	beq.n	800f2fa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	3318      	adds	r3, #24
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7fe f98f 	bl	800d618 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2fe:	4b25      	ldr	r3, [pc, #148]	; (800f394 <xTaskIncrementTick+0x15c>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	429a      	cmp	r2, r3
 800f304:	d903      	bls.n	800f30e <xTaskIncrementTick+0xd6>
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f30a:	4a22      	ldr	r2, [pc, #136]	; (800f394 <xTaskIncrementTick+0x15c>)
 800f30c:	6013      	str	r3, [r2, #0]
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f312:	4613      	mov	r3, r2
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	4413      	add	r3, r2
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	4a1f      	ldr	r2, [pc, #124]	; (800f398 <xTaskIncrementTick+0x160>)
 800f31c:	441a      	add	r2, r3
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	3304      	adds	r3, #4
 800f322:	4619      	mov	r1, r3
 800f324:	4610      	mov	r0, r2
 800f326:	f7fe f91a 	bl	800d55e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f32e:	4b1b      	ldr	r3, [pc, #108]	; (800f39c <xTaskIncrementTick+0x164>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f334:	429a      	cmp	r2, r3
 800f336:	d3b8      	bcc.n	800f2aa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800f338:	2301      	movs	r3, #1
 800f33a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f33c:	e7b5      	b.n	800f2aa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f33e:	4b17      	ldr	r3, [pc, #92]	; (800f39c <xTaskIncrementTick+0x164>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f344:	4914      	ldr	r1, [pc, #80]	; (800f398 <xTaskIncrementTick+0x160>)
 800f346:	4613      	mov	r3, r2
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	4413      	add	r3, r2
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	440b      	add	r3, r1
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2b01      	cmp	r3, #1
 800f354:	d907      	bls.n	800f366 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800f356:	2301      	movs	r3, #1
 800f358:	617b      	str	r3, [r7, #20]
 800f35a:	e004      	b.n	800f366 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f35c:	4b10      	ldr	r3, [pc, #64]	; (800f3a0 <xTaskIncrementTick+0x168>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	3301      	adds	r3, #1
 800f362:	4a0f      	ldr	r2, [pc, #60]	; (800f3a0 <xTaskIncrementTick+0x168>)
 800f364:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f366:	4b0f      	ldr	r3, [pc, #60]	; (800f3a4 <xTaskIncrementTick+0x16c>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d001      	beq.n	800f372 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800f36e:	2301      	movs	r3, #1
 800f370:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f372:	697b      	ldr	r3, [r7, #20]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3718      	adds	r7, #24
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	2000749c 	.word	0x2000749c
 800f380:	20007478 	.word	0x20007478
 800f384:	2000742c 	.word	0x2000742c
 800f388:	20007430 	.word	0x20007430
 800f38c:	2000748c 	.word	0x2000748c
 800f390:	20007494 	.word	0x20007494
 800f394:	2000747c 	.word	0x2000747c
 800f398:	20006fa4 	.word	0x20006fa4
 800f39c:	20006fa0 	.word	0x20006fa0
 800f3a0:	20007484 	.word	0x20007484
 800f3a4:	20007488 	.word	0x20007488

0800f3a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f3ae:	4b27      	ldr	r3, [pc, #156]	; (800f44c <vTaskSwitchContext+0xa4>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d003      	beq.n	800f3be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f3b6:	4b26      	ldr	r3, [pc, #152]	; (800f450 <vTaskSwitchContext+0xa8>)
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f3bc:	e040      	b.n	800f440 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800f3be:	4b24      	ldr	r3, [pc, #144]	; (800f450 <vTaskSwitchContext+0xa8>)
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3c4:	4b23      	ldr	r3, [pc, #140]	; (800f454 <vTaskSwitchContext+0xac>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	60fb      	str	r3, [r7, #12]
 800f3ca:	e00f      	b.n	800f3ec <vTaskSwitchContext+0x44>
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d109      	bne.n	800f3e6 <vTaskSwitchContext+0x3e>
 800f3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d6:	f383 8811 	msr	BASEPRI, r3
 800f3da:	f3bf 8f6f 	isb	sy
 800f3de:	f3bf 8f4f 	dsb	sy
 800f3e2:	607b      	str	r3, [r7, #4]
 800f3e4:	e7fe      	b.n	800f3e4 <vTaskSwitchContext+0x3c>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	3b01      	subs	r3, #1
 800f3ea:	60fb      	str	r3, [r7, #12]
 800f3ec:	491a      	ldr	r1, [pc, #104]	; (800f458 <vTaskSwitchContext+0xb0>)
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	4613      	mov	r3, r2
 800f3f2:	009b      	lsls	r3, r3, #2
 800f3f4:	4413      	add	r3, r2
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	440b      	add	r3, r1
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d0e5      	beq.n	800f3cc <vTaskSwitchContext+0x24>
 800f400:	68fa      	ldr	r2, [r7, #12]
 800f402:	4613      	mov	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	4413      	add	r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	4a13      	ldr	r2, [pc, #76]	; (800f458 <vTaskSwitchContext+0xb0>)
 800f40c:	4413      	add	r3, r2
 800f40e:	60bb      	str	r3, [r7, #8]
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	685a      	ldr	r2, [r3, #4]
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	605a      	str	r2, [r3, #4]
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	685a      	ldr	r2, [r3, #4]
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	3308      	adds	r3, #8
 800f422:	429a      	cmp	r2, r3
 800f424:	d104      	bne.n	800f430 <vTaskSwitchContext+0x88>
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	685a      	ldr	r2, [r3, #4]
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	605a      	str	r2, [r3, #4]
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	68db      	ldr	r3, [r3, #12]
 800f436:	4a09      	ldr	r2, [pc, #36]	; (800f45c <vTaskSwitchContext+0xb4>)
 800f438:	6013      	str	r3, [r2, #0]
 800f43a:	4a06      	ldr	r2, [pc, #24]	; (800f454 <vTaskSwitchContext+0xac>)
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	6013      	str	r3, [r2, #0]
}
 800f440:	bf00      	nop
 800f442:	3714      	adds	r7, #20
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr
 800f44c:	2000749c 	.word	0x2000749c
 800f450:	20007488 	.word	0x20007488
 800f454:	2000747c 	.word	0x2000747c
 800f458:	20006fa4 	.word	0x20006fa4
 800f45c:	20006fa0 	.word	0x20006fa0

0800f460 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d109      	bne.n	800f484 <vTaskPlaceOnEventList+0x24>
 800f470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f474:	f383 8811 	msr	BASEPRI, r3
 800f478:	f3bf 8f6f 	isb	sy
 800f47c:	f3bf 8f4f 	dsb	sy
 800f480:	60fb      	str	r3, [r7, #12]
 800f482:	e7fe      	b.n	800f482 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f484:	4b07      	ldr	r3, [pc, #28]	; (800f4a4 <vTaskPlaceOnEventList+0x44>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	3318      	adds	r3, #24
 800f48a:	4619      	mov	r1, r3
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7fe f88a 	bl	800d5a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f492:	2101      	movs	r1, #1
 800f494:	6838      	ldr	r0, [r7, #0]
 800f496:	f000 fb7d 	bl	800fb94 <prvAddCurrentTaskToDelayedList>
}
 800f49a:	bf00      	nop
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	20006fa0 	.word	0x20006fa0

0800f4a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b086      	sub	sp, #24
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d109      	bne.n	800f4ce <vTaskPlaceOnEventListRestricted+0x26>
 800f4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4be:	f383 8811 	msr	BASEPRI, r3
 800f4c2:	f3bf 8f6f 	isb	sy
 800f4c6:	f3bf 8f4f 	dsb	sy
 800f4ca:	617b      	str	r3, [r7, #20]
 800f4cc:	e7fe      	b.n	800f4cc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f4ce:	4b0a      	ldr	r3, [pc, #40]	; (800f4f8 <vTaskPlaceOnEventListRestricted+0x50>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	3318      	adds	r3, #24
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	68f8      	ldr	r0, [r7, #12]
 800f4d8:	f7fe f841 	bl	800d55e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d002      	beq.n	800f4e8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800f4e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f4e8:	6879      	ldr	r1, [r7, #4]
 800f4ea:	68b8      	ldr	r0, [r7, #8]
 800f4ec:	f000 fb52 	bl	800fb94 <prvAddCurrentTaskToDelayedList>
	}
 800f4f0:	bf00      	nop
 800f4f2:	3718      	adds	r7, #24
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	20006fa0 	.word	0x20006fa0

0800f4fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b086      	sub	sp, #24
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	68db      	ldr	r3, [r3, #12]
 800f50a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d109      	bne.n	800f526 <xTaskRemoveFromEventList+0x2a>
 800f512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f516:	f383 8811 	msr	BASEPRI, r3
 800f51a:	f3bf 8f6f 	isb	sy
 800f51e:	f3bf 8f4f 	dsb	sy
 800f522:	60fb      	str	r3, [r7, #12]
 800f524:	e7fe      	b.n	800f524 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	3318      	adds	r3, #24
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fe f874 	bl	800d618 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f530:	4b1d      	ldr	r3, [pc, #116]	; (800f5a8 <xTaskRemoveFromEventList+0xac>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d11d      	bne.n	800f574 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	3304      	adds	r3, #4
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7fe f86b 	bl	800d618 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f546:	4b19      	ldr	r3, [pc, #100]	; (800f5ac <xTaskRemoveFromEventList+0xb0>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d903      	bls.n	800f556 <xTaskRemoveFromEventList+0x5a>
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f552:	4a16      	ldr	r2, [pc, #88]	; (800f5ac <xTaskRemoveFromEventList+0xb0>)
 800f554:	6013      	str	r3, [r2, #0]
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f55a:	4613      	mov	r3, r2
 800f55c:	009b      	lsls	r3, r3, #2
 800f55e:	4413      	add	r3, r2
 800f560:	009b      	lsls	r3, r3, #2
 800f562:	4a13      	ldr	r2, [pc, #76]	; (800f5b0 <xTaskRemoveFromEventList+0xb4>)
 800f564:	441a      	add	r2, r3
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	3304      	adds	r3, #4
 800f56a:	4619      	mov	r1, r3
 800f56c:	4610      	mov	r0, r2
 800f56e:	f7fd fff6 	bl	800d55e <vListInsertEnd>
 800f572:	e005      	b.n	800f580 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	3318      	adds	r3, #24
 800f578:	4619      	mov	r1, r3
 800f57a:	480e      	ldr	r0, [pc, #56]	; (800f5b4 <xTaskRemoveFromEventList+0xb8>)
 800f57c:	f7fd ffef 	bl	800d55e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f584:	4b0c      	ldr	r3, [pc, #48]	; (800f5b8 <xTaskRemoveFromEventList+0xbc>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d905      	bls.n	800f59a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f58e:	2301      	movs	r3, #1
 800f590:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f592:	4b0a      	ldr	r3, [pc, #40]	; (800f5bc <xTaskRemoveFromEventList+0xc0>)
 800f594:	2201      	movs	r2, #1
 800f596:	601a      	str	r2, [r3, #0]
 800f598:	e001      	b.n	800f59e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f59a:	2300      	movs	r3, #0
 800f59c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f59e:	697b      	ldr	r3, [r7, #20]
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3718      	adds	r7, #24
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	2000749c 	.word	0x2000749c
 800f5ac:	2000747c 	.word	0x2000747c
 800f5b0:	20006fa4 	.word	0x20006fa4
 800f5b4:	20007434 	.word	0x20007434
 800f5b8:	20006fa0 	.word	0x20006fa0
 800f5bc:	20007488 	.word	0x20007488

0800f5c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f5c8:	4b06      	ldr	r3, [pc, #24]	; (800f5e4 <vTaskInternalSetTimeOutState+0x24>)
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f5d0:	4b05      	ldr	r3, [pc, #20]	; (800f5e8 <vTaskInternalSetTimeOutState+0x28>)
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	605a      	str	r2, [r3, #4]
}
 800f5d8:	bf00      	nop
 800f5da:	370c      	adds	r7, #12
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr
 800f5e4:	2000748c 	.word	0x2000748c
 800f5e8:	20007478 	.word	0x20007478

0800f5ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b088      	sub	sp, #32
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d109      	bne.n	800f610 <xTaskCheckForTimeOut+0x24>
 800f5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f600:	f383 8811 	msr	BASEPRI, r3
 800f604:	f3bf 8f6f 	isb	sy
 800f608:	f3bf 8f4f 	dsb	sy
 800f60c:	613b      	str	r3, [r7, #16]
 800f60e:	e7fe      	b.n	800f60e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d109      	bne.n	800f62a <xTaskCheckForTimeOut+0x3e>
 800f616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f61a:	f383 8811 	msr	BASEPRI, r3
 800f61e:	f3bf 8f6f 	isb	sy
 800f622:	f3bf 8f4f 	dsb	sy
 800f626:	60fb      	str	r3, [r7, #12]
 800f628:	e7fe      	b.n	800f628 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800f62a:	f7fe f947 	bl	800d8bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f62e:	4b1d      	ldr	r3, [pc, #116]	; (800f6a4 <xTaskCheckForTimeOut+0xb8>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	685b      	ldr	r3, [r3, #4]
 800f638:	69ba      	ldr	r2, [r7, #24]
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f646:	d102      	bne.n	800f64e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f648:	2300      	movs	r3, #0
 800f64a:	61fb      	str	r3, [r7, #28]
 800f64c:	e023      	b.n	800f696 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	4b15      	ldr	r3, [pc, #84]	; (800f6a8 <xTaskCheckForTimeOut+0xbc>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	429a      	cmp	r2, r3
 800f658:	d007      	beq.n	800f66a <xTaskCheckForTimeOut+0x7e>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	69ba      	ldr	r2, [r7, #24]
 800f660:	429a      	cmp	r2, r3
 800f662:	d302      	bcc.n	800f66a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f664:	2301      	movs	r3, #1
 800f666:	61fb      	str	r3, [r7, #28]
 800f668:	e015      	b.n	800f696 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	697a      	ldr	r2, [r7, #20]
 800f670:	429a      	cmp	r2, r3
 800f672:	d20b      	bcs.n	800f68c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	1ad2      	subs	r2, r2, r3
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f7ff ff9d 	bl	800f5c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f686:	2300      	movs	r3, #0
 800f688:	61fb      	str	r3, [r7, #28]
 800f68a:	e004      	b.n	800f696 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	2200      	movs	r2, #0
 800f690:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f692:	2301      	movs	r3, #1
 800f694:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f696:	f7fe f93f 	bl	800d918 <vPortExitCritical>

	return xReturn;
 800f69a:	69fb      	ldr	r3, [r7, #28]
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3720      	adds	r7, #32
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	20007478 	.word	0x20007478
 800f6a8:	2000748c 	.word	0x2000748c

0800f6ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f6b0:	4b03      	ldr	r3, [pc, #12]	; (800f6c0 <vTaskMissedYield+0x14>)
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	601a      	str	r2, [r3, #0]
}
 800f6b6:	bf00      	nop
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr
 800f6c0:	20007488 	.word	0x20007488

0800f6c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f6cc:	f000 f852 	bl	800f774 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f6d0:	4b06      	ldr	r3, [pc, #24]	; (800f6ec <prvIdleTask+0x28>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	2b01      	cmp	r3, #1
 800f6d6:	d9f9      	bls.n	800f6cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800f6d8:	4b05      	ldr	r3, [pc, #20]	; (800f6f0 <prvIdleTask+0x2c>)
 800f6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6de:	601a      	str	r2, [r3, #0]
 800f6e0:	f3bf 8f4f 	dsb	sy
 800f6e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f6e8:	e7f0      	b.n	800f6cc <prvIdleTask+0x8>
 800f6ea:	bf00      	nop
 800f6ec:	20006fa4 	.word	0x20006fa4
 800f6f0:	e000ed04 	.word	0xe000ed04

0800f6f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	607b      	str	r3, [r7, #4]
 800f6fe:	e00c      	b.n	800f71a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	4613      	mov	r3, r2
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	4413      	add	r3, r2
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	4a12      	ldr	r2, [pc, #72]	; (800f754 <prvInitialiseTaskLists+0x60>)
 800f70c:	4413      	add	r3, r2
 800f70e:	4618      	mov	r0, r3
 800f710:	f7fd fef8 	bl	800d504 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	3301      	adds	r3, #1
 800f718:	607b      	str	r3, [r7, #4]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2b37      	cmp	r3, #55	; 0x37
 800f71e:	d9ef      	bls.n	800f700 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f720:	480d      	ldr	r0, [pc, #52]	; (800f758 <prvInitialiseTaskLists+0x64>)
 800f722:	f7fd feef 	bl	800d504 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f726:	480d      	ldr	r0, [pc, #52]	; (800f75c <prvInitialiseTaskLists+0x68>)
 800f728:	f7fd feec 	bl	800d504 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f72c:	480c      	ldr	r0, [pc, #48]	; (800f760 <prvInitialiseTaskLists+0x6c>)
 800f72e:	f7fd fee9 	bl	800d504 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f732:	480c      	ldr	r0, [pc, #48]	; (800f764 <prvInitialiseTaskLists+0x70>)
 800f734:	f7fd fee6 	bl	800d504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f738:	480b      	ldr	r0, [pc, #44]	; (800f768 <prvInitialiseTaskLists+0x74>)
 800f73a:	f7fd fee3 	bl	800d504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f73e:	4b0b      	ldr	r3, [pc, #44]	; (800f76c <prvInitialiseTaskLists+0x78>)
 800f740:	4a05      	ldr	r2, [pc, #20]	; (800f758 <prvInitialiseTaskLists+0x64>)
 800f742:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f744:	4b0a      	ldr	r3, [pc, #40]	; (800f770 <prvInitialiseTaskLists+0x7c>)
 800f746:	4a05      	ldr	r2, [pc, #20]	; (800f75c <prvInitialiseTaskLists+0x68>)
 800f748:	601a      	str	r2, [r3, #0]
}
 800f74a:	bf00      	nop
 800f74c:	3708      	adds	r7, #8
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	20006fa4 	.word	0x20006fa4
 800f758:	20007404 	.word	0x20007404
 800f75c:	20007418 	.word	0x20007418
 800f760:	20007434 	.word	0x20007434
 800f764:	20007448 	.word	0x20007448
 800f768:	20007460 	.word	0x20007460
 800f76c:	2000742c 	.word	0x2000742c
 800f770:	20007430 	.word	0x20007430

0800f774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b082      	sub	sp, #8
 800f778:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f77a:	e019      	b.n	800f7b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f77c:	f7fe f89e 	bl	800d8bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f780:	4b0f      	ldr	r3, [pc, #60]	; (800f7c0 <prvCheckTasksWaitingTermination+0x4c>)
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	68db      	ldr	r3, [r3, #12]
 800f786:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	3304      	adds	r3, #4
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7fd ff43 	bl	800d618 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f792:	4b0c      	ldr	r3, [pc, #48]	; (800f7c4 <prvCheckTasksWaitingTermination+0x50>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	3b01      	subs	r3, #1
 800f798:	4a0a      	ldr	r2, [pc, #40]	; (800f7c4 <prvCheckTasksWaitingTermination+0x50>)
 800f79a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f79c:	4b0a      	ldr	r3, [pc, #40]	; (800f7c8 <prvCheckTasksWaitingTermination+0x54>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	3b01      	subs	r3, #1
 800f7a2:	4a09      	ldr	r2, [pc, #36]	; (800f7c8 <prvCheckTasksWaitingTermination+0x54>)
 800f7a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f7a6:	f7fe f8b7 	bl	800d918 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 f80e 	bl	800f7cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f7b0:	4b05      	ldr	r3, [pc, #20]	; (800f7c8 <prvCheckTasksWaitingTermination+0x54>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d1e1      	bne.n	800f77c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f7b8:	bf00      	nop
 800f7ba:	3708      	adds	r7, #8
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	20007448 	.word	0x20007448
 800f7c4:	20007474 	.word	0x20007474
 800f7c8:	2000745c 	.word	0x2000745c

0800f7cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d108      	bne.n	800f7f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7fd fd7a 	bl	800d2dc <vPortFree>
				vPortFree( pxTCB );
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f7fd fd77 	bl	800d2dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f7ee:	e017      	b.n	800f820 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d103      	bne.n	800f802 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7fd fd6e 	bl	800d2dc <vPortFree>
	}
 800f800:	e00e      	b.n	800f820 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f808:	2b02      	cmp	r3, #2
 800f80a:	d009      	beq.n	800f820 <prvDeleteTCB+0x54>
 800f80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f810:	f383 8811 	msr	BASEPRI, r3
 800f814:	f3bf 8f6f 	isb	sy
 800f818:	f3bf 8f4f 	dsb	sy
 800f81c:	60fb      	str	r3, [r7, #12]
 800f81e:	e7fe      	b.n	800f81e <prvDeleteTCB+0x52>
	}
 800f820:	bf00      	nop
 800f822:	3710      	adds	r7, #16
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f82e:	4b0c      	ldr	r3, [pc, #48]	; (800f860 <prvResetNextTaskUnblockTime+0x38>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d104      	bne.n	800f842 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f838:	4b0a      	ldr	r3, [pc, #40]	; (800f864 <prvResetNextTaskUnblockTime+0x3c>)
 800f83a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f83e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f840:	e008      	b.n	800f854 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f842:	4b07      	ldr	r3, [pc, #28]	; (800f860 <prvResetNextTaskUnblockTime+0x38>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	68db      	ldr	r3, [r3, #12]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	4a04      	ldr	r2, [pc, #16]	; (800f864 <prvResetNextTaskUnblockTime+0x3c>)
 800f852:	6013      	str	r3, [r2, #0]
}
 800f854:	bf00      	nop
 800f856:	370c      	adds	r7, #12
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr
 800f860:	2000742c 	.word	0x2000742c
 800f864:	20007494 	.word	0x20007494

0800f868 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f868:	b480      	push	{r7}
 800f86a:	b083      	sub	sp, #12
 800f86c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f86e:	4b05      	ldr	r3, [pc, #20]	; (800f884 <xTaskGetCurrentTaskHandle+0x1c>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f874:	687b      	ldr	r3, [r7, #4]
	}
 800f876:	4618      	mov	r0, r3
 800f878:	370c      	adds	r7, #12
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop
 800f884:	20006fa0 	.word	0x20006fa0

0800f888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f88e:	4b0b      	ldr	r3, [pc, #44]	; (800f8bc <xTaskGetSchedulerState+0x34>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d102      	bne.n	800f89c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f896:	2301      	movs	r3, #1
 800f898:	607b      	str	r3, [r7, #4]
 800f89a:	e008      	b.n	800f8ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f89c:	4b08      	ldr	r3, [pc, #32]	; (800f8c0 <xTaskGetSchedulerState+0x38>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d102      	bne.n	800f8aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f8a4:	2302      	movs	r3, #2
 800f8a6:	607b      	str	r3, [r7, #4]
 800f8a8:	e001      	b.n	800f8ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f8ae:	687b      	ldr	r3, [r7, #4]
	}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	20007480 	.word	0x20007480
 800f8c0:	2000749c 	.word	0x2000749c

0800f8c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d051      	beq.n	800f97e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8de:	4b2a      	ldr	r3, [pc, #168]	; (800f988 <xTaskPriorityInherit+0xc4>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d241      	bcs.n	800f96c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	699b      	ldr	r3, [r3, #24]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	db06      	blt.n	800f8fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8f0:	4b25      	ldr	r3, [pc, #148]	; (800f988 <xTaskPriorityInherit+0xc4>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	6959      	ldr	r1, [r3, #20]
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f906:	4613      	mov	r3, r2
 800f908:	009b      	lsls	r3, r3, #2
 800f90a:	4413      	add	r3, r2
 800f90c:	009b      	lsls	r3, r3, #2
 800f90e:	4a1f      	ldr	r2, [pc, #124]	; (800f98c <xTaskPriorityInherit+0xc8>)
 800f910:	4413      	add	r3, r2
 800f912:	4299      	cmp	r1, r3
 800f914:	d122      	bne.n	800f95c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	3304      	adds	r3, #4
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fd fe7c 	bl	800d618 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f920:	4b19      	ldr	r3, [pc, #100]	; (800f988 <xTaskPriorityInherit+0xc4>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f92e:	4b18      	ldr	r3, [pc, #96]	; (800f990 <xTaskPriorityInherit+0xcc>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	429a      	cmp	r2, r3
 800f934:	d903      	bls.n	800f93e <xTaskPriorityInherit+0x7a>
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f93a:	4a15      	ldr	r2, [pc, #84]	; (800f990 <xTaskPriorityInherit+0xcc>)
 800f93c:	6013      	str	r3, [r2, #0]
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f942:	4613      	mov	r3, r2
 800f944:	009b      	lsls	r3, r3, #2
 800f946:	4413      	add	r3, r2
 800f948:	009b      	lsls	r3, r3, #2
 800f94a:	4a10      	ldr	r2, [pc, #64]	; (800f98c <xTaskPriorityInherit+0xc8>)
 800f94c:	441a      	add	r2, r3
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	3304      	adds	r3, #4
 800f952:	4619      	mov	r1, r3
 800f954:	4610      	mov	r0, r2
 800f956:	f7fd fe02 	bl	800d55e <vListInsertEnd>
 800f95a:	e004      	b.n	800f966 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f95c:	4b0a      	ldr	r3, [pc, #40]	; (800f988 <xTaskPriorityInherit+0xc4>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f966:	2301      	movs	r3, #1
 800f968:	60fb      	str	r3, [r7, #12]
 800f96a:	e008      	b.n	800f97e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f970:	4b05      	ldr	r3, [pc, #20]	; (800f988 <xTaskPriorityInherit+0xc4>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f976:	429a      	cmp	r2, r3
 800f978:	d201      	bcs.n	800f97e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f97a:	2301      	movs	r3, #1
 800f97c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f97e:	68fb      	ldr	r3, [r7, #12]
	}
 800f980:	4618      	mov	r0, r3
 800f982:	3710      	adds	r7, #16
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	20006fa0 	.word	0x20006fa0
 800f98c:	20006fa4 	.word	0x20006fa4
 800f990:	2000747c 	.word	0x2000747c

0800f994 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f994:	b580      	push	{r7, lr}
 800f996:	b086      	sub	sp, #24
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d054      	beq.n	800fa54 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f9aa:	4b2d      	ldr	r3, [pc, #180]	; (800fa60 <xTaskPriorityDisinherit+0xcc>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	693a      	ldr	r2, [r7, #16]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d009      	beq.n	800f9c8 <xTaskPriorityDisinherit+0x34>
 800f9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b8:	f383 8811 	msr	BASEPRI, r3
 800f9bc:	f3bf 8f6f 	isb	sy
 800f9c0:	f3bf 8f4f 	dsb	sy
 800f9c4:	60fb      	str	r3, [r7, #12]
 800f9c6:	e7fe      	b.n	800f9c6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d109      	bne.n	800f9e4 <xTaskPriorityDisinherit+0x50>
 800f9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d4:	f383 8811 	msr	BASEPRI, r3
 800f9d8:	f3bf 8f6f 	isb	sy
 800f9dc:	f3bf 8f4f 	dsb	sy
 800f9e0:	60bb      	str	r3, [r7, #8]
 800f9e2:	e7fe      	b.n	800f9e2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9e8:	1e5a      	subs	r2, r3, #1
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d02c      	beq.n	800fa54 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d128      	bne.n	800fa54 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	3304      	adds	r3, #4
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fd fe06 	bl	800d618 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa24:	4b0f      	ldr	r3, [pc, #60]	; (800fa64 <xTaskPriorityDisinherit+0xd0>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d903      	bls.n	800fa34 <xTaskPriorityDisinherit+0xa0>
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa30:	4a0c      	ldr	r2, [pc, #48]	; (800fa64 <xTaskPriorityDisinherit+0xd0>)
 800fa32:	6013      	str	r3, [r2, #0]
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa38:	4613      	mov	r3, r2
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	4413      	add	r3, r2
 800fa3e:	009b      	lsls	r3, r3, #2
 800fa40:	4a09      	ldr	r2, [pc, #36]	; (800fa68 <xTaskPriorityDisinherit+0xd4>)
 800fa42:	441a      	add	r2, r3
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	3304      	adds	r3, #4
 800fa48:	4619      	mov	r1, r3
 800fa4a:	4610      	mov	r0, r2
 800fa4c:	f7fd fd87 	bl	800d55e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fa50:	2301      	movs	r3, #1
 800fa52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fa54:	697b      	ldr	r3, [r7, #20]
	}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3718      	adds	r7, #24
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
 800fa5e:	bf00      	nop
 800fa60:	20006fa0 	.word	0x20006fa0
 800fa64:	2000747c 	.word	0x2000747c
 800fa68:	20006fa4 	.word	0x20006fa4

0800fa6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b088      	sub	sp, #32
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d068      	beq.n	800fb56 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fa84:	69bb      	ldr	r3, [r7, #24]
 800fa86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d109      	bne.n	800faa0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800fa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa90:	f383 8811 	msr	BASEPRI, r3
 800fa94:	f3bf 8f6f 	isb	sy
 800fa98:	f3bf 8f4f 	dsb	sy
 800fa9c:	60fb      	str	r3, [r7, #12]
 800fa9e:	e7fe      	b.n	800fa9e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800faa0:	69bb      	ldr	r3, [r7, #24]
 800faa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800faa4:	683a      	ldr	r2, [r7, #0]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d902      	bls.n	800fab0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	61fb      	str	r3, [r7, #28]
 800faae:	e002      	b.n	800fab6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fab4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faba:	69fa      	ldr	r2, [r7, #28]
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d04a      	beq.n	800fb56 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fac0:	69bb      	ldr	r3, [r7, #24]
 800fac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fac4:	697a      	ldr	r2, [r7, #20]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d145      	bne.n	800fb56 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800faca:	4b25      	ldr	r3, [pc, #148]	; (800fb60 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	69ba      	ldr	r2, [r7, #24]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d109      	bne.n	800fae8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800fad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad8:	f383 8811 	msr	BASEPRI, r3
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	60bb      	str	r3, [r7, #8]
 800fae6:	e7fe      	b.n	800fae6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fae8:	69bb      	ldr	r3, [r7, #24]
 800faea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800faee:	69bb      	ldr	r3, [r7, #24]
 800faf0:	69fa      	ldr	r2, [r7, #28]
 800faf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	699b      	ldr	r3, [r3, #24]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	db04      	blt.n	800fb06 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fb02:	69bb      	ldr	r3, [r7, #24]
 800fb04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fb06:	69bb      	ldr	r3, [r7, #24]
 800fb08:	6959      	ldr	r1, [r3, #20]
 800fb0a:	693a      	ldr	r2, [r7, #16]
 800fb0c:	4613      	mov	r3, r2
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	4413      	add	r3, r2
 800fb12:	009b      	lsls	r3, r3, #2
 800fb14:	4a13      	ldr	r2, [pc, #76]	; (800fb64 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800fb16:	4413      	add	r3, r2
 800fb18:	4299      	cmp	r1, r3
 800fb1a:	d11c      	bne.n	800fb56 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb1c:	69bb      	ldr	r3, [r7, #24]
 800fb1e:	3304      	adds	r3, #4
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7fd fd79 	bl	800d618 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fb26:	69bb      	ldr	r3, [r7, #24]
 800fb28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb2a:	4b0f      	ldr	r3, [pc, #60]	; (800fb68 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d903      	bls.n	800fb3a <vTaskPriorityDisinheritAfterTimeout+0xce>
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb36:	4a0c      	ldr	r2, [pc, #48]	; (800fb68 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fb38:	6013      	str	r3, [r2, #0]
 800fb3a:	69bb      	ldr	r3, [r7, #24]
 800fb3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb3e:	4613      	mov	r3, r2
 800fb40:	009b      	lsls	r3, r3, #2
 800fb42:	4413      	add	r3, r2
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	4a07      	ldr	r2, [pc, #28]	; (800fb64 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800fb48:	441a      	add	r2, r3
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	3304      	adds	r3, #4
 800fb4e:	4619      	mov	r1, r3
 800fb50:	4610      	mov	r0, r2
 800fb52:	f7fd fd04 	bl	800d55e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fb56:	bf00      	nop
 800fb58:	3720      	adds	r7, #32
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	20006fa0 	.word	0x20006fa0
 800fb64:	20006fa4 	.word	0x20006fa4
 800fb68:	2000747c 	.word	0x2000747c

0800fb6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fb6c:	b480      	push	{r7}
 800fb6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fb70:	4b07      	ldr	r3, [pc, #28]	; (800fb90 <pvTaskIncrementMutexHeldCount+0x24>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d004      	beq.n	800fb82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fb78:	4b05      	ldr	r3, [pc, #20]	; (800fb90 <pvTaskIncrementMutexHeldCount+0x24>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fb7e:	3201      	adds	r2, #1
 800fb80:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800fb82:	4b03      	ldr	r3, [pc, #12]	; (800fb90 <pvTaskIncrementMutexHeldCount+0x24>)
 800fb84:	681b      	ldr	r3, [r3, #0]
	}
 800fb86:	4618      	mov	r0, r3
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr
 800fb90:	20006fa0 	.word	0x20006fa0

0800fb94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b084      	sub	sp, #16
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fb9e:	4b21      	ldr	r3, [pc, #132]	; (800fc24 <prvAddCurrentTaskToDelayedList+0x90>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fba4:	4b20      	ldr	r3, [pc, #128]	; (800fc28 <prvAddCurrentTaskToDelayedList+0x94>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	3304      	adds	r3, #4
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7fd fd34 	bl	800d618 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbb6:	d10a      	bne.n	800fbce <prvAddCurrentTaskToDelayedList+0x3a>
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d007      	beq.n	800fbce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbbe:	4b1a      	ldr	r3, [pc, #104]	; (800fc28 <prvAddCurrentTaskToDelayedList+0x94>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	3304      	adds	r3, #4
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	4819      	ldr	r0, [pc, #100]	; (800fc2c <prvAddCurrentTaskToDelayedList+0x98>)
 800fbc8:	f7fd fcc9 	bl	800d55e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fbcc:	e026      	b.n	800fc1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fbce:	68fa      	ldr	r2, [r7, #12]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	4413      	add	r3, r2
 800fbd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fbd6:	4b14      	ldr	r3, [pc, #80]	; (800fc28 <prvAddCurrentTaskToDelayedList+0x94>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	68ba      	ldr	r2, [r7, #8]
 800fbdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fbde:	68ba      	ldr	r2, [r7, #8]
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d209      	bcs.n	800fbfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbe6:	4b12      	ldr	r3, [pc, #72]	; (800fc30 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	4b0f      	ldr	r3, [pc, #60]	; (800fc28 <prvAddCurrentTaskToDelayedList+0x94>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	3304      	adds	r3, #4
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	4610      	mov	r0, r2
 800fbf4:	f7fd fcd7 	bl	800d5a6 <vListInsert>
}
 800fbf8:	e010      	b.n	800fc1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbfa:	4b0e      	ldr	r3, [pc, #56]	; (800fc34 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	4b0a      	ldr	r3, [pc, #40]	; (800fc28 <prvAddCurrentTaskToDelayedList+0x94>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	3304      	adds	r3, #4
 800fc04:	4619      	mov	r1, r3
 800fc06:	4610      	mov	r0, r2
 800fc08:	f7fd fccd 	bl	800d5a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fc0c:	4b0a      	ldr	r3, [pc, #40]	; (800fc38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	68ba      	ldr	r2, [r7, #8]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d202      	bcs.n	800fc1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fc16:	4a08      	ldr	r2, [pc, #32]	; (800fc38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	6013      	str	r3, [r2, #0]
}
 800fc1c:	bf00      	nop
 800fc1e:	3710      	adds	r7, #16
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	20007478 	.word	0x20007478
 800fc28:	20006fa0 	.word	0x20006fa0
 800fc2c:	20007460 	.word	0x20007460
 800fc30:	20007430 	.word	0x20007430
 800fc34:	2000742c 	.word	0x2000742c
 800fc38:	20007494 	.word	0x20007494

0800fc3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b08a      	sub	sp, #40	; 0x28
 800fc40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fc42:	2300      	movs	r3, #0
 800fc44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fc46:	f000 faff 	bl	8010248 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fc4a:	4b1c      	ldr	r3, [pc, #112]	; (800fcbc <xTimerCreateTimerTask+0x80>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d021      	beq.n	800fc96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fc52:	2300      	movs	r3, #0
 800fc54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fc56:	2300      	movs	r3, #0
 800fc58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fc5a:	1d3a      	adds	r2, r7, #4
 800fc5c:	f107 0108 	add.w	r1, r7, #8
 800fc60:	f107 030c 	add.w	r3, r7, #12
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7fd fa5d 	bl	800d124 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fc6a:	6879      	ldr	r1, [r7, #4]
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	68fa      	ldr	r2, [r7, #12]
 800fc70:	9202      	str	r2, [sp, #8]
 800fc72:	9301      	str	r3, [sp, #4]
 800fc74:	2302      	movs	r3, #2
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	2300      	movs	r3, #0
 800fc7a:	460a      	mov	r2, r1
 800fc7c:	4910      	ldr	r1, [pc, #64]	; (800fcc0 <xTimerCreateTimerTask+0x84>)
 800fc7e:	4811      	ldr	r0, [pc, #68]	; (800fcc4 <xTimerCreateTimerTask+0x88>)
 800fc80:	f7fe ffd8 	bl	800ec34 <xTaskCreateStatic>
 800fc84:	4602      	mov	r2, r0
 800fc86:	4b10      	ldr	r3, [pc, #64]	; (800fcc8 <xTimerCreateTimerTask+0x8c>)
 800fc88:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fc8a:	4b0f      	ldr	r3, [pc, #60]	; (800fcc8 <xTimerCreateTimerTask+0x8c>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fc92:	2301      	movs	r3, #1
 800fc94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d109      	bne.n	800fcb0 <xTimerCreateTimerTask+0x74>
 800fc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca0:	f383 8811 	msr	BASEPRI, r3
 800fca4:	f3bf 8f6f 	isb	sy
 800fca8:	f3bf 8f4f 	dsb	sy
 800fcac:	613b      	str	r3, [r7, #16]
 800fcae:	e7fe      	b.n	800fcae <xTimerCreateTimerTask+0x72>
	return xReturn;
 800fcb0:	697b      	ldr	r3, [r7, #20]
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3718      	adds	r7, #24
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	200074d0 	.word	0x200074d0
 800fcc0:	0801f90c 	.word	0x0801f90c
 800fcc4:	0800fdfd 	.word	0x0800fdfd
 800fcc8:	200074d4 	.word	0x200074d4

0800fccc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b08a      	sub	sp, #40	; 0x28
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	60f8      	str	r0, [r7, #12]
 800fcd4:	60b9      	str	r1, [r7, #8]
 800fcd6:	607a      	str	r2, [r7, #4]
 800fcd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d109      	bne.n	800fcf8 <xTimerGenericCommand+0x2c>
 800fce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce8:	f383 8811 	msr	BASEPRI, r3
 800fcec:	f3bf 8f6f 	isb	sy
 800fcf0:	f3bf 8f4f 	dsb	sy
 800fcf4:	623b      	str	r3, [r7, #32]
 800fcf6:	e7fe      	b.n	800fcf6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fcf8:	4b19      	ldr	r3, [pc, #100]	; (800fd60 <xTimerGenericCommand+0x94>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d02a      	beq.n	800fd56 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	2b05      	cmp	r3, #5
 800fd10:	dc18      	bgt.n	800fd44 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fd12:	f7ff fdb9 	bl	800f888 <xTaskGetSchedulerState>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b02      	cmp	r3, #2
 800fd1a:	d109      	bne.n	800fd30 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fd1c:	4b10      	ldr	r3, [pc, #64]	; (800fd60 <xTimerGenericCommand+0x94>)
 800fd1e:	6818      	ldr	r0, [r3, #0]
 800fd20:	f107 0110 	add.w	r1, r7, #16
 800fd24:	2300      	movs	r3, #0
 800fd26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd28:	f7fe f93a 	bl	800dfa0 <xQueueGenericSend>
 800fd2c:	6278      	str	r0, [r7, #36]	; 0x24
 800fd2e:	e012      	b.n	800fd56 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fd30:	4b0b      	ldr	r3, [pc, #44]	; (800fd60 <xTimerGenericCommand+0x94>)
 800fd32:	6818      	ldr	r0, [r3, #0]
 800fd34:	f107 0110 	add.w	r1, r7, #16
 800fd38:	2300      	movs	r3, #0
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f7fe f930 	bl	800dfa0 <xQueueGenericSend>
 800fd40:	6278      	str	r0, [r7, #36]	; 0x24
 800fd42:	e008      	b.n	800fd56 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fd44:	4b06      	ldr	r3, [pc, #24]	; (800fd60 <xTimerGenericCommand+0x94>)
 800fd46:	6818      	ldr	r0, [r3, #0]
 800fd48:	f107 0110 	add.w	r1, r7, #16
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	683a      	ldr	r2, [r7, #0]
 800fd50:	f7fe fa20 	bl	800e194 <xQueueGenericSendFromISR>
 800fd54:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3728      	adds	r7, #40	; 0x28
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	200074d0 	.word	0x200074d0

0800fd64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b088      	sub	sp, #32
 800fd68:	af02      	add	r7, sp, #8
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd6e:	4b22      	ldr	r3, [pc, #136]	; (800fdf8 <prvProcessExpiredTimer+0x94>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	3304      	adds	r3, #4
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7fd fc4b 	bl	800d618 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd88:	f003 0304 	and.w	r3, r3, #4
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d021      	beq.n	800fdd4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	699a      	ldr	r2, [r3, #24]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	18d1      	adds	r1, r2, r3
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	683a      	ldr	r2, [r7, #0]
 800fd9c:	6978      	ldr	r0, [r7, #20]
 800fd9e:	f000 f8d1 	bl	800ff44 <prvInsertTimerInActiveList>
 800fda2:	4603      	mov	r3, r0
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d01e      	beq.n	800fde6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fda8:	2300      	movs	r3, #0
 800fdaa:	9300      	str	r3, [sp, #0]
 800fdac:	2300      	movs	r3, #0
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	6978      	ldr	r0, [r7, #20]
 800fdb4:	f7ff ff8a 	bl	800fccc <xTimerGenericCommand>
 800fdb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d112      	bne.n	800fde6 <prvProcessExpiredTimer+0x82>
 800fdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc4:	f383 8811 	msr	BASEPRI, r3
 800fdc8:	f3bf 8f6f 	isb	sy
 800fdcc:	f3bf 8f4f 	dsb	sy
 800fdd0:	60fb      	str	r3, [r7, #12]
 800fdd2:	e7fe      	b.n	800fdd2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdda:	f023 0301 	bic.w	r3, r3, #1
 800fdde:	b2da      	uxtb	r2, r3
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	6a1b      	ldr	r3, [r3, #32]
 800fdea:	6978      	ldr	r0, [r7, #20]
 800fdec:	4798      	blx	r3
}
 800fdee:	bf00      	nop
 800fdf0:	3718      	adds	r7, #24
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	200074c8 	.word	0x200074c8

0800fdfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fe04:	f107 0308 	add.w	r3, r7, #8
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f000 f857 	bl	800febc <prvGetNextExpireTime>
 800fe0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	4619      	mov	r1, r3
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	f000 f803 	bl	800fe20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fe1a:	f000 f8d5 	bl	800ffc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fe1e:	e7f1      	b.n	800fe04 <prvTimerTask+0x8>

0800fe20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b084      	sub	sp, #16
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fe2a:	f7ff f939 	bl	800f0a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe2e:	f107 0308 	add.w	r3, r7, #8
 800fe32:	4618      	mov	r0, r3
 800fe34:	f000 f866 	bl	800ff04 <prvSampleTimeNow>
 800fe38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d130      	bne.n	800fea2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d10a      	bne.n	800fe5c <prvProcessTimerOrBlockTask+0x3c>
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d806      	bhi.n	800fe5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fe4e:	f7ff f935 	bl	800f0bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fe52:	68f9      	ldr	r1, [r7, #12]
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f7ff ff85 	bl	800fd64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fe5a:	e024      	b.n	800fea6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d008      	beq.n	800fe74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fe62:	4b13      	ldr	r3, [pc, #76]	; (800feb0 <prvProcessTimerOrBlockTask+0x90>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d101      	bne.n	800fe70 <prvProcessTimerOrBlockTask+0x50>
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	e000      	b.n	800fe72 <prvProcessTimerOrBlockTask+0x52>
 800fe70:	2300      	movs	r3, #0
 800fe72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fe74:	4b0f      	ldr	r3, [pc, #60]	; (800feb4 <prvProcessTimerOrBlockTask+0x94>)
 800fe76:	6818      	ldr	r0, [r3, #0]
 800fe78:	687a      	ldr	r2, [r7, #4]
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	1ad3      	subs	r3, r2, r3
 800fe7e:	683a      	ldr	r2, [r7, #0]
 800fe80:	4619      	mov	r1, r3
 800fe82:	f7fe fea3 	bl	800ebcc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fe86:	f7ff f919 	bl	800f0bc <xTaskResumeAll>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d10a      	bne.n	800fea6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fe90:	4b09      	ldr	r3, [pc, #36]	; (800feb8 <prvProcessTimerOrBlockTask+0x98>)
 800fe92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe96:	601a      	str	r2, [r3, #0]
 800fe98:	f3bf 8f4f 	dsb	sy
 800fe9c:	f3bf 8f6f 	isb	sy
}
 800fea0:	e001      	b.n	800fea6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fea2:	f7ff f90b 	bl	800f0bc <xTaskResumeAll>
}
 800fea6:	bf00      	nop
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	200074cc 	.word	0x200074cc
 800feb4:	200074d0 	.word	0x200074d0
 800feb8:	e000ed04 	.word	0xe000ed04

0800febc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800febc:	b480      	push	{r7}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fec4:	4b0e      	ldr	r3, [pc, #56]	; (800ff00 <prvGetNextExpireTime+0x44>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d101      	bne.n	800fed2 <prvGetNextExpireTime+0x16>
 800fece:	2201      	movs	r2, #1
 800fed0:	e000      	b.n	800fed4 <prvGetNextExpireTime+0x18>
 800fed2:	2200      	movs	r2, #0
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d105      	bne.n	800feec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fee0:	4b07      	ldr	r3, [pc, #28]	; (800ff00 <prvGetNextExpireTime+0x44>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	68db      	ldr	r3, [r3, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	60fb      	str	r3, [r7, #12]
 800feea:	e001      	b.n	800fef0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800feec:	2300      	movs	r3, #0
 800feee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fef0:	68fb      	ldr	r3, [r7, #12]
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3714      	adds	r7, #20
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr
 800fefe:	bf00      	nop
 800ff00:	200074c8 	.word	0x200074c8

0800ff04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ff0c:	f7ff f972 	bl	800f1f4 <xTaskGetTickCount>
 800ff10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ff12:	4b0b      	ldr	r3, [pc, #44]	; (800ff40 <prvSampleTimeNow+0x3c>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	68fa      	ldr	r2, [r7, #12]
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d205      	bcs.n	800ff28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ff1c:	f000 f930 	bl	8010180 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2201      	movs	r2, #1
 800ff24:	601a      	str	r2, [r3, #0]
 800ff26:	e002      	b.n	800ff2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ff2e:	4a04      	ldr	r2, [pc, #16]	; (800ff40 <prvSampleTimeNow+0x3c>)
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ff34:	68fb      	ldr	r3, [r7, #12]
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3710      	adds	r7, #16
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	200074d8 	.word	0x200074d8

0800ff44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b086      	sub	sp, #24
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	60b9      	str	r1, [r7, #8]
 800ff4e:	607a      	str	r2, [r7, #4]
 800ff50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ff52:	2300      	movs	r3, #0
 800ff54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	68ba      	ldr	r2, [r7, #8]
 800ff5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	68fa      	ldr	r2, [r7, #12]
 800ff60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ff62:	68ba      	ldr	r2, [r7, #8]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d812      	bhi.n	800ff90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff6a:	687a      	ldr	r2, [r7, #4]
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	1ad2      	subs	r2, r2, r3
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	699b      	ldr	r3, [r3, #24]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d302      	bcc.n	800ff7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	617b      	str	r3, [r7, #20]
 800ff7c:	e01b      	b.n	800ffb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ff7e:	4b10      	ldr	r3, [pc, #64]	; (800ffc0 <prvInsertTimerInActiveList+0x7c>)
 800ff80:	681a      	ldr	r2, [r3, #0]
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	3304      	adds	r3, #4
 800ff86:	4619      	mov	r1, r3
 800ff88:	4610      	mov	r0, r2
 800ff8a:	f7fd fb0c 	bl	800d5a6 <vListInsert>
 800ff8e:	e012      	b.n	800ffb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d206      	bcs.n	800ffa6 <prvInsertTimerInActiveList+0x62>
 800ff98:	68ba      	ldr	r2, [r7, #8]
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d302      	bcc.n	800ffa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	617b      	str	r3, [r7, #20]
 800ffa4:	e007      	b.n	800ffb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ffa6:	4b07      	ldr	r3, [pc, #28]	; (800ffc4 <prvInsertTimerInActiveList+0x80>)
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	3304      	adds	r3, #4
 800ffae:	4619      	mov	r1, r3
 800ffb0:	4610      	mov	r0, r2
 800ffb2:	f7fd faf8 	bl	800d5a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ffb6:	697b      	ldr	r3, [r7, #20]
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3718      	adds	r7, #24
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	200074cc 	.word	0x200074cc
 800ffc4:	200074c8 	.word	0x200074c8

0800ffc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b08e      	sub	sp, #56	; 0x38
 800ffcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ffce:	e0c6      	b.n	801015e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	da17      	bge.n	8010006 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ffd6:	1d3b      	adds	r3, r7, #4
 800ffd8:	3304      	adds	r3, #4
 800ffda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ffdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d109      	bne.n	800fff6 <prvProcessReceivedCommands+0x2e>
 800ffe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffe6:	f383 8811 	msr	BASEPRI, r3
 800ffea:	f3bf 8f6f 	isb	sy
 800ffee:	f3bf 8f4f 	dsb	sy
 800fff2:	61fb      	str	r3, [r7, #28]
 800fff4:	e7fe      	b.n	800fff4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fffc:	6850      	ldr	r0, [r2, #4]
 800fffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010000:	6892      	ldr	r2, [r2, #8]
 8010002:	4611      	mov	r1, r2
 8010004:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2b00      	cmp	r3, #0
 801000a:	f2c0 80a7 	blt.w	801015c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010014:	695b      	ldr	r3, [r3, #20]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d004      	beq.n	8010024 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801001a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801001c:	3304      	adds	r3, #4
 801001e:	4618      	mov	r0, r3
 8010020:	f7fd fafa 	bl	800d618 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010024:	463b      	mov	r3, r7
 8010026:	4618      	mov	r0, r3
 8010028:	f7ff ff6c 	bl	800ff04 <prvSampleTimeNow>
 801002c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2b09      	cmp	r3, #9
 8010032:	f200 8094 	bhi.w	801015e <prvProcessReceivedCommands+0x196>
 8010036:	a201      	add	r2, pc, #4	; (adr r2, 801003c <prvProcessReceivedCommands+0x74>)
 8010038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801003c:	08010065 	.word	0x08010065
 8010040:	08010065 	.word	0x08010065
 8010044:	08010065 	.word	0x08010065
 8010048:	080100d7 	.word	0x080100d7
 801004c:	080100eb 	.word	0x080100eb
 8010050:	08010133 	.word	0x08010133
 8010054:	08010065 	.word	0x08010065
 8010058:	08010065 	.word	0x08010065
 801005c:	080100d7 	.word	0x080100d7
 8010060:	080100eb 	.word	0x080100eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801006a:	f043 0301 	orr.w	r3, r3, #1
 801006e:	b2da      	uxtb	r2, r3
 8010070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010076:	68ba      	ldr	r2, [r7, #8]
 8010078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007a:	699b      	ldr	r3, [r3, #24]
 801007c:	18d1      	adds	r1, r2, r3
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010084:	f7ff ff5e 	bl	800ff44 <prvInsertTimerInActiveList>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	d067      	beq.n	801015e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801008e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010090:	6a1b      	ldr	r3, [r3, #32]
 8010092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010094:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801009c:	f003 0304 	and.w	r3, r3, #4
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d05c      	beq.n	801015e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80100a4:	68ba      	ldr	r2, [r7, #8]
 80100a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a8:	699b      	ldr	r3, [r3, #24]
 80100aa:	441a      	add	r2, r3
 80100ac:	2300      	movs	r3, #0
 80100ae:	9300      	str	r3, [sp, #0]
 80100b0:	2300      	movs	r3, #0
 80100b2:	2100      	movs	r1, #0
 80100b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100b6:	f7ff fe09 	bl	800fccc <xTimerGenericCommand>
 80100ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80100bc:	6a3b      	ldr	r3, [r7, #32]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d14d      	bne.n	801015e <prvProcessReceivedCommands+0x196>
 80100c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c6:	f383 8811 	msr	BASEPRI, r3
 80100ca:	f3bf 8f6f 	isb	sy
 80100ce:	f3bf 8f4f 	dsb	sy
 80100d2:	61bb      	str	r3, [r7, #24]
 80100d4:	e7fe      	b.n	80100d4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80100d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100dc:	f023 0301 	bic.w	r3, r3, #1
 80100e0:	b2da      	uxtb	r2, r3
 80100e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80100e8:	e039      	b.n	801015e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80100ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100f0:	f043 0301 	orr.w	r3, r3, #1
 80100f4:	b2da      	uxtb	r2, r3
 80100f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80100fc:	68ba      	ldr	r2, [r7, #8]
 80100fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010100:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010104:	699b      	ldr	r3, [r3, #24]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d109      	bne.n	801011e <prvProcessReceivedCommands+0x156>
 801010a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010e:	f383 8811 	msr	BASEPRI, r3
 8010112:	f3bf 8f6f 	isb	sy
 8010116:	f3bf 8f4f 	dsb	sy
 801011a:	617b      	str	r3, [r7, #20]
 801011c:	e7fe      	b.n	801011c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801011e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010120:	699a      	ldr	r2, [r3, #24]
 8010122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010124:	18d1      	adds	r1, r2, r3
 8010126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801012a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801012c:	f7ff ff0a 	bl	800ff44 <prvInsertTimerInActiveList>
					break;
 8010130:	e015      	b.n	801015e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010138:	f003 0302 	and.w	r3, r3, #2
 801013c:	2b00      	cmp	r3, #0
 801013e:	d103      	bne.n	8010148 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8010140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010142:	f7fd f8cb 	bl	800d2dc <vPortFree>
 8010146:	e00a      	b.n	801015e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801014e:	f023 0301 	bic.w	r3, r3, #1
 8010152:	b2da      	uxtb	r2, r3
 8010154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801015a:	e000      	b.n	801015e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801015c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801015e:	4b07      	ldr	r3, [pc, #28]	; (801017c <prvProcessReceivedCommands+0x1b4>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	1d39      	adds	r1, r7, #4
 8010164:	2200      	movs	r2, #0
 8010166:	4618      	mov	r0, r3
 8010168:	f7fe f932 	bl	800e3d0 <xQueueReceive>
 801016c:	4603      	mov	r3, r0
 801016e:	2b00      	cmp	r3, #0
 8010170:	f47f af2e 	bne.w	800ffd0 <prvProcessReceivedCommands+0x8>
	}
}
 8010174:	bf00      	nop
 8010176:	3730      	adds	r7, #48	; 0x30
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	200074d0 	.word	0x200074d0

08010180 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b088      	sub	sp, #32
 8010184:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010186:	e047      	b.n	8010218 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010188:	4b2d      	ldr	r3, [pc, #180]	; (8010240 <prvSwitchTimerLists+0xc0>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010192:	4b2b      	ldr	r3, [pc, #172]	; (8010240 <prvSwitchTimerLists+0xc0>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	68db      	ldr	r3, [r3, #12]
 801019a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	3304      	adds	r3, #4
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fd fa39 	bl	800d618 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	6a1b      	ldr	r3, [r3, #32]
 80101aa:	68f8      	ldr	r0, [r7, #12]
 80101ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80101b4:	f003 0304 	and.w	r3, r3, #4
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d02d      	beq.n	8010218 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	699b      	ldr	r3, [r3, #24]
 80101c0:	693a      	ldr	r2, [r7, #16]
 80101c2:	4413      	add	r3, r2
 80101c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80101c6:	68ba      	ldr	r2, [r7, #8]
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d90e      	bls.n	80101ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	68ba      	ldr	r2, [r7, #8]
 80101d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	68fa      	ldr	r2, [r7, #12]
 80101d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80101da:	4b19      	ldr	r3, [pc, #100]	; (8010240 <prvSwitchTimerLists+0xc0>)
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	3304      	adds	r3, #4
 80101e2:	4619      	mov	r1, r3
 80101e4:	4610      	mov	r0, r2
 80101e6:	f7fd f9de 	bl	800d5a6 <vListInsert>
 80101ea:	e015      	b.n	8010218 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80101ec:	2300      	movs	r3, #0
 80101ee:	9300      	str	r3, [sp, #0]
 80101f0:	2300      	movs	r3, #0
 80101f2:	693a      	ldr	r2, [r7, #16]
 80101f4:	2100      	movs	r1, #0
 80101f6:	68f8      	ldr	r0, [r7, #12]
 80101f8:	f7ff fd68 	bl	800fccc <xTimerGenericCommand>
 80101fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d109      	bne.n	8010218 <prvSwitchTimerLists+0x98>
 8010204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010208:	f383 8811 	msr	BASEPRI, r3
 801020c:	f3bf 8f6f 	isb	sy
 8010210:	f3bf 8f4f 	dsb	sy
 8010214:	603b      	str	r3, [r7, #0]
 8010216:	e7fe      	b.n	8010216 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010218:	4b09      	ldr	r3, [pc, #36]	; (8010240 <prvSwitchTimerLists+0xc0>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d1b2      	bne.n	8010188 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010222:	4b07      	ldr	r3, [pc, #28]	; (8010240 <prvSwitchTimerLists+0xc0>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010228:	4b06      	ldr	r3, [pc, #24]	; (8010244 <prvSwitchTimerLists+0xc4>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4a04      	ldr	r2, [pc, #16]	; (8010240 <prvSwitchTimerLists+0xc0>)
 801022e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010230:	4a04      	ldr	r2, [pc, #16]	; (8010244 <prvSwitchTimerLists+0xc4>)
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	6013      	str	r3, [r2, #0]
}
 8010236:	bf00      	nop
 8010238:	3718      	adds	r7, #24
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
 801023e:	bf00      	nop
 8010240:	200074c8 	.word	0x200074c8
 8010244:	200074cc 	.word	0x200074cc

08010248 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801024e:	f7fd fb35 	bl	800d8bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010252:	4b15      	ldr	r3, [pc, #84]	; (80102a8 <prvCheckForValidListAndQueue+0x60>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d120      	bne.n	801029c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801025a:	4814      	ldr	r0, [pc, #80]	; (80102ac <prvCheckForValidListAndQueue+0x64>)
 801025c:	f7fd f952 	bl	800d504 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010260:	4813      	ldr	r0, [pc, #76]	; (80102b0 <prvCheckForValidListAndQueue+0x68>)
 8010262:	f7fd f94f 	bl	800d504 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010266:	4b13      	ldr	r3, [pc, #76]	; (80102b4 <prvCheckForValidListAndQueue+0x6c>)
 8010268:	4a10      	ldr	r2, [pc, #64]	; (80102ac <prvCheckForValidListAndQueue+0x64>)
 801026a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801026c:	4b12      	ldr	r3, [pc, #72]	; (80102b8 <prvCheckForValidListAndQueue+0x70>)
 801026e:	4a10      	ldr	r2, [pc, #64]	; (80102b0 <prvCheckForValidListAndQueue+0x68>)
 8010270:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010272:	2300      	movs	r3, #0
 8010274:	9300      	str	r3, [sp, #0]
 8010276:	4b11      	ldr	r3, [pc, #68]	; (80102bc <prvCheckForValidListAndQueue+0x74>)
 8010278:	4a11      	ldr	r2, [pc, #68]	; (80102c0 <prvCheckForValidListAndQueue+0x78>)
 801027a:	2110      	movs	r1, #16
 801027c:	200a      	movs	r0, #10
 801027e:	f7fd fc9f 	bl	800dbc0 <xQueueGenericCreateStatic>
 8010282:	4602      	mov	r2, r0
 8010284:	4b08      	ldr	r3, [pc, #32]	; (80102a8 <prvCheckForValidListAndQueue+0x60>)
 8010286:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010288:	4b07      	ldr	r3, [pc, #28]	; (80102a8 <prvCheckForValidListAndQueue+0x60>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d005      	beq.n	801029c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010290:	4b05      	ldr	r3, [pc, #20]	; (80102a8 <prvCheckForValidListAndQueue+0x60>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	490b      	ldr	r1, [pc, #44]	; (80102c4 <prvCheckForValidListAndQueue+0x7c>)
 8010296:	4618      	mov	r0, r3
 8010298:	f7fe fc46 	bl	800eb28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801029c:	f7fd fb3c 	bl	800d918 <vPortExitCritical>
}
 80102a0:	bf00      	nop
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	200074d0 	.word	0x200074d0
 80102ac:	200074a0 	.word	0x200074a0
 80102b0:	200074b4 	.word	0x200074b4
 80102b4:	200074c8 	.word	0x200074c8
 80102b8:	200074cc 	.word	0x200074cc
 80102bc:	2000757c 	.word	0x2000757c
 80102c0:	200074dc 	.word	0x200074dc
 80102c4:	0801f914 	.word	0x0801f914

080102c8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80102c8:	b480      	push	{r7}
 80102ca:	b083      	sub	sp, #12
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	4603      	mov	r3, r0
 80102d0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80102d2:	88fb      	ldrh	r3, [r7, #6]
 80102d4:	021b      	lsls	r3, r3, #8
 80102d6:	b21a      	sxth	r2, r3
 80102d8:	88fb      	ldrh	r3, [r7, #6]
 80102da:	0a1b      	lsrs	r3, r3, #8
 80102dc:	b29b      	uxth	r3, r3
 80102de:	b21b      	sxth	r3, r3
 80102e0:	4313      	orrs	r3, r2
 80102e2:	b21b      	sxth	r3, r3
 80102e4:	b29b      	uxth	r3, r3
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	370c      	adds	r7, #12
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr

080102f2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80102f2:	b480      	push	{r7}
 80102f4:	b083      	sub	sp, #12
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	061a      	lsls	r2, r3, #24
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	021b      	lsls	r3, r3, #8
 8010302:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010306:	431a      	orrs	r2, r3
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	0a1b      	lsrs	r3, r3, #8
 801030c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010310:	431a      	orrs	r2, r3
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	0e1b      	lsrs	r3, r3, #24
 8010316:	4313      	orrs	r3, r2
}
 8010318:	4618      	mov	r0, r3
 801031a:	370c      	adds	r7, #12
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8010328:	4b20      	ldr	r3, [pc, #128]	; (80103ac <dhcp_inc_pcb_refcount+0x88>)
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d133      	bne.n	8010398 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8010330:	4b1f      	ldr	r3, [pc, #124]	; (80103b0 <dhcp_inc_pcb_refcount+0x8c>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d005      	beq.n	8010344 <dhcp_inc_pcb_refcount+0x20>
 8010338:	4b1e      	ldr	r3, [pc, #120]	; (80103b4 <dhcp_inc_pcb_refcount+0x90>)
 801033a:	22e5      	movs	r2, #229	; 0xe5
 801033c:	491e      	ldr	r1, [pc, #120]	; (80103b8 <dhcp_inc_pcb_refcount+0x94>)
 801033e:	481f      	ldr	r0, [pc, #124]	; (80103bc <dhcp_inc_pcb_refcount+0x98>)
 8010340:	f00d f9da 	bl	801d6f8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8010344:	f00c faaa 	bl	801c89c <udp_new>
 8010348:	4602      	mov	r2, r0
 801034a:	4b19      	ldr	r3, [pc, #100]	; (80103b0 <dhcp_inc_pcb_refcount+0x8c>)
 801034c:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 801034e:	4b18      	ldr	r3, [pc, #96]	; (80103b0 <dhcp_inc_pcb_refcount+0x8c>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d102      	bne.n	801035c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8010356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801035a:	e024      	b.n	80103a6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801035c:	4b14      	ldr	r3, [pc, #80]	; (80103b0 <dhcp_inc_pcb_refcount+0x8c>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	7a5a      	ldrb	r2, [r3, #9]
 8010362:	4b13      	ldr	r3, [pc, #76]	; (80103b0 <dhcp_inc_pcb_refcount+0x8c>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f042 0220 	orr.w	r2, r2, #32
 801036a:	b2d2      	uxtb	r2, r2
 801036c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801036e:	4b10      	ldr	r3, [pc, #64]	; (80103b0 <dhcp_inc_pcb_refcount+0x8c>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2244      	movs	r2, #68	; 0x44
 8010374:	4912      	ldr	r1, [pc, #72]	; (80103c0 <dhcp_inc_pcb_refcount+0x9c>)
 8010376:	4618      	mov	r0, r3
 8010378:	f00c f938 	bl	801c5ec <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801037c:	4b0c      	ldr	r3, [pc, #48]	; (80103b0 <dhcp_inc_pcb_refcount+0x8c>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	2243      	movs	r2, #67	; 0x43
 8010382:	490f      	ldr	r1, [pc, #60]	; (80103c0 <dhcp_inc_pcb_refcount+0x9c>)
 8010384:	4618      	mov	r0, r3
 8010386:	f00c f9b9 	bl	801c6fc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801038a:	4b09      	ldr	r3, [pc, #36]	; (80103b0 <dhcp_inc_pcb_refcount+0x8c>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2200      	movs	r2, #0
 8010390:	490c      	ldr	r1, [pc, #48]	; (80103c4 <dhcp_inc_pcb_refcount+0xa0>)
 8010392:	4618      	mov	r0, r3
 8010394:	f00c fa20 	bl	801c7d8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8010398:	4b04      	ldr	r3, [pc, #16]	; (80103ac <dhcp_inc_pcb_refcount+0x88>)
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	3301      	adds	r3, #1
 801039e:	b2da      	uxtb	r2, r3
 80103a0:	4b02      	ldr	r3, [pc, #8]	; (80103ac <dhcp_inc_pcb_refcount+0x88>)
 80103a2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80103a4:	2300      	movs	r3, #0
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	200075d0 	.word	0x200075d0
 80103b0:	200075cc 	.word	0x200075cc
 80103b4:	0801f91c 	.word	0x0801f91c
 80103b8:	0801f970 	.word	0x0801f970
 80103bc:	0801f998 	.word	0x0801f998
 80103c0:	080229ac 	.word	0x080229ac
 80103c4:	08011c81 	.word	0x08011c81

080103c8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80103cc:	4b0e      	ldr	r3, [pc, #56]	; (8010408 <dhcp_dec_pcb_refcount+0x40>)
 80103ce:	781b      	ldrb	r3, [r3, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d105      	bne.n	80103e0 <dhcp_dec_pcb_refcount+0x18>
 80103d4:	4b0d      	ldr	r3, [pc, #52]	; (801040c <dhcp_dec_pcb_refcount+0x44>)
 80103d6:	22ff      	movs	r2, #255	; 0xff
 80103d8:	490d      	ldr	r1, [pc, #52]	; (8010410 <dhcp_dec_pcb_refcount+0x48>)
 80103da:	480e      	ldr	r0, [pc, #56]	; (8010414 <dhcp_dec_pcb_refcount+0x4c>)
 80103dc:	f00d f98c 	bl	801d6f8 <iprintf>
  dhcp_pcb_refcount--;
 80103e0:	4b09      	ldr	r3, [pc, #36]	; (8010408 <dhcp_dec_pcb_refcount+0x40>)
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	3b01      	subs	r3, #1
 80103e6:	b2da      	uxtb	r2, r3
 80103e8:	4b07      	ldr	r3, [pc, #28]	; (8010408 <dhcp_dec_pcb_refcount+0x40>)
 80103ea:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80103ec:	4b06      	ldr	r3, [pc, #24]	; (8010408 <dhcp_dec_pcb_refcount+0x40>)
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d107      	bne.n	8010404 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80103f4:	4b08      	ldr	r3, [pc, #32]	; (8010418 <dhcp_dec_pcb_refcount+0x50>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4618      	mov	r0, r3
 80103fa:	f00c fa0d 	bl	801c818 <udp_remove>
    dhcp_pcb = NULL;
 80103fe:	4b06      	ldr	r3, [pc, #24]	; (8010418 <dhcp_dec_pcb_refcount+0x50>)
 8010400:	2200      	movs	r2, #0
 8010402:	601a      	str	r2, [r3, #0]
  }
}
 8010404:	bf00      	nop
 8010406:	bd80      	pop	{r7, pc}
 8010408:	200075d0 	.word	0x200075d0
 801040c:	0801f91c 	.word	0x0801f91c
 8010410:	0801f9c0 	.word	0x0801f9c0
 8010414:	0801f998 	.word	0x0801f998
 8010418:	200075cc 	.word	0x200075cc

0801041c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b084      	sub	sp, #16
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010428:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801042a:	210c      	movs	r1, #12
 801042c:	68f8      	ldr	r0, [r7, #12]
 801042e:	f001 f869 	bl	8011504 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010432:	4b06      	ldr	r3, [pc, #24]	; (801044c <dhcp_handle_nak+0x30>)
 8010434:	4a05      	ldr	r2, [pc, #20]	; (801044c <dhcp_handle_nak+0x30>)
 8010436:	4905      	ldr	r1, [pc, #20]	; (801044c <dhcp_handle_nak+0x30>)
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f005 f8a3 	bl	8015584 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f000 fc5c 	bl	8010cfc <dhcp_discover>
}
 8010444:	bf00      	nop
 8010446:	3710      	adds	r7, #16
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	080229ac 	.word	0x080229ac

08010450 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801045c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801045e:	2108      	movs	r1, #8
 8010460:	68f8      	ldr	r0, [r7, #12]
 8010462:	f001 f84f 	bl	8011504 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	331c      	adds	r3, #28
 801046a:	2200      	movs	r2, #0
 801046c:	4619      	mov	r1, r3
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f002 fb4e 	bl	8012b10 <etharp_query>
 8010474:	4603      	mov	r3, r0
 8010476:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	799b      	ldrb	r3, [r3, #6]
 801047c:	2bff      	cmp	r3, #255	; 0xff
 801047e:	d005      	beq.n	801048c <dhcp_check+0x3c>
    dhcp->tries++;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	799b      	ldrb	r3, [r3, #6]
 8010484:	3301      	adds	r3, #1
 8010486:	b2da      	uxtb	r2, r3
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801048c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010490:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010492:	893b      	ldrh	r3, [r7, #8]
 8010494:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010498:	4a06      	ldr	r2, [pc, #24]	; (80104b4 <dhcp_check+0x64>)
 801049a:	fb82 1203 	smull	r1, r2, r2, r3
 801049e:	1152      	asrs	r2, r2, #5
 80104a0:	17db      	asrs	r3, r3, #31
 80104a2:	1ad3      	subs	r3, r2, r3
 80104a4:	b29a      	uxth	r2, r3
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80104aa:	bf00      	nop
 80104ac:	3710      	adds	r7, #16
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	bf00      	nop
 80104b4:	10624dd3 	.word	0x10624dd3

080104b8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b084      	sub	sp, #16
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80104c8:	4b0c      	ldr	r3, [pc, #48]	; (80104fc <dhcp_handle_offer+0x44>)
 80104ca:	789b      	ldrb	r3, [r3, #2]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d011      	beq.n	80104f4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2200      	movs	r2, #0
 80104d4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80104d6:	4b0a      	ldr	r3, [pc, #40]	; (8010500 <dhcp_handle_offer+0x48>)
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	4618      	mov	r0, r3
 80104dc:	f7ff ff09 	bl	80102f2 <lwip_htonl>
 80104e0:	4602      	mov	r2, r0
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	691a      	ldr	r2, [r3, #16]
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f000 f808 	bl	8010504 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80104f4:	bf00      	nop
 80104f6:	3710      	adds	r7, #16
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	20008954 	.word	0x20008954
 8010500:	2000895c 	.word	0x2000895c

08010504 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8010504:	b5b0      	push	{r4, r5, r7, lr}
 8010506:	b08a      	sub	sp, #40	; 0x28
 8010508:	af02      	add	r7, sp, #8
 801050a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d109      	bne.n	8010526 <dhcp_select+0x22>
 8010512:	4b71      	ldr	r3, [pc, #452]	; (80106d8 <dhcp_select+0x1d4>)
 8010514:	f240 1277 	movw	r2, #375	; 0x177
 8010518:	4970      	ldr	r1, [pc, #448]	; (80106dc <dhcp_select+0x1d8>)
 801051a:	4871      	ldr	r0, [pc, #452]	; (80106e0 <dhcp_select+0x1dc>)
 801051c:	f00d f8ec 	bl	801d6f8 <iprintf>
 8010520:	f06f 030f 	mvn.w	r3, #15
 8010524:	e0d3      	b.n	80106ce <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801052a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801052c:	69bb      	ldr	r3, [r7, #24]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d109      	bne.n	8010546 <dhcp_select+0x42>
 8010532:	4b69      	ldr	r3, [pc, #420]	; (80106d8 <dhcp_select+0x1d4>)
 8010534:	f240 1279 	movw	r2, #377	; 0x179
 8010538:	496a      	ldr	r1, [pc, #424]	; (80106e4 <dhcp_select+0x1e0>)
 801053a:	4869      	ldr	r0, [pc, #420]	; (80106e0 <dhcp_select+0x1dc>)
 801053c:	f00d f8dc 	bl	801d6f8 <iprintf>
 8010540:	f06f 0305 	mvn.w	r3, #5
 8010544:	e0c3      	b.n	80106ce <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8010546:	2101      	movs	r1, #1
 8010548:	69b8      	ldr	r0, [r7, #24]
 801054a:	f000 ffdb 	bl	8011504 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801054e:	f107 030c 	add.w	r3, r7, #12
 8010552:	2203      	movs	r2, #3
 8010554:	69b9      	ldr	r1, [r7, #24]
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f001 fc5e 	bl	8011e18 <dhcp_create_msg>
 801055c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	2b00      	cmp	r3, #0
 8010562:	f000 8085 	beq.w	8010670 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	685b      	ldr	r3, [r3, #4]
 801056a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801056c:	89b8      	ldrh	r0, [r7, #12]
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010574:	2302      	movs	r3, #2
 8010576:	2239      	movs	r2, #57	; 0x39
 8010578:	f000 ffde 	bl	8011538 <dhcp_option>
 801057c:	4603      	mov	r3, r0
 801057e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010580:	89b8      	ldrh	r0, [r7, #12]
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801058c:	461a      	mov	r2, r3
 801058e:	f001 f82d 	bl	80115ec <dhcp_option_short>
 8010592:	4603      	mov	r3, r0
 8010594:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010596:	89b8      	ldrh	r0, [r7, #12]
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801059e:	2304      	movs	r3, #4
 80105a0:	2232      	movs	r2, #50	; 0x32
 80105a2:	f000 ffc9 	bl	8011538 <dhcp_option>
 80105a6:	4603      	mov	r3, r0
 80105a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80105aa:	89bc      	ldrh	r4, [r7, #12]
 80105ac:	693b      	ldr	r3, [r7, #16]
 80105ae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	69db      	ldr	r3, [r3, #28]
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7ff fe9b 	bl	80102f2 <lwip_htonl>
 80105bc:	4603      	mov	r3, r0
 80105be:	461a      	mov	r2, r3
 80105c0:	4629      	mov	r1, r5
 80105c2:	4620      	mov	r0, r4
 80105c4:	f001 f844 	bl	8011650 <dhcp_option_long>
 80105c8:	4603      	mov	r3, r0
 80105ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80105cc:	89b8      	ldrh	r0, [r7, #12]
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80105d4:	2304      	movs	r3, #4
 80105d6:	2236      	movs	r2, #54	; 0x36
 80105d8:	f000 ffae 	bl	8011538 <dhcp_option>
 80105dc:	4603      	mov	r3, r0
 80105de:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80105e0:	89bc      	ldrh	r4, [r7, #12]
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80105e8:	69bb      	ldr	r3, [r7, #24]
 80105ea:	699b      	ldr	r3, [r3, #24]
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7ff fe80 	bl	80102f2 <lwip_htonl>
 80105f2:	4603      	mov	r3, r0
 80105f4:	461a      	mov	r2, r3
 80105f6:	4629      	mov	r1, r5
 80105f8:	4620      	mov	r0, r4
 80105fa:	f001 f829 	bl	8011650 <dhcp_option_long>
 80105fe:	4603      	mov	r3, r0
 8010600:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010602:	89b8      	ldrh	r0, [r7, #12]
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801060a:	2303      	movs	r3, #3
 801060c:	2237      	movs	r2, #55	; 0x37
 801060e:	f000 ff93 	bl	8011538 <dhcp_option>
 8010612:	4603      	mov	r3, r0
 8010614:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010616:	2300      	movs	r3, #0
 8010618:	77bb      	strb	r3, [r7, #30]
 801061a:	e00e      	b.n	801063a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801061c:	89b8      	ldrh	r0, [r7, #12]
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010624:	7fbb      	ldrb	r3, [r7, #30]
 8010626:	4a30      	ldr	r2, [pc, #192]	; (80106e8 <dhcp_select+0x1e4>)
 8010628:	5cd3      	ldrb	r3, [r2, r3]
 801062a:	461a      	mov	r2, r3
 801062c:	f000 ffb8 	bl	80115a0 <dhcp_option_byte>
 8010630:	4603      	mov	r3, r0
 8010632:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010634:	7fbb      	ldrb	r3, [r7, #30]
 8010636:	3301      	adds	r3, #1
 8010638:	77bb      	strb	r3, [r7, #30]
 801063a:	7fbb      	ldrb	r3, [r7, #30]
 801063c:	2b02      	cmp	r3, #2
 801063e:	d9ed      	bls.n	801061c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010640:	89b8      	ldrh	r0, [r7, #12]
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	33f0      	adds	r3, #240	; 0xf0
 8010646:	697a      	ldr	r2, [r7, #20]
 8010648:	4619      	mov	r1, r3
 801064a:	f001 fcbb 	bl	8011fc4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801064e:	4b27      	ldr	r3, [pc, #156]	; (80106ec <dhcp_select+0x1e8>)
 8010650:	6818      	ldr	r0, [r3, #0]
 8010652:	4b27      	ldr	r3, [pc, #156]	; (80106f0 <dhcp_select+0x1ec>)
 8010654:	9301      	str	r3, [sp, #4]
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	9300      	str	r3, [sp, #0]
 801065a:	2343      	movs	r3, #67	; 0x43
 801065c:	4a25      	ldr	r2, [pc, #148]	; (80106f4 <dhcp_select+0x1f0>)
 801065e:	6979      	ldr	r1, [r7, #20]
 8010660:	f00b fede 	bl	801c420 <udp_sendto_if_src>
 8010664:	4603      	mov	r3, r0
 8010666:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010668:	6978      	ldr	r0, [r7, #20]
 801066a:	f005 fc95 	bl	8015f98 <pbuf_free>
 801066e:	e001      	b.n	8010674 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010670:	23ff      	movs	r3, #255	; 0xff
 8010672:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010674:	69bb      	ldr	r3, [r7, #24]
 8010676:	799b      	ldrb	r3, [r3, #6]
 8010678:	2bff      	cmp	r3, #255	; 0xff
 801067a:	d005      	beq.n	8010688 <dhcp_select+0x184>
    dhcp->tries++;
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	799b      	ldrb	r3, [r3, #6]
 8010680:	3301      	adds	r3, #1
 8010682:	b2da      	uxtb	r2, r3
 8010684:	69bb      	ldr	r3, [r7, #24]
 8010686:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010688:	69bb      	ldr	r3, [r7, #24]
 801068a:	799b      	ldrb	r3, [r3, #6]
 801068c:	2b05      	cmp	r3, #5
 801068e:	d80d      	bhi.n	80106ac <dhcp_select+0x1a8>
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	799b      	ldrb	r3, [r3, #6]
 8010694:	461a      	mov	r2, r3
 8010696:	2301      	movs	r3, #1
 8010698:	4093      	lsls	r3, r2
 801069a:	b29b      	uxth	r3, r3
 801069c:	461a      	mov	r2, r3
 801069e:	0152      	lsls	r2, r2, #5
 80106a0:	1ad2      	subs	r2, r2, r3
 80106a2:	0092      	lsls	r2, r2, #2
 80106a4:	4413      	add	r3, r2
 80106a6:	00db      	lsls	r3, r3, #3
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	e001      	b.n	80106b0 <dhcp_select+0x1ac>
 80106ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80106b0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80106b2:	89fb      	ldrh	r3, [r7, #14]
 80106b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80106b8:	4a0f      	ldr	r2, [pc, #60]	; (80106f8 <dhcp_select+0x1f4>)
 80106ba:	fb82 1203 	smull	r1, r2, r2, r3
 80106be:	1152      	asrs	r2, r2, #5
 80106c0:	17db      	asrs	r3, r3, #31
 80106c2:	1ad3      	subs	r3, r2, r3
 80106c4:	b29a      	uxth	r2, r3
 80106c6:	69bb      	ldr	r3, [r7, #24]
 80106c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80106ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3720      	adds	r7, #32
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bdb0      	pop	{r4, r5, r7, pc}
 80106d6:	bf00      	nop
 80106d8:	0801f91c 	.word	0x0801f91c
 80106dc:	0801f9e4 	.word	0x0801f9e4
 80106e0:	0801f998 	.word	0x0801f998
 80106e4:	0801fa00 	.word	0x0801fa00
 80106e8:	20000028 	.word	0x20000028
 80106ec:	200075cc 	.word	0x200075cc
 80106f0:	080229ac 	.word	0x080229ac
 80106f4:	080229b0 	.word	0x080229b0
 80106f8:	10624dd3 	.word	0x10624dd3

080106fc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8010702:	4b27      	ldr	r3, [pc, #156]	; (80107a0 <dhcp_coarse_tmr+0xa4>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	607b      	str	r3, [r7, #4]
 8010708:	e042      	b.n	8010790 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801070e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d039      	beq.n	801078a <dhcp_coarse_tmr+0x8e>
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	795b      	ldrb	r3, [r3, #5]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d035      	beq.n	801078a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	8a9b      	ldrh	r3, [r3, #20]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d012      	beq.n	801074c <dhcp_coarse_tmr+0x50>
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	8a5b      	ldrh	r3, [r3, #18]
 801072a:	3301      	adds	r3, #1
 801072c:	b29a      	uxth	r2, r3
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	825a      	strh	r2, [r3, #18]
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	8a5a      	ldrh	r2, [r3, #18]
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	8a9b      	ldrh	r3, [r3, #20]
 801073a:	429a      	cmp	r2, r3
 801073c:	d106      	bne.n	801074c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 fe46 	bl	80113d0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f000 f96b 	bl	8010a20 <dhcp_start>
 801074a:	e01e      	b.n	801078a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	8a1b      	ldrh	r3, [r3, #16]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d00b      	beq.n	801076c <dhcp_coarse_tmr+0x70>
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	8a1b      	ldrh	r3, [r3, #16]
 8010758:	1e5a      	subs	r2, r3, #1
 801075a:	b291      	uxth	r1, r2
 801075c:	683a      	ldr	r2, [r7, #0]
 801075e:	8211      	strh	r1, [r2, #16]
 8010760:	2b01      	cmp	r3, #1
 8010762:	d103      	bne.n	801076c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f000 f8c7 	bl	80108f8 <dhcp_t2_timeout>
 801076a:	e00e      	b.n	801078a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	89db      	ldrh	r3, [r3, #14]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d00a      	beq.n	801078a <dhcp_coarse_tmr+0x8e>
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	89db      	ldrh	r3, [r3, #14]
 8010778:	1e5a      	subs	r2, r3, #1
 801077a:	b291      	uxth	r1, r2
 801077c:	683a      	ldr	r2, [r7, #0]
 801077e:	81d1      	strh	r1, [r2, #14]
 8010780:	2b01      	cmp	r3, #1
 8010782:	d102      	bne.n	801078a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f000 f888 	bl	801089a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	607b      	str	r3, [r7, #4]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d1b9      	bne.n	801070a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8010796:	bf00      	nop
 8010798:	3708      	adds	r7, #8
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	2000ba4c 	.word	0x2000ba4c

080107a4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80107aa:	4b16      	ldr	r3, [pc, #88]	; (8010804 <dhcp_fine_tmr+0x60>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	607b      	str	r3, [r7, #4]
 80107b0:	e020      	b.n	80107f4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d017      	beq.n	80107ee <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	891b      	ldrh	r3, [r3, #8]
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d906      	bls.n	80107d4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	891b      	ldrh	r3, [r3, #8]
 80107ca:	3b01      	subs	r3, #1
 80107cc:	b29a      	uxth	r2, r3
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	811a      	strh	r2, [r3, #8]
 80107d2:	e00c      	b.n	80107ee <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	891b      	ldrh	r3, [r3, #8]
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d108      	bne.n	80107ee <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	891b      	ldrh	r3, [r3, #8]
 80107e0:	3b01      	subs	r3, #1
 80107e2:	b29a      	uxth	r2, r3
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f000 f80d 	bl	8010808 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	607b      	str	r3, [r7, #4]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d1db      	bne.n	80107b2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80107fa:	bf00      	nop
 80107fc:	3708      	adds	r7, #8
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	2000ba4c 	.word	0x2000ba4c

08010808 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b084      	sub	sp, #16
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010814:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	795b      	ldrb	r3, [r3, #5]
 801081a:	2b0c      	cmp	r3, #12
 801081c:	d003      	beq.n	8010826 <dhcp_timeout+0x1e>
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	795b      	ldrb	r3, [r3, #5]
 8010822:	2b06      	cmp	r3, #6
 8010824:	d103      	bne.n	801082e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f000 fa68 	bl	8010cfc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801082c:	e031      	b.n	8010892 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	795b      	ldrb	r3, [r3, #5]
 8010832:	2b01      	cmp	r3, #1
 8010834:	d10e      	bne.n	8010854 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	799b      	ldrb	r3, [r3, #6]
 801083a:	2b05      	cmp	r3, #5
 801083c:	d803      	bhi.n	8010846 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7ff fe60 	bl	8010504 <dhcp_select>
}
 8010844:	e025      	b.n	8010892 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f000 fdc2 	bl	80113d0 <dhcp_release_and_stop>
      dhcp_start(netif);
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f000 f8e7 	bl	8010a20 <dhcp_start>
}
 8010852:	e01e      	b.n	8010892 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	795b      	ldrb	r3, [r3, #5]
 8010858:	2b08      	cmp	r3, #8
 801085a:	d10b      	bne.n	8010874 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	799b      	ldrb	r3, [r3, #6]
 8010860:	2b01      	cmp	r3, #1
 8010862:	d803      	bhi.n	801086c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f7ff fdf3 	bl	8010450 <dhcp_check>
}
 801086a:	e012      	b.n	8010892 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f000 fae7 	bl	8010e40 <dhcp_bind>
}
 8010872:	e00e      	b.n	8010892 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	795b      	ldrb	r3, [r3, #5]
 8010878:	2b03      	cmp	r3, #3
 801087a:	d10a      	bne.n	8010892 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	799b      	ldrb	r3, [r3, #6]
 8010880:	2b01      	cmp	r3, #1
 8010882:	d803      	bhi.n	801088c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f000 fced 	bl	8011264 <dhcp_reboot>
}
 801088a:	e002      	b.n	8010892 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f000 fa35 	bl	8010cfc <dhcp_discover>
}
 8010892:	bf00      	nop
 8010894:	3710      	adds	r7, #16
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}

0801089a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801089a:	b580      	push	{r7, lr}
 801089c:	b084      	sub	sp, #16
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108a6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	795b      	ldrb	r3, [r3, #5]
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d007      	beq.n	80108c0 <dhcp_t1_timeout+0x26>
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	795b      	ldrb	r3, [r3, #5]
 80108b4:	2b0a      	cmp	r3, #10
 80108b6:	d003      	beq.n	80108c0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80108bc:	2b05      	cmp	r3, #5
 80108be:	d117      	bne.n	80108f0 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f000 fb97 	bl	8010ff4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	899b      	ldrh	r3, [r3, #12]
 80108ca:	461a      	mov	r2, r3
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	8a5b      	ldrh	r3, [r3, #18]
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	dd0c      	ble.n	80108f0 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	899b      	ldrh	r3, [r3, #12]
 80108da:	461a      	mov	r2, r3
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	8a5b      	ldrh	r3, [r3, #18]
 80108e0:	1ad3      	subs	r3, r2, r3
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	da00      	bge.n	80108e8 <dhcp_t1_timeout+0x4e>
 80108e6:	3301      	adds	r3, #1
 80108e8:	105b      	asrs	r3, r3, #1
 80108ea:	b29a      	uxth	r2, r3
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80108f0:	bf00      	nop
 80108f2:	3710      	adds	r7, #16
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010904:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	795b      	ldrb	r3, [r3, #5]
 801090a:	2b01      	cmp	r3, #1
 801090c:	d00b      	beq.n	8010926 <dhcp_t2_timeout+0x2e>
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	795b      	ldrb	r3, [r3, #5]
 8010912:	2b0a      	cmp	r3, #10
 8010914:	d007      	beq.n	8010926 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801091a:	2b05      	cmp	r3, #5
 801091c:	d003      	beq.n	8010926 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	795b      	ldrb	r3, [r3, #5]
 8010922:	2b04      	cmp	r3, #4
 8010924:	d117      	bne.n	8010956 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f000 fc00 	bl	801112c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	8a9b      	ldrh	r3, [r3, #20]
 8010930:	461a      	mov	r2, r3
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	8a5b      	ldrh	r3, [r3, #18]
 8010936:	1ad3      	subs	r3, r2, r3
 8010938:	2b01      	cmp	r3, #1
 801093a:	dd0c      	ble.n	8010956 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	8a9b      	ldrh	r3, [r3, #20]
 8010940:	461a      	mov	r2, r3
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	8a5b      	ldrh	r3, [r3, #18]
 8010946:	1ad3      	subs	r3, r2, r3
 8010948:	2b00      	cmp	r3, #0
 801094a:	da00      	bge.n	801094e <dhcp_t2_timeout+0x56>
 801094c:	3301      	adds	r3, #1
 801094e:	105b      	asrs	r3, r3, #1
 8010950:	b29a      	uxth	r2, r3
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8010956:	bf00      	nop
 8010958:	3710      	adds	r7, #16
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
	...

08010960 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801096e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	2200      	movs	r2, #0
 8010974:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	2200      	movs	r2, #0
 801097a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801097c:	4b26      	ldr	r3, [pc, #152]	; (8010a18 <dhcp_handle_ack+0xb8>)
 801097e:	78db      	ldrb	r3, [r3, #3]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d003      	beq.n	801098c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8010984:	4b25      	ldr	r3, [pc, #148]	; (8010a1c <dhcp_handle_ack+0xbc>)
 8010986:	68da      	ldr	r2, [r3, #12]
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801098c:	4b22      	ldr	r3, [pc, #136]	; (8010a18 <dhcp_handle_ack+0xb8>)
 801098e:	791b      	ldrb	r3, [r3, #4]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d004      	beq.n	801099e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8010994:	4b21      	ldr	r3, [pc, #132]	; (8010a1c <dhcp_handle_ack+0xbc>)
 8010996:	691a      	ldr	r2, [r3, #16]
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	62da      	str	r2, [r3, #44]	; 0x2c
 801099c:	e004      	b.n	80109a8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109a2:	085a      	lsrs	r2, r3, #1
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80109a8:	4b1b      	ldr	r3, [pc, #108]	; (8010a18 <dhcp_handle_ack+0xb8>)
 80109aa:	795b      	ldrb	r3, [r3, #5]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d004      	beq.n	80109ba <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80109b0:	4b1a      	ldr	r3, [pc, #104]	; (8010a1c <dhcp_handle_ack+0xbc>)
 80109b2:	695a      	ldr	r2, [r3, #20]
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	631a      	str	r2, [r3, #48]	; 0x30
 80109b8:	e007      	b.n	80109ca <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80109be:	4613      	mov	r3, r2
 80109c0:	00db      	lsls	r3, r3, #3
 80109c2:	1a9b      	subs	r3, r3, r2
 80109c4:	08da      	lsrs	r2, r3, #3
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	691a      	ldr	r2, [r3, #16]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80109d2:	4b11      	ldr	r3, [pc, #68]	; (8010a18 <dhcp_handle_ack+0xb8>)
 80109d4:	799b      	ldrb	r3, [r3, #6]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d00b      	beq.n	80109f2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80109da:	4b10      	ldr	r3, [pc, #64]	; (8010a1c <dhcp_handle_ack+0xbc>)
 80109dc:	699b      	ldr	r3, [r3, #24]
 80109de:	4618      	mov	r0, r3
 80109e0:	f7ff fc87 	bl	80102f2 <lwip_htonl>
 80109e4:	4602      	mov	r2, r0
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2201      	movs	r2, #1
 80109ee:	71da      	strb	r2, [r3, #7]
 80109f0:	e002      	b.n	80109f8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	2200      	movs	r2, #0
 80109f6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80109f8:	4b07      	ldr	r3, [pc, #28]	; (8010a18 <dhcp_handle_ack+0xb8>)
 80109fa:	79db      	ldrb	r3, [r3, #7]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d007      	beq.n	8010a10 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8010a00:	4b06      	ldr	r3, [pc, #24]	; (8010a1c <dhcp_handle_ack+0xbc>)
 8010a02:	69db      	ldr	r3, [r3, #28]
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7ff fc74 	bl	80102f2 <lwip_htonl>
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8010a10:	bf00      	nop
 8010a12:	3710      	adds	r7, #16
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	20008954 	.word	0x20008954
 8010a1c:	2000895c 	.word	0x2000895c

08010a20 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d109      	bne.n	8010a42 <dhcp_start+0x22>
 8010a2e:	4b37      	ldr	r3, [pc, #220]	; (8010b0c <dhcp_start+0xec>)
 8010a30:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010a34:	4936      	ldr	r1, [pc, #216]	; (8010b10 <dhcp_start+0xf0>)
 8010a36:	4837      	ldr	r0, [pc, #220]	; (8010b14 <dhcp_start+0xf4>)
 8010a38:	f00c fe5e 	bl	801d6f8 <iprintf>
 8010a3c:	f06f 030f 	mvn.w	r3, #15
 8010a40:	e060      	b.n	8010b04 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010a48:	f003 0301 	and.w	r3, r3, #1
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d109      	bne.n	8010a64 <dhcp_start+0x44>
 8010a50:	4b2e      	ldr	r3, [pc, #184]	; (8010b0c <dhcp_start+0xec>)
 8010a52:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8010a56:	4930      	ldr	r1, [pc, #192]	; (8010b18 <dhcp_start+0xf8>)
 8010a58:	482e      	ldr	r0, [pc, #184]	; (8010b14 <dhcp_start+0xf4>)
 8010a5a:	f00c fe4d 	bl	801d6f8 <iprintf>
 8010a5e:	f06f 030f 	mvn.w	r3, #15
 8010a62:	e04f      	b.n	8010b04 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a68:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a6e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8010a72:	d202      	bcs.n	8010a7a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8010a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a78:	e044      	b.n	8010b04 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d10d      	bne.n	8010a9c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8010a80:	2034      	movs	r0, #52	; 0x34
 8010a82:	f004 f9bf 	bl	8014e04 <mem_malloc>
 8010a86:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d102      	bne.n	8010a94 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8010a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a92:	e037      	b.n	8010b04 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	68fa      	ldr	r2, [r7, #12]
 8010a98:	625a      	str	r2, [r3, #36]	; 0x24
 8010a9a:	e005      	b.n	8010aa8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	791b      	ldrb	r3, [r3, #4]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d001      	beq.n	8010aa8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010aa4:	f7ff fc90 	bl	80103c8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8010aa8:	2234      	movs	r2, #52	; 0x34
 8010aaa:	2100      	movs	r1, #0
 8010aac:	68f8      	ldr	r0, [r7, #12]
 8010aae:	f00c f9e0 	bl	801ce72 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8010ab2:	f7ff fc37 	bl	8010324 <dhcp_inc_pcb_refcount>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d002      	beq.n	8010ac2 <dhcp_start+0xa2>
    return ERR_MEM;
 8010abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ac0:	e020      	b.n	8010b04 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010ace:	f003 0304 	and.w	r3, r3, #4
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d105      	bne.n	8010ae2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8010ad6:	2102      	movs	r1, #2
 8010ad8:	68f8      	ldr	r0, [r7, #12]
 8010ada:	f000 fd13 	bl	8011504 <dhcp_set_state>
    return ERR_OK;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	e010      	b.n	8010b04 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 f90a 	bl	8010cfc <dhcp_discover>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8010aec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d005      	beq.n	8010b00 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f000 fc6b 	bl	80113d0 <dhcp_release_and_stop>
    return ERR_MEM;
 8010afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010afe:	e001      	b.n	8010b04 <dhcp_start+0xe4>
  }
  return result;
 8010b00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	3710      	adds	r7, #16
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}
 8010b0c:	0801f91c 	.word	0x0801f91c
 8010b10:	0801fa1c 	.word	0x0801fa1c
 8010b14:	0801f998 	.word	0x0801f998
 8010b18:	0801fa60 	.word	0x0801fa60

08010b1c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b084      	sub	sp, #16
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b28:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d037      	beq.n	8010ba0 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	795b      	ldrb	r3, [r3, #5]
 8010b34:	2b0a      	cmp	r3, #10
 8010b36:	d820      	bhi.n	8010b7a <dhcp_network_changed+0x5e>
 8010b38:	a201      	add	r2, pc, #4	; (adr r2, 8010b40 <dhcp_network_changed+0x24>)
 8010b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b3e:	bf00      	nop
 8010b40:	08010ba5 	.word	0x08010ba5
 8010b44:	08010b7b 	.word	0x08010b7b
 8010b48:	08010b7b 	.word	0x08010b7b
 8010b4c:	08010b6d 	.word	0x08010b6d
 8010b50:	08010b6d 	.word	0x08010b6d
 8010b54:	08010b6d 	.word	0x08010b6d
 8010b58:	08010b7b 	.word	0x08010b7b
 8010b5c:	08010b7b 	.word	0x08010b7b
 8010b60:	08010b7b 	.word	0x08010b7b
 8010b64:	08010b7b 	.word	0x08010b7b
 8010b68:	08010b6d 	.word	0x08010b6d
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f000 fb76 	bl	8011264 <dhcp_reboot>
      break;
 8010b78:	e015      	b.n	8010ba6 <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	795b      	ldrb	r3, [r3, #5]
 8010b7e:	2b0c      	cmp	r3, #12
 8010b80:	d906      	bls.n	8010b90 <dhcp_network_changed+0x74>
 8010b82:	4b0a      	ldr	r3, [pc, #40]	; (8010bac <dhcp_network_changed+0x90>)
 8010b84:	f240 326d 	movw	r2, #877	; 0x36d
 8010b88:	4909      	ldr	r1, [pc, #36]	; (8010bb0 <dhcp_network_changed+0x94>)
 8010b8a:	480a      	ldr	r0, [pc, #40]	; (8010bb4 <dhcp_network_changed+0x98>)
 8010b8c:	f00c fdb4 	bl	801d6f8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2200      	movs	r2, #0
 8010b94:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f000 f8b0 	bl	8010cfc <dhcp_discover>
      break;
 8010b9c:	bf00      	nop
 8010b9e:	e002      	b.n	8010ba6 <dhcp_network_changed+0x8a>
    return;
 8010ba0:	bf00      	nop
 8010ba2:	e000      	b.n	8010ba6 <dhcp_network_changed+0x8a>
      break;
 8010ba4:	bf00      	nop
  }
}
 8010ba6:	3710      	adds	r7, #16
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	0801f91c 	.word	0x0801f91c
 8010bb0:	0801fa84 	.word	0x0801fa84
 8010bb4:	0801f998 	.word	0x0801f998

08010bb8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d107      	bne.n	8010bd8 <dhcp_arp_reply+0x20>
 8010bc8:	4b0e      	ldr	r3, [pc, #56]	; (8010c04 <dhcp_arp_reply+0x4c>)
 8010bca:	f240 328b 	movw	r2, #907	; 0x38b
 8010bce:	490e      	ldr	r1, [pc, #56]	; (8010c08 <dhcp_arp_reply+0x50>)
 8010bd0:	480e      	ldr	r0, [pc, #56]	; (8010c0c <dhcp_arp_reply+0x54>)
 8010bd2:	f00c fd91 	bl	801d6f8 <iprintf>
 8010bd6:	e012      	b.n	8010bfe <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bdc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d00c      	beq.n	8010bfe <dhcp_arp_reply+0x46>
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	795b      	ldrb	r3, [r3, #5]
 8010be8:	2b08      	cmp	r3, #8
 8010bea:	d108      	bne.n	8010bfe <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	69db      	ldr	r3, [r3, #28]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d102      	bne.n	8010bfe <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f000 f809 	bl	8010c10 <dhcp_decline>
    }
  }
}
 8010bfe:	3710      	adds	r7, #16
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	0801f91c 	.word	0x0801f91c
 8010c08:	0801fa1c 	.word	0x0801fa1c
 8010c0c:	0801f998 	.word	0x0801f998

08010c10 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8010c10:	b5b0      	push	{r4, r5, r7, lr}
 8010c12:	b08a      	sub	sp, #40	; 0x28
 8010c14:	af02      	add	r7, sp, #8
 8010c16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c1c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010c1e:	210c      	movs	r1, #12
 8010c20:	69b8      	ldr	r0, [r7, #24]
 8010c22:	f000 fc6f 	bl	8011504 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8010c26:	f107 030c 	add.w	r3, r7, #12
 8010c2a:	2204      	movs	r2, #4
 8010c2c:	69b9      	ldr	r1, [r7, #24]
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f001 f8f2 	bl	8011e18 <dhcp_create_msg>
 8010c34:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d035      	beq.n	8010ca8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010c42:	89b8      	ldrh	r0, [r7, #12]
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010c4a:	2304      	movs	r3, #4
 8010c4c:	2232      	movs	r2, #50	; 0x32
 8010c4e:	f000 fc73 	bl	8011538 <dhcp_option>
 8010c52:	4603      	mov	r3, r0
 8010c54:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010c56:	89bc      	ldrh	r4, [r7, #12]
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010c5e:	69bb      	ldr	r3, [r7, #24]
 8010c60:	69db      	ldr	r3, [r3, #28]
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7ff fb45 	bl	80102f2 <lwip_htonl>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	4629      	mov	r1, r5
 8010c6e:	4620      	mov	r0, r4
 8010c70:	f000 fcee 	bl	8011650 <dhcp_option_long>
 8010c74:	4603      	mov	r3, r0
 8010c76:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010c78:	89b8      	ldrh	r0, [r7, #12]
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	33f0      	adds	r3, #240	; 0xf0
 8010c7e:	697a      	ldr	r2, [r7, #20]
 8010c80:	4619      	mov	r1, r3
 8010c82:	f001 f99f 	bl	8011fc4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010c86:	4b19      	ldr	r3, [pc, #100]	; (8010cec <dhcp_decline+0xdc>)
 8010c88:	6818      	ldr	r0, [r3, #0]
 8010c8a:	4b19      	ldr	r3, [pc, #100]	; (8010cf0 <dhcp_decline+0xe0>)
 8010c8c:	9301      	str	r3, [sp, #4]
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	9300      	str	r3, [sp, #0]
 8010c92:	2343      	movs	r3, #67	; 0x43
 8010c94:	4a17      	ldr	r2, [pc, #92]	; (8010cf4 <dhcp_decline+0xe4>)
 8010c96:	6979      	ldr	r1, [r7, #20]
 8010c98:	f00b fbc2 	bl	801c420 <udp_sendto_if_src>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010ca0:	6978      	ldr	r0, [r7, #20]
 8010ca2:	f005 f979 	bl	8015f98 <pbuf_free>
 8010ca6:	e001      	b.n	8010cac <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010ca8:	23ff      	movs	r3, #255	; 0xff
 8010caa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010cac:	69bb      	ldr	r3, [r7, #24]
 8010cae:	799b      	ldrb	r3, [r3, #6]
 8010cb0:	2bff      	cmp	r3, #255	; 0xff
 8010cb2:	d005      	beq.n	8010cc0 <dhcp_decline+0xb0>
    dhcp->tries++;
 8010cb4:	69bb      	ldr	r3, [r7, #24]
 8010cb6:	799b      	ldrb	r3, [r3, #6]
 8010cb8:	3301      	adds	r3, #1
 8010cba:	b2da      	uxtb	r2, r3
 8010cbc:	69bb      	ldr	r3, [r7, #24]
 8010cbe:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8010cc0:	f242 7310 	movw	r3, #10000	; 0x2710
 8010cc4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010cc6:	89fb      	ldrh	r3, [r7, #14]
 8010cc8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010ccc:	4a0a      	ldr	r2, [pc, #40]	; (8010cf8 <dhcp_decline+0xe8>)
 8010cce:	fb82 1203 	smull	r1, r2, r2, r3
 8010cd2:	1152      	asrs	r2, r2, #5
 8010cd4:	17db      	asrs	r3, r3, #31
 8010cd6:	1ad3      	subs	r3, r2, r3
 8010cd8:	b29a      	uxth	r2, r3
 8010cda:	69bb      	ldr	r3, [r7, #24]
 8010cdc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010cde:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3720      	adds	r7, #32
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8010cea:	bf00      	nop
 8010cec:	200075cc 	.word	0x200075cc
 8010cf0:	080229ac 	.word	0x080229ac
 8010cf4:	080229b0 	.word	0x080229b0
 8010cf8:	10624dd3 	.word	0x10624dd3

08010cfc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b08a      	sub	sp, #40	; 0x28
 8010d00:	af02      	add	r7, sp, #8
 8010d02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d08:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	2200      	movs	r2, #0
 8010d12:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8010d14:	2106      	movs	r1, #6
 8010d16:	69b8      	ldr	r0, [r7, #24]
 8010d18:	f000 fbf4 	bl	8011504 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8010d1c:	f107 0308 	add.w	r3, r7, #8
 8010d20:	2201      	movs	r2, #1
 8010d22:	69b9      	ldr	r1, [r7, #24]
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f001 f877 	bl	8011e18 <dhcp_create_msg>
 8010d2a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8010d2c:	693b      	ldr	r3, [r7, #16]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d04b      	beq.n	8010dca <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010d38:	8938      	ldrh	r0, [r7, #8]
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d40:	2302      	movs	r3, #2
 8010d42:	2239      	movs	r2, #57	; 0x39
 8010d44:	f000 fbf8 	bl	8011538 <dhcp_option>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010d4c:	8938      	ldrh	r0, [r7, #8]
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d58:	461a      	mov	r2, r3
 8010d5a:	f000 fc47 	bl	80115ec <dhcp_option_short>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010d62:	8938      	ldrh	r0, [r7, #8]
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d6a:	2303      	movs	r3, #3
 8010d6c:	2237      	movs	r2, #55	; 0x37
 8010d6e:	f000 fbe3 	bl	8011538 <dhcp_option>
 8010d72:	4603      	mov	r3, r0
 8010d74:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010d76:	2300      	movs	r3, #0
 8010d78:	77fb      	strb	r3, [r7, #31]
 8010d7a:	e00e      	b.n	8010d9a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010d7c:	8938      	ldrh	r0, [r7, #8]
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d84:	7ffb      	ldrb	r3, [r7, #31]
 8010d86:	4a29      	ldr	r2, [pc, #164]	; (8010e2c <dhcp_discover+0x130>)
 8010d88:	5cd3      	ldrb	r3, [r2, r3]
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	f000 fc08 	bl	80115a0 <dhcp_option_byte>
 8010d90:	4603      	mov	r3, r0
 8010d92:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010d94:	7ffb      	ldrb	r3, [r7, #31]
 8010d96:	3301      	adds	r3, #1
 8010d98:	77fb      	strb	r3, [r7, #31]
 8010d9a:	7ffb      	ldrb	r3, [r7, #31]
 8010d9c:	2b02      	cmp	r3, #2
 8010d9e:	d9ed      	bls.n	8010d7c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010da0:	8938      	ldrh	r0, [r7, #8]
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	33f0      	adds	r3, #240	; 0xf0
 8010da6:	693a      	ldr	r2, [r7, #16]
 8010da8:	4619      	mov	r1, r3
 8010daa:	f001 f90b 	bl	8011fc4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010dae:	4b20      	ldr	r3, [pc, #128]	; (8010e30 <dhcp_discover+0x134>)
 8010db0:	6818      	ldr	r0, [r3, #0]
 8010db2:	4b20      	ldr	r3, [pc, #128]	; (8010e34 <dhcp_discover+0x138>)
 8010db4:	9301      	str	r3, [sp, #4]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	9300      	str	r3, [sp, #0]
 8010dba:	2343      	movs	r3, #67	; 0x43
 8010dbc:	4a1e      	ldr	r2, [pc, #120]	; (8010e38 <dhcp_discover+0x13c>)
 8010dbe:	6939      	ldr	r1, [r7, #16]
 8010dc0:	f00b fb2e 	bl	801c420 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8010dc4:	6938      	ldr	r0, [r7, #16]
 8010dc6:	f005 f8e7 	bl	8015f98 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010dca:	69bb      	ldr	r3, [r7, #24]
 8010dcc:	799b      	ldrb	r3, [r3, #6]
 8010dce:	2bff      	cmp	r3, #255	; 0xff
 8010dd0:	d005      	beq.n	8010dde <dhcp_discover+0xe2>
    dhcp->tries++;
 8010dd2:	69bb      	ldr	r3, [r7, #24]
 8010dd4:	799b      	ldrb	r3, [r3, #6]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	b2da      	uxtb	r2, r3
 8010dda:	69bb      	ldr	r3, [r7, #24]
 8010ddc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010dde:	69bb      	ldr	r3, [r7, #24]
 8010de0:	799b      	ldrb	r3, [r3, #6]
 8010de2:	2b05      	cmp	r3, #5
 8010de4:	d80d      	bhi.n	8010e02 <dhcp_discover+0x106>
 8010de6:	69bb      	ldr	r3, [r7, #24]
 8010de8:	799b      	ldrb	r3, [r3, #6]
 8010dea:	461a      	mov	r2, r3
 8010dec:	2301      	movs	r3, #1
 8010dee:	4093      	lsls	r3, r2
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	461a      	mov	r2, r3
 8010df4:	0152      	lsls	r2, r2, #5
 8010df6:	1ad2      	subs	r2, r2, r3
 8010df8:	0092      	lsls	r2, r2, #2
 8010dfa:	4413      	add	r3, r2
 8010dfc:	00db      	lsls	r3, r3, #3
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	e001      	b.n	8010e06 <dhcp_discover+0x10a>
 8010e02:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010e06:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010e08:	897b      	ldrh	r3, [r7, #10]
 8010e0a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010e0e:	4a0b      	ldr	r2, [pc, #44]	; (8010e3c <dhcp_discover+0x140>)
 8010e10:	fb82 1203 	smull	r1, r2, r2, r3
 8010e14:	1152      	asrs	r2, r2, #5
 8010e16:	17db      	asrs	r3, r3, #31
 8010e18:	1ad3      	subs	r3, r2, r3
 8010e1a:	b29a      	uxth	r2, r3
 8010e1c:	69bb      	ldr	r3, [r7, #24]
 8010e1e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010e20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3720      	adds	r7, #32
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	20000028 	.word	0x20000028
 8010e30:	200075cc 	.word	0x200075cc
 8010e34:	080229ac 	.word	0x080229ac
 8010e38:	080229b0 	.word	0x080229b0
 8010e3c:	10624dd3 	.word	0x10624dd3

08010e40 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b088      	sub	sp, #32
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d107      	bne.n	8010e5e <dhcp_bind+0x1e>
 8010e4e:	4b64      	ldr	r3, [pc, #400]	; (8010fe0 <dhcp_bind+0x1a0>)
 8010e50:	f240 4215 	movw	r2, #1045	; 0x415
 8010e54:	4963      	ldr	r1, [pc, #396]	; (8010fe4 <dhcp_bind+0x1a4>)
 8010e56:	4864      	ldr	r0, [pc, #400]	; (8010fe8 <dhcp_bind+0x1a8>)
 8010e58:	f00c fc4e 	bl	801d6f8 <iprintf>
 8010e5c:	e0bc      	b.n	8010fd8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e62:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8010e64:	69bb      	ldr	r3, [r7, #24]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d107      	bne.n	8010e7a <dhcp_bind+0x3a>
 8010e6a:	4b5d      	ldr	r3, [pc, #372]	; (8010fe0 <dhcp_bind+0x1a0>)
 8010e6c:	f240 4217 	movw	r2, #1047	; 0x417
 8010e70:	495e      	ldr	r1, [pc, #376]	; (8010fec <dhcp_bind+0x1ac>)
 8010e72:	485d      	ldr	r0, [pc, #372]	; (8010fe8 <dhcp_bind+0x1a8>)
 8010e74:	f00c fc40 	bl	801d6f8 <iprintf>
 8010e78:	e0ae      	b.n	8010fd8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8010e80:	69bb      	ldr	r3, [r7, #24]
 8010e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e88:	d019      	beq.n	8010ebe <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010e8a:	69bb      	ldr	r3, [r7, #24]
 8010e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e8e:	331e      	adds	r3, #30
 8010e90:	4a57      	ldr	r2, [pc, #348]	; (8010ff0 <dhcp_bind+0x1b0>)
 8010e92:	fba2 2303 	umull	r2, r3, r2, r3
 8010e96:	095b      	lsrs	r3, r3, #5
 8010e98:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ea0:	d302      	bcc.n	8010ea8 <dhcp_bind+0x68>
      timeout = 0xffff;
 8010ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ea6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8010ea8:	69fb      	ldr	r3, [r7, #28]
 8010eaa:	b29a      	uxth	r2, r3
 8010eac:	69bb      	ldr	r3, [r7, #24]
 8010eae:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	8a9b      	ldrh	r3, [r3, #20]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d102      	bne.n	8010ebe <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8010eb8:	69bb      	ldr	r3, [r7, #24]
 8010eba:	2201      	movs	r2, #1
 8010ebc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8010ebe:	69bb      	ldr	r3, [r7, #24]
 8010ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ec6:	d01d      	beq.n	8010f04 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010ec8:	69bb      	ldr	r3, [r7, #24]
 8010eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ecc:	331e      	adds	r3, #30
 8010ece:	4a48      	ldr	r2, [pc, #288]	; (8010ff0 <dhcp_bind+0x1b0>)
 8010ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8010ed4:	095b      	lsrs	r3, r3, #5
 8010ed6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ede:	d302      	bcc.n	8010ee6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8010ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ee4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8010ee6:	69fb      	ldr	r3, [r7, #28]
 8010ee8:	b29a      	uxth	r2, r3
 8010eea:	69bb      	ldr	r3, [r7, #24]
 8010eec:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8010eee:	69bb      	ldr	r3, [r7, #24]
 8010ef0:	895b      	ldrh	r3, [r3, #10]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d102      	bne.n	8010efc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8010ef6:	69bb      	ldr	r3, [r7, #24]
 8010ef8:	2201      	movs	r2, #1
 8010efa:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8010efc:	69bb      	ldr	r3, [r7, #24]
 8010efe:	895a      	ldrh	r2, [r3, #10]
 8010f00:	69bb      	ldr	r3, [r7, #24]
 8010f02:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8010f04:	69bb      	ldr	r3, [r7, #24]
 8010f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f0c:	d01d      	beq.n	8010f4a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010f0e:	69bb      	ldr	r3, [r7, #24]
 8010f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f12:	331e      	adds	r3, #30
 8010f14:	4a36      	ldr	r2, [pc, #216]	; (8010ff0 <dhcp_bind+0x1b0>)
 8010f16:	fba2 2303 	umull	r2, r3, r2, r3
 8010f1a:	095b      	lsrs	r3, r3, #5
 8010f1c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f24:	d302      	bcc.n	8010f2c <dhcp_bind+0xec>
      timeout = 0xffff;
 8010f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f2a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8010f2c:	69fb      	ldr	r3, [r7, #28]
 8010f2e:	b29a      	uxth	r2, r3
 8010f30:	69bb      	ldr	r3, [r7, #24]
 8010f32:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	899b      	ldrh	r3, [r3, #12]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d102      	bne.n	8010f42 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8010f3c:	69bb      	ldr	r3, [r7, #24]
 8010f3e:	2201      	movs	r2, #1
 8010f40:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8010f42:	69bb      	ldr	r3, [r7, #24]
 8010f44:	899a      	ldrh	r2, [r3, #12]
 8010f46:	69bb      	ldr	r3, [r7, #24]
 8010f48:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8010f4a:	69bb      	ldr	r3, [r7, #24]
 8010f4c:	895a      	ldrh	r2, [r3, #10]
 8010f4e:	69bb      	ldr	r3, [r7, #24]
 8010f50:	899b      	ldrh	r3, [r3, #12]
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d306      	bcc.n	8010f64 <dhcp_bind+0x124>
 8010f56:	69bb      	ldr	r3, [r7, #24]
 8010f58:	899b      	ldrh	r3, [r3, #12]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d002      	beq.n	8010f64 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8010f5e:	69bb      	ldr	r3, [r7, #24]
 8010f60:	2200      	movs	r2, #0
 8010f62:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8010f64:	69bb      	ldr	r3, [r7, #24]
 8010f66:	79db      	ldrb	r3, [r3, #7]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d003      	beq.n	8010f74 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	6a1b      	ldr	r3, [r3, #32]
 8010f70:	613b      	str	r3, [r7, #16]
 8010f72:	e014      	b.n	8010f9e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8010f74:	69bb      	ldr	r3, [r7, #24]
 8010f76:	331c      	adds	r3, #28
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8010f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	db02      	blt.n	8010f8a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8010f84:	23ff      	movs	r3, #255	; 0xff
 8010f86:	613b      	str	r3, [r7, #16]
 8010f88:	e009      	b.n	8010f9e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8010f8a:	7dfb      	ldrb	r3, [r7, #23]
 8010f8c:	2bbf      	cmp	r3, #191	; 0xbf
 8010f8e:	d903      	bls.n	8010f98 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8010f90:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010f94:	613b      	str	r3, [r7, #16]
 8010f96:	e002      	b.n	8010f9e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8010f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f9c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8010f9e:	69bb      	ldr	r3, [r7, #24]
 8010fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d108      	bne.n	8010fbc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8010faa:	69bb      	ldr	r3, [r7, #24]
 8010fac:	69da      	ldr	r2, [r3, #28]
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	4013      	ands	r3, r2
 8010fb2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010fba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8010fbc:	210a      	movs	r1, #10
 8010fbe:	69b8      	ldr	r0, [r7, #24]
 8010fc0:	f000 faa0 	bl	8011504 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8010fc4:	69bb      	ldr	r3, [r7, #24]
 8010fc6:	f103 011c 	add.w	r1, r3, #28
 8010fca:	f107 030c 	add.w	r3, r7, #12
 8010fce:	f107 0210 	add.w	r2, r7, #16
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f004 fad6 	bl	8015584 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8010fd8:	3720      	adds	r7, #32
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}
 8010fde:	bf00      	nop
 8010fe0:	0801f91c 	.word	0x0801f91c
 8010fe4:	0801fa98 	.word	0x0801fa98
 8010fe8:	0801f998 	.word	0x0801f998
 8010fec:	0801fab4 	.word	0x0801fab4
 8010ff0:	88888889 	.word	0x88888889

08010ff4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b08a      	sub	sp, #40	; 0x28
 8010ff8:	af02      	add	r7, sp, #8
 8010ffa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011000:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8011002:	2105      	movs	r1, #5
 8011004:	69b8      	ldr	r0, [r7, #24]
 8011006:	f000 fa7d 	bl	8011504 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801100a:	f107 030c 	add.w	r3, r7, #12
 801100e:	2203      	movs	r2, #3
 8011010:	69b9      	ldr	r1, [r7, #24]
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 ff00 	bl	8011e18 <dhcp_create_msg>
 8011018:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d04e      	beq.n	80110be <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011026:	89b8      	ldrh	r0, [r7, #12]
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801102e:	2302      	movs	r3, #2
 8011030:	2239      	movs	r2, #57	; 0x39
 8011032:	f000 fa81 	bl	8011538 <dhcp_option>
 8011036:	4603      	mov	r3, r0
 8011038:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801103a:	89b8      	ldrh	r0, [r7, #12]
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011046:	461a      	mov	r2, r3
 8011048:	f000 fad0 	bl	80115ec <dhcp_option_short>
 801104c:	4603      	mov	r3, r0
 801104e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011050:	89b8      	ldrh	r0, [r7, #12]
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011058:	2303      	movs	r3, #3
 801105a:	2237      	movs	r2, #55	; 0x37
 801105c:	f000 fa6c 	bl	8011538 <dhcp_option>
 8011060:	4603      	mov	r3, r0
 8011062:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011064:	2300      	movs	r3, #0
 8011066:	77bb      	strb	r3, [r7, #30]
 8011068:	e00e      	b.n	8011088 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801106a:	89b8      	ldrh	r0, [r7, #12]
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011072:	7fbb      	ldrb	r3, [r7, #30]
 8011074:	4a2a      	ldr	r2, [pc, #168]	; (8011120 <dhcp_renew+0x12c>)
 8011076:	5cd3      	ldrb	r3, [r2, r3]
 8011078:	461a      	mov	r2, r3
 801107a:	f000 fa91 	bl	80115a0 <dhcp_option_byte>
 801107e:	4603      	mov	r3, r0
 8011080:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011082:	7fbb      	ldrb	r3, [r7, #30]
 8011084:	3301      	adds	r3, #1
 8011086:	77bb      	strb	r3, [r7, #30]
 8011088:	7fbb      	ldrb	r3, [r7, #30]
 801108a:	2b02      	cmp	r3, #2
 801108c:	d9ed      	bls.n	801106a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801108e:	89b8      	ldrh	r0, [r7, #12]
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	33f0      	adds	r3, #240	; 0xf0
 8011094:	697a      	ldr	r2, [r7, #20]
 8011096:	4619      	mov	r1, r3
 8011098:	f000 ff94 	bl	8011fc4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801109c:	4b21      	ldr	r3, [pc, #132]	; (8011124 <dhcp_renew+0x130>)
 801109e:	6818      	ldr	r0, [r3, #0]
 80110a0:	69bb      	ldr	r3, [r7, #24]
 80110a2:	f103 0218 	add.w	r2, r3, #24
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	2343      	movs	r3, #67	; 0x43
 80110ac:	6979      	ldr	r1, [r7, #20]
 80110ae:	f00b f943 	bl	801c338 <udp_sendto_if>
 80110b2:	4603      	mov	r3, r0
 80110b4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80110b6:	6978      	ldr	r0, [r7, #20]
 80110b8:	f004 ff6e 	bl	8015f98 <pbuf_free>
 80110bc:	e001      	b.n	80110c2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80110be:	23ff      	movs	r3, #255	; 0xff
 80110c0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	799b      	ldrb	r3, [r3, #6]
 80110c6:	2bff      	cmp	r3, #255	; 0xff
 80110c8:	d005      	beq.n	80110d6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80110ca:	69bb      	ldr	r3, [r7, #24]
 80110cc:	799b      	ldrb	r3, [r3, #6]
 80110ce:	3301      	adds	r3, #1
 80110d0:	b2da      	uxtb	r2, r3
 80110d2:	69bb      	ldr	r3, [r7, #24]
 80110d4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80110d6:	69bb      	ldr	r3, [r7, #24]
 80110d8:	799b      	ldrb	r3, [r3, #6]
 80110da:	2b09      	cmp	r3, #9
 80110dc:	d80a      	bhi.n	80110f4 <dhcp_renew+0x100>
 80110de:	69bb      	ldr	r3, [r7, #24]
 80110e0:	799b      	ldrb	r3, [r3, #6]
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	461a      	mov	r2, r3
 80110e6:	0152      	lsls	r2, r2, #5
 80110e8:	1ad2      	subs	r2, r2, r3
 80110ea:	0092      	lsls	r2, r2, #2
 80110ec:	4413      	add	r3, r2
 80110ee:	011b      	lsls	r3, r3, #4
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	e001      	b.n	80110f8 <dhcp_renew+0x104>
 80110f4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80110f8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80110fa:	89fb      	ldrh	r3, [r7, #14]
 80110fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011100:	4a09      	ldr	r2, [pc, #36]	; (8011128 <dhcp_renew+0x134>)
 8011102:	fb82 1203 	smull	r1, r2, r2, r3
 8011106:	1152      	asrs	r2, r2, #5
 8011108:	17db      	asrs	r3, r3, #31
 801110a:	1ad3      	subs	r3, r2, r3
 801110c:	b29a      	uxth	r2, r3
 801110e:	69bb      	ldr	r3, [r7, #24]
 8011110:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011112:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011116:	4618      	mov	r0, r3
 8011118:	3720      	adds	r7, #32
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	20000028 	.word	0x20000028
 8011124:	200075cc 	.word	0x200075cc
 8011128:	10624dd3 	.word	0x10624dd3

0801112c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b08a      	sub	sp, #40	; 0x28
 8011130:	af02      	add	r7, sp, #8
 8011132:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011138:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801113a:	2104      	movs	r1, #4
 801113c:	69b8      	ldr	r0, [r7, #24]
 801113e:	f000 f9e1 	bl	8011504 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011142:	f107 030c 	add.w	r3, r7, #12
 8011146:	2203      	movs	r2, #3
 8011148:	69b9      	ldr	r1, [r7, #24]
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f000 fe64 	bl	8011e18 <dhcp_create_msg>
 8011150:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d04c      	beq.n	80111f2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801115e:	89b8      	ldrh	r0, [r7, #12]
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011166:	2302      	movs	r3, #2
 8011168:	2239      	movs	r2, #57	; 0x39
 801116a:	f000 f9e5 	bl	8011538 <dhcp_option>
 801116e:	4603      	mov	r3, r0
 8011170:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011172:	89b8      	ldrh	r0, [r7, #12]
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801117e:	461a      	mov	r2, r3
 8011180:	f000 fa34 	bl	80115ec <dhcp_option_short>
 8011184:	4603      	mov	r3, r0
 8011186:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011188:	89b8      	ldrh	r0, [r7, #12]
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011190:	2303      	movs	r3, #3
 8011192:	2237      	movs	r2, #55	; 0x37
 8011194:	f000 f9d0 	bl	8011538 <dhcp_option>
 8011198:	4603      	mov	r3, r0
 801119a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801119c:	2300      	movs	r3, #0
 801119e:	77bb      	strb	r3, [r7, #30]
 80111a0:	e00e      	b.n	80111c0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80111a2:	89b8      	ldrh	r0, [r7, #12]
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80111aa:	7fbb      	ldrb	r3, [r7, #30]
 80111ac:	4a29      	ldr	r2, [pc, #164]	; (8011254 <dhcp_rebind+0x128>)
 80111ae:	5cd3      	ldrb	r3, [r2, r3]
 80111b0:	461a      	mov	r2, r3
 80111b2:	f000 f9f5 	bl	80115a0 <dhcp_option_byte>
 80111b6:	4603      	mov	r3, r0
 80111b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80111ba:	7fbb      	ldrb	r3, [r7, #30]
 80111bc:	3301      	adds	r3, #1
 80111be:	77bb      	strb	r3, [r7, #30]
 80111c0:	7fbb      	ldrb	r3, [r7, #30]
 80111c2:	2b02      	cmp	r3, #2
 80111c4:	d9ed      	bls.n	80111a2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80111c6:	89b8      	ldrh	r0, [r7, #12]
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	33f0      	adds	r3, #240	; 0xf0
 80111cc:	697a      	ldr	r2, [r7, #20]
 80111ce:	4619      	mov	r1, r3
 80111d0:	f000 fef8 	bl	8011fc4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80111d4:	4b20      	ldr	r3, [pc, #128]	; (8011258 <dhcp_rebind+0x12c>)
 80111d6:	6818      	ldr	r0, [r3, #0]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	9300      	str	r3, [sp, #0]
 80111dc:	2343      	movs	r3, #67	; 0x43
 80111de:	4a1f      	ldr	r2, [pc, #124]	; (801125c <dhcp_rebind+0x130>)
 80111e0:	6979      	ldr	r1, [r7, #20]
 80111e2:	f00b f8a9 	bl	801c338 <udp_sendto_if>
 80111e6:	4603      	mov	r3, r0
 80111e8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80111ea:	6978      	ldr	r0, [r7, #20]
 80111ec:	f004 fed4 	bl	8015f98 <pbuf_free>
 80111f0:	e001      	b.n	80111f6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80111f2:	23ff      	movs	r3, #255	; 0xff
 80111f4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80111f6:	69bb      	ldr	r3, [r7, #24]
 80111f8:	799b      	ldrb	r3, [r3, #6]
 80111fa:	2bff      	cmp	r3, #255	; 0xff
 80111fc:	d005      	beq.n	801120a <dhcp_rebind+0xde>
    dhcp->tries++;
 80111fe:	69bb      	ldr	r3, [r7, #24]
 8011200:	799b      	ldrb	r3, [r3, #6]
 8011202:	3301      	adds	r3, #1
 8011204:	b2da      	uxtb	r2, r3
 8011206:	69bb      	ldr	r3, [r7, #24]
 8011208:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801120a:	69bb      	ldr	r3, [r7, #24]
 801120c:	799b      	ldrb	r3, [r3, #6]
 801120e:	2b09      	cmp	r3, #9
 8011210:	d80a      	bhi.n	8011228 <dhcp_rebind+0xfc>
 8011212:	69bb      	ldr	r3, [r7, #24]
 8011214:	799b      	ldrb	r3, [r3, #6]
 8011216:	b29b      	uxth	r3, r3
 8011218:	461a      	mov	r2, r3
 801121a:	0152      	lsls	r2, r2, #5
 801121c:	1ad2      	subs	r2, r2, r3
 801121e:	0092      	lsls	r2, r2, #2
 8011220:	4413      	add	r3, r2
 8011222:	00db      	lsls	r3, r3, #3
 8011224:	b29b      	uxth	r3, r3
 8011226:	e001      	b.n	801122c <dhcp_rebind+0x100>
 8011228:	f242 7310 	movw	r3, #10000	; 0x2710
 801122c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801122e:	89fb      	ldrh	r3, [r7, #14]
 8011230:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011234:	4a0a      	ldr	r2, [pc, #40]	; (8011260 <dhcp_rebind+0x134>)
 8011236:	fb82 1203 	smull	r1, r2, r2, r3
 801123a:	1152      	asrs	r2, r2, #5
 801123c:	17db      	asrs	r3, r3, #31
 801123e:	1ad3      	subs	r3, r2, r3
 8011240:	b29a      	uxth	r2, r3
 8011242:	69bb      	ldr	r3, [r7, #24]
 8011244:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011246:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801124a:	4618      	mov	r0, r3
 801124c:	3720      	adds	r7, #32
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
 8011252:	bf00      	nop
 8011254:	20000028 	.word	0x20000028
 8011258:	200075cc 	.word	0x200075cc
 801125c:	080229b0 	.word	0x080229b0
 8011260:	10624dd3 	.word	0x10624dd3

08011264 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8011264:	b5b0      	push	{r4, r5, r7, lr}
 8011266:	b08a      	sub	sp, #40	; 0x28
 8011268:	af02      	add	r7, sp, #8
 801126a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011270:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8011272:	2103      	movs	r1, #3
 8011274:	69b8      	ldr	r0, [r7, #24]
 8011276:	f000 f945 	bl	8011504 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801127a:	f107 030c 	add.w	r3, r7, #12
 801127e:	2203      	movs	r2, #3
 8011280:	69b9      	ldr	r1, [r7, #24]
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f000 fdc8 	bl	8011e18 <dhcp_create_msg>
 8011288:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d066      	beq.n	801135e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011296:	89b8      	ldrh	r0, [r7, #12]
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801129e:	2302      	movs	r3, #2
 80112a0:	2239      	movs	r2, #57	; 0x39
 80112a2:	f000 f949 	bl	8011538 <dhcp_option>
 80112a6:	4603      	mov	r3, r0
 80112a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80112aa:	89b8      	ldrh	r0, [r7, #12]
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	33f0      	adds	r3, #240	; 0xf0
 80112b0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80112b4:	4619      	mov	r1, r3
 80112b6:	f000 f999 	bl	80115ec <dhcp_option_short>
 80112ba:	4603      	mov	r3, r0
 80112bc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80112be:	89b8      	ldrh	r0, [r7, #12]
 80112c0:	693b      	ldr	r3, [r7, #16]
 80112c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80112c6:	2304      	movs	r3, #4
 80112c8:	2232      	movs	r2, #50	; 0x32
 80112ca:	f000 f935 	bl	8011538 <dhcp_option>
 80112ce:	4603      	mov	r3, r0
 80112d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80112d2:	89bc      	ldrh	r4, [r7, #12]
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80112da:	69bb      	ldr	r3, [r7, #24]
 80112dc:	69db      	ldr	r3, [r3, #28]
 80112de:	4618      	mov	r0, r3
 80112e0:	f7ff f807 	bl	80102f2 <lwip_htonl>
 80112e4:	4603      	mov	r3, r0
 80112e6:	461a      	mov	r2, r3
 80112e8:	4629      	mov	r1, r5
 80112ea:	4620      	mov	r0, r4
 80112ec:	f000 f9b0 	bl	8011650 <dhcp_option_long>
 80112f0:	4603      	mov	r3, r0
 80112f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80112f4:	89b8      	ldrh	r0, [r7, #12]
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80112fc:	2303      	movs	r3, #3
 80112fe:	2237      	movs	r2, #55	; 0x37
 8011300:	f000 f91a 	bl	8011538 <dhcp_option>
 8011304:	4603      	mov	r3, r0
 8011306:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011308:	2300      	movs	r3, #0
 801130a:	77bb      	strb	r3, [r7, #30]
 801130c:	e00e      	b.n	801132c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801130e:	89b8      	ldrh	r0, [r7, #12]
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011316:	7fbb      	ldrb	r3, [r7, #30]
 8011318:	4a29      	ldr	r2, [pc, #164]	; (80113c0 <dhcp_reboot+0x15c>)
 801131a:	5cd3      	ldrb	r3, [r2, r3]
 801131c:	461a      	mov	r2, r3
 801131e:	f000 f93f 	bl	80115a0 <dhcp_option_byte>
 8011322:	4603      	mov	r3, r0
 8011324:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011326:	7fbb      	ldrb	r3, [r7, #30]
 8011328:	3301      	adds	r3, #1
 801132a:	77bb      	strb	r3, [r7, #30]
 801132c:	7fbb      	ldrb	r3, [r7, #30]
 801132e:	2b02      	cmp	r3, #2
 8011330:	d9ed      	bls.n	801130e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011332:	89b8      	ldrh	r0, [r7, #12]
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	33f0      	adds	r3, #240	; 0xf0
 8011338:	697a      	ldr	r2, [r7, #20]
 801133a:	4619      	mov	r1, r3
 801133c:	f000 fe42 	bl	8011fc4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011340:	4b20      	ldr	r3, [pc, #128]	; (80113c4 <dhcp_reboot+0x160>)
 8011342:	6818      	ldr	r0, [r3, #0]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	9300      	str	r3, [sp, #0]
 8011348:	2343      	movs	r3, #67	; 0x43
 801134a:	4a1f      	ldr	r2, [pc, #124]	; (80113c8 <dhcp_reboot+0x164>)
 801134c:	6979      	ldr	r1, [r7, #20]
 801134e:	f00a fff3 	bl	801c338 <udp_sendto_if>
 8011352:	4603      	mov	r3, r0
 8011354:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011356:	6978      	ldr	r0, [r7, #20]
 8011358:	f004 fe1e 	bl	8015f98 <pbuf_free>
 801135c:	e001      	b.n	8011362 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801135e:	23ff      	movs	r3, #255	; 0xff
 8011360:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	799b      	ldrb	r3, [r3, #6]
 8011366:	2bff      	cmp	r3, #255	; 0xff
 8011368:	d005      	beq.n	8011376 <dhcp_reboot+0x112>
    dhcp->tries++;
 801136a:	69bb      	ldr	r3, [r7, #24]
 801136c:	799b      	ldrb	r3, [r3, #6]
 801136e:	3301      	adds	r3, #1
 8011370:	b2da      	uxtb	r2, r3
 8011372:	69bb      	ldr	r3, [r7, #24]
 8011374:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011376:	69bb      	ldr	r3, [r7, #24]
 8011378:	799b      	ldrb	r3, [r3, #6]
 801137a:	2b09      	cmp	r3, #9
 801137c:	d80a      	bhi.n	8011394 <dhcp_reboot+0x130>
 801137e:	69bb      	ldr	r3, [r7, #24]
 8011380:	799b      	ldrb	r3, [r3, #6]
 8011382:	b29b      	uxth	r3, r3
 8011384:	461a      	mov	r2, r3
 8011386:	0152      	lsls	r2, r2, #5
 8011388:	1ad2      	subs	r2, r2, r3
 801138a:	0092      	lsls	r2, r2, #2
 801138c:	4413      	add	r3, r2
 801138e:	00db      	lsls	r3, r3, #3
 8011390:	b29b      	uxth	r3, r3
 8011392:	e001      	b.n	8011398 <dhcp_reboot+0x134>
 8011394:	f242 7310 	movw	r3, #10000	; 0x2710
 8011398:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801139a:	89fb      	ldrh	r3, [r7, #14]
 801139c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80113a0:	4a0a      	ldr	r2, [pc, #40]	; (80113cc <dhcp_reboot+0x168>)
 80113a2:	fb82 1203 	smull	r1, r2, r2, r3
 80113a6:	1152      	asrs	r2, r2, #5
 80113a8:	17db      	asrs	r3, r3, #31
 80113aa:	1ad3      	subs	r3, r2, r3
 80113ac:	b29a      	uxth	r2, r3
 80113ae:	69bb      	ldr	r3, [r7, #24]
 80113b0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80113b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3720      	adds	r7, #32
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bdb0      	pop	{r4, r5, r7, pc}
 80113be:	bf00      	nop
 80113c0:	20000028 	.word	0x20000028
 80113c4:	200075cc 	.word	0x200075cc
 80113c8:	080229b0 	.word	0x080229b0
 80113cc:	10624dd3 	.word	0x10624dd3

080113d0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80113d0:	b5b0      	push	{r4, r5, r7, lr}
 80113d2:	b08a      	sub	sp, #40	; 0x28
 80113d4:	af02      	add	r7, sp, #8
 80113d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113dc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80113de:	69fb      	ldr	r3, [r7, #28]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	f000 8084 	beq.w	80114ee <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80113e6:	69fb      	ldr	r3, [r7, #28]
 80113e8:	795b      	ldrb	r3, [r3, #5]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	f000 8081 	beq.w	80114f2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	699b      	ldr	r3, [r3, #24]
 80113f4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80113f6:	69fb      	ldr	r3, [r7, #28]
 80113f8:	2200      	movs	r2, #0
 80113fa:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	2200      	movs	r2, #0
 8011400:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011402:	69fb      	ldr	r3, [r7, #28]
 8011404:	2200      	movs	r2, #0
 8011406:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011408:	69fb      	ldr	r3, [r7, #28]
 801140a:	2200      	movs	r2, #0
 801140c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801140e:	69fb      	ldr	r3, [r7, #28]
 8011410:	2200      	movs	r2, #0
 8011412:	631a      	str	r2, [r3, #48]	; 0x30
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	62da      	str	r2, [r3, #44]	; 0x2c
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011420:	69fb      	ldr	r3, [r7, #28]
 8011422:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	2200      	movs	r2, #0
 8011428:	829a      	strh	r2, [r3, #20]
 801142a:	69fb      	ldr	r3, [r7, #28]
 801142c:	8a9a      	ldrh	r2, [r3, #20]
 801142e:	69fb      	ldr	r3, [r7, #28]
 8011430:	825a      	strh	r2, [r3, #18]
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	8a5a      	ldrh	r2, [r3, #18]
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	821a      	strh	r2, [r3, #16]
 801143a:	69fb      	ldr	r3, [r7, #28]
 801143c:	8a1a      	ldrh	r2, [r3, #16]
 801143e:	69fb      	ldr	r3, [r7, #28]
 8011440:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f000 fdec 	bl	8012020 <dhcp_supplied_address>
 8011448:	4603      	mov	r3, r0
 801144a:	2b00      	cmp	r3, #0
 801144c:	d03b      	beq.n	80114c6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801144e:	f107 030e 	add.w	r3, r7, #14
 8011452:	2207      	movs	r2, #7
 8011454:	69f9      	ldr	r1, [r7, #28]
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f000 fcde 	bl	8011e18 <dhcp_create_msg>
 801145c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801145e:	69bb      	ldr	r3, [r7, #24]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d030      	beq.n	80114c6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011464:	69bb      	ldr	r3, [r7, #24]
 8011466:	685b      	ldr	r3, [r3, #4]
 8011468:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801146a:	89f8      	ldrh	r0, [r7, #14]
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011472:	2304      	movs	r3, #4
 8011474:	2236      	movs	r2, #54	; 0x36
 8011476:	f000 f85f 	bl	8011538 <dhcp_option>
 801147a:	4603      	mov	r3, r0
 801147c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801147e:	89fc      	ldrh	r4, [r7, #14]
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	4618      	mov	r0, r3
 801148a:	f7fe ff32 	bl	80102f2 <lwip_htonl>
 801148e:	4603      	mov	r3, r0
 8011490:	461a      	mov	r2, r3
 8011492:	4629      	mov	r1, r5
 8011494:	4620      	mov	r0, r4
 8011496:	f000 f8db 	bl	8011650 <dhcp_option_long>
 801149a:	4603      	mov	r3, r0
 801149c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801149e:	89f8      	ldrh	r0, [r7, #14]
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	33f0      	adds	r3, #240	; 0xf0
 80114a4:	69ba      	ldr	r2, [r7, #24]
 80114a6:	4619      	mov	r1, r3
 80114a8:	f000 fd8c 	bl	8011fc4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80114ac:	4b13      	ldr	r3, [pc, #76]	; (80114fc <dhcp_release_and_stop+0x12c>)
 80114ae:	6818      	ldr	r0, [r3, #0]
 80114b0:	f107 0210 	add.w	r2, r7, #16
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	9300      	str	r3, [sp, #0]
 80114b8:	2343      	movs	r3, #67	; 0x43
 80114ba:	69b9      	ldr	r1, [r7, #24]
 80114bc:	f00a ff3c 	bl	801c338 <udp_sendto_if>
      pbuf_free(p_out);
 80114c0:	69b8      	ldr	r0, [r7, #24]
 80114c2:	f004 fd69 	bl	8015f98 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80114c6:	4b0e      	ldr	r3, [pc, #56]	; (8011500 <dhcp_release_and_stop+0x130>)
 80114c8:	4a0d      	ldr	r2, [pc, #52]	; (8011500 <dhcp_release_and_stop+0x130>)
 80114ca:	490d      	ldr	r1, [pc, #52]	; (8011500 <dhcp_release_and_stop+0x130>)
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	f004 f859 	bl	8015584 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80114d2:	2100      	movs	r1, #0
 80114d4:	69f8      	ldr	r0, [r7, #28]
 80114d6:	f000 f815 	bl	8011504 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80114da:	69fb      	ldr	r3, [r7, #28]
 80114dc:	791b      	ldrb	r3, [r3, #4]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d008      	beq.n	80114f4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80114e2:	f7fe ff71 	bl	80103c8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	2200      	movs	r2, #0
 80114ea:	711a      	strb	r2, [r3, #4]
 80114ec:	e002      	b.n	80114f4 <dhcp_release_and_stop+0x124>
    return;
 80114ee:	bf00      	nop
 80114f0:	e000      	b.n	80114f4 <dhcp_release_and_stop+0x124>
    return;
 80114f2:	bf00      	nop
  }
}
 80114f4:	3720      	adds	r7, #32
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bdb0      	pop	{r4, r5, r7, pc}
 80114fa:	bf00      	nop
 80114fc:	200075cc 	.word	0x200075cc
 8011500:	080229ac 	.word	0x080229ac

08011504 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8011504:	b480      	push	{r7}
 8011506:	b083      	sub	sp, #12
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
 801150c:	460b      	mov	r3, r1
 801150e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	795b      	ldrb	r3, [r3, #5]
 8011514:	78fa      	ldrb	r2, [r7, #3]
 8011516:	429a      	cmp	r2, r3
 8011518:	d008      	beq.n	801152c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	78fa      	ldrb	r2, [r7, #3]
 801151e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2200      	movs	r2, #0
 8011524:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2200      	movs	r2, #0
 801152a:	811a      	strh	r2, [r3, #8]
  }
}
 801152c:	bf00      	nop
 801152e:	370c      	adds	r7, #12
 8011530:	46bd      	mov	sp, r7
 8011532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011536:	4770      	bx	lr

08011538 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b082      	sub	sp, #8
 801153c:	af00      	add	r7, sp, #0
 801153e:	6039      	str	r1, [r7, #0]
 8011540:	4611      	mov	r1, r2
 8011542:	461a      	mov	r2, r3
 8011544:	4603      	mov	r3, r0
 8011546:	80fb      	strh	r3, [r7, #6]
 8011548:	460b      	mov	r3, r1
 801154a:	717b      	strb	r3, [r7, #5]
 801154c:	4613      	mov	r3, r2
 801154e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011550:	88fa      	ldrh	r2, [r7, #6]
 8011552:	793b      	ldrb	r3, [r7, #4]
 8011554:	4413      	add	r3, r2
 8011556:	3302      	adds	r3, #2
 8011558:	2b44      	cmp	r3, #68	; 0x44
 801155a:	d906      	bls.n	801156a <dhcp_option+0x32>
 801155c:	4b0d      	ldr	r3, [pc, #52]	; (8011594 <dhcp_option+0x5c>)
 801155e:	f240 529a 	movw	r2, #1434	; 0x59a
 8011562:	490d      	ldr	r1, [pc, #52]	; (8011598 <dhcp_option+0x60>)
 8011564:	480d      	ldr	r0, [pc, #52]	; (801159c <dhcp_option+0x64>)
 8011566:	f00c f8c7 	bl	801d6f8 <iprintf>
  options[options_out_len++] = option_type;
 801156a:	88fb      	ldrh	r3, [r7, #6]
 801156c:	1c5a      	adds	r2, r3, #1
 801156e:	80fa      	strh	r2, [r7, #6]
 8011570:	461a      	mov	r2, r3
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	4413      	add	r3, r2
 8011576:	797a      	ldrb	r2, [r7, #5]
 8011578:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801157a:	88fb      	ldrh	r3, [r7, #6]
 801157c:	1c5a      	adds	r2, r3, #1
 801157e:	80fa      	strh	r2, [r7, #6]
 8011580:	461a      	mov	r2, r3
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	4413      	add	r3, r2
 8011586:	793a      	ldrb	r2, [r7, #4]
 8011588:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801158a:	88fb      	ldrh	r3, [r7, #6]
}
 801158c:	4618      	mov	r0, r3
 801158e:	3708      	adds	r7, #8
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	0801f91c 	.word	0x0801f91c
 8011598:	0801facc 	.word	0x0801facc
 801159c:	0801f998 	.word	0x0801f998

080115a0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	4603      	mov	r3, r0
 80115a8:	6039      	str	r1, [r7, #0]
 80115aa:	80fb      	strh	r3, [r7, #6]
 80115ac:	4613      	mov	r3, r2
 80115ae:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80115b0:	88fb      	ldrh	r3, [r7, #6]
 80115b2:	2b43      	cmp	r3, #67	; 0x43
 80115b4:	d906      	bls.n	80115c4 <dhcp_option_byte+0x24>
 80115b6:	4b0a      	ldr	r3, [pc, #40]	; (80115e0 <dhcp_option_byte+0x40>)
 80115b8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80115bc:	4909      	ldr	r1, [pc, #36]	; (80115e4 <dhcp_option_byte+0x44>)
 80115be:	480a      	ldr	r0, [pc, #40]	; (80115e8 <dhcp_option_byte+0x48>)
 80115c0:	f00c f89a 	bl	801d6f8 <iprintf>
  options[options_out_len++] = value;
 80115c4:	88fb      	ldrh	r3, [r7, #6]
 80115c6:	1c5a      	adds	r2, r3, #1
 80115c8:	80fa      	strh	r2, [r7, #6]
 80115ca:	461a      	mov	r2, r3
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	4413      	add	r3, r2
 80115d0:	797a      	ldrb	r2, [r7, #5]
 80115d2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80115d4:	88fb      	ldrh	r3, [r7, #6]
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3708      	adds	r7, #8
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
 80115de:	bf00      	nop
 80115e0:	0801f91c 	.word	0x0801f91c
 80115e4:	0801fb10 	.word	0x0801fb10
 80115e8:	0801f998 	.word	0x0801f998

080115ec <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b082      	sub	sp, #8
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	4603      	mov	r3, r0
 80115f4:	6039      	str	r1, [r7, #0]
 80115f6:	80fb      	strh	r3, [r7, #6]
 80115f8:	4613      	mov	r3, r2
 80115fa:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80115fc:	88fb      	ldrh	r3, [r7, #6]
 80115fe:	3302      	adds	r3, #2
 8011600:	2b44      	cmp	r3, #68	; 0x44
 8011602:	d906      	bls.n	8011612 <dhcp_option_short+0x26>
 8011604:	4b0f      	ldr	r3, [pc, #60]	; (8011644 <dhcp_option_short+0x58>)
 8011606:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801160a:	490f      	ldr	r1, [pc, #60]	; (8011648 <dhcp_option_short+0x5c>)
 801160c:	480f      	ldr	r0, [pc, #60]	; (801164c <dhcp_option_short+0x60>)
 801160e:	f00c f873 	bl	801d6f8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8011612:	88bb      	ldrh	r3, [r7, #4]
 8011614:	0a1b      	lsrs	r3, r3, #8
 8011616:	b29a      	uxth	r2, r3
 8011618:	88fb      	ldrh	r3, [r7, #6]
 801161a:	1c59      	adds	r1, r3, #1
 801161c:	80f9      	strh	r1, [r7, #6]
 801161e:	4619      	mov	r1, r3
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	440b      	add	r3, r1
 8011624:	b2d2      	uxtb	r2, r2
 8011626:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8011628:	88fb      	ldrh	r3, [r7, #6]
 801162a:	1c5a      	adds	r2, r3, #1
 801162c:	80fa      	strh	r2, [r7, #6]
 801162e:	461a      	mov	r2, r3
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	4413      	add	r3, r2
 8011634:	88ba      	ldrh	r2, [r7, #4]
 8011636:	b2d2      	uxtb	r2, r2
 8011638:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801163a:	88fb      	ldrh	r3, [r7, #6]
}
 801163c:	4618      	mov	r0, r3
 801163e:	3708      	adds	r7, #8
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	0801f91c 	.word	0x0801f91c
 8011648:	0801fb48 	.word	0x0801fb48
 801164c:	0801f998 	.word	0x0801f998

08011650 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b084      	sub	sp, #16
 8011654:	af00      	add	r7, sp, #0
 8011656:	4603      	mov	r3, r0
 8011658:	60b9      	str	r1, [r7, #8]
 801165a:	607a      	str	r2, [r7, #4]
 801165c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801165e:	89fb      	ldrh	r3, [r7, #14]
 8011660:	3304      	adds	r3, #4
 8011662:	2b44      	cmp	r3, #68	; 0x44
 8011664:	d906      	bls.n	8011674 <dhcp_option_long+0x24>
 8011666:	4b19      	ldr	r3, [pc, #100]	; (80116cc <dhcp_option_long+0x7c>)
 8011668:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801166c:	4918      	ldr	r1, [pc, #96]	; (80116d0 <dhcp_option_long+0x80>)
 801166e:	4819      	ldr	r0, [pc, #100]	; (80116d4 <dhcp_option_long+0x84>)
 8011670:	f00c f842 	bl	801d6f8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	0e1a      	lsrs	r2, r3, #24
 8011678:	89fb      	ldrh	r3, [r7, #14]
 801167a:	1c59      	adds	r1, r3, #1
 801167c:	81f9      	strh	r1, [r7, #14]
 801167e:	4619      	mov	r1, r3
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	440b      	add	r3, r1
 8011684:	b2d2      	uxtb	r2, r2
 8011686:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	0c1a      	lsrs	r2, r3, #16
 801168c:	89fb      	ldrh	r3, [r7, #14]
 801168e:	1c59      	adds	r1, r3, #1
 8011690:	81f9      	strh	r1, [r7, #14]
 8011692:	4619      	mov	r1, r3
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	440b      	add	r3, r1
 8011698:	b2d2      	uxtb	r2, r2
 801169a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	0a1a      	lsrs	r2, r3, #8
 80116a0:	89fb      	ldrh	r3, [r7, #14]
 80116a2:	1c59      	adds	r1, r3, #1
 80116a4:	81f9      	strh	r1, [r7, #14]
 80116a6:	4619      	mov	r1, r3
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	440b      	add	r3, r1
 80116ac:	b2d2      	uxtb	r2, r2
 80116ae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80116b0:	89fb      	ldrh	r3, [r7, #14]
 80116b2:	1c5a      	adds	r2, r3, #1
 80116b4:	81fa      	strh	r2, [r7, #14]
 80116b6:	461a      	mov	r2, r3
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	4413      	add	r3, r2
 80116bc:	687a      	ldr	r2, [r7, #4]
 80116be:	b2d2      	uxtb	r2, r2
 80116c0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80116c2:	89fb      	ldrh	r3, [r7, #14]
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3710      	adds	r7, #16
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	0801f91c 	.word	0x0801f91c
 80116d0:	0801fb84 	.word	0x0801fb84
 80116d4:	0801f998 	.word	0x0801f998

080116d8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b090      	sub	sp, #64	; 0x40
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80116e2:	2300      	movs	r3, #0
 80116e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80116e6:	2300      	movs	r3, #0
 80116e8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80116ea:	2208      	movs	r2, #8
 80116ec:	2100      	movs	r1, #0
 80116ee:	48be      	ldr	r0, [pc, #760]	; (80119e8 <dhcp_parse_reply+0x310>)
 80116f0:	f00b fbbf 	bl	801ce72 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	895b      	ldrh	r3, [r3, #10]
 80116f8:	2b2b      	cmp	r3, #43	; 0x2b
 80116fa:	d802      	bhi.n	8011702 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80116fc:	f06f 0301 	mvn.w	r3, #1
 8011700:	e2a8      	b.n	8011c54 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8011708:	23f0      	movs	r3, #240	; 0xf0
 801170a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	891b      	ldrh	r3, [r3, #8]
 8011710:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011716:	e00c      	b.n	8011732 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8011718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801171a:	895b      	ldrh	r3, [r3, #10]
 801171c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801171e:	1ad3      	subs	r3, r2, r3
 8011720:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8011722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011724:	895b      	ldrh	r3, [r3, #10]
 8011726:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8011728:	1ad3      	subs	r3, r2, r3
 801172a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801172c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011734:	2b00      	cmp	r3, #0
 8011736:	d004      	beq.n	8011742 <dhcp_parse_reply+0x6a>
 8011738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801173a:	895b      	ldrh	r3, [r3, #10]
 801173c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801173e:	429a      	cmp	r2, r3
 8011740:	d2ea      	bcs.n	8011718 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8011742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011744:	2b00      	cmp	r3, #0
 8011746:	d102      	bne.n	801174e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8011748:	f06f 0301 	mvn.w	r3, #1
 801174c:	e282      	b.n	8011c54 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801174e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011750:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8011752:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011754:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8011756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801175c:	e23a      	b.n	8011bd4 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801175e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011762:	4413      	add	r3, r2
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8011768:	2300      	movs	r3, #0
 801176a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801176e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011772:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8011774:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011776:	3302      	adds	r3, #2
 8011778:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801177a:	8bfa      	ldrh	r2, [r7, #30]
 801177c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801177e:	429a      	cmp	r2, r3
 8011780:	d202      	bcs.n	8011788 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8011782:	f06f 0301 	mvn.w	r3, #1
 8011786:	e265      	b.n	8011c54 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8011788:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801178a:	3301      	adds	r3, #1
 801178c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801178e:	8952      	ldrh	r2, [r2, #10]
 8011790:	4293      	cmp	r3, r2
 8011792:	da07      	bge.n	80117a4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8011794:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011796:	3301      	adds	r3, #1
 8011798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801179a:	4413      	add	r3, r2
 801179c:	781b      	ldrb	r3, [r3, #0]
 801179e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80117a2:	e00b      	b.n	80117bc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80117a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d004      	beq.n	80117b6 <dhcp_parse_reply+0xde>
 80117ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	e000      	b.n	80117b8 <dhcp_parse_reply+0xe0>
 80117b6:	2300      	movs	r3, #0
 80117b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80117bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80117c4:	7dfb      	ldrb	r3, [r7, #23]
 80117c6:	2b3b      	cmp	r3, #59	; 0x3b
 80117c8:	f200 812d 	bhi.w	8011a26 <dhcp_parse_reply+0x34e>
 80117cc:	a201      	add	r2, pc, #4	; (adr r2, 80117d4 <dhcp_parse_reply+0xfc>)
 80117ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117d2:	bf00      	nop
 80117d4:	080118c5 	.word	0x080118c5
 80117d8:	080118d5 	.word	0x080118d5
 80117dc:	08011a27 	.word	0x08011a27
 80117e0:	080118f7 	.word	0x080118f7
 80117e4:	08011a27 	.word	0x08011a27
 80117e8:	08011a27 	.word	0x08011a27
 80117ec:	08011a27 	.word	0x08011a27
 80117f0:	08011a27 	.word	0x08011a27
 80117f4:	08011a27 	.word	0x08011a27
 80117f8:	08011a27 	.word	0x08011a27
 80117fc:	08011a27 	.word	0x08011a27
 8011800:	08011a27 	.word	0x08011a27
 8011804:	08011a27 	.word	0x08011a27
 8011808:	08011a27 	.word	0x08011a27
 801180c:	08011a27 	.word	0x08011a27
 8011810:	08011a27 	.word	0x08011a27
 8011814:	08011a27 	.word	0x08011a27
 8011818:	08011a27 	.word	0x08011a27
 801181c:	08011a27 	.word	0x08011a27
 8011820:	08011a27 	.word	0x08011a27
 8011824:	08011a27 	.word	0x08011a27
 8011828:	08011a27 	.word	0x08011a27
 801182c:	08011a27 	.word	0x08011a27
 8011830:	08011a27 	.word	0x08011a27
 8011834:	08011a27 	.word	0x08011a27
 8011838:	08011a27 	.word	0x08011a27
 801183c:	08011a27 	.word	0x08011a27
 8011840:	08011a27 	.word	0x08011a27
 8011844:	08011a27 	.word	0x08011a27
 8011848:	08011a27 	.word	0x08011a27
 801184c:	08011a27 	.word	0x08011a27
 8011850:	08011a27 	.word	0x08011a27
 8011854:	08011a27 	.word	0x08011a27
 8011858:	08011a27 	.word	0x08011a27
 801185c:	08011a27 	.word	0x08011a27
 8011860:	08011a27 	.word	0x08011a27
 8011864:	08011a27 	.word	0x08011a27
 8011868:	08011a27 	.word	0x08011a27
 801186c:	08011a27 	.word	0x08011a27
 8011870:	08011a27 	.word	0x08011a27
 8011874:	08011a27 	.word	0x08011a27
 8011878:	08011a27 	.word	0x08011a27
 801187c:	08011a27 	.word	0x08011a27
 8011880:	08011a27 	.word	0x08011a27
 8011884:	08011a27 	.word	0x08011a27
 8011888:	08011a27 	.word	0x08011a27
 801188c:	08011a27 	.word	0x08011a27
 8011890:	08011a27 	.word	0x08011a27
 8011894:	08011a27 	.word	0x08011a27
 8011898:	08011a27 	.word	0x08011a27
 801189c:	08011a27 	.word	0x08011a27
 80118a0:	08011923 	.word	0x08011923
 80118a4:	08011945 	.word	0x08011945
 80118a8:	08011981 	.word	0x08011981
 80118ac:	080119a3 	.word	0x080119a3
 80118b0:	08011a27 	.word	0x08011a27
 80118b4:	08011a27 	.word	0x08011a27
 80118b8:	08011a27 	.word	0x08011a27
 80118bc:	080119c5 	.word	0x080119c5
 80118c0:	08011a05 	.word	0x08011a05
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80118c4:	2300      	movs	r3, #0
 80118c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80118ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80118d2:	e0ac      	b.n	8011a2e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80118d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118d8:	2b04      	cmp	r3, #4
 80118da:	d009      	beq.n	80118f0 <dhcp_parse_reply+0x218>
 80118dc:	4b43      	ldr	r3, [pc, #268]	; (80119ec <dhcp_parse_reply+0x314>)
 80118de:	f240 622e 	movw	r2, #1582	; 0x62e
 80118e2:	4943      	ldr	r1, [pc, #268]	; (80119f0 <dhcp_parse_reply+0x318>)
 80118e4:	4843      	ldr	r0, [pc, #268]	; (80119f4 <dhcp_parse_reply+0x31c>)
 80118e6:	f00b ff07 	bl	801d6f8 <iprintf>
 80118ea:	f06f 0305 	mvn.w	r3, #5
 80118ee:	e1b1      	b.n	8011c54 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80118f0:	2306      	movs	r3, #6
 80118f2:	623b      	str	r3, [r7, #32]
        break;
 80118f4:	e09b      	b.n	8011a2e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80118f6:	2304      	movs	r3, #4
 80118f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80118fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011904:	429a      	cmp	r2, r3
 8011906:	d209      	bcs.n	801191c <dhcp_parse_reply+0x244>
 8011908:	4b38      	ldr	r3, [pc, #224]	; (80119ec <dhcp_parse_reply+0x314>)
 801190a:	f240 6233 	movw	r2, #1587	; 0x633
 801190e:	493a      	ldr	r1, [pc, #232]	; (80119f8 <dhcp_parse_reply+0x320>)
 8011910:	4838      	ldr	r0, [pc, #224]	; (80119f4 <dhcp_parse_reply+0x31c>)
 8011912:	f00b fef1 	bl	801d6f8 <iprintf>
 8011916:	f06f 0305 	mvn.w	r3, #5
 801191a:	e19b      	b.n	8011c54 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801191c:	2307      	movs	r3, #7
 801191e:	623b      	str	r3, [r7, #32]
        break;
 8011920:	e085      	b.n	8011a2e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011926:	2b04      	cmp	r3, #4
 8011928:	d009      	beq.n	801193e <dhcp_parse_reply+0x266>
 801192a:	4b30      	ldr	r3, [pc, #192]	; (80119ec <dhcp_parse_reply+0x314>)
 801192c:	f240 6241 	movw	r2, #1601	; 0x641
 8011930:	492f      	ldr	r1, [pc, #188]	; (80119f0 <dhcp_parse_reply+0x318>)
 8011932:	4830      	ldr	r0, [pc, #192]	; (80119f4 <dhcp_parse_reply+0x31c>)
 8011934:	f00b fee0 	bl	801d6f8 <iprintf>
 8011938:	f06f 0305 	mvn.w	r3, #5
 801193c:	e18a      	b.n	8011c54 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801193e:	2303      	movs	r3, #3
 8011940:	623b      	str	r3, [r7, #32]
        break;
 8011942:	e074      	b.n	8011a2e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011948:	2b01      	cmp	r3, #1
 801194a:	d009      	beq.n	8011960 <dhcp_parse_reply+0x288>
 801194c:	4b27      	ldr	r3, [pc, #156]	; (80119ec <dhcp_parse_reply+0x314>)
 801194e:	f240 624f 	movw	r2, #1615	; 0x64f
 8011952:	492a      	ldr	r1, [pc, #168]	; (80119fc <dhcp_parse_reply+0x324>)
 8011954:	4827      	ldr	r0, [pc, #156]	; (80119f4 <dhcp_parse_reply+0x31c>)
 8011956:	f00b fecf 	bl	801d6f8 <iprintf>
 801195a:	f06f 0305 	mvn.w	r3, #5
 801195e:	e179      	b.n	8011c54 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8011960:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011962:	2bf0      	cmp	r3, #240	; 0xf0
 8011964:	d009      	beq.n	801197a <dhcp_parse_reply+0x2a2>
 8011966:	4b21      	ldr	r3, [pc, #132]	; (80119ec <dhcp_parse_reply+0x314>)
 8011968:	f240 6251 	movw	r2, #1617	; 0x651
 801196c:	4924      	ldr	r1, [pc, #144]	; (8011a00 <dhcp_parse_reply+0x328>)
 801196e:	4821      	ldr	r0, [pc, #132]	; (80119f4 <dhcp_parse_reply+0x31c>)
 8011970:	f00b fec2 	bl	801d6f8 <iprintf>
 8011974:	f06f 0305 	mvn.w	r3, #5
 8011978:	e16c      	b.n	8011c54 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801197a:	2300      	movs	r3, #0
 801197c:	623b      	str	r3, [r7, #32]
        break;
 801197e:	e056      	b.n	8011a2e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011984:	2b01      	cmp	r3, #1
 8011986:	d009      	beq.n	801199c <dhcp_parse_reply+0x2c4>
 8011988:	4b18      	ldr	r3, [pc, #96]	; (80119ec <dhcp_parse_reply+0x314>)
 801198a:	f240 6255 	movw	r2, #1621	; 0x655
 801198e:	491b      	ldr	r1, [pc, #108]	; (80119fc <dhcp_parse_reply+0x324>)
 8011990:	4818      	ldr	r0, [pc, #96]	; (80119f4 <dhcp_parse_reply+0x31c>)
 8011992:	f00b feb1 	bl	801d6f8 <iprintf>
 8011996:	f06f 0305 	mvn.w	r3, #5
 801199a:	e15b      	b.n	8011c54 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801199c:	2301      	movs	r3, #1
 801199e:	623b      	str	r3, [r7, #32]
        break;
 80119a0:	e045      	b.n	8011a2e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80119a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119a6:	2b04      	cmp	r3, #4
 80119a8:	d009      	beq.n	80119be <dhcp_parse_reply+0x2e6>
 80119aa:	4b10      	ldr	r3, [pc, #64]	; (80119ec <dhcp_parse_reply+0x314>)
 80119ac:	f240 6259 	movw	r2, #1625	; 0x659
 80119b0:	490f      	ldr	r1, [pc, #60]	; (80119f0 <dhcp_parse_reply+0x318>)
 80119b2:	4810      	ldr	r0, [pc, #64]	; (80119f4 <dhcp_parse_reply+0x31c>)
 80119b4:	f00b fea0 	bl	801d6f8 <iprintf>
 80119b8:	f06f 0305 	mvn.w	r3, #5
 80119bc:	e14a      	b.n	8011c54 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80119be:	2302      	movs	r3, #2
 80119c0:	623b      	str	r3, [r7, #32]
        break;
 80119c2:	e034      	b.n	8011a2e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80119c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119c8:	2b04      	cmp	r3, #4
 80119ca:	d009      	beq.n	80119e0 <dhcp_parse_reply+0x308>
 80119cc:	4b07      	ldr	r3, [pc, #28]	; (80119ec <dhcp_parse_reply+0x314>)
 80119ce:	f240 625d 	movw	r2, #1629	; 0x65d
 80119d2:	4907      	ldr	r1, [pc, #28]	; (80119f0 <dhcp_parse_reply+0x318>)
 80119d4:	4807      	ldr	r0, [pc, #28]	; (80119f4 <dhcp_parse_reply+0x31c>)
 80119d6:	f00b fe8f 	bl	801d6f8 <iprintf>
 80119da:	f06f 0305 	mvn.w	r3, #5
 80119de:	e139      	b.n	8011c54 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80119e0:	2304      	movs	r3, #4
 80119e2:	623b      	str	r3, [r7, #32]
        break;
 80119e4:	e023      	b.n	8011a2e <dhcp_parse_reply+0x356>
 80119e6:	bf00      	nop
 80119e8:	20008954 	.word	0x20008954
 80119ec:	0801f91c 	.word	0x0801f91c
 80119f0:	0801fbc0 	.word	0x0801fbc0
 80119f4:	0801f998 	.word	0x0801f998
 80119f8:	0801fbcc 	.word	0x0801fbcc
 80119fc:	0801fbe0 	.word	0x0801fbe0
 8011a00:	0801fbec 	.word	0x0801fbec
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a08:	2b04      	cmp	r3, #4
 8011a0a:	d009      	beq.n	8011a20 <dhcp_parse_reply+0x348>
 8011a0c:	4b93      	ldr	r3, [pc, #588]	; (8011c5c <dhcp_parse_reply+0x584>)
 8011a0e:	f240 6261 	movw	r2, #1633	; 0x661
 8011a12:	4993      	ldr	r1, [pc, #588]	; (8011c60 <dhcp_parse_reply+0x588>)
 8011a14:	4893      	ldr	r0, [pc, #588]	; (8011c64 <dhcp_parse_reply+0x58c>)
 8011a16:	f00b fe6f 	bl	801d6f8 <iprintf>
 8011a1a:	f06f 0305 	mvn.w	r3, #5
 8011a1e:	e119      	b.n	8011c54 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8011a20:	2305      	movs	r3, #5
 8011a22:	623b      	str	r3, [r7, #32]
        break;
 8011a24:	e003      	b.n	8011a2e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8011a26:	2300      	movs	r3, #0
 8011a28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8011a2c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8011a2e:	7dfb      	ldrb	r3, [r7, #23]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d103      	bne.n	8011a3c <dhcp_parse_reply+0x364>
      offset++;
 8011a34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011a36:	3301      	adds	r3, #1
 8011a38:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011a3a:	e0a1      	b.n	8011b80 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8011a3c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a42:	4413      	add	r3, r2
 8011a44:	3302      	adds	r3, #2
 8011a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a4a:	db02      	blt.n	8011a52 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8011a4c:	f06f 0301 	mvn.w	r3, #1
 8011a50:	e100      	b.n	8011c54 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8011a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a56:	b29a      	uxth	r2, r3
 8011a58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011a5a:	4413      	add	r3, r2
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	3302      	adds	r3, #2
 8011a60:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8011a62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	f000 808a 	beq.w	8011b80 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8011a70:	6a3b      	ldr	r3, [r7, #32]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	db02      	blt.n	8011a7c <dhcp_parse_reply+0x3a4>
 8011a76:	6a3b      	ldr	r3, [r7, #32]
 8011a78:	2b07      	cmp	r3, #7
 8011a7a:	dd06      	ble.n	8011a8a <dhcp_parse_reply+0x3b2>
 8011a7c:	4b77      	ldr	r3, [pc, #476]	; (8011c5c <dhcp_parse_reply+0x584>)
 8011a7e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8011a82:	4979      	ldr	r1, [pc, #484]	; (8011c68 <dhcp_parse_reply+0x590>)
 8011a84:	4877      	ldr	r0, [pc, #476]	; (8011c64 <dhcp_parse_reply+0x58c>)
 8011a86:	f00b fe37 	bl	801d6f8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8011a8a:	4a78      	ldr	r2, [pc, #480]	; (8011c6c <dhcp_parse_reply+0x594>)
 8011a8c:	6a3b      	ldr	r3, [r7, #32]
 8011a8e:	4413      	add	r3, r2
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d174      	bne.n	8011b80 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8011a96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a9a:	2b04      	cmp	r3, #4
 8011a9c:	bf28      	it	cs
 8011a9e:	2304      	movcs	r3, #4
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8011aa4:	8bfb      	ldrh	r3, [r7, #30]
 8011aa6:	8aba      	ldrh	r2, [r7, #20]
 8011aa8:	f107 0108 	add.w	r1, r7, #8
 8011aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011aae:	f004 fc79 	bl	80163a4 <pbuf_copy_partial>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	8abb      	ldrh	r3, [r7, #20]
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	d002      	beq.n	8011ac2 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8011abc:	f06f 0301 	mvn.w	r3, #1
 8011ac0:	e0c8      	b.n	8011c54 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8011ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ac6:	2b04      	cmp	r3, #4
 8011ac8:	d933      	bls.n	8011b32 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8011aca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ace:	f003 0303 	and.w	r3, r3, #3
 8011ad2:	b2db      	uxtb	r3, r3
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d009      	beq.n	8011aec <dhcp_parse_reply+0x414>
 8011ad8:	4b60      	ldr	r3, [pc, #384]	; (8011c5c <dhcp_parse_reply+0x584>)
 8011ada:	f240 6281 	movw	r2, #1665	; 0x681
 8011ade:	4964      	ldr	r1, [pc, #400]	; (8011c70 <dhcp_parse_reply+0x598>)
 8011ae0:	4860      	ldr	r0, [pc, #384]	; (8011c64 <dhcp_parse_reply+0x58c>)
 8011ae2:	f00b fe09 	bl	801d6f8 <iprintf>
 8011ae6:	f06f 0305 	mvn.w	r3, #5
 8011aea:	e0b3      	b.n	8011c54 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8011aec:	4a5f      	ldr	r2, [pc, #380]	; (8011c6c <dhcp_parse_reply+0x594>)
 8011aee:	6a3b      	ldr	r3, [r7, #32]
 8011af0:	4413      	add	r3, r2
 8011af2:	2201      	movs	r2, #1
 8011af4:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7fe fbfa 	bl	80102f2 <lwip_htonl>
 8011afe:	4601      	mov	r1, r0
 8011b00:	4a5c      	ldr	r2, [pc, #368]	; (8011c74 <dhcp_parse_reply+0x59c>)
 8011b02:	6a3b      	ldr	r3, [r7, #32]
 8011b04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8011b08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011b0c:	3b04      	subs	r3, #4
 8011b0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8011b12:	8bfb      	ldrh	r3, [r7, #30]
 8011b14:	3304      	adds	r3, #4
 8011b16:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8011b18:	8a7a      	ldrh	r2, [r7, #18]
 8011b1a:	8bfb      	ldrh	r3, [r7, #30]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d202      	bcs.n	8011b26 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8011b20:	f06f 0301 	mvn.w	r3, #1
 8011b24:	e096      	b.n	8011c54 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8011b26:	8a7b      	ldrh	r3, [r7, #18]
 8011b28:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8011b2a:	6a3b      	ldr	r3, [r7, #32]
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8011b30:	e79e      	b.n	8011a70 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8011b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011b36:	2b04      	cmp	r3, #4
 8011b38:	d106      	bne.n	8011b48 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f7fe fbd8 	bl	80102f2 <lwip_htonl>
 8011b42:	4603      	mov	r3, r0
 8011b44:	60bb      	str	r3, [r7, #8]
 8011b46:	e011      	b.n	8011b6c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8011b48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011b4c:	2b01      	cmp	r3, #1
 8011b4e:	d009      	beq.n	8011b64 <dhcp_parse_reply+0x48c>
 8011b50:	4b42      	ldr	r3, [pc, #264]	; (8011c5c <dhcp_parse_reply+0x584>)
 8011b52:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8011b56:	4948      	ldr	r1, [pc, #288]	; (8011c78 <dhcp_parse_reply+0x5a0>)
 8011b58:	4842      	ldr	r0, [pc, #264]	; (8011c64 <dhcp_parse_reply+0x58c>)
 8011b5a:	f00b fdcd 	bl	801d6f8 <iprintf>
 8011b5e:	f06f 0305 	mvn.w	r3, #5
 8011b62:	e077      	b.n	8011c54 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8011b64:	f107 0308 	add.w	r3, r7, #8
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8011b6c:	4a3f      	ldr	r2, [pc, #252]	; (8011c6c <dhcp_parse_reply+0x594>)
 8011b6e:	6a3b      	ldr	r3, [r7, #32]
 8011b70:	4413      	add	r3, r2
 8011b72:	2201      	movs	r2, #1
 8011b74:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8011b76:	68ba      	ldr	r2, [r7, #8]
 8011b78:	493e      	ldr	r1, [pc, #248]	; (8011c74 <dhcp_parse_reply+0x59c>)
 8011b7a:	6a3b      	ldr	r3, [r7, #32]
 8011b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8011b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b82:	895b      	ldrh	r3, [r3, #10]
 8011b84:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d324      	bcc.n	8011bd4 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8011b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b8c:	895b      	ldrh	r3, [r3, #10]
 8011b8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b90:	1ad3      	subs	r3, r2, r3
 8011b92:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8011b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b96:	895b      	ldrh	r3, [r3, #10]
 8011b98:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011b9a:	1ad3      	subs	r3, r2, r3
 8011b9c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8011b9e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011ba0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d213      	bcs.n	8011bce <dhcp_parse_reply+0x4f6>
        q = q->next;
 8011ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8011bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d109      	bne.n	8011bc6 <dhcp_parse_reply+0x4ee>
 8011bb2:	4b2a      	ldr	r3, [pc, #168]	; (8011c5c <dhcp_parse_reply+0x584>)
 8011bb4:	f240 629d 	movw	r2, #1693	; 0x69d
 8011bb8:	4930      	ldr	r1, [pc, #192]	; (8011c7c <dhcp_parse_reply+0x5a4>)
 8011bba:	482a      	ldr	r0, [pc, #168]	; (8011c64 <dhcp_parse_reply+0x58c>)
 8011bbc:	f00b fd9c 	bl	801d6f8 <iprintf>
 8011bc0:	f06f 0305 	mvn.w	r3, #5
 8011bc4:	e046      	b.n	8011c54 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8011bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011bcc:	e002      	b.n	8011bd4 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8011bce:	f06f 0301 	mvn.w	r3, #1
 8011bd2:	e03f      	b.n	8011c54 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d00a      	beq.n	8011bf0 <dhcp_parse_reply+0x518>
 8011bda:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011bdc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d206      	bcs.n	8011bf0 <dhcp_parse_reply+0x518>
 8011be2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011be4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011be6:	4413      	add	r3, r2
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	2bff      	cmp	r3, #255	; 0xff
 8011bec:	f47f adb7 	bne.w	801175e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8011bf0:	4b1e      	ldr	r3, [pc, #120]	; (8011c6c <dhcp_parse_reply+0x594>)
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d018      	beq.n	8011c2a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011bf8:	4b1e      	ldr	r3, [pc, #120]	; (8011c74 <dhcp_parse_reply+0x59c>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011bfe:	4b1b      	ldr	r3, [pc, #108]	; (8011c6c <dhcp_parse_reply+0x594>)
 8011c00:	2200      	movs	r2, #0
 8011c02:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	2b01      	cmp	r3, #1
 8011c08:	d102      	bne.n	8011c10 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c0e:	e00c      	b.n	8011c2a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	2b02      	cmp	r3, #2
 8011c14:	d102      	bne.n	8011c1c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8011c16:	2301      	movs	r3, #1
 8011c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c1a:	e006      	b.n	8011c2a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2b03      	cmp	r3, #3
 8011c20:	d103      	bne.n	8011c2a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8011c22:	2301      	movs	r3, #1
 8011c24:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8011c26:	2301      	movs	r3, #1
 8011c28:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8011c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d006      	beq.n	8011c3e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8011c30:	2300      	movs	r3, #0
 8011c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8011c34:	236c      	movs	r3, #108	; 0x6c
 8011c36:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8011c38:	23ec      	movs	r3, #236	; 0xec
 8011c3a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8011c3c:	e569      	b.n	8011712 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8011c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d006      	beq.n	8011c52 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8011c44:	2300      	movs	r3, #0
 8011c46:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8011c48:	232c      	movs	r3, #44	; 0x2c
 8011c4a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8011c4c:	236c      	movs	r3, #108	; 0x6c
 8011c4e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8011c50:	e55f      	b.n	8011712 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8011c52:	2300      	movs	r3, #0
}
 8011c54:	4618      	mov	r0, r3
 8011c56:	3740      	adds	r7, #64	; 0x40
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}
 8011c5c:	0801f91c 	.word	0x0801f91c
 8011c60:	0801fbc0 	.word	0x0801fbc0
 8011c64:	0801f998 	.word	0x0801f998
 8011c68:	0801fc04 	.word	0x0801fc04
 8011c6c:	20008954 	.word	0x20008954
 8011c70:	0801fc18 	.word	0x0801fc18
 8011c74:	2000895c 	.word	0x2000895c
 8011c78:	0801fc30 	.word	0x0801fc30
 8011c7c:	0801fc44 	.word	0x0801fc44

08011c80 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b08a      	sub	sp, #40	; 0x28
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	60f8      	str	r0, [r7, #12]
 8011c88:	60b9      	str	r1, [r7, #8]
 8011c8a:	607a      	str	r2, [r7, #4]
 8011c8c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8011c8e:	4b5f      	ldr	r3, [pc, #380]	; (8011e0c <dhcp_recv+0x18c>)
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011c94:	6a3b      	ldr	r3, [r7, #32]
 8011c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c98:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8011ca0:	69fb      	ldr	r3, [r7, #28]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	f000 809d 	beq.w	8011de2 <dhcp_recv+0x162>
 8011ca8:	69fb      	ldr	r3, [r7, #28]
 8011caa:	791b      	ldrb	r3, [r3, #4]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	f000 8098 	beq.w	8011de2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	895b      	ldrh	r3, [r3, #10]
 8011cb6:	2b2b      	cmp	r3, #43	; 0x2b
 8011cb8:	f240 8095 	bls.w	8011de6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8011cbc:	69bb      	ldr	r3, [r7, #24]
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	2b02      	cmp	r3, #2
 8011cc2:	f040 8092 	bne.w	8011dea <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011ccc:	e012      	b.n	8011cf4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8011cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cd2:	6a3a      	ldr	r2, [r7, #32]
 8011cd4:	4413      	add	r3, r2
 8011cd6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8011cda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cde:	69b9      	ldr	r1, [r7, #24]
 8011ce0:	440b      	add	r3, r1
 8011ce2:	7f1b      	ldrb	r3, [r3, #28]
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	f040 8082 	bne.w	8011dee <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cee:	3301      	adds	r3, #1
 8011cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011cf4:	6a3b      	ldr	r3, [r7, #32]
 8011cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011cfa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d203      	bcs.n	8011d0a <dhcp_recv+0x8a>
 8011d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d06:	2b05      	cmp	r3, #5
 8011d08:	d9e1      	bls.n	8011cce <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8011d0a:	69bb      	ldr	r3, [r7, #24]
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fe faef 	bl	80102f2 <lwip_htonl>
 8011d14:	4602      	mov	r2, r0
 8011d16:	69fb      	ldr	r3, [r7, #28]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d169      	bne.n	8011df2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8011d1e:	69f9      	ldr	r1, [r7, #28]
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f7ff fcd9 	bl	80116d8 <dhcp_parse_reply>
 8011d26:	4603      	mov	r3, r0
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d164      	bne.n	8011df6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8011d2c:	4b38      	ldr	r3, [pc, #224]	; (8011e10 <dhcp_recv+0x190>)
 8011d2e:	785b      	ldrb	r3, [r3, #1]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d062      	beq.n	8011dfa <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8011d3a:	4b36      	ldr	r3, [pc, #216]	; (8011e14 <dhcp_recv+0x194>)
 8011d3c:	685b      	ldr	r3, [r3, #4]
 8011d3e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8011d40:	7cfb      	ldrb	r3, [r7, #19]
 8011d42:	2b05      	cmp	r3, #5
 8011d44:	d12a      	bne.n	8011d9c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011d46:	69fb      	ldr	r3, [r7, #28]
 8011d48:	795b      	ldrb	r3, [r3, #5]
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d112      	bne.n	8011d74 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8011d4e:	6979      	ldr	r1, [r7, #20]
 8011d50:	6a38      	ldr	r0, [r7, #32]
 8011d52:	f7fe fe05 	bl	8010960 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8011d56:	6a3b      	ldr	r3, [r7, #32]
 8011d58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011d5c:	f003 0308 	and.w	r3, r3, #8
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d003      	beq.n	8011d6c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8011d64:	6a38      	ldr	r0, [r7, #32]
 8011d66:	f7fe fb73 	bl	8010450 <dhcp_check>
 8011d6a:	e047      	b.n	8011dfc <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8011d6c:	6a38      	ldr	r0, [r7, #32]
 8011d6e:	f7ff f867 	bl	8010e40 <dhcp_bind>
 8011d72:	e043      	b.n	8011dfc <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011d74:	69fb      	ldr	r3, [r7, #28]
 8011d76:	795b      	ldrb	r3, [r3, #5]
 8011d78:	2b03      	cmp	r3, #3
 8011d7a:	d007      	beq.n	8011d8c <dhcp_recv+0x10c>
 8011d7c:	69fb      	ldr	r3, [r7, #28]
 8011d7e:	795b      	ldrb	r3, [r3, #5]
 8011d80:	2b04      	cmp	r3, #4
 8011d82:	d003      	beq.n	8011d8c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8011d84:	69fb      	ldr	r3, [r7, #28]
 8011d86:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011d88:	2b05      	cmp	r3, #5
 8011d8a:	d137      	bne.n	8011dfc <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8011d8c:	6979      	ldr	r1, [r7, #20]
 8011d8e:	6a38      	ldr	r0, [r7, #32]
 8011d90:	f7fe fde6 	bl	8010960 <dhcp_handle_ack>
      dhcp_bind(netif);
 8011d94:	6a38      	ldr	r0, [r7, #32]
 8011d96:	f7ff f853 	bl	8010e40 <dhcp_bind>
 8011d9a:	e02f      	b.n	8011dfc <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8011d9c:	7cfb      	ldrb	r3, [r7, #19]
 8011d9e:	2b06      	cmp	r3, #6
 8011da0:	d113      	bne.n	8011dca <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011da2:	69fb      	ldr	r3, [r7, #28]
 8011da4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8011da6:	2b03      	cmp	r3, #3
 8011da8:	d00b      	beq.n	8011dc2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011daa:	69fb      	ldr	r3, [r7, #28]
 8011dac:	795b      	ldrb	r3, [r3, #5]
 8011dae:	2b01      	cmp	r3, #1
 8011db0:	d007      	beq.n	8011dc2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011db2:	69fb      	ldr	r3, [r7, #28]
 8011db4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011db6:	2b04      	cmp	r3, #4
 8011db8:	d003      	beq.n	8011dc2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011dba:	69fb      	ldr	r3, [r7, #28]
 8011dbc:	795b      	ldrb	r3, [r3, #5]
 8011dbe:	2b05      	cmp	r3, #5
 8011dc0:	d103      	bne.n	8011dca <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8011dc2:	6a38      	ldr	r0, [r7, #32]
 8011dc4:	f7fe fb2a 	bl	801041c <dhcp_handle_nak>
 8011dc8:	e018      	b.n	8011dfc <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8011dca:	7cfb      	ldrb	r3, [r7, #19]
 8011dcc:	2b02      	cmp	r3, #2
 8011dce:	d108      	bne.n	8011de2 <dhcp_recv+0x162>
 8011dd0:	69fb      	ldr	r3, [r7, #28]
 8011dd2:	795b      	ldrb	r3, [r3, #5]
 8011dd4:	2b06      	cmp	r3, #6
 8011dd6:	d104      	bne.n	8011de2 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8011dd8:	6979      	ldr	r1, [r7, #20]
 8011dda:	6a38      	ldr	r0, [r7, #32]
 8011ddc:	f7fe fb6c 	bl	80104b8 <dhcp_handle_offer>
 8011de0:	e00c      	b.n	8011dfc <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8011de2:	bf00      	nop
 8011de4:	e00a      	b.n	8011dfc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8011de6:	bf00      	nop
 8011de8:	e008      	b.n	8011dfc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8011dea:	bf00      	nop
 8011dec:	e006      	b.n	8011dfc <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8011dee:	bf00      	nop
 8011df0:	e004      	b.n	8011dfc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8011df2:	bf00      	nop
 8011df4:	e002      	b.n	8011dfc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8011df6:	bf00      	nop
 8011df8:	e000      	b.n	8011dfc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8011dfa:	bf00      	nop
  pbuf_free(p);
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f004 f8cb 	bl	8015f98 <pbuf_free>
}
 8011e02:	bf00      	nop
 8011e04:	3728      	adds	r7, #40	; 0x28
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	2000897c 	.word	0x2000897c
 8011e10:	20008954 	.word	0x20008954
 8011e14:	2000895c 	.word	0x2000895c

08011e18 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b088      	sub	sp, #32
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	60f8      	str	r0, [r7, #12]
 8011e20:	60b9      	str	r1, [r7, #8]
 8011e22:	603b      	str	r3, [r7, #0]
 8011e24:	4613      	mov	r3, r2
 8011e26:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d108      	bne.n	8011e40 <dhcp_create_msg+0x28>
 8011e2e:	4b5f      	ldr	r3, [pc, #380]	; (8011fac <dhcp_create_msg+0x194>)
 8011e30:	f240 7269 	movw	r2, #1897	; 0x769
 8011e34:	495e      	ldr	r1, [pc, #376]	; (8011fb0 <dhcp_create_msg+0x198>)
 8011e36:	485f      	ldr	r0, [pc, #380]	; (8011fb4 <dhcp_create_msg+0x19c>)
 8011e38:	f00b fc5e 	bl	801d6f8 <iprintf>
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	e0b1      	b.n	8011fa4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d108      	bne.n	8011e58 <dhcp_create_msg+0x40>
 8011e46:	4b59      	ldr	r3, [pc, #356]	; (8011fac <dhcp_create_msg+0x194>)
 8011e48:	f240 726a 	movw	r2, #1898	; 0x76a
 8011e4c:	495a      	ldr	r1, [pc, #360]	; (8011fb8 <dhcp_create_msg+0x1a0>)
 8011e4e:	4859      	ldr	r0, [pc, #356]	; (8011fb4 <dhcp_create_msg+0x19c>)
 8011e50:	f00b fc52 	bl	801d6f8 <iprintf>
 8011e54:	2300      	movs	r3, #0
 8011e56:	e0a5      	b.n	8011fa4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8011e58:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e5c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8011e60:	2036      	movs	r0, #54	; 0x36
 8011e62:	f003 fdb9 	bl	80159d8 <pbuf_alloc>
 8011e66:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8011e68:	69bb      	ldr	r3, [r7, #24]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d101      	bne.n	8011e72 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	e098      	b.n	8011fa4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8011e72:	69bb      	ldr	r3, [r7, #24]
 8011e74:	895b      	ldrh	r3, [r3, #10]
 8011e76:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8011e7a:	d206      	bcs.n	8011e8a <dhcp_create_msg+0x72>
 8011e7c:	4b4b      	ldr	r3, [pc, #300]	; (8011fac <dhcp_create_msg+0x194>)
 8011e7e:	f240 7272 	movw	r2, #1906	; 0x772
 8011e82:	494e      	ldr	r1, [pc, #312]	; (8011fbc <dhcp_create_msg+0x1a4>)
 8011e84:	484b      	ldr	r0, [pc, #300]	; (8011fb4 <dhcp_create_msg+0x19c>)
 8011e86:	f00b fc37 	bl	801d6f8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8011e8a:	79fb      	ldrb	r3, [r7, #7]
 8011e8c:	2b03      	cmp	r3, #3
 8011e8e:	d103      	bne.n	8011e98 <dhcp_create_msg+0x80>
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	795b      	ldrb	r3, [r3, #5]
 8011e94:	2b03      	cmp	r3, #3
 8011e96:	d10d      	bne.n	8011eb4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	799b      	ldrb	r3, [r3, #6]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d105      	bne.n	8011eac <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8011ea0:	f00b fc42 	bl	801d728 <rand>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	4b45      	ldr	r3, [pc, #276]	; (8011fc0 <dhcp_create_msg+0x1a8>)
 8011eaa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8011eac:	4b44      	ldr	r3, [pc, #272]	; (8011fc0 <dhcp_create_msg+0x1a8>)
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8011eb4:	69bb      	ldr	r3, [r7, #24]
 8011eb6:	685b      	ldr	r3, [r3, #4]
 8011eb8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8011eba:	f44f 729a 	mov.w	r2, #308	; 0x134
 8011ebe:	2100      	movs	r1, #0
 8011ec0:	6978      	ldr	r0, [r7, #20]
 8011ec2:	f00a ffd6 	bl	801ce72 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8011ec6:	697b      	ldr	r3, [r7, #20]
 8011ec8:	2201      	movs	r2, #1
 8011eca:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	2201      	movs	r2, #1
 8011ed0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7fe fa06 	bl	80102f2 <lwip_htonl>
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8011eec:	79fb      	ldrb	r3, [r7, #7]
 8011eee:	2b08      	cmp	r3, #8
 8011ef0:	d010      	beq.n	8011f14 <dhcp_create_msg+0xfc>
 8011ef2:	79fb      	ldrb	r3, [r7, #7]
 8011ef4:	2b04      	cmp	r3, #4
 8011ef6:	d00d      	beq.n	8011f14 <dhcp_create_msg+0xfc>
 8011ef8:	79fb      	ldrb	r3, [r7, #7]
 8011efa:	2b07      	cmp	r3, #7
 8011efc:	d00a      	beq.n	8011f14 <dhcp_create_msg+0xfc>
 8011efe:	79fb      	ldrb	r3, [r7, #7]
 8011f00:	2b03      	cmp	r3, #3
 8011f02:	d10c      	bne.n	8011f1e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8011f08:	2b05      	cmp	r3, #5
 8011f0a:	d003      	beq.n	8011f14 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	795b      	ldrb	r3, [r3, #5]
 8011f10:	2b04      	cmp	r3, #4
 8011f12:	d104      	bne.n	8011f1e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	3304      	adds	r3, #4
 8011f18:	681a      	ldr	r2, [r3, #0]
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011f1e:	2300      	movs	r3, #0
 8011f20:	83fb      	strh	r3, [r7, #30]
 8011f22:	e00c      	b.n	8011f3e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8011f24:	8bfa      	ldrh	r2, [r7, #30]
 8011f26:	8bfb      	ldrh	r3, [r7, #30]
 8011f28:	68f9      	ldr	r1, [r7, #12]
 8011f2a:	440a      	add	r2, r1
 8011f2c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8011f30:	697a      	ldr	r2, [r7, #20]
 8011f32:	4413      	add	r3, r2
 8011f34:	460a      	mov	r2, r1
 8011f36:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011f38:	8bfb      	ldrh	r3, [r7, #30]
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	83fb      	strh	r3, [r7, #30]
 8011f3e:	8bfb      	ldrh	r3, [r7, #30]
 8011f40:	2b05      	cmp	r3, #5
 8011f42:	d9ef      	bls.n	8011f24 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	2200      	movs	r2, #0
 8011f48:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8011f4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8011f50:	2200      	movs	r2, #0
 8011f52:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8011f56:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8011f60:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8011f64:	2200      	movs	r2, #0
 8011f66:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8011f6a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011f74:	2301      	movs	r3, #1
 8011f76:	2235      	movs	r2, #53	; 0x35
 8011f78:	2000      	movs	r0, #0
 8011f7a:	f7ff fadd 	bl	8011538 <dhcp_option>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8011f82:	697b      	ldr	r3, [r7, #20]
 8011f84:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011f88:	79fa      	ldrb	r2, [r7, #7]
 8011f8a:	8a7b      	ldrh	r3, [r7, #18]
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f7ff fb07 	bl	80115a0 <dhcp_option_byte>
 8011f92:	4603      	mov	r3, r0
 8011f94:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d002      	beq.n	8011fa2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	8a7a      	ldrh	r2, [r7, #18]
 8011fa0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8011fa2:	69bb      	ldr	r3, [r7, #24]
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3720      	adds	r7, #32
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	0801f91c 	.word	0x0801f91c
 8011fb0:	0801fc58 	.word	0x0801fc58
 8011fb4:	0801f998 	.word	0x0801f998
 8011fb8:	0801fc78 	.word	0x0801fc78
 8011fbc:	0801fc98 	.word	0x0801fc98
 8011fc0:	200075d4 	.word	0x200075d4

08011fc4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b084      	sub	sp, #16
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	4603      	mov	r3, r0
 8011fcc:	60b9      	str	r1, [r7, #8]
 8011fce:	607a      	str	r2, [r7, #4]
 8011fd0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8011fd2:	89fb      	ldrh	r3, [r7, #14]
 8011fd4:	1c5a      	adds	r2, r3, #1
 8011fd6:	81fa      	strh	r2, [r7, #14]
 8011fd8:	461a      	mov	r2, r3
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	4413      	add	r3, r2
 8011fde:	22ff      	movs	r2, #255	; 0xff
 8011fe0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011fe2:	e007      	b.n	8011ff4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8011fe4:	89fb      	ldrh	r3, [r7, #14]
 8011fe6:	1c5a      	adds	r2, r3, #1
 8011fe8:	81fa      	strh	r2, [r7, #14]
 8011fea:	461a      	mov	r2, r3
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	4413      	add	r3, r2
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011ff4:	89fb      	ldrh	r3, [r7, #14]
 8011ff6:	2b43      	cmp	r3, #67	; 0x43
 8011ff8:	d904      	bls.n	8012004 <dhcp_option_trailer+0x40>
 8011ffa:	89fb      	ldrh	r3, [r7, #14]
 8011ffc:	f003 0303 	and.w	r3, r3, #3
 8012000:	2b00      	cmp	r3, #0
 8012002:	d002      	beq.n	801200a <dhcp_option_trailer+0x46>
 8012004:	89fb      	ldrh	r3, [r7, #14]
 8012006:	2b43      	cmp	r3, #67	; 0x43
 8012008:	d9ec      	bls.n	8011fe4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801200a:	89fb      	ldrh	r3, [r7, #14]
 801200c:	33f0      	adds	r3, #240	; 0xf0
 801200e:	b29b      	uxth	r3, r3
 8012010:	4619      	mov	r1, r3
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f003 fe3a 	bl	8015c8c <pbuf_realloc>
}
 8012018:	bf00      	nop
 801201a:	3710      	adds	r7, #16
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8012020:	b480      	push	{r7}
 8012022:	b085      	sub	sp, #20
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d017      	beq.n	801205e <dhcp_supplied_address+0x3e>
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012032:	2b00      	cmp	r3, #0
 8012034:	d013      	beq.n	801205e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801203a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	795b      	ldrb	r3, [r3, #5]
 8012040:	2b0a      	cmp	r3, #10
 8012042:	d007      	beq.n	8012054 <dhcp_supplied_address+0x34>
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	795b      	ldrb	r3, [r3, #5]
 8012048:	2b05      	cmp	r3, #5
 801204a:	d003      	beq.n	8012054 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012050:	2b04      	cmp	r3, #4
 8012052:	d101      	bne.n	8012058 <dhcp_supplied_address+0x38>
 8012054:	2301      	movs	r3, #1
 8012056:	e000      	b.n	801205a <dhcp_supplied_address+0x3a>
 8012058:	2300      	movs	r3, #0
 801205a:	b2db      	uxtb	r3, r3
 801205c:	e000      	b.n	8012060 <dhcp_supplied_address+0x40>
  }
  return 0;
 801205e:	2300      	movs	r3, #0
}
 8012060:	4618      	mov	r0, r3
 8012062:	3714      	adds	r7, #20
 8012064:	46bd      	mov	sp, r7
 8012066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206a:	4770      	bx	lr

0801206c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b082      	sub	sp, #8
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012074:	4915      	ldr	r1, [pc, #84]	; (80120cc <etharp_free_entry+0x60>)
 8012076:	687a      	ldr	r2, [r7, #4]
 8012078:	4613      	mov	r3, r2
 801207a:	005b      	lsls	r3, r3, #1
 801207c:	4413      	add	r3, r2
 801207e:	00db      	lsls	r3, r3, #3
 8012080:	440b      	add	r3, r1
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d013      	beq.n	80120b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012088:	4910      	ldr	r1, [pc, #64]	; (80120cc <etharp_free_entry+0x60>)
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	4613      	mov	r3, r2
 801208e:	005b      	lsls	r3, r3, #1
 8012090:	4413      	add	r3, r2
 8012092:	00db      	lsls	r3, r3, #3
 8012094:	440b      	add	r3, r1
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	4618      	mov	r0, r3
 801209a:	f003 ff7d 	bl	8015f98 <pbuf_free>
    arp_table[i].q = NULL;
 801209e:	490b      	ldr	r1, [pc, #44]	; (80120cc <etharp_free_entry+0x60>)
 80120a0:	687a      	ldr	r2, [r7, #4]
 80120a2:	4613      	mov	r3, r2
 80120a4:	005b      	lsls	r3, r3, #1
 80120a6:	4413      	add	r3, r2
 80120a8:	00db      	lsls	r3, r3, #3
 80120aa:	440b      	add	r3, r1
 80120ac:	2200      	movs	r2, #0
 80120ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80120b0:	4906      	ldr	r1, [pc, #24]	; (80120cc <etharp_free_entry+0x60>)
 80120b2:	687a      	ldr	r2, [r7, #4]
 80120b4:	4613      	mov	r3, r2
 80120b6:	005b      	lsls	r3, r3, #1
 80120b8:	4413      	add	r3, r2
 80120ba:	00db      	lsls	r3, r3, #3
 80120bc:	440b      	add	r3, r1
 80120be:	3314      	adds	r3, #20
 80120c0:	2200      	movs	r2, #0
 80120c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80120c4:	bf00      	nop
 80120c6:	3708      	adds	r7, #8
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}
 80120cc:	200075d8 	.word	0x200075d8

080120d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b082      	sub	sp, #8
 80120d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80120d6:	2300      	movs	r3, #0
 80120d8:	607b      	str	r3, [r7, #4]
 80120da:	e096      	b.n	801220a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80120dc:	494f      	ldr	r1, [pc, #316]	; (801221c <etharp_tmr+0x14c>)
 80120de:	687a      	ldr	r2, [r7, #4]
 80120e0:	4613      	mov	r3, r2
 80120e2:	005b      	lsls	r3, r3, #1
 80120e4:	4413      	add	r3, r2
 80120e6:	00db      	lsls	r3, r3, #3
 80120e8:	440b      	add	r3, r1
 80120ea:	3314      	adds	r3, #20
 80120ec:	781b      	ldrb	r3, [r3, #0]
 80120ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80120f0:	78fb      	ldrb	r3, [r7, #3]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	f000 8086 	beq.w	8012204 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80120f8:	4948      	ldr	r1, [pc, #288]	; (801221c <etharp_tmr+0x14c>)
 80120fa:	687a      	ldr	r2, [r7, #4]
 80120fc:	4613      	mov	r3, r2
 80120fe:	005b      	lsls	r3, r3, #1
 8012100:	4413      	add	r3, r2
 8012102:	00db      	lsls	r3, r3, #3
 8012104:	440b      	add	r3, r1
 8012106:	3312      	adds	r3, #18
 8012108:	881b      	ldrh	r3, [r3, #0]
 801210a:	3301      	adds	r3, #1
 801210c:	b298      	uxth	r0, r3
 801210e:	4943      	ldr	r1, [pc, #268]	; (801221c <etharp_tmr+0x14c>)
 8012110:	687a      	ldr	r2, [r7, #4]
 8012112:	4613      	mov	r3, r2
 8012114:	005b      	lsls	r3, r3, #1
 8012116:	4413      	add	r3, r2
 8012118:	00db      	lsls	r3, r3, #3
 801211a:	440b      	add	r3, r1
 801211c:	3312      	adds	r3, #18
 801211e:	4602      	mov	r2, r0
 8012120:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012122:	493e      	ldr	r1, [pc, #248]	; (801221c <etharp_tmr+0x14c>)
 8012124:	687a      	ldr	r2, [r7, #4]
 8012126:	4613      	mov	r3, r2
 8012128:	005b      	lsls	r3, r3, #1
 801212a:	4413      	add	r3, r2
 801212c:	00db      	lsls	r3, r3, #3
 801212e:	440b      	add	r3, r1
 8012130:	3312      	adds	r3, #18
 8012132:	881b      	ldrh	r3, [r3, #0]
 8012134:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012138:	d215      	bcs.n	8012166 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801213a:	4938      	ldr	r1, [pc, #224]	; (801221c <etharp_tmr+0x14c>)
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	4613      	mov	r3, r2
 8012140:	005b      	lsls	r3, r3, #1
 8012142:	4413      	add	r3, r2
 8012144:	00db      	lsls	r3, r3, #3
 8012146:	440b      	add	r3, r1
 8012148:	3314      	adds	r3, #20
 801214a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801214c:	2b01      	cmp	r3, #1
 801214e:	d10e      	bne.n	801216e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012150:	4932      	ldr	r1, [pc, #200]	; (801221c <etharp_tmr+0x14c>)
 8012152:	687a      	ldr	r2, [r7, #4]
 8012154:	4613      	mov	r3, r2
 8012156:	005b      	lsls	r3, r3, #1
 8012158:	4413      	add	r3, r2
 801215a:	00db      	lsls	r3, r3, #3
 801215c:	440b      	add	r3, r1
 801215e:	3312      	adds	r3, #18
 8012160:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012162:	2b04      	cmp	r3, #4
 8012164:	d903      	bls.n	801216e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f7ff ff80 	bl	801206c <etharp_free_entry>
 801216c:	e04a      	b.n	8012204 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801216e:	492b      	ldr	r1, [pc, #172]	; (801221c <etharp_tmr+0x14c>)
 8012170:	687a      	ldr	r2, [r7, #4]
 8012172:	4613      	mov	r3, r2
 8012174:	005b      	lsls	r3, r3, #1
 8012176:	4413      	add	r3, r2
 8012178:	00db      	lsls	r3, r3, #3
 801217a:	440b      	add	r3, r1
 801217c:	3314      	adds	r3, #20
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	2b03      	cmp	r3, #3
 8012182:	d10a      	bne.n	801219a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012184:	4925      	ldr	r1, [pc, #148]	; (801221c <etharp_tmr+0x14c>)
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	4613      	mov	r3, r2
 801218a:	005b      	lsls	r3, r3, #1
 801218c:	4413      	add	r3, r2
 801218e:	00db      	lsls	r3, r3, #3
 8012190:	440b      	add	r3, r1
 8012192:	3314      	adds	r3, #20
 8012194:	2204      	movs	r2, #4
 8012196:	701a      	strb	r2, [r3, #0]
 8012198:	e034      	b.n	8012204 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801219a:	4920      	ldr	r1, [pc, #128]	; (801221c <etharp_tmr+0x14c>)
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	4613      	mov	r3, r2
 80121a0:	005b      	lsls	r3, r3, #1
 80121a2:	4413      	add	r3, r2
 80121a4:	00db      	lsls	r3, r3, #3
 80121a6:	440b      	add	r3, r1
 80121a8:	3314      	adds	r3, #20
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	2b04      	cmp	r3, #4
 80121ae:	d10a      	bne.n	80121c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80121b0:	491a      	ldr	r1, [pc, #104]	; (801221c <etharp_tmr+0x14c>)
 80121b2:	687a      	ldr	r2, [r7, #4]
 80121b4:	4613      	mov	r3, r2
 80121b6:	005b      	lsls	r3, r3, #1
 80121b8:	4413      	add	r3, r2
 80121ba:	00db      	lsls	r3, r3, #3
 80121bc:	440b      	add	r3, r1
 80121be:	3314      	adds	r3, #20
 80121c0:	2202      	movs	r2, #2
 80121c2:	701a      	strb	r2, [r3, #0]
 80121c4:	e01e      	b.n	8012204 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80121c6:	4915      	ldr	r1, [pc, #84]	; (801221c <etharp_tmr+0x14c>)
 80121c8:	687a      	ldr	r2, [r7, #4]
 80121ca:	4613      	mov	r3, r2
 80121cc:	005b      	lsls	r3, r3, #1
 80121ce:	4413      	add	r3, r2
 80121d0:	00db      	lsls	r3, r3, #3
 80121d2:	440b      	add	r3, r1
 80121d4:	3314      	adds	r3, #20
 80121d6:	781b      	ldrb	r3, [r3, #0]
 80121d8:	2b01      	cmp	r3, #1
 80121da:	d113      	bne.n	8012204 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80121dc:	490f      	ldr	r1, [pc, #60]	; (801221c <etharp_tmr+0x14c>)
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	4613      	mov	r3, r2
 80121e2:	005b      	lsls	r3, r3, #1
 80121e4:	4413      	add	r3, r2
 80121e6:	00db      	lsls	r3, r3, #3
 80121e8:	440b      	add	r3, r1
 80121ea:	3308      	adds	r3, #8
 80121ec:	6818      	ldr	r0, [r3, #0]
 80121ee:	687a      	ldr	r2, [r7, #4]
 80121f0:	4613      	mov	r3, r2
 80121f2:	005b      	lsls	r3, r3, #1
 80121f4:	4413      	add	r3, r2
 80121f6:	00db      	lsls	r3, r3, #3
 80121f8:	4a08      	ldr	r2, [pc, #32]	; (801221c <etharp_tmr+0x14c>)
 80121fa:	4413      	add	r3, r2
 80121fc:	3304      	adds	r3, #4
 80121fe:	4619      	mov	r1, r3
 8012200:	f000 fe72 	bl	8012ee8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	3301      	adds	r3, #1
 8012208:	607b      	str	r3, [r7, #4]
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2b09      	cmp	r3, #9
 801220e:	f77f af65 	ble.w	80120dc <etharp_tmr+0xc>
      }
    }
  }
}
 8012212:	bf00      	nop
 8012214:	3708      	adds	r7, #8
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
 801221a:	bf00      	nop
 801221c:	200075d8 	.word	0x200075d8

08012220 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b08a      	sub	sp, #40	; 0x28
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	460b      	mov	r3, r1
 801222a:	607a      	str	r2, [r7, #4]
 801222c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801222e:	230a      	movs	r3, #10
 8012230:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012232:	230a      	movs	r3, #10
 8012234:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012236:	230a      	movs	r3, #10
 8012238:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801223a:	2300      	movs	r3, #0
 801223c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801223e:	230a      	movs	r3, #10
 8012240:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012242:	2300      	movs	r3, #0
 8012244:	83bb      	strh	r3, [r7, #28]
 8012246:	2300      	movs	r3, #0
 8012248:	837b      	strh	r3, [r7, #26]
 801224a:	2300      	movs	r3, #0
 801224c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801224e:	2300      	movs	r3, #0
 8012250:	843b      	strh	r3, [r7, #32]
 8012252:	e0ae      	b.n	80123b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012254:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012258:	49a6      	ldr	r1, [pc, #664]	; (80124f4 <etharp_find_entry+0x2d4>)
 801225a:	4613      	mov	r3, r2
 801225c:	005b      	lsls	r3, r3, #1
 801225e:	4413      	add	r3, r2
 8012260:	00db      	lsls	r3, r3, #3
 8012262:	440b      	add	r3, r1
 8012264:	3314      	adds	r3, #20
 8012266:	781b      	ldrb	r3, [r3, #0]
 8012268:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801226a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801226e:	2b0a      	cmp	r3, #10
 8012270:	d105      	bne.n	801227e <etharp_find_entry+0x5e>
 8012272:	7dfb      	ldrb	r3, [r7, #23]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d102      	bne.n	801227e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012278:	8c3b      	ldrh	r3, [r7, #32]
 801227a:	847b      	strh	r3, [r7, #34]	; 0x22
 801227c:	e095      	b.n	80123aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801227e:	7dfb      	ldrb	r3, [r7, #23]
 8012280:	2b00      	cmp	r3, #0
 8012282:	f000 8092 	beq.w	80123aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012286:	7dfb      	ldrb	r3, [r7, #23]
 8012288:	2b01      	cmp	r3, #1
 801228a:	d009      	beq.n	80122a0 <etharp_find_entry+0x80>
 801228c:	7dfb      	ldrb	r3, [r7, #23]
 801228e:	2b01      	cmp	r3, #1
 8012290:	d806      	bhi.n	80122a0 <etharp_find_entry+0x80>
 8012292:	4b99      	ldr	r3, [pc, #612]	; (80124f8 <etharp_find_entry+0x2d8>)
 8012294:	f44f 7292 	mov.w	r2, #292	; 0x124
 8012298:	4998      	ldr	r1, [pc, #608]	; (80124fc <etharp_find_entry+0x2dc>)
 801229a:	4899      	ldr	r0, [pc, #612]	; (8012500 <etharp_find_entry+0x2e0>)
 801229c:	f00b fa2c 	bl	801d6f8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d020      	beq.n	80122e8 <etharp_find_entry+0xc8>
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	6819      	ldr	r1, [r3, #0]
 80122aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122ae:	4891      	ldr	r0, [pc, #580]	; (80124f4 <etharp_find_entry+0x2d4>)
 80122b0:	4613      	mov	r3, r2
 80122b2:	005b      	lsls	r3, r3, #1
 80122b4:	4413      	add	r3, r2
 80122b6:	00db      	lsls	r3, r3, #3
 80122b8:	4403      	add	r3, r0
 80122ba:	3304      	adds	r3, #4
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	4299      	cmp	r1, r3
 80122c0:	d112      	bne.n	80122e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d00c      	beq.n	80122e2 <etharp_find_entry+0xc2>
 80122c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122cc:	4989      	ldr	r1, [pc, #548]	; (80124f4 <etharp_find_entry+0x2d4>)
 80122ce:	4613      	mov	r3, r2
 80122d0:	005b      	lsls	r3, r3, #1
 80122d2:	4413      	add	r3, r2
 80122d4:	00db      	lsls	r3, r3, #3
 80122d6:	440b      	add	r3, r1
 80122d8:	3308      	adds	r3, #8
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	687a      	ldr	r2, [r7, #4]
 80122de:	429a      	cmp	r2, r3
 80122e0:	d102      	bne.n	80122e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80122e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122e6:	e100      	b.n	80124ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80122e8:	7dfb      	ldrb	r3, [r7, #23]
 80122ea:	2b01      	cmp	r3, #1
 80122ec:	d140      	bne.n	8012370 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80122ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122f2:	4980      	ldr	r1, [pc, #512]	; (80124f4 <etharp_find_entry+0x2d4>)
 80122f4:	4613      	mov	r3, r2
 80122f6:	005b      	lsls	r3, r3, #1
 80122f8:	4413      	add	r3, r2
 80122fa:	00db      	lsls	r3, r3, #3
 80122fc:	440b      	add	r3, r1
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d01a      	beq.n	801233a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012304:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012308:	497a      	ldr	r1, [pc, #488]	; (80124f4 <etharp_find_entry+0x2d4>)
 801230a:	4613      	mov	r3, r2
 801230c:	005b      	lsls	r3, r3, #1
 801230e:	4413      	add	r3, r2
 8012310:	00db      	lsls	r3, r3, #3
 8012312:	440b      	add	r3, r1
 8012314:	3312      	adds	r3, #18
 8012316:	881b      	ldrh	r3, [r3, #0]
 8012318:	8bba      	ldrh	r2, [r7, #28]
 801231a:	429a      	cmp	r2, r3
 801231c:	d845      	bhi.n	80123aa <etharp_find_entry+0x18a>
            old_queue = i;
 801231e:	8c3b      	ldrh	r3, [r7, #32]
 8012320:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012322:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012326:	4973      	ldr	r1, [pc, #460]	; (80124f4 <etharp_find_entry+0x2d4>)
 8012328:	4613      	mov	r3, r2
 801232a:	005b      	lsls	r3, r3, #1
 801232c:	4413      	add	r3, r2
 801232e:	00db      	lsls	r3, r3, #3
 8012330:	440b      	add	r3, r1
 8012332:	3312      	adds	r3, #18
 8012334:	881b      	ldrh	r3, [r3, #0]
 8012336:	83bb      	strh	r3, [r7, #28]
 8012338:	e037      	b.n	80123aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801233a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801233e:	496d      	ldr	r1, [pc, #436]	; (80124f4 <etharp_find_entry+0x2d4>)
 8012340:	4613      	mov	r3, r2
 8012342:	005b      	lsls	r3, r3, #1
 8012344:	4413      	add	r3, r2
 8012346:	00db      	lsls	r3, r3, #3
 8012348:	440b      	add	r3, r1
 801234a:	3312      	adds	r3, #18
 801234c:	881b      	ldrh	r3, [r3, #0]
 801234e:	8b7a      	ldrh	r2, [r7, #26]
 8012350:	429a      	cmp	r2, r3
 8012352:	d82a      	bhi.n	80123aa <etharp_find_entry+0x18a>
            old_pending = i;
 8012354:	8c3b      	ldrh	r3, [r7, #32]
 8012356:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012358:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801235c:	4965      	ldr	r1, [pc, #404]	; (80124f4 <etharp_find_entry+0x2d4>)
 801235e:	4613      	mov	r3, r2
 8012360:	005b      	lsls	r3, r3, #1
 8012362:	4413      	add	r3, r2
 8012364:	00db      	lsls	r3, r3, #3
 8012366:	440b      	add	r3, r1
 8012368:	3312      	adds	r3, #18
 801236a:	881b      	ldrh	r3, [r3, #0]
 801236c:	837b      	strh	r3, [r7, #26]
 801236e:	e01c      	b.n	80123aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012370:	7dfb      	ldrb	r3, [r7, #23]
 8012372:	2b01      	cmp	r3, #1
 8012374:	d919      	bls.n	80123aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012376:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801237a:	495e      	ldr	r1, [pc, #376]	; (80124f4 <etharp_find_entry+0x2d4>)
 801237c:	4613      	mov	r3, r2
 801237e:	005b      	lsls	r3, r3, #1
 8012380:	4413      	add	r3, r2
 8012382:	00db      	lsls	r3, r3, #3
 8012384:	440b      	add	r3, r1
 8012386:	3312      	adds	r3, #18
 8012388:	881b      	ldrh	r3, [r3, #0]
 801238a:	8b3a      	ldrh	r2, [r7, #24]
 801238c:	429a      	cmp	r2, r3
 801238e:	d80c      	bhi.n	80123aa <etharp_find_entry+0x18a>
            old_stable = i;
 8012390:	8c3b      	ldrh	r3, [r7, #32]
 8012392:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012394:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012398:	4956      	ldr	r1, [pc, #344]	; (80124f4 <etharp_find_entry+0x2d4>)
 801239a:	4613      	mov	r3, r2
 801239c:	005b      	lsls	r3, r3, #1
 801239e:	4413      	add	r3, r2
 80123a0:	00db      	lsls	r3, r3, #3
 80123a2:	440b      	add	r3, r1
 80123a4:	3312      	adds	r3, #18
 80123a6:	881b      	ldrh	r3, [r3, #0]
 80123a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80123aa:	8c3b      	ldrh	r3, [r7, #32]
 80123ac:	3301      	adds	r3, #1
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	843b      	strh	r3, [r7, #32]
 80123b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80123b6:	2b09      	cmp	r3, #9
 80123b8:	f77f af4c 	ble.w	8012254 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80123bc:	7afb      	ldrb	r3, [r7, #11]
 80123be:	f003 0302 	and.w	r3, r3, #2
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d108      	bne.n	80123d8 <etharp_find_entry+0x1b8>
 80123c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80123ca:	2b0a      	cmp	r3, #10
 80123cc:	d107      	bne.n	80123de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80123ce:	7afb      	ldrb	r3, [r7, #11]
 80123d0:	f003 0301 	and.w	r3, r3, #1
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d102      	bne.n	80123de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80123d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123dc:	e085      	b.n	80124ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80123de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80123e2:	2b09      	cmp	r3, #9
 80123e4:	dc02      	bgt.n	80123ec <etharp_find_entry+0x1cc>
    i = empty;
 80123e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123e8:	843b      	strh	r3, [r7, #32]
 80123ea:	e039      	b.n	8012460 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80123ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80123f0:	2b09      	cmp	r3, #9
 80123f2:	dc14      	bgt.n	801241e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80123f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80123f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123fc:	493d      	ldr	r1, [pc, #244]	; (80124f4 <etharp_find_entry+0x2d4>)
 80123fe:	4613      	mov	r3, r2
 8012400:	005b      	lsls	r3, r3, #1
 8012402:	4413      	add	r3, r2
 8012404:	00db      	lsls	r3, r3, #3
 8012406:	440b      	add	r3, r1
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d018      	beq.n	8012440 <etharp_find_entry+0x220>
 801240e:	4b3a      	ldr	r3, [pc, #232]	; (80124f8 <etharp_find_entry+0x2d8>)
 8012410:	f240 126d 	movw	r2, #365	; 0x16d
 8012414:	493b      	ldr	r1, [pc, #236]	; (8012504 <etharp_find_entry+0x2e4>)
 8012416:	483a      	ldr	r0, [pc, #232]	; (8012500 <etharp_find_entry+0x2e0>)
 8012418:	f00b f96e 	bl	801d6f8 <iprintf>
 801241c:	e010      	b.n	8012440 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801241e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012422:	2b09      	cmp	r3, #9
 8012424:	dc02      	bgt.n	801242c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012426:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012428:	843b      	strh	r3, [r7, #32]
 801242a:	e009      	b.n	8012440 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801242c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012430:	2b09      	cmp	r3, #9
 8012432:	dc02      	bgt.n	801243a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012434:	8bfb      	ldrh	r3, [r7, #30]
 8012436:	843b      	strh	r3, [r7, #32]
 8012438:	e002      	b.n	8012440 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801243a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801243e:	e054      	b.n	80124ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012440:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012444:	2b09      	cmp	r3, #9
 8012446:	dd06      	ble.n	8012456 <etharp_find_entry+0x236>
 8012448:	4b2b      	ldr	r3, [pc, #172]	; (80124f8 <etharp_find_entry+0x2d8>)
 801244a:	f240 127f 	movw	r2, #383	; 0x17f
 801244e:	492e      	ldr	r1, [pc, #184]	; (8012508 <etharp_find_entry+0x2e8>)
 8012450:	482b      	ldr	r0, [pc, #172]	; (8012500 <etharp_find_entry+0x2e0>)
 8012452:	f00b f951 	bl	801d6f8 <iprintf>
    etharp_free_entry(i);
 8012456:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801245a:	4618      	mov	r0, r3
 801245c:	f7ff fe06 	bl	801206c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012460:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012464:	2b09      	cmp	r3, #9
 8012466:	dd06      	ble.n	8012476 <etharp_find_entry+0x256>
 8012468:	4b23      	ldr	r3, [pc, #140]	; (80124f8 <etharp_find_entry+0x2d8>)
 801246a:	f240 1283 	movw	r2, #387	; 0x183
 801246e:	4926      	ldr	r1, [pc, #152]	; (8012508 <etharp_find_entry+0x2e8>)
 8012470:	4823      	ldr	r0, [pc, #140]	; (8012500 <etharp_find_entry+0x2e0>)
 8012472:	f00b f941 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012476:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801247a:	491e      	ldr	r1, [pc, #120]	; (80124f4 <etharp_find_entry+0x2d4>)
 801247c:	4613      	mov	r3, r2
 801247e:	005b      	lsls	r3, r3, #1
 8012480:	4413      	add	r3, r2
 8012482:	00db      	lsls	r3, r3, #3
 8012484:	440b      	add	r3, r1
 8012486:	3314      	adds	r3, #20
 8012488:	781b      	ldrb	r3, [r3, #0]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d006      	beq.n	801249c <etharp_find_entry+0x27c>
 801248e:	4b1a      	ldr	r3, [pc, #104]	; (80124f8 <etharp_find_entry+0x2d8>)
 8012490:	f240 1285 	movw	r2, #389	; 0x185
 8012494:	491d      	ldr	r1, [pc, #116]	; (801250c <etharp_find_entry+0x2ec>)
 8012496:	481a      	ldr	r0, [pc, #104]	; (8012500 <etharp_find_entry+0x2e0>)
 8012498:	f00b f92e 	bl	801d6f8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d00b      	beq.n	80124ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80124a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	6819      	ldr	r1, [r3, #0]
 80124aa:	4812      	ldr	r0, [pc, #72]	; (80124f4 <etharp_find_entry+0x2d4>)
 80124ac:	4613      	mov	r3, r2
 80124ae:	005b      	lsls	r3, r3, #1
 80124b0:	4413      	add	r3, r2
 80124b2:	00db      	lsls	r3, r3, #3
 80124b4:	4403      	add	r3, r0
 80124b6:	3304      	adds	r3, #4
 80124b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80124ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124be:	490d      	ldr	r1, [pc, #52]	; (80124f4 <etharp_find_entry+0x2d4>)
 80124c0:	4613      	mov	r3, r2
 80124c2:	005b      	lsls	r3, r3, #1
 80124c4:	4413      	add	r3, r2
 80124c6:	00db      	lsls	r3, r3, #3
 80124c8:	440b      	add	r3, r1
 80124ca:	3312      	adds	r3, #18
 80124cc:	2200      	movs	r2, #0
 80124ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80124d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124d4:	4907      	ldr	r1, [pc, #28]	; (80124f4 <etharp_find_entry+0x2d4>)
 80124d6:	4613      	mov	r3, r2
 80124d8:	005b      	lsls	r3, r3, #1
 80124da:	4413      	add	r3, r2
 80124dc:	00db      	lsls	r3, r3, #3
 80124de:	440b      	add	r3, r1
 80124e0:	3308      	adds	r3, #8
 80124e2:	687a      	ldr	r2, [r7, #4]
 80124e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80124e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80124ea:	4618      	mov	r0, r3
 80124ec:	3728      	adds	r7, #40	; 0x28
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}
 80124f2:	bf00      	nop
 80124f4:	200075d8 	.word	0x200075d8
 80124f8:	0801fcd8 	.word	0x0801fcd8
 80124fc:	0801fd2c 	.word	0x0801fd2c
 8012500:	0801fd6c 	.word	0x0801fd6c
 8012504:	0801fd94 	.word	0x0801fd94
 8012508:	0801fdac 	.word	0x0801fdac
 801250c:	0801fdc0 	.word	0x0801fdc0

08012510 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b088      	sub	sp, #32
 8012514:	af02      	add	r7, sp, #8
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	607a      	str	r2, [r7, #4]
 801251c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012524:	2b06      	cmp	r3, #6
 8012526:	d006      	beq.n	8012536 <etharp_update_arp_entry+0x26>
 8012528:	4b48      	ldr	r3, [pc, #288]	; (801264c <etharp_update_arp_entry+0x13c>)
 801252a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801252e:	4948      	ldr	r1, [pc, #288]	; (8012650 <etharp_update_arp_entry+0x140>)
 8012530:	4848      	ldr	r0, [pc, #288]	; (8012654 <etharp_update_arp_entry+0x144>)
 8012532:	f00b f8e1 	bl	801d6f8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d012      	beq.n	8012562 <etharp_update_arp_entry+0x52>
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d00e      	beq.n	8012562 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	68f9      	ldr	r1, [r7, #12]
 801254a:	4618      	mov	r0, r3
 801254c:	f001 faee 	bl	8013b2c <ip4_addr_isbroadcast_u32>
 8012550:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012552:	2b00      	cmp	r3, #0
 8012554:	d105      	bne.n	8012562 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801255e:	2be0      	cmp	r3, #224	; 0xe0
 8012560:	d102      	bne.n	8012568 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012562:	f06f 030f 	mvn.w	r3, #15
 8012566:	e06c      	b.n	8012642 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012568:	78fb      	ldrb	r3, [r7, #3]
 801256a:	68fa      	ldr	r2, [r7, #12]
 801256c:	4619      	mov	r1, r3
 801256e:	68b8      	ldr	r0, [r7, #8]
 8012570:	f7ff fe56 	bl	8012220 <etharp_find_entry>
 8012574:	4603      	mov	r3, r0
 8012576:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012578:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801257c:	2b00      	cmp	r3, #0
 801257e:	da02      	bge.n	8012586 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012580:	8afb      	ldrh	r3, [r7, #22]
 8012582:	b25b      	sxtb	r3, r3
 8012584:	e05d      	b.n	8012642 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012586:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801258a:	4933      	ldr	r1, [pc, #204]	; (8012658 <etharp_update_arp_entry+0x148>)
 801258c:	4613      	mov	r3, r2
 801258e:	005b      	lsls	r3, r3, #1
 8012590:	4413      	add	r3, r2
 8012592:	00db      	lsls	r3, r3, #3
 8012594:	440b      	add	r3, r1
 8012596:	3314      	adds	r3, #20
 8012598:	2202      	movs	r2, #2
 801259a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801259c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125a0:	492d      	ldr	r1, [pc, #180]	; (8012658 <etharp_update_arp_entry+0x148>)
 80125a2:	4613      	mov	r3, r2
 80125a4:	005b      	lsls	r3, r3, #1
 80125a6:	4413      	add	r3, r2
 80125a8:	00db      	lsls	r3, r3, #3
 80125aa:	440b      	add	r3, r1
 80125ac:	3308      	adds	r3, #8
 80125ae:	68fa      	ldr	r2, [r7, #12]
 80125b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80125b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125b6:	4613      	mov	r3, r2
 80125b8:	005b      	lsls	r3, r3, #1
 80125ba:	4413      	add	r3, r2
 80125bc:	00db      	lsls	r3, r3, #3
 80125be:	3308      	adds	r3, #8
 80125c0:	4a25      	ldr	r2, [pc, #148]	; (8012658 <etharp_update_arp_entry+0x148>)
 80125c2:	4413      	add	r3, r2
 80125c4:	3304      	adds	r3, #4
 80125c6:	2206      	movs	r2, #6
 80125c8:	6879      	ldr	r1, [r7, #4]
 80125ca:	4618      	mov	r0, r3
 80125cc:	f00a fc2d 	bl	801ce2a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80125d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125d4:	4920      	ldr	r1, [pc, #128]	; (8012658 <etharp_update_arp_entry+0x148>)
 80125d6:	4613      	mov	r3, r2
 80125d8:	005b      	lsls	r3, r3, #1
 80125da:	4413      	add	r3, r2
 80125dc:	00db      	lsls	r3, r3, #3
 80125de:	440b      	add	r3, r1
 80125e0:	3312      	adds	r3, #18
 80125e2:	2200      	movs	r2, #0
 80125e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80125e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125ea:	491b      	ldr	r1, [pc, #108]	; (8012658 <etharp_update_arp_entry+0x148>)
 80125ec:	4613      	mov	r3, r2
 80125ee:	005b      	lsls	r3, r3, #1
 80125f0:	4413      	add	r3, r2
 80125f2:	00db      	lsls	r3, r3, #3
 80125f4:	440b      	add	r3, r1
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d021      	beq.n	8012640 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80125fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012600:	4915      	ldr	r1, [pc, #84]	; (8012658 <etharp_update_arp_entry+0x148>)
 8012602:	4613      	mov	r3, r2
 8012604:	005b      	lsls	r3, r3, #1
 8012606:	4413      	add	r3, r2
 8012608:	00db      	lsls	r3, r3, #3
 801260a:	440b      	add	r3, r1
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012610:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012614:	4910      	ldr	r1, [pc, #64]	; (8012658 <etharp_update_arp_entry+0x148>)
 8012616:	4613      	mov	r3, r2
 8012618:	005b      	lsls	r3, r3, #1
 801261a:	4413      	add	r3, r2
 801261c:	00db      	lsls	r3, r3, #3
 801261e:	440b      	add	r3, r1
 8012620:	2200      	movs	r2, #0
 8012622:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801262a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801262e:	9300      	str	r3, [sp, #0]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6939      	ldr	r1, [r7, #16]
 8012634:	68f8      	ldr	r0, [r7, #12]
 8012636:	f000 fcf7 	bl	8013028 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801263a:	6938      	ldr	r0, [r7, #16]
 801263c:	f003 fcac 	bl	8015f98 <pbuf_free>
  }
  return ERR_OK;
 8012640:	2300      	movs	r3, #0
}
 8012642:	4618      	mov	r0, r3
 8012644:	3718      	adds	r7, #24
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	0801fcd8 	.word	0x0801fcd8
 8012650:	0801fdec 	.word	0x0801fdec
 8012654:	0801fd6c 	.word	0x0801fd6c
 8012658:	200075d8 	.word	0x200075d8

0801265c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b084      	sub	sp, #16
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012664:	2300      	movs	r3, #0
 8012666:	60fb      	str	r3, [r7, #12]
 8012668:	e01e      	b.n	80126a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801266a:	4913      	ldr	r1, [pc, #76]	; (80126b8 <etharp_cleanup_netif+0x5c>)
 801266c:	68fa      	ldr	r2, [r7, #12]
 801266e:	4613      	mov	r3, r2
 8012670:	005b      	lsls	r3, r3, #1
 8012672:	4413      	add	r3, r2
 8012674:	00db      	lsls	r3, r3, #3
 8012676:	440b      	add	r3, r1
 8012678:	3314      	adds	r3, #20
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801267e:	7afb      	ldrb	r3, [r7, #11]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d00e      	beq.n	80126a2 <etharp_cleanup_netif+0x46>
 8012684:	490c      	ldr	r1, [pc, #48]	; (80126b8 <etharp_cleanup_netif+0x5c>)
 8012686:	68fa      	ldr	r2, [r7, #12]
 8012688:	4613      	mov	r3, r2
 801268a:	005b      	lsls	r3, r3, #1
 801268c:	4413      	add	r3, r2
 801268e:	00db      	lsls	r3, r3, #3
 8012690:	440b      	add	r3, r1
 8012692:	3308      	adds	r3, #8
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	687a      	ldr	r2, [r7, #4]
 8012698:	429a      	cmp	r2, r3
 801269a:	d102      	bne.n	80126a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801269c:	68f8      	ldr	r0, [r7, #12]
 801269e:	f7ff fce5 	bl	801206c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	3301      	adds	r3, #1
 80126a6:	60fb      	str	r3, [r7, #12]
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	2b09      	cmp	r3, #9
 80126ac:	dddd      	ble.n	801266a <etharp_cleanup_netif+0xe>
    }
  }
}
 80126ae:	bf00      	nop
 80126b0:	3710      	adds	r7, #16
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}
 80126b6:	bf00      	nop
 80126b8:	200075d8 	.word	0x200075d8

080126bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80126bc:	b5b0      	push	{r4, r5, r7, lr}
 80126be:	b08a      	sub	sp, #40	; 0x28
 80126c0:	af04      	add	r7, sp, #16
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d107      	bne.n	80126dc <etharp_input+0x20>
 80126cc:	4b3f      	ldr	r3, [pc, #252]	; (80127cc <etharp_input+0x110>)
 80126ce:	f240 228a 	movw	r2, #650	; 0x28a
 80126d2:	493f      	ldr	r1, [pc, #252]	; (80127d0 <etharp_input+0x114>)
 80126d4:	483f      	ldr	r0, [pc, #252]	; (80127d4 <etharp_input+0x118>)
 80126d6:	f00b f80f 	bl	801d6f8 <iprintf>
 80126da:	e074      	b.n	80127c6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80126e2:	693b      	ldr	r3, [r7, #16]
 80126e4:	881b      	ldrh	r3, [r3, #0]
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80126ec:	d10c      	bne.n	8012708 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80126f2:	2b06      	cmp	r3, #6
 80126f4:	d108      	bne.n	8012708 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80126f6:	693b      	ldr	r3, [r7, #16]
 80126f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80126fa:	2b04      	cmp	r3, #4
 80126fc:	d104      	bne.n	8012708 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	885b      	ldrh	r3, [r3, #2]
 8012702:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012704:	2b08      	cmp	r3, #8
 8012706:	d003      	beq.n	8012710 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f003 fc45 	bl	8015f98 <pbuf_free>
    return;
 801270e:	e05a      	b.n	80127c6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	330e      	adds	r3, #14
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012718:	693b      	ldr	r3, [r7, #16]
 801271a:	3318      	adds	r3, #24
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	3304      	adds	r3, #4
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d102      	bne.n	8012730 <etharp_input+0x74>
    for_us = 0;
 801272a:	2300      	movs	r3, #0
 801272c:	75fb      	strb	r3, [r7, #23]
 801272e:	e009      	b.n	8012744 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012730:	68ba      	ldr	r2, [r7, #8]
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	3304      	adds	r3, #4
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	429a      	cmp	r2, r3
 801273a:	bf0c      	ite	eq
 801273c:	2301      	moveq	r3, #1
 801273e:	2300      	movne	r3, #0
 8012740:	b2db      	uxtb	r3, r3
 8012742:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	f103 0208 	add.w	r2, r3, #8
 801274a:	7dfb      	ldrb	r3, [r7, #23]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d001      	beq.n	8012754 <etharp_input+0x98>
 8012750:	2301      	movs	r3, #1
 8012752:	e000      	b.n	8012756 <etharp_input+0x9a>
 8012754:	2302      	movs	r3, #2
 8012756:	f107 010c 	add.w	r1, r7, #12
 801275a:	6838      	ldr	r0, [r7, #0]
 801275c:	f7ff fed8 	bl	8012510 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012760:	693b      	ldr	r3, [r7, #16]
 8012762:	88db      	ldrh	r3, [r3, #6]
 8012764:	b29b      	uxth	r3, r3
 8012766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801276a:	d003      	beq.n	8012774 <etharp_input+0xb8>
 801276c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012770:	d01e      	beq.n	80127b0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012772:	e025      	b.n	80127c0 <etharp_input+0x104>
      if (for_us) {
 8012774:	7dfb      	ldrb	r3, [r7, #23]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d021      	beq.n	80127be <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012790:	693a      	ldr	r2, [r7, #16]
 8012792:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012794:	2102      	movs	r1, #2
 8012796:	9103      	str	r1, [sp, #12]
 8012798:	f107 010c 	add.w	r1, r7, #12
 801279c:	9102      	str	r1, [sp, #8]
 801279e:	9201      	str	r2, [sp, #4]
 80127a0:	9300      	str	r3, [sp, #0]
 80127a2:	462b      	mov	r3, r5
 80127a4:	4622      	mov	r2, r4
 80127a6:	4601      	mov	r1, r0
 80127a8:	6838      	ldr	r0, [r7, #0]
 80127aa:	f000 faef 	bl	8012d8c <etharp_raw>
      break;
 80127ae:	e006      	b.n	80127be <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80127b0:	f107 030c 	add.w	r3, r7, #12
 80127b4:	4619      	mov	r1, r3
 80127b6:	6838      	ldr	r0, [r7, #0]
 80127b8:	f7fe f9fe 	bl	8010bb8 <dhcp_arp_reply>
      break;
 80127bc:	e000      	b.n	80127c0 <etharp_input+0x104>
      break;
 80127be:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f003 fbe9 	bl	8015f98 <pbuf_free>
}
 80127c6:	3718      	adds	r7, #24
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bdb0      	pop	{r4, r5, r7, pc}
 80127cc:	0801fcd8 	.word	0x0801fcd8
 80127d0:	0801fe44 	.word	0x0801fe44
 80127d4:	0801fd6c 	.word	0x0801fd6c

080127d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b086      	sub	sp, #24
 80127dc:	af02      	add	r7, sp, #8
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	60b9      	str	r1, [r7, #8]
 80127e2:	4613      	mov	r3, r2
 80127e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80127e6:	79fa      	ldrb	r2, [r7, #7]
 80127e8:	4944      	ldr	r1, [pc, #272]	; (80128fc <etharp_output_to_arp_index+0x124>)
 80127ea:	4613      	mov	r3, r2
 80127ec:	005b      	lsls	r3, r3, #1
 80127ee:	4413      	add	r3, r2
 80127f0:	00db      	lsls	r3, r3, #3
 80127f2:	440b      	add	r3, r1
 80127f4:	3314      	adds	r3, #20
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	2b01      	cmp	r3, #1
 80127fa:	d806      	bhi.n	801280a <etharp_output_to_arp_index+0x32>
 80127fc:	4b40      	ldr	r3, [pc, #256]	; (8012900 <etharp_output_to_arp_index+0x128>)
 80127fe:	f240 22ef 	movw	r2, #751	; 0x2ef
 8012802:	4940      	ldr	r1, [pc, #256]	; (8012904 <etharp_output_to_arp_index+0x12c>)
 8012804:	4840      	ldr	r0, [pc, #256]	; (8012908 <etharp_output_to_arp_index+0x130>)
 8012806:	f00a ff77 	bl	801d6f8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801280a:	79fa      	ldrb	r2, [r7, #7]
 801280c:	493b      	ldr	r1, [pc, #236]	; (80128fc <etharp_output_to_arp_index+0x124>)
 801280e:	4613      	mov	r3, r2
 8012810:	005b      	lsls	r3, r3, #1
 8012812:	4413      	add	r3, r2
 8012814:	00db      	lsls	r3, r3, #3
 8012816:	440b      	add	r3, r1
 8012818:	3314      	adds	r3, #20
 801281a:	781b      	ldrb	r3, [r3, #0]
 801281c:	2b02      	cmp	r3, #2
 801281e:	d153      	bne.n	80128c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012820:	79fa      	ldrb	r2, [r7, #7]
 8012822:	4936      	ldr	r1, [pc, #216]	; (80128fc <etharp_output_to_arp_index+0x124>)
 8012824:	4613      	mov	r3, r2
 8012826:	005b      	lsls	r3, r3, #1
 8012828:	4413      	add	r3, r2
 801282a:	00db      	lsls	r3, r3, #3
 801282c:	440b      	add	r3, r1
 801282e:	3312      	adds	r3, #18
 8012830:	881b      	ldrh	r3, [r3, #0]
 8012832:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012836:	d919      	bls.n	801286c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012838:	79fa      	ldrb	r2, [r7, #7]
 801283a:	4613      	mov	r3, r2
 801283c:	005b      	lsls	r3, r3, #1
 801283e:	4413      	add	r3, r2
 8012840:	00db      	lsls	r3, r3, #3
 8012842:	4a2e      	ldr	r2, [pc, #184]	; (80128fc <etharp_output_to_arp_index+0x124>)
 8012844:	4413      	add	r3, r2
 8012846:	3304      	adds	r3, #4
 8012848:	4619      	mov	r1, r3
 801284a:	68f8      	ldr	r0, [r7, #12]
 801284c:	f000 fb4c 	bl	8012ee8 <etharp_request>
 8012850:	4603      	mov	r3, r0
 8012852:	2b00      	cmp	r3, #0
 8012854:	d138      	bne.n	80128c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012856:	79fa      	ldrb	r2, [r7, #7]
 8012858:	4928      	ldr	r1, [pc, #160]	; (80128fc <etharp_output_to_arp_index+0x124>)
 801285a:	4613      	mov	r3, r2
 801285c:	005b      	lsls	r3, r3, #1
 801285e:	4413      	add	r3, r2
 8012860:	00db      	lsls	r3, r3, #3
 8012862:	440b      	add	r3, r1
 8012864:	3314      	adds	r3, #20
 8012866:	2203      	movs	r2, #3
 8012868:	701a      	strb	r2, [r3, #0]
 801286a:	e02d      	b.n	80128c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801286c:	79fa      	ldrb	r2, [r7, #7]
 801286e:	4923      	ldr	r1, [pc, #140]	; (80128fc <etharp_output_to_arp_index+0x124>)
 8012870:	4613      	mov	r3, r2
 8012872:	005b      	lsls	r3, r3, #1
 8012874:	4413      	add	r3, r2
 8012876:	00db      	lsls	r3, r3, #3
 8012878:	440b      	add	r3, r1
 801287a:	3312      	adds	r3, #18
 801287c:	881b      	ldrh	r3, [r3, #0]
 801287e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012882:	d321      	bcc.n	80128c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012884:	79fa      	ldrb	r2, [r7, #7]
 8012886:	4613      	mov	r3, r2
 8012888:	005b      	lsls	r3, r3, #1
 801288a:	4413      	add	r3, r2
 801288c:	00db      	lsls	r3, r3, #3
 801288e:	4a1b      	ldr	r2, [pc, #108]	; (80128fc <etharp_output_to_arp_index+0x124>)
 8012890:	4413      	add	r3, r2
 8012892:	1d19      	adds	r1, r3, #4
 8012894:	79fa      	ldrb	r2, [r7, #7]
 8012896:	4613      	mov	r3, r2
 8012898:	005b      	lsls	r3, r3, #1
 801289a:	4413      	add	r3, r2
 801289c:	00db      	lsls	r3, r3, #3
 801289e:	3308      	adds	r3, #8
 80128a0:	4a16      	ldr	r2, [pc, #88]	; (80128fc <etharp_output_to_arp_index+0x124>)
 80128a2:	4413      	add	r3, r2
 80128a4:	3304      	adds	r3, #4
 80128a6:	461a      	mov	r2, r3
 80128a8:	68f8      	ldr	r0, [r7, #12]
 80128aa:	f000 fafb 	bl	8012ea4 <etharp_request_dst>
 80128ae:	4603      	mov	r3, r0
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d109      	bne.n	80128c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80128b4:	79fa      	ldrb	r2, [r7, #7]
 80128b6:	4911      	ldr	r1, [pc, #68]	; (80128fc <etharp_output_to_arp_index+0x124>)
 80128b8:	4613      	mov	r3, r2
 80128ba:	005b      	lsls	r3, r3, #1
 80128bc:	4413      	add	r3, r2
 80128be:	00db      	lsls	r3, r3, #3
 80128c0:	440b      	add	r3, r1
 80128c2:	3314      	adds	r3, #20
 80128c4:	2203      	movs	r2, #3
 80128c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80128ce:	79fa      	ldrb	r2, [r7, #7]
 80128d0:	4613      	mov	r3, r2
 80128d2:	005b      	lsls	r3, r3, #1
 80128d4:	4413      	add	r3, r2
 80128d6:	00db      	lsls	r3, r3, #3
 80128d8:	3308      	adds	r3, #8
 80128da:	4a08      	ldr	r2, [pc, #32]	; (80128fc <etharp_output_to_arp_index+0x124>)
 80128dc:	4413      	add	r3, r2
 80128de:	1d1a      	adds	r2, r3, #4
 80128e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80128e4:	9300      	str	r3, [sp, #0]
 80128e6:	4613      	mov	r3, r2
 80128e8:	460a      	mov	r2, r1
 80128ea:	68b9      	ldr	r1, [r7, #8]
 80128ec:	68f8      	ldr	r0, [r7, #12]
 80128ee:	f000 fb9b 	bl	8013028 <ethernet_output>
 80128f2:	4603      	mov	r3, r0
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	3710      	adds	r7, #16
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	200075d8 	.word	0x200075d8
 8012900:	0801fcd8 	.word	0x0801fcd8
 8012904:	0801fe64 	.word	0x0801fe64
 8012908:	0801fd6c 	.word	0x0801fd6c

0801290c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b08a      	sub	sp, #40	; 0x28
 8012910:	af02      	add	r7, sp, #8
 8012912:	60f8      	str	r0, [r7, #12]
 8012914:	60b9      	str	r1, [r7, #8]
 8012916:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d106      	bne.n	8012930 <etharp_output+0x24>
 8012922:	4b73      	ldr	r3, [pc, #460]	; (8012af0 <etharp_output+0x1e4>)
 8012924:	f240 321e 	movw	r2, #798	; 0x31e
 8012928:	4972      	ldr	r1, [pc, #456]	; (8012af4 <etharp_output+0x1e8>)
 801292a:	4873      	ldr	r0, [pc, #460]	; (8012af8 <etharp_output+0x1ec>)
 801292c:	f00a fee4 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d106      	bne.n	8012944 <etharp_output+0x38>
 8012936:	4b6e      	ldr	r3, [pc, #440]	; (8012af0 <etharp_output+0x1e4>)
 8012938:	f240 321f 	movw	r2, #799	; 0x31f
 801293c:	496f      	ldr	r1, [pc, #444]	; (8012afc <etharp_output+0x1f0>)
 801293e:	486e      	ldr	r0, [pc, #440]	; (8012af8 <etharp_output+0x1ec>)
 8012940:	f00a feda 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d106      	bne.n	8012958 <etharp_output+0x4c>
 801294a:	4b69      	ldr	r3, [pc, #420]	; (8012af0 <etharp_output+0x1e4>)
 801294c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012950:	496b      	ldr	r1, [pc, #428]	; (8012b00 <etharp_output+0x1f4>)
 8012952:	4869      	ldr	r0, [pc, #420]	; (8012af8 <etharp_output+0x1ec>)
 8012954:	f00a fed0 	bl	801d6f8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	68f9      	ldr	r1, [r7, #12]
 801295e:	4618      	mov	r0, r3
 8012960:	f001 f8e4 	bl	8013b2c <ip4_addr_isbroadcast_u32>
 8012964:	4603      	mov	r3, r0
 8012966:	2b00      	cmp	r3, #0
 8012968:	d002      	beq.n	8012970 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801296a:	4b66      	ldr	r3, [pc, #408]	; (8012b04 <etharp_output+0x1f8>)
 801296c:	61fb      	str	r3, [r7, #28]
 801296e:	e0af      	b.n	8012ad0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012978:	2be0      	cmp	r3, #224	; 0xe0
 801297a:	d118      	bne.n	80129ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801297c:	2301      	movs	r3, #1
 801297e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012980:	2300      	movs	r3, #0
 8012982:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012984:	235e      	movs	r3, #94	; 0x5e
 8012986:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	3301      	adds	r3, #1
 801298c:	781b      	ldrb	r3, [r3, #0]
 801298e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012992:	b2db      	uxtb	r3, r3
 8012994:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	3302      	adds	r3, #2
 801299a:	781b      	ldrb	r3, [r3, #0]
 801299c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	3303      	adds	r3, #3
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80129a6:	f107 0310 	add.w	r3, r7, #16
 80129aa:	61fb      	str	r3, [r7, #28]
 80129ac:	e090      	b.n	8012ad0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681a      	ldr	r2, [r3, #0]
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	3304      	adds	r3, #4
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	405a      	eors	r2, r3
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	3308      	adds	r3, #8
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	4013      	ands	r3, r2
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d012      	beq.n	80129ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80129cc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80129d0:	4293      	cmp	r3, r2
 80129d2:	d00b      	beq.n	80129ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	330c      	adds	r3, #12
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d003      	beq.n	80129e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	330c      	adds	r3, #12
 80129e2:	61bb      	str	r3, [r7, #24]
 80129e4:	e002      	b.n	80129ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80129e6:	f06f 0303 	mvn.w	r3, #3
 80129ea:	e07d      	b.n	8012ae8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80129ec:	4b46      	ldr	r3, [pc, #280]	; (8012b08 <etharp_output+0x1fc>)
 80129ee:	781b      	ldrb	r3, [r3, #0]
 80129f0:	4619      	mov	r1, r3
 80129f2:	4a46      	ldr	r2, [pc, #280]	; (8012b0c <etharp_output+0x200>)
 80129f4:	460b      	mov	r3, r1
 80129f6:	005b      	lsls	r3, r3, #1
 80129f8:	440b      	add	r3, r1
 80129fa:	00db      	lsls	r3, r3, #3
 80129fc:	4413      	add	r3, r2
 80129fe:	3314      	adds	r3, #20
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d925      	bls.n	8012a52 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012a06:	4b40      	ldr	r3, [pc, #256]	; (8012b08 <etharp_output+0x1fc>)
 8012a08:	781b      	ldrb	r3, [r3, #0]
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	4a3f      	ldr	r2, [pc, #252]	; (8012b0c <etharp_output+0x200>)
 8012a0e:	460b      	mov	r3, r1
 8012a10:	005b      	lsls	r3, r3, #1
 8012a12:	440b      	add	r3, r1
 8012a14:	00db      	lsls	r3, r3, #3
 8012a16:	4413      	add	r3, r2
 8012a18:	3308      	adds	r3, #8
 8012a1a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012a1c:	68fa      	ldr	r2, [r7, #12]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d117      	bne.n	8012a52 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012a22:	69bb      	ldr	r3, [r7, #24]
 8012a24:	681a      	ldr	r2, [r3, #0]
 8012a26:	4b38      	ldr	r3, [pc, #224]	; (8012b08 <etharp_output+0x1fc>)
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	4937      	ldr	r1, [pc, #220]	; (8012b0c <etharp_output+0x200>)
 8012a2e:	4603      	mov	r3, r0
 8012a30:	005b      	lsls	r3, r3, #1
 8012a32:	4403      	add	r3, r0
 8012a34:	00db      	lsls	r3, r3, #3
 8012a36:	440b      	add	r3, r1
 8012a38:	3304      	adds	r3, #4
 8012a3a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d108      	bne.n	8012a52 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012a40:	4b31      	ldr	r3, [pc, #196]	; (8012b08 <etharp_output+0x1fc>)
 8012a42:	781b      	ldrb	r3, [r3, #0]
 8012a44:	461a      	mov	r2, r3
 8012a46:	68b9      	ldr	r1, [r7, #8]
 8012a48:	68f8      	ldr	r0, [r7, #12]
 8012a4a:	f7ff fec5 	bl	80127d8 <etharp_output_to_arp_index>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	e04a      	b.n	8012ae8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012a52:	2300      	movs	r3, #0
 8012a54:	75fb      	strb	r3, [r7, #23]
 8012a56:	e031      	b.n	8012abc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012a58:	7dfa      	ldrb	r2, [r7, #23]
 8012a5a:	492c      	ldr	r1, [pc, #176]	; (8012b0c <etharp_output+0x200>)
 8012a5c:	4613      	mov	r3, r2
 8012a5e:	005b      	lsls	r3, r3, #1
 8012a60:	4413      	add	r3, r2
 8012a62:	00db      	lsls	r3, r3, #3
 8012a64:	440b      	add	r3, r1
 8012a66:	3314      	adds	r3, #20
 8012a68:	781b      	ldrb	r3, [r3, #0]
 8012a6a:	2b01      	cmp	r3, #1
 8012a6c:	d923      	bls.n	8012ab6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012a6e:	7dfa      	ldrb	r2, [r7, #23]
 8012a70:	4926      	ldr	r1, [pc, #152]	; (8012b0c <etharp_output+0x200>)
 8012a72:	4613      	mov	r3, r2
 8012a74:	005b      	lsls	r3, r3, #1
 8012a76:	4413      	add	r3, r2
 8012a78:	00db      	lsls	r3, r3, #3
 8012a7a:	440b      	add	r3, r1
 8012a7c:	3308      	adds	r3, #8
 8012a7e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012a80:	68fa      	ldr	r2, [r7, #12]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d117      	bne.n	8012ab6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	6819      	ldr	r1, [r3, #0]
 8012a8a:	7dfa      	ldrb	r2, [r7, #23]
 8012a8c:	481f      	ldr	r0, [pc, #124]	; (8012b0c <etharp_output+0x200>)
 8012a8e:	4613      	mov	r3, r2
 8012a90:	005b      	lsls	r3, r3, #1
 8012a92:	4413      	add	r3, r2
 8012a94:	00db      	lsls	r3, r3, #3
 8012a96:	4403      	add	r3, r0
 8012a98:	3304      	adds	r3, #4
 8012a9a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012a9c:	4299      	cmp	r1, r3
 8012a9e:	d10a      	bne.n	8012ab6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012aa0:	4a19      	ldr	r2, [pc, #100]	; (8012b08 <etharp_output+0x1fc>)
 8012aa2:	7dfb      	ldrb	r3, [r7, #23]
 8012aa4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012aa6:	7dfb      	ldrb	r3, [r7, #23]
 8012aa8:	461a      	mov	r2, r3
 8012aaa:	68b9      	ldr	r1, [r7, #8]
 8012aac:	68f8      	ldr	r0, [r7, #12]
 8012aae:	f7ff fe93 	bl	80127d8 <etharp_output_to_arp_index>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	e018      	b.n	8012ae8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012ab6:	7dfb      	ldrb	r3, [r7, #23]
 8012ab8:	3301      	adds	r3, #1
 8012aba:	75fb      	strb	r3, [r7, #23]
 8012abc:	7dfb      	ldrb	r3, [r7, #23]
 8012abe:	2b09      	cmp	r3, #9
 8012ac0:	d9ca      	bls.n	8012a58 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012ac2:	68ba      	ldr	r2, [r7, #8]
 8012ac4:	69b9      	ldr	r1, [r7, #24]
 8012ac6:	68f8      	ldr	r0, [r7, #12]
 8012ac8:	f000 f822 	bl	8012b10 <etharp_query>
 8012acc:	4603      	mov	r3, r0
 8012ace:	e00b      	b.n	8012ae8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8012ad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012ada:	9300      	str	r3, [sp, #0]
 8012adc:	69fb      	ldr	r3, [r7, #28]
 8012ade:	68b9      	ldr	r1, [r7, #8]
 8012ae0:	68f8      	ldr	r0, [r7, #12]
 8012ae2:	f000 faa1 	bl	8013028 <ethernet_output>
 8012ae6:	4603      	mov	r3, r0
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3720      	adds	r7, #32
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}
 8012af0:	0801fcd8 	.word	0x0801fcd8
 8012af4:	0801fe44 	.word	0x0801fe44
 8012af8:	0801fd6c 	.word	0x0801fd6c
 8012afc:	0801fe94 	.word	0x0801fe94
 8012b00:	0801fe34 	.word	0x0801fe34
 8012b04:	0802299c 	.word	0x0802299c
 8012b08:	200076c8 	.word	0x200076c8
 8012b0c:	200075d8 	.word	0x200075d8

08012b10 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b08c      	sub	sp, #48	; 0x30
 8012b14:	af02      	add	r7, sp, #8
 8012b16:	60f8      	str	r0, [r7, #12]
 8012b18:	60b9      	str	r1, [r7, #8]
 8012b1a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	332a      	adds	r3, #42	; 0x2a
 8012b20:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012b22:	23ff      	movs	r3, #255	; 0xff
 8012b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	68f9      	ldr	r1, [r7, #12]
 8012b32:	4618      	mov	r0, r3
 8012b34:	f000 fffa 	bl	8013b2c <ip4_addr_isbroadcast_u32>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d10c      	bne.n	8012b58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012b46:	2be0      	cmp	r3, #224	; 0xe0
 8012b48:	d006      	beq.n	8012b58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d003      	beq.n	8012b58 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d102      	bne.n	8012b5e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012b58:	f06f 030f 	mvn.w	r3, #15
 8012b5c:	e102      	b.n	8012d64 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012b5e:	68fa      	ldr	r2, [r7, #12]
 8012b60:	2101      	movs	r1, #1
 8012b62:	68b8      	ldr	r0, [r7, #8]
 8012b64:	f7ff fb5c 	bl	8012220 <etharp_find_entry>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012b6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	da02      	bge.n	8012b7a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012b74:	8a7b      	ldrh	r3, [r7, #18]
 8012b76:	b25b      	sxtb	r3, r3
 8012b78:	e0f4      	b.n	8012d64 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012b7a:	8a7b      	ldrh	r3, [r7, #18]
 8012b7c:	2b7e      	cmp	r3, #126	; 0x7e
 8012b7e:	d906      	bls.n	8012b8e <etharp_query+0x7e>
 8012b80:	4b7a      	ldr	r3, [pc, #488]	; (8012d6c <etharp_query+0x25c>)
 8012b82:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012b86:	497a      	ldr	r1, [pc, #488]	; (8012d70 <etharp_query+0x260>)
 8012b88:	487a      	ldr	r0, [pc, #488]	; (8012d74 <etharp_query+0x264>)
 8012b8a:	f00a fdb5 	bl	801d6f8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012b8e:	8a7b      	ldrh	r3, [r7, #18]
 8012b90:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012b92:	7c7a      	ldrb	r2, [r7, #17]
 8012b94:	4978      	ldr	r1, [pc, #480]	; (8012d78 <etharp_query+0x268>)
 8012b96:	4613      	mov	r3, r2
 8012b98:	005b      	lsls	r3, r3, #1
 8012b9a:	4413      	add	r3, r2
 8012b9c:	00db      	lsls	r3, r3, #3
 8012b9e:	440b      	add	r3, r1
 8012ba0:	3314      	adds	r3, #20
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d115      	bne.n	8012bd4 <etharp_query+0xc4>
    is_new_entry = 1;
 8012ba8:	2301      	movs	r3, #1
 8012baa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012bac:	7c7a      	ldrb	r2, [r7, #17]
 8012bae:	4972      	ldr	r1, [pc, #456]	; (8012d78 <etharp_query+0x268>)
 8012bb0:	4613      	mov	r3, r2
 8012bb2:	005b      	lsls	r3, r3, #1
 8012bb4:	4413      	add	r3, r2
 8012bb6:	00db      	lsls	r3, r3, #3
 8012bb8:	440b      	add	r3, r1
 8012bba:	3314      	adds	r3, #20
 8012bbc:	2201      	movs	r2, #1
 8012bbe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012bc0:	7c7a      	ldrb	r2, [r7, #17]
 8012bc2:	496d      	ldr	r1, [pc, #436]	; (8012d78 <etharp_query+0x268>)
 8012bc4:	4613      	mov	r3, r2
 8012bc6:	005b      	lsls	r3, r3, #1
 8012bc8:	4413      	add	r3, r2
 8012bca:	00db      	lsls	r3, r3, #3
 8012bcc:	440b      	add	r3, r1
 8012bce:	3308      	adds	r3, #8
 8012bd0:	68fa      	ldr	r2, [r7, #12]
 8012bd2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012bd4:	7c7a      	ldrb	r2, [r7, #17]
 8012bd6:	4968      	ldr	r1, [pc, #416]	; (8012d78 <etharp_query+0x268>)
 8012bd8:	4613      	mov	r3, r2
 8012bda:	005b      	lsls	r3, r3, #1
 8012bdc:	4413      	add	r3, r2
 8012bde:	00db      	lsls	r3, r3, #3
 8012be0:	440b      	add	r3, r1
 8012be2:	3314      	adds	r3, #20
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	2b01      	cmp	r3, #1
 8012be8:	d011      	beq.n	8012c0e <etharp_query+0xfe>
 8012bea:	7c7a      	ldrb	r2, [r7, #17]
 8012bec:	4962      	ldr	r1, [pc, #392]	; (8012d78 <etharp_query+0x268>)
 8012bee:	4613      	mov	r3, r2
 8012bf0:	005b      	lsls	r3, r3, #1
 8012bf2:	4413      	add	r3, r2
 8012bf4:	00db      	lsls	r3, r3, #3
 8012bf6:	440b      	add	r3, r1
 8012bf8:	3314      	adds	r3, #20
 8012bfa:	781b      	ldrb	r3, [r3, #0]
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d806      	bhi.n	8012c0e <etharp_query+0xfe>
 8012c00:	4b5a      	ldr	r3, [pc, #360]	; (8012d6c <etharp_query+0x25c>)
 8012c02:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012c06:	495d      	ldr	r1, [pc, #372]	; (8012d7c <etharp_query+0x26c>)
 8012c08:	485a      	ldr	r0, [pc, #360]	; (8012d74 <etharp_query+0x264>)
 8012c0a:	f00a fd75 	bl	801d6f8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012c0e:	6a3b      	ldr	r3, [r7, #32]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d102      	bne.n	8012c1a <etharp_query+0x10a>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d10c      	bne.n	8012c34 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012c1a:	68b9      	ldr	r1, [r7, #8]
 8012c1c:	68f8      	ldr	r0, [r7, #12]
 8012c1e:	f000 f963 	bl	8012ee8 <etharp_request>
 8012c22:	4603      	mov	r3, r0
 8012c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d102      	bne.n	8012c34 <etharp_query+0x124>
      return result;
 8012c2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012c32:	e097      	b.n	8012d64 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d106      	bne.n	8012c48 <etharp_query+0x138>
 8012c3a:	4b4c      	ldr	r3, [pc, #304]	; (8012d6c <etharp_query+0x25c>)
 8012c3c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012c40:	494f      	ldr	r1, [pc, #316]	; (8012d80 <etharp_query+0x270>)
 8012c42:	484c      	ldr	r0, [pc, #304]	; (8012d74 <etharp_query+0x264>)
 8012c44:	f00a fd58 	bl	801d6f8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012c48:	7c7a      	ldrb	r2, [r7, #17]
 8012c4a:	494b      	ldr	r1, [pc, #300]	; (8012d78 <etharp_query+0x268>)
 8012c4c:	4613      	mov	r3, r2
 8012c4e:	005b      	lsls	r3, r3, #1
 8012c50:	4413      	add	r3, r2
 8012c52:	00db      	lsls	r3, r3, #3
 8012c54:	440b      	add	r3, r1
 8012c56:	3314      	adds	r3, #20
 8012c58:	781b      	ldrb	r3, [r3, #0]
 8012c5a:	2b01      	cmp	r3, #1
 8012c5c:	d918      	bls.n	8012c90 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012c5e:	4a49      	ldr	r2, [pc, #292]	; (8012d84 <etharp_query+0x274>)
 8012c60:	7c7b      	ldrb	r3, [r7, #17]
 8012c62:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012c64:	7c7a      	ldrb	r2, [r7, #17]
 8012c66:	4613      	mov	r3, r2
 8012c68:	005b      	lsls	r3, r3, #1
 8012c6a:	4413      	add	r3, r2
 8012c6c:	00db      	lsls	r3, r3, #3
 8012c6e:	3308      	adds	r3, #8
 8012c70:	4a41      	ldr	r2, [pc, #260]	; (8012d78 <etharp_query+0x268>)
 8012c72:	4413      	add	r3, r2
 8012c74:	1d1a      	adds	r2, r3, #4
 8012c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012c7a:	9300      	str	r3, [sp, #0]
 8012c7c:	4613      	mov	r3, r2
 8012c7e:	697a      	ldr	r2, [r7, #20]
 8012c80:	6879      	ldr	r1, [r7, #4]
 8012c82:	68f8      	ldr	r0, [r7, #12]
 8012c84:	f000 f9d0 	bl	8013028 <ethernet_output>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012c8e:	e067      	b.n	8012d60 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012c90:	7c7a      	ldrb	r2, [r7, #17]
 8012c92:	4939      	ldr	r1, [pc, #228]	; (8012d78 <etharp_query+0x268>)
 8012c94:	4613      	mov	r3, r2
 8012c96:	005b      	lsls	r3, r3, #1
 8012c98:	4413      	add	r3, r2
 8012c9a:	00db      	lsls	r3, r3, #3
 8012c9c:	440b      	add	r3, r1
 8012c9e:	3314      	adds	r3, #20
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	2b01      	cmp	r3, #1
 8012ca4:	d15c      	bne.n	8012d60 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012cae:	e01c      	b.n	8012cea <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012cb0:	69fb      	ldr	r3, [r7, #28]
 8012cb2:	895a      	ldrh	r2, [r3, #10]
 8012cb4:	69fb      	ldr	r3, [r7, #28]
 8012cb6:	891b      	ldrh	r3, [r3, #8]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d10a      	bne.n	8012cd2 <etharp_query+0x1c2>
 8012cbc:	69fb      	ldr	r3, [r7, #28]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d006      	beq.n	8012cd2 <etharp_query+0x1c2>
 8012cc4:	4b29      	ldr	r3, [pc, #164]	; (8012d6c <etharp_query+0x25c>)
 8012cc6:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012cca:	492f      	ldr	r1, [pc, #188]	; (8012d88 <etharp_query+0x278>)
 8012ccc:	4829      	ldr	r0, [pc, #164]	; (8012d74 <etharp_query+0x264>)
 8012cce:	f00a fd13 	bl	801d6f8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012cd2:	69fb      	ldr	r3, [r7, #28]
 8012cd4:	7b1b      	ldrb	r3, [r3, #12]
 8012cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d002      	beq.n	8012ce4 <etharp_query+0x1d4>
        copy_needed = 1;
 8012cde:	2301      	movs	r3, #1
 8012ce0:	61bb      	str	r3, [r7, #24]
        break;
 8012ce2:	e005      	b.n	8012cf0 <etharp_query+0x1e0>
      }
      p = p->next;
 8012ce4:	69fb      	ldr	r3, [r7, #28]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012cea:	69fb      	ldr	r3, [r7, #28]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d1df      	bne.n	8012cb0 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8012cf0:	69bb      	ldr	r3, [r7, #24]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d007      	beq.n	8012d06 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012cfc:	200e      	movs	r0, #14
 8012cfe:	f003 fbc3 	bl	8016488 <pbuf_clone>
 8012d02:	61f8      	str	r0, [r7, #28]
 8012d04:	e004      	b.n	8012d10 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012d0a:	69f8      	ldr	r0, [r7, #28]
 8012d0c:	f003 f9ea 	bl	80160e4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012d10:	69fb      	ldr	r3, [r7, #28]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d021      	beq.n	8012d5a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012d16:	7c7a      	ldrb	r2, [r7, #17]
 8012d18:	4917      	ldr	r1, [pc, #92]	; (8012d78 <etharp_query+0x268>)
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	005b      	lsls	r3, r3, #1
 8012d1e:	4413      	add	r3, r2
 8012d20:	00db      	lsls	r3, r3, #3
 8012d22:	440b      	add	r3, r1
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d00a      	beq.n	8012d40 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012d2a:	7c7a      	ldrb	r2, [r7, #17]
 8012d2c:	4912      	ldr	r1, [pc, #72]	; (8012d78 <etharp_query+0x268>)
 8012d2e:	4613      	mov	r3, r2
 8012d30:	005b      	lsls	r3, r3, #1
 8012d32:	4413      	add	r3, r2
 8012d34:	00db      	lsls	r3, r3, #3
 8012d36:	440b      	add	r3, r1
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f003 f92c 	bl	8015f98 <pbuf_free>
      }
      arp_table[i].q = p;
 8012d40:	7c7a      	ldrb	r2, [r7, #17]
 8012d42:	490d      	ldr	r1, [pc, #52]	; (8012d78 <etharp_query+0x268>)
 8012d44:	4613      	mov	r3, r2
 8012d46:	005b      	lsls	r3, r3, #1
 8012d48:	4413      	add	r3, r2
 8012d4a:	00db      	lsls	r3, r3, #3
 8012d4c:	440b      	add	r3, r1
 8012d4e:	69fa      	ldr	r2, [r7, #28]
 8012d50:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012d52:	2300      	movs	r3, #0
 8012d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012d58:	e002      	b.n	8012d60 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012d5a:	23ff      	movs	r3, #255	; 0xff
 8012d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012d60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3728      	adds	r7, #40	; 0x28
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}
 8012d6c:	0801fcd8 	.word	0x0801fcd8
 8012d70:	0801fea0 	.word	0x0801fea0
 8012d74:	0801fd6c 	.word	0x0801fd6c
 8012d78:	200075d8 	.word	0x200075d8
 8012d7c:	0801feb0 	.word	0x0801feb0
 8012d80:	0801fe94 	.word	0x0801fe94
 8012d84:	200076c8 	.word	0x200076c8
 8012d88:	0801fed8 	.word	0x0801fed8

08012d8c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b08a      	sub	sp, #40	; 0x28
 8012d90:	af02      	add	r7, sp, #8
 8012d92:	60f8      	str	r0, [r7, #12]
 8012d94:	60b9      	str	r1, [r7, #8]
 8012d96:	607a      	str	r2, [r7, #4]
 8012d98:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d106      	bne.n	8012db2 <etharp_raw+0x26>
 8012da4:	4b3a      	ldr	r3, [pc, #232]	; (8012e90 <etharp_raw+0x104>)
 8012da6:	f240 4257 	movw	r2, #1111	; 0x457
 8012daa:	493a      	ldr	r1, [pc, #232]	; (8012e94 <etharp_raw+0x108>)
 8012dac:	483a      	ldr	r0, [pc, #232]	; (8012e98 <etharp_raw+0x10c>)
 8012dae:	f00a fca3 	bl	801d6f8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012db2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012db6:	211c      	movs	r1, #28
 8012db8:	200e      	movs	r0, #14
 8012dba:	f002 fe0d 	bl	80159d8 <pbuf_alloc>
 8012dbe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012dc0:	69bb      	ldr	r3, [r7, #24]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d102      	bne.n	8012dcc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dca:	e05d      	b.n	8012e88 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012dcc:	69bb      	ldr	r3, [r7, #24]
 8012dce:	895b      	ldrh	r3, [r3, #10]
 8012dd0:	2b1b      	cmp	r3, #27
 8012dd2:	d806      	bhi.n	8012de2 <etharp_raw+0x56>
 8012dd4:	4b2e      	ldr	r3, [pc, #184]	; (8012e90 <etharp_raw+0x104>)
 8012dd6:	f240 4263 	movw	r2, #1123	; 0x463
 8012dda:	4930      	ldr	r1, [pc, #192]	; (8012e9c <etharp_raw+0x110>)
 8012ddc:	482e      	ldr	r0, [pc, #184]	; (8012e98 <etharp_raw+0x10c>)
 8012dde:	f00a fc8b 	bl	801d6f8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012de2:	69bb      	ldr	r3, [r7, #24]
 8012de4:	685b      	ldr	r3, [r3, #4]
 8012de6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012de8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7fd fa6c 	bl	80102c8 <lwip_htons>
 8012df0:	4603      	mov	r3, r0
 8012df2:	461a      	mov	r2, r3
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012dfe:	2b06      	cmp	r3, #6
 8012e00:	d006      	beq.n	8012e10 <etharp_raw+0x84>
 8012e02:	4b23      	ldr	r3, [pc, #140]	; (8012e90 <etharp_raw+0x104>)
 8012e04:	f240 426a 	movw	r2, #1130	; 0x46a
 8012e08:	4925      	ldr	r1, [pc, #148]	; (8012ea0 <etharp_raw+0x114>)
 8012e0a:	4823      	ldr	r0, [pc, #140]	; (8012e98 <etharp_raw+0x10c>)
 8012e0c:	f00a fc74 	bl	801d6f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	3308      	adds	r3, #8
 8012e14:	2206      	movs	r2, #6
 8012e16:	6839      	ldr	r1, [r7, #0]
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f00a f806 	bl	801ce2a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	3312      	adds	r3, #18
 8012e22:	2206      	movs	r2, #6
 8012e24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e26:	4618      	mov	r0, r3
 8012e28:	f009 ffff 	bl	801ce2a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012e2c:	697b      	ldr	r3, [r7, #20]
 8012e2e:	330e      	adds	r3, #14
 8012e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e32:	6812      	ldr	r2, [r2, #0]
 8012e34:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	3318      	adds	r3, #24
 8012e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e3c:	6812      	ldr	r2, [r2, #0]
 8012e3e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	2200      	movs	r2, #0
 8012e44:	701a      	strb	r2, [r3, #0]
 8012e46:	2200      	movs	r2, #0
 8012e48:	f042 0201 	orr.w	r2, r2, #1
 8012e4c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	2200      	movs	r2, #0
 8012e52:	f042 0208 	orr.w	r2, r2, #8
 8012e56:	709a      	strb	r2, [r3, #2]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012e5c:	697b      	ldr	r3, [r7, #20]
 8012e5e:	2206      	movs	r2, #6
 8012e60:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	2204      	movs	r2, #4
 8012e66:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012e68:	f640 0306 	movw	r3, #2054	; 0x806
 8012e6c:	9300      	str	r3, [sp, #0]
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	68ba      	ldr	r2, [r7, #8]
 8012e72:	69b9      	ldr	r1, [r7, #24]
 8012e74:	68f8      	ldr	r0, [r7, #12]
 8012e76:	f000 f8d7 	bl	8013028 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012e7a:	69b8      	ldr	r0, [r7, #24]
 8012e7c:	f003 f88c 	bl	8015f98 <pbuf_free>
  p = NULL;
 8012e80:	2300      	movs	r3, #0
 8012e82:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012e84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3720      	adds	r7, #32
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}
 8012e90:	0801fcd8 	.word	0x0801fcd8
 8012e94:	0801fe44 	.word	0x0801fe44
 8012e98:	0801fd6c 	.word	0x0801fd6c
 8012e9c:	0801fef4 	.word	0x0801fef4
 8012ea0:	0801ff28 	.word	0x0801ff28

08012ea4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b088      	sub	sp, #32
 8012ea8:	af04      	add	r7, sp, #16
 8012eaa:	60f8      	str	r0, [r7, #12]
 8012eac:	60b9      	str	r1, [r7, #8]
 8012eae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012ec0:	2201      	movs	r2, #1
 8012ec2:	9203      	str	r2, [sp, #12]
 8012ec4:	68ba      	ldr	r2, [r7, #8]
 8012ec6:	9202      	str	r2, [sp, #8]
 8012ec8:	4a06      	ldr	r2, [pc, #24]	; (8012ee4 <etharp_request_dst+0x40>)
 8012eca:	9201      	str	r2, [sp, #4]
 8012ecc:	9300      	str	r3, [sp, #0]
 8012ece:	4603      	mov	r3, r0
 8012ed0:	687a      	ldr	r2, [r7, #4]
 8012ed2:	68f8      	ldr	r0, [r7, #12]
 8012ed4:	f7ff ff5a 	bl	8012d8c <etharp_raw>
 8012ed8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	3710      	adds	r7, #16
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}
 8012ee2:	bf00      	nop
 8012ee4:	080229a4 	.word	0x080229a4

08012ee8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
 8012ef0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012ef2:	4a05      	ldr	r2, [pc, #20]	; (8012f08 <etharp_request+0x20>)
 8012ef4:	6839      	ldr	r1, [r7, #0]
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f7ff ffd4 	bl	8012ea4 <etharp_request_dst>
 8012efc:	4603      	mov	r3, r0
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	3708      	adds	r7, #8
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	0802299c 	.word	0x0802299c

08012f0c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b086      	sub	sp, #24
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012f16:	230e      	movs	r3, #14
 8012f18:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	895b      	ldrh	r3, [r3, #10]
 8012f1e:	2b0e      	cmp	r3, #14
 8012f20:	d96e      	bls.n	8013000 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	7bdb      	ldrb	r3, [r3, #15]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d106      	bne.n	8012f38 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012f30:	3301      	adds	r3, #1
 8012f32:	b2da      	uxtb	r2, r3
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	7b1a      	ldrb	r2, [r3, #12]
 8012f42:	7b5b      	ldrb	r3, [r3, #13]
 8012f44:	021b      	lsls	r3, r3, #8
 8012f46:	4313      	orrs	r3, r2
 8012f48:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	781b      	ldrb	r3, [r3, #0]
 8012f4e:	f003 0301 	and.w	r3, r3, #1
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d023      	beq.n	8012f9e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012f56:	693b      	ldr	r3, [r7, #16]
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	2b01      	cmp	r3, #1
 8012f5c:	d10f      	bne.n	8012f7e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	785b      	ldrb	r3, [r3, #1]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d11b      	bne.n	8012f9e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012f66:	693b      	ldr	r3, [r7, #16]
 8012f68:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012f6a:	2b5e      	cmp	r3, #94	; 0x5e
 8012f6c:	d117      	bne.n	8012f9e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	7b5b      	ldrb	r3, [r3, #13]
 8012f72:	f043 0310 	orr.w	r3, r3, #16
 8012f76:	b2da      	uxtb	r2, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	735a      	strb	r2, [r3, #13]
 8012f7c:	e00f      	b.n	8012f9e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012f7e:	693b      	ldr	r3, [r7, #16]
 8012f80:	2206      	movs	r2, #6
 8012f82:	4928      	ldr	r1, [pc, #160]	; (8013024 <ethernet_input+0x118>)
 8012f84:	4618      	mov	r0, r3
 8012f86:	f009 ff41 	bl	801ce0c <memcmp>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d106      	bne.n	8012f9e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	7b5b      	ldrb	r3, [r3, #13]
 8012f94:	f043 0308 	orr.w	r3, r3, #8
 8012f98:	b2da      	uxtb	r2, r3
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012f9e:	89fb      	ldrh	r3, [r7, #14]
 8012fa0:	2b08      	cmp	r3, #8
 8012fa2:	d003      	beq.n	8012fac <ethernet_input+0xa0>
 8012fa4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012fa8:	d014      	beq.n	8012fd4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012faa:	e032      	b.n	8013012 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012fb2:	f003 0308 	and.w	r3, r3, #8
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d024      	beq.n	8013004 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012fba:	8afb      	ldrh	r3, [r7, #22]
 8012fbc:	4619      	mov	r1, r3
 8012fbe:	6878      	ldr	r0, [r7, #4]
 8012fc0:	f002 ff64 	bl	8015e8c <pbuf_remove_header>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d11e      	bne.n	8013008 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012fca:	6839      	ldr	r1, [r7, #0]
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f000 fb95 	bl	80136fc <ip4_input>
      break;
 8012fd2:	e013      	b.n	8012ffc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012fda:	f003 0308 	and.w	r3, r3, #8
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d014      	beq.n	801300c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012fe2:	8afb      	ldrh	r3, [r7, #22]
 8012fe4:	4619      	mov	r1, r3
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f002 ff50 	bl	8015e8c <pbuf_remove_header>
 8012fec:	4603      	mov	r3, r0
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d10e      	bne.n	8013010 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012ff2:	6839      	ldr	r1, [r7, #0]
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f7ff fb61 	bl	80126bc <etharp_input>
      break;
 8012ffa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	e00c      	b.n	801301a <ethernet_input+0x10e>
    goto free_and_return;
 8013000:	bf00      	nop
 8013002:	e006      	b.n	8013012 <ethernet_input+0x106>
        goto free_and_return;
 8013004:	bf00      	nop
 8013006:	e004      	b.n	8013012 <ethernet_input+0x106>
        goto free_and_return;
 8013008:	bf00      	nop
 801300a:	e002      	b.n	8013012 <ethernet_input+0x106>
        goto free_and_return;
 801300c:	bf00      	nop
 801300e:	e000      	b.n	8013012 <ethernet_input+0x106>
        goto free_and_return;
 8013010:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	f002 ffc0 	bl	8015f98 <pbuf_free>
  return ERR_OK;
 8013018:	2300      	movs	r3, #0
}
 801301a:	4618      	mov	r0, r3
 801301c:	3718      	adds	r7, #24
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
 8013022:	bf00      	nop
 8013024:	0802299c 	.word	0x0802299c

08013028 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013028:	b580      	push	{r7, lr}
 801302a:	b086      	sub	sp, #24
 801302c:	af00      	add	r7, sp, #0
 801302e:	60f8      	str	r0, [r7, #12]
 8013030:	60b9      	str	r1, [r7, #8]
 8013032:	607a      	str	r2, [r7, #4]
 8013034:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013036:	8c3b      	ldrh	r3, [r7, #32]
 8013038:	4618      	mov	r0, r3
 801303a:	f7fd f945 	bl	80102c8 <lwip_htons>
 801303e:	4603      	mov	r3, r0
 8013040:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013042:	210e      	movs	r1, #14
 8013044:	68b8      	ldr	r0, [r7, #8]
 8013046:	f002 ff11 	bl	8015e6c <pbuf_add_header>
 801304a:	4603      	mov	r3, r0
 801304c:	2b00      	cmp	r3, #0
 801304e:	d125      	bne.n	801309c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013050:	68bb      	ldr	r3, [r7, #8]
 8013052:	685b      	ldr	r3, [r3, #4]
 8013054:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013056:	693b      	ldr	r3, [r7, #16]
 8013058:	8afa      	ldrh	r2, [r7, #22]
 801305a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	2206      	movs	r2, #6
 8013060:	6839      	ldr	r1, [r7, #0]
 8013062:	4618      	mov	r0, r3
 8013064:	f009 fee1 	bl	801ce2a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013068:	693b      	ldr	r3, [r7, #16]
 801306a:	3306      	adds	r3, #6
 801306c:	2206      	movs	r2, #6
 801306e:	6879      	ldr	r1, [r7, #4]
 8013070:	4618      	mov	r0, r3
 8013072:	f009 feda 	bl	801ce2a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801307c:	2b06      	cmp	r3, #6
 801307e:	d006      	beq.n	801308e <ethernet_output+0x66>
 8013080:	4b0a      	ldr	r3, [pc, #40]	; (80130ac <ethernet_output+0x84>)
 8013082:	f240 1233 	movw	r2, #307	; 0x133
 8013086:	490a      	ldr	r1, [pc, #40]	; (80130b0 <ethernet_output+0x88>)
 8013088:	480a      	ldr	r0, [pc, #40]	; (80130b4 <ethernet_output+0x8c>)
 801308a:	f00a fb35 	bl	801d6f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	699b      	ldr	r3, [r3, #24]
 8013092:	68b9      	ldr	r1, [r7, #8]
 8013094:	68f8      	ldr	r0, [r7, #12]
 8013096:	4798      	blx	r3
 8013098:	4603      	mov	r3, r0
 801309a:	e002      	b.n	80130a2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801309c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801309e:	f06f 0301 	mvn.w	r3, #1
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3718      	adds	r7, #24
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
 80130aa:	bf00      	nop
 80130ac:	0801ff6c 	.word	0x0801ff6c
 80130b0:	0801ffc0 	.word	0x0801ffc0
 80130b4:	0801fff4 	.word	0x0801fff4

080130b8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b08e      	sub	sp, #56	; 0x38
 80130bc:	af04      	add	r7, sp, #16
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80130c2:	4b87      	ldr	r3, [pc, #540]	; (80132e0 <icmp_input+0x228>)
 80130c4:	689b      	ldr	r3, [r3, #8]
 80130c6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80130c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ca:	781b      	ldrb	r3, [r3, #0]
 80130cc:	f003 030f 	and.w	r3, r3, #15
 80130d0:	b2db      	uxtb	r3, r3
 80130d2:	009b      	lsls	r3, r3, #2
 80130d4:	b2db      	uxtb	r3, r3
 80130d6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80130d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80130da:	2b13      	cmp	r3, #19
 80130dc:	f240 80e8 	bls.w	80132b0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	895b      	ldrh	r3, [r3, #10]
 80130e4:	2b03      	cmp	r3, #3
 80130e6:	f240 80e5 	bls.w	80132b4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	685b      	ldr	r3, [r3, #4]
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80130f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	f000 80d2 	beq.w	80132a2 <icmp_input+0x1ea>
 80130fe:	2b08      	cmp	r3, #8
 8013100:	f040 80d2 	bne.w	80132a8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013104:	4b77      	ldr	r3, [pc, #476]	; (80132e4 <icmp_input+0x22c>)
 8013106:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013108:	4b75      	ldr	r3, [pc, #468]	; (80132e0 <icmp_input+0x228>)
 801310a:	695b      	ldr	r3, [r3, #20]
 801310c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013110:	2be0      	cmp	r3, #224	; 0xe0
 8013112:	f000 80d6 	beq.w	80132c2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013116:	4b72      	ldr	r3, [pc, #456]	; (80132e0 <icmp_input+0x228>)
 8013118:	695a      	ldr	r2, [r3, #20]
 801311a:	4b71      	ldr	r3, [pc, #452]	; (80132e0 <icmp_input+0x228>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	4619      	mov	r1, r3
 8013120:	4610      	mov	r0, r2
 8013122:	f000 fd03 	bl	8013b2c <ip4_addr_isbroadcast_u32>
 8013126:	4603      	mov	r3, r0
 8013128:	2b00      	cmp	r3, #0
 801312a:	f040 80cc 	bne.w	80132c6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	891b      	ldrh	r3, [r3, #8]
 8013132:	2b07      	cmp	r3, #7
 8013134:	f240 80c0 	bls.w	80132b8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f000 f9e0 	bl	80134fe <inet_chksum_pbuf>
 801313e:	4603      	mov	r3, r0
 8013140:	2b00      	cmp	r3, #0
 8013142:	d003      	beq.n	801314c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f002 ff27 	bl	8015f98 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801314a:	e0c5      	b.n	80132d8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801314c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801314e:	330e      	adds	r3, #14
 8013150:	4619      	mov	r1, r3
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f002 fe8a 	bl	8015e6c <pbuf_add_header>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	d04b      	beq.n	80131f6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	891a      	ldrh	r2, [r3, #8]
 8013162:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013164:	4413      	add	r3, r2
 8013166:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	891b      	ldrh	r3, [r3, #8]
 801316c:	8b7a      	ldrh	r2, [r7, #26]
 801316e:	429a      	cmp	r2, r3
 8013170:	f0c0 80ab 	bcc.w	80132ca <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013174:	8b7b      	ldrh	r3, [r7, #26]
 8013176:	f44f 7220 	mov.w	r2, #640	; 0x280
 801317a:	4619      	mov	r1, r3
 801317c:	200e      	movs	r0, #14
 801317e:	f002 fc2b 	bl	80159d8 <pbuf_alloc>
 8013182:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	2b00      	cmp	r3, #0
 8013188:	f000 80a1 	beq.w	80132ce <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	895b      	ldrh	r3, [r3, #10]
 8013190:	461a      	mov	r2, r3
 8013192:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013194:	3308      	adds	r3, #8
 8013196:	429a      	cmp	r2, r3
 8013198:	d203      	bcs.n	80131a2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801319a:	6978      	ldr	r0, [r7, #20]
 801319c:	f002 fefc 	bl	8015f98 <pbuf_free>
          goto icmperr;
 80131a0:	e096      	b.n	80132d0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80131a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80131aa:	4618      	mov	r0, r3
 80131ac:	f009 fe3d 	bl	801ce2a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80131b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80131b2:	4619      	mov	r1, r3
 80131b4:	6978      	ldr	r0, [r7, #20]
 80131b6:	f002 fe69 	bl	8015e8c <pbuf_remove_header>
 80131ba:	4603      	mov	r3, r0
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d009      	beq.n	80131d4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80131c0:	4b49      	ldr	r3, [pc, #292]	; (80132e8 <icmp_input+0x230>)
 80131c2:	22b6      	movs	r2, #182	; 0xb6
 80131c4:	4949      	ldr	r1, [pc, #292]	; (80132ec <icmp_input+0x234>)
 80131c6:	484a      	ldr	r0, [pc, #296]	; (80132f0 <icmp_input+0x238>)
 80131c8:	f00a fa96 	bl	801d6f8 <iprintf>
          pbuf_free(r);
 80131cc:	6978      	ldr	r0, [r7, #20]
 80131ce:	f002 fee3 	bl	8015f98 <pbuf_free>
          goto icmperr;
 80131d2:	e07d      	b.n	80132d0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80131d4:	6879      	ldr	r1, [r7, #4]
 80131d6:	6978      	ldr	r0, [r7, #20]
 80131d8:	f003 f812 	bl	8016200 <pbuf_copy>
 80131dc:	4603      	mov	r3, r0
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d003      	beq.n	80131ea <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80131e2:	6978      	ldr	r0, [r7, #20]
 80131e4:	f002 fed8 	bl	8015f98 <pbuf_free>
          goto icmperr;
 80131e8:	e072      	b.n	80132d0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f002 fed4 	bl	8015f98 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	607b      	str	r3, [r7, #4]
 80131f4:	e00f      	b.n	8013216 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80131f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80131f8:	330e      	adds	r3, #14
 80131fa:	4619      	mov	r1, r3
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f002 fe45 	bl	8015e8c <pbuf_remove_header>
 8013202:	4603      	mov	r3, r0
 8013204:	2b00      	cmp	r3, #0
 8013206:	d006      	beq.n	8013216 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013208:	4b37      	ldr	r3, [pc, #220]	; (80132e8 <icmp_input+0x230>)
 801320a:	22c7      	movs	r2, #199	; 0xc7
 801320c:	4939      	ldr	r1, [pc, #228]	; (80132f4 <icmp_input+0x23c>)
 801320e:	4838      	ldr	r0, [pc, #224]	; (80132f0 <icmp_input+0x238>)
 8013210:	f00a fa72 	bl	801d6f8 <iprintf>
          goto icmperr;
 8013214:	e05c      	b.n	80132d0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	685b      	ldr	r3, [r3, #4]
 801321a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801321c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801321e:	4619      	mov	r1, r3
 8013220:	6878      	ldr	r0, [r7, #4]
 8013222:	f002 fe23 	bl	8015e6c <pbuf_add_header>
 8013226:	4603      	mov	r3, r0
 8013228:	2b00      	cmp	r3, #0
 801322a:	d13c      	bne.n	80132a6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	685b      	ldr	r3, [r3, #4]
 8013230:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013232:	69fb      	ldr	r3, [r7, #28]
 8013234:	681a      	ldr	r2, [r3, #0]
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801323a:	4b29      	ldr	r3, [pc, #164]	; (80132e0 <icmp_input+0x228>)
 801323c:	691a      	ldr	r2, [r3, #16]
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	2200      	movs	r2, #0
 8013246:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8013248:	693b      	ldr	r3, [r7, #16]
 801324a:	885b      	ldrh	r3, [r3, #2]
 801324c:	b29b      	uxth	r3, r3
 801324e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013252:	4293      	cmp	r3, r2
 8013254:	d907      	bls.n	8013266 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	885b      	ldrh	r3, [r3, #2]
 801325a:	b29b      	uxth	r3, r3
 801325c:	3309      	adds	r3, #9
 801325e:	b29a      	uxth	r2, r3
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	805a      	strh	r2, [r3, #2]
 8013264:	e006      	b.n	8013274 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	885b      	ldrh	r3, [r3, #2]
 801326a:	b29b      	uxth	r3, r3
 801326c:	3308      	adds	r3, #8
 801326e:	b29a      	uxth	r2, r3
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	22ff      	movs	r2, #255	; 0xff
 8013278:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	2200      	movs	r2, #0
 801327e:	729a      	strb	r2, [r3, #10]
 8013280:	2200      	movs	r2, #0
 8013282:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	9302      	str	r3, [sp, #8]
 8013288:	2301      	movs	r3, #1
 801328a:	9301      	str	r3, [sp, #4]
 801328c:	2300      	movs	r3, #0
 801328e:	9300      	str	r3, [sp, #0]
 8013290:	23ff      	movs	r3, #255	; 0xff
 8013292:	2200      	movs	r2, #0
 8013294:	69f9      	ldr	r1, [r7, #28]
 8013296:	6878      	ldr	r0, [r7, #4]
 8013298:	f000 fb70 	bl	801397c <ip4_output_if>
 801329c:	4603      	mov	r3, r0
 801329e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80132a0:	e001      	b.n	80132a6 <icmp_input+0x1ee>
      break;
 80132a2:	bf00      	nop
 80132a4:	e000      	b.n	80132a8 <icmp_input+0x1f0>
      break;
 80132a6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80132a8:	6878      	ldr	r0, [r7, #4]
 80132aa:	f002 fe75 	bl	8015f98 <pbuf_free>
  return;
 80132ae:	e013      	b.n	80132d8 <icmp_input+0x220>
    goto lenerr;
 80132b0:	bf00      	nop
 80132b2:	e002      	b.n	80132ba <icmp_input+0x202>
    goto lenerr;
 80132b4:	bf00      	nop
 80132b6:	e000      	b.n	80132ba <icmp_input+0x202>
        goto lenerr;
 80132b8:	bf00      	nop
lenerr:
  pbuf_free(p);
 80132ba:	6878      	ldr	r0, [r7, #4]
 80132bc:	f002 fe6c 	bl	8015f98 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80132c0:	e00a      	b.n	80132d8 <icmp_input+0x220>
        goto icmperr;
 80132c2:	bf00      	nop
 80132c4:	e004      	b.n	80132d0 <icmp_input+0x218>
        goto icmperr;
 80132c6:	bf00      	nop
 80132c8:	e002      	b.n	80132d0 <icmp_input+0x218>
          goto icmperr;
 80132ca:	bf00      	nop
 80132cc:	e000      	b.n	80132d0 <icmp_input+0x218>
          goto icmperr;
 80132ce:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	f002 fe61 	bl	8015f98 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80132d6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80132d8:	3728      	adds	r7, #40	; 0x28
 80132da:	46bd      	mov	sp, r7
 80132dc:	bd80      	pop	{r7, pc}
 80132de:	bf00      	nop
 80132e0:	2000897c 	.word	0x2000897c
 80132e4:	20008990 	.word	0x20008990
 80132e8:	0802001c 	.word	0x0802001c
 80132ec:	08020070 	.word	0x08020070
 80132f0:	080200a8 	.word	0x080200a8
 80132f4:	080200d0 	.word	0x080200d0

080132f8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
 8013300:	460b      	mov	r3, r1
 8013302:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013304:	78fb      	ldrb	r3, [r7, #3]
 8013306:	461a      	mov	r2, r3
 8013308:	2103      	movs	r1, #3
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f000 f814 	bl	8013338 <icmp_send_response>
}
 8013310:	bf00      	nop
 8013312:	3708      	adds	r7, #8
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b082      	sub	sp, #8
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	460b      	mov	r3, r1
 8013322:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013324:	78fb      	ldrb	r3, [r7, #3]
 8013326:	461a      	mov	r2, r3
 8013328:	210b      	movs	r1, #11
 801332a:	6878      	ldr	r0, [r7, #4]
 801332c:	f000 f804 	bl	8013338 <icmp_send_response>
}
 8013330:	bf00      	nop
 8013332:	3708      	adds	r7, #8
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b08c      	sub	sp, #48	; 0x30
 801333c:	af04      	add	r7, sp, #16
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	460b      	mov	r3, r1
 8013342:	70fb      	strb	r3, [r7, #3]
 8013344:	4613      	mov	r3, r2
 8013346:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013348:	f44f 7220 	mov.w	r2, #640	; 0x280
 801334c:	2124      	movs	r1, #36	; 0x24
 801334e:	2022      	movs	r0, #34	; 0x22
 8013350:	f002 fb42 	bl	80159d8 <pbuf_alloc>
 8013354:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013356:	69fb      	ldr	r3, [r7, #28]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d056      	beq.n	801340a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801335c:	69fb      	ldr	r3, [r7, #28]
 801335e:	895b      	ldrh	r3, [r3, #10]
 8013360:	2b23      	cmp	r3, #35	; 0x23
 8013362:	d806      	bhi.n	8013372 <icmp_send_response+0x3a>
 8013364:	4b2b      	ldr	r3, [pc, #172]	; (8013414 <icmp_send_response+0xdc>)
 8013366:	f240 1269 	movw	r2, #361	; 0x169
 801336a:	492b      	ldr	r1, [pc, #172]	; (8013418 <icmp_send_response+0xe0>)
 801336c:	482b      	ldr	r0, [pc, #172]	; (801341c <icmp_send_response+0xe4>)
 801336e:	f00a f9c3 	bl	801d6f8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	685b      	ldr	r3, [r3, #4]
 8013376:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013378:	69fb      	ldr	r3, [r7, #28]
 801337a:	685b      	ldr	r3, [r3, #4]
 801337c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	78fa      	ldrb	r2, [r7, #3]
 8013382:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	78ba      	ldrb	r2, [r7, #2]
 8013388:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	2200      	movs	r2, #0
 801338e:	711a      	strb	r2, [r3, #4]
 8013390:	2200      	movs	r2, #0
 8013392:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013394:	697b      	ldr	r3, [r7, #20]
 8013396:	2200      	movs	r2, #0
 8013398:	719a      	strb	r2, [r3, #6]
 801339a:	2200      	movs	r2, #0
 801339c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801339e:	69fb      	ldr	r3, [r7, #28]
 80133a0:	685b      	ldr	r3, [r3, #4]
 80133a2:	f103 0008 	add.w	r0, r3, #8
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	685b      	ldr	r3, [r3, #4]
 80133aa:	221c      	movs	r2, #28
 80133ac:	4619      	mov	r1, r3
 80133ae:	f009 fd3c 	bl	801ce2a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80133b2:	69bb      	ldr	r3, [r7, #24]
 80133b4:	68db      	ldr	r3, [r3, #12]
 80133b6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80133b8:	f107 030c 	add.w	r3, r7, #12
 80133bc:	4618      	mov	r0, r3
 80133be:	f000 f903 	bl	80135c8 <ip4_route>
 80133c2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d01b      	beq.n	8013402 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	2200      	movs	r2, #0
 80133ce:	709a      	strb	r2, [r3, #2]
 80133d0:	2200      	movs	r2, #0
 80133d2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80133d4:	69fb      	ldr	r3, [r7, #28]
 80133d6:	895b      	ldrh	r3, [r3, #10]
 80133d8:	4619      	mov	r1, r3
 80133da:	6978      	ldr	r0, [r7, #20]
 80133dc:	f000 f87d 	bl	80134da <inet_chksum>
 80133e0:	4603      	mov	r3, r0
 80133e2:	461a      	mov	r2, r3
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80133e8:	f107 020c 	add.w	r2, r7, #12
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	9302      	str	r3, [sp, #8]
 80133f0:	2301      	movs	r3, #1
 80133f2:	9301      	str	r3, [sp, #4]
 80133f4:	2300      	movs	r3, #0
 80133f6:	9300      	str	r3, [sp, #0]
 80133f8:	23ff      	movs	r3, #255	; 0xff
 80133fa:	2100      	movs	r1, #0
 80133fc:	69f8      	ldr	r0, [r7, #28]
 80133fe:	f000 fabd 	bl	801397c <ip4_output_if>
  }
  pbuf_free(q);
 8013402:	69f8      	ldr	r0, [r7, #28]
 8013404:	f002 fdc8 	bl	8015f98 <pbuf_free>
 8013408:	e000      	b.n	801340c <icmp_send_response+0xd4>
    return;
 801340a:	bf00      	nop
}
 801340c:	3720      	adds	r7, #32
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	bf00      	nop
 8013414:	0802001c 	.word	0x0802001c
 8013418:	08020104 	.word	0x08020104
 801341c:	080200a8 	.word	0x080200a8

08013420 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8013420:	b480      	push	{r7}
 8013422:	b089      	sub	sp, #36	; 0x24
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801342e:	2300      	movs	r3, #0
 8013430:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8013432:	2300      	movs	r3, #0
 8013434:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8013436:	69fb      	ldr	r3, [r7, #28]
 8013438:	f003 0301 	and.w	r3, r3, #1
 801343c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d00d      	beq.n	8013460 <lwip_standard_chksum+0x40>
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	2b00      	cmp	r3, #0
 8013448:	dd0a      	ble.n	8013460 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801344a:	69fa      	ldr	r2, [r7, #28]
 801344c:	1c53      	adds	r3, r2, #1
 801344e:	61fb      	str	r3, [r7, #28]
 8013450:	f107 030e 	add.w	r3, r7, #14
 8013454:	3301      	adds	r3, #1
 8013456:	7812      	ldrb	r2, [r2, #0]
 8013458:	701a      	strb	r2, [r3, #0]
    len--;
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	3b01      	subs	r3, #1
 801345e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8013460:	69fb      	ldr	r3, [r7, #28]
 8013462:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8013464:	e00a      	b.n	801347c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	1c9a      	adds	r2, r3, #2
 801346a:	61ba      	str	r2, [r7, #24]
 801346c:	881b      	ldrh	r3, [r3, #0]
 801346e:	461a      	mov	r2, r3
 8013470:	697b      	ldr	r3, [r7, #20]
 8013472:	4413      	add	r3, r2
 8013474:	617b      	str	r3, [r7, #20]
    len -= 2;
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	3b02      	subs	r3, #2
 801347a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	2b01      	cmp	r3, #1
 8013480:	dcf1      	bgt.n	8013466 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	2b00      	cmp	r3, #0
 8013486:	dd04      	ble.n	8013492 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8013488:	f107 030e 	add.w	r3, r7, #14
 801348c:	69ba      	ldr	r2, [r7, #24]
 801348e:	7812      	ldrb	r2, [r2, #0]
 8013490:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8013492:	89fb      	ldrh	r3, [r7, #14]
 8013494:	461a      	mov	r2, r3
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	4413      	add	r3, r2
 801349a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	0c1a      	lsrs	r2, r3, #16
 80134a0:	697b      	ldr	r3, [r7, #20]
 80134a2:	b29b      	uxth	r3, r3
 80134a4:	4413      	add	r3, r2
 80134a6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80134a8:	697b      	ldr	r3, [r7, #20]
 80134aa:	0c1a      	lsrs	r2, r3, #16
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	b29b      	uxth	r3, r3
 80134b0:	4413      	add	r3, r2
 80134b2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d007      	beq.n	80134ca <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	021b      	lsls	r3, r3, #8
 80134be:	b29a      	uxth	r2, r3
 80134c0:	697b      	ldr	r3, [r7, #20]
 80134c2:	0a1b      	lsrs	r3, r3, #8
 80134c4:	b2db      	uxtb	r3, r3
 80134c6:	4313      	orrs	r3, r2
 80134c8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	b29b      	uxth	r3, r3
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3724      	adds	r7, #36	; 0x24
 80134d2:	46bd      	mov	sp, r7
 80134d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d8:	4770      	bx	lr

080134da <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80134da:	b580      	push	{r7, lr}
 80134dc:	b082      	sub	sp, #8
 80134de:	af00      	add	r7, sp, #0
 80134e0:	6078      	str	r0, [r7, #4]
 80134e2:	460b      	mov	r3, r1
 80134e4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80134e6:	887b      	ldrh	r3, [r7, #2]
 80134e8:	4619      	mov	r1, r3
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f7ff ff98 	bl	8013420 <lwip_standard_chksum>
 80134f0:	4603      	mov	r3, r0
 80134f2:	43db      	mvns	r3, r3
 80134f4:	b29b      	uxth	r3, r3
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	3708      	adds	r7, #8
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}

080134fe <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80134fe:	b580      	push	{r7, lr}
 8013500:	b086      	sub	sp, #24
 8013502:	af00      	add	r7, sp, #0
 8013504:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8013506:	2300      	movs	r3, #0
 8013508:	60fb      	str	r3, [r7, #12]

  acc = 0;
 801350a:	2300      	movs	r3, #0
 801350c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	613b      	str	r3, [r7, #16]
 8013512:	e02b      	b.n	801356c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8013514:	693b      	ldr	r3, [r7, #16]
 8013516:	685a      	ldr	r2, [r3, #4]
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	895b      	ldrh	r3, [r3, #10]
 801351c:	4619      	mov	r1, r3
 801351e:	4610      	mov	r0, r2
 8013520:	f7ff ff7e 	bl	8013420 <lwip_standard_chksum>
 8013524:	4603      	mov	r3, r0
 8013526:	461a      	mov	r2, r3
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	4413      	add	r3, r2
 801352c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	0c1a      	lsrs	r2, r3, #16
 8013532:	697b      	ldr	r3, [r7, #20]
 8013534:	b29b      	uxth	r3, r3
 8013536:	4413      	add	r3, r2
 8013538:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 801353a:	693b      	ldr	r3, [r7, #16]
 801353c:	895b      	ldrh	r3, [r3, #10]
 801353e:	f003 0301 	and.w	r3, r3, #1
 8013542:	b29b      	uxth	r3, r3
 8013544:	2b00      	cmp	r3, #0
 8013546:	d00e      	beq.n	8013566 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	2b00      	cmp	r3, #0
 801354c:	bf0c      	ite	eq
 801354e:	2301      	moveq	r3, #1
 8013550:	2300      	movne	r3, #0
 8013552:	b2db      	uxtb	r3, r3
 8013554:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	021b      	lsls	r3, r3, #8
 801355a:	b29a      	uxth	r2, r3
 801355c:	697b      	ldr	r3, [r7, #20]
 801355e:	0a1b      	lsrs	r3, r3, #8
 8013560:	b2db      	uxtb	r3, r3
 8013562:	4313      	orrs	r3, r2
 8013564:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8013566:	693b      	ldr	r3, [r7, #16]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	613b      	str	r3, [r7, #16]
 801356c:	693b      	ldr	r3, [r7, #16]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d1d0      	bne.n	8013514 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d007      	beq.n	8013588 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	021b      	lsls	r3, r3, #8
 801357c:	b29a      	uxth	r2, r3
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	0a1b      	lsrs	r3, r3, #8
 8013582:	b2db      	uxtb	r3, r3
 8013584:	4313      	orrs	r3, r2
 8013586:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	b29b      	uxth	r3, r3
 801358c:	43db      	mvns	r3, r3
 801358e:	b29b      	uxth	r3, r3
}
 8013590:	4618      	mov	r0, r3
 8013592:	3718      	adds	r7, #24
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801359e:	2300      	movs	r3, #0
 80135a0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80135a2:	f003 f819 	bl	80165d8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80135a6:	f001 fa01 	bl	80149ac <mem_init>
  memp_init();
 80135aa:	f001 fd65 	bl	8015078 <memp_init>
  pbuf_init();
  netif_init();
 80135ae:	f001 fe71 	bl	8015294 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80135b2:	f008 fcff 	bl	801bfb4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80135b6:	f003 f88b 	bl	80166d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80135ba:	f008 fc43 	bl	801be44 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80135be:	bf00      	nop
 80135c0:	3708      	adds	r7, #8
 80135c2:	46bd      	mov	sp, r7
 80135c4:	bd80      	pop	{r7, pc}
	...

080135c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80135c8:	b480      	push	{r7}
 80135ca:	b085      	sub	sp, #20
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80135d0:	4b33      	ldr	r3, [pc, #204]	; (80136a0 <ip4_route+0xd8>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	60fb      	str	r3, [r7, #12]
 80135d6:	e036      	b.n	8013646 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80135de:	f003 0301 	and.w	r3, r3, #1
 80135e2:	b2db      	uxtb	r3, r3
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d02b      	beq.n	8013640 <ip4_route+0x78>
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80135ee:	089b      	lsrs	r3, r3, #2
 80135f0:	f003 0301 	and.w	r3, r3, #1
 80135f4:	b2db      	uxtb	r3, r3
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d022      	beq.n	8013640 <ip4_route+0x78>
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	3304      	adds	r3, #4
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d01d      	beq.n	8013640 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681a      	ldr	r2, [r3, #0]
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	3304      	adds	r3, #4
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	405a      	eors	r2, r3
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	3308      	adds	r3, #8
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	4013      	ands	r3, r2
 8013618:	2b00      	cmp	r3, #0
 801361a:	d101      	bne.n	8013620 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	e038      	b.n	8013692 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013626:	f003 0302 	and.w	r3, r3, #2
 801362a:	2b00      	cmp	r3, #0
 801362c:	d108      	bne.n	8013640 <ip4_route+0x78>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681a      	ldr	r2, [r3, #0]
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	330c      	adds	r3, #12
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	429a      	cmp	r2, r3
 801363a:	d101      	bne.n	8013640 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	e028      	b.n	8013692 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	60fb      	str	r3, [r7, #12]
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d1c5      	bne.n	80135d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801364c:	4b15      	ldr	r3, [pc, #84]	; (80136a4 <ip4_route+0xdc>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d01a      	beq.n	801368a <ip4_route+0xc2>
 8013654:	4b13      	ldr	r3, [pc, #76]	; (80136a4 <ip4_route+0xdc>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801365c:	f003 0301 	and.w	r3, r3, #1
 8013660:	2b00      	cmp	r3, #0
 8013662:	d012      	beq.n	801368a <ip4_route+0xc2>
 8013664:	4b0f      	ldr	r3, [pc, #60]	; (80136a4 <ip4_route+0xdc>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801366c:	f003 0304 	and.w	r3, r3, #4
 8013670:	2b00      	cmp	r3, #0
 8013672:	d00a      	beq.n	801368a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013674:	4b0b      	ldr	r3, [pc, #44]	; (80136a4 <ip4_route+0xdc>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	3304      	adds	r3, #4
 801367a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801367c:	2b00      	cmp	r3, #0
 801367e:	d004      	beq.n	801368a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	b2db      	uxtb	r3, r3
 8013686:	2b7f      	cmp	r3, #127	; 0x7f
 8013688:	d101      	bne.n	801368e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801368a:	2300      	movs	r3, #0
 801368c:	e001      	b.n	8013692 <ip4_route+0xca>
  }

  return netif_default;
 801368e:	4b05      	ldr	r3, [pc, #20]	; (80136a4 <ip4_route+0xdc>)
 8013690:	681b      	ldr	r3, [r3, #0]
}
 8013692:	4618      	mov	r0, r3
 8013694:	3714      	adds	r7, #20
 8013696:	46bd      	mov	sp, r7
 8013698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369c:	4770      	bx	lr
 801369e:	bf00      	nop
 80136a0:	2000ba4c 	.word	0x2000ba4c
 80136a4:	2000ba50 	.word	0x2000ba50

080136a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b082      	sub	sp, #8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80136b6:	f003 0301 	and.w	r3, r3, #1
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d016      	beq.n	80136ee <ip4_input_accept+0x46>
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	3304      	adds	r3, #4
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d011      	beq.n	80136ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80136ca:	4b0b      	ldr	r3, [pc, #44]	; (80136f8 <ip4_input_accept+0x50>)
 80136cc:	695a      	ldr	r2, [r3, #20]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	3304      	adds	r3, #4
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d008      	beq.n	80136ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80136d8:	4b07      	ldr	r3, [pc, #28]	; (80136f8 <ip4_input_accept+0x50>)
 80136da:	695b      	ldr	r3, [r3, #20]
 80136dc:	6879      	ldr	r1, [r7, #4]
 80136de:	4618      	mov	r0, r3
 80136e0:	f000 fa24 	bl	8013b2c <ip4_addr_isbroadcast_u32>
 80136e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d001      	beq.n	80136ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80136ea:	2301      	movs	r3, #1
 80136ec:	e000      	b.n	80136f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80136ee:	2300      	movs	r3, #0
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	3708      	adds	r7, #8
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}
 80136f8:	2000897c 	.word	0x2000897c

080136fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b088      	sub	sp, #32
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
 8013704:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8013706:	2301      	movs	r3, #1
 8013708:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	685b      	ldr	r3, [r3, #4]
 801370e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	781b      	ldrb	r3, [r3, #0]
 8013714:	091b      	lsrs	r3, r3, #4
 8013716:	b2db      	uxtb	r3, r3
 8013718:	2b04      	cmp	r3, #4
 801371a:	d004      	beq.n	8013726 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f002 fc3b 	bl	8015f98 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013722:	2300      	movs	r3, #0
 8013724:	e121      	b.n	801396a <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013726:	69fb      	ldr	r3, [r7, #28]
 8013728:	781b      	ldrb	r3, [r3, #0]
 801372a:	f003 030f 	and.w	r3, r3, #15
 801372e:	b2db      	uxtb	r3, r3
 8013730:	009b      	lsls	r3, r3, #2
 8013732:	b2db      	uxtb	r3, r3
 8013734:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013736:	69fb      	ldr	r3, [r7, #28]
 8013738:	885b      	ldrh	r3, [r3, #2]
 801373a:	b29b      	uxth	r3, r3
 801373c:	4618      	mov	r0, r3
 801373e:	f7fc fdc3 	bl	80102c8 <lwip_htons>
 8013742:	4603      	mov	r3, r0
 8013744:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	891b      	ldrh	r3, [r3, #8]
 801374a:	8a3a      	ldrh	r2, [r7, #16]
 801374c:	429a      	cmp	r2, r3
 801374e:	d204      	bcs.n	801375a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8013750:	8a3b      	ldrh	r3, [r7, #16]
 8013752:	4619      	mov	r1, r3
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f002 fa99 	bl	8015c8c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	895b      	ldrh	r3, [r3, #10]
 801375e:	8a7a      	ldrh	r2, [r7, #18]
 8013760:	429a      	cmp	r2, r3
 8013762:	d807      	bhi.n	8013774 <ip4_input+0x78>
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	891b      	ldrh	r3, [r3, #8]
 8013768:	8a3a      	ldrh	r2, [r7, #16]
 801376a:	429a      	cmp	r2, r3
 801376c:	d802      	bhi.n	8013774 <ip4_input+0x78>
 801376e:	8a7b      	ldrh	r3, [r7, #18]
 8013770:	2b13      	cmp	r3, #19
 8013772:	d804      	bhi.n	801377e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013774:	6878      	ldr	r0, [r7, #4]
 8013776:	f002 fc0f 	bl	8015f98 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801377a:	2300      	movs	r3, #0
 801377c:	e0f5      	b.n	801396a <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801377e:	69fb      	ldr	r3, [r7, #28]
 8013780:	691b      	ldr	r3, [r3, #16]
 8013782:	4a7c      	ldr	r2, [pc, #496]	; (8013974 <ip4_input+0x278>)
 8013784:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013786:	69fb      	ldr	r3, [r7, #28]
 8013788:	68db      	ldr	r3, [r3, #12]
 801378a:	4a7a      	ldr	r2, [pc, #488]	; (8013974 <ip4_input+0x278>)
 801378c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801378e:	4b79      	ldr	r3, [pc, #484]	; (8013974 <ip4_input+0x278>)
 8013790:	695b      	ldr	r3, [r3, #20]
 8013792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013796:	2be0      	cmp	r3, #224	; 0xe0
 8013798:	d112      	bne.n	80137c0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80137a0:	f003 0301 	and.w	r3, r3, #1
 80137a4:	b2db      	uxtb	r3, r3
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d007      	beq.n	80137ba <ip4_input+0xbe>
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	3304      	adds	r3, #4
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d002      	beq.n	80137ba <ip4_input+0xbe>
      netif = inp;
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	61bb      	str	r3, [r7, #24]
 80137b8:	e02a      	b.n	8013810 <ip4_input+0x114>
    } else {
      netif = NULL;
 80137ba:	2300      	movs	r3, #0
 80137bc:	61bb      	str	r3, [r7, #24]
 80137be:	e027      	b.n	8013810 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80137c0:	6838      	ldr	r0, [r7, #0]
 80137c2:	f7ff ff71 	bl	80136a8 <ip4_input_accept>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d002      	beq.n	80137d2 <ip4_input+0xd6>
      netif = inp;
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	61bb      	str	r3, [r7, #24]
 80137d0:	e01e      	b.n	8013810 <ip4_input+0x114>
    } else {
      netif = NULL;
 80137d2:	2300      	movs	r3, #0
 80137d4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80137d6:	4b67      	ldr	r3, [pc, #412]	; (8013974 <ip4_input+0x278>)
 80137d8:	695b      	ldr	r3, [r3, #20]
 80137da:	b2db      	uxtb	r3, r3
 80137dc:	2b7f      	cmp	r3, #127	; 0x7f
 80137de:	d017      	beq.n	8013810 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80137e0:	4b65      	ldr	r3, [pc, #404]	; (8013978 <ip4_input+0x27c>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	61bb      	str	r3, [r7, #24]
 80137e6:	e00e      	b.n	8013806 <ip4_input+0x10a>
          if (netif == inp) {
 80137e8:	69ba      	ldr	r2, [r7, #24]
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d006      	beq.n	80137fe <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80137f0:	69b8      	ldr	r0, [r7, #24]
 80137f2:	f7ff ff59 	bl	80136a8 <ip4_input_accept>
 80137f6:	4603      	mov	r3, r0
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d108      	bne.n	801380e <ip4_input+0x112>
 80137fc:	e000      	b.n	8013800 <ip4_input+0x104>
            continue;
 80137fe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013800:	69bb      	ldr	r3, [r7, #24]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	61bb      	str	r3, [r7, #24]
 8013806:	69bb      	ldr	r3, [r7, #24]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d1ed      	bne.n	80137e8 <ip4_input+0xec>
 801380c:	e000      	b.n	8013810 <ip4_input+0x114>
            break;
 801380e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8013810:	69bb      	ldr	r3, [r7, #24]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d111      	bne.n	801383a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8013816:	69fb      	ldr	r3, [r7, #28]
 8013818:	7a5b      	ldrb	r3, [r3, #9]
 801381a:	2b11      	cmp	r3, #17
 801381c:	d10d      	bne.n	801383a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801381e:	8a7b      	ldrh	r3, [r7, #18]
 8013820:	69fa      	ldr	r2, [r7, #28]
 8013822:	4413      	add	r3, r2
 8013824:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	885b      	ldrh	r3, [r3, #2]
 801382a:	b29b      	uxth	r3, r3
 801382c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8013830:	d103      	bne.n	801383a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8013836:	2300      	movs	r3, #0
 8013838:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d017      	beq.n	8013870 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8013840:	4b4c      	ldr	r3, [pc, #304]	; (8013974 <ip4_input+0x278>)
 8013842:	691b      	ldr	r3, [r3, #16]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d013      	beq.n	8013870 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013848:	4b4a      	ldr	r3, [pc, #296]	; (8013974 <ip4_input+0x278>)
 801384a:	691b      	ldr	r3, [r3, #16]
 801384c:	6839      	ldr	r1, [r7, #0]
 801384e:	4618      	mov	r0, r3
 8013850:	f000 f96c 	bl	8013b2c <ip4_addr_isbroadcast_u32>
 8013854:	4603      	mov	r3, r0
 8013856:	2b00      	cmp	r3, #0
 8013858:	d105      	bne.n	8013866 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801385a:	4b46      	ldr	r3, [pc, #280]	; (8013974 <ip4_input+0x278>)
 801385c:	691b      	ldr	r3, [r3, #16]
 801385e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013862:	2be0      	cmp	r3, #224	; 0xe0
 8013864:	d104      	bne.n	8013870 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f002 fb96 	bl	8015f98 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801386c:	2300      	movs	r3, #0
 801386e:	e07c      	b.n	801396a <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013870:	69bb      	ldr	r3, [r7, #24]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d104      	bne.n	8013880 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f002 fb8e 	bl	8015f98 <pbuf_free>
    return ERR_OK;
 801387c:	2300      	movs	r3, #0
 801387e:	e074      	b.n	801396a <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013880:	69fb      	ldr	r3, [r7, #28]
 8013882:	88db      	ldrh	r3, [r3, #6]
 8013884:	b29b      	uxth	r3, r3
 8013886:	461a      	mov	r2, r3
 8013888:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801388c:	4013      	ands	r3, r2
 801388e:	2b00      	cmp	r3, #0
 8013890:	d00b      	beq.n	80138aa <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f000 fc90 	bl	80141b8 <ip4_reass>
 8013898:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d101      	bne.n	80138a4 <ip4_input+0x1a8>
      return ERR_OK;
 80138a0:	2300      	movs	r3, #0
 80138a2:	e062      	b.n	801396a <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	685b      	ldr	r3, [r3, #4]
 80138a8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80138aa:	4a32      	ldr	r2, [pc, #200]	; (8013974 <ip4_input+0x278>)
 80138ac:	69bb      	ldr	r3, [r7, #24]
 80138ae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80138b0:	4a30      	ldr	r2, [pc, #192]	; (8013974 <ip4_input+0x278>)
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80138b6:	4a2f      	ldr	r2, [pc, #188]	; (8013974 <ip4_input+0x278>)
 80138b8:	69fb      	ldr	r3, [r7, #28]
 80138ba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	781b      	ldrb	r3, [r3, #0]
 80138c0:	f003 030f 	and.w	r3, r3, #15
 80138c4:	b2db      	uxtb	r3, r3
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	b2db      	uxtb	r3, r3
 80138ca:	b29a      	uxth	r2, r3
 80138cc:	4b29      	ldr	r3, [pc, #164]	; (8013974 <ip4_input+0x278>)
 80138ce:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80138d0:	8a7b      	ldrh	r3, [r7, #18]
 80138d2:	4619      	mov	r1, r3
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f002 fad9 	bl	8015e8c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80138da:	69fb      	ldr	r3, [r7, #28]
 80138dc:	7a5b      	ldrb	r3, [r3, #9]
 80138de:	2b06      	cmp	r3, #6
 80138e0:	d009      	beq.n	80138f6 <ip4_input+0x1fa>
 80138e2:	2b11      	cmp	r3, #17
 80138e4:	d002      	beq.n	80138ec <ip4_input+0x1f0>
 80138e6:	2b01      	cmp	r3, #1
 80138e8:	d00a      	beq.n	8013900 <ip4_input+0x204>
 80138ea:	e00e      	b.n	801390a <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80138ec:	6839      	ldr	r1, [r7, #0]
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	f008 fc0e 	bl	801c110 <udp_input>
        break;
 80138f4:	e026      	b.n	8013944 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80138f6:	6839      	ldr	r1, [r7, #0]
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f004 fa77 	bl	8017dec <tcp_input>
        break;
 80138fe:	e021      	b.n	8013944 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013900:	6839      	ldr	r1, [r7, #0]
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f7ff fbd8 	bl	80130b8 <icmp_input>
        break;
 8013908:	e01c      	b.n	8013944 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801390a:	4b1a      	ldr	r3, [pc, #104]	; (8013974 <ip4_input+0x278>)
 801390c:	695b      	ldr	r3, [r3, #20]
 801390e:	69b9      	ldr	r1, [r7, #24]
 8013910:	4618      	mov	r0, r3
 8013912:	f000 f90b 	bl	8013b2c <ip4_addr_isbroadcast_u32>
 8013916:	4603      	mov	r3, r0
 8013918:	2b00      	cmp	r3, #0
 801391a:	d10f      	bne.n	801393c <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801391c:	4b15      	ldr	r3, [pc, #84]	; (8013974 <ip4_input+0x278>)
 801391e:	695b      	ldr	r3, [r3, #20]
 8013920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013924:	2be0      	cmp	r3, #224	; 0xe0
 8013926:	d009      	beq.n	801393c <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013928:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801392c:	4619      	mov	r1, r3
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f002 fb1f 	bl	8015f72 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013934:	2102      	movs	r1, #2
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f7ff fcde 	bl	80132f8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801393c:	6878      	ldr	r0, [r7, #4]
 801393e:	f002 fb2b 	bl	8015f98 <pbuf_free>
        break;
 8013942:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013944:	4b0b      	ldr	r3, [pc, #44]	; (8013974 <ip4_input+0x278>)
 8013946:	2200      	movs	r2, #0
 8013948:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801394a:	4b0a      	ldr	r3, [pc, #40]	; (8013974 <ip4_input+0x278>)
 801394c:	2200      	movs	r2, #0
 801394e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013950:	4b08      	ldr	r3, [pc, #32]	; (8013974 <ip4_input+0x278>)
 8013952:	2200      	movs	r2, #0
 8013954:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013956:	4b07      	ldr	r3, [pc, #28]	; (8013974 <ip4_input+0x278>)
 8013958:	2200      	movs	r2, #0
 801395a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801395c:	4b05      	ldr	r3, [pc, #20]	; (8013974 <ip4_input+0x278>)
 801395e:	2200      	movs	r2, #0
 8013960:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013962:	4b04      	ldr	r3, [pc, #16]	; (8013974 <ip4_input+0x278>)
 8013964:	2200      	movs	r2, #0
 8013966:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013968:	2300      	movs	r3, #0
}
 801396a:	4618      	mov	r0, r3
 801396c:	3720      	adds	r7, #32
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
 8013972:	bf00      	nop
 8013974:	2000897c 	.word	0x2000897c
 8013978:	2000ba4c 	.word	0x2000ba4c

0801397c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b08a      	sub	sp, #40	; 0x28
 8013980:	af04      	add	r7, sp, #16
 8013982:	60f8      	str	r0, [r7, #12]
 8013984:	60b9      	str	r1, [r7, #8]
 8013986:	607a      	str	r2, [r7, #4]
 8013988:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d009      	beq.n	80139a8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d003      	beq.n	80139a2 <ip4_output_if+0x26>
 801399a:	68bb      	ldr	r3, [r7, #8]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d102      	bne.n	80139a8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80139a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a4:	3304      	adds	r3, #4
 80139a6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80139a8:	78fa      	ldrb	r2, [r7, #3]
 80139aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ac:	9302      	str	r3, [sp, #8]
 80139ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80139b2:	9301      	str	r3, [sp, #4]
 80139b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80139b8:	9300      	str	r3, [sp, #0]
 80139ba:	4613      	mov	r3, r2
 80139bc:	687a      	ldr	r2, [r7, #4]
 80139be:	6979      	ldr	r1, [r7, #20]
 80139c0:	68f8      	ldr	r0, [r7, #12]
 80139c2:	f000 f805 	bl	80139d0 <ip4_output_if_src>
 80139c6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3718      	adds	r7, #24
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}

080139d0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b088      	sub	sp, #32
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
 80139dc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	7b9b      	ldrb	r3, [r3, #14]
 80139e2:	2b01      	cmp	r3, #1
 80139e4:	d006      	beq.n	80139f4 <ip4_output_if_src+0x24>
 80139e6:	4b4b      	ldr	r3, [pc, #300]	; (8013b14 <ip4_output_if_src+0x144>)
 80139e8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80139ec:	494a      	ldr	r1, [pc, #296]	; (8013b18 <ip4_output_if_src+0x148>)
 80139ee:	484b      	ldr	r0, [pc, #300]	; (8013b1c <ip4_output_if_src+0x14c>)
 80139f0:	f009 fe82 	bl	801d6f8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d060      	beq.n	8013abc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80139fa:	2314      	movs	r3, #20
 80139fc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80139fe:	2114      	movs	r1, #20
 8013a00:	68f8      	ldr	r0, [r7, #12]
 8013a02:	f002 fa33 	bl	8015e6c <pbuf_add_header>
 8013a06:	4603      	mov	r3, r0
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d002      	beq.n	8013a12 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013a0c:	f06f 0301 	mvn.w	r3, #1
 8013a10:	e07c      	b.n	8013b0c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	685b      	ldr	r3, [r3, #4]
 8013a16:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	895b      	ldrh	r3, [r3, #10]
 8013a1c:	2b13      	cmp	r3, #19
 8013a1e:	d806      	bhi.n	8013a2e <ip4_output_if_src+0x5e>
 8013a20:	4b3c      	ldr	r3, [pc, #240]	; (8013b14 <ip4_output_if_src+0x144>)
 8013a22:	f240 3289 	movw	r2, #905	; 0x389
 8013a26:	493e      	ldr	r1, [pc, #248]	; (8013b20 <ip4_output_if_src+0x150>)
 8013a28:	483c      	ldr	r0, [pc, #240]	; (8013b1c <ip4_output_if_src+0x14c>)
 8013a2a:	f009 fe65 	bl	801d6f8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013a2e:	69fb      	ldr	r3, [r7, #28]
 8013a30:	78fa      	ldrb	r2, [r7, #3]
 8013a32:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013a34:	69fb      	ldr	r3, [r7, #28]
 8013a36:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013a3a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681a      	ldr	r2, [r3, #0]
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013a44:	8b7b      	ldrh	r3, [r7, #26]
 8013a46:	089b      	lsrs	r3, r3, #2
 8013a48:	b29b      	uxth	r3, r3
 8013a4a:	b2db      	uxtb	r3, r3
 8013a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a50:	b2da      	uxtb	r2, r3
 8013a52:	69fb      	ldr	r3, [r7, #28]
 8013a54:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013a5c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	891b      	ldrh	r3, [r3, #8]
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7fc fc30 	bl	80102c8 <lwip_htons>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	461a      	mov	r2, r3
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013a70:	69fb      	ldr	r3, [r7, #28]
 8013a72:	2200      	movs	r2, #0
 8013a74:	719a      	strb	r2, [r3, #6]
 8013a76:	2200      	movs	r2, #0
 8013a78:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013a7a:	4b2a      	ldr	r3, [pc, #168]	; (8013b24 <ip4_output_if_src+0x154>)
 8013a7c:	881b      	ldrh	r3, [r3, #0]
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f7fc fc22 	bl	80102c8 <lwip_htons>
 8013a84:	4603      	mov	r3, r0
 8013a86:	461a      	mov	r2, r3
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013a8c:	4b25      	ldr	r3, [pc, #148]	; (8013b24 <ip4_output_if_src+0x154>)
 8013a8e:	881b      	ldrh	r3, [r3, #0]
 8013a90:	3301      	adds	r3, #1
 8013a92:	b29a      	uxth	r2, r3
 8013a94:	4b23      	ldr	r3, [pc, #140]	; (8013b24 <ip4_output_if_src+0x154>)
 8013a96:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d104      	bne.n	8013aa8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013a9e:	4b22      	ldr	r3, [pc, #136]	; (8013b28 <ip4_output_if_src+0x158>)
 8013aa0:	681a      	ldr	r2, [r3, #0]
 8013aa2:	69fb      	ldr	r3, [r7, #28]
 8013aa4:	60da      	str	r2, [r3, #12]
 8013aa6:	e003      	b.n	8013ab0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	681a      	ldr	r2, [r3, #0]
 8013aac:	69fb      	ldr	r3, [r7, #28]
 8013aae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013ab0:	69fb      	ldr	r3, [r7, #28]
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	729a      	strb	r2, [r3, #10]
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	72da      	strb	r2, [r3, #11]
 8013aba:	e00f      	b.n	8013adc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	895b      	ldrh	r3, [r3, #10]
 8013ac0:	2b13      	cmp	r3, #19
 8013ac2:	d802      	bhi.n	8013aca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013ac4:	f06f 0301 	mvn.w	r3, #1
 8013ac8:	e020      	b.n	8013b0c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	685b      	ldr	r3, [r3, #4]
 8013ace:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013ad0:	69fb      	ldr	r3, [r7, #28]
 8013ad2:	691b      	ldr	r3, [r3, #16]
 8013ad4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013ad6:	f107 0314 	add.w	r3, r7, #20
 8013ada:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d00c      	beq.n	8013afe <ip4_output_if_src+0x12e>
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	891a      	ldrh	r2, [r3, #8]
 8013ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d906      	bls.n	8013afe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013af4:	68f8      	ldr	r0, [r7, #12]
 8013af6:	f000 fd4b 	bl	8014590 <ip4_frag>
 8013afa:	4603      	mov	r3, r0
 8013afc:	e006      	b.n	8013b0c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b00:	695b      	ldr	r3, [r3, #20]
 8013b02:	687a      	ldr	r2, [r7, #4]
 8013b04:	68f9      	ldr	r1, [r7, #12]
 8013b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b08:	4798      	blx	r3
 8013b0a:	4603      	mov	r3, r0
}
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	3720      	adds	r7, #32
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}
 8013b14:	08020130 	.word	0x08020130
 8013b18:	08020184 	.word	0x08020184
 8013b1c:	08020190 	.word	0x08020190
 8013b20:	080201b8 	.word	0x080201b8
 8013b24:	200076ca 	.word	0x200076ca
 8013b28:	080229ac 	.word	0x080229ac

08013b2c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	b085      	sub	sp, #20
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b40:	d002      	beq.n	8013b48 <ip4_addr_isbroadcast_u32+0x1c>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d101      	bne.n	8013b4c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013b48:	2301      	movs	r3, #1
 8013b4a:	e02a      	b.n	8013ba2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013b52:	f003 0302 	and.w	r3, r3, #2
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d101      	bne.n	8013b5e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	e021      	b.n	8013ba2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	3304      	adds	r3, #4
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	687a      	ldr	r2, [r7, #4]
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d101      	bne.n	8013b6e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	e019      	b.n	8013ba2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013b6e:	68fa      	ldr	r2, [r7, #12]
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	3304      	adds	r3, #4
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	405a      	eors	r2, r3
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	3308      	adds	r3, #8
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	4013      	ands	r3, r2
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d10d      	bne.n	8013ba0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	3308      	adds	r3, #8
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	43da      	mvns	r2, r3
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013b90:	683b      	ldr	r3, [r7, #0]
 8013b92:	3308      	adds	r3, #8
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013b98:	429a      	cmp	r2, r3
 8013b9a:	d101      	bne.n	8013ba0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013b9c:	2301      	movs	r3, #1
 8013b9e:	e000      	b.n	8013ba2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013ba0:	2300      	movs	r3, #0
  }
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3714      	adds	r7, #20
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bac:	4770      	bx	lr
	...

08013bb0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013bba:	4b12      	ldr	r3, [pc, #72]	; (8013c04 <ip_reass_tmr+0x54>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013bc0:	e018      	b.n	8013bf4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	7fdb      	ldrb	r3, [r3, #31]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d00b      	beq.n	8013be2 <ip_reass_tmr+0x32>
      r->timer--;
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	7fdb      	ldrb	r3, [r3, #31]
 8013bce:	3b01      	subs	r3, #1
 8013bd0:	b2da      	uxtb	r2, r3
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	60fb      	str	r3, [r7, #12]
 8013be0:	e008      	b.n	8013bf4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013bec:	68b9      	ldr	r1, [r7, #8]
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f000 f80a 	bl	8013c08 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d1e3      	bne.n	8013bc2 <ip_reass_tmr+0x12>
    }
  }
}
 8013bfa:	bf00      	nop
 8013bfc:	3710      	adds	r7, #16
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop
 8013c04:	200076cc 	.word	0x200076cc

08013c08 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b088      	sub	sp, #32
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013c12:	2300      	movs	r3, #0
 8013c14:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013c16:	683a      	ldr	r2, [r7, #0]
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d105      	bne.n	8013c2a <ip_reass_free_complete_datagram+0x22>
 8013c1e:	4b45      	ldr	r3, [pc, #276]	; (8013d34 <ip_reass_free_complete_datagram+0x12c>)
 8013c20:	22ab      	movs	r2, #171	; 0xab
 8013c22:	4945      	ldr	r1, [pc, #276]	; (8013d38 <ip_reass_free_complete_datagram+0x130>)
 8013c24:	4845      	ldr	r0, [pc, #276]	; (8013d3c <ip_reass_free_complete_datagram+0x134>)
 8013c26:	f009 fd67 	bl	801d6f8 <iprintf>
  if (prev != NULL) {
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d00a      	beq.n	8013c46 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	687a      	ldr	r2, [r7, #4]
 8013c36:	429a      	cmp	r2, r3
 8013c38:	d005      	beq.n	8013c46 <ip_reass_free_complete_datagram+0x3e>
 8013c3a:	4b3e      	ldr	r3, [pc, #248]	; (8013d34 <ip_reass_free_complete_datagram+0x12c>)
 8013c3c:	22ad      	movs	r2, #173	; 0xad
 8013c3e:	4940      	ldr	r1, [pc, #256]	; (8013d40 <ip_reass_free_complete_datagram+0x138>)
 8013c40:	483e      	ldr	r0, [pc, #248]	; (8013d3c <ip_reass_free_complete_datagram+0x134>)
 8013c42:	f009 fd59 	bl	801d6f8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	685b      	ldr	r3, [r3, #4]
 8013c4a:	685b      	ldr	r3, [r3, #4]
 8013c4c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	889b      	ldrh	r3, [r3, #4]
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d12a      	bne.n	8013cae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	685b      	ldr	r3, [r3, #4]
 8013c5c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	681a      	ldr	r2, [r3, #0]
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013c66:	69bb      	ldr	r3, [r7, #24]
 8013c68:	6858      	ldr	r0, [r3, #4]
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	3308      	adds	r3, #8
 8013c6e:	2214      	movs	r2, #20
 8013c70:	4619      	mov	r1, r3
 8013c72:	f009 f8da 	bl	801ce2a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013c76:	2101      	movs	r1, #1
 8013c78:	69b8      	ldr	r0, [r7, #24]
 8013c7a:	f7ff fb4d 	bl	8013318 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013c7e:	69b8      	ldr	r0, [r7, #24]
 8013c80:	f002 fa18 	bl	80160b4 <pbuf_clen>
 8013c84:	4603      	mov	r3, r0
 8013c86:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013c88:	8bfa      	ldrh	r2, [r7, #30]
 8013c8a:	8a7b      	ldrh	r3, [r7, #18]
 8013c8c:	4413      	add	r3, r2
 8013c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013c92:	db05      	blt.n	8013ca0 <ip_reass_free_complete_datagram+0x98>
 8013c94:	4b27      	ldr	r3, [pc, #156]	; (8013d34 <ip_reass_free_complete_datagram+0x12c>)
 8013c96:	22bc      	movs	r2, #188	; 0xbc
 8013c98:	492a      	ldr	r1, [pc, #168]	; (8013d44 <ip_reass_free_complete_datagram+0x13c>)
 8013c9a:	4828      	ldr	r0, [pc, #160]	; (8013d3c <ip_reass_free_complete_datagram+0x134>)
 8013c9c:	f009 fd2c 	bl	801d6f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013ca0:	8bfa      	ldrh	r2, [r7, #30]
 8013ca2:	8a7b      	ldrh	r3, [r7, #18]
 8013ca4:	4413      	add	r3, r2
 8013ca6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013ca8:	69b8      	ldr	r0, [r7, #24]
 8013caa:	f002 f975 	bl	8015f98 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	685b      	ldr	r3, [r3, #4]
 8013cb2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013cb4:	e01f      	b.n	8013cf6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013cb6:	69bb      	ldr	r3, [r7, #24]
 8013cb8:	685b      	ldr	r3, [r3, #4]
 8013cba:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013cbc:	69bb      	ldr	r3, [r7, #24]
 8013cbe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013cc6:	68f8      	ldr	r0, [r7, #12]
 8013cc8:	f002 f9f4 	bl	80160b4 <pbuf_clen>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013cd0:	8bfa      	ldrh	r2, [r7, #30]
 8013cd2:	8a7b      	ldrh	r3, [r7, #18]
 8013cd4:	4413      	add	r3, r2
 8013cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013cda:	db05      	blt.n	8013ce8 <ip_reass_free_complete_datagram+0xe0>
 8013cdc:	4b15      	ldr	r3, [pc, #84]	; (8013d34 <ip_reass_free_complete_datagram+0x12c>)
 8013cde:	22cc      	movs	r2, #204	; 0xcc
 8013ce0:	4918      	ldr	r1, [pc, #96]	; (8013d44 <ip_reass_free_complete_datagram+0x13c>)
 8013ce2:	4816      	ldr	r0, [pc, #88]	; (8013d3c <ip_reass_free_complete_datagram+0x134>)
 8013ce4:	f009 fd08 	bl	801d6f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013ce8:	8bfa      	ldrh	r2, [r7, #30]
 8013cea:	8a7b      	ldrh	r3, [r7, #18]
 8013cec:	4413      	add	r3, r2
 8013cee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013cf0:	68f8      	ldr	r0, [r7, #12]
 8013cf2:	f002 f951 	bl	8015f98 <pbuf_free>
  while (p != NULL) {
 8013cf6:	69bb      	ldr	r3, [r7, #24]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d1dc      	bne.n	8013cb6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013cfc:	6839      	ldr	r1, [r7, #0]
 8013cfe:	6878      	ldr	r0, [r7, #4]
 8013d00:	f000 f8c2 	bl	8013e88 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013d04:	4b10      	ldr	r3, [pc, #64]	; (8013d48 <ip_reass_free_complete_datagram+0x140>)
 8013d06:	881b      	ldrh	r3, [r3, #0]
 8013d08:	8bfa      	ldrh	r2, [r7, #30]
 8013d0a:	429a      	cmp	r2, r3
 8013d0c:	d905      	bls.n	8013d1a <ip_reass_free_complete_datagram+0x112>
 8013d0e:	4b09      	ldr	r3, [pc, #36]	; (8013d34 <ip_reass_free_complete_datagram+0x12c>)
 8013d10:	22d2      	movs	r2, #210	; 0xd2
 8013d12:	490e      	ldr	r1, [pc, #56]	; (8013d4c <ip_reass_free_complete_datagram+0x144>)
 8013d14:	4809      	ldr	r0, [pc, #36]	; (8013d3c <ip_reass_free_complete_datagram+0x134>)
 8013d16:	f009 fcef 	bl	801d6f8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013d1a:	4b0b      	ldr	r3, [pc, #44]	; (8013d48 <ip_reass_free_complete_datagram+0x140>)
 8013d1c:	881a      	ldrh	r2, [r3, #0]
 8013d1e:	8bfb      	ldrh	r3, [r7, #30]
 8013d20:	1ad3      	subs	r3, r2, r3
 8013d22:	b29a      	uxth	r2, r3
 8013d24:	4b08      	ldr	r3, [pc, #32]	; (8013d48 <ip_reass_free_complete_datagram+0x140>)
 8013d26:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013d28:	8bfb      	ldrh	r3, [r7, #30]
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3720      	adds	r7, #32
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}
 8013d32:	bf00      	nop
 8013d34:	080201e8 	.word	0x080201e8
 8013d38:	08020240 	.word	0x08020240
 8013d3c:	0802024c 	.word	0x0802024c
 8013d40:	08020274 	.word	0x08020274
 8013d44:	08020288 	.word	0x08020288
 8013d48:	200076d0 	.word	0x200076d0
 8013d4c:	080202a8 	.word	0x080202a8

08013d50 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b08a      	sub	sp, #40	; 0x28
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013d62:	2300      	movs	r3, #0
 8013d64:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013d66:	2300      	movs	r3, #0
 8013d68:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013d6e:	4b28      	ldr	r3, [pc, #160]	; (8013e10 <ip_reass_remove_oldest_datagram+0xc0>)
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013d74:	e030      	b.n	8013dd8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d78:	695a      	ldr	r2, [r3, #20]
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	68db      	ldr	r3, [r3, #12]
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d10c      	bne.n	8013d9c <ip_reass_remove_oldest_datagram+0x4c>
 8013d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d84:	699a      	ldr	r2, [r3, #24]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	691b      	ldr	r3, [r3, #16]
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d106      	bne.n	8013d9c <ip_reass_remove_oldest_datagram+0x4c>
 8013d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d90:	899a      	ldrh	r2, [r3, #12]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	889b      	ldrh	r3, [r3, #4]
 8013d96:	b29b      	uxth	r3, r3
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d014      	beq.n	8013dc6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	3301      	adds	r3, #1
 8013da0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013da2:	6a3b      	ldr	r3, [r7, #32]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d104      	bne.n	8013db2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013daa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013dac:	69fb      	ldr	r3, [r7, #28]
 8013dae:	61bb      	str	r3, [r7, #24]
 8013db0:	e009      	b.n	8013dc6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db4:	7fda      	ldrb	r2, [r3, #31]
 8013db6:	6a3b      	ldr	r3, [r7, #32]
 8013db8:	7fdb      	ldrb	r3, [r3, #31]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d803      	bhi.n	8013dc6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013dc2:	69fb      	ldr	r3, [r7, #28]
 8013dc4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d001      	beq.n	8013dd2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d1cb      	bne.n	8013d76 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013dde:	6a3b      	ldr	r3, [r7, #32]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d008      	beq.n	8013df6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013de4:	69b9      	ldr	r1, [r7, #24]
 8013de6:	6a38      	ldr	r0, [r7, #32]
 8013de8:	f7ff ff0e 	bl	8013c08 <ip_reass_free_complete_datagram>
 8013dec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013dee:	697a      	ldr	r2, [r7, #20]
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	4413      	add	r3, r2
 8013df4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013df6:	697a      	ldr	r2, [r7, #20]
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	da02      	bge.n	8013e04 <ip_reass_remove_oldest_datagram+0xb4>
 8013dfe:	693b      	ldr	r3, [r7, #16]
 8013e00:	2b01      	cmp	r3, #1
 8013e02:	dcac      	bgt.n	8013d5e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013e04:	697b      	ldr	r3, [r7, #20]
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3728      	adds	r7, #40	; 0x28
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}
 8013e0e:	bf00      	nop
 8013e10:	200076cc 	.word	0x200076cc

08013e14 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b084      	sub	sp, #16
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013e1e:	2004      	movs	r0, #4
 8013e20:	f001 f998 	bl	8015154 <memp_malloc>
 8013e24:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d110      	bne.n	8013e4e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013e2c:	6839      	ldr	r1, [r7, #0]
 8013e2e:	6878      	ldr	r0, [r7, #4]
 8013e30:	f7ff ff8e 	bl	8013d50 <ip_reass_remove_oldest_datagram>
 8013e34:	4602      	mov	r2, r0
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	4293      	cmp	r3, r2
 8013e3a:	dc03      	bgt.n	8013e44 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013e3c:	2004      	movs	r0, #4
 8013e3e:	f001 f989 	bl	8015154 <memp_malloc>
 8013e42:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d101      	bne.n	8013e4e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	e016      	b.n	8013e7c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013e4e:	2220      	movs	r2, #32
 8013e50:	2100      	movs	r1, #0
 8013e52:	68f8      	ldr	r0, [r7, #12]
 8013e54:	f009 f80d 	bl	801ce72 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	220f      	movs	r2, #15
 8013e5c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013e5e:	4b09      	ldr	r3, [pc, #36]	; (8013e84 <ip_reass_enqueue_new_datagram+0x70>)
 8013e60:	681a      	ldr	r2, [r3, #0]
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013e66:	4a07      	ldr	r2, [pc, #28]	; (8013e84 <ip_reass_enqueue_new_datagram+0x70>)
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	3308      	adds	r3, #8
 8013e70:	2214      	movs	r2, #20
 8013e72:	6879      	ldr	r1, [r7, #4]
 8013e74:	4618      	mov	r0, r3
 8013e76:	f008 ffd8 	bl	801ce2a <memcpy>
  return ipr;
 8013e7a:	68fb      	ldr	r3, [r7, #12]
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3710      	adds	r7, #16
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}
 8013e84:	200076cc 	.word	0x200076cc

08013e88 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b082      	sub	sp, #8
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
 8013e90:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013e92:	4b10      	ldr	r3, [pc, #64]	; (8013ed4 <ip_reass_dequeue_datagram+0x4c>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	687a      	ldr	r2, [r7, #4]
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d104      	bne.n	8013ea6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	4a0c      	ldr	r2, [pc, #48]	; (8013ed4 <ip_reass_dequeue_datagram+0x4c>)
 8013ea2:	6013      	str	r3, [r2, #0]
 8013ea4:	e00d      	b.n	8013ec2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d106      	bne.n	8013eba <ip_reass_dequeue_datagram+0x32>
 8013eac:	4b0a      	ldr	r3, [pc, #40]	; (8013ed8 <ip_reass_dequeue_datagram+0x50>)
 8013eae:	f240 1245 	movw	r2, #325	; 0x145
 8013eb2:	490a      	ldr	r1, [pc, #40]	; (8013edc <ip_reass_dequeue_datagram+0x54>)
 8013eb4:	480a      	ldr	r0, [pc, #40]	; (8013ee0 <ip_reass_dequeue_datagram+0x58>)
 8013eb6:	f009 fc1f 	bl	801d6f8 <iprintf>
    prev->next = ipr->next;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681a      	ldr	r2, [r3, #0]
 8013ebe:	683b      	ldr	r3, [r7, #0]
 8013ec0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013ec2:	6879      	ldr	r1, [r7, #4]
 8013ec4:	2004      	movs	r0, #4
 8013ec6:	f001 f9bb 	bl	8015240 <memp_free>
}
 8013eca:	bf00      	nop
 8013ecc:	3708      	adds	r7, #8
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}
 8013ed2:	bf00      	nop
 8013ed4:	200076cc 	.word	0x200076cc
 8013ed8:	080201e8 	.word	0x080201e8
 8013edc:	080202cc 	.word	0x080202cc
 8013ee0:	0802024c 	.word	0x0802024c

08013ee4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b08c      	sub	sp, #48	; 0x30
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	60f8      	str	r0, [r7, #12]
 8013eec:	60b9      	str	r1, [r7, #8]
 8013eee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	685b      	ldr	r3, [r3, #4]
 8013efc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013efe:	69fb      	ldr	r3, [r7, #28]
 8013f00:	885b      	ldrh	r3, [r3, #2]
 8013f02:	b29b      	uxth	r3, r3
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7fc f9df 	bl	80102c8 <lwip_htons>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013f0e:	69fb      	ldr	r3, [r7, #28]
 8013f10:	781b      	ldrb	r3, [r3, #0]
 8013f12:	f003 030f 	and.w	r3, r3, #15
 8013f16:	b2db      	uxtb	r3, r3
 8013f18:	009b      	lsls	r3, r3, #2
 8013f1a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013f1c:	7e7b      	ldrb	r3, [r7, #25]
 8013f1e:	b29b      	uxth	r3, r3
 8013f20:	8b7a      	ldrh	r2, [r7, #26]
 8013f22:	429a      	cmp	r2, r3
 8013f24:	d202      	bcs.n	8013f2c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f2a:	e135      	b.n	8014198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013f2c:	7e7b      	ldrb	r3, [r7, #25]
 8013f2e:	b29b      	uxth	r3, r3
 8013f30:	8b7a      	ldrh	r2, [r7, #26]
 8013f32:	1ad3      	subs	r3, r2, r3
 8013f34:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013f36:	69fb      	ldr	r3, [r7, #28]
 8013f38:	88db      	ldrh	r3, [r3, #6]
 8013f3a:	b29b      	uxth	r3, r3
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7fc f9c3 	bl	80102c8 <lwip_htons>
 8013f42:	4603      	mov	r3, r0
 8013f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013f48:	b29b      	uxth	r3, r3
 8013f4a:	00db      	lsls	r3, r3, #3
 8013f4c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	685b      	ldr	r3, [r3, #4]
 8013f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f56:	2200      	movs	r2, #0
 8013f58:	701a      	strb	r2, [r3, #0]
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	705a      	strb	r2, [r3, #1]
 8013f5e:	2200      	movs	r2, #0
 8013f60:	709a      	strb	r2, [r3, #2]
 8013f62:	2200      	movs	r2, #0
 8013f64:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f68:	8afa      	ldrh	r2, [r7, #22]
 8013f6a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013f6c:	8afa      	ldrh	r2, [r7, #22]
 8013f6e:	8b7b      	ldrh	r3, [r7, #26]
 8013f70:	4413      	add	r3, r2
 8013f72:	b29a      	uxth	r2, r3
 8013f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f76:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7a:	88db      	ldrh	r3, [r3, #6]
 8013f7c:	b29b      	uxth	r3, r3
 8013f7e:	8afa      	ldrh	r2, [r7, #22]
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d902      	bls.n	8013f8a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f88:	e106      	b.n	8014198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8013f90:	e068      	b.n	8014064 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f94:	685b      	ldr	r3, [r3, #4]
 8013f96:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f9a:	889b      	ldrh	r3, [r3, #4]
 8013f9c:	b29a      	uxth	r2, r3
 8013f9e:	693b      	ldr	r3, [r7, #16]
 8013fa0:	889b      	ldrh	r3, [r3, #4]
 8013fa2:	b29b      	uxth	r3, r3
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d235      	bcs.n	8014014 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d020      	beq.n	8013ff6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb6:	889b      	ldrh	r3, [r3, #4]
 8013fb8:	b29a      	uxth	r2, r3
 8013fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fbc:	88db      	ldrh	r3, [r3, #6]
 8013fbe:	b29b      	uxth	r3, r3
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d307      	bcc.n	8013fd4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fc6:	88db      	ldrh	r3, [r3, #6]
 8013fc8:	b29a      	uxth	r2, r3
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	889b      	ldrh	r3, [r3, #4]
 8013fce:	b29b      	uxth	r3, r3
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d902      	bls.n	8013fda <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013fd8:	e0de      	b.n	8014198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fdc:	68ba      	ldr	r2, [r7, #8]
 8013fde:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe2:	88db      	ldrh	r3, [r3, #6]
 8013fe4:	b29a      	uxth	r2, r3
 8013fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe8:	889b      	ldrh	r3, [r3, #4]
 8013fea:	b29b      	uxth	r3, r3
 8013fec:	429a      	cmp	r2, r3
 8013fee:	d03d      	beq.n	801406c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013ff4:	e03a      	b.n	801406c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff8:	88db      	ldrh	r3, [r3, #6]
 8013ffa:	b29a      	uxth	r2, r3
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	889b      	ldrh	r3, [r3, #4]
 8014000:	b29b      	uxth	r3, r3
 8014002:	429a      	cmp	r2, r3
 8014004:	d902      	bls.n	801400c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801400a:	e0c5      	b.n	8014198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	68ba      	ldr	r2, [r7, #8]
 8014010:	605a      	str	r2, [r3, #4]
      break;
 8014012:	e02b      	b.n	801406c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014016:	889b      	ldrh	r3, [r3, #4]
 8014018:	b29a      	uxth	r2, r3
 801401a:	693b      	ldr	r3, [r7, #16]
 801401c:	889b      	ldrh	r3, [r3, #4]
 801401e:	b29b      	uxth	r3, r3
 8014020:	429a      	cmp	r2, r3
 8014022:	d102      	bne.n	801402a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014028:	e0b6      	b.n	8014198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801402c:	889b      	ldrh	r3, [r3, #4]
 801402e:	b29a      	uxth	r2, r3
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	88db      	ldrh	r3, [r3, #6]
 8014034:	b29b      	uxth	r3, r3
 8014036:	429a      	cmp	r2, r3
 8014038:	d202      	bcs.n	8014040 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801403a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801403e:	e0ab      	b.n	8014198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014042:	2b00      	cmp	r3, #0
 8014044:	d009      	beq.n	801405a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014048:	88db      	ldrh	r3, [r3, #6]
 801404a:	b29a      	uxth	r2, r3
 801404c:	693b      	ldr	r3, [r7, #16]
 801404e:	889b      	ldrh	r3, [r3, #4]
 8014050:	b29b      	uxth	r3, r3
 8014052:	429a      	cmp	r2, r3
 8014054:	d001      	beq.n	801405a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014056:	2300      	movs	r3, #0
 8014058:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014066:	2b00      	cmp	r3, #0
 8014068:	d193      	bne.n	8013f92 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801406a:	e000      	b.n	801406e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801406c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014070:	2b00      	cmp	r3, #0
 8014072:	d12d      	bne.n	80140d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014076:	2b00      	cmp	r3, #0
 8014078:	d01c      	beq.n	80140b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801407c:	88db      	ldrh	r3, [r3, #6]
 801407e:	b29a      	uxth	r2, r3
 8014080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014082:	889b      	ldrh	r3, [r3, #4]
 8014084:	b29b      	uxth	r3, r3
 8014086:	429a      	cmp	r2, r3
 8014088:	d906      	bls.n	8014098 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801408a:	4b45      	ldr	r3, [pc, #276]	; (80141a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801408c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014090:	4944      	ldr	r1, [pc, #272]	; (80141a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014092:	4845      	ldr	r0, [pc, #276]	; (80141a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014094:	f009 fb30 	bl	801d6f8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801409a:	68ba      	ldr	r2, [r7, #8]
 801409c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140a0:	88db      	ldrh	r3, [r3, #6]
 80140a2:	b29a      	uxth	r2, r3
 80140a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a6:	889b      	ldrh	r3, [r3, #4]
 80140a8:	b29b      	uxth	r3, r3
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d010      	beq.n	80140d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80140ae:	2300      	movs	r3, #0
 80140b0:	623b      	str	r3, [r7, #32]
 80140b2:	e00d      	b.n	80140d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	685b      	ldr	r3, [r3, #4]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d006      	beq.n	80140ca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80140bc:	4b38      	ldr	r3, [pc, #224]	; (80141a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80140be:	f240 12bf 	movw	r2, #447	; 0x1bf
 80140c2:	493a      	ldr	r1, [pc, #232]	; (80141ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80140c4:	4838      	ldr	r0, [pc, #224]	; (80141a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80140c6:	f009 fb17 	bl	801d6f8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	68ba      	ldr	r2, [r7, #8]
 80140ce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d105      	bne.n	80140e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	7f9b      	ldrb	r3, [r3, #30]
 80140da:	f003 0301 	and.w	r3, r3, #1
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d059      	beq.n	8014196 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80140e2:	6a3b      	ldr	r3, [r7, #32]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d04f      	beq.n	8014188 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	685b      	ldr	r3, [r3, #4]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d006      	beq.n	80140fe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	685b      	ldr	r3, [r3, #4]
 80140f4:	685b      	ldr	r3, [r3, #4]
 80140f6:	889b      	ldrh	r3, [r3, #4]
 80140f8:	b29b      	uxth	r3, r3
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d002      	beq.n	8014104 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80140fe:	2300      	movs	r3, #0
 8014100:	623b      	str	r3, [r7, #32]
 8014102:	e041      	b.n	8014188 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014106:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801410e:	e012      	b.n	8014136 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014112:	685b      	ldr	r3, [r3, #4]
 8014114:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014118:	88db      	ldrh	r3, [r3, #6]
 801411a:	b29a      	uxth	r2, r3
 801411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801411e:	889b      	ldrh	r3, [r3, #4]
 8014120:	b29b      	uxth	r3, r3
 8014122:	429a      	cmp	r2, r3
 8014124:	d002      	beq.n	801412c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014126:	2300      	movs	r3, #0
 8014128:	623b      	str	r3, [r7, #32]
            break;
 801412a:	e007      	b.n	801413c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801412e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014138:	2b00      	cmp	r3, #0
 801413a:	d1e9      	bne.n	8014110 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801413c:	6a3b      	ldr	r3, [r7, #32]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d022      	beq.n	8014188 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	685b      	ldr	r3, [r3, #4]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d106      	bne.n	8014158 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801414a:	4b15      	ldr	r3, [pc, #84]	; (80141a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801414c:	f240 12df 	movw	r2, #479	; 0x1df
 8014150:	4917      	ldr	r1, [pc, #92]	; (80141b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014152:	4815      	ldr	r0, [pc, #84]	; (80141a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014154:	f009 fad0 	bl	801d6f8 <iprintf>
          LWIP_ASSERT("sanity check",
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	685b      	ldr	r3, [r3, #4]
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014160:	429a      	cmp	r2, r3
 8014162:	d106      	bne.n	8014172 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014164:	4b0e      	ldr	r3, [pc, #56]	; (80141a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014166:	f240 12e1 	movw	r2, #481	; 0x1e1
 801416a:	4911      	ldr	r1, [pc, #68]	; (80141b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801416c:	480e      	ldr	r0, [pc, #56]	; (80141a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801416e:	f009 fac3 	bl	801d6f8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d006      	beq.n	8014188 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801417a:	4b09      	ldr	r3, [pc, #36]	; (80141a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801417c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014180:	490c      	ldr	r1, [pc, #48]	; (80141b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014182:	4809      	ldr	r0, [pc, #36]	; (80141a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014184:	f009 fab8 	bl	801d6f8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014188:	6a3b      	ldr	r3, [r7, #32]
 801418a:	2b00      	cmp	r3, #0
 801418c:	bf14      	ite	ne
 801418e:	2301      	movne	r3, #1
 8014190:	2300      	moveq	r3, #0
 8014192:	b2db      	uxtb	r3, r3
 8014194:	e000      	b.n	8014198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014196:	2300      	movs	r3, #0
}
 8014198:	4618      	mov	r0, r3
 801419a:	3730      	adds	r7, #48	; 0x30
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}
 80141a0:	080201e8 	.word	0x080201e8
 80141a4:	080202e8 	.word	0x080202e8
 80141a8:	0802024c 	.word	0x0802024c
 80141ac:	08020308 	.word	0x08020308
 80141b0:	08020340 	.word	0x08020340
 80141b4:	08020350 	.word	0x08020350

080141b8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b08e      	sub	sp, #56	; 0x38
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	685b      	ldr	r3, [r3, #4]
 80141c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80141c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141c8:	781b      	ldrb	r3, [r3, #0]
 80141ca:	f003 030f 	and.w	r3, r3, #15
 80141ce:	b2db      	uxtb	r3, r3
 80141d0:	009b      	lsls	r3, r3, #2
 80141d2:	b2db      	uxtb	r3, r3
 80141d4:	2b14      	cmp	r3, #20
 80141d6:	f040 8167 	bne.w	80144a8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80141da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141dc:	88db      	ldrh	r3, [r3, #6]
 80141de:	b29b      	uxth	r3, r3
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7fc f871 	bl	80102c8 <lwip_htons>
 80141e6:	4603      	mov	r3, r0
 80141e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80141ec:	b29b      	uxth	r3, r3
 80141ee:	00db      	lsls	r3, r3, #3
 80141f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80141f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f4:	885b      	ldrh	r3, [r3, #2]
 80141f6:	b29b      	uxth	r3, r3
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7fc f865 	bl	80102c8 <lwip_htons>
 80141fe:	4603      	mov	r3, r0
 8014200:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014204:	781b      	ldrb	r3, [r3, #0]
 8014206:	f003 030f 	and.w	r3, r3, #15
 801420a:	b2db      	uxtb	r3, r3
 801420c:	009b      	lsls	r3, r3, #2
 801420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014216:	b29b      	uxth	r3, r3
 8014218:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801421a:	429a      	cmp	r2, r3
 801421c:	f0c0 8146 	bcc.w	80144ac <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014220:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014224:	b29b      	uxth	r3, r3
 8014226:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014228:	1ad3      	subs	r3, r2, r3
 801422a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	f001 ff41 	bl	80160b4 <pbuf_clen>
 8014232:	4603      	mov	r3, r0
 8014234:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014236:	4ba3      	ldr	r3, [pc, #652]	; (80144c4 <ip4_reass+0x30c>)
 8014238:	881b      	ldrh	r3, [r3, #0]
 801423a:	461a      	mov	r2, r3
 801423c:	8c3b      	ldrh	r3, [r7, #32]
 801423e:	4413      	add	r3, r2
 8014240:	2b0a      	cmp	r3, #10
 8014242:	dd10      	ble.n	8014266 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014244:	8c3b      	ldrh	r3, [r7, #32]
 8014246:	4619      	mov	r1, r3
 8014248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801424a:	f7ff fd81 	bl	8013d50 <ip_reass_remove_oldest_datagram>
 801424e:	4603      	mov	r3, r0
 8014250:	2b00      	cmp	r3, #0
 8014252:	f000 812d 	beq.w	80144b0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014256:	4b9b      	ldr	r3, [pc, #620]	; (80144c4 <ip4_reass+0x30c>)
 8014258:	881b      	ldrh	r3, [r3, #0]
 801425a:	461a      	mov	r2, r3
 801425c:	8c3b      	ldrh	r3, [r7, #32]
 801425e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014260:	2b0a      	cmp	r3, #10
 8014262:	f300 8125 	bgt.w	80144b0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014266:	4b98      	ldr	r3, [pc, #608]	; (80144c8 <ip4_reass+0x310>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	633b      	str	r3, [r7, #48]	; 0x30
 801426c:	e015      	b.n	801429a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014270:	695a      	ldr	r2, [r3, #20]
 8014272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014274:	68db      	ldr	r3, [r3, #12]
 8014276:	429a      	cmp	r2, r3
 8014278:	d10c      	bne.n	8014294 <ip4_reass+0xdc>
 801427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427c:	699a      	ldr	r2, [r3, #24]
 801427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014280:	691b      	ldr	r3, [r3, #16]
 8014282:	429a      	cmp	r2, r3
 8014284:	d106      	bne.n	8014294 <ip4_reass+0xdc>
 8014286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014288:	899a      	ldrh	r2, [r3, #12]
 801428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801428c:	889b      	ldrh	r3, [r3, #4]
 801428e:	b29b      	uxth	r3, r3
 8014290:	429a      	cmp	r2, r3
 8014292:	d006      	beq.n	80142a2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	633b      	str	r3, [r7, #48]	; 0x30
 801429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801429c:	2b00      	cmp	r3, #0
 801429e:	d1e6      	bne.n	801426e <ip4_reass+0xb6>
 80142a0:	e000      	b.n	80142a4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80142a2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80142a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d109      	bne.n	80142be <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80142aa:	8c3b      	ldrh	r3, [r7, #32]
 80142ac:	4619      	mov	r1, r3
 80142ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142b0:	f7ff fdb0 	bl	8013e14 <ip_reass_enqueue_new_datagram>
 80142b4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80142b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d11c      	bne.n	80142f6 <ip4_reass+0x13e>
      goto nullreturn;
 80142bc:	e0f9      	b.n	80144b2 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80142be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142c0:	88db      	ldrh	r3, [r3, #6]
 80142c2:	b29b      	uxth	r3, r3
 80142c4:	4618      	mov	r0, r3
 80142c6:	f7fb ffff 	bl	80102c8 <lwip_htons>
 80142ca:	4603      	mov	r3, r0
 80142cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d110      	bne.n	80142f6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80142d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d6:	89db      	ldrh	r3, [r3, #14]
 80142d8:	4618      	mov	r0, r3
 80142da:	f7fb fff5 	bl	80102c8 <lwip_htons>
 80142de:	4603      	mov	r3, r0
 80142e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d006      	beq.n	80142f6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80142e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ea:	3308      	adds	r3, #8
 80142ec:	2214      	movs	r2, #20
 80142ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80142f0:	4618      	mov	r0, r3
 80142f2:	f008 fd9a 	bl	801ce2a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80142f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f8:	88db      	ldrh	r3, [r3, #6]
 80142fa:	b29b      	uxth	r3, r3
 80142fc:	f003 0320 	and.w	r3, r3, #32
 8014300:	2b00      	cmp	r3, #0
 8014302:	bf0c      	ite	eq
 8014304:	2301      	moveq	r3, #1
 8014306:	2300      	movne	r3, #0
 8014308:	b2db      	uxtb	r3, r3
 801430a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801430c:	69fb      	ldr	r3, [r7, #28]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d00e      	beq.n	8014330 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014312:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014316:	4413      	add	r3, r2
 8014318:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801431a:	8b7a      	ldrh	r2, [r7, #26]
 801431c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801431e:	429a      	cmp	r2, r3
 8014320:	f0c0 80a0 	bcc.w	8014464 <ip4_reass+0x2ac>
 8014324:	8b7b      	ldrh	r3, [r7, #26]
 8014326:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801432a:	4293      	cmp	r3, r2
 801432c:	f200 809a 	bhi.w	8014464 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014330:	69fa      	ldr	r2, [r7, #28]
 8014332:	6879      	ldr	r1, [r7, #4]
 8014334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014336:	f7ff fdd5 	bl	8013ee4 <ip_reass_chain_frag_into_datagram_and_validate>
 801433a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014342:	f000 8091 	beq.w	8014468 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014346:	4b5f      	ldr	r3, [pc, #380]	; (80144c4 <ip4_reass+0x30c>)
 8014348:	881a      	ldrh	r2, [r3, #0]
 801434a:	8c3b      	ldrh	r3, [r7, #32]
 801434c:	4413      	add	r3, r2
 801434e:	b29a      	uxth	r2, r3
 8014350:	4b5c      	ldr	r3, [pc, #368]	; (80144c4 <ip4_reass+0x30c>)
 8014352:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d00d      	beq.n	8014376 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801435a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801435c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801435e:	4413      	add	r3, r2
 8014360:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014364:	8a7a      	ldrh	r2, [r7, #18]
 8014366:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801436a:	7f9b      	ldrb	r3, [r3, #30]
 801436c:	f043 0301 	orr.w	r3, r3, #1
 8014370:	b2da      	uxtb	r2, r3
 8014372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014374:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014376:	697b      	ldr	r3, [r7, #20]
 8014378:	2b01      	cmp	r3, #1
 801437a:	d171      	bne.n	8014460 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801437e:	8b9b      	ldrh	r3, [r3, #28]
 8014380:	3314      	adds	r3, #20
 8014382:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014386:	685b      	ldr	r3, [r3, #4]
 8014388:	685b      	ldr	r3, [r3, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	685b      	ldr	r3, [r3, #4]
 8014394:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014398:	3308      	adds	r3, #8
 801439a:	2214      	movs	r2, #20
 801439c:	4619      	mov	r1, r3
 801439e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143a0:	f008 fd43 	bl	801ce2a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80143a4:	8a3b      	ldrh	r3, [r7, #16]
 80143a6:	4618      	mov	r0, r3
 80143a8:	f7fb ff8e 	bl	80102c8 <lwip_htons>
 80143ac:	4603      	mov	r3, r0
 80143ae:	461a      	mov	r2, r3
 80143b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143b2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80143b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143b6:	2200      	movs	r2, #0
 80143b8:	719a      	strb	r2, [r3, #6]
 80143ba:	2200      	movs	r2, #0
 80143bc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80143be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c0:	2200      	movs	r2, #0
 80143c2:	729a      	strb	r2, [r3, #10]
 80143c4:	2200      	movs	r2, #0
 80143c6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80143c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ca:	685b      	ldr	r3, [r3, #4]
 80143cc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80143ce:	e00d      	b.n	80143ec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80143d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143d2:	685b      	ldr	r3, [r3, #4]
 80143d4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80143d6:	2114      	movs	r1, #20
 80143d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80143da:	f001 fd57 	bl	8015e8c <pbuf_remove_header>
      pbuf_cat(p, r);
 80143de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f001 fea7 	bl	8016134 <pbuf_cat>
      r = iprh->next_pbuf;
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80143ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d1ee      	bne.n	80143d0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80143f2:	4b35      	ldr	r3, [pc, #212]	; (80144c8 <ip4_reass+0x310>)
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143f8:	429a      	cmp	r2, r3
 80143fa:	d102      	bne.n	8014402 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80143fc:	2300      	movs	r3, #0
 80143fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014400:	e010      	b.n	8014424 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014402:	4b31      	ldr	r3, [pc, #196]	; (80144c8 <ip4_reass+0x310>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014408:	e007      	b.n	801441a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014410:	429a      	cmp	r2, r3
 8014412:	d006      	beq.n	8014422 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	62fb      	str	r3, [r7, #44]	; 0x2c
 801441a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801441c:	2b00      	cmp	r3, #0
 801441e:	d1f4      	bne.n	801440a <ip4_reass+0x252>
 8014420:	e000      	b.n	8014424 <ip4_reass+0x26c>
          break;
 8014422:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014424:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014428:	f7ff fd2e 	bl	8013e88 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801442c:	6878      	ldr	r0, [r7, #4]
 801442e:	f001 fe41 	bl	80160b4 <pbuf_clen>
 8014432:	4603      	mov	r3, r0
 8014434:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014436:	4b23      	ldr	r3, [pc, #140]	; (80144c4 <ip4_reass+0x30c>)
 8014438:	881b      	ldrh	r3, [r3, #0]
 801443a:	8c3a      	ldrh	r2, [r7, #32]
 801443c:	429a      	cmp	r2, r3
 801443e:	d906      	bls.n	801444e <ip4_reass+0x296>
 8014440:	4b22      	ldr	r3, [pc, #136]	; (80144cc <ip4_reass+0x314>)
 8014442:	f240 229b 	movw	r2, #667	; 0x29b
 8014446:	4922      	ldr	r1, [pc, #136]	; (80144d0 <ip4_reass+0x318>)
 8014448:	4822      	ldr	r0, [pc, #136]	; (80144d4 <ip4_reass+0x31c>)
 801444a:	f009 f955 	bl	801d6f8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801444e:	4b1d      	ldr	r3, [pc, #116]	; (80144c4 <ip4_reass+0x30c>)
 8014450:	881a      	ldrh	r2, [r3, #0]
 8014452:	8c3b      	ldrh	r3, [r7, #32]
 8014454:	1ad3      	subs	r3, r2, r3
 8014456:	b29a      	uxth	r2, r3
 8014458:	4b1a      	ldr	r3, [pc, #104]	; (80144c4 <ip4_reass+0x30c>)
 801445a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	e02c      	b.n	80144ba <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014460:	2300      	movs	r3, #0
 8014462:	e02a      	b.n	80144ba <ip4_reass+0x302>

nullreturn_ipr:
 8014464:	bf00      	nop
 8014466:	e000      	b.n	801446a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014468:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801446c:	2b00      	cmp	r3, #0
 801446e:	d106      	bne.n	801447e <ip4_reass+0x2c6>
 8014470:	4b16      	ldr	r3, [pc, #88]	; (80144cc <ip4_reass+0x314>)
 8014472:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014476:	4918      	ldr	r1, [pc, #96]	; (80144d8 <ip4_reass+0x320>)
 8014478:	4816      	ldr	r0, [pc, #88]	; (80144d4 <ip4_reass+0x31c>)
 801447a:	f009 f93d 	bl	801d6f8 <iprintf>
  if (ipr->p == NULL) {
 801447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014480:	685b      	ldr	r3, [r3, #4]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d114      	bne.n	80144b0 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014486:	4b10      	ldr	r3, [pc, #64]	; (80144c8 <ip4_reass+0x310>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801448c:	429a      	cmp	r2, r3
 801448e:	d006      	beq.n	801449e <ip4_reass+0x2e6>
 8014490:	4b0e      	ldr	r3, [pc, #56]	; (80144cc <ip4_reass+0x314>)
 8014492:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014496:	4911      	ldr	r1, [pc, #68]	; (80144dc <ip4_reass+0x324>)
 8014498:	480e      	ldr	r0, [pc, #56]	; (80144d4 <ip4_reass+0x31c>)
 801449a:	f009 f92d 	bl	801d6f8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801449e:	2100      	movs	r1, #0
 80144a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144a2:	f7ff fcf1 	bl	8013e88 <ip_reass_dequeue_datagram>
 80144a6:	e004      	b.n	80144b2 <ip4_reass+0x2fa>
    goto nullreturn;
 80144a8:	bf00      	nop
 80144aa:	e002      	b.n	80144b2 <ip4_reass+0x2fa>
    goto nullreturn;
 80144ac:	bf00      	nop
 80144ae:	e000      	b.n	80144b2 <ip4_reass+0x2fa>
  }

nullreturn:
 80144b0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	f001 fd70 	bl	8015f98 <pbuf_free>
  return NULL;
 80144b8:	2300      	movs	r3, #0
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3738      	adds	r7, #56	; 0x38
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	200076d0 	.word	0x200076d0
 80144c8:	200076cc 	.word	0x200076cc
 80144cc:	080201e8 	.word	0x080201e8
 80144d0:	08020374 	.word	0x08020374
 80144d4:	0802024c 	.word	0x0802024c
 80144d8:	08020390 	.word	0x08020390
 80144dc:	0802039c 	.word	0x0802039c

080144e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80144e4:	2005      	movs	r0, #5
 80144e6:	f000 fe35 	bl	8015154 <memp_malloc>
 80144ea:	4603      	mov	r3, r0
}
 80144ec:	4618      	mov	r0, r3
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d106      	bne.n	801450c <ip_frag_free_pbuf_custom_ref+0x1c>
 80144fe:	4b07      	ldr	r3, [pc, #28]	; (801451c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014500:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014504:	4906      	ldr	r1, [pc, #24]	; (8014520 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014506:	4807      	ldr	r0, [pc, #28]	; (8014524 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014508:	f009 f8f6 	bl	801d6f8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801450c:	6879      	ldr	r1, [r7, #4]
 801450e:	2005      	movs	r0, #5
 8014510:	f000 fe96 	bl	8015240 <memp_free>
}
 8014514:	bf00      	nop
 8014516:	3708      	adds	r7, #8
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}
 801451c:	080201e8 	.word	0x080201e8
 8014520:	080203bc 	.word	0x080203bc
 8014524:	0802024c 	.word	0x0802024c

08014528 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b084      	sub	sp, #16
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d106      	bne.n	8014548 <ipfrag_free_pbuf_custom+0x20>
 801453a:	4b11      	ldr	r3, [pc, #68]	; (8014580 <ipfrag_free_pbuf_custom+0x58>)
 801453c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014540:	4910      	ldr	r1, [pc, #64]	; (8014584 <ipfrag_free_pbuf_custom+0x5c>)
 8014542:	4811      	ldr	r0, [pc, #68]	; (8014588 <ipfrag_free_pbuf_custom+0x60>)
 8014544:	f009 f8d8 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014548:	68fa      	ldr	r2, [r7, #12]
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	429a      	cmp	r2, r3
 801454e:	d006      	beq.n	801455e <ipfrag_free_pbuf_custom+0x36>
 8014550:	4b0b      	ldr	r3, [pc, #44]	; (8014580 <ipfrag_free_pbuf_custom+0x58>)
 8014552:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014556:	490d      	ldr	r1, [pc, #52]	; (801458c <ipfrag_free_pbuf_custom+0x64>)
 8014558:	480b      	ldr	r0, [pc, #44]	; (8014588 <ipfrag_free_pbuf_custom+0x60>)
 801455a:	f009 f8cd 	bl	801d6f8 <iprintf>
  if (pcr->original != NULL) {
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	695b      	ldr	r3, [r3, #20]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d004      	beq.n	8014570 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	695b      	ldr	r3, [r3, #20]
 801456a:	4618      	mov	r0, r3
 801456c:	f001 fd14 	bl	8015f98 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014570:	68f8      	ldr	r0, [r7, #12]
 8014572:	f7ff ffbd 	bl	80144f0 <ip_frag_free_pbuf_custom_ref>
}
 8014576:	bf00      	nop
 8014578:	3710      	adds	r7, #16
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}
 801457e:	bf00      	nop
 8014580:	080201e8 	.word	0x080201e8
 8014584:	080203c8 	.word	0x080203c8
 8014588:	0802024c 	.word	0x0802024c
 801458c:	080203d4 	.word	0x080203d4

08014590 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b094      	sub	sp, #80	; 0x50
 8014594:	af02      	add	r7, sp, #8
 8014596:	60f8      	str	r0, [r7, #12]
 8014598:	60b9      	str	r1, [r7, #8]
 801459a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801459c:	2300      	movs	r3, #0
 801459e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80145a6:	3b14      	subs	r3, #20
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	da00      	bge.n	80145ae <ip4_frag+0x1e>
 80145ac:	3307      	adds	r3, #7
 80145ae:	10db      	asrs	r3, r3, #3
 80145b0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80145b2:	2314      	movs	r3, #20
 80145b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	685b      	ldr	r3, [r3, #4]
 80145ba:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80145bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145be:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80145c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c2:	781b      	ldrb	r3, [r3, #0]
 80145c4:	f003 030f 	and.w	r3, r3, #15
 80145c8:	b2db      	uxtb	r3, r3
 80145ca:	009b      	lsls	r3, r3, #2
 80145cc:	b2db      	uxtb	r3, r3
 80145ce:	2b14      	cmp	r3, #20
 80145d0:	d002      	beq.n	80145d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80145d2:	f06f 0305 	mvn.w	r3, #5
 80145d6:	e10f      	b.n	80147f8 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	895b      	ldrh	r3, [r3, #10]
 80145dc:	2b13      	cmp	r3, #19
 80145de:	d809      	bhi.n	80145f4 <ip4_frag+0x64>
 80145e0:	4b87      	ldr	r3, [pc, #540]	; (8014800 <ip4_frag+0x270>)
 80145e2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80145e6:	4987      	ldr	r1, [pc, #540]	; (8014804 <ip4_frag+0x274>)
 80145e8:	4887      	ldr	r0, [pc, #540]	; (8014808 <ip4_frag+0x278>)
 80145ea:	f009 f885 	bl	801d6f8 <iprintf>
 80145ee:	f06f 0305 	mvn.w	r3, #5
 80145f2:	e101      	b.n	80147f8 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80145f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f6:	88db      	ldrh	r3, [r3, #6]
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7fb fe64 	bl	80102c8 <lwip_htons>
 8014600:	4603      	mov	r3, r0
 8014602:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014604:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014606:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801460a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801460e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014614:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	891b      	ldrh	r3, [r3, #8]
 801461a:	3b14      	subs	r3, #20
 801461c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014620:	e0e0      	b.n	80147e4 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014622:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014624:	00db      	lsls	r3, r3, #3
 8014626:	b29b      	uxth	r3, r3
 8014628:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801462c:	4293      	cmp	r3, r2
 801462e:	bf28      	it	cs
 8014630:	4613      	movcs	r3, r2
 8014632:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014634:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014638:	2114      	movs	r1, #20
 801463a:	200e      	movs	r0, #14
 801463c:	f001 f9cc 	bl	80159d8 <pbuf_alloc>
 8014640:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014644:	2b00      	cmp	r3, #0
 8014646:	f000 80d4 	beq.w	80147f2 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801464c:	895b      	ldrh	r3, [r3, #10]
 801464e:	2b13      	cmp	r3, #19
 8014650:	d806      	bhi.n	8014660 <ip4_frag+0xd0>
 8014652:	4b6b      	ldr	r3, [pc, #428]	; (8014800 <ip4_frag+0x270>)
 8014654:	f240 3225 	movw	r2, #805	; 0x325
 8014658:	496c      	ldr	r1, [pc, #432]	; (801480c <ip4_frag+0x27c>)
 801465a:	486b      	ldr	r0, [pc, #428]	; (8014808 <ip4_frag+0x278>)
 801465c:	f009 f84c 	bl	801d6f8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	2214      	movs	r2, #20
 8014666:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014668:	4618      	mov	r0, r3
 801466a:	f008 fbde 	bl	801ce2a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014670:	685b      	ldr	r3, [r3, #4]
 8014672:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014674:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014676:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801467a:	e064      	b.n	8014746 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	895a      	ldrh	r2, [r3, #10]
 8014680:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014682:	1ad3      	subs	r3, r2, r3
 8014684:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	895b      	ldrh	r3, [r3, #10]
 801468a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801468c:	429a      	cmp	r2, r3
 801468e:	d906      	bls.n	801469e <ip4_frag+0x10e>
 8014690:	4b5b      	ldr	r3, [pc, #364]	; (8014800 <ip4_frag+0x270>)
 8014692:	f240 322d 	movw	r2, #813	; 0x32d
 8014696:	495e      	ldr	r1, [pc, #376]	; (8014810 <ip4_frag+0x280>)
 8014698:	485b      	ldr	r0, [pc, #364]	; (8014808 <ip4_frag+0x278>)
 801469a:	f009 f82d 	bl	801d6f8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801469e:	8bfa      	ldrh	r2, [r7, #30]
 80146a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80146a4:	4293      	cmp	r3, r2
 80146a6:	bf28      	it	cs
 80146a8:	4613      	movcs	r3, r2
 80146aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80146ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d105      	bne.n	80146c2 <ip4_frag+0x132>
        poff = 0;
 80146b6:	2300      	movs	r3, #0
 80146b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	60fb      	str	r3, [r7, #12]
        continue;
 80146c0:	e041      	b.n	8014746 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80146c2:	f7ff ff0d 	bl	80144e0 <ip_frag_alloc_pbuf_custom_ref>
 80146c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80146c8:	69bb      	ldr	r3, [r7, #24]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d103      	bne.n	80146d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80146ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80146d0:	f001 fc62 	bl	8015f98 <pbuf_free>
        goto memerr;
 80146d4:	e08e      	b.n	80147f4 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80146d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80146dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80146de:	4413      	add	r3, r2
 80146e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80146e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80146e8:	9201      	str	r2, [sp, #4]
 80146ea:	9300      	str	r3, [sp, #0]
 80146ec:	4603      	mov	r3, r0
 80146ee:	2241      	movs	r2, #65	; 0x41
 80146f0:	2000      	movs	r0, #0
 80146f2:	f001 fa97 	bl	8015c24 <pbuf_alloced_custom>
 80146f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80146f8:	697b      	ldr	r3, [r7, #20]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d106      	bne.n	801470c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80146fe:	69b8      	ldr	r0, [r7, #24]
 8014700:	f7ff fef6 	bl	80144f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014706:	f001 fc47 	bl	8015f98 <pbuf_free>
        goto memerr;
 801470a:	e073      	b.n	80147f4 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 801470c:	68f8      	ldr	r0, [r7, #12]
 801470e:	f001 fce9 	bl	80160e4 <pbuf_ref>
      pcr->original = p;
 8014712:	69bb      	ldr	r3, [r7, #24]
 8014714:	68fa      	ldr	r2, [r7, #12]
 8014716:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014718:	69bb      	ldr	r3, [r7, #24]
 801471a:	4a3e      	ldr	r2, [pc, #248]	; (8014814 <ip4_frag+0x284>)
 801471c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801471e:	6979      	ldr	r1, [r7, #20]
 8014720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014722:	f001 fd07 	bl	8016134 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014726:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801472a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801472e:	1ad3      	subs	r3, r2, r3
 8014730:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014734:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014738:	2b00      	cmp	r3, #0
 801473a:	d004      	beq.n	8014746 <ip4_frag+0x1b6>
        poff = 0;
 801473c:	2300      	movs	r3, #0
 801473e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014746:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801474a:	2b00      	cmp	r3, #0
 801474c:	d196      	bne.n	801467c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801474e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014750:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014754:	4413      	add	r3, r2
 8014756:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014758:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801475c:	68bb      	ldr	r3, [r7, #8]
 801475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014760:	3b14      	subs	r3, #20
 8014762:	429a      	cmp	r2, r3
 8014764:	bfd4      	ite	le
 8014766:	2301      	movle	r3, #1
 8014768:	2300      	movgt	r3, #0
 801476a:	b2db      	uxtb	r3, r3
 801476c:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801476e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014772:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014776:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014778:	6a3b      	ldr	r3, [r7, #32]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d002      	beq.n	8014784 <ip4_frag+0x1f4>
 801477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014780:	2b00      	cmp	r3, #0
 8014782:	d003      	beq.n	801478c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014784:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014786:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801478a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801478c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801478e:	4618      	mov	r0, r3
 8014790:	f7fb fd9a 	bl	80102c8 <lwip_htons>
 8014794:	4603      	mov	r3, r0
 8014796:	461a      	mov	r2, r3
 8014798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801479a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801479c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801479e:	3314      	adds	r3, #20
 80147a0:	b29b      	uxth	r3, r3
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7fb fd90 	bl	80102c8 <lwip_htons>
 80147a8:	4603      	mov	r3, r0
 80147aa:	461a      	mov	r2, r3
 80147ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ae:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80147b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b2:	2200      	movs	r2, #0
 80147b4:	729a      	strb	r2, [r3, #10]
 80147b6:	2200      	movs	r2, #0
 80147b8:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	695b      	ldr	r3, [r3, #20]
 80147be:	687a      	ldr	r2, [r7, #4]
 80147c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80147c2:	68b8      	ldr	r0, [r7, #8]
 80147c4:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80147c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147c8:	f001 fbe6 	bl	8015f98 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80147cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80147d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80147d2:	1ad3      	subs	r3, r2, r3
 80147d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80147d8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80147dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80147de:	4413      	add	r3, r2
 80147e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80147e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	f47f af1a 	bne.w	8014622 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80147ee:	2300      	movs	r3, #0
 80147f0:	e002      	b.n	80147f8 <ip4_frag+0x268>
      goto memerr;
 80147f2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80147f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80147f8:	4618      	mov	r0, r3
 80147fa:	3748      	adds	r7, #72	; 0x48
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bd80      	pop	{r7, pc}
 8014800:	080201e8 	.word	0x080201e8
 8014804:	080203e0 	.word	0x080203e0
 8014808:	0802024c 	.word	0x0802024c
 801480c:	080203fc 	.word	0x080203fc
 8014810:	0802041c 	.word	0x0802041c
 8014814:	08014529 	.word	0x08014529

08014818 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8014818:	b480      	push	{r7}
 801481a:	b083      	sub	sp, #12
 801481c:	af00      	add	r7, sp, #0
 801481e:	4603      	mov	r3, r0
 8014820:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8014822:	4b05      	ldr	r3, [pc, #20]	; (8014838 <ptr_to_mem+0x20>)
 8014824:	681a      	ldr	r2, [r3, #0]
 8014826:	88fb      	ldrh	r3, [r7, #6]
 8014828:	4413      	add	r3, r2
}
 801482a:	4618      	mov	r0, r3
 801482c:	370c      	adds	r7, #12
 801482e:	46bd      	mov	sp, r7
 8014830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014834:	4770      	bx	lr
 8014836:	bf00      	nop
 8014838:	200076d4 	.word	0x200076d4

0801483c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801483c:	b480      	push	{r7}
 801483e:	b083      	sub	sp, #12
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	4a05      	ldr	r2, [pc, #20]	; (801485c <mem_to_ptr+0x20>)
 8014848:	6812      	ldr	r2, [r2, #0]
 801484a:	1a9b      	subs	r3, r3, r2
 801484c:	b29b      	uxth	r3, r3
}
 801484e:	4618      	mov	r0, r3
 8014850:	370c      	adds	r7, #12
 8014852:	46bd      	mov	sp, r7
 8014854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014858:	4770      	bx	lr
 801485a:	bf00      	nop
 801485c:	200076d4 	.word	0x200076d4

08014860 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8014860:	b590      	push	{r4, r7, lr}
 8014862:	b085      	sub	sp, #20
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8014868:	4b47      	ldr	r3, [pc, #284]	; (8014988 <plug_holes+0x128>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	687a      	ldr	r2, [r7, #4]
 801486e:	429a      	cmp	r2, r3
 8014870:	d206      	bcs.n	8014880 <plug_holes+0x20>
 8014872:	4b46      	ldr	r3, [pc, #280]	; (801498c <plug_holes+0x12c>)
 8014874:	f240 12df 	movw	r2, #479	; 0x1df
 8014878:	4945      	ldr	r1, [pc, #276]	; (8014990 <plug_holes+0x130>)
 801487a:	4846      	ldr	r0, [pc, #280]	; (8014994 <plug_holes+0x134>)
 801487c:	f008 ff3c 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014880:	4b45      	ldr	r3, [pc, #276]	; (8014998 <plug_holes+0x138>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	687a      	ldr	r2, [r7, #4]
 8014886:	429a      	cmp	r2, r3
 8014888:	d306      	bcc.n	8014898 <plug_holes+0x38>
 801488a:	4b40      	ldr	r3, [pc, #256]	; (801498c <plug_holes+0x12c>)
 801488c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014890:	4942      	ldr	r1, [pc, #264]	; (801499c <plug_holes+0x13c>)
 8014892:	4840      	ldr	r0, [pc, #256]	; (8014994 <plug_holes+0x134>)
 8014894:	f008 ff30 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	791b      	ldrb	r3, [r3, #4]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d006      	beq.n	80148ae <plug_holes+0x4e>
 80148a0:	4b3a      	ldr	r3, [pc, #232]	; (801498c <plug_holes+0x12c>)
 80148a2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80148a6:	493e      	ldr	r1, [pc, #248]	; (80149a0 <plug_holes+0x140>)
 80148a8:	483a      	ldr	r0, [pc, #232]	; (8014994 <plug_holes+0x134>)
 80148aa:	f008 ff25 	bl	801d6f8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	881b      	ldrh	r3, [r3, #0]
 80148b2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80148b6:	4293      	cmp	r3, r2
 80148b8:	d906      	bls.n	80148c8 <plug_holes+0x68>
 80148ba:	4b34      	ldr	r3, [pc, #208]	; (801498c <plug_holes+0x12c>)
 80148bc:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80148c0:	4938      	ldr	r1, [pc, #224]	; (80149a4 <plug_holes+0x144>)
 80148c2:	4834      	ldr	r0, [pc, #208]	; (8014994 <plug_holes+0x134>)
 80148c4:	f008 ff18 	bl	801d6f8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	881b      	ldrh	r3, [r3, #0]
 80148cc:	4618      	mov	r0, r3
 80148ce:	f7ff ffa3 	bl	8014818 <ptr_to_mem>
 80148d2:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80148d4:	687a      	ldr	r2, [r7, #4]
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	429a      	cmp	r2, r3
 80148da:	d025      	beq.n	8014928 <plug_holes+0xc8>
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	791b      	ldrb	r3, [r3, #4]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d121      	bne.n	8014928 <plug_holes+0xc8>
 80148e4:	4b2c      	ldr	r3, [pc, #176]	; (8014998 <plug_holes+0x138>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	68fa      	ldr	r2, [r7, #12]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d01c      	beq.n	8014928 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80148ee:	4b2e      	ldr	r3, [pc, #184]	; (80149a8 <plug_holes+0x148>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	68fa      	ldr	r2, [r7, #12]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d102      	bne.n	80148fe <plug_holes+0x9e>
      lfree = mem;
 80148f8:	4a2b      	ldr	r2, [pc, #172]	; (80149a8 <plug_holes+0x148>)
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	881a      	ldrh	r2, [r3, #0]
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	881b      	ldrh	r3, [r3, #0]
 801490a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 801490e:	4293      	cmp	r3, r2
 8014910:	d00a      	beq.n	8014928 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	881b      	ldrh	r3, [r3, #0]
 8014916:	4618      	mov	r0, r3
 8014918:	f7ff ff7e 	bl	8014818 <ptr_to_mem>
 801491c:	4604      	mov	r4, r0
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f7ff ff8c 	bl	801483c <mem_to_ptr>
 8014924:	4603      	mov	r3, r0
 8014926:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	885b      	ldrh	r3, [r3, #2]
 801492c:	4618      	mov	r0, r3
 801492e:	f7ff ff73 	bl	8014818 <ptr_to_mem>
 8014932:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8014934:	68ba      	ldr	r2, [r7, #8]
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	429a      	cmp	r2, r3
 801493a:	d020      	beq.n	801497e <plug_holes+0x11e>
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	791b      	ldrb	r3, [r3, #4]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d11c      	bne.n	801497e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8014944:	4b18      	ldr	r3, [pc, #96]	; (80149a8 <plug_holes+0x148>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	687a      	ldr	r2, [r7, #4]
 801494a:	429a      	cmp	r2, r3
 801494c:	d102      	bne.n	8014954 <plug_holes+0xf4>
      lfree = pmem;
 801494e:	4a16      	ldr	r2, [pc, #88]	; (80149a8 <plug_holes+0x148>)
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	881a      	ldrh	r2, [r3, #0]
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	881b      	ldrh	r3, [r3, #0]
 8014960:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014964:	4293      	cmp	r3, r2
 8014966:	d00a      	beq.n	801497e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	881b      	ldrh	r3, [r3, #0]
 801496c:	4618      	mov	r0, r3
 801496e:	f7ff ff53 	bl	8014818 <ptr_to_mem>
 8014972:	4604      	mov	r4, r0
 8014974:	68b8      	ldr	r0, [r7, #8]
 8014976:	f7ff ff61 	bl	801483c <mem_to_ptr>
 801497a:	4603      	mov	r3, r0
 801497c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801497e:	bf00      	nop
 8014980:	3714      	adds	r7, #20
 8014982:	46bd      	mov	sp, r7
 8014984:	bd90      	pop	{r4, r7, pc}
 8014986:	bf00      	nop
 8014988:	200076d4 	.word	0x200076d4
 801498c:	0802042c 	.word	0x0802042c
 8014990:	08020478 	.word	0x08020478
 8014994:	08020490 	.word	0x08020490
 8014998:	200076d8 	.word	0x200076d8
 801499c:	080204b8 	.word	0x080204b8
 80149a0:	080204d4 	.word	0x080204d4
 80149a4:	080204f0 	.word	0x080204f0
 80149a8:	200076e0 	.word	0x200076e0

080149ac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80149b2:	4b1d      	ldr	r3, [pc, #116]	; (8014a28 <mem_init+0x7c>)
 80149b4:	4a1d      	ldr	r2, [pc, #116]	; (8014a2c <mem_init+0x80>)
 80149b6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80149b8:	4b1b      	ldr	r3, [pc, #108]	; (8014a28 <mem_init+0x7c>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80149c4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2200      	movs	r2, #0
 80149ca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	2200      	movs	r2, #0
 80149d0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80149d2:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 80149d6:	f7ff ff1f 	bl	8014818 <ptr_to_mem>
 80149da:	4602      	mov	r2, r0
 80149dc:	4b14      	ldr	r3, [pc, #80]	; (8014a30 <mem_init+0x84>)
 80149de:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80149e0:	4b13      	ldr	r3, [pc, #76]	; (8014a30 <mem_init+0x84>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	2201      	movs	r2, #1
 80149e6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80149e8:	4b11      	ldr	r3, [pc, #68]	; (8014a30 <mem_init+0x84>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80149f0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80149f2:	4b0f      	ldr	r3, [pc, #60]	; (8014a30 <mem_init+0x84>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80149fa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80149fc:	4b0a      	ldr	r3, [pc, #40]	; (8014a28 <mem_init+0x7c>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	4a0c      	ldr	r2, [pc, #48]	; (8014a34 <mem_init+0x88>)
 8014a02:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8014a04:	480c      	ldr	r0, [pc, #48]	; (8014a38 <mem_init+0x8c>)
 8014a06:	f001 fdf3 	bl	80165f0 <sys_mutex_new>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d006      	beq.n	8014a1e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8014a10:	4b0a      	ldr	r3, [pc, #40]	; (8014a3c <mem_init+0x90>)
 8014a12:	f240 221f 	movw	r2, #543	; 0x21f
 8014a16:	490a      	ldr	r1, [pc, #40]	; (8014a40 <mem_init+0x94>)
 8014a18:	480a      	ldr	r0, [pc, #40]	; (8014a44 <mem_init+0x98>)
 8014a1a:	f008 fe6d 	bl	801d6f8 <iprintf>
  }
}
 8014a1e:	bf00      	nop
 8014a20:	3708      	adds	r7, #8
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}
 8014a26:	bf00      	nop
 8014a28:	200076d4 	.word	0x200076d4
 8014a2c:	30044000 	.word	0x30044000
 8014a30:	200076d8 	.word	0x200076d8
 8014a34:	200076e0 	.word	0x200076e0
 8014a38:	200076dc 	.word	0x200076dc
 8014a3c:	0802042c 	.word	0x0802042c
 8014a40:	0802051c 	.word	0x0802051c
 8014a44:	08020490 	.word	0x08020490

08014a48 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b086      	sub	sp, #24
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f7ff fef3 	bl	801483c <mem_to_ptr>
 8014a56:	4603      	mov	r3, r0
 8014a58:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	881b      	ldrh	r3, [r3, #0]
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f7ff feda 	bl	8014818 <ptr_to_mem>
 8014a64:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	885b      	ldrh	r3, [r3, #2]
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7ff fed4 	bl	8014818 <ptr_to_mem>
 8014a70:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	881b      	ldrh	r3, [r3, #0]
 8014a76:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014a7a:	4293      	cmp	r3, r2
 8014a7c:	d819      	bhi.n	8014ab2 <mem_link_valid+0x6a>
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	885b      	ldrh	r3, [r3, #2]
 8014a82:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014a86:	4293      	cmp	r3, r2
 8014a88:	d813      	bhi.n	8014ab2 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014a8e:	8afa      	ldrh	r2, [r7, #22]
 8014a90:	429a      	cmp	r2, r3
 8014a92:	d004      	beq.n	8014a9e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	881b      	ldrh	r3, [r3, #0]
 8014a98:	8afa      	ldrh	r2, [r7, #22]
 8014a9a:	429a      	cmp	r2, r3
 8014a9c:	d109      	bne.n	8014ab2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014a9e:	4b08      	ldr	r3, [pc, #32]	; (8014ac0 <mem_link_valid+0x78>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014aa2:	693a      	ldr	r2, [r7, #16]
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	d006      	beq.n	8014ab6 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014aa8:	693b      	ldr	r3, [r7, #16]
 8014aaa:	885b      	ldrh	r3, [r3, #2]
 8014aac:	8afa      	ldrh	r2, [r7, #22]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d001      	beq.n	8014ab6 <mem_link_valid+0x6e>
    return 0;
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	e000      	b.n	8014ab8 <mem_link_valid+0x70>
  }
  return 1;
 8014ab6:	2301      	movs	r3, #1
}
 8014ab8:	4618      	mov	r0, r3
 8014aba:	3718      	adds	r7, #24
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}
 8014ac0:	200076d8 	.word	0x200076d8

08014ac4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b088      	sub	sp, #32
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d070      	beq.n	8014bb4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f003 0303 	and.w	r3, r3, #3
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d00d      	beq.n	8014af8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8014adc:	4b37      	ldr	r3, [pc, #220]	; (8014bbc <mem_free+0xf8>)
 8014ade:	f240 2273 	movw	r2, #627	; 0x273
 8014ae2:	4937      	ldr	r1, [pc, #220]	; (8014bc0 <mem_free+0xfc>)
 8014ae4:	4837      	ldr	r0, [pc, #220]	; (8014bc4 <mem_free+0x100>)
 8014ae6:	f008 fe07 	bl	801d6f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014aea:	f001 fdd3 	bl	8016694 <sys_arch_protect>
 8014aee:	60f8      	str	r0, [r7, #12]
 8014af0:	68f8      	ldr	r0, [r7, #12]
 8014af2:	f001 fddd 	bl	80166b0 <sys_arch_unprotect>
    return;
 8014af6:	e05e      	b.n	8014bb6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	3b08      	subs	r3, #8
 8014afc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8014afe:	4b32      	ldr	r3, [pc, #200]	; (8014bc8 <mem_free+0x104>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	69fa      	ldr	r2, [r7, #28]
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d306      	bcc.n	8014b16 <mem_free+0x52>
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	f103 020c 	add.w	r2, r3, #12
 8014b0e:	4b2f      	ldr	r3, [pc, #188]	; (8014bcc <mem_free+0x108>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d90d      	bls.n	8014b32 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8014b16:	4b29      	ldr	r3, [pc, #164]	; (8014bbc <mem_free+0xf8>)
 8014b18:	f240 227f 	movw	r2, #639	; 0x27f
 8014b1c:	492c      	ldr	r1, [pc, #176]	; (8014bd0 <mem_free+0x10c>)
 8014b1e:	4829      	ldr	r0, [pc, #164]	; (8014bc4 <mem_free+0x100>)
 8014b20:	f008 fdea 	bl	801d6f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014b24:	f001 fdb6 	bl	8016694 <sys_arch_protect>
 8014b28:	6138      	str	r0, [r7, #16]
 8014b2a:	6938      	ldr	r0, [r7, #16]
 8014b2c:	f001 fdc0 	bl	80166b0 <sys_arch_unprotect>
    return;
 8014b30:	e041      	b.n	8014bb6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014b32:	4828      	ldr	r0, [pc, #160]	; (8014bd4 <mem_free+0x110>)
 8014b34:	f001 fd72 	bl	801661c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8014b38:	69fb      	ldr	r3, [r7, #28]
 8014b3a:	791b      	ldrb	r3, [r3, #4]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d110      	bne.n	8014b62 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8014b40:	4b1e      	ldr	r3, [pc, #120]	; (8014bbc <mem_free+0xf8>)
 8014b42:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8014b46:	4924      	ldr	r1, [pc, #144]	; (8014bd8 <mem_free+0x114>)
 8014b48:	481e      	ldr	r0, [pc, #120]	; (8014bc4 <mem_free+0x100>)
 8014b4a:	f008 fdd5 	bl	801d6f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014b4e:	4821      	ldr	r0, [pc, #132]	; (8014bd4 <mem_free+0x110>)
 8014b50:	f001 fd73 	bl	801663a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014b54:	f001 fd9e 	bl	8016694 <sys_arch_protect>
 8014b58:	6178      	str	r0, [r7, #20]
 8014b5a:	6978      	ldr	r0, [r7, #20]
 8014b5c:	f001 fda8 	bl	80166b0 <sys_arch_unprotect>
    return;
 8014b60:	e029      	b.n	8014bb6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8014b62:	69f8      	ldr	r0, [r7, #28]
 8014b64:	f7ff ff70 	bl	8014a48 <mem_link_valid>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d110      	bne.n	8014b90 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8014b6e:	4b13      	ldr	r3, [pc, #76]	; (8014bbc <mem_free+0xf8>)
 8014b70:	f240 2295 	movw	r2, #661	; 0x295
 8014b74:	4919      	ldr	r1, [pc, #100]	; (8014bdc <mem_free+0x118>)
 8014b76:	4813      	ldr	r0, [pc, #76]	; (8014bc4 <mem_free+0x100>)
 8014b78:	f008 fdbe 	bl	801d6f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014b7c:	4815      	ldr	r0, [pc, #84]	; (8014bd4 <mem_free+0x110>)
 8014b7e:	f001 fd5c 	bl	801663a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014b82:	f001 fd87 	bl	8016694 <sys_arch_protect>
 8014b86:	61b8      	str	r0, [r7, #24]
 8014b88:	69b8      	ldr	r0, [r7, #24]
 8014b8a:	f001 fd91 	bl	80166b0 <sys_arch_unprotect>
    return;
 8014b8e:	e012      	b.n	8014bb6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8014b90:	69fb      	ldr	r3, [r7, #28]
 8014b92:	2200      	movs	r2, #0
 8014b94:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8014b96:	4b12      	ldr	r3, [pc, #72]	; (8014be0 <mem_free+0x11c>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	69fa      	ldr	r2, [r7, #28]
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	d202      	bcs.n	8014ba6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8014ba0:	4a0f      	ldr	r2, [pc, #60]	; (8014be0 <mem_free+0x11c>)
 8014ba2:	69fb      	ldr	r3, [r7, #28]
 8014ba4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8014ba6:	69f8      	ldr	r0, [r7, #28]
 8014ba8:	f7ff fe5a 	bl	8014860 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014bac:	4809      	ldr	r0, [pc, #36]	; (8014bd4 <mem_free+0x110>)
 8014bae:	f001 fd44 	bl	801663a <sys_mutex_unlock>
 8014bb2:	e000      	b.n	8014bb6 <mem_free+0xf2>
    return;
 8014bb4:	bf00      	nop
}
 8014bb6:	3720      	adds	r7, #32
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}
 8014bbc:	0802042c 	.word	0x0802042c
 8014bc0:	08020538 	.word	0x08020538
 8014bc4:	08020490 	.word	0x08020490
 8014bc8:	200076d4 	.word	0x200076d4
 8014bcc:	200076d8 	.word	0x200076d8
 8014bd0:	0802055c 	.word	0x0802055c
 8014bd4:	200076dc 	.word	0x200076dc
 8014bd8:	08020578 	.word	0x08020578
 8014bdc:	080205a0 	.word	0x080205a0
 8014be0:	200076e0 	.word	0x200076e0

08014be4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b088      	sub	sp, #32
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
 8014bec:	460b      	mov	r3, r1
 8014bee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8014bf0:	887b      	ldrh	r3, [r7, #2]
 8014bf2:	3303      	adds	r3, #3
 8014bf4:	b29b      	uxth	r3, r3
 8014bf6:	f023 0303 	bic.w	r3, r3, #3
 8014bfa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8014bfc:	8bfb      	ldrh	r3, [r7, #30]
 8014bfe:	2b0b      	cmp	r3, #11
 8014c00:	d801      	bhi.n	8014c06 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8014c02:	230c      	movs	r3, #12
 8014c04:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8014c06:	8bfb      	ldrh	r3, [r7, #30]
 8014c08:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014c0c:	4293      	cmp	r3, r2
 8014c0e:	d803      	bhi.n	8014c18 <mem_trim+0x34>
 8014c10:	8bfa      	ldrh	r2, [r7, #30]
 8014c12:	887b      	ldrh	r3, [r7, #2]
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d201      	bcs.n	8014c1c <mem_trim+0x38>
    return NULL;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	e0dc      	b.n	8014dd6 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014c1c:	4b70      	ldr	r3, [pc, #448]	; (8014de0 <mem_trim+0x1fc>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	687a      	ldr	r2, [r7, #4]
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d304      	bcc.n	8014c30 <mem_trim+0x4c>
 8014c26:	4b6f      	ldr	r3, [pc, #444]	; (8014de4 <mem_trim+0x200>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	687a      	ldr	r2, [r7, #4]
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	d306      	bcc.n	8014c3e <mem_trim+0x5a>
 8014c30:	4b6d      	ldr	r3, [pc, #436]	; (8014de8 <mem_trim+0x204>)
 8014c32:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014c36:	496d      	ldr	r1, [pc, #436]	; (8014dec <mem_trim+0x208>)
 8014c38:	486d      	ldr	r0, [pc, #436]	; (8014df0 <mem_trim+0x20c>)
 8014c3a:	f008 fd5d 	bl	801d6f8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8014c3e:	4b68      	ldr	r3, [pc, #416]	; (8014de0 <mem_trim+0x1fc>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	687a      	ldr	r2, [r7, #4]
 8014c44:	429a      	cmp	r2, r3
 8014c46:	d304      	bcc.n	8014c52 <mem_trim+0x6e>
 8014c48:	4b66      	ldr	r3, [pc, #408]	; (8014de4 <mem_trim+0x200>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	687a      	ldr	r2, [r7, #4]
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	d307      	bcc.n	8014c62 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014c52:	f001 fd1f 	bl	8016694 <sys_arch_protect>
 8014c56:	60b8      	str	r0, [r7, #8]
 8014c58:	68b8      	ldr	r0, [r7, #8]
 8014c5a:	f001 fd29 	bl	80166b0 <sys_arch_unprotect>
    return rmem;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	e0b9      	b.n	8014dd6 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	3b08      	subs	r3, #8
 8014c66:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8014c68:	69b8      	ldr	r0, [r7, #24]
 8014c6a:	f7ff fde7 	bl	801483c <mem_to_ptr>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8014c72:	69bb      	ldr	r3, [r7, #24]
 8014c74:	881a      	ldrh	r2, [r3, #0]
 8014c76:	8afb      	ldrh	r3, [r7, #22]
 8014c78:	1ad3      	subs	r3, r2, r3
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	3b08      	subs	r3, #8
 8014c7e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014c80:	8bfa      	ldrh	r2, [r7, #30]
 8014c82:	8abb      	ldrh	r3, [r7, #20]
 8014c84:	429a      	cmp	r2, r3
 8014c86:	d906      	bls.n	8014c96 <mem_trim+0xb2>
 8014c88:	4b57      	ldr	r3, [pc, #348]	; (8014de8 <mem_trim+0x204>)
 8014c8a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8014c8e:	4959      	ldr	r1, [pc, #356]	; (8014df4 <mem_trim+0x210>)
 8014c90:	4857      	ldr	r0, [pc, #348]	; (8014df0 <mem_trim+0x20c>)
 8014c92:	f008 fd31 	bl	801d6f8 <iprintf>
  if (newsize > size) {
 8014c96:	8bfa      	ldrh	r2, [r7, #30]
 8014c98:	8abb      	ldrh	r3, [r7, #20]
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	d901      	bls.n	8014ca2 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	e099      	b.n	8014dd6 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8014ca2:	8bfa      	ldrh	r2, [r7, #30]
 8014ca4:	8abb      	ldrh	r3, [r7, #20]
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	d101      	bne.n	8014cae <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	e093      	b.n	8014dd6 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014cae:	4852      	ldr	r0, [pc, #328]	; (8014df8 <mem_trim+0x214>)
 8014cb0:	f001 fcb4 	bl	801661c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8014cb4:	69bb      	ldr	r3, [r7, #24]
 8014cb6:	881b      	ldrh	r3, [r3, #0]
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f7ff fdad 	bl	8014818 <ptr_to_mem>
 8014cbe:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8014cc0:	693b      	ldr	r3, [r7, #16]
 8014cc2:	791b      	ldrb	r3, [r3, #4]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d141      	bne.n	8014d4c <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	881b      	ldrh	r3, [r3, #0]
 8014ccc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014cd0:	4293      	cmp	r3, r2
 8014cd2:	d106      	bne.n	8014ce2 <mem_trim+0xfe>
 8014cd4:	4b44      	ldr	r3, [pc, #272]	; (8014de8 <mem_trim+0x204>)
 8014cd6:	f240 22f5 	movw	r2, #757	; 0x2f5
 8014cda:	4948      	ldr	r1, [pc, #288]	; (8014dfc <mem_trim+0x218>)
 8014cdc:	4844      	ldr	r0, [pc, #272]	; (8014df0 <mem_trim+0x20c>)
 8014cde:	f008 fd0b 	bl	801d6f8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	881b      	ldrh	r3, [r3, #0]
 8014ce6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014ce8:	8afa      	ldrh	r2, [r7, #22]
 8014cea:	8bfb      	ldrh	r3, [r7, #30]
 8014cec:	4413      	add	r3, r2
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	3308      	adds	r3, #8
 8014cf2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8014cf4:	4b42      	ldr	r3, [pc, #264]	; (8014e00 <mem_trim+0x21c>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	693a      	ldr	r2, [r7, #16]
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d106      	bne.n	8014d0c <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8014cfe:	89fb      	ldrh	r3, [r7, #14]
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7ff fd89 	bl	8014818 <ptr_to_mem>
 8014d06:	4602      	mov	r2, r0
 8014d08:	4b3d      	ldr	r3, [pc, #244]	; (8014e00 <mem_trim+0x21c>)
 8014d0a:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8014d0c:	89fb      	ldrh	r3, [r7, #14]
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f7ff fd82 	bl	8014818 <ptr_to_mem>
 8014d14:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8014d16:	693b      	ldr	r3, [r7, #16]
 8014d18:	2200      	movs	r2, #0
 8014d1a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8014d1c:	693b      	ldr	r3, [r7, #16]
 8014d1e:	89ba      	ldrh	r2, [r7, #12]
 8014d20:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	8afa      	ldrh	r2, [r7, #22]
 8014d26:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8014d28:	69bb      	ldr	r3, [r7, #24]
 8014d2a:	89fa      	ldrh	r2, [r7, #14]
 8014d2c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	881b      	ldrh	r3, [r3, #0]
 8014d32:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014d36:	4293      	cmp	r3, r2
 8014d38:	d049      	beq.n	8014dce <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	881b      	ldrh	r3, [r3, #0]
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f7ff fd6a 	bl	8014818 <ptr_to_mem>
 8014d44:	4602      	mov	r2, r0
 8014d46:	89fb      	ldrh	r3, [r7, #14]
 8014d48:	8053      	strh	r3, [r2, #2]
 8014d4a:	e040      	b.n	8014dce <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8014d4c:	8bfb      	ldrh	r3, [r7, #30]
 8014d4e:	f103 0214 	add.w	r2, r3, #20
 8014d52:	8abb      	ldrh	r3, [r7, #20]
 8014d54:	429a      	cmp	r2, r3
 8014d56:	d83a      	bhi.n	8014dce <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014d58:	8afa      	ldrh	r2, [r7, #22]
 8014d5a:	8bfb      	ldrh	r3, [r7, #30]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	b29b      	uxth	r3, r3
 8014d60:	3308      	adds	r3, #8
 8014d62:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014d64:	69bb      	ldr	r3, [r7, #24]
 8014d66:	881b      	ldrh	r3, [r3, #0]
 8014d68:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014d6c:	4293      	cmp	r3, r2
 8014d6e:	d106      	bne.n	8014d7e <mem_trim+0x19a>
 8014d70:	4b1d      	ldr	r3, [pc, #116]	; (8014de8 <mem_trim+0x204>)
 8014d72:	f240 3216 	movw	r2, #790	; 0x316
 8014d76:	4921      	ldr	r1, [pc, #132]	; (8014dfc <mem_trim+0x218>)
 8014d78:	481d      	ldr	r0, [pc, #116]	; (8014df0 <mem_trim+0x20c>)
 8014d7a:	f008 fcbd 	bl	801d6f8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8014d7e:	89fb      	ldrh	r3, [r7, #14]
 8014d80:	4618      	mov	r0, r3
 8014d82:	f7ff fd49 	bl	8014818 <ptr_to_mem>
 8014d86:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8014d88:	4b1d      	ldr	r3, [pc, #116]	; (8014e00 <mem_trim+0x21c>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	693a      	ldr	r2, [r7, #16]
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	d202      	bcs.n	8014d98 <mem_trim+0x1b4>
      lfree = mem2;
 8014d92:	4a1b      	ldr	r2, [pc, #108]	; (8014e00 <mem_trim+0x21c>)
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8014d98:	693b      	ldr	r3, [r7, #16]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8014d9e:	69bb      	ldr	r3, [r7, #24]
 8014da0:	881a      	ldrh	r2, [r3, #0]
 8014da2:	693b      	ldr	r3, [r7, #16]
 8014da4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8014da6:	693b      	ldr	r3, [r7, #16]
 8014da8:	8afa      	ldrh	r2, [r7, #22]
 8014daa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014dac:	69bb      	ldr	r3, [r7, #24]
 8014dae:	89fa      	ldrh	r2, [r7, #14]
 8014db0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	881b      	ldrh	r3, [r3, #0]
 8014db6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014dba:	4293      	cmp	r3, r2
 8014dbc:	d007      	beq.n	8014dce <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	881b      	ldrh	r3, [r3, #0]
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7ff fd28 	bl	8014818 <ptr_to_mem>
 8014dc8:	4602      	mov	r2, r0
 8014dca:	89fb      	ldrh	r3, [r7, #14]
 8014dcc:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014dce:	480a      	ldr	r0, [pc, #40]	; (8014df8 <mem_trim+0x214>)
 8014dd0:	f001 fc33 	bl	801663a <sys_mutex_unlock>
  return rmem;
 8014dd4:	687b      	ldr	r3, [r7, #4]
}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	3720      	adds	r7, #32
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}
 8014dde:	bf00      	nop
 8014de0:	200076d4 	.word	0x200076d4
 8014de4:	200076d8 	.word	0x200076d8
 8014de8:	0802042c 	.word	0x0802042c
 8014dec:	080205d4 	.word	0x080205d4
 8014df0:	08020490 	.word	0x08020490
 8014df4:	080205ec 	.word	0x080205ec
 8014df8:	200076dc 	.word	0x200076dc
 8014dfc:	0802060c 	.word	0x0802060c
 8014e00:	200076e0 	.word	0x200076e0

08014e04 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b088      	sub	sp, #32
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8014e0e:	88fb      	ldrh	r3, [r7, #6]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d101      	bne.n	8014e18 <mem_malloc+0x14>
    return NULL;
 8014e14:	2300      	movs	r3, #0
 8014e16:	e0e6      	b.n	8014fe6 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8014e18:	88fb      	ldrh	r3, [r7, #6]
 8014e1a:	3303      	adds	r3, #3
 8014e1c:	b29b      	uxth	r3, r3
 8014e1e:	f023 0303 	bic.w	r3, r3, #3
 8014e22:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8014e24:	8bbb      	ldrh	r3, [r7, #28]
 8014e26:	2b0b      	cmp	r3, #11
 8014e28:	d801      	bhi.n	8014e2e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8014e2a:	230c      	movs	r3, #12
 8014e2c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8014e2e:	8bbb      	ldrh	r3, [r7, #28]
 8014e30:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014e34:	4293      	cmp	r3, r2
 8014e36:	d803      	bhi.n	8014e40 <mem_malloc+0x3c>
 8014e38:	8bba      	ldrh	r2, [r7, #28]
 8014e3a:	88fb      	ldrh	r3, [r7, #6]
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	d201      	bcs.n	8014e44 <mem_malloc+0x40>
    return NULL;
 8014e40:	2300      	movs	r3, #0
 8014e42:	e0d0      	b.n	8014fe6 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8014e44:	486a      	ldr	r0, [pc, #424]	; (8014ff0 <mem_malloc+0x1ec>)
 8014e46:	f001 fbe9 	bl	801661c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014e4a:	4b6a      	ldr	r3, [pc, #424]	; (8014ff4 <mem_malloc+0x1f0>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f7ff fcf4 	bl	801483c <mem_to_ptr>
 8014e54:	4603      	mov	r3, r0
 8014e56:	83fb      	strh	r3, [r7, #30]
 8014e58:	e0b9      	b.n	8014fce <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8014e5a:	8bfb      	ldrh	r3, [r7, #30]
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7ff fcdb 	bl	8014818 <ptr_to_mem>
 8014e62:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	791b      	ldrb	r3, [r3, #4]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	f040 80a9 	bne.w	8014fc0 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014e6e:	697b      	ldr	r3, [r7, #20]
 8014e70:	881b      	ldrh	r3, [r3, #0]
 8014e72:	461a      	mov	r2, r3
 8014e74:	8bfb      	ldrh	r3, [r7, #30]
 8014e76:	1ad3      	subs	r3, r2, r3
 8014e78:	f1a3 0208 	sub.w	r2, r3, #8
 8014e7c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	f0c0 809e 	bcc.w	8014fc0 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	881b      	ldrh	r3, [r3, #0]
 8014e88:	461a      	mov	r2, r3
 8014e8a:	8bfb      	ldrh	r3, [r7, #30]
 8014e8c:	1ad3      	subs	r3, r2, r3
 8014e8e:	f1a3 0208 	sub.w	r2, r3, #8
 8014e92:	8bbb      	ldrh	r3, [r7, #28]
 8014e94:	3314      	adds	r3, #20
 8014e96:	429a      	cmp	r2, r3
 8014e98:	d335      	bcc.n	8014f06 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014e9a:	8bfa      	ldrh	r2, [r7, #30]
 8014e9c:	8bbb      	ldrh	r3, [r7, #28]
 8014e9e:	4413      	add	r3, r2
 8014ea0:	b29b      	uxth	r3, r3
 8014ea2:	3308      	adds	r3, #8
 8014ea4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014ea6:	8a7b      	ldrh	r3, [r7, #18]
 8014ea8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014eac:	4293      	cmp	r3, r2
 8014eae:	d106      	bne.n	8014ebe <mem_malloc+0xba>
 8014eb0:	4b51      	ldr	r3, [pc, #324]	; (8014ff8 <mem_malloc+0x1f4>)
 8014eb2:	f240 3287 	movw	r2, #903	; 0x387
 8014eb6:	4951      	ldr	r1, [pc, #324]	; (8014ffc <mem_malloc+0x1f8>)
 8014eb8:	4851      	ldr	r0, [pc, #324]	; (8015000 <mem_malloc+0x1fc>)
 8014eba:	f008 fc1d 	bl	801d6f8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014ebe:	8a7b      	ldrh	r3, [r7, #18]
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f7ff fca9 	bl	8014818 <ptr_to_mem>
 8014ec6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	2200      	movs	r2, #0
 8014ecc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014ece:	697b      	ldr	r3, [r7, #20]
 8014ed0:	881a      	ldrh	r2, [r3, #0]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	8bfa      	ldrh	r2, [r7, #30]
 8014eda:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	8a7a      	ldrh	r2, [r7, #18]
 8014ee0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	2201      	movs	r2, #1
 8014ee6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	881b      	ldrh	r3, [r3, #0]
 8014eec:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014ef0:	4293      	cmp	r3, r2
 8014ef2:	d00b      	beq.n	8014f0c <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	881b      	ldrh	r3, [r3, #0]
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f7ff fc8d 	bl	8014818 <ptr_to_mem>
 8014efe:	4602      	mov	r2, r0
 8014f00:	8a7b      	ldrh	r3, [r7, #18]
 8014f02:	8053      	strh	r3, [r2, #2]
 8014f04:	e002      	b.n	8014f0c <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014f06:	697b      	ldr	r3, [r7, #20]
 8014f08:	2201      	movs	r2, #1
 8014f0a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014f0c:	4b39      	ldr	r3, [pc, #228]	; (8014ff4 <mem_malloc+0x1f0>)
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	697a      	ldr	r2, [r7, #20]
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d127      	bne.n	8014f66 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8014f16:	4b37      	ldr	r3, [pc, #220]	; (8014ff4 <mem_malloc+0x1f0>)
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014f1c:	e005      	b.n	8014f2a <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014f1e:	69bb      	ldr	r3, [r7, #24]
 8014f20:	881b      	ldrh	r3, [r3, #0]
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7ff fc78 	bl	8014818 <ptr_to_mem>
 8014f28:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014f2a:	69bb      	ldr	r3, [r7, #24]
 8014f2c:	791b      	ldrb	r3, [r3, #4]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d004      	beq.n	8014f3c <mem_malloc+0x138>
 8014f32:	4b34      	ldr	r3, [pc, #208]	; (8015004 <mem_malloc+0x200>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	69ba      	ldr	r2, [r7, #24]
 8014f38:	429a      	cmp	r2, r3
 8014f3a:	d1f0      	bne.n	8014f1e <mem_malloc+0x11a>
          }
          lfree = cur;
 8014f3c:	4a2d      	ldr	r2, [pc, #180]	; (8014ff4 <mem_malloc+0x1f0>)
 8014f3e:	69bb      	ldr	r3, [r7, #24]
 8014f40:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8014f42:	4b2c      	ldr	r3, [pc, #176]	; (8014ff4 <mem_malloc+0x1f0>)
 8014f44:	681a      	ldr	r2, [r3, #0]
 8014f46:	4b2f      	ldr	r3, [pc, #188]	; (8015004 <mem_malloc+0x200>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d00b      	beq.n	8014f66 <mem_malloc+0x162>
 8014f4e:	4b29      	ldr	r3, [pc, #164]	; (8014ff4 <mem_malloc+0x1f0>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	791b      	ldrb	r3, [r3, #4]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d006      	beq.n	8014f66 <mem_malloc+0x162>
 8014f58:	4b27      	ldr	r3, [pc, #156]	; (8014ff8 <mem_malloc+0x1f4>)
 8014f5a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8014f5e:	492a      	ldr	r1, [pc, #168]	; (8015008 <mem_malloc+0x204>)
 8014f60:	4827      	ldr	r0, [pc, #156]	; (8015000 <mem_malloc+0x1fc>)
 8014f62:	f008 fbc9 	bl	801d6f8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8014f66:	4822      	ldr	r0, [pc, #136]	; (8014ff0 <mem_malloc+0x1ec>)
 8014f68:	f001 fb67 	bl	801663a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8014f6c:	8bba      	ldrh	r2, [r7, #28]
 8014f6e:	697b      	ldr	r3, [r7, #20]
 8014f70:	4413      	add	r3, r2
 8014f72:	3308      	adds	r3, #8
 8014f74:	4a23      	ldr	r2, [pc, #140]	; (8015004 <mem_malloc+0x200>)
 8014f76:	6812      	ldr	r2, [r2, #0]
 8014f78:	4293      	cmp	r3, r2
 8014f7a:	d906      	bls.n	8014f8a <mem_malloc+0x186>
 8014f7c:	4b1e      	ldr	r3, [pc, #120]	; (8014ff8 <mem_malloc+0x1f4>)
 8014f7e:	f240 32ba 	movw	r2, #954	; 0x3ba
 8014f82:	4922      	ldr	r1, [pc, #136]	; (801500c <mem_malloc+0x208>)
 8014f84:	481e      	ldr	r0, [pc, #120]	; (8015000 <mem_malloc+0x1fc>)
 8014f86:	f008 fbb7 	bl	801d6f8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014f8a:	697b      	ldr	r3, [r7, #20]
 8014f8c:	f003 0303 	and.w	r3, r3, #3
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d006      	beq.n	8014fa2 <mem_malloc+0x19e>
 8014f94:	4b18      	ldr	r3, [pc, #96]	; (8014ff8 <mem_malloc+0x1f4>)
 8014f96:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8014f9a:	491d      	ldr	r1, [pc, #116]	; (8015010 <mem_malloc+0x20c>)
 8014f9c:	4818      	ldr	r0, [pc, #96]	; (8015000 <mem_malloc+0x1fc>)
 8014f9e:	f008 fbab 	bl	801d6f8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014fa2:	697b      	ldr	r3, [r7, #20]
 8014fa4:	f003 0303 	and.w	r3, r3, #3
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d006      	beq.n	8014fba <mem_malloc+0x1b6>
 8014fac:	4b12      	ldr	r3, [pc, #72]	; (8014ff8 <mem_malloc+0x1f4>)
 8014fae:	f240 32be 	movw	r2, #958	; 0x3be
 8014fb2:	4918      	ldr	r1, [pc, #96]	; (8015014 <mem_malloc+0x210>)
 8014fb4:	4812      	ldr	r0, [pc, #72]	; (8015000 <mem_malloc+0x1fc>)
 8014fb6:	f008 fb9f 	bl	801d6f8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014fba:	697b      	ldr	r3, [r7, #20]
 8014fbc:	3308      	adds	r3, #8
 8014fbe:	e012      	b.n	8014fe6 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8014fc0:	8bfb      	ldrh	r3, [r7, #30]
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7ff fc28 	bl	8014818 <ptr_to_mem>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	881b      	ldrh	r3, [r3, #0]
 8014fcc:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014fce:	8bfa      	ldrh	r2, [r7, #30]
 8014fd0:	8bb9      	ldrh	r1, [r7, #28]
 8014fd2:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 8014fd6:	1a5b      	subs	r3, r3, r1
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	f4ff af3e 	bcc.w	8014e5a <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014fde:	4804      	ldr	r0, [pc, #16]	; (8014ff0 <mem_malloc+0x1ec>)
 8014fe0:	f001 fb2b 	bl	801663a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8014fe4:	2300      	movs	r3, #0
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3720      	adds	r7, #32
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}
 8014fee:	bf00      	nop
 8014ff0:	200076dc 	.word	0x200076dc
 8014ff4:	200076e0 	.word	0x200076e0
 8014ff8:	0802042c 	.word	0x0802042c
 8014ffc:	0802060c 	.word	0x0802060c
 8015000:	08020490 	.word	0x08020490
 8015004:	200076d8 	.word	0x200076d8
 8015008:	08020620 	.word	0x08020620
 801500c:	0802063c 	.word	0x0802063c
 8015010:	0802066c 	.word	0x0802066c
 8015014:	0802069c 	.word	0x0802069c

08015018 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8015018:	b480      	push	{r7}
 801501a:	b085      	sub	sp, #20
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	689b      	ldr	r3, [r3, #8]
 8015024:	2200      	movs	r2, #0
 8015026:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	685b      	ldr	r3, [r3, #4]
 801502c:	3303      	adds	r3, #3
 801502e:	f023 0303 	bic.w	r3, r3, #3
 8015032:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015034:	2300      	movs	r3, #0
 8015036:	60fb      	str	r3, [r7, #12]
 8015038:	e011      	b.n	801505e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	689b      	ldr	r3, [r3, #8]
 801503e:	681a      	ldr	r2, [r3, #0]
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	689b      	ldr	r3, [r3, #8]
 8015048:	68ba      	ldr	r2, [r7, #8]
 801504a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	881b      	ldrh	r3, [r3, #0]
 8015050:	461a      	mov	r2, r3
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	4413      	add	r3, r2
 8015056:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	3301      	adds	r3, #1
 801505c:	60fb      	str	r3, [r7, #12]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	885b      	ldrh	r3, [r3, #2]
 8015062:	461a      	mov	r2, r3
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	4293      	cmp	r3, r2
 8015068:	dbe7      	blt.n	801503a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801506a:	bf00      	nop
 801506c:	3714      	adds	r7, #20
 801506e:	46bd      	mov	sp, r7
 8015070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015074:	4770      	bx	lr
	...

08015078 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b082      	sub	sp, #8
 801507c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801507e:	2300      	movs	r3, #0
 8015080:	80fb      	strh	r3, [r7, #6]
 8015082:	e009      	b.n	8015098 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8015084:	88fb      	ldrh	r3, [r7, #6]
 8015086:	4a08      	ldr	r2, [pc, #32]	; (80150a8 <memp_init+0x30>)
 8015088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801508c:	4618      	mov	r0, r3
 801508e:	f7ff ffc3 	bl	8015018 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015092:	88fb      	ldrh	r3, [r7, #6]
 8015094:	3301      	adds	r3, #1
 8015096:	80fb      	strh	r3, [r7, #6]
 8015098:	88fb      	ldrh	r3, [r7, #6]
 801509a:	2b0c      	cmp	r3, #12
 801509c:	d9f2      	bls.n	8015084 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801509e:	bf00      	nop
 80150a0:	3708      	adds	r7, #8
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}
 80150a6:	bf00      	nop
 80150a8:	08022a50 	.word	0x08022a50

080150ac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80150b4:	f001 faee 	bl	8016694 <sys_arch_protect>
 80150b8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	689b      	ldr	r3, [r3, #8]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d015      	beq.n	80150f4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	689b      	ldr	r3, [r3, #8]
 80150cc:	68ba      	ldr	r2, [r7, #8]
 80150ce:	6812      	ldr	r2, [r2, #0]
 80150d0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80150d2:	68bb      	ldr	r3, [r7, #8]
 80150d4:	f003 0303 	and.w	r3, r3, #3
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d006      	beq.n	80150ea <do_memp_malloc_pool+0x3e>
 80150dc:	4b09      	ldr	r3, [pc, #36]	; (8015104 <do_memp_malloc_pool+0x58>)
 80150de:	f240 1219 	movw	r2, #281	; 0x119
 80150e2:	4909      	ldr	r1, [pc, #36]	; (8015108 <do_memp_malloc_pool+0x5c>)
 80150e4:	4809      	ldr	r0, [pc, #36]	; (801510c <do_memp_malloc_pool+0x60>)
 80150e6:	f008 fb07 	bl	801d6f8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80150ea:	68f8      	ldr	r0, [r7, #12]
 80150ec:	f001 fae0 	bl	80166b0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	e003      	b.n	80150fc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80150f4:	68f8      	ldr	r0, [r7, #12]
 80150f6:	f001 fadb 	bl	80166b0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80150fa:	2300      	movs	r3, #0
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3710      	adds	r7, #16
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}
 8015104:	080206c0 	.word	0x080206c0
 8015108:	08020710 	.word	0x08020710
 801510c:	08020734 	.word	0x08020734

08015110 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b082      	sub	sp, #8
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d106      	bne.n	801512c <memp_malloc_pool+0x1c>
 801511e:	4b0a      	ldr	r3, [pc, #40]	; (8015148 <memp_malloc_pool+0x38>)
 8015120:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8015124:	4909      	ldr	r1, [pc, #36]	; (801514c <memp_malloc_pool+0x3c>)
 8015126:	480a      	ldr	r0, [pc, #40]	; (8015150 <memp_malloc_pool+0x40>)
 8015128:	f008 fae6 	bl	801d6f8 <iprintf>
  if (desc == NULL) {
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d101      	bne.n	8015136 <memp_malloc_pool+0x26>
    return NULL;
 8015132:	2300      	movs	r3, #0
 8015134:	e003      	b.n	801513e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f7ff ffb8 	bl	80150ac <do_memp_malloc_pool>
 801513c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801513e:	4618      	mov	r0, r3
 8015140:	3708      	adds	r7, #8
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}
 8015146:	bf00      	nop
 8015148:	080206c0 	.word	0x080206c0
 801514c:	0802075c 	.word	0x0802075c
 8015150:	08020734 	.word	0x08020734

08015154 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b084      	sub	sp, #16
 8015158:	af00      	add	r7, sp, #0
 801515a:	4603      	mov	r3, r0
 801515c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801515e:	79fb      	ldrb	r3, [r7, #7]
 8015160:	2b0c      	cmp	r3, #12
 8015162:	d908      	bls.n	8015176 <memp_malloc+0x22>
 8015164:	4b0a      	ldr	r3, [pc, #40]	; (8015190 <memp_malloc+0x3c>)
 8015166:	f240 1257 	movw	r2, #343	; 0x157
 801516a:	490a      	ldr	r1, [pc, #40]	; (8015194 <memp_malloc+0x40>)
 801516c:	480a      	ldr	r0, [pc, #40]	; (8015198 <memp_malloc+0x44>)
 801516e:	f008 fac3 	bl	801d6f8 <iprintf>
 8015172:	2300      	movs	r3, #0
 8015174:	e008      	b.n	8015188 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8015176:	79fb      	ldrb	r3, [r7, #7]
 8015178:	4a08      	ldr	r2, [pc, #32]	; (801519c <memp_malloc+0x48>)
 801517a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801517e:	4618      	mov	r0, r3
 8015180:	f7ff ff94 	bl	80150ac <do_memp_malloc_pool>
 8015184:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8015186:	68fb      	ldr	r3, [r7, #12]
}
 8015188:	4618      	mov	r0, r3
 801518a:	3710      	adds	r7, #16
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}
 8015190:	080206c0 	.word	0x080206c0
 8015194:	08020770 	.word	0x08020770
 8015198:	08020734 	.word	0x08020734
 801519c:	08022a50 	.word	0x08022a50

080151a0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b084      	sub	sp, #16
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
 80151a8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80151aa:	683b      	ldr	r3, [r7, #0]
 80151ac:	f003 0303 	and.w	r3, r3, #3
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d006      	beq.n	80151c2 <do_memp_free_pool+0x22>
 80151b4:	4b0d      	ldr	r3, [pc, #52]	; (80151ec <do_memp_free_pool+0x4c>)
 80151b6:	f240 126d 	movw	r2, #365	; 0x16d
 80151ba:	490d      	ldr	r1, [pc, #52]	; (80151f0 <do_memp_free_pool+0x50>)
 80151bc:	480d      	ldr	r0, [pc, #52]	; (80151f4 <do_memp_free_pool+0x54>)
 80151be:	f008 fa9b 	bl	801d6f8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80151c6:	f001 fa65 	bl	8016694 <sys_arch_protect>
 80151ca:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	689b      	ldr	r3, [r3, #8]
 80151d0:	681a      	ldr	r2, [r3, #0]
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	689b      	ldr	r3, [r3, #8]
 80151da:	68fa      	ldr	r2, [r7, #12]
 80151dc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80151de:	68b8      	ldr	r0, [r7, #8]
 80151e0:	f001 fa66 	bl	80166b0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80151e4:	bf00      	nop
 80151e6:	3710      	adds	r7, #16
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd80      	pop	{r7, pc}
 80151ec:	080206c0 	.word	0x080206c0
 80151f0:	08020790 	.word	0x08020790
 80151f4:	08020734 	.word	0x08020734

080151f8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b082      	sub	sp, #8
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
 8015200:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d106      	bne.n	8015216 <memp_free_pool+0x1e>
 8015208:	4b0a      	ldr	r3, [pc, #40]	; (8015234 <memp_free_pool+0x3c>)
 801520a:	f240 1295 	movw	r2, #405	; 0x195
 801520e:	490a      	ldr	r1, [pc, #40]	; (8015238 <memp_free_pool+0x40>)
 8015210:	480a      	ldr	r0, [pc, #40]	; (801523c <memp_free_pool+0x44>)
 8015212:	f008 fa71 	bl	801d6f8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d007      	beq.n	801522c <memp_free_pool+0x34>
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d004      	beq.n	801522c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8015222:	6839      	ldr	r1, [r7, #0]
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f7ff ffbb 	bl	80151a0 <do_memp_free_pool>
 801522a:	e000      	b.n	801522e <memp_free_pool+0x36>
    return;
 801522c:	bf00      	nop
}
 801522e:	3708      	adds	r7, #8
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}
 8015234:	080206c0 	.word	0x080206c0
 8015238:	0802075c 	.word	0x0802075c
 801523c:	08020734 	.word	0x08020734

08015240 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b082      	sub	sp, #8
 8015244:	af00      	add	r7, sp, #0
 8015246:	4603      	mov	r3, r0
 8015248:	6039      	str	r1, [r7, #0]
 801524a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801524c:	79fb      	ldrb	r3, [r7, #7]
 801524e:	2b0c      	cmp	r3, #12
 8015250:	d907      	bls.n	8015262 <memp_free+0x22>
 8015252:	4b0c      	ldr	r3, [pc, #48]	; (8015284 <memp_free+0x44>)
 8015254:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8015258:	490b      	ldr	r1, [pc, #44]	; (8015288 <memp_free+0x48>)
 801525a:	480c      	ldr	r0, [pc, #48]	; (801528c <memp_free+0x4c>)
 801525c:	f008 fa4c 	bl	801d6f8 <iprintf>
 8015260:	e00c      	b.n	801527c <memp_free+0x3c>

  if (mem == NULL) {
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d008      	beq.n	801527a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015268:	79fb      	ldrb	r3, [r7, #7]
 801526a:	4a09      	ldr	r2, [pc, #36]	; (8015290 <memp_free+0x50>)
 801526c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015270:	6839      	ldr	r1, [r7, #0]
 8015272:	4618      	mov	r0, r3
 8015274:	f7ff ff94 	bl	80151a0 <do_memp_free_pool>
 8015278:	e000      	b.n	801527c <memp_free+0x3c>
    return;
 801527a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801527c:	3708      	adds	r7, #8
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}
 8015282:	bf00      	nop
 8015284:	080206c0 	.word	0x080206c0
 8015288:	080207b0 	.word	0x080207b0
 801528c:	08020734 	.word	0x08020734
 8015290:	08022a50 	.word	0x08022a50

08015294 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015294:	b480      	push	{r7}
 8015296:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015298:	bf00      	nop
 801529a:	46bd      	mov	sp, r7
 801529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a0:	4770      	bx	lr
	...

080152a4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b086      	sub	sp, #24
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	60b9      	str	r1, [r7, #8]
 80152ae:	607a      	str	r2, [r7, #4]
 80152b0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d108      	bne.n	80152ca <netif_add+0x26>
 80152b8:	4b5b      	ldr	r3, [pc, #364]	; (8015428 <netif_add+0x184>)
 80152ba:	f240 1227 	movw	r2, #295	; 0x127
 80152be:	495b      	ldr	r1, [pc, #364]	; (801542c <netif_add+0x188>)
 80152c0:	485b      	ldr	r0, [pc, #364]	; (8015430 <netif_add+0x18c>)
 80152c2:	f008 fa19 	bl	801d6f8 <iprintf>
 80152c6:	2300      	movs	r3, #0
 80152c8:	e0a9      	b.n	801541e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80152ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d108      	bne.n	80152e2 <netif_add+0x3e>
 80152d0:	4b55      	ldr	r3, [pc, #340]	; (8015428 <netif_add+0x184>)
 80152d2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80152d6:	4957      	ldr	r1, [pc, #348]	; (8015434 <netif_add+0x190>)
 80152d8:	4855      	ldr	r0, [pc, #340]	; (8015430 <netif_add+0x18c>)
 80152da:	f008 fa0d 	bl	801d6f8 <iprintf>
 80152de:	2300      	movs	r3, #0
 80152e0:	e09d      	b.n	801541e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d101      	bne.n	80152ec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80152e8:	4b53      	ldr	r3, [pc, #332]	; (8015438 <netif_add+0x194>)
 80152ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d101      	bne.n	80152f6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80152f2:	4b51      	ldr	r3, [pc, #324]	; (8015438 <netif_add+0x194>)
 80152f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80152f6:	683b      	ldr	r3, [r7, #0]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d101      	bne.n	8015300 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80152fc:	4b4e      	ldr	r3, [pc, #312]	; (8015438 <netif_add+0x194>)
 80152fe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2200      	movs	r2, #0
 8015304:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	2200      	movs	r2, #0
 801530a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2200      	movs	r2, #0
 8015310:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	4a49      	ldr	r2, [pc, #292]	; (801543c <netif_add+0x198>)
 8015316:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	2200      	movs	r2, #0
 801531c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	2200      	movs	r2, #0
 8015322:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	3324      	adds	r3, #36	; 0x24
 801532a:	2204      	movs	r2, #4
 801532c:	2100      	movs	r1, #0
 801532e:	4618      	mov	r0, r3
 8015330:	f007 fd9f 	bl	801ce72 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	2200      	movs	r2, #0
 8015338:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	6a3a      	ldr	r2, [r7, #32]
 801533e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8015340:	4b3f      	ldr	r3, [pc, #252]	; (8015440 <netif_add+0x19c>)
 8015342:	781a      	ldrb	r2, [r3, #0]
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801534e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	687a      	ldr	r2, [r7, #4]
 8015354:	68b9      	ldr	r1, [r7, #8]
 8015356:	68f8      	ldr	r0, [r7, #12]
 8015358:	f000 f914 	bl	8015584 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801535e:	68f8      	ldr	r0, [r7, #12]
 8015360:	4798      	blx	r3
 8015362:	4603      	mov	r3, r0
 8015364:	2b00      	cmp	r3, #0
 8015366:	d001      	beq.n	801536c <netif_add+0xc8>
    return NULL;
 8015368:	2300      	movs	r3, #0
 801536a:	e058      	b.n	801541e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015372:	2bff      	cmp	r3, #255	; 0xff
 8015374:	d103      	bne.n	801537e <netif_add+0xda>
        netif->num = 0;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	2200      	movs	r2, #0
 801537a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801537e:	2300      	movs	r3, #0
 8015380:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015382:	4b30      	ldr	r3, [pc, #192]	; (8015444 <netif_add+0x1a0>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	617b      	str	r3, [r7, #20]
 8015388:	e02b      	b.n	80153e2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801538a:	697a      	ldr	r2, [r7, #20]
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	429a      	cmp	r2, r3
 8015390:	d106      	bne.n	80153a0 <netif_add+0xfc>
 8015392:	4b25      	ldr	r3, [pc, #148]	; (8015428 <netif_add+0x184>)
 8015394:	f240 128b 	movw	r2, #395	; 0x18b
 8015398:	492b      	ldr	r1, [pc, #172]	; (8015448 <netif_add+0x1a4>)
 801539a:	4825      	ldr	r0, [pc, #148]	; (8015430 <netif_add+0x18c>)
 801539c:	f008 f9ac 	bl	801d6f8 <iprintf>
        num_netifs++;
 80153a0:	693b      	ldr	r3, [r7, #16]
 80153a2:	3301      	adds	r3, #1
 80153a4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80153a6:	693b      	ldr	r3, [r7, #16]
 80153a8:	2bff      	cmp	r3, #255	; 0xff
 80153aa:	dd06      	ble.n	80153ba <netif_add+0x116>
 80153ac:	4b1e      	ldr	r3, [pc, #120]	; (8015428 <netif_add+0x184>)
 80153ae:	f240 128d 	movw	r2, #397	; 0x18d
 80153b2:	4926      	ldr	r1, [pc, #152]	; (801544c <netif_add+0x1a8>)
 80153b4:	481e      	ldr	r0, [pc, #120]	; (8015430 <netif_add+0x18c>)
 80153b6:	f008 f99f 	bl	801d6f8 <iprintf>
        if (netif2->num == netif->num) {
 80153ba:	697b      	ldr	r3, [r7, #20]
 80153bc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d108      	bne.n	80153dc <netif_add+0x138>
          netif->num++;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80153d0:	3301      	adds	r3, #1
 80153d2:	b2da      	uxtb	r2, r3
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80153da:	e005      	b.n	80153e8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	617b      	str	r3, [r7, #20]
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d1d0      	bne.n	801538a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d1be      	bne.n	801536c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80153f4:	2bfe      	cmp	r3, #254	; 0xfe
 80153f6:	d103      	bne.n	8015400 <netif_add+0x15c>
    netif_num = 0;
 80153f8:	4b11      	ldr	r3, [pc, #68]	; (8015440 <netif_add+0x19c>)
 80153fa:	2200      	movs	r2, #0
 80153fc:	701a      	strb	r2, [r3, #0]
 80153fe:	e006      	b.n	801540e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015406:	3301      	adds	r3, #1
 8015408:	b2da      	uxtb	r2, r3
 801540a:	4b0d      	ldr	r3, [pc, #52]	; (8015440 <netif_add+0x19c>)
 801540c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801540e:	4b0d      	ldr	r3, [pc, #52]	; (8015444 <netif_add+0x1a0>)
 8015410:	681a      	ldr	r2, [r3, #0]
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8015416:	4a0b      	ldr	r2, [pc, #44]	; (8015444 <netif_add+0x1a0>)
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801541c:	68fb      	ldr	r3, [r7, #12]
}
 801541e:	4618      	mov	r0, r3
 8015420:	3718      	adds	r7, #24
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}
 8015426:	bf00      	nop
 8015428:	080207cc 	.word	0x080207cc
 801542c:	0802087c 	.word	0x0802087c
 8015430:	08020838 	.word	0x08020838
 8015434:	08020898 	.word	0x08020898
 8015438:	080229ac 	.word	0x080229ac
 801543c:	08015867 	.word	0x08015867
 8015440:	20007718 	.word	0x20007718
 8015444:	2000ba4c 	.word	0x2000ba4c
 8015448:	080208bc 	.word	0x080208bc
 801544c:	080208d0 	.word	0x080208d0

08015450 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b082      	sub	sp, #8
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
 8015458:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801545a:	6839      	ldr	r1, [r7, #0]
 801545c:	6878      	ldr	r0, [r7, #4]
 801545e:	f002 fc73 	bl	8017d48 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8015462:	6839      	ldr	r1, [r7, #0]
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	f007 fa31 	bl	801c8cc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801546a:	bf00      	nop
 801546c:	3708      	adds	r7, #8
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}
	...

08015474 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b086      	sub	sp, #24
 8015478:	af00      	add	r7, sp, #0
 801547a:	60f8      	str	r0, [r7, #12]
 801547c:	60b9      	str	r1, [r7, #8]
 801547e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d106      	bne.n	8015494 <netif_do_set_ipaddr+0x20>
 8015486:	4b1d      	ldr	r3, [pc, #116]	; (80154fc <netif_do_set_ipaddr+0x88>)
 8015488:	f240 12cb 	movw	r2, #459	; 0x1cb
 801548c:	491c      	ldr	r1, [pc, #112]	; (8015500 <netif_do_set_ipaddr+0x8c>)
 801548e:	481d      	ldr	r0, [pc, #116]	; (8015504 <netif_do_set_ipaddr+0x90>)
 8015490:	f008 f932 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d106      	bne.n	80154a8 <netif_do_set_ipaddr+0x34>
 801549a:	4b18      	ldr	r3, [pc, #96]	; (80154fc <netif_do_set_ipaddr+0x88>)
 801549c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80154a0:	4917      	ldr	r1, [pc, #92]	; (8015500 <netif_do_set_ipaddr+0x8c>)
 80154a2:	4818      	ldr	r0, [pc, #96]	; (8015504 <netif_do_set_ipaddr+0x90>)
 80154a4:	f008 f928 	bl	801d6f8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	681a      	ldr	r2, [r3, #0]
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	3304      	adds	r3, #4
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	429a      	cmp	r2, r3
 80154b4:	d01c      	beq.n	80154f0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80154b6:	68bb      	ldr	r3, [r7, #8]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	3304      	adds	r3, #4
 80154c0:	681a      	ldr	r2, [r3, #0]
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80154c6:	f107 0314 	add.w	r3, r7, #20
 80154ca:	4619      	mov	r1, r3
 80154cc:	6878      	ldr	r0, [r7, #4]
 80154ce:	f7ff ffbf 	bl	8015450 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80154d2:	68bb      	ldr	r3, [r7, #8]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d002      	beq.n	80154de <netif_do_set_ipaddr+0x6a>
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	e000      	b.n	80154e0 <netif_do_set_ipaddr+0x6c>
 80154de:	2300      	movs	r3, #0
 80154e0:	68fa      	ldr	r2, [r7, #12]
 80154e2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80154e4:	2101      	movs	r1, #1
 80154e6:	68f8      	ldr	r0, [r7, #12]
 80154e8:	f000 f8d2 	bl	8015690 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80154ec:	2301      	movs	r3, #1
 80154ee:	e000      	b.n	80154f2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80154f0:	2300      	movs	r3, #0
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3718      	adds	r7, #24
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}
 80154fa:	bf00      	nop
 80154fc:	080207cc 	.word	0x080207cc
 8015500:	08020900 	.word	0x08020900
 8015504:	08020838 	.word	0x08020838

08015508 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8015508:	b480      	push	{r7}
 801550a:	b085      	sub	sp, #20
 801550c:	af00      	add	r7, sp, #0
 801550e:	60f8      	str	r0, [r7, #12]
 8015510:	60b9      	str	r1, [r7, #8]
 8015512:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8015514:	68bb      	ldr	r3, [r7, #8]
 8015516:	681a      	ldr	r2, [r3, #0]
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	3308      	adds	r3, #8
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	429a      	cmp	r2, r3
 8015520:	d00a      	beq.n	8015538 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8015522:	68bb      	ldr	r3, [r7, #8]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d002      	beq.n	801552e <netif_do_set_netmask+0x26>
 8015528:	68bb      	ldr	r3, [r7, #8]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	e000      	b.n	8015530 <netif_do_set_netmask+0x28>
 801552e:	2300      	movs	r3, #0
 8015530:	68fa      	ldr	r2, [r7, #12]
 8015532:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8015534:	2301      	movs	r3, #1
 8015536:	e000      	b.n	801553a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8015538:	2300      	movs	r3, #0
}
 801553a:	4618      	mov	r0, r3
 801553c:	3714      	adds	r7, #20
 801553e:	46bd      	mov	sp, r7
 8015540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015544:	4770      	bx	lr

08015546 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8015546:	b480      	push	{r7}
 8015548:	b085      	sub	sp, #20
 801554a:	af00      	add	r7, sp, #0
 801554c:	60f8      	str	r0, [r7, #12]
 801554e:	60b9      	str	r1, [r7, #8]
 8015550:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	681a      	ldr	r2, [r3, #0]
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	330c      	adds	r3, #12
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	429a      	cmp	r2, r3
 801555e:	d00a      	beq.n	8015576 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8015560:	68bb      	ldr	r3, [r7, #8]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d002      	beq.n	801556c <netif_do_set_gw+0x26>
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	e000      	b.n	801556e <netif_do_set_gw+0x28>
 801556c:	2300      	movs	r3, #0
 801556e:	68fa      	ldr	r2, [r7, #12]
 8015570:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8015572:	2301      	movs	r3, #1
 8015574:	e000      	b.n	8015578 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8015576:	2300      	movs	r3, #0
}
 8015578:	4618      	mov	r0, r3
 801557a:	3714      	adds	r7, #20
 801557c:	46bd      	mov	sp, r7
 801557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015582:	4770      	bx	lr

08015584 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b088      	sub	sp, #32
 8015588:	af00      	add	r7, sp, #0
 801558a:	60f8      	str	r0, [r7, #12]
 801558c:	60b9      	str	r1, [r7, #8]
 801558e:	607a      	str	r2, [r7, #4]
 8015590:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8015592:	2300      	movs	r3, #0
 8015594:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8015596:	2300      	movs	r3, #0
 8015598:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801559a:	68bb      	ldr	r3, [r7, #8]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d101      	bne.n	80155a4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80155a0:	4b1c      	ldr	r3, [pc, #112]	; (8015614 <netif_set_addr+0x90>)
 80155a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d101      	bne.n	80155ae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80155aa:	4b1a      	ldr	r3, [pc, #104]	; (8015614 <netif_set_addr+0x90>)
 80155ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d101      	bne.n	80155b8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80155b4:	4b17      	ldr	r3, [pc, #92]	; (8015614 <netif_set_addr+0x90>)
 80155b6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80155b8:	68bb      	ldr	r3, [r7, #8]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d003      	beq.n	80155c6 <netif_set_addr+0x42>
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d101      	bne.n	80155ca <netif_set_addr+0x46>
 80155c6:	2301      	movs	r3, #1
 80155c8:	e000      	b.n	80155cc <netif_set_addr+0x48>
 80155ca:	2300      	movs	r3, #0
 80155cc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d006      	beq.n	80155e2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80155d4:	f107 0310 	add.w	r3, r7, #16
 80155d8:	461a      	mov	r2, r3
 80155da:	68b9      	ldr	r1, [r7, #8]
 80155dc:	68f8      	ldr	r0, [r7, #12]
 80155de:	f7ff ff49 	bl	8015474 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80155e2:	69fa      	ldr	r2, [r7, #28]
 80155e4:	6879      	ldr	r1, [r7, #4]
 80155e6:	68f8      	ldr	r0, [r7, #12]
 80155e8:	f7ff ff8e 	bl	8015508 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80155ec:	69ba      	ldr	r2, [r7, #24]
 80155ee:	6839      	ldr	r1, [r7, #0]
 80155f0:	68f8      	ldr	r0, [r7, #12]
 80155f2:	f7ff ffa8 	bl	8015546 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d106      	bne.n	801560a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80155fc:	f107 0310 	add.w	r3, r7, #16
 8015600:	461a      	mov	r2, r3
 8015602:	68b9      	ldr	r1, [r7, #8]
 8015604:	68f8      	ldr	r0, [r7, #12]
 8015606:	f7ff ff35 	bl	8015474 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801560a:	bf00      	nop
 801560c:	3720      	adds	r7, #32
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}
 8015612:	bf00      	nop
 8015614:	080229ac 	.word	0x080229ac

08015618 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8015618:	b480      	push	{r7}
 801561a:	b083      	sub	sp, #12
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8015620:	4a04      	ldr	r2, [pc, #16]	; (8015634 <netif_set_default+0x1c>)
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8015626:	bf00      	nop
 8015628:	370c      	adds	r7, #12
 801562a:	46bd      	mov	sp, r7
 801562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015630:	4770      	bx	lr
 8015632:	bf00      	nop
 8015634:	2000ba50 	.word	0x2000ba50

08015638 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b082      	sub	sp, #8
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d107      	bne.n	8015656 <netif_set_up+0x1e>
 8015646:	4b0f      	ldr	r3, [pc, #60]	; (8015684 <netif_set_up+0x4c>)
 8015648:	f44f 7254 	mov.w	r2, #848	; 0x350
 801564c:	490e      	ldr	r1, [pc, #56]	; (8015688 <netif_set_up+0x50>)
 801564e:	480f      	ldr	r0, [pc, #60]	; (801568c <netif_set_up+0x54>)
 8015650:	f008 f852 	bl	801d6f8 <iprintf>
 8015654:	e013      	b.n	801567e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801565c:	f003 0301 	and.w	r3, r3, #1
 8015660:	2b00      	cmp	r3, #0
 8015662:	d10c      	bne.n	801567e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801566a:	f043 0301 	orr.w	r3, r3, #1
 801566e:	b2da      	uxtb	r2, r3
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015676:	2103      	movs	r1, #3
 8015678:	6878      	ldr	r0, [r7, #4]
 801567a:	f000 f809 	bl	8015690 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801567e:	3708      	adds	r7, #8
 8015680:	46bd      	mov	sp, r7
 8015682:	bd80      	pop	{r7, pc}
 8015684:	080207cc 	.word	0x080207cc
 8015688:	08020970 	.word	0x08020970
 801568c:	08020838 	.word	0x08020838

08015690 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
 8015698:	460b      	mov	r3, r1
 801569a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d106      	bne.n	80156b0 <netif_issue_reports+0x20>
 80156a2:	4b18      	ldr	r3, [pc, #96]	; (8015704 <netif_issue_reports+0x74>)
 80156a4:	f240 326d 	movw	r2, #877	; 0x36d
 80156a8:	4917      	ldr	r1, [pc, #92]	; (8015708 <netif_issue_reports+0x78>)
 80156aa:	4818      	ldr	r0, [pc, #96]	; (801570c <netif_issue_reports+0x7c>)
 80156ac:	f008 f824 	bl	801d6f8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80156b6:	f003 0304 	and.w	r3, r3, #4
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d01e      	beq.n	80156fc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80156c4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d017      	beq.n	80156fc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80156cc:	78fb      	ldrb	r3, [r7, #3]
 80156ce:	f003 0301 	and.w	r3, r3, #1
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d013      	beq.n	80156fe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	3304      	adds	r3, #4
 80156da:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d00e      	beq.n	80156fe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80156e6:	f003 0308 	and.w	r3, r3, #8
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d007      	beq.n	80156fe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	3304      	adds	r3, #4
 80156f2:	4619      	mov	r1, r3
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f7fd fbf7 	bl	8012ee8 <etharp_request>
 80156fa:	e000      	b.n	80156fe <netif_issue_reports+0x6e>
    return;
 80156fc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80156fe:	3708      	adds	r7, #8
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}
 8015704:	080207cc 	.word	0x080207cc
 8015708:	0802098c 	.word	0x0802098c
 801570c:	08020838 	.word	0x08020838

08015710 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b082      	sub	sp, #8
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d107      	bne.n	801572e <netif_set_down+0x1e>
 801571e:	4b12      	ldr	r3, [pc, #72]	; (8015768 <netif_set_down+0x58>)
 8015720:	f240 329b 	movw	r2, #923	; 0x39b
 8015724:	4911      	ldr	r1, [pc, #68]	; (801576c <netif_set_down+0x5c>)
 8015726:	4812      	ldr	r0, [pc, #72]	; (8015770 <netif_set_down+0x60>)
 8015728:	f007 ffe6 	bl	801d6f8 <iprintf>
 801572c:	e019      	b.n	8015762 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015734:	f003 0301 	and.w	r3, r3, #1
 8015738:	2b00      	cmp	r3, #0
 801573a:	d012      	beq.n	8015762 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015742:	f023 0301 	bic.w	r3, r3, #1
 8015746:	b2da      	uxtb	r2, r3
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015754:	f003 0308 	and.w	r3, r3, #8
 8015758:	2b00      	cmp	r3, #0
 801575a:	d002      	beq.n	8015762 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801575c:	6878      	ldr	r0, [r7, #4]
 801575e:	f7fc ff7d 	bl	801265c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8015762:	3708      	adds	r7, #8
 8015764:	46bd      	mov	sp, r7
 8015766:	bd80      	pop	{r7, pc}
 8015768:	080207cc 	.word	0x080207cc
 801576c:	080209b0 	.word	0x080209b0
 8015770:	08020838 	.word	0x08020838

08015774 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b082      	sub	sp, #8
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d107      	bne.n	8015792 <netif_set_link_up+0x1e>
 8015782:	4b15      	ldr	r3, [pc, #84]	; (80157d8 <netif_set_link_up+0x64>)
 8015784:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8015788:	4914      	ldr	r1, [pc, #80]	; (80157dc <netif_set_link_up+0x68>)
 801578a:	4815      	ldr	r0, [pc, #84]	; (80157e0 <netif_set_link_up+0x6c>)
 801578c:	f007 ffb4 	bl	801d6f8 <iprintf>
 8015790:	e01e      	b.n	80157d0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015798:	f003 0304 	and.w	r3, r3, #4
 801579c:	2b00      	cmp	r3, #0
 801579e:	d117      	bne.n	80157d0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80157a6:	f043 0304 	orr.w	r3, r3, #4
 80157aa:	b2da      	uxtb	r2, r3
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	f7fb f9b2 	bl	8010b1c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80157b8:	2103      	movs	r1, #3
 80157ba:	6878      	ldr	r0, [r7, #4]
 80157bc:	f7ff ff68 	bl	8015690 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	69db      	ldr	r3, [r3, #28]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d003      	beq.n	80157d0 <netif_set_link_up+0x5c>
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	69db      	ldr	r3, [r3, #28]
 80157cc:	6878      	ldr	r0, [r7, #4]
 80157ce:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80157d0:	3708      	adds	r7, #8
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}
 80157d6:	bf00      	nop
 80157d8:	080207cc 	.word	0x080207cc
 80157dc:	080209d0 	.word	0x080209d0
 80157e0:	08020838 	.word	0x08020838

080157e4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b082      	sub	sp, #8
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d107      	bne.n	8015802 <netif_set_link_down+0x1e>
 80157f2:	4b11      	ldr	r3, [pc, #68]	; (8015838 <netif_set_link_down+0x54>)
 80157f4:	f240 4206 	movw	r2, #1030	; 0x406
 80157f8:	4910      	ldr	r1, [pc, #64]	; (801583c <netif_set_link_down+0x58>)
 80157fa:	4811      	ldr	r0, [pc, #68]	; (8015840 <netif_set_link_down+0x5c>)
 80157fc:	f007 ff7c 	bl	801d6f8 <iprintf>
 8015800:	e017      	b.n	8015832 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015808:	f003 0304 	and.w	r3, r3, #4
 801580c:	2b00      	cmp	r3, #0
 801580e:	d010      	beq.n	8015832 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015816:	f023 0304 	bic.w	r3, r3, #4
 801581a:	b2da      	uxtb	r2, r3
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	69db      	ldr	r3, [r3, #28]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d003      	beq.n	8015832 <netif_set_link_down+0x4e>
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	69db      	ldr	r3, [r3, #28]
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8015832:	3708      	adds	r7, #8
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}
 8015838:	080207cc 	.word	0x080207cc
 801583c:	080209f4 	.word	0x080209f4
 8015840:	08020838 	.word	0x08020838

08015844 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8015844:	b480      	push	{r7}
 8015846:	b083      	sub	sp, #12
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
 801584c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d002      	beq.n	801585a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	683a      	ldr	r2, [r7, #0]
 8015858:	61da      	str	r2, [r3, #28]
  }
}
 801585a:	bf00      	nop
 801585c:	370c      	adds	r7, #12
 801585e:	46bd      	mov	sp, r7
 8015860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015864:	4770      	bx	lr

08015866 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8015866:	b480      	push	{r7}
 8015868:	b085      	sub	sp, #20
 801586a:	af00      	add	r7, sp, #0
 801586c:	60f8      	str	r0, [r7, #12]
 801586e:	60b9      	str	r1, [r7, #8]
 8015870:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8015872:	f06f 030b 	mvn.w	r3, #11
}
 8015876:	4618      	mov	r0, r3
 8015878:	3714      	adds	r7, #20
 801587a:	46bd      	mov	sp, r7
 801587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015880:	4770      	bx	lr
	...

08015884 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8015884:	b480      	push	{r7}
 8015886:	b085      	sub	sp, #20
 8015888:	af00      	add	r7, sp, #0
 801588a:	4603      	mov	r3, r0
 801588c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801588e:	79fb      	ldrb	r3, [r7, #7]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d013      	beq.n	80158bc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8015894:	4b0d      	ldr	r3, [pc, #52]	; (80158cc <netif_get_by_index+0x48>)
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	60fb      	str	r3, [r7, #12]
 801589a:	e00c      	b.n	80158b6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80158a2:	3301      	adds	r3, #1
 80158a4:	b2db      	uxtb	r3, r3
 80158a6:	79fa      	ldrb	r2, [r7, #7]
 80158a8:	429a      	cmp	r2, r3
 80158aa:	d101      	bne.n	80158b0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	e006      	b.n	80158be <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	60fb      	str	r3, [r7, #12]
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d1ef      	bne.n	801589c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80158bc:	2300      	movs	r3, #0
}
 80158be:	4618      	mov	r0, r3
 80158c0:	3714      	adds	r7, #20
 80158c2:	46bd      	mov	sp, r7
 80158c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c8:	4770      	bx	lr
 80158ca:	bf00      	nop
 80158cc:	2000ba4c 	.word	0x2000ba4c

080158d0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b082      	sub	sp, #8
 80158d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80158d6:	f000 fedd 	bl	8016694 <sys_arch_protect>
 80158da:	6038      	str	r0, [r7, #0]
 80158dc:	4b0d      	ldr	r3, [pc, #52]	; (8015914 <pbuf_free_ooseq+0x44>)
 80158de:	2200      	movs	r2, #0
 80158e0:	701a      	strb	r2, [r3, #0]
 80158e2:	6838      	ldr	r0, [r7, #0]
 80158e4:	f000 fee4 	bl	80166b0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80158e8:	4b0b      	ldr	r3, [pc, #44]	; (8015918 <pbuf_free_ooseq+0x48>)
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	607b      	str	r3, [r7, #4]
 80158ee:	e00a      	b.n	8015906 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d003      	beq.n	8015900 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80158f8:	6878      	ldr	r0, [r7, #4]
 80158fa:	f002 fa63 	bl	8017dc4 <tcp_free_ooseq>
      return;
 80158fe:	e005      	b.n	801590c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	68db      	ldr	r3, [r3, #12]
 8015904:	607b      	str	r3, [r7, #4]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d1f1      	bne.n	80158f0 <pbuf_free_ooseq+0x20>
    }
  }
}
 801590c:	3708      	adds	r7, #8
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}
 8015912:	bf00      	nop
 8015914:	2000ba54 	.word	0x2000ba54
 8015918:	2000ba64 	.word	0x2000ba64

0801591c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8015924:	f7ff ffd4 	bl	80158d0 <pbuf_free_ooseq>
}
 8015928:	bf00      	nop
 801592a:	3708      	adds	r7, #8
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}

08015930 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b082      	sub	sp, #8
 8015934:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8015936:	f000 fead 	bl	8016694 <sys_arch_protect>
 801593a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801593c:	4b0f      	ldr	r3, [pc, #60]	; (801597c <pbuf_pool_is_empty+0x4c>)
 801593e:	781b      	ldrb	r3, [r3, #0]
 8015940:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8015942:	4b0e      	ldr	r3, [pc, #56]	; (801597c <pbuf_pool_is_empty+0x4c>)
 8015944:	2201      	movs	r2, #1
 8015946:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f000 feb1 	bl	80166b0 <sys_arch_unprotect>

  if (!queued) {
 801594e:	78fb      	ldrb	r3, [r7, #3]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d10f      	bne.n	8015974 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8015954:	2100      	movs	r1, #0
 8015956:	480a      	ldr	r0, [pc, #40]	; (8015980 <pbuf_pool_is_empty+0x50>)
 8015958:	f006 f906 	bl	801bb68 <tcpip_try_callback>
 801595c:	4603      	mov	r3, r0
 801595e:	2b00      	cmp	r3, #0
 8015960:	d008      	beq.n	8015974 <pbuf_pool_is_empty+0x44>
 8015962:	f000 fe97 	bl	8016694 <sys_arch_protect>
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	4b04      	ldr	r3, [pc, #16]	; (801597c <pbuf_pool_is_empty+0x4c>)
 801596a:	2200      	movs	r2, #0
 801596c:	701a      	strb	r2, [r3, #0]
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f000 fe9e 	bl	80166b0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8015974:	bf00      	nop
 8015976:	3708      	adds	r7, #8
 8015978:	46bd      	mov	sp, r7
 801597a:	bd80      	pop	{r7, pc}
 801597c:	2000ba54 	.word	0x2000ba54
 8015980:	0801591d 	.word	0x0801591d

08015984 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8015984:	b480      	push	{r7}
 8015986:	b085      	sub	sp, #20
 8015988:	af00      	add	r7, sp, #0
 801598a:	60f8      	str	r0, [r7, #12]
 801598c:	60b9      	str	r1, [r7, #8]
 801598e:	4611      	mov	r1, r2
 8015990:	461a      	mov	r2, r3
 8015992:	460b      	mov	r3, r1
 8015994:	80fb      	strh	r3, [r7, #6]
 8015996:	4613      	mov	r3, r2
 8015998:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	2200      	movs	r2, #0
 801599e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	68ba      	ldr	r2, [r7, #8]
 80159a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	88fa      	ldrh	r2, [r7, #6]
 80159aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	88ba      	ldrh	r2, [r7, #4]
 80159b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80159b2:	8b3b      	ldrh	r3, [r7, #24]
 80159b4:	b2da      	uxtb	r2, r3
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	7f3a      	ldrb	r2, [r7, #28]
 80159be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	2201      	movs	r2, #1
 80159c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	2200      	movs	r2, #0
 80159ca:	73da      	strb	r2, [r3, #15]
}
 80159cc:	bf00      	nop
 80159ce:	3714      	adds	r7, #20
 80159d0:	46bd      	mov	sp, r7
 80159d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d6:	4770      	bx	lr

080159d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b08c      	sub	sp, #48	; 0x30
 80159dc:	af02      	add	r7, sp, #8
 80159de:	4603      	mov	r3, r0
 80159e0:	71fb      	strb	r3, [r7, #7]
 80159e2:	460b      	mov	r3, r1
 80159e4:	80bb      	strh	r3, [r7, #4]
 80159e6:	4613      	mov	r3, r2
 80159e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80159ea:	79fb      	ldrb	r3, [r7, #7]
 80159ec:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80159ee:	887b      	ldrh	r3, [r7, #2]
 80159f0:	2b41      	cmp	r3, #65	; 0x41
 80159f2:	d00b      	beq.n	8015a0c <pbuf_alloc+0x34>
 80159f4:	2b41      	cmp	r3, #65	; 0x41
 80159f6:	dc02      	bgt.n	80159fe <pbuf_alloc+0x26>
 80159f8:	2b01      	cmp	r3, #1
 80159fa:	d007      	beq.n	8015a0c <pbuf_alloc+0x34>
 80159fc:	e0c2      	b.n	8015b84 <pbuf_alloc+0x1ac>
 80159fe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8015a02:	d00b      	beq.n	8015a1c <pbuf_alloc+0x44>
 8015a04:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8015a08:	d070      	beq.n	8015aec <pbuf_alloc+0x114>
 8015a0a:	e0bb      	b.n	8015b84 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8015a0c:	887a      	ldrh	r2, [r7, #2]
 8015a0e:	88bb      	ldrh	r3, [r7, #4]
 8015a10:	4619      	mov	r1, r3
 8015a12:	2000      	movs	r0, #0
 8015a14:	f000 f8d2 	bl	8015bbc <pbuf_alloc_reference>
 8015a18:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8015a1a:	e0bd      	b.n	8015b98 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8015a20:	2300      	movs	r3, #0
 8015a22:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8015a24:	88bb      	ldrh	r3, [r7, #4]
 8015a26:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8015a28:	200c      	movs	r0, #12
 8015a2a:	f7ff fb93 	bl	8015154 <memp_malloc>
 8015a2e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8015a30:	693b      	ldr	r3, [r7, #16]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d109      	bne.n	8015a4a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8015a36:	f7ff ff7b 	bl	8015930 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8015a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d002      	beq.n	8015a46 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8015a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a42:	f000 faa9 	bl	8015f98 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8015a46:	2300      	movs	r3, #0
 8015a48:	e0a7      	b.n	8015b9a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8015a4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a4c:	3303      	adds	r3, #3
 8015a4e:	b29b      	uxth	r3, r3
 8015a50:	f023 0303 	bic.w	r3, r3, #3
 8015a54:	b29b      	uxth	r3, r3
 8015a56:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8015a5a:	b29b      	uxth	r3, r3
 8015a5c:	8b7a      	ldrh	r2, [r7, #26]
 8015a5e:	4293      	cmp	r3, r2
 8015a60:	bf28      	it	cs
 8015a62:	4613      	movcs	r3, r2
 8015a64:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8015a66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a68:	3310      	adds	r3, #16
 8015a6a:	693a      	ldr	r2, [r7, #16]
 8015a6c:	4413      	add	r3, r2
 8015a6e:	3303      	adds	r3, #3
 8015a70:	f023 0303 	bic.w	r3, r3, #3
 8015a74:	4618      	mov	r0, r3
 8015a76:	89f9      	ldrh	r1, [r7, #14]
 8015a78:	8b7a      	ldrh	r2, [r7, #26]
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	9301      	str	r3, [sp, #4]
 8015a7e:	887b      	ldrh	r3, [r7, #2]
 8015a80:	9300      	str	r3, [sp, #0]
 8015a82:	460b      	mov	r3, r1
 8015a84:	4601      	mov	r1, r0
 8015a86:	6938      	ldr	r0, [r7, #16]
 8015a88:	f7ff ff7c 	bl	8015984 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8015a8c:	693b      	ldr	r3, [r7, #16]
 8015a8e:	685b      	ldr	r3, [r3, #4]
 8015a90:	f003 0303 	and.w	r3, r3, #3
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d006      	beq.n	8015aa6 <pbuf_alloc+0xce>
 8015a98:	4b42      	ldr	r3, [pc, #264]	; (8015ba4 <pbuf_alloc+0x1cc>)
 8015a9a:	f240 1201 	movw	r2, #257	; 0x101
 8015a9e:	4942      	ldr	r1, [pc, #264]	; (8015ba8 <pbuf_alloc+0x1d0>)
 8015aa0:	4842      	ldr	r0, [pc, #264]	; (8015bac <pbuf_alloc+0x1d4>)
 8015aa2:	f007 fe29 	bl	801d6f8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015aa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015aa8:	3303      	adds	r3, #3
 8015aaa:	f023 0303 	bic.w	r3, r3, #3
 8015aae:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8015ab2:	d106      	bne.n	8015ac2 <pbuf_alloc+0xea>
 8015ab4:	4b3b      	ldr	r3, [pc, #236]	; (8015ba4 <pbuf_alloc+0x1cc>)
 8015ab6:	f240 1203 	movw	r2, #259	; 0x103
 8015aba:	493d      	ldr	r1, [pc, #244]	; (8015bb0 <pbuf_alloc+0x1d8>)
 8015abc:	483b      	ldr	r0, [pc, #236]	; (8015bac <pbuf_alloc+0x1d4>)
 8015abe:	f007 fe1b 	bl	801d6f8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8015ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d102      	bne.n	8015ace <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8015ac8:	693b      	ldr	r3, [r7, #16]
 8015aca:	627b      	str	r3, [r7, #36]	; 0x24
 8015acc:	e002      	b.n	8015ad4 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8015ace:	69fb      	ldr	r3, [r7, #28]
 8015ad0:	693a      	ldr	r2, [r7, #16]
 8015ad2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8015ad4:	693b      	ldr	r3, [r7, #16]
 8015ad6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8015ad8:	8b7a      	ldrh	r2, [r7, #26]
 8015ada:	89fb      	ldrh	r3, [r7, #14]
 8015adc:	1ad3      	subs	r3, r2, r3
 8015ade:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8015ae4:	8b7b      	ldrh	r3, [r7, #26]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d19e      	bne.n	8015a28 <pbuf_alloc+0x50>
      break;
 8015aea:	e055      	b.n	8015b98 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8015aec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015aee:	3303      	adds	r3, #3
 8015af0:	b29b      	uxth	r3, r3
 8015af2:	f023 0303 	bic.w	r3, r3, #3
 8015af6:	b29a      	uxth	r2, r3
 8015af8:	88bb      	ldrh	r3, [r7, #4]
 8015afa:	3303      	adds	r3, #3
 8015afc:	b29b      	uxth	r3, r3
 8015afe:	f023 0303 	bic.w	r3, r3, #3
 8015b02:	b29b      	uxth	r3, r3
 8015b04:	4413      	add	r3, r2
 8015b06:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8015b08:	8b3b      	ldrh	r3, [r7, #24]
 8015b0a:	3310      	adds	r3, #16
 8015b0c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015b0e:	8b3a      	ldrh	r2, [r7, #24]
 8015b10:	88bb      	ldrh	r3, [r7, #4]
 8015b12:	3303      	adds	r3, #3
 8015b14:	f023 0303 	bic.w	r3, r3, #3
 8015b18:	429a      	cmp	r2, r3
 8015b1a:	d306      	bcc.n	8015b2a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8015b1c:	8afa      	ldrh	r2, [r7, #22]
 8015b1e:	88bb      	ldrh	r3, [r7, #4]
 8015b20:	3303      	adds	r3, #3
 8015b22:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015b26:	429a      	cmp	r2, r3
 8015b28:	d201      	bcs.n	8015b2e <pbuf_alloc+0x156>
        return NULL;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	e035      	b.n	8015b9a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8015b2e:	8afb      	ldrh	r3, [r7, #22]
 8015b30:	4618      	mov	r0, r3
 8015b32:	f7ff f967 	bl	8014e04 <mem_malloc>
 8015b36:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8015b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d101      	bne.n	8015b42 <pbuf_alloc+0x16a>
        return NULL;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	e02b      	b.n	8015b9a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8015b42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b44:	3310      	adds	r3, #16
 8015b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b48:	4413      	add	r3, r2
 8015b4a:	3303      	adds	r3, #3
 8015b4c:	f023 0303 	bic.w	r3, r3, #3
 8015b50:	4618      	mov	r0, r3
 8015b52:	88b9      	ldrh	r1, [r7, #4]
 8015b54:	88ba      	ldrh	r2, [r7, #4]
 8015b56:	2300      	movs	r3, #0
 8015b58:	9301      	str	r3, [sp, #4]
 8015b5a:	887b      	ldrh	r3, [r7, #2]
 8015b5c:	9300      	str	r3, [sp, #0]
 8015b5e:	460b      	mov	r3, r1
 8015b60:	4601      	mov	r1, r0
 8015b62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b64:	f7ff ff0e 	bl	8015984 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8015b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b6a:	685b      	ldr	r3, [r3, #4]
 8015b6c:	f003 0303 	and.w	r3, r3, #3
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d010      	beq.n	8015b96 <pbuf_alloc+0x1be>
 8015b74:	4b0b      	ldr	r3, [pc, #44]	; (8015ba4 <pbuf_alloc+0x1cc>)
 8015b76:	f240 1223 	movw	r2, #291	; 0x123
 8015b7a:	490e      	ldr	r1, [pc, #56]	; (8015bb4 <pbuf_alloc+0x1dc>)
 8015b7c:	480b      	ldr	r0, [pc, #44]	; (8015bac <pbuf_alloc+0x1d4>)
 8015b7e:	f007 fdbb 	bl	801d6f8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8015b82:	e008      	b.n	8015b96 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8015b84:	4b07      	ldr	r3, [pc, #28]	; (8015ba4 <pbuf_alloc+0x1cc>)
 8015b86:	f240 1227 	movw	r2, #295	; 0x127
 8015b8a:	490b      	ldr	r1, [pc, #44]	; (8015bb8 <pbuf_alloc+0x1e0>)
 8015b8c:	4807      	ldr	r0, [pc, #28]	; (8015bac <pbuf_alloc+0x1d4>)
 8015b8e:	f007 fdb3 	bl	801d6f8 <iprintf>
      return NULL;
 8015b92:	2300      	movs	r3, #0
 8015b94:	e001      	b.n	8015b9a <pbuf_alloc+0x1c2>
      break;
 8015b96:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8015b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3728      	adds	r7, #40	; 0x28
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd80      	pop	{r7, pc}
 8015ba2:	bf00      	nop
 8015ba4:	08020a18 	.word	0x08020a18
 8015ba8:	08020a68 	.word	0x08020a68
 8015bac:	08020a98 	.word	0x08020a98
 8015bb0:	08020ac0 	.word	0x08020ac0
 8015bb4:	08020af4 	.word	0x08020af4
 8015bb8:	08020b20 	.word	0x08020b20

08015bbc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b086      	sub	sp, #24
 8015bc0:	af02      	add	r7, sp, #8
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	460b      	mov	r3, r1
 8015bc6:	807b      	strh	r3, [r7, #2]
 8015bc8:	4613      	mov	r3, r2
 8015bca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8015bcc:	883b      	ldrh	r3, [r7, #0]
 8015bce:	2b41      	cmp	r3, #65	; 0x41
 8015bd0:	d009      	beq.n	8015be6 <pbuf_alloc_reference+0x2a>
 8015bd2:	883b      	ldrh	r3, [r7, #0]
 8015bd4:	2b01      	cmp	r3, #1
 8015bd6:	d006      	beq.n	8015be6 <pbuf_alloc_reference+0x2a>
 8015bd8:	4b0f      	ldr	r3, [pc, #60]	; (8015c18 <pbuf_alloc_reference+0x5c>)
 8015bda:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8015bde:	490f      	ldr	r1, [pc, #60]	; (8015c1c <pbuf_alloc_reference+0x60>)
 8015be0:	480f      	ldr	r0, [pc, #60]	; (8015c20 <pbuf_alloc_reference+0x64>)
 8015be2:	f007 fd89 	bl	801d6f8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015be6:	200b      	movs	r0, #11
 8015be8:	f7ff fab4 	bl	8015154 <memp_malloc>
 8015bec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d101      	bne.n	8015bf8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	e00b      	b.n	8015c10 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8015bf8:	8879      	ldrh	r1, [r7, #2]
 8015bfa:	887a      	ldrh	r2, [r7, #2]
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	9301      	str	r3, [sp, #4]
 8015c00:	883b      	ldrh	r3, [r7, #0]
 8015c02:	9300      	str	r3, [sp, #0]
 8015c04:	460b      	mov	r3, r1
 8015c06:	6879      	ldr	r1, [r7, #4]
 8015c08:	68f8      	ldr	r0, [r7, #12]
 8015c0a:	f7ff febb 	bl	8015984 <pbuf_init_alloced_pbuf>
  return p;
 8015c0e:	68fb      	ldr	r3, [r7, #12]
}
 8015c10:	4618      	mov	r0, r3
 8015c12:	3710      	adds	r7, #16
 8015c14:	46bd      	mov	sp, r7
 8015c16:	bd80      	pop	{r7, pc}
 8015c18:	08020a18 	.word	0x08020a18
 8015c1c:	08020b3c 	.word	0x08020b3c
 8015c20:	08020a98 	.word	0x08020a98

08015c24 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b088      	sub	sp, #32
 8015c28:	af02      	add	r7, sp, #8
 8015c2a:	607b      	str	r3, [r7, #4]
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	73fb      	strb	r3, [r7, #15]
 8015c30:	460b      	mov	r3, r1
 8015c32:	81bb      	strh	r3, [r7, #12]
 8015c34:	4613      	mov	r3, r2
 8015c36:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8015c38:	7bfb      	ldrb	r3, [r7, #15]
 8015c3a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8015c3c:	8a7b      	ldrh	r3, [r7, #18]
 8015c3e:	3303      	adds	r3, #3
 8015c40:	f023 0203 	bic.w	r2, r3, #3
 8015c44:	89bb      	ldrh	r3, [r7, #12]
 8015c46:	441a      	add	r2, r3
 8015c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	d901      	bls.n	8015c52 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	e018      	b.n	8015c84 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8015c52:	6a3b      	ldr	r3, [r7, #32]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d007      	beq.n	8015c68 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015c58:	8a7b      	ldrh	r3, [r7, #18]
 8015c5a:	3303      	adds	r3, #3
 8015c5c:	f023 0303 	bic.w	r3, r3, #3
 8015c60:	6a3a      	ldr	r2, [r7, #32]
 8015c62:	4413      	add	r3, r2
 8015c64:	617b      	str	r3, [r7, #20]
 8015c66:	e001      	b.n	8015c6c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8015c68:	2300      	movs	r3, #0
 8015c6a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	89b9      	ldrh	r1, [r7, #12]
 8015c70:	89ba      	ldrh	r2, [r7, #12]
 8015c72:	2302      	movs	r3, #2
 8015c74:	9301      	str	r3, [sp, #4]
 8015c76:	897b      	ldrh	r3, [r7, #10]
 8015c78:	9300      	str	r3, [sp, #0]
 8015c7a:	460b      	mov	r3, r1
 8015c7c:	6979      	ldr	r1, [r7, #20]
 8015c7e:	f7ff fe81 	bl	8015984 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8015c82:	687b      	ldr	r3, [r7, #4]
}
 8015c84:	4618      	mov	r0, r3
 8015c86:	3718      	adds	r7, #24
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	bd80      	pop	{r7, pc}

08015c8c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b084      	sub	sp, #16
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
 8015c94:	460b      	mov	r3, r1
 8015c96:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d106      	bne.n	8015cac <pbuf_realloc+0x20>
 8015c9e:	4b3a      	ldr	r3, [pc, #232]	; (8015d88 <pbuf_realloc+0xfc>)
 8015ca0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8015ca4:	4939      	ldr	r1, [pc, #228]	; (8015d8c <pbuf_realloc+0x100>)
 8015ca6:	483a      	ldr	r0, [pc, #232]	; (8015d90 <pbuf_realloc+0x104>)
 8015ca8:	f007 fd26 	bl	801d6f8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	891b      	ldrh	r3, [r3, #8]
 8015cb0:	887a      	ldrh	r2, [r7, #2]
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	d264      	bcs.n	8015d80 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	891a      	ldrh	r2, [r3, #8]
 8015cba:	887b      	ldrh	r3, [r7, #2]
 8015cbc:	1ad3      	subs	r3, r2, r3
 8015cbe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015cc0:	887b      	ldrh	r3, [r7, #2]
 8015cc2:	817b      	strh	r3, [r7, #10]
  q = p;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015cc8:	e018      	b.n	8015cfc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	895b      	ldrh	r3, [r3, #10]
 8015cce:	897a      	ldrh	r2, [r7, #10]
 8015cd0:	1ad3      	subs	r3, r2, r3
 8015cd2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	891a      	ldrh	r2, [r3, #8]
 8015cd8:	893b      	ldrh	r3, [r7, #8]
 8015cda:	1ad3      	subs	r3, r2, r3
 8015cdc:	b29a      	uxth	r2, r3
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d106      	bne.n	8015cfc <pbuf_realloc+0x70>
 8015cee:	4b26      	ldr	r3, [pc, #152]	; (8015d88 <pbuf_realloc+0xfc>)
 8015cf0:	f240 12af 	movw	r2, #431	; 0x1af
 8015cf4:	4927      	ldr	r1, [pc, #156]	; (8015d94 <pbuf_realloc+0x108>)
 8015cf6:	4826      	ldr	r0, [pc, #152]	; (8015d90 <pbuf_realloc+0x104>)
 8015cf8:	f007 fcfe 	bl	801d6f8 <iprintf>
  while (rem_len > q->len) {
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	895b      	ldrh	r3, [r3, #10]
 8015d00:	897a      	ldrh	r2, [r7, #10]
 8015d02:	429a      	cmp	r2, r3
 8015d04:	d8e1      	bhi.n	8015cca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	7b1b      	ldrb	r3, [r3, #12]
 8015d0a:	f003 030f 	and.w	r3, r3, #15
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d122      	bne.n	8015d58 <pbuf_realloc+0xcc>
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	895b      	ldrh	r3, [r3, #10]
 8015d16:	897a      	ldrh	r2, [r7, #10]
 8015d18:	429a      	cmp	r2, r3
 8015d1a:	d01d      	beq.n	8015d58 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	7b5b      	ldrb	r3, [r3, #13]
 8015d20:	f003 0302 	and.w	r3, r3, #2
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d117      	bne.n	8015d58 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	685b      	ldr	r3, [r3, #4]
 8015d2c:	461a      	mov	r2, r3
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	1ad3      	subs	r3, r2, r3
 8015d32:	b29a      	uxth	r2, r3
 8015d34:	897b      	ldrh	r3, [r7, #10]
 8015d36:	4413      	add	r3, r2
 8015d38:	b29b      	uxth	r3, r3
 8015d3a:	4619      	mov	r1, r3
 8015d3c:	68f8      	ldr	r0, [r7, #12]
 8015d3e:	f7fe ff51 	bl	8014be4 <mem_trim>
 8015d42:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d106      	bne.n	8015d58 <pbuf_realloc+0xcc>
 8015d4a:	4b0f      	ldr	r3, [pc, #60]	; (8015d88 <pbuf_realloc+0xfc>)
 8015d4c:	f240 12bd 	movw	r2, #445	; 0x1bd
 8015d50:	4911      	ldr	r1, [pc, #68]	; (8015d98 <pbuf_realloc+0x10c>)
 8015d52:	480f      	ldr	r0, [pc, #60]	; (8015d90 <pbuf_realloc+0x104>)
 8015d54:	f007 fcd0 	bl	801d6f8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	897a      	ldrh	r2, [r7, #10]
 8015d5c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	895a      	ldrh	r2, [r3, #10]
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d004      	beq.n	8015d78 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	4618      	mov	r0, r3
 8015d74:	f000 f910 	bl	8015f98 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	601a      	str	r2, [r3, #0]
 8015d7e:	e000      	b.n	8015d82 <pbuf_realloc+0xf6>
    return;
 8015d80:	bf00      	nop

}
 8015d82:	3710      	adds	r7, #16
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}
 8015d88:	08020a18 	.word	0x08020a18
 8015d8c:	08020b50 	.word	0x08020b50
 8015d90:	08020a98 	.word	0x08020a98
 8015d94:	08020b68 	.word	0x08020b68
 8015d98:	08020b80 	.word	0x08020b80

08015d9c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b086      	sub	sp, #24
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	60f8      	str	r0, [r7, #12]
 8015da4:	60b9      	str	r1, [r7, #8]
 8015da6:	4613      	mov	r3, r2
 8015da8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d106      	bne.n	8015dbe <pbuf_add_header_impl+0x22>
 8015db0:	4b2b      	ldr	r3, [pc, #172]	; (8015e60 <pbuf_add_header_impl+0xc4>)
 8015db2:	f240 12df 	movw	r2, #479	; 0x1df
 8015db6:	492b      	ldr	r1, [pc, #172]	; (8015e64 <pbuf_add_header_impl+0xc8>)
 8015db8:	482b      	ldr	r0, [pc, #172]	; (8015e68 <pbuf_add_header_impl+0xcc>)
 8015dba:	f007 fc9d 	bl	801d6f8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d003      	beq.n	8015dcc <pbuf_add_header_impl+0x30>
 8015dc4:	68bb      	ldr	r3, [r7, #8]
 8015dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015dca:	d301      	bcc.n	8015dd0 <pbuf_add_header_impl+0x34>
    return 1;
 8015dcc:	2301      	movs	r3, #1
 8015dce:	e043      	b.n	8015e58 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8015dd0:	68bb      	ldr	r3, [r7, #8]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d101      	bne.n	8015dda <pbuf_add_header_impl+0x3e>
    return 0;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	e03e      	b.n	8015e58 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015dda:	68bb      	ldr	r3, [r7, #8]
 8015ddc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	891a      	ldrh	r2, [r3, #8]
 8015de2:	8a7b      	ldrh	r3, [r7, #18]
 8015de4:	4413      	add	r3, r2
 8015de6:	b29b      	uxth	r3, r3
 8015de8:	8a7a      	ldrh	r2, [r7, #18]
 8015dea:	429a      	cmp	r2, r3
 8015dec:	d901      	bls.n	8015df2 <pbuf_add_header_impl+0x56>
    return 1;
 8015dee:	2301      	movs	r3, #1
 8015df0:	e032      	b.n	8015e58 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	7b1b      	ldrb	r3, [r3, #12]
 8015df6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015df8:	8a3b      	ldrh	r3, [r7, #16]
 8015dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d00c      	beq.n	8015e1c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	685a      	ldr	r2, [r3, #4]
 8015e06:	68bb      	ldr	r3, [r7, #8]
 8015e08:	425b      	negs	r3, r3
 8015e0a:	4413      	add	r3, r2
 8015e0c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	3310      	adds	r3, #16
 8015e12:	697a      	ldr	r2, [r7, #20]
 8015e14:	429a      	cmp	r2, r3
 8015e16:	d20d      	bcs.n	8015e34 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8015e18:	2301      	movs	r3, #1
 8015e1a:	e01d      	b.n	8015e58 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015e1c:	79fb      	ldrb	r3, [r7, #7]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d006      	beq.n	8015e30 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	685a      	ldr	r2, [r3, #4]
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	425b      	negs	r3, r3
 8015e2a:	4413      	add	r3, r2
 8015e2c:	617b      	str	r3, [r7, #20]
 8015e2e:	e001      	b.n	8015e34 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8015e30:	2301      	movs	r3, #1
 8015e32:	e011      	b.n	8015e58 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	697a      	ldr	r2, [r7, #20]
 8015e38:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	895a      	ldrh	r2, [r3, #10]
 8015e3e:	8a7b      	ldrh	r3, [r7, #18]
 8015e40:	4413      	add	r3, r2
 8015e42:	b29a      	uxth	r2, r3
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	891a      	ldrh	r2, [r3, #8]
 8015e4c:	8a7b      	ldrh	r3, [r7, #18]
 8015e4e:	4413      	add	r3, r2
 8015e50:	b29a      	uxth	r2, r3
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	811a      	strh	r2, [r3, #8]


  return 0;
 8015e56:	2300      	movs	r3, #0
}
 8015e58:	4618      	mov	r0, r3
 8015e5a:	3718      	adds	r7, #24
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	bd80      	pop	{r7, pc}
 8015e60:	08020a18 	.word	0x08020a18
 8015e64:	08020b9c 	.word	0x08020b9c
 8015e68:	08020a98 	.word	0x08020a98

08015e6c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b082      	sub	sp, #8
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
 8015e74:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8015e76:	2200      	movs	r2, #0
 8015e78:	6839      	ldr	r1, [r7, #0]
 8015e7a:	6878      	ldr	r0, [r7, #4]
 8015e7c:	f7ff ff8e 	bl	8015d9c <pbuf_add_header_impl>
 8015e80:	4603      	mov	r3, r0
}
 8015e82:	4618      	mov	r0, r3
 8015e84:	3708      	adds	r7, #8
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bd80      	pop	{r7, pc}
	...

08015e8c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b084      	sub	sp, #16
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
 8015e94:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d106      	bne.n	8015eaa <pbuf_remove_header+0x1e>
 8015e9c:	4b20      	ldr	r3, [pc, #128]	; (8015f20 <pbuf_remove_header+0x94>)
 8015e9e:	f240 224b 	movw	r2, #587	; 0x24b
 8015ea2:	4920      	ldr	r1, [pc, #128]	; (8015f24 <pbuf_remove_header+0x98>)
 8015ea4:	4820      	ldr	r0, [pc, #128]	; (8015f28 <pbuf_remove_header+0x9c>)
 8015ea6:	f007 fc27 	bl	801d6f8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d003      	beq.n	8015eb8 <pbuf_remove_header+0x2c>
 8015eb0:	683b      	ldr	r3, [r7, #0]
 8015eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015eb6:	d301      	bcc.n	8015ebc <pbuf_remove_header+0x30>
    return 1;
 8015eb8:	2301      	movs	r3, #1
 8015eba:	e02c      	b.n	8015f16 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015ebc:	683b      	ldr	r3, [r7, #0]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d101      	bne.n	8015ec6 <pbuf_remove_header+0x3a>
    return 0;
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	e027      	b.n	8015f16 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	895b      	ldrh	r3, [r3, #10]
 8015ece:	89fa      	ldrh	r2, [r7, #14]
 8015ed0:	429a      	cmp	r2, r3
 8015ed2:	d908      	bls.n	8015ee6 <pbuf_remove_header+0x5a>
 8015ed4:	4b12      	ldr	r3, [pc, #72]	; (8015f20 <pbuf_remove_header+0x94>)
 8015ed6:	f240 2255 	movw	r2, #597	; 0x255
 8015eda:	4914      	ldr	r1, [pc, #80]	; (8015f2c <pbuf_remove_header+0xa0>)
 8015edc:	4812      	ldr	r0, [pc, #72]	; (8015f28 <pbuf_remove_header+0x9c>)
 8015ede:	f007 fc0b 	bl	801d6f8 <iprintf>
 8015ee2:	2301      	movs	r3, #1
 8015ee4:	e017      	b.n	8015f16 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	685b      	ldr	r3, [r3, #4]
 8015eea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	685a      	ldr	r2, [r3, #4]
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	441a      	add	r2, r3
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	895a      	ldrh	r2, [r3, #10]
 8015efc:	89fb      	ldrh	r3, [r7, #14]
 8015efe:	1ad3      	subs	r3, r2, r3
 8015f00:	b29a      	uxth	r2, r3
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	891a      	ldrh	r2, [r3, #8]
 8015f0a:	89fb      	ldrh	r3, [r7, #14]
 8015f0c:	1ad3      	subs	r3, r2, r3
 8015f0e:	b29a      	uxth	r2, r3
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8015f14:	2300      	movs	r3, #0
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3710      	adds	r7, #16
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}
 8015f1e:	bf00      	nop
 8015f20:	08020a18 	.word	0x08020a18
 8015f24:	08020b9c 	.word	0x08020b9c
 8015f28:	08020a98 	.word	0x08020a98
 8015f2c:	08020ba8 	.word	0x08020ba8

08015f30 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b082      	sub	sp, #8
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
 8015f38:	460b      	mov	r3, r1
 8015f3a:	807b      	strh	r3, [r7, #2]
 8015f3c:	4613      	mov	r3, r2
 8015f3e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8015f40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	da08      	bge.n	8015f5a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015f48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f4c:	425b      	negs	r3, r3
 8015f4e:	4619      	mov	r1, r3
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f7ff ff9b 	bl	8015e8c <pbuf_remove_header>
 8015f56:	4603      	mov	r3, r0
 8015f58:	e007      	b.n	8015f6a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8015f5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f5e:	787a      	ldrb	r2, [r7, #1]
 8015f60:	4619      	mov	r1, r3
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	f7ff ff1a 	bl	8015d9c <pbuf_add_header_impl>
 8015f68:	4603      	mov	r3, r0
  }
}
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	3708      	adds	r7, #8
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}

08015f72 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015f72:	b580      	push	{r7, lr}
 8015f74:	b082      	sub	sp, #8
 8015f76:	af00      	add	r7, sp, #0
 8015f78:	6078      	str	r0, [r7, #4]
 8015f7a:	460b      	mov	r3, r1
 8015f7c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8015f7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f82:	2201      	movs	r2, #1
 8015f84:	4619      	mov	r1, r3
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f7ff ffd2 	bl	8015f30 <pbuf_header_impl>
 8015f8c:	4603      	mov	r3, r0
}
 8015f8e:	4618      	mov	r0, r3
 8015f90:	3708      	adds	r7, #8
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}
	...

08015f98 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b088      	sub	sp, #32
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d10b      	bne.n	8015fbe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d106      	bne.n	8015fba <pbuf_free+0x22>
 8015fac:	4b3b      	ldr	r3, [pc, #236]	; (801609c <pbuf_free+0x104>)
 8015fae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8015fb2:	493b      	ldr	r1, [pc, #236]	; (80160a0 <pbuf_free+0x108>)
 8015fb4:	483b      	ldr	r0, [pc, #236]	; (80160a4 <pbuf_free+0x10c>)
 8015fb6:	f007 fb9f 	bl	801d6f8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	e069      	b.n	8016092 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015fc2:	e062      	b.n	801608a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8015fc4:	f000 fb66 	bl	8016694 <sys_arch_protect>
 8015fc8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	7b9b      	ldrb	r3, [r3, #14]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d106      	bne.n	8015fe0 <pbuf_free+0x48>
 8015fd2:	4b32      	ldr	r3, [pc, #200]	; (801609c <pbuf_free+0x104>)
 8015fd4:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015fd8:	4933      	ldr	r1, [pc, #204]	; (80160a8 <pbuf_free+0x110>)
 8015fda:	4832      	ldr	r0, [pc, #200]	; (80160a4 <pbuf_free+0x10c>)
 8015fdc:	f007 fb8c 	bl	801d6f8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	7b9b      	ldrb	r3, [r3, #14]
 8015fe4:	3b01      	subs	r3, #1
 8015fe6:	b2da      	uxtb	r2, r3
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	739a      	strb	r2, [r3, #14]
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	7b9b      	ldrb	r3, [r3, #14]
 8015ff0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8015ff2:	69b8      	ldr	r0, [r7, #24]
 8015ff4:	f000 fb5c 	bl	80166b0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015ff8:	7dfb      	ldrb	r3, [r7, #23]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d143      	bne.n	8016086 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	7b1b      	ldrb	r3, [r3, #12]
 8016008:	f003 030f 	and.w	r3, r3, #15
 801600c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	7b5b      	ldrb	r3, [r3, #13]
 8016012:	f003 0302 	and.w	r3, r3, #2
 8016016:	2b00      	cmp	r3, #0
 8016018:	d011      	beq.n	801603e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801601e:	68bb      	ldr	r3, [r7, #8]
 8016020:	691b      	ldr	r3, [r3, #16]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d106      	bne.n	8016034 <pbuf_free+0x9c>
 8016026:	4b1d      	ldr	r3, [pc, #116]	; (801609c <pbuf_free+0x104>)
 8016028:	f240 22ff 	movw	r2, #767	; 0x2ff
 801602c:	491f      	ldr	r1, [pc, #124]	; (80160ac <pbuf_free+0x114>)
 801602e:	481d      	ldr	r0, [pc, #116]	; (80160a4 <pbuf_free+0x10c>)
 8016030:	f007 fb62 	bl	801d6f8 <iprintf>
        pc->custom_free_function(p);
 8016034:	68bb      	ldr	r3, [r7, #8]
 8016036:	691b      	ldr	r3, [r3, #16]
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	4798      	blx	r3
 801603c:	e01d      	b.n	801607a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801603e:	7bfb      	ldrb	r3, [r7, #15]
 8016040:	2b02      	cmp	r3, #2
 8016042:	d104      	bne.n	801604e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8016044:	6879      	ldr	r1, [r7, #4]
 8016046:	200c      	movs	r0, #12
 8016048:	f7ff f8fa 	bl	8015240 <memp_free>
 801604c:	e015      	b.n	801607a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801604e:	7bfb      	ldrb	r3, [r7, #15]
 8016050:	2b01      	cmp	r3, #1
 8016052:	d104      	bne.n	801605e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8016054:	6879      	ldr	r1, [r7, #4]
 8016056:	200b      	movs	r0, #11
 8016058:	f7ff f8f2 	bl	8015240 <memp_free>
 801605c:	e00d      	b.n	801607a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801605e:	7bfb      	ldrb	r3, [r7, #15]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d103      	bne.n	801606c <pbuf_free+0xd4>
          mem_free(p);
 8016064:	6878      	ldr	r0, [r7, #4]
 8016066:	f7fe fd2d 	bl	8014ac4 <mem_free>
 801606a:	e006      	b.n	801607a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801606c:	4b0b      	ldr	r3, [pc, #44]	; (801609c <pbuf_free+0x104>)
 801606e:	f240 320f 	movw	r2, #783	; 0x30f
 8016072:	490f      	ldr	r1, [pc, #60]	; (80160b0 <pbuf_free+0x118>)
 8016074:	480b      	ldr	r0, [pc, #44]	; (80160a4 <pbuf_free+0x10c>)
 8016076:	f007 fb3f 	bl	801d6f8 <iprintf>
        }
      }
      count++;
 801607a:	7ffb      	ldrb	r3, [r7, #31]
 801607c:	3301      	adds	r3, #1
 801607e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8016080:	693b      	ldr	r3, [r7, #16]
 8016082:	607b      	str	r3, [r7, #4]
 8016084:	e001      	b.n	801608a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8016086:	2300      	movs	r3, #0
 8016088:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d199      	bne.n	8015fc4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8016090:	7ffb      	ldrb	r3, [r7, #31]
}
 8016092:	4618      	mov	r0, r3
 8016094:	3720      	adds	r7, #32
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}
 801609a:	bf00      	nop
 801609c:	08020a18 	.word	0x08020a18
 80160a0:	08020b9c 	.word	0x08020b9c
 80160a4:	08020a98 	.word	0x08020a98
 80160a8:	08020bc8 	.word	0x08020bc8
 80160ac:	08020be0 	.word	0x08020be0
 80160b0:	08020c04 	.word	0x08020c04

080160b4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80160b4:	b480      	push	{r7}
 80160b6:	b085      	sub	sp, #20
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80160bc:	2300      	movs	r3, #0
 80160be:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80160c0:	e005      	b.n	80160ce <pbuf_clen+0x1a>
    ++len;
 80160c2:	89fb      	ldrh	r3, [r7, #14]
 80160c4:	3301      	adds	r3, #1
 80160c6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d1f6      	bne.n	80160c2 <pbuf_clen+0xe>
  }
  return len;
 80160d4:	89fb      	ldrh	r3, [r7, #14]
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	3714      	adds	r7, #20
 80160da:	46bd      	mov	sp, r7
 80160dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e0:	4770      	bx	lr
	...

080160e4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b084      	sub	sp, #16
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d016      	beq.n	8016120 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80160f2:	f000 facf 	bl	8016694 <sys_arch_protect>
 80160f6:	60f8      	str	r0, [r7, #12]
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	7b9b      	ldrb	r3, [r3, #14]
 80160fc:	3301      	adds	r3, #1
 80160fe:	b2da      	uxtb	r2, r3
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	739a      	strb	r2, [r3, #14]
 8016104:	68f8      	ldr	r0, [r7, #12]
 8016106:	f000 fad3 	bl	80166b0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	7b9b      	ldrb	r3, [r3, #14]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d106      	bne.n	8016120 <pbuf_ref+0x3c>
 8016112:	4b05      	ldr	r3, [pc, #20]	; (8016128 <pbuf_ref+0x44>)
 8016114:	f240 3242 	movw	r2, #834	; 0x342
 8016118:	4904      	ldr	r1, [pc, #16]	; (801612c <pbuf_ref+0x48>)
 801611a:	4805      	ldr	r0, [pc, #20]	; (8016130 <pbuf_ref+0x4c>)
 801611c:	f007 faec 	bl	801d6f8 <iprintf>
  }
}
 8016120:	bf00      	nop
 8016122:	3710      	adds	r7, #16
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}
 8016128:	08020a18 	.word	0x08020a18
 801612c:	08020c18 	.word	0x08020c18
 8016130:	08020a98 	.word	0x08020a98

08016134 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8016134:	b580      	push	{r7, lr}
 8016136:	b084      	sub	sp, #16
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
 801613c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d002      	beq.n	801614a <pbuf_cat+0x16>
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d107      	bne.n	801615a <pbuf_cat+0x26>
 801614a:	4b20      	ldr	r3, [pc, #128]	; (80161cc <pbuf_cat+0x98>)
 801614c:	f240 325a 	movw	r2, #858	; 0x35a
 8016150:	491f      	ldr	r1, [pc, #124]	; (80161d0 <pbuf_cat+0x9c>)
 8016152:	4820      	ldr	r0, [pc, #128]	; (80161d4 <pbuf_cat+0xa0>)
 8016154:	f007 fad0 	bl	801d6f8 <iprintf>
 8016158:	e034      	b.n	80161c4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	60fb      	str	r3, [r7, #12]
 801615e:	e00a      	b.n	8016176 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	891a      	ldrh	r2, [r3, #8]
 8016164:	683b      	ldr	r3, [r7, #0]
 8016166:	891b      	ldrh	r3, [r3, #8]
 8016168:	4413      	add	r3, r2
 801616a:	b29a      	uxth	r2, r3
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	60fb      	str	r3, [r7, #12]
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d1f0      	bne.n	8016160 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	891a      	ldrh	r2, [r3, #8]
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	895b      	ldrh	r3, [r3, #10]
 8016186:	429a      	cmp	r2, r3
 8016188:	d006      	beq.n	8016198 <pbuf_cat+0x64>
 801618a:	4b10      	ldr	r3, [pc, #64]	; (80161cc <pbuf_cat+0x98>)
 801618c:	f240 3262 	movw	r2, #866	; 0x362
 8016190:	4911      	ldr	r1, [pc, #68]	; (80161d8 <pbuf_cat+0xa4>)
 8016192:	4810      	ldr	r0, [pc, #64]	; (80161d4 <pbuf_cat+0xa0>)
 8016194:	f007 fab0 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d006      	beq.n	80161ae <pbuf_cat+0x7a>
 80161a0:	4b0a      	ldr	r3, [pc, #40]	; (80161cc <pbuf_cat+0x98>)
 80161a2:	f240 3263 	movw	r2, #867	; 0x363
 80161a6:	490d      	ldr	r1, [pc, #52]	; (80161dc <pbuf_cat+0xa8>)
 80161a8:	480a      	ldr	r0, [pc, #40]	; (80161d4 <pbuf_cat+0xa0>)
 80161aa:	f007 faa5 	bl	801d6f8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	891a      	ldrh	r2, [r3, #8]
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	891b      	ldrh	r3, [r3, #8]
 80161b6:	4413      	add	r3, r2
 80161b8:	b29a      	uxth	r2, r3
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	683a      	ldr	r2, [r7, #0]
 80161c2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80161c4:	3710      	adds	r7, #16
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd80      	pop	{r7, pc}
 80161ca:	bf00      	nop
 80161cc:	08020a18 	.word	0x08020a18
 80161d0:	08020c2c 	.word	0x08020c2c
 80161d4:	08020a98 	.word	0x08020a98
 80161d8:	08020c64 	.word	0x08020c64
 80161dc:	08020c94 	.word	0x08020c94

080161e0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b082      	sub	sp, #8
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
 80161e8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80161ea:	6839      	ldr	r1, [r7, #0]
 80161ec:	6878      	ldr	r0, [r7, #4]
 80161ee:	f7ff ffa1 	bl	8016134 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80161f2:	6838      	ldr	r0, [r7, #0]
 80161f4:	f7ff ff76 	bl	80160e4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80161f8:	bf00      	nop
 80161fa:	3708      	adds	r7, #8
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd80      	pop	{r7, pc}

08016200 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b086      	sub	sp, #24
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801620a:	2300      	movs	r3, #0
 801620c:	617b      	str	r3, [r7, #20]
 801620e:	2300      	movs	r3, #0
 8016210:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d008      	beq.n	801622a <pbuf_copy+0x2a>
 8016218:	683b      	ldr	r3, [r7, #0]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d005      	beq.n	801622a <pbuf_copy+0x2a>
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	891a      	ldrh	r2, [r3, #8]
 8016222:	683b      	ldr	r3, [r7, #0]
 8016224:	891b      	ldrh	r3, [r3, #8]
 8016226:	429a      	cmp	r2, r3
 8016228:	d209      	bcs.n	801623e <pbuf_copy+0x3e>
 801622a:	4b57      	ldr	r3, [pc, #348]	; (8016388 <pbuf_copy+0x188>)
 801622c:	f240 32ca 	movw	r2, #970	; 0x3ca
 8016230:	4956      	ldr	r1, [pc, #344]	; (801638c <pbuf_copy+0x18c>)
 8016232:	4857      	ldr	r0, [pc, #348]	; (8016390 <pbuf_copy+0x190>)
 8016234:	f007 fa60 	bl	801d6f8 <iprintf>
 8016238:	f06f 030f 	mvn.w	r3, #15
 801623c:	e09f      	b.n	801637e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	895b      	ldrh	r3, [r3, #10]
 8016242:	461a      	mov	r2, r3
 8016244:	697b      	ldr	r3, [r7, #20]
 8016246:	1ad2      	subs	r2, r2, r3
 8016248:	683b      	ldr	r3, [r7, #0]
 801624a:	895b      	ldrh	r3, [r3, #10]
 801624c:	4619      	mov	r1, r3
 801624e:	693b      	ldr	r3, [r7, #16]
 8016250:	1acb      	subs	r3, r1, r3
 8016252:	429a      	cmp	r2, r3
 8016254:	d306      	bcc.n	8016264 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8016256:	683b      	ldr	r3, [r7, #0]
 8016258:	895b      	ldrh	r3, [r3, #10]
 801625a:	461a      	mov	r2, r3
 801625c:	693b      	ldr	r3, [r7, #16]
 801625e:	1ad3      	subs	r3, r2, r3
 8016260:	60fb      	str	r3, [r7, #12]
 8016262:	e005      	b.n	8016270 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	895b      	ldrh	r3, [r3, #10]
 8016268:	461a      	mov	r2, r3
 801626a:	697b      	ldr	r3, [r7, #20]
 801626c:	1ad3      	subs	r3, r2, r3
 801626e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	685a      	ldr	r2, [r3, #4]
 8016274:	697b      	ldr	r3, [r7, #20]
 8016276:	18d0      	adds	r0, r2, r3
 8016278:	683b      	ldr	r3, [r7, #0]
 801627a:	685a      	ldr	r2, [r3, #4]
 801627c:	693b      	ldr	r3, [r7, #16]
 801627e:	4413      	add	r3, r2
 8016280:	68fa      	ldr	r2, [r7, #12]
 8016282:	4619      	mov	r1, r3
 8016284:	f006 fdd1 	bl	801ce2a <memcpy>
    offset_to += len;
 8016288:	697a      	ldr	r2, [r7, #20]
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	4413      	add	r3, r2
 801628e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8016290:	693a      	ldr	r2, [r7, #16]
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	4413      	add	r3, r2
 8016296:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	895b      	ldrh	r3, [r3, #10]
 801629c:	461a      	mov	r2, r3
 801629e:	697b      	ldr	r3, [r7, #20]
 80162a0:	4293      	cmp	r3, r2
 80162a2:	d906      	bls.n	80162b2 <pbuf_copy+0xb2>
 80162a4:	4b38      	ldr	r3, [pc, #224]	; (8016388 <pbuf_copy+0x188>)
 80162a6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80162aa:	493a      	ldr	r1, [pc, #232]	; (8016394 <pbuf_copy+0x194>)
 80162ac:	4838      	ldr	r0, [pc, #224]	; (8016390 <pbuf_copy+0x190>)
 80162ae:	f007 fa23 	bl	801d6f8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80162b2:	683b      	ldr	r3, [r7, #0]
 80162b4:	895b      	ldrh	r3, [r3, #10]
 80162b6:	461a      	mov	r2, r3
 80162b8:	693b      	ldr	r3, [r7, #16]
 80162ba:	4293      	cmp	r3, r2
 80162bc:	d906      	bls.n	80162cc <pbuf_copy+0xcc>
 80162be:	4b32      	ldr	r3, [pc, #200]	; (8016388 <pbuf_copy+0x188>)
 80162c0:	f240 32da 	movw	r2, #986	; 0x3da
 80162c4:	4934      	ldr	r1, [pc, #208]	; (8016398 <pbuf_copy+0x198>)
 80162c6:	4832      	ldr	r0, [pc, #200]	; (8016390 <pbuf_copy+0x190>)
 80162c8:	f007 fa16 	bl	801d6f8 <iprintf>
    if (offset_from >= p_from->len) {
 80162cc:	683b      	ldr	r3, [r7, #0]
 80162ce:	895b      	ldrh	r3, [r3, #10]
 80162d0:	461a      	mov	r2, r3
 80162d2:	693b      	ldr	r3, [r7, #16]
 80162d4:	4293      	cmp	r3, r2
 80162d6:	d304      	bcc.n	80162e2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80162d8:	2300      	movs	r3, #0
 80162da:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80162dc:	683b      	ldr	r3, [r7, #0]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	895b      	ldrh	r3, [r3, #10]
 80162e6:	461a      	mov	r2, r3
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	4293      	cmp	r3, r2
 80162ec:	d114      	bne.n	8016318 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80162ee:	2300      	movs	r3, #0
 80162f0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d10c      	bne.n	8016318 <pbuf_copy+0x118>
 80162fe:	683b      	ldr	r3, [r7, #0]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d009      	beq.n	8016318 <pbuf_copy+0x118>
 8016304:	4b20      	ldr	r3, [pc, #128]	; (8016388 <pbuf_copy+0x188>)
 8016306:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801630a:	4924      	ldr	r1, [pc, #144]	; (801639c <pbuf_copy+0x19c>)
 801630c:	4820      	ldr	r0, [pc, #128]	; (8016390 <pbuf_copy+0x190>)
 801630e:	f007 f9f3 	bl	801d6f8 <iprintf>
 8016312:	f06f 030f 	mvn.w	r3, #15
 8016316:	e032      	b.n	801637e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016318:	683b      	ldr	r3, [r7, #0]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d013      	beq.n	8016346 <pbuf_copy+0x146>
 801631e:	683b      	ldr	r3, [r7, #0]
 8016320:	895a      	ldrh	r2, [r3, #10]
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	891b      	ldrh	r3, [r3, #8]
 8016326:	429a      	cmp	r2, r3
 8016328:	d10d      	bne.n	8016346 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801632a:	683b      	ldr	r3, [r7, #0]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d009      	beq.n	8016346 <pbuf_copy+0x146>
 8016332:	4b15      	ldr	r3, [pc, #84]	; (8016388 <pbuf_copy+0x188>)
 8016334:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8016338:	4919      	ldr	r1, [pc, #100]	; (80163a0 <pbuf_copy+0x1a0>)
 801633a:	4815      	ldr	r0, [pc, #84]	; (8016390 <pbuf_copy+0x190>)
 801633c:	f007 f9dc 	bl	801d6f8 <iprintf>
 8016340:	f06f 0305 	mvn.w	r3, #5
 8016344:	e01b      	b.n	801637e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d013      	beq.n	8016374 <pbuf_copy+0x174>
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	895a      	ldrh	r2, [r3, #10]
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	891b      	ldrh	r3, [r3, #8]
 8016354:	429a      	cmp	r2, r3
 8016356:	d10d      	bne.n	8016374 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d009      	beq.n	8016374 <pbuf_copy+0x174>
 8016360:	4b09      	ldr	r3, [pc, #36]	; (8016388 <pbuf_copy+0x188>)
 8016362:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8016366:	490e      	ldr	r1, [pc, #56]	; (80163a0 <pbuf_copy+0x1a0>)
 8016368:	4809      	ldr	r0, [pc, #36]	; (8016390 <pbuf_copy+0x190>)
 801636a:	f007 f9c5 	bl	801d6f8 <iprintf>
 801636e:	f06f 0305 	mvn.w	r3, #5
 8016372:	e004      	b.n	801637e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016374:	683b      	ldr	r3, [r7, #0]
 8016376:	2b00      	cmp	r3, #0
 8016378:	f47f af61 	bne.w	801623e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801637c:	2300      	movs	r3, #0
}
 801637e:	4618      	mov	r0, r3
 8016380:	3718      	adds	r7, #24
 8016382:	46bd      	mov	sp, r7
 8016384:	bd80      	pop	{r7, pc}
 8016386:	bf00      	nop
 8016388:	08020a18 	.word	0x08020a18
 801638c:	08020ce0 	.word	0x08020ce0
 8016390:	08020a98 	.word	0x08020a98
 8016394:	08020d10 	.word	0x08020d10
 8016398:	08020d28 	.word	0x08020d28
 801639c:	08020d44 	.word	0x08020d44
 80163a0:	08020d54 	.word	0x08020d54

080163a4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b088      	sub	sp, #32
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	60f8      	str	r0, [r7, #12]
 80163ac:	60b9      	str	r1, [r7, #8]
 80163ae:	4611      	mov	r1, r2
 80163b0:	461a      	mov	r2, r3
 80163b2:	460b      	mov	r3, r1
 80163b4:	80fb      	strh	r3, [r7, #6]
 80163b6:	4613      	mov	r3, r2
 80163b8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80163ba:	2300      	movs	r3, #0
 80163bc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80163be:	2300      	movs	r3, #0
 80163c0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d108      	bne.n	80163da <pbuf_copy_partial+0x36>
 80163c8:	4b2b      	ldr	r3, [pc, #172]	; (8016478 <pbuf_copy_partial+0xd4>)
 80163ca:	f240 420a 	movw	r2, #1034	; 0x40a
 80163ce:	492b      	ldr	r1, [pc, #172]	; (801647c <pbuf_copy_partial+0xd8>)
 80163d0:	482b      	ldr	r0, [pc, #172]	; (8016480 <pbuf_copy_partial+0xdc>)
 80163d2:	f007 f991 	bl	801d6f8 <iprintf>
 80163d6:	2300      	movs	r3, #0
 80163d8:	e04a      	b.n	8016470 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80163da:	68bb      	ldr	r3, [r7, #8]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d108      	bne.n	80163f2 <pbuf_copy_partial+0x4e>
 80163e0:	4b25      	ldr	r3, [pc, #148]	; (8016478 <pbuf_copy_partial+0xd4>)
 80163e2:	f240 420b 	movw	r2, #1035	; 0x40b
 80163e6:	4927      	ldr	r1, [pc, #156]	; (8016484 <pbuf_copy_partial+0xe0>)
 80163e8:	4825      	ldr	r0, [pc, #148]	; (8016480 <pbuf_copy_partial+0xdc>)
 80163ea:	f007 f985 	bl	801d6f8 <iprintf>
 80163ee:	2300      	movs	r3, #0
 80163f0:	e03e      	b.n	8016470 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	61fb      	str	r3, [r7, #28]
 80163f6:	e034      	b.n	8016462 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80163f8:	88bb      	ldrh	r3, [r7, #4]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d00a      	beq.n	8016414 <pbuf_copy_partial+0x70>
 80163fe:	69fb      	ldr	r3, [r7, #28]
 8016400:	895b      	ldrh	r3, [r3, #10]
 8016402:	88ba      	ldrh	r2, [r7, #4]
 8016404:	429a      	cmp	r2, r3
 8016406:	d305      	bcc.n	8016414 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8016408:	69fb      	ldr	r3, [r7, #28]
 801640a:	895b      	ldrh	r3, [r3, #10]
 801640c:	88ba      	ldrh	r2, [r7, #4]
 801640e:	1ad3      	subs	r3, r2, r3
 8016410:	80bb      	strh	r3, [r7, #4]
 8016412:	e023      	b.n	801645c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8016414:	69fb      	ldr	r3, [r7, #28]
 8016416:	895a      	ldrh	r2, [r3, #10]
 8016418:	88bb      	ldrh	r3, [r7, #4]
 801641a:	1ad3      	subs	r3, r2, r3
 801641c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801641e:	8b3a      	ldrh	r2, [r7, #24]
 8016420:	88fb      	ldrh	r3, [r7, #6]
 8016422:	429a      	cmp	r2, r3
 8016424:	d901      	bls.n	801642a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8016426:	88fb      	ldrh	r3, [r7, #6]
 8016428:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801642a:	8b7b      	ldrh	r3, [r7, #26]
 801642c:	68ba      	ldr	r2, [r7, #8]
 801642e:	18d0      	adds	r0, r2, r3
 8016430:	69fb      	ldr	r3, [r7, #28]
 8016432:	685a      	ldr	r2, [r3, #4]
 8016434:	88bb      	ldrh	r3, [r7, #4]
 8016436:	4413      	add	r3, r2
 8016438:	8b3a      	ldrh	r2, [r7, #24]
 801643a:	4619      	mov	r1, r3
 801643c:	f006 fcf5 	bl	801ce2a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016440:	8afa      	ldrh	r2, [r7, #22]
 8016442:	8b3b      	ldrh	r3, [r7, #24]
 8016444:	4413      	add	r3, r2
 8016446:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8016448:	8b7a      	ldrh	r2, [r7, #26]
 801644a:	8b3b      	ldrh	r3, [r7, #24]
 801644c:	4413      	add	r3, r2
 801644e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8016450:	88fa      	ldrh	r2, [r7, #6]
 8016452:	8b3b      	ldrh	r3, [r7, #24]
 8016454:	1ad3      	subs	r3, r2, r3
 8016456:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8016458:	2300      	movs	r3, #0
 801645a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801645c:	69fb      	ldr	r3, [r7, #28]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	61fb      	str	r3, [r7, #28]
 8016462:	88fb      	ldrh	r3, [r7, #6]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d002      	beq.n	801646e <pbuf_copy_partial+0xca>
 8016468:	69fb      	ldr	r3, [r7, #28]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d1c4      	bne.n	80163f8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801646e:	8afb      	ldrh	r3, [r7, #22]
}
 8016470:	4618      	mov	r0, r3
 8016472:	3720      	adds	r7, #32
 8016474:	46bd      	mov	sp, r7
 8016476:	bd80      	pop	{r7, pc}
 8016478:	08020a18 	.word	0x08020a18
 801647c:	08020d80 	.word	0x08020d80
 8016480:	08020a98 	.word	0x08020a98
 8016484:	08020da0 	.word	0x08020da0

08016488 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b084      	sub	sp, #16
 801648c:	af00      	add	r7, sp, #0
 801648e:	4603      	mov	r3, r0
 8016490:	603a      	str	r2, [r7, #0]
 8016492:	71fb      	strb	r3, [r7, #7]
 8016494:	460b      	mov	r3, r1
 8016496:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8016498:	683b      	ldr	r3, [r7, #0]
 801649a:	8919      	ldrh	r1, [r3, #8]
 801649c:	88ba      	ldrh	r2, [r7, #4]
 801649e:	79fb      	ldrb	r3, [r7, #7]
 80164a0:	4618      	mov	r0, r3
 80164a2:	f7ff fa99 	bl	80159d8 <pbuf_alloc>
 80164a6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d101      	bne.n	80164b2 <pbuf_clone+0x2a>
    return NULL;
 80164ae:	2300      	movs	r3, #0
 80164b0:	e011      	b.n	80164d6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80164b2:	6839      	ldr	r1, [r7, #0]
 80164b4:	68f8      	ldr	r0, [r7, #12]
 80164b6:	f7ff fea3 	bl	8016200 <pbuf_copy>
 80164ba:	4603      	mov	r3, r0
 80164bc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80164be:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d006      	beq.n	80164d4 <pbuf_clone+0x4c>
 80164c6:	4b06      	ldr	r3, [pc, #24]	; (80164e0 <pbuf_clone+0x58>)
 80164c8:	f240 5224 	movw	r2, #1316	; 0x524
 80164cc:	4905      	ldr	r1, [pc, #20]	; (80164e4 <pbuf_clone+0x5c>)
 80164ce:	4806      	ldr	r0, [pc, #24]	; (80164e8 <pbuf_clone+0x60>)
 80164d0:	f007 f912 	bl	801d6f8 <iprintf>
  return q;
 80164d4:	68fb      	ldr	r3, [r7, #12]
}
 80164d6:	4618      	mov	r0, r3
 80164d8:	3710      	adds	r7, #16
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}
 80164de:	bf00      	nop
 80164e0:	08020a18 	.word	0x08020a18
 80164e4:	08020eac 	.word	0x08020eac
 80164e8:	08020a98 	.word	0x08020a98

080164ec <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b082      	sub	sp, #8
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
 80164f4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80164f6:	683b      	ldr	r3, [r7, #0]
 80164f8:	2200      	movs	r2, #0
 80164fa:	2104      	movs	r1, #4
 80164fc:	4618      	mov	r0, r3
 80164fe:	f7f6 fc8b 	bl	800ce18 <osMessageQueueNew>
 8016502:	4602      	mov	r2, r0
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d102      	bne.n	8016516 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016514:	e000      	b.n	8016518 <sys_mbox_new+0x2c>

  return ERR_OK;
 8016516:	2300      	movs	r3, #0
}
 8016518:	4618      	mov	r0, r3
 801651a:	3708      	adds	r7, #8
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}

08016520 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b084      	sub	sp, #16
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
 8016528:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	6818      	ldr	r0, [r3, #0]
 801652e:	4639      	mov	r1, r7
 8016530:	2300      	movs	r3, #0
 8016532:	2200      	movs	r2, #0
 8016534:	f7f6 fcf6 	bl	800cf24 <osMessageQueuePut>
 8016538:	4603      	mov	r3, r0
 801653a:	2b00      	cmp	r3, #0
 801653c:	d102      	bne.n	8016544 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801653e:	2300      	movs	r3, #0
 8016540:	73fb      	strb	r3, [r7, #15]
 8016542:	e001      	b.n	8016548 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016544:	23ff      	movs	r3, #255	; 0xff
 8016546:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016548:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801654c:	4618      	mov	r0, r3
 801654e:	3710      	adds	r7, #16
 8016550:	46bd      	mov	sp, r7
 8016552:	bd80      	pop	{r7, pc}

08016554 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b086      	sub	sp, #24
 8016558:	af00      	add	r7, sp, #0
 801655a:	60f8      	str	r0, [r7, #12]
 801655c:	60b9      	str	r1, [r7, #8]
 801655e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016560:	f7f6 f8ba 	bl	800c6d8 <osKernelGetTickCount>
 8016564:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d013      	beq.n	8016594 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	6818      	ldr	r0, [r3, #0]
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2200      	movs	r2, #0
 8016574:	68b9      	ldr	r1, [r7, #8]
 8016576:	f7f6 fd49 	bl	800d00c <osMessageQueueGet>
 801657a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801657c:	693b      	ldr	r3, [r7, #16]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d105      	bne.n	801658e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016582:	f7f6 f8a9 	bl	800c6d8 <osKernelGetTickCount>
 8016586:	4602      	mov	r2, r0
 8016588:	697b      	ldr	r3, [r7, #20]
 801658a:	1ad3      	subs	r3, r2, r3
 801658c:	e00f      	b.n	80165ae <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801658e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016592:	e00c      	b.n	80165ae <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	6818      	ldr	r0, [r3, #0]
 8016598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801659c:	2200      	movs	r2, #0
 801659e:	68b9      	ldr	r1, [r7, #8]
 80165a0:	f7f6 fd34 	bl	800d00c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80165a4:	f7f6 f898 	bl	800c6d8 <osKernelGetTickCount>
 80165a8:	4602      	mov	r2, r0
 80165aa:	697b      	ldr	r3, [r7, #20]
 80165ac:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80165ae:	4618      	mov	r0, r3
 80165b0:	3718      	adds	r7, #24
 80165b2:	46bd      	mov	sp, r7
 80165b4:	bd80      	pop	{r7, pc}

080165b6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80165b6:	b480      	push	{r7}
 80165b8:	b083      	sub	sp, #12
 80165ba:	af00      	add	r7, sp, #0
 80165bc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d101      	bne.n	80165ca <sys_mbox_valid+0x14>
    return 0;
 80165c6:	2300      	movs	r3, #0
 80165c8:	e000      	b.n	80165cc <sys_mbox_valid+0x16>
  else
    return 1;
 80165ca:	2301      	movs	r3, #1
}
 80165cc:	4618      	mov	r0, r3
 80165ce:	370c      	adds	r7, #12
 80165d0:	46bd      	mov	sp, r7
 80165d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d6:	4770      	bx	lr

080165d8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80165dc:	2000      	movs	r0, #0
 80165de:	f7f6 f977 	bl	800c8d0 <osMutexNew>
 80165e2:	4602      	mov	r2, r0
 80165e4:	4b01      	ldr	r3, [pc, #4]	; (80165ec <sys_init+0x14>)
 80165e6:	601a      	str	r2, [r3, #0]
#endif
}
 80165e8:	bf00      	nop
 80165ea:	bd80      	pop	{r7, pc}
 80165ec:	2000ba5c 	.word	0x2000ba5c

080165f0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b082      	sub	sp, #8
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80165f8:	2000      	movs	r0, #0
 80165fa:	f7f6 f969 	bl	800c8d0 <osMutexNew>
 80165fe:	4602      	mov	r2, r0
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d102      	bne.n	8016612 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801660c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016610:	e000      	b.n	8016614 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016612:	2300      	movs	r3, #0
}
 8016614:	4618      	mov	r0, r3
 8016616:	3708      	adds	r7, #8
 8016618:	46bd      	mov	sp, r7
 801661a:	bd80      	pop	{r7, pc}

0801661c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801661c:	b580      	push	{r7, lr}
 801661e:	b082      	sub	sp, #8
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801662c:	4618      	mov	r0, r3
 801662e:	f7f6 f9e9 	bl	800ca04 <osMutexAcquire>
#endif
}
 8016632:	bf00      	nop
 8016634:	3708      	adds	r7, #8
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}

0801663a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801663a:	b580      	push	{r7, lr}
 801663c:	b082      	sub	sp, #8
 801663e:	af00      	add	r7, sp, #0
 8016640:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	4618      	mov	r0, r3
 8016648:	f7f6 fa3a 	bl	800cac0 <osMutexRelease>
}
 801664c:	bf00      	nop
 801664e:	3708      	adds	r7, #8
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}

08016654 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b08e      	sub	sp, #56	; 0x38
 8016658:	af00      	add	r7, sp, #0
 801665a:	60f8      	str	r0, [r7, #12]
 801665c:	60b9      	str	r1, [r7, #8]
 801665e:	607a      	str	r2, [r7, #4]
 8016660:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016662:	f107 0314 	add.w	r3, r7, #20
 8016666:	2224      	movs	r2, #36	; 0x24
 8016668:	2100      	movs	r1, #0
 801666a:	4618      	mov	r0, r3
 801666c:	f006 fc01 	bl	801ce72 <memset>
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	617b      	str	r3, [r7, #20]
 8016674:	683b      	ldr	r3, [r7, #0]
 8016676:	62bb      	str	r3, [r7, #40]	; 0x28
 8016678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801667a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801667c:	f107 0314 	add.w	r3, r7, #20
 8016680:	461a      	mov	r2, r3
 8016682:	6879      	ldr	r1, [r7, #4]
 8016684:	68b8      	ldr	r0, [r7, #8]
 8016686:	f7f6 f84f 	bl	800c728 <osThreadNew>
 801668a:	4603      	mov	r3, r0
#endif
}
 801668c:	4618      	mov	r0, r3
 801668e:	3738      	adds	r7, #56	; 0x38
 8016690:	46bd      	mov	sp, r7
 8016692:	bd80      	pop	{r7, pc}

08016694 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016698:	4b04      	ldr	r3, [pc, #16]	; (80166ac <sys_arch_protect+0x18>)
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80166a0:	4618      	mov	r0, r3
 80166a2:	f7f6 f9af 	bl	800ca04 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80166a6:	2301      	movs	r3, #1
}
 80166a8:	4618      	mov	r0, r3
 80166aa:	bd80      	pop	{r7, pc}
 80166ac:	2000ba5c 	.word	0x2000ba5c

080166b0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b082      	sub	sp, #8
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80166b8:	4b04      	ldr	r3, [pc, #16]	; (80166cc <sys_arch_unprotect+0x1c>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	4618      	mov	r0, r3
 80166be:	f7f6 f9ff 	bl	800cac0 <osMutexRelease>
}
 80166c2:	bf00      	nop
 80166c4:	3708      	adds	r7, #8
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd80      	pop	{r7, pc}
 80166ca:	bf00      	nop
 80166cc:	2000ba5c 	.word	0x2000ba5c

080166d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80166d4:	f007 f828 	bl	801d728 <rand>
 80166d8:	4603      	mov	r3, r0
 80166da:	b29b      	uxth	r3, r3
 80166dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80166e0:	b29b      	uxth	r3, r3
 80166e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80166e6:	b29a      	uxth	r2, r3
 80166e8:	4b01      	ldr	r3, [pc, #4]	; (80166f0 <tcp_init+0x20>)
 80166ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80166ec:	bf00      	nop
 80166ee:	bd80      	pop	{r7, pc}
 80166f0:	2000002c 	.word	0x2000002c

080166f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b082      	sub	sp, #8
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	7d1b      	ldrb	r3, [r3, #20]
 8016700:	2b01      	cmp	r3, #1
 8016702:	d105      	bne.n	8016710 <tcp_free+0x1c>
 8016704:	4b06      	ldr	r3, [pc, #24]	; (8016720 <tcp_free+0x2c>)
 8016706:	22d4      	movs	r2, #212	; 0xd4
 8016708:	4906      	ldr	r1, [pc, #24]	; (8016724 <tcp_free+0x30>)
 801670a:	4807      	ldr	r0, [pc, #28]	; (8016728 <tcp_free+0x34>)
 801670c:	f006 fff4 	bl	801d6f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016710:	6879      	ldr	r1, [r7, #4]
 8016712:	2001      	movs	r0, #1
 8016714:	f7fe fd94 	bl	8015240 <memp_free>
}
 8016718:	bf00      	nop
 801671a:	3708      	adds	r7, #8
 801671c:	46bd      	mov	sp, r7
 801671e:	bd80      	pop	{r7, pc}
 8016720:	08020f38 	.word	0x08020f38
 8016724:	08020f84 	.word	0x08020f84
 8016728:	08020f98 	.word	0x08020f98

0801672c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b082      	sub	sp, #8
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	7d1b      	ldrb	r3, [r3, #20]
 8016738:	2b01      	cmp	r3, #1
 801673a:	d105      	bne.n	8016748 <tcp_free_listen+0x1c>
 801673c:	4b06      	ldr	r3, [pc, #24]	; (8016758 <tcp_free_listen+0x2c>)
 801673e:	22df      	movs	r2, #223	; 0xdf
 8016740:	4906      	ldr	r1, [pc, #24]	; (801675c <tcp_free_listen+0x30>)
 8016742:	4807      	ldr	r0, [pc, #28]	; (8016760 <tcp_free_listen+0x34>)
 8016744:	f006 ffd8 	bl	801d6f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016748:	6879      	ldr	r1, [r7, #4]
 801674a:	2002      	movs	r0, #2
 801674c:	f7fe fd78 	bl	8015240 <memp_free>
}
 8016750:	bf00      	nop
 8016752:	3708      	adds	r7, #8
 8016754:	46bd      	mov	sp, r7
 8016756:	bd80      	pop	{r7, pc}
 8016758:	08020f38 	.word	0x08020f38
 801675c:	08020fc0 	.word	0x08020fc0
 8016760:	08020f98 	.word	0x08020f98

08016764 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8016768:	f000 fe98 	bl	801749c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801676c:	4b07      	ldr	r3, [pc, #28]	; (801678c <tcp_tmr+0x28>)
 801676e:	781b      	ldrb	r3, [r3, #0]
 8016770:	3301      	adds	r3, #1
 8016772:	b2da      	uxtb	r2, r3
 8016774:	4b05      	ldr	r3, [pc, #20]	; (801678c <tcp_tmr+0x28>)
 8016776:	701a      	strb	r2, [r3, #0]
 8016778:	4b04      	ldr	r3, [pc, #16]	; (801678c <tcp_tmr+0x28>)
 801677a:	781b      	ldrb	r3, [r3, #0]
 801677c:	f003 0301 	and.w	r3, r3, #1
 8016780:	2b00      	cmp	r3, #0
 8016782:	d001      	beq.n	8016788 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016784:	f000 fb4c 	bl	8016e20 <tcp_slowtmr>
  }
}
 8016788:	bf00      	nop
 801678a:	bd80      	pop	{r7, pc}
 801678c:	20007719 	.word	0x20007719

08016790 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b084      	sub	sp, #16
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
 8016798:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801679a:	683b      	ldr	r3, [r7, #0]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d105      	bne.n	80167ac <tcp_remove_listener+0x1c>
 80167a0:	4b0d      	ldr	r3, [pc, #52]	; (80167d8 <tcp_remove_listener+0x48>)
 80167a2:	22ff      	movs	r2, #255	; 0xff
 80167a4:	490d      	ldr	r1, [pc, #52]	; (80167dc <tcp_remove_listener+0x4c>)
 80167a6:	480e      	ldr	r0, [pc, #56]	; (80167e0 <tcp_remove_listener+0x50>)
 80167a8:	f006 ffa6 	bl	801d6f8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	60fb      	str	r3, [r7, #12]
 80167b0:	e00a      	b.n	80167c8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80167b6:	683a      	ldr	r2, [r7, #0]
 80167b8:	429a      	cmp	r2, r3
 80167ba:	d102      	bne.n	80167c2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	2200      	movs	r2, #0
 80167c0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	68db      	ldr	r3, [r3, #12]
 80167c6:	60fb      	str	r3, [r7, #12]
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d1f1      	bne.n	80167b2 <tcp_remove_listener+0x22>
    }
  }
}
 80167ce:	bf00      	nop
 80167d0:	3710      	adds	r7, #16
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}
 80167d6:	bf00      	nop
 80167d8:	08020f38 	.word	0x08020f38
 80167dc:	08020fdc 	.word	0x08020fdc
 80167e0:	08020f98 	.word	0x08020f98

080167e4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b084      	sub	sp, #16
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d106      	bne.n	8016800 <tcp_listen_closed+0x1c>
 80167f2:	4b14      	ldr	r3, [pc, #80]	; (8016844 <tcp_listen_closed+0x60>)
 80167f4:	f240 1211 	movw	r2, #273	; 0x111
 80167f8:	4913      	ldr	r1, [pc, #76]	; (8016848 <tcp_listen_closed+0x64>)
 80167fa:	4814      	ldr	r0, [pc, #80]	; (801684c <tcp_listen_closed+0x68>)
 80167fc:	f006 ff7c 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	7d1b      	ldrb	r3, [r3, #20]
 8016804:	2b01      	cmp	r3, #1
 8016806:	d006      	beq.n	8016816 <tcp_listen_closed+0x32>
 8016808:	4b0e      	ldr	r3, [pc, #56]	; (8016844 <tcp_listen_closed+0x60>)
 801680a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801680e:	4910      	ldr	r1, [pc, #64]	; (8016850 <tcp_listen_closed+0x6c>)
 8016810:	480e      	ldr	r0, [pc, #56]	; (801684c <tcp_listen_closed+0x68>)
 8016812:	f006 ff71 	bl	801d6f8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016816:	2301      	movs	r3, #1
 8016818:	60fb      	str	r3, [r7, #12]
 801681a:	e00b      	b.n	8016834 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801681c:	4a0d      	ldr	r2, [pc, #52]	; (8016854 <tcp_listen_closed+0x70>)
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	6879      	ldr	r1, [r7, #4]
 8016828:	4618      	mov	r0, r3
 801682a:	f7ff ffb1 	bl	8016790 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	3301      	adds	r3, #1
 8016832:	60fb      	str	r3, [r7, #12]
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	2b03      	cmp	r3, #3
 8016838:	d9f0      	bls.n	801681c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801683a:	bf00      	nop
 801683c:	3710      	adds	r7, #16
 801683e:	46bd      	mov	sp, r7
 8016840:	bd80      	pop	{r7, pc}
 8016842:	bf00      	nop
 8016844:	08020f38 	.word	0x08020f38
 8016848:	08021004 	.word	0x08021004
 801684c:	08020f98 	.word	0x08020f98
 8016850:	08021010 	.word	0x08021010
 8016854:	08022a9c 	.word	0x08022a9c

08016858 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8016858:	b5b0      	push	{r4, r5, r7, lr}
 801685a:	b088      	sub	sp, #32
 801685c:	af04      	add	r7, sp, #16
 801685e:	6078      	str	r0, [r7, #4]
 8016860:	460b      	mov	r3, r1
 8016862:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d106      	bne.n	8016878 <tcp_close_shutdown+0x20>
 801686a:	4b61      	ldr	r3, [pc, #388]	; (80169f0 <tcp_close_shutdown+0x198>)
 801686c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8016870:	4960      	ldr	r1, [pc, #384]	; (80169f4 <tcp_close_shutdown+0x19c>)
 8016872:	4861      	ldr	r0, [pc, #388]	; (80169f8 <tcp_close_shutdown+0x1a0>)
 8016874:	f006 ff40 	bl	801d6f8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8016878:	78fb      	ldrb	r3, [r7, #3]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d066      	beq.n	801694c <tcp_close_shutdown+0xf4>
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	7d1b      	ldrb	r3, [r3, #20]
 8016882:	2b04      	cmp	r3, #4
 8016884:	d003      	beq.n	801688e <tcp_close_shutdown+0x36>
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	7d1b      	ldrb	r3, [r3, #20]
 801688a:	2b07      	cmp	r3, #7
 801688c:	d15e      	bne.n	801694c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016892:	2b00      	cmp	r3, #0
 8016894:	d104      	bne.n	80168a0 <tcp_close_shutdown+0x48>
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801689a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801689e:	d055      	beq.n	801694c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	8b5b      	ldrh	r3, [r3, #26]
 80168a4:	f003 0310 	and.w	r3, r3, #16
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d106      	bne.n	80168ba <tcp_close_shutdown+0x62>
 80168ac:	4b50      	ldr	r3, [pc, #320]	; (80169f0 <tcp_close_shutdown+0x198>)
 80168ae:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80168b2:	4952      	ldr	r1, [pc, #328]	; (80169fc <tcp_close_shutdown+0x1a4>)
 80168b4:	4850      	ldr	r0, [pc, #320]	; (80169f8 <tcp_close_shutdown+0x1a0>)
 80168b6:	f006 ff1f 	bl	801d6f8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80168c2:	687d      	ldr	r5, [r7, #4]
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	3304      	adds	r3, #4
 80168c8:	687a      	ldr	r2, [r7, #4]
 80168ca:	8ad2      	ldrh	r2, [r2, #22]
 80168cc:	6879      	ldr	r1, [r7, #4]
 80168ce:	8b09      	ldrh	r1, [r1, #24]
 80168d0:	9102      	str	r1, [sp, #8]
 80168d2:	9201      	str	r2, [sp, #4]
 80168d4:	9300      	str	r3, [sp, #0]
 80168d6:	462b      	mov	r3, r5
 80168d8:	4622      	mov	r2, r4
 80168da:	4601      	mov	r1, r0
 80168dc:	6878      	ldr	r0, [r7, #4]
 80168de:	f004 fe91 	bl	801b604 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80168e2:	6878      	ldr	r0, [r7, #4]
 80168e4:	f001 f8ba 	bl	8017a5c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80168e8:	4b45      	ldr	r3, [pc, #276]	; (8016a00 <tcp_close_shutdown+0x1a8>)
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	687a      	ldr	r2, [r7, #4]
 80168ee:	429a      	cmp	r2, r3
 80168f0:	d105      	bne.n	80168fe <tcp_close_shutdown+0xa6>
 80168f2:	4b43      	ldr	r3, [pc, #268]	; (8016a00 <tcp_close_shutdown+0x1a8>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	68db      	ldr	r3, [r3, #12]
 80168f8:	4a41      	ldr	r2, [pc, #260]	; (8016a00 <tcp_close_shutdown+0x1a8>)
 80168fa:	6013      	str	r3, [r2, #0]
 80168fc:	e013      	b.n	8016926 <tcp_close_shutdown+0xce>
 80168fe:	4b40      	ldr	r3, [pc, #256]	; (8016a00 <tcp_close_shutdown+0x1a8>)
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	60fb      	str	r3, [r7, #12]
 8016904:	e00c      	b.n	8016920 <tcp_close_shutdown+0xc8>
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	68db      	ldr	r3, [r3, #12]
 801690a:	687a      	ldr	r2, [r7, #4]
 801690c:	429a      	cmp	r2, r3
 801690e:	d104      	bne.n	801691a <tcp_close_shutdown+0xc2>
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	68da      	ldr	r2, [r3, #12]
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	60da      	str	r2, [r3, #12]
 8016918:	e005      	b.n	8016926 <tcp_close_shutdown+0xce>
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	68db      	ldr	r3, [r3, #12]
 801691e:	60fb      	str	r3, [r7, #12]
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d1ef      	bne.n	8016906 <tcp_close_shutdown+0xae>
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	2200      	movs	r2, #0
 801692a:	60da      	str	r2, [r3, #12]
 801692c:	4b35      	ldr	r3, [pc, #212]	; (8016a04 <tcp_close_shutdown+0x1ac>)
 801692e:	2201      	movs	r2, #1
 8016930:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8016932:	4b35      	ldr	r3, [pc, #212]	; (8016a08 <tcp_close_shutdown+0x1b0>)
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	687a      	ldr	r2, [r7, #4]
 8016938:	429a      	cmp	r2, r3
 801693a:	d102      	bne.n	8016942 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801693c:	f003 fd4c 	bl	801a3d8 <tcp_trigger_input_pcb_close>
 8016940:	e002      	b.n	8016948 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	f7ff fed6 	bl	80166f4 <tcp_free>
      }
      return ERR_OK;
 8016948:	2300      	movs	r3, #0
 801694a:	e04d      	b.n	80169e8 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	7d1b      	ldrb	r3, [r3, #20]
 8016950:	2b01      	cmp	r3, #1
 8016952:	d02d      	beq.n	80169b0 <tcp_close_shutdown+0x158>
 8016954:	2b02      	cmp	r3, #2
 8016956:	d036      	beq.n	80169c6 <tcp_close_shutdown+0x16e>
 8016958:	2b00      	cmp	r3, #0
 801695a:	d13f      	bne.n	80169dc <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	8adb      	ldrh	r3, [r3, #22]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d021      	beq.n	80169a8 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016964:	4b29      	ldr	r3, [pc, #164]	; (8016a0c <tcp_close_shutdown+0x1b4>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	687a      	ldr	r2, [r7, #4]
 801696a:	429a      	cmp	r2, r3
 801696c:	d105      	bne.n	801697a <tcp_close_shutdown+0x122>
 801696e:	4b27      	ldr	r3, [pc, #156]	; (8016a0c <tcp_close_shutdown+0x1b4>)
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	68db      	ldr	r3, [r3, #12]
 8016974:	4a25      	ldr	r2, [pc, #148]	; (8016a0c <tcp_close_shutdown+0x1b4>)
 8016976:	6013      	str	r3, [r2, #0]
 8016978:	e013      	b.n	80169a2 <tcp_close_shutdown+0x14a>
 801697a:	4b24      	ldr	r3, [pc, #144]	; (8016a0c <tcp_close_shutdown+0x1b4>)
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	60bb      	str	r3, [r7, #8]
 8016980:	e00c      	b.n	801699c <tcp_close_shutdown+0x144>
 8016982:	68bb      	ldr	r3, [r7, #8]
 8016984:	68db      	ldr	r3, [r3, #12]
 8016986:	687a      	ldr	r2, [r7, #4]
 8016988:	429a      	cmp	r2, r3
 801698a:	d104      	bne.n	8016996 <tcp_close_shutdown+0x13e>
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	68da      	ldr	r2, [r3, #12]
 8016990:	68bb      	ldr	r3, [r7, #8]
 8016992:	60da      	str	r2, [r3, #12]
 8016994:	e005      	b.n	80169a2 <tcp_close_shutdown+0x14a>
 8016996:	68bb      	ldr	r3, [r7, #8]
 8016998:	68db      	ldr	r3, [r3, #12]
 801699a:	60bb      	str	r3, [r7, #8]
 801699c:	68bb      	ldr	r3, [r7, #8]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d1ef      	bne.n	8016982 <tcp_close_shutdown+0x12a>
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	2200      	movs	r2, #0
 80169a6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	f7ff fea3 	bl	80166f4 <tcp_free>
      break;
 80169ae:	e01a      	b.n	80169e6 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 80169b0:	6878      	ldr	r0, [r7, #4]
 80169b2:	f7ff ff17 	bl	80167e4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80169b6:	6879      	ldr	r1, [r7, #4]
 80169b8:	4815      	ldr	r0, [pc, #84]	; (8016a10 <tcp_close_shutdown+0x1b8>)
 80169ba:	f001 f89f 	bl	8017afc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80169be:	6878      	ldr	r0, [r7, #4]
 80169c0:	f7ff feb4 	bl	801672c <tcp_free_listen>
      break;
 80169c4:	e00f      	b.n	80169e6 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80169c6:	6879      	ldr	r1, [r7, #4]
 80169c8:	480d      	ldr	r0, [pc, #52]	; (8016a00 <tcp_close_shutdown+0x1a8>)
 80169ca:	f001 f897 	bl	8017afc <tcp_pcb_remove>
 80169ce:	4b0d      	ldr	r3, [pc, #52]	; (8016a04 <tcp_close_shutdown+0x1ac>)
 80169d0:	2201      	movs	r2, #1
 80169d2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80169d4:	6878      	ldr	r0, [r7, #4]
 80169d6:	f7ff fe8d 	bl	80166f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80169da:	e004      	b.n	80169e6 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 80169dc:	6878      	ldr	r0, [r7, #4]
 80169de:	f000 f819 	bl	8016a14 <tcp_close_shutdown_fin>
 80169e2:	4603      	mov	r3, r0
 80169e4:	e000      	b.n	80169e8 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 80169e6:	2300      	movs	r3, #0
}
 80169e8:	4618      	mov	r0, r3
 80169ea:	3710      	adds	r7, #16
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bdb0      	pop	{r4, r5, r7, pc}
 80169f0:	08020f38 	.word	0x08020f38
 80169f4:	08021028 	.word	0x08021028
 80169f8:	08020f98 	.word	0x08020f98
 80169fc:	08021048 	.word	0x08021048
 8016a00:	2000ba64 	.word	0x2000ba64
 8016a04:	2000ba60 	.word	0x2000ba60
 8016a08:	2000ba78 	.word	0x2000ba78
 8016a0c:	2000ba70 	.word	0x2000ba70
 8016a10:	2000ba6c 	.word	0x2000ba6c

08016a14 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b084      	sub	sp, #16
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d106      	bne.n	8016a30 <tcp_close_shutdown_fin+0x1c>
 8016a22:	4b2c      	ldr	r3, [pc, #176]	; (8016ad4 <tcp_close_shutdown_fin+0xc0>)
 8016a24:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8016a28:	492b      	ldr	r1, [pc, #172]	; (8016ad8 <tcp_close_shutdown_fin+0xc4>)
 8016a2a:	482c      	ldr	r0, [pc, #176]	; (8016adc <tcp_close_shutdown_fin+0xc8>)
 8016a2c:	f006 fe64 	bl	801d6f8 <iprintf>

  switch (pcb->state) {
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	7d1b      	ldrb	r3, [r3, #20]
 8016a34:	2b04      	cmp	r3, #4
 8016a36:	d010      	beq.n	8016a5a <tcp_close_shutdown_fin+0x46>
 8016a38:	2b07      	cmp	r3, #7
 8016a3a:	d01b      	beq.n	8016a74 <tcp_close_shutdown_fin+0x60>
 8016a3c:	2b03      	cmp	r3, #3
 8016a3e:	d126      	bne.n	8016a8e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f003 fedb 	bl	801a7fc <tcp_send_fin>
 8016a46:	4603      	mov	r3, r0
 8016a48:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d11f      	bne.n	8016a92 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	2205      	movs	r2, #5
 8016a56:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016a58:	e01b      	b.n	8016a92 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8016a5a:	6878      	ldr	r0, [r7, #4]
 8016a5c:	f003 fece 	bl	801a7fc <tcp_send_fin>
 8016a60:	4603      	mov	r3, r0
 8016a62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d114      	bne.n	8016a96 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	2205      	movs	r2, #5
 8016a70:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016a72:	e010      	b.n	8016a96 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8016a74:	6878      	ldr	r0, [r7, #4]
 8016a76:	f003 fec1 	bl	801a7fc <tcp_send_fin>
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d109      	bne.n	8016a9a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	2209      	movs	r2, #9
 8016a8a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016a8c:	e005      	b.n	8016a9a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8016a8e:	2300      	movs	r3, #0
 8016a90:	e01c      	b.n	8016acc <tcp_close_shutdown_fin+0xb8>
      break;
 8016a92:	bf00      	nop
 8016a94:	e002      	b.n	8016a9c <tcp_close_shutdown_fin+0x88>
      break;
 8016a96:	bf00      	nop
 8016a98:	e000      	b.n	8016a9c <tcp_close_shutdown_fin+0x88>
      break;
 8016a9a:	bf00      	nop
  }

  if (err == ERR_OK) {
 8016a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d103      	bne.n	8016aac <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8016aa4:	6878      	ldr	r0, [r7, #4]
 8016aa6:	f003 ffe7 	bl	801aa78 <tcp_output>
 8016aaa:	e00d      	b.n	8016ac8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8016aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016ab4:	d108      	bne.n	8016ac8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	8b5b      	ldrh	r3, [r3, #26]
 8016aba:	f043 0308 	orr.w	r3, r3, #8
 8016abe:	b29a      	uxth	r2, r3
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	e001      	b.n	8016acc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8016ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016acc:	4618      	mov	r0, r3
 8016ace:	3710      	adds	r7, #16
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	bd80      	pop	{r7, pc}
 8016ad4:	08020f38 	.word	0x08020f38
 8016ad8:	08021004 	.word	0x08021004
 8016adc:	08020f98 	.word	0x08020f98

08016ae0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b082      	sub	sp, #8
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d109      	bne.n	8016b02 <tcp_close+0x22>
 8016aee:	4b0f      	ldr	r3, [pc, #60]	; (8016b2c <tcp_close+0x4c>)
 8016af0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8016af4:	490e      	ldr	r1, [pc, #56]	; (8016b30 <tcp_close+0x50>)
 8016af6:	480f      	ldr	r0, [pc, #60]	; (8016b34 <tcp_close+0x54>)
 8016af8:	f006 fdfe 	bl	801d6f8 <iprintf>
 8016afc:	f06f 030f 	mvn.w	r3, #15
 8016b00:	e00f      	b.n	8016b22 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	7d1b      	ldrb	r3, [r3, #20]
 8016b06:	2b01      	cmp	r3, #1
 8016b08:	d006      	beq.n	8016b18 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	8b5b      	ldrh	r3, [r3, #26]
 8016b0e:	f043 0310 	orr.w	r3, r3, #16
 8016b12:	b29a      	uxth	r2, r3
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016b18:	2101      	movs	r1, #1
 8016b1a:	6878      	ldr	r0, [r7, #4]
 8016b1c:	f7ff fe9c 	bl	8016858 <tcp_close_shutdown>
 8016b20:	4603      	mov	r3, r0
}
 8016b22:	4618      	mov	r0, r3
 8016b24:	3708      	adds	r7, #8
 8016b26:	46bd      	mov	sp, r7
 8016b28:	bd80      	pop	{r7, pc}
 8016b2a:	bf00      	nop
 8016b2c:	08020f38 	.word	0x08020f38
 8016b30:	08021064 	.word	0x08021064
 8016b34:	08020f98 	.word	0x08020f98

08016b38 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b08e      	sub	sp, #56	; 0x38
 8016b3c:	af04      	add	r7, sp, #16
 8016b3e:	6078      	str	r0, [r7, #4]
 8016b40:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d107      	bne.n	8016b58 <tcp_abandon+0x20>
 8016b48:	4b52      	ldr	r3, [pc, #328]	; (8016c94 <tcp_abandon+0x15c>)
 8016b4a:	f240 223d 	movw	r2, #573	; 0x23d
 8016b4e:	4952      	ldr	r1, [pc, #328]	; (8016c98 <tcp_abandon+0x160>)
 8016b50:	4852      	ldr	r0, [pc, #328]	; (8016c9c <tcp_abandon+0x164>)
 8016b52:	f006 fdd1 	bl	801d6f8 <iprintf>
 8016b56:	e099      	b.n	8016c8c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	7d1b      	ldrb	r3, [r3, #20]
 8016b5c:	2b01      	cmp	r3, #1
 8016b5e:	d106      	bne.n	8016b6e <tcp_abandon+0x36>
 8016b60:	4b4c      	ldr	r3, [pc, #304]	; (8016c94 <tcp_abandon+0x15c>)
 8016b62:	f240 2241 	movw	r2, #577	; 0x241
 8016b66:	494e      	ldr	r1, [pc, #312]	; (8016ca0 <tcp_abandon+0x168>)
 8016b68:	484c      	ldr	r0, [pc, #304]	; (8016c9c <tcp_abandon+0x164>)
 8016b6a:	f006 fdc5 	bl	801d6f8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	7d1b      	ldrb	r3, [r3, #20]
 8016b72:	2b0a      	cmp	r3, #10
 8016b74:	d107      	bne.n	8016b86 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016b76:	6879      	ldr	r1, [r7, #4]
 8016b78:	484a      	ldr	r0, [pc, #296]	; (8016ca4 <tcp_abandon+0x16c>)
 8016b7a:	f000 ffbf 	bl	8017afc <tcp_pcb_remove>
    tcp_free(pcb);
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f7ff fdb8 	bl	80166f4 <tcp_free>
 8016b84:	e082      	b.n	8016c8c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8016b86:	2300      	movs	r3, #0
 8016b88:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016b92:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b98:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ba0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	691b      	ldr	r3, [r3, #16]
 8016ba6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	7d1b      	ldrb	r3, [r3, #20]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d126      	bne.n	8016bfe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	8adb      	ldrh	r3, [r3, #22]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d02e      	beq.n	8016c16 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016bb8:	4b3b      	ldr	r3, [pc, #236]	; (8016ca8 <tcp_abandon+0x170>)
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	687a      	ldr	r2, [r7, #4]
 8016bbe:	429a      	cmp	r2, r3
 8016bc0:	d105      	bne.n	8016bce <tcp_abandon+0x96>
 8016bc2:	4b39      	ldr	r3, [pc, #228]	; (8016ca8 <tcp_abandon+0x170>)
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	68db      	ldr	r3, [r3, #12]
 8016bc8:	4a37      	ldr	r2, [pc, #220]	; (8016ca8 <tcp_abandon+0x170>)
 8016bca:	6013      	str	r3, [r2, #0]
 8016bcc:	e013      	b.n	8016bf6 <tcp_abandon+0xbe>
 8016bce:	4b36      	ldr	r3, [pc, #216]	; (8016ca8 <tcp_abandon+0x170>)
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	61fb      	str	r3, [r7, #28]
 8016bd4:	e00c      	b.n	8016bf0 <tcp_abandon+0xb8>
 8016bd6:	69fb      	ldr	r3, [r7, #28]
 8016bd8:	68db      	ldr	r3, [r3, #12]
 8016bda:	687a      	ldr	r2, [r7, #4]
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	d104      	bne.n	8016bea <tcp_abandon+0xb2>
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	68da      	ldr	r2, [r3, #12]
 8016be4:	69fb      	ldr	r3, [r7, #28]
 8016be6:	60da      	str	r2, [r3, #12]
 8016be8:	e005      	b.n	8016bf6 <tcp_abandon+0xbe>
 8016bea:	69fb      	ldr	r3, [r7, #28]
 8016bec:	68db      	ldr	r3, [r3, #12]
 8016bee:	61fb      	str	r3, [r7, #28]
 8016bf0:	69fb      	ldr	r3, [r7, #28]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d1ef      	bne.n	8016bd6 <tcp_abandon+0x9e>
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	60da      	str	r2, [r3, #12]
 8016bfc:	e00b      	b.n	8016c16 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8016bfe:	683b      	ldr	r3, [r7, #0]
 8016c00:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	8adb      	ldrh	r3, [r3, #22]
 8016c06:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016c08:	6879      	ldr	r1, [r7, #4]
 8016c0a:	4828      	ldr	r0, [pc, #160]	; (8016cac <tcp_abandon+0x174>)
 8016c0c:	f000 ff76 	bl	8017afc <tcp_pcb_remove>
 8016c10:	4b27      	ldr	r3, [pc, #156]	; (8016cb0 <tcp_abandon+0x178>)
 8016c12:	2201      	movs	r2, #1
 8016c14:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d004      	beq.n	8016c28 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c22:	4618      	mov	r0, r3
 8016c24:	f000 fd1a 	bl	801765c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d004      	beq.n	8016c3a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c34:	4618      	mov	r0, r3
 8016c36:	f000 fd11 	bl	801765c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d004      	beq.n	8016c4c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c46:	4618      	mov	r0, r3
 8016c48:	f000 fd08 	bl	801765c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8016c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d00e      	beq.n	8016c70 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016c52:	6879      	ldr	r1, [r7, #4]
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	3304      	adds	r3, #4
 8016c58:	687a      	ldr	r2, [r7, #4]
 8016c5a:	8b12      	ldrh	r2, [r2, #24]
 8016c5c:	9202      	str	r2, [sp, #8]
 8016c5e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016c60:	9201      	str	r2, [sp, #4]
 8016c62:	9300      	str	r3, [sp, #0]
 8016c64:	460b      	mov	r3, r1
 8016c66:	697a      	ldr	r2, [r7, #20]
 8016c68:	69b9      	ldr	r1, [r7, #24]
 8016c6a:	6878      	ldr	r0, [r7, #4]
 8016c6c:	f004 fcca 	bl	801b604 <tcp_rst>
    }
    last_state = pcb->state;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	7d1b      	ldrb	r3, [r3, #20]
 8016c74:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8016c76:	6878      	ldr	r0, [r7, #4]
 8016c78:	f7ff fd3c 	bl	80166f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016c7c:	693b      	ldr	r3, [r7, #16]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d004      	beq.n	8016c8c <tcp_abandon+0x154>
 8016c82:	693b      	ldr	r3, [r7, #16]
 8016c84:	f06f 010c 	mvn.w	r1, #12
 8016c88:	68f8      	ldr	r0, [r7, #12]
 8016c8a:	4798      	blx	r3
  }
}
 8016c8c:	3728      	adds	r7, #40	; 0x28
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	bd80      	pop	{r7, pc}
 8016c92:	bf00      	nop
 8016c94:	08020f38 	.word	0x08020f38
 8016c98:	08021098 	.word	0x08021098
 8016c9c:	08020f98 	.word	0x08020f98
 8016ca0:	080210b4 	.word	0x080210b4
 8016ca4:	2000ba74 	.word	0x2000ba74
 8016ca8:	2000ba70 	.word	0x2000ba70
 8016cac:	2000ba64 	.word	0x2000ba64
 8016cb0:	2000ba60 	.word	0x2000ba60

08016cb4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b082      	sub	sp, #8
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8016cbc:	2101      	movs	r1, #1
 8016cbe:	6878      	ldr	r0, [r7, #4]
 8016cc0:	f7ff ff3a 	bl	8016b38 <tcp_abandon>
}
 8016cc4:	bf00      	nop
 8016cc6:	3708      	adds	r7, #8
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bd80      	pop	{r7, pc}

08016ccc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b084      	sub	sp, #16
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d106      	bne.n	8016ce8 <tcp_update_rcv_ann_wnd+0x1c>
 8016cda:	4b25      	ldr	r3, [pc, #148]	; (8016d70 <tcp_update_rcv_ann_wnd+0xa4>)
 8016cdc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016ce0:	4924      	ldr	r1, [pc, #144]	; (8016d74 <tcp_update_rcv_ann_wnd+0xa8>)
 8016ce2:	4825      	ldr	r0, [pc, #148]	; (8016d78 <tcp_update_rcv_ann_wnd+0xac>)
 8016ce4:	f006 fd08 	bl	801d6f8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cec:	687a      	ldr	r2, [r7, #4]
 8016cee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8016cf0:	4413      	add	r3, r2
 8016cf2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cf8:	687a      	ldr	r2, [r7, #4]
 8016cfa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8016cfc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016d00:	bf28      	it	cs
 8016d02:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016d06:	b292      	uxth	r2, r2
 8016d08:	4413      	add	r3, r2
 8016d0a:	68fa      	ldr	r2, [r7, #12]
 8016d0c:	1ad3      	subs	r3, r2, r3
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	db08      	blt.n	8016d24 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d1e:	68fa      	ldr	r2, [r7, #12]
 8016d20:	1ad3      	subs	r3, r2, r3
 8016d22:	e020      	b.n	8016d66 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d2c:	1ad3      	subs	r3, r2, r3
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	dd03      	ble.n	8016d3a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	2200      	movs	r2, #0
 8016d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016d38:	e014      	b.n	8016d64 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d42:	1ad3      	subs	r3, r2, r3
 8016d44:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016d46:	68bb      	ldr	r3, [r7, #8]
 8016d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016d4c:	d306      	bcc.n	8016d5c <tcp_update_rcv_ann_wnd+0x90>
 8016d4e:	4b08      	ldr	r3, [pc, #32]	; (8016d70 <tcp_update_rcv_ann_wnd+0xa4>)
 8016d50:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016d54:	4909      	ldr	r1, [pc, #36]	; (8016d7c <tcp_update_rcv_ann_wnd+0xb0>)
 8016d56:	4808      	ldr	r0, [pc, #32]	; (8016d78 <tcp_update_rcv_ann_wnd+0xac>)
 8016d58:	f006 fcce 	bl	801d6f8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016d5c:	68bb      	ldr	r3, [r7, #8]
 8016d5e:	b29a      	uxth	r2, r3
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016d64:	2300      	movs	r3, #0
  }
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3710      	adds	r7, #16
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}
 8016d6e:	bf00      	nop
 8016d70:	08020f38 	.word	0x08020f38
 8016d74:	080211b0 	.word	0x080211b0
 8016d78:	08020f98 	.word	0x08020f98
 8016d7c:	080211d4 	.word	0x080211d4

08016d80 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b084      	sub	sp, #16
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	6078      	str	r0, [r7, #4]
 8016d88:	460b      	mov	r3, r1
 8016d8a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d107      	bne.n	8016da2 <tcp_recved+0x22>
 8016d92:	4b1f      	ldr	r3, [pc, #124]	; (8016e10 <tcp_recved+0x90>)
 8016d94:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016d98:	491e      	ldr	r1, [pc, #120]	; (8016e14 <tcp_recved+0x94>)
 8016d9a:	481f      	ldr	r0, [pc, #124]	; (8016e18 <tcp_recved+0x98>)
 8016d9c:	f006 fcac 	bl	801d6f8 <iprintf>
 8016da0:	e032      	b.n	8016e08 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	7d1b      	ldrb	r3, [r3, #20]
 8016da6:	2b01      	cmp	r3, #1
 8016da8:	d106      	bne.n	8016db8 <tcp_recved+0x38>
 8016daa:	4b19      	ldr	r3, [pc, #100]	; (8016e10 <tcp_recved+0x90>)
 8016dac:	f240 32d3 	movw	r2, #979	; 0x3d3
 8016db0:	491a      	ldr	r1, [pc, #104]	; (8016e1c <tcp_recved+0x9c>)
 8016db2:	4819      	ldr	r0, [pc, #100]	; (8016e18 <tcp_recved+0x98>)
 8016db4:	f006 fca0 	bl	801d6f8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016dbc:	887b      	ldrh	r3, [r7, #2]
 8016dbe:	4413      	add	r3, r2
 8016dc0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016dc2:	89fb      	ldrh	r3, [r7, #14]
 8016dc4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016dc8:	d804      	bhi.n	8016dd4 <tcp_recved+0x54>
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016dce:	89fa      	ldrh	r2, [r7, #14]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d204      	bcs.n	8016dde <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016dda:	851a      	strh	r2, [r3, #40]	; 0x28
 8016ddc:	e002      	b.n	8016de4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	89fa      	ldrh	r2, [r7, #14]
 8016de2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016de4:	6878      	ldr	r0, [r7, #4]
 8016de6:	f7ff ff71 	bl	8016ccc <tcp_update_rcv_ann_wnd>
 8016dea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016dec:	68bb      	ldr	r3, [r7, #8]
 8016dee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016df2:	d309      	bcc.n	8016e08 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	8b5b      	ldrh	r3, [r3, #26]
 8016df8:	f043 0302 	orr.w	r3, r3, #2
 8016dfc:	b29a      	uxth	r2, r3
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016e02:	6878      	ldr	r0, [r7, #4]
 8016e04:	f003 fe38 	bl	801aa78 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016e08:	3710      	adds	r7, #16
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	bd80      	pop	{r7, pc}
 8016e0e:	bf00      	nop
 8016e10:	08020f38 	.word	0x08020f38
 8016e14:	080211f0 	.word	0x080211f0
 8016e18:	08020f98 	.word	0x08020f98
 8016e1c:	08021208 	.word	0x08021208

08016e20 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016e20:	b5b0      	push	{r4, r5, r7, lr}
 8016e22:	b090      	sub	sp, #64	; 0x40
 8016e24:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016e26:	2300      	movs	r3, #0
 8016e28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8016e2c:	4b94      	ldr	r3, [pc, #592]	; (8017080 <tcp_slowtmr+0x260>)
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	3301      	adds	r3, #1
 8016e32:	4a93      	ldr	r2, [pc, #588]	; (8017080 <tcp_slowtmr+0x260>)
 8016e34:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016e36:	4b93      	ldr	r3, [pc, #588]	; (8017084 <tcp_slowtmr+0x264>)
 8016e38:	781b      	ldrb	r3, [r3, #0]
 8016e3a:	3301      	adds	r3, #1
 8016e3c:	b2da      	uxtb	r2, r3
 8016e3e:	4b91      	ldr	r3, [pc, #580]	; (8017084 <tcp_slowtmr+0x264>)
 8016e40:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8016e42:	2300      	movs	r3, #0
 8016e44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016e46:	4b90      	ldr	r3, [pc, #576]	; (8017088 <tcp_slowtmr+0x268>)
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8016e4c:	e29d      	b.n	801738a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e50:	7d1b      	ldrb	r3, [r3, #20]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d106      	bne.n	8016e64 <tcp_slowtmr+0x44>
 8016e56:	4b8d      	ldr	r3, [pc, #564]	; (801708c <tcp_slowtmr+0x26c>)
 8016e58:	f240 42be 	movw	r2, #1214	; 0x4be
 8016e5c:	498c      	ldr	r1, [pc, #560]	; (8017090 <tcp_slowtmr+0x270>)
 8016e5e:	488d      	ldr	r0, [pc, #564]	; (8017094 <tcp_slowtmr+0x274>)
 8016e60:	f006 fc4a 	bl	801d6f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e66:	7d1b      	ldrb	r3, [r3, #20]
 8016e68:	2b01      	cmp	r3, #1
 8016e6a:	d106      	bne.n	8016e7a <tcp_slowtmr+0x5a>
 8016e6c:	4b87      	ldr	r3, [pc, #540]	; (801708c <tcp_slowtmr+0x26c>)
 8016e6e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8016e72:	4989      	ldr	r1, [pc, #548]	; (8017098 <tcp_slowtmr+0x278>)
 8016e74:	4887      	ldr	r0, [pc, #540]	; (8017094 <tcp_slowtmr+0x274>)
 8016e76:	f006 fc3f 	bl	801d6f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e7c:	7d1b      	ldrb	r3, [r3, #20]
 8016e7e:	2b0a      	cmp	r3, #10
 8016e80:	d106      	bne.n	8016e90 <tcp_slowtmr+0x70>
 8016e82:	4b82      	ldr	r3, [pc, #520]	; (801708c <tcp_slowtmr+0x26c>)
 8016e84:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016e88:	4984      	ldr	r1, [pc, #528]	; (801709c <tcp_slowtmr+0x27c>)
 8016e8a:	4882      	ldr	r0, [pc, #520]	; (8017094 <tcp_slowtmr+0x274>)
 8016e8c:	f006 fc34 	bl	801d6f8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e92:	7f9a      	ldrb	r2, [r3, #30]
 8016e94:	4b7b      	ldr	r3, [pc, #492]	; (8017084 <tcp_slowtmr+0x264>)
 8016e96:	781b      	ldrb	r3, [r3, #0]
 8016e98:	429a      	cmp	r2, r3
 8016e9a:	d105      	bne.n	8016ea8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ea2:	68db      	ldr	r3, [r3, #12]
 8016ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8016ea6:	e270      	b.n	801738a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016ea8:	4b76      	ldr	r3, [pc, #472]	; (8017084 <tcp_slowtmr+0x264>)
 8016eaa:	781a      	ldrb	r2, [r3, #0]
 8016eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ebe:	7d1b      	ldrb	r3, [r3, #20]
 8016ec0:	2b02      	cmp	r3, #2
 8016ec2:	d10a      	bne.n	8016eda <tcp_slowtmr+0xba>
 8016ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016eca:	2b05      	cmp	r3, #5
 8016ecc:	d905      	bls.n	8016eda <tcp_slowtmr+0xba>
      ++pcb_remove;
 8016ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ed2:	3301      	adds	r3, #1
 8016ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ed8:	e11e      	b.n	8017118 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016edc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016ee0:	2b0b      	cmp	r3, #11
 8016ee2:	d905      	bls.n	8016ef0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8016ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ee8:	3301      	adds	r3, #1
 8016eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016eee:	e113      	b.n	8017118 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8016ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ef2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d075      	beq.n	8016fe6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d006      	beq.n	8016f10 <tcp_slowtmr+0xf0>
 8016f02:	4b62      	ldr	r3, [pc, #392]	; (801708c <tcp_slowtmr+0x26c>)
 8016f04:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8016f08:	4965      	ldr	r1, [pc, #404]	; (80170a0 <tcp_slowtmr+0x280>)
 8016f0a:	4862      	ldr	r0, [pc, #392]	; (8017094 <tcp_slowtmr+0x274>)
 8016f0c:	f006 fbf4 	bl	801d6f8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d106      	bne.n	8016f26 <tcp_slowtmr+0x106>
 8016f18:	4b5c      	ldr	r3, [pc, #368]	; (801708c <tcp_slowtmr+0x26c>)
 8016f1a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8016f1e:	4961      	ldr	r1, [pc, #388]	; (80170a4 <tcp_slowtmr+0x284>)
 8016f20:	485c      	ldr	r0, [pc, #368]	; (8017094 <tcp_slowtmr+0x274>)
 8016f22:	f006 fbe9 	bl	801d6f8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8016f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f28:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016f2c:	2b0b      	cmp	r3, #11
 8016f2e:	d905      	bls.n	8016f3c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8016f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f34:	3301      	adds	r3, #1
 8016f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016f3a:	e0ed      	b.n	8017118 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8016f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016f42:	3b01      	subs	r3, #1
 8016f44:	4a58      	ldr	r2, [pc, #352]	; (80170a8 <tcp_slowtmr+0x288>)
 8016f46:	5cd3      	ldrb	r3, [r2, r3]
 8016f48:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8016f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016f50:	7c7a      	ldrb	r2, [r7, #17]
 8016f52:	429a      	cmp	r2, r3
 8016f54:	d907      	bls.n	8016f66 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8016f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016f5c:	3301      	adds	r3, #1
 8016f5e:	b2da      	uxtb	r2, r3
 8016f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f62:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8016f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016f6c:	7c7a      	ldrb	r2, [r7, #17]
 8016f6e:	429a      	cmp	r2, r3
 8016f70:	f200 80d2 	bhi.w	8017118 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8016f74:	2301      	movs	r3, #1
 8016f76:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8016f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d108      	bne.n	8016f94 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8016f82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f84:	f004 fc32 	bl	801b7ec <tcp_zero_window_probe>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d014      	beq.n	8016fb8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8016f8e:	2300      	movs	r3, #0
 8016f90:	623b      	str	r3, [r7, #32]
 8016f92:	e011      	b.n	8016fb8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016f9a:	4619      	mov	r1, r3
 8016f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f9e:	f003 fae5 	bl	801a56c <tcp_split_unsent_seg>
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d107      	bne.n	8016fb8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8016fa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016faa:	f003 fd65 	bl	801aa78 <tcp_output>
 8016fae:	4603      	mov	r3, r0
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d101      	bne.n	8016fb8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8016fb8:	6a3b      	ldr	r3, [r7, #32]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	f000 80ac 	beq.w	8017118 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8016fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016fce:	2b06      	cmp	r3, #6
 8016fd0:	f200 80a2 	bhi.w	8017118 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8016fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fd6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016fda:	3301      	adds	r3, #1
 8016fdc:	b2da      	uxtb	r2, r3
 8016fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8016fe4:	e098      	b.n	8017118 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8016fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	db0f      	blt.n	8017010 <tcp_slowtmr+0x1f0>
 8016ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ff2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016ff6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016ffa:	4293      	cmp	r3, r2
 8016ffc:	d008      	beq.n	8017010 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8016ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017000:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017004:	b29b      	uxth	r3, r3
 8017006:	3301      	adds	r3, #1
 8017008:	b29b      	uxth	r3, r3
 801700a:	b21a      	sxth	r2, r3
 801700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801700e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8017010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017012:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8017016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017018:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801701c:	429a      	cmp	r2, r3
 801701e:	db7b      	blt.n	8017118 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017020:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017022:	f004 f821 	bl	801b068 <tcp_rexmit_rto_prepare>
 8017026:	4603      	mov	r3, r0
 8017028:	2b00      	cmp	r3, #0
 801702a:	d007      	beq.n	801703c <tcp_slowtmr+0x21c>
 801702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801702e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017030:	2b00      	cmp	r3, #0
 8017032:	d171      	bne.n	8017118 <tcp_slowtmr+0x2f8>
 8017034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017038:	2b00      	cmp	r3, #0
 801703a:	d06d      	beq.n	8017118 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801703e:	7d1b      	ldrb	r3, [r3, #20]
 8017040:	2b02      	cmp	r3, #2
 8017042:	d03a      	beq.n	80170ba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8017044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017046:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801704a:	2b0c      	cmp	r3, #12
 801704c:	bf28      	it	cs
 801704e:	230c      	movcs	r3, #12
 8017050:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8017052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017054:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017058:	10db      	asrs	r3, r3, #3
 801705a:	b21b      	sxth	r3, r3
 801705c:	461a      	mov	r2, r3
 801705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017060:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017064:	4413      	add	r3, r2
 8017066:	7efa      	ldrb	r2, [r7, #27]
 8017068:	4910      	ldr	r1, [pc, #64]	; (80170ac <tcp_slowtmr+0x28c>)
 801706a:	5c8a      	ldrb	r2, [r1, r2]
 801706c:	4093      	lsls	r3, r2
 801706e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8017070:	697b      	ldr	r3, [r7, #20]
 8017072:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8017076:	4293      	cmp	r3, r2
 8017078:	dc1a      	bgt.n	80170b0 <tcp_slowtmr+0x290>
 801707a:	697b      	ldr	r3, [r7, #20]
 801707c:	b21a      	sxth	r2, r3
 801707e:	e019      	b.n	80170b4 <tcp_slowtmr+0x294>
 8017080:	2000ba68 	.word	0x2000ba68
 8017084:	2000771a 	.word	0x2000771a
 8017088:	2000ba64 	.word	0x2000ba64
 801708c:	08020f38 	.word	0x08020f38
 8017090:	08021298 	.word	0x08021298
 8017094:	08020f98 	.word	0x08020f98
 8017098:	080212c4 	.word	0x080212c4
 801709c:	080212f0 	.word	0x080212f0
 80170a0:	08021320 	.word	0x08021320
 80170a4:	08021354 	.word	0x08021354
 80170a8:	08022a94 	.word	0x08022a94
 80170ac:	08022a84 	.word	0x08022a84
 80170b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80170b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80170ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170bc:	2200      	movs	r2, #0
 80170be:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80170c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80170c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80170cc:	4293      	cmp	r3, r2
 80170ce:	bf28      	it	cs
 80170d0:	4613      	movcs	r3, r2
 80170d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80170d4:	8a7b      	ldrh	r3, [r7, #18]
 80170d6:	085b      	lsrs	r3, r3, #1
 80170d8:	b29a      	uxth	r2, r3
 80170da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80170e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80170e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80170ea:	005b      	lsls	r3, r3, #1
 80170ec:	b29b      	uxth	r3, r3
 80170ee:	429a      	cmp	r2, r3
 80170f0:	d206      	bcs.n	8017100 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80170f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80170f6:	005b      	lsls	r3, r3, #1
 80170f8:	b29a      	uxth	r2, r3
 80170fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8017100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017102:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8017104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017106:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801710c:	2200      	movs	r2, #0
 801710e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8017112:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017114:	f004 f818 	bl	801b148 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8017118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801711a:	7d1b      	ldrb	r3, [r3, #20]
 801711c:	2b06      	cmp	r3, #6
 801711e:	d111      	bne.n	8017144 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8017120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017122:	8b5b      	ldrh	r3, [r3, #26]
 8017124:	f003 0310 	and.w	r3, r3, #16
 8017128:	2b00      	cmp	r3, #0
 801712a:	d00b      	beq.n	8017144 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801712c:	4b9c      	ldr	r3, [pc, #624]	; (80173a0 <tcp_slowtmr+0x580>)
 801712e:	681a      	ldr	r2, [r3, #0]
 8017130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017132:	6a1b      	ldr	r3, [r3, #32]
 8017134:	1ad3      	subs	r3, r2, r3
 8017136:	2b28      	cmp	r3, #40	; 0x28
 8017138:	d904      	bls.n	8017144 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801713a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801713e:	3301      	adds	r3, #1
 8017140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017146:	7a5b      	ldrb	r3, [r3, #9]
 8017148:	f003 0308 	and.w	r3, r3, #8
 801714c:	2b00      	cmp	r3, #0
 801714e:	d04a      	beq.n	80171e6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8017150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017152:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017154:	2b04      	cmp	r3, #4
 8017156:	d003      	beq.n	8017160 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8017158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801715a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801715c:	2b07      	cmp	r3, #7
 801715e:	d142      	bne.n	80171e6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017160:	4b8f      	ldr	r3, [pc, #572]	; (80173a0 <tcp_slowtmr+0x580>)
 8017162:	681a      	ldr	r2, [r3, #0]
 8017164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017166:	6a1b      	ldr	r3, [r3, #32]
 8017168:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801716c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017170:	4b8c      	ldr	r3, [pc, #560]	; (80173a4 <tcp_slowtmr+0x584>)
 8017172:	440b      	add	r3, r1
 8017174:	498c      	ldr	r1, [pc, #560]	; (80173a8 <tcp_slowtmr+0x588>)
 8017176:	fba1 1303 	umull	r1, r3, r1, r3
 801717a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801717c:	429a      	cmp	r2, r3
 801717e:	d90a      	bls.n	8017196 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8017180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017184:	3301      	adds	r3, #1
 8017186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801718a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801718e:	3301      	adds	r3, #1
 8017190:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017194:	e027      	b.n	80171e6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017196:	4b82      	ldr	r3, [pc, #520]	; (80173a0 <tcp_slowtmr+0x580>)
 8017198:	681a      	ldr	r2, [r3, #0]
 801719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801719c:	6a1b      	ldr	r3, [r3, #32]
 801719e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80171a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80171a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80171ac:	4618      	mov	r0, r3
 80171ae:	4b7f      	ldr	r3, [pc, #508]	; (80173ac <tcp_slowtmr+0x58c>)
 80171b0:	fb03 f300 	mul.w	r3, r3, r0
 80171b4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80171b6:	497c      	ldr	r1, [pc, #496]	; (80173a8 <tcp_slowtmr+0x588>)
 80171b8:	fba1 1303 	umull	r1, r3, r1, r3
 80171bc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80171be:	429a      	cmp	r2, r3
 80171c0:	d911      	bls.n	80171e6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80171c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171c4:	f004 fad2 	bl	801b76c <tcp_keepalive>
 80171c8:	4603      	mov	r3, r0
 80171ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80171ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d107      	bne.n	80171e6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80171d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80171dc:	3301      	adds	r3, #1
 80171de:	b2da      	uxtb	r2, r3
 80171e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171e2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80171e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d011      	beq.n	8017212 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80171ee:	4b6c      	ldr	r3, [pc, #432]	; (80173a0 <tcp_slowtmr+0x580>)
 80171f0:	681a      	ldr	r2, [r3, #0]
 80171f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f4:	6a1b      	ldr	r3, [r3, #32]
 80171f6:	1ad2      	subs	r2, r2, r3
 80171f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80171fe:	4619      	mov	r1, r3
 8017200:	460b      	mov	r3, r1
 8017202:	005b      	lsls	r3, r3, #1
 8017204:	440b      	add	r3, r1
 8017206:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8017208:	429a      	cmp	r2, r3
 801720a:	d302      	bcc.n	8017212 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801720c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801720e:	f000 fdd9 	bl	8017dc4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8017212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017214:	7d1b      	ldrb	r3, [r3, #20]
 8017216:	2b03      	cmp	r3, #3
 8017218:	d10b      	bne.n	8017232 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801721a:	4b61      	ldr	r3, [pc, #388]	; (80173a0 <tcp_slowtmr+0x580>)
 801721c:	681a      	ldr	r2, [r3, #0]
 801721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017220:	6a1b      	ldr	r3, [r3, #32]
 8017222:	1ad3      	subs	r3, r2, r3
 8017224:	2b28      	cmp	r3, #40	; 0x28
 8017226:	d904      	bls.n	8017232 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8017228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801722c:	3301      	adds	r3, #1
 801722e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8017232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017234:	7d1b      	ldrb	r3, [r3, #20]
 8017236:	2b09      	cmp	r3, #9
 8017238:	d10b      	bne.n	8017252 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801723a:	4b59      	ldr	r3, [pc, #356]	; (80173a0 <tcp_slowtmr+0x580>)
 801723c:	681a      	ldr	r2, [r3, #0]
 801723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017240:	6a1b      	ldr	r3, [r3, #32]
 8017242:	1ad3      	subs	r3, r2, r3
 8017244:	2bf0      	cmp	r3, #240	; 0xf0
 8017246:	d904      	bls.n	8017252 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8017248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801724c:	3301      	adds	r3, #1
 801724e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017256:	2b00      	cmp	r3, #0
 8017258:	d060      	beq.n	801731c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801725c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017260:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8017262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017264:	f000 fbfa 	bl	8017a5c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8017268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801726a:	2b00      	cmp	r3, #0
 801726c:	d010      	beq.n	8017290 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801726e:	4b50      	ldr	r3, [pc, #320]	; (80173b0 <tcp_slowtmr+0x590>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017274:	429a      	cmp	r2, r3
 8017276:	d106      	bne.n	8017286 <tcp_slowtmr+0x466>
 8017278:	4b4e      	ldr	r3, [pc, #312]	; (80173b4 <tcp_slowtmr+0x594>)
 801727a:	f240 526d 	movw	r2, #1389	; 0x56d
 801727e:	494e      	ldr	r1, [pc, #312]	; (80173b8 <tcp_slowtmr+0x598>)
 8017280:	484e      	ldr	r0, [pc, #312]	; (80173bc <tcp_slowtmr+0x59c>)
 8017282:	f006 fa39 	bl	801d6f8 <iprintf>
        prev->next = pcb->next;
 8017286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017288:	68da      	ldr	r2, [r3, #12]
 801728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801728c:	60da      	str	r2, [r3, #12]
 801728e:	e00f      	b.n	80172b0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017290:	4b47      	ldr	r3, [pc, #284]	; (80173b0 <tcp_slowtmr+0x590>)
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017296:	429a      	cmp	r2, r3
 8017298:	d006      	beq.n	80172a8 <tcp_slowtmr+0x488>
 801729a:	4b46      	ldr	r3, [pc, #280]	; (80173b4 <tcp_slowtmr+0x594>)
 801729c:	f240 5271 	movw	r2, #1393	; 0x571
 80172a0:	4947      	ldr	r1, [pc, #284]	; (80173c0 <tcp_slowtmr+0x5a0>)
 80172a2:	4846      	ldr	r0, [pc, #280]	; (80173bc <tcp_slowtmr+0x59c>)
 80172a4:	f006 fa28 	bl	801d6f8 <iprintf>
        tcp_active_pcbs = pcb->next;
 80172a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172aa:	68db      	ldr	r3, [r3, #12]
 80172ac:	4a40      	ldr	r2, [pc, #256]	; (80173b0 <tcp_slowtmr+0x590>)
 80172ae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80172b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d013      	beq.n	80172e0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80172b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80172bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80172c0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80172c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172c4:	3304      	adds	r3, #4
 80172c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80172c8:	8ad2      	ldrh	r2, [r2, #22]
 80172ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80172cc:	8b09      	ldrh	r1, [r1, #24]
 80172ce:	9102      	str	r1, [sp, #8]
 80172d0:	9201      	str	r2, [sp, #4]
 80172d2:	9300      	str	r3, [sp, #0]
 80172d4:	462b      	mov	r3, r5
 80172d6:	4622      	mov	r2, r4
 80172d8:	4601      	mov	r1, r0
 80172da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80172dc:	f004 f992 	bl	801b604 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80172e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e2:	691b      	ldr	r3, [r3, #16]
 80172e4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80172e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e8:	7d1b      	ldrb	r3, [r3, #20]
 80172ea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80172ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80172f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f2:	68db      	ldr	r3, [r3, #12]
 80172f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80172f6:	6838      	ldr	r0, [r7, #0]
 80172f8:	f7ff f9fc 	bl	80166f4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80172fc:	4b31      	ldr	r3, [pc, #196]	; (80173c4 <tcp_slowtmr+0x5a4>)
 80172fe:	2200      	movs	r2, #0
 8017300:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d004      	beq.n	8017312 <tcp_slowtmr+0x4f2>
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	f06f 010c 	mvn.w	r1, #12
 801730e:	68b8      	ldr	r0, [r7, #8]
 8017310:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8017312:	4b2c      	ldr	r3, [pc, #176]	; (80173c4 <tcp_slowtmr+0x5a4>)
 8017314:	781b      	ldrb	r3, [r3, #0]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d037      	beq.n	801738a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801731a:	e592      	b.n	8016e42 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801731c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801731e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017322:	68db      	ldr	r3, [r3, #12]
 8017324:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8017326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017328:	7f1b      	ldrb	r3, [r3, #28]
 801732a:	3301      	adds	r3, #1
 801732c:	b2da      	uxtb	r2, r3
 801732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017330:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017334:	7f1a      	ldrb	r2, [r3, #28]
 8017336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017338:	7f5b      	ldrb	r3, [r3, #29]
 801733a:	429a      	cmp	r2, r3
 801733c:	d325      	bcc.n	801738a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017340:	2200      	movs	r2, #0
 8017342:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8017344:	4b1f      	ldr	r3, [pc, #124]	; (80173c4 <tcp_slowtmr+0x5a4>)
 8017346:	2200      	movs	r2, #0
 8017348:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801734c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017350:	2b00      	cmp	r3, #0
 8017352:	d00b      	beq.n	801736c <tcp_slowtmr+0x54c>
 8017354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801735a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801735c:	6912      	ldr	r2, [r2, #16]
 801735e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017360:	4610      	mov	r0, r2
 8017362:	4798      	blx	r3
 8017364:	4603      	mov	r3, r0
 8017366:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801736a:	e002      	b.n	8017372 <tcp_slowtmr+0x552>
 801736c:	2300      	movs	r3, #0
 801736e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8017372:	4b14      	ldr	r3, [pc, #80]	; (80173c4 <tcp_slowtmr+0x5a4>)
 8017374:	781b      	ldrb	r3, [r3, #0]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d000      	beq.n	801737c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801737a:	e562      	b.n	8016e42 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801737c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017380:	2b00      	cmp	r3, #0
 8017382:	d102      	bne.n	801738a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8017384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017386:	f003 fb77 	bl	801aa78 <tcp_output>
  while (pcb != NULL) {
 801738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801738c:	2b00      	cmp	r3, #0
 801738e:	f47f ad5e 	bne.w	8016e4e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8017392:	2300      	movs	r3, #0
 8017394:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8017396:	4b0c      	ldr	r3, [pc, #48]	; (80173c8 <tcp_slowtmr+0x5a8>)
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801739c:	e069      	b.n	8017472 <tcp_slowtmr+0x652>
 801739e:	bf00      	nop
 80173a0:	2000ba68 	.word	0x2000ba68
 80173a4:	000a4cb8 	.word	0x000a4cb8
 80173a8:	10624dd3 	.word	0x10624dd3
 80173ac:	000124f8 	.word	0x000124f8
 80173b0:	2000ba64 	.word	0x2000ba64
 80173b4:	08020f38 	.word	0x08020f38
 80173b8:	0802138c 	.word	0x0802138c
 80173bc:	08020f98 	.word	0x08020f98
 80173c0:	080213b8 	.word	0x080213b8
 80173c4:	2000ba60 	.word	0x2000ba60
 80173c8:	2000ba74 	.word	0x2000ba74
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80173cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ce:	7d1b      	ldrb	r3, [r3, #20]
 80173d0:	2b0a      	cmp	r3, #10
 80173d2:	d006      	beq.n	80173e2 <tcp_slowtmr+0x5c2>
 80173d4:	4b2a      	ldr	r3, [pc, #168]	; (8017480 <tcp_slowtmr+0x660>)
 80173d6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80173da:	492a      	ldr	r1, [pc, #168]	; (8017484 <tcp_slowtmr+0x664>)
 80173dc:	482a      	ldr	r0, [pc, #168]	; (8017488 <tcp_slowtmr+0x668>)
 80173de:	f006 f98b 	bl	801d6f8 <iprintf>
    pcb_remove = 0;
 80173e2:	2300      	movs	r3, #0
 80173e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80173e8:	4b28      	ldr	r3, [pc, #160]	; (801748c <tcp_slowtmr+0x66c>)
 80173ea:	681a      	ldr	r2, [r3, #0]
 80173ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ee:	6a1b      	ldr	r3, [r3, #32]
 80173f0:	1ad3      	subs	r3, r2, r3
 80173f2:	2bf0      	cmp	r3, #240	; 0xf0
 80173f4:	d904      	bls.n	8017400 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80173f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173fa:	3301      	adds	r3, #1
 80173fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017404:	2b00      	cmp	r3, #0
 8017406:	d02f      	beq.n	8017468 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8017408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801740a:	f000 fb27 	bl	8017a5c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017410:	2b00      	cmp	r3, #0
 8017412:	d010      	beq.n	8017436 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017414:	4b1e      	ldr	r3, [pc, #120]	; (8017490 <tcp_slowtmr+0x670>)
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801741a:	429a      	cmp	r2, r3
 801741c:	d106      	bne.n	801742c <tcp_slowtmr+0x60c>
 801741e:	4b18      	ldr	r3, [pc, #96]	; (8017480 <tcp_slowtmr+0x660>)
 8017420:	f240 52af 	movw	r2, #1455	; 0x5af
 8017424:	491b      	ldr	r1, [pc, #108]	; (8017494 <tcp_slowtmr+0x674>)
 8017426:	4818      	ldr	r0, [pc, #96]	; (8017488 <tcp_slowtmr+0x668>)
 8017428:	f006 f966 	bl	801d6f8 <iprintf>
        prev->next = pcb->next;
 801742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801742e:	68da      	ldr	r2, [r3, #12]
 8017430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017432:	60da      	str	r2, [r3, #12]
 8017434:	e00f      	b.n	8017456 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8017436:	4b16      	ldr	r3, [pc, #88]	; (8017490 <tcp_slowtmr+0x670>)
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801743c:	429a      	cmp	r2, r3
 801743e:	d006      	beq.n	801744e <tcp_slowtmr+0x62e>
 8017440:	4b0f      	ldr	r3, [pc, #60]	; (8017480 <tcp_slowtmr+0x660>)
 8017442:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8017446:	4914      	ldr	r1, [pc, #80]	; (8017498 <tcp_slowtmr+0x678>)
 8017448:	480f      	ldr	r0, [pc, #60]	; (8017488 <tcp_slowtmr+0x668>)
 801744a:	f006 f955 	bl	801d6f8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017450:	68db      	ldr	r3, [r3, #12]
 8017452:	4a0f      	ldr	r2, [pc, #60]	; (8017490 <tcp_slowtmr+0x670>)
 8017454:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8017456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017458:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801745c:	68db      	ldr	r3, [r3, #12]
 801745e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017460:	69f8      	ldr	r0, [r7, #28]
 8017462:	f7ff f947 	bl	80166f4 <tcp_free>
 8017466:	e004      	b.n	8017472 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8017468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801746a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801746e:	68db      	ldr	r3, [r3, #12]
 8017470:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017474:	2b00      	cmp	r3, #0
 8017476:	d1a9      	bne.n	80173cc <tcp_slowtmr+0x5ac>
    }
  }
}
 8017478:	bf00      	nop
 801747a:	3730      	adds	r7, #48	; 0x30
 801747c:	46bd      	mov	sp, r7
 801747e:	bdb0      	pop	{r4, r5, r7, pc}
 8017480:	08020f38 	.word	0x08020f38
 8017484:	080213e4 	.word	0x080213e4
 8017488:	08020f98 	.word	0x08020f98
 801748c:	2000ba68 	.word	0x2000ba68
 8017490:	2000ba74 	.word	0x2000ba74
 8017494:	08021414 	.word	0x08021414
 8017498:	0802143c 	.word	0x0802143c

0801749c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b082      	sub	sp, #8
 80174a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80174a2:	4b2d      	ldr	r3, [pc, #180]	; (8017558 <tcp_fasttmr+0xbc>)
 80174a4:	781b      	ldrb	r3, [r3, #0]
 80174a6:	3301      	adds	r3, #1
 80174a8:	b2da      	uxtb	r2, r3
 80174aa:	4b2b      	ldr	r3, [pc, #172]	; (8017558 <tcp_fasttmr+0xbc>)
 80174ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80174ae:	4b2b      	ldr	r3, [pc, #172]	; (801755c <tcp_fasttmr+0xc0>)
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80174b4:	e048      	b.n	8017548 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	7f9a      	ldrb	r2, [r3, #30]
 80174ba:	4b27      	ldr	r3, [pc, #156]	; (8017558 <tcp_fasttmr+0xbc>)
 80174bc:	781b      	ldrb	r3, [r3, #0]
 80174be:	429a      	cmp	r2, r3
 80174c0:	d03f      	beq.n	8017542 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80174c2:	4b25      	ldr	r3, [pc, #148]	; (8017558 <tcp_fasttmr+0xbc>)
 80174c4:	781a      	ldrb	r2, [r3, #0]
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	8b5b      	ldrh	r3, [r3, #26]
 80174ce:	f003 0301 	and.w	r3, r3, #1
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d010      	beq.n	80174f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	8b5b      	ldrh	r3, [r3, #26]
 80174da:	f043 0302 	orr.w	r3, r3, #2
 80174de:	b29a      	uxth	r2, r3
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80174e4:	6878      	ldr	r0, [r7, #4]
 80174e6:	f003 fac7 	bl	801aa78 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	8b5b      	ldrh	r3, [r3, #26]
 80174ee:	f023 0303 	bic.w	r3, r3, #3
 80174f2:	b29a      	uxth	r2, r3
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	8b5b      	ldrh	r3, [r3, #26]
 80174fc:	f003 0308 	and.w	r3, r3, #8
 8017500:	2b00      	cmp	r3, #0
 8017502:	d009      	beq.n	8017518 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	8b5b      	ldrh	r3, [r3, #26]
 8017508:	f023 0308 	bic.w	r3, r3, #8
 801750c:	b29a      	uxth	r2, r3
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8017512:	6878      	ldr	r0, [r7, #4]
 8017514:	f7ff fa7e 	bl	8016a14 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	68db      	ldr	r3, [r3, #12]
 801751c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017522:	2b00      	cmp	r3, #0
 8017524:	d00a      	beq.n	801753c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8017526:	4b0e      	ldr	r3, [pc, #56]	; (8017560 <tcp_fasttmr+0xc4>)
 8017528:	2200      	movs	r2, #0
 801752a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801752c:	6878      	ldr	r0, [r7, #4]
 801752e:	f000 f819 	bl	8017564 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8017532:	4b0b      	ldr	r3, [pc, #44]	; (8017560 <tcp_fasttmr+0xc4>)
 8017534:	781b      	ldrb	r3, [r3, #0]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d000      	beq.n	801753c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801753a:	e7b8      	b.n	80174ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801753c:	683b      	ldr	r3, [r7, #0]
 801753e:	607b      	str	r3, [r7, #4]
 8017540:	e002      	b.n	8017548 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	68db      	ldr	r3, [r3, #12]
 8017546:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d1b3      	bne.n	80174b6 <tcp_fasttmr+0x1a>
    }
  }
}
 801754e:	bf00      	nop
 8017550:	3708      	adds	r7, #8
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}
 8017556:	bf00      	nop
 8017558:	2000771a 	.word	0x2000771a
 801755c:	2000ba64 	.word	0x2000ba64
 8017560:	2000ba60 	.word	0x2000ba60

08017564 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8017564:	b590      	push	{r4, r7, lr}
 8017566:	b085      	sub	sp, #20
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d109      	bne.n	8017586 <tcp_process_refused_data+0x22>
 8017572:	4b37      	ldr	r3, [pc, #220]	; (8017650 <tcp_process_refused_data+0xec>)
 8017574:	f240 6209 	movw	r2, #1545	; 0x609
 8017578:	4936      	ldr	r1, [pc, #216]	; (8017654 <tcp_process_refused_data+0xf0>)
 801757a:	4837      	ldr	r0, [pc, #220]	; (8017658 <tcp_process_refused_data+0xf4>)
 801757c:	f006 f8bc 	bl	801d6f8 <iprintf>
 8017580:	f06f 030f 	mvn.w	r3, #15
 8017584:	e060      	b.n	8017648 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801758a:	7b5b      	ldrb	r3, [r3, #13]
 801758c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017592:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2200      	movs	r2, #0
 8017598:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d00b      	beq.n	80175bc <tcp_process_refused_data+0x58>
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	6918      	ldr	r0, [r3, #16]
 80175ae:	2300      	movs	r3, #0
 80175b0:	68ba      	ldr	r2, [r7, #8]
 80175b2:	6879      	ldr	r1, [r7, #4]
 80175b4:	47a0      	blx	r4
 80175b6:	4603      	mov	r3, r0
 80175b8:	73fb      	strb	r3, [r7, #15]
 80175ba:	e007      	b.n	80175cc <tcp_process_refused_data+0x68>
 80175bc:	2300      	movs	r3, #0
 80175be:	68ba      	ldr	r2, [r7, #8]
 80175c0:	6879      	ldr	r1, [r7, #4]
 80175c2:	2000      	movs	r0, #0
 80175c4:	f000 f8a2 	bl	801770c <tcp_recv_null>
 80175c8:	4603      	mov	r3, r0
 80175ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80175cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d12a      	bne.n	801762a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80175d4:	7bbb      	ldrb	r3, [r7, #14]
 80175d6:	f003 0320 	and.w	r3, r3, #32
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d033      	beq.n	8017646 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80175e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80175e6:	d005      	beq.n	80175f4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80175ec:	3301      	adds	r3, #1
 80175ee:	b29a      	uxth	r2, r3
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d00b      	beq.n	8017616 <tcp_process_refused_data+0xb2>
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	6918      	ldr	r0, [r3, #16]
 8017608:	2300      	movs	r3, #0
 801760a:	2200      	movs	r2, #0
 801760c:	6879      	ldr	r1, [r7, #4]
 801760e:	47a0      	blx	r4
 8017610:	4603      	mov	r3, r0
 8017612:	73fb      	strb	r3, [r7, #15]
 8017614:	e001      	b.n	801761a <tcp_process_refused_data+0xb6>
 8017616:	2300      	movs	r3, #0
 8017618:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801761a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801761e:	f113 0f0d 	cmn.w	r3, #13
 8017622:	d110      	bne.n	8017646 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8017624:	f06f 030c 	mvn.w	r3, #12
 8017628:	e00e      	b.n	8017648 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801762a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801762e:	f113 0f0d 	cmn.w	r3, #13
 8017632:	d102      	bne.n	801763a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8017634:	f06f 030c 	mvn.w	r3, #12
 8017638:	e006      	b.n	8017648 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	68ba      	ldr	r2, [r7, #8]
 801763e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8017640:	f06f 0304 	mvn.w	r3, #4
 8017644:	e000      	b.n	8017648 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8017646:	2300      	movs	r3, #0
}
 8017648:	4618      	mov	r0, r3
 801764a:	3714      	adds	r7, #20
 801764c:	46bd      	mov	sp, r7
 801764e:	bd90      	pop	{r4, r7, pc}
 8017650:	08020f38 	.word	0x08020f38
 8017654:	08021464 	.word	0x08021464
 8017658:	08020f98 	.word	0x08020f98

0801765c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b084      	sub	sp, #16
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017664:	e007      	b.n	8017676 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801766c:	6878      	ldr	r0, [r7, #4]
 801766e:	f000 f809 	bl	8017684 <tcp_seg_free>
    seg = next;
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d1f4      	bne.n	8017666 <tcp_segs_free+0xa>
  }
}
 801767c:	bf00      	nop
 801767e:	3710      	adds	r7, #16
 8017680:	46bd      	mov	sp, r7
 8017682:	bd80      	pop	{r7, pc}

08017684 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b082      	sub	sp, #8
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d00c      	beq.n	80176ac <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	685b      	ldr	r3, [r3, #4]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d004      	beq.n	80176a4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	685b      	ldr	r3, [r3, #4]
 801769e:	4618      	mov	r0, r3
 80176a0:	f7fe fc7a 	bl	8015f98 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80176a4:	6879      	ldr	r1, [r7, #4]
 80176a6:	2003      	movs	r0, #3
 80176a8:	f7fd fdca 	bl	8015240 <memp_free>
  }
}
 80176ac:	bf00      	nop
 80176ae:	3708      	adds	r7, #8
 80176b0:	46bd      	mov	sp, r7
 80176b2:	bd80      	pop	{r7, pc}

080176b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b084      	sub	sp, #16
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d106      	bne.n	80176d0 <tcp_seg_copy+0x1c>
 80176c2:	4b0f      	ldr	r3, [pc, #60]	; (8017700 <tcp_seg_copy+0x4c>)
 80176c4:	f240 6282 	movw	r2, #1666	; 0x682
 80176c8:	490e      	ldr	r1, [pc, #56]	; (8017704 <tcp_seg_copy+0x50>)
 80176ca:	480f      	ldr	r0, [pc, #60]	; (8017708 <tcp_seg_copy+0x54>)
 80176cc:	f006 f814 	bl	801d6f8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80176d0:	2003      	movs	r0, #3
 80176d2:	f7fd fd3f 	bl	8015154 <memp_malloc>
 80176d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d101      	bne.n	80176e2 <tcp_seg_copy+0x2e>
    return NULL;
 80176de:	2300      	movs	r3, #0
 80176e0:	e00a      	b.n	80176f8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80176e2:	2210      	movs	r2, #16
 80176e4:	6879      	ldr	r1, [r7, #4]
 80176e6:	68f8      	ldr	r0, [r7, #12]
 80176e8:	f005 fb9f 	bl	801ce2a <memcpy>
  pbuf_ref(cseg->p);
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	685b      	ldr	r3, [r3, #4]
 80176f0:	4618      	mov	r0, r3
 80176f2:	f7fe fcf7 	bl	80160e4 <pbuf_ref>
  return cseg;
 80176f6:	68fb      	ldr	r3, [r7, #12]
}
 80176f8:	4618      	mov	r0, r3
 80176fa:	3710      	adds	r7, #16
 80176fc:	46bd      	mov	sp, r7
 80176fe:	bd80      	pop	{r7, pc}
 8017700:	08020f38 	.word	0x08020f38
 8017704:	080214a8 	.word	0x080214a8
 8017708:	08020f98 	.word	0x08020f98

0801770c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b084      	sub	sp, #16
 8017710:	af00      	add	r7, sp, #0
 8017712:	60f8      	str	r0, [r7, #12]
 8017714:	60b9      	str	r1, [r7, #8]
 8017716:	607a      	str	r2, [r7, #4]
 8017718:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801771a:	68bb      	ldr	r3, [r7, #8]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d109      	bne.n	8017734 <tcp_recv_null+0x28>
 8017720:	4b12      	ldr	r3, [pc, #72]	; (801776c <tcp_recv_null+0x60>)
 8017722:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017726:	4912      	ldr	r1, [pc, #72]	; (8017770 <tcp_recv_null+0x64>)
 8017728:	4812      	ldr	r0, [pc, #72]	; (8017774 <tcp_recv_null+0x68>)
 801772a:	f005 ffe5 	bl	801d6f8 <iprintf>
 801772e:	f06f 030f 	mvn.w	r3, #15
 8017732:	e016      	b.n	8017762 <tcp_recv_null+0x56>

  if (p != NULL) {
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d009      	beq.n	801774e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	891b      	ldrh	r3, [r3, #8]
 801773e:	4619      	mov	r1, r3
 8017740:	68b8      	ldr	r0, [r7, #8]
 8017742:	f7ff fb1d 	bl	8016d80 <tcp_recved>
    pbuf_free(p);
 8017746:	6878      	ldr	r0, [r7, #4]
 8017748:	f7fe fc26 	bl	8015f98 <pbuf_free>
 801774c:	e008      	b.n	8017760 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801774e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d104      	bne.n	8017760 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8017756:	68b8      	ldr	r0, [r7, #8]
 8017758:	f7ff f9c2 	bl	8016ae0 <tcp_close>
 801775c:	4603      	mov	r3, r0
 801775e:	e000      	b.n	8017762 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8017760:	2300      	movs	r3, #0
}
 8017762:	4618      	mov	r0, r3
 8017764:	3710      	adds	r7, #16
 8017766:	46bd      	mov	sp, r7
 8017768:	bd80      	pop	{r7, pc}
 801776a:	bf00      	nop
 801776c:	08020f38 	.word	0x08020f38
 8017770:	080214c4 	.word	0x080214c4
 8017774:	08020f98 	.word	0x08020f98

08017778 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b086      	sub	sp, #24
 801777c:	af00      	add	r7, sp, #0
 801777e:	4603      	mov	r3, r0
 8017780:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017786:	2b00      	cmp	r3, #0
 8017788:	db01      	blt.n	801778e <tcp_kill_prio+0x16>
 801778a:	79fb      	ldrb	r3, [r7, #7]
 801778c:	e000      	b.n	8017790 <tcp_kill_prio+0x18>
 801778e:	237f      	movs	r3, #127	; 0x7f
 8017790:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8017792:	7afb      	ldrb	r3, [r7, #11]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d034      	beq.n	8017802 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8017798:	7afb      	ldrb	r3, [r7, #11]
 801779a:	3b01      	subs	r3, #1
 801779c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801779e:	2300      	movs	r3, #0
 80177a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80177a2:	2300      	movs	r3, #0
 80177a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80177a6:	4b19      	ldr	r3, [pc, #100]	; (801780c <tcp_kill_prio+0x94>)
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	617b      	str	r3, [r7, #20]
 80177ac:	e01f      	b.n	80177ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80177ae:	697b      	ldr	r3, [r7, #20]
 80177b0:	7d5b      	ldrb	r3, [r3, #21]
 80177b2:	7afa      	ldrb	r2, [r7, #11]
 80177b4:	429a      	cmp	r2, r3
 80177b6:	d80c      	bhi.n	80177d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80177bc:	7afa      	ldrb	r2, [r7, #11]
 80177be:	429a      	cmp	r2, r3
 80177c0:	d112      	bne.n	80177e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80177c2:	4b13      	ldr	r3, [pc, #76]	; (8017810 <tcp_kill_prio+0x98>)
 80177c4:	681a      	ldr	r2, [r3, #0]
 80177c6:	697b      	ldr	r3, [r7, #20]
 80177c8:	6a1b      	ldr	r3, [r3, #32]
 80177ca:	1ad3      	subs	r3, r2, r3
 80177cc:	68fa      	ldr	r2, [r7, #12]
 80177ce:	429a      	cmp	r2, r3
 80177d0:	d80a      	bhi.n	80177e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80177d2:	4b0f      	ldr	r3, [pc, #60]	; (8017810 <tcp_kill_prio+0x98>)
 80177d4:	681a      	ldr	r2, [r3, #0]
 80177d6:	697b      	ldr	r3, [r7, #20]
 80177d8:	6a1b      	ldr	r3, [r3, #32]
 80177da:	1ad3      	subs	r3, r2, r3
 80177dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80177de:	697b      	ldr	r3, [r7, #20]
 80177e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80177e2:	697b      	ldr	r3, [r7, #20]
 80177e4:	7d5b      	ldrb	r3, [r3, #21]
 80177e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80177e8:	697b      	ldr	r3, [r7, #20]
 80177ea:	68db      	ldr	r3, [r3, #12]
 80177ec:	617b      	str	r3, [r7, #20]
 80177ee:	697b      	ldr	r3, [r7, #20]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d1dc      	bne.n	80177ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80177f4:	693b      	ldr	r3, [r7, #16]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d004      	beq.n	8017804 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80177fa:	6938      	ldr	r0, [r7, #16]
 80177fc:	f7ff fa5a 	bl	8016cb4 <tcp_abort>
 8017800:	e000      	b.n	8017804 <tcp_kill_prio+0x8c>
    return;
 8017802:	bf00      	nop
  }
}
 8017804:	3718      	adds	r7, #24
 8017806:	46bd      	mov	sp, r7
 8017808:	bd80      	pop	{r7, pc}
 801780a:	bf00      	nop
 801780c:	2000ba64 	.word	0x2000ba64
 8017810:	2000ba68 	.word	0x2000ba68

08017814 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b086      	sub	sp, #24
 8017818:	af00      	add	r7, sp, #0
 801781a:	4603      	mov	r3, r0
 801781c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801781e:	79fb      	ldrb	r3, [r7, #7]
 8017820:	2b08      	cmp	r3, #8
 8017822:	d009      	beq.n	8017838 <tcp_kill_state+0x24>
 8017824:	79fb      	ldrb	r3, [r7, #7]
 8017826:	2b09      	cmp	r3, #9
 8017828:	d006      	beq.n	8017838 <tcp_kill_state+0x24>
 801782a:	4b1a      	ldr	r3, [pc, #104]	; (8017894 <tcp_kill_state+0x80>)
 801782c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8017830:	4919      	ldr	r1, [pc, #100]	; (8017898 <tcp_kill_state+0x84>)
 8017832:	481a      	ldr	r0, [pc, #104]	; (801789c <tcp_kill_state+0x88>)
 8017834:	f005 ff60 	bl	801d6f8 <iprintf>

  inactivity = 0;
 8017838:	2300      	movs	r3, #0
 801783a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801783c:	2300      	movs	r3, #0
 801783e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017840:	4b17      	ldr	r3, [pc, #92]	; (80178a0 <tcp_kill_state+0x8c>)
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	617b      	str	r3, [r7, #20]
 8017846:	e017      	b.n	8017878 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017848:	697b      	ldr	r3, [r7, #20]
 801784a:	7d1b      	ldrb	r3, [r3, #20]
 801784c:	79fa      	ldrb	r2, [r7, #7]
 801784e:	429a      	cmp	r2, r3
 8017850:	d10f      	bne.n	8017872 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017852:	4b14      	ldr	r3, [pc, #80]	; (80178a4 <tcp_kill_state+0x90>)
 8017854:	681a      	ldr	r2, [r3, #0]
 8017856:	697b      	ldr	r3, [r7, #20]
 8017858:	6a1b      	ldr	r3, [r3, #32]
 801785a:	1ad3      	subs	r3, r2, r3
 801785c:	68fa      	ldr	r2, [r7, #12]
 801785e:	429a      	cmp	r2, r3
 8017860:	d807      	bhi.n	8017872 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017862:	4b10      	ldr	r3, [pc, #64]	; (80178a4 <tcp_kill_state+0x90>)
 8017864:	681a      	ldr	r2, [r3, #0]
 8017866:	697b      	ldr	r3, [r7, #20]
 8017868:	6a1b      	ldr	r3, [r3, #32]
 801786a:	1ad3      	subs	r3, r2, r3
 801786c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801786e:	697b      	ldr	r3, [r7, #20]
 8017870:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017872:	697b      	ldr	r3, [r7, #20]
 8017874:	68db      	ldr	r3, [r3, #12]
 8017876:	617b      	str	r3, [r7, #20]
 8017878:	697b      	ldr	r3, [r7, #20]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d1e4      	bne.n	8017848 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801787e:	693b      	ldr	r3, [r7, #16]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d003      	beq.n	801788c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017884:	2100      	movs	r1, #0
 8017886:	6938      	ldr	r0, [r7, #16]
 8017888:	f7ff f956 	bl	8016b38 <tcp_abandon>
  }
}
 801788c:	bf00      	nop
 801788e:	3718      	adds	r7, #24
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}
 8017894:	08020f38 	.word	0x08020f38
 8017898:	080214e0 	.word	0x080214e0
 801789c:	08020f98 	.word	0x08020f98
 80178a0:	2000ba64 	.word	0x2000ba64
 80178a4:	2000ba68 	.word	0x2000ba68

080178a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b084      	sub	sp, #16
 80178ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80178ae:	2300      	movs	r3, #0
 80178b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80178b2:	2300      	movs	r3, #0
 80178b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80178b6:	4b12      	ldr	r3, [pc, #72]	; (8017900 <tcp_kill_timewait+0x58>)
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	60fb      	str	r3, [r7, #12]
 80178bc:	e012      	b.n	80178e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80178be:	4b11      	ldr	r3, [pc, #68]	; (8017904 <tcp_kill_timewait+0x5c>)
 80178c0:	681a      	ldr	r2, [r3, #0]
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	6a1b      	ldr	r3, [r3, #32]
 80178c6:	1ad3      	subs	r3, r2, r3
 80178c8:	687a      	ldr	r2, [r7, #4]
 80178ca:	429a      	cmp	r2, r3
 80178cc:	d807      	bhi.n	80178de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80178ce:	4b0d      	ldr	r3, [pc, #52]	; (8017904 <tcp_kill_timewait+0x5c>)
 80178d0:	681a      	ldr	r2, [r3, #0]
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	6a1b      	ldr	r3, [r3, #32]
 80178d6:	1ad3      	subs	r3, r2, r3
 80178d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	68db      	ldr	r3, [r3, #12]
 80178e2:	60fb      	str	r3, [r7, #12]
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d1e9      	bne.n	80178be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80178ea:	68bb      	ldr	r3, [r7, #8]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d002      	beq.n	80178f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80178f0:	68b8      	ldr	r0, [r7, #8]
 80178f2:	f7ff f9df 	bl	8016cb4 <tcp_abort>
  }
}
 80178f6:	bf00      	nop
 80178f8:	3710      	adds	r7, #16
 80178fa:	46bd      	mov	sp, r7
 80178fc:	bd80      	pop	{r7, pc}
 80178fe:	bf00      	nop
 8017900:	2000ba74 	.word	0x2000ba74
 8017904:	2000ba68 	.word	0x2000ba68

08017908 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b082      	sub	sp, #8
 801790c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801790e:	4b10      	ldr	r3, [pc, #64]	; (8017950 <tcp_handle_closepend+0x48>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017914:	e014      	b.n	8017940 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	68db      	ldr	r3, [r3, #12]
 801791a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	8b5b      	ldrh	r3, [r3, #26]
 8017920:	f003 0308 	and.w	r3, r3, #8
 8017924:	2b00      	cmp	r3, #0
 8017926:	d009      	beq.n	801793c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	8b5b      	ldrh	r3, [r3, #26]
 801792c:	f023 0308 	bic.w	r3, r3, #8
 8017930:	b29a      	uxth	r2, r3
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	f7ff f86c 	bl	8016a14 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801793c:	683b      	ldr	r3, [r7, #0]
 801793e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	2b00      	cmp	r3, #0
 8017944:	d1e7      	bne.n	8017916 <tcp_handle_closepend+0xe>
  }
}
 8017946:	bf00      	nop
 8017948:	3708      	adds	r7, #8
 801794a:	46bd      	mov	sp, r7
 801794c:	bd80      	pop	{r7, pc}
 801794e:	bf00      	nop
 8017950:	2000ba64 	.word	0x2000ba64

08017954 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b084      	sub	sp, #16
 8017958:	af00      	add	r7, sp, #0
 801795a:	4603      	mov	r3, r0
 801795c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801795e:	2001      	movs	r0, #1
 8017960:	f7fd fbf8 	bl	8015154 <memp_malloc>
 8017964:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d126      	bne.n	80179ba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801796c:	f7ff ffcc 	bl	8017908 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017970:	f7ff ff9a 	bl	80178a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017974:	2001      	movs	r0, #1
 8017976:	f7fd fbed 	bl	8015154 <memp_malloc>
 801797a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d11b      	bne.n	80179ba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017982:	2009      	movs	r0, #9
 8017984:	f7ff ff46 	bl	8017814 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017988:	2001      	movs	r0, #1
 801798a:	f7fd fbe3 	bl	8015154 <memp_malloc>
 801798e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d111      	bne.n	80179ba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017996:	2008      	movs	r0, #8
 8017998:	f7ff ff3c 	bl	8017814 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801799c:	2001      	movs	r0, #1
 801799e:	f7fd fbd9 	bl	8015154 <memp_malloc>
 80179a2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d107      	bne.n	80179ba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80179aa:	79fb      	ldrb	r3, [r7, #7]
 80179ac:	4618      	mov	r0, r3
 80179ae:	f7ff fee3 	bl	8017778 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80179b2:	2001      	movs	r0, #1
 80179b4:	f7fd fbce 	bl	8015154 <memp_malloc>
 80179b8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d03f      	beq.n	8017a40 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80179c0:	229c      	movs	r2, #156	; 0x9c
 80179c2:	2100      	movs	r1, #0
 80179c4:	68f8      	ldr	r0, [r7, #12]
 80179c6:	f005 fa54 	bl	801ce72 <memset>
    pcb->prio = prio;
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	79fa      	ldrb	r2, [r7, #7]
 80179ce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80179d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80179e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	22ff      	movs	r2, #255	; 0xff
 80179ee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80179f6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	2206      	movs	r2, #6
 80179fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	2206      	movs	r2, #6
 8017a04:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017a0c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	2201      	movs	r2, #1
 8017a12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8017a16:	4b0d      	ldr	r3, [pc, #52]	; (8017a4c <tcp_alloc+0xf8>)
 8017a18:	681a      	ldr	r2, [r3, #0]
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017a1e:	4b0c      	ldr	r3, [pc, #48]	; (8017a50 <tcp_alloc+0xfc>)
 8017a20:	781a      	ldrb	r2, [r3, #0]
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017a2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	4a08      	ldr	r2, [pc, #32]	; (8017a54 <tcp_alloc+0x100>)
 8017a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	4a07      	ldr	r2, [pc, #28]	; (8017a58 <tcp_alloc+0x104>)
 8017a3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017a40:	68fb      	ldr	r3, [r7, #12]
}
 8017a42:	4618      	mov	r0, r3
 8017a44:	3710      	adds	r7, #16
 8017a46:	46bd      	mov	sp, r7
 8017a48:	bd80      	pop	{r7, pc}
 8017a4a:	bf00      	nop
 8017a4c:	2000ba68 	.word	0x2000ba68
 8017a50:	2000771a 	.word	0x2000771a
 8017a54:	0801770d 	.word	0x0801770d
 8017a58:	006ddd00 	.word	0x006ddd00

08017a5c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b082      	sub	sp, #8
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d107      	bne.n	8017a7a <tcp_pcb_purge+0x1e>
 8017a6a:	4b21      	ldr	r3, [pc, #132]	; (8017af0 <tcp_pcb_purge+0x94>)
 8017a6c:	f640 0251 	movw	r2, #2129	; 0x851
 8017a70:	4920      	ldr	r1, [pc, #128]	; (8017af4 <tcp_pcb_purge+0x98>)
 8017a72:	4821      	ldr	r0, [pc, #132]	; (8017af8 <tcp_pcb_purge+0x9c>)
 8017a74:	f005 fe40 	bl	801d6f8 <iprintf>
 8017a78:	e037      	b.n	8017aea <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	7d1b      	ldrb	r3, [r3, #20]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d033      	beq.n	8017aea <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017a86:	2b0a      	cmp	r3, #10
 8017a88:	d02f      	beq.n	8017aea <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8017a8e:	2b01      	cmp	r3, #1
 8017a90:	d02b      	beq.n	8017aea <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d007      	beq.n	8017aaa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	f7fe fa7a 	bl	8015f98 <pbuf_free>
      pcb->refused_data = NULL;
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	2200      	movs	r2, #0
 8017aa8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d002      	beq.n	8017ab8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017ab2:	6878      	ldr	r0, [r7, #4]
 8017ab4:	f000 f986 	bl	8017dc4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017abe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f7ff fdc9 	bl	801765c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f7ff fdc4 	bl	801765c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	66da      	str	r2, [r3, #108]	; 0x6c
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8017aea:	3708      	adds	r7, #8
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd80      	pop	{r7, pc}
 8017af0:	08020f38 	.word	0x08020f38
 8017af4:	080215a0 	.word	0x080215a0
 8017af8:	08020f98 	.word	0x08020f98

08017afc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b084      	sub	sp, #16
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
 8017b04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017b06:	683b      	ldr	r3, [r7, #0]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d106      	bne.n	8017b1a <tcp_pcb_remove+0x1e>
 8017b0c:	4b3e      	ldr	r3, [pc, #248]	; (8017c08 <tcp_pcb_remove+0x10c>)
 8017b0e:	f640 0283 	movw	r2, #2179	; 0x883
 8017b12:	493e      	ldr	r1, [pc, #248]	; (8017c0c <tcp_pcb_remove+0x110>)
 8017b14:	483e      	ldr	r0, [pc, #248]	; (8017c10 <tcp_pcb_remove+0x114>)
 8017b16:	f005 fdef 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d106      	bne.n	8017b2e <tcp_pcb_remove+0x32>
 8017b20:	4b39      	ldr	r3, [pc, #228]	; (8017c08 <tcp_pcb_remove+0x10c>)
 8017b22:	f640 0284 	movw	r2, #2180	; 0x884
 8017b26:	493b      	ldr	r1, [pc, #236]	; (8017c14 <tcp_pcb_remove+0x118>)
 8017b28:	4839      	ldr	r0, [pc, #228]	; (8017c10 <tcp_pcb_remove+0x114>)
 8017b2a:	f005 fde5 	bl	801d6f8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	683a      	ldr	r2, [r7, #0]
 8017b34:	429a      	cmp	r2, r3
 8017b36:	d105      	bne.n	8017b44 <tcp_pcb_remove+0x48>
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	68da      	ldr	r2, [r3, #12]
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	601a      	str	r2, [r3, #0]
 8017b42:	e013      	b.n	8017b6c <tcp_pcb_remove+0x70>
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	60fb      	str	r3, [r7, #12]
 8017b4a:	e00c      	b.n	8017b66 <tcp_pcb_remove+0x6a>
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	68db      	ldr	r3, [r3, #12]
 8017b50:	683a      	ldr	r2, [r7, #0]
 8017b52:	429a      	cmp	r2, r3
 8017b54:	d104      	bne.n	8017b60 <tcp_pcb_remove+0x64>
 8017b56:	683b      	ldr	r3, [r7, #0]
 8017b58:	68da      	ldr	r2, [r3, #12]
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	60da      	str	r2, [r3, #12]
 8017b5e:	e005      	b.n	8017b6c <tcp_pcb_remove+0x70>
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	68db      	ldr	r3, [r3, #12]
 8017b64:	60fb      	str	r3, [r7, #12]
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d1ef      	bne.n	8017b4c <tcp_pcb_remove+0x50>
 8017b6c:	683b      	ldr	r3, [r7, #0]
 8017b6e:	2200      	movs	r2, #0
 8017b70:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017b72:	6838      	ldr	r0, [r7, #0]
 8017b74:	f7ff ff72 	bl	8017a5c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017b78:	683b      	ldr	r3, [r7, #0]
 8017b7a:	7d1b      	ldrb	r3, [r3, #20]
 8017b7c:	2b0a      	cmp	r3, #10
 8017b7e:	d013      	beq.n	8017ba8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017b80:	683b      	ldr	r3, [r7, #0]
 8017b82:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017b84:	2b01      	cmp	r3, #1
 8017b86:	d00f      	beq.n	8017ba8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017b88:	683b      	ldr	r3, [r7, #0]
 8017b8a:	8b5b      	ldrh	r3, [r3, #26]
 8017b8c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d009      	beq.n	8017ba8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017b94:	683b      	ldr	r3, [r7, #0]
 8017b96:	8b5b      	ldrh	r3, [r3, #26]
 8017b98:	f043 0302 	orr.w	r3, r3, #2
 8017b9c:	b29a      	uxth	r2, r3
 8017b9e:	683b      	ldr	r3, [r7, #0]
 8017ba0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017ba2:	6838      	ldr	r0, [r7, #0]
 8017ba4:	f002 ff68 	bl	801aa78 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017ba8:	683b      	ldr	r3, [r7, #0]
 8017baa:	7d1b      	ldrb	r3, [r3, #20]
 8017bac:	2b01      	cmp	r3, #1
 8017bae:	d020      	beq.n	8017bf2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d006      	beq.n	8017bc6 <tcp_pcb_remove+0xca>
 8017bb8:	4b13      	ldr	r3, [pc, #76]	; (8017c08 <tcp_pcb_remove+0x10c>)
 8017bba:	f640 0293 	movw	r2, #2195	; 0x893
 8017bbe:	4916      	ldr	r1, [pc, #88]	; (8017c18 <tcp_pcb_remove+0x11c>)
 8017bc0:	4813      	ldr	r0, [pc, #76]	; (8017c10 <tcp_pcb_remove+0x114>)
 8017bc2:	f005 fd99 	bl	801d6f8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017bc6:	683b      	ldr	r3, [r7, #0]
 8017bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d006      	beq.n	8017bdc <tcp_pcb_remove+0xe0>
 8017bce:	4b0e      	ldr	r3, [pc, #56]	; (8017c08 <tcp_pcb_remove+0x10c>)
 8017bd0:	f640 0294 	movw	r2, #2196	; 0x894
 8017bd4:	4911      	ldr	r1, [pc, #68]	; (8017c1c <tcp_pcb_remove+0x120>)
 8017bd6:	480e      	ldr	r0, [pc, #56]	; (8017c10 <tcp_pcb_remove+0x114>)
 8017bd8:	f005 fd8e 	bl	801d6f8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d006      	beq.n	8017bf2 <tcp_pcb_remove+0xf6>
 8017be4:	4b08      	ldr	r3, [pc, #32]	; (8017c08 <tcp_pcb_remove+0x10c>)
 8017be6:	f640 0296 	movw	r2, #2198	; 0x896
 8017bea:	490d      	ldr	r1, [pc, #52]	; (8017c20 <tcp_pcb_remove+0x124>)
 8017bec:	4808      	ldr	r0, [pc, #32]	; (8017c10 <tcp_pcb_remove+0x114>)
 8017bee:	f005 fd83 	bl	801d6f8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017bf2:	683b      	ldr	r3, [r7, #0]
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017bf8:	683b      	ldr	r3, [r7, #0]
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8017bfe:	bf00      	nop
 8017c00:	3710      	adds	r7, #16
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bd80      	pop	{r7, pc}
 8017c06:	bf00      	nop
 8017c08:	08020f38 	.word	0x08020f38
 8017c0c:	080215bc 	.word	0x080215bc
 8017c10:	08020f98 	.word	0x08020f98
 8017c14:	080215d8 	.word	0x080215d8
 8017c18:	080215f8 	.word	0x080215f8
 8017c1c:	08021610 	.word	0x08021610
 8017c20:	0802162c 	.word	0x0802162c

08017c24 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b082      	sub	sp, #8
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d106      	bne.n	8017c40 <tcp_next_iss+0x1c>
 8017c32:	4b0a      	ldr	r3, [pc, #40]	; (8017c5c <tcp_next_iss+0x38>)
 8017c34:	f640 02af 	movw	r2, #2223	; 0x8af
 8017c38:	4909      	ldr	r1, [pc, #36]	; (8017c60 <tcp_next_iss+0x3c>)
 8017c3a:	480a      	ldr	r0, [pc, #40]	; (8017c64 <tcp_next_iss+0x40>)
 8017c3c:	f005 fd5c 	bl	801d6f8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017c40:	4b09      	ldr	r3, [pc, #36]	; (8017c68 <tcp_next_iss+0x44>)
 8017c42:	681a      	ldr	r2, [r3, #0]
 8017c44:	4b09      	ldr	r3, [pc, #36]	; (8017c6c <tcp_next_iss+0x48>)
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	4413      	add	r3, r2
 8017c4a:	4a07      	ldr	r2, [pc, #28]	; (8017c68 <tcp_next_iss+0x44>)
 8017c4c:	6013      	str	r3, [r2, #0]
  return iss;
 8017c4e:	4b06      	ldr	r3, [pc, #24]	; (8017c68 <tcp_next_iss+0x44>)
 8017c50:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017c52:	4618      	mov	r0, r3
 8017c54:	3708      	adds	r7, #8
 8017c56:	46bd      	mov	sp, r7
 8017c58:	bd80      	pop	{r7, pc}
 8017c5a:	bf00      	nop
 8017c5c:	08020f38 	.word	0x08020f38
 8017c60:	08021644 	.word	0x08021644
 8017c64:	08020f98 	.word	0x08020f98
 8017c68:	20000030 	.word	0x20000030
 8017c6c:	2000ba68 	.word	0x2000ba68

08017c70 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b086      	sub	sp, #24
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	4603      	mov	r3, r0
 8017c78:	60b9      	str	r1, [r7, #8]
 8017c7a:	607a      	str	r2, [r7, #4]
 8017c7c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d106      	bne.n	8017c92 <tcp_eff_send_mss_netif+0x22>
 8017c84:	4b14      	ldr	r3, [pc, #80]	; (8017cd8 <tcp_eff_send_mss_netif+0x68>)
 8017c86:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8017c8a:	4914      	ldr	r1, [pc, #80]	; (8017cdc <tcp_eff_send_mss_netif+0x6c>)
 8017c8c:	4814      	ldr	r0, [pc, #80]	; (8017ce0 <tcp_eff_send_mss_netif+0x70>)
 8017c8e:	f005 fd33 	bl	801d6f8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017c92:	68bb      	ldr	r3, [r7, #8]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d101      	bne.n	8017c9c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017c98:	89fb      	ldrh	r3, [r7, #14]
 8017c9a:	e019      	b.n	8017cd0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017c9c:	68bb      	ldr	r3, [r7, #8]
 8017c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ca0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017ca2:	8afb      	ldrh	r3, [r7, #22]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d012      	beq.n	8017cce <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017ca8:	2328      	movs	r3, #40	; 0x28
 8017caa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017cac:	8afa      	ldrh	r2, [r7, #22]
 8017cae:	8abb      	ldrh	r3, [r7, #20]
 8017cb0:	429a      	cmp	r2, r3
 8017cb2:	d904      	bls.n	8017cbe <tcp_eff_send_mss_netif+0x4e>
 8017cb4:	8afa      	ldrh	r2, [r7, #22]
 8017cb6:	8abb      	ldrh	r3, [r7, #20]
 8017cb8:	1ad3      	subs	r3, r2, r3
 8017cba:	b29b      	uxth	r3, r3
 8017cbc:	e000      	b.n	8017cc0 <tcp_eff_send_mss_netif+0x50>
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017cc2:	8a7a      	ldrh	r2, [r7, #18]
 8017cc4:	89fb      	ldrh	r3, [r7, #14]
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	bf28      	it	cs
 8017cca:	4613      	movcs	r3, r2
 8017ccc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017cce:	89fb      	ldrh	r3, [r7, #14]
}
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	3718      	adds	r7, #24
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	bd80      	pop	{r7, pc}
 8017cd8:	08020f38 	.word	0x08020f38
 8017cdc:	08021660 	.word	0x08021660
 8017ce0:	08020f98 	.word	0x08020f98

08017ce4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b084      	sub	sp, #16
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]
 8017cec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017cee:	683b      	ldr	r3, [r7, #0]
 8017cf0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d119      	bne.n	8017d2c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8017cf8:	4b10      	ldr	r3, [pc, #64]	; (8017d3c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8017cfa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8017cfe:	4910      	ldr	r1, [pc, #64]	; (8017d40 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017d00:	4810      	ldr	r0, [pc, #64]	; (8017d44 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017d02:	f005 fcf9 	bl	801d6f8 <iprintf>

  while (pcb != NULL) {
 8017d06:	e011      	b.n	8017d2c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	681a      	ldr	r2, [r3, #0]
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	429a      	cmp	r2, r3
 8017d12:	d108      	bne.n	8017d26 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	68db      	ldr	r3, [r3, #12]
 8017d18:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8017d1a:	68f8      	ldr	r0, [r7, #12]
 8017d1c:	f7fe ffca 	bl	8016cb4 <tcp_abort>
      pcb = next;
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	60fb      	str	r3, [r7, #12]
 8017d24:	e002      	b.n	8017d2c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	68db      	ldr	r3, [r3, #12]
 8017d2a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d1ea      	bne.n	8017d08 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017d32:	bf00      	nop
 8017d34:	3710      	adds	r7, #16
 8017d36:	46bd      	mov	sp, r7
 8017d38:	bd80      	pop	{r7, pc}
 8017d3a:	bf00      	nop
 8017d3c:	08020f38 	.word	0x08020f38
 8017d40:	08021688 	.word	0x08021688
 8017d44:	08020f98 	.word	0x08020f98

08017d48 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b084      	sub	sp, #16
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
 8017d50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d02a      	beq.n	8017dae <tcp_netif_ip_addr_changed+0x66>
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d026      	beq.n	8017dae <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017d60:	4b15      	ldr	r3, [pc, #84]	; (8017db8 <tcp_netif_ip_addr_changed+0x70>)
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	4619      	mov	r1, r3
 8017d66:	6878      	ldr	r0, [r7, #4]
 8017d68:	f7ff ffbc 	bl	8017ce4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017d6c:	4b13      	ldr	r3, [pc, #76]	; (8017dbc <tcp_netif_ip_addr_changed+0x74>)
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	4619      	mov	r1, r3
 8017d72:	6878      	ldr	r0, [r7, #4]
 8017d74:	f7ff ffb6 	bl	8017ce4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017d78:	683b      	ldr	r3, [r7, #0]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d017      	beq.n	8017dae <tcp_netif_ip_addr_changed+0x66>
 8017d7e:	683b      	ldr	r3, [r7, #0]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d013      	beq.n	8017dae <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017d86:	4b0e      	ldr	r3, [pc, #56]	; (8017dc0 <tcp_netif_ip_addr_changed+0x78>)
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	60fb      	str	r3, [r7, #12]
 8017d8c:	e00c      	b.n	8017da8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	681a      	ldr	r2, [r3, #0]
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d103      	bne.n	8017da2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8017d9a:	683b      	ldr	r3, [r7, #0]
 8017d9c:	681a      	ldr	r2, [r3, #0]
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	68db      	ldr	r3, [r3, #12]
 8017da6:	60fb      	str	r3, [r7, #12]
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d1ef      	bne.n	8017d8e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8017dae:	bf00      	nop
 8017db0:	3710      	adds	r7, #16
 8017db2:	46bd      	mov	sp, r7
 8017db4:	bd80      	pop	{r7, pc}
 8017db6:	bf00      	nop
 8017db8:	2000ba64 	.word	0x2000ba64
 8017dbc:	2000ba70 	.word	0x2000ba70
 8017dc0:	2000ba6c 	.word	0x2000ba6c

08017dc4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b082      	sub	sp, #8
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d007      	beq.n	8017de4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017dd8:	4618      	mov	r0, r3
 8017dda:	f7ff fc3f 	bl	801765c <tcp_segs_free>
    pcb->ooseq = NULL;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	2200      	movs	r2, #0
 8017de2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017de4:	bf00      	nop
 8017de6:	3708      	adds	r7, #8
 8017de8:	46bd      	mov	sp, r7
 8017dea:	bd80      	pop	{r7, pc}

08017dec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8017dec:	b590      	push	{r4, r7, lr}
 8017dee:	b08d      	sub	sp, #52	; 0x34
 8017df0:	af04      	add	r7, sp, #16
 8017df2:	6078      	str	r0, [r7, #4]
 8017df4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d105      	bne.n	8017e08 <tcp_input+0x1c>
 8017dfc:	4b9b      	ldr	r3, [pc, #620]	; (801806c <tcp_input+0x280>)
 8017dfe:	2283      	movs	r2, #131	; 0x83
 8017e00:	499b      	ldr	r1, [pc, #620]	; (8018070 <tcp_input+0x284>)
 8017e02:	489c      	ldr	r0, [pc, #624]	; (8018074 <tcp_input+0x288>)
 8017e04:	f005 fc78 	bl	801d6f8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	685b      	ldr	r3, [r3, #4]
 8017e0c:	4a9a      	ldr	r2, [pc, #616]	; (8018078 <tcp_input+0x28c>)
 8017e0e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	895b      	ldrh	r3, [r3, #10]
 8017e14:	2b13      	cmp	r3, #19
 8017e16:	f240 83c4 	bls.w	80185a2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017e1a:	4b98      	ldr	r3, [pc, #608]	; (801807c <tcp_input+0x290>)
 8017e1c:	695a      	ldr	r2, [r3, #20]
 8017e1e:	4b97      	ldr	r3, [pc, #604]	; (801807c <tcp_input+0x290>)
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	4619      	mov	r1, r3
 8017e24:	4610      	mov	r0, r2
 8017e26:	f7fb fe81 	bl	8013b2c <ip4_addr_isbroadcast_u32>
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	f040 83ba 	bne.w	80185a6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017e32:	4b92      	ldr	r3, [pc, #584]	; (801807c <tcp_input+0x290>)
 8017e34:	695b      	ldr	r3, [r3, #20]
 8017e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017e3a:	2be0      	cmp	r3, #224	; 0xe0
 8017e3c:	f000 83b3 	beq.w	80185a6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8017e40:	4b8d      	ldr	r3, [pc, #564]	; (8018078 <tcp_input+0x28c>)
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	899b      	ldrh	r3, [r3, #12]
 8017e46:	b29b      	uxth	r3, r3
 8017e48:	4618      	mov	r0, r3
 8017e4a:	f7f8 fa3d 	bl	80102c8 <lwip_htons>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	0b1b      	lsrs	r3, r3, #12
 8017e52:	b29b      	uxth	r3, r3
 8017e54:	b2db      	uxtb	r3, r3
 8017e56:	009b      	lsls	r3, r3, #2
 8017e58:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8017e5a:	7cbb      	ldrb	r3, [r7, #18]
 8017e5c:	2b13      	cmp	r3, #19
 8017e5e:	f240 83a2 	bls.w	80185a6 <tcp_input+0x7ba>
 8017e62:	7cbb      	ldrb	r3, [r7, #18]
 8017e64:	b29a      	uxth	r2, r3
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	891b      	ldrh	r3, [r3, #8]
 8017e6a:	429a      	cmp	r2, r3
 8017e6c:	f200 839b 	bhi.w	80185a6 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8017e70:	7cbb      	ldrb	r3, [r7, #18]
 8017e72:	b29b      	uxth	r3, r3
 8017e74:	3b14      	subs	r3, #20
 8017e76:	b29a      	uxth	r2, r3
 8017e78:	4b81      	ldr	r3, [pc, #516]	; (8018080 <tcp_input+0x294>)
 8017e7a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8017e7c:	4b81      	ldr	r3, [pc, #516]	; (8018084 <tcp_input+0x298>)
 8017e7e:	2200      	movs	r2, #0
 8017e80:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	895a      	ldrh	r2, [r3, #10]
 8017e86:	7cbb      	ldrb	r3, [r7, #18]
 8017e88:	b29b      	uxth	r3, r3
 8017e8a:	429a      	cmp	r2, r3
 8017e8c:	d309      	bcc.n	8017ea2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8017e8e:	4b7c      	ldr	r3, [pc, #496]	; (8018080 <tcp_input+0x294>)
 8017e90:	881a      	ldrh	r2, [r3, #0]
 8017e92:	4b7d      	ldr	r3, [pc, #500]	; (8018088 <tcp_input+0x29c>)
 8017e94:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8017e96:	7cbb      	ldrb	r3, [r7, #18]
 8017e98:	4619      	mov	r1, r3
 8017e9a:	6878      	ldr	r0, [r7, #4]
 8017e9c:	f7fd fff6 	bl	8015e8c <pbuf_remove_header>
 8017ea0:	e04e      	b.n	8017f40 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d105      	bne.n	8017eb6 <tcp_input+0xca>
 8017eaa:	4b70      	ldr	r3, [pc, #448]	; (801806c <tcp_input+0x280>)
 8017eac:	22c2      	movs	r2, #194	; 0xc2
 8017eae:	4977      	ldr	r1, [pc, #476]	; (801808c <tcp_input+0x2a0>)
 8017eb0:	4870      	ldr	r0, [pc, #448]	; (8018074 <tcp_input+0x288>)
 8017eb2:	f005 fc21 	bl	801d6f8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8017eb6:	2114      	movs	r1, #20
 8017eb8:	6878      	ldr	r0, [r7, #4]
 8017eba:	f7fd ffe7 	bl	8015e8c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	895a      	ldrh	r2, [r3, #10]
 8017ec2:	4b71      	ldr	r3, [pc, #452]	; (8018088 <tcp_input+0x29c>)
 8017ec4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8017ec6:	4b6e      	ldr	r3, [pc, #440]	; (8018080 <tcp_input+0x294>)
 8017ec8:	881a      	ldrh	r2, [r3, #0]
 8017eca:	4b6f      	ldr	r3, [pc, #444]	; (8018088 <tcp_input+0x29c>)
 8017ecc:	881b      	ldrh	r3, [r3, #0]
 8017ece:	1ad3      	subs	r3, r2, r3
 8017ed0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017ed2:	4b6d      	ldr	r3, [pc, #436]	; (8018088 <tcp_input+0x29c>)
 8017ed4:	881b      	ldrh	r3, [r3, #0]
 8017ed6:	4619      	mov	r1, r3
 8017ed8:	6878      	ldr	r0, [r7, #4]
 8017eda:	f7fd ffd7 	bl	8015e8c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	895b      	ldrh	r3, [r3, #10]
 8017ee4:	8a3a      	ldrh	r2, [r7, #16]
 8017ee6:	429a      	cmp	r2, r3
 8017ee8:	f200 835f 	bhi.w	80185aa <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	685b      	ldr	r3, [r3, #4]
 8017ef2:	4a64      	ldr	r2, [pc, #400]	; (8018084 <tcp_input+0x298>)
 8017ef4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	8a3a      	ldrh	r2, [r7, #16]
 8017efc:	4611      	mov	r1, r2
 8017efe:	4618      	mov	r0, r3
 8017f00:	f7fd ffc4 	bl	8015e8c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	891a      	ldrh	r2, [r3, #8]
 8017f08:	8a3b      	ldrh	r3, [r7, #16]
 8017f0a:	1ad3      	subs	r3, r2, r3
 8017f0c:	b29a      	uxth	r2, r3
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	895b      	ldrh	r3, [r3, #10]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d005      	beq.n	8017f26 <tcp_input+0x13a>
 8017f1a:	4b54      	ldr	r3, [pc, #336]	; (801806c <tcp_input+0x280>)
 8017f1c:	22df      	movs	r2, #223	; 0xdf
 8017f1e:	495c      	ldr	r1, [pc, #368]	; (8018090 <tcp_input+0x2a4>)
 8017f20:	4854      	ldr	r0, [pc, #336]	; (8018074 <tcp_input+0x288>)
 8017f22:	f005 fbe9 	bl	801d6f8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	891a      	ldrh	r2, [r3, #8]
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	891b      	ldrh	r3, [r3, #8]
 8017f30:	429a      	cmp	r2, r3
 8017f32:	d005      	beq.n	8017f40 <tcp_input+0x154>
 8017f34:	4b4d      	ldr	r3, [pc, #308]	; (801806c <tcp_input+0x280>)
 8017f36:	22e0      	movs	r2, #224	; 0xe0
 8017f38:	4956      	ldr	r1, [pc, #344]	; (8018094 <tcp_input+0x2a8>)
 8017f3a:	484e      	ldr	r0, [pc, #312]	; (8018074 <tcp_input+0x288>)
 8017f3c:	f005 fbdc 	bl	801d6f8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017f40:	4b4d      	ldr	r3, [pc, #308]	; (8018078 <tcp_input+0x28c>)
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	881b      	ldrh	r3, [r3, #0]
 8017f46:	b29a      	uxth	r2, r3
 8017f48:	4b4b      	ldr	r3, [pc, #300]	; (8018078 <tcp_input+0x28c>)
 8017f4a:	681c      	ldr	r4, [r3, #0]
 8017f4c:	4610      	mov	r0, r2
 8017f4e:	f7f8 f9bb 	bl	80102c8 <lwip_htons>
 8017f52:	4603      	mov	r3, r0
 8017f54:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017f56:	4b48      	ldr	r3, [pc, #288]	; (8018078 <tcp_input+0x28c>)
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	885b      	ldrh	r3, [r3, #2]
 8017f5c:	b29a      	uxth	r2, r3
 8017f5e:	4b46      	ldr	r3, [pc, #280]	; (8018078 <tcp_input+0x28c>)
 8017f60:	681c      	ldr	r4, [r3, #0]
 8017f62:	4610      	mov	r0, r2
 8017f64:	f7f8 f9b0 	bl	80102c8 <lwip_htons>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017f6c:	4b42      	ldr	r3, [pc, #264]	; (8018078 <tcp_input+0x28c>)
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	685a      	ldr	r2, [r3, #4]
 8017f72:	4b41      	ldr	r3, [pc, #260]	; (8018078 <tcp_input+0x28c>)
 8017f74:	681c      	ldr	r4, [r3, #0]
 8017f76:	4610      	mov	r0, r2
 8017f78:	f7f8 f9bb 	bl	80102f2 <lwip_htonl>
 8017f7c:	4603      	mov	r3, r0
 8017f7e:	6063      	str	r3, [r4, #4]
 8017f80:	6863      	ldr	r3, [r4, #4]
 8017f82:	4a45      	ldr	r2, [pc, #276]	; (8018098 <tcp_input+0x2ac>)
 8017f84:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017f86:	4b3c      	ldr	r3, [pc, #240]	; (8018078 <tcp_input+0x28c>)
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	689a      	ldr	r2, [r3, #8]
 8017f8c:	4b3a      	ldr	r3, [pc, #232]	; (8018078 <tcp_input+0x28c>)
 8017f8e:	681c      	ldr	r4, [r3, #0]
 8017f90:	4610      	mov	r0, r2
 8017f92:	f7f8 f9ae 	bl	80102f2 <lwip_htonl>
 8017f96:	4603      	mov	r3, r0
 8017f98:	60a3      	str	r3, [r4, #8]
 8017f9a:	68a3      	ldr	r3, [r4, #8]
 8017f9c:	4a3f      	ldr	r2, [pc, #252]	; (801809c <tcp_input+0x2b0>)
 8017f9e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017fa0:	4b35      	ldr	r3, [pc, #212]	; (8018078 <tcp_input+0x28c>)
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	89db      	ldrh	r3, [r3, #14]
 8017fa6:	b29a      	uxth	r2, r3
 8017fa8:	4b33      	ldr	r3, [pc, #204]	; (8018078 <tcp_input+0x28c>)
 8017faa:	681c      	ldr	r4, [r3, #0]
 8017fac:	4610      	mov	r0, r2
 8017fae:	f7f8 f98b 	bl	80102c8 <lwip_htons>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017fb6:	4b30      	ldr	r3, [pc, #192]	; (8018078 <tcp_input+0x28c>)
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	899b      	ldrh	r3, [r3, #12]
 8017fbc:	b29b      	uxth	r3, r3
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	f7f8 f982 	bl	80102c8 <lwip_htons>
 8017fc4:	4603      	mov	r3, r0
 8017fc6:	b2db      	uxtb	r3, r3
 8017fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017fcc:	b2da      	uxtb	r2, r3
 8017fce:	4b34      	ldr	r3, [pc, #208]	; (80180a0 <tcp_input+0x2b4>)
 8017fd0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	891a      	ldrh	r2, [r3, #8]
 8017fd6:	4b33      	ldr	r3, [pc, #204]	; (80180a4 <tcp_input+0x2b8>)
 8017fd8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017fda:	4b31      	ldr	r3, [pc, #196]	; (80180a0 <tcp_input+0x2b4>)
 8017fdc:	781b      	ldrb	r3, [r3, #0]
 8017fde:	f003 0303 	and.w	r3, r3, #3
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d00c      	beq.n	8018000 <tcp_input+0x214>
    tcplen++;
 8017fe6:	4b2f      	ldr	r3, [pc, #188]	; (80180a4 <tcp_input+0x2b8>)
 8017fe8:	881b      	ldrh	r3, [r3, #0]
 8017fea:	3301      	adds	r3, #1
 8017fec:	b29a      	uxth	r2, r3
 8017fee:	4b2d      	ldr	r3, [pc, #180]	; (80180a4 <tcp_input+0x2b8>)
 8017ff0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	891a      	ldrh	r2, [r3, #8]
 8017ff6:	4b2b      	ldr	r3, [pc, #172]	; (80180a4 <tcp_input+0x2b8>)
 8017ff8:	881b      	ldrh	r3, [r3, #0]
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	f200 82d7 	bhi.w	80185ae <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8018000:	2300      	movs	r3, #0
 8018002:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018004:	4b28      	ldr	r3, [pc, #160]	; (80180a8 <tcp_input+0x2bc>)
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	61fb      	str	r3, [r7, #28]
 801800a:	e09d      	b.n	8018148 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801800c:	69fb      	ldr	r3, [r7, #28]
 801800e:	7d1b      	ldrb	r3, [r3, #20]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d105      	bne.n	8018020 <tcp_input+0x234>
 8018014:	4b15      	ldr	r3, [pc, #84]	; (801806c <tcp_input+0x280>)
 8018016:	22fb      	movs	r2, #251	; 0xfb
 8018018:	4924      	ldr	r1, [pc, #144]	; (80180ac <tcp_input+0x2c0>)
 801801a:	4816      	ldr	r0, [pc, #88]	; (8018074 <tcp_input+0x288>)
 801801c:	f005 fb6c 	bl	801d6f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8018020:	69fb      	ldr	r3, [r7, #28]
 8018022:	7d1b      	ldrb	r3, [r3, #20]
 8018024:	2b0a      	cmp	r3, #10
 8018026:	d105      	bne.n	8018034 <tcp_input+0x248>
 8018028:	4b10      	ldr	r3, [pc, #64]	; (801806c <tcp_input+0x280>)
 801802a:	22fc      	movs	r2, #252	; 0xfc
 801802c:	4920      	ldr	r1, [pc, #128]	; (80180b0 <tcp_input+0x2c4>)
 801802e:	4811      	ldr	r0, [pc, #68]	; (8018074 <tcp_input+0x288>)
 8018030:	f005 fb62 	bl	801d6f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018034:	69fb      	ldr	r3, [r7, #28]
 8018036:	7d1b      	ldrb	r3, [r3, #20]
 8018038:	2b01      	cmp	r3, #1
 801803a:	d105      	bne.n	8018048 <tcp_input+0x25c>
 801803c:	4b0b      	ldr	r3, [pc, #44]	; (801806c <tcp_input+0x280>)
 801803e:	22fd      	movs	r2, #253	; 0xfd
 8018040:	491c      	ldr	r1, [pc, #112]	; (80180b4 <tcp_input+0x2c8>)
 8018042:	480c      	ldr	r0, [pc, #48]	; (8018074 <tcp_input+0x288>)
 8018044:	f005 fb58 	bl	801d6f8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018048:	69fb      	ldr	r3, [r7, #28]
 801804a:	7a1b      	ldrb	r3, [r3, #8]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d033      	beq.n	80180b8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018050:	69fb      	ldr	r3, [r7, #28]
 8018052:	7a1a      	ldrb	r2, [r3, #8]
 8018054:	4b09      	ldr	r3, [pc, #36]	; (801807c <tcp_input+0x290>)
 8018056:	685b      	ldr	r3, [r3, #4]
 8018058:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801805c:	3301      	adds	r3, #1
 801805e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018060:	429a      	cmp	r2, r3
 8018062:	d029      	beq.n	80180b8 <tcp_input+0x2cc>
      prev = pcb;
 8018064:	69fb      	ldr	r3, [r7, #28]
 8018066:	61bb      	str	r3, [r7, #24]
      continue;
 8018068:	e06b      	b.n	8018142 <tcp_input+0x356>
 801806a:	bf00      	nop
 801806c:	080216bc 	.word	0x080216bc
 8018070:	0802170c 	.word	0x0802170c
 8018074:	08021724 	.word	0x08021724
 8018078:	2000772c 	.word	0x2000772c
 801807c:	2000897c 	.word	0x2000897c
 8018080:	20007730 	.word	0x20007730
 8018084:	20007734 	.word	0x20007734
 8018088:	20007732 	.word	0x20007732
 801808c:	0802174c 	.word	0x0802174c
 8018090:	0802175c 	.word	0x0802175c
 8018094:	08021768 	.word	0x08021768
 8018098:	2000773c 	.word	0x2000773c
 801809c:	20007740 	.word	0x20007740
 80180a0:	20007748 	.word	0x20007748
 80180a4:	20007746 	.word	0x20007746
 80180a8:	2000ba64 	.word	0x2000ba64
 80180ac:	08021788 	.word	0x08021788
 80180b0:	080217b0 	.word	0x080217b0
 80180b4:	080217dc 	.word	0x080217dc
    }

    if (pcb->remote_port == tcphdr->src &&
 80180b8:	69fb      	ldr	r3, [r7, #28]
 80180ba:	8b1a      	ldrh	r2, [r3, #24]
 80180bc:	4b94      	ldr	r3, [pc, #592]	; (8018310 <tcp_input+0x524>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	881b      	ldrh	r3, [r3, #0]
 80180c2:	b29b      	uxth	r3, r3
 80180c4:	429a      	cmp	r2, r3
 80180c6:	d13a      	bne.n	801813e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80180c8:	69fb      	ldr	r3, [r7, #28]
 80180ca:	8ada      	ldrh	r2, [r3, #22]
 80180cc:	4b90      	ldr	r3, [pc, #576]	; (8018310 <tcp_input+0x524>)
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	885b      	ldrh	r3, [r3, #2]
 80180d2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80180d4:	429a      	cmp	r2, r3
 80180d6:	d132      	bne.n	801813e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80180d8:	69fb      	ldr	r3, [r7, #28]
 80180da:	685a      	ldr	r2, [r3, #4]
 80180dc:	4b8d      	ldr	r3, [pc, #564]	; (8018314 <tcp_input+0x528>)
 80180de:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80180e0:	429a      	cmp	r2, r3
 80180e2:	d12c      	bne.n	801813e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80180e4:	69fb      	ldr	r3, [r7, #28]
 80180e6:	681a      	ldr	r2, [r3, #0]
 80180e8:	4b8a      	ldr	r3, [pc, #552]	; (8018314 <tcp_input+0x528>)
 80180ea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80180ec:	429a      	cmp	r2, r3
 80180ee:	d126      	bne.n	801813e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80180f0:	69fb      	ldr	r3, [r7, #28]
 80180f2:	68db      	ldr	r3, [r3, #12]
 80180f4:	69fa      	ldr	r2, [r7, #28]
 80180f6:	429a      	cmp	r2, r3
 80180f8:	d106      	bne.n	8018108 <tcp_input+0x31c>
 80180fa:	4b87      	ldr	r3, [pc, #540]	; (8018318 <tcp_input+0x52c>)
 80180fc:	f240 120d 	movw	r2, #269	; 0x10d
 8018100:	4986      	ldr	r1, [pc, #536]	; (801831c <tcp_input+0x530>)
 8018102:	4887      	ldr	r0, [pc, #540]	; (8018320 <tcp_input+0x534>)
 8018104:	f005 faf8 	bl	801d6f8 <iprintf>
      if (prev != NULL) {
 8018108:	69bb      	ldr	r3, [r7, #24]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d00a      	beq.n	8018124 <tcp_input+0x338>
        prev->next = pcb->next;
 801810e:	69fb      	ldr	r3, [r7, #28]
 8018110:	68da      	ldr	r2, [r3, #12]
 8018112:	69bb      	ldr	r3, [r7, #24]
 8018114:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8018116:	4b83      	ldr	r3, [pc, #524]	; (8018324 <tcp_input+0x538>)
 8018118:	681a      	ldr	r2, [r3, #0]
 801811a:	69fb      	ldr	r3, [r7, #28]
 801811c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801811e:	4a81      	ldr	r2, [pc, #516]	; (8018324 <tcp_input+0x538>)
 8018120:	69fb      	ldr	r3, [r7, #28]
 8018122:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018124:	69fb      	ldr	r3, [r7, #28]
 8018126:	68db      	ldr	r3, [r3, #12]
 8018128:	69fa      	ldr	r2, [r7, #28]
 801812a:	429a      	cmp	r2, r3
 801812c:	d111      	bne.n	8018152 <tcp_input+0x366>
 801812e:	4b7a      	ldr	r3, [pc, #488]	; (8018318 <tcp_input+0x52c>)
 8018130:	f240 1215 	movw	r2, #277	; 0x115
 8018134:	497c      	ldr	r1, [pc, #496]	; (8018328 <tcp_input+0x53c>)
 8018136:	487a      	ldr	r0, [pc, #488]	; (8018320 <tcp_input+0x534>)
 8018138:	f005 fade 	bl	801d6f8 <iprintf>
      break;
 801813c:	e009      	b.n	8018152 <tcp_input+0x366>
    }
    prev = pcb;
 801813e:	69fb      	ldr	r3, [r7, #28]
 8018140:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018142:	69fb      	ldr	r3, [r7, #28]
 8018144:	68db      	ldr	r3, [r3, #12]
 8018146:	61fb      	str	r3, [r7, #28]
 8018148:	69fb      	ldr	r3, [r7, #28]
 801814a:	2b00      	cmp	r3, #0
 801814c:	f47f af5e 	bne.w	801800c <tcp_input+0x220>
 8018150:	e000      	b.n	8018154 <tcp_input+0x368>
      break;
 8018152:	bf00      	nop
  }

  if (pcb == NULL) {
 8018154:	69fb      	ldr	r3, [r7, #28]
 8018156:	2b00      	cmp	r3, #0
 8018158:	f040 8095 	bne.w	8018286 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801815c:	4b73      	ldr	r3, [pc, #460]	; (801832c <tcp_input+0x540>)
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	61fb      	str	r3, [r7, #28]
 8018162:	e03f      	b.n	80181e4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018164:	69fb      	ldr	r3, [r7, #28]
 8018166:	7d1b      	ldrb	r3, [r3, #20]
 8018168:	2b0a      	cmp	r3, #10
 801816a:	d006      	beq.n	801817a <tcp_input+0x38e>
 801816c:	4b6a      	ldr	r3, [pc, #424]	; (8018318 <tcp_input+0x52c>)
 801816e:	f240 121f 	movw	r2, #287	; 0x11f
 8018172:	496f      	ldr	r1, [pc, #444]	; (8018330 <tcp_input+0x544>)
 8018174:	486a      	ldr	r0, [pc, #424]	; (8018320 <tcp_input+0x534>)
 8018176:	f005 fabf 	bl	801d6f8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801817a:	69fb      	ldr	r3, [r7, #28]
 801817c:	7a1b      	ldrb	r3, [r3, #8]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d009      	beq.n	8018196 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018182:	69fb      	ldr	r3, [r7, #28]
 8018184:	7a1a      	ldrb	r2, [r3, #8]
 8018186:	4b63      	ldr	r3, [pc, #396]	; (8018314 <tcp_input+0x528>)
 8018188:	685b      	ldr	r3, [r3, #4]
 801818a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801818e:	3301      	adds	r3, #1
 8018190:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018192:	429a      	cmp	r2, r3
 8018194:	d122      	bne.n	80181dc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8018196:	69fb      	ldr	r3, [r7, #28]
 8018198:	8b1a      	ldrh	r2, [r3, #24]
 801819a:	4b5d      	ldr	r3, [pc, #372]	; (8018310 <tcp_input+0x524>)
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	881b      	ldrh	r3, [r3, #0]
 80181a0:	b29b      	uxth	r3, r3
 80181a2:	429a      	cmp	r2, r3
 80181a4:	d11b      	bne.n	80181de <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80181a6:	69fb      	ldr	r3, [r7, #28]
 80181a8:	8ada      	ldrh	r2, [r3, #22]
 80181aa:	4b59      	ldr	r3, [pc, #356]	; (8018310 <tcp_input+0x524>)
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	885b      	ldrh	r3, [r3, #2]
 80181b0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80181b2:	429a      	cmp	r2, r3
 80181b4:	d113      	bne.n	80181de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80181b6:	69fb      	ldr	r3, [r7, #28]
 80181b8:	685a      	ldr	r2, [r3, #4]
 80181ba:	4b56      	ldr	r3, [pc, #344]	; (8018314 <tcp_input+0x528>)
 80181bc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80181be:	429a      	cmp	r2, r3
 80181c0:	d10d      	bne.n	80181de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80181c2:	69fb      	ldr	r3, [r7, #28]
 80181c4:	681a      	ldr	r2, [r3, #0]
 80181c6:	4b53      	ldr	r3, [pc, #332]	; (8018314 <tcp_input+0x528>)
 80181c8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80181ca:	429a      	cmp	r2, r3
 80181cc:	d107      	bne.n	80181de <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80181ce:	69f8      	ldr	r0, [r7, #28]
 80181d0:	f000 fb52 	bl	8018878 <tcp_timewait_input>
        }
        pbuf_free(p);
 80181d4:	6878      	ldr	r0, [r7, #4]
 80181d6:	f7fd fedf 	bl	8015f98 <pbuf_free>
        return;
 80181da:	e1ee      	b.n	80185ba <tcp_input+0x7ce>
        continue;
 80181dc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80181de:	69fb      	ldr	r3, [r7, #28]
 80181e0:	68db      	ldr	r3, [r3, #12]
 80181e2:	61fb      	str	r3, [r7, #28]
 80181e4:	69fb      	ldr	r3, [r7, #28]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d1bc      	bne.n	8018164 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80181ea:	2300      	movs	r3, #0
 80181ec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80181ee:	4b51      	ldr	r3, [pc, #324]	; (8018334 <tcp_input+0x548>)
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	617b      	str	r3, [r7, #20]
 80181f4:	e02a      	b.n	801824c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80181f6:	697b      	ldr	r3, [r7, #20]
 80181f8:	7a1b      	ldrb	r3, [r3, #8]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d00c      	beq.n	8018218 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80181fe:	697b      	ldr	r3, [r7, #20]
 8018200:	7a1a      	ldrb	r2, [r3, #8]
 8018202:	4b44      	ldr	r3, [pc, #272]	; (8018314 <tcp_input+0x528>)
 8018204:	685b      	ldr	r3, [r3, #4]
 8018206:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801820a:	3301      	adds	r3, #1
 801820c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801820e:	429a      	cmp	r2, r3
 8018210:	d002      	beq.n	8018218 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8018212:	697b      	ldr	r3, [r7, #20]
 8018214:	61bb      	str	r3, [r7, #24]
        continue;
 8018216:	e016      	b.n	8018246 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8018218:	697b      	ldr	r3, [r7, #20]
 801821a:	8ada      	ldrh	r2, [r3, #22]
 801821c:	4b3c      	ldr	r3, [pc, #240]	; (8018310 <tcp_input+0x524>)
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	885b      	ldrh	r3, [r3, #2]
 8018222:	b29b      	uxth	r3, r3
 8018224:	429a      	cmp	r2, r3
 8018226:	d10c      	bne.n	8018242 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018228:	697b      	ldr	r3, [r7, #20]
 801822a:	681a      	ldr	r2, [r3, #0]
 801822c:	4b39      	ldr	r3, [pc, #228]	; (8018314 <tcp_input+0x528>)
 801822e:	695b      	ldr	r3, [r3, #20]
 8018230:	429a      	cmp	r2, r3
 8018232:	d00f      	beq.n	8018254 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018234:	697b      	ldr	r3, [r7, #20]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d00d      	beq.n	8018256 <tcp_input+0x46a>
 801823a:	697b      	ldr	r3, [r7, #20]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d009      	beq.n	8018256 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8018242:	697b      	ldr	r3, [r7, #20]
 8018244:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018246:	697b      	ldr	r3, [r7, #20]
 8018248:	68db      	ldr	r3, [r3, #12]
 801824a:	617b      	str	r3, [r7, #20]
 801824c:	697b      	ldr	r3, [r7, #20]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d1d1      	bne.n	80181f6 <tcp_input+0x40a>
 8018252:	e000      	b.n	8018256 <tcp_input+0x46a>
            break;
 8018254:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018256:	697b      	ldr	r3, [r7, #20]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d014      	beq.n	8018286 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801825c:	69bb      	ldr	r3, [r7, #24]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d00a      	beq.n	8018278 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8018262:	697b      	ldr	r3, [r7, #20]
 8018264:	68da      	ldr	r2, [r3, #12]
 8018266:	69bb      	ldr	r3, [r7, #24]
 8018268:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801826a:	4b32      	ldr	r3, [pc, #200]	; (8018334 <tcp_input+0x548>)
 801826c:	681a      	ldr	r2, [r3, #0]
 801826e:	697b      	ldr	r3, [r7, #20]
 8018270:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8018272:	4a30      	ldr	r2, [pc, #192]	; (8018334 <tcp_input+0x548>)
 8018274:	697b      	ldr	r3, [r7, #20]
 8018276:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8018278:	6978      	ldr	r0, [r7, #20]
 801827a:	f000 f9ff 	bl	801867c <tcp_listen_input>
      }
      pbuf_free(p);
 801827e:	6878      	ldr	r0, [r7, #4]
 8018280:	f7fd fe8a 	bl	8015f98 <pbuf_free>
      return;
 8018284:	e199      	b.n	80185ba <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8018286:	69fb      	ldr	r3, [r7, #28]
 8018288:	2b00      	cmp	r3, #0
 801828a:	f000 8160 	beq.w	801854e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801828e:	4b2a      	ldr	r3, [pc, #168]	; (8018338 <tcp_input+0x54c>)
 8018290:	2200      	movs	r2, #0
 8018292:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	891a      	ldrh	r2, [r3, #8]
 8018298:	4b27      	ldr	r3, [pc, #156]	; (8018338 <tcp_input+0x54c>)
 801829a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801829c:	4a26      	ldr	r2, [pc, #152]	; (8018338 <tcp_input+0x54c>)
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80182a2:	4b1b      	ldr	r3, [pc, #108]	; (8018310 <tcp_input+0x524>)
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	4a24      	ldr	r2, [pc, #144]	; (8018338 <tcp_input+0x54c>)
 80182a8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80182aa:	4b24      	ldr	r3, [pc, #144]	; (801833c <tcp_input+0x550>)
 80182ac:	2200      	movs	r2, #0
 80182ae:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80182b0:	4b23      	ldr	r3, [pc, #140]	; (8018340 <tcp_input+0x554>)
 80182b2:	2200      	movs	r2, #0
 80182b4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80182b6:	4b23      	ldr	r3, [pc, #140]	; (8018344 <tcp_input+0x558>)
 80182b8:	2200      	movs	r2, #0
 80182ba:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80182bc:	4b22      	ldr	r3, [pc, #136]	; (8018348 <tcp_input+0x55c>)
 80182be:	781b      	ldrb	r3, [r3, #0]
 80182c0:	f003 0308 	and.w	r3, r3, #8
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d006      	beq.n	80182d6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	7b5b      	ldrb	r3, [r3, #13]
 80182cc:	f043 0301 	orr.w	r3, r3, #1
 80182d0:	b2da      	uxtb	r2, r3
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80182d6:	69fb      	ldr	r3, [r7, #28]
 80182d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d038      	beq.n	8018350 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80182de:	69f8      	ldr	r0, [r7, #28]
 80182e0:	f7ff f940 	bl	8017564 <tcp_process_refused_data>
 80182e4:	4603      	mov	r3, r0
 80182e6:	f113 0f0d 	cmn.w	r3, #13
 80182ea:	d007      	beq.n	80182fc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80182ec:	69fb      	ldr	r3, [r7, #28]
 80182ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d02d      	beq.n	8018350 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80182f4:	4b15      	ldr	r3, [pc, #84]	; (801834c <tcp_input+0x560>)
 80182f6:	881b      	ldrh	r3, [r3, #0]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d029      	beq.n	8018350 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80182fc:	69fb      	ldr	r3, [r7, #28]
 80182fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018300:	2b00      	cmp	r3, #0
 8018302:	f040 8104 	bne.w	801850e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8018306:	69f8      	ldr	r0, [r7, #28]
 8018308:	f003 f9ce 	bl	801b6a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801830c:	e0ff      	b.n	801850e <tcp_input+0x722>
 801830e:	bf00      	nop
 8018310:	2000772c 	.word	0x2000772c
 8018314:	2000897c 	.word	0x2000897c
 8018318:	080216bc 	.word	0x080216bc
 801831c:	08021804 	.word	0x08021804
 8018320:	08021724 	.word	0x08021724
 8018324:	2000ba64 	.word	0x2000ba64
 8018328:	08021830 	.word	0x08021830
 801832c:	2000ba74 	.word	0x2000ba74
 8018330:	0802185c 	.word	0x0802185c
 8018334:	2000ba6c 	.word	0x2000ba6c
 8018338:	2000771c 	.word	0x2000771c
 801833c:	2000774c 	.word	0x2000774c
 8018340:	20007749 	.word	0x20007749
 8018344:	20007744 	.word	0x20007744
 8018348:	20007748 	.word	0x20007748
 801834c:	20007746 	.word	0x20007746
      }
    }
    tcp_input_pcb = pcb;
 8018350:	4a9b      	ldr	r2, [pc, #620]	; (80185c0 <tcp_input+0x7d4>)
 8018352:	69fb      	ldr	r3, [r7, #28]
 8018354:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8018356:	69f8      	ldr	r0, [r7, #28]
 8018358:	f000 fb0a 	bl	8018970 <tcp_process>
 801835c:	4603      	mov	r3, r0
 801835e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8018360:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018364:	f113 0f0d 	cmn.w	r3, #13
 8018368:	f000 80d3 	beq.w	8018512 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801836c:	4b95      	ldr	r3, [pc, #596]	; (80185c4 <tcp_input+0x7d8>)
 801836e:	781b      	ldrb	r3, [r3, #0]
 8018370:	f003 0308 	and.w	r3, r3, #8
 8018374:	2b00      	cmp	r3, #0
 8018376:	d015      	beq.n	80183a4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8018378:	69fb      	ldr	r3, [r7, #28]
 801837a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801837e:	2b00      	cmp	r3, #0
 8018380:	d008      	beq.n	8018394 <tcp_input+0x5a8>
 8018382:	69fb      	ldr	r3, [r7, #28]
 8018384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018388:	69fa      	ldr	r2, [r7, #28]
 801838a:	6912      	ldr	r2, [r2, #16]
 801838c:	f06f 010d 	mvn.w	r1, #13
 8018390:	4610      	mov	r0, r2
 8018392:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018394:	69f9      	ldr	r1, [r7, #28]
 8018396:	488c      	ldr	r0, [pc, #560]	; (80185c8 <tcp_input+0x7dc>)
 8018398:	f7ff fbb0 	bl	8017afc <tcp_pcb_remove>
        tcp_free(pcb);
 801839c:	69f8      	ldr	r0, [r7, #28]
 801839e:	f7fe f9a9 	bl	80166f4 <tcp_free>
 80183a2:	e0c1      	b.n	8018528 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80183a4:	2300      	movs	r3, #0
 80183a6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80183a8:	4b88      	ldr	r3, [pc, #544]	; (80185cc <tcp_input+0x7e0>)
 80183aa:	881b      	ldrh	r3, [r3, #0]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d01d      	beq.n	80183ec <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80183b0:	4b86      	ldr	r3, [pc, #536]	; (80185cc <tcp_input+0x7e0>)
 80183b2:	881b      	ldrh	r3, [r3, #0]
 80183b4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80183b6:	69fb      	ldr	r3, [r7, #28]
 80183b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d00a      	beq.n	80183d6 <tcp_input+0x5ea>
 80183c0:	69fb      	ldr	r3, [r7, #28]
 80183c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80183c6:	69fa      	ldr	r2, [r7, #28]
 80183c8:	6910      	ldr	r0, [r2, #16]
 80183ca:	89fa      	ldrh	r2, [r7, #14]
 80183cc:	69f9      	ldr	r1, [r7, #28]
 80183ce:	4798      	blx	r3
 80183d0:	4603      	mov	r3, r0
 80183d2:	74fb      	strb	r3, [r7, #19]
 80183d4:	e001      	b.n	80183da <tcp_input+0x5ee>
 80183d6:	2300      	movs	r3, #0
 80183d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80183da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80183de:	f113 0f0d 	cmn.w	r3, #13
 80183e2:	f000 8098 	beq.w	8018516 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80183e6:	4b79      	ldr	r3, [pc, #484]	; (80185cc <tcp_input+0x7e0>)
 80183e8:	2200      	movs	r2, #0
 80183ea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80183ec:	69f8      	ldr	r0, [r7, #28]
 80183ee:	f000 f905 	bl	80185fc <tcp_input_delayed_close>
 80183f2:	4603      	mov	r3, r0
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	f040 8090 	bne.w	801851a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80183fa:	4b75      	ldr	r3, [pc, #468]	; (80185d0 <tcp_input+0x7e4>)
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d041      	beq.n	8018486 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8018402:	69fb      	ldr	r3, [r7, #28]
 8018404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018406:	2b00      	cmp	r3, #0
 8018408:	d006      	beq.n	8018418 <tcp_input+0x62c>
 801840a:	4b72      	ldr	r3, [pc, #456]	; (80185d4 <tcp_input+0x7e8>)
 801840c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8018410:	4971      	ldr	r1, [pc, #452]	; (80185d8 <tcp_input+0x7ec>)
 8018412:	4872      	ldr	r0, [pc, #456]	; (80185dc <tcp_input+0x7f0>)
 8018414:	f005 f970 	bl	801d6f8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8018418:	69fb      	ldr	r3, [r7, #28]
 801841a:	8b5b      	ldrh	r3, [r3, #26]
 801841c:	f003 0310 	and.w	r3, r3, #16
 8018420:	2b00      	cmp	r3, #0
 8018422:	d008      	beq.n	8018436 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018424:	4b6a      	ldr	r3, [pc, #424]	; (80185d0 <tcp_input+0x7e4>)
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	4618      	mov	r0, r3
 801842a:	f7fd fdb5 	bl	8015f98 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801842e:	69f8      	ldr	r0, [r7, #28]
 8018430:	f7fe fc40 	bl	8016cb4 <tcp_abort>
            goto aborted;
 8018434:	e078      	b.n	8018528 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8018436:	69fb      	ldr	r3, [r7, #28]
 8018438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801843c:	2b00      	cmp	r3, #0
 801843e:	d00c      	beq.n	801845a <tcp_input+0x66e>
 8018440:	69fb      	ldr	r3, [r7, #28]
 8018442:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018446:	69fb      	ldr	r3, [r7, #28]
 8018448:	6918      	ldr	r0, [r3, #16]
 801844a:	4b61      	ldr	r3, [pc, #388]	; (80185d0 <tcp_input+0x7e4>)
 801844c:	681a      	ldr	r2, [r3, #0]
 801844e:	2300      	movs	r3, #0
 8018450:	69f9      	ldr	r1, [r7, #28]
 8018452:	47a0      	blx	r4
 8018454:	4603      	mov	r3, r0
 8018456:	74fb      	strb	r3, [r7, #19]
 8018458:	e008      	b.n	801846c <tcp_input+0x680>
 801845a:	4b5d      	ldr	r3, [pc, #372]	; (80185d0 <tcp_input+0x7e4>)
 801845c:	681a      	ldr	r2, [r3, #0]
 801845e:	2300      	movs	r3, #0
 8018460:	69f9      	ldr	r1, [r7, #28]
 8018462:	2000      	movs	r0, #0
 8018464:	f7ff f952 	bl	801770c <tcp_recv_null>
 8018468:	4603      	mov	r3, r0
 801846a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801846c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018470:	f113 0f0d 	cmn.w	r3, #13
 8018474:	d053      	beq.n	801851e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8018476:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d003      	beq.n	8018486 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801847e:	4b54      	ldr	r3, [pc, #336]	; (80185d0 <tcp_input+0x7e4>)
 8018480:	681a      	ldr	r2, [r3, #0]
 8018482:	69fb      	ldr	r3, [r7, #28]
 8018484:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8018486:	4b4f      	ldr	r3, [pc, #316]	; (80185c4 <tcp_input+0x7d8>)
 8018488:	781b      	ldrb	r3, [r3, #0]
 801848a:	f003 0320 	and.w	r3, r3, #32
 801848e:	2b00      	cmp	r3, #0
 8018490:	d030      	beq.n	80184f4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8018492:	69fb      	ldr	r3, [r7, #28]
 8018494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018496:	2b00      	cmp	r3, #0
 8018498:	d009      	beq.n	80184ae <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801849a:	69fb      	ldr	r3, [r7, #28]
 801849c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801849e:	7b5a      	ldrb	r2, [r3, #13]
 80184a0:	69fb      	ldr	r3, [r7, #28]
 80184a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80184a4:	f042 0220 	orr.w	r2, r2, #32
 80184a8:	b2d2      	uxtb	r2, r2
 80184aa:	735a      	strb	r2, [r3, #13]
 80184ac:	e022      	b.n	80184f4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80184ae:	69fb      	ldr	r3, [r7, #28]
 80184b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80184b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80184b6:	d005      	beq.n	80184c4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80184b8:	69fb      	ldr	r3, [r7, #28]
 80184ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80184bc:	3301      	adds	r3, #1
 80184be:	b29a      	uxth	r2, r3
 80184c0:	69fb      	ldr	r3, [r7, #28]
 80184c2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80184c4:	69fb      	ldr	r3, [r7, #28]
 80184c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d00b      	beq.n	80184e6 <tcp_input+0x6fa>
 80184ce:	69fb      	ldr	r3, [r7, #28]
 80184d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80184d4:	69fb      	ldr	r3, [r7, #28]
 80184d6:	6918      	ldr	r0, [r3, #16]
 80184d8:	2300      	movs	r3, #0
 80184da:	2200      	movs	r2, #0
 80184dc:	69f9      	ldr	r1, [r7, #28]
 80184de:	47a0      	blx	r4
 80184e0:	4603      	mov	r3, r0
 80184e2:	74fb      	strb	r3, [r7, #19]
 80184e4:	e001      	b.n	80184ea <tcp_input+0x6fe>
 80184e6:	2300      	movs	r3, #0
 80184e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80184ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80184ee:	f113 0f0d 	cmn.w	r3, #13
 80184f2:	d016      	beq.n	8018522 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80184f4:	4b32      	ldr	r3, [pc, #200]	; (80185c0 <tcp_input+0x7d4>)
 80184f6:	2200      	movs	r2, #0
 80184f8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80184fa:	69f8      	ldr	r0, [r7, #28]
 80184fc:	f000 f87e 	bl	80185fc <tcp_input_delayed_close>
 8018500:	4603      	mov	r3, r0
 8018502:	2b00      	cmp	r3, #0
 8018504:	d10f      	bne.n	8018526 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8018506:	69f8      	ldr	r0, [r7, #28]
 8018508:	f002 fab6 	bl	801aa78 <tcp_output>
 801850c:	e00c      	b.n	8018528 <tcp_input+0x73c>
        goto aborted;
 801850e:	bf00      	nop
 8018510:	e00a      	b.n	8018528 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8018512:	bf00      	nop
 8018514:	e008      	b.n	8018528 <tcp_input+0x73c>
              goto aborted;
 8018516:	bf00      	nop
 8018518:	e006      	b.n	8018528 <tcp_input+0x73c>
          goto aborted;
 801851a:	bf00      	nop
 801851c:	e004      	b.n	8018528 <tcp_input+0x73c>
            goto aborted;
 801851e:	bf00      	nop
 8018520:	e002      	b.n	8018528 <tcp_input+0x73c>
              goto aborted;
 8018522:	bf00      	nop
 8018524:	e000      	b.n	8018528 <tcp_input+0x73c>
          goto aborted;
 8018526:	bf00      	nop
    tcp_input_pcb = NULL;
 8018528:	4b25      	ldr	r3, [pc, #148]	; (80185c0 <tcp_input+0x7d4>)
 801852a:	2200      	movs	r2, #0
 801852c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801852e:	4b28      	ldr	r3, [pc, #160]	; (80185d0 <tcp_input+0x7e4>)
 8018530:	2200      	movs	r2, #0
 8018532:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8018534:	4b2a      	ldr	r3, [pc, #168]	; (80185e0 <tcp_input+0x7f4>)
 8018536:	685b      	ldr	r3, [r3, #4]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d03d      	beq.n	80185b8 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 801853c:	4b28      	ldr	r3, [pc, #160]	; (80185e0 <tcp_input+0x7f4>)
 801853e:	685b      	ldr	r3, [r3, #4]
 8018540:	4618      	mov	r0, r3
 8018542:	f7fd fd29 	bl	8015f98 <pbuf_free>
      inseg.p = NULL;
 8018546:	4b26      	ldr	r3, [pc, #152]	; (80185e0 <tcp_input+0x7f4>)
 8018548:	2200      	movs	r2, #0
 801854a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801854c:	e034      	b.n	80185b8 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801854e:	4b25      	ldr	r3, [pc, #148]	; (80185e4 <tcp_input+0x7f8>)
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	899b      	ldrh	r3, [r3, #12]
 8018554:	b29b      	uxth	r3, r3
 8018556:	4618      	mov	r0, r3
 8018558:	f7f7 feb6 	bl	80102c8 <lwip_htons>
 801855c:	4603      	mov	r3, r0
 801855e:	b2db      	uxtb	r3, r3
 8018560:	f003 0304 	and.w	r3, r3, #4
 8018564:	2b00      	cmp	r3, #0
 8018566:	d118      	bne.n	801859a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018568:	4b1f      	ldr	r3, [pc, #124]	; (80185e8 <tcp_input+0x7fc>)
 801856a:	6819      	ldr	r1, [r3, #0]
 801856c:	4b1f      	ldr	r3, [pc, #124]	; (80185ec <tcp_input+0x800>)
 801856e:	881b      	ldrh	r3, [r3, #0]
 8018570:	461a      	mov	r2, r3
 8018572:	4b1f      	ldr	r3, [pc, #124]	; (80185f0 <tcp_input+0x804>)
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018578:	4b1a      	ldr	r3, [pc, #104]	; (80185e4 <tcp_input+0x7f8>)
 801857a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801857c:	885b      	ldrh	r3, [r3, #2]
 801857e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018580:	4a18      	ldr	r2, [pc, #96]	; (80185e4 <tcp_input+0x7f8>)
 8018582:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018584:	8812      	ldrh	r2, [r2, #0]
 8018586:	b292      	uxth	r2, r2
 8018588:	9202      	str	r2, [sp, #8]
 801858a:	9301      	str	r3, [sp, #4]
 801858c:	4b19      	ldr	r3, [pc, #100]	; (80185f4 <tcp_input+0x808>)
 801858e:	9300      	str	r3, [sp, #0]
 8018590:	4b19      	ldr	r3, [pc, #100]	; (80185f8 <tcp_input+0x80c>)
 8018592:	4602      	mov	r2, r0
 8018594:	2000      	movs	r0, #0
 8018596:	f003 f835 	bl	801b604 <tcp_rst>
    pbuf_free(p);
 801859a:	6878      	ldr	r0, [r7, #4]
 801859c:	f7fd fcfc 	bl	8015f98 <pbuf_free>
  return;
 80185a0:	e00a      	b.n	80185b8 <tcp_input+0x7cc>
    goto dropped;
 80185a2:	bf00      	nop
 80185a4:	e004      	b.n	80185b0 <tcp_input+0x7c4>
dropped:
 80185a6:	bf00      	nop
 80185a8:	e002      	b.n	80185b0 <tcp_input+0x7c4>
      goto dropped;
 80185aa:	bf00      	nop
 80185ac:	e000      	b.n	80185b0 <tcp_input+0x7c4>
      goto dropped;
 80185ae:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80185b0:	6878      	ldr	r0, [r7, #4]
 80185b2:	f7fd fcf1 	bl	8015f98 <pbuf_free>
 80185b6:	e000      	b.n	80185ba <tcp_input+0x7ce>
  return;
 80185b8:	bf00      	nop
}
 80185ba:	3724      	adds	r7, #36	; 0x24
 80185bc:	46bd      	mov	sp, r7
 80185be:	bd90      	pop	{r4, r7, pc}
 80185c0:	2000ba78 	.word	0x2000ba78
 80185c4:	20007749 	.word	0x20007749
 80185c8:	2000ba64 	.word	0x2000ba64
 80185cc:	20007744 	.word	0x20007744
 80185d0:	2000774c 	.word	0x2000774c
 80185d4:	080216bc 	.word	0x080216bc
 80185d8:	0802188c 	.word	0x0802188c
 80185dc:	08021724 	.word	0x08021724
 80185e0:	2000771c 	.word	0x2000771c
 80185e4:	2000772c 	.word	0x2000772c
 80185e8:	20007740 	.word	0x20007740
 80185ec:	20007746 	.word	0x20007746
 80185f0:	2000773c 	.word	0x2000773c
 80185f4:	2000898c 	.word	0x2000898c
 80185f8:	20008990 	.word	0x20008990

080185fc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b082      	sub	sp, #8
 8018600:	af00      	add	r7, sp, #0
 8018602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d106      	bne.n	8018618 <tcp_input_delayed_close+0x1c>
 801860a:	4b17      	ldr	r3, [pc, #92]	; (8018668 <tcp_input_delayed_close+0x6c>)
 801860c:	f240 225a 	movw	r2, #602	; 0x25a
 8018610:	4916      	ldr	r1, [pc, #88]	; (801866c <tcp_input_delayed_close+0x70>)
 8018612:	4817      	ldr	r0, [pc, #92]	; (8018670 <tcp_input_delayed_close+0x74>)
 8018614:	f005 f870 	bl	801d6f8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018618:	4b16      	ldr	r3, [pc, #88]	; (8018674 <tcp_input_delayed_close+0x78>)
 801861a:	781b      	ldrb	r3, [r3, #0]
 801861c:	f003 0310 	and.w	r3, r3, #16
 8018620:	2b00      	cmp	r3, #0
 8018622:	d01c      	beq.n	801865e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	8b5b      	ldrh	r3, [r3, #26]
 8018628:	f003 0310 	and.w	r3, r3, #16
 801862c:	2b00      	cmp	r3, #0
 801862e:	d10d      	bne.n	801864c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018636:	2b00      	cmp	r3, #0
 8018638:	d008      	beq.n	801864c <tcp_input_delayed_close+0x50>
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018640:	687a      	ldr	r2, [r7, #4]
 8018642:	6912      	ldr	r2, [r2, #16]
 8018644:	f06f 010e 	mvn.w	r1, #14
 8018648:	4610      	mov	r0, r2
 801864a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801864c:	6879      	ldr	r1, [r7, #4]
 801864e:	480a      	ldr	r0, [pc, #40]	; (8018678 <tcp_input_delayed_close+0x7c>)
 8018650:	f7ff fa54 	bl	8017afc <tcp_pcb_remove>
    tcp_free(pcb);
 8018654:	6878      	ldr	r0, [r7, #4]
 8018656:	f7fe f84d 	bl	80166f4 <tcp_free>
    return 1;
 801865a:	2301      	movs	r3, #1
 801865c:	e000      	b.n	8018660 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801865e:	2300      	movs	r3, #0
}
 8018660:	4618      	mov	r0, r3
 8018662:	3708      	adds	r7, #8
 8018664:	46bd      	mov	sp, r7
 8018666:	bd80      	pop	{r7, pc}
 8018668:	080216bc 	.word	0x080216bc
 801866c:	080218a8 	.word	0x080218a8
 8018670:	08021724 	.word	0x08021724
 8018674:	20007749 	.word	0x20007749
 8018678:	2000ba64 	.word	0x2000ba64

0801867c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801867c:	b590      	push	{r4, r7, lr}
 801867e:	b08b      	sub	sp, #44	; 0x2c
 8018680:	af04      	add	r7, sp, #16
 8018682:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018684:	4b6f      	ldr	r3, [pc, #444]	; (8018844 <tcp_listen_input+0x1c8>)
 8018686:	781b      	ldrb	r3, [r3, #0]
 8018688:	f003 0304 	and.w	r3, r3, #4
 801868c:	2b00      	cmp	r3, #0
 801868e:	f040 80d3 	bne.w	8018838 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d106      	bne.n	80186a6 <tcp_listen_input+0x2a>
 8018698:	4b6b      	ldr	r3, [pc, #428]	; (8018848 <tcp_listen_input+0x1cc>)
 801869a:	f240 2281 	movw	r2, #641	; 0x281
 801869e:	496b      	ldr	r1, [pc, #428]	; (801884c <tcp_listen_input+0x1d0>)
 80186a0:	486b      	ldr	r0, [pc, #428]	; (8018850 <tcp_listen_input+0x1d4>)
 80186a2:	f005 f829 	bl	801d6f8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80186a6:	4b67      	ldr	r3, [pc, #412]	; (8018844 <tcp_listen_input+0x1c8>)
 80186a8:	781b      	ldrb	r3, [r3, #0]
 80186aa:	f003 0310 	and.w	r3, r3, #16
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d019      	beq.n	80186e6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80186b2:	4b68      	ldr	r3, [pc, #416]	; (8018854 <tcp_listen_input+0x1d8>)
 80186b4:	6819      	ldr	r1, [r3, #0]
 80186b6:	4b68      	ldr	r3, [pc, #416]	; (8018858 <tcp_listen_input+0x1dc>)
 80186b8:	881b      	ldrh	r3, [r3, #0]
 80186ba:	461a      	mov	r2, r3
 80186bc:	4b67      	ldr	r3, [pc, #412]	; (801885c <tcp_listen_input+0x1e0>)
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80186c2:	4b67      	ldr	r3, [pc, #412]	; (8018860 <tcp_listen_input+0x1e4>)
 80186c4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80186c6:	885b      	ldrh	r3, [r3, #2]
 80186c8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80186ca:	4a65      	ldr	r2, [pc, #404]	; (8018860 <tcp_listen_input+0x1e4>)
 80186cc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80186ce:	8812      	ldrh	r2, [r2, #0]
 80186d0:	b292      	uxth	r2, r2
 80186d2:	9202      	str	r2, [sp, #8]
 80186d4:	9301      	str	r3, [sp, #4]
 80186d6:	4b63      	ldr	r3, [pc, #396]	; (8018864 <tcp_listen_input+0x1e8>)
 80186d8:	9300      	str	r3, [sp, #0]
 80186da:	4b63      	ldr	r3, [pc, #396]	; (8018868 <tcp_listen_input+0x1ec>)
 80186dc:	4602      	mov	r2, r0
 80186de:	6878      	ldr	r0, [r7, #4]
 80186e0:	f002 ff90 	bl	801b604 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80186e4:	e0aa      	b.n	801883c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 80186e6:	4b57      	ldr	r3, [pc, #348]	; (8018844 <tcp_listen_input+0x1c8>)
 80186e8:	781b      	ldrb	r3, [r3, #0]
 80186ea:	f003 0302 	and.w	r3, r3, #2
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	f000 80a4 	beq.w	801883c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	7d5b      	ldrb	r3, [r3, #21]
 80186f8:	4618      	mov	r0, r3
 80186fa:	f7ff f92b 	bl	8017954 <tcp_alloc>
 80186fe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018700:	697b      	ldr	r3, [r7, #20]
 8018702:	2b00      	cmp	r3, #0
 8018704:	d111      	bne.n	801872a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	699b      	ldr	r3, [r3, #24]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d00a      	beq.n	8018724 <tcp_listen_input+0xa8>
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	699b      	ldr	r3, [r3, #24]
 8018712:	687a      	ldr	r2, [r7, #4]
 8018714:	6910      	ldr	r0, [r2, #16]
 8018716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801871a:	2100      	movs	r1, #0
 801871c:	4798      	blx	r3
 801871e:	4603      	mov	r3, r0
 8018720:	73bb      	strb	r3, [r7, #14]
      return;
 8018722:	e08c      	b.n	801883e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018724:	23f0      	movs	r3, #240	; 0xf0
 8018726:	73bb      	strb	r3, [r7, #14]
      return;
 8018728:	e089      	b.n	801883e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801872a:	4b50      	ldr	r3, [pc, #320]	; (801886c <tcp_listen_input+0x1f0>)
 801872c:	695a      	ldr	r2, [r3, #20]
 801872e:	697b      	ldr	r3, [r7, #20]
 8018730:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018732:	4b4e      	ldr	r3, [pc, #312]	; (801886c <tcp_listen_input+0x1f0>)
 8018734:	691a      	ldr	r2, [r3, #16]
 8018736:	697b      	ldr	r3, [r7, #20]
 8018738:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	8ada      	ldrh	r2, [r3, #22]
 801873e:	697b      	ldr	r3, [r7, #20]
 8018740:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018742:	4b47      	ldr	r3, [pc, #284]	; (8018860 <tcp_listen_input+0x1e4>)
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	881b      	ldrh	r3, [r3, #0]
 8018748:	b29a      	uxth	r2, r3
 801874a:	697b      	ldr	r3, [r7, #20]
 801874c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801874e:	697b      	ldr	r3, [r7, #20]
 8018750:	2203      	movs	r2, #3
 8018752:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018754:	4b41      	ldr	r3, [pc, #260]	; (801885c <tcp_listen_input+0x1e0>)
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	1c5a      	adds	r2, r3, #1
 801875a:	697b      	ldr	r3, [r7, #20]
 801875c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801875e:	697b      	ldr	r3, [r7, #20]
 8018760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018762:	697b      	ldr	r3, [r7, #20]
 8018764:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8018766:	6978      	ldr	r0, [r7, #20]
 8018768:	f7ff fa5c 	bl	8017c24 <tcp_next_iss>
 801876c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801876e:	697b      	ldr	r3, [r7, #20]
 8018770:	693a      	ldr	r2, [r7, #16]
 8018772:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8018774:	697b      	ldr	r3, [r7, #20]
 8018776:	693a      	ldr	r2, [r7, #16]
 8018778:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801877a:	697b      	ldr	r3, [r7, #20]
 801877c:	693a      	ldr	r2, [r7, #16]
 801877e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8018780:	697b      	ldr	r3, [r7, #20]
 8018782:	693a      	ldr	r2, [r7, #16]
 8018784:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018786:	4b35      	ldr	r3, [pc, #212]	; (801885c <tcp_listen_input+0x1e0>)
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	1e5a      	subs	r2, r3, #1
 801878c:	697b      	ldr	r3, [r7, #20]
 801878e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	691a      	ldr	r2, [r3, #16]
 8018794:	697b      	ldr	r3, [r7, #20]
 8018796:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018798:	697b      	ldr	r3, [r7, #20]
 801879a:	687a      	ldr	r2, [r7, #4]
 801879c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	7a5b      	ldrb	r3, [r3, #9]
 80187a2:	f003 030c 	and.w	r3, r3, #12
 80187a6:	b2da      	uxtb	r2, r3
 80187a8:	697b      	ldr	r3, [r7, #20]
 80187aa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	7a1a      	ldrb	r2, [r3, #8]
 80187b0:	697b      	ldr	r3, [r7, #20]
 80187b2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80187b4:	4b2e      	ldr	r3, [pc, #184]	; (8018870 <tcp_listen_input+0x1f4>)
 80187b6:	681a      	ldr	r2, [r3, #0]
 80187b8:	697b      	ldr	r3, [r7, #20]
 80187ba:	60da      	str	r2, [r3, #12]
 80187bc:	4a2c      	ldr	r2, [pc, #176]	; (8018870 <tcp_listen_input+0x1f4>)
 80187be:	697b      	ldr	r3, [r7, #20]
 80187c0:	6013      	str	r3, [r2, #0]
 80187c2:	f003 fa7f 	bl	801bcc4 <tcp_timer_needed>
 80187c6:	4b2b      	ldr	r3, [pc, #172]	; (8018874 <tcp_listen_input+0x1f8>)
 80187c8:	2201      	movs	r2, #1
 80187ca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80187cc:	6978      	ldr	r0, [r7, #20]
 80187ce:	f001 fd8f 	bl	801a2f0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80187d2:	4b23      	ldr	r3, [pc, #140]	; (8018860 <tcp_listen_input+0x1e4>)
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	89db      	ldrh	r3, [r3, #14]
 80187d8:	b29a      	uxth	r2, r3
 80187da:	697b      	ldr	r3, [r7, #20]
 80187dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80187e0:	697b      	ldr	r3, [r7, #20]
 80187e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80187e6:	697b      	ldr	r3, [r7, #20]
 80187e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80187ec:	697b      	ldr	r3, [r7, #20]
 80187ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80187f0:	697b      	ldr	r3, [r7, #20]
 80187f2:	3304      	adds	r3, #4
 80187f4:	4618      	mov	r0, r3
 80187f6:	f7fa fee7 	bl	80135c8 <ip4_route>
 80187fa:	4601      	mov	r1, r0
 80187fc:	697b      	ldr	r3, [r7, #20]
 80187fe:	3304      	adds	r3, #4
 8018800:	461a      	mov	r2, r3
 8018802:	4620      	mov	r0, r4
 8018804:	f7ff fa34 	bl	8017c70 <tcp_eff_send_mss_netif>
 8018808:	4603      	mov	r3, r0
 801880a:	461a      	mov	r2, r3
 801880c:	697b      	ldr	r3, [r7, #20]
 801880e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018810:	2112      	movs	r1, #18
 8018812:	6978      	ldr	r0, [r7, #20]
 8018814:	f002 f842 	bl	801a89c <tcp_enqueue_flags>
 8018818:	4603      	mov	r3, r0
 801881a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801881c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d004      	beq.n	801882e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8018824:	2100      	movs	r1, #0
 8018826:	6978      	ldr	r0, [r7, #20]
 8018828:	f7fe f986 	bl	8016b38 <tcp_abandon>
      return;
 801882c:	e007      	b.n	801883e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 801882e:	6978      	ldr	r0, [r7, #20]
 8018830:	f002 f922 	bl	801aa78 <tcp_output>
  return;
 8018834:	bf00      	nop
 8018836:	e001      	b.n	801883c <tcp_listen_input+0x1c0>
    return;
 8018838:	bf00      	nop
 801883a:	e000      	b.n	801883e <tcp_listen_input+0x1c2>
  return;
 801883c:	bf00      	nop
}
 801883e:	371c      	adds	r7, #28
 8018840:	46bd      	mov	sp, r7
 8018842:	bd90      	pop	{r4, r7, pc}
 8018844:	20007748 	.word	0x20007748
 8018848:	080216bc 	.word	0x080216bc
 801884c:	080218d0 	.word	0x080218d0
 8018850:	08021724 	.word	0x08021724
 8018854:	20007740 	.word	0x20007740
 8018858:	20007746 	.word	0x20007746
 801885c:	2000773c 	.word	0x2000773c
 8018860:	2000772c 	.word	0x2000772c
 8018864:	2000898c 	.word	0x2000898c
 8018868:	20008990 	.word	0x20008990
 801886c:	2000897c 	.word	0x2000897c
 8018870:	2000ba64 	.word	0x2000ba64
 8018874:	2000ba60 	.word	0x2000ba60

08018878 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b086      	sub	sp, #24
 801887c:	af04      	add	r7, sp, #16
 801887e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018880:	4b30      	ldr	r3, [pc, #192]	; (8018944 <tcp_timewait_input+0xcc>)
 8018882:	781b      	ldrb	r3, [r3, #0]
 8018884:	f003 0304 	and.w	r3, r3, #4
 8018888:	2b00      	cmp	r3, #0
 801888a:	d154      	bne.n	8018936 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d106      	bne.n	80188a0 <tcp_timewait_input+0x28>
 8018892:	4b2d      	ldr	r3, [pc, #180]	; (8018948 <tcp_timewait_input+0xd0>)
 8018894:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018898:	492c      	ldr	r1, [pc, #176]	; (801894c <tcp_timewait_input+0xd4>)
 801889a:	482d      	ldr	r0, [pc, #180]	; (8018950 <tcp_timewait_input+0xd8>)
 801889c:	f004 ff2c 	bl	801d6f8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80188a0:	4b28      	ldr	r3, [pc, #160]	; (8018944 <tcp_timewait_input+0xcc>)
 80188a2:	781b      	ldrb	r3, [r3, #0]
 80188a4:	f003 0302 	and.w	r3, r3, #2
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d02a      	beq.n	8018902 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80188ac:	4b29      	ldr	r3, [pc, #164]	; (8018954 <tcp_timewait_input+0xdc>)
 80188ae:	681a      	ldr	r2, [r3, #0]
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188b4:	1ad3      	subs	r3, r2, r3
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	db2d      	blt.n	8018916 <tcp_timewait_input+0x9e>
 80188ba:	4b26      	ldr	r3, [pc, #152]	; (8018954 <tcp_timewait_input+0xdc>)
 80188bc:	681a      	ldr	r2, [r3, #0]
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188c2:	6879      	ldr	r1, [r7, #4]
 80188c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80188c6:	440b      	add	r3, r1
 80188c8:	1ad3      	subs	r3, r2, r3
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	dc23      	bgt.n	8018916 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80188ce:	4b22      	ldr	r3, [pc, #136]	; (8018958 <tcp_timewait_input+0xe0>)
 80188d0:	6819      	ldr	r1, [r3, #0]
 80188d2:	4b22      	ldr	r3, [pc, #136]	; (801895c <tcp_timewait_input+0xe4>)
 80188d4:	881b      	ldrh	r3, [r3, #0]
 80188d6:	461a      	mov	r2, r3
 80188d8:	4b1e      	ldr	r3, [pc, #120]	; (8018954 <tcp_timewait_input+0xdc>)
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80188de:	4b20      	ldr	r3, [pc, #128]	; (8018960 <tcp_timewait_input+0xe8>)
 80188e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80188e2:	885b      	ldrh	r3, [r3, #2]
 80188e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80188e6:	4a1e      	ldr	r2, [pc, #120]	; (8018960 <tcp_timewait_input+0xe8>)
 80188e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80188ea:	8812      	ldrh	r2, [r2, #0]
 80188ec:	b292      	uxth	r2, r2
 80188ee:	9202      	str	r2, [sp, #8]
 80188f0:	9301      	str	r3, [sp, #4]
 80188f2:	4b1c      	ldr	r3, [pc, #112]	; (8018964 <tcp_timewait_input+0xec>)
 80188f4:	9300      	str	r3, [sp, #0]
 80188f6:	4b1c      	ldr	r3, [pc, #112]	; (8018968 <tcp_timewait_input+0xf0>)
 80188f8:	4602      	mov	r2, r0
 80188fa:	6878      	ldr	r0, [r7, #4]
 80188fc:	f002 fe82 	bl	801b604 <tcp_rst>
      return;
 8018900:	e01c      	b.n	801893c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8018902:	4b10      	ldr	r3, [pc, #64]	; (8018944 <tcp_timewait_input+0xcc>)
 8018904:	781b      	ldrb	r3, [r3, #0]
 8018906:	f003 0301 	and.w	r3, r3, #1
 801890a:	2b00      	cmp	r3, #0
 801890c:	d003      	beq.n	8018916 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801890e:	4b17      	ldr	r3, [pc, #92]	; (801896c <tcp_timewait_input+0xf4>)
 8018910:	681a      	ldr	r2, [r3, #0]
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018916:	4b11      	ldr	r3, [pc, #68]	; (801895c <tcp_timewait_input+0xe4>)
 8018918:	881b      	ldrh	r3, [r3, #0]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d00d      	beq.n	801893a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	8b5b      	ldrh	r3, [r3, #26]
 8018922:	f043 0302 	orr.w	r3, r3, #2
 8018926:	b29a      	uxth	r2, r3
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801892c:	6878      	ldr	r0, [r7, #4]
 801892e:	f002 f8a3 	bl	801aa78 <tcp_output>
  }
  return;
 8018932:	bf00      	nop
 8018934:	e001      	b.n	801893a <tcp_timewait_input+0xc2>
    return;
 8018936:	bf00      	nop
 8018938:	e000      	b.n	801893c <tcp_timewait_input+0xc4>
  return;
 801893a:	bf00      	nop
}
 801893c:	3708      	adds	r7, #8
 801893e:	46bd      	mov	sp, r7
 8018940:	bd80      	pop	{r7, pc}
 8018942:	bf00      	nop
 8018944:	20007748 	.word	0x20007748
 8018948:	080216bc 	.word	0x080216bc
 801894c:	080218f0 	.word	0x080218f0
 8018950:	08021724 	.word	0x08021724
 8018954:	2000773c 	.word	0x2000773c
 8018958:	20007740 	.word	0x20007740
 801895c:	20007746 	.word	0x20007746
 8018960:	2000772c 	.word	0x2000772c
 8018964:	2000898c 	.word	0x2000898c
 8018968:	20008990 	.word	0x20008990
 801896c:	2000ba68 	.word	0x2000ba68

08018970 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018970:	b590      	push	{r4, r7, lr}
 8018972:	b08d      	sub	sp, #52	; 0x34
 8018974:	af04      	add	r7, sp, #16
 8018976:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018978:	2300      	movs	r3, #0
 801897a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801897c:	2300      	movs	r3, #0
 801897e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d106      	bne.n	8018994 <tcp_process+0x24>
 8018986:	4ba5      	ldr	r3, [pc, #660]	; (8018c1c <tcp_process+0x2ac>)
 8018988:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801898c:	49a4      	ldr	r1, [pc, #656]	; (8018c20 <tcp_process+0x2b0>)
 801898e:	48a5      	ldr	r0, [pc, #660]	; (8018c24 <tcp_process+0x2b4>)
 8018990:	f004 feb2 	bl	801d6f8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018994:	4ba4      	ldr	r3, [pc, #656]	; (8018c28 <tcp_process+0x2b8>)
 8018996:	781b      	ldrb	r3, [r3, #0]
 8018998:	f003 0304 	and.w	r3, r3, #4
 801899c:	2b00      	cmp	r3, #0
 801899e:	d04e      	beq.n	8018a3e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	7d1b      	ldrb	r3, [r3, #20]
 80189a4:	2b02      	cmp	r3, #2
 80189a6:	d108      	bne.n	80189ba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80189ac:	4b9f      	ldr	r3, [pc, #636]	; (8018c2c <tcp_process+0x2bc>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	429a      	cmp	r2, r3
 80189b2:	d123      	bne.n	80189fc <tcp_process+0x8c>
        acceptable = 1;
 80189b4:	2301      	movs	r3, #1
 80189b6:	76fb      	strb	r3, [r7, #27]
 80189b8:	e020      	b.n	80189fc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80189be:	4b9c      	ldr	r3, [pc, #624]	; (8018c30 <tcp_process+0x2c0>)
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	429a      	cmp	r2, r3
 80189c4:	d102      	bne.n	80189cc <tcp_process+0x5c>
        acceptable = 1;
 80189c6:	2301      	movs	r3, #1
 80189c8:	76fb      	strb	r3, [r7, #27]
 80189ca:	e017      	b.n	80189fc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80189cc:	4b98      	ldr	r3, [pc, #608]	; (8018c30 <tcp_process+0x2c0>)
 80189ce:	681a      	ldr	r2, [r3, #0]
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189d4:	1ad3      	subs	r3, r2, r3
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	db10      	blt.n	80189fc <tcp_process+0x8c>
 80189da:	4b95      	ldr	r3, [pc, #596]	; (8018c30 <tcp_process+0x2c0>)
 80189dc:	681a      	ldr	r2, [r3, #0]
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189e2:	6879      	ldr	r1, [r7, #4]
 80189e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80189e6:	440b      	add	r3, r1
 80189e8:	1ad3      	subs	r3, r2, r3
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	dc06      	bgt.n	80189fc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	8b5b      	ldrh	r3, [r3, #26]
 80189f2:	f043 0302 	orr.w	r3, r3, #2
 80189f6:	b29a      	uxth	r2, r3
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80189fc:	7efb      	ldrb	r3, [r7, #27]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d01b      	beq.n	8018a3a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	7d1b      	ldrb	r3, [r3, #20]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d106      	bne.n	8018a18 <tcp_process+0xa8>
 8018a0a:	4b84      	ldr	r3, [pc, #528]	; (8018c1c <tcp_process+0x2ac>)
 8018a0c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018a10:	4988      	ldr	r1, [pc, #544]	; (8018c34 <tcp_process+0x2c4>)
 8018a12:	4884      	ldr	r0, [pc, #528]	; (8018c24 <tcp_process+0x2b4>)
 8018a14:	f004 fe70 	bl	801d6f8 <iprintf>
      recv_flags |= TF_RESET;
 8018a18:	4b87      	ldr	r3, [pc, #540]	; (8018c38 <tcp_process+0x2c8>)
 8018a1a:	781b      	ldrb	r3, [r3, #0]
 8018a1c:	f043 0308 	orr.w	r3, r3, #8
 8018a20:	b2da      	uxtb	r2, r3
 8018a22:	4b85      	ldr	r3, [pc, #532]	; (8018c38 <tcp_process+0x2c8>)
 8018a24:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	8b5b      	ldrh	r3, [r3, #26]
 8018a2a:	f023 0301 	bic.w	r3, r3, #1
 8018a2e:	b29a      	uxth	r2, r3
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018a34:	f06f 030d 	mvn.w	r3, #13
 8018a38:	e37a      	b.n	8019130 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	e378      	b.n	8019130 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018a3e:	4b7a      	ldr	r3, [pc, #488]	; (8018c28 <tcp_process+0x2b8>)
 8018a40:	781b      	ldrb	r3, [r3, #0]
 8018a42:	f003 0302 	and.w	r3, r3, #2
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d010      	beq.n	8018a6c <tcp_process+0xfc>
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	7d1b      	ldrb	r3, [r3, #20]
 8018a4e:	2b02      	cmp	r3, #2
 8018a50:	d00c      	beq.n	8018a6c <tcp_process+0xfc>
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	7d1b      	ldrb	r3, [r3, #20]
 8018a56:	2b03      	cmp	r3, #3
 8018a58:	d008      	beq.n	8018a6c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	8b5b      	ldrh	r3, [r3, #26]
 8018a5e:	f043 0302 	orr.w	r3, r3, #2
 8018a62:	b29a      	uxth	r2, r3
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018a68:	2300      	movs	r3, #0
 8018a6a:	e361      	b.n	8019130 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	8b5b      	ldrh	r3, [r3, #26]
 8018a70:	f003 0310 	and.w	r3, r3, #16
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d103      	bne.n	8018a80 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018a78:	4b70      	ldr	r3, [pc, #448]	; (8018c3c <tcp_process+0x2cc>)
 8018a7a:	681a      	ldr	r2, [r3, #0]
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	2200      	movs	r2, #0
 8018a84:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018a90:	6878      	ldr	r0, [r7, #4]
 8018a92:	f001 fc2d 	bl	801a2f0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	7d1b      	ldrb	r3, [r3, #20]
 8018a9a:	3b02      	subs	r3, #2
 8018a9c:	2b07      	cmp	r3, #7
 8018a9e:	f200 8337 	bhi.w	8019110 <tcp_process+0x7a0>
 8018aa2:	a201      	add	r2, pc, #4	; (adr r2, 8018aa8 <tcp_process+0x138>)
 8018aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018aa8:	08018ac9 	.word	0x08018ac9
 8018aac:	08018cf9 	.word	0x08018cf9
 8018ab0:	08018e71 	.word	0x08018e71
 8018ab4:	08018e9b 	.word	0x08018e9b
 8018ab8:	08018fbf 	.word	0x08018fbf
 8018abc:	08018e71 	.word	0x08018e71
 8018ac0:	0801904b 	.word	0x0801904b
 8018ac4:	080190db 	.word	0x080190db
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018ac8:	4b57      	ldr	r3, [pc, #348]	; (8018c28 <tcp_process+0x2b8>)
 8018aca:	781b      	ldrb	r3, [r3, #0]
 8018acc:	f003 0310 	and.w	r3, r3, #16
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	f000 80e4 	beq.w	8018c9e <tcp_process+0x32e>
 8018ad6:	4b54      	ldr	r3, [pc, #336]	; (8018c28 <tcp_process+0x2b8>)
 8018ad8:	781b      	ldrb	r3, [r3, #0]
 8018ada:	f003 0302 	and.w	r3, r3, #2
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	f000 80dd 	beq.w	8018c9e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ae8:	1c5a      	adds	r2, r3, #1
 8018aea:	4b50      	ldr	r3, [pc, #320]	; (8018c2c <tcp_process+0x2bc>)
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	429a      	cmp	r2, r3
 8018af0:	f040 80d5 	bne.w	8018c9e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018af4:	4b4e      	ldr	r3, [pc, #312]	; (8018c30 <tcp_process+0x2c0>)
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	1c5a      	adds	r2, r3, #1
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8018b06:	4b49      	ldr	r3, [pc, #292]	; (8018c2c <tcp_process+0x2bc>)
 8018b08:	681a      	ldr	r2, [r3, #0]
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018b0e:	4b4c      	ldr	r3, [pc, #304]	; (8018c40 <tcp_process+0x2d0>)
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	89db      	ldrh	r3, [r3, #14]
 8018b14:	b29a      	uxth	r2, r3
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018b28:	4b41      	ldr	r3, [pc, #260]	; (8018c30 <tcp_process+0x2c0>)
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	1e5a      	subs	r2, r3, #1
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	2204      	movs	r2, #4
 8018b36:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	3304      	adds	r3, #4
 8018b40:	4618      	mov	r0, r3
 8018b42:	f7fa fd41 	bl	80135c8 <ip4_route>
 8018b46:	4601      	mov	r1, r0
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	3304      	adds	r3, #4
 8018b4c:	461a      	mov	r2, r3
 8018b4e:	4620      	mov	r0, r4
 8018b50:	f7ff f88e 	bl	8017c70 <tcp_eff_send_mss_netif>
 8018b54:	4603      	mov	r3, r0
 8018b56:	461a      	mov	r2, r3
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b60:	009a      	lsls	r2, r3, #2
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b66:	005b      	lsls	r3, r3, #1
 8018b68:	f241 111c 	movw	r1, #4380	; 0x111c
 8018b6c:	428b      	cmp	r3, r1
 8018b6e:	bf38      	it	cc
 8018b70:	460b      	movcc	r3, r1
 8018b72:	429a      	cmp	r2, r3
 8018b74:	d204      	bcs.n	8018b80 <tcp_process+0x210>
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b7a:	009b      	lsls	r3, r3, #2
 8018b7c:	b29b      	uxth	r3, r3
 8018b7e:	e00d      	b.n	8018b9c <tcp_process+0x22c>
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b84:	005b      	lsls	r3, r3, #1
 8018b86:	f241 121c 	movw	r2, #4380	; 0x111c
 8018b8a:	4293      	cmp	r3, r2
 8018b8c:	d904      	bls.n	8018b98 <tcp_process+0x228>
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b92:	005b      	lsls	r3, r3, #1
 8018b94:	b29b      	uxth	r3, r3
 8018b96:	e001      	b.n	8018b9c <tcp_process+0x22c>
 8018b98:	f241 131c 	movw	r3, #4380	; 0x111c
 8018b9c:	687a      	ldr	r2, [r7, #4]
 8018b9e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d106      	bne.n	8018bba <tcp_process+0x24a>
 8018bac:	4b1b      	ldr	r3, [pc, #108]	; (8018c1c <tcp_process+0x2ac>)
 8018bae:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018bb2:	4924      	ldr	r1, [pc, #144]	; (8018c44 <tcp_process+0x2d4>)
 8018bb4:	481b      	ldr	r0, [pc, #108]	; (8018c24 <tcp_process+0x2b4>)
 8018bb6:	f004 fd9f 	bl	801d6f8 <iprintf>
        --pcb->snd_queuelen;
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018bc0:	3b01      	subs	r3, #1
 8018bc2:	b29a      	uxth	r2, r3
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018bce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018bd0:	69fb      	ldr	r3, [r7, #28]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d111      	bne.n	8018bfa <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018bda:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018bdc:	69fb      	ldr	r3, [r7, #28]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d106      	bne.n	8018bf0 <tcp_process+0x280>
 8018be2:	4b0e      	ldr	r3, [pc, #56]	; (8018c1c <tcp_process+0x2ac>)
 8018be4:	f44f 725d 	mov.w	r2, #884	; 0x374
 8018be8:	4917      	ldr	r1, [pc, #92]	; (8018c48 <tcp_process+0x2d8>)
 8018bea:	480e      	ldr	r0, [pc, #56]	; (8018c24 <tcp_process+0x2b4>)
 8018bec:	f004 fd84 	bl	801d6f8 <iprintf>
          pcb->unsent = rseg->next;
 8018bf0:	69fb      	ldr	r3, [r7, #28]
 8018bf2:	681a      	ldr	r2, [r3, #0]
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	66da      	str	r2, [r3, #108]	; 0x6c
 8018bf8:	e003      	b.n	8018c02 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8018bfa:	69fb      	ldr	r3, [r7, #28]
 8018bfc:	681a      	ldr	r2, [r3, #0]
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018c02:	69f8      	ldr	r0, [r7, #28]
 8018c04:	f7fe fd3e 	bl	8017684 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d11d      	bne.n	8018c4c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018c16:	861a      	strh	r2, [r3, #48]	; 0x30
 8018c18:	e01f      	b.n	8018c5a <tcp_process+0x2ea>
 8018c1a:	bf00      	nop
 8018c1c:	080216bc 	.word	0x080216bc
 8018c20:	08021910 	.word	0x08021910
 8018c24:	08021724 	.word	0x08021724
 8018c28:	20007748 	.word	0x20007748
 8018c2c:	20007740 	.word	0x20007740
 8018c30:	2000773c 	.word	0x2000773c
 8018c34:	0802192c 	.word	0x0802192c
 8018c38:	20007749 	.word	0x20007749
 8018c3c:	2000ba68 	.word	0x2000ba68
 8018c40:	2000772c 	.word	0x2000772c
 8018c44:	0802194c 	.word	0x0802194c
 8018c48:	08021964 	.word	0x08021964
        } else {
          pcb->rtime = 0;
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	2200      	movs	r2, #0
 8018c50:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	2200      	movs	r2, #0
 8018c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d00a      	beq.n	8018c7a <tcp_process+0x30a>
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018c6a:	687a      	ldr	r2, [r7, #4]
 8018c6c:	6910      	ldr	r0, [r2, #16]
 8018c6e:	2200      	movs	r2, #0
 8018c70:	6879      	ldr	r1, [r7, #4]
 8018c72:	4798      	blx	r3
 8018c74:	4603      	mov	r3, r0
 8018c76:	76bb      	strb	r3, [r7, #26]
 8018c78:	e001      	b.n	8018c7e <tcp_process+0x30e>
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8018c7e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018c82:	f113 0f0d 	cmn.w	r3, #13
 8018c86:	d102      	bne.n	8018c8e <tcp_process+0x31e>
          return ERR_ABRT;
 8018c88:	f06f 030c 	mvn.w	r3, #12
 8018c8c:	e250      	b.n	8019130 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	8b5b      	ldrh	r3, [r3, #26]
 8018c92:	f043 0302 	orr.w	r3, r3, #2
 8018c96:	b29a      	uxth	r2, r3
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018c9c:	e23a      	b.n	8019114 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018c9e:	4b9d      	ldr	r3, [pc, #628]	; (8018f14 <tcp_process+0x5a4>)
 8018ca0:	781b      	ldrb	r3, [r3, #0]
 8018ca2:	f003 0310 	and.w	r3, r3, #16
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	f000 8234 	beq.w	8019114 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018cac:	4b9a      	ldr	r3, [pc, #616]	; (8018f18 <tcp_process+0x5a8>)
 8018cae:	6819      	ldr	r1, [r3, #0]
 8018cb0:	4b9a      	ldr	r3, [pc, #616]	; (8018f1c <tcp_process+0x5ac>)
 8018cb2:	881b      	ldrh	r3, [r3, #0]
 8018cb4:	461a      	mov	r2, r3
 8018cb6:	4b9a      	ldr	r3, [pc, #616]	; (8018f20 <tcp_process+0x5b0>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018cbc:	4b99      	ldr	r3, [pc, #612]	; (8018f24 <tcp_process+0x5b4>)
 8018cbe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018cc0:	885b      	ldrh	r3, [r3, #2]
 8018cc2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018cc4:	4a97      	ldr	r2, [pc, #604]	; (8018f24 <tcp_process+0x5b4>)
 8018cc6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018cc8:	8812      	ldrh	r2, [r2, #0]
 8018cca:	b292      	uxth	r2, r2
 8018ccc:	9202      	str	r2, [sp, #8]
 8018cce:	9301      	str	r3, [sp, #4]
 8018cd0:	4b95      	ldr	r3, [pc, #596]	; (8018f28 <tcp_process+0x5b8>)
 8018cd2:	9300      	str	r3, [sp, #0]
 8018cd4:	4b95      	ldr	r3, [pc, #596]	; (8018f2c <tcp_process+0x5bc>)
 8018cd6:	4602      	mov	r2, r0
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f002 fc93 	bl	801b604 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018ce4:	2b05      	cmp	r3, #5
 8018ce6:	f200 8215 	bhi.w	8019114 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	2200      	movs	r2, #0
 8018cee:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018cf0:	6878      	ldr	r0, [r7, #4]
 8018cf2:	f002 fa51 	bl	801b198 <tcp_rexmit_rto>
      break;
 8018cf6:	e20d      	b.n	8019114 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8018cf8:	4b86      	ldr	r3, [pc, #536]	; (8018f14 <tcp_process+0x5a4>)
 8018cfa:	781b      	ldrb	r3, [r3, #0]
 8018cfc:	f003 0310 	and.w	r3, r3, #16
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	f000 80a1 	beq.w	8018e48 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018d06:	4b84      	ldr	r3, [pc, #528]	; (8018f18 <tcp_process+0x5a8>)
 8018d08:	681a      	ldr	r2, [r3, #0]
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d0e:	1ad3      	subs	r3, r2, r3
 8018d10:	3b01      	subs	r3, #1
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	db7e      	blt.n	8018e14 <tcp_process+0x4a4>
 8018d16:	4b80      	ldr	r3, [pc, #512]	; (8018f18 <tcp_process+0x5a8>)
 8018d18:	681a      	ldr	r2, [r3, #0]
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d1e:	1ad3      	subs	r3, r2, r3
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	dc77      	bgt.n	8018e14 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	2204      	movs	r2, #4
 8018d28:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d102      	bne.n	8018d38 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018d32:	23fa      	movs	r3, #250	; 0xfa
 8018d34:	76bb      	strb	r3, [r7, #26]
 8018d36:	e01d      	b.n	8018d74 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018d3c:	699b      	ldr	r3, [r3, #24]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d106      	bne.n	8018d50 <tcp_process+0x3e0>
 8018d42:	4b7b      	ldr	r3, [pc, #492]	; (8018f30 <tcp_process+0x5c0>)
 8018d44:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8018d48:	497a      	ldr	r1, [pc, #488]	; (8018f34 <tcp_process+0x5c4>)
 8018d4a:	487b      	ldr	r0, [pc, #492]	; (8018f38 <tcp_process+0x5c8>)
 8018d4c:	f004 fcd4 	bl	801d6f8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018d54:	699b      	ldr	r3, [r3, #24]
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d00a      	beq.n	8018d70 <tcp_process+0x400>
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018d5e:	699b      	ldr	r3, [r3, #24]
 8018d60:	687a      	ldr	r2, [r7, #4]
 8018d62:	6910      	ldr	r0, [r2, #16]
 8018d64:	2200      	movs	r2, #0
 8018d66:	6879      	ldr	r1, [r7, #4]
 8018d68:	4798      	blx	r3
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	76bb      	strb	r3, [r7, #26]
 8018d6e:	e001      	b.n	8018d74 <tcp_process+0x404>
 8018d70:	23f0      	movs	r3, #240	; 0xf0
 8018d72:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8018d74:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d00a      	beq.n	8018d92 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018d7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018d80:	f113 0f0d 	cmn.w	r3, #13
 8018d84:	d002      	beq.n	8018d8c <tcp_process+0x41c>
              tcp_abort(pcb);
 8018d86:	6878      	ldr	r0, [r7, #4]
 8018d88:	f7fd ff94 	bl	8016cb4 <tcp_abort>
            }
            return ERR_ABRT;
 8018d8c:	f06f 030c 	mvn.w	r3, #12
 8018d90:	e1ce      	b.n	8019130 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8018d92:	6878      	ldr	r0, [r7, #4]
 8018d94:	f000 fae0 	bl	8019358 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8018d98:	4b68      	ldr	r3, [pc, #416]	; (8018f3c <tcp_process+0x5cc>)
 8018d9a:	881b      	ldrh	r3, [r3, #0]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d005      	beq.n	8018dac <tcp_process+0x43c>
            recv_acked--;
 8018da0:	4b66      	ldr	r3, [pc, #408]	; (8018f3c <tcp_process+0x5cc>)
 8018da2:	881b      	ldrh	r3, [r3, #0]
 8018da4:	3b01      	subs	r3, #1
 8018da6:	b29a      	uxth	r2, r3
 8018da8:	4b64      	ldr	r3, [pc, #400]	; (8018f3c <tcp_process+0x5cc>)
 8018daa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018db0:	009a      	lsls	r2, r3, #2
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018db6:	005b      	lsls	r3, r3, #1
 8018db8:	f241 111c 	movw	r1, #4380	; 0x111c
 8018dbc:	428b      	cmp	r3, r1
 8018dbe:	bf38      	it	cc
 8018dc0:	460b      	movcc	r3, r1
 8018dc2:	429a      	cmp	r2, r3
 8018dc4:	d204      	bcs.n	8018dd0 <tcp_process+0x460>
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dca:	009b      	lsls	r3, r3, #2
 8018dcc:	b29b      	uxth	r3, r3
 8018dce:	e00d      	b.n	8018dec <tcp_process+0x47c>
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dd4:	005b      	lsls	r3, r3, #1
 8018dd6:	f241 121c 	movw	r2, #4380	; 0x111c
 8018dda:	4293      	cmp	r3, r2
 8018ddc:	d904      	bls.n	8018de8 <tcp_process+0x478>
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018de2:	005b      	lsls	r3, r3, #1
 8018de4:	b29b      	uxth	r3, r3
 8018de6:	e001      	b.n	8018dec <tcp_process+0x47c>
 8018de8:	f241 131c 	movw	r3, #4380	; 0x111c
 8018dec:	687a      	ldr	r2, [r7, #4]
 8018dee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018df2:	4b53      	ldr	r3, [pc, #332]	; (8018f40 <tcp_process+0x5d0>)
 8018df4:	781b      	ldrb	r3, [r3, #0]
 8018df6:	f003 0320 	and.w	r3, r3, #32
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d037      	beq.n	8018e6e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	8b5b      	ldrh	r3, [r3, #26]
 8018e02:	f043 0302 	orr.w	r3, r3, #2
 8018e06:	b29a      	uxth	r2, r3
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	2207      	movs	r2, #7
 8018e10:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018e12:	e02c      	b.n	8018e6e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018e14:	4b40      	ldr	r3, [pc, #256]	; (8018f18 <tcp_process+0x5a8>)
 8018e16:	6819      	ldr	r1, [r3, #0]
 8018e18:	4b40      	ldr	r3, [pc, #256]	; (8018f1c <tcp_process+0x5ac>)
 8018e1a:	881b      	ldrh	r3, [r3, #0]
 8018e1c:	461a      	mov	r2, r3
 8018e1e:	4b40      	ldr	r3, [pc, #256]	; (8018f20 <tcp_process+0x5b0>)
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018e24:	4b3f      	ldr	r3, [pc, #252]	; (8018f24 <tcp_process+0x5b4>)
 8018e26:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018e28:	885b      	ldrh	r3, [r3, #2]
 8018e2a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018e2c:	4a3d      	ldr	r2, [pc, #244]	; (8018f24 <tcp_process+0x5b4>)
 8018e2e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018e30:	8812      	ldrh	r2, [r2, #0]
 8018e32:	b292      	uxth	r2, r2
 8018e34:	9202      	str	r2, [sp, #8]
 8018e36:	9301      	str	r3, [sp, #4]
 8018e38:	4b3b      	ldr	r3, [pc, #236]	; (8018f28 <tcp_process+0x5b8>)
 8018e3a:	9300      	str	r3, [sp, #0]
 8018e3c:	4b3b      	ldr	r3, [pc, #236]	; (8018f2c <tcp_process+0x5bc>)
 8018e3e:	4602      	mov	r2, r0
 8018e40:	6878      	ldr	r0, [r7, #4]
 8018e42:	f002 fbdf 	bl	801b604 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8018e46:	e167      	b.n	8019118 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8018e48:	4b32      	ldr	r3, [pc, #200]	; (8018f14 <tcp_process+0x5a4>)
 8018e4a:	781b      	ldrb	r3, [r3, #0]
 8018e4c:	f003 0302 	and.w	r3, r3, #2
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	f000 8161 	beq.w	8019118 <tcp_process+0x7a8>
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e5a:	1e5a      	subs	r2, r3, #1
 8018e5c:	4b30      	ldr	r3, [pc, #192]	; (8018f20 <tcp_process+0x5b0>)
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	429a      	cmp	r2, r3
 8018e62:	f040 8159 	bne.w	8019118 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8018e66:	6878      	ldr	r0, [r7, #4]
 8018e68:	f002 f9b8 	bl	801b1dc <tcp_rexmit>
      break;
 8018e6c:	e154      	b.n	8019118 <tcp_process+0x7a8>
 8018e6e:	e153      	b.n	8019118 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8018e70:	6878      	ldr	r0, [r7, #4]
 8018e72:	f000 fa71 	bl	8019358 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8018e76:	4b32      	ldr	r3, [pc, #200]	; (8018f40 <tcp_process+0x5d0>)
 8018e78:	781b      	ldrb	r3, [r3, #0]
 8018e7a:	f003 0320 	and.w	r3, r3, #32
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	f000 814c 	beq.w	801911c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	8b5b      	ldrh	r3, [r3, #26]
 8018e88:	f043 0302 	orr.w	r3, r3, #2
 8018e8c:	b29a      	uxth	r2, r3
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	2207      	movs	r2, #7
 8018e96:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018e98:	e140      	b.n	801911c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8018e9a:	6878      	ldr	r0, [r7, #4]
 8018e9c:	f000 fa5c 	bl	8019358 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018ea0:	4b27      	ldr	r3, [pc, #156]	; (8018f40 <tcp_process+0x5d0>)
 8018ea2:	781b      	ldrb	r3, [r3, #0]
 8018ea4:	f003 0320 	and.w	r3, r3, #32
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d071      	beq.n	8018f90 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018eac:	4b19      	ldr	r3, [pc, #100]	; (8018f14 <tcp_process+0x5a4>)
 8018eae:	781b      	ldrb	r3, [r3, #0]
 8018eb0:	f003 0310 	and.w	r3, r3, #16
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d060      	beq.n	8018f7a <tcp_process+0x60a>
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018ebc:	4b16      	ldr	r3, [pc, #88]	; (8018f18 <tcp_process+0x5a8>)
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	429a      	cmp	r2, r3
 8018ec2:	d15a      	bne.n	8018f7a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d156      	bne.n	8018f7a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	8b5b      	ldrh	r3, [r3, #26]
 8018ed0:	f043 0302 	orr.w	r3, r3, #2
 8018ed4:	b29a      	uxth	r2, r3
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8018eda:	6878      	ldr	r0, [r7, #4]
 8018edc:	f7fe fdbe 	bl	8017a5c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018ee0:	4b18      	ldr	r3, [pc, #96]	; (8018f44 <tcp_process+0x5d4>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	687a      	ldr	r2, [r7, #4]
 8018ee6:	429a      	cmp	r2, r3
 8018ee8:	d105      	bne.n	8018ef6 <tcp_process+0x586>
 8018eea:	4b16      	ldr	r3, [pc, #88]	; (8018f44 <tcp_process+0x5d4>)
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	68db      	ldr	r3, [r3, #12]
 8018ef0:	4a14      	ldr	r2, [pc, #80]	; (8018f44 <tcp_process+0x5d4>)
 8018ef2:	6013      	str	r3, [r2, #0]
 8018ef4:	e02e      	b.n	8018f54 <tcp_process+0x5e4>
 8018ef6:	4b13      	ldr	r3, [pc, #76]	; (8018f44 <tcp_process+0x5d4>)
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	617b      	str	r3, [r7, #20]
 8018efc:	e027      	b.n	8018f4e <tcp_process+0x5de>
 8018efe:	697b      	ldr	r3, [r7, #20]
 8018f00:	68db      	ldr	r3, [r3, #12]
 8018f02:	687a      	ldr	r2, [r7, #4]
 8018f04:	429a      	cmp	r2, r3
 8018f06:	d11f      	bne.n	8018f48 <tcp_process+0x5d8>
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	68da      	ldr	r2, [r3, #12]
 8018f0c:	697b      	ldr	r3, [r7, #20]
 8018f0e:	60da      	str	r2, [r3, #12]
 8018f10:	e020      	b.n	8018f54 <tcp_process+0x5e4>
 8018f12:	bf00      	nop
 8018f14:	20007748 	.word	0x20007748
 8018f18:	20007740 	.word	0x20007740
 8018f1c:	20007746 	.word	0x20007746
 8018f20:	2000773c 	.word	0x2000773c
 8018f24:	2000772c 	.word	0x2000772c
 8018f28:	2000898c 	.word	0x2000898c
 8018f2c:	20008990 	.word	0x20008990
 8018f30:	080216bc 	.word	0x080216bc
 8018f34:	08021978 	.word	0x08021978
 8018f38:	08021724 	.word	0x08021724
 8018f3c:	20007744 	.word	0x20007744
 8018f40:	20007749 	.word	0x20007749
 8018f44:	2000ba64 	.word	0x2000ba64
 8018f48:	697b      	ldr	r3, [r7, #20]
 8018f4a:	68db      	ldr	r3, [r3, #12]
 8018f4c:	617b      	str	r3, [r7, #20]
 8018f4e:	697b      	ldr	r3, [r7, #20]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d1d4      	bne.n	8018efe <tcp_process+0x58e>
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	2200      	movs	r2, #0
 8018f58:	60da      	str	r2, [r3, #12]
 8018f5a:	4b77      	ldr	r3, [pc, #476]	; (8019138 <tcp_process+0x7c8>)
 8018f5c:	2201      	movs	r2, #1
 8018f5e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	220a      	movs	r2, #10
 8018f64:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8018f66:	4b75      	ldr	r3, [pc, #468]	; (801913c <tcp_process+0x7cc>)
 8018f68:	681a      	ldr	r2, [r3, #0]
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	60da      	str	r2, [r3, #12]
 8018f6e:	4a73      	ldr	r2, [pc, #460]	; (801913c <tcp_process+0x7cc>)
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	6013      	str	r3, [r2, #0]
 8018f74:	f002 fea6 	bl	801bcc4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8018f78:	e0d2      	b.n	8019120 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	8b5b      	ldrh	r3, [r3, #26]
 8018f7e:	f043 0302 	orr.w	r3, r3, #2
 8018f82:	b29a      	uxth	r2, r3
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	2208      	movs	r2, #8
 8018f8c:	751a      	strb	r2, [r3, #20]
      break;
 8018f8e:	e0c7      	b.n	8019120 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018f90:	4b6b      	ldr	r3, [pc, #428]	; (8019140 <tcp_process+0x7d0>)
 8018f92:	781b      	ldrb	r3, [r3, #0]
 8018f94:	f003 0310 	and.w	r3, r3, #16
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	f000 80c1 	beq.w	8019120 <tcp_process+0x7b0>
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018fa2:	4b68      	ldr	r3, [pc, #416]	; (8019144 <tcp_process+0x7d4>)
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	429a      	cmp	r2, r3
 8018fa8:	f040 80ba 	bne.w	8019120 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	f040 80b5 	bne.w	8019120 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	2206      	movs	r2, #6
 8018fba:	751a      	strb	r2, [r3, #20]
      break;
 8018fbc:	e0b0      	b.n	8019120 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018fbe:	6878      	ldr	r0, [r7, #4]
 8018fc0:	f000 f9ca 	bl	8019358 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018fc4:	4b60      	ldr	r3, [pc, #384]	; (8019148 <tcp_process+0x7d8>)
 8018fc6:	781b      	ldrb	r3, [r3, #0]
 8018fc8:	f003 0320 	and.w	r3, r3, #32
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	f000 80a9 	beq.w	8019124 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	8b5b      	ldrh	r3, [r3, #26]
 8018fd6:	f043 0302 	orr.w	r3, r3, #2
 8018fda:	b29a      	uxth	r2, r3
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018fe0:	6878      	ldr	r0, [r7, #4]
 8018fe2:	f7fe fd3b 	bl	8017a5c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018fe6:	4b59      	ldr	r3, [pc, #356]	; (801914c <tcp_process+0x7dc>)
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	687a      	ldr	r2, [r7, #4]
 8018fec:	429a      	cmp	r2, r3
 8018fee:	d105      	bne.n	8018ffc <tcp_process+0x68c>
 8018ff0:	4b56      	ldr	r3, [pc, #344]	; (801914c <tcp_process+0x7dc>)
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	68db      	ldr	r3, [r3, #12]
 8018ff6:	4a55      	ldr	r2, [pc, #340]	; (801914c <tcp_process+0x7dc>)
 8018ff8:	6013      	str	r3, [r2, #0]
 8018ffa:	e013      	b.n	8019024 <tcp_process+0x6b4>
 8018ffc:	4b53      	ldr	r3, [pc, #332]	; (801914c <tcp_process+0x7dc>)
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	613b      	str	r3, [r7, #16]
 8019002:	e00c      	b.n	801901e <tcp_process+0x6ae>
 8019004:	693b      	ldr	r3, [r7, #16]
 8019006:	68db      	ldr	r3, [r3, #12]
 8019008:	687a      	ldr	r2, [r7, #4]
 801900a:	429a      	cmp	r2, r3
 801900c:	d104      	bne.n	8019018 <tcp_process+0x6a8>
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	68da      	ldr	r2, [r3, #12]
 8019012:	693b      	ldr	r3, [r7, #16]
 8019014:	60da      	str	r2, [r3, #12]
 8019016:	e005      	b.n	8019024 <tcp_process+0x6b4>
 8019018:	693b      	ldr	r3, [r7, #16]
 801901a:	68db      	ldr	r3, [r3, #12]
 801901c:	613b      	str	r3, [r7, #16]
 801901e:	693b      	ldr	r3, [r7, #16]
 8019020:	2b00      	cmp	r3, #0
 8019022:	d1ef      	bne.n	8019004 <tcp_process+0x694>
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	2200      	movs	r2, #0
 8019028:	60da      	str	r2, [r3, #12]
 801902a:	4b43      	ldr	r3, [pc, #268]	; (8019138 <tcp_process+0x7c8>)
 801902c:	2201      	movs	r2, #1
 801902e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	220a      	movs	r2, #10
 8019034:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019036:	4b41      	ldr	r3, [pc, #260]	; (801913c <tcp_process+0x7cc>)
 8019038:	681a      	ldr	r2, [r3, #0]
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	60da      	str	r2, [r3, #12]
 801903e:	4a3f      	ldr	r2, [pc, #252]	; (801913c <tcp_process+0x7cc>)
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	6013      	str	r3, [r2, #0]
 8019044:	f002 fe3e 	bl	801bcc4 <tcp_timer_needed>
      }
      break;
 8019048:	e06c      	b.n	8019124 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801904a:	6878      	ldr	r0, [r7, #4]
 801904c:	f000 f984 	bl	8019358 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019050:	4b3b      	ldr	r3, [pc, #236]	; (8019140 <tcp_process+0x7d0>)
 8019052:	781b      	ldrb	r3, [r3, #0]
 8019054:	f003 0310 	and.w	r3, r3, #16
 8019058:	2b00      	cmp	r3, #0
 801905a:	d065      	beq.n	8019128 <tcp_process+0x7b8>
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019060:	4b38      	ldr	r3, [pc, #224]	; (8019144 <tcp_process+0x7d4>)
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	429a      	cmp	r2, r3
 8019066:	d15f      	bne.n	8019128 <tcp_process+0x7b8>
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801906c:	2b00      	cmp	r3, #0
 801906e:	d15b      	bne.n	8019128 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8019070:	6878      	ldr	r0, [r7, #4]
 8019072:	f7fe fcf3 	bl	8017a5c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019076:	4b35      	ldr	r3, [pc, #212]	; (801914c <tcp_process+0x7dc>)
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	687a      	ldr	r2, [r7, #4]
 801907c:	429a      	cmp	r2, r3
 801907e:	d105      	bne.n	801908c <tcp_process+0x71c>
 8019080:	4b32      	ldr	r3, [pc, #200]	; (801914c <tcp_process+0x7dc>)
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	68db      	ldr	r3, [r3, #12]
 8019086:	4a31      	ldr	r2, [pc, #196]	; (801914c <tcp_process+0x7dc>)
 8019088:	6013      	str	r3, [r2, #0]
 801908a:	e013      	b.n	80190b4 <tcp_process+0x744>
 801908c:	4b2f      	ldr	r3, [pc, #188]	; (801914c <tcp_process+0x7dc>)
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	60fb      	str	r3, [r7, #12]
 8019092:	e00c      	b.n	80190ae <tcp_process+0x73e>
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	68db      	ldr	r3, [r3, #12]
 8019098:	687a      	ldr	r2, [r7, #4]
 801909a:	429a      	cmp	r2, r3
 801909c:	d104      	bne.n	80190a8 <tcp_process+0x738>
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	68da      	ldr	r2, [r3, #12]
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	60da      	str	r2, [r3, #12]
 80190a6:	e005      	b.n	80190b4 <tcp_process+0x744>
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	68db      	ldr	r3, [r3, #12]
 80190ac:	60fb      	str	r3, [r7, #12]
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d1ef      	bne.n	8019094 <tcp_process+0x724>
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	2200      	movs	r2, #0
 80190b8:	60da      	str	r2, [r3, #12]
 80190ba:	4b1f      	ldr	r3, [pc, #124]	; (8019138 <tcp_process+0x7c8>)
 80190bc:	2201      	movs	r2, #1
 80190be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	220a      	movs	r2, #10
 80190c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80190c6:	4b1d      	ldr	r3, [pc, #116]	; (801913c <tcp_process+0x7cc>)
 80190c8:	681a      	ldr	r2, [r3, #0]
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	60da      	str	r2, [r3, #12]
 80190ce:	4a1b      	ldr	r2, [pc, #108]	; (801913c <tcp_process+0x7cc>)
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	6013      	str	r3, [r2, #0]
 80190d4:	f002 fdf6 	bl	801bcc4 <tcp_timer_needed>
      }
      break;
 80190d8:	e026      	b.n	8019128 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80190da:	6878      	ldr	r0, [r7, #4]
 80190dc:	f000 f93c 	bl	8019358 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80190e0:	4b17      	ldr	r3, [pc, #92]	; (8019140 <tcp_process+0x7d0>)
 80190e2:	781b      	ldrb	r3, [r3, #0]
 80190e4:	f003 0310 	and.w	r3, r3, #16
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d01f      	beq.n	801912c <tcp_process+0x7bc>
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80190f0:	4b14      	ldr	r3, [pc, #80]	; (8019144 <tcp_process+0x7d4>)
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	429a      	cmp	r2, r3
 80190f6:	d119      	bne.n	801912c <tcp_process+0x7bc>
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d115      	bne.n	801912c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8019100:	4b11      	ldr	r3, [pc, #68]	; (8019148 <tcp_process+0x7d8>)
 8019102:	781b      	ldrb	r3, [r3, #0]
 8019104:	f043 0310 	orr.w	r3, r3, #16
 8019108:	b2da      	uxtb	r2, r3
 801910a:	4b0f      	ldr	r3, [pc, #60]	; (8019148 <tcp_process+0x7d8>)
 801910c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801910e:	e00d      	b.n	801912c <tcp_process+0x7bc>
    default:
      break;
 8019110:	bf00      	nop
 8019112:	e00c      	b.n	801912e <tcp_process+0x7be>
      break;
 8019114:	bf00      	nop
 8019116:	e00a      	b.n	801912e <tcp_process+0x7be>
      break;
 8019118:	bf00      	nop
 801911a:	e008      	b.n	801912e <tcp_process+0x7be>
      break;
 801911c:	bf00      	nop
 801911e:	e006      	b.n	801912e <tcp_process+0x7be>
      break;
 8019120:	bf00      	nop
 8019122:	e004      	b.n	801912e <tcp_process+0x7be>
      break;
 8019124:	bf00      	nop
 8019126:	e002      	b.n	801912e <tcp_process+0x7be>
      break;
 8019128:	bf00      	nop
 801912a:	e000      	b.n	801912e <tcp_process+0x7be>
      break;
 801912c:	bf00      	nop
  }
  return ERR_OK;
 801912e:	2300      	movs	r3, #0
}
 8019130:	4618      	mov	r0, r3
 8019132:	3724      	adds	r7, #36	; 0x24
 8019134:	46bd      	mov	sp, r7
 8019136:	bd90      	pop	{r4, r7, pc}
 8019138:	2000ba60 	.word	0x2000ba60
 801913c:	2000ba74 	.word	0x2000ba74
 8019140:	20007748 	.word	0x20007748
 8019144:	20007740 	.word	0x20007740
 8019148:	20007749 	.word	0x20007749
 801914c:	2000ba64 	.word	0x2000ba64

08019150 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8019150:	b590      	push	{r4, r7, lr}
 8019152:	b085      	sub	sp, #20
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
 8019158:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	2b00      	cmp	r3, #0
 801915e:	d106      	bne.n	801916e <tcp_oos_insert_segment+0x1e>
 8019160:	4b3b      	ldr	r3, [pc, #236]	; (8019250 <tcp_oos_insert_segment+0x100>)
 8019162:	f240 421f 	movw	r2, #1055	; 0x41f
 8019166:	493b      	ldr	r1, [pc, #236]	; (8019254 <tcp_oos_insert_segment+0x104>)
 8019168:	483b      	ldr	r0, [pc, #236]	; (8019258 <tcp_oos_insert_segment+0x108>)
 801916a:	f004 fac5 	bl	801d6f8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	68db      	ldr	r3, [r3, #12]
 8019172:	899b      	ldrh	r3, [r3, #12]
 8019174:	b29b      	uxth	r3, r3
 8019176:	4618      	mov	r0, r3
 8019178:	f7f7 f8a6 	bl	80102c8 <lwip_htons>
 801917c:	4603      	mov	r3, r0
 801917e:	b2db      	uxtb	r3, r3
 8019180:	f003 0301 	and.w	r3, r3, #1
 8019184:	2b00      	cmp	r3, #0
 8019186:	d028      	beq.n	80191da <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8019188:	6838      	ldr	r0, [r7, #0]
 801918a:	f7fe fa67 	bl	801765c <tcp_segs_free>
    next = NULL;
 801918e:	2300      	movs	r3, #0
 8019190:	603b      	str	r3, [r7, #0]
 8019192:	e056      	b.n	8019242 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019194:	683b      	ldr	r3, [r7, #0]
 8019196:	68db      	ldr	r3, [r3, #12]
 8019198:	899b      	ldrh	r3, [r3, #12]
 801919a:	b29b      	uxth	r3, r3
 801919c:	4618      	mov	r0, r3
 801919e:	f7f7 f893 	bl	80102c8 <lwip_htons>
 80191a2:	4603      	mov	r3, r0
 80191a4:	b2db      	uxtb	r3, r3
 80191a6:	f003 0301 	and.w	r3, r3, #1
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d00d      	beq.n	80191ca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	68db      	ldr	r3, [r3, #12]
 80191b2:	899b      	ldrh	r3, [r3, #12]
 80191b4:	b29c      	uxth	r4, r3
 80191b6:	2001      	movs	r0, #1
 80191b8:	f7f7 f886 	bl	80102c8 <lwip_htons>
 80191bc:	4603      	mov	r3, r0
 80191be:	461a      	mov	r2, r3
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	68db      	ldr	r3, [r3, #12]
 80191c4:	4322      	orrs	r2, r4
 80191c6:	b292      	uxth	r2, r2
 80191c8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80191ca:	683b      	ldr	r3, [r7, #0]
 80191cc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80191ce:	683b      	ldr	r3, [r7, #0]
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80191d4:	68f8      	ldr	r0, [r7, #12]
 80191d6:	f7fe fa55 	bl	8017684 <tcp_seg_free>
    while (next &&
 80191da:	683b      	ldr	r3, [r7, #0]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d00e      	beq.n	80191fe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	891b      	ldrh	r3, [r3, #8]
 80191e4:	461a      	mov	r2, r3
 80191e6:	4b1d      	ldr	r3, [pc, #116]	; (801925c <tcp_oos_insert_segment+0x10c>)
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	441a      	add	r2, r3
 80191ec:	683b      	ldr	r3, [r7, #0]
 80191ee:	68db      	ldr	r3, [r3, #12]
 80191f0:	685b      	ldr	r3, [r3, #4]
 80191f2:	6839      	ldr	r1, [r7, #0]
 80191f4:	8909      	ldrh	r1, [r1, #8]
 80191f6:	440b      	add	r3, r1
 80191f8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	daca      	bge.n	8019194 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d01e      	beq.n	8019242 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	891b      	ldrh	r3, [r3, #8]
 8019208:	461a      	mov	r2, r3
 801920a:	4b14      	ldr	r3, [pc, #80]	; (801925c <tcp_oos_insert_segment+0x10c>)
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	441a      	add	r2, r3
 8019210:	683b      	ldr	r3, [r7, #0]
 8019212:	68db      	ldr	r3, [r3, #12]
 8019214:	685b      	ldr	r3, [r3, #4]
 8019216:	1ad3      	subs	r3, r2, r3
    if (next &&
 8019218:	2b00      	cmp	r3, #0
 801921a:	dd12      	ble.n	8019242 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801921c:	683b      	ldr	r3, [r7, #0]
 801921e:	68db      	ldr	r3, [r3, #12]
 8019220:	685b      	ldr	r3, [r3, #4]
 8019222:	b29a      	uxth	r2, r3
 8019224:	4b0d      	ldr	r3, [pc, #52]	; (801925c <tcp_oos_insert_segment+0x10c>)
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	b29b      	uxth	r3, r3
 801922a:	1ad3      	subs	r3, r2, r3
 801922c:	b29a      	uxth	r2, r3
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	685a      	ldr	r2, [r3, #4]
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	891b      	ldrh	r3, [r3, #8]
 801923a:	4619      	mov	r1, r3
 801923c:	4610      	mov	r0, r2
 801923e:	f7fc fd25 	bl	8015c8c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	683a      	ldr	r2, [r7, #0]
 8019246:	601a      	str	r2, [r3, #0]
}
 8019248:	bf00      	nop
 801924a:	3714      	adds	r7, #20
 801924c:	46bd      	mov	sp, r7
 801924e:	bd90      	pop	{r4, r7, pc}
 8019250:	080216bc 	.word	0x080216bc
 8019254:	08021998 	.word	0x08021998
 8019258:	08021724 	.word	0x08021724
 801925c:	2000773c 	.word	0x2000773c

08019260 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8019260:	b5b0      	push	{r4, r5, r7, lr}
 8019262:	b086      	sub	sp, #24
 8019264:	af00      	add	r7, sp, #0
 8019266:	60f8      	str	r0, [r7, #12]
 8019268:	60b9      	str	r1, [r7, #8]
 801926a:	607a      	str	r2, [r7, #4]
 801926c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801926e:	e03e      	b.n	80192ee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8019270:	68bb      	ldr	r3, [r7, #8]
 8019272:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8019274:	68bb      	ldr	r3, [r7, #8]
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801927a:	697b      	ldr	r3, [r7, #20]
 801927c:	685b      	ldr	r3, [r3, #4]
 801927e:	4618      	mov	r0, r3
 8019280:	f7fc ff18 	bl	80160b4 <pbuf_clen>
 8019284:	4603      	mov	r3, r0
 8019286:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8019288:	68fb      	ldr	r3, [r7, #12]
 801928a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801928e:	8a7a      	ldrh	r2, [r7, #18]
 8019290:	429a      	cmp	r2, r3
 8019292:	d906      	bls.n	80192a2 <tcp_free_acked_segments+0x42>
 8019294:	4b2a      	ldr	r3, [pc, #168]	; (8019340 <tcp_free_acked_segments+0xe0>)
 8019296:	f240 4257 	movw	r2, #1111	; 0x457
 801929a:	492a      	ldr	r1, [pc, #168]	; (8019344 <tcp_free_acked_segments+0xe4>)
 801929c:	482a      	ldr	r0, [pc, #168]	; (8019348 <tcp_free_acked_segments+0xe8>)
 801929e:	f004 fa2b 	bl	801d6f8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80192a8:	8a7b      	ldrh	r3, [r7, #18]
 80192aa:	1ad3      	subs	r3, r2, r3
 80192ac:	b29a      	uxth	r2, r3
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80192b4:	697b      	ldr	r3, [r7, #20]
 80192b6:	891a      	ldrh	r2, [r3, #8]
 80192b8:	4b24      	ldr	r3, [pc, #144]	; (801934c <tcp_free_acked_segments+0xec>)
 80192ba:	881b      	ldrh	r3, [r3, #0]
 80192bc:	4413      	add	r3, r2
 80192be:	b29a      	uxth	r2, r3
 80192c0:	4b22      	ldr	r3, [pc, #136]	; (801934c <tcp_free_acked_segments+0xec>)
 80192c2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80192c4:	6978      	ldr	r0, [r7, #20]
 80192c6:	f7fe f9dd 	bl	8017684 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d00c      	beq.n	80192ee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80192d4:	68bb      	ldr	r3, [r7, #8]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d109      	bne.n	80192ee <tcp_free_acked_segments+0x8e>
 80192da:	683b      	ldr	r3, [r7, #0]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d106      	bne.n	80192ee <tcp_free_acked_segments+0x8e>
 80192e0:	4b17      	ldr	r3, [pc, #92]	; (8019340 <tcp_free_acked_segments+0xe0>)
 80192e2:	f240 4262 	movw	r2, #1122	; 0x462
 80192e6:	491a      	ldr	r1, [pc, #104]	; (8019350 <tcp_free_acked_segments+0xf0>)
 80192e8:	4817      	ldr	r0, [pc, #92]	; (8019348 <tcp_free_acked_segments+0xe8>)
 80192ea:	f004 fa05 	bl	801d6f8 <iprintf>
  while (seg_list != NULL &&
 80192ee:	68bb      	ldr	r3, [r7, #8]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d020      	beq.n	8019336 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80192f4:	68bb      	ldr	r3, [r7, #8]
 80192f6:	68db      	ldr	r3, [r3, #12]
 80192f8:	685b      	ldr	r3, [r3, #4]
 80192fa:	4618      	mov	r0, r3
 80192fc:	f7f6 fff9 	bl	80102f2 <lwip_htonl>
 8019300:	4604      	mov	r4, r0
 8019302:	68bb      	ldr	r3, [r7, #8]
 8019304:	891b      	ldrh	r3, [r3, #8]
 8019306:	461d      	mov	r5, r3
 8019308:	68bb      	ldr	r3, [r7, #8]
 801930a:	68db      	ldr	r3, [r3, #12]
 801930c:	899b      	ldrh	r3, [r3, #12]
 801930e:	b29b      	uxth	r3, r3
 8019310:	4618      	mov	r0, r3
 8019312:	f7f6 ffd9 	bl	80102c8 <lwip_htons>
 8019316:	4603      	mov	r3, r0
 8019318:	b2db      	uxtb	r3, r3
 801931a:	f003 0303 	and.w	r3, r3, #3
 801931e:	2b00      	cmp	r3, #0
 8019320:	d001      	beq.n	8019326 <tcp_free_acked_segments+0xc6>
 8019322:	2301      	movs	r3, #1
 8019324:	e000      	b.n	8019328 <tcp_free_acked_segments+0xc8>
 8019326:	2300      	movs	r3, #0
 8019328:	442b      	add	r3, r5
 801932a:	18e2      	adds	r2, r4, r3
 801932c:	4b09      	ldr	r3, [pc, #36]	; (8019354 <tcp_free_acked_segments+0xf4>)
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8019332:	2b00      	cmp	r3, #0
 8019334:	dd9c      	ble.n	8019270 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8019336:	68bb      	ldr	r3, [r7, #8]
}
 8019338:	4618      	mov	r0, r3
 801933a:	3718      	adds	r7, #24
 801933c:	46bd      	mov	sp, r7
 801933e:	bdb0      	pop	{r4, r5, r7, pc}
 8019340:	080216bc 	.word	0x080216bc
 8019344:	080219c0 	.word	0x080219c0
 8019348:	08021724 	.word	0x08021724
 801934c:	20007744 	.word	0x20007744
 8019350:	080219e8 	.word	0x080219e8
 8019354:	20007740 	.word	0x20007740

08019358 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8019358:	b5b0      	push	{r4, r5, r7, lr}
 801935a:	b094      	sub	sp, #80	; 0x50
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8019360:	2300      	movs	r3, #0
 8019362:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	2b00      	cmp	r3, #0
 8019368:	d106      	bne.n	8019378 <tcp_receive+0x20>
 801936a:	4ba6      	ldr	r3, [pc, #664]	; (8019604 <tcp_receive+0x2ac>)
 801936c:	f240 427b 	movw	r2, #1147	; 0x47b
 8019370:	49a5      	ldr	r1, [pc, #660]	; (8019608 <tcp_receive+0x2b0>)
 8019372:	48a6      	ldr	r0, [pc, #664]	; (801960c <tcp_receive+0x2b4>)
 8019374:	f004 f9c0 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	7d1b      	ldrb	r3, [r3, #20]
 801937c:	2b03      	cmp	r3, #3
 801937e:	d806      	bhi.n	801938e <tcp_receive+0x36>
 8019380:	4ba0      	ldr	r3, [pc, #640]	; (8019604 <tcp_receive+0x2ac>)
 8019382:	f240 427c 	movw	r2, #1148	; 0x47c
 8019386:	49a2      	ldr	r1, [pc, #648]	; (8019610 <tcp_receive+0x2b8>)
 8019388:	48a0      	ldr	r0, [pc, #640]	; (801960c <tcp_receive+0x2b4>)
 801938a:	f004 f9b5 	bl	801d6f8 <iprintf>

  if (flags & TCP_ACK) {
 801938e:	4ba1      	ldr	r3, [pc, #644]	; (8019614 <tcp_receive+0x2bc>)
 8019390:	781b      	ldrb	r3, [r3, #0]
 8019392:	f003 0310 	and.w	r3, r3, #16
 8019396:	2b00      	cmp	r3, #0
 8019398:	f000 8263 	beq.w	8019862 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80193a2:	461a      	mov	r2, r3
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80193a8:	4413      	add	r3, r2
 80193aa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80193b0:	4b99      	ldr	r3, [pc, #612]	; (8019618 <tcp_receive+0x2c0>)
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	1ad3      	subs	r3, r2, r3
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	db1b      	blt.n	80193f2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80193be:	4b96      	ldr	r3, [pc, #600]	; (8019618 <tcp_receive+0x2c0>)
 80193c0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80193c2:	429a      	cmp	r2, r3
 80193c4:	d106      	bne.n	80193d4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80193ca:	4b94      	ldr	r3, [pc, #592]	; (801961c <tcp_receive+0x2c4>)
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	1ad3      	subs	r3, r2, r3
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	db0e      	blt.n	80193f2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80193d8:	4b90      	ldr	r3, [pc, #576]	; (801961c <tcp_receive+0x2c4>)
 80193da:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80193dc:	429a      	cmp	r2, r3
 80193de:	d125      	bne.n	801942c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80193e0:	4b8f      	ldr	r3, [pc, #572]	; (8019620 <tcp_receive+0x2c8>)
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	89db      	ldrh	r3, [r3, #14]
 80193e6:	b29a      	uxth	r2, r3
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80193ee:	429a      	cmp	r2, r3
 80193f0:	d91c      	bls.n	801942c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80193f2:	4b8b      	ldr	r3, [pc, #556]	; (8019620 <tcp_receive+0x2c8>)
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	89db      	ldrh	r3, [r3, #14]
 80193f8:	b29a      	uxth	r2, r3
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801940c:	429a      	cmp	r2, r3
 801940e:	d205      	bcs.n	801941c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801941c:	4b7e      	ldr	r3, [pc, #504]	; (8019618 <tcp_receive+0x2c0>)
 801941e:	681a      	ldr	r2, [r3, #0]
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8019424:	4b7d      	ldr	r3, [pc, #500]	; (801961c <tcp_receive+0x2c4>)
 8019426:	681a      	ldr	r2, [r3, #0]
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801942c:	4b7b      	ldr	r3, [pc, #492]	; (801961c <tcp_receive+0x2c4>)
 801942e:	681a      	ldr	r2, [r3, #0]
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019434:	1ad3      	subs	r3, r2, r3
 8019436:	2b00      	cmp	r3, #0
 8019438:	dc58      	bgt.n	80194ec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801943a:	4b7a      	ldr	r3, [pc, #488]	; (8019624 <tcp_receive+0x2cc>)
 801943c:	881b      	ldrh	r3, [r3, #0]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d14b      	bne.n	80194da <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019446:	687a      	ldr	r2, [r7, #4]
 8019448:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801944c:	4413      	add	r3, r2
 801944e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019450:	429a      	cmp	r2, r3
 8019452:	d142      	bne.n	80194da <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801945a:	2b00      	cmp	r3, #0
 801945c:	db3d      	blt.n	80194da <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019462:	4b6e      	ldr	r3, [pc, #440]	; (801961c <tcp_receive+0x2c4>)
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	429a      	cmp	r2, r3
 8019468:	d137      	bne.n	80194da <tcp_receive+0x182>
              found_dupack = 1;
 801946a:	2301      	movs	r3, #1
 801946c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019474:	2bff      	cmp	r3, #255	; 0xff
 8019476:	d007      	beq.n	8019488 <tcp_receive+0x130>
                ++pcb->dupacks;
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801947e:	3301      	adds	r3, #1
 8019480:	b2da      	uxtb	r2, r3
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801948e:	2b03      	cmp	r3, #3
 8019490:	d91b      	bls.n	80194ca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801949c:	4413      	add	r3, r2
 801949e:	b29a      	uxth	r2, r3
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80194a6:	429a      	cmp	r2, r3
 80194a8:	d30a      	bcc.n	80194c0 <tcp_receive+0x168>
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194b4:	4413      	add	r3, r2
 80194b6:	b29a      	uxth	r2, r3
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80194be:	e004      	b.n	80194ca <tcp_receive+0x172>
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80194d0:	2b02      	cmp	r3, #2
 80194d2:	d902      	bls.n	80194da <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80194d4:	6878      	ldr	r0, [r7, #4]
 80194d6:	f001 feed 	bl	801b2b4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80194da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194dc:	2b00      	cmp	r3, #0
 80194de:	f040 8160 	bne.w	80197a2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	2200      	movs	r2, #0
 80194e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80194ea:	e15a      	b.n	80197a2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80194ec:	4b4b      	ldr	r3, [pc, #300]	; (801961c <tcp_receive+0x2c4>)
 80194ee:	681a      	ldr	r2, [r3, #0]
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80194f4:	1ad3      	subs	r3, r2, r3
 80194f6:	3b01      	subs	r3, #1
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	f2c0 814d 	blt.w	8019798 <tcp_receive+0x440>
 80194fe:	4b47      	ldr	r3, [pc, #284]	; (801961c <tcp_receive+0x2c4>)
 8019500:	681a      	ldr	r2, [r3, #0]
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019506:	1ad3      	subs	r3, r2, r3
 8019508:	2b00      	cmp	r3, #0
 801950a:	f300 8145 	bgt.w	8019798 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	8b5b      	ldrh	r3, [r3, #26]
 8019512:	f003 0304 	and.w	r3, r3, #4
 8019516:	2b00      	cmp	r3, #0
 8019518:	d010      	beq.n	801953c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	8b5b      	ldrh	r3, [r3, #26]
 801951e:	f023 0304 	bic.w	r3, r3, #4
 8019522:	b29a      	uxth	r2, r3
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	2200      	movs	r2, #0
 8019538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	2200      	movs	r2, #0
 8019540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801954a:	10db      	asrs	r3, r3, #3
 801954c:	b21b      	sxth	r3, r3
 801954e:	b29a      	uxth	r2, r3
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019556:	b29b      	uxth	r3, r3
 8019558:	4413      	add	r3, r2
 801955a:	b29b      	uxth	r3, r3
 801955c:	b21a      	sxth	r2, r3
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019564:	4b2d      	ldr	r3, [pc, #180]	; (801961c <tcp_receive+0x2c4>)
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	b29a      	uxth	r2, r3
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801956e:	b29b      	uxth	r3, r3
 8019570:	1ad3      	subs	r3, r2, r3
 8019572:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	2200      	movs	r2, #0
 8019578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801957c:	4b27      	ldr	r3, [pc, #156]	; (801961c <tcp_receive+0x2c4>)
 801957e:	681a      	ldr	r2, [r3, #0]
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	7d1b      	ldrb	r3, [r3, #20]
 8019588:	2b03      	cmp	r3, #3
 801958a:	f240 8096 	bls.w	80196ba <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801959a:	429a      	cmp	r2, r3
 801959c:	d244      	bcs.n	8019628 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	8b5b      	ldrh	r3, [r3, #26]
 80195a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d001      	beq.n	80195ae <tcp_receive+0x256>
 80195aa:	2301      	movs	r3, #1
 80195ac:	e000      	b.n	80195b0 <tcp_receive+0x258>
 80195ae:	2302      	movs	r3, #2
 80195b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80195b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80195b8:	b29a      	uxth	r2, r3
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80195be:	fb12 f303 	smulbb	r3, r2, r3
 80195c2:	b29b      	uxth	r3, r3
 80195c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80195c6:	4293      	cmp	r3, r2
 80195c8:	bf28      	it	cs
 80195ca:	4613      	movcs	r3, r2
 80195cc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80195d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80195d6:	4413      	add	r3, r2
 80195d8:	b29a      	uxth	r2, r3
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80195e0:	429a      	cmp	r2, r3
 80195e2:	d309      	bcc.n	80195f8 <tcp_receive+0x2a0>
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80195ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80195ec:	4413      	add	r3, r2
 80195ee:	b29a      	uxth	r2, r3
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80195f6:	e060      	b.n	80196ba <tcp_receive+0x362>
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80195fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019602:	e05a      	b.n	80196ba <tcp_receive+0x362>
 8019604:	080216bc 	.word	0x080216bc
 8019608:	08021a08 	.word	0x08021a08
 801960c:	08021724 	.word	0x08021724
 8019610:	08021a24 	.word	0x08021a24
 8019614:	20007748 	.word	0x20007748
 8019618:	2000773c 	.word	0x2000773c
 801961c:	20007740 	.word	0x20007740
 8019620:	2000772c 	.word	0x2000772c
 8019624:	20007746 	.word	0x20007746
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801962e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019630:	4413      	add	r3, r2
 8019632:	b29a      	uxth	r2, r3
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801963a:	429a      	cmp	r2, r3
 801963c:	d309      	bcc.n	8019652 <tcp_receive+0x2fa>
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019644:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019646:	4413      	add	r3, r2
 8019648:	b29a      	uxth	r2, r3
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8019650:	e004      	b.n	801965c <tcp_receive+0x304>
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019658:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019668:	429a      	cmp	r2, r3
 801966a:	d326      	bcc.n	80196ba <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019678:	1ad3      	subs	r3, r2, r3
 801967a:	b29a      	uxth	r2, r3
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801968c:	4413      	add	r3, r2
 801968e:	b29a      	uxth	r2, r3
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019696:	429a      	cmp	r2, r3
 8019698:	d30a      	bcc.n	80196b0 <tcp_receive+0x358>
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80196a4:	4413      	add	r3, r2
 80196a6:	b29a      	uxth	r2, r3
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80196ae:	e004      	b.n	80196ba <tcp_receive+0x362>
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80196b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196c2:	4a98      	ldr	r2, [pc, #608]	; (8019924 <tcp_receive+0x5cc>)
 80196c4:	6878      	ldr	r0, [r7, #4]
 80196c6:	f7ff fdcb 	bl	8019260 <tcp_free_acked_segments>
 80196ca:	4602      	mov	r2, r0
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196d8:	4a93      	ldr	r2, [pc, #588]	; (8019928 <tcp_receive+0x5d0>)
 80196da:	6878      	ldr	r0, [r7, #4]
 80196dc:	f7ff fdc0 	bl	8019260 <tcp_free_acked_segments>
 80196e0:	4602      	mov	r2, r0
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d104      	bne.n	80196f8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80196f4:	861a      	strh	r2, [r3, #48]	; 0x30
 80196f6:	e002      	b.n	80196fe <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	2200      	movs	r2, #0
 80196fc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	2200      	movs	r2, #0
 8019702:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019708:	2b00      	cmp	r3, #0
 801970a:	d103      	bne.n	8019714 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	2200      	movs	r2, #0
 8019710:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801971a:	4b84      	ldr	r3, [pc, #528]	; (801992c <tcp_receive+0x5d4>)
 801971c:	881b      	ldrh	r3, [r3, #0]
 801971e:	4413      	add	r3, r2
 8019720:	b29a      	uxth	r2, r3
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	8b5b      	ldrh	r3, [r3, #26]
 801972c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019730:	2b00      	cmp	r3, #0
 8019732:	d035      	beq.n	80197a0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019738:	2b00      	cmp	r3, #0
 801973a:	d118      	bne.n	801976e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019740:	2b00      	cmp	r3, #0
 8019742:	d00c      	beq.n	801975e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801974c:	68db      	ldr	r3, [r3, #12]
 801974e:	685b      	ldr	r3, [r3, #4]
 8019750:	4618      	mov	r0, r3
 8019752:	f7f6 fdce 	bl	80102f2 <lwip_htonl>
 8019756:	4603      	mov	r3, r0
 8019758:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801975a:	2b00      	cmp	r3, #0
 801975c:	dc20      	bgt.n	80197a0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	8b5b      	ldrh	r3, [r3, #26]
 8019762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019766:	b29a      	uxth	r2, r3
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801976c:	e018      	b.n	80197a0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019776:	68db      	ldr	r3, [r3, #12]
 8019778:	685b      	ldr	r3, [r3, #4]
 801977a:	4618      	mov	r0, r3
 801977c:	f7f6 fdb9 	bl	80102f2 <lwip_htonl>
 8019780:	4603      	mov	r3, r0
 8019782:	1ae3      	subs	r3, r4, r3
 8019784:	2b00      	cmp	r3, #0
 8019786:	dc0b      	bgt.n	80197a0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	8b5b      	ldrh	r3, [r3, #26]
 801978c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019790:	b29a      	uxth	r2, r3
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019796:	e003      	b.n	80197a0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019798:	6878      	ldr	r0, [r7, #4]
 801979a:	f001 ff85 	bl	801b6a8 <tcp_send_empty_ack>
 801979e:	e000      	b.n	80197a2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80197a0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d05b      	beq.n	8019862 <tcp_receive+0x50a>
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80197ae:	4b60      	ldr	r3, [pc, #384]	; (8019930 <tcp_receive+0x5d8>)
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	1ad3      	subs	r3, r2, r3
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	da54      	bge.n	8019862 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80197b8:	4b5e      	ldr	r3, [pc, #376]	; (8019934 <tcp_receive+0x5dc>)
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	b29a      	uxth	r2, r3
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197c2:	b29b      	uxth	r3, r3
 80197c4:	1ad3      	subs	r3, r2, r3
 80197c6:	b29b      	uxth	r3, r3
 80197c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80197cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80197d6:	10db      	asrs	r3, r3, #3
 80197d8:	b21b      	sxth	r3, r3
 80197da:	b29b      	uxth	r3, r3
 80197dc:	1ad3      	subs	r3, r2, r3
 80197de:	b29b      	uxth	r3, r3
 80197e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80197ea:	b29a      	uxth	r2, r3
 80197ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80197f0:	4413      	add	r3, r2
 80197f2:	b29b      	uxth	r3, r3
 80197f4:	b21a      	sxth	r2, r3
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80197fa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80197fe:	2b00      	cmp	r3, #0
 8019800:	da05      	bge.n	801980e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8019802:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019806:	425b      	negs	r3, r3
 8019808:	b29b      	uxth	r3, r3
 801980a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801980e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019818:	109b      	asrs	r3, r3, #2
 801981a:	b21b      	sxth	r3, r3
 801981c:	b29b      	uxth	r3, r3
 801981e:	1ad3      	subs	r3, r2, r3
 8019820:	b29b      	uxth	r3, r3
 8019822:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801982c:	b29a      	uxth	r2, r3
 801982e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019832:	4413      	add	r3, r2
 8019834:	b29b      	uxth	r3, r3
 8019836:	b21a      	sxth	r2, r3
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019842:	10db      	asrs	r3, r3, #3
 8019844:	b21b      	sxth	r3, r3
 8019846:	b29a      	uxth	r2, r3
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801984e:	b29b      	uxth	r3, r3
 8019850:	4413      	add	r3, r2
 8019852:	b29b      	uxth	r3, r3
 8019854:	b21a      	sxth	r2, r3
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	2200      	movs	r2, #0
 8019860:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019862:	4b35      	ldr	r3, [pc, #212]	; (8019938 <tcp_receive+0x5e0>)
 8019864:	881b      	ldrh	r3, [r3, #0]
 8019866:	2b00      	cmp	r3, #0
 8019868:	f000 84e1 	beq.w	801a22e <tcp_receive+0xed6>
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	7d1b      	ldrb	r3, [r3, #20]
 8019870:	2b06      	cmp	r3, #6
 8019872:	f200 84dc 	bhi.w	801a22e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801987a:	4b30      	ldr	r3, [pc, #192]	; (801993c <tcp_receive+0x5e4>)
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	1ad3      	subs	r3, r2, r3
 8019880:	3b01      	subs	r3, #1
 8019882:	2b00      	cmp	r3, #0
 8019884:	f2c0 808e 	blt.w	80199a4 <tcp_receive+0x64c>
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801988c:	4b2a      	ldr	r3, [pc, #168]	; (8019938 <tcp_receive+0x5e0>)
 801988e:	881b      	ldrh	r3, [r3, #0]
 8019890:	4619      	mov	r1, r3
 8019892:	4b2a      	ldr	r3, [pc, #168]	; (801993c <tcp_receive+0x5e4>)
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	440b      	add	r3, r1
 8019898:	1ad3      	subs	r3, r2, r3
 801989a:	3301      	adds	r3, #1
 801989c:	2b00      	cmp	r3, #0
 801989e:	f300 8081 	bgt.w	80199a4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80198a2:	4b27      	ldr	r3, [pc, #156]	; (8019940 <tcp_receive+0x5e8>)
 80198a4:	685b      	ldr	r3, [r3, #4]
 80198a6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80198ac:	4b23      	ldr	r3, [pc, #140]	; (801993c <tcp_receive+0x5e4>)
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	1ad3      	subs	r3, r2, r3
 80198b2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80198b4:	4b22      	ldr	r3, [pc, #136]	; (8019940 <tcp_receive+0x5e8>)
 80198b6:	685b      	ldr	r3, [r3, #4]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d106      	bne.n	80198ca <tcp_receive+0x572>
 80198bc:	4b21      	ldr	r3, [pc, #132]	; (8019944 <tcp_receive+0x5ec>)
 80198be:	f240 5294 	movw	r2, #1428	; 0x594
 80198c2:	4921      	ldr	r1, [pc, #132]	; (8019948 <tcp_receive+0x5f0>)
 80198c4:	4821      	ldr	r0, [pc, #132]	; (801994c <tcp_receive+0x5f4>)
 80198c6:	f003 ff17 	bl	801d6f8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80198ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80198d0:	4293      	cmp	r3, r2
 80198d2:	d906      	bls.n	80198e2 <tcp_receive+0x58a>
 80198d4:	4b1b      	ldr	r3, [pc, #108]	; (8019944 <tcp_receive+0x5ec>)
 80198d6:	f240 5295 	movw	r2, #1429	; 0x595
 80198da:	491d      	ldr	r1, [pc, #116]	; (8019950 <tcp_receive+0x5f8>)
 80198dc:	481b      	ldr	r0, [pc, #108]	; (801994c <tcp_receive+0x5f4>)
 80198de:	f003 ff0b 	bl	801d6f8 <iprintf>
      off = (u16_t)off32;
 80198e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80198e8:	4b15      	ldr	r3, [pc, #84]	; (8019940 <tcp_receive+0x5e8>)
 80198ea:	685b      	ldr	r3, [r3, #4]
 80198ec:	891b      	ldrh	r3, [r3, #8]
 80198ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80198f2:	429a      	cmp	r2, r3
 80198f4:	d906      	bls.n	8019904 <tcp_receive+0x5ac>
 80198f6:	4b13      	ldr	r3, [pc, #76]	; (8019944 <tcp_receive+0x5ec>)
 80198f8:	f240 5297 	movw	r2, #1431	; 0x597
 80198fc:	4915      	ldr	r1, [pc, #84]	; (8019954 <tcp_receive+0x5fc>)
 80198fe:	4813      	ldr	r0, [pc, #76]	; (801994c <tcp_receive+0x5f4>)
 8019900:	f003 fefa 	bl	801d6f8 <iprintf>
      inseg.len -= off;
 8019904:	4b0e      	ldr	r3, [pc, #56]	; (8019940 <tcp_receive+0x5e8>)
 8019906:	891a      	ldrh	r2, [r3, #8]
 8019908:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801990c:	1ad3      	subs	r3, r2, r3
 801990e:	b29a      	uxth	r2, r3
 8019910:	4b0b      	ldr	r3, [pc, #44]	; (8019940 <tcp_receive+0x5e8>)
 8019912:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019914:	4b0a      	ldr	r3, [pc, #40]	; (8019940 <tcp_receive+0x5e8>)
 8019916:	685b      	ldr	r3, [r3, #4]
 8019918:	891a      	ldrh	r2, [r3, #8]
 801991a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801991e:	1ad3      	subs	r3, r2, r3
 8019920:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019922:	e029      	b.n	8019978 <tcp_receive+0x620>
 8019924:	08021a40 	.word	0x08021a40
 8019928:	08021a48 	.word	0x08021a48
 801992c:	20007744 	.word	0x20007744
 8019930:	20007740 	.word	0x20007740
 8019934:	2000ba68 	.word	0x2000ba68
 8019938:	20007746 	.word	0x20007746
 801993c:	2000773c 	.word	0x2000773c
 8019940:	2000771c 	.word	0x2000771c
 8019944:	080216bc 	.word	0x080216bc
 8019948:	08021a50 	.word	0x08021a50
 801994c:	08021724 	.word	0x08021724
 8019950:	08021a60 	.word	0x08021a60
 8019954:	08021a70 	.word	0x08021a70
        off -= p->len;
 8019958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801995a:	895b      	ldrh	r3, [r3, #10]
 801995c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019960:	1ad3      	subs	r3, r2, r3
 8019962:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019968:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801996a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801996c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801996e:	2200      	movs	r2, #0
 8019970:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8019972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8019978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801997a:	895b      	ldrh	r3, [r3, #10]
 801997c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019980:	429a      	cmp	r2, r3
 8019982:	d8e9      	bhi.n	8019958 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019984:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019988:	4619      	mov	r1, r3
 801998a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801998c:	f7fc fa7e 	bl	8015e8c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019994:	4a91      	ldr	r2, [pc, #580]	; (8019bdc <tcp_receive+0x884>)
 8019996:	6013      	str	r3, [r2, #0]
 8019998:	4b91      	ldr	r3, [pc, #580]	; (8019be0 <tcp_receive+0x888>)
 801999a:	68db      	ldr	r3, [r3, #12]
 801999c:	4a8f      	ldr	r2, [pc, #572]	; (8019bdc <tcp_receive+0x884>)
 801999e:	6812      	ldr	r2, [r2, #0]
 80199a0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80199a2:	e00d      	b.n	80199c0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80199a4:	4b8d      	ldr	r3, [pc, #564]	; (8019bdc <tcp_receive+0x884>)
 80199a6:	681a      	ldr	r2, [r3, #0]
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199ac:	1ad3      	subs	r3, r2, r3
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	da06      	bge.n	80199c0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	8b5b      	ldrh	r3, [r3, #26]
 80199b6:	f043 0302 	orr.w	r3, r3, #2
 80199ba:	b29a      	uxth	r2, r3
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80199c0:	4b86      	ldr	r3, [pc, #536]	; (8019bdc <tcp_receive+0x884>)
 80199c2:	681a      	ldr	r2, [r3, #0]
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199c8:	1ad3      	subs	r3, r2, r3
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	f2c0 842a 	blt.w	801a224 <tcp_receive+0xecc>
 80199d0:	4b82      	ldr	r3, [pc, #520]	; (8019bdc <tcp_receive+0x884>)
 80199d2:	681a      	ldr	r2, [r3, #0]
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199d8:	6879      	ldr	r1, [r7, #4]
 80199da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80199dc:	440b      	add	r3, r1
 80199de:	1ad3      	subs	r3, r2, r3
 80199e0:	3301      	adds	r3, #1
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	f300 841e 	bgt.w	801a224 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80199ec:	4b7b      	ldr	r3, [pc, #492]	; (8019bdc <tcp_receive+0x884>)
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	429a      	cmp	r2, r3
 80199f2:	f040 829a 	bne.w	8019f2a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80199f6:	4b7a      	ldr	r3, [pc, #488]	; (8019be0 <tcp_receive+0x888>)
 80199f8:	891c      	ldrh	r4, [r3, #8]
 80199fa:	4b79      	ldr	r3, [pc, #484]	; (8019be0 <tcp_receive+0x888>)
 80199fc:	68db      	ldr	r3, [r3, #12]
 80199fe:	899b      	ldrh	r3, [r3, #12]
 8019a00:	b29b      	uxth	r3, r3
 8019a02:	4618      	mov	r0, r3
 8019a04:	f7f6 fc60 	bl	80102c8 <lwip_htons>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	b2db      	uxtb	r3, r3
 8019a0c:	f003 0303 	and.w	r3, r3, #3
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d001      	beq.n	8019a18 <tcp_receive+0x6c0>
 8019a14:	2301      	movs	r3, #1
 8019a16:	e000      	b.n	8019a1a <tcp_receive+0x6c2>
 8019a18:	2300      	movs	r3, #0
 8019a1a:	4423      	add	r3, r4
 8019a1c:	b29a      	uxth	r2, r3
 8019a1e:	4b71      	ldr	r3, [pc, #452]	; (8019be4 <tcp_receive+0x88c>)
 8019a20:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019a26:	4b6f      	ldr	r3, [pc, #444]	; (8019be4 <tcp_receive+0x88c>)
 8019a28:	881b      	ldrh	r3, [r3, #0]
 8019a2a:	429a      	cmp	r2, r3
 8019a2c:	d275      	bcs.n	8019b1a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019a2e:	4b6c      	ldr	r3, [pc, #432]	; (8019be0 <tcp_receive+0x888>)
 8019a30:	68db      	ldr	r3, [r3, #12]
 8019a32:	899b      	ldrh	r3, [r3, #12]
 8019a34:	b29b      	uxth	r3, r3
 8019a36:	4618      	mov	r0, r3
 8019a38:	f7f6 fc46 	bl	80102c8 <lwip_htons>
 8019a3c:	4603      	mov	r3, r0
 8019a3e:	b2db      	uxtb	r3, r3
 8019a40:	f003 0301 	and.w	r3, r3, #1
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d01f      	beq.n	8019a88 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019a48:	4b65      	ldr	r3, [pc, #404]	; (8019be0 <tcp_receive+0x888>)
 8019a4a:	68db      	ldr	r3, [r3, #12]
 8019a4c:	899b      	ldrh	r3, [r3, #12]
 8019a4e:	b29b      	uxth	r3, r3
 8019a50:	b21b      	sxth	r3, r3
 8019a52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019a56:	b21c      	sxth	r4, r3
 8019a58:	4b61      	ldr	r3, [pc, #388]	; (8019be0 <tcp_receive+0x888>)
 8019a5a:	68db      	ldr	r3, [r3, #12]
 8019a5c:	899b      	ldrh	r3, [r3, #12]
 8019a5e:	b29b      	uxth	r3, r3
 8019a60:	4618      	mov	r0, r3
 8019a62:	f7f6 fc31 	bl	80102c8 <lwip_htons>
 8019a66:	4603      	mov	r3, r0
 8019a68:	b2db      	uxtb	r3, r3
 8019a6a:	b29b      	uxth	r3, r3
 8019a6c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019a70:	b29b      	uxth	r3, r3
 8019a72:	4618      	mov	r0, r3
 8019a74:	f7f6 fc28 	bl	80102c8 <lwip_htons>
 8019a78:	4603      	mov	r3, r0
 8019a7a:	b21b      	sxth	r3, r3
 8019a7c:	4323      	orrs	r3, r4
 8019a7e:	b21a      	sxth	r2, r3
 8019a80:	4b57      	ldr	r3, [pc, #348]	; (8019be0 <tcp_receive+0x888>)
 8019a82:	68db      	ldr	r3, [r3, #12]
 8019a84:	b292      	uxth	r2, r2
 8019a86:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019a8c:	4b54      	ldr	r3, [pc, #336]	; (8019be0 <tcp_receive+0x888>)
 8019a8e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019a90:	4b53      	ldr	r3, [pc, #332]	; (8019be0 <tcp_receive+0x888>)
 8019a92:	68db      	ldr	r3, [r3, #12]
 8019a94:	899b      	ldrh	r3, [r3, #12]
 8019a96:	b29b      	uxth	r3, r3
 8019a98:	4618      	mov	r0, r3
 8019a9a:	f7f6 fc15 	bl	80102c8 <lwip_htons>
 8019a9e:	4603      	mov	r3, r0
 8019aa0:	b2db      	uxtb	r3, r3
 8019aa2:	f003 0302 	and.w	r3, r3, #2
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d005      	beq.n	8019ab6 <tcp_receive+0x75e>
            inseg.len -= 1;
 8019aaa:	4b4d      	ldr	r3, [pc, #308]	; (8019be0 <tcp_receive+0x888>)
 8019aac:	891b      	ldrh	r3, [r3, #8]
 8019aae:	3b01      	subs	r3, #1
 8019ab0:	b29a      	uxth	r2, r3
 8019ab2:	4b4b      	ldr	r3, [pc, #300]	; (8019be0 <tcp_receive+0x888>)
 8019ab4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019ab6:	4b4a      	ldr	r3, [pc, #296]	; (8019be0 <tcp_receive+0x888>)
 8019ab8:	685a      	ldr	r2, [r3, #4]
 8019aba:	4b49      	ldr	r3, [pc, #292]	; (8019be0 <tcp_receive+0x888>)
 8019abc:	891b      	ldrh	r3, [r3, #8]
 8019abe:	4619      	mov	r1, r3
 8019ac0:	4610      	mov	r0, r2
 8019ac2:	f7fc f8e3 	bl	8015c8c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019ac6:	4b46      	ldr	r3, [pc, #280]	; (8019be0 <tcp_receive+0x888>)
 8019ac8:	891c      	ldrh	r4, [r3, #8]
 8019aca:	4b45      	ldr	r3, [pc, #276]	; (8019be0 <tcp_receive+0x888>)
 8019acc:	68db      	ldr	r3, [r3, #12]
 8019ace:	899b      	ldrh	r3, [r3, #12]
 8019ad0:	b29b      	uxth	r3, r3
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	f7f6 fbf8 	bl	80102c8 <lwip_htons>
 8019ad8:	4603      	mov	r3, r0
 8019ada:	b2db      	uxtb	r3, r3
 8019adc:	f003 0303 	and.w	r3, r3, #3
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d001      	beq.n	8019ae8 <tcp_receive+0x790>
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	e000      	b.n	8019aea <tcp_receive+0x792>
 8019ae8:	2300      	movs	r3, #0
 8019aea:	4423      	add	r3, r4
 8019aec:	b29a      	uxth	r2, r3
 8019aee:	4b3d      	ldr	r3, [pc, #244]	; (8019be4 <tcp_receive+0x88c>)
 8019af0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019af2:	4b3c      	ldr	r3, [pc, #240]	; (8019be4 <tcp_receive+0x88c>)
 8019af4:	881b      	ldrh	r3, [r3, #0]
 8019af6:	461a      	mov	r2, r3
 8019af8:	4b38      	ldr	r3, [pc, #224]	; (8019bdc <tcp_receive+0x884>)
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	441a      	add	r2, r3
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b02:	6879      	ldr	r1, [r7, #4]
 8019b04:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019b06:	440b      	add	r3, r1
 8019b08:	429a      	cmp	r2, r3
 8019b0a:	d006      	beq.n	8019b1a <tcp_receive+0x7c2>
 8019b0c:	4b36      	ldr	r3, [pc, #216]	; (8019be8 <tcp_receive+0x890>)
 8019b0e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8019b12:	4936      	ldr	r1, [pc, #216]	; (8019bec <tcp_receive+0x894>)
 8019b14:	4836      	ldr	r0, [pc, #216]	; (8019bf0 <tcp_receive+0x898>)
 8019b16:	f003 fdef 	bl	801d6f8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	f000 80e7 	beq.w	8019cf2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019b24:	4b2e      	ldr	r3, [pc, #184]	; (8019be0 <tcp_receive+0x888>)
 8019b26:	68db      	ldr	r3, [r3, #12]
 8019b28:	899b      	ldrh	r3, [r3, #12]
 8019b2a:	b29b      	uxth	r3, r3
 8019b2c:	4618      	mov	r0, r3
 8019b2e:	f7f6 fbcb 	bl	80102c8 <lwip_htons>
 8019b32:	4603      	mov	r3, r0
 8019b34:	b2db      	uxtb	r3, r3
 8019b36:	f003 0301 	and.w	r3, r3, #1
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d010      	beq.n	8019b60 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019b3e:	e00a      	b.n	8019b56 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b44:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b4a:	681a      	ldr	r2, [r3, #0]
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019b50:	68f8      	ldr	r0, [r7, #12]
 8019b52:	f7fd fd97 	bl	8017684 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d1f0      	bne.n	8019b40 <tcp_receive+0x7e8>
 8019b5e:	e0c8      	b.n	8019cf2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b64:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019b66:	e052      	b.n	8019c0e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b6a:	68db      	ldr	r3, [r3, #12]
 8019b6c:	899b      	ldrh	r3, [r3, #12]
 8019b6e:	b29b      	uxth	r3, r3
 8019b70:	4618      	mov	r0, r3
 8019b72:	f7f6 fba9 	bl	80102c8 <lwip_htons>
 8019b76:	4603      	mov	r3, r0
 8019b78:	b2db      	uxtb	r3, r3
 8019b7a:	f003 0301 	and.w	r3, r3, #1
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d03d      	beq.n	8019bfe <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019b82:	4b17      	ldr	r3, [pc, #92]	; (8019be0 <tcp_receive+0x888>)
 8019b84:	68db      	ldr	r3, [r3, #12]
 8019b86:	899b      	ldrh	r3, [r3, #12]
 8019b88:	b29b      	uxth	r3, r3
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	f7f6 fb9c 	bl	80102c8 <lwip_htons>
 8019b90:	4603      	mov	r3, r0
 8019b92:	b2db      	uxtb	r3, r3
 8019b94:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d130      	bne.n	8019bfe <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019b9c:	4b10      	ldr	r3, [pc, #64]	; (8019be0 <tcp_receive+0x888>)
 8019b9e:	68db      	ldr	r3, [r3, #12]
 8019ba0:	899b      	ldrh	r3, [r3, #12]
 8019ba2:	b29c      	uxth	r4, r3
 8019ba4:	2001      	movs	r0, #1
 8019ba6:	f7f6 fb8f 	bl	80102c8 <lwip_htons>
 8019baa:	4603      	mov	r3, r0
 8019bac:	461a      	mov	r2, r3
 8019bae:	4b0c      	ldr	r3, [pc, #48]	; (8019be0 <tcp_receive+0x888>)
 8019bb0:	68db      	ldr	r3, [r3, #12]
 8019bb2:	4322      	orrs	r2, r4
 8019bb4:	b292      	uxth	r2, r2
 8019bb6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019bb8:	4b09      	ldr	r3, [pc, #36]	; (8019be0 <tcp_receive+0x888>)
 8019bba:	891c      	ldrh	r4, [r3, #8]
 8019bbc:	4b08      	ldr	r3, [pc, #32]	; (8019be0 <tcp_receive+0x888>)
 8019bbe:	68db      	ldr	r3, [r3, #12]
 8019bc0:	899b      	ldrh	r3, [r3, #12]
 8019bc2:	b29b      	uxth	r3, r3
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	f7f6 fb7f 	bl	80102c8 <lwip_htons>
 8019bca:	4603      	mov	r3, r0
 8019bcc:	b2db      	uxtb	r3, r3
 8019bce:	f003 0303 	and.w	r3, r3, #3
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d00e      	beq.n	8019bf4 <tcp_receive+0x89c>
 8019bd6:	2301      	movs	r3, #1
 8019bd8:	e00d      	b.n	8019bf6 <tcp_receive+0x89e>
 8019bda:	bf00      	nop
 8019bdc:	2000773c 	.word	0x2000773c
 8019be0:	2000771c 	.word	0x2000771c
 8019be4:	20007746 	.word	0x20007746
 8019be8:	080216bc 	.word	0x080216bc
 8019bec:	08021a80 	.word	0x08021a80
 8019bf0:	08021724 	.word	0x08021724
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	4423      	add	r3, r4
 8019bf8:	b29a      	uxth	r2, r3
 8019bfa:	4b98      	ldr	r3, [pc, #608]	; (8019e5c <tcp_receive+0xb04>)
 8019bfc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c00:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019c08:	6938      	ldr	r0, [r7, #16]
 8019c0a:	f7fd fd3b 	bl	8017684 <tcp_seg_free>
            while (next &&
 8019c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d00e      	beq.n	8019c32 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019c14:	4b91      	ldr	r3, [pc, #580]	; (8019e5c <tcp_receive+0xb04>)
 8019c16:	881b      	ldrh	r3, [r3, #0]
 8019c18:	461a      	mov	r2, r3
 8019c1a:	4b91      	ldr	r3, [pc, #580]	; (8019e60 <tcp_receive+0xb08>)
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	441a      	add	r2, r3
 8019c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c22:	68db      	ldr	r3, [r3, #12]
 8019c24:	685b      	ldr	r3, [r3, #4]
 8019c26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019c28:	8909      	ldrh	r1, [r1, #8]
 8019c2a:	440b      	add	r3, r1
 8019c2c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	da9a      	bge.n	8019b68 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d059      	beq.n	8019cec <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019c38:	4b88      	ldr	r3, [pc, #544]	; (8019e5c <tcp_receive+0xb04>)
 8019c3a:	881b      	ldrh	r3, [r3, #0]
 8019c3c:	461a      	mov	r2, r3
 8019c3e:	4b88      	ldr	r3, [pc, #544]	; (8019e60 <tcp_receive+0xb08>)
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	441a      	add	r2, r3
 8019c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c46:	68db      	ldr	r3, [r3, #12]
 8019c48:	685b      	ldr	r3, [r3, #4]
 8019c4a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	dd4d      	ble.n	8019cec <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019c52:	68db      	ldr	r3, [r3, #12]
 8019c54:	685b      	ldr	r3, [r3, #4]
 8019c56:	b29a      	uxth	r2, r3
 8019c58:	4b81      	ldr	r3, [pc, #516]	; (8019e60 <tcp_receive+0xb08>)
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	b29b      	uxth	r3, r3
 8019c5e:	1ad3      	subs	r3, r2, r3
 8019c60:	b29a      	uxth	r2, r3
 8019c62:	4b80      	ldr	r3, [pc, #512]	; (8019e64 <tcp_receive+0xb0c>)
 8019c64:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019c66:	4b7f      	ldr	r3, [pc, #508]	; (8019e64 <tcp_receive+0xb0c>)
 8019c68:	68db      	ldr	r3, [r3, #12]
 8019c6a:	899b      	ldrh	r3, [r3, #12]
 8019c6c:	b29b      	uxth	r3, r3
 8019c6e:	4618      	mov	r0, r3
 8019c70:	f7f6 fb2a 	bl	80102c8 <lwip_htons>
 8019c74:	4603      	mov	r3, r0
 8019c76:	b2db      	uxtb	r3, r3
 8019c78:	f003 0302 	and.w	r3, r3, #2
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d005      	beq.n	8019c8c <tcp_receive+0x934>
                inseg.len -= 1;
 8019c80:	4b78      	ldr	r3, [pc, #480]	; (8019e64 <tcp_receive+0xb0c>)
 8019c82:	891b      	ldrh	r3, [r3, #8]
 8019c84:	3b01      	subs	r3, #1
 8019c86:	b29a      	uxth	r2, r3
 8019c88:	4b76      	ldr	r3, [pc, #472]	; (8019e64 <tcp_receive+0xb0c>)
 8019c8a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019c8c:	4b75      	ldr	r3, [pc, #468]	; (8019e64 <tcp_receive+0xb0c>)
 8019c8e:	685a      	ldr	r2, [r3, #4]
 8019c90:	4b74      	ldr	r3, [pc, #464]	; (8019e64 <tcp_receive+0xb0c>)
 8019c92:	891b      	ldrh	r3, [r3, #8]
 8019c94:	4619      	mov	r1, r3
 8019c96:	4610      	mov	r0, r2
 8019c98:	f7fb fff8 	bl	8015c8c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019c9c:	4b71      	ldr	r3, [pc, #452]	; (8019e64 <tcp_receive+0xb0c>)
 8019c9e:	891c      	ldrh	r4, [r3, #8]
 8019ca0:	4b70      	ldr	r3, [pc, #448]	; (8019e64 <tcp_receive+0xb0c>)
 8019ca2:	68db      	ldr	r3, [r3, #12]
 8019ca4:	899b      	ldrh	r3, [r3, #12]
 8019ca6:	b29b      	uxth	r3, r3
 8019ca8:	4618      	mov	r0, r3
 8019caa:	f7f6 fb0d 	bl	80102c8 <lwip_htons>
 8019cae:	4603      	mov	r3, r0
 8019cb0:	b2db      	uxtb	r3, r3
 8019cb2:	f003 0303 	and.w	r3, r3, #3
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d001      	beq.n	8019cbe <tcp_receive+0x966>
 8019cba:	2301      	movs	r3, #1
 8019cbc:	e000      	b.n	8019cc0 <tcp_receive+0x968>
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	4423      	add	r3, r4
 8019cc2:	b29a      	uxth	r2, r3
 8019cc4:	4b65      	ldr	r3, [pc, #404]	; (8019e5c <tcp_receive+0xb04>)
 8019cc6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019cc8:	4b64      	ldr	r3, [pc, #400]	; (8019e5c <tcp_receive+0xb04>)
 8019cca:	881b      	ldrh	r3, [r3, #0]
 8019ccc:	461a      	mov	r2, r3
 8019cce:	4b64      	ldr	r3, [pc, #400]	; (8019e60 <tcp_receive+0xb08>)
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	441a      	add	r2, r3
 8019cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019cd6:	68db      	ldr	r3, [r3, #12]
 8019cd8:	685b      	ldr	r3, [r3, #4]
 8019cda:	429a      	cmp	r2, r3
 8019cdc:	d006      	beq.n	8019cec <tcp_receive+0x994>
 8019cde:	4b62      	ldr	r3, [pc, #392]	; (8019e68 <tcp_receive+0xb10>)
 8019ce0:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8019ce4:	4961      	ldr	r1, [pc, #388]	; (8019e6c <tcp_receive+0xb14>)
 8019ce6:	4862      	ldr	r0, [pc, #392]	; (8019e70 <tcp_receive+0xb18>)
 8019ce8:	f003 fd06 	bl	801d6f8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019cf0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019cf2:	4b5a      	ldr	r3, [pc, #360]	; (8019e5c <tcp_receive+0xb04>)
 8019cf4:	881b      	ldrh	r3, [r3, #0]
 8019cf6:	461a      	mov	r2, r3
 8019cf8:	4b59      	ldr	r3, [pc, #356]	; (8019e60 <tcp_receive+0xb08>)
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	441a      	add	r2, r3
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019d06:	4b55      	ldr	r3, [pc, #340]	; (8019e5c <tcp_receive+0xb04>)
 8019d08:	881b      	ldrh	r3, [r3, #0]
 8019d0a:	429a      	cmp	r2, r3
 8019d0c:	d206      	bcs.n	8019d1c <tcp_receive+0x9c4>
 8019d0e:	4b56      	ldr	r3, [pc, #344]	; (8019e68 <tcp_receive+0xb10>)
 8019d10:	f240 6207 	movw	r2, #1543	; 0x607
 8019d14:	4957      	ldr	r1, [pc, #348]	; (8019e74 <tcp_receive+0xb1c>)
 8019d16:	4856      	ldr	r0, [pc, #344]	; (8019e70 <tcp_receive+0xb18>)
 8019d18:	f003 fcee 	bl	801d6f8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019d20:	4b4e      	ldr	r3, [pc, #312]	; (8019e5c <tcp_receive+0xb04>)
 8019d22:	881b      	ldrh	r3, [r3, #0]
 8019d24:	1ad3      	subs	r3, r2, r3
 8019d26:	b29a      	uxth	r2, r3
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019d2c:	6878      	ldr	r0, [r7, #4]
 8019d2e:	f7fc ffcd 	bl	8016ccc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019d32:	4b4c      	ldr	r3, [pc, #304]	; (8019e64 <tcp_receive+0xb0c>)
 8019d34:	685b      	ldr	r3, [r3, #4]
 8019d36:	891b      	ldrh	r3, [r3, #8]
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d006      	beq.n	8019d4a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019d3c:	4b49      	ldr	r3, [pc, #292]	; (8019e64 <tcp_receive+0xb0c>)
 8019d3e:	685b      	ldr	r3, [r3, #4]
 8019d40:	4a4d      	ldr	r2, [pc, #308]	; (8019e78 <tcp_receive+0xb20>)
 8019d42:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019d44:	4b47      	ldr	r3, [pc, #284]	; (8019e64 <tcp_receive+0xb0c>)
 8019d46:	2200      	movs	r2, #0
 8019d48:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019d4a:	4b46      	ldr	r3, [pc, #280]	; (8019e64 <tcp_receive+0xb0c>)
 8019d4c:	68db      	ldr	r3, [r3, #12]
 8019d4e:	899b      	ldrh	r3, [r3, #12]
 8019d50:	b29b      	uxth	r3, r3
 8019d52:	4618      	mov	r0, r3
 8019d54:	f7f6 fab8 	bl	80102c8 <lwip_htons>
 8019d58:	4603      	mov	r3, r0
 8019d5a:	b2db      	uxtb	r3, r3
 8019d5c:	f003 0301 	and.w	r3, r3, #1
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	f000 80b8 	beq.w	8019ed6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019d66:	4b45      	ldr	r3, [pc, #276]	; (8019e7c <tcp_receive+0xb24>)
 8019d68:	781b      	ldrb	r3, [r3, #0]
 8019d6a:	f043 0320 	orr.w	r3, r3, #32
 8019d6e:	b2da      	uxtb	r2, r3
 8019d70:	4b42      	ldr	r3, [pc, #264]	; (8019e7c <tcp_receive+0xb24>)
 8019d72:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019d74:	e0af      	b.n	8019ed6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d7a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d80:	68db      	ldr	r3, [r3, #12]
 8019d82:	685b      	ldr	r3, [r3, #4]
 8019d84:	4a36      	ldr	r2, [pc, #216]	; (8019e60 <tcp_receive+0xb08>)
 8019d86:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019d88:	68bb      	ldr	r3, [r7, #8]
 8019d8a:	891b      	ldrh	r3, [r3, #8]
 8019d8c:	461c      	mov	r4, r3
 8019d8e:	68bb      	ldr	r3, [r7, #8]
 8019d90:	68db      	ldr	r3, [r3, #12]
 8019d92:	899b      	ldrh	r3, [r3, #12]
 8019d94:	b29b      	uxth	r3, r3
 8019d96:	4618      	mov	r0, r3
 8019d98:	f7f6 fa96 	bl	80102c8 <lwip_htons>
 8019d9c:	4603      	mov	r3, r0
 8019d9e:	b2db      	uxtb	r3, r3
 8019da0:	f003 0303 	and.w	r3, r3, #3
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d001      	beq.n	8019dac <tcp_receive+0xa54>
 8019da8:	2301      	movs	r3, #1
 8019daa:	e000      	b.n	8019dae <tcp_receive+0xa56>
 8019dac:	2300      	movs	r3, #0
 8019dae:	191a      	adds	r2, r3, r4
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019db4:	441a      	add	r2, r3
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019dbe:	461c      	mov	r4, r3
 8019dc0:	68bb      	ldr	r3, [r7, #8]
 8019dc2:	891b      	ldrh	r3, [r3, #8]
 8019dc4:	461d      	mov	r5, r3
 8019dc6:	68bb      	ldr	r3, [r7, #8]
 8019dc8:	68db      	ldr	r3, [r3, #12]
 8019dca:	899b      	ldrh	r3, [r3, #12]
 8019dcc:	b29b      	uxth	r3, r3
 8019dce:	4618      	mov	r0, r3
 8019dd0:	f7f6 fa7a 	bl	80102c8 <lwip_htons>
 8019dd4:	4603      	mov	r3, r0
 8019dd6:	b2db      	uxtb	r3, r3
 8019dd8:	f003 0303 	and.w	r3, r3, #3
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d001      	beq.n	8019de4 <tcp_receive+0xa8c>
 8019de0:	2301      	movs	r3, #1
 8019de2:	e000      	b.n	8019de6 <tcp_receive+0xa8e>
 8019de4:	2300      	movs	r3, #0
 8019de6:	442b      	add	r3, r5
 8019de8:	429c      	cmp	r4, r3
 8019dea:	d206      	bcs.n	8019dfa <tcp_receive+0xaa2>
 8019dec:	4b1e      	ldr	r3, [pc, #120]	; (8019e68 <tcp_receive+0xb10>)
 8019dee:	f240 622c 	movw	r2, #1580	; 0x62c
 8019df2:	4923      	ldr	r1, [pc, #140]	; (8019e80 <tcp_receive+0xb28>)
 8019df4:	481e      	ldr	r0, [pc, #120]	; (8019e70 <tcp_receive+0xb18>)
 8019df6:	f003 fc7f 	bl	801d6f8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019dfa:	68bb      	ldr	r3, [r7, #8]
 8019dfc:	891b      	ldrh	r3, [r3, #8]
 8019dfe:	461c      	mov	r4, r3
 8019e00:	68bb      	ldr	r3, [r7, #8]
 8019e02:	68db      	ldr	r3, [r3, #12]
 8019e04:	899b      	ldrh	r3, [r3, #12]
 8019e06:	b29b      	uxth	r3, r3
 8019e08:	4618      	mov	r0, r3
 8019e0a:	f7f6 fa5d 	bl	80102c8 <lwip_htons>
 8019e0e:	4603      	mov	r3, r0
 8019e10:	b2db      	uxtb	r3, r3
 8019e12:	f003 0303 	and.w	r3, r3, #3
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d001      	beq.n	8019e1e <tcp_receive+0xac6>
 8019e1a:	2301      	movs	r3, #1
 8019e1c:	e000      	b.n	8019e20 <tcp_receive+0xac8>
 8019e1e:	2300      	movs	r3, #0
 8019e20:	1919      	adds	r1, r3, r4
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019e26:	b28b      	uxth	r3, r1
 8019e28:	1ad3      	subs	r3, r2, r3
 8019e2a:	b29a      	uxth	r2, r3
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019e30:	6878      	ldr	r0, [r7, #4]
 8019e32:	f7fc ff4b 	bl	8016ccc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8019e36:	68bb      	ldr	r3, [r7, #8]
 8019e38:	685b      	ldr	r3, [r3, #4]
 8019e3a:	891b      	ldrh	r3, [r3, #8]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d028      	beq.n	8019e92 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019e40:	4b0d      	ldr	r3, [pc, #52]	; (8019e78 <tcp_receive+0xb20>)
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d01d      	beq.n	8019e84 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8019e48:	4b0b      	ldr	r3, [pc, #44]	; (8019e78 <tcp_receive+0xb20>)
 8019e4a:	681a      	ldr	r2, [r3, #0]
 8019e4c:	68bb      	ldr	r3, [r7, #8]
 8019e4e:	685b      	ldr	r3, [r3, #4]
 8019e50:	4619      	mov	r1, r3
 8019e52:	4610      	mov	r0, r2
 8019e54:	f7fc f96e 	bl	8016134 <pbuf_cat>
 8019e58:	e018      	b.n	8019e8c <tcp_receive+0xb34>
 8019e5a:	bf00      	nop
 8019e5c:	20007746 	.word	0x20007746
 8019e60:	2000773c 	.word	0x2000773c
 8019e64:	2000771c 	.word	0x2000771c
 8019e68:	080216bc 	.word	0x080216bc
 8019e6c:	08021ab8 	.word	0x08021ab8
 8019e70:	08021724 	.word	0x08021724
 8019e74:	08021af4 	.word	0x08021af4
 8019e78:	2000774c 	.word	0x2000774c
 8019e7c:	20007749 	.word	0x20007749
 8019e80:	08021b14 	.word	0x08021b14
            } else {
              recv_data = cseg->p;
 8019e84:	68bb      	ldr	r3, [r7, #8]
 8019e86:	685b      	ldr	r3, [r3, #4]
 8019e88:	4a70      	ldr	r2, [pc, #448]	; (801a04c <tcp_receive+0xcf4>)
 8019e8a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019e8c:	68bb      	ldr	r3, [r7, #8]
 8019e8e:	2200      	movs	r2, #0
 8019e90:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019e92:	68bb      	ldr	r3, [r7, #8]
 8019e94:	68db      	ldr	r3, [r3, #12]
 8019e96:	899b      	ldrh	r3, [r3, #12]
 8019e98:	b29b      	uxth	r3, r3
 8019e9a:	4618      	mov	r0, r3
 8019e9c:	f7f6 fa14 	bl	80102c8 <lwip_htons>
 8019ea0:	4603      	mov	r3, r0
 8019ea2:	b2db      	uxtb	r3, r3
 8019ea4:	f003 0301 	and.w	r3, r3, #1
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d00d      	beq.n	8019ec8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019eac:	4b68      	ldr	r3, [pc, #416]	; (801a050 <tcp_receive+0xcf8>)
 8019eae:	781b      	ldrb	r3, [r3, #0]
 8019eb0:	f043 0320 	orr.w	r3, r3, #32
 8019eb4:	b2da      	uxtb	r2, r3
 8019eb6:	4b66      	ldr	r3, [pc, #408]	; (801a050 <tcp_receive+0xcf8>)
 8019eb8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	7d1b      	ldrb	r3, [r3, #20]
 8019ebe:	2b04      	cmp	r3, #4
 8019ec0:	d102      	bne.n	8019ec8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	2207      	movs	r2, #7
 8019ec6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019ec8:	68bb      	ldr	r3, [r7, #8]
 8019eca:	681a      	ldr	r2, [r3, #0]
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8019ed0:	68b8      	ldr	r0, [r7, #8]
 8019ed2:	f7fd fbd7 	bl	8017684 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d008      	beq.n	8019ef0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019ee2:	68db      	ldr	r3, [r3, #12]
 8019ee4:	685a      	ldr	r2, [r3, #4]
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8019eea:	429a      	cmp	r2, r3
 8019eec:	f43f af43 	beq.w	8019d76 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	8b5b      	ldrh	r3, [r3, #26]
 8019ef4:	f003 0301 	and.w	r3, r3, #1
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d00e      	beq.n	8019f1a <tcp_receive+0xbc2>
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	8b5b      	ldrh	r3, [r3, #26]
 8019f00:	f023 0301 	bic.w	r3, r3, #1
 8019f04:	b29a      	uxth	r2, r3
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	835a      	strh	r2, [r3, #26]
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	8b5b      	ldrh	r3, [r3, #26]
 8019f0e:	f043 0302 	orr.w	r3, r3, #2
 8019f12:	b29a      	uxth	r2, r3
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019f18:	e188      	b.n	801a22c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	8b5b      	ldrh	r3, [r3, #26]
 8019f1e:	f043 0301 	orr.w	r3, r3, #1
 8019f22:	b29a      	uxth	r2, r3
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019f28:	e180      	b.n	801a22c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d106      	bne.n	8019f40 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019f32:	4848      	ldr	r0, [pc, #288]	; (801a054 <tcp_receive+0xcfc>)
 8019f34:	f7fd fbbe 	bl	80176b4 <tcp_seg_copy>
 8019f38:	4602      	mov	r2, r0
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	675a      	str	r2, [r3, #116]	; 0x74
 8019f3e:	e16d      	b.n	801a21c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019f40:	2300      	movs	r3, #0
 8019f42:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f48:	63bb      	str	r3, [r7, #56]	; 0x38
 8019f4a:	e157      	b.n	801a1fc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8019f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f4e:	68db      	ldr	r3, [r3, #12]
 8019f50:	685a      	ldr	r2, [r3, #4]
 8019f52:	4b41      	ldr	r3, [pc, #260]	; (801a058 <tcp_receive+0xd00>)
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	429a      	cmp	r2, r3
 8019f58:	d11d      	bne.n	8019f96 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019f5a:	4b3e      	ldr	r3, [pc, #248]	; (801a054 <tcp_receive+0xcfc>)
 8019f5c:	891a      	ldrh	r2, [r3, #8]
 8019f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f60:	891b      	ldrh	r3, [r3, #8]
 8019f62:	429a      	cmp	r2, r3
 8019f64:	f240 814f 	bls.w	801a206 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019f68:	483a      	ldr	r0, [pc, #232]	; (801a054 <tcp_receive+0xcfc>)
 8019f6a:	f7fd fba3 	bl	80176b4 <tcp_seg_copy>
 8019f6e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8019f70:	697b      	ldr	r3, [r7, #20]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	f000 8149 	beq.w	801a20a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8019f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d003      	beq.n	8019f86 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8019f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f80:	697a      	ldr	r2, [r7, #20]
 8019f82:	601a      	str	r2, [r3, #0]
 8019f84:	e002      	b.n	8019f8c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	697a      	ldr	r2, [r7, #20]
 8019f8a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019f8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019f8e:	6978      	ldr	r0, [r7, #20]
 8019f90:	f7ff f8de 	bl	8019150 <tcp_oos_insert_segment>
                }
                break;
 8019f94:	e139      	b.n	801a20a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8019f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d117      	bne.n	8019fcc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019f9c:	4b2e      	ldr	r3, [pc, #184]	; (801a058 <tcp_receive+0xd00>)
 8019f9e:	681a      	ldr	r2, [r3, #0]
 8019fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fa2:	68db      	ldr	r3, [r3, #12]
 8019fa4:	685b      	ldr	r3, [r3, #4]
 8019fa6:	1ad3      	subs	r3, r2, r3
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	da57      	bge.n	801a05c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019fac:	4829      	ldr	r0, [pc, #164]	; (801a054 <tcp_receive+0xcfc>)
 8019fae:	f7fd fb81 	bl	80176b4 <tcp_seg_copy>
 8019fb2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019fb4:	69bb      	ldr	r3, [r7, #24]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	f000 8129 	beq.w	801a20e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	69ba      	ldr	r2, [r7, #24]
 8019fc0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8019fc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019fc4:	69b8      	ldr	r0, [r7, #24]
 8019fc6:	f7ff f8c3 	bl	8019150 <tcp_oos_insert_segment>
                  }
                  break;
 8019fca:	e120      	b.n	801a20e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019fcc:	4b22      	ldr	r3, [pc, #136]	; (801a058 <tcp_receive+0xd00>)
 8019fce:	681a      	ldr	r2, [r3, #0]
 8019fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019fd2:	68db      	ldr	r3, [r3, #12]
 8019fd4:	685b      	ldr	r3, [r3, #4]
 8019fd6:	1ad3      	subs	r3, r2, r3
 8019fd8:	3b01      	subs	r3, #1
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	db3e      	blt.n	801a05c <tcp_receive+0xd04>
 8019fde:	4b1e      	ldr	r3, [pc, #120]	; (801a058 <tcp_receive+0xd00>)
 8019fe0:	681a      	ldr	r2, [r3, #0]
 8019fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fe4:	68db      	ldr	r3, [r3, #12]
 8019fe6:	685b      	ldr	r3, [r3, #4]
 8019fe8:	1ad3      	subs	r3, r2, r3
 8019fea:	3301      	adds	r3, #1
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	dc35      	bgt.n	801a05c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019ff0:	4818      	ldr	r0, [pc, #96]	; (801a054 <tcp_receive+0xcfc>)
 8019ff2:	f7fd fb5f 	bl	80176b4 <tcp_seg_copy>
 8019ff6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019ff8:	69fb      	ldr	r3, [r7, #28]
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	f000 8109 	beq.w	801a212 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a002:	68db      	ldr	r3, [r3, #12]
 801a004:	685b      	ldr	r3, [r3, #4]
 801a006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a008:	8912      	ldrh	r2, [r2, #8]
 801a00a:	441a      	add	r2, r3
 801a00c:	4b12      	ldr	r3, [pc, #72]	; (801a058 <tcp_receive+0xd00>)
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	1ad3      	subs	r3, r2, r3
 801a012:	2b00      	cmp	r3, #0
 801a014:	dd12      	ble.n	801a03c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a016:	4b10      	ldr	r3, [pc, #64]	; (801a058 <tcp_receive+0xd00>)
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	b29a      	uxth	r2, r3
 801a01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a01e:	68db      	ldr	r3, [r3, #12]
 801a020:	685b      	ldr	r3, [r3, #4]
 801a022:	b29b      	uxth	r3, r3
 801a024:	1ad3      	subs	r3, r2, r3
 801a026:	b29a      	uxth	r2, r3
 801a028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a02a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a02e:	685a      	ldr	r2, [r3, #4]
 801a030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a032:	891b      	ldrh	r3, [r3, #8]
 801a034:	4619      	mov	r1, r3
 801a036:	4610      	mov	r0, r2
 801a038:	f7fb fe28 	bl	8015c8c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a03e:	69fa      	ldr	r2, [r7, #28]
 801a040:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a042:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a044:	69f8      	ldr	r0, [r7, #28]
 801a046:	f7ff f883 	bl	8019150 <tcp_oos_insert_segment>
                  }
                  break;
 801a04a:	e0e2      	b.n	801a212 <tcp_receive+0xeba>
 801a04c:	2000774c 	.word	0x2000774c
 801a050:	20007749 	.word	0x20007749
 801a054:	2000771c 	.word	0x2000771c
 801a058:	2000773c 	.word	0x2000773c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801a05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a05e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	2b00      	cmp	r3, #0
 801a066:	f040 80c6 	bne.w	801a1f6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a06a:	4b80      	ldr	r3, [pc, #512]	; (801a26c <tcp_receive+0xf14>)
 801a06c:	681a      	ldr	r2, [r3, #0]
 801a06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a070:	68db      	ldr	r3, [r3, #12]
 801a072:	685b      	ldr	r3, [r3, #4]
 801a074:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a076:	2b00      	cmp	r3, #0
 801a078:	f340 80bd 	ble.w	801a1f6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a07e:	68db      	ldr	r3, [r3, #12]
 801a080:	899b      	ldrh	r3, [r3, #12]
 801a082:	b29b      	uxth	r3, r3
 801a084:	4618      	mov	r0, r3
 801a086:	f7f6 f91f 	bl	80102c8 <lwip_htons>
 801a08a:	4603      	mov	r3, r0
 801a08c:	b2db      	uxtb	r3, r3
 801a08e:	f003 0301 	and.w	r3, r3, #1
 801a092:	2b00      	cmp	r3, #0
 801a094:	f040 80bf 	bne.w	801a216 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801a098:	4875      	ldr	r0, [pc, #468]	; (801a270 <tcp_receive+0xf18>)
 801a09a:	f7fd fb0b 	bl	80176b4 <tcp_seg_copy>
 801a09e:	4602      	mov	r2, r0
 801a0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a0a2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801a0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	f000 80b6 	beq.w	801a21a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a0b0:	68db      	ldr	r3, [r3, #12]
 801a0b2:	685b      	ldr	r3, [r3, #4]
 801a0b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a0b6:	8912      	ldrh	r2, [r2, #8]
 801a0b8:	441a      	add	r2, r3
 801a0ba:	4b6c      	ldr	r3, [pc, #432]	; (801a26c <tcp_receive+0xf14>)
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	1ad3      	subs	r3, r2, r3
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	dd12      	ble.n	801a0ea <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a0c4:	4b69      	ldr	r3, [pc, #420]	; (801a26c <tcp_receive+0xf14>)
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	b29a      	uxth	r2, r3
 801a0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a0cc:	68db      	ldr	r3, [r3, #12]
 801a0ce:	685b      	ldr	r3, [r3, #4]
 801a0d0:	b29b      	uxth	r3, r3
 801a0d2:	1ad3      	subs	r3, r2, r3
 801a0d4:	b29a      	uxth	r2, r3
 801a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a0d8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801a0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a0dc:	685a      	ldr	r2, [r3, #4]
 801a0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a0e0:	891b      	ldrh	r3, [r3, #8]
 801a0e2:	4619      	mov	r1, r3
 801a0e4:	4610      	mov	r0, r2
 801a0e6:	f7fb fdd1 	bl	8015c8c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a0ea:	4b62      	ldr	r3, [pc, #392]	; (801a274 <tcp_receive+0xf1c>)
 801a0ec:	881b      	ldrh	r3, [r3, #0]
 801a0ee:	461a      	mov	r2, r3
 801a0f0:	4b5e      	ldr	r3, [pc, #376]	; (801a26c <tcp_receive+0xf14>)
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	441a      	add	r2, r3
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0fa:	6879      	ldr	r1, [r7, #4]
 801a0fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a0fe:	440b      	add	r3, r1
 801a100:	1ad3      	subs	r3, r2, r3
 801a102:	2b00      	cmp	r3, #0
 801a104:	f340 8089 	ble.w	801a21a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	68db      	ldr	r3, [r3, #12]
 801a10e:	899b      	ldrh	r3, [r3, #12]
 801a110:	b29b      	uxth	r3, r3
 801a112:	4618      	mov	r0, r3
 801a114:	f7f6 f8d8 	bl	80102c8 <lwip_htons>
 801a118:	4603      	mov	r3, r0
 801a11a:	b2db      	uxtb	r3, r3
 801a11c:	f003 0301 	and.w	r3, r3, #1
 801a120:	2b00      	cmp	r3, #0
 801a122:	d022      	beq.n	801a16a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	68db      	ldr	r3, [r3, #12]
 801a12a:	899b      	ldrh	r3, [r3, #12]
 801a12c:	b29b      	uxth	r3, r3
 801a12e:	b21b      	sxth	r3, r3
 801a130:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a134:	b21c      	sxth	r4, r3
 801a136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	68db      	ldr	r3, [r3, #12]
 801a13c:	899b      	ldrh	r3, [r3, #12]
 801a13e:	b29b      	uxth	r3, r3
 801a140:	4618      	mov	r0, r3
 801a142:	f7f6 f8c1 	bl	80102c8 <lwip_htons>
 801a146:	4603      	mov	r3, r0
 801a148:	b2db      	uxtb	r3, r3
 801a14a:	b29b      	uxth	r3, r3
 801a14c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a150:	b29b      	uxth	r3, r3
 801a152:	4618      	mov	r0, r3
 801a154:	f7f6 f8b8 	bl	80102c8 <lwip_htons>
 801a158:	4603      	mov	r3, r0
 801a15a:	b21b      	sxth	r3, r3
 801a15c:	4323      	orrs	r3, r4
 801a15e:	b21a      	sxth	r2, r3
 801a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	68db      	ldr	r3, [r3, #12]
 801a166:	b292      	uxth	r2, r2
 801a168:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a16e:	b29a      	uxth	r2, r3
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a174:	4413      	add	r3, r2
 801a176:	b299      	uxth	r1, r3
 801a178:	4b3c      	ldr	r3, [pc, #240]	; (801a26c <tcp_receive+0xf14>)
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	b29a      	uxth	r2, r3
 801a17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	1a8a      	subs	r2, r1, r2
 801a184:	b292      	uxth	r2, r2
 801a186:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	685a      	ldr	r2, [r3, #4]
 801a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	891b      	ldrh	r3, [r3, #8]
 801a194:	4619      	mov	r1, r3
 801a196:	4610      	mov	r0, r2
 801a198:	f7fb fd78 	bl	8015c8c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	891c      	ldrh	r4, [r3, #8]
 801a1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	68db      	ldr	r3, [r3, #12]
 801a1a8:	899b      	ldrh	r3, [r3, #12]
 801a1aa:	b29b      	uxth	r3, r3
 801a1ac:	4618      	mov	r0, r3
 801a1ae:	f7f6 f88b 	bl	80102c8 <lwip_htons>
 801a1b2:	4603      	mov	r3, r0
 801a1b4:	b2db      	uxtb	r3, r3
 801a1b6:	f003 0303 	and.w	r3, r3, #3
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d001      	beq.n	801a1c2 <tcp_receive+0xe6a>
 801a1be:	2301      	movs	r3, #1
 801a1c0:	e000      	b.n	801a1c4 <tcp_receive+0xe6c>
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	4423      	add	r3, r4
 801a1c6:	b29a      	uxth	r2, r3
 801a1c8:	4b2a      	ldr	r3, [pc, #168]	; (801a274 <tcp_receive+0xf1c>)
 801a1ca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a1cc:	4b29      	ldr	r3, [pc, #164]	; (801a274 <tcp_receive+0xf1c>)
 801a1ce:	881b      	ldrh	r3, [r3, #0]
 801a1d0:	461a      	mov	r2, r3
 801a1d2:	4b26      	ldr	r3, [pc, #152]	; (801a26c <tcp_receive+0xf14>)
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	441a      	add	r2, r3
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1dc:	6879      	ldr	r1, [r7, #4]
 801a1de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a1e0:	440b      	add	r3, r1
 801a1e2:	429a      	cmp	r2, r3
 801a1e4:	d019      	beq.n	801a21a <tcp_receive+0xec2>
 801a1e6:	4b24      	ldr	r3, [pc, #144]	; (801a278 <tcp_receive+0xf20>)
 801a1e8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a1ec:	4923      	ldr	r1, [pc, #140]	; (801a27c <tcp_receive+0xf24>)
 801a1ee:	4824      	ldr	r0, [pc, #144]	; (801a280 <tcp_receive+0xf28>)
 801a1f0:	f003 fa82 	bl	801d6f8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a1f4:	e011      	b.n	801a21a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	63bb      	str	r3, [r7, #56]	; 0x38
 801a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	f47f aea4 	bne.w	8019f4c <tcp_receive+0xbf4>
 801a204:	e00a      	b.n	801a21c <tcp_receive+0xec4>
                break;
 801a206:	bf00      	nop
 801a208:	e008      	b.n	801a21c <tcp_receive+0xec4>
                break;
 801a20a:	bf00      	nop
 801a20c:	e006      	b.n	801a21c <tcp_receive+0xec4>
                  break;
 801a20e:	bf00      	nop
 801a210:	e004      	b.n	801a21c <tcp_receive+0xec4>
                  break;
 801a212:	bf00      	nop
 801a214:	e002      	b.n	801a21c <tcp_receive+0xec4>
                  break;
 801a216:	bf00      	nop
 801a218:	e000      	b.n	801a21c <tcp_receive+0xec4>
                break;
 801a21a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a21c:	6878      	ldr	r0, [r7, #4]
 801a21e:	f001 fa43 	bl	801b6a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a222:	e003      	b.n	801a22c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a224:	6878      	ldr	r0, [r7, #4]
 801a226:	f001 fa3f 	bl	801b6a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a22a:	e01a      	b.n	801a262 <tcp_receive+0xf0a>
 801a22c:	e019      	b.n	801a262 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a22e:	4b0f      	ldr	r3, [pc, #60]	; (801a26c <tcp_receive+0xf14>)
 801a230:	681a      	ldr	r2, [r3, #0]
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a236:	1ad3      	subs	r3, r2, r3
 801a238:	2b00      	cmp	r3, #0
 801a23a:	db0a      	blt.n	801a252 <tcp_receive+0xefa>
 801a23c:	4b0b      	ldr	r3, [pc, #44]	; (801a26c <tcp_receive+0xf14>)
 801a23e:	681a      	ldr	r2, [r3, #0]
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a244:	6879      	ldr	r1, [r7, #4]
 801a246:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a248:	440b      	add	r3, r1
 801a24a:	1ad3      	subs	r3, r2, r3
 801a24c:	3301      	adds	r3, #1
 801a24e:	2b00      	cmp	r3, #0
 801a250:	dd07      	ble.n	801a262 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	8b5b      	ldrh	r3, [r3, #26]
 801a256:	f043 0302 	orr.w	r3, r3, #2
 801a25a:	b29a      	uxth	r2, r3
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a260:	e7ff      	b.n	801a262 <tcp_receive+0xf0a>
 801a262:	bf00      	nop
 801a264:	3750      	adds	r7, #80	; 0x50
 801a266:	46bd      	mov	sp, r7
 801a268:	bdb0      	pop	{r4, r5, r7, pc}
 801a26a:	bf00      	nop
 801a26c:	2000773c 	.word	0x2000773c
 801a270:	2000771c 	.word	0x2000771c
 801a274:	20007746 	.word	0x20007746
 801a278:	080216bc 	.word	0x080216bc
 801a27c:	08021a80 	.word	0x08021a80
 801a280:	08021724 	.word	0x08021724

0801a284 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a284:	b480      	push	{r7}
 801a286:	b083      	sub	sp, #12
 801a288:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a28a:	4b15      	ldr	r3, [pc, #84]	; (801a2e0 <tcp_get_next_optbyte+0x5c>)
 801a28c:	881b      	ldrh	r3, [r3, #0]
 801a28e:	1c5a      	adds	r2, r3, #1
 801a290:	b291      	uxth	r1, r2
 801a292:	4a13      	ldr	r2, [pc, #76]	; (801a2e0 <tcp_get_next_optbyte+0x5c>)
 801a294:	8011      	strh	r1, [r2, #0]
 801a296:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a298:	4b12      	ldr	r3, [pc, #72]	; (801a2e4 <tcp_get_next_optbyte+0x60>)
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d004      	beq.n	801a2aa <tcp_get_next_optbyte+0x26>
 801a2a0:	4b11      	ldr	r3, [pc, #68]	; (801a2e8 <tcp_get_next_optbyte+0x64>)
 801a2a2:	881b      	ldrh	r3, [r3, #0]
 801a2a4:	88fa      	ldrh	r2, [r7, #6]
 801a2a6:	429a      	cmp	r2, r3
 801a2a8:	d208      	bcs.n	801a2bc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a2aa:	4b10      	ldr	r3, [pc, #64]	; (801a2ec <tcp_get_next_optbyte+0x68>)
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	3314      	adds	r3, #20
 801a2b0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a2b2:	88fb      	ldrh	r3, [r7, #6]
 801a2b4:	683a      	ldr	r2, [r7, #0]
 801a2b6:	4413      	add	r3, r2
 801a2b8:	781b      	ldrb	r3, [r3, #0]
 801a2ba:	e00b      	b.n	801a2d4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a2bc:	88fb      	ldrh	r3, [r7, #6]
 801a2be:	b2da      	uxtb	r2, r3
 801a2c0:	4b09      	ldr	r3, [pc, #36]	; (801a2e8 <tcp_get_next_optbyte+0x64>)
 801a2c2:	881b      	ldrh	r3, [r3, #0]
 801a2c4:	b2db      	uxtb	r3, r3
 801a2c6:	1ad3      	subs	r3, r2, r3
 801a2c8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a2ca:	4b06      	ldr	r3, [pc, #24]	; (801a2e4 <tcp_get_next_optbyte+0x60>)
 801a2cc:	681a      	ldr	r2, [r3, #0]
 801a2ce:	797b      	ldrb	r3, [r7, #5]
 801a2d0:	4413      	add	r3, r2
 801a2d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	370c      	adds	r7, #12
 801a2d8:	46bd      	mov	sp, r7
 801a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2de:	4770      	bx	lr
 801a2e0:	20007738 	.word	0x20007738
 801a2e4:	20007734 	.word	0x20007734
 801a2e8:	20007732 	.word	0x20007732
 801a2ec:	2000772c 	.word	0x2000772c

0801a2f0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b084      	sub	sp, #16
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d106      	bne.n	801a30c <tcp_parseopt+0x1c>
 801a2fe:	4b31      	ldr	r3, [pc, #196]	; (801a3c4 <tcp_parseopt+0xd4>)
 801a300:	f240 727d 	movw	r2, #1917	; 0x77d
 801a304:	4930      	ldr	r1, [pc, #192]	; (801a3c8 <tcp_parseopt+0xd8>)
 801a306:	4831      	ldr	r0, [pc, #196]	; (801a3cc <tcp_parseopt+0xdc>)
 801a308:	f003 f9f6 	bl	801d6f8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a30c:	4b30      	ldr	r3, [pc, #192]	; (801a3d0 <tcp_parseopt+0xe0>)
 801a30e:	881b      	ldrh	r3, [r3, #0]
 801a310:	2b00      	cmp	r3, #0
 801a312:	d053      	beq.n	801a3bc <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a314:	4b2f      	ldr	r3, [pc, #188]	; (801a3d4 <tcp_parseopt+0xe4>)
 801a316:	2200      	movs	r2, #0
 801a318:	801a      	strh	r2, [r3, #0]
 801a31a:	e043      	b.n	801a3a4 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 801a31c:	f7ff ffb2 	bl	801a284 <tcp_get_next_optbyte>
 801a320:	4603      	mov	r3, r0
 801a322:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a324:	7bfb      	ldrb	r3, [r7, #15]
 801a326:	2b01      	cmp	r3, #1
 801a328:	d03c      	beq.n	801a3a4 <tcp_parseopt+0xb4>
 801a32a:	2b02      	cmp	r3, #2
 801a32c:	d002      	beq.n	801a334 <tcp_parseopt+0x44>
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d03f      	beq.n	801a3b2 <tcp_parseopt+0xc2>
 801a332:	e026      	b.n	801a382 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a334:	f7ff ffa6 	bl	801a284 <tcp_get_next_optbyte>
 801a338:	4603      	mov	r3, r0
 801a33a:	2b04      	cmp	r3, #4
 801a33c:	d13b      	bne.n	801a3b6 <tcp_parseopt+0xc6>
 801a33e:	4b25      	ldr	r3, [pc, #148]	; (801a3d4 <tcp_parseopt+0xe4>)
 801a340:	881b      	ldrh	r3, [r3, #0]
 801a342:	3302      	adds	r3, #2
 801a344:	4a22      	ldr	r2, [pc, #136]	; (801a3d0 <tcp_parseopt+0xe0>)
 801a346:	8812      	ldrh	r2, [r2, #0]
 801a348:	4293      	cmp	r3, r2
 801a34a:	dc34      	bgt.n	801a3b6 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a34c:	f7ff ff9a 	bl	801a284 <tcp_get_next_optbyte>
 801a350:	4603      	mov	r3, r0
 801a352:	b29b      	uxth	r3, r3
 801a354:	021b      	lsls	r3, r3, #8
 801a356:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a358:	f7ff ff94 	bl	801a284 <tcp_get_next_optbyte>
 801a35c:	4603      	mov	r3, r0
 801a35e:	b29a      	uxth	r2, r3
 801a360:	89bb      	ldrh	r3, [r7, #12]
 801a362:	4313      	orrs	r3, r2
 801a364:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a366:	89bb      	ldrh	r3, [r7, #12]
 801a368:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a36c:	d804      	bhi.n	801a378 <tcp_parseopt+0x88>
 801a36e:	89bb      	ldrh	r3, [r7, #12]
 801a370:	2b00      	cmp	r3, #0
 801a372:	d001      	beq.n	801a378 <tcp_parseopt+0x88>
 801a374:	89ba      	ldrh	r2, [r7, #12]
 801a376:	e001      	b.n	801a37c <tcp_parseopt+0x8c>
 801a378:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a380:	e010      	b.n	801a3a4 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a382:	f7ff ff7f 	bl	801a284 <tcp_get_next_optbyte>
 801a386:	4603      	mov	r3, r0
 801a388:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a38a:	7afb      	ldrb	r3, [r7, #11]
 801a38c:	2b01      	cmp	r3, #1
 801a38e:	d914      	bls.n	801a3ba <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a390:	7afb      	ldrb	r3, [r7, #11]
 801a392:	b29a      	uxth	r2, r3
 801a394:	4b0f      	ldr	r3, [pc, #60]	; (801a3d4 <tcp_parseopt+0xe4>)
 801a396:	881b      	ldrh	r3, [r3, #0]
 801a398:	4413      	add	r3, r2
 801a39a:	b29b      	uxth	r3, r3
 801a39c:	3b02      	subs	r3, #2
 801a39e:	b29a      	uxth	r2, r3
 801a3a0:	4b0c      	ldr	r3, [pc, #48]	; (801a3d4 <tcp_parseopt+0xe4>)
 801a3a2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a3a4:	4b0b      	ldr	r3, [pc, #44]	; (801a3d4 <tcp_parseopt+0xe4>)
 801a3a6:	881a      	ldrh	r2, [r3, #0]
 801a3a8:	4b09      	ldr	r3, [pc, #36]	; (801a3d0 <tcp_parseopt+0xe0>)
 801a3aa:	881b      	ldrh	r3, [r3, #0]
 801a3ac:	429a      	cmp	r2, r3
 801a3ae:	d3b5      	bcc.n	801a31c <tcp_parseopt+0x2c>
 801a3b0:	e004      	b.n	801a3bc <tcp_parseopt+0xcc>
          return;
 801a3b2:	bf00      	nop
 801a3b4:	e002      	b.n	801a3bc <tcp_parseopt+0xcc>
            return;
 801a3b6:	bf00      	nop
 801a3b8:	e000      	b.n	801a3bc <tcp_parseopt+0xcc>
            return;
 801a3ba:	bf00      	nop
      }
    }
  }
}
 801a3bc:	3710      	adds	r7, #16
 801a3be:	46bd      	mov	sp, r7
 801a3c0:	bd80      	pop	{r7, pc}
 801a3c2:	bf00      	nop
 801a3c4:	080216bc 	.word	0x080216bc
 801a3c8:	08021b3c 	.word	0x08021b3c
 801a3cc:	08021724 	.word	0x08021724
 801a3d0:	20007730 	.word	0x20007730
 801a3d4:	20007738 	.word	0x20007738

0801a3d8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a3d8:	b480      	push	{r7}
 801a3da:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a3dc:	4b05      	ldr	r3, [pc, #20]	; (801a3f4 <tcp_trigger_input_pcb_close+0x1c>)
 801a3de:	781b      	ldrb	r3, [r3, #0]
 801a3e0:	f043 0310 	orr.w	r3, r3, #16
 801a3e4:	b2da      	uxtb	r2, r3
 801a3e6:	4b03      	ldr	r3, [pc, #12]	; (801a3f4 <tcp_trigger_input_pcb_close+0x1c>)
 801a3e8:	701a      	strb	r2, [r3, #0]
}
 801a3ea:	bf00      	nop
 801a3ec:	46bd      	mov	sp, r7
 801a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3f2:	4770      	bx	lr
 801a3f4:	20007749 	.word	0x20007749

0801a3f8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a3f8:	b580      	push	{r7, lr}
 801a3fa:	b084      	sub	sp, #16
 801a3fc:	af00      	add	r7, sp, #0
 801a3fe:	60f8      	str	r0, [r7, #12]
 801a400:	60b9      	str	r1, [r7, #8]
 801a402:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	2b00      	cmp	r3, #0
 801a408:	d00a      	beq.n	801a420 <tcp_route+0x28>
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	7a1b      	ldrb	r3, [r3, #8]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d006      	beq.n	801a420 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	7a1b      	ldrb	r3, [r3, #8]
 801a416:	4618      	mov	r0, r3
 801a418:	f7fb fa34 	bl	8015884 <netif_get_by_index>
 801a41c:	4603      	mov	r3, r0
 801a41e:	e003      	b.n	801a428 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a420:	6878      	ldr	r0, [r7, #4]
 801a422:	f7f9 f8d1 	bl	80135c8 <ip4_route>
 801a426:	4603      	mov	r3, r0
  }
}
 801a428:	4618      	mov	r0, r3
 801a42a:	3710      	adds	r7, #16
 801a42c:	46bd      	mov	sp, r7
 801a42e:	bd80      	pop	{r7, pc}

0801a430 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a430:	b590      	push	{r4, r7, lr}
 801a432:	b087      	sub	sp, #28
 801a434:	af00      	add	r7, sp, #0
 801a436:	60f8      	str	r0, [r7, #12]
 801a438:	60b9      	str	r1, [r7, #8]
 801a43a:	603b      	str	r3, [r7, #0]
 801a43c:	4613      	mov	r3, r2
 801a43e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	2b00      	cmp	r3, #0
 801a444:	d105      	bne.n	801a452 <tcp_create_segment+0x22>
 801a446:	4b44      	ldr	r3, [pc, #272]	; (801a558 <tcp_create_segment+0x128>)
 801a448:	22a3      	movs	r2, #163	; 0xa3
 801a44a:	4944      	ldr	r1, [pc, #272]	; (801a55c <tcp_create_segment+0x12c>)
 801a44c:	4844      	ldr	r0, [pc, #272]	; (801a560 <tcp_create_segment+0x130>)
 801a44e:	f003 f953 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a452:	68bb      	ldr	r3, [r7, #8]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d105      	bne.n	801a464 <tcp_create_segment+0x34>
 801a458:	4b3f      	ldr	r3, [pc, #252]	; (801a558 <tcp_create_segment+0x128>)
 801a45a:	22a4      	movs	r2, #164	; 0xa4
 801a45c:	4941      	ldr	r1, [pc, #260]	; (801a564 <tcp_create_segment+0x134>)
 801a45e:	4840      	ldr	r0, [pc, #256]	; (801a560 <tcp_create_segment+0x130>)
 801a460:	f003 f94a 	bl	801d6f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a464:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a468:	009b      	lsls	r3, r3, #2
 801a46a:	b2db      	uxtb	r3, r3
 801a46c:	f003 0304 	and.w	r3, r3, #4
 801a470:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a472:	2003      	movs	r0, #3
 801a474:	f7fa fe6e 	bl	8015154 <memp_malloc>
 801a478:	6138      	str	r0, [r7, #16]
 801a47a:	693b      	ldr	r3, [r7, #16]
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d104      	bne.n	801a48a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a480:	68b8      	ldr	r0, [r7, #8]
 801a482:	f7fb fd89 	bl	8015f98 <pbuf_free>
    return NULL;
 801a486:	2300      	movs	r3, #0
 801a488:	e061      	b.n	801a54e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a48a:	693b      	ldr	r3, [r7, #16]
 801a48c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a490:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a492:	693b      	ldr	r3, [r7, #16]
 801a494:	2200      	movs	r2, #0
 801a496:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a498:	693b      	ldr	r3, [r7, #16]
 801a49a:	68ba      	ldr	r2, [r7, #8]
 801a49c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a49e:	68bb      	ldr	r3, [r7, #8]
 801a4a0:	891a      	ldrh	r2, [r3, #8]
 801a4a2:	7dfb      	ldrb	r3, [r7, #23]
 801a4a4:	b29b      	uxth	r3, r3
 801a4a6:	429a      	cmp	r2, r3
 801a4a8:	d205      	bcs.n	801a4b6 <tcp_create_segment+0x86>
 801a4aa:	4b2b      	ldr	r3, [pc, #172]	; (801a558 <tcp_create_segment+0x128>)
 801a4ac:	22b0      	movs	r2, #176	; 0xb0
 801a4ae:	492e      	ldr	r1, [pc, #184]	; (801a568 <tcp_create_segment+0x138>)
 801a4b0:	482b      	ldr	r0, [pc, #172]	; (801a560 <tcp_create_segment+0x130>)
 801a4b2:	f003 f921 	bl	801d6f8 <iprintf>
  seg->len = p->tot_len - optlen;
 801a4b6:	68bb      	ldr	r3, [r7, #8]
 801a4b8:	891a      	ldrh	r2, [r3, #8]
 801a4ba:	7dfb      	ldrb	r3, [r7, #23]
 801a4bc:	b29b      	uxth	r3, r3
 801a4be:	1ad3      	subs	r3, r2, r3
 801a4c0:	b29a      	uxth	r2, r3
 801a4c2:	693b      	ldr	r3, [r7, #16]
 801a4c4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a4c6:	2114      	movs	r1, #20
 801a4c8:	68b8      	ldr	r0, [r7, #8]
 801a4ca:	f7fb fccf 	bl	8015e6c <pbuf_add_header>
 801a4ce:	4603      	mov	r3, r0
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d004      	beq.n	801a4de <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a4d4:	6938      	ldr	r0, [r7, #16]
 801a4d6:	f7fd f8d5 	bl	8017684 <tcp_seg_free>
    return NULL;
 801a4da:	2300      	movs	r3, #0
 801a4dc:	e037      	b.n	801a54e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a4de:	693b      	ldr	r3, [r7, #16]
 801a4e0:	685b      	ldr	r3, [r3, #4]
 801a4e2:	685a      	ldr	r2, [r3, #4]
 801a4e4:	693b      	ldr	r3, [r7, #16]
 801a4e6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	8ada      	ldrh	r2, [r3, #22]
 801a4ec:	693b      	ldr	r3, [r7, #16]
 801a4ee:	68dc      	ldr	r4, [r3, #12]
 801a4f0:	4610      	mov	r0, r2
 801a4f2:	f7f5 fee9 	bl	80102c8 <lwip_htons>
 801a4f6:	4603      	mov	r3, r0
 801a4f8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	8b1a      	ldrh	r2, [r3, #24]
 801a4fe:	693b      	ldr	r3, [r7, #16]
 801a500:	68dc      	ldr	r4, [r3, #12]
 801a502:	4610      	mov	r0, r2
 801a504:	f7f5 fee0 	bl	80102c8 <lwip_htons>
 801a508:	4603      	mov	r3, r0
 801a50a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a50c:	693b      	ldr	r3, [r7, #16]
 801a50e:	68dc      	ldr	r4, [r3, #12]
 801a510:	6838      	ldr	r0, [r7, #0]
 801a512:	f7f5 feee 	bl	80102f2 <lwip_htonl>
 801a516:	4603      	mov	r3, r0
 801a518:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a51a:	7dfb      	ldrb	r3, [r7, #23]
 801a51c:	089b      	lsrs	r3, r3, #2
 801a51e:	b2db      	uxtb	r3, r3
 801a520:	b29b      	uxth	r3, r3
 801a522:	3305      	adds	r3, #5
 801a524:	b29b      	uxth	r3, r3
 801a526:	031b      	lsls	r3, r3, #12
 801a528:	b29a      	uxth	r2, r3
 801a52a:	79fb      	ldrb	r3, [r7, #7]
 801a52c:	b29b      	uxth	r3, r3
 801a52e:	4313      	orrs	r3, r2
 801a530:	b29a      	uxth	r2, r3
 801a532:	693b      	ldr	r3, [r7, #16]
 801a534:	68dc      	ldr	r4, [r3, #12]
 801a536:	4610      	mov	r0, r2
 801a538:	f7f5 fec6 	bl	80102c8 <lwip_htons>
 801a53c:	4603      	mov	r3, r0
 801a53e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a540:	693b      	ldr	r3, [r7, #16]
 801a542:	68db      	ldr	r3, [r3, #12]
 801a544:	2200      	movs	r2, #0
 801a546:	749a      	strb	r2, [r3, #18]
 801a548:	2200      	movs	r2, #0
 801a54a:	74da      	strb	r2, [r3, #19]
  return seg;
 801a54c:	693b      	ldr	r3, [r7, #16]
}
 801a54e:	4618      	mov	r0, r3
 801a550:	371c      	adds	r7, #28
 801a552:	46bd      	mov	sp, r7
 801a554:	bd90      	pop	{r4, r7, pc}
 801a556:	bf00      	nop
 801a558:	08021b58 	.word	0x08021b58
 801a55c:	08021ba8 	.word	0x08021ba8
 801a560:	08021bc8 	.word	0x08021bc8
 801a564:	08021bf0 	.word	0x08021bf0
 801a568:	08021c14 	.word	0x08021c14

0801a56c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a56c:	b590      	push	{r4, r7, lr}
 801a56e:	b08b      	sub	sp, #44	; 0x2c
 801a570:	af02      	add	r7, sp, #8
 801a572:	6078      	str	r0, [r7, #4]
 801a574:	460b      	mov	r3, r1
 801a576:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a578:	2300      	movs	r3, #0
 801a57a:	61fb      	str	r3, [r7, #28]
 801a57c:	2300      	movs	r3, #0
 801a57e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a580:	2300      	movs	r3, #0
 801a582:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d106      	bne.n	801a598 <tcp_split_unsent_seg+0x2c>
 801a58a:	4b95      	ldr	r3, [pc, #596]	; (801a7e0 <tcp_split_unsent_seg+0x274>)
 801a58c:	f240 324b 	movw	r2, #843	; 0x34b
 801a590:	4994      	ldr	r1, [pc, #592]	; (801a7e4 <tcp_split_unsent_seg+0x278>)
 801a592:	4895      	ldr	r0, [pc, #596]	; (801a7e8 <tcp_split_unsent_seg+0x27c>)
 801a594:	f003 f8b0 	bl	801d6f8 <iprintf>

  useg = pcb->unsent;
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a59c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a59e:	697b      	ldr	r3, [r7, #20]
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d102      	bne.n	801a5aa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a5a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a5a8:	e116      	b.n	801a7d8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801a5aa:	887b      	ldrh	r3, [r7, #2]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d109      	bne.n	801a5c4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a5b0:	4b8b      	ldr	r3, [pc, #556]	; (801a7e0 <tcp_split_unsent_seg+0x274>)
 801a5b2:	f240 3253 	movw	r2, #851	; 0x353
 801a5b6:	498d      	ldr	r1, [pc, #564]	; (801a7ec <tcp_split_unsent_seg+0x280>)
 801a5b8:	488b      	ldr	r0, [pc, #556]	; (801a7e8 <tcp_split_unsent_seg+0x27c>)
 801a5ba:	f003 f89d 	bl	801d6f8 <iprintf>
    return ERR_VAL;
 801a5be:	f06f 0305 	mvn.w	r3, #5
 801a5c2:	e109      	b.n	801a7d8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801a5c4:	697b      	ldr	r3, [r7, #20]
 801a5c6:	891b      	ldrh	r3, [r3, #8]
 801a5c8:	887a      	ldrh	r2, [r7, #2]
 801a5ca:	429a      	cmp	r2, r3
 801a5cc:	d301      	bcc.n	801a5d2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	e102      	b.n	801a7d8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a5d6:	887a      	ldrh	r2, [r7, #2]
 801a5d8:	429a      	cmp	r2, r3
 801a5da:	d906      	bls.n	801a5ea <tcp_split_unsent_seg+0x7e>
 801a5dc:	4b80      	ldr	r3, [pc, #512]	; (801a7e0 <tcp_split_unsent_seg+0x274>)
 801a5de:	f240 325b 	movw	r2, #859	; 0x35b
 801a5e2:	4983      	ldr	r1, [pc, #524]	; (801a7f0 <tcp_split_unsent_seg+0x284>)
 801a5e4:	4880      	ldr	r0, [pc, #512]	; (801a7e8 <tcp_split_unsent_seg+0x27c>)
 801a5e6:	f003 f887 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a5ea:	697b      	ldr	r3, [r7, #20]
 801a5ec:	891b      	ldrh	r3, [r3, #8]
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d106      	bne.n	801a600 <tcp_split_unsent_seg+0x94>
 801a5f2:	4b7b      	ldr	r3, [pc, #492]	; (801a7e0 <tcp_split_unsent_seg+0x274>)
 801a5f4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801a5f8:	497e      	ldr	r1, [pc, #504]	; (801a7f4 <tcp_split_unsent_seg+0x288>)
 801a5fa:	487b      	ldr	r0, [pc, #492]	; (801a7e8 <tcp_split_unsent_seg+0x27c>)
 801a5fc:	f003 f87c 	bl	801d6f8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a600:	697b      	ldr	r3, [r7, #20]
 801a602:	7a9b      	ldrb	r3, [r3, #10]
 801a604:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a606:	7bfb      	ldrb	r3, [r7, #15]
 801a608:	009b      	lsls	r3, r3, #2
 801a60a:	b2db      	uxtb	r3, r3
 801a60c:	f003 0304 	and.w	r3, r3, #4
 801a610:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a612:	697b      	ldr	r3, [r7, #20]
 801a614:	891a      	ldrh	r2, [r3, #8]
 801a616:	887b      	ldrh	r3, [r7, #2]
 801a618:	1ad3      	subs	r3, r2, r3
 801a61a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a61c:	7bbb      	ldrb	r3, [r7, #14]
 801a61e:	b29a      	uxth	r2, r3
 801a620:	89bb      	ldrh	r3, [r7, #12]
 801a622:	4413      	add	r3, r2
 801a624:	b29b      	uxth	r3, r3
 801a626:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a62a:	4619      	mov	r1, r3
 801a62c:	2036      	movs	r0, #54	; 0x36
 801a62e:	f7fb f9d3 	bl	80159d8 <pbuf_alloc>
 801a632:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a634:	693b      	ldr	r3, [r7, #16]
 801a636:	2b00      	cmp	r3, #0
 801a638:	f000 80b7 	beq.w	801a7aa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a63c:	697b      	ldr	r3, [r7, #20]
 801a63e:	685b      	ldr	r3, [r3, #4]
 801a640:	891a      	ldrh	r2, [r3, #8]
 801a642:	697b      	ldr	r3, [r7, #20]
 801a644:	891b      	ldrh	r3, [r3, #8]
 801a646:	1ad3      	subs	r3, r2, r3
 801a648:	b29a      	uxth	r2, r3
 801a64a:	887b      	ldrh	r3, [r7, #2]
 801a64c:	4413      	add	r3, r2
 801a64e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a650:	697b      	ldr	r3, [r7, #20]
 801a652:	6858      	ldr	r0, [r3, #4]
 801a654:	693b      	ldr	r3, [r7, #16]
 801a656:	685a      	ldr	r2, [r3, #4]
 801a658:	7bbb      	ldrb	r3, [r7, #14]
 801a65a:	18d1      	adds	r1, r2, r3
 801a65c:	897b      	ldrh	r3, [r7, #10]
 801a65e:	89ba      	ldrh	r2, [r7, #12]
 801a660:	f7fb fea0 	bl	80163a4 <pbuf_copy_partial>
 801a664:	4603      	mov	r3, r0
 801a666:	461a      	mov	r2, r3
 801a668:	89bb      	ldrh	r3, [r7, #12]
 801a66a:	4293      	cmp	r3, r2
 801a66c:	f040 809f 	bne.w	801a7ae <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a670:	697b      	ldr	r3, [r7, #20]
 801a672:	68db      	ldr	r3, [r3, #12]
 801a674:	899b      	ldrh	r3, [r3, #12]
 801a676:	b29b      	uxth	r3, r3
 801a678:	4618      	mov	r0, r3
 801a67a:	f7f5 fe25 	bl	80102c8 <lwip_htons>
 801a67e:	4603      	mov	r3, r0
 801a680:	b2db      	uxtb	r3, r3
 801a682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a686:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a688:	2300      	movs	r3, #0
 801a68a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801a68c:	7efb      	ldrb	r3, [r7, #27]
 801a68e:	f003 0308 	and.w	r3, r3, #8
 801a692:	2b00      	cmp	r3, #0
 801a694:	d007      	beq.n	801a6a6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a696:	7efb      	ldrb	r3, [r7, #27]
 801a698:	f023 0308 	bic.w	r3, r3, #8
 801a69c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801a69e:	7ebb      	ldrb	r3, [r7, #26]
 801a6a0:	f043 0308 	orr.w	r3, r3, #8
 801a6a4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801a6a6:	7efb      	ldrb	r3, [r7, #27]
 801a6a8:	f003 0301 	and.w	r3, r3, #1
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d007      	beq.n	801a6c0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a6b0:	7efb      	ldrb	r3, [r7, #27]
 801a6b2:	f023 0301 	bic.w	r3, r3, #1
 801a6b6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801a6b8:	7ebb      	ldrb	r3, [r7, #26]
 801a6ba:	f043 0301 	orr.w	r3, r3, #1
 801a6be:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a6c0:	697b      	ldr	r3, [r7, #20]
 801a6c2:	68db      	ldr	r3, [r3, #12]
 801a6c4:	685b      	ldr	r3, [r3, #4]
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	f7f5 fe13 	bl	80102f2 <lwip_htonl>
 801a6cc:	4602      	mov	r2, r0
 801a6ce:	887b      	ldrh	r3, [r7, #2]
 801a6d0:	18d1      	adds	r1, r2, r3
 801a6d2:	7eba      	ldrb	r2, [r7, #26]
 801a6d4:	7bfb      	ldrb	r3, [r7, #15]
 801a6d6:	9300      	str	r3, [sp, #0]
 801a6d8:	460b      	mov	r3, r1
 801a6da:	6939      	ldr	r1, [r7, #16]
 801a6dc:	6878      	ldr	r0, [r7, #4]
 801a6de:	f7ff fea7 	bl	801a430 <tcp_create_segment>
 801a6e2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801a6e4:	69fb      	ldr	r3, [r7, #28]
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d063      	beq.n	801a7b2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a6ea:	697b      	ldr	r3, [r7, #20]
 801a6ec:	685b      	ldr	r3, [r3, #4]
 801a6ee:	4618      	mov	r0, r3
 801a6f0:	f7fb fce0 	bl	80160b4 <pbuf_clen>
 801a6f4:	4603      	mov	r3, r0
 801a6f6:	461a      	mov	r2, r3
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a6fe:	1a9b      	subs	r3, r3, r2
 801a700:	b29a      	uxth	r2, r3
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a708:	697b      	ldr	r3, [r7, #20]
 801a70a:	6858      	ldr	r0, [r3, #4]
 801a70c:	697b      	ldr	r3, [r7, #20]
 801a70e:	685b      	ldr	r3, [r3, #4]
 801a710:	891a      	ldrh	r2, [r3, #8]
 801a712:	89bb      	ldrh	r3, [r7, #12]
 801a714:	1ad3      	subs	r3, r2, r3
 801a716:	b29b      	uxth	r3, r3
 801a718:	4619      	mov	r1, r3
 801a71a:	f7fb fab7 	bl	8015c8c <pbuf_realloc>
  useg->len -= remainder;
 801a71e:	697b      	ldr	r3, [r7, #20]
 801a720:	891a      	ldrh	r2, [r3, #8]
 801a722:	89bb      	ldrh	r3, [r7, #12]
 801a724:	1ad3      	subs	r3, r2, r3
 801a726:	b29a      	uxth	r2, r3
 801a728:	697b      	ldr	r3, [r7, #20]
 801a72a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a72c:	697b      	ldr	r3, [r7, #20]
 801a72e:	68db      	ldr	r3, [r3, #12]
 801a730:	899b      	ldrh	r3, [r3, #12]
 801a732:	b29c      	uxth	r4, r3
 801a734:	7efb      	ldrb	r3, [r7, #27]
 801a736:	b29b      	uxth	r3, r3
 801a738:	4618      	mov	r0, r3
 801a73a:	f7f5 fdc5 	bl	80102c8 <lwip_htons>
 801a73e:	4603      	mov	r3, r0
 801a740:	461a      	mov	r2, r3
 801a742:	697b      	ldr	r3, [r7, #20]
 801a744:	68db      	ldr	r3, [r3, #12]
 801a746:	4322      	orrs	r2, r4
 801a748:	b292      	uxth	r2, r2
 801a74a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a74c:	697b      	ldr	r3, [r7, #20]
 801a74e:	685b      	ldr	r3, [r3, #4]
 801a750:	4618      	mov	r0, r3
 801a752:	f7fb fcaf 	bl	80160b4 <pbuf_clen>
 801a756:	4603      	mov	r3, r0
 801a758:	461a      	mov	r2, r3
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a760:	4413      	add	r3, r2
 801a762:	b29a      	uxth	r2, r3
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a76a:	69fb      	ldr	r3, [r7, #28]
 801a76c:	685b      	ldr	r3, [r3, #4]
 801a76e:	4618      	mov	r0, r3
 801a770:	f7fb fca0 	bl	80160b4 <pbuf_clen>
 801a774:	4603      	mov	r3, r0
 801a776:	461a      	mov	r2, r3
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a77e:	4413      	add	r3, r2
 801a780:	b29a      	uxth	r2, r3
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a788:	697b      	ldr	r3, [r7, #20]
 801a78a:	681a      	ldr	r2, [r3, #0]
 801a78c:	69fb      	ldr	r3, [r7, #28]
 801a78e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a790:	697b      	ldr	r3, [r7, #20]
 801a792:	69fa      	ldr	r2, [r7, #28]
 801a794:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a796:	69fb      	ldr	r3, [r7, #28]
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d103      	bne.n	801a7a6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	2200      	movs	r2, #0
 801a7a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a7a6:	2300      	movs	r3, #0
 801a7a8:	e016      	b.n	801a7d8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801a7aa:	bf00      	nop
 801a7ac:	e002      	b.n	801a7b4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a7ae:	bf00      	nop
 801a7b0:	e000      	b.n	801a7b4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a7b2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a7b4:	69fb      	ldr	r3, [r7, #28]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d006      	beq.n	801a7c8 <tcp_split_unsent_seg+0x25c>
 801a7ba:	4b09      	ldr	r3, [pc, #36]	; (801a7e0 <tcp_split_unsent_seg+0x274>)
 801a7bc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801a7c0:	490d      	ldr	r1, [pc, #52]	; (801a7f8 <tcp_split_unsent_seg+0x28c>)
 801a7c2:	4809      	ldr	r0, [pc, #36]	; (801a7e8 <tcp_split_unsent_seg+0x27c>)
 801a7c4:	f002 ff98 	bl	801d6f8 <iprintf>
  if (p != NULL) {
 801a7c8:	693b      	ldr	r3, [r7, #16]
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d002      	beq.n	801a7d4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801a7ce:	6938      	ldr	r0, [r7, #16]
 801a7d0:	f7fb fbe2 	bl	8015f98 <pbuf_free>
  }

  return ERR_MEM;
 801a7d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a7d8:	4618      	mov	r0, r3
 801a7da:	3724      	adds	r7, #36	; 0x24
 801a7dc:	46bd      	mov	sp, r7
 801a7de:	bd90      	pop	{r4, r7, pc}
 801a7e0:	08021b58 	.word	0x08021b58
 801a7e4:	08021f08 	.word	0x08021f08
 801a7e8:	08021bc8 	.word	0x08021bc8
 801a7ec:	08021f2c 	.word	0x08021f2c
 801a7f0:	08021f50 	.word	0x08021f50
 801a7f4:	08021f60 	.word	0x08021f60
 801a7f8:	08021f70 	.word	0x08021f70

0801a7fc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a7fc:	b590      	push	{r4, r7, lr}
 801a7fe:	b085      	sub	sp, #20
 801a800:	af00      	add	r7, sp, #0
 801a802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	2b00      	cmp	r3, #0
 801a808:	d106      	bne.n	801a818 <tcp_send_fin+0x1c>
 801a80a:	4b21      	ldr	r3, [pc, #132]	; (801a890 <tcp_send_fin+0x94>)
 801a80c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801a810:	4920      	ldr	r1, [pc, #128]	; (801a894 <tcp_send_fin+0x98>)
 801a812:	4821      	ldr	r0, [pc, #132]	; (801a898 <tcp_send_fin+0x9c>)
 801a814:	f002 ff70 	bl	801d6f8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d02e      	beq.n	801a87e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a824:	60fb      	str	r3, [r7, #12]
 801a826:	e002      	b.n	801a82e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	2b00      	cmp	r3, #0
 801a834:	d1f8      	bne.n	801a828 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	68db      	ldr	r3, [r3, #12]
 801a83a:	899b      	ldrh	r3, [r3, #12]
 801a83c:	b29b      	uxth	r3, r3
 801a83e:	4618      	mov	r0, r3
 801a840:	f7f5 fd42 	bl	80102c8 <lwip_htons>
 801a844:	4603      	mov	r3, r0
 801a846:	b2db      	uxtb	r3, r3
 801a848:	f003 0307 	and.w	r3, r3, #7
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d116      	bne.n	801a87e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	68db      	ldr	r3, [r3, #12]
 801a854:	899b      	ldrh	r3, [r3, #12]
 801a856:	b29c      	uxth	r4, r3
 801a858:	2001      	movs	r0, #1
 801a85a:	f7f5 fd35 	bl	80102c8 <lwip_htons>
 801a85e:	4603      	mov	r3, r0
 801a860:	461a      	mov	r2, r3
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	68db      	ldr	r3, [r3, #12]
 801a866:	4322      	orrs	r2, r4
 801a868:	b292      	uxth	r2, r2
 801a86a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	8b5b      	ldrh	r3, [r3, #26]
 801a870:	f043 0320 	orr.w	r3, r3, #32
 801a874:	b29a      	uxth	r2, r3
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a87a:	2300      	movs	r3, #0
 801a87c:	e004      	b.n	801a888 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a87e:	2101      	movs	r1, #1
 801a880:	6878      	ldr	r0, [r7, #4]
 801a882:	f000 f80b 	bl	801a89c <tcp_enqueue_flags>
 801a886:	4603      	mov	r3, r0
}
 801a888:	4618      	mov	r0, r3
 801a88a:	3714      	adds	r7, #20
 801a88c:	46bd      	mov	sp, r7
 801a88e:	bd90      	pop	{r4, r7, pc}
 801a890:	08021b58 	.word	0x08021b58
 801a894:	08021f7c 	.word	0x08021f7c
 801a898:	08021bc8 	.word	0x08021bc8

0801a89c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a89c:	b580      	push	{r7, lr}
 801a89e:	b08a      	sub	sp, #40	; 0x28
 801a8a0:	af02      	add	r7, sp, #8
 801a8a2:	6078      	str	r0, [r7, #4]
 801a8a4:	460b      	mov	r3, r1
 801a8a6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801a8ac:	2300      	movs	r3, #0
 801a8ae:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a8b0:	78fb      	ldrb	r3, [r7, #3]
 801a8b2:	f003 0303 	and.w	r3, r3, #3
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d106      	bne.n	801a8c8 <tcp_enqueue_flags+0x2c>
 801a8ba:	4b67      	ldr	r3, [pc, #412]	; (801aa58 <tcp_enqueue_flags+0x1bc>)
 801a8bc:	f240 4212 	movw	r2, #1042	; 0x412
 801a8c0:	4966      	ldr	r1, [pc, #408]	; (801aa5c <tcp_enqueue_flags+0x1c0>)
 801a8c2:	4867      	ldr	r0, [pc, #412]	; (801aa60 <tcp_enqueue_flags+0x1c4>)
 801a8c4:	f002 ff18 	bl	801d6f8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d106      	bne.n	801a8dc <tcp_enqueue_flags+0x40>
 801a8ce:	4b62      	ldr	r3, [pc, #392]	; (801aa58 <tcp_enqueue_flags+0x1bc>)
 801a8d0:	f240 4213 	movw	r2, #1043	; 0x413
 801a8d4:	4963      	ldr	r1, [pc, #396]	; (801aa64 <tcp_enqueue_flags+0x1c8>)
 801a8d6:	4862      	ldr	r0, [pc, #392]	; (801aa60 <tcp_enqueue_flags+0x1c4>)
 801a8d8:	f002 ff0e 	bl	801d6f8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a8dc:	78fb      	ldrb	r3, [r7, #3]
 801a8de:	f003 0302 	and.w	r3, r3, #2
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d001      	beq.n	801a8ea <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a8e6:	2301      	movs	r3, #1
 801a8e8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a8ea:	7ffb      	ldrb	r3, [r7, #31]
 801a8ec:	009b      	lsls	r3, r3, #2
 801a8ee:	b2db      	uxtb	r3, r3
 801a8f0:	f003 0304 	and.w	r3, r3, #4
 801a8f4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a8f6:	7dfb      	ldrb	r3, [r7, #23]
 801a8f8:	b29b      	uxth	r3, r3
 801a8fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a8fe:	4619      	mov	r1, r3
 801a900:	2036      	movs	r0, #54	; 0x36
 801a902:	f7fb f869 	bl	80159d8 <pbuf_alloc>
 801a906:	6138      	str	r0, [r7, #16]
 801a908:	693b      	ldr	r3, [r7, #16]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d109      	bne.n	801a922 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	8b5b      	ldrh	r3, [r3, #26]
 801a912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a916:	b29a      	uxth	r2, r3
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a91c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a920:	e095      	b.n	801aa4e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a922:	693b      	ldr	r3, [r7, #16]
 801a924:	895a      	ldrh	r2, [r3, #10]
 801a926:	7dfb      	ldrb	r3, [r7, #23]
 801a928:	b29b      	uxth	r3, r3
 801a92a:	429a      	cmp	r2, r3
 801a92c:	d206      	bcs.n	801a93c <tcp_enqueue_flags+0xa0>
 801a92e:	4b4a      	ldr	r3, [pc, #296]	; (801aa58 <tcp_enqueue_flags+0x1bc>)
 801a930:	f240 423a 	movw	r2, #1082	; 0x43a
 801a934:	494c      	ldr	r1, [pc, #304]	; (801aa68 <tcp_enqueue_flags+0x1cc>)
 801a936:	484a      	ldr	r0, [pc, #296]	; (801aa60 <tcp_enqueue_flags+0x1c4>)
 801a938:	f002 fede 	bl	801d6f8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801a940:	78fa      	ldrb	r2, [r7, #3]
 801a942:	7ffb      	ldrb	r3, [r7, #31]
 801a944:	9300      	str	r3, [sp, #0]
 801a946:	460b      	mov	r3, r1
 801a948:	6939      	ldr	r1, [r7, #16]
 801a94a:	6878      	ldr	r0, [r7, #4]
 801a94c:	f7ff fd70 	bl	801a430 <tcp_create_segment>
 801a950:	60f8      	str	r0, [r7, #12]
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	2b00      	cmp	r3, #0
 801a956:	d109      	bne.n	801a96c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	8b5b      	ldrh	r3, [r3, #26]
 801a95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a960:	b29a      	uxth	r2, r3
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a96a:	e070      	b.n	801aa4e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	68db      	ldr	r3, [r3, #12]
 801a970:	f003 0303 	and.w	r3, r3, #3
 801a974:	2b00      	cmp	r3, #0
 801a976:	d006      	beq.n	801a986 <tcp_enqueue_flags+0xea>
 801a978:	4b37      	ldr	r3, [pc, #220]	; (801aa58 <tcp_enqueue_flags+0x1bc>)
 801a97a:	f240 4242 	movw	r2, #1090	; 0x442
 801a97e:	493b      	ldr	r1, [pc, #236]	; (801aa6c <tcp_enqueue_flags+0x1d0>)
 801a980:	4837      	ldr	r0, [pc, #220]	; (801aa60 <tcp_enqueue_flags+0x1c4>)
 801a982:	f002 feb9 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a986:	68fb      	ldr	r3, [r7, #12]
 801a988:	891b      	ldrh	r3, [r3, #8]
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d006      	beq.n	801a99c <tcp_enqueue_flags+0x100>
 801a98e:	4b32      	ldr	r3, [pc, #200]	; (801aa58 <tcp_enqueue_flags+0x1bc>)
 801a990:	f240 4243 	movw	r2, #1091	; 0x443
 801a994:	4936      	ldr	r1, [pc, #216]	; (801aa70 <tcp_enqueue_flags+0x1d4>)
 801a996:	4832      	ldr	r0, [pc, #200]	; (801aa60 <tcp_enqueue_flags+0x1c4>)
 801a998:	f002 feae 	bl	801d6f8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d103      	bne.n	801a9ac <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	68fa      	ldr	r2, [r7, #12]
 801a9a8:	66da      	str	r2, [r3, #108]	; 0x6c
 801a9aa:	e00d      	b.n	801a9c8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9b0:	61bb      	str	r3, [r7, #24]
 801a9b2:	e002      	b.n	801a9ba <tcp_enqueue_flags+0x11e>
 801a9b4:	69bb      	ldr	r3, [r7, #24]
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	61bb      	str	r3, [r7, #24]
 801a9ba:	69bb      	ldr	r3, [r7, #24]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d1f8      	bne.n	801a9b4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801a9c2:	69bb      	ldr	r3, [r7, #24]
 801a9c4:	68fa      	ldr	r2, [r7, #12]
 801a9c6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	2200      	movs	r2, #0
 801a9cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a9d0:	78fb      	ldrb	r3, [r7, #3]
 801a9d2:	f003 0302 	and.w	r3, r3, #2
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d104      	bne.n	801a9e4 <tcp_enqueue_flags+0x148>
 801a9da:	78fb      	ldrb	r3, [r7, #3]
 801a9dc:	f003 0301 	and.w	r3, r3, #1
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d004      	beq.n	801a9ee <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a9e8:	1c5a      	adds	r2, r3, #1
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a9ee:	78fb      	ldrb	r3, [r7, #3]
 801a9f0:	f003 0301 	and.w	r3, r3, #1
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d006      	beq.n	801aa06 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	8b5b      	ldrh	r3, [r3, #26]
 801a9fc:	f043 0320 	orr.w	r3, r3, #32
 801aa00:	b29a      	uxth	r2, r3
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	685b      	ldr	r3, [r3, #4]
 801aa0a:	4618      	mov	r0, r3
 801aa0c:	f7fb fb52 	bl	80160b4 <pbuf_clen>
 801aa10:	4603      	mov	r3, r0
 801aa12:	461a      	mov	r2, r3
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aa1a:	4413      	add	r3, r2
 801aa1c:	b29a      	uxth	r2, r3
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d00e      	beq.n	801aa4c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d10a      	bne.n	801aa4c <tcp_enqueue_flags+0x1b0>
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d106      	bne.n	801aa4c <tcp_enqueue_flags+0x1b0>
 801aa3e:	4b06      	ldr	r3, [pc, #24]	; (801aa58 <tcp_enqueue_flags+0x1bc>)
 801aa40:	f240 4266 	movw	r2, #1126	; 0x466
 801aa44:	490b      	ldr	r1, [pc, #44]	; (801aa74 <tcp_enqueue_flags+0x1d8>)
 801aa46:	4806      	ldr	r0, [pc, #24]	; (801aa60 <tcp_enqueue_flags+0x1c4>)
 801aa48:	f002 fe56 	bl	801d6f8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801aa4c:	2300      	movs	r3, #0
}
 801aa4e:	4618      	mov	r0, r3
 801aa50:	3720      	adds	r7, #32
 801aa52:	46bd      	mov	sp, r7
 801aa54:	bd80      	pop	{r7, pc}
 801aa56:	bf00      	nop
 801aa58:	08021b58 	.word	0x08021b58
 801aa5c:	08021f98 	.word	0x08021f98
 801aa60:	08021bc8 	.word	0x08021bc8
 801aa64:	08021ff0 	.word	0x08021ff0
 801aa68:	08022010 	.word	0x08022010
 801aa6c:	0802204c 	.word	0x0802204c
 801aa70:	08022064 	.word	0x08022064
 801aa74:	08022090 	.word	0x08022090

0801aa78 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801aa78:	b5b0      	push	{r4, r5, r7, lr}
 801aa7a:	b08a      	sub	sp, #40	; 0x28
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d106      	bne.n	801aa94 <tcp_output+0x1c>
 801aa86:	4ba0      	ldr	r3, [pc, #640]	; (801ad08 <tcp_output+0x290>)
 801aa88:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801aa8c:	499f      	ldr	r1, [pc, #636]	; (801ad0c <tcp_output+0x294>)
 801aa8e:	48a0      	ldr	r0, [pc, #640]	; (801ad10 <tcp_output+0x298>)
 801aa90:	f002 fe32 	bl	801d6f8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	7d1b      	ldrb	r3, [r3, #20]
 801aa98:	2b01      	cmp	r3, #1
 801aa9a:	d106      	bne.n	801aaaa <tcp_output+0x32>
 801aa9c:	4b9a      	ldr	r3, [pc, #616]	; (801ad08 <tcp_output+0x290>)
 801aa9e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801aaa2:	499c      	ldr	r1, [pc, #624]	; (801ad14 <tcp_output+0x29c>)
 801aaa4:	489a      	ldr	r0, [pc, #616]	; (801ad10 <tcp_output+0x298>)
 801aaa6:	f002 fe27 	bl	801d6f8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801aaaa:	4b9b      	ldr	r3, [pc, #620]	; (801ad18 <tcp_output+0x2a0>)
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	687a      	ldr	r2, [r7, #4]
 801aab0:	429a      	cmp	r2, r3
 801aab2:	d101      	bne.n	801aab8 <tcp_output+0x40>
    return ERR_OK;
 801aab4:	2300      	movs	r3, #0
 801aab6:	e1d2      	b.n	801ae5e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801aac4:	429a      	cmp	r2, r3
 801aac6:	d203      	bcs.n	801aad0 <tcp_output+0x58>
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801aace:	e002      	b.n	801aad6 <tcp_output+0x5e>
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801aad6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aadc:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d10b      	bne.n	801aafc <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	8b5b      	ldrh	r3, [r3, #26]
 801aae8:	f003 0302 	and.w	r3, r3, #2
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	f000 81a9 	beq.w	801ae44 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801aaf2:	6878      	ldr	r0, [r7, #4]
 801aaf4:	f000 fdd8 	bl	801b6a8 <tcp_send_empty_ack>
 801aaf8:	4603      	mov	r3, r0
 801aafa:	e1b0      	b.n	801ae5e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801aafc:	6879      	ldr	r1, [r7, #4]
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	3304      	adds	r3, #4
 801ab02:	461a      	mov	r2, r3
 801ab04:	6878      	ldr	r0, [r7, #4]
 801ab06:	f7ff fc77 	bl	801a3f8 <tcp_route>
 801ab0a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801ab0c:	697b      	ldr	r3, [r7, #20]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d102      	bne.n	801ab18 <tcp_output+0xa0>
    return ERR_RTE;
 801ab12:	f06f 0303 	mvn.w	r3, #3
 801ab16:	e1a2      	b.n	801ae5e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d003      	beq.n	801ab26 <tcp_output+0xae>
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d111      	bne.n	801ab4a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801ab26:	697b      	ldr	r3, [r7, #20]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d002      	beq.n	801ab32 <tcp_output+0xba>
 801ab2c:	697b      	ldr	r3, [r7, #20]
 801ab2e:	3304      	adds	r3, #4
 801ab30:	e000      	b.n	801ab34 <tcp_output+0xbc>
 801ab32:	2300      	movs	r3, #0
 801ab34:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801ab36:	693b      	ldr	r3, [r7, #16]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d102      	bne.n	801ab42 <tcp_output+0xca>
      return ERR_RTE;
 801ab3c:	f06f 0303 	mvn.w	r3, #3
 801ab40:	e18d      	b.n	801ae5e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ab42:	693b      	ldr	r3, [r7, #16]
 801ab44:	681a      	ldr	r2, [r3, #0]
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab4c:	68db      	ldr	r3, [r3, #12]
 801ab4e:	685b      	ldr	r3, [r3, #4]
 801ab50:	4618      	mov	r0, r3
 801ab52:	f7f5 fbce 	bl	80102f2 <lwip_htonl>
 801ab56:	4602      	mov	r2, r0
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab5c:	1ad3      	subs	r3, r2, r3
 801ab5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab60:	8912      	ldrh	r2, [r2, #8]
 801ab62:	4413      	add	r3, r2
 801ab64:	69ba      	ldr	r2, [r7, #24]
 801ab66:	429a      	cmp	r2, r3
 801ab68:	d227      	bcs.n	801abba <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ab70:	461a      	mov	r2, r3
 801ab72:	69bb      	ldr	r3, [r7, #24]
 801ab74:	4293      	cmp	r3, r2
 801ab76:	d114      	bne.n	801aba2 <tcp_output+0x12a>
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d110      	bne.n	801aba2 <tcp_output+0x12a>
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d10b      	bne.n	801aba2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	2200      	movs	r2, #0
 801ab8e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	2201      	movs	r2, #1
 801ab96:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	2200      	movs	r2, #0
 801ab9e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	8b5b      	ldrh	r3, [r3, #26]
 801aba6:	f003 0302 	and.w	r3, r3, #2
 801abaa:	2b00      	cmp	r3, #0
 801abac:	f000 814c 	beq.w	801ae48 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801abb0:	6878      	ldr	r0, [r7, #4]
 801abb2:	f000 fd79 	bl	801b6a8 <tcp_send_empty_ack>
 801abb6:	4603      	mov	r3, r0
 801abb8:	e151      	b.n	801ae5e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	2200      	movs	r2, #0
 801abbe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801abc6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801abc8:	6a3b      	ldr	r3, [r7, #32]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	f000 811b 	beq.w	801ae06 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801abd0:	e002      	b.n	801abd8 <tcp_output+0x160>
 801abd2:	6a3b      	ldr	r3, [r7, #32]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	623b      	str	r3, [r7, #32]
 801abd8:	6a3b      	ldr	r3, [r7, #32]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d1f8      	bne.n	801abd2 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801abe0:	e111      	b.n	801ae06 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801abe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abe4:	68db      	ldr	r3, [r3, #12]
 801abe6:	899b      	ldrh	r3, [r3, #12]
 801abe8:	b29b      	uxth	r3, r3
 801abea:	4618      	mov	r0, r3
 801abec:	f7f5 fb6c 	bl	80102c8 <lwip_htons>
 801abf0:	4603      	mov	r3, r0
 801abf2:	b2db      	uxtb	r3, r3
 801abf4:	f003 0304 	and.w	r3, r3, #4
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d006      	beq.n	801ac0a <tcp_output+0x192>
 801abfc:	4b42      	ldr	r3, [pc, #264]	; (801ad08 <tcp_output+0x290>)
 801abfe:	f240 5237 	movw	r2, #1335	; 0x537
 801ac02:	4946      	ldr	r1, [pc, #280]	; (801ad1c <tcp_output+0x2a4>)
 801ac04:	4842      	ldr	r0, [pc, #264]	; (801ad10 <tcp_output+0x298>)
 801ac06:	f002 fd77 	bl	801d6f8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d01f      	beq.n	801ac52 <tcp_output+0x1da>
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	8b5b      	ldrh	r3, [r3, #26]
 801ac16:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d119      	bne.n	801ac52 <tcp_output+0x1da>
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d00b      	beq.n	801ac3e <tcp_output+0x1c6>
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	d110      	bne.n	801ac52 <tcp_output+0x1da>
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac34:	891a      	ldrh	r2, [r3, #8]
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ac3a:	429a      	cmp	r2, r3
 801ac3c:	d209      	bcs.n	801ac52 <tcp_output+0x1da>
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	d004      	beq.n	801ac52 <tcp_output+0x1da>
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac4e:	2b08      	cmp	r3, #8
 801ac50:	d901      	bls.n	801ac56 <tcp_output+0x1de>
 801ac52:	2301      	movs	r3, #1
 801ac54:	e000      	b.n	801ac58 <tcp_output+0x1e0>
 801ac56:	2300      	movs	r3, #0
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d106      	bne.n	801ac6a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	8b5b      	ldrh	r3, [r3, #26]
 801ac60:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	f000 80e3 	beq.w	801ae30 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	7d1b      	ldrb	r3, [r3, #20]
 801ac6e:	2b02      	cmp	r3, #2
 801ac70:	d00d      	beq.n	801ac8e <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac74:	68db      	ldr	r3, [r3, #12]
 801ac76:	899b      	ldrh	r3, [r3, #12]
 801ac78:	b29c      	uxth	r4, r3
 801ac7a:	2010      	movs	r0, #16
 801ac7c:	f7f5 fb24 	bl	80102c8 <lwip_htons>
 801ac80:	4603      	mov	r3, r0
 801ac82:	461a      	mov	r2, r3
 801ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac86:	68db      	ldr	r3, [r3, #12]
 801ac88:	4322      	orrs	r2, r4
 801ac8a:	b292      	uxth	r2, r2
 801ac8c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801ac8e:	697a      	ldr	r2, [r7, #20]
 801ac90:	6879      	ldr	r1, [r7, #4]
 801ac92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ac94:	f000 f908 	bl	801aea8 <tcp_output_segment>
 801ac98:	4603      	mov	r3, r0
 801ac9a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801ac9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d009      	beq.n	801acb8 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	8b5b      	ldrh	r3, [r3, #26]
 801aca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801acac:	b29a      	uxth	r2, r3
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	835a      	strh	r2, [r3, #26]
      return err;
 801acb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acb6:	e0d2      	b.n	801ae5e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acba:	681a      	ldr	r2, [r3, #0]
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	7d1b      	ldrb	r3, [r3, #20]
 801acc4:	2b02      	cmp	r3, #2
 801acc6:	d006      	beq.n	801acd6 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	8b5b      	ldrh	r3, [r3, #26]
 801accc:	f023 0303 	bic.w	r3, r3, #3
 801acd0:	b29a      	uxth	r2, r3
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801acd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acd8:	68db      	ldr	r3, [r3, #12]
 801acda:	685b      	ldr	r3, [r3, #4]
 801acdc:	4618      	mov	r0, r3
 801acde:	f7f5 fb08 	bl	80102f2 <lwip_htonl>
 801ace2:	4604      	mov	r4, r0
 801ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ace6:	891b      	ldrh	r3, [r3, #8]
 801ace8:	461d      	mov	r5, r3
 801acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acec:	68db      	ldr	r3, [r3, #12]
 801acee:	899b      	ldrh	r3, [r3, #12]
 801acf0:	b29b      	uxth	r3, r3
 801acf2:	4618      	mov	r0, r3
 801acf4:	f7f5 fae8 	bl	80102c8 <lwip_htons>
 801acf8:	4603      	mov	r3, r0
 801acfa:	b2db      	uxtb	r3, r3
 801acfc:	f003 0303 	and.w	r3, r3, #3
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d00d      	beq.n	801ad20 <tcp_output+0x2a8>
 801ad04:	2301      	movs	r3, #1
 801ad06:	e00c      	b.n	801ad22 <tcp_output+0x2aa>
 801ad08:	08021b58 	.word	0x08021b58
 801ad0c:	080220b8 	.word	0x080220b8
 801ad10:	08021bc8 	.word	0x08021bc8
 801ad14:	080220d0 	.word	0x080220d0
 801ad18:	2000ba78 	.word	0x2000ba78
 801ad1c:	080220f8 	.word	0x080220f8
 801ad20:	2300      	movs	r3, #0
 801ad22:	442b      	add	r3, r5
 801ad24:	4423      	add	r3, r4
 801ad26:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ad2c:	68bb      	ldr	r3, [r7, #8]
 801ad2e:	1ad3      	subs	r3, r2, r3
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	da02      	bge.n	801ad3a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	68ba      	ldr	r2, [r7, #8]
 801ad38:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801ad3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad3c:	891b      	ldrh	r3, [r3, #8]
 801ad3e:	461c      	mov	r4, r3
 801ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad42:	68db      	ldr	r3, [r3, #12]
 801ad44:	899b      	ldrh	r3, [r3, #12]
 801ad46:	b29b      	uxth	r3, r3
 801ad48:	4618      	mov	r0, r3
 801ad4a:	f7f5 fabd 	bl	80102c8 <lwip_htons>
 801ad4e:	4603      	mov	r3, r0
 801ad50:	b2db      	uxtb	r3, r3
 801ad52:	f003 0303 	and.w	r3, r3, #3
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d001      	beq.n	801ad5e <tcp_output+0x2e6>
 801ad5a:	2301      	movs	r3, #1
 801ad5c:	e000      	b.n	801ad60 <tcp_output+0x2e8>
 801ad5e:	2300      	movs	r3, #0
 801ad60:	4423      	add	r3, r4
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d049      	beq.n	801adfa <tcp_output+0x382>
      seg->next = NULL;
 801ad66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad68:	2200      	movs	r2, #0
 801ad6a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d105      	bne.n	801ad80 <tcp_output+0x308>
        pcb->unacked = seg;
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad78:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad7c:	623b      	str	r3, [r7, #32]
 801ad7e:	e03f      	b.n	801ae00 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad82:	68db      	ldr	r3, [r3, #12]
 801ad84:	685b      	ldr	r3, [r3, #4]
 801ad86:	4618      	mov	r0, r3
 801ad88:	f7f5 fab3 	bl	80102f2 <lwip_htonl>
 801ad8c:	4604      	mov	r4, r0
 801ad8e:	6a3b      	ldr	r3, [r7, #32]
 801ad90:	68db      	ldr	r3, [r3, #12]
 801ad92:	685b      	ldr	r3, [r3, #4]
 801ad94:	4618      	mov	r0, r3
 801ad96:	f7f5 faac 	bl	80102f2 <lwip_htonl>
 801ad9a:	4603      	mov	r3, r0
 801ad9c:	1ae3      	subs	r3, r4, r3
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	da24      	bge.n	801adec <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	3370      	adds	r3, #112	; 0x70
 801ada6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ada8:	e002      	b.n	801adb0 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801adaa:	69fb      	ldr	r3, [r7, #28]
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801adb0:	69fb      	ldr	r3, [r7, #28]
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d011      	beq.n	801addc <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801adb8:	69fb      	ldr	r3, [r7, #28]
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	68db      	ldr	r3, [r3, #12]
 801adbe:	685b      	ldr	r3, [r3, #4]
 801adc0:	4618      	mov	r0, r3
 801adc2:	f7f5 fa96 	bl	80102f2 <lwip_htonl>
 801adc6:	4604      	mov	r4, r0
 801adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adca:	68db      	ldr	r3, [r3, #12]
 801adcc:	685b      	ldr	r3, [r3, #4]
 801adce:	4618      	mov	r0, r3
 801add0:	f7f5 fa8f 	bl	80102f2 <lwip_htonl>
 801add4:	4603      	mov	r3, r0
 801add6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801add8:	2b00      	cmp	r3, #0
 801adda:	dbe6      	blt.n	801adaa <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801addc:	69fb      	ldr	r3, [r7, #28]
 801adde:	681a      	ldr	r2, [r3, #0]
 801ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ade2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ade4:	69fb      	ldr	r3, [r7, #28]
 801ade6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ade8:	601a      	str	r2, [r3, #0]
 801adea:	e009      	b.n	801ae00 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801adec:	6a3b      	ldr	r3, [r7, #32]
 801adee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801adf0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801adf2:	6a3b      	ldr	r3, [r7, #32]
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	623b      	str	r3, [r7, #32]
 801adf8:	e002      	b.n	801ae00 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801adfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801adfc:	f7fc fc42 	bl	8017684 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ae04:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d012      	beq.n	801ae32 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae0e:	68db      	ldr	r3, [r3, #12]
 801ae10:	685b      	ldr	r3, [r3, #4]
 801ae12:	4618      	mov	r0, r3
 801ae14:	f7f5 fa6d 	bl	80102f2 <lwip_htonl>
 801ae18:	4602      	mov	r2, r0
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae1e:	1ad3      	subs	r3, r2, r3
 801ae20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ae22:	8912      	ldrh	r2, [r2, #8]
 801ae24:	4413      	add	r3, r2
  while (seg != NULL &&
 801ae26:	69ba      	ldr	r2, [r7, #24]
 801ae28:	429a      	cmp	r2, r3
 801ae2a:	f4bf aeda 	bcs.w	801abe2 <tcp_output+0x16a>
 801ae2e:	e000      	b.n	801ae32 <tcp_output+0x3ba>
      break;
 801ae30:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d108      	bne.n	801ae4c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	2200      	movs	r2, #0
 801ae3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801ae42:	e004      	b.n	801ae4e <tcp_output+0x3d6>
    goto output_done;
 801ae44:	bf00      	nop
 801ae46:	e002      	b.n	801ae4e <tcp_output+0x3d6>
    goto output_done;
 801ae48:	bf00      	nop
 801ae4a:	e000      	b.n	801ae4e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801ae4c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	8b5b      	ldrh	r3, [r3, #26]
 801ae52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ae56:	b29a      	uxth	r2, r3
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801ae5c:	2300      	movs	r3, #0
}
 801ae5e:	4618      	mov	r0, r3
 801ae60:	3728      	adds	r7, #40	; 0x28
 801ae62:	46bd      	mov	sp, r7
 801ae64:	bdb0      	pop	{r4, r5, r7, pc}
 801ae66:	bf00      	nop

0801ae68 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ae68:	b580      	push	{r7, lr}
 801ae6a:	b082      	sub	sp, #8
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d106      	bne.n	801ae84 <tcp_output_segment_busy+0x1c>
 801ae76:	4b09      	ldr	r3, [pc, #36]	; (801ae9c <tcp_output_segment_busy+0x34>)
 801ae78:	f240 529a 	movw	r2, #1434	; 0x59a
 801ae7c:	4908      	ldr	r1, [pc, #32]	; (801aea0 <tcp_output_segment_busy+0x38>)
 801ae7e:	4809      	ldr	r0, [pc, #36]	; (801aea4 <tcp_output_segment_busy+0x3c>)
 801ae80:	f002 fc3a 	bl	801d6f8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	685b      	ldr	r3, [r3, #4]
 801ae88:	7b9b      	ldrb	r3, [r3, #14]
 801ae8a:	2b01      	cmp	r3, #1
 801ae8c:	d001      	beq.n	801ae92 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801ae8e:	2301      	movs	r3, #1
 801ae90:	e000      	b.n	801ae94 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801ae92:	2300      	movs	r3, #0
}
 801ae94:	4618      	mov	r0, r3
 801ae96:	3708      	adds	r7, #8
 801ae98:	46bd      	mov	sp, r7
 801ae9a:	bd80      	pop	{r7, pc}
 801ae9c:	08021b58 	.word	0x08021b58
 801aea0:	08022110 	.word	0x08022110
 801aea4:	08021bc8 	.word	0x08021bc8

0801aea8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801aea8:	b5b0      	push	{r4, r5, r7, lr}
 801aeaa:	b08c      	sub	sp, #48	; 0x30
 801aeac:	af04      	add	r7, sp, #16
 801aeae:	60f8      	str	r0, [r7, #12]
 801aeb0:	60b9      	str	r1, [r7, #8]
 801aeb2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d106      	bne.n	801aec8 <tcp_output_segment+0x20>
 801aeba:	4b64      	ldr	r3, [pc, #400]	; (801b04c <tcp_output_segment+0x1a4>)
 801aebc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801aec0:	4963      	ldr	r1, [pc, #396]	; (801b050 <tcp_output_segment+0x1a8>)
 801aec2:	4864      	ldr	r0, [pc, #400]	; (801b054 <tcp_output_segment+0x1ac>)
 801aec4:	f002 fc18 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801aec8:	68bb      	ldr	r3, [r7, #8]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d106      	bne.n	801aedc <tcp_output_segment+0x34>
 801aece:	4b5f      	ldr	r3, [pc, #380]	; (801b04c <tcp_output_segment+0x1a4>)
 801aed0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801aed4:	4960      	ldr	r1, [pc, #384]	; (801b058 <tcp_output_segment+0x1b0>)
 801aed6:	485f      	ldr	r0, [pc, #380]	; (801b054 <tcp_output_segment+0x1ac>)
 801aed8:	f002 fc0e 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d106      	bne.n	801aef0 <tcp_output_segment+0x48>
 801aee2:	4b5a      	ldr	r3, [pc, #360]	; (801b04c <tcp_output_segment+0x1a4>)
 801aee4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801aee8:	495c      	ldr	r1, [pc, #368]	; (801b05c <tcp_output_segment+0x1b4>)
 801aeea:	485a      	ldr	r0, [pc, #360]	; (801b054 <tcp_output_segment+0x1ac>)
 801aeec:	f002 fc04 	bl	801d6f8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801aef0:	68f8      	ldr	r0, [r7, #12]
 801aef2:	f7ff ffb9 	bl	801ae68 <tcp_output_segment_busy>
 801aef6:	4603      	mov	r3, r0
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d001      	beq.n	801af00 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801aefc:	2300      	movs	r3, #0
 801aefe:	e0a0      	b.n	801b042 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801af00:	68bb      	ldr	r3, [r7, #8]
 801af02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	68dc      	ldr	r4, [r3, #12]
 801af08:	4610      	mov	r0, r2
 801af0a:	f7f5 f9f2 	bl	80102f2 <lwip_htonl>
 801af0e:	4603      	mov	r3, r0
 801af10:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801af12:	68bb      	ldr	r3, [r7, #8]
 801af14:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801af16:	68fb      	ldr	r3, [r7, #12]
 801af18:	68dc      	ldr	r4, [r3, #12]
 801af1a:	4610      	mov	r0, r2
 801af1c:	f7f5 f9d4 	bl	80102c8 <lwip_htons>
 801af20:	4603      	mov	r3, r0
 801af22:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801af24:	68bb      	ldr	r3, [r7, #8]
 801af26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af28:	68ba      	ldr	r2, [r7, #8]
 801af2a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801af2c:	441a      	add	r2, r3
 801af2e:	68bb      	ldr	r3, [r7, #8]
 801af30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801af32:	68fb      	ldr	r3, [r7, #12]
 801af34:	68db      	ldr	r3, [r3, #12]
 801af36:	3314      	adds	r3, #20
 801af38:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801af3a:	68fb      	ldr	r3, [r7, #12]
 801af3c:	7a9b      	ldrb	r3, [r3, #10]
 801af3e:	f003 0301 	and.w	r3, r3, #1
 801af42:	2b00      	cmp	r3, #0
 801af44:	d015      	beq.n	801af72 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801af46:	68bb      	ldr	r3, [r7, #8]
 801af48:	3304      	adds	r3, #4
 801af4a:	461a      	mov	r2, r3
 801af4c:	6879      	ldr	r1, [r7, #4]
 801af4e:	f44f 7006 	mov.w	r0, #536	; 0x218
 801af52:	f7fc fe8d 	bl	8017c70 <tcp_eff_send_mss_netif>
 801af56:	4603      	mov	r3, r0
 801af58:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801af5a:	8b7b      	ldrh	r3, [r7, #26]
 801af5c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801af60:	4618      	mov	r0, r3
 801af62:	f7f5 f9c6 	bl	80102f2 <lwip_htonl>
 801af66:	4602      	mov	r2, r0
 801af68:	69fb      	ldr	r3, [r7, #28]
 801af6a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801af6c:	69fb      	ldr	r3, [r7, #28]
 801af6e:	3304      	adds	r3, #4
 801af70:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801af72:	68bb      	ldr	r3, [r7, #8]
 801af74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801af78:	2b00      	cmp	r3, #0
 801af7a:	da02      	bge.n	801af82 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801af7c:	68bb      	ldr	r3, [r7, #8]
 801af7e:	2200      	movs	r2, #0
 801af80:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801af82:	68bb      	ldr	r3, [r7, #8]
 801af84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801af86:	2b00      	cmp	r3, #0
 801af88:	d10c      	bne.n	801afa4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801af8a:	4b35      	ldr	r3, [pc, #212]	; (801b060 <tcp_output_segment+0x1b8>)
 801af8c:	681a      	ldr	r2, [r3, #0]
 801af8e:	68bb      	ldr	r3, [r7, #8]
 801af90:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	68db      	ldr	r3, [r3, #12]
 801af96:	685b      	ldr	r3, [r3, #4]
 801af98:	4618      	mov	r0, r3
 801af9a:	f7f5 f9aa 	bl	80102f2 <lwip_htonl>
 801af9e:	4602      	mov	r2, r0
 801afa0:	68bb      	ldr	r3, [r7, #8]
 801afa2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	68db      	ldr	r3, [r3, #12]
 801afa8:	461a      	mov	r2, r3
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	685b      	ldr	r3, [r3, #4]
 801afae:	685b      	ldr	r3, [r3, #4]
 801afb0:	1ad3      	subs	r3, r2, r3
 801afb2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	685b      	ldr	r3, [r3, #4]
 801afb8:	8959      	ldrh	r1, [r3, #10]
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	685b      	ldr	r3, [r3, #4]
 801afbe:	8b3a      	ldrh	r2, [r7, #24]
 801afc0:	1a8a      	subs	r2, r1, r2
 801afc2:	b292      	uxth	r2, r2
 801afc4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	685b      	ldr	r3, [r3, #4]
 801afca:	8919      	ldrh	r1, [r3, #8]
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	685b      	ldr	r3, [r3, #4]
 801afd0:	8b3a      	ldrh	r2, [r7, #24]
 801afd2:	1a8a      	subs	r2, r1, r2
 801afd4:	b292      	uxth	r2, r2
 801afd6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	685b      	ldr	r3, [r3, #4]
 801afdc:	68fa      	ldr	r2, [r7, #12]
 801afde:	68d2      	ldr	r2, [r2, #12]
 801afe0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	68db      	ldr	r3, [r3, #12]
 801afe6:	2200      	movs	r2, #0
 801afe8:	741a      	strb	r2, [r3, #16]
 801afea:	2200      	movs	r2, #0
 801afec:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801afee:	68fb      	ldr	r3, [r7, #12]
 801aff0:	68db      	ldr	r3, [r3, #12]
 801aff2:	f103 0214 	add.w	r2, r3, #20
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	7a9b      	ldrb	r3, [r3, #10]
 801affa:	009b      	lsls	r3, r3, #2
 801affc:	f003 0304 	and.w	r3, r3, #4
 801b000:	4413      	add	r3, r2
 801b002:	69fa      	ldr	r2, [r7, #28]
 801b004:	429a      	cmp	r2, r3
 801b006:	d006      	beq.n	801b016 <tcp_output_segment+0x16e>
 801b008:	4b10      	ldr	r3, [pc, #64]	; (801b04c <tcp_output_segment+0x1a4>)
 801b00a:	f240 621c 	movw	r2, #1564	; 0x61c
 801b00e:	4915      	ldr	r1, [pc, #84]	; (801b064 <tcp_output_segment+0x1bc>)
 801b010:	4810      	ldr	r0, [pc, #64]	; (801b054 <tcp_output_segment+0x1ac>)
 801b012:	f002 fb71 	bl	801d6f8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b016:	68fb      	ldr	r3, [r7, #12]
 801b018:	6858      	ldr	r0, [r3, #4]
 801b01a:	68b9      	ldr	r1, [r7, #8]
 801b01c:	68bb      	ldr	r3, [r7, #8]
 801b01e:	1d1c      	adds	r4, r3, #4
 801b020:	68bb      	ldr	r3, [r7, #8]
 801b022:	7add      	ldrb	r5, [r3, #11]
 801b024:	68bb      	ldr	r3, [r7, #8]
 801b026:	7a9b      	ldrb	r3, [r3, #10]
 801b028:	687a      	ldr	r2, [r7, #4]
 801b02a:	9202      	str	r2, [sp, #8]
 801b02c:	2206      	movs	r2, #6
 801b02e:	9201      	str	r2, [sp, #4]
 801b030:	9300      	str	r3, [sp, #0]
 801b032:	462b      	mov	r3, r5
 801b034:	4622      	mov	r2, r4
 801b036:	f7f8 fca1 	bl	801397c <ip4_output_if>
 801b03a:	4603      	mov	r3, r0
 801b03c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b03e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b042:	4618      	mov	r0, r3
 801b044:	3720      	adds	r7, #32
 801b046:	46bd      	mov	sp, r7
 801b048:	bdb0      	pop	{r4, r5, r7, pc}
 801b04a:	bf00      	nop
 801b04c:	08021b58 	.word	0x08021b58
 801b050:	08022138 	.word	0x08022138
 801b054:	08021bc8 	.word	0x08021bc8
 801b058:	08022158 	.word	0x08022158
 801b05c:	08022178 	.word	0x08022178
 801b060:	2000ba68 	.word	0x2000ba68
 801b064:	0802219c 	.word	0x0802219c

0801b068 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b068:	b5b0      	push	{r4, r5, r7, lr}
 801b06a:	b084      	sub	sp, #16
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	2b00      	cmp	r3, #0
 801b074:	d106      	bne.n	801b084 <tcp_rexmit_rto_prepare+0x1c>
 801b076:	4b31      	ldr	r3, [pc, #196]	; (801b13c <tcp_rexmit_rto_prepare+0xd4>)
 801b078:	f240 6263 	movw	r2, #1635	; 0x663
 801b07c:	4930      	ldr	r1, [pc, #192]	; (801b140 <tcp_rexmit_rto_prepare+0xd8>)
 801b07e:	4831      	ldr	r0, [pc, #196]	; (801b144 <tcp_rexmit_rto_prepare+0xdc>)
 801b080:	f002 fb3a 	bl	801d6f8 <iprintf>

  if (pcb->unacked == NULL) {
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d102      	bne.n	801b092 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b08c:	f06f 0305 	mvn.w	r3, #5
 801b090:	e050      	b.n	801b134 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b096:	60fb      	str	r3, [r7, #12]
 801b098:	e00b      	b.n	801b0b2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b09a:	68f8      	ldr	r0, [r7, #12]
 801b09c:	f7ff fee4 	bl	801ae68 <tcp_output_segment_busy>
 801b0a0:	4603      	mov	r3, r0
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d002      	beq.n	801b0ac <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b0a6:	f06f 0305 	mvn.w	r3, #5
 801b0aa:	e043      	b.n	801b134 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b0ac:	68fb      	ldr	r3, [r7, #12]
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	60fb      	str	r3, [r7, #12]
 801b0b2:	68fb      	ldr	r3, [r7, #12]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d1ef      	bne.n	801b09a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b0ba:	68f8      	ldr	r0, [r7, #12]
 801b0bc:	f7ff fed4 	bl	801ae68 <tcp_output_segment_busy>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d002      	beq.n	801b0cc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b0c6:	f06f 0305 	mvn.w	r3, #5
 801b0ca:	e033      	b.n	801b134 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b0d0:	68fb      	ldr	r3, [r7, #12]
 801b0d2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	2200      	movs	r2, #0
 801b0e0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	8b5b      	ldrh	r3, [r3, #26]
 801b0e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b0ea:	b29a      	uxth	r2, r3
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	68db      	ldr	r3, [r3, #12]
 801b0f4:	685b      	ldr	r3, [r3, #4]
 801b0f6:	4618      	mov	r0, r3
 801b0f8:	f7f5 f8fb 	bl	80102f2 <lwip_htonl>
 801b0fc:	4604      	mov	r4, r0
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	891b      	ldrh	r3, [r3, #8]
 801b102:	461d      	mov	r5, r3
 801b104:	68fb      	ldr	r3, [r7, #12]
 801b106:	68db      	ldr	r3, [r3, #12]
 801b108:	899b      	ldrh	r3, [r3, #12]
 801b10a:	b29b      	uxth	r3, r3
 801b10c:	4618      	mov	r0, r3
 801b10e:	f7f5 f8db 	bl	80102c8 <lwip_htons>
 801b112:	4603      	mov	r3, r0
 801b114:	b2db      	uxtb	r3, r3
 801b116:	f003 0303 	and.w	r3, r3, #3
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d001      	beq.n	801b122 <tcp_rexmit_rto_prepare+0xba>
 801b11e:	2301      	movs	r3, #1
 801b120:	e000      	b.n	801b124 <tcp_rexmit_rto_prepare+0xbc>
 801b122:	2300      	movs	r3, #0
 801b124:	442b      	add	r3, r5
 801b126:	18e2      	adds	r2, r4, r3
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	2200      	movs	r2, #0
 801b130:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801b132:	2300      	movs	r3, #0
}
 801b134:	4618      	mov	r0, r3
 801b136:	3710      	adds	r7, #16
 801b138:	46bd      	mov	sp, r7
 801b13a:	bdb0      	pop	{r4, r5, r7, pc}
 801b13c:	08021b58 	.word	0x08021b58
 801b140:	080221b0 	.word	0x080221b0
 801b144:	08021bc8 	.word	0x08021bc8

0801b148 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b148:	b580      	push	{r7, lr}
 801b14a:	b082      	sub	sp, #8
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	2b00      	cmp	r3, #0
 801b154:	d106      	bne.n	801b164 <tcp_rexmit_rto_commit+0x1c>
 801b156:	4b0d      	ldr	r3, [pc, #52]	; (801b18c <tcp_rexmit_rto_commit+0x44>)
 801b158:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b15c:	490c      	ldr	r1, [pc, #48]	; (801b190 <tcp_rexmit_rto_commit+0x48>)
 801b15e:	480d      	ldr	r0, [pc, #52]	; (801b194 <tcp_rexmit_rto_commit+0x4c>)
 801b160:	f002 faca 	bl	801d6f8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b16a:	2bff      	cmp	r3, #255	; 0xff
 801b16c:	d007      	beq.n	801b17e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b174:	3301      	adds	r3, #1
 801b176:	b2da      	uxtb	r2, r3
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b17e:	6878      	ldr	r0, [r7, #4]
 801b180:	f7ff fc7a 	bl	801aa78 <tcp_output>
}
 801b184:	bf00      	nop
 801b186:	3708      	adds	r7, #8
 801b188:	46bd      	mov	sp, r7
 801b18a:	bd80      	pop	{r7, pc}
 801b18c:	08021b58 	.word	0x08021b58
 801b190:	080221d4 	.word	0x080221d4
 801b194:	08021bc8 	.word	0x08021bc8

0801b198 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b198:	b580      	push	{r7, lr}
 801b19a:	b082      	sub	sp, #8
 801b19c:	af00      	add	r7, sp, #0
 801b19e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d106      	bne.n	801b1b4 <tcp_rexmit_rto+0x1c>
 801b1a6:	4b0a      	ldr	r3, [pc, #40]	; (801b1d0 <tcp_rexmit_rto+0x38>)
 801b1a8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801b1ac:	4909      	ldr	r1, [pc, #36]	; (801b1d4 <tcp_rexmit_rto+0x3c>)
 801b1ae:	480a      	ldr	r0, [pc, #40]	; (801b1d8 <tcp_rexmit_rto+0x40>)
 801b1b0:	f002 faa2 	bl	801d6f8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b1b4:	6878      	ldr	r0, [r7, #4]
 801b1b6:	f7ff ff57 	bl	801b068 <tcp_rexmit_rto_prepare>
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d102      	bne.n	801b1c6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b1c0:	6878      	ldr	r0, [r7, #4]
 801b1c2:	f7ff ffc1 	bl	801b148 <tcp_rexmit_rto_commit>
  }
}
 801b1c6:	bf00      	nop
 801b1c8:	3708      	adds	r7, #8
 801b1ca:	46bd      	mov	sp, r7
 801b1cc:	bd80      	pop	{r7, pc}
 801b1ce:	bf00      	nop
 801b1d0:	08021b58 	.word	0x08021b58
 801b1d4:	080221f8 	.word	0x080221f8
 801b1d8:	08021bc8 	.word	0x08021bc8

0801b1dc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b1dc:	b590      	push	{r4, r7, lr}
 801b1de:	b085      	sub	sp, #20
 801b1e0:	af00      	add	r7, sp, #0
 801b1e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d106      	bne.n	801b1f8 <tcp_rexmit+0x1c>
 801b1ea:	4b2f      	ldr	r3, [pc, #188]	; (801b2a8 <tcp_rexmit+0xcc>)
 801b1ec:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801b1f0:	492e      	ldr	r1, [pc, #184]	; (801b2ac <tcp_rexmit+0xd0>)
 801b1f2:	482f      	ldr	r0, [pc, #188]	; (801b2b0 <tcp_rexmit+0xd4>)
 801b1f4:	f002 fa80 	bl	801d6f8 <iprintf>

  if (pcb->unacked == NULL) {
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d102      	bne.n	801b206 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b200:	f06f 0305 	mvn.w	r3, #5
 801b204:	e04c      	b.n	801b2a0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b20a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b20c:	68b8      	ldr	r0, [r7, #8]
 801b20e:	f7ff fe2b 	bl	801ae68 <tcp_output_segment_busy>
 801b212:	4603      	mov	r3, r0
 801b214:	2b00      	cmp	r3, #0
 801b216:	d002      	beq.n	801b21e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b218:	f06f 0305 	mvn.w	r3, #5
 801b21c:	e040      	b.n	801b2a0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b21e:	68bb      	ldr	r3, [r7, #8]
 801b220:	681a      	ldr	r2, [r3, #0]
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	336c      	adds	r3, #108	; 0x6c
 801b22a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b22c:	e002      	b.n	801b234 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d011      	beq.n	801b260 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b23c:	68fb      	ldr	r3, [r7, #12]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	68db      	ldr	r3, [r3, #12]
 801b242:	685b      	ldr	r3, [r3, #4]
 801b244:	4618      	mov	r0, r3
 801b246:	f7f5 f854 	bl	80102f2 <lwip_htonl>
 801b24a:	4604      	mov	r4, r0
 801b24c:	68bb      	ldr	r3, [r7, #8]
 801b24e:	68db      	ldr	r3, [r3, #12]
 801b250:	685b      	ldr	r3, [r3, #4]
 801b252:	4618      	mov	r0, r3
 801b254:	f7f5 f84d 	bl	80102f2 <lwip_htonl>
 801b258:	4603      	mov	r3, r0
 801b25a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	dbe6      	blt.n	801b22e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b260:	68fb      	ldr	r3, [r7, #12]
 801b262:	681a      	ldr	r2, [r3, #0]
 801b264:	68bb      	ldr	r3, [r7, #8]
 801b266:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b268:	68fb      	ldr	r3, [r7, #12]
 801b26a:	68ba      	ldr	r2, [r7, #8]
 801b26c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b26e:	68bb      	ldr	r3, [r7, #8]
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	2b00      	cmp	r3, #0
 801b274:	d103      	bne.n	801b27e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	2200      	movs	r2, #0
 801b27a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b284:	2bff      	cmp	r3, #255	; 0xff
 801b286:	d007      	beq.n	801b298 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b28e:	3301      	adds	r3, #1
 801b290:	b2da      	uxtb	r2, r3
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	2200      	movs	r2, #0
 801b29c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b29e:	2300      	movs	r3, #0
}
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	3714      	adds	r7, #20
 801b2a4:	46bd      	mov	sp, r7
 801b2a6:	bd90      	pop	{r4, r7, pc}
 801b2a8:	08021b58 	.word	0x08021b58
 801b2ac:	08022214 	.word	0x08022214
 801b2b0:	08021bc8 	.word	0x08021bc8

0801b2b4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b2b4:	b580      	push	{r7, lr}
 801b2b6:	b082      	sub	sp, #8
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d106      	bne.n	801b2d0 <tcp_rexmit_fast+0x1c>
 801b2c2:	4b2f      	ldr	r3, [pc, #188]	; (801b380 <tcp_rexmit_fast+0xcc>)
 801b2c4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b2c8:	492e      	ldr	r1, [pc, #184]	; (801b384 <tcp_rexmit_fast+0xd0>)
 801b2ca:	482f      	ldr	r0, [pc, #188]	; (801b388 <tcp_rexmit_fast+0xd4>)
 801b2cc:	f002 fa14 	bl	801d6f8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d04f      	beq.n	801b378 <tcp_rexmit_fast+0xc4>
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	8b5b      	ldrh	r3, [r3, #26]
 801b2dc:	f003 0304 	and.w	r3, r3, #4
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d149      	bne.n	801b378 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b2e4:	6878      	ldr	r0, [r7, #4]
 801b2e6:	f7ff ff79 	bl	801b1dc <tcp_rexmit>
 801b2ea:	4603      	mov	r3, r0
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d143      	bne.n	801b378 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b2fc:	429a      	cmp	r2, r3
 801b2fe:	d208      	bcs.n	801b312 <tcp_rexmit_fast+0x5e>
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b306:	2b00      	cmp	r3, #0
 801b308:	da00      	bge.n	801b30c <tcp_rexmit_fast+0x58>
 801b30a:	3301      	adds	r3, #1
 801b30c:	105b      	asrs	r3, r3, #1
 801b30e:	b29b      	uxth	r3, r3
 801b310:	e007      	b.n	801b322 <tcp_rexmit_fast+0x6e>
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b318:	2b00      	cmp	r3, #0
 801b31a:	da00      	bge.n	801b31e <tcp_rexmit_fast+0x6a>
 801b31c:	3301      	adds	r3, #1
 801b31e:	105b      	asrs	r3, r3, #1
 801b320:	b29b      	uxth	r3, r3
 801b322:	687a      	ldr	r2, [r7, #4]
 801b324:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b32e:	461a      	mov	r2, r3
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b334:	005b      	lsls	r3, r3, #1
 801b336:	429a      	cmp	r2, r3
 801b338:	d206      	bcs.n	801b348 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b33e:	005b      	lsls	r3, r3, #1
 801b340:	b29a      	uxth	r2, r3
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b352:	4619      	mov	r1, r3
 801b354:	0049      	lsls	r1, r1, #1
 801b356:	440b      	add	r3, r1
 801b358:	b29b      	uxth	r3, r3
 801b35a:	4413      	add	r3, r2
 801b35c:	b29a      	uxth	r2, r3
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	8b5b      	ldrh	r3, [r3, #26]
 801b368:	f043 0304 	orr.w	r3, r3, #4
 801b36c:	b29a      	uxth	r2, r3
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	2200      	movs	r2, #0
 801b376:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801b378:	bf00      	nop
 801b37a:	3708      	adds	r7, #8
 801b37c:	46bd      	mov	sp, r7
 801b37e:	bd80      	pop	{r7, pc}
 801b380:	08021b58 	.word	0x08021b58
 801b384:	0802222c 	.word	0x0802222c
 801b388:	08021bc8 	.word	0x08021bc8

0801b38c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b38c:	b580      	push	{r7, lr}
 801b38e:	b086      	sub	sp, #24
 801b390:	af00      	add	r7, sp, #0
 801b392:	60f8      	str	r0, [r7, #12]
 801b394:	607b      	str	r3, [r7, #4]
 801b396:	460b      	mov	r3, r1
 801b398:	817b      	strh	r3, [r7, #10]
 801b39a:	4613      	mov	r3, r2
 801b39c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b39e:	897a      	ldrh	r2, [r7, #10]
 801b3a0:	893b      	ldrh	r3, [r7, #8]
 801b3a2:	4413      	add	r3, r2
 801b3a4:	b29b      	uxth	r3, r3
 801b3a6:	3314      	adds	r3, #20
 801b3a8:	b29b      	uxth	r3, r3
 801b3aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b3ae:	4619      	mov	r1, r3
 801b3b0:	2022      	movs	r0, #34	; 0x22
 801b3b2:	f7fa fb11 	bl	80159d8 <pbuf_alloc>
 801b3b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b3b8:	697b      	ldr	r3, [r7, #20]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d04e      	beq.n	801b45c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b3be:	697b      	ldr	r3, [r7, #20]
 801b3c0:	895b      	ldrh	r3, [r3, #10]
 801b3c2:	461a      	mov	r2, r3
 801b3c4:	897b      	ldrh	r3, [r7, #10]
 801b3c6:	3314      	adds	r3, #20
 801b3c8:	429a      	cmp	r2, r3
 801b3ca:	da06      	bge.n	801b3da <tcp_output_alloc_header_common+0x4e>
 801b3cc:	4b26      	ldr	r3, [pc, #152]	; (801b468 <tcp_output_alloc_header_common+0xdc>)
 801b3ce:	f240 7224 	movw	r2, #1828	; 0x724
 801b3d2:	4926      	ldr	r1, [pc, #152]	; (801b46c <tcp_output_alloc_header_common+0xe0>)
 801b3d4:	4826      	ldr	r0, [pc, #152]	; (801b470 <tcp_output_alloc_header_common+0xe4>)
 801b3d6:	f002 f98f 	bl	801d6f8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b3da:	697b      	ldr	r3, [r7, #20]
 801b3dc:	685b      	ldr	r3, [r3, #4]
 801b3de:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b3e0:	8c3b      	ldrh	r3, [r7, #32]
 801b3e2:	4618      	mov	r0, r3
 801b3e4:	f7f4 ff70 	bl	80102c8 <lwip_htons>
 801b3e8:	4603      	mov	r3, r0
 801b3ea:	461a      	mov	r2, r3
 801b3ec:	693b      	ldr	r3, [r7, #16]
 801b3ee:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b3f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b3f2:	4618      	mov	r0, r3
 801b3f4:	f7f4 ff68 	bl	80102c8 <lwip_htons>
 801b3f8:	4603      	mov	r3, r0
 801b3fa:	461a      	mov	r2, r3
 801b3fc:	693b      	ldr	r3, [r7, #16]
 801b3fe:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b400:	693b      	ldr	r3, [r7, #16]
 801b402:	687a      	ldr	r2, [r7, #4]
 801b404:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b406:	68f8      	ldr	r0, [r7, #12]
 801b408:	f7f4 ff73 	bl	80102f2 <lwip_htonl>
 801b40c:	4602      	mov	r2, r0
 801b40e:	693b      	ldr	r3, [r7, #16]
 801b410:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b412:	897b      	ldrh	r3, [r7, #10]
 801b414:	089b      	lsrs	r3, r3, #2
 801b416:	b29b      	uxth	r3, r3
 801b418:	3305      	adds	r3, #5
 801b41a:	b29b      	uxth	r3, r3
 801b41c:	031b      	lsls	r3, r3, #12
 801b41e:	b29a      	uxth	r2, r3
 801b420:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b424:	b29b      	uxth	r3, r3
 801b426:	4313      	orrs	r3, r2
 801b428:	b29b      	uxth	r3, r3
 801b42a:	4618      	mov	r0, r3
 801b42c:	f7f4 ff4c 	bl	80102c8 <lwip_htons>
 801b430:	4603      	mov	r3, r0
 801b432:	461a      	mov	r2, r3
 801b434:	693b      	ldr	r3, [r7, #16]
 801b436:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b438:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b43a:	4618      	mov	r0, r3
 801b43c:	f7f4 ff44 	bl	80102c8 <lwip_htons>
 801b440:	4603      	mov	r3, r0
 801b442:	461a      	mov	r2, r3
 801b444:	693b      	ldr	r3, [r7, #16]
 801b446:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b448:	693b      	ldr	r3, [r7, #16]
 801b44a:	2200      	movs	r2, #0
 801b44c:	741a      	strb	r2, [r3, #16]
 801b44e:	2200      	movs	r2, #0
 801b450:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b452:	693b      	ldr	r3, [r7, #16]
 801b454:	2200      	movs	r2, #0
 801b456:	749a      	strb	r2, [r3, #18]
 801b458:	2200      	movs	r2, #0
 801b45a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b45c:	697b      	ldr	r3, [r7, #20]
}
 801b45e:	4618      	mov	r0, r3
 801b460:	3718      	adds	r7, #24
 801b462:	46bd      	mov	sp, r7
 801b464:	bd80      	pop	{r7, pc}
 801b466:	bf00      	nop
 801b468:	08021b58 	.word	0x08021b58
 801b46c:	0802224c 	.word	0x0802224c
 801b470:	08021bc8 	.word	0x08021bc8

0801b474 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b474:	b5b0      	push	{r4, r5, r7, lr}
 801b476:	b08a      	sub	sp, #40	; 0x28
 801b478:	af04      	add	r7, sp, #16
 801b47a:	60f8      	str	r0, [r7, #12]
 801b47c:	607b      	str	r3, [r7, #4]
 801b47e:	460b      	mov	r3, r1
 801b480:	817b      	strh	r3, [r7, #10]
 801b482:	4613      	mov	r3, r2
 801b484:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b486:	68fb      	ldr	r3, [r7, #12]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d106      	bne.n	801b49a <tcp_output_alloc_header+0x26>
 801b48c:	4b15      	ldr	r3, [pc, #84]	; (801b4e4 <tcp_output_alloc_header+0x70>)
 801b48e:	f240 7242 	movw	r2, #1858	; 0x742
 801b492:	4915      	ldr	r1, [pc, #84]	; (801b4e8 <tcp_output_alloc_header+0x74>)
 801b494:	4815      	ldr	r0, [pc, #84]	; (801b4ec <tcp_output_alloc_header+0x78>)
 801b496:	f002 f92f 	bl	801d6f8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b49a:	68fb      	ldr	r3, [r7, #12]
 801b49c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801b49e:	68fb      	ldr	r3, [r7, #12]
 801b4a0:	8adb      	ldrh	r3, [r3, #22]
 801b4a2:	68fa      	ldr	r2, [r7, #12]
 801b4a4:	8b12      	ldrh	r2, [r2, #24]
 801b4a6:	68f9      	ldr	r1, [r7, #12]
 801b4a8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801b4aa:	893d      	ldrh	r5, [r7, #8]
 801b4ac:	897c      	ldrh	r4, [r7, #10]
 801b4ae:	9103      	str	r1, [sp, #12]
 801b4b0:	2110      	movs	r1, #16
 801b4b2:	9102      	str	r1, [sp, #8]
 801b4b4:	9201      	str	r2, [sp, #4]
 801b4b6:	9300      	str	r3, [sp, #0]
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	462a      	mov	r2, r5
 801b4bc:	4621      	mov	r1, r4
 801b4be:	f7ff ff65 	bl	801b38c <tcp_output_alloc_header_common>
 801b4c2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b4c4:	697b      	ldr	r3, [r7, #20]
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d006      	beq.n	801b4d8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b4ca:	68fb      	ldr	r3, [r7, #12]
 801b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4ce:	68fa      	ldr	r2, [r7, #12]
 801b4d0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b4d2:	441a      	add	r2, r3
 801b4d4:	68fb      	ldr	r3, [r7, #12]
 801b4d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801b4d8:	697b      	ldr	r3, [r7, #20]
}
 801b4da:	4618      	mov	r0, r3
 801b4dc:	3718      	adds	r7, #24
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	bdb0      	pop	{r4, r5, r7, pc}
 801b4e2:	bf00      	nop
 801b4e4:	08021b58 	.word	0x08021b58
 801b4e8:	0802227c 	.word	0x0802227c
 801b4ec:	08021bc8 	.word	0x08021bc8

0801b4f0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b4f0:	b580      	push	{r7, lr}
 801b4f2:	b088      	sub	sp, #32
 801b4f4:	af00      	add	r7, sp, #0
 801b4f6:	60f8      	str	r0, [r7, #12]
 801b4f8:	60b9      	str	r1, [r7, #8]
 801b4fa:	4611      	mov	r1, r2
 801b4fc:	461a      	mov	r2, r3
 801b4fe:	460b      	mov	r3, r1
 801b500:	71fb      	strb	r3, [r7, #7]
 801b502:	4613      	mov	r3, r2
 801b504:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b506:	2300      	movs	r3, #0
 801b508:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b50a:	68bb      	ldr	r3, [r7, #8]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d106      	bne.n	801b51e <tcp_output_fill_options+0x2e>
 801b510:	4b13      	ldr	r3, [pc, #76]	; (801b560 <tcp_output_fill_options+0x70>)
 801b512:	f240 7256 	movw	r2, #1878	; 0x756
 801b516:	4913      	ldr	r1, [pc, #76]	; (801b564 <tcp_output_fill_options+0x74>)
 801b518:	4813      	ldr	r0, [pc, #76]	; (801b568 <tcp_output_fill_options+0x78>)
 801b51a:	f002 f8ed 	bl	801d6f8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b51e:	68bb      	ldr	r3, [r7, #8]
 801b520:	685b      	ldr	r3, [r3, #4]
 801b522:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b524:	69bb      	ldr	r3, [r7, #24]
 801b526:	3314      	adds	r3, #20
 801b528:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b52a:	69bb      	ldr	r3, [r7, #24]
 801b52c:	f103 0214 	add.w	r2, r3, #20
 801b530:	8bfb      	ldrh	r3, [r7, #30]
 801b532:	009b      	lsls	r3, r3, #2
 801b534:	4619      	mov	r1, r3
 801b536:	79fb      	ldrb	r3, [r7, #7]
 801b538:	009b      	lsls	r3, r3, #2
 801b53a:	f003 0304 	and.w	r3, r3, #4
 801b53e:	440b      	add	r3, r1
 801b540:	4413      	add	r3, r2
 801b542:	697a      	ldr	r2, [r7, #20]
 801b544:	429a      	cmp	r2, r3
 801b546:	d006      	beq.n	801b556 <tcp_output_fill_options+0x66>
 801b548:	4b05      	ldr	r3, [pc, #20]	; (801b560 <tcp_output_fill_options+0x70>)
 801b54a:	f240 7275 	movw	r2, #1909	; 0x775
 801b54e:	4907      	ldr	r1, [pc, #28]	; (801b56c <tcp_output_fill_options+0x7c>)
 801b550:	4805      	ldr	r0, [pc, #20]	; (801b568 <tcp_output_fill_options+0x78>)
 801b552:	f002 f8d1 	bl	801d6f8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b556:	bf00      	nop
 801b558:	3720      	adds	r7, #32
 801b55a:	46bd      	mov	sp, r7
 801b55c:	bd80      	pop	{r7, pc}
 801b55e:	bf00      	nop
 801b560:	08021b58 	.word	0x08021b58
 801b564:	080222a4 	.word	0x080222a4
 801b568:	08021bc8 	.word	0x08021bc8
 801b56c:	0802219c 	.word	0x0802219c

0801b570 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b570:	b580      	push	{r7, lr}
 801b572:	b08a      	sub	sp, #40	; 0x28
 801b574:	af04      	add	r7, sp, #16
 801b576:	60f8      	str	r0, [r7, #12]
 801b578:	60b9      	str	r1, [r7, #8]
 801b57a:	607a      	str	r2, [r7, #4]
 801b57c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b57e:	68bb      	ldr	r3, [r7, #8]
 801b580:	2b00      	cmp	r3, #0
 801b582:	d106      	bne.n	801b592 <tcp_output_control_segment+0x22>
 801b584:	4b1c      	ldr	r3, [pc, #112]	; (801b5f8 <tcp_output_control_segment+0x88>)
 801b586:	f240 7287 	movw	r2, #1927	; 0x787
 801b58a:	491c      	ldr	r1, [pc, #112]	; (801b5fc <tcp_output_control_segment+0x8c>)
 801b58c:	481c      	ldr	r0, [pc, #112]	; (801b600 <tcp_output_control_segment+0x90>)
 801b58e:	f002 f8b3 	bl	801d6f8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b592:	683a      	ldr	r2, [r7, #0]
 801b594:	6879      	ldr	r1, [r7, #4]
 801b596:	68f8      	ldr	r0, [r7, #12]
 801b598:	f7fe ff2e 	bl	801a3f8 <tcp_route>
 801b59c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b59e:	693b      	ldr	r3, [r7, #16]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d102      	bne.n	801b5aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b5a4:	23fc      	movs	r3, #252	; 0xfc
 801b5a6:	75fb      	strb	r3, [r7, #23]
 801b5a8:	e01c      	b.n	801b5e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b5aa:	68fb      	ldr	r3, [r7, #12]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d006      	beq.n	801b5be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	7adb      	ldrb	r3, [r3, #11]
 801b5b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	7a9b      	ldrb	r3, [r3, #10]
 801b5ba:	757b      	strb	r3, [r7, #21]
 801b5bc:	e003      	b.n	801b5c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b5be:	23ff      	movs	r3, #255	; 0xff
 801b5c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b5c2:	2300      	movs	r3, #0
 801b5c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b5c6:	7dba      	ldrb	r2, [r7, #22]
 801b5c8:	693b      	ldr	r3, [r7, #16]
 801b5ca:	9302      	str	r3, [sp, #8]
 801b5cc:	2306      	movs	r3, #6
 801b5ce:	9301      	str	r3, [sp, #4]
 801b5d0:	7d7b      	ldrb	r3, [r7, #21]
 801b5d2:	9300      	str	r3, [sp, #0]
 801b5d4:	4613      	mov	r3, r2
 801b5d6:	683a      	ldr	r2, [r7, #0]
 801b5d8:	6879      	ldr	r1, [r7, #4]
 801b5da:	68b8      	ldr	r0, [r7, #8]
 801b5dc:	f7f8 f9ce 	bl	801397c <ip4_output_if>
 801b5e0:	4603      	mov	r3, r0
 801b5e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b5e4:	68b8      	ldr	r0, [r7, #8]
 801b5e6:	f7fa fcd7 	bl	8015f98 <pbuf_free>
  return err;
 801b5ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b5ee:	4618      	mov	r0, r3
 801b5f0:	3718      	adds	r7, #24
 801b5f2:	46bd      	mov	sp, r7
 801b5f4:	bd80      	pop	{r7, pc}
 801b5f6:	bf00      	nop
 801b5f8:	08021b58 	.word	0x08021b58
 801b5fc:	080222cc 	.word	0x080222cc
 801b600:	08021bc8 	.word	0x08021bc8

0801b604 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b604:	b590      	push	{r4, r7, lr}
 801b606:	b08b      	sub	sp, #44	; 0x2c
 801b608:	af04      	add	r7, sp, #16
 801b60a:	60f8      	str	r0, [r7, #12]
 801b60c:	60b9      	str	r1, [r7, #8]
 801b60e:	607a      	str	r2, [r7, #4]
 801b610:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b612:	683b      	ldr	r3, [r7, #0]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d106      	bne.n	801b626 <tcp_rst+0x22>
 801b618:	4b1f      	ldr	r3, [pc, #124]	; (801b698 <tcp_rst+0x94>)
 801b61a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801b61e:	491f      	ldr	r1, [pc, #124]	; (801b69c <tcp_rst+0x98>)
 801b620:	481f      	ldr	r0, [pc, #124]	; (801b6a0 <tcp_rst+0x9c>)
 801b622:	f002 f869 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d106      	bne.n	801b63a <tcp_rst+0x36>
 801b62c:	4b1a      	ldr	r3, [pc, #104]	; (801b698 <tcp_rst+0x94>)
 801b62e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801b632:	491c      	ldr	r1, [pc, #112]	; (801b6a4 <tcp_rst+0xa0>)
 801b634:	481a      	ldr	r0, [pc, #104]	; (801b6a0 <tcp_rst+0x9c>)
 801b636:	f002 f85f 	bl	801d6f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b63a:	2300      	movs	r3, #0
 801b63c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b63e:	f246 0308 	movw	r3, #24584	; 0x6008
 801b642:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b644:	7dfb      	ldrb	r3, [r7, #23]
 801b646:	b29c      	uxth	r4, r3
 801b648:	68b8      	ldr	r0, [r7, #8]
 801b64a:	f7f4 fe52 	bl	80102f2 <lwip_htonl>
 801b64e:	4602      	mov	r2, r0
 801b650:	8abb      	ldrh	r3, [r7, #20]
 801b652:	9303      	str	r3, [sp, #12]
 801b654:	2314      	movs	r3, #20
 801b656:	9302      	str	r3, [sp, #8]
 801b658:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801b65a:	9301      	str	r3, [sp, #4]
 801b65c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b65e:	9300      	str	r3, [sp, #0]
 801b660:	4613      	mov	r3, r2
 801b662:	2200      	movs	r2, #0
 801b664:	4621      	mov	r1, r4
 801b666:	6878      	ldr	r0, [r7, #4]
 801b668:	f7ff fe90 	bl	801b38c <tcp_output_alloc_header_common>
 801b66c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b66e:	693b      	ldr	r3, [r7, #16]
 801b670:	2b00      	cmp	r3, #0
 801b672:	d00c      	beq.n	801b68e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b674:	7dfb      	ldrb	r3, [r7, #23]
 801b676:	2200      	movs	r2, #0
 801b678:	6939      	ldr	r1, [r7, #16]
 801b67a:	68f8      	ldr	r0, [r7, #12]
 801b67c:	f7ff ff38 	bl	801b4f0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b682:	683a      	ldr	r2, [r7, #0]
 801b684:	6939      	ldr	r1, [r7, #16]
 801b686:	68f8      	ldr	r0, [r7, #12]
 801b688:	f7ff ff72 	bl	801b570 <tcp_output_control_segment>
 801b68c:	e000      	b.n	801b690 <tcp_rst+0x8c>
    return;
 801b68e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b690:	371c      	adds	r7, #28
 801b692:	46bd      	mov	sp, r7
 801b694:	bd90      	pop	{r4, r7, pc}
 801b696:	bf00      	nop
 801b698:	08021b58 	.word	0x08021b58
 801b69c:	080222f8 	.word	0x080222f8
 801b6a0:	08021bc8 	.word	0x08021bc8
 801b6a4:	08022314 	.word	0x08022314

0801b6a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b6a8:	b590      	push	{r4, r7, lr}
 801b6aa:	b087      	sub	sp, #28
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b6b0:	2300      	movs	r3, #0
 801b6b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b6b4:	2300      	movs	r3, #0
 801b6b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d106      	bne.n	801b6cc <tcp_send_empty_ack+0x24>
 801b6be:	4b28      	ldr	r3, [pc, #160]	; (801b760 <tcp_send_empty_ack+0xb8>)
 801b6c0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801b6c4:	4927      	ldr	r1, [pc, #156]	; (801b764 <tcp_send_empty_ack+0xbc>)
 801b6c6:	4828      	ldr	r0, [pc, #160]	; (801b768 <tcp_send_empty_ack+0xc0>)
 801b6c8:	f002 f816 	bl	801d6f8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b6cc:	7dfb      	ldrb	r3, [r7, #23]
 801b6ce:	009b      	lsls	r3, r3, #2
 801b6d0:	b2db      	uxtb	r3, r3
 801b6d2:	f003 0304 	and.w	r3, r3, #4
 801b6d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b6d8:	7d7b      	ldrb	r3, [r7, #21]
 801b6da:	b29c      	uxth	r4, r3
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b6e0:	4618      	mov	r0, r3
 801b6e2:	f7f4 fe06 	bl	80102f2 <lwip_htonl>
 801b6e6:	4603      	mov	r3, r0
 801b6e8:	2200      	movs	r2, #0
 801b6ea:	4621      	mov	r1, r4
 801b6ec:	6878      	ldr	r0, [r7, #4]
 801b6ee:	f7ff fec1 	bl	801b474 <tcp_output_alloc_header>
 801b6f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b6f4:	693b      	ldr	r3, [r7, #16]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d109      	bne.n	801b70e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	8b5b      	ldrh	r3, [r3, #26]
 801b6fe:	f043 0303 	orr.w	r3, r3, #3
 801b702:	b29a      	uxth	r2, r3
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b708:	f06f 0301 	mvn.w	r3, #1
 801b70c:	e023      	b.n	801b756 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b70e:	7dbb      	ldrb	r3, [r7, #22]
 801b710:	7dfa      	ldrb	r2, [r7, #23]
 801b712:	6939      	ldr	r1, [r7, #16]
 801b714:	6878      	ldr	r0, [r7, #4]
 801b716:	f7ff feeb 	bl	801b4f0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b71a:	687a      	ldr	r2, [r7, #4]
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	3304      	adds	r3, #4
 801b720:	6939      	ldr	r1, [r7, #16]
 801b722:	6878      	ldr	r0, [r7, #4]
 801b724:	f7ff ff24 	bl	801b570 <tcp_output_control_segment>
 801b728:	4603      	mov	r3, r0
 801b72a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b72c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b730:	2b00      	cmp	r3, #0
 801b732:	d007      	beq.n	801b744 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	8b5b      	ldrh	r3, [r3, #26]
 801b738:	f043 0303 	orr.w	r3, r3, #3
 801b73c:	b29a      	uxth	r2, r3
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	835a      	strh	r2, [r3, #26]
 801b742:	e006      	b.n	801b752 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	8b5b      	ldrh	r3, [r3, #26]
 801b748:	f023 0303 	bic.w	r3, r3, #3
 801b74c:	b29a      	uxth	r2, r3
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b752:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b756:	4618      	mov	r0, r3
 801b758:	371c      	adds	r7, #28
 801b75a:	46bd      	mov	sp, r7
 801b75c:	bd90      	pop	{r4, r7, pc}
 801b75e:	bf00      	nop
 801b760:	08021b58 	.word	0x08021b58
 801b764:	08022330 	.word	0x08022330
 801b768:	08021bc8 	.word	0x08021bc8

0801b76c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b76c:	b590      	push	{r4, r7, lr}
 801b76e:	b087      	sub	sp, #28
 801b770:	af00      	add	r7, sp, #0
 801b772:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b774:	2300      	movs	r3, #0
 801b776:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d106      	bne.n	801b78c <tcp_keepalive+0x20>
 801b77e:	4b18      	ldr	r3, [pc, #96]	; (801b7e0 <tcp_keepalive+0x74>)
 801b780:	f640 0224 	movw	r2, #2084	; 0x824
 801b784:	4917      	ldr	r1, [pc, #92]	; (801b7e4 <tcp_keepalive+0x78>)
 801b786:	4818      	ldr	r0, [pc, #96]	; (801b7e8 <tcp_keepalive+0x7c>)
 801b788:	f001 ffb6 	bl	801d6f8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b78c:	7dfb      	ldrb	r3, [r7, #23]
 801b78e:	b29c      	uxth	r4, r3
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b794:	3b01      	subs	r3, #1
 801b796:	4618      	mov	r0, r3
 801b798:	f7f4 fdab 	bl	80102f2 <lwip_htonl>
 801b79c:	4603      	mov	r3, r0
 801b79e:	2200      	movs	r2, #0
 801b7a0:	4621      	mov	r1, r4
 801b7a2:	6878      	ldr	r0, [r7, #4]
 801b7a4:	f7ff fe66 	bl	801b474 <tcp_output_alloc_header>
 801b7a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b7aa:	693b      	ldr	r3, [r7, #16]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d102      	bne.n	801b7b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b7b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b7b4:	e010      	b.n	801b7d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b7b6:	7dfb      	ldrb	r3, [r7, #23]
 801b7b8:	2200      	movs	r2, #0
 801b7ba:	6939      	ldr	r1, [r7, #16]
 801b7bc:	6878      	ldr	r0, [r7, #4]
 801b7be:	f7ff fe97 	bl	801b4f0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b7c2:	687a      	ldr	r2, [r7, #4]
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	3304      	adds	r3, #4
 801b7c8:	6939      	ldr	r1, [r7, #16]
 801b7ca:	6878      	ldr	r0, [r7, #4]
 801b7cc:	f7ff fed0 	bl	801b570 <tcp_output_control_segment>
 801b7d0:	4603      	mov	r3, r0
 801b7d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b7d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b7d8:	4618      	mov	r0, r3
 801b7da:	371c      	adds	r7, #28
 801b7dc:	46bd      	mov	sp, r7
 801b7de:	bd90      	pop	{r4, r7, pc}
 801b7e0:	08021b58 	.word	0x08021b58
 801b7e4:	08022350 	.word	0x08022350
 801b7e8:	08021bc8 	.word	0x08021bc8

0801b7ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b7ec:	b590      	push	{r4, r7, lr}
 801b7ee:	b08b      	sub	sp, #44	; 0x2c
 801b7f0:	af00      	add	r7, sp, #0
 801b7f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d106      	bne.n	801b80e <tcp_zero_window_probe+0x22>
 801b800:	4b4c      	ldr	r3, [pc, #304]	; (801b934 <tcp_zero_window_probe+0x148>)
 801b802:	f640 024f 	movw	r2, #2127	; 0x84f
 801b806:	494c      	ldr	r1, [pc, #304]	; (801b938 <tcp_zero_window_probe+0x14c>)
 801b808:	484c      	ldr	r0, [pc, #304]	; (801b93c <tcp_zero_window_probe+0x150>)
 801b80a:	f001 ff75 	bl	801d6f8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b812:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801b814:	6a3b      	ldr	r3, [r7, #32]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d101      	bne.n	801b81e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b81a:	2300      	movs	r3, #0
 801b81c:	e086      	b.n	801b92c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b824:	2bff      	cmp	r3, #255	; 0xff
 801b826:	d007      	beq.n	801b838 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b82e:	3301      	adds	r3, #1
 801b830:	b2da      	uxtb	r2, r3
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b838:	6a3b      	ldr	r3, [r7, #32]
 801b83a:	68db      	ldr	r3, [r3, #12]
 801b83c:	899b      	ldrh	r3, [r3, #12]
 801b83e:	b29b      	uxth	r3, r3
 801b840:	4618      	mov	r0, r3
 801b842:	f7f4 fd41 	bl	80102c8 <lwip_htons>
 801b846:	4603      	mov	r3, r0
 801b848:	b2db      	uxtb	r3, r3
 801b84a:	f003 0301 	and.w	r3, r3, #1
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d005      	beq.n	801b85e <tcp_zero_window_probe+0x72>
 801b852:	6a3b      	ldr	r3, [r7, #32]
 801b854:	891b      	ldrh	r3, [r3, #8]
 801b856:	2b00      	cmp	r3, #0
 801b858:	d101      	bne.n	801b85e <tcp_zero_window_probe+0x72>
 801b85a:	2301      	movs	r3, #1
 801b85c:	e000      	b.n	801b860 <tcp_zero_window_probe+0x74>
 801b85e:	2300      	movs	r3, #0
 801b860:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b862:	7ffb      	ldrb	r3, [r7, #31]
 801b864:	2b00      	cmp	r3, #0
 801b866:	bf0c      	ite	eq
 801b868:	2301      	moveq	r3, #1
 801b86a:	2300      	movne	r3, #0
 801b86c:	b2db      	uxtb	r3, r3
 801b86e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b874:	b299      	uxth	r1, r3
 801b876:	6a3b      	ldr	r3, [r7, #32]
 801b878:	68db      	ldr	r3, [r3, #12]
 801b87a:	685b      	ldr	r3, [r3, #4]
 801b87c:	8bba      	ldrh	r2, [r7, #28]
 801b87e:	6878      	ldr	r0, [r7, #4]
 801b880:	f7ff fdf8 	bl	801b474 <tcp_output_alloc_header>
 801b884:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b886:	69bb      	ldr	r3, [r7, #24]
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d102      	bne.n	801b892 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b88c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b890:	e04c      	b.n	801b92c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b892:	69bb      	ldr	r3, [r7, #24]
 801b894:	685b      	ldr	r3, [r3, #4]
 801b896:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b898:	7ffb      	ldrb	r3, [r7, #31]
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d011      	beq.n	801b8c2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b89e:	697b      	ldr	r3, [r7, #20]
 801b8a0:	899b      	ldrh	r3, [r3, #12]
 801b8a2:	b29b      	uxth	r3, r3
 801b8a4:	b21b      	sxth	r3, r3
 801b8a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b8aa:	b21c      	sxth	r4, r3
 801b8ac:	2011      	movs	r0, #17
 801b8ae:	f7f4 fd0b 	bl	80102c8 <lwip_htons>
 801b8b2:	4603      	mov	r3, r0
 801b8b4:	b21b      	sxth	r3, r3
 801b8b6:	4323      	orrs	r3, r4
 801b8b8:	b21b      	sxth	r3, r3
 801b8ba:	b29a      	uxth	r2, r3
 801b8bc:	697b      	ldr	r3, [r7, #20]
 801b8be:	819a      	strh	r2, [r3, #12]
 801b8c0:	e010      	b.n	801b8e4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b8c2:	69bb      	ldr	r3, [r7, #24]
 801b8c4:	685b      	ldr	r3, [r3, #4]
 801b8c6:	3314      	adds	r3, #20
 801b8c8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b8ca:	6a3b      	ldr	r3, [r7, #32]
 801b8cc:	6858      	ldr	r0, [r3, #4]
 801b8ce:	6a3b      	ldr	r3, [r7, #32]
 801b8d0:	685b      	ldr	r3, [r3, #4]
 801b8d2:	891a      	ldrh	r2, [r3, #8]
 801b8d4:	6a3b      	ldr	r3, [r7, #32]
 801b8d6:	891b      	ldrh	r3, [r3, #8]
 801b8d8:	1ad3      	subs	r3, r2, r3
 801b8da:	b29b      	uxth	r3, r3
 801b8dc:	2201      	movs	r2, #1
 801b8de:	6939      	ldr	r1, [r7, #16]
 801b8e0:	f7fa fd60 	bl	80163a4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b8e4:	6a3b      	ldr	r3, [r7, #32]
 801b8e6:	68db      	ldr	r3, [r3, #12]
 801b8e8:	685b      	ldr	r3, [r3, #4]
 801b8ea:	4618      	mov	r0, r3
 801b8ec:	f7f4 fd01 	bl	80102f2 <lwip_htonl>
 801b8f0:	4603      	mov	r3, r0
 801b8f2:	3301      	adds	r3, #1
 801b8f4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b8fa:	68fb      	ldr	r3, [r7, #12]
 801b8fc:	1ad3      	subs	r3, r2, r3
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	da02      	bge.n	801b908 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	68fa      	ldr	r2, [r7, #12]
 801b906:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b90c:	2200      	movs	r2, #0
 801b90e:	69b9      	ldr	r1, [r7, #24]
 801b910:	6878      	ldr	r0, [r7, #4]
 801b912:	f7ff fded 	bl	801b4f0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b916:	687a      	ldr	r2, [r7, #4]
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	3304      	adds	r3, #4
 801b91c:	69b9      	ldr	r1, [r7, #24]
 801b91e:	6878      	ldr	r0, [r7, #4]
 801b920:	f7ff fe26 	bl	801b570 <tcp_output_control_segment>
 801b924:	4603      	mov	r3, r0
 801b926:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b928:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b92c:	4618      	mov	r0, r3
 801b92e:	372c      	adds	r7, #44	; 0x2c
 801b930:	46bd      	mov	sp, r7
 801b932:	bd90      	pop	{r4, r7, pc}
 801b934:	08021b58 	.word	0x08021b58
 801b938:	0802236c 	.word	0x0802236c
 801b93c:	08021bc8 	.word	0x08021bc8

0801b940 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801b940:	b580      	push	{r7, lr}
 801b942:	b084      	sub	sp, #16
 801b944:	af00      	add	r7, sp, #0
 801b946:	6078      	str	r0, [r7, #4]
 801b948:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801b94a:	f000 fafb 	bl	801bf44 <sys_timeouts_sleeptime>
 801b94e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b956:	d10b      	bne.n	801b970 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801b958:	4813      	ldr	r0, [pc, #76]	; (801b9a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801b95a:	f7fa fe6e 	bl	801663a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801b95e:	2200      	movs	r2, #0
 801b960:	6839      	ldr	r1, [r7, #0]
 801b962:	6878      	ldr	r0, [r7, #4]
 801b964:	f7fa fdf6 	bl	8016554 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801b968:	480f      	ldr	r0, [pc, #60]	; (801b9a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801b96a:	f7fa fe57 	bl	801661c <sys_mutex_lock>
    return;
 801b96e:	e018      	b.n	801b9a2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801b970:	68fb      	ldr	r3, [r7, #12]
 801b972:	2b00      	cmp	r3, #0
 801b974:	d102      	bne.n	801b97c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801b976:	f000 faab 	bl	801bed0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801b97a:	e7e6      	b.n	801b94a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801b97c:	480a      	ldr	r0, [pc, #40]	; (801b9a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801b97e:	f7fa fe5c 	bl	801663a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801b982:	68fa      	ldr	r2, [r7, #12]
 801b984:	6839      	ldr	r1, [r7, #0]
 801b986:	6878      	ldr	r0, [r7, #4]
 801b988:	f7fa fde4 	bl	8016554 <sys_arch_mbox_fetch>
 801b98c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801b98e:	4806      	ldr	r0, [pc, #24]	; (801b9a8 <tcpip_timeouts_mbox_fetch+0x68>)
 801b990:	f7fa fe44 	bl	801661c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801b994:	68bb      	ldr	r3, [r7, #8]
 801b996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b99a:	d102      	bne.n	801b9a2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801b99c:	f000 fa98 	bl	801bed0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801b9a0:	e7d3      	b.n	801b94a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801b9a2:	3710      	adds	r7, #16
 801b9a4:	46bd      	mov	sp, r7
 801b9a6:	bd80      	pop	{r7, pc}
 801b9a8:	2000ba7c 	.word	0x2000ba7c

0801b9ac <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801b9ac:	b580      	push	{r7, lr}
 801b9ae:	b084      	sub	sp, #16
 801b9b0:	af00      	add	r7, sp, #0
 801b9b2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801b9b4:	4810      	ldr	r0, [pc, #64]	; (801b9f8 <tcpip_thread+0x4c>)
 801b9b6:	f7fa fe31 	bl	801661c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801b9ba:	4b10      	ldr	r3, [pc, #64]	; (801b9fc <tcpip_thread+0x50>)
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d005      	beq.n	801b9ce <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801b9c2:	4b0e      	ldr	r3, [pc, #56]	; (801b9fc <tcpip_thread+0x50>)
 801b9c4:	681b      	ldr	r3, [r3, #0]
 801b9c6:	4a0e      	ldr	r2, [pc, #56]	; (801ba00 <tcpip_thread+0x54>)
 801b9c8:	6812      	ldr	r2, [r2, #0]
 801b9ca:	4610      	mov	r0, r2
 801b9cc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801b9ce:	f107 030c 	add.w	r3, r7, #12
 801b9d2:	4619      	mov	r1, r3
 801b9d4:	480b      	ldr	r0, [pc, #44]	; (801ba04 <tcpip_thread+0x58>)
 801b9d6:	f7ff ffb3 	bl	801b940 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d106      	bne.n	801b9ee <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801b9e0:	4b09      	ldr	r3, [pc, #36]	; (801ba08 <tcpip_thread+0x5c>)
 801b9e2:	2291      	movs	r2, #145	; 0x91
 801b9e4:	4909      	ldr	r1, [pc, #36]	; (801ba0c <tcpip_thread+0x60>)
 801b9e6:	480a      	ldr	r0, [pc, #40]	; (801ba10 <tcpip_thread+0x64>)
 801b9e8:	f001 fe86 	bl	801d6f8 <iprintf>
      continue;
 801b9ec:	e003      	b.n	801b9f6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801b9ee:	68fb      	ldr	r3, [r7, #12]
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	f000 f80f 	bl	801ba14 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801b9f6:	e7ea      	b.n	801b9ce <tcpip_thread+0x22>
 801b9f8:	2000ba7c 	.word	0x2000ba7c
 801b9fc:	20007750 	.word	0x20007750
 801ba00:	20007754 	.word	0x20007754
 801ba04:	20007758 	.word	0x20007758
 801ba08:	08022390 	.word	0x08022390
 801ba0c:	080223e0 	.word	0x080223e0
 801ba10:	08022400 	.word	0x08022400

0801ba14 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801ba14:	b580      	push	{r7, lr}
 801ba16:	b082      	sub	sp, #8
 801ba18:	af00      	add	r7, sp, #0
 801ba1a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	781b      	ldrb	r3, [r3, #0]
 801ba20:	2b01      	cmp	r3, #1
 801ba22:	d018      	beq.n	801ba56 <tcpip_thread_handle_msg+0x42>
 801ba24:	2b02      	cmp	r3, #2
 801ba26:	d021      	beq.n	801ba6c <tcpip_thread_handle_msg+0x58>
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d126      	bne.n	801ba7a <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	68db      	ldr	r3, [r3, #12]
 801ba30:	687a      	ldr	r2, [r7, #4]
 801ba32:	6850      	ldr	r0, [r2, #4]
 801ba34:	687a      	ldr	r2, [r7, #4]
 801ba36:	6892      	ldr	r2, [r2, #8]
 801ba38:	4611      	mov	r1, r2
 801ba3a:	4798      	blx	r3
 801ba3c:	4603      	mov	r3, r0
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d004      	beq.n	801ba4c <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	685b      	ldr	r3, [r3, #4]
 801ba46:	4618      	mov	r0, r3
 801ba48:	f7fa faa6 	bl	8015f98 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801ba4c:	6879      	ldr	r1, [r7, #4]
 801ba4e:	2009      	movs	r0, #9
 801ba50:	f7f9 fbf6 	bl	8015240 <memp_free>
      break;
 801ba54:	e018      	b.n	801ba88 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	685b      	ldr	r3, [r3, #4]
 801ba5a:	687a      	ldr	r2, [r7, #4]
 801ba5c:	6892      	ldr	r2, [r2, #8]
 801ba5e:	4610      	mov	r0, r2
 801ba60:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801ba62:	6879      	ldr	r1, [r7, #4]
 801ba64:	2008      	movs	r0, #8
 801ba66:	f7f9 fbeb 	bl	8015240 <memp_free>
      break;
 801ba6a:	e00d      	b.n	801ba88 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	685b      	ldr	r3, [r3, #4]
 801ba70:	687a      	ldr	r2, [r7, #4]
 801ba72:	6892      	ldr	r2, [r2, #8]
 801ba74:	4610      	mov	r0, r2
 801ba76:	4798      	blx	r3
      break;
 801ba78:	e006      	b.n	801ba88 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801ba7a:	4b05      	ldr	r3, [pc, #20]	; (801ba90 <tcpip_thread_handle_msg+0x7c>)
 801ba7c:	22cf      	movs	r2, #207	; 0xcf
 801ba7e:	4905      	ldr	r1, [pc, #20]	; (801ba94 <tcpip_thread_handle_msg+0x80>)
 801ba80:	4805      	ldr	r0, [pc, #20]	; (801ba98 <tcpip_thread_handle_msg+0x84>)
 801ba82:	f001 fe39 	bl	801d6f8 <iprintf>
      break;
 801ba86:	bf00      	nop
  }
}
 801ba88:	bf00      	nop
 801ba8a:	3708      	adds	r7, #8
 801ba8c:	46bd      	mov	sp, r7
 801ba8e:	bd80      	pop	{r7, pc}
 801ba90:	08022390 	.word	0x08022390
 801ba94:	080223e0 	.word	0x080223e0
 801ba98:	08022400 	.word	0x08022400

0801ba9c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801ba9c:	b580      	push	{r7, lr}
 801ba9e:	b086      	sub	sp, #24
 801baa0:	af00      	add	r7, sp, #0
 801baa2:	60f8      	str	r0, [r7, #12]
 801baa4:	60b9      	str	r1, [r7, #8]
 801baa6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801baa8:	481a      	ldr	r0, [pc, #104]	; (801bb14 <tcpip_inpkt+0x78>)
 801baaa:	f7fa fd84 	bl	80165b6 <sys_mbox_valid>
 801baae:	4603      	mov	r3, r0
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d105      	bne.n	801bac0 <tcpip_inpkt+0x24>
 801bab4:	4b18      	ldr	r3, [pc, #96]	; (801bb18 <tcpip_inpkt+0x7c>)
 801bab6:	22fc      	movs	r2, #252	; 0xfc
 801bab8:	4918      	ldr	r1, [pc, #96]	; (801bb1c <tcpip_inpkt+0x80>)
 801baba:	4819      	ldr	r0, [pc, #100]	; (801bb20 <tcpip_inpkt+0x84>)
 801babc:	f001 fe1c 	bl	801d6f8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801bac0:	2009      	movs	r0, #9
 801bac2:	f7f9 fb47 	bl	8015154 <memp_malloc>
 801bac6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801bac8:	697b      	ldr	r3, [r7, #20]
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d102      	bne.n	801bad4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801bace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bad2:	e01a      	b.n	801bb0a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801bad4:	697b      	ldr	r3, [r7, #20]
 801bad6:	2200      	movs	r2, #0
 801bad8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801bada:	697b      	ldr	r3, [r7, #20]
 801badc:	68fa      	ldr	r2, [r7, #12]
 801bade:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801bae0:	697b      	ldr	r3, [r7, #20]
 801bae2:	68ba      	ldr	r2, [r7, #8]
 801bae4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801bae6:	697b      	ldr	r3, [r7, #20]
 801bae8:	687a      	ldr	r2, [r7, #4]
 801baea:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801baec:	6979      	ldr	r1, [r7, #20]
 801baee:	4809      	ldr	r0, [pc, #36]	; (801bb14 <tcpip_inpkt+0x78>)
 801baf0:	f7fa fd16 	bl	8016520 <sys_mbox_trypost>
 801baf4:	4603      	mov	r3, r0
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d006      	beq.n	801bb08 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801bafa:	6979      	ldr	r1, [r7, #20]
 801bafc:	2009      	movs	r0, #9
 801bafe:	f7f9 fb9f 	bl	8015240 <memp_free>
    return ERR_MEM;
 801bb02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb06:	e000      	b.n	801bb0a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801bb08:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801bb0a:	4618      	mov	r0, r3
 801bb0c:	3718      	adds	r7, #24
 801bb0e:	46bd      	mov	sp, r7
 801bb10:	bd80      	pop	{r7, pc}
 801bb12:	bf00      	nop
 801bb14:	20007758 	.word	0x20007758
 801bb18:	08022390 	.word	0x08022390
 801bb1c:	08022428 	.word	0x08022428
 801bb20:	08022400 	.word	0x08022400

0801bb24 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801bb24:	b580      	push	{r7, lr}
 801bb26:	b082      	sub	sp, #8
 801bb28:	af00      	add	r7, sp, #0
 801bb2a:	6078      	str	r0, [r7, #4]
 801bb2c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801bb2e:	683b      	ldr	r3, [r7, #0]
 801bb30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bb34:	f003 0318 	and.w	r3, r3, #24
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d006      	beq.n	801bb4a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801bb3c:	4a08      	ldr	r2, [pc, #32]	; (801bb60 <tcpip_input+0x3c>)
 801bb3e:	6839      	ldr	r1, [r7, #0]
 801bb40:	6878      	ldr	r0, [r7, #4]
 801bb42:	f7ff ffab 	bl	801ba9c <tcpip_inpkt>
 801bb46:	4603      	mov	r3, r0
 801bb48:	e005      	b.n	801bb56 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801bb4a:	4a06      	ldr	r2, [pc, #24]	; (801bb64 <tcpip_input+0x40>)
 801bb4c:	6839      	ldr	r1, [r7, #0]
 801bb4e:	6878      	ldr	r0, [r7, #4]
 801bb50:	f7ff ffa4 	bl	801ba9c <tcpip_inpkt>
 801bb54:	4603      	mov	r3, r0
}
 801bb56:	4618      	mov	r0, r3
 801bb58:	3708      	adds	r7, #8
 801bb5a:	46bd      	mov	sp, r7
 801bb5c:	bd80      	pop	{r7, pc}
 801bb5e:	bf00      	nop
 801bb60:	08012f0d 	.word	0x08012f0d
 801bb64:	080136fd 	.word	0x080136fd

0801bb68 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801bb68:	b580      	push	{r7, lr}
 801bb6a:	b084      	sub	sp, #16
 801bb6c:	af00      	add	r7, sp, #0
 801bb6e:	6078      	str	r0, [r7, #4]
 801bb70:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801bb72:	4819      	ldr	r0, [pc, #100]	; (801bbd8 <tcpip_try_callback+0x70>)
 801bb74:	f7fa fd1f 	bl	80165b6 <sys_mbox_valid>
 801bb78:	4603      	mov	r3, r0
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	d106      	bne.n	801bb8c <tcpip_try_callback+0x24>
 801bb7e:	4b17      	ldr	r3, [pc, #92]	; (801bbdc <tcpip_try_callback+0x74>)
 801bb80:	f240 125d 	movw	r2, #349	; 0x15d
 801bb84:	4916      	ldr	r1, [pc, #88]	; (801bbe0 <tcpip_try_callback+0x78>)
 801bb86:	4817      	ldr	r0, [pc, #92]	; (801bbe4 <tcpip_try_callback+0x7c>)
 801bb88:	f001 fdb6 	bl	801d6f8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801bb8c:	2008      	movs	r0, #8
 801bb8e:	f7f9 fae1 	bl	8015154 <memp_malloc>
 801bb92:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801bb94:	68fb      	ldr	r3, [r7, #12]
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d102      	bne.n	801bba0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801bb9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb9e:	e017      	b.n	801bbd0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801bba0:	68fb      	ldr	r3, [r7, #12]
 801bba2:	2201      	movs	r2, #1
 801bba4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	687a      	ldr	r2, [r7, #4]
 801bbaa:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	683a      	ldr	r2, [r7, #0]
 801bbb0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801bbb2:	68f9      	ldr	r1, [r7, #12]
 801bbb4:	4808      	ldr	r0, [pc, #32]	; (801bbd8 <tcpip_try_callback+0x70>)
 801bbb6:	f7fa fcb3 	bl	8016520 <sys_mbox_trypost>
 801bbba:	4603      	mov	r3, r0
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d006      	beq.n	801bbce <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801bbc0:	68f9      	ldr	r1, [r7, #12]
 801bbc2:	2008      	movs	r0, #8
 801bbc4:	f7f9 fb3c 	bl	8015240 <memp_free>
    return ERR_MEM;
 801bbc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bbcc:	e000      	b.n	801bbd0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801bbce:	2300      	movs	r3, #0
}
 801bbd0:	4618      	mov	r0, r3
 801bbd2:	3710      	adds	r7, #16
 801bbd4:	46bd      	mov	sp, r7
 801bbd6:	bd80      	pop	{r7, pc}
 801bbd8:	20007758 	.word	0x20007758
 801bbdc:	08022390 	.word	0x08022390
 801bbe0:	08022428 	.word	0x08022428
 801bbe4:	08022400 	.word	0x08022400

0801bbe8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801bbe8:	b580      	push	{r7, lr}
 801bbea:	b084      	sub	sp, #16
 801bbec:	af02      	add	r7, sp, #8
 801bbee:	6078      	str	r0, [r7, #4]
 801bbf0:	6039      	str	r1, [r7, #0]
  lwip_init();
 801bbf2:	f7f7 fcd1 	bl	8013598 <lwip_init>

  tcpip_init_done = initfunc;
 801bbf6:	4a17      	ldr	r2, [pc, #92]	; (801bc54 <tcpip_init+0x6c>)
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801bbfc:	4a16      	ldr	r2, [pc, #88]	; (801bc58 <tcpip_init+0x70>)
 801bbfe:	683b      	ldr	r3, [r7, #0]
 801bc00:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801bc02:	2106      	movs	r1, #6
 801bc04:	4815      	ldr	r0, [pc, #84]	; (801bc5c <tcpip_init+0x74>)
 801bc06:	f7fa fc71 	bl	80164ec <sys_mbox_new>
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d006      	beq.n	801bc1e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801bc10:	4b13      	ldr	r3, [pc, #76]	; (801bc60 <tcpip_init+0x78>)
 801bc12:	f240 2261 	movw	r2, #609	; 0x261
 801bc16:	4913      	ldr	r1, [pc, #76]	; (801bc64 <tcpip_init+0x7c>)
 801bc18:	4813      	ldr	r0, [pc, #76]	; (801bc68 <tcpip_init+0x80>)
 801bc1a:	f001 fd6d 	bl	801d6f8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801bc1e:	4813      	ldr	r0, [pc, #76]	; (801bc6c <tcpip_init+0x84>)
 801bc20:	f7fa fce6 	bl	80165f0 <sys_mutex_new>
 801bc24:	4603      	mov	r3, r0
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d006      	beq.n	801bc38 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801bc2a:	4b0d      	ldr	r3, [pc, #52]	; (801bc60 <tcpip_init+0x78>)
 801bc2c:	f240 2265 	movw	r2, #613	; 0x265
 801bc30:	490f      	ldr	r1, [pc, #60]	; (801bc70 <tcpip_init+0x88>)
 801bc32:	480d      	ldr	r0, [pc, #52]	; (801bc68 <tcpip_init+0x80>)
 801bc34:	f001 fd60 	bl	801d6f8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801bc38:	2318      	movs	r3, #24
 801bc3a:	9300      	str	r3, [sp, #0]
 801bc3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc40:	2200      	movs	r2, #0
 801bc42:	490c      	ldr	r1, [pc, #48]	; (801bc74 <tcpip_init+0x8c>)
 801bc44:	480c      	ldr	r0, [pc, #48]	; (801bc78 <tcpip_init+0x90>)
 801bc46:	f7fa fd05 	bl	8016654 <sys_thread_new>
}
 801bc4a:	bf00      	nop
 801bc4c:	3708      	adds	r7, #8
 801bc4e:	46bd      	mov	sp, r7
 801bc50:	bd80      	pop	{r7, pc}
 801bc52:	bf00      	nop
 801bc54:	20007750 	.word	0x20007750
 801bc58:	20007754 	.word	0x20007754
 801bc5c:	20007758 	.word	0x20007758
 801bc60:	08022390 	.word	0x08022390
 801bc64:	08022438 	.word	0x08022438
 801bc68:	08022400 	.word	0x08022400
 801bc6c:	2000ba7c 	.word	0x2000ba7c
 801bc70:	0802245c 	.word	0x0802245c
 801bc74:	0801b9ad 	.word	0x0801b9ad
 801bc78:	08022480 	.word	0x08022480

0801bc7c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801bc7c:	b580      	push	{r7, lr}
 801bc7e:	b082      	sub	sp, #8
 801bc80:	af00      	add	r7, sp, #0
 801bc82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801bc84:	f7fa fd6e 	bl	8016764 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801bc88:	4b0a      	ldr	r3, [pc, #40]	; (801bcb4 <tcpip_tcp_timer+0x38>)
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d103      	bne.n	801bc98 <tcpip_tcp_timer+0x1c>
 801bc90:	4b09      	ldr	r3, [pc, #36]	; (801bcb8 <tcpip_tcp_timer+0x3c>)
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	d005      	beq.n	801bca4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bc98:	2200      	movs	r2, #0
 801bc9a:	4908      	ldr	r1, [pc, #32]	; (801bcbc <tcpip_tcp_timer+0x40>)
 801bc9c:	20fa      	movs	r0, #250	; 0xfa
 801bc9e:	f000 f8f1 	bl	801be84 <sys_timeout>
 801bca2:	e002      	b.n	801bcaa <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801bca4:	4b06      	ldr	r3, [pc, #24]	; (801bcc0 <tcpip_tcp_timer+0x44>)
 801bca6:	2200      	movs	r2, #0
 801bca8:	601a      	str	r2, [r3, #0]
  }
}
 801bcaa:	bf00      	nop
 801bcac:	3708      	adds	r7, #8
 801bcae:	46bd      	mov	sp, r7
 801bcb0:	bd80      	pop	{r7, pc}
 801bcb2:	bf00      	nop
 801bcb4:	2000ba64 	.word	0x2000ba64
 801bcb8:	2000ba74 	.word	0x2000ba74
 801bcbc:	0801bc7d 	.word	0x0801bc7d
 801bcc0:	20007764 	.word	0x20007764

0801bcc4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801bcc4:	b580      	push	{r7, lr}
 801bcc6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801bcc8:	4b0a      	ldr	r3, [pc, #40]	; (801bcf4 <tcp_timer_needed+0x30>)
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d10f      	bne.n	801bcf0 <tcp_timer_needed+0x2c>
 801bcd0:	4b09      	ldr	r3, [pc, #36]	; (801bcf8 <tcp_timer_needed+0x34>)
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d103      	bne.n	801bce0 <tcp_timer_needed+0x1c>
 801bcd8:	4b08      	ldr	r3, [pc, #32]	; (801bcfc <tcp_timer_needed+0x38>)
 801bcda:	681b      	ldr	r3, [r3, #0]
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d007      	beq.n	801bcf0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801bce0:	4b04      	ldr	r3, [pc, #16]	; (801bcf4 <tcp_timer_needed+0x30>)
 801bce2:	2201      	movs	r2, #1
 801bce4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bce6:	2200      	movs	r2, #0
 801bce8:	4905      	ldr	r1, [pc, #20]	; (801bd00 <tcp_timer_needed+0x3c>)
 801bcea:	20fa      	movs	r0, #250	; 0xfa
 801bcec:	f000 f8ca 	bl	801be84 <sys_timeout>
  }
}
 801bcf0:	bf00      	nop
 801bcf2:	bd80      	pop	{r7, pc}
 801bcf4:	20007764 	.word	0x20007764
 801bcf8:	2000ba64 	.word	0x2000ba64
 801bcfc:	2000ba74 	.word	0x2000ba74
 801bd00:	0801bc7d 	.word	0x0801bc7d

0801bd04 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b086      	sub	sp, #24
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	60f8      	str	r0, [r7, #12]
 801bd0c:	60b9      	str	r1, [r7, #8]
 801bd0e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801bd10:	200a      	movs	r0, #10
 801bd12:	f7f9 fa1f 	bl	8015154 <memp_malloc>
 801bd16:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801bd18:	693b      	ldr	r3, [r7, #16]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d109      	bne.n	801bd32 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801bd1e:	693b      	ldr	r3, [r7, #16]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d151      	bne.n	801bdc8 <sys_timeout_abs+0xc4>
 801bd24:	4b2a      	ldr	r3, [pc, #168]	; (801bdd0 <sys_timeout_abs+0xcc>)
 801bd26:	22be      	movs	r2, #190	; 0xbe
 801bd28:	492a      	ldr	r1, [pc, #168]	; (801bdd4 <sys_timeout_abs+0xd0>)
 801bd2a:	482b      	ldr	r0, [pc, #172]	; (801bdd8 <sys_timeout_abs+0xd4>)
 801bd2c:	f001 fce4 	bl	801d6f8 <iprintf>
    return;
 801bd30:	e04a      	b.n	801bdc8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801bd32:	693b      	ldr	r3, [r7, #16]
 801bd34:	2200      	movs	r2, #0
 801bd36:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801bd38:	693b      	ldr	r3, [r7, #16]
 801bd3a:	68ba      	ldr	r2, [r7, #8]
 801bd3c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801bd3e:	693b      	ldr	r3, [r7, #16]
 801bd40:	687a      	ldr	r2, [r7, #4]
 801bd42:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801bd44:	693b      	ldr	r3, [r7, #16]
 801bd46:	68fa      	ldr	r2, [r7, #12]
 801bd48:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801bd4a:	4b24      	ldr	r3, [pc, #144]	; (801bddc <sys_timeout_abs+0xd8>)
 801bd4c:	681b      	ldr	r3, [r3, #0]
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d103      	bne.n	801bd5a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801bd52:	4a22      	ldr	r2, [pc, #136]	; (801bddc <sys_timeout_abs+0xd8>)
 801bd54:	693b      	ldr	r3, [r7, #16]
 801bd56:	6013      	str	r3, [r2, #0]
    return;
 801bd58:	e037      	b.n	801bdca <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801bd5a:	693b      	ldr	r3, [r7, #16]
 801bd5c:	685a      	ldr	r2, [r3, #4]
 801bd5e:	4b1f      	ldr	r3, [pc, #124]	; (801bddc <sys_timeout_abs+0xd8>)
 801bd60:	681b      	ldr	r3, [r3, #0]
 801bd62:	685b      	ldr	r3, [r3, #4]
 801bd64:	1ad3      	subs	r3, r2, r3
 801bd66:	0fdb      	lsrs	r3, r3, #31
 801bd68:	f003 0301 	and.w	r3, r3, #1
 801bd6c:	b2db      	uxtb	r3, r3
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d007      	beq.n	801bd82 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801bd72:	4b1a      	ldr	r3, [pc, #104]	; (801bddc <sys_timeout_abs+0xd8>)
 801bd74:	681a      	ldr	r2, [r3, #0]
 801bd76:	693b      	ldr	r3, [r7, #16]
 801bd78:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801bd7a:	4a18      	ldr	r2, [pc, #96]	; (801bddc <sys_timeout_abs+0xd8>)
 801bd7c:	693b      	ldr	r3, [r7, #16]
 801bd7e:	6013      	str	r3, [r2, #0]
 801bd80:	e023      	b.n	801bdca <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801bd82:	4b16      	ldr	r3, [pc, #88]	; (801bddc <sys_timeout_abs+0xd8>)
 801bd84:	681b      	ldr	r3, [r3, #0]
 801bd86:	617b      	str	r3, [r7, #20]
 801bd88:	e01a      	b.n	801bdc0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801bd8a:	697b      	ldr	r3, [r7, #20]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d00b      	beq.n	801bdaa <sys_timeout_abs+0xa6>
 801bd92:	693b      	ldr	r3, [r7, #16]
 801bd94:	685a      	ldr	r2, [r3, #4]
 801bd96:	697b      	ldr	r3, [r7, #20]
 801bd98:	681b      	ldr	r3, [r3, #0]
 801bd9a:	685b      	ldr	r3, [r3, #4]
 801bd9c:	1ad3      	subs	r3, r2, r3
 801bd9e:	0fdb      	lsrs	r3, r3, #31
 801bda0:	f003 0301 	and.w	r3, r3, #1
 801bda4:	b2db      	uxtb	r3, r3
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d007      	beq.n	801bdba <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801bdaa:	697b      	ldr	r3, [r7, #20]
 801bdac:	681a      	ldr	r2, [r3, #0]
 801bdae:	693b      	ldr	r3, [r7, #16]
 801bdb0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801bdb2:	697b      	ldr	r3, [r7, #20]
 801bdb4:	693a      	ldr	r2, [r7, #16]
 801bdb6:	601a      	str	r2, [r3, #0]
        break;
 801bdb8:	e007      	b.n	801bdca <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801bdba:	697b      	ldr	r3, [r7, #20]
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	617b      	str	r3, [r7, #20]
 801bdc0:	697b      	ldr	r3, [r7, #20]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d1e1      	bne.n	801bd8a <sys_timeout_abs+0x86>
 801bdc6:	e000      	b.n	801bdca <sys_timeout_abs+0xc6>
    return;
 801bdc8:	bf00      	nop
      }
    }
  }
}
 801bdca:	3718      	adds	r7, #24
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	bd80      	pop	{r7, pc}
 801bdd0:	08022490 	.word	0x08022490
 801bdd4:	080224e4 	.word	0x080224e4
 801bdd8:	08022524 	.word	0x08022524
 801bddc:	2000775c 	.word	0x2000775c

0801bde0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801bde0:	b580      	push	{r7, lr}
 801bde2:	b086      	sub	sp, #24
 801bde4:	af00      	add	r7, sp, #0
 801bde6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801bdec:	697b      	ldr	r3, [r7, #20]
 801bdee:	685b      	ldr	r3, [r3, #4]
 801bdf0:	4798      	blx	r3

  now = sys_now();
 801bdf2:	f7f0 fb23 	bl	800c43c <sys_now>
 801bdf6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801bdf8:	697b      	ldr	r3, [r7, #20]
 801bdfa:	681a      	ldr	r2, [r3, #0]
 801bdfc:	4b0f      	ldr	r3, [pc, #60]	; (801be3c <lwip_cyclic_timer+0x5c>)
 801bdfe:	681b      	ldr	r3, [r3, #0]
 801be00:	4413      	add	r3, r2
 801be02:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801be04:	68fa      	ldr	r2, [r7, #12]
 801be06:	693b      	ldr	r3, [r7, #16]
 801be08:	1ad3      	subs	r3, r2, r3
 801be0a:	0fdb      	lsrs	r3, r3, #31
 801be0c:	f003 0301 	and.w	r3, r3, #1
 801be10:	b2db      	uxtb	r3, r3
 801be12:	2b00      	cmp	r3, #0
 801be14:	d009      	beq.n	801be2a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801be16:	697b      	ldr	r3, [r7, #20]
 801be18:	681a      	ldr	r2, [r3, #0]
 801be1a:	693b      	ldr	r3, [r7, #16]
 801be1c:	4413      	add	r3, r2
 801be1e:	687a      	ldr	r2, [r7, #4]
 801be20:	4907      	ldr	r1, [pc, #28]	; (801be40 <lwip_cyclic_timer+0x60>)
 801be22:	4618      	mov	r0, r3
 801be24:	f7ff ff6e 	bl	801bd04 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801be28:	e004      	b.n	801be34 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801be2a:	687a      	ldr	r2, [r7, #4]
 801be2c:	4904      	ldr	r1, [pc, #16]	; (801be40 <lwip_cyclic_timer+0x60>)
 801be2e:	68f8      	ldr	r0, [r7, #12]
 801be30:	f7ff ff68 	bl	801bd04 <sys_timeout_abs>
}
 801be34:	bf00      	nop
 801be36:	3718      	adds	r7, #24
 801be38:	46bd      	mov	sp, r7
 801be3a:	bd80      	pop	{r7, pc}
 801be3c:	20007760 	.word	0x20007760
 801be40:	0801bde1 	.word	0x0801bde1

0801be44 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801be44:	b580      	push	{r7, lr}
 801be46:	b082      	sub	sp, #8
 801be48:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801be4a:	2301      	movs	r3, #1
 801be4c:	607b      	str	r3, [r7, #4]
 801be4e:	e00e      	b.n	801be6e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801be50:	4a0a      	ldr	r2, [pc, #40]	; (801be7c <sys_timeouts_init+0x38>)
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	00db      	lsls	r3, r3, #3
 801be5c:	4a07      	ldr	r2, [pc, #28]	; (801be7c <sys_timeouts_init+0x38>)
 801be5e:	4413      	add	r3, r2
 801be60:	461a      	mov	r2, r3
 801be62:	4907      	ldr	r1, [pc, #28]	; (801be80 <sys_timeouts_init+0x3c>)
 801be64:	f000 f80e 	bl	801be84 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	3301      	adds	r3, #1
 801be6c:	607b      	str	r3, [r7, #4]
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	2b04      	cmp	r3, #4
 801be72:	d9ed      	bls.n	801be50 <sys_timeouts_init+0xc>
  }
}
 801be74:	bf00      	nop
 801be76:	3708      	adds	r7, #8
 801be78:	46bd      	mov	sp, r7
 801be7a:	bd80      	pop	{r7, pc}
 801be7c:	08022aac 	.word	0x08022aac
 801be80:	0801bde1 	.word	0x0801bde1

0801be84 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801be84:	b580      	push	{r7, lr}
 801be86:	b086      	sub	sp, #24
 801be88:	af00      	add	r7, sp, #0
 801be8a:	60f8      	str	r0, [r7, #12]
 801be8c:	60b9      	str	r1, [r7, #8]
 801be8e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801be90:	68fb      	ldr	r3, [r7, #12]
 801be92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801be96:	d306      	bcc.n	801bea6 <sys_timeout+0x22>
 801be98:	4b0a      	ldr	r3, [pc, #40]	; (801bec4 <sys_timeout+0x40>)
 801be9a:	f240 1229 	movw	r2, #297	; 0x129
 801be9e:	490a      	ldr	r1, [pc, #40]	; (801bec8 <sys_timeout+0x44>)
 801bea0:	480a      	ldr	r0, [pc, #40]	; (801becc <sys_timeout+0x48>)
 801bea2:	f001 fc29 	bl	801d6f8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801bea6:	f7f0 fac9 	bl	800c43c <sys_now>
 801beaa:	4602      	mov	r2, r0
 801beac:	68fb      	ldr	r3, [r7, #12]
 801beae:	4413      	add	r3, r2
 801beb0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801beb2:	687a      	ldr	r2, [r7, #4]
 801beb4:	68b9      	ldr	r1, [r7, #8]
 801beb6:	6978      	ldr	r0, [r7, #20]
 801beb8:	f7ff ff24 	bl	801bd04 <sys_timeout_abs>
#endif
}
 801bebc:	bf00      	nop
 801bebe:	3718      	adds	r7, #24
 801bec0:	46bd      	mov	sp, r7
 801bec2:	bd80      	pop	{r7, pc}
 801bec4:	08022490 	.word	0x08022490
 801bec8:	0802254c 	.word	0x0802254c
 801becc:	08022524 	.word	0x08022524

0801bed0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801bed0:	b580      	push	{r7, lr}
 801bed2:	b084      	sub	sp, #16
 801bed4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801bed6:	f7f0 fab1 	bl	800c43c <sys_now>
 801beda:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801bedc:	4b17      	ldr	r3, [pc, #92]	; (801bf3c <sys_check_timeouts+0x6c>)
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801bee2:	68bb      	ldr	r3, [r7, #8]
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	d022      	beq.n	801bf2e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801bee8:	68bb      	ldr	r3, [r7, #8]
 801beea:	685b      	ldr	r3, [r3, #4]
 801beec:	68fa      	ldr	r2, [r7, #12]
 801beee:	1ad3      	subs	r3, r2, r3
 801bef0:	0fdb      	lsrs	r3, r3, #31
 801bef2:	f003 0301 	and.w	r3, r3, #1
 801bef6:	b2db      	uxtb	r3, r3
 801bef8:	2b00      	cmp	r3, #0
 801befa:	d11a      	bne.n	801bf32 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801befc:	68bb      	ldr	r3, [r7, #8]
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	4a0e      	ldr	r2, [pc, #56]	; (801bf3c <sys_check_timeouts+0x6c>)
 801bf02:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801bf04:	68bb      	ldr	r3, [r7, #8]
 801bf06:	689b      	ldr	r3, [r3, #8]
 801bf08:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801bf0a:	68bb      	ldr	r3, [r7, #8]
 801bf0c:	68db      	ldr	r3, [r3, #12]
 801bf0e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801bf10:	68bb      	ldr	r3, [r7, #8]
 801bf12:	685b      	ldr	r3, [r3, #4]
 801bf14:	4a0a      	ldr	r2, [pc, #40]	; (801bf40 <sys_check_timeouts+0x70>)
 801bf16:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801bf18:	68b9      	ldr	r1, [r7, #8]
 801bf1a:	200a      	movs	r0, #10
 801bf1c:	f7f9 f990 	bl	8015240 <memp_free>
    if (handler != NULL) {
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d0da      	beq.n	801bedc <sys_check_timeouts+0xc>
      handler(arg);
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	6838      	ldr	r0, [r7, #0]
 801bf2a:	4798      	blx	r3
  do {
 801bf2c:	e7d6      	b.n	801bedc <sys_check_timeouts+0xc>
      return;
 801bf2e:	bf00      	nop
 801bf30:	e000      	b.n	801bf34 <sys_check_timeouts+0x64>
      return;
 801bf32:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801bf34:	3710      	adds	r7, #16
 801bf36:	46bd      	mov	sp, r7
 801bf38:	bd80      	pop	{r7, pc}
 801bf3a:	bf00      	nop
 801bf3c:	2000775c 	.word	0x2000775c
 801bf40:	20007760 	.word	0x20007760

0801bf44 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801bf44:	b580      	push	{r7, lr}
 801bf46:	b082      	sub	sp, #8
 801bf48:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801bf4a:	4b16      	ldr	r3, [pc, #88]	; (801bfa4 <sys_timeouts_sleeptime+0x60>)
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d102      	bne.n	801bf58 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801bf52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf56:	e020      	b.n	801bf9a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801bf58:	f7f0 fa70 	bl	800c43c <sys_now>
 801bf5c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801bf5e:	4b11      	ldr	r3, [pc, #68]	; (801bfa4 <sys_timeouts_sleeptime+0x60>)
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	685a      	ldr	r2, [r3, #4]
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	1ad3      	subs	r3, r2, r3
 801bf68:	0fdb      	lsrs	r3, r3, #31
 801bf6a:	f003 0301 	and.w	r3, r3, #1
 801bf6e:	b2db      	uxtb	r3, r3
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d001      	beq.n	801bf78 <sys_timeouts_sleeptime+0x34>
    return 0;
 801bf74:	2300      	movs	r3, #0
 801bf76:	e010      	b.n	801bf9a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801bf78:	4b0a      	ldr	r3, [pc, #40]	; (801bfa4 <sys_timeouts_sleeptime+0x60>)
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	685a      	ldr	r2, [r3, #4]
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	1ad3      	subs	r3, r2, r3
 801bf82:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801bf84:	683b      	ldr	r3, [r7, #0]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	da06      	bge.n	801bf98 <sys_timeouts_sleeptime+0x54>
 801bf8a:	4b07      	ldr	r3, [pc, #28]	; (801bfa8 <sys_timeouts_sleeptime+0x64>)
 801bf8c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801bf90:	4906      	ldr	r1, [pc, #24]	; (801bfac <sys_timeouts_sleeptime+0x68>)
 801bf92:	4807      	ldr	r0, [pc, #28]	; (801bfb0 <sys_timeouts_sleeptime+0x6c>)
 801bf94:	f001 fbb0 	bl	801d6f8 <iprintf>
    return ret;
 801bf98:	683b      	ldr	r3, [r7, #0]
  }
}
 801bf9a:	4618      	mov	r0, r3
 801bf9c:	3708      	adds	r7, #8
 801bf9e:	46bd      	mov	sp, r7
 801bfa0:	bd80      	pop	{r7, pc}
 801bfa2:	bf00      	nop
 801bfa4:	2000775c 	.word	0x2000775c
 801bfa8:	08022490 	.word	0x08022490
 801bfac:	08022584 	.word	0x08022584
 801bfb0:	08022524 	.word	0x08022524

0801bfb4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801bfb8:	f001 fbb6 	bl	801d728 <rand>
 801bfbc:	4603      	mov	r3, r0
 801bfbe:	b29b      	uxth	r3, r3
 801bfc0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801bfc4:	b29b      	uxth	r3, r3
 801bfc6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801bfca:	b29a      	uxth	r2, r3
 801bfcc:	4b01      	ldr	r3, [pc, #4]	; (801bfd4 <udp_init+0x20>)
 801bfce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801bfd0:	bf00      	nop
 801bfd2:	bd80      	pop	{r7, pc}
 801bfd4:	20000034 	.word	0x20000034

0801bfd8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801bfd8:	b480      	push	{r7}
 801bfda:	b083      	sub	sp, #12
 801bfdc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801bfde:	2300      	movs	r3, #0
 801bfe0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801bfe2:	4b17      	ldr	r3, [pc, #92]	; (801c040 <udp_new_port+0x68>)
 801bfe4:	881b      	ldrh	r3, [r3, #0]
 801bfe6:	1c5a      	adds	r2, r3, #1
 801bfe8:	b291      	uxth	r1, r2
 801bfea:	4a15      	ldr	r2, [pc, #84]	; (801c040 <udp_new_port+0x68>)
 801bfec:	8011      	strh	r1, [r2, #0]
 801bfee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bff2:	4293      	cmp	r3, r2
 801bff4:	d103      	bne.n	801bffe <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801bff6:	4b12      	ldr	r3, [pc, #72]	; (801c040 <udp_new_port+0x68>)
 801bff8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801bffc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bffe:	4b11      	ldr	r3, [pc, #68]	; (801c044 <udp_new_port+0x6c>)
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	603b      	str	r3, [r7, #0]
 801c004:	e011      	b.n	801c02a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c006:	683b      	ldr	r3, [r7, #0]
 801c008:	8a5a      	ldrh	r2, [r3, #18]
 801c00a:	4b0d      	ldr	r3, [pc, #52]	; (801c040 <udp_new_port+0x68>)
 801c00c:	881b      	ldrh	r3, [r3, #0]
 801c00e:	429a      	cmp	r2, r3
 801c010:	d108      	bne.n	801c024 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c012:	88fb      	ldrh	r3, [r7, #6]
 801c014:	3301      	adds	r3, #1
 801c016:	80fb      	strh	r3, [r7, #6]
 801c018:	88fb      	ldrh	r3, [r7, #6]
 801c01a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c01e:	d3e0      	bcc.n	801bfe2 <udp_new_port+0xa>
        return 0;
 801c020:	2300      	movs	r3, #0
 801c022:	e007      	b.n	801c034 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c024:	683b      	ldr	r3, [r7, #0]
 801c026:	68db      	ldr	r3, [r3, #12]
 801c028:	603b      	str	r3, [r7, #0]
 801c02a:	683b      	ldr	r3, [r7, #0]
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d1ea      	bne.n	801c006 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c030:	4b03      	ldr	r3, [pc, #12]	; (801c040 <udp_new_port+0x68>)
 801c032:	881b      	ldrh	r3, [r3, #0]
}
 801c034:	4618      	mov	r0, r3
 801c036:	370c      	adds	r7, #12
 801c038:	46bd      	mov	sp, r7
 801c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c03e:	4770      	bx	lr
 801c040:	20000034 	.word	0x20000034
 801c044:	2000ba80 	.word	0x2000ba80

0801c048 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c048:	b580      	push	{r7, lr}
 801c04a:	b084      	sub	sp, #16
 801c04c:	af00      	add	r7, sp, #0
 801c04e:	60f8      	str	r0, [r7, #12]
 801c050:	60b9      	str	r1, [r7, #8]
 801c052:	4613      	mov	r3, r2
 801c054:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d105      	bne.n	801c068 <udp_input_local_match+0x20>
 801c05c:	4b27      	ldr	r3, [pc, #156]	; (801c0fc <udp_input_local_match+0xb4>)
 801c05e:	2287      	movs	r2, #135	; 0x87
 801c060:	4927      	ldr	r1, [pc, #156]	; (801c100 <udp_input_local_match+0xb8>)
 801c062:	4828      	ldr	r0, [pc, #160]	; (801c104 <udp_input_local_match+0xbc>)
 801c064:	f001 fb48 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c068:	68bb      	ldr	r3, [r7, #8]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d105      	bne.n	801c07a <udp_input_local_match+0x32>
 801c06e:	4b23      	ldr	r3, [pc, #140]	; (801c0fc <udp_input_local_match+0xb4>)
 801c070:	2288      	movs	r2, #136	; 0x88
 801c072:	4925      	ldr	r1, [pc, #148]	; (801c108 <udp_input_local_match+0xc0>)
 801c074:	4823      	ldr	r0, [pc, #140]	; (801c104 <udp_input_local_match+0xbc>)
 801c076:	f001 fb3f 	bl	801d6f8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	7a1b      	ldrb	r3, [r3, #8]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d00b      	beq.n	801c09a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	7a1a      	ldrb	r2, [r3, #8]
 801c086:	4b21      	ldr	r3, [pc, #132]	; (801c10c <udp_input_local_match+0xc4>)
 801c088:	685b      	ldr	r3, [r3, #4]
 801c08a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c08e:	3301      	adds	r3, #1
 801c090:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c092:	429a      	cmp	r2, r3
 801c094:	d001      	beq.n	801c09a <udp_input_local_match+0x52>
    return 0;
 801c096:	2300      	movs	r3, #0
 801c098:	e02b      	b.n	801c0f2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c09a:	79fb      	ldrb	r3, [r7, #7]
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d018      	beq.n	801c0d2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c0a0:	68fb      	ldr	r3, [r7, #12]
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d013      	beq.n	801c0ce <udp_input_local_match+0x86>
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d00f      	beq.n	801c0ce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c0ae:	4b17      	ldr	r3, [pc, #92]	; (801c10c <udp_input_local_match+0xc4>)
 801c0b0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c0b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c0b6:	d00a      	beq.n	801c0ce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c0b8:	68fb      	ldr	r3, [r7, #12]
 801c0ba:	681a      	ldr	r2, [r3, #0]
 801c0bc:	4b13      	ldr	r3, [pc, #76]	; (801c10c <udp_input_local_match+0xc4>)
 801c0be:	695b      	ldr	r3, [r3, #20]
 801c0c0:	405a      	eors	r2, r3
 801c0c2:	68bb      	ldr	r3, [r7, #8]
 801c0c4:	3308      	adds	r3, #8
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d110      	bne.n	801c0f0 <udp_input_local_match+0xa8>
          return 1;
 801c0ce:	2301      	movs	r3, #1
 801c0d0:	e00f      	b.n	801c0f2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d009      	beq.n	801c0ec <udp_input_local_match+0xa4>
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	681b      	ldr	r3, [r3, #0]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d005      	beq.n	801c0ec <udp_input_local_match+0xa4>
 801c0e0:	68fb      	ldr	r3, [r7, #12]
 801c0e2:	681a      	ldr	r2, [r3, #0]
 801c0e4:	4b09      	ldr	r3, [pc, #36]	; (801c10c <udp_input_local_match+0xc4>)
 801c0e6:	695b      	ldr	r3, [r3, #20]
 801c0e8:	429a      	cmp	r2, r3
 801c0ea:	d101      	bne.n	801c0f0 <udp_input_local_match+0xa8>
        return 1;
 801c0ec:	2301      	movs	r3, #1
 801c0ee:	e000      	b.n	801c0f2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c0f0:	2300      	movs	r3, #0
}
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	3710      	adds	r7, #16
 801c0f6:	46bd      	mov	sp, r7
 801c0f8:	bd80      	pop	{r7, pc}
 801c0fa:	bf00      	nop
 801c0fc:	08022598 	.word	0x08022598
 801c100:	080225e4 	.word	0x080225e4
 801c104:	08022608 	.word	0x08022608
 801c108:	08022630 	.word	0x08022630
 801c10c:	2000897c 	.word	0x2000897c

0801c110 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c110:	b590      	push	{r4, r7, lr}
 801c112:	b08d      	sub	sp, #52	; 0x34
 801c114:	af02      	add	r7, sp, #8
 801c116:	6078      	str	r0, [r7, #4]
 801c118:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c11a:	2300      	movs	r3, #0
 801c11c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	2b00      	cmp	r3, #0
 801c122:	d105      	bne.n	801c130 <udp_input+0x20>
 801c124:	4b7c      	ldr	r3, [pc, #496]	; (801c318 <udp_input+0x208>)
 801c126:	22cf      	movs	r2, #207	; 0xcf
 801c128:	497c      	ldr	r1, [pc, #496]	; (801c31c <udp_input+0x20c>)
 801c12a:	487d      	ldr	r0, [pc, #500]	; (801c320 <udp_input+0x210>)
 801c12c:	f001 fae4 	bl	801d6f8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c130:	683b      	ldr	r3, [r7, #0]
 801c132:	2b00      	cmp	r3, #0
 801c134:	d105      	bne.n	801c142 <udp_input+0x32>
 801c136:	4b78      	ldr	r3, [pc, #480]	; (801c318 <udp_input+0x208>)
 801c138:	22d0      	movs	r2, #208	; 0xd0
 801c13a:	497a      	ldr	r1, [pc, #488]	; (801c324 <udp_input+0x214>)
 801c13c:	4878      	ldr	r0, [pc, #480]	; (801c320 <udp_input+0x210>)
 801c13e:	f001 fadb 	bl	801d6f8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	895b      	ldrh	r3, [r3, #10]
 801c146:	2b07      	cmp	r3, #7
 801c148:	d803      	bhi.n	801c152 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c14a:	6878      	ldr	r0, [r7, #4]
 801c14c:	f7f9 ff24 	bl	8015f98 <pbuf_free>
    goto end;
 801c150:	e0de      	b.n	801c310 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	685b      	ldr	r3, [r3, #4]
 801c156:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c158:	4b73      	ldr	r3, [pc, #460]	; (801c328 <udp_input+0x218>)
 801c15a:	695a      	ldr	r2, [r3, #20]
 801c15c:	4b72      	ldr	r3, [pc, #456]	; (801c328 <udp_input+0x218>)
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	4619      	mov	r1, r3
 801c162:	4610      	mov	r0, r2
 801c164:	f7f7 fce2 	bl	8013b2c <ip4_addr_isbroadcast_u32>
 801c168:	4603      	mov	r3, r0
 801c16a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c16c:	697b      	ldr	r3, [r7, #20]
 801c16e:	881b      	ldrh	r3, [r3, #0]
 801c170:	b29b      	uxth	r3, r3
 801c172:	4618      	mov	r0, r3
 801c174:	f7f4 f8a8 	bl	80102c8 <lwip_htons>
 801c178:	4603      	mov	r3, r0
 801c17a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c17c:	697b      	ldr	r3, [r7, #20]
 801c17e:	885b      	ldrh	r3, [r3, #2]
 801c180:	b29b      	uxth	r3, r3
 801c182:	4618      	mov	r0, r3
 801c184:	f7f4 f8a0 	bl	80102c8 <lwip_htons>
 801c188:	4603      	mov	r3, r0
 801c18a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c18c:	2300      	movs	r3, #0
 801c18e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801c190:	2300      	movs	r3, #0
 801c192:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c194:	2300      	movs	r3, #0
 801c196:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c198:	4b64      	ldr	r3, [pc, #400]	; (801c32c <udp_input+0x21c>)
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	627b      	str	r3, [r7, #36]	; 0x24
 801c19e:	e054      	b.n	801c24a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1a2:	8a5b      	ldrh	r3, [r3, #18]
 801c1a4:	89fa      	ldrh	r2, [r7, #14]
 801c1a6:	429a      	cmp	r2, r3
 801c1a8:	d14a      	bne.n	801c240 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c1aa:	7cfb      	ldrb	r3, [r7, #19]
 801c1ac:	461a      	mov	r2, r3
 801c1ae:	6839      	ldr	r1, [r7, #0]
 801c1b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c1b2:	f7ff ff49 	bl	801c048 <udp_input_local_match>
 801c1b6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d041      	beq.n	801c240 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1be:	7c1b      	ldrb	r3, [r3, #16]
 801c1c0:	f003 0304 	and.w	r3, r3, #4
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	d11d      	bne.n	801c204 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801c1c8:	69fb      	ldr	r3, [r7, #28]
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d102      	bne.n	801c1d4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1d0:	61fb      	str	r3, [r7, #28]
 801c1d2:	e017      	b.n	801c204 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c1d4:	7cfb      	ldrb	r3, [r7, #19]
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	d014      	beq.n	801c204 <udp_input+0xf4>
 801c1da:	4b53      	ldr	r3, [pc, #332]	; (801c328 <udp_input+0x218>)
 801c1dc:	695b      	ldr	r3, [r3, #20]
 801c1de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c1e2:	d10f      	bne.n	801c204 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c1e4:	69fb      	ldr	r3, [r7, #28]
 801c1e6:	681a      	ldr	r2, [r3, #0]
 801c1e8:	683b      	ldr	r3, [r7, #0]
 801c1ea:	3304      	adds	r3, #4
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	429a      	cmp	r2, r3
 801c1f0:	d008      	beq.n	801c204 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1f4:	681a      	ldr	r2, [r3, #0]
 801c1f6:	683b      	ldr	r3, [r7, #0]
 801c1f8:	3304      	adds	r3, #4
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	429a      	cmp	r2, r3
 801c1fe:	d101      	bne.n	801c204 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801c200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c202:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c206:	8a9b      	ldrh	r3, [r3, #20]
 801c208:	8a3a      	ldrh	r2, [r7, #16]
 801c20a:	429a      	cmp	r2, r3
 801c20c:	d118      	bne.n	801c240 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c210:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c212:	2b00      	cmp	r3, #0
 801c214:	d005      	beq.n	801c222 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c218:	685a      	ldr	r2, [r3, #4]
 801c21a:	4b43      	ldr	r3, [pc, #268]	; (801c328 <udp_input+0x218>)
 801c21c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c21e:	429a      	cmp	r2, r3
 801c220:	d10e      	bne.n	801c240 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c222:	6a3b      	ldr	r3, [r7, #32]
 801c224:	2b00      	cmp	r3, #0
 801c226:	d014      	beq.n	801c252 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c22a:	68da      	ldr	r2, [r3, #12]
 801c22c:	6a3b      	ldr	r3, [r7, #32]
 801c22e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c230:	4b3e      	ldr	r3, [pc, #248]	; (801c32c <udp_input+0x21c>)
 801c232:	681a      	ldr	r2, [r3, #0]
 801c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c236:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c238:	4a3c      	ldr	r2, [pc, #240]	; (801c32c <udp_input+0x21c>)
 801c23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c23c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c23e:	e008      	b.n	801c252 <udp_input+0x142>
      }
    }

    prev = pcb;
 801c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c242:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c246:	68db      	ldr	r3, [r3, #12]
 801c248:	627b      	str	r3, [r7, #36]	; 0x24
 801c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d1a7      	bne.n	801c1a0 <udp_input+0x90>
 801c250:	e000      	b.n	801c254 <udp_input+0x144>
        break;
 801c252:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c256:	2b00      	cmp	r3, #0
 801c258:	d101      	bne.n	801c25e <udp_input+0x14e>
    pcb = uncon_pcb;
 801c25a:	69fb      	ldr	r3, [r7, #28]
 801c25c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c260:	2b00      	cmp	r3, #0
 801c262:	d002      	beq.n	801c26a <udp_input+0x15a>
    for_us = 1;
 801c264:	2301      	movs	r3, #1
 801c266:	76fb      	strb	r3, [r7, #27]
 801c268:	e00a      	b.n	801c280 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c26a:	683b      	ldr	r3, [r7, #0]
 801c26c:	3304      	adds	r3, #4
 801c26e:	681a      	ldr	r2, [r3, #0]
 801c270:	4b2d      	ldr	r3, [pc, #180]	; (801c328 <udp_input+0x218>)
 801c272:	695b      	ldr	r3, [r3, #20]
 801c274:	429a      	cmp	r2, r3
 801c276:	bf0c      	ite	eq
 801c278:	2301      	moveq	r3, #1
 801c27a:	2300      	movne	r3, #0
 801c27c:	b2db      	uxtb	r3, r3
 801c27e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c280:	7efb      	ldrb	r3, [r7, #27]
 801c282:	2b00      	cmp	r3, #0
 801c284:	d041      	beq.n	801c30a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c286:	2108      	movs	r1, #8
 801c288:	6878      	ldr	r0, [r7, #4]
 801c28a:	f7f9 fdff 	bl	8015e8c <pbuf_remove_header>
 801c28e:	4603      	mov	r3, r0
 801c290:	2b00      	cmp	r3, #0
 801c292:	d00a      	beq.n	801c2aa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c294:	4b20      	ldr	r3, [pc, #128]	; (801c318 <udp_input+0x208>)
 801c296:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801c29a:	4925      	ldr	r1, [pc, #148]	; (801c330 <udp_input+0x220>)
 801c29c:	4820      	ldr	r0, [pc, #128]	; (801c320 <udp_input+0x210>)
 801c29e:	f001 fa2b 	bl	801d6f8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c2a2:	6878      	ldr	r0, [r7, #4]
 801c2a4:	f7f9 fe78 	bl	8015f98 <pbuf_free>
      goto end;
 801c2a8:	e032      	b.n	801c310 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d012      	beq.n	801c2d6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2b2:	699b      	ldr	r3, [r3, #24]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d00a      	beq.n	801c2ce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2ba:	699c      	ldr	r4, [r3, #24]
 801c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2be:	69d8      	ldr	r0, [r3, #28]
 801c2c0:	8a3b      	ldrh	r3, [r7, #16]
 801c2c2:	9300      	str	r3, [sp, #0]
 801c2c4:	4b1b      	ldr	r3, [pc, #108]	; (801c334 <udp_input+0x224>)
 801c2c6:	687a      	ldr	r2, [r7, #4]
 801c2c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c2ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c2cc:	e021      	b.n	801c312 <udp_input+0x202>
        pbuf_free(p);
 801c2ce:	6878      	ldr	r0, [r7, #4]
 801c2d0:	f7f9 fe62 	bl	8015f98 <pbuf_free>
        goto end;
 801c2d4:	e01c      	b.n	801c310 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c2d6:	7cfb      	ldrb	r3, [r7, #19]
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d112      	bne.n	801c302 <udp_input+0x1f2>
 801c2dc:	4b12      	ldr	r3, [pc, #72]	; (801c328 <udp_input+0x218>)
 801c2de:	695b      	ldr	r3, [r3, #20]
 801c2e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c2e4:	2be0      	cmp	r3, #224	; 0xe0
 801c2e6:	d00c      	beq.n	801c302 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c2e8:	4b0f      	ldr	r3, [pc, #60]	; (801c328 <udp_input+0x218>)
 801c2ea:	899b      	ldrh	r3, [r3, #12]
 801c2ec:	3308      	adds	r3, #8
 801c2ee:	b29b      	uxth	r3, r3
 801c2f0:	b21b      	sxth	r3, r3
 801c2f2:	4619      	mov	r1, r3
 801c2f4:	6878      	ldr	r0, [r7, #4]
 801c2f6:	f7f9 fe3c 	bl	8015f72 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c2fa:	2103      	movs	r1, #3
 801c2fc:	6878      	ldr	r0, [r7, #4]
 801c2fe:	f7f6 fffb 	bl	80132f8 <icmp_dest_unreach>
      pbuf_free(p);
 801c302:	6878      	ldr	r0, [r7, #4]
 801c304:	f7f9 fe48 	bl	8015f98 <pbuf_free>
  return;
 801c308:	e003      	b.n	801c312 <udp_input+0x202>
    pbuf_free(p);
 801c30a:	6878      	ldr	r0, [r7, #4]
 801c30c:	f7f9 fe44 	bl	8015f98 <pbuf_free>
  return;
 801c310:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c312:	372c      	adds	r7, #44	; 0x2c
 801c314:	46bd      	mov	sp, r7
 801c316:	bd90      	pop	{r4, r7, pc}
 801c318:	08022598 	.word	0x08022598
 801c31c:	08022658 	.word	0x08022658
 801c320:	08022608 	.word	0x08022608
 801c324:	08022670 	.word	0x08022670
 801c328:	2000897c 	.word	0x2000897c
 801c32c:	2000ba80 	.word	0x2000ba80
 801c330:	0802268c 	.word	0x0802268c
 801c334:	2000898c 	.word	0x2000898c

0801c338 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801c338:	b580      	push	{r7, lr}
 801c33a:	b088      	sub	sp, #32
 801c33c:	af02      	add	r7, sp, #8
 801c33e:	60f8      	str	r0, [r7, #12]
 801c340:	60b9      	str	r1, [r7, #8]
 801c342:	607a      	str	r2, [r7, #4]
 801c344:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801c346:	68fb      	ldr	r3, [r7, #12]
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d109      	bne.n	801c360 <udp_sendto_if+0x28>
 801c34c:	4b2e      	ldr	r3, [pc, #184]	; (801c408 <udp_sendto_if+0xd0>)
 801c34e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c352:	492e      	ldr	r1, [pc, #184]	; (801c40c <udp_sendto_if+0xd4>)
 801c354:	482e      	ldr	r0, [pc, #184]	; (801c410 <udp_sendto_if+0xd8>)
 801c356:	f001 f9cf 	bl	801d6f8 <iprintf>
 801c35a:	f06f 030f 	mvn.w	r3, #15
 801c35e:	e04f      	b.n	801c400 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801c360:	68bb      	ldr	r3, [r7, #8]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d109      	bne.n	801c37a <udp_sendto_if+0x42>
 801c366:	4b28      	ldr	r3, [pc, #160]	; (801c408 <udp_sendto_if+0xd0>)
 801c368:	f240 2281 	movw	r2, #641	; 0x281
 801c36c:	4929      	ldr	r1, [pc, #164]	; (801c414 <udp_sendto_if+0xdc>)
 801c36e:	4828      	ldr	r0, [pc, #160]	; (801c410 <udp_sendto_if+0xd8>)
 801c370:	f001 f9c2 	bl	801d6f8 <iprintf>
 801c374:	f06f 030f 	mvn.w	r3, #15
 801c378:	e042      	b.n	801c400 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d109      	bne.n	801c394 <udp_sendto_if+0x5c>
 801c380:	4b21      	ldr	r3, [pc, #132]	; (801c408 <udp_sendto_if+0xd0>)
 801c382:	f240 2282 	movw	r2, #642	; 0x282
 801c386:	4924      	ldr	r1, [pc, #144]	; (801c418 <udp_sendto_if+0xe0>)
 801c388:	4821      	ldr	r0, [pc, #132]	; (801c410 <udp_sendto_if+0xd8>)
 801c38a:	f001 f9b5 	bl	801d6f8 <iprintf>
 801c38e:	f06f 030f 	mvn.w	r3, #15
 801c392:	e035      	b.n	801c400 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801c394:	6a3b      	ldr	r3, [r7, #32]
 801c396:	2b00      	cmp	r3, #0
 801c398:	d109      	bne.n	801c3ae <udp_sendto_if+0x76>
 801c39a:	4b1b      	ldr	r3, [pc, #108]	; (801c408 <udp_sendto_if+0xd0>)
 801c39c:	f240 2283 	movw	r2, #643	; 0x283
 801c3a0:	491e      	ldr	r1, [pc, #120]	; (801c41c <udp_sendto_if+0xe4>)
 801c3a2:	481b      	ldr	r0, [pc, #108]	; (801c410 <udp_sendto_if+0xd8>)
 801c3a4:	f001 f9a8 	bl	801d6f8 <iprintf>
 801c3a8:	f06f 030f 	mvn.w	r3, #15
 801c3ac:	e028      	b.n	801c400 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d009      	beq.n	801c3c8 <udp_sendto_if+0x90>
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	d005      	beq.n	801c3c8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c3c4:	2be0      	cmp	r3, #224	; 0xe0
 801c3c6:	d103      	bne.n	801c3d0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801c3c8:	6a3b      	ldr	r3, [r7, #32]
 801c3ca:	3304      	adds	r3, #4
 801c3cc:	617b      	str	r3, [r7, #20]
 801c3ce:	e00b      	b.n	801c3e8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	681a      	ldr	r2, [r3, #0]
 801c3d4:	6a3b      	ldr	r3, [r7, #32]
 801c3d6:	3304      	adds	r3, #4
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	429a      	cmp	r2, r3
 801c3dc:	d002      	beq.n	801c3e4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801c3de:	f06f 0303 	mvn.w	r3, #3
 801c3e2:	e00d      	b.n	801c400 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801c3e4:	68fb      	ldr	r3, [r7, #12]
 801c3e6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c3e8:	887a      	ldrh	r2, [r7, #2]
 801c3ea:	697b      	ldr	r3, [r7, #20]
 801c3ec:	9301      	str	r3, [sp, #4]
 801c3ee:	6a3b      	ldr	r3, [r7, #32]
 801c3f0:	9300      	str	r3, [sp, #0]
 801c3f2:	4613      	mov	r3, r2
 801c3f4:	687a      	ldr	r2, [r7, #4]
 801c3f6:	68b9      	ldr	r1, [r7, #8]
 801c3f8:	68f8      	ldr	r0, [r7, #12]
 801c3fa:	f000 f811 	bl	801c420 <udp_sendto_if_src>
 801c3fe:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c400:	4618      	mov	r0, r3
 801c402:	3718      	adds	r7, #24
 801c404:	46bd      	mov	sp, r7
 801c406:	bd80      	pop	{r7, pc}
 801c408:	08022598 	.word	0x08022598
 801c40c:	08022728 	.word	0x08022728
 801c410:	08022608 	.word	0x08022608
 801c414:	08022744 	.word	0x08022744
 801c418:	08022760 	.word	0x08022760
 801c41c:	08022780 	.word	0x08022780

0801c420 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c420:	b580      	push	{r7, lr}
 801c422:	b08c      	sub	sp, #48	; 0x30
 801c424:	af04      	add	r7, sp, #16
 801c426:	60f8      	str	r0, [r7, #12]
 801c428:	60b9      	str	r1, [r7, #8]
 801c42a:	607a      	str	r2, [r7, #4]
 801c42c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801c42e:	68fb      	ldr	r3, [r7, #12]
 801c430:	2b00      	cmp	r3, #0
 801c432:	d109      	bne.n	801c448 <udp_sendto_if_src+0x28>
 801c434:	4b65      	ldr	r3, [pc, #404]	; (801c5cc <udp_sendto_if_src+0x1ac>)
 801c436:	f240 22d1 	movw	r2, #721	; 0x2d1
 801c43a:	4965      	ldr	r1, [pc, #404]	; (801c5d0 <udp_sendto_if_src+0x1b0>)
 801c43c:	4865      	ldr	r0, [pc, #404]	; (801c5d4 <udp_sendto_if_src+0x1b4>)
 801c43e:	f001 f95b 	bl	801d6f8 <iprintf>
 801c442:	f06f 030f 	mvn.w	r3, #15
 801c446:	e0bc      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801c448:	68bb      	ldr	r3, [r7, #8]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d109      	bne.n	801c462 <udp_sendto_if_src+0x42>
 801c44e:	4b5f      	ldr	r3, [pc, #380]	; (801c5cc <udp_sendto_if_src+0x1ac>)
 801c450:	f240 22d2 	movw	r2, #722	; 0x2d2
 801c454:	4960      	ldr	r1, [pc, #384]	; (801c5d8 <udp_sendto_if_src+0x1b8>)
 801c456:	485f      	ldr	r0, [pc, #380]	; (801c5d4 <udp_sendto_if_src+0x1b4>)
 801c458:	f001 f94e 	bl	801d6f8 <iprintf>
 801c45c:	f06f 030f 	mvn.w	r3, #15
 801c460:	e0af      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	2b00      	cmp	r3, #0
 801c466:	d109      	bne.n	801c47c <udp_sendto_if_src+0x5c>
 801c468:	4b58      	ldr	r3, [pc, #352]	; (801c5cc <udp_sendto_if_src+0x1ac>)
 801c46a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801c46e:	495b      	ldr	r1, [pc, #364]	; (801c5dc <udp_sendto_if_src+0x1bc>)
 801c470:	4858      	ldr	r0, [pc, #352]	; (801c5d4 <udp_sendto_if_src+0x1b4>)
 801c472:	f001 f941 	bl	801d6f8 <iprintf>
 801c476:	f06f 030f 	mvn.w	r3, #15
 801c47a:	e0a2      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801c47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c47e:	2b00      	cmp	r3, #0
 801c480:	d109      	bne.n	801c496 <udp_sendto_if_src+0x76>
 801c482:	4b52      	ldr	r3, [pc, #328]	; (801c5cc <udp_sendto_if_src+0x1ac>)
 801c484:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801c488:	4955      	ldr	r1, [pc, #340]	; (801c5e0 <udp_sendto_if_src+0x1c0>)
 801c48a:	4852      	ldr	r0, [pc, #328]	; (801c5d4 <udp_sendto_if_src+0x1b4>)
 801c48c:	f001 f934 	bl	801d6f8 <iprintf>
 801c490:	f06f 030f 	mvn.w	r3, #15
 801c494:	e095      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801c496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d109      	bne.n	801c4b0 <udp_sendto_if_src+0x90>
 801c49c:	4b4b      	ldr	r3, [pc, #300]	; (801c5cc <udp_sendto_if_src+0x1ac>)
 801c49e:	f240 22d5 	movw	r2, #725	; 0x2d5
 801c4a2:	4950      	ldr	r1, [pc, #320]	; (801c5e4 <udp_sendto_if_src+0x1c4>)
 801c4a4:	484b      	ldr	r0, [pc, #300]	; (801c5d4 <udp_sendto_if_src+0x1b4>)
 801c4a6:	f001 f927 	bl	801d6f8 <iprintf>
 801c4aa:	f06f 030f 	mvn.w	r3, #15
 801c4ae:	e088      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	8a5b      	ldrh	r3, [r3, #18]
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d10f      	bne.n	801c4d8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c4b8:	68f9      	ldr	r1, [r7, #12]
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	8a5b      	ldrh	r3, [r3, #18]
 801c4be:	461a      	mov	r2, r3
 801c4c0:	68f8      	ldr	r0, [r7, #12]
 801c4c2:	f000 f893 	bl	801c5ec <udp_bind>
 801c4c6:	4603      	mov	r3, r0
 801c4c8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801c4ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d002      	beq.n	801c4d8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801c4d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c4d6:	e074      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801c4d8:	68bb      	ldr	r3, [r7, #8]
 801c4da:	891b      	ldrh	r3, [r3, #8]
 801c4dc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801c4e0:	4293      	cmp	r3, r2
 801c4e2:	d902      	bls.n	801c4ea <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801c4e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c4e8:	e06b      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801c4ea:	2108      	movs	r1, #8
 801c4ec:	68b8      	ldr	r0, [r7, #8]
 801c4ee:	f7f9 fcbd 	bl	8015e6c <pbuf_add_header>
 801c4f2:	4603      	mov	r3, r0
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	d015      	beq.n	801c524 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801c4f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c4fc:	2108      	movs	r1, #8
 801c4fe:	2022      	movs	r0, #34	; 0x22
 801c500:	f7f9 fa6a 	bl	80159d8 <pbuf_alloc>
 801c504:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801c506:	69fb      	ldr	r3, [r7, #28]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d102      	bne.n	801c512 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801c50c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c510:	e057      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801c512:	68bb      	ldr	r3, [r7, #8]
 801c514:	891b      	ldrh	r3, [r3, #8]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d006      	beq.n	801c528 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801c51a:	68b9      	ldr	r1, [r7, #8]
 801c51c:	69f8      	ldr	r0, [r7, #28]
 801c51e:	f7f9 fe5f 	bl	80161e0 <pbuf_chain>
 801c522:	e001      	b.n	801c528 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801c524:	68bb      	ldr	r3, [r7, #8]
 801c526:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c528:	69fb      	ldr	r3, [r7, #28]
 801c52a:	895b      	ldrh	r3, [r3, #10]
 801c52c:	2b07      	cmp	r3, #7
 801c52e:	d806      	bhi.n	801c53e <udp_sendto_if_src+0x11e>
 801c530:	4b26      	ldr	r3, [pc, #152]	; (801c5cc <udp_sendto_if_src+0x1ac>)
 801c532:	f240 320e 	movw	r2, #782	; 0x30e
 801c536:	492c      	ldr	r1, [pc, #176]	; (801c5e8 <udp_sendto_if_src+0x1c8>)
 801c538:	4826      	ldr	r0, [pc, #152]	; (801c5d4 <udp_sendto_if_src+0x1b4>)
 801c53a:	f001 f8dd 	bl	801d6f8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c53e:	69fb      	ldr	r3, [r7, #28]
 801c540:	685b      	ldr	r3, [r3, #4]
 801c542:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	8a5b      	ldrh	r3, [r3, #18]
 801c548:	4618      	mov	r0, r3
 801c54a:	f7f3 febd 	bl	80102c8 <lwip_htons>
 801c54e:	4603      	mov	r3, r0
 801c550:	461a      	mov	r2, r3
 801c552:	697b      	ldr	r3, [r7, #20]
 801c554:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c556:	887b      	ldrh	r3, [r7, #2]
 801c558:	4618      	mov	r0, r3
 801c55a:	f7f3 feb5 	bl	80102c8 <lwip_htons>
 801c55e:	4603      	mov	r3, r0
 801c560:	461a      	mov	r2, r3
 801c562:	697b      	ldr	r3, [r7, #20]
 801c564:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c566:	697b      	ldr	r3, [r7, #20]
 801c568:	2200      	movs	r2, #0
 801c56a:	719a      	strb	r2, [r3, #6]
 801c56c:	2200      	movs	r2, #0
 801c56e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801c570:	69fb      	ldr	r3, [r7, #28]
 801c572:	891b      	ldrh	r3, [r3, #8]
 801c574:	4618      	mov	r0, r3
 801c576:	f7f3 fea7 	bl	80102c8 <lwip_htons>
 801c57a:	4603      	mov	r3, r0
 801c57c:	461a      	mov	r2, r3
 801c57e:	697b      	ldr	r3, [r7, #20]
 801c580:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c582:	2311      	movs	r3, #17
 801c584:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c586:	68fb      	ldr	r3, [r7, #12]
 801c588:	7adb      	ldrb	r3, [r3, #11]
 801c58a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c58c:	68fb      	ldr	r3, [r7, #12]
 801c58e:	7a9b      	ldrb	r3, [r3, #10]
 801c590:	7cb9      	ldrb	r1, [r7, #18]
 801c592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c594:	9202      	str	r2, [sp, #8]
 801c596:	7cfa      	ldrb	r2, [r7, #19]
 801c598:	9201      	str	r2, [sp, #4]
 801c59a:	9300      	str	r3, [sp, #0]
 801c59c:	460b      	mov	r3, r1
 801c59e:	687a      	ldr	r2, [r7, #4]
 801c5a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c5a2:	69f8      	ldr	r0, [r7, #28]
 801c5a4:	f7f7 fa14 	bl	80139d0 <ip4_output_if_src>
 801c5a8:	4603      	mov	r3, r0
 801c5aa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c5ac:	69fa      	ldr	r2, [r7, #28]
 801c5ae:	68bb      	ldr	r3, [r7, #8]
 801c5b0:	429a      	cmp	r2, r3
 801c5b2:	d004      	beq.n	801c5be <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801c5b4:	69f8      	ldr	r0, [r7, #28]
 801c5b6:	f7f9 fcef 	bl	8015f98 <pbuf_free>
    q = NULL;
 801c5ba:	2300      	movs	r3, #0
 801c5bc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801c5be:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	3720      	adds	r7, #32
 801c5c6:	46bd      	mov	sp, r7
 801c5c8:	bd80      	pop	{r7, pc}
 801c5ca:	bf00      	nop
 801c5cc:	08022598 	.word	0x08022598
 801c5d0:	080227a0 	.word	0x080227a0
 801c5d4:	08022608 	.word	0x08022608
 801c5d8:	080227c0 	.word	0x080227c0
 801c5dc:	080227e0 	.word	0x080227e0
 801c5e0:	08022804 	.word	0x08022804
 801c5e4:	08022828 	.word	0x08022828
 801c5e8:	0802284c 	.word	0x0802284c

0801c5ec <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c5ec:	b580      	push	{r7, lr}
 801c5ee:	b086      	sub	sp, #24
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	60f8      	str	r0, [r7, #12]
 801c5f4:	60b9      	str	r1, [r7, #8]
 801c5f6:	4613      	mov	r3, r2
 801c5f8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c5fa:	68bb      	ldr	r3, [r7, #8]
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	d101      	bne.n	801c604 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c600:	4b39      	ldr	r3, [pc, #228]	; (801c6e8 <udp_bind+0xfc>)
 801c602:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	2b00      	cmp	r3, #0
 801c608:	d109      	bne.n	801c61e <udp_bind+0x32>
 801c60a:	4b38      	ldr	r3, [pc, #224]	; (801c6ec <udp_bind+0x100>)
 801c60c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801c610:	4937      	ldr	r1, [pc, #220]	; (801c6f0 <udp_bind+0x104>)
 801c612:	4838      	ldr	r0, [pc, #224]	; (801c6f4 <udp_bind+0x108>)
 801c614:	f001 f870 	bl	801d6f8 <iprintf>
 801c618:	f06f 030f 	mvn.w	r3, #15
 801c61c:	e060      	b.n	801c6e0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c61e:	2300      	movs	r3, #0
 801c620:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c622:	4b35      	ldr	r3, [pc, #212]	; (801c6f8 <udp_bind+0x10c>)
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	617b      	str	r3, [r7, #20]
 801c628:	e009      	b.n	801c63e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c62a:	68fa      	ldr	r2, [r7, #12]
 801c62c:	697b      	ldr	r3, [r7, #20]
 801c62e:	429a      	cmp	r2, r3
 801c630:	d102      	bne.n	801c638 <udp_bind+0x4c>
      rebind = 1;
 801c632:	2301      	movs	r3, #1
 801c634:	74fb      	strb	r3, [r7, #19]
      break;
 801c636:	e005      	b.n	801c644 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c638:	697b      	ldr	r3, [r7, #20]
 801c63a:	68db      	ldr	r3, [r3, #12]
 801c63c:	617b      	str	r3, [r7, #20]
 801c63e:	697b      	ldr	r3, [r7, #20]
 801c640:	2b00      	cmp	r3, #0
 801c642:	d1f2      	bne.n	801c62a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c644:	88fb      	ldrh	r3, [r7, #6]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d109      	bne.n	801c65e <udp_bind+0x72>
    port = udp_new_port();
 801c64a:	f7ff fcc5 	bl	801bfd8 <udp_new_port>
 801c64e:	4603      	mov	r3, r0
 801c650:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c652:	88fb      	ldrh	r3, [r7, #6]
 801c654:	2b00      	cmp	r3, #0
 801c656:	d12c      	bne.n	801c6b2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c658:	f06f 0307 	mvn.w	r3, #7
 801c65c:	e040      	b.n	801c6e0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c65e:	4b26      	ldr	r3, [pc, #152]	; (801c6f8 <udp_bind+0x10c>)
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	617b      	str	r3, [r7, #20]
 801c664:	e022      	b.n	801c6ac <udp_bind+0xc0>
      if (pcb != ipcb) {
 801c666:	68fa      	ldr	r2, [r7, #12]
 801c668:	697b      	ldr	r3, [r7, #20]
 801c66a:	429a      	cmp	r2, r3
 801c66c:	d01b      	beq.n	801c6a6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c66e:	697b      	ldr	r3, [r7, #20]
 801c670:	8a5b      	ldrh	r3, [r3, #18]
 801c672:	88fa      	ldrh	r2, [r7, #6]
 801c674:	429a      	cmp	r2, r3
 801c676:	d116      	bne.n	801c6a6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c678:	697b      	ldr	r3, [r7, #20]
 801c67a:	681a      	ldr	r2, [r3, #0]
 801c67c:	68bb      	ldr	r3, [r7, #8]
 801c67e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c680:	429a      	cmp	r2, r3
 801c682:	d00d      	beq.n	801c6a0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c684:	68bb      	ldr	r3, [r7, #8]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d00a      	beq.n	801c6a0 <udp_bind+0xb4>
 801c68a:	68bb      	ldr	r3, [r7, #8]
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d006      	beq.n	801c6a0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c692:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c694:	2b00      	cmp	r3, #0
 801c696:	d003      	beq.n	801c6a0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c698:	697b      	ldr	r3, [r7, #20]
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d102      	bne.n	801c6a6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c6a0:	f06f 0307 	mvn.w	r3, #7
 801c6a4:	e01c      	b.n	801c6e0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c6a6:	697b      	ldr	r3, [r7, #20]
 801c6a8:	68db      	ldr	r3, [r3, #12]
 801c6aa:	617b      	str	r3, [r7, #20]
 801c6ac:	697b      	ldr	r3, [r7, #20]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d1d9      	bne.n	801c666 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c6b2:	68bb      	ldr	r3, [r7, #8]
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	d002      	beq.n	801c6be <udp_bind+0xd2>
 801c6b8:	68bb      	ldr	r3, [r7, #8]
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	e000      	b.n	801c6c0 <udp_bind+0xd4>
 801c6be:	2300      	movs	r3, #0
 801c6c0:	68fa      	ldr	r2, [r7, #12]
 801c6c2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	88fa      	ldrh	r2, [r7, #6]
 801c6c8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c6ca:	7cfb      	ldrb	r3, [r7, #19]
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	d106      	bne.n	801c6de <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c6d0:	4b09      	ldr	r3, [pc, #36]	; (801c6f8 <udp_bind+0x10c>)
 801c6d2:	681a      	ldr	r2, [r3, #0]
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c6d8:	4a07      	ldr	r2, [pc, #28]	; (801c6f8 <udp_bind+0x10c>)
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c6de:	2300      	movs	r3, #0
}
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	3718      	adds	r7, #24
 801c6e4:	46bd      	mov	sp, r7
 801c6e6:	bd80      	pop	{r7, pc}
 801c6e8:	080229ac 	.word	0x080229ac
 801c6ec:	08022598 	.word	0x08022598
 801c6f0:	0802287c 	.word	0x0802287c
 801c6f4:	08022608 	.word	0x08022608
 801c6f8:	2000ba80 	.word	0x2000ba80

0801c6fc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c6fc:	b580      	push	{r7, lr}
 801c6fe:	b086      	sub	sp, #24
 801c700:	af00      	add	r7, sp, #0
 801c702:	60f8      	str	r0, [r7, #12]
 801c704:	60b9      	str	r1, [r7, #8]
 801c706:	4613      	mov	r3, r2
 801c708:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801c70a:	68fb      	ldr	r3, [r7, #12]
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d109      	bne.n	801c724 <udp_connect+0x28>
 801c710:	4b2c      	ldr	r3, [pc, #176]	; (801c7c4 <udp_connect+0xc8>)
 801c712:	f240 4235 	movw	r2, #1077	; 0x435
 801c716:	492c      	ldr	r1, [pc, #176]	; (801c7c8 <udp_connect+0xcc>)
 801c718:	482c      	ldr	r0, [pc, #176]	; (801c7cc <udp_connect+0xd0>)
 801c71a:	f000 ffed 	bl	801d6f8 <iprintf>
 801c71e:	f06f 030f 	mvn.w	r3, #15
 801c722:	e04b      	b.n	801c7bc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801c724:	68bb      	ldr	r3, [r7, #8]
 801c726:	2b00      	cmp	r3, #0
 801c728:	d109      	bne.n	801c73e <udp_connect+0x42>
 801c72a:	4b26      	ldr	r3, [pc, #152]	; (801c7c4 <udp_connect+0xc8>)
 801c72c:	f240 4236 	movw	r2, #1078	; 0x436
 801c730:	4927      	ldr	r1, [pc, #156]	; (801c7d0 <udp_connect+0xd4>)
 801c732:	4826      	ldr	r0, [pc, #152]	; (801c7cc <udp_connect+0xd0>)
 801c734:	f000 ffe0 	bl	801d6f8 <iprintf>
 801c738:	f06f 030f 	mvn.w	r3, #15
 801c73c:	e03e      	b.n	801c7bc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801c73e:	68fb      	ldr	r3, [r7, #12]
 801c740:	8a5b      	ldrh	r3, [r3, #18]
 801c742:	2b00      	cmp	r3, #0
 801c744:	d10f      	bne.n	801c766 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c746:	68f9      	ldr	r1, [r7, #12]
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	8a5b      	ldrh	r3, [r3, #18]
 801c74c:	461a      	mov	r2, r3
 801c74e:	68f8      	ldr	r0, [r7, #12]
 801c750:	f7ff ff4c 	bl	801c5ec <udp_bind>
 801c754:	4603      	mov	r3, r0
 801c756:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801c758:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d002      	beq.n	801c766 <udp_connect+0x6a>
      return err;
 801c760:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c764:	e02a      	b.n	801c7bc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c766:	68bb      	ldr	r3, [r7, #8]
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d002      	beq.n	801c772 <udp_connect+0x76>
 801c76c:	68bb      	ldr	r3, [r7, #8]
 801c76e:	681b      	ldr	r3, [r3, #0]
 801c770:	e000      	b.n	801c774 <udp_connect+0x78>
 801c772:	2300      	movs	r3, #0
 801c774:	68fa      	ldr	r2, [r7, #12]
 801c776:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	88fa      	ldrh	r2, [r7, #6]
 801c77c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	7c1b      	ldrb	r3, [r3, #16]
 801c782:	f043 0304 	orr.w	r3, r3, #4
 801c786:	b2da      	uxtb	r2, r3
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c78c:	4b11      	ldr	r3, [pc, #68]	; (801c7d4 <udp_connect+0xd8>)
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	617b      	str	r3, [r7, #20]
 801c792:	e008      	b.n	801c7a6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801c794:	68fa      	ldr	r2, [r7, #12]
 801c796:	697b      	ldr	r3, [r7, #20]
 801c798:	429a      	cmp	r2, r3
 801c79a:	d101      	bne.n	801c7a0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801c79c:	2300      	movs	r3, #0
 801c79e:	e00d      	b.n	801c7bc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c7a0:	697b      	ldr	r3, [r7, #20]
 801c7a2:	68db      	ldr	r3, [r3, #12]
 801c7a4:	617b      	str	r3, [r7, #20]
 801c7a6:	697b      	ldr	r3, [r7, #20]
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d1f3      	bne.n	801c794 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c7ac:	4b09      	ldr	r3, [pc, #36]	; (801c7d4 <udp_connect+0xd8>)
 801c7ae:	681a      	ldr	r2, [r3, #0]
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c7b4:	4a07      	ldr	r2, [pc, #28]	; (801c7d4 <udp_connect+0xd8>)
 801c7b6:	68fb      	ldr	r3, [r7, #12]
 801c7b8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c7ba:	2300      	movs	r3, #0
}
 801c7bc:	4618      	mov	r0, r3
 801c7be:	3718      	adds	r7, #24
 801c7c0:	46bd      	mov	sp, r7
 801c7c2:	bd80      	pop	{r7, pc}
 801c7c4:	08022598 	.word	0x08022598
 801c7c8:	08022894 	.word	0x08022894
 801c7cc:	08022608 	.word	0x08022608
 801c7d0:	080228b0 	.word	0x080228b0
 801c7d4:	2000ba80 	.word	0x2000ba80

0801c7d8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c7d8:	b580      	push	{r7, lr}
 801c7da:	b084      	sub	sp, #16
 801c7dc:	af00      	add	r7, sp, #0
 801c7de:	60f8      	str	r0, [r7, #12]
 801c7e0:	60b9      	str	r1, [r7, #8]
 801c7e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d107      	bne.n	801c7fa <udp_recv+0x22>
 801c7ea:	4b08      	ldr	r3, [pc, #32]	; (801c80c <udp_recv+0x34>)
 801c7ec:	f240 428a 	movw	r2, #1162	; 0x48a
 801c7f0:	4907      	ldr	r1, [pc, #28]	; (801c810 <udp_recv+0x38>)
 801c7f2:	4808      	ldr	r0, [pc, #32]	; (801c814 <udp_recv+0x3c>)
 801c7f4:	f000 ff80 	bl	801d6f8 <iprintf>
 801c7f8:	e005      	b.n	801c806 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	68ba      	ldr	r2, [r7, #8]
 801c7fe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	687a      	ldr	r2, [r7, #4]
 801c804:	61da      	str	r2, [r3, #28]
}
 801c806:	3710      	adds	r7, #16
 801c808:	46bd      	mov	sp, r7
 801c80a:	bd80      	pop	{r7, pc}
 801c80c:	08022598 	.word	0x08022598
 801c810:	080228e8 	.word	0x080228e8
 801c814:	08022608 	.word	0x08022608

0801c818 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c818:	b580      	push	{r7, lr}
 801c81a:	b084      	sub	sp, #16
 801c81c:	af00      	add	r7, sp, #0
 801c81e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	2b00      	cmp	r3, #0
 801c824:	d107      	bne.n	801c836 <udp_remove+0x1e>
 801c826:	4b19      	ldr	r3, [pc, #100]	; (801c88c <udp_remove+0x74>)
 801c828:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801c82c:	4918      	ldr	r1, [pc, #96]	; (801c890 <udp_remove+0x78>)
 801c82e:	4819      	ldr	r0, [pc, #100]	; (801c894 <udp_remove+0x7c>)
 801c830:	f000 ff62 	bl	801d6f8 <iprintf>
 801c834:	e026      	b.n	801c884 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c836:	4b18      	ldr	r3, [pc, #96]	; (801c898 <udp_remove+0x80>)
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	687a      	ldr	r2, [r7, #4]
 801c83c:	429a      	cmp	r2, r3
 801c83e:	d105      	bne.n	801c84c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c840:	4b15      	ldr	r3, [pc, #84]	; (801c898 <udp_remove+0x80>)
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	68db      	ldr	r3, [r3, #12]
 801c846:	4a14      	ldr	r2, [pc, #80]	; (801c898 <udp_remove+0x80>)
 801c848:	6013      	str	r3, [r2, #0]
 801c84a:	e017      	b.n	801c87c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c84c:	4b12      	ldr	r3, [pc, #72]	; (801c898 <udp_remove+0x80>)
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	60fb      	str	r3, [r7, #12]
 801c852:	e010      	b.n	801c876 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	68db      	ldr	r3, [r3, #12]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d009      	beq.n	801c870 <udp_remove+0x58>
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	68db      	ldr	r3, [r3, #12]
 801c860:	687a      	ldr	r2, [r7, #4]
 801c862:	429a      	cmp	r2, r3
 801c864:	d104      	bne.n	801c870 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	68da      	ldr	r2, [r3, #12]
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	60da      	str	r2, [r3, #12]
        break;
 801c86e:	e005      	b.n	801c87c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	68db      	ldr	r3, [r3, #12]
 801c874:	60fb      	str	r3, [r7, #12]
 801c876:	68fb      	ldr	r3, [r7, #12]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d1eb      	bne.n	801c854 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c87c:	6879      	ldr	r1, [r7, #4]
 801c87e:	2000      	movs	r0, #0
 801c880:	f7f8 fcde 	bl	8015240 <memp_free>
}
 801c884:	3710      	adds	r7, #16
 801c886:	46bd      	mov	sp, r7
 801c888:	bd80      	pop	{r7, pc}
 801c88a:	bf00      	nop
 801c88c:	08022598 	.word	0x08022598
 801c890:	08022900 	.word	0x08022900
 801c894:	08022608 	.word	0x08022608
 801c898:	2000ba80 	.word	0x2000ba80

0801c89c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c89c:	b580      	push	{r7, lr}
 801c89e:	b082      	sub	sp, #8
 801c8a0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c8a2:	2000      	movs	r0, #0
 801c8a4:	f7f8 fc56 	bl	8015154 <memp_malloc>
 801c8a8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	d007      	beq.n	801c8c0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c8b0:	2220      	movs	r2, #32
 801c8b2:	2100      	movs	r1, #0
 801c8b4:	6878      	ldr	r0, [r7, #4]
 801c8b6:	f000 fadc 	bl	801ce72 <memset>
    pcb->ttl = UDP_TTL;
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	22ff      	movs	r2, #255	; 0xff
 801c8be:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c8c0:	687b      	ldr	r3, [r7, #4]
}
 801c8c2:	4618      	mov	r0, r3
 801c8c4:	3708      	adds	r7, #8
 801c8c6:	46bd      	mov	sp, r7
 801c8c8:	bd80      	pop	{r7, pc}
	...

0801c8cc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c8cc:	b480      	push	{r7}
 801c8ce:	b085      	sub	sp, #20
 801c8d0:	af00      	add	r7, sp, #0
 801c8d2:	6078      	str	r0, [r7, #4]
 801c8d4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d01e      	beq.n	801c91a <udp_netif_ip_addr_changed+0x4e>
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d01a      	beq.n	801c91a <udp_netif_ip_addr_changed+0x4e>
 801c8e4:	683b      	ldr	r3, [r7, #0]
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	d017      	beq.n	801c91a <udp_netif_ip_addr_changed+0x4e>
 801c8ea:	683b      	ldr	r3, [r7, #0]
 801c8ec:	681b      	ldr	r3, [r3, #0]
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d013      	beq.n	801c91a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c8f2:	4b0d      	ldr	r3, [pc, #52]	; (801c928 <udp_netif_ip_addr_changed+0x5c>)
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	60fb      	str	r3, [r7, #12]
 801c8f8:	e00c      	b.n	801c914 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	681a      	ldr	r2, [r3, #0]
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	681b      	ldr	r3, [r3, #0]
 801c902:	429a      	cmp	r2, r3
 801c904:	d103      	bne.n	801c90e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c906:	683b      	ldr	r3, [r7, #0]
 801c908:	681a      	ldr	r2, [r3, #0]
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	68db      	ldr	r3, [r3, #12]
 801c912:	60fb      	str	r3, [r7, #12]
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	2b00      	cmp	r3, #0
 801c918:	d1ef      	bne.n	801c8fa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c91a:	bf00      	nop
 801c91c:	3714      	adds	r7, #20
 801c91e:	46bd      	mov	sp, r7
 801c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c924:	4770      	bx	lr
 801c926:	bf00      	nop
 801c928:	2000ba80 	.word	0x2000ba80

0801c92c <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:





Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 801c92c:	b580      	push	{r7, lr}
 801c92e:	b082      	sub	sp, #8
 801c930:	af00      	add	r7, sp, #0
 801c932:	6078      	str	r0, [r7, #4]
 801c934:	6039      	str	r1, [r7, #0]
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	683a      	ldr	r2, [r7, #0]
 801c93a:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	683a      	ldr	r2, [r7, #0]
 801c940:	601a      	str	r2, [r3, #0]
	console_semaphore = osSemaphoreNew(256, 1, nullptr);
 801c942:	2200      	movs	r2, #0
 801c944:	2101      	movs	r1, #1
 801c946:	f44f 7080 	mov.w	r0, #256	; 0x100
 801c94a:	f7f0 f909 	bl	800cb60 <osSemaphoreNew>
 801c94e:	4602      	mov	r2, r0
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	605a      	str	r2, [r3, #4]
}
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	4618      	mov	r0, r3
 801c958:	3708      	adds	r7, #8
 801c95a:	46bd      	mov	sp, r7
 801c95c:	bd80      	pop	{r7, pc}

0801c95e <_ZN7Console8transmitEPhm>:

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
 801c95e:	b580      	push	{r7, lr}
 801c960:	b084      	sub	sp, #16
 801c962:	af00      	add	r7, sp, #0
 801c964:	60f8      	str	r0, [r7, #12]
 801c966:	60b9      	str	r1, [r7, #8]
 801c968:	607a      	str	r2, [r7, #4]
	while(HAL_HSEM_IsSemTaken(HARDWARE_SEMAPHORE));
 801c96a:	2002      	movs	r0, #2
 801c96c:	f7ea fb10 	bl	8006f90 <HAL_HSEM_IsSemTaken>
 801c970:	4603      	mov	r3, r0
 801c972:	2b00      	cmp	r3, #0
 801c974:	bf14      	ite	ne
 801c976:	2301      	movne	r3, #1
 801c978:	2300      	moveq	r3, #0
 801c97a:	b2db      	uxtb	r3, r3
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d000      	beq.n	801c982 <_ZN7Console8transmitEPhm+0x24>
 801c980:	e7f3      	b.n	801c96a <_ZN7Console8transmitEPhm+0xc>

	HAL_HSEM_Take(HARDWARE_SEMAPHORE, 2);
 801c982:	2102      	movs	r1, #2
 801c984:	2002      	movs	r0, #2
 801c986:	f7ea fac7 	bl	8006f18 <HAL_HSEM_Take>
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	6818      	ldr	r0, [r3, #0]
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	b29a      	uxth	r2, r3
 801c992:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801c996:	68b9      	ldr	r1, [r7, #8]
 801c998:	f7ee f87a 	bl	800aa90 <HAL_UART_Transmit>
	HAL_HSEM_Release(HARDWARE_SEMAPHORE, 2);
 801c99c:	2102      	movs	r1, #2
 801c99e:	2002      	movs	r0, #2
 801c9a0:	f7ea fb0c 	bl	8006fbc <HAL_HSEM_Release>
}
 801c9a4:	bf00      	nop
 801c9a6:	3710      	adds	r7, #16
 801c9a8:	46bd      	mov	sp, r7
 801c9aa:	bd80      	pop	{r7, pc}

0801c9ac <_ZN7Console6printfEPKcz>:

void Console::printf(const char *format, ...) {
 801c9ac:	b40e      	push	{r1, r2, r3}
 801c9ae:	b590      	push	{r4, r7, lr}
 801c9b0:	b084      	sub	sp, #16
 801c9b2:	af00      	add	r7, sp, #0
 801c9b4:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 801c9b6:	f107 0320 	add.w	r3, r7, #32
 801c9ba:	60fb      	str	r3, [r7, #12]

	if(vsprintf(buffer, format, args) > 0) {
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	3308      	adds	r3, #8
 801c9c0:	68fa      	ldr	r2, [r7, #12]
 801c9c2:	69f9      	ldr	r1, [r7, #28]
 801c9c4:	4618      	mov	r0, r3
 801c9c6:	f000 ff3d 	bl	801d844 <vsiprintf>
 801c9ca:	4603      	mov	r3, r0
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	bfcc      	ite	gt
 801c9d0:	2301      	movgt	r3, #1
 801c9d2:	2300      	movle	r3, #0
 801c9d4:	b2db      	uxtb	r3, r3
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d00d      	beq.n	801c9f6 <_ZN7Console6printfEPKcz+0x4a>
		transmit((uint8_t*) buffer, strlen(buffer));
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	f103 0408 	add.w	r4, r3, #8
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	3308      	adds	r3, #8
 801c9e4:	4618      	mov	r0, r3
 801c9e6:	f7e3 fc7b 	bl	80002e0 <strlen>
 801c9ea:	4603      	mov	r3, r0
 801c9ec:	461a      	mov	r2, r3
 801c9ee:	4621      	mov	r1, r4
 801c9f0:	6878      	ldr	r0, [r7, #4]
 801c9f2:	f7ff ffb4 	bl	801c95e <_ZN7Console8transmitEPhm>
	}

	va_end(args);
}
 801c9f6:	bf00      	nop
 801c9f8:	3710      	adds	r7, #16
 801c9fa:	46bd      	mov	sp, r7
 801c9fc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801ca00:	b003      	add	sp, #12
 801ca02:	4770      	bx	lr

0801ca04 <_Z41__static_initialization_and_destruction_0ii>:


Console console(&huart3);
Monitor monitor;
Profiler profiler;
Terminal terminal;
 801ca04:	b580      	push	{r7, lr}
 801ca06:	b082      	sub	sp, #8
 801ca08:	af00      	add	r7, sp, #0
 801ca0a:	6078      	str	r0, [r7, #4]
 801ca0c:	6039      	str	r1, [r7, #0]
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	2b01      	cmp	r3, #1
 801ca12:	d108      	bne.n	801ca26 <_Z41__static_initialization_and_destruction_0ii+0x22>
 801ca14:	683b      	ldr	r3, [r7, #0]
 801ca16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ca1a:	4293      	cmp	r3, r2
 801ca1c:	d103      	bne.n	801ca26 <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 801ca1e:	4904      	ldr	r1, [pc, #16]	; (801ca30 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 801ca20:	4804      	ldr	r0, [pc, #16]	; (801ca34 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801ca22:	f7ff ff83 	bl	801c92c <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Terminal terminal;
 801ca26:	bf00      	nop
 801ca28:	3708      	adds	r7, #8
 801ca2a:	46bd      	mov	sp, r7
 801ca2c:	bd80      	pop	{r7, pc}
 801ca2e:	bf00      	nop
 801ca30:	20008290 	.word	0x20008290
 801ca34:	20007768 	.word	0x20007768

0801ca38 <_GLOBAL__sub_I_console>:
 801ca38:	b580      	push	{r7, lr}
 801ca3a:	af00      	add	r7, sp, #0
 801ca3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ca40:	2001      	movs	r0, #1
 801ca42:	f7ff ffdf 	bl	801ca04 <_Z41__static_initialization_and_destruction_0ii>
 801ca46:	bd80      	pop	{r7, pc}

0801ca48 <_ZN14WatchdogThread4initEv>:
#include "iwdg.h"

#include "Debug/Debug.h"
#include "usart.h"

void WatchdogThread::init() {
 801ca48:	b480      	push	{r7}
 801ca4a:	b083      	sub	sp, #12
 801ca4c:	af00      	add	r7, sp, #0
 801ca4e:	6078      	str	r0, [r7, #4]

}
 801ca50:	bf00      	nop
 801ca52:	370c      	adds	r7, #12
 801ca54:	46bd      	mov	sp, r7
 801ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca5a:	4770      	bx	lr

0801ca5c <_ZN14WatchdogThread4loopEv>:

void WatchdogThread::loop() {
 801ca5c:	b580      	push	{r7, lr}
 801ca5e:	b082      	sub	sp, #8
 801ca60:	af00      	add	r7, sp, #0
 801ca62:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca68:	4618      	mov	r0, r3
 801ca6a:	f7ea fc4d 	bl	8007308 <HAL_IWDG_Refresh>
	osDelay(100);
 801ca6e:	2064      	movs	r0, #100	; 0x64
 801ca70:	f7ef ff00 	bl	800c874 <osDelay>
}
 801ca74:	bf00      	nop
 801ca76:	3708      	adds	r7, #8
 801ca78:	46bd      	mov	sp, r7
 801ca7a:	bd80      	pop	{r7, pc}

0801ca7c <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority_t priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority_t priority, uint32_t stackSize);
	~Thread() {};
 801ca7c:	b480      	push	{r7}
 801ca7e:	b083      	sub	sp, #12
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	6078      	str	r0, [r7, #4]
 801ca84:	4a04      	ldr	r2, [pc, #16]	; (801ca98 <_ZN6ThreadD1Ev+0x1c>)
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	601a      	str	r2, [r3, #0]
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	4618      	mov	r0, r3
 801ca8e:	370c      	adds	r7, #12
 801ca90:	46bd      	mov	sp, r7
 801ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca96:	4770      	bx	lr
 801ca98:	08022aec 	.word	0x08022aec

0801ca9c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 801ca9c:	b580      	push	{r7, lr}
 801ca9e:	b082      	sub	sp, #8
 801caa0:	af00      	add	r7, sp, #0
 801caa2:	6078      	str	r0, [r7, #4]
 801caa4:	6039      	str	r1, [r7, #0]
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	4907      	ldr	r1, [pc, #28]	; (801cac8 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 801caaa:	4618      	mov	r0, r3
 801caac:	f000 f8b2 	bl	801cc14 <_ZN6ThreadC1EPKc>
 801cab0:	4a06      	ldr	r2, [pc, #24]	; (801cacc <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	601a      	str	r2, [r3, #0]
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	683a      	ldr	r2, [r7, #0]
 801caba:	62da      	str	r2, [r3, #44]	; 0x2c
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	4618      	mov	r0, r3
 801cac0:	3708      	adds	r7, #8
 801cac2:	46bd      	mov	sp, r7
 801cac4:	bd80      	pop	{r7, pc}
 801cac6:	bf00      	nop
 801cac8:	08022918 	.word	0x08022918
 801cacc:	08022adc 	.word	0x08022adc

0801cad0 <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 801cad0:	b580      	push	{r7, lr}
 801cad2:	b082      	sub	sp, #8
 801cad4:	af00      	add	r7, sp, #0
 801cad6:	6078      	str	r0, [r7, #4]
 801cad8:	4a05      	ldr	r2, [pc, #20]	; (801caf0 <_ZN14WatchdogThreadD1Ev+0x20>)
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	601a      	str	r2, [r3, #0]
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	4618      	mov	r0, r3
 801cae2:	f7ff ffcb 	bl	801ca7c <_ZN6ThreadD1Ev>
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	4618      	mov	r0, r3
 801caea:	3708      	adds	r7, #8
 801caec:	46bd      	mov	sp, r7
 801caee:	bd80      	pop	{r7, pc}
 801caf0:	08022adc 	.word	0x08022adc

0801caf4 <__tcf_0>:
}
#endif

#ifdef CORE_CM7
void initCortexM7() {
	static WatchdogThread watchdog(&hiwdg1);
 801caf4:	b580      	push	{r7, lr}
 801caf6:	af00      	add	r7, sp, #0
 801caf8:	4801      	ldr	r0, [pc, #4]	; (801cb00 <__tcf_0+0xc>)
 801cafa:	f7ff ffe9 	bl	801cad0 <_ZN14WatchdogThreadD1Ev>
 801cafe:	bd80      	pop	{r7, pc}
 801cb00:	20007870 	.word	0x20007870

0801cb04 <_ZN10LWIPThreadD1Ev>:

#include "Thread.h"

#include <stdint.h>

class LWIPThread : public Thread {
 801cb04:	b580      	push	{r7, lr}
 801cb06:	b082      	sub	sp, #8
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	6078      	str	r0, [r7, #4]
 801cb0c:	4a05      	ldr	r2, [pc, #20]	; (801cb24 <_ZN10LWIPThreadD1Ev+0x20>)
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	601a      	str	r2, [r3, #0]
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	4618      	mov	r0, r3
 801cb16:	f7ff ffb1 	bl	801ca7c <_ZN6ThreadD1Ev>
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	4618      	mov	r0, r3
 801cb1e:	3708      	adds	r7, #8
 801cb20:	46bd      	mov	sp, r7
 801cb22:	bd80      	pop	{r7, pc}
 801cb24:	08022afc 	.word	0x08022afc

0801cb28 <__tcf_1>:
	static LWIPThread lwip("localhost", 42666);
 801cb28:	b580      	push	{r7, lr}
 801cb2a:	af00      	add	r7, sp, #0
 801cb2c:	4801      	ldr	r0, [pc, #4]	; (801cb34 <__tcf_1+0xc>)
 801cb2e:	f7ff ffe9 	bl	801cb04 <_ZN10LWIPThreadD1Ev>
 801cb32:	bd80      	pop	{r7, pc}
 801cb34:	200078a4 	.word	0x200078a4

0801cb38 <initCortexM7>:
void initCortexM7() {
 801cb38:	b580      	push	{r7, lr}
 801cb3a:	af00      	add	r7, sp, #0
	static WatchdogThread watchdog(&hiwdg1);
 801cb3c:	4b24      	ldr	r3, [pc, #144]	; (801cbd0 <initCortexM7+0x98>)
 801cb3e:	781b      	ldrb	r3, [r3, #0]
 801cb40:	f3bf 8f5b 	dmb	ish
 801cb44:	b2db      	uxtb	r3, r3
 801cb46:	f003 0301 	and.w	r3, r3, #1
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	bf0c      	ite	eq
 801cb4e:	2301      	moveq	r3, #1
 801cb50:	2300      	movne	r3, #0
 801cb52:	b2db      	uxtb	r3, r3
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d014      	beq.n	801cb82 <initCortexM7+0x4a>
 801cb58:	481d      	ldr	r0, [pc, #116]	; (801cbd0 <initCortexM7+0x98>)
 801cb5a:	f000 f8eb 	bl	801cd34 <__cxa_guard_acquire>
 801cb5e:	4603      	mov	r3, r0
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	bf14      	ite	ne
 801cb64:	2301      	movne	r3, #1
 801cb66:	2300      	moveq	r3, #0
 801cb68:	b2db      	uxtb	r3, r3
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d009      	beq.n	801cb82 <initCortexM7+0x4a>
 801cb6e:	4919      	ldr	r1, [pc, #100]	; (801cbd4 <initCortexM7+0x9c>)
 801cb70:	4819      	ldr	r0, [pc, #100]	; (801cbd8 <initCortexM7+0xa0>)
 801cb72:	f7ff ff93 	bl	801ca9c <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 801cb76:	4816      	ldr	r0, [pc, #88]	; (801cbd0 <initCortexM7+0x98>)
 801cb78:	f000 f8e8 	bl	801cd4c <__cxa_guard_release>
 801cb7c:	4817      	ldr	r0, [pc, #92]	; (801cbdc <initCortexM7+0xa4>)
 801cb7e:	f000 f903 	bl	801cd88 <atexit>
	static LWIPThread lwip("localhost", 42666);
 801cb82:	4b17      	ldr	r3, [pc, #92]	; (801cbe0 <initCortexM7+0xa8>)
 801cb84:	781b      	ldrb	r3, [r3, #0]
 801cb86:	f3bf 8f5b 	dmb	ish
 801cb8a:	b2db      	uxtb	r3, r3
 801cb8c:	f003 0301 	and.w	r3, r3, #1
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	bf0c      	ite	eq
 801cb94:	2301      	moveq	r3, #1
 801cb96:	2300      	movne	r3, #0
 801cb98:	b2db      	uxtb	r3, r3
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d016      	beq.n	801cbcc <initCortexM7+0x94>
 801cb9e:	4810      	ldr	r0, [pc, #64]	; (801cbe0 <initCortexM7+0xa8>)
 801cba0:	f000 f8c8 	bl	801cd34 <__cxa_guard_acquire>
 801cba4:	4603      	mov	r3, r0
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	bf14      	ite	ne
 801cbaa:	2301      	movne	r3, #1
 801cbac:	2300      	moveq	r3, #0
 801cbae:	b2db      	uxtb	r3, r3
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d00b      	beq.n	801cbcc <initCortexM7+0x94>
 801cbb4:	f24a 62aa 	movw	r2, #42666	; 0xa6aa
 801cbb8:	490a      	ldr	r1, [pc, #40]	; (801cbe4 <initCortexM7+0xac>)
 801cbba:	480b      	ldr	r0, [pc, #44]	; (801cbe8 <initCortexM7+0xb0>)
 801cbbc:	f000 f872 	bl	801cca4 <_ZN10LWIPThreadC1EPKct>
 801cbc0:	4807      	ldr	r0, [pc, #28]	; (801cbe0 <initCortexM7+0xa8>)
 801cbc2:	f000 f8c3 	bl	801cd4c <__cxa_guard_release>
 801cbc6:	4809      	ldr	r0, [pc, #36]	; (801cbec <initCortexM7+0xb4>)
 801cbc8:	f000 f8de 	bl	801cd88 <atexit>
}
 801cbcc:	bf00      	nop
 801cbce:	bd80      	pop	{r7, pc}
 801cbd0:	200078a0 	.word	0x200078a0
 801cbd4:	20007a7c 	.word	0x20007a7c
 801cbd8:	20007870 	.word	0x20007870
 801cbdc:	0801caf5 	.word	0x0801caf5
 801cbe0:	200078d8 	.word	0x200078d8
 801cbe4:	08022924 	.word	0x08022924
 801cbe8:	200078a4 	.word	0x200078a4
 801cbec:	0801cb29 	.word	0x0801cb29

0801cbf0 <_Z10__task_runPv>:

#include "usart.h"
#define DEFAULT_STACK_SIZE (512)


void __task_run(void* arg) {
 801cbf0:	b580      	push	{r7, lr}
 801cbf2:	b084      	sub	sp, #16
 801cbf4:	af00      	add	r7, sp, #0
 801cbf6:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	60fb      	str	r3, [r7, #12]

	thread->init();
 801cbfc:	68fb      	ldr	r3, [r7, #12]
 801cbfe:	681b      	ldr	r3, [r3, #0]
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	68f8      	ldr	r0, [r7, #12]
 801cc04:	4798      	blx	r3

	while(true) {
		thread->loop();
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	681b      	ldr	r3, [r3, #0]
 801cc0a:	3304      	adds	r3, #4
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	68f8      	ldr	r0, [r7, #12]
 801cc10:	4798      	blx	r3
 801cc12:	e7f8      	b.n	801cc06 <_Z10__task_runPv+0x16>

0801cc14 <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority_t) osPriorityNormal) {
 801cc14:	b580      	push	{r7, lr}
 801cc16:	b082      	sub	sp, #8
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	6078      	str	r0, [r7, #4]
 801cc1c:	6039      	str	r1, [r7, #0]
 801cc1e:	2218      	movs	r2, #24
 801cc20:	6839      	ldr	r1, [r7, #0]
 801cc22:	6878      	ldr	r0, [r7, #4]
 801cc24:	f000 f805 	bl	801cc32 <_ZN6ThreadC1EPKc12osPriority_t>
	;
}
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	4618      	mov	r0, r3
 801cc2c:	3708      	adds	r7, #8
 801cc2e:	46bd      	mov	sp, r7
 801cc30:	bd80      	pop	{r7, pc}

0801cc32 <_ZN6ThreadC1EPKc12osPriority_t>:

Thread::Thread(const char* name, osPriority_t priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 801cc32:	b580      	push	{r7, lr}
 801cc34:	b084      	sub	sp, #16
 801cc36:	af00      	add	r7, sp, #0
 801cc38:	60f8      	str	r0, [r7, #12]
 801cc3a:	60b9      	str	r1, [r7, #8]
 801cc3c:	607a      	str	r2, [r7, #4]
 801cc3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 801cc42:	687a      	ldr	r2, [r7, #4]
 801cc44:	68b9      	ldr	r1, [r7, #8]
 801cc46:	68f8      	ldr	r0, [r7, #12]
 801cc48:	f000 f806 	bl	801cc58 <_ZN6ThreadC1EPKc12osPriority_tm>
	;
}
 801cc4c:	68fb      	ldr	r3, [r7, #12]
 801cc4e:	4618      	mov	r0, r3
 801cc50:	3710      	adds	r7, #16
 801cc52:	46bd      	mov	sp, r7
 801cc54:	bd80      	pop	{r7, pc}
	...

0801cc58 <_ZN6ThreadC1EPKc12osPriority_tm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority_t) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority_t priority, uint32_t stackSize) {
 801cc58:	b580      	push	{r7, lr}
 801cc5a:	b084      	sub	sp, #16
 801cc5c:	af00      	add	r7, sp, #0
 801cc5e:	60f8      	str	r0, [r7, #12]
 801cc60:	60b9      	str	r1, [r7, #8]
 801cc62:	607a      	str	r2, [r7, #4]
 801cc64:	603b      	str	r3, [r7, #0]
 801cc66:	4a0d      	ldr	r2, [pc, #52]	; (801cc9c <_ZN6ThreadC1EPKc12osPriority_tm+0x44>)
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	601a      	str	r2, [r3, #0]
	attributes.name = name;
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	68ba      	ldr	r2, [r7, #8]
 801cc70:	605a      	str	r2, [r3, #4]
	attributes.priority = priority;
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	687a      	ldr	r2, [r7, #4]
 801cc76:	61da      	str	r2, [r3, #28]
	attributes.stack_size = stackSize;
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	683a      	ldr	r2, [r7, #0]
 801cc7c:	619a      	str	r2, [r3, #24]

	this->handle = osThreadNew(__task_run, this, &attributes);
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	3304      	adds	r3, #4
 801cc82:	461a      	mov	r2, r3
 801cc84:	68f9      	ldr	r1, [r7, #12]
 801cc86:	4806      	ldr	r0, [pc, #24]	; (801cca0 <_ZN6ThreadC1EPKc12osPriority_tm+0x48>)
 801cc88:	f7ef fd4e 	bl	800c728 <osThreadNew>
 801cc8c:	4602      	mov	r2, r0
 801cc8e:	68fb      	ldr	r3, [r7, #12]
 801cc90:	629a      	str	r2, [r3, #40]	; 0x28
}
 801cc92:	68fb      	ldr	r3, [r7, #12]
 801cc94:	4618      	mov	r0, r3
 801cc96:	3710      	adds	r7, #16
 801cc98:	46bd      	mov	sp, r7
 801cc9a:	bd80      	pop	{r7, pc}
 801cc9c:	08022aec 	.word	0x08022aec
 801cca0:	0801cbf1 	.word	0x0801cbf1

0801cca4 <_ZN10LWIPThreadC1EPKct>:
#include "Debug/Debug.h"

#include <lwip.h>


LWIPThread::LWIPThread(const char* ip, const uint16_t port) : Thread("Client thread"), ip(ip), port(port) {
 801cca4:	b580      	push	{r7, lr}
 801cca6:	b084      	sub	sp, #16
 801cca8:	af00      	add	r7, sp, #0
 801ccaa:	60f8      	str	r0, [r7, #12]
 801ccac:	60b9      	str	r1, [r7, #8]
 801ccae:	4613      	mov	r3, r2
 801ccb0:	80fb      	strh	r3, [r7, #6]
 801ccb2:	68fb      	ldr	r3, [r7, #12]
 801ccb4:	4908      	ldr	r1, [pc, #32]	; (801ccd8 <_ZN10LWIPThreadC1EPKct+0x34>)
 801ccb6:	4618      	mov	r0, r3
 801ccb8:	f7ff ffac 	bl	801cc14 <_ZN6ThreadC1EPKc>
 801ccbc:	4a07      	ldr	r2, [pc, #28]	; (801ccdc <_ZN10LWIPThreadC1EPKct+0x38>)
 801ccbe:	68fb      	ldr	r3, [r7, #12]
 801ccc0:	601a      	str	r2, [r3, #0]
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	68ba      	ldr	r2, [r7, #8]
 801ccc6:	62da      	str	r2, [r3, #44]	; 0x2c
 801ccc8:	68fb      	ldr	r3, [r7, #12]
 801ccca:	88fa      	ldrh	r2, [r7, #6]
 801cccc:	861a      	strh	r2, [r3, #48]	; 0x30

}
 801ccce:	68fb      	ldr	r3, [r7, #12]
 801ccd0:	4618      	mov	r0, r3
 801ccd2:	3710      	adds	r7, #16
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	bd80      	pop	{r7, pc}
 801ccd8:	08022930 	.word	0x08022930
 801ccdc:	08022afc 	.word	0x08022afc

0801cce0 <_ZN10LWIPThread4initEv>:

void LWIPThread::init() {
 801cce0:	b580      	push	{r7, lr}
 801cce2:	b082      	sub	sp, #8
 801cce4:	af00      	add	r7, sp, #0
 801cce6:	6078      	str	r0, [r7, #4]
	osDelay(50); // Time to get the shell loaded by Cortex M4
 801cce8:	2032      	movs	r0, #50	; 0x32
 801ccea:	f7ef fdc3 	bl	800c874 <osDelay>

	console.printf("Initializing LWIP... ");
 801ccee:	4909      	ldr	r1, [pc, #36]	; (801cd14 <_ZN10LWIPThread4initEv+0x34>)
 801ccf0:	4809      	ldr	r0, [pc, #36]	; (801cd18 <_ZN10LWIPThread4initEv+0x38>)
 801ccf2:	f7ff fe5b 	bl	801c9ac <_ZN7Console6printfEPKcz>
	MX_LWIP_Init();
 801ccf6:	f7ee ff99 	bl	800bc2c <MX_LWIP_Init>
	osDelay(2000);
 801ccfa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801ccfe:	f7ef fdb9 	bl	800c874 <osDelay>
	console.printf("done\n");
 801cd02:	4906      	ldr	r1, [pc, #24]	; (801cd1c <_ZN10LWIPThread4initEv+0x3c>)
 801cd04:	4804      	ldr	r0, [pc, #16]	; (801cd18 <_ZN10LWIPThread4initEv+0x38>)
 801cd06:	f7ff fe51 	bl	801c9ac <_ZN7Console6printfEPKcz>
}
 801cd0a:	bf00      	nop
 801cd0c:	3708      	adds	r7, #8
 801cd0e:	46bd      	mov	sp, r7
 801cd10:	bd80      	pop	{r7, pc}
 801cd12:	bf00      	nop
 801cd14:	08022940 	.word	0x08022940
 801cd18:	20007768 	.word	0x20007768
 801cd1c:	08022958 	.word	0x08022958

0801cd20 <_ZN10LWIPThread4loopEv>:

void LWIPThread::loop() {
 801cd20:	b480      	push	{r7}
 801cd22:	b083      	sub	sp, #12
 801cd24:	af00      	add	r7, sp, #0
 801cd26:	6078      	str	r0, [r7, #4]

}
 801cd28:	bf00      	nop
 801cd2a:	370c      	adds	r7, #12
 801cd2c:	46bd      	mov	sp, r7
 801cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd32:	4770      	bx	lr

0801cd34 <__cxa_guard_acquire>:
 801cd34:	6803      	ldr	r3, [r0, #0]
 801cd36:	07db      	lsls	r3, r3, #31
 801cd38:	d406      	bmi.n	801cd48 <__cxa_guard_acquire+0x14>
 801cd3a:	7843      	ldrb	r3, [r0, #1]
 801cd3c:	b103      	cbz	r3, 801cd40 <__cxa_guard_acquire+0xc>
 801cd3e:	deff      	udf	#255	; 0xff
 801cd40:	2301      	movs	r3, #1
 801cd42:	7043      	strb	r3, [r0, #1]
 801cd44:	4618      	mov	r0, r3
 801cd46:	4770      	bx	lr
 801cd48:	2000      	movs	r0, #0
 801cd4a:	4770      	bx	lr

0801cd4c <__cxa_guard_release>:
 801cd4c:	2301      	movs	r3, #1
 801cd4e:	6003      	str	r3, [r0, #0]
 801cd50:	4770      	bx	lr

0801cd52 <__cxa_pure_virtual>:
 801cd52:	b508      	push	{r3, lr}
 801cd54:	f000 f80c 	bl	801cd70 <_ZSt9terminatev>

0801cd58 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801cd58:	b508      	push	{r3, lr}
 801cd5a:	4780      	blx	r0
 801cd5c:	f000 f80d 	bl	801cd7a <abort>

0801cd60 <_ZSt13get_terminatev>:
 801cd60:	4b02      	ldr	r3, [pc, #8]	; (801cd6c <_ZSt13get_terminatev+0xc>)
 801cd62:	6818      	ldr	r0, [r3, #0]
 801cd64:	f3bf 8f5b 	dmb	ish
 801cd68:	4770      	bx	lr
 801cd6a:	bf00      	nop
 801cd6c:	20000038 	.word	0x20000038

0801cd70 <_ZSt9terminatev>:
 801cd70:	b508      	push	{r3, lr}
 801cd72:	f7ff fff5 	bl	801cd60 <_ZSt13get_terminatev>
 801cd76:	f7ff ffef 	bl	801cd58 <_ZN10__cxxabiv111__terminateEPFvvE>

0801cd7a <abort>:
 801cd7a:	b508      	push	{r3, lr}
 801cd7c:	2006      	movs	r0, #6
 801cd7e:	f000 fd2f 	bl	801d7e0 <raise>
 801cd82:	2001      	movs	r0, #1
 801cd84:	f7e5 f8ca 	bl	8001f1c <_exit>

0801cd88 <atexit>:
 801cd88:	2300      	movs	r3, #0
 801cd8a:	4601      	mov	r1, r0
 801cd8c:	461a      	mov	r2, r3
 801cd8e:	4618      	mov	r0, r3
 801cd90:	f000 be30 	b.w	801d9f4 <__register_exitproc>

0801cd94 <__errno>:
 801cd94:	4b01      	ldr	r3, [pc, #4]	; (801cd9c <__errno+0x8>)
 801cd96:	6818      	ldr	r0, [r3, #0]
 801cd98:	4770      	bx	lr
 801cd9a:	bf00      	nop
 801cd9c:	2000003c 	.word	0x2000003c

0801cda0 <__libc_init_array>:
 801cda0:	b570      	push	{r4, r5, r6, lr}
 801cda2:	4e0d      	ldr	r6, [pc, #52]	; (801cdd8 <__libc_init_array+0x38>)
 801cda4:	4c0d      	ldr	r4, [pc, #52]	; (801cddc <__libc_init_array+0x3c>)
 801cda6:	1ba4      	subs	r4, r4, r6
 801cda8:	10a4      	asrs	r4, r4, #2
 801cdaa:	2500      	movs	r5, #0
 801cdac:	42a5      	cmp	r5, r4
 801cdae:	d109      	bne.n	801cdc4 <__libc_init_array+0x24>
 801cdb0:	4e0b      	ldr	r6, [pc, #44]	; (801cde0 <__libc_init_array+0x40>)
 801cdb2:	4c0c      	ldr	r4, [pc, #48]	; (801cde4 <__libc_init_array+0x44>)
 801cdb4:	f002 fd60 	bl	801f878 <_init>
 801cdb8:	1ba4      	subs	r4, r4, r6
 801cdba:	10a4      	asrs	r4, r4, #2
 801cdbc:	2500      	movs	r5, #0
 801cdbe:	42a5      	cmp	r5, r4
 801cdc0:	d105      	bne.n	801cdce <__libc_init_array+0x2e>
 801cdc2:	bd70      	pop	{r4, r5, r6, pc}
 801cdc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801cdc8:	4798      	blx	r3
 801cdca:	3501      	adds	r5, #1
 801cdcc:	e7ee      	b.n	801cdac <__libc_init_array+0xc>
 801cdce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801cdd2:	4798      	blx	r3
 801cdd4:	3501      	adds	r5, #1
 801cdd6:	e7f2      	b.n	801cdbe <__libc_init_array+0x1e>
 801cdd8:	08022dd0 	.word	0x08022dd0
 801cddc:	08022dd0 	.word	0x08022dd0
 801cde0:	08022dd0 	.word	0x08022dd0
 801cde4:	08022dd8 	.word	0x08022dd8

0801cde8 <__ascii_mbtowc>:
 801cde8:	b082      	sub	sp, #8
 801cdea:	b901      	cbnz	r1, 801cdee <__ascii_mbtowc+0x6>
 801cdec:	a901      	add	r1, sp, #4
 801cdee:	b142      	cbz	r2, 801ce02 <__ascii_mbtowc+0x1a>
 801cdf0:	b14b      	cbz	r3, 801ce06 <__ascii_mbtowc+0x1e>
 801cdf2:	7813      	ldrb	r3, [r2, #0]
 801cdf4:	600b      	str	r3, [r1, #0]
 801cdf6:	7812      	ldrb	r2, [r2, #0]
 801cdf8:	1c10      	adds	r0, r2, #0
 801cdfa:	bf18      	it	ne
 801cdfc:	2001      	movne	r0, #1
 801cdfe:	b002      	add	sp, #8
 801ce00:	4770      	bx	lr
 801ce02:	4610      	mov	r0, r2
 801ce04:	e7fb      	b.n	801cdfe <__ascii_mbtowc+0x16>
 801ce06:	f06f 0001 	mvn.w	r0, #1
 801ce0a:	e7f8      	b.n	801cdfe <__ascii_mbtowc+0x16>

0801ce0c <memcmp>:
 801ce0c:	b530      	push	{r4, r5, lr}
 801ce0e:	2400      	movs	r4, #0
 801ce10:	42a2      	cmp	r2, r4
 801ce12:	d101      	bne.n	801ce18 <memcmp+0xc>
 801ce14:	2000      	movs	r0, #0
 801ce16:	e007      	b.n	801ce28 <memcmp+0x1c>
 801ce18:	5d03      	ldrb	r3, [r0, r4]
 801ce1a:	3401      	adds	r4, #1
 801ce1c:	190d      	adds	r5, r1, r4
 801ce1e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801ce22:	42ab      	cmp	r3, r5
 801ce24:	d0f4      	beq.n	801ce10 <memcmp+0x4>
 801ce26:	1b58      	subs	r0, r3, r5
 801ce28:	bd30      	pop	{r4, r5, pc}

0801ce2a <memcpy>:
 801ce2a:	b510      	push	{r4, lr}
 801ce2c:	1e43      	subs	r3, r0, #1
 801ce2e:	440a      	add	r2, r1
 801ce30:	4291      	cmp	r1, r2
 801ce32:	d100      	bne.n	801ce36 <memcpy+0xc>
 801ce34:	bd10      	pop	{r4, pc}
 801ce36:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ce3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ce3e:	e7f7      	b.n	801ce30 <memcpy+0x6>

0801ce40 <memmove>:
 801ce40:	4288      	cmp	r0, r1
 801ce42:	b510      	push	{r4, lr}
 801ce44:	eb01 0302 	add.w	r3, r1, r2
 801ce48:	d807      	bhi.n	801ce5a <memmove+0x1a>
 801ce4a:	1e42      	subs	r2, r0, #1
 801ce4c:	4299      	cmp	r1, r3
 801ce4e:	d00a      	beq.n	801ce66 <memmove+0x26>
 801ce50:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ce54:	f802 4f01 	strb.w	r4, [r2, #1]!
 801ce58:	e7f8      	b.n	801ce4c <memmove+0xc>
 801ce5a:	4283      	cmp	r3, r0
 801ce5c:	d9f5      	bls.n	801ce4a <memmove+0xa>
 801ce5e:	1881      	adds	r1, r0, r2
 801ce60:	1ad2      	subs	r2, r2, r3
 801ce62:	42d3      	cmn	r3, r2
 801ce64:	d100      	bne.n	801ce68 <memmove+0x28>
 801ce66:	bd10      	pop	{r4, pc}
 801ce68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ce6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801ce70:	e7f7      	b.n	801ce62 <memmove+0x22>

0801ce72 <memset>:
 801ce72:	4402      	add	r2, r0
 801ce74:	4603      	mov	r3, r0
 801ce76:	4293      	cmp	r3, r2
 801ce78:	d100      	bne.n	801ce7c <memset+0xa>
 801ce7a:	4770      	bx	lr
 801ce7c:	f803 1b01 	strb.w	r1, [r3], #1
 801ce80:	e7f9      	b.n	801ce76 <memset+0x4>

0801ce82 <__cvt>:
 801ce82:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce84:	ed2d 8b02 	vpush	{d8}
 801ce88:	eeb0 8b40 	vmov.f64	d8, d0
 801ce8c:	b085      	sub	sp, #20
 801ce8e:	4617      	mov	r7, r2
 801ce90:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ce92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ce94:	ee18 2a90 	vmov	r2, s17
 801ce98:	f025 0520 	bic.w	r5, r5, #32
 801ce9c:	2a00      	cmp	r2, #0
 801ce9e:	bfb6      	itet	lt
 801cea0:	222d      	movlt	r2, #45	; 0x2d
 801cea2:	2200      	movge	r2, #0
 801cea4:	eeb1 8b40 	vneglt.f64	d8, d0
 801cea8:	2d46      	cmp	r5, #70	; 0x46
 801ceaa:	460c      	mov	r4, r1
 801ceac:	701a      	strb	r2, [r3, #0]
 801ceae:	d004      	beq.n	801ceba <__cvt+0x38>
 801ceb0:	2d45      	cmp	r5, #69	; 0x45
 801ceb2:	d100      	bne.n	801ceb6 <__cvt+0x34>
 801ceb4:	3401      	adds	r4, #1
 801ceb6:	2102      	movs	r1, #2
 801ceb8:	e000      	b.n	801cebc <__cvt+0x3a>
 801ceba:	2103      	movs	r1, #3
 801cebc:	ab03      	add	r3, sp, #12
 801cebe:	9301      	str	r3, [sp, #4]
 801cec0:	ab02      	add	r3, sp, #8
 801cec2:	9300      	str	r3, [sp, #0]
 801cec4:	4622      	mov	r2, r4
 801cec6:	4633      	mov	r3, r6
 801cec8:	eeb0 0b48 	vmov.f64	d0, d8
 801cecc:	f000 fe84 	bl	801dbd8 <_dtoa_r>
 801ced0:	2d47      	cmp	r5, #71	; 0x47
 801ced2:	d101      	bne.n	801ced8 <__cvt+0x56>
 801ced4:	07fb      	lsls	r3, r7, #31
 801ced6:	d51e      	bpl.n	801cf16 <__cvt+0x94>
 801ced8:	2d46      	cmp	r5, #70	; 0x46
 801ceda:	eb00 0304 	add.w	r3, r0, r4
 801cede:	d10c      	bne.n	801cefa <__cvt+0x78>
 801cee0:	7802      	ldrb	r2, [r0, #0]
 801cee2:	2a30      	cmp	r2, #48	; 0x30
 801cee4:	d107      	bne.n	801cef6 <__cvt+0x74>
 801cee6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ceea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ceee:	bf1c      	itt	ne
 801cef0:	f1c4 0401 	rsbne	r4, r4, #1
 801cef4:	6034      	strne	r4, [r6, #0]
 801cef6:	6832      	ldr	r2, [r6, #0]
 801cef8:	4413      	add	r3, r2
 801cefa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801cefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf02:	d007      	beq.n	801cf14 <__cvt+0x92>
 801cf04:	2130      	movs	r1, #48	; 0x30
 801cf06:	9a03      	ldr	r2, [sp, #12]
 801cf08:	429a      	cmp	r2, r3
 801cf0a:	d204      	bcs.n	801cf16 <__cvt+0x94>
 801cf0c:	1c54      	adds	r4, r2, #1
 801cf0e:	9403      	str	r4, [sp, #12]
 801cf10:	7011      	strb	r1, [r2, #0]
 801cf12:	e7f8      	b.n	801cf06 <__cvt+0x84>
 801cf14:	9303      	str	r3, [sp, #12]
 801cf16:	9b03      	ldr	r3, [sp, #12]
 801cf18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cf1a:	1a1b      	subs	r3, r3, r0
 801cf1c:	6013      	str	r3, [r2, #0]
 801cf1e:	b005      	add	sp, #20
 801cf20:	ecbd 8b02 	vpop	{d8}
 801cf24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cf26 <__exponent>:
 801cf26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cf28:	2900      	cmp	r1, #0
 801cf2a:	4604      	mov	r4, r0
 801cf2c:	bfba      	itte	lt
 801cf2e:	4249      	neglt	r1, r1
 801cf30:	232d      	movlt	r3, #45	; 0x2d
 801cf32:	232b      	movge	r3, #43	; 0x2b
 801cf34:	2909      	cmp	r1, #9
 801cf36:	f804 2b02 	strb.w	r2, [r4], #2
 801cf3a:	7043      	strb	r3, [r0, #1]
 801cf3c:	dd20      	ble.n	801cf80 <__exponent+0x5a>
 801cf3e:	f10d 0307 	add.w	r3, sp, #7
 801cf42:	461f      	mov	r7, r3
 801cf44:	260a      	movs	r6, #10
 801cf46:	fb91 f5f6 	sdiv	r5, r1, r6
 801cf4a:	fb06 1115 	mls	r1, r6, r5, r1
 801cf4e:	3130      	adds	r1, #48	; 0x30
 801cf50:	2d09      	cmp	r5, #9
 801cf52:	f803 1c01 	strb.w	r1, [r3, #-1]
 801cf56:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 801cf5a:	4629      	mov	r1, r5
 801cf5c:	dc09      	bgt.n	801cf72 <__exponent+0x4c>
 801cf5e:	3130      	adds	r1, #48	; 0x30
 801cf60:	3b02      	subs	r3, #2
 801cf62:	f802 1c01 	strb.w	r1, [r2, #-1]
 801cf66:	42bb      	cmp	r3, r7
 801cf68:	4622      	mov	r2, r4
 801cf6a:	d304      	bcc.n	801cf76 <__exponent+0x50>
 801cf6c:	1a10      	subs	r0, r2, r0
 801cf6e:	b003      	add	sp, #12
 801cf70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf72:	4613      	mov	r3, r2
 801cf74:	e7e7      	b.n	801cf46 <__exponent+0x20>
 801cf76:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cf7a:	f804 2b01 	strb.w	r2, [r4], #1
 801cf7e:	e7f2      	b.n	801cf66 <__exponent+0x40>
 801cf80:	2330      	movs	r3, #48	; 0x30
 801cf82:	4419      	add	r1, r3
 801cf84:	7083      	strb	r3, [r0, #2]
 801cf86:	1d02      	adds	r2, r0, #4
 801cf88:	70c1      	strb	r1, [r0, #3]
 801cf8a:	e7ef      	b.n	801cf6c <__exponent+0x46>
 801cf8c:	0000      	movs	r0, r0
	...

0801cf90 <_printf_float>:
 801cf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf94:	b08d      	sub	sp, #52	; 0x34
 801cf96:	460c      	mov	r4, r1
 801cf98:	4616      	mov	r6, r2
 801cf9a:	461f      	mov	r7, r3
 801cf9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801cfa0:	4605      	mov	r5, r0
 801cfa2:	f001 fcdf 	bl	801e964 <_localeconv_r>
 801cfa6:	f8d0 b000 	ldr.w	fp, [r0]
 801cfaa:	4658      	mov	r0, fp
 801cfac:	f7e3 f998 	bl	80002e0 <strlen>
 801cfb0:	2300      	movs	r3, #0
 801cfb2:	930a      	str	r3, [sp, #40]	; 0x28
 801cfb4:	f8d8 3000 	ldr.w	r3, [r8]
 801cfb8:	9005      	str	r0, [sp, #20]
 801cfba:	3307      	adds	r3, #7
 801cfbc:	f023 0307 	bic.w	r3, r3, #7
 801cfc0:	f103 0108 	add.w	r1, r3, #8
 801cfc4:	f894 9018 	ldrb.w	r9, [r4, #24]
 801cfc8:	6822      	ldr	r2, [r4, #0]
 801cfca:	f8c8 1000 	str.w	r1, [r8]
 801cfce:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cfd2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801cfd6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 801d260 <_printf_float+0x2d0>
 801cfda:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801cfde:	eeb0 6bc0 	vabs.f64	d6, d0
 801cfe2:	eeb4 6b47 	vcmp.f64	d6, d7
 801cfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfea:	dd24      	ble.n	801d036 <_printf_float+0xa6>
 801cfec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801cff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cff4:	d502      	bpl.n	801cffc <_printf_float+0x6c>
 801cff6:	232d      	movs	r3, #45	; 0x2d
 801cff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cffc:	499a      	ldr	r1, [pc, #616]	; (801d268 <_printf_float+0x2d8>)
 801cffe:	4b9b      	ldr	r3, [pc, #620]	; (801d26c <_printf_float+0x2dc>)
 801d000:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801d004:	bf8c      	ite	hi
 801d006:	4688      	movhi	r8, r1
 801d008:	4698      	movls	r8, r3
 801d00a:	f022 0204 	bic.w	r2, r2, #4
 801d00e:	2303      	movs	r3, #3
 801d010:	6123      	str	r3, [r4, #16]
 801d012:	6022      	str	r2, [r4, #0]
 801d014:	f04f 0a00 	mov.w	sl, #0
 801d018:	9700      	str	r7, [sp, #0]
 801d01a:	4633      	mov	r3, r6
 801d01c:	aa0b      	add	r2, sp, #44	; 0x2c
 801d01e:	4621      	mov	r1, r4
 801d020:	4628      	mov	r0, r5
 801d022:	f000 f9e1 	bl	801d3e8 <_printf_common>
 801d026:	3001      	adds	r0, #1
 801d028:	f040 8089 	bne.w	801d13e <_printf_float+0x1ae>
 801d02c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d030:	b00d      	add	sp, #52	; 0x34
 801d032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d036:	eeb4 0b40 	vcmp.f64	d0, d0
 801d03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d03e:	d702      	bvc.n	801d046 <_printf_float+0xb6>
 801d040:	498b      	ldr	r1, [pc, #556]	; (801d270 <_printf_float+0x2e0>)
 801d042:	4b8c      	ldr	r3, [pc, #560]	; (801d274 <_printf_float+0x2e4>)
 801d044:	e7dc      	b.n	801d000 <_printf_float+0x70>
 801d046:	6861      	ldr	r1, [r4, #4]
 801d048:	1c4b      	adds	r3, r1, #1
 801d04a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d04e:	ab0a      	add	r3, sp, #40	; 0x28
 801d050:	a809      	add	r0, sp, #36	; 0x24
 801d052:	d13b      	bne.n	801d0cc <_printf_float+0x13c>
 801d054:	2106      	movs	r1, #6
 801d056:	6061      	str	r1, [r4, #4]
 801d058:	f04f 0c00 	mov.w	ip, #0
 801d05c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801d060:	e9cd 0900 	strd	r0, r9, [sp]
 801d064:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801d068:	6022      	str	r2, [r4, #0]
 801d06a:	6861      	ldr	r1, [r4, #4]
 801d06c:	4628      	mov	r0, r5
 801d06e:	f7ff ff08 	bl	801ce82 <__cvt>
 801d072:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801d076:	2b47      	cmp	r3, #71	; 0x47
 801d078:	4680      	mov	r8, r0
 801d07a:	d109      	bne.n	801d090 <_printf_float+0x100>
 801d07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d07e:	1cd8      	adds	r0, r3, #3
 801d080:	db02      	blt.n	801d088 <_printf_float+0xf8>
 801d082:	6862      	ldr	r2, [r4, #4]
 801d084:	4293      	cmp	r3, r2
 801d086:	dd47      	ble.n	801d118 <_printf_float+0x188>
 801d088:	f1a9 0902 	sub.w	r9, r9, #2
 801d08c:	fa5f f989 	uxtb.w	r9, r9
 801d090:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801d094:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d096:	d824      	bhi.n	801d0e2 <_printf_float+0x152>
 801d098:	3901      	subs	r1, #1
 801d09a:	464a      	mov	r2, r9
 801d09c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d0a0:	9109      	str	r1, [sp, #36]	; 0x24
 801d0a2:	f7ff ff40 	bl	801cf26 <__exponent>
 801d0a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d0a8:	1813      	adds	r3, r2, r0
 801d0aa:	2a01      	cmp	r2, #1
 801d0ac:	4682      	mov	sl, r0
 801d0ae:	6123      	str	r3, [r4, #16]
 801d0b0:	dc02      	bgt.n	801d0b8 <_printf_float+0x128>
 801d0b2:	6822      	ldr	r2, [r4, #0]
 801d0b4:	07d1      	lsls	r1, r2, #31
 801d0b6:	d501      	bpl.n	801d0bc <_printf_float+0x12c>
 801d0b8:	3301      	adds	r3, #1
 801d0ba:	6123      	str	r3, [r4, #16]
 801d0bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d0a9      	beq.n	801d018 <_printf_float+0x88>
 801d0c4:	232d      	movs	r3, #45	; 0x2d
 801d0c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d0ca:	e7a5      	b.n	801d018 <_printf_float+0x88>
 801d0cc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 801d0d0:	f000 8178 	beq.w	801d3c4 <_printf_float+0x434>
 801d0d4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801d0d8:	d1be      	bne.n	801d058 <_printf_float+0xc8>
 801d0da:	2900      	cmp	r1, #0
 801d0dc:	d1bc      	bne.n	801d058 <_printf_float+0xc8>
 801d0de:	2101      	movs	r1, #1
 801d0e0:	e7b9      	b.n	801d056 <_printf_float+0xc6>
 801d0e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801d0e6:	d119      	bne.n	801d11c <_printf_float+0x18c>
 801d0e8:	2900      	cmp	r1, #0
 801d0ea:	6863      	ldr	r3, [r4, #4]
 801d0ec:	dd0c      	ble.n	801d108 <_printf_float+0x178>
 801d0ee:	6121      	str	r1, [r4, #16]
 801d0f0:	b913      	cbnz	r3, 801d0f8 <_printf_float+0x168>
 801d0f2:	6822      	ldr	r2, [r4, #0]
 801d0f4:	07d2      	lsls	r2, r2, #31
 801d0f6:	d502      	bpl.n	801d0fe <_printf_float+0x16e>
 801d0f8:	3301      	adds	r3, #1
 801d0fa:	440b      	add	r3, r1
 801d0fc:	6123      	str	r3, [r4, #16]
 801d0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d100:	65a3      	str	r3, [r4, #88]	; 0x58
 801d102:	f04f 0a00 	mov.w	sl, #0
 801d106:	e7d9      	b.n	801d0bc <_printf_float+0x12c>
 801d108:	b913      	cbnz	r3, 801d110 <_printf_float+0x180>
 801d10a:	6822      	ldr	r2, [r4, #0]
 801d10c:	07d0      	lsls	r0, r2, #31
 801d10e:	d501      	bpl.n	801d114 <_printf_float+0x184>
 801d110:	3302      	adds	r3, #2
 801d112:	e7f3      	b.n	801d0fc <_printf_float+0x16c>
 801d114:	2301      	movs	r3, #1
 801d116:	e7f1      	b.n	801d0fc <_printf_float+0x16c>
 801d118:	f04f 0967 	mov.w	r9, #103	; 0x67
 801d11c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801d120:	4293      	cmp	r3, r2
 801d122:	db05      	blt.n	801d130 <_printf_float+0x1a0>
 801d124:	6822      	ldr	r2, [r4, #0]
 801d126:	6123      	str	r3, [r4, #16]
 801d128:	07d1      	lsls	r1, r2, #31
 801d12a:	d5e8      	bpl.n	801d0fe <_printf_float+0x16e>
 801d12c:	3301      	adds	r3, #1
 801d12e:	e7e5      	b.n	801d0fc <_printf_float+0x16c>
 801d130:	2b00      	cmp	r3, #0
 801d132:	bfd4      	ite	le
 801d134:	f1c3 0302 	rsble	r3, r3, #2
 801d138:	2301      	movgt	r3, #1
 801d13a:	4413      	add	r3, r2
 801d13c:	e7de      	b.n	801d0fc <_printf_float+0x16c>
 801d13e:	6823      	ldr	r3, [r4, #0]
 801d140:	055a      	lsls	r2, r3, #21
 801d142:	d407      	bmi.n	801d154 <_printf_float+0x1c4>
 801d144:	6923      	ldr	r3, [r4, #16]
 801d146:	4642      	mov	r2, r8
 801d148:	4631      	mov	r1, r6
 801d14a:	4628      	mov	r0, r5
 801d14c:	47b8      	blx	r7
 801d14e:	3001      	adds	r0, #1
 801d150:	d12a      	bne.n	801d1a8 <_printf_float+0x218>
 801d152:	e76b      	b.n	801d02c <_printf_float+0x9c>
 801d154:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801d158:	f240 80de 	bls.w	801d318 <_printf_float+0x388>
 801d15c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801d160:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d168:	d133      	bne.n	801d1d2 <_printf_float+0x242>
 801d16a:	2301      	movs	r3, #1
 801d16c:	4a42      	ldr	r2, [pc, #264]	; (801d278 <_printf_float+0x2e8>)
 801d16e:	4631      	mov	r1, r6
 801d170:	4628      	mov	r0, r5
 801d172:	47b8      	blx	r7
 801d174:	3001      	adds	r0, #1
 801d176:	f43f af59 	beq.w	801d02c <_printf_float+0x9c>
 801d17a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d17e:	429a      	cmp	r2, r3
 801d180:	db02      	blt.n	801d188 <_printf_float+0x1f8>
 801d182:	6823      	ldr	r3, [r4, #0]
 801d184:	07d8      	lsls	r0, r3, #31
 801d186:	d50f      	bpl.n	801d1a8 <_printf_float+0x218>
 801d188:	9b05      	ldr	r3, [sp, #20]
 801d18a:	465a      	mov	r2, fp
 801d18c:	4631      	mov	r1, r6
 801d18e:	4628      	mov	r0, r5
 801d190:	47b8      	blx	r7
 801d192:	3001      	adds	r0, #1
 801d194:	f43f af4a 	beq.w	801d02c <_printf_float+0x9c>
 801d198:	f04f 0800 	mov.w	r8, #0
 801d19c:	f104 091a 	add.w	r9, r4, #26
 801d1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1a2:	3b01      	subs	r3, #1
 801d1a4:	4543      	cmp	r3, r8
 801d1a6:	dc09      	bgt.n	801d1bc <_printf_float+0x22c>
 801d1a8:	6823      	ldr	r3, [r4, #0]
 801d1aa:	079b      	lsls	r3, r3, #30
 801d1ac:	f100 8105 	bmi.w	801d3ba <_printf_float+0x42a>
 801d1b0:	68e0      	ldr	r0, [r4, #12]
 801d1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d1b4:	4298      	cmp	r0, r3
 801d1b6:	bfb8      	it	lt
 801d1b8:	4618      	movlt	r0, r3
 801d1ba:	e739      	b.n	801d030 <_printf_float+0xa0>
 801d1bc:	2301      	movs	r3, #1
 801d1be:	464a      	mov	r2, r9
 801d1c0:	4631      	mov	r1, r6
 801d1c2:	4628      	mov	r0, r5
 801d1c4:	47b8      	blx	r7
 801d1c6:	3001      	adds	r0, #1
 801d1c8:	f43f af30 	beq.w	801d02c <_printf_float+0x9c>
 801d1cc:	f108 0801 	add.w	r8, r8, #1
 801d1d0:	e7e6      	b.n	801d1a0 <_printf_float+0x210>
 801d1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	dc2b      	bgt.n	801d230 <_printf_float+0x2a0>
 801d1d8:	2301      	movs	r3, #1
 801d1da:	4a27      	ldr	r2, [pc, #156]	; (801d278 <_printf_float+0x2e8>)
 801d1dc:	4631      	mov	r1, r6
 801d1de:	4628      	mov	r0, r5
 801d1e0:	47b8      	blx	r7
 801d1e2:	3001      	adds	r0, #1
 801d1e4:	f43f af22 	beq.w	801d02c <_printf_float+0x9c>
 801d1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1ea:	b923      	cbnz	r3, 801d1f6 <_printf_float+0x266>
 801d1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1ee:	b913      	cbnz	r3, 801d1f6 <_printf_float+0x266>
 801d1f0:	6823      	ldr	r3, [r4, #0]
 801d1f2:	07d9      	lsls	r1, r3, #31
 801d1f4:	d5d8      	bpl.n	801d1a8 <_printf_float+0x218>
 801d1f6:	9b05      	ldr	r3, [sp, #20]
 801d1f8:	465a      	mov	r2, fp
 801d1fa:	4631      	mov	r1, r6
 801d1fc:	4628      	mov	r0, r5
 801d1fe:	47b8      	blx	r7
 801d200:	3001      	adds	r0, #1
 801d202:	f43f af13 	beq.w	801d02c <_printf_float+0x9c>
 801d206:	f04f 0900 	mov.w	r9, #0
 801d20a:	f104 0a1a 	add.w	sl, r4, #26
 801d20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d210:	425b      	negs	r3, r3
 801d212:	454b      	cmp	r3, r9
 801d214:	dc01      	bgt.n	801d21a <_printf_float+0x28a>
 801d216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d218:	e795      	b.n	801d146 <_printf_float+0x1b6>
 801d21a:	2301      	movs	r3, #1
 801d21c:	4652      	mov	r2, sl
 801d21e:	4631      	mov	r1, r6
 801d220:	4628      	mov	r0, r5
 801d222:	47b8      	blx	r7
 801d224:	3001      	adds	r0, #1
 801d226:	f43f af01 	beq.w	801d02c <_printf_float+0x9c>
 801d22a:	f109 0901 	add.w	r9, r9, #1
 801d22e:	e7ee      	b.n	801d20e <_printf_float+0x27e>
 801d230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d232:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d234:	429a      	cmp	r2, r3
 801d236:	bfa8      	it	ge
 801d238:	461a      	movge	r2, r3
 801d23a:	2a00      	cmp	r2, #0
 801d23c:	4691      	mov	r9, r2
 801d23e:	dd07      	ble.n	801d250 <_printf_float+0x2c0>
 801d240:	4613      	mov	r3, r2
 801d242:	4631      	mov	r1, r6
 801d244:	4642      	mov	r2, r8
 801d246:	4628      	mov	r0, r5
 801d248:	47b8      	blx	r7
 801d24a:	3001      	adds	r0, #1
 801d24c:	f43f aeee 	beq.w	801d02c <_printf_float+0x9c>
 801d250:	f104 031a 	add.w	r3, r4, #26
 801d254:	f04f 0a00 	mov.w	sl, #0
 801d258:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d25c:	9307      	str	r3, [sp, #28]
 801d25e:	e017      	b.n	801d290 <_printf_float+0x300>
 801d260:	ffffffff 	.word	0xffffffff
 801d264:	7fefffff 	.word	0x7fefffff
 801d268:	08022b16 	.word	0x08022b16
 801d26c:	08022b12 	.word	0x08022b12
 801d270:	08022b1e 	.word	0x08022b1e
 801d274:	08022b1a 	.word	0x08022b1a
 801d278:	08022b22 	.word	0x08022b22
 801d27c:	2301      	movs	r3, #1
 801d27e:	9a07      	ldr	r2, [sp, #28]
 801d280:	4631      	mov	r1, r6
 801d282:	4628      	mov	r0, r5
 801d284:	47b8      	blx	r7
 801d286:	3001      	adds	r0, #1
 801d288:	f43f aed0 	beq.w	801d02c <_printf_float+0x9c>
 801d28c:	f10a 0a01 	add.w	sl, sl, #1
 801d290:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d292:	9306      	str	r3, [sp, #24]
 801d294:	eba3 0309 	sub.w	r3, r3, r9
 801d298:	4553      	cmp	r3, sl
 801d29a:	dcef      	bgt.n	801d27c <_printf_float+0x2ec>
 801d29c:	9b06      	ldr	r3, [sp, #24]
 801d29e:	4498      	add	r8, r3
 801d2a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d2a4:	429a      	cmp	r2, r3
 801d2a6:	db15      	blt.n	801d2d4 <_printf_float+0x344>
 801d2a8:	6823      	ldr	r3, [r4, #0]
 801d2aa:	07da      	lsls	r2, r3, #31
 801d2ac:	d412      	bmi.n	801d2d4 <_printf_float+0x344>
 801d2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2b0:	9a06      	ldr	r2, [sp, #24]
 801d2b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d2b4:	1a9a      	subs	r2, r3, r2
 801d2b6:	eba3 0a01 	sub.w	sl, r3, r1
 801d2ba:	4592      	cmp	sl, r2
 801d2bc:	bfa8      	it	ge
 801d2be:	4692      	movge	sl, r2
 801d2c0:	f1ba 0f00 	cmp.w	sl, #0
 801d2c4:	dc0e      	bgt.n	801d2e4 <_printf_float+0x354>
 801d2c6:	f04f 0800 	mov.w	r8, #0
 801d2ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d2ce:	f104 091a 	add.w	r9, r4, #26
 801d2d2:	e019      	b.n	801d308 <_printf_float+0x378>
 801d2d4:	9b05      	ldr	r3, [sp, #20]
 801d2d6:	465a      	mov	r2, fp
 801d2d8:	4631      	mov	r1, r6
 801d2da:	4628      	mov	r0, r5
 801d2dc:	47b8      	blx	r7
 801d2de:	3001      	adds	r0, #1
 801d2e0:	d1e5      	bne.n	801d2ae <_printf_float+0x31e>
 801d2e2:	e6a3      	b.n	801d02c <_printf_float+0x9c>
 801d2e4:	4653      	mov	r3, sl
 801d2e6:	4642      	mov	r2, r8
 801d2e8:	4631      	mov	r1, r6
 801d2ea:	4628      	mov	r0, r5
 801d2ec:	47b8      	blx	r7
 801d2ee:	3001      	adds	r0, #1
 801d2f0:	d1e9      	bne.n	801d2c6 <_printf_float+0x336>
 801d2f2:	e69b      	b.n	801d02c <_printf_float+0x9c>
 801d2f4:	2301      	movs	r3, #1
 801d2f6:	464a      	mov	r2, r9
 801d2f8:	4631      	mov	r1, r6
 801d2fa:	4628      	mov	r0, r5
 801d2fc:	47b8      	blx	r7
 801d2fe:	3001      	adds	r0, #1
 801d300:	f43f ae94 	beq.w	801d02c <_printf_float+0x9c>
 801d304:	f108 0801 	add.w	r8, r8, #1
 801d308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d30c:	1a9b      	subs	r3, r3, r2
 801d30e:	eba3 030a 	sub.w	r3, r3, sl
 801d312:	4543      	cmp	r3, r8
 801d314:	dcee      	bgt.n	801d2f4 <_printf_float+0x364>
 801d316:	e747      	b.n	801d1a8 <_printf_float+0x218>
 801d318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d31a:	2a01      	cmp	r2, #1
 801d31c:	dc01      	bgt.n	801d322 <_printf_float+0x392>
 801d31e:	07db      	lsls	r3, r3, #31
 801d320:	d539      	bpl.n	801d396 <_printf_float+0x406>
 801d322:	2301      	movs	r3, #1
 801d324:	4642      	mov	r2, r8
 801d326:	4631      	mov	r1, r6
 801d328:	4628      	mov	r0, r5
 801d32a:	47b8      	blx	r7
 801d32c:	3001      	adds	r0, #1
 801d32e:	f43f ae7d 	beq.w	801d02c <_printf_float+0x9c>
 801d332:	9b05      	ldr	r3, [sp, #20]
 801d334:	465a      	mov	r2, fp
 801d336:	4631      	mov	r1, r6
 801d338:	4628      	mov	r0, r5
 801d33a:	47b8      	blx	r7
 801d33c:	3001      	adds	r0, #1
 801d33e:	f108 0801 	add.w	r8, r8, #1
 801d342:	f43f ae73 	beq.w	801d02c <_printf_float+0x9c>
 801d346:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801d34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d34c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d354:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801d358:	d018      	beq.n	801d38c <_printf_float+0x3fc>
 801d35a:	4642      	mov	r2, r8
 801d35c:	4631      	mov	r1, r6
 801d35e:	4628      	mov	r0, r5
 801d360:	47b8      	blx	r7
 801d362:	3001      	adds	r0, #1
 801d364:	d10e      	bne.n	801d384 <_printf_float+0x3f4>
 801d366:	e661      	b.n	801d02c <_printf_float+0x9c>
 801d368:	2301      	movs	r3, #1
 801d36a:	464a      	mov	r2, r9
 801d36c:	4631      	mov	r1, r6
 801d36e:	4628      	mov	r0, r5
 801d370:	47b8      	blx	r7
 801d372:	3001      	adds	r0, #1
 801d374:	f43f ae5a 	beq.w	801d02c <_printf_float+0x9c>
 801d378:	f108 0801 	add.w	r8, r8, #1
 801d37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d37e:	3b01      	subs	r3, #1
 801d380:	4543      	cmp	r3, r8
 801d382:	dcf1      	bgt.n	801d368 <_printf_float+0x3d8>
 801d384:	4653      	mov	r3, sl
 801d386:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801d38a:	e6dd      	b.n	801d148 <_printf_float+0x1b8>
 801d38c:	f04f 0800 	mov.w	r8, #0
 801d390:	f104 091a 	add.w	r9, r4, #26
 801d394:	e7f2      	b.n	801d37c <_printf_float+0x3ec>
 801d396:	2301      	movs	r3, #1
 801d398:	e7df      	b.n	801d35a <_printf_float+0x3ca>
 801d39a:	2301      	movs	r3, #1
 801d39c:	464a      	mov	r2, r9
 801d39e:	4631      	mov	r1, r6
 801d3a0:	4628      	mov	r0, r5
 801d3a2:	47b8      	blx	r7
 801d3a4:	3001      	adds	r0, #1
 801d3a6:	f43f ae41 	beq.w	801d02c <_printf_float+0x9c>
 801d3aa:	f108 0801 	add.w	r8, r8, #1
 801d3ae:	68e3      	ldr	r3, [r4, #12]
 801d3b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d3b2:	1a9b      	subs	r3, r3, r2
 801d3b4:	4543      	cmp	r3, r8
 801d3b6:	dcf0      	bgt.n	801d39a <_printf_float+0x40a>
 801d3b8:	e6fa      	b.n	801d1b0 <_printf_float+0x220>
 801d3ba:	f04f 0800 	mov.w	r8, #0
 801d3be:	f104 0919 	add.w	r9, r4, #25
 801d3c2:	e7f4      	b.n	801d3ae <_printf_float+0x41e>
 801d3c4:	2900      	cmp	r1, #0
 801d3c6:	f43f ae8a 	beq.w	801d0de <_printf_float+0x14e>
 801d3ca:	f04f 0c00 	mov.w	ip, #0
 801d3ce:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801d3d2:	e9cd 0900 	strd	r0, r9, [sp]
 801d3d6:	6022      	str	r2, [r4, #0]
 801d3d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801d3dc:	4628      	mov	r0, r5
 801d3de:	f7ff fd50 	bl	801ce82 <__cvt>
 801d3e2:	4680      	mov	r8, r0
 801d3e4:	e64a      	b.n	801d07c <_printf_float+0xec>
 801d3e6:	bf00      	nop

0801d3e8 <_printf_common>:
 801d3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3ec:	4691      	mov	r9, r2
 801d3ee:	461f      	mov	r7, r3
 801d3f0:	688a      	ldr	r2, [r1, #8]
 801d3f2:	690b      	ldr	r3, [r1, #16]
 801d3f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d3f8:	4293      	cmp	r3, r2
 801d3fa:	bfb8      	it	lt
 801d3fc:	4613      	movlt	r3, r2
 801d3fe:	f8c9 3000 	str.w	r3, [r9]
 801d402:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d406:	4606      	mov	r6, r0
 801d408:	460c      	mov	r4, r1
 801d40a:	b112      	cbz	r2, 801d412 <_printf_common+0x2a>
 801d40c:	3301      	adds	r3, #1
 801d40e:	f8c9 3000 	str.w	r3, [r9]
 801d412:	6823      	ldr	r3, [r4, #0]
 801d414:	0699      	lsls	r1, r3, #26
 801d416:	bf42      	ittt	mi
 801d418:	f8d9 3000 	ldrmi.w	r3, [r9]
 801d41c:	3302      	addmi	r3, #2
 801d41e:	f8c9 3000 	strmi.w	r3, [r9]
 801d422:	6825      	ldr	r5, [r4, #0]
 801d424:	f015 0506 	ands.w	r5, r5, #6
 801d428:	d107      	bne.n	801d43a <_printf_common+0x52>
 801d42a:	f104 0a19 	add.w	sl, r4, #25
 801d42e:	68e3      	ldr	r3, [r4, #12]
 801d430:	f8d9 2000 	ldr.w	r2, [r9]
 801d434:	1a9b      	subs	r3, r3, r2
 801d436:	42ab      	cmp	r3, r5
 801d438:	dc28      	bgt.n	801d48c <_printf_common+0xa4>
 801d43a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801d43e:	6822      	ldr	r2, [r4, #0]
 801d440:	3300      	adds	r3, #0
 801d442:	bf18      	it	ne
 801d444:	2301      	movne	r3, #1
 801d446:	0692      	lsls	r2, r2, #26
 801d448:	d42d      	bmi.n	801d4a6 <_printf_common+0xbe>
 801d44a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d44e:	4639      	mov	r1, r7
 801d450:	4630      	mov	r0, r6
 801d452:	47c0      	blx	r8
 801d454:	3001      	adds	r0, #1
 801d456:	d020      	beq.n	801d49a <_printf_common+0xb2>
 801d458:	6823      	ldr	r3, [r4, #0]
 801d45a:	68e5      	ldr	r5, [r4, #12]
 801d45c:	f8d9 2000 	ldr.w	r2, [r9]
 801d460:	f003 0306 	and.w	r3, r3, #6
 801d464:	2b04      	cmp	r3, #4
 801d466:	bf08      	it	eq
 801d468:	1aad      	subeq	r5, r5, r2
 801d46a:	68a3      	ldr	r3, [r4, #8]
 801d46c:	6922      	ldr	r2, [r4, #16]
 801d46e:	bf0c      	ite	eq
 801d470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d474:	2500      	movne	r5, #0
 801d476:	4293      	cmp	r3, r2
 801d478:	bfc4      	itt	gt
 801d47a:	1a9b      	subgt	r3, r3, r2
 801d47c:	18ed      	addgt	r5, r5, r3
 801d47e:	f04f 0900 	mov.w	r9, #0
 801d482:	341a      	adds	r4, #26
 801d484:	454d      	cmp	r5, r9
 801d486:	d11a      	bne.n	801d4be <_printf_common+0xd6>
 801d488:	2000      	movs	r0, #0
 801d48a:	e008      	b.n	801d49e <_printf_common+0xb6>
 801d48c:	2301      	movs	r3, #1
 801d48e:	4652      	mov	r2, sl
 801d490:	4639      	mov	r1, r7
 801d492:	4630      	mov	r0, r6
 801d494:	47c0      	blx	r8
 801d496:	3001      	adds	r0, #1
 801d498:	d103      	bne.n	801d4a2 <_printf_common+0xba>
 801d49a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d4a2:	3501      	adds	r5, #1
 801d4a4:	e7c3      	b.n	801d42e <_printf_common+0x46>
 801d4a6:	18e1      	adds	r1, r4, r3
 801d4a8:	1c5a      	adds	r2, r3, #1
 801d4aa:	2030      	movs	r0, #48	; 0x30
 801d4ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d4b0:	4422      	add	r2, r4
 801d4b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d4b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d4ba:	3302      	adds	r3, #2
 801d4bc:	e7c5      	b.n	801d44a <_printf_common+0x62>
 801d4be:	2301      	movs	r3, #1
 801d4c0:	4622      	mov	r2, r4
 801d4c2:	4639      	mov	r1, r7
 801d4c4:	4630      	mov	r0, r6
 801d4c6:	47c0      	blx	r8
 801d4c8:	3001      	adds	r0, #1
 801d4ca:	d0e6      	beq.n	801d49a <_printf_common+0xb2>
 801d4cc:	f109 0901 	add.w	r9, r9, #1
 801d4d0:	e7d8      	b.n	801d484 <_printf_common+0x9c>
	...

0801d4d4 <_printf_i>:
 801d4d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d4d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801d4dc:	460c      	mov	r4, r1
 801d4de:	7e09      	ldrb	r1, [r1, #24]
 801d4e0:	b085      	sub	sp, #20
 801d4e2:	296e      	cmp	r1, #110	; 0x6e
 801d4e4:	4617      	mov	r7, r2
 801d4e6:	4606      	mov	r6, r0
 801d4e8:	4698      	mov	r8, r3
 801d4ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d4ec:	f000 80b3 	beq.w	801d656 <_printf_i+0x182>
 801d4f0:	d822      	bhi.n	801d538 <_printf_i+0x64>
 801d4f2:	2963      	cmp	r1, #99	; 0x63
 801d4f4:	d036      	beq.n	801d564 <_printf_i+0x90>
 801d4f6:	d80a      	bhi.n	801d50e <_printf_i+0x3a>
 801d4f8:	2900      	cmp	r1, #0
 801d4fa:	f000 80b9 	beq.w	801d670 <_printf_i+0x19c>
 801d4fe:	2958      	cmp	r1, #88	; 0x58
 801d500:	f000 8083 	beq.w	801d60a <_printf_i+0x136>
 801d504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d508:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801d50c:	e032      	b.n	801d574 <_printf_i+0xa0>
 801d50e:	2964      	cmp	r1, #100	; 0x64
 801d510:	d001      	beq.n	801d516 <_printf_i+0x42>
 801d512:	2969      	cmp	r1, #105	; 0x69
 801d514:	d1f6      	bne.n	801d504 <_printf_i+0x30>
 801d516:	6820      	ldr	r0, [r4, #0]
 801d518:	6813      	ldr	r3, [r2, #0]
 801d51a:	0605      	lsls	r5, r0, #24
 801d51c:	f103 0104 	add.w	r1, r3, #4
 801d520:	d52a      	bpl.n	801d578 <_printf_i+0xa4>
 801d522:	681b      	ldr	r3, [r3, #0]
 801d524:	6011      	str	r1, [r2, #0]
 801d526:	2b00      	cmp	r3, #0
 801d528:	da03      	bge.n	801d532 <_printf_i+0x5e>
 801d52a:	222d      	movs	r2, #45	; 0x2d
 801d52c:	425b      	negs	r3, r3
 801d52e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801d532:	486f      	ldr	r0, [pc, #444]	; (801d6f0 <_printf_i+0x21c>)
 801d534:	220a      	movs	r2, #10
 801d536:	e039      	b.n	801d5ac <_printf_i+0xd8>
 801d538:	2973      	cmp	r1, #115	; 0x73
 801d53a:	f000 809d 	beq.w	801d678 <_printf_i+0x1a4>
 801d53e:	d808      	bhi.n	801d552 <_printf_i+0x7e>
 801d540:	296f      	cmp	r1, #111	; 0x6f
 801d542:	d020      	beq.n	801d586 <_printf_i+0xb2>
 801d544:	2970      	cmp	r1, #112	; 0x70
 801d546:	d1dd      	bne.n	801d504 <_printf_i+0x30>
 801d548:	6823      	ldr	r3, [r4, #0]
 801d54a:	f043 0320 	orr.w	r3, r3, #32
 801d54e:	6023      	str	r3, [r4, #0]
 801d550:	e003      	b.n	801d55a <_printf_i+0x86>
 801d552:	2975      	cmp	r1, #117	; 0x75
 801d554:	d017      	beq.n	801d586 <_printf_i+0xb2>
 801d556:	2978      	cmp	r1, #120	; 0x78
 801d558:	d1d4      	bne.n	801d504 <_printf_i+0x30>
 801d55a:	2378      	movs	r3, #120	; 0x78
 801d55c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d560:	4864      	ldr	r0, [pc, #400]	; (801d6f4 <_printf_i+0x220>)
 801d562:	e055      	b.n	801d610 <_printf_i+0x13c>
 801d564:	6813      	ldr	r3, [r2, #0]
 801d566:	1d19      	adds	r1, r3, #4
 801d568:	681b      	ldr	r3, [r3, #0]
 801d56a:	6011      	str	r1, [r2, #0]
 801d56c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d574:	2301      	movs	r3, #1
 801d576:	e08c      	b.n	801d692 <_printf_i+0x1be>
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	6011      	str	r1, [r2, #0]
 801d57c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d580:	bf18      	it	ne
 801d582:	b21b      	sxthne	r3, r3
 801d584:	e7cf      	b.n	801d526 <_printf_i+0x52>
 801d586:	6813      	ldr	r3, [r2, #0]
 801d588:	6825      	ldr	r5, [r4, #0]
 801d58a:	1d18      	adds	r0, r3, #4
 801d58c:	6010      	str	r0, [r2, #0]
 801d58e:	0628      	lsls	r0, r5, #24
 801d590:	d501      	bpl.n	801d596 <_printf_i+0xc2>
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	e002      	b.n	801d59c <_printf_i+0xc8>
 801d596:	0668      	lsls	r0, r5, #25
 801d598:	d5fb      	bpl.n	801d592 <_printf_i+0xbe>
 801d59a:	881b      	ldrh	r3, [r3, #0]
 801d59c:	4854      	ldr	r0, [pc, #336]	; (801d6f0 <_printf_i+0x21c>)
 801d59e:	296f      	cmp	r1, #111	; 0x6f
 801d5a0:	bf14      	ite	ne
 801d5a2:	220a      	movne	r2, #10
 801d5a4:	2208      	moveq	r2, #8
 801d5a6:	2100      	movs	r1, #0
 801d5a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d5ac:	6865      	ldr	r5, [r4, #4]
 801d5ae:	60a5      	str	r5, [r4, #8]
 801d5b0:	2d00      	cmp	r5, #0
 801d5b2:	f2c0 8095 	blt.w	801d6e0 <_printf_i+0x20c>
 801d5b6:	6821      	ldr	r1, [r4, #0]
 801d5b8:	f021 0104 	bic.w	r1, r1, #4
 801d5bc:	6021      	str	r1, [r4, #0]
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d13d      	bne.n	801d63e <_printf_i+0x16a>
 801d5c2:	2d00      	cmp	r5, #0
 801d5c4:	f040 808e 	bne.w	801d6e4 <_printf_i+0x210>
 801d5c8:	4665      	mov	r5, ip
 801d5ca:	2a08      	cmp	r2, #8
 801d5cc:	d10b      	bne.n	801d5e6 <_printf_i+0x112>
 801d5ce:	6823      	ldr	r3, [r4, #0]
 801d5d0:	07db      	lsls	r3, r3, #31
 801d5d2:	d508      	bpl.n	801d5e6 <_printf_i+0x112>
 801d5d4:	6923      	ldr	r3, [r4, #16]
 801d5d6:	6862      	ldr	r2, [r4, #4]
 801d5d8:	429a      	cmp	r2, r3
 801d5da:	bfde      	ittt	le
 801d5dc:	2330      	movle	r3, #48	; 0x30
 801d5de:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d5e2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801d5e6:	ebac 0305 	sub.w	r3, ip, r5
 801d5ea:	6123      	str	r3, [r4, #16]
 801d5ec:	f8cd 8000 	str.w	r8, [sp]
 801d5f0:	463b      	mov	r3, r7
 801d5f2:	aa03      	add	r2, sp, #12
 801d5f4:	4621      	mov	r1, r4
 801d5f6:	4630      	mov	r0, r6
 801d5f8:	f7ff fef6 	bl	801d3e8 <_printf_common>
 801d5fc:	3001      	adds	r0, #1
 801d5fe:	d14d      	bne.n	801d69c <_printf_i+0x1c8>
 801d600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d604:	b005      	add	sp, #20
 801d606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d60a:	4839      	ldr	r0, [pc, #228]	; (801d6f0 <_printf_i+0x21c>)
 801d60c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801d610:	6813      	ldr	r3, [r2, #0]
 801d612:	6821      	ldr	r1, [r4, #0]
 801d614:	1d1d      	adds	r5, r3, #4
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	6015      	str	r5, [r2, #0]
 801d61a:	060a      	lsls	r2, r1, #24
 801d61c:	d50b      	bpl.n	801d636 <_printf_i+0x162>
 801d61e:	07ca      	lsls	r2, r1, #31
 801d620:	bf44      	itt	mi
 801d622:	f041 0120 	orrmi.w	r1, r1, #32
 801d626:	6021      	strmi	r1, [r4, #0]
 801d628:	b91b      	cbnz	r3, 801d632 <_printf_i+0x15e>
 801d62a:	6822      	ldr	r2, [r4, #0]
 801d62c:	f022 0220 	bic.w	r2, r2, #32
 801d630:	6022      	str	r2, [r4, #0]
 801d632:	2210      	movs	r2, #16
 801d634:	e7b7      	b.n	801d5a6 <_printf_i+0xd2>
 801d636:	064d      	lsls	r5, r1, #25
 801d638:	bf48      	it	mi
 801d63a:	b29b      	uxthmi	r3, r3
 801d63c:	e7ef      	b.n	801d61e <_printf_i+0x14a>
 801d63e:	4665      	mov	r5, ip
 801d640:	fbb3 f1f2 	udiv	r1, r3, r2
 801d644:	fb02 3311 	mls	r3, r2, r1, r3
 801d648:	5cc3      	ldrb	r3, [r0, r3]
 801d64a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801d64e:	460b      	mov	r3, r1
 801d650:	2900      	cmp	r1, #0
 801d652:	d1f5      	bne.n	801d640 <_printf_i+0x16c>
 801d654:	e7b9      	b.n	801d5ca <_printf_i+0xf6>
 801d656:	6813      	ldr	r3, [r2, #0]
 801d658:	6825      	ldr	r5, [r4, #0]
 801d65a:	6961      	ldr	r1, [r4, #20]
 801d65c:	1d18      	adds	r0, r3, #4
 801d65e:	6010      	str	r0, [r2, #0]
 801d660:	0628      	lsls	r0, r5, #24
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	d501      	bpl.n	801d66a <_printf_i+0x196>
 801d666:	6019      	str	r1, [r3, #0]
 801d668:	e002      	b.n	801d670 <_printf_i+0x19c>
 801d66a:	066a      	lsls	r2, r5, #25
 801d66c:	d5fb      	bpl.n	801d666 <_printf_i+0x192>
 801d66e:	8019      	strh	r1, [r3, #0]
 801d670:	2300      	movs	r3, #0
 801d672:	6123      	str	r3, [r4, #16]
 801d674:	4665      	mov	r5, ip
 801d676:	e7b9      	b.n	801d5ec <_printf_i+0x118>
 801d678:	6813      	ldr	r3, [r2, #0]
 801d67a:	1d19      	adds	r1, r3, #4
 801d67c:	6011      	str	r1, [r2, #0]
 801d67e:	681d      	ldr	r5, [r3, #0]
 801d680:	6862      	ldr	r2, [r4, #4]
 801d682:	2100      	movs	r1, #0
 801d684:	4628      	mov	r0, r5
 801d686:	f7e2 fe33 	bl	80002f0 <memchr>
 801d68a:	b108      	cbz	r0, 801d690 <_printf_i+0x1bc>
 801d68c:	1b40      	subs	r0, r0, r5
 801d68e:	6060      	str	r0, [r4, #4]
 801d690:	6863      	ldr	r3, [r4, #4]
 801d692:	6123      	str	r3, [r4, #16]
 801d694:	2300      	movs	r3, #0
 801d696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d69a:	e7a7      	b.n	801d5ec <_printf_i+0x118>
 801d69c:	6923      	ldr	r3, [r4, #16]
 801d69e:	462a      	mov	r2, r5
 801d6a0:	4639      	mov	r1, r7
 801d6a2:	4630      	mov	r0, r6
 801d6a4:	47c0      	blx	r8
 801d6a6:	3001      	adds	r0, #1
 801d6a8:	d0aa      	beq.n	801d600 <_printf_i+0x12c>
 801d6aa:	6823      	ldr	r3, [r4, #0]
 801d6ac:	079b      	lsls	r3, r3, #30
 801d6ae:	d413      	bmi.n	801d6d8 <_printf_i+0x204>
 801d6b0:	68e0      	ldr	r0, [r4, #12]
 801d6b2:	9b03      	ldr	r3, [sp, #12]
 801d6b4:	4298      	cmp	r0, r3
 801d6b6:	bfb8      	it	lt
 801d6b8:	4618      	movlt	r0, r3
 801d6ba:	e7a3      	b.n	801d604 <_printf_i+0x130>
 801d6bc:	2301      	movs	r3, #1
 801d6be:	464a      	mov	r2, r9
 801d6c0:	4639      	mov	r1, r7
 801d6c2:	4630      	mov	r0, r6
 801d6c4:	47c0      	blx	r8
 801d6c6:	3001      	adds	r0, #1
 801d6c8:	d09a      	beq.n	801d600 <_printf_i+0x12c>
 801d6ca:	3501      	adds	r5, #1
 801d6cc:	68e3      	ldr	r3, [r4, #12]
 801d6ce:	9a03      	ldr	r2, [sp, #12]
 801d6d0:	1a9b      	subs	r3, r3, r2
 801d6d2:	42ab      	cmp	r3, r5
 801d6d4:	dcf2      	bgt.n	801d6bc <_printf_i+0x1e8>
 801d6d6:	e7eb      	b.n	801d6b0 <_printf_i+0x1dc>
 801d6d8:	2500      	movs	r5, #0
 801d6da:	f104 0919 	add.w	r9, r4, #25
 801d6de:	e7f5      	b.n	801d6cc <_printf_i+0x1f8>
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	d1ac      	bne.n	801d63e <_printf_i+0x16a>
 801d6e4:	7803      	ldrb	r3, [r0, #0]
 801d6e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d6ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d6ee:	e76c      	b.n	801d5ca <_printf_i+0xf6>
 801d6f0:	08022b24 	.word	0x08022b24
 801d6f4:	08022b35 	.word	0x08022b35

0801d6f8 <iprintf>:
 801d6f8:	b40f      	push	{r0, r1, r2, r3}
 801d6fa:	4b0a      	ldr	r3, [pc, #40]	; (801d724 <iprintf+0x2c>)
 801d6fc:	b513      	push	{r0, r1, r4, lr}
 801d6fe:	681c      	ldr	r4, [r3, #0]
 801d700:	b124      	cbz	r4, 801d70c <iprintf+0x14>
 801d702:	69a3      	ldr	r3, [r4, #24]
 801d704:	b913      	cbnz	r3, 801d70c <iprintf+0x14>
 801d706:	4620      	mov	r0, r4
 801d708:	f001 f8a2 	bl	801e850 <__sinit>
 801d70c:	ab05      	add	r3, sp, #20
 801d70e:	9a04      	ldr	r2, [sp, #16]
 801d710:	68a1      	ldr	r1, [r4, #8]
 801d712:	9301      	str	r3, [sp, #4]
 801d714:	4620      	mov	r0, r4
 801d716:	f001 fead 	bl	801f474 <_vfiprintf_r>
 801d71a:	b002      	add	sp, #8
 801d71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d720:	b004      	add	sp, #16
 801d722:	4770      	bx	lr
 801d724:	2000003c 	.word	0x2000003c

0801d728 <rand>:
 801d728:	b538      	push	{r3, r4, r5, lr}
 801d72a:	4b13      	ldr	r3, [pc, #76]	; (801d778 <rand+0x50>)
 801d72c:	681c      	ldr	r4, [r3, #0]
 801d72e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d730:	b97b      	cbnz	r3, 801d752 <rand+0x2a>
 801d732:	2018      	movs	r0, #24
 801d734:	f001 f988 	bl	801ea48 <malloc>
 801d738:	4a10      	ldr	r2, [pc, #64]	; (801d77c <rand+0x54>)
 801d73a:	4b11      	ldr	r3, [pc, #68]	; (801d780 <rand+0x58>)
 801d73c:	63a0      	str	r0, [r4, #56]	; 0x38
 801d73e:	e9c0 2300 	strd	r2, r3, [r0]
 801d742:	4b10      	ldr	r3, [pc, #64]	; (801d784 <rand+0x5c>)
 801d744:	6083      	str	r3, [r0, #8]
 801d746:	230b      	movs	r3, #11
 801d748:	8183      	strh	r3, [r0, #12]
 801d74a:	2201      	movs	r2, #1
 801d74c:	2300      	movs	r3, #0
 801d74e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801d752:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d754:	480c      	ldr	r0, [pc, #48]	; (801d788 <rand+0x60>)
 801d756:	690a      	ldr	r2, [r1, #16]
 801d758:	694b      	ldr	r3, [r1, #20]
 801d75a:	4c0c      	ldr	r4, [pc, #48]	; (801d78c <rand+0x64>)
 801d75c:	4350      	muls	r0, r2
 801d75e:	fb04 0003 	mla	r0, r4, r3, r0
 801d762:	fba2 2304 	umull	r2, r3, r2, r4
 801d766:	4403      	add	r3, r0
 801d768:	1c54      	adds	r4, r2, #1
 801d76a:	f143 0500 	adc.w	r5, r3, #0
 801d76e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801d772:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801d776:	bd38      	pop	{r3, r4, r5, pc}
 801d778:	2000003c 	.word	0x2000003c
 801d77c:	abcd330e 	.word	0xabcd330e
 801d780:	e66d1234 	.word	0xe66d1234
 801d784:	0005deec 	.word	0x0005deec
 801d788:	5851f42d 	.word	0x5851f42d
 801d78c:	4c957f2d 	.word	0x4c957f2d

0801d790 <_raise_r>:
 801d790:	291f      	cmp	r1, #31
 801d792:	b538      	push	{r3, r4, r5, lr}
 801d794:	4604      	mov	r4, r0
 801d796:	460d      	mov	r5, r1
 801d798:	d904      	bls.n	801d7a4 <_raise_r+0x14>
 801d79a:	2316      	movs	r3, #22
 801d79c:	6003      	str	r3, [r0, #0]
 801d79e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d7a2:	bd38      	pop	{r3, r4, r5, pc}
 801d7a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d7a6:	b112      	cbz	r2, 801d7ae <_raise_r+0x1e>
 801d7a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d7ac:	b94b      	cbnz	r3, 801d7c2 <_raise_r+0x32>
 801d7ae:	4620      	mov	r0, r4
 801d7b0:	f000 f830 	bl	801d814 <_getpid_r>
 801d7b4:	462a      	mov	r2, r5
 801d7b6:	4601      	mov	r1, r0
 801d7b8:	4620      	mov	r0, r4
 801d7ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d7be:	f000 b817 	b.w	801d7f0 <_kill_r>
 801d7c2:	2b01      	cmp	r3, #1
 801d7c4:	d00a      	beq.n	801d7dc <_raise_r+0x4c>
 801d7c6:	1c59      	adds	r1, r3, #1
 801d7c8:	d103      	bne.n	801d7d2 <_raise_r+0x42>
 801d7ca:	2316      	movs	r3, #22
 801d7cc:	6003      	str	r3, [r0, #0]
 801d7ce:	2001      	movs	r0, #1
 801d7d0:	e7e7      	b.n	801d7a2 <_raise_r+0x12>
 801d7d2:	2400      	movs	r4, #0
 801d7d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d7d8:	4628      	mov	r0, r5
 801d7da:	4798      	blx	r3
 801d7dc:	2000      	movs	r0, #0
 801d7de:	e7e0      	b.n	801d7a2 <_raise_r+0x12>

0801d7e0 <raise>:
 801d7e0:	4b02      	ldr	r3, [pc, #8]	; (801d7ec <raise+0xc>)
 801d7e2:	4601      	mov	r1, r0
 801d7e4:	6818      	ldr	r0, [r3, #0]
 801d7e6:	f7ff bfd3 	b.w	801d790 <_raise_r>
 801d7ea:	bf00      	nop
 801d7ec:	2000003c 	.word	0x2000003c

0801d7f0 <_kill_r>:
 801d7f0:	b538      	push	{r3, r4, r5, lr}
 801d7f2:	4c07      	ldr	r4, [pc, #28]	; (801d810 <_kill_r+0x20>)
 801d7f4:	2300      	movs	r3, #0
 801d7f6:	4605      	mov	r5, r0
 801d7f8:	4608      	mov	r0, r1
 801d7fa:	4611      	mov	r1, r2
 801d7fc:	6023      	str	r3, [r4, #0]
 801d7fe:	f7e4 fb7d 	bl	8001efc <_kill>
 801d802:	1c43      	adds	r3, r0, #1
 801d804:	d102      	bne.n	801d80c <_kill_r+0x1c>
 801d806:	6823      	ldr	r3, [r4, #0]
 801d808:	b103      	cbz	r3, 801d80c <_kill_r+0x1c>
 801d80a:	602b      	str	r3, [r5, #0]
 801d80c:	bd38      	pop	{r3, r4, r5, pc}
 801d80e:	bf00      	nop
 801d810:	2000ba58 	.word	0x2000ba58

0801d814 <_getpid_r>:
 801d814:	f7e4 bb6a 	b.w	8001eec <_getpid>

0801d818 <_vsiprintf_r>:
 801d818:	b500      	push	{lr}
 801d81a:	b09b      	sub	sp, #108	; 0x6c
 801d81c:	9100      	str	r1, [sp, #0]
 801d81e:	9104      	str	r1, [sp, #16]
 801d820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d824:	9105      	str	r1, [sp, #20]
 801d826:	9102      	str	r1, [sp, #8]
 801d828:	4905      	ldr	r1, [pc, #20]	; (801d840 <_vsiprintf_r+0x28>)
 801d82a:	9103      	str	r1, [sp, #12]
 801d82c:	4669      	mov	r1, sp
 801d82e:	f001 fcff 	bl	801f230 <_svfiprintf_r>
 801d832:	9b00      	ldr	r3, [sp, #0]
 801d834:	2200      	movs	r2, #0
 801d836:	701a      	strb	r2, [r3, #0]
 801d838:	b01b      	add	sp, #108	; 0x6c
 801d83a:	f85d fb04 	ldr.w	pc, [sp], #4
 801d83e:	bf00      	nop
 801d840:	ffff0208 	.word	0xffff0208

0801d844 <vsiprintf>:
 801d844:	4613      	mov	r3, r2
 801d846:	460a      	mov	r2, r1
 801d848:	4601      	mov	r1, r0
 801d84a:	4802      	ldr	r0, [pc, #8]	; (801d854 <vsiprintf+0x10>)
 801d84c:	6800      	ldr	r0, [r0, #0]
 801d84e:	f7ff bfe3 	b.w	801d818 <_vsiprintf_r>
 801d852:	bf00      	nop
 801d854:	2000003c 	.word	0x2000003c

0801d858 <__swbuf_r>:
 801d858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d85a:	460e      	mov	r6, r1
 801d85c:	4614      	mov	r4, r2
 801d85e:	4605      	mov	r5, r0
 801d860:	b118      	cbz	r0, 801d86a <__swbuf_r+0x12>
 801d862:	6983      	ldr	r3, [r0, #24]
 801d864:	b90b      	cbnz	r3, 801d86a <__swbuf_r+0x12>
 801d866:	f000 fff3 	bl	801e850 <__sinit>
 801d86a:	4b21      	ldr	r3, [pc, #132]	; (801d8f0 <__swbuf_r+0x98>)
 801d86c:	429c      	cmp	r4, r3
 801d86e:	d12a      	bne.n	801d8c6 <__swbuf_r+0x6e>
 801d870:	686c      	ldr	r4, [r5, #4]
 801d872:	69a3      	ldr	r3, [r4, #24]
 801d874:	60a3      	str	r3, [r4, #8]
 801d876:	89a3      	ldrh	r3, [r4, #12]
 801d878:	071a      	lsls	r2, r3, #28
 801d87a:	d52e      	bpl.n	801d8da <__swbuf_r+0x82>
 801d87c:	6923      	ldr	r3, [r4, #16]
 801d87e:	b363      	cbz	r3, 801d8da <__swbuf_r+0x82>
 801d880:	6923      	ldr	r3, [r4, #16]
 801d882:	6820      	ldr	r0, [r4, #0]
 801d884:	1ac0      	subs	r0, r0, r3
 801d886:	6963      	ldr	r3, [r4, #20]
 801d888:	b2f6      	uxtb	r6, r6
 801d88a:	4283      	cmp	r3, r0
 801d88c:	4637      	mov	r7, r6
 801d88e:	dc04      	bgt.n	801d89a <__swbuf_r+0x42>
 801d890:	4621      	mov	r1, r4
 801d892:	4628      	mov	r0, r5
 801d894:	f000 ff72 	bl	801e77c <_fflush_r>
 801d898:	bb28      	cbnz	r0, 801d8e6 <__swbuf_r+0x8e>
 801d89a:	68a3      	ldr	r3, [r4, #8]
 801d89c:	3b01      	subs	r3, #1
 801d89e:	60a3      	str	r3, [r4, #8]
 801d8a0:	6823      	ldr	r3, [r4, #0]
 801d8a2:	1c5a      	adds	r2, r3, #1
 801d8a4:	6022      	str	r2, [r4, #0]
 801d8a6:	701e      	strb	r6, [r3, #0]
 801d8a8:	6963      	ldr	r3, [r4, #20]
 801d8aa:	3001      	adds	r0, #1
 801d8ac:	4283      	cmp	r3, r0
 801d8ae:	d004      	beq.n	801d8ba <__swbuf_r+0x62>
 801d8b0:	89a3      	ldrh	r3, [r4, #12]
 801d8b2:	07db      	lsls	r3, r3, #31
 801d8b4:	d519      	bpl.n	801d8ea <__swbuf_r+0x92>
 801d8b6:	2e0a      	cmp	r6, #10
 801d8b8:	d117      	bne.n	801d8ea <__swbuf_r+0x92>
 801d8ba:	4621      	mov	r1, r4
 801d8bc:	4628      	mov	r0, r5
 801d8be:	f000 ff5d 	bl	801e77c <_fflush_r>
 801d8c2:	b190      	cbz	r0, 801d8ea <__swbuf_r+0x92>
 801d8c4:	e00f      	b.n	801d8e6 <__swbuf_r+0x8e>
 801d8c6:	4b0b      	ldr	r3, [pc, #44]	; (801d8f4 <__swbuf_r+0x9c>)
 801d8c8:	429c      	cmp	r4, r3
 801d8ca:	d101      	bne.n	801d8d0 <__swbuf_r+0x78>
 801d8cc:	68ac      	ldr	r4, [r5, #8]
 801d8ce:	e7d0      	b.n	801d872 <__swbuf_r+0x1a>
 801d8d0:	4b09      	ldr	r3, [pc, #36]	; (801d8f8 <__swbuf_r+0xa0>)
 801d8d2:	429c      	cmp	r4, r3
 801d8d4:	bf08      	it	eq
 801d8d6:	68ec      	ldreq	r4, [r5, #12]
 801d8d8:	e7cb      	b.n	801d872 <__swbuf_r+0x1a>
 801d8da:	4621      	mov	r1, r4
 801d8dc:	4628      	mov	r0, r5
 801d8de:	f000 f81b 	bl	801d918 <__swsetup_r>
 801d8e2:	2800      	cmp	r0, #0
 801d8e4:	d0cc      	beq.n	801d880 <__swbuf_r+0x28>
 801d8e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d8ea:	4638      	mov	r0, r7
 801d8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8ee:	bf00      	nop
 801d8f0:	08022c74 	.word	0x08022c74
 801d8f4:	08022c94 	.word	0x08022c94
 801d8f8:	08022c54 	.word	0x08022c54

0801d8fc <__ascii_wctomb>:
 801d8fc:	b149      	cbz	r1, 801d912 <__ascii_wctomb+0x16>
 801d8fe:	2aff      	cmp	r2, #255	; 0xff
 801d900:	bf85      	ittet	hi
 801d902:	238a      	movhi	r3, #138	; 0x8a
 801d904:	6003      	strhi	r3, [r0, #0]
 801d906:	700a      	strbls	r2, [r1, #0]
 801d908:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801d90c:	bf98      	it	ls
 801d90e:	2001      	movls	r0, #1
 801d910:	4770      	bx	lr
 801d912:	4608      	mov	r0, r1
 801d914:	4770      	bx	lr
	...

0801d918 <__swsetup_r>:
 801d918:	4b32      	ldr	r3, [pc, #200]	; (801d9e4 <__swsetup_r+0xcc>)
 801d91a:	b570      	push	{r4, r5, r6, lr}
 801d91c:	681d      	ldr	r5, [r3, #0]
 801d91e:	4606      	mov	r6, r0
 801d920:	460c      	mov	r4, r1
 801d922:	b125      	cbz	r5, 801d92e <__swsetup_r+0x16>
 801d924:	69ab      	ldr	r3, [r5, #24]
 801d926:	b913      	cbnz	r3, 801d92e <__swsetup_r+0x16>
 801d928:	4628      	mov	r0, r5
 801d92a:	f000 ff91 	bl	801e850 <__sinit>
 801d92e:	4b2e      	ldr	r3, [pc, #184]	; (801d9e8 <__swsetup_r+0xd0>)
 801d930:	429c      	cmp	r4, r3
 801d932:	d10f      	bne.n	801d954 <__swsetup_r+0x3c>
 801d934:	686c      	ldr	r4, [r5, #4]
 801d936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d93a:	b29a      	uxth	r2, r3
 801d93c:	0715      	lsls	r5, r2, #28
 801d93e:	d42c      	bmi.n	801d99a <__swsetup_r+0x82>
 801d940:	06d0      	lsls	r0, r2, #27
 801d942:	d411      	bmi.n	801d968 <__swsetup_r+0x50>
 801d944:	2209      	movs	r2, #9
 801d946:	6032      	str	r2, [r6, #0]
 801d948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d94c:	81a3      	strh	r3, [r4, #12]
 801d94e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d952:	e03e      	b.n	801d9d2 <__swsetup_r+0xba>
 801d954:	4b25      	ldr	r3, [pc, #148]	; (801d9ec <__swsetup_r+0xd4>)
 801d956:	429c      	cmp	r4, r3
 801d958:	d101      	bne.n	801d95e <__swsetup_r+0x46>
 801d95a:	68ac      	ldr	r4, [r5, #8]
 801d95c:	e7eb      	b.n	801d936 <__swsetup_r+0x1e>
 801d95e:	4b24      	ldr	r3, [pc, #144]	; (801d9f0 <__swsetup_r+0xd8>)
 801d960:	429c      	cmp	r4, r3
 801d962:	bf08      	it	eq
 801d964:	68ec      	ldreq	r4, [r5, #12]
 801d966:	e7e6      	b.n	801d936 <__swsetup_r+0x1e>
 801d968:	0751      	lsls	r1, r2, #29
 801d96a:	d512      	bpl.n	801d992 <__swsetup_r+0x7a>
 801d96c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d96e:	b141      	cbz	r1, 801d982 <__swsetup_r+0x6a>
 801d970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d974:	4299      	cmp	r1, r3
 801d976:	d002      	beq.n	801d97e <__swsetup_r+0x66>
 801d978:	4630      	mov	r0, r6
 801d97a:	f001 fb57 	bl	801f02c <_free_r>
 801d97e:	2300      	movs	r3, #0
 801d980:	6363      	str	r3, [r4, #52]	; 0x34
 801d982:	89a3      	ldrh	r3, [r4, #12]
 801d984:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d988:	81a3      	strh	r3, [r4, #12]
 801d98a:	2300      	movs	r3, #0
 801d98c:	6063      	str	r3, [r4, #4]
 801d98e:	6923      	ldr	r3, [r4, #16]
 801d990:	6023      	str	r3, [r4, #0]
 801d992:	89a3      	ldrh	r3, [r4, #12]
 801d994:	f043 0308 	orr.w	r3, r3, #8
 801d998:	81a3      	strh	r3, [r4, #12]
 801d99a:	6923      	ldr	r3, [r4, #16]
 801d99c:	b94b      	cbnz	r3, 801d9b2 <__swsetup_r+0x9a>
 801d99e:	89a3      	ldrh	r3, [r4, #12]
 801d9a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d9a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d9a8:	d003      	beq.n	801d9b2 <__swsetup_r+0x9a>
 801d9aa:	4621      	mov	r1, r4
 801d9ac:	4630      	mov	r0, r6
 801d9ae:	f001 f80b 	bl	801e9c8 <__smakebuf_r>
 801d9b2:	89a2      	ldrh	r2, [r4, #12]
 801d9b4:	f012 0301 	ands.w	r3, r2, #1
 801d9b8:	d00c      	beq.n	801d9d4 <__swsetup_r+0xbc>
 801d9ba:	2300      	movs	r3, #0
 801d9bc:	60a3      	str	r3, [r4, #8]
 801d9be:	6963      	ldr	r3, [r4, #20]
 801d9c0:	425b      	negs	r3, r3
 801d9c2:	61a3      	str	r3, [r4, #24]
 801d9c4:	6923      	ldr	r3, [r4, #16]
 801d9c6:	b953      	cbnz	r3, 801d9de <__swsetup_r+0xc6>
 801d9c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d9cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801d9d0:	d1ba      	bne.n	801d948 <__swsetup_r+0x30>
 801d9d2:	bd70      	pop	{r4, r5, r6, pc}
 801d9d4:	0792      	lsls	r2, r2, #30
 801d9d6:	bf58      	it	pl
 801d9d8:	6963      	ldrpl	r3, [r4, #20]
 801d9da:	60a3      	str	r3, [r4, #8]
 801d9dc:	e7f2      	b.n	801d9c4 <__swsetup_r+0xac>
 801d9de:	2000      	movs	r0, #0
 801d9e0:	e7f7      	b.n	801d9d2 <__swsetup_r+0xba>
 801d9e2:	bf00      	nop
 801d9e4:	2000003c 	.word	0x2000003c
 801d9e8:	08022c74 	.word	0x08022c74
 801d9ec:	08022c94 	.word	0x08022c94
 801d9f0:	08022c54 	.word	0x08022c54

0801d9f4 <__register_exitproc>:
 801d9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d9f8:	4d2c      	ldr	r5, [pc, #176]	; (801daac <__register_exitproc+0xb8>)
 801d9fa:	682c      	ldr	r4, [r5, #0]
 801d9fc:	4607      	mov	r7, r0
 801d9fe:	460e      	mov	r6, r1
 801da00:	4691      	mov	r9, r2
 801da02:	4698      	mov	r8, r3
 801da04:	b934      	cbnz	r4, 801da14 <__register_exitproc+0x20>
 801da06:	4b2a      	ldr	r3, [pc, #168]	; (801dab0 <__register_exitproc+0xbc>)
 801da08:	4c2a      	ldr	r4, [pc, #168]	; (801dab4 <__register_exitproc+0xc0>)
 801da0a:	602c      	str	r4, [r5, #0]
 801da0c:	b113      	cbz	r3, 801da14 <__register_exitproc+0x20>
 801da0e:	681b      	ldr	r3, [r3, #0]
 801da10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801da14:	6863      	ldr	r3, [r4, #4]
 801da16:	2b1f      	cmp	r3, #31
 801da18:	dd3d      	ble.n	801da96 <__register_exitproc+0xa2>
 801da1a:	4b27      	ldr	r3, [pc, #156]	; (801dab8 <__register_exitproc+0xc4>)
 801da1c:	b91b      	cbnz	r3, 801da26 <__register_exitproc+0x32>
 801da1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801da22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da26:	208c      	movs	r0, #140	; 0x8c
 801da28:	f001 f80e 	bl	801ea48 <malloc>
 801da2c:	4604      	mov	r4, r0
 801da2e:	2800      	cmp	r0, #0
 801da30:	d0f5      	beq.n	801da1e <__register_exitproc+0x2a>
 801da32:	2300      	movs	r3, #0
 801da34:	682a      	ldr	r2, [r5, #0]
 801da36:	6002      	str	r2, [r0, #0]
 801da38:	6043      	str	r3, [r0, #4]
 801da3a:	6028      	str	r0, [r5, #0]
 801da3c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801da40:	b30f      	cbz	r7, 801da86 <__register_exitproc+0x92>
 801da42:	f44f 7084 	mov.w	r0, #264	; 0x108
 801da46:	f000 ffff 	bl	801ea48 <malloc>
 801da4a:	2800      	cmp	r0, #0
 801da4c:	d0e7      	beq.n	801da1e <__register_exitproc+0x2a>
 801da4e:	2300      	movs	r3, #0
 801da50:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801da54:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801da58:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801da5c:	6862      	ldr	r2, [r4, #4]
 801da5e:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801da62:	2301      	movs	r3, #1
 801da64:	4093      	lsls	r3, r2
 801da66:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801da6a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801da6e:	431a      	orrs	r2, r3
 801da70:	2f02      	cmp	r7, #2
 801da72:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801da76:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801da7a:	bf02      	ittt	eq
 801da7c:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801da80:	4313      	orreq	r3, r2
 801da82:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801da86:	6863      	ldr	r3, [r4, #4]
 801da88:	1c5a      	adds	r2, r3, #1
 801da8a:	3302      	adds	r3, #2
 801da8c:	6062      	str	r2, [r4, #4]
 801da8e:	2000      	movs	r0, #0
 801da90:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801da94:	e7c5      	b.n	801da22 <__register_exitproc+0x2e>
 801da96:	2f00      	cmp	r7, #0
 801da98:	d0f5      	beq.n	801da86 <__register_exitproc+0x92>
 801da9a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801da9e:	2800      	cmp	r0, #0
 801daa0:	d1dc      	bne.n	801da5c <__register_exitproc+0x68>
 801daa2:	4b05      	ldr	r3, [pc, #20]	; (801dab8 <__register_exitproc+0xc4>)
 801daa4:	2b00      	cmp	r3, #0
 801daa6:	d0ba      	beq.n	801da1e <__register_exitproc+0x2a>
 801daa8:	e7cb      	b.n	801da42 <__register_exitproc+0x4e>
 801daaa:	bf00      	nop
 801daac:	20007968 	.word	0x20007968
 801dab0:	00000000 	.word	0x00000000
 801dab4:	200078dc 	.word	0x200078dc
 801dab8:	0801ea49 	.word	0x0801ea49

0801dabc <quorem>:
 801dabc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dac0:	6903      	ldr	r3, [r0, #16]
 801dac2:	690c      	ldr	r4, [r1, #16]
 801dac4:	42a3      	cmp	r3, r4
 801dac6:	4680      	mov	r8, r0
 801dac8:	f2c0 8082 	blt.w	801dbd0 <quorem+0x114>
 801dacc:	3c01      	subs	r4, #1
 801dace:	f101 0714 	add.w	r7, r1, #20
 801dad2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801dad6:	f100 0614 	add.w	r6, r0, #20
 801dada:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801dade:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801dae2:	eb06 030c 	add.w	r3, r6, ip
 801dae6:	3501      	adds	r5, #1
 801dae8:	eb07 090c 	add.w	r9, r7, ip
 801daec:	9301      	str	r3, [sp, #4]
 801daee:	fbb0 f5f5 	udiv	r5, r0, r5
 801daf2:	b395      	cbz	r5, 801db5a <quorem+0x9e>
 801daf4:	f04f 0a00 	mov.w	sl, #0
 801daf8:	4638      	mov	r0, r7
 801dafa:	46b6      	mov	lr, r6
 801dafc:	46d3      	mov	fp, sl
 801dafe:	f850 2b04 	ldr.w	r2, [r0], #4
 801db02:	b293      	uxth	r3, r2
 801db04:	fb05 a303 	mla	r3, r5, r3, sl
 801db08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801db0c:	b29b      	uxth	r3, r3
 801db0e:	ebab 0303 	sub.w	r3, fp, r3
 801db12:	0c12      	lsrs	r2, r2, #16
 801db14:	f8de b000 	ldr.w	fp, [lr]
 801db18:	fb05 a202 	mla	r2, r5, r2, sl
 801db1c:	fa13 f38b 	uxtah	r3, r3, fp
 801db20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801db24:	fa1f fb82 	uxth.w	fp, r2
 801db28:	f8de 2000 	ldr.w	r2, [lr]
 801db2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801db30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801db34:	b29b      	uxth	r3, r3
 801db36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801db3a:	4581      	cmp	r9, r0
 801db3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801db40:	f84e 3b04 	str.w	r3, [lr], #4
 801db44:	d2db      	bcs.n	801dafe <quorem+0x42>
 801db46:	f856 300c 	ldr.w	r3, [r6, ip]
 801db4a:	b933      	cbnz	r3, 801db5a <quorem+0x9e>
 801db4c:	9b01      	ldr	r3, [sp, #4]
 801db4e:	3b04      	subs	r3, #4
 801db50:	429e      	cmp	r6, r3
 801db52:	461a      	mov	r2, r3
 801db54:	d330      	bcc.n	801dbb8 <quorem+0xfc>
 801db56:	f8c8 4010 	str.w	r4, [r8, #16]
 801db5a:	4640      	mov	r0, r8
 801db5c:	f001 f992 	bl	801ee84 <__mcmp>
 801db60:	2800      	cmp	r0, #0
 801db62:	db25      	blt.n	801dbb0 <quorem+0xf4>
 801db64:	3501      	adds	r5, #1
 801db66:	4630      	mov	r0, r6
 801db68:	f04f 0c00 	mov.w	ip, #0
 801db6c:	f857 2b04 	ldr.w	r2, [r7], #4
 801db70:	f8d0 e000 	ldr.w	lr, [r0]
 801db74:	b293      	uxth	r3, r2
 801db76:	ebac 0303 	sub.w	r3, ip, r3
 801db7a:	0c12      	lsrs	r2, r2, #16
 801db7c:	fa13 f38e 	uxtah	r3, r3, lr
 801db80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801db84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801db88:	b29b      	uxth	r3, r3
 801db8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801db8e:	45b9      	cmp	r9, r7
 801db90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801db94:	f840 3b04 	str.w	r3, [r0], #4
 801db98:	d2e8      	bcs.n	801db6c <quorem+0xb0>
 801db9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801db9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801dba2:	b92a      	cbnz	r2, 801dbb0 <quorem+0xf4>
 801dba4:	3b04      	subs	r3, #4
 801dba6:	429e      	cmp	r6, r3
 801dba8:	461a      	mov	r2, r3
 801dbaa:	d30b      	bcc.n	801dbc4 <quorem+0x108>
 801dbac:	f8c8 4010 	str.w	r4, [r8, #16]
 801dbb0:	4628      	mov	r0, r5
 801dbb2:	b003      	add	sp, #12
 801dbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbb8:	6812      	ldr	r2, [r2, #0]
 801dbba:	3b04      	subs	r3, #4
 801dbbc:	2a00      	cmp	r2, #0
 801dbbe:	d1ca      	bne.n	801db56 <quorem+0x9a>
 801dbc0:	3c01      	subs	r4, #1
 801dbc2:	e7c5      	b.n	801db50 <quorem+0x94>
 801dbc4:	6812      	ldr	r2, [r2, #0]
 801dbc6:	3b04      	subs	r3, #4
 801dbc8:	2a00      	cmp	r2, #0
 801dbca:	d1ef      	bne.n	801dbac <quorem+0xf0>
 801dbcc:	3c01      	subs	r4, #1
 801dbce:	e7ea      	b.n	801dba6 <quorem+0xea>
 801dbd0:	2000      	movs	r0, #0
 801dbd2:	e7ee      	b.n	801dbb2 <quorem+0xf6>
 801dbd4:	0000      	movs	r0, r0
	...

0801dbd8 <_dtoa_r>:
 801dbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbdc:	ec57 6b10 	vmov	r6, r7, d0
 801dbe0:	b095      	sub	sp, #84	; 0x54
 801dbe2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801dbe4:	9108      	str	r1, [sp, #32]
 801dbe6:	4604      	mov	r4, r0
 801dbe8:	920a      	str	r2, [sp, #40]	; 0x28
 801dbea:	9311      	str	r3, [sp, #68]	; 0x44
 801dbec:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801dbf0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801dbf4:	b93d      	cbnz	r5, 801dc06 <_dtoa_r+0x2e>
 801dbf6:	2010      	movs	r0, #16
 801dbf8:	f000 ff26 	bl	801ea48 <malloc>
 801dbfc:	6260      	str	r0, [r4, #36]	; 0x24
 801dbfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801dc02:	6005      	str	r5, [r0, #0]
 801dc04:	60c5      	str	r5, [r0, #12]
 801dc06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dc08:	6819      	ldr	r1, [r3, #0]
 801dc0a:	b151      	cbz	r1, 801dc22 <_dtoa_r+0x4a>
 801dc0c:	685a      	ldr	r2, [r3, #4]
 801dc0e:	604a      	str	r2, [r1, #4]
 801dc10:	2301      	movs	r3, #1
 801dc12:	4093      	lsls	r3, r2
 801dc14:	608b      	str	r3, [r1, #8]
 801dc16:	4620      	mov	r0, r4
 801dc18:	f000 ff52 	bl	801eac0 <_Bfree>
 801dc1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dc1e:	2200      	movs	r2, #0
 801dc20:	601a      	str	r2, [r3, #0]
 801dc22:	1e3b      	subs	r3, r7, #0
 801dc24:	bfb9      	ittee	lt
 801dc26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801dc2a:	9303      	strlt	r3, [sp, #12]
 801dc2c:	2300      	movge	r3, #0
 801dc2e:	f8c8 3000 	strge.w	r3, [r8]
 801dc32:	9d03      	ldr	r5, [sp, #12]
 801dc34:	4bac      	ldr	r3, [pc, #688]	; (801dee8 <_dtoa_r+0x310>)
 801dc36:	bfbc      	itt	lt
 801dc38:	2201      	movlt	r2, #1
 801dc3a:	f8c8 2000 	strlt.w	r2, [r8]
 801dc3e:	43ab      	bics	r3, r5
 801dc40:	d11b      	bne.n	801dc7a <_dtoa_r+0xa2>
 801dc42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dc44:	f242 730f 	movw	r3, #9999	; 0x270f
 801dc48:	6013      	str	r3, [r2, #0]
 801dc4a:	9b02      	ldr	r3, [sp, #8]
 801dc4c:	b923      	cbnz	r3, 801dc58 <_dtoa_r+0x80>
 801dc4e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801dc52:	2d00      	cmp	r5, #0
 801dc54:	f000 84dd 	beq.w	801e612 <_dtoa_r+0xa3a>
 801dc58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801dc5a:	b953      	cbnz	r3, 801dc72 <_dtoa_r+0x9a>
 801dc5c:	4ba3      	ldr	r3, [pc, #652]	; (801deec <_dtoa_r+0x314>)
 801dc5e:	e020      	b.n	801dca2 <_dtoa_r+0xca>
 801dc60:	4ba3      	ldr	r3, [pc, #652]	; (801def0 <_dtoa_r+0x318>)
 801dc62:	9304      	str	r3, [sp, #16]
 801dc64:	3308      	adds	r3, #8
 801dc66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801dc68:	6013      	str	r3, [r2, #0]
 801dc6a:	9804      	ldr	r0, [sp, #16]
 801dc6c:	b015      	add	sp, #84	; 0x54
 801dc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc72:	4b9e      	ldr	r3, [pc, #632]	; (801deec <_dtoa_r+0x314>)
 801dc74:	9304      	str	r3, [sp, #16]
 801dc76:	3303      	adds	r3, #3
 801dc78:	e7f5      	b.n	801dc66 <_dtoa_r+0x8e>
 801dc7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dc7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801dc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc86:	ed8d 7b04 	vstr	d7, [sp, #16]
 801dc8a:	d10c      	bne.n	801dca6 <_dtoa_r+0xce>
 801dc8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dc8e:	2301      	movs	r3, #1
 801dc90:	6013      	str	r3, [r2, #0]
 801dc92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801dc94:	2b00      	cmp	r3, #0
 801dc96:	f000 84b9 	beq.w	801e60c <_dtoa_r+0xa34>
 801dc9a:	4b96      	ldr	r3, [pc, #600]	; (801def4 <_dtoa_r+0x31c>)
 801dc9c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801dc9e:	6013      	str	r3, [r2, #0]
 801dca0:	3b01      	subs	r3, #1
 801dca2:	9304      	str	r3, [sp, #16]
 801dca4:	e7e1      	b.n	801dc6a <_dtoa_r+0x92>
 801dca6:	a913      	add	r1, sp, #76	; 0x4c
 801dca8:	aa12      	add	r2, sp, #72	; 0x48
 801dcaa:	ed9d 0b04 	vldr	d0, [sp, #16]
 801dcae:	4620      	mov	r0, r4
 801dcb0:	f001 f95f 	bl	801ef72 <__d2b>
 801dcb4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 801dcb8:	9001      	str	r0, [sp, #4]
 801dcba:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dcbc:	2e00      	cmp	r6, #0
 801dcbe:	d046      	beq.n	801dd4e <_dtoa_r+0x176>
 801dcc0:	9805      	ldr	r0, [sp, #20]
 801dcc2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801dcc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dcca:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801dcce:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801dcd2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801dcd6:	2700      	movs	r7, #0
 801dcd8:	ee07 aa90 	vmov	s15, sl
 801dcdc:	ec43 2b16 	vmov	d6, r2, r3
 801dce0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801dce4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 801ded0 <_dtoa_r+0x2f8>
 801dce8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801dcec:	ee36 7b47 	vsub.f64	d7, d6, d7
 801dcf0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 801ded8 <_dtoa_r+0x300>
 801dcf4:	eea7 6b04 	vfma.f64	d6, d7, d4
 801dcf8:	eeb0 7b46 	vmov.f64	d7, d6
 801dcfc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801dee0 <_dtoa_r+0x308>
 801dd00:	eea5 7b06 	vfma.f64	d7, d5, d6
 801dd04:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801dd08:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801dd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd10:	ee16 ba90 	vmov	fp, s13
 801dd14:	d508      	bpl.n	801dd28 <_dtoa_r+0x150>
 801dd16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801dd1a:	eeb4 6b47 	vcmp.f64	d6, d7
 801dd1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd22:	bf18      	it	ne
 801dd24:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 801dd28:	f1bb 0f16 	cmp.w	fp, #22
 801dd2c:	d834      	bhi.n	801dd98 <_dtoa_r+0x1c0>
 801dd2e:	4b72      	ldr	r3, [pc, #456]	; (801def8 <_dtoa_r+0x320>)
 801dd30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801dd34:	ed93 7b00 	vldr	d7, [r3]
 801dd38:	ed9d 6b02 	vldr	d6, [sp, #8]
 801dd3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801dd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd44:	dd01      	ble.n	801dd4a <_dtoa_r+0x172>
 801dd46:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801dd4a:	2300      	movs	r3, #0
 801dd4c:	e025      	b.n	801dd9a <_dtoa_r+0x1c2>
 801dd4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dd50:	eb01 0a03 	add.w	sl, r1, r3
 801dd54:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 801dd58:	2b20      	cmp	r3, #32
 801dd5a:	dd17      	ble.n	801dd8c <_dtoa_r+0x1b4>
 801dd5c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801dd60:	9a02      	ldr	r2, [sp, #8]
 801dd62:	409d      	lsls	r5, r3
 801dd64:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 801dd68:	fa22 f303 	lsr.w	r3, r2, r3
 801dd6c:	432b      	orrs	r3, r5
 801dd6e:	ee07 3a90 	vmov	s15, r3
 801dd72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801dd76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801dd7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801dd7e:	9805      	ldr	r0, [sp, #20]
 801dd80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dd84:	2701      	movs	r7, #1
 801dd86:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801dd8a:	e7a5      	b.n	801dcd8 <_dtoa_r+0x100>
 801dd8c:	9a02      	ldr	r2, [sp, #8]
 801dd8e:	f1c3 0320 	rsb	r3, r3, #32
 801dd92:	fa02 f303 	lsl.w	r3, r2, r3
 801dd96:	e7ea      	b.n	801dd6e <_dtoa_r+0x196>
 801dd98:	2301      	movs	r3, #1
 801dd9a:	eba1 0a0a 	sub.w	sl, r1, sl
 801dd9e:	9310      	str	r3, [sp, #64]	; 0x40
 801dda0:	f1ba 0301 	subs.w	r3, sl, #1
 801dda4:	9307      	str	r3, [sp, #28]
 801dda6:	bf43      	ittte	mi
 801dda8:	2300      	movmi	r3, #0
 801ddaa:	f1ca 0a01 	rsbmi	sl, sl, #1
 801ddae:	9307      	strmi	r3, [sp, #28]
 801ddb0:	f04f 0a00 	movpl.w	sl, #0
 801ddb4:	f1bb 0f00 	cmp.w	fp, #0
 801ddb8:	db19      	blt.n	801ddee <_dtoa_r+0x216>
 801ddba:	9b07      	ldr	r3, [sp, #28]
 801ddbc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801ddc0:	445b      	add	r3, fp
 801ddc2:	9307      	str	r3, [sp, #28]
 801ddc4:	f04f 0800 	mov.w	r8, #0
 801ddc8:	9b08      	ldr	r3, [sp, #32]
 801ddca:	2b09      	cmp	r3, #9
 801ddcc:	d866      	bhi.n	801de9c <_dtoa_r+0x2c4>
 801ddce:	2b05      	cmp	r3, #5
 801ddd0:	bfc4      	itt	gt
 801ddd2:	3b04      	subgt	r3, #4
 801ddd4:	9308      	strgt	r3, [sp, #32]
 801ddd6:	9b08      	ldr	r3, [sp, #32]
 801ddd8:	f1a3 0302 	sub.w	r3, r3, #2
 801dddc:	bfcc      	ite	gt
 801ddde:	2500      	movgt	r5, #0
 801dde0:	2501      	movle	r5, #1
 801dde2:	2b03      	cmp	r3, #3
 801dde4:	d866      	bhi.n	801deb4 <_dtoa_r+0x2dc>
 801dde6:	e8df f003 	tbb	[pc, r3]
 801ddea:	5755      	.short	0x5755
 801ddec:	4909      	.short	0x4909
 801ddee:	2300      	movs	r3, #0
 801ddf0:	ebaa 0a0b 	sub.w	sl, sl, fp
 801ddf4:	f1cb 0800 	rsb	r8, fp, #0
 801ddf8:	930b      	str	r3, [sp, #44]	; 0x2c
 801ddfa:	e7e5      	b.n	801ddc8 <_dtoa_r+0x1f0>
 801ddfc:	2301      	movs	r3, #1
 801ddfe:	9309      	str	r3, [sp, #36]	; 0x24
 801de00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de02:	2b00      	cmp	r3, #0
 801de04:	dd59      	ble.n	801deba <_dtoa_r+0x2e2>
 801de06:	9306      	str	r3, [sp, #24]
 801de08:	4699      	mov	r9, r3
 801de0a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801de0c:	2200      	movs	r2, #0
 801de0e:	6072      	str	r2, [r6, #4]
 801de10:	2204      	movs	r2, #4
 801de12:	f102 0014 	add.w	r0, r2, #20
 801de16:	4298      	cmp	r0, r3
 801de18:	6871      	ldr	r1, [r6, #4]
 801de1a:	d953      	bls.n	801dec4 <_dtoa_r+0x2ec>
 801de1c:	4620      	mov	r0, r4
 801de1e:	f000 fe1b 	bl	801ea58 <_Balloc>
 801de22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801de24:	6030      	str	r0, [r6, #0]
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	9304      	str	r3, [sp, #16]
 801de2a:	f1b9 0f0e 	cmp.w	r9, #14
 801de2e:	f200 80c2 	bhi.w	801dfb6 <_dtoa_r+0x3de>
 801de32:	2d00      	cmp	r5, #0
 801de34:	f000 80bf 	beq.w	801dfb6 <_dtoa_r+0x3de>
 801de38:	ed9d 7b02 	vldr	d7, [sp, #8]
 801de3c:	f1bb 0f00 	cmp.w	fp, #0
 801de40:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801de44:	f340 80e6 	ble.w	801e014 <_dtoa_r+0x43c>
 801de48:	4a2b      	ldr	r2, [pc, #172]	; (801def8 <_dtoa_r+0x320>)
 801de4a:	f00b 030f 	and.w	r3, fp, #15
 801de4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801de52:	ed93 7b00 	vldr	d7, [r3]
 801de56:	ea4f 132b 	mov.w	r3, fp, asr #4
 801de5a:	06da      	lsls	r2, r3, #27
 801de5c:	f140 80d8 	bpl.w	801e010 <_dtoa_r+0x438>
 801de60:	4a26      	ldr	r2, [pc, #152]	; (801defc <_dtoa_r+0x324>)
 801de62:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801de66:	ed92 6b08 	vldr	d6, [r2, #32]
 801de6a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801de6e:	ed8d 6b02 	vstr	d6, [sp, #8]
 801de72:	f003 030f 	and.w	r3, r3, #15
 801de76:	2203      	movs	r2, #3
 801de78:	4920      	ldr	r1, [pc, #128]	; (801defc <_dtoa_r+0x324>)
 801de7a:	e04a      	b.n	801df12 <_dtoa_r+0x33a>
 801de7c:	2301      	movs	r3, #1
 801de7e:	9309      	str	r3, [sp, #36]	; 0x24
 801de80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de82:	445b      	add	r3, fp
 801de84:	f103 0901 	add.w	r9, r3, #1
 801de88:	9306      	str	r3, [sp, #24]
 801de8a:	464b      	mov	r3, r9
 801de8c:	2b01      	cmp	r3, #1
 801de8e:	bfb8      	it	lt
 801de90:	2301      	movlt	r3, #1
 801de92:	e7ba      	b.n	801de0a <_dtoa_r+0x232>
 801de94:	2300      	movs	r3, #0
 801de96:	e7b2      	b.n	801ddfe <_dtoa_r+0x226>
 801de98:	2300      	movs	r3, #0
 801de9a:	e7f0      	b.n	801de7e <_dtoa_r+0x2a6>
 801de9c:	2501      	movs	r5, #1
 801de9e:	2300      	movs	r3, #0
 801dea0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801dea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dea8:	9306      	str	r3, [sp, #24]
 801deaa:	4699      	mov	r9, r3
 801deac:	2200      	movs	r2, #0
 801deae:	2312      	movs	r3, #18
 801deb0:	920a      	str	r2, [sp, #40]	; 0x28
 801deb2:	e7aa      	b.n	801de0a <_dtoa_r+0x232>
 801deb4:	2301      	movs	r3, #1
 801deb6:	9309      	str	r3, [sp, #36]	; 0x24
 801deb8:	e7f4      	b.n	801dea4 <_dtoa_r+0x2cc>
 801deba:	2301      	movs	r3, #1
 801debc:	9306      	str	r3, [sp, #24]
 801debe:	4699      	mov	r9, r3
 801dec0:	461a      	mov	r2, r3
 801dec2:	e7f5      	b.n	801deb0 <_dtoa_r+0x2d8>
 801dec4:	3101      	adds	r1, #1
 801dec6:	6071      	str	r1, [r6, #4]
 801dec8:	0052      	lsls	r2, r2, #1
 801deca:	e7a2      	b.n	801de12 <_dtoa_r+0x23a>
 801decc:	f3af 8000 	nop.w
 801ded0:	636f4361 	.word	0x636f4361
 801ded4:	3fd287a7 	.word	0x3fd287a7
 801ded8:	8b60c8b3 	.word	0x8b60c8b3
 801dedc:	3fc68a28 	.word	0x3fc68a28
 801dee0:	509f79fb 	.word	0x509f79fb
 801dee4:	3fd34413 	.word	0x3fd34413
 801dee8:	7ff00000 	.word	0x7ff00000
 801deec:	08022c50 	.word	0x08022c50
 801def0:	08022c47 	.word	0x08022c47
 801def4:	08022b23 	.word	0x08022b23
 801def8:	08022ce0 	.word	0x08022ce0
 801defc:	08022cb8 	.word	0x08022cb8
 801df00:	07de      	lsls	r6, r3, #31
 801df02:	d504      	bpl.n	801df0e <_dtoa_r+0x336>
 801df04:	ed91 6b00 	vldr	d6, [r1]
 801df08:	3201      	adds	r2, #1
 801df0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801df0e:	105b      	asrs	r3, r3, #1
 801df10:	3108      	adds	r1, #8
 801df12:	2b00      	cmp	r3, #0
 801df14:	d1f4      	bne.n	801df00 <_dtoa_r+0x328>
 801df16:	ed9d 6b02 	vldr	d6, [sp, #8]
 801df1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801df1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801df22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801df24:	2b00      	cmp	r3, #0
 801df26:	f000 80a7 	beq.w	801e078 <_dtoa_r+0x4a0>
 801df2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801df2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801df32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801df36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df3a:	f140 809d 	bpl.w	801e078 <_dtoa_r+0x4a0>
 801df3e:	f1b9 0f00 	cmp.w	r9, #0
 801df42:	f000 8099 	beq.w	801e078 <_dtoa_r+0x4a0>
 801df46:	9b06      	ldr	r3, [sp, #24]
 801df48:	2b00      	cmp	r3, #0
 801df4a:	dd30      	ble.n	801dfae <_dtoa_r+0x3d6>
 801df4c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801df50:	ee27 7b06 	vmul.f64	d7, d7, d6
 801df54:	ed8d 7b02 	vstr	d7, [sp, #8]
 801df58:	9d06      	ldr	r5, [sp, #24]
 801df5a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801df5e:	3201      	adds	r2, #1
 801df60:	ed9d 6b02 	vldr	d6, [sp, #8]
 801df64:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801df68:	ee07 2a90 	vmov	s15, r2
 801df6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801df70:	eea7 5b06 	vfma.f64	d5, d7, d6
 801df74:	ed8d 5b02 	vstr	d5, [sp, #8]
 801df78:	9a03      	ldr	r2, [sp, #12]
 801df7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801df7e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801df82:	2d00      	cmp	r5, #0
 801df84:	d17b      	bne.n	801e07e <_dtoa_r+0x4a6>
 801df86:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801df8a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801df8e:	ec41 0b17 	vmov	d7, r0, r1
 801df92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801df96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df9a:	f300 8253 	bgt.w	801e444 <_dtoa_r+0x86c>
 801df9e:	eeb1 7b47 	vneg.f64	d7, d7
 801dfa2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801dfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfaa:	f100 8249 	bmi.w	801e440 <_dtoa_r+0x868>
 801dfae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801dfb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dfb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dfb8:	2b00      	cmp	r3, #0
 801dfba:	f2c0 8119 	blt.w	801e1f0 <_dtoa_r+0x618>
 801dfbe:	f1bb 0f0e 	cmp.w	fp, #14
 801dfc2:	f300 8115 	bgt.w	801e1f0 <_dtoa_r+0x618>
 801dfc6:	4bc3      	ldr	r3, [pc, #780]	; (801e2d4 <_dtoa_r+0x6fc>)
 801dfc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801dfcc:	ed93 6b00 	vldr	d6, [r3]
 801dfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	f280 80ba 	bge.w	801e14c <_dtoa_r+0x574>
 801dfd8:	f1b9 0f00 	cmp.w	r9, #0
 801dfdc:	f300 80b6 	bgt.w	801e14c <_dtoa_r+0x574>
 801dfe0:	f040 822d 	bne.w	801e43e <_dtoa_r+0x866>
 801dfe4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801dfe8:	ee26 6b07 	vmul.f64	d6, d6, d7
 801dfec:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dff0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801dff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dff8:	464d      	mov	r5, r9
 801dffa:	464f      	mov	r7, r9
 801dffc:	f280 8204 	bge.w	801e408 <_dtoa_r+0x830>
 801e000:	9b04      	ldr	r3, [sp, #16]
 801e002:	9a04      	ldr	r2, [sp, #16]
 801e004:	1c5e      	adds	r6, r3, #1
 801e006:	2331      	movs	r3, #49	; 0x31
 801e008:	7013      	strb	r3, [r2, #0]
 801e00a:	f10b 0b01 	add.w	fp, fp, #1
 801e00e:	e1ff      	b.n	801e410 <_dtoa_r+0x838>
 801e010:	2202      	movs	r2, #2
 801e012:	e731      	b.n	801de78 <_dtoa_r+0x2a0>
 801e014:	d02e      	beq.n	801e074 <_dtoa_r+0x49c>
 801e016:	f1cb 0300 	rsb	r3, fp, #0
 801e01a:	4aae      	ldr	r2, [pc, #696]	; (801e2d4 <_dtoa_r+0x6fc>)
 801e01c:	f003 010f 	and.w	r1, r3, #15
 801e020:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801e024:	ed92 7b00 	vldr	d7, [r2]
 801e028:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801e02c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e030:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801e034:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801e038:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801e03c:	49a6      	ldr	r1, [pc, #664]	; (801e2d8 <_dtoa_r+0x700>)
 801e03e:	111b      	asrs	r3, r3, #4
 801e040:	2000      	movs	r0, #0
 801e042:	2202      	movs	r2, #2
 801e044:	b93b      	cbnz	r3, 801e056 <_dtoa_r+0x47e>
 801e046:	2800      	cmp	r0, #0
 801e048:	f43f af6b 	beq.w	801df22 <_dtoa_r+0x34a>
 801e04c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e050:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e054:	e765      	b.n	801df22 <_dtoa_r+0x34a>
 801e056:	07dd      	lsls	r5, r3, #31
 801e058:	d509      	bpl.n	801e06e <_dtoa_r+0x496>
 801e05a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801e05e:	ed91 7b00 	vldr	d7, [r1]
 801e062:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e066:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801e06a:	3201      	adds	r2, #1
 801e06c:	2001      	movs	r0, #1
 801e06e:	105b      	asrs	r3, r3, #1
 801e070:	3108      	adds	r1, #8
 801e072:	e7e7      	b.n	801e044 <_dtoa_r+0x46c>
 801e074:	2202      	movs	r2, #2
 801e076:	e754      	b.n	801df22 <_dtoa_r+0x34a>
 801e078:	465b      	mov	r3, fp
 801e07a:	464d      	mov	r5, r9
 801e07c:	e770      	b.n	801df60 <_dtoa_r+0x388>
 801e07e:	4a95      	ldr	r2, [pc, #596]	; (801e2d4 <_dtoa_r+0x6fc>)
 801e080:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801e084:	ed12 4b02 	vldr	d4, [r2, #-8]
 801e088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e08a:	ec41 0b17 	vmov	d7, r0, r1
 801e08e:	b35a      	cbz	r2, 801e0e8 <_dtoa_r+0x510>
 801e090:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801e094:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801e098:	9e04      	ldr	r6, [sp, #16]
 801e09a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801e09e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801e0a2:	ee35 7b47 	vsub.f64	d7, d5, d7
 801e0a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801e0aa:	ee14 2a90 	vmov	r2, s9
 801e0ae:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801e0b2:	3230      	adds	r2, #48	; 0x30
 801e0b4:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e0b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801e0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0c0:	f806 2b01 	strb.w	r2, [r6], #1
 801e0c4:	d43b      	bmi.n	801e13e <_dtoa_r+0x566>
 801e0c6:	ee32 5b46 	vsub.f64	d5, d2, d6
 801e0ca:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801e0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0d2:	d472      	bmi.n	801e1ba <_dtoa_r+0x5e2>
 801e0d4:	9a04      	ldr	r2, [sp, #16]
 801e0d6:	1ab2      	subs	r2, r6, r2
 801e0d8:	4295      	cmp	r5, r2
 801e0da:	f77f af68 	ble.w	801dfae <_dtoa_r+0x3d6>
 801e0de:	ee27 7b03 	vmul.f64	d7, d7, d3
 801e0e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801e0e6:	e7de      	b.n	801e0a6 <_dtoa_r+0x4ce>
 801e0e8:	9a04      	ldr	r2, [sp, #16]
 801e0ea:	ee24 7b07 	vmul.f64	d7, d4, d7
 801e0ee:	1956      	adds	r6, r2, r5
 801e0f0:	4611      	mov	r1, r2
 801e0f2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801e0f6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801e0fa:	ee14 2a90 	vmov	r2, s9
 801e0fe:	3230      	adds	r2, #48	; 0x30
 801e100:	f801 2b01 	strb.w	r2, [r1], #1
 801e104:	42b1      	cmp	r1, r6
 801e106:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801e10a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e10e:	d11a      	bne.n	801e146 <_dtoa_r+0x56e>
 801e110:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801e114:	ee37 4b05 	vadd.f64	d4, d7, d5
 801e118:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801e11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e120:	dc4b      	bgt.n	801e1ba <_dtoa_r+0x5e2>
 801e122:	ee35 7b47 	vsub.f64	d7, d5, d7
 801e126:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801e12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e12e:	f57f af3e 	bpl.w	801dfae <_dtoa_r+0x3d6>
 801e132:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e136:	2a30      	cmp	r2, #48	; 0x30
 801e138:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 801e13c:	d001      	beq.n	801e142 <_dtoa_r+0x56a>
 801e13e:	469b      	mov	fp, r3
 801e140:	e02a      	b.n	801e198 <_dtoa_r+0x5c0>
 801e142:	460e      	mov	r6, r1
 801e144:	e7f5      	b.n	801e132 <_dtoa_r+0x55a>
 801e146:	ee26 6b03 	vmul.f64	d6, d6, d3
 801e14a:	e7d4      	b.n	801e0f6 <_dtoa_r+0x51e>
 801e14c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e150:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801e154:	9e04      	ldr	r6, [sp, #16]
 801e156:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801e15a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801e15e:	ee15 3a10 	vmov	r3, s10
 801e162:	3330      	adds	r3, #48	; 0x30
 801e164:	f806 3b01 	strb.w	r3, [r6], #1
 801e168:	9b04      	ldr	r3, [sp, #16]
 801e16a:	1af3      	subs	r3, r6, r3
 801e16c:	4599      	cmp	r9, r3
 801e16e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801e172:	eea3 7b46 	vfms.f64	d7, d3, d6
 801e176:	d133      	bne.n	801e1e0 <_dtoa_r+0x608>
 801e178:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e17c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801e180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e184:	dc18      	bgt.n	801e1b8 <_dtoa_r+0x5e0>
 801e186:	eeb4 7b46 	vcmp.f64	d7, d6
 801e18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e18e:	d103      	bne.n	801e198 <_dtoa_r+0x5c0>
 801e190:	ee15 3a10 	vmov	r3, s10
 801e194:	07db      	lsls	r3, r3, #31
 801e196:	d40f      	bmi.n	801e1b8 <_dtoa_r+0x5e0>
 801e198:	9901      	ldr	r1, [sp, #4]
 801e19a:	4620      	mov	r0, r4
 801e19c:	f000 fc90 	bl	801eac0 <_Bfree>
 801e1a0:	2300      	movs	r3, #0
 801e1a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e1a4:	7033      	strb	r3, [r6, #0]
 801e1a6:	f10b 0301 	add.w	r3, fp, #1
 801e1aa:	6013      	str	r3, [r2, #0]
 801e1ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	f43f ad5b 	beq.w	801dc6a <_dtoa_r+0x92>
 801e1b4:	601e      	str	r6, [r3, #0]
 801e1b6:	e558      	b.n	801dc6a <_dtoa_r+0x92>
 801e1b8:	465b      	mov	r3, fp
 801e1ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e1be:	2939      	cmp	r1, #57	; 0x39
 801e1c0:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801e1c4:	d106      	bne.n	801e1d4 <_dtoa_r+0x5fc>
 801e1c6:	9904      	ldr	r1, [sp, #16]
 801e1c8:	4291      	cmp	r1, r2
 801e1ca:	d107      	bne.n	801e1dc <_dtoa_r+0x604>
 801e1cc:	2230      	movs	r2, #48	; 0x30
 801e1ce:	700a      	strb	r2, [r1, #0]
 801e1d0:	3301      	adds	r3, #1
 801e1d2:	460a      	mov	r2, r1
 801e1d4:	7811      	ldrb	r1, [r2, #0]
 801e1d6:	3101      	adds	r1, #1
 801e1d8:	7011      	strb	r1, [r2, #0]
 801e1da:	e7b0      	b.n	801e13e <_dtoa_r+0x566>
 801e1dc:	4616      	mov	r6, r2
 801e1de:	e7ec      	b.n	801e1ba <_dtoa_r+0x5e2>
 801e1e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 801e1e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1ec:	d1b3      	bne.n	801e156 <_dtoa_r+0x57e>
 801e1ee:	e7d3      	b.n	801e198 <_dtoa_r+0x5c0>
 801e1f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e1f2:	2a00      	cmp	r2, #0
 801e1f4:	f000 808d 	beq.w	801e312 <_dtoa_r+0x73a>
 801e1f8:	9a08      	ldr	r2, [sp, #32]
 801e1fa:	2a01      	cmp	r2, #1
 801e1fc:	dc72      	bgt.n	801e2e4 <_dtoa_r+0x70c>
 801e1fe:	2f00      	cmp	r7, #0
 801e200:	d06c      	beq.n	801e2dc <_dtoa_r+0x704>
 801e202:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801e206:	4645      	mov	r5, r8
 801e208:	4656      	mov	r6, sl
 801e20a:	9a07      	ldr	r2, [sp, #28]
 801e20c:	2101      	movs	r1, #1
 801e20e:	441a      	add	r2, r3
 801e210:	4620      	mov	r0, r4
 801e212:	449a      	add	sl, r3
 801e214:	9207      	str	r2, [sp, #28]
 801e216:	f000 fcf3 	bl	801ec00 <__i2b>
 801e21a:	4607      	mov	r7, r0
 801e21c:	2e00      	cmp	r6, #0
 801e21e:	dd0b      	ble.n	801e238 <_dtoa_r+0x660>
 801e220:	9b07      	ldr	r3, [sp, #28]
 801e222:	2b00      	cmp	r3, #0
 801e224:	dd08      	ble.n	801e238 <_dtoa_r+0x660>
 801e226:	42b3      	cmp	r3, r6
 801e228:	9a07      	ldr	r2, [sp, #28]
 801e22a:	bfa8      	it	ge
 801e22c:	4633      	movge	r3, r6
 801e22e:	ebaa 0a03 	sub.w	sl, sl, r3
 801e232:	1af6      	subs	r6, r6, r3
 801e234:	1ad3      	subs	r3, r2, r3
 801e236:	9307      	str	r3, [sp, #28]
 801e238:	f1b8 0f00 	cmp.w	r8, #0
 801e23c:	d01d      	beq.n	801e27a <_dtoa_r+0x6a2>
 801e23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e240:	2b00      	cmp	r3, #0
 801e242:	d06a      	beq.n	801e31a <_dtoa_r+0x742>
 801e244:	b18d      	cbz	r5, 801e26a <_dtoa_r+0x692>
 801e246:	4639      	mov	r1, r7
 801e248:	462a      	mov	r2, r5
 801e24a:	4620      	mov	r0, r4
 801e24c:	f000 fd78 	bl	801ed40 <__pow5mult>
 801e250:	9a01      	ldr	r2, [sp, #4]
 801e252:	4601      	mov	r1, r0
 801e254:	4607      	mov	r7, r0
 801e256:	4620      	mov	r0, r4
 801e258:	f000 fcdb 	bl	801ec12 <__multiply>
 801e25c:	9901      	ldr	r1, [sp, #4]
 801e25e:	900c      	str	r0, [sp, #48]	; 0x30
 801e260:	4620      	mov	r0, r4
 801e262:	f000 fc2d 	bl	801eac0 <_Bfree>
 801e266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e268:	9301      	str	r3, [sp, #4]
 801e26a:	ebb8 0205 	subs.w	r2, r8, r5
 801e26e:	d004      	beq.n	801e27a <_dtoa_r+0x6a2>
 801e270:	9901      	ldr	r1, [sp, #4]
 801e272:	4620      	mov	r0, r4
 801e274:	f000 fd64 	bl	801ed40 <__pow5mult>
 801e278:	9001      	str	r0, [sp, #4]
 801e27a:	2101      	movs	r1, #1
 801e27c:	4620      	mov	r0, r4
 801e27e:	f000 fcbf 	bl	801ec00 <__i2b>
 801e282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e284:	4605      	mov	r5, r0
 801e286:	2b00      	cmp	r3, #0
 801e288:	f000 81ca 	beq.w	801e620 <_dtoa_r+0xa48>
 801e28c:	461a      	mov	r2, r3
 801e28e:	4601      	mov	r1, r0
 801e290:	4620      	mov	r0, r4
 801e292:	f000 fd55 	bl	801ed40 <__pow5mult>
 801e296:	9b08      	ldr	r3, [sp, #32]
 801e298:	2b01      	cmp	r3, #1
 801e29a:	4605      	mov	r5, r0
 801e29c:	dc44      	bgt.n	801e328 <_dtoa_r+0x750>
 801e29e:	9b02      	ldr	r3, [sp, #8]
 801e2a0:	2b00      	cmp	r3, #0
 801e2a2:	d13c      	bne.n	801e31e <_dtoa_r+0x746>
 801e2a4:	9b03      	ldr	r3, [sp, #12]
 801e2a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	d137      	bne.n	801e31e <_dtoa_r+0x746>
 801e2ae:	9b03      	ldr	r3, [sp, #12]
 801e2b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e2b4:	0d1b      	lsrs	r3, r3, #20
 801e2b6:	051b      	lsls	r3, r3, #20
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d033      	beq.n	801e324 <_dtoa_r+0x74c>
 801e2bc:	9b07      	ldr	r3, [sp, #28]
 801e2be:	3301      	adds	r3, #1
 801e2c0:	f10a 0a01 	add.w	sl, sl, #1
 801e2c4:	9307      	str	r3, [sp, #28]
 801e2c6:	f04f 0801 	mov.w	r8, #1
 801e2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e2cc:	bb73      	cbnz	r3, 801e32c <_dtoa_r+0x754>
 801e2ce:	2001      	movs	r0, #1
 801e2d0:	e034      	b.n	801e33c <_dtoa_r+0x764>
 801e2d2:	bf00      	nop
 801e2d4:	08022ce0 	.word	0x08022ce0
 801e2d8:	08022cb8 	.word	0x08022cb8
 801e2dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e2de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801e2e2:	e790      	b.n	801e206 <_dtoa_r+0x62e>
 801e2e4:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 801e2e8:	45a8      	cmp	r8, r5
 801e2ea:	bfbf      	itttt	lt
 801e2ec:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801e2ee:	eba5 0808 	sublt.w	r8, r5, r8
 801e2f2:	4443      	addlt	r3, r8
 801e2f4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801e2f6:	bfb6      	itet	lt
 801e2f8:	46a8      	movlt	r8, r5
 801e2fa:	eba8 0505 	subge.w	r5, r8, r5
 801e2fe:	2500      	movlt	r5, #0
 801e300:	f1b9 0f00 	cmp.w	r9, #0
 801e304:	bfb9      	ittee	lt
 801e306:	ebaa 0609 	sublt.w	r6, sl, r9
 801e30a:	2300      	movlt	r3, #0
 801e30c:	4656      	movge	r6, sl
 801e30e:	464b      	movge	r3, r9
 801e310:	e77b      	b.n	801e20a <_dtoa_r+0x632>
 801e312:	4645      	mov	r5, r8
 801e314:	4656      	mov	r6, sl
 801e316:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e318:	e780      	b.n	801e21c <_dtoa_r+0x644>
 801e31a:	4642      	mov	r2, r8
 801e31c:	e7a8      	b.n	801e270 <_dtoa_r+0x698>
 801e31e:	f04f 0800 	mov.w	r8, #0
 801e322:	e7d2      	b.n	801e2ca <_dtoa_r+0x6f2>
 801e324:	4698      	mov	r8, r3
 801e326:	e7d0      	b.n	801e2ca <_dtoa_r+0x6f2>
 801e328:	f04f 0800 	mov.w	r8, #0
 801e32c:	692b      	ldr	r3, [r5, #16]
 801e32e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801e332:	6918      	ldr	r0, [r3, #16]
 801e334:	f000 fc16 	bl	801eb64 <__hi0bits>
 801e338:	f1c0 0020 	rsb	r0, r0, #32
 801e33c:	9b07      	ldr	r3, [sp, #28]
 801e33e:	4418      	add	r0, r3
 801e340:	f010 001f 	ands.w	r0, r0, #31
 801e344:	d047      	beq.n	801e3d6 <_dtoa_r+0x7fe>
 801e346:	f1c0 0320 	rsb	r3, r0, #32
 801e34a:	2b04      	cmp	r3, #4
 801e34c:	dd3b      	ble.n	801e3c6 <_dtoa_r+0x7ee>
 801e34e:	9b07      	ldr	r3, [sp, #28]
 801e350:	f1c0 001c 	rsb	r0, r0, #28
 801e354:	4482      	add	sl, r0
 801e356:	4406      	add	r6, r0
 801e358:	4403      	add	r3, r0
 801e35a:	9307      	str	r3, [sp, #28]
 801e35c:	f1ba 0f00 	cmp.w	sl, #0
 801e360:	dd05      	ble.n	801e36e <_dtoa_r+0x796>
 801e362:	4652      	mov	r2, sl
 801e364:	9901      	ldr	r1, [sp, #4]
 801e366:	4620      	mov	r0, r4
 801e368:	f000 fd38 	bl	801eddc <__lshift>
 801e36c:	9001      	str	r0, [sp, #4]
 801e36e:	9b07      	ldr	r3, [sp, #28]
 801e370:	2b00      	cmp	r3, #0
 801e372:	dd05      	ble.n	801e380 <_dtoa_r+0x7a8>
 801e374:	4629      	mov	r1, r5
 801e376:	461a      	mov	r2, r3
 801e378:	4620      	mov	r0, r4
 801e37a:	f000 fd2f 	bl	801eddc <__lshift>
 801e37e:	4605      	mov	r5, r0
 801e380:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e382:	b353      	cbz	r3, 801e3da <_dtoa_r+0x802>
 801e384:	4629      	mov	r1, r5
 801e386:	9801      	ldr	r0, [sp, #4]
 801e388:	f000 fd7c 	bl	801ee84 <__mcmp>
 801e38c:	2800      	cmp	r0, #0
 801e38e:	da24      	bge.n	801e3da <_dtoa_r+0x802>
 801e390:	2300      	movs	r3, #0
 801e392:	220a      	movs	r2, #10
 801e394:	9901      	ldr	r1, [sp, #4]
 801e396:	4620      	mov	r0, r4
 801e398:	f000 fba9 	bl	801eaee <__multadd>
 801e39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e39e:	9001      	str	r0, [sp, #4]
 801e3a0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	f000 8142 	beq.w	801e62e <_dtoa_r+0xa56>
 801e3aa:	2300      	movs	r3, #0
 801e3ac:	4639      	mov	r1, r7
 801e3ae:	220a      	movs	r2, #10
 801e3b0:	4620      	mov	r0, r4
 801e3b2:	f000 fb9c 	bl	801eaee <__multadd>
 801e3b6:	9b06      	ldr	r3, [sp, #24]
 801e3b8:	2b00      	cmp	r3, #0
 801e3ba:	4607      	mov	r7, r0
 801e3bc:	dc4b      	bgt.n	801e456 <_dtoa_r+0x87e>
 801e3be:	9b08      	ldr	r3, [sp, #32]
 801e3c0:	2b02      	cmp	r3, #2
 801e3c2:	dd48      	ble.n	801e456 <_dtoa_r+0x87e>
 801e3c4:	e011      	b.n	801e3ea <_dtoa_r+0x812>
 801e3c6:	d0c9      	beq.n	801e35c <_dtoa_r+0x784>
 801e3c8:	9a07      	ldr	r2, [sp, #28]
 801e3ca:	331c      	adds	r3, #28
 801e3cc:	441a      	add	r2, r3
 801e3ce:	449a      	add	sl, r3
 801e3d0:	441e      	add	r6, r3
 801e3d2:	4613      	mov	r3, r2
 801e3d4:	e7c1      	b.n	801e35a <_dtoa_r+0x782>
 801e3d6:	4603      	mov	r3, r0
 801e3d8:	e7f6      	b.n	801e3c8 <_dtoa_r+0x7f0>
 801e3da:	f1b9 0f00 	cmp.w	r9, #0
 801e3de:	dc34      	bgt.n	801e44a <_dtoa_r+0x872>
 801e3e0:	9b08      	ldr	r3, [sp, #32]
 801e3e2:	2b02      	cmp	r3, #2
 801e3e4:	dd31      	ble.n	801e44a <_dtoa_r+0x872>
 801e3e6:	f8cd 9018 	str.w	r9, [sp, #24]
 801e3ea:	9b06      	ldr	r3, [sp, #24]
 801e3ec:	b963      	cbnz	r3, 801e408 <_dtoa_r+0x830>
 801e3ee:	4629      	mov	r1, r5
 801e3f0:	2205      	movs	r2, #5
 801e3f2:	4620      	mov	r0, r4
 801e3f4:	f000 fb7b 	bl	801eaee <__multadd>
 801e3f8:	4601      	mov	r1, r0
 801e3fa:	4605      	mov	r5, r0
 801e3fc:	9801      	ldr	r0, [sp, #4]
 801e3fe:	f000 fd41 	bl	801ee84 <__mcmp>
 801e402:	2800      	cmp	r0, #0
 801e404:	f73f adfc 	bgt.w	801e000 <_dtoa_r+0x428>
 801e408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e40a:	9e04      	ldr	r6, [sp, #16]
 801e40c:	ea6f 0b03 	mvn.w	fp, r3
 801e410:	f04f 0900 	mov.w	r9, #0
 801e414:	4629      	mov	r1, r5
 801e416:	4620      	mov	r0, r4
 801e418:	f000 fb52 	bl	801eac0 <_Bfree>
 801e41c:	2f00      	cmp	r7, #0
 801e41e:	f43f aebb 	beq.w	801e198 <_dtoa_r+0x5c0>
 801e422:	f1b9 0f00 	cmp.w	r9, #0
 801e426:	d005      	beq.n	801e434 <_dtoa_r+0x85c>
 801e428:	45b9      	cmp	r9, r7
 801e42a:	d003      	beq.n	801e434 <_dtoa_r+0x85c>
 801e42c:	4649      	mov	r1, r9
 801e42e:	4620      	mov	r0, r4
 801e430:	f000 fb46 	bl	801eac0 <_Bfree>
 801e434:	4639      	mov	r1, r7
 801e436:	4620      	mov	r0, r4
 801e438:	f000 fb42 	bl	801eac0 <_Bfree>
 801e43c:	e6ac      	b.n	801e198 <_dtoa_r+0x5c0>
 801e43e:	2500      	movs	r5, #0
 801e440:	462f      	mov	r7, r5
 801e442:	e7e1      	b.n	801e408 <_dtoa_r+0x830>
 801e444:	469b      	mov	fp, r3
 801e446:	462f      	mov	r7, r5
 801e448:	e5da      	b.n	801e000 <_dtoa_r+0x428>
 801e44a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e44c:	f8cd 9018 	str.w	r9, [sp, #24]
 801e450:	2b00      	cmp	r3, #0
 801e452:	f000 80f3 	beq.w	801e63c <_dtoa_r+0xa64>
 801e456:	2e00      	cmp	r6, #0
 801e458:	dd05      	ble.n	801e466 <_dtoa_r+0x88e>
 801e45a:	4639      	mov	r1, r7
 801e45c:	4632      	mov	r2, r6
 801e45e:	4620      	mov	r0, r4
 801e460:	f000 fcbc 	bl	801eddc <__lshift>
 801e464:	4607      	mov	r7, r0
 801e466:	f1b8 0f00 	cmp.w	r8, #0
 801e46a:	d04c      	beq.n	801e506 <_dtoa_r+0x92e>
 801e46c:	6879      	ldr	r1, [r7, #4]
 801e46e:	4620      	mov	r0, r4
 801e470:	f000 faf2 	bl	801ea58 <_Balloc>
 801e474:	693a      	ldr	r2, [r7, #16]
 801e476:	3202      	adds	r2, #2
 801e478:	4606      	mov	r6, r0
 801e47a:	0092      	lsls	r2, r2, #2
 801e47c:	f107 010c 	add.w	r1, r7, #12
 801e480:	300c      	adds	r0, #12
 801e482:	f7fe fcd2 	bl	801ce2a <memcpy>
 801e486:	2201      	movs	r2, #1
 801e488:	4631      	mov	r1, r6
 801e48a:	4620      	mov	r0, r4
 801e48c:	f000 fca6 	bl	801eddc <__lshift>
 801e490:	9b02      	ldr	r3, [sp, #8]
 801e492:	f8dd a010 	ldr.w	sl, [sp, #16]
 801e496:	f003 0301 	and.w	r3, r3, #1
 801e49a:	46b9      	mov	r9, r7
 801e49c:	9307      	str	r3, [sp, #28]
 801e49e:	4607      	mov	r7, r0
 801e4a0:	4629      	mov	r1, r5
 801e4a2:	9801      	ldr	r0, [sp, #4]
 801e4a4:	f7ff fb0a 	bl	801dabc <quorem>
 801e4a8:	4649      	mov	r1, r9
 801e4aa:	4606      	mov	r6, r0
 801e4ac:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801e4b0:	9801      	ldr	r0, [sp, #4]
 801e4b2:	f000 fce7 	bl	801ee84 <__mcmp>
 801e4b6:	463a      	mov	r2, r7
 801e4b8:	9002      	str	r0, [sp, #8]
 801e4ba:	4629      	mov	r1, r5
 801e4bc:	4620      	mov	r0, r4
 801e4be:	f000 fcfb 	bl	801eeb8 <__mdiff>
 801e4c2:	68c3      	ldr	r3, [r0, #12]
 801e4c4:	4602      	mov	r2, r0
 801e4c6:	bb03      	cbnz	r3, 801e50a <_dtoa_r+0x932>
 801e4c8:	4601      	mov	r1, r0
 801e4ca:	9009      	str	r0, [sp, #36]	; 0x24
 801e4cc:	9801      	ldr	r0, [sp, #4]
 801e4ce:	f000 fcd9 	bl	801ee84 <__mcmp>
 801e4d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e4d4:	4603      	mov	r3, r0
 801e4d6:	4611      	mov	r1, r2
 801e4d8:	4620      	mov	r0, r4
 801e4da:	9309      	str	r3, [sp, #36]	; 0x24
 801e4dc:	f000 faf0 	bl	801eac0 <_Bfree>
 801e4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4e2:	b9a3      	cbnz	r3, 801e50e <_dtoa_r+0x936>
 801e4e4:	9a08      	ldr	r2, [sp, #32]
 801e4e6:	b992      	cbnz	r2, 801e50e <_dtoa_r+0x936>
 801e4e8:	9a07      	ldr	r2, [sp, #28]
 801e4ea:	b982      	cbnz	r2, 801e50e <_dtoa_r+0x936>
 801e4ec:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801e4f0:	d029      	beq.n	801e546 <_dtoa_r+0x96e>
 801e4f2:	9b02      	ldr	r3, [sp, #8]
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	dd01      	ble.n	801e4fc <_dtoa_r+0x924>
 801e4f8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801e4fc:	f10a 0601 	add.w	r6, sl, #1
 801e500:	f88a 8000 	strb.w	r8, [sl]
 801e504:	e786      	b.n	801e414 <_dtoa_r+0x83c>
 801e506:	4638      	mov	r0, r7
 801e508:	e7c2      	b.n	801e490 <_dtoa_r+0x8b8>
 801e50a:	2301      	movs	r3, #1
 801e50c:	e7e3      	b.n	801e4d6 <_dtoa_r+0x8fe>
 801e50e:	9a02      	ldr	r2, [sp, #8]
 801e510:	2a00      	cmp	r2, #0
 801e512:	db04      	blt.n	801e51e <_dtoa_r+0x946>
 801e514:	d124      	bne.n	801e560 <_dtoa_r+0x988>
 801e516:	9a08      	ldr	r2, [sp, #32]
 801e518:	bb12      	cbnz	r2, 801e560 <_dtoa_r+0x988>
 801e51a:	9a07      	ldr	r2, [sp, #28]
 801e51c:	bb02      	cbnz	r2, 801e560 <_dtoa_r+0x988>
 801e51e:	2b00      	cmp	r3, #0
 801e520:	ddec      	ble.n	801e4fc <_dtoa_r+0x924>
 801e522:	2201      	movs	r2, #1
 801e524:	9901      	ldr	r1, [sp, #4]
 801e526:	4620      	mov	r0, r4
 801e528:	f000 fc58 	bl	801eddc <__lshift>
 801e52c:	4629      	mov	r1, r5
 801e52e:	9001      	str	r0, [sp, #4]
 801e530:	f000 fca8 	bl	801ee84 <__mcmp>
 801e534:	2800      	cmp	r0, #0
 801e536:	dc03      	bgt.n	801e540 <_dtoa_r+0x968>
 801e538:	d1e0      	bne.n	801e4fc <_dtoa_r+0x924>
 801e53a:	f018 0f01 	tst.w	r8, #1
 801e53e:	d0dd      	beq.n	801e4fc <_dtoa_r+0x924>
 801e540:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801e544:	d1d8      	bne.n	801e4f8 <_dtoa_r+0x920>
 801e546:	2339      	movs	r3, #57	; 0x39
 801e548:	f10a 0601 	add.w	r6, sl, #1
 801e54c:	f88a 3000 	strb.w	r3, [sl]
 801e550:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e554:	2b39      	cmp	r3, #57	; 0x39
 801e556:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801e55a:	d04c      	beq.n	801e5f6 <_dtoa_r+0xa1e>
 801e55c:	3301      	adds	r3, #1
 801e55e:	e051      	b.n	801e604 <_dtoa_r+0xa2c>
 801e560:	2b00      	cmp	r3, #0
 801e562:	f10a 0601 	add.w	r6, sl, #1
 801e566:	dd05      	ble.n	801e574 <_dtoa_r+0x99c>
 801e568:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801e56c:	d0eb      	beq.n	801e546 <_dtoa_r+0x96e>
 801e56e:	f108 0801 	add.w	r8, r8, #1
 801e572:	e7c5      	b.n	801e500 <_dtoa_r+0x928>
 801e574:	9b04      	ldr	r3, [sp, #16]
 801e576:	9a06      	ldr	r2, [sp, #24]
 801e578:	f806 8c01 	strb.w	r8, [r6, #-1]
 801e57c:	1af3      	subs	r3, r6, r3
 801e57e:	4293      	cmp	r3, r2
 801e580:	d021      	beq.n	801e5c6 <_dtoa_r+0x9ee>
 801e582:	2300      	movs	r3, #0
 801e584:	220a      	movs	r2, #10
 801e586:	9901      	ldr	r1, [sp, #4]
 801e588:	4620      	mov	r0, r4
 801e58a:	f000 fab0 	bl	801eaee <__multadd>
 801e58e:	45b9      	cmp	r9, r7
 801e590:	9001      	str	r0, [sp, #4]
 801e592:	f04f 0300 	mov.w	r3, #0
 801e596:	f04f 020a 	mov.w	r2, #10
 801e59a:	4649      	mov	r1, r9
 801e59c:	4620      	mov	r0, r4
 801e59e:	d105      	bne.n	801e5ac <_dtoa_r+0x9d4>
 801e5a0:	f000 faa5 	bl	801eaee <__multadd>
 801e5a4:	4681      	mov	r9, r0
 801e5a6:	4607      	mov	r7, r0
 801e5a8:	46b2      	mov	sl, r6
 801e5aa:	e779      	b.n	801e4a0 <_dtoa_r+0x8c8>
 801e5ac:	f000 fa9f 	bl	801eaee <__multadd>
 801e5b0:	4639      	mov	r1, r7
 801e5b2:	4681      	mov	r9, r0
 801e5b4:	2300      	movs	r3, #0
 801e5b6:	220a      	movs	r2, #10
 801e5b8:	4620      	mov	r0, r4
 801e5ba:	f000 fa98 	bl	801eaee <__multadd>
 801e5be:	4607      	mov	r7, r0
 801e5c0:	e7f2      	b.n	801e5a8 <_dtoa_r+0x9d0>
 801e5c2:	f04f 0900 	mov.w	r9, #0
 801e5c6:	2201      	movs	r2, #1
 801e5c8:	9901      	ldr	r1, [sp, #4]
 801e5ca:	4620      	mov	r0, r4
 801e5cc:	f000 fc06 	bl	801eddc <__lshift>
 801e5d0:	4629      	mov	r1, r5
 801e5d2:	9001      	str	r0, [sp, #4]
 801e5d4:	f000 fc56 	bl	801ee84 <__mcmp>
 801e5d8:	2800      	cmp	r0, #0
 801e5da:	dcb9      	bgt.n	801e550 <_dtoa_r+0x978>
 801e5dc:	d102      	bne.n	801e5e4 <_dtoa_r+0xa0c>
 801e5de:	f018 0f01 	tst.w	r8, #1
 801e5e2:	d1b5      	bne.n	801e550 <_dtoa_r+0x978>
 801e5e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e5e8:	2b30      	cmp	r3, #48	; 0x30
 801e5ea:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801e5ee:	f47f af11 	bne.w	801e414 <_dtoa_r+0x83c>
 801e5f2:	4616      	mov	r6, r2
 801e5f4:	e7f6      	b.n	801e5e4 <_dtoa_r+0xa0c>
 801e5f6:	9b04      	ldr	r3, [sp, #16]
 801e5f8:	4293      	cmp	r3, r2
 801e5fa:	d105      	bne.n	801e608 <_dtoa_r+0xa30>
 801e5fc:	9a04      	ldr	r2, [sp, #16]
 801e5fe:	f10b 0b01 	add.w	fp, fp, #1
 801e602:	2331      	movs	r3, #49	; 0x31
 801e604:	7013      	strb	r3, [r2, #0]
 801e606:	e705      	b.n	801e414 <_dtoa_r+0x83c>
 801e608:	4616      	mov	r6, r2
 801e60a:	e7a1      	b.n	801e550 <_dtoa_r+0x978>
 801e60c:	4b16      	ldr	r3, [pc, #88]	; (801e668 <_dtoa_r+0xa90>)
 801e60e:	f7ff bb48 	b.w	801dca2 <_dtoa_r+0xca>
 801e612:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e614:	2b00      	cmp	r3, #0
 801e616:	f47f ab23 	bne.w	801dc60 <_dtoa_r+0x88>
 801e61a:	4b14      	ldr	r3, [pc, #80]	; (801e66c <_dtoa_r+0xa94>)
 801e61c:	f7ff bb41 	b.w	801dca2 <_dtoa_r+0xca>
 801e620:	9b08      	ldr	r3, [sp, #32]
 801e622:	2b01      	cmp	r3, #1
 801e624:	f77f ae3b 	ble.w	801e29e <_dtoa_r+0x6c6>
 801e628:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801e62c:	e64f      	b.n	801e2ce <_dtoa_r+0x6f6>
 801e62e:	9b06      	ldr	r3, [sp, #24]
 801e630:	2b00      	cmp	r3, #0
 801e632:	dc03      	bgt.n	801e63c <_dtoa_r+0xa64>
 801e634:	9b08      	ldr	r3, [sp, #32]
 801e636:	2b02      	cmp	r3, #2
 801e638:	f73f aed7 	bgt.w	801e3ea <_dtoa_r+0x812>
 801e63c:	9e04      	ldr	r6, [sp, #16]
 801e63e:	9801      	ldr	r0, [sp, #4]
 801e640:	4629      	mov	r1, r5
 801e642:	f7ff fa3b 	bl	801dabc <quorem>
 801e646:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801e64a:	f806 8b01 	strb.w	r8, [r6], #1
 801e64e:	9b04      	ldr	r3, [sp, #16]
 801e650:	9a06      	ldr	r2, [sp, #24]
 801e652:	1af3      	subs	r3, r6, r3
 801e654:	429a      	cmp	r2, r3
 801e656:	ddb4      	ble.n	801e5c2 <_dtoa_r+0x9ea>
 801e658:	2300      	movs	r3, #0
 801e65a:	220a      	movs	r2, #10
 801e65c:	9901      	ldr	r1, [sp, #4]
 801e65e:	4620      	mov	r0, r4
 801e660:	f000 fa45 	bl	801eaee <__multadd>
 801e664:	9001      	str	r0, [sp, #4]
 801e666:	e7ea      	b.n	801e63e <_dtoa_r+0xa66>
 801e668:	08022b22 	.word	0x08022b22
 801e66c:	08022c47 	.word	0x08022c47

0801e670 <__sflush_r>:
 801e670:	898a      	ldrh	r2, [r1, #12]
 801e672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e676:	4605      	mov	r5, r0
 801e678:	0710      	lsls	r0, r2, #28
 801e67a:	460c      	mov	r4, r1
 801e67c:	d458      	bmi.n	801e730 <__sflush_r+0xc0>
 801e67e:	684b      	ldr	r3, [r1, #4]
 801e680:	2b00      	cmp	r3, #0
 801e682:	dc05      	bgt.n	801e690 <__sflush_r+0x20>
 801e684:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e686:	2b00      	cmp	r3, #0
 801e688:	dc02      	bgt.n	801e690 <__sflush_r+0x20>
 801e68a:	2000      	movs	r0, #0
 801e68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e692:	2e00      	cmp	r6, #0
 801e694:	d0f9      	beq.n	801e68a <__sflush_r+0x1a>
 801e696:	2300      	movs	r3, #0
 801e698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e69c:	682f      	ldr	r7, [r5, #0]
 801e69e:	6a21      	ldr	r1, [r4, #32]
 801e6a0:	602b      	str	r3, [r5, #0]
 801e6a2:	d032      	beq.n	801e70a <__sflush_r+0x9a>
 801e6a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e6a6:	89a3      	ldrh	r3, [r4, #12]
 801e6a8:	075a      	lsls	r2, r3, #29
 801e6aa:	d505      	bpl.n	801e6b8 <__sflush_r+0x48>
 801e6ac:	6863      	ldr	r3, [r4, #4]
 801e6ae:	1ac0      	subs	r0, r0, r3
 801e6b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e6b2:	b10b      	cbz	r3, 801e6b8 <__sflush_r+0x48>
 801e6b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e6b6:	1ac0      	subs	r0, r0, r3
 801e6b8:	2300      	movs	r3, #0
 801e6ba:	4602      	mov	r2, r0
 801e6bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e6be:	6a21      	ldr	r1, [r4, #32]
 801e6c0:	4628      	mov	r0, r5
 801e6c2:	47b0      	blx	r6
 801e6c4:	1c43      	adds	r3, r0, #1
 801e6c6:	89a3      	ldrh	r3, [r4, #12]
 801e6c8:	d106      	bne.n	801e6d8 <__sflush_r+0x68>
 801e6ca:	6829      	ldr	r1, [r5, #0]
 801e6cc:	291d      	cmp	r1, #29
 801e6ce:	d848      	bhi.n	801e762 <__sflush_r+0xf2>
 801e6d0:	4a29      	ldr	r2, [pc, #164]	; (801e778 <__sflush_r+0x108>)
 801e6d2:	40ca      	lsrs	r2, r1
 801e6d4:	07d6      	lsls	r6, r2, #31
 801e6d6:	d544      	bpl.n	801e762 <__sflush_r+0xf2>
 801e6d8:	2200      	movs	r2, #0
 801e6da:	6062      	str	r2, [r4, #4]
 801e6dc:	04d9      	lsls	r1, r3, #19
 801e6de:	6922      	ldr	r2, [r4, #16]
 801e6e0:	6022      	str	r2, [r4, #0]
 801e6e2:	d504      	bpl.n	801e6ee <__sflush_r+0x7e>
 801e6e4:	1c42      	adds	r2, r0, #1
 801e6e6:	d101      	bne.n	801e6ec <__sflush_r+0x7c>
 801e6e8:	682b      	ldr	r3, [r5, #0]
 801e6ea:	b903      	cbnz	r3, 801e6ee <__sflush_r+0x7e>
 801e6ec:	6560      	str	r0, [r4, #84]	; 0x54
 801e6ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e6f0:	602f      	str	r7, [r5, #0]
 801e6f2:	2900      	cmp	r1, #0
 801e6f4:	d0c9      	beq.n	801e68a <__sflush_r+0x1a>
 801e6f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e6fa:	4299      	cmp	r1, r3
 801e6fc:	d002      	beq.n	801e704 <__sflush_r+0x94>
 801e6fe:	4628      	mov	r0, r5
 801e700:	f000 fc94 	bl	801f02c <_free_r>
 801e704:	2000      	movs	r0, #0
 801e706:	6360      	str	r0, [r4, #52]	; 0x34
 801e708:	e7c0      	b.n	801e68c <__sflush_r+0x1c>
 801e70a:	2301      	movs	r3, #1
 801e70c:	4628      	mov	r0, r5
 801e70e:	47b0      	blx	r6
 801e710:	1c41      	adds	r1, r0, #1
 801e712:	d1c8      	bne.n	801e6a6 <__sflush_r+0x36>
 801e714:	682b      	ldr	r3, [r5, #0]
 801e716:	2b00      	cmp	r3, #0
 801e718:	d0c5      	beq.n	801e6a6 <__sflush_r+0x36>
 801e71a:	2b1d      	cmp	r3, #29
 801e71c:	d001      	beq.n	801e722 <__sflush_r+0xb2>
 801e71e:	2b16      	cmp	r3, #22
 801e720:	d101      	bne.n	801e726 <__sflush_r+0xb6>
 801e722:	602f      	str	r7, [r5, #0]
 801e724:	e7b1      	b.n	801e68a <__sflush_r+0x1a>
 801e726:	89a3      	ldrh	r3, [r4, #12]
 801e728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e72c:	81a3      	strh	r3, [r4, #12]
 801e72e:	e7ad      	b.n	801e68c <__sflush_r+0x1c>
 801e730:	690f      	ldr	r7, [r1, #16]
 801e732:	2f00      	cmp	r7, #0
 801e734:	d0a9      	beq.n	801e68a <__sflush_r+0x1a>
 801e736:	0793      	lsls	r3, r2, #30
 801e738:	680e      	ldr	r6, [r1, #0]
 801e73a:	bf08      	it	eq
 801e73c:	694b      	ldreq	r3, [r1, #20]
 801e73e:	600f      	str	r7, [r1, #0]
 801e740:	bf18      	it	ne
 801e742:	2300      	movne	r3, #0
 801e744:	eba6 0807 	sub.w	r8, r6, r7
 801e748:	608b      	str	r3, [r1, #8]
 801e74a:	f1b8 0f00 	cmp.w	r8, #0
 801e74e:	dd9c      	ble.n	801e68a <__sflush_r+0x1a>
 801e750:	4643      	mov	r3, r8
 801e752:	463a      	mov	r2, r7
 801e754:	6a21      	ldr	r1, [r4, #32]
 801e756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e758:	4628      	mov	r0, r5
 801e75a:	47b0      	blx	r6
 801e75c:	2800      	cmp	r0, #0
 801e75e:	dc06      	bgt.n	801e76e <__sflush_r+0xfe>
 801e760:	89a3      	ldrh	r3, [r4, #12]
 801e762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e766:	81a3      	strh	r3, [r4, #12]
 801e768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e76c:	e78e      	b.n	801e68c <__sflush_r+0x1c>
 801e76e:	4407      	add	r7, r0
 801e770:	eba8 0800 	sub.w	r8, r8, r0
 801e774:	e7e9      	b.n	801e74a <__sflush_r+0xda>
 801e776:	bf00      	nop
 801e778:	20400001 	.word	0x20400001

0801e77c <_fflush_r>:
 801e77c:	b538      	push	{r3, r4, r5, lr}
 801e77e:	690b      	ldr	r3, [r1, #16]
 801e780:	4605      	mov	r5, r0
 801e782:	460c      	mov	r4, r1
 801e784:	b1db      	cbz	r3, 801e7be <_fflush_r+0x42>
 801e786:	b118      	cbz	r0, 801e790 <_fflush_r+0x14>
 801e788:	6983      	ldr	r3, [r0, #24]
 801e78a:	b90b      	cbnz	r3, 801e790 <_fflush_r+0x14>
 801e78c:	f000 f860 	bl	801e850 <__sinit>
 801e790:	4b0c      	ldr	r3, [pc, #48]	; (801e7c4 <_fflush_r+0x48>)
 801e792:	429c      	cmp	r4, r3
 801e794:	d109      	bne.n	801e7aa <_fflush_r+0x2e>
 801e796:	686c      	ldr	r4, [r5, #4]
 801e798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e79c:	b17b      	cbz	r3, 801e7be <_fflush_r+0x42>
 801e79e:	4621      	mov	r1, r4
 801e7a0:	4628      	mov	r0, r5
 801e7a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e7a6:	f7ff bf63 	b.w	801e670 <__sflush_r>
 801e7aa:	4b07      	ldr	r3, [pc, #28]	; (801e7c8 <_fflush_r+0x4c>)
 801e7ac:	429c      	cmp	r4, r3
 801e7ae:	d101      	bne.n	801e7b4 <_fflush_r+0x38>
 801e7b0:	68ac      	ldr	r4, [r5, #8]
 801e7b2:	e7f1      	b.n	801e798 <_fflush_r+0x1c>
 801e7b4:	4b05      	ldr	r3, [pc, #20]	; (801e7cc <_fflush_r+0x50>)
 801e7b6:	429c      	cmp	r4, r3
 801e7b8:	bf08      	it	eq
 801e7ba:	68ec      	ldreq	r4, [r5, #12]
 801e7bc:	e7ec      	b.n	801e798 <_fflush_r+0x1c>
 801e7be:	2000      	movs	r0, #0
 801e7c0:	bd38      	pop	{r3, r4, r5, pc}
 801e7c2:	bf00      	nop
 801e7c4:	08022c74 	.word	0x08022c74
 801e7c8:	08022c94 	.word	0x08022c94
 801e7cc:	08022c54 	.word	0x08022c54

0801e7d0 <std>:
 801e7d0:	2300      	movs	r3, #0
 801e7d2:	b510      	push	{r4, lr}
 801e7d4:	4604      	mov	r4, r0
 801e7d6:	e9c0 3300 	strd	r3, r3, [r0]
 801e7da:	6083      	str	r3, [r0, #8]
 801e7dc:	8181      	strh	r1, [r0, #12]
 801e7de:	6643      	str	r3, [r0, #100]	; 0x64
 801e7e0:	81c2      	strh	r2, [r0, #14]
 801e7e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e7e6:	6183      	str	r3, [r0, #24]
 801e7e8:	4619      	mov	r1, r3
 801e7ea:	2208      	movs	r2, #8
 801e7ec:	305c      	adds	r0, #92	; 0x5c
 801e7ee:	f7fe fb40 	bl	801ce72 <memset>
 801e7f2:	4b05      	ldr	r3, [pc, #20]	; (801e808 <std+0x38>)
 801e7f4:	6263      	str	r3, [r4, #36]	; 0x24
 801e7f6:	4b05      	ldr	r3, [pc, #20]	; (801e80c <std+0x3c>)
 801e7f8:	62a3      	str	r3, [r4, #40]	; 0x28
 801e7fa:	4b05      	ldr	r3, [pc, #20]	; (801e810 <std+0x40>)
 801e7fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e7fe:	4b05      	ldr	r3, [pc, #20]	; (801e814 <std+0x44>)
 801e800:	6224      	str	r4, [r4, #32]
 801e802:	6323      	str	r3, [r4, #48]	; 0x30
 801e804:	bd10      	pop	{r4, pc}
 801e806:	bf00      	nop
 801e808:	0801f6c1 	.word	0x0801f6c1
 801e80c:	0801f6e3 	.word	0x0801f6e3
 801e810:	0801f71b 	.word	0x0801f71b
 801e814:	0801f73f 	.word	0x0801f73f

0801e818 <_cleanup_r>:
 801e818:	4901      	ldr	r1, [pc, #4]	; (801e820 <_cleanup_r+0x8>)
 801e81a:	f000 b885 	b.w	801e928 <_fwalk_reent>
 801e81e:	bf00      	nop
 801e820:	0801e77d 	.word	0x0801e77d

0801e824 <__sfmoreglue>:
 801e824:	b570      	push	{r4, r5, r6, lr}
 801e826:	1e4a      	subs	r2, r1, #1
 801e828:	2568      	movs	r5, #104	; 0x68
 801e82a:	4355      	muls	r5, r2
 801e82c:	460e      	mov	r6, r1
 801e82e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e832:	f000 fc49 	bl	801f0c8 <_malloc_r>
 801e836:	4604      	mov	r4, r0
 801e838:	b140      	cbz	r0, 801e84c <__sfmoreglue+0x28>
 801e83a:	2100      	movs	r1, #0
 801e83c:	e9c0 1600 	strd	r1, r6, [r0]
 801e840:	300c      	adds	r0, #12
 801e842:	60a0      	str	r0, [r4, #8]
 801e844:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e848:	f7fe fb13 	bl	801ce72 <memset>
 801e84c:	4620      	mov	r0, r4
 801e84e:	bd70      	pop	{r4, r5, r6, pc}

0801e850 <__sinit>:
 801e850:	6983      	ldr	r3, [r0, #24]
 801e852:	b510      	push	{r4, lr}
 801e854:	4604      	mov	r4, r0
 801e856:	bb33      	cbnz	r3, 801e8a6 <__sinit+0x56>
 801e858:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801e85c:	6503      	str	r3, [r0, #80]	; 0x50
 801e85e:	4b12      	ldr	r3, [pc, #72]	; (801e8a8 <__sinit+0x58>)
 801e860:	4a12      	ldr	r2, [pc, #72]	; (801e8ac <__sinit+0x5c>)
 801e862:	681b      	ldr	r3, [r3, #0]
 801e864:	6282      	str	r2, [r0, #40]	; 0x28
 801e866:	4298      	cmp	r0, r3
 801e868:	bf04      	itt	eq
 801e86a:	2301      	moveq	r3, #1
 801e86c:	6183      	streq	r3, [r0, #24]
 801e86e:	f000 f81f 	bl	801e8b0 <__sfp>
 801e872:	6060      	str	r0, [r4, #4]
 801e874:	4620      	mov	r0, r4
 801e876:	f000 f81b 	bl	801e8b0 <__sfp>
 801e87a:	60a0      	str	r0, [r4, #8]
 801e87c:	4620      	mov	r0, r4
 801e87e:	f000 f817 	bl	801e8b0 <__sfp>
 801e882:	2200      	movs	r2, #0
 801e884:	60e0      	str	r0, [r4, #12]
 801e886:	2104      	movs	r1, #4
 801e888:	6860      	ldr	r0, [r4, #4]
 801e88a:	f7ff ffa1 	bl	801e7d0 <std>
 801e88e:	2201      	movs	r2, #1
 801e890:	2109      	movs	r1, #9
 801e892:	68a0      	ldr	r0, [r4, #8]
 801e894:	f7ff ff9c 	bl	801e7d0 <std>
 801e898:	2202      	movs	r2, #2
 801e89a:	2112      	movs	r1, #18
 801e89c:	68e0      	ldr	r0, [r4, #12]
 801e89e:	f7ff ff97 	bl	801e7d0 <std>
 801e8a2:	2301      	movs	r3, #1
 801e8a4:	61a3      	str	r3, [r4, #24]
 801e8a6:	bd10      	pop	{r4, pc}
 801e8a8:	08022b04 	.word	0x08022b04
 801e8ac:	0801e819 	.word	0x0801e819

0801e8b0 <__sfp>:
 801e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8b2:	4b1b      	ldr	r3, [pc, #108]	; (801e920 <__sfp+0x70>)
 801e8b4:	681e      	ldr	r6, [r3, #0]
 801e8b6:	69b3      	ldr	r3, [r6, #24]
 801e8b8:	4607      	mov	r7, r0
 801e8ba:	b913      	cbnz	r3, 801e8c2 <__sfp+0x12>
 801e8bc:	4630      	mov	r0, r6
 801e8be:	f7ff ffc7 	bl	801e850 <__sinit>
 801e8c2:	3648      	adds	r6, #72	; 0x48
 801e8c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e8c8:	3b01      	subs	r3, #1
 801e8ca:	d503      	bpl.n	801e8d4 <__sfp+0x24>
 801e8cc:	6833      	ldr	r3, [r6, #0]
 801e8ce:	b133      	cbz	r3, 801e8de <__sfp+0x2e>
 801e8d0:	6836      	ldr	r6, [r6, #0]
 801e8d2:	e7f7      	b.n	801e8c4 <__sfp+0x14>
 801e8d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e8d8:	b16d      	cbz	r5, 801e8f6 <__sfp+0x46>
 801e8da:	3468      	adds	r4, #104	; 0x68
 801e8dc:	e7f4      	b.n	801e8c8 <__sfp+0x18>
 801e8de:	2104      	movs	r1, #4
 801e8e0:	4638      	mov	r0, r7
 801e8e2:	f7ff ff9f 	bl	801e824 <__sfmoreglue>
 801e8e6:	6030      	str	r0, [r6, #0]
 801e8e8:	2800      	cmp	r0, #0
 801e8ea:	d1f1      	bne.n	801e8d0 <__sfp+0x20>
 801e8ec:	230c      	movs	r3, #12
 801e8ee:	603b      	str	r3, [r7, #0]
 801e8f0:	4604      	mov	r4, r0
 801e8f2:	4620      	mov	r0, r4
 801e8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e8f6:	4b0b      	ldr	r3, [pc, #44]	; (801e924 <__sfp+0x74>)
 801e8f8:	6665      	str	r5, [r4, #100]	; 0x64
 801e8fa:	e9c4 5500 	strd	r5, r5, [r4]
 801e8fe:	60a5      	str	r5, [r4, #8]
 801e900:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801e904:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801e908:	2208      	movs	r2, #8
 801e90a:	4629      	mov	r1, r5
 801e90c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e910:	f7fe faaf 	bl	801ce72 <memset>
 801e914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e91c:	e7e9      	b.n	801e8f2 <__sfp+0x42>
 801e91e:	bf00      	nop
 801e920:	08022b04 	.word	0x08022b04
 801e924:	ffff0001 	.word	0xffff0001

0801e928 <_fwalk_reent>:
 801e928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e92c:	4680      	mov	r8, r0
 801e92e:	4689      	mov	r9, r1
 801e930:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e934:	2600      	movs	r6, #0
 801e936:	b914      	cbnz	r4, 801e93e <_fwalk_reent+0x16>
 801e938:	4630      	mov	r0, r6
 801e93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e93e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801e942:	3f01      	subs	r7, #1
 801e944:	d501      	bpl.n	801e94a <_fwalk_reent+0x22>
 801e946:	6824      	ldr	r4, [r4, #0]
 801e948:	e7f5      	b.n	801e936 <_fwalk_reent+0xe>
 801e94a:	89ab      	ldrh	r3, [r5, #12]
 801e94c:	2b01      	cmp	r3, #1
 801e94e:	d907      	bls.n	801e960 <_fwalk_reent+0x38>
 801e950:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e954:	3301      	adds	r3, #1
 801e956:	d003      	beq.n	801e960 <_fwalk_reent+0x38>
 801e958:	4629      	mov	r1, r5
 801e95a:	4640      	mov	r0, r8
 801e95c:	47c8      	blx	r9
 801e95e:	4306      	orrs	r6, r0
 801e960:	3568      	adds	r5, #104	; 0x68
 801e962:	e7ee      	b.n	801e942 <_fwalk_reent+0x1a>

0801e964 <_localeconv_r>:
 801e964:	4b04      	ldr	r3, [pc, #16]	; (801e978 <_localeconv_r+0x14>)
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	6a18      	ldr	r0, [r3, #32]
 801e96a:	4b04      	ldr	r3, [pc, #16]	; (801e97c <_localeconv_r+0x18>)
 801e96c:	2800      	cmp	r0, #0
 801e96e:	bf08      	it	eq
 801e970:	4618      	moveq	r0, r3
 801e972:	30f0      	adds	r0, #240	; 0xf0
 801e974:	4770      	bx	lr
 801e976:	bf00      	nop
 801e978:	2000003c 	.word	0x2000003c
 801e97c:	200000a0 	.word	0x200000a0

0801e980 <__swhatbuf_r>:
 801e980:	b570      	push	{r4, r5, r6, lr}
 801e982:	460e      	mov	r6, r1
 801e984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e988:	2900      	cmp	r1, #0
 801e98a:	b096      	sub	sp, #88	; 0x58
 801e98c:	4614      	mov	r4, r2
 801e98e:	461d      	mov	r5, r3
 801e990:	da07      	bge.n	801e9a2 <__swhatbuf_r+0x22>
 801e992:	2300      	movs	r3, #0
 801e994:	602b      	str	r3, [r5, #0]
 801e996:	89b3      	ldrh	r3, [r6, #12]
 801e998:	061a      	lsls	r2, r3, #24
 801e99a:	d410      	bmi.n	801e9be <__swhatbuf_r+0x3e>
 801e99c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e9a0:	e00e      	b.n	801e9c0 <__swhatbuf_r+0x40>
 801e9a2:	466a      	mov	r2, sp
 801e9a4:	f000 fef2 	bl	801f78c <_fstat_r>
 801e9a8:	2800      	cmp	r0, #0
 801e9aa:	dbf2      	blt.n	801e992 <__swhatbuf_r+0x12>
 801e9ac:	9a01      	ldr	r2, [sp, #4]
 801e9ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e9b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e9b6:	425a      	negs	r2, r3
 801e9b8:	415a      	adcs	r2, r3
 801e9ba:	602a      	str	r2, [r5, #0]
 801e9bc:	e7ee      	b.n	801e99c <__swhatbuf_r+0x1c>
 801e9be:	2340      	movs	r3, #64	; 0x40
 801e9c0:	2000      	movs	r0, #0
 801e9c2:	6023      	str	r3, [r4, #0]
 801e9c4:	b016      	add	sp, #88	; 0x58
 801e9c6:	bd70      	pop	{r4, r5, r6, pc}

0801e9c8 <__smakebuf_r>:
 801e9c8:	898b      	ldrh	r3, [r1, #12]
 801e9ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e9cc:	079d      	lsls	r5, r3, #30
 801e9ce:	4606      	mov	r6, r0
 801e9d0:	460c      	mov	r4, r1
 801e9d2:	d507      	bpl.n	801e9e4 <__smakebuf_r+0x1c>
 801e9d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e9d8:	6023      	str	r3, [r4, #0]
 801e9da:	6123      	str	r3, [r4, #16]
 801e9dc:	2301      	movs	r3, #1
 801e9de:	6163      	str	r3, [r4, #20]
 801e9e0:	b002      	add	sp, #8
 801e9e2:	bd70      	pop	{r4, r5, r6, pc}
 801e9e4:	ab01      	add	r3, sp, #4
 801e9e6:	466a      	mov	r2, sp
 801e9e8:	f7ff ffca 	bl	801e980 <__swhatbuf_r>
 801e9ec:	9900      	ldr	r1, [sp, #0]
 801e9ee:	4605      	mov	r5, r0
 801e9f0:	4630      	mov	r0, r6
 801e9f2:	f000 fb69 	bl	801f0c8 <_malloc_r>
 801e9f6:	b948      	cbnz	r0, 801ea0c <__smakebuf_r+0x44>
 801e9f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e9fc:	059a      	lsls	r2, r3, #22
 801e9fe:	d4ef      	bmi.n	801e9e0 <__smakebuf_r+0x18>
 801ea00:	f023 0303 	bic.w	r3, r3, #3
 801ea04:	f043 0302 	orr.w	r3, r3, #2
 801ea08:	81a3      	strh	r3, [r4, #12]
 801ea0a:	e7e3      	b.n	801e9d4 <__smakebuf_r+0xc>
 801ea0c:	4b0d      	ldr	r3, [pc, #52]	; (801ea44 <__smakebuf_r+0x7c>)
 801ea0e:	62b3      	str	r3, [r6, #40]	; 0x28
 801ea10:	89a3      	ldrh	r3, [r4, #12]
 801ea12:	6020      	str	r0, [r4, #0]
 801ea14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ea18:	81a3      	strh	r3, [r4, #12]
 801ea1a:	9b00      	ldr	r3, [sp, #0]
 801ea1c:	6163      	str	r3, [r4, #20]
 801ea1e:	9b01      	ldr	r3, [sp, #4]
 801ea20:	6120      	str	r0, [r4, #16]
 801ea22:	b15b      	cbz	r3, 801ea3c <__smakebuf_r+0x74>
 801ea24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ea28:	4630      	mov	r0, r6
 801ea2a:	f000 fec1 	bl	801f7b0 <_isatty_r>
 801ea2e:	b128      	cbz	r0, 801ea3c <__smakebuf_r+0x74>
 801ea30:	89a3      	ldrh	r3, [r4, #12]
 801ea32:	f023 0303 	bic.w	r3, r3, #3
 801ea36:	f043 0301 	orr.w	r3, r3, #1
 801ea3a:	81a3      	strh	r3, [r4, #12]
 801ea3c:	89a3      	ldrh	r3, [r4, #12]
 801ea3e:	431d      	orrs	r5, r3
 801ea40:	81a5      	strh	r5, [r4, #12]
 801ea42:	e7cd      	b.n	801e9e0 <__smakebuf_r+0x18>
 801ea44:	0801e819 	.word	0x0801e819

0801ea48 <malloc>:
 801ea48:	4b02      	ldr	r3, [pc, #8]	; (801ea54 <malloc+0xc>)
 801ea4a:	4601      	mov	r1, r0
 801ea4c:	6818      	ldr	r0, [r3, #0]
 801ea4e:	f000 bb3b 	b.w	801f0c8 <_malloc_r>
 801ea52:	bf00      	nop
 801ea54:	2000003c 	.word	0x2000003c

0801ea58 <_Balloc>:
 801ea58:	b570      	push	{r4, r5, r6, lr}
 801ea5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ea5c:	4604      	mov	r4, r0
 801ea5e:	460e      	mov	r6, r1
 801ea60:	b93d      	cbnz	r5, 801ea72 <_Balloc+0x1a>
 801ea62:	2010      	movs	r0, #16
 801ea64:	f7ff fff0 	bl	801ea48 <malloc>
 801ea68:	6260      	str	r0, [r4, #36]	; 0x24
 801ea6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ea6e:	6005      	str	r5, [r0, #0]
 801ea70:	60c5      	str	r5, [r0, #12]
 801ea72:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801ea74:	68eb      	ldr	r3, [r5, #12]
 801ea76:	b183      	cbz	r3, 801ea9a <_Balloc+0x42>
 801ea78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ea7a:	68db      	ldr	r3, [r3, #12]
 801ea7c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ea80:	b9b8      	cbnz	r0, 801eab2 <_Balloc+0x5a>
 801ea82:	2101      	movs	r1, #1
 801ea84:	fa01 f506 	lsl.w	r5, r1, r6
 801ea88:	1d6a      	adds	r2, r5, #5
 801ea8a:	0092      	lsls	r2, r2, #2
 801ea8c:	4620      	mov	r0, r4
 801ea8e:	f000 fabf 	bl	801f010 <_calloc_r>
 801ea92:	b160      	cbz	r0, 801eaae <_Balloc+0x56>
 801ea94:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801ea98:	e00e      	b.n	801eab8 <_Balloc+0x60>
 801ea9a:	2221      	movs	r2, #33	; 0x21
 801ea9c:	2104      	movs	r1, #4
 801ea9e:	4620      	mov	r0, r4
 801eaa0:	f000 fab6 	bl	801f010 <_calloc_r>
 801eaa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801eaa6:	60e8      	str	r0, [r5, #12]
 801eaa8:	68db      	ldr	r3, [r3, #12]
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d1e4      	bne.n	801ea78 <_Balloc+0x20>
 801eaae:	2000      	movs	r0, #0
 801eab0:	bd70      	pop	{r4, r5, r6, pc}
 801eab2:	6802      	ldr	r2, [r0, #0]
 801eab4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801eab8:	2300      	movs	r3, #0
 801eaba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801eabe:	e7f7      	b.n	801eab0 <_Balloc+0x58>

0801eac0 <_Bfree>:
 801eac0:	b570      	push	{r4, r5, r6, lr}
 801eac2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801eac4:	4606      	mov	r6, r0
 801eac6:	460d      	mov	r5, r1
 801eac8:	b93c      	cbnz	r4, 801eada <_Bfree+0x1a>
 801eaca:	2010      	movs	r0, #16
 801eacc:	f7ff ffbc 	bl	801ea48 <malloc>
 801ead0:	6270      	str	r0, [r6, #36]	; 0x24
 801ead2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ead6:	6004      	str	r4, [r0, #0]
 801ead8:	60c4      	str	r4, [r0, #12]
 801eada:	b13d      	cbz	r5, 801eaec <_Bfree+0x2c>
 801eadc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801eade:	686a      	ldr	r2, [r5, #4]
 801eae0:	68db      	ldr	r3, [r3, #12]
 801eae2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801eae6:	6029      	str	r1, [r5, #0]
 801eae8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801eaec:	bd70      	pop	{r4, r5, r6, pc}

0801eaee <__multadd>:
 801eaee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eaf2:	690d      	ldr	r5, [r1, #16]
 801eaf4:	461f      	mov	r7, r3
 801eaf6:	4606      	mov	r6, r0
 801eaf8:	460c      	mov	r4, r1
 801eafa:	f101 0c14 	add.w	ip, r1, #20
 801eafe:	2300      	movs	r3, #0
 801eb00:	f8dc 0000 	ldr.w	r0, [ip]
 801eb04:	b281      	uxth	r1, r0
 801eb06:	fb02 7101 	mla	r1, r2, r1, r7
 801eb0a:	0c0f      	lsrs	r7, r1, #16
 801eb0c:	0c00      	lsrs	r0, r0, #16
 801eb0e:	fb02 7000 	mla	r0, r2, r0, r7
 801eb12:	b289      	uxth	r1, r1
 801eb14:	3301      	adds	r3, #1
 801eb16:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801eb1a:	429d      	cmp	r5, r3
 801eb1c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801eb20:	f84c 1b04 	str.w	r1, [ip], #4
 801eb24:	dcec      	bgt.n	801eb00 <__multadd+0x12>
 801eb26:	b1d7      	cbz	r7, 801eb5e <__multadd+0x70>
 801eb28:	68a3      	ldr	r3, [r4, #8]
 801eb2a:	42ab      	cmp	r3, r5
 801eb2c:	dc12      	bgt.n	801eb54 <__multadd+0x66>
 801eb2e:	6861      	ldr	r1, [r4, #4]
 801eb30:	4630      	mov	r0, r6
 801eb32:	3101      	adds	r1, #1
 801eb34:	f7ff ff90 	bl	801ea58 <_Balloc>
 801eb38:	6922      	ldr	r2, [r4, #16]
 801eb3a:	3202      	adds	r2, #2
 801eb3c:	f104 010c 	add.w	r1, r4, #12
 801eb40:	4680      	mov	r8, r0
 801eb42:	0092      	lsls	r2, r2, #2
 801eb44:	300c      	adds	r0, #12
 801eb46:	f7fe f970 	bl	801ce2a <memcpy>
 801eb4a:	4621      	mov	r1, r4
 801eb4c:	4630      	mov	r0, r6
 801eb4e:	f7ff ffb7 	bl	801eac0 <_Bfree>
 801eb52:	4644      	mov	r4, r8
 801eb54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801eb58:	3501      	adds	r5, #1
 801eb5a:	615f      	str	r7, [r3, #20]
 801eb5c:	6125      	str	r5, [r4, #16]
 801eb5e:	4620      	mov	r0, r4
 801eb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801eb64 <__hi0bits>:
 801eb64:	0c02      	lsrs	r2, r0, #16
 801eb66:	0412      	lsls	r2, r2, #16
 801eb68:	4603      	mov	r3, r0
 801eb6a:	b9b2      	cbnz	r2, 801eb9a <__hi0bits+0x36>
 801eb6c:	0403      	lsls	r3, r0, #16
 801eb6e:	2010      	movs	r0, #16
 801eb70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801eb74:	bf04      	itt	eq
 801eb76:	021b      	lsleq	r3, r3, #8
 801eb78:	3008      	addeq	r0, #8
 801eb7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801eb7e:	bf04      	itt	eq
 801eb80:	011b      	lsleq	r3, r3, #4
 801eb82:	3004      	addeq	r0, #4
 801eb84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801eb88:	bf04      	itt	eq
 801eb8a:	009b      	lsleq	r3, r3, #2
 801eb8c:	3002      	addeq	r0, #2
 801eb8e:	2b00      	cmp	r3, #0
 801eb90:	db06      	blt.n	801eba0 <__hi0bits+0x3c>
 801eb92:	005b      	lsls	r3, r3, #1
 801eb94:	d503      	bpl.n	801eb9e <__hi0bits+0x3a>
 801eb96:	3001      	adds	r0, #1
 801eb98:	4770      	bx	lr
 801eb9a:	2000      	movs	r0, #0
 801eb9c:	e7e8      	b.n	801eb70 <__hi0bits+0xc>
 801eb9e:	2020      	movs	r0, #32
 801eba0:	4770      	bx	lr

0801eba2 <__lo0bits>:
 801eba2:	6803      	ldr	r3, [r0, #0]
 801eba4:	f013 0207 	ands.w	r2, r3, #7
 801eba8:	4601      	mov	r1, r0
 801ebaa:	d00b      	beq.n	801ebc4 <__lo0bits+0x22>
 801ebac:	07da      	lsls	r2, r3, #31
 801ebae:	d423      	bmi.n	801ebf8 <__lo0bits+0x56>
 801ebb0:	0798      	lsls	r0, r3, #30
 801ebb2:	bf49      	itett	mi
 801ebb4:	085b      	lsrmi	r3, r3, #1
 801ebb6:	089b      	lsrpl	r3, r3, #2
 801ebb8:	2001      	movmi	r0, #1
 801ebba:	600b      	strmi	r3, [r1, #0]
 801ebbc:	bf5c      	itt	pl
 801ebbe:	600b      	strpl	r3, [r1, #0]
 801ebc0:	2002      	movpl	r0, #2
 801ebc2:	4770      	bx	lr
 801ebc4:	b298      	uxth	r0, r3
 801ebc6:	b9a8      	cbnz	r0, 801ebf4 <__lo0bits+0x52>
 801ebc8:	0c1b      	lsrs	r3, r3, #16
 801ebca:	2010      	movs	r0, #16
 801ebcc:	f013 0fff 	tst.w	r3, #255	; 0xff
 801ebd0:	bf04      	itt	eq
 801ebd2:	0a1b      	lsreq	r3, r3, #8
 801ebd4:	3008      	addeq	r0, #8
 801ebd6:	071a      	lsls	r2, r3, #28
 801ebd8:	bf04      	itt	eq
 801ebda:	091b      	lsreq	r3, r3, #4
 801ebdc:	3004      	addeq	r0, #4
 801ebde:	079a      	lsls	r2, r3, #30
 801ebe0:	bf04      	itt	eq
 801ebe2:	089b      	lsreq	r3, r3, #2
 801ebe4:	3002      	addeq	r0, #2
 801ebe6:	07da      	lsls	r2, r3, #31
 801ebe8:	d402      	bmi.n	801ebf0 <__lo0bits+0x4e>
 801ebea:	085b      	lsrs	r3, r3, #1
 801ebec:	d006      	beq.n	801ebfc <__lo0bits+0x5a>
 801ebee:	3001      	adds	r0, #1
 801ebf0:	600b      	str	r3, [r1, #0]
 801ebf2:	4770      	bx	lr
 801ebf4:	4610      	mov	r0, r2
 801ebf6:	e7e9      	b.n	801ebcc <__lo0bits+0x2a>
 801ebf8:	2000      	movs	r0, #0
 801ebfa:	4770      	bx	lr
 801ebfc:	2020      	movs	r0, #32
 801ebfe:	4770      	bx	lr

0801ec00 <__i2b>:
 801ec00:	b510      	push	{r4, lr}
 801ec02:	460c      	mov	r4, r1
 801ec04:	2101      	movs	r1, #1
 801ec06:	f7ff ff27 	bl	801ea58 <_Balloc>
 801ec0a:	2201      	movs	r2, #1
 801ec0c:	6144      	str	r4, [r0, #20]
 801ec0e:	6102      	str	r2, [r0, #16]
 801ec10:	bd10      	pop	{r4, pc}

0801ec12 <__multiply>:
 801ec12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec16:	4614      	mov	r4, r2
 801ec18:	690a      	ldr	r2, [r1, #16]
 801ec1a:	6923      	ldr	r3, [r4, #16]
 801ec1c:	429a      	cmp	r2, r3
 801ec1e:	bfb8      	it	lt
 801ec20:	460b      	movlt	r3, r1
 801ec22:	4688      	mov	r8, r1
 801ec24:	bfbc      	itt	lt
 801ec26:	46a0      	movlt	r8, r4
 801ec28:	461c      	movlt	r4, r3
 801ec2a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ec2e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801ec32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ec36:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ec3a:	eb07 0609 	add.w	r6, r7, r9
 801ec3e:	42b3      	cmp	r3, r6
 801ec40:	bfb8      	it	lt
 801ec42:	3101      	addlt	r1, #1
 801ec44:	f7ff ff08 	bl	801ea58 <_Balloc>
 801ec48:	f100 0514 	add.w	r5, r0, #20
 801ec4c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801ec50:	462b      	mov	r3, r5
 801ec52:	2200      	movs	r2, #0
 801ec54:	4573      	cmp	r3, lr
 801ec56:	d316      	bcc.n	801ec86 <__multiply+0x74>
 801ec58:	f104 0214 	add.w	r2, r4, #20
 801ec5c:	f108 0114 	add.w	r1, r8, #20
 801ec60:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801ec64:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801ec68:	9300      	str	r3, [sp, #0]
 801ec6a:	9b00      	ldr	r3, [sp, #0]
 801ec6c:	9201      	str	r2, [sp, #4]
 801ec6e:	4293      	cmp	r3, r2
 801ec70:	d80c      	bhi.n	801ec8c <__multiply+0x7a>
 801ec72:	2e00      	cmp	r6, #0
 801ec74:	dd03      	ble.n	801ec7e <__multiply+0x6c>
 801ec76:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801ec7a:	2b00      	cmp	r3, #0
 801ec7c:	d05d      	beq.n	801ed3a <__multiply+0x128>
 801ec7e:	6106      	str	r6, [r0, #16]
 801ec80:	b003      	add	sp, #12
 801ec82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec86:	f843 2b04 	str.w	r2, [r3], #4
 801ec8a:	e7e3      	b.n	801ec54 <__multiply+0x42>
 801ec8c:	f8b2 b000 	ldrh.w	fp, [r2]
 801ec90:	f1bb 0f00 	cmp.w	fp, #0
 801ec94:	d023      	beq.n	801ecde <__multiply+0xcc>
 801ec96:	4689      	mov	r9, r1
 801ec98:	46ac      	mov	ip, r5
 801ec9a:	f04f 0800 	mov.w	r8, #0
 801ec9e:	f859 4b04 	ldr.w	r4, [r9], #4
 801eca2:	f8dc a000 	ldr.w	sl, [ip]
 801eca6:	b2a3      	uxth	r3, r4
 801eca8:	fa1f fa8a 	uxth.w	sl, sl
 801ecac:	fb0b a303 	mla	r3, fp, r3, sl
 801ecb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801ecb4:	f8dc 4000 	ldr.w	r4, [ip]
 801ecb8:	4443      	add	r3, r8
 801ecba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801ecbe:	fb0b 840a 	mla	r4, fp, sl, r8
 801ecc2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801ecc6:	46e2      	mov	sl, ip
 801ecc8:	b29b      	uxth	r3, r3
 801ecca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801ecce:	454f      	cmp	r7, r9
 801ecd0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801ecd4:	f84a 3b04 	str.w	r3, [sl], #4
 801ecd8:	d82b      	bhi.n	801ed32 <__multiply+0x120>
 801ecda:	f8cc 8004 	str.w	r8, [ip, #4]
 801ecde:	9b01      	ldr	r3, [sp, #4]
 801ece0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801ece4:	3204      	adds	r2, #4
 801ece6:	f1ba 0f00 	cmp.w	sl, #0
 801ecea:	d020      	beq.n	801ed2e <__multiply+0x11c>
 801ecec:	682b      	ldr	r3, [r5, #0]
 801ecee:	4689      	mov	r9, r1
 801ecf0:	46a8      	mov	r8, r5
 801ecf2:	f04f 0b00 	mov.w	fp, #0
 801ecf6:	f8b9 c000 	ldrh.w	ip, [r9]
 801ecfa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801ecfe:	fb0a 440c 	mla	r4, sl, ip, r4
 801ed02:	445c      	add	r4, fp
 801ed04:	46c4      	mov	ip, r8
 801ed06:	b29b      	uxth	r3, r3
 801ed08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801ed0c:	f84c 3b04 	str.w	r3, [ip], #4
 801ed10:	f859 3b04 	ldr.w	r3, [r9], #4
 801ed14:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801ed18:	0c1b      	lsrs	r3, r3, #16
 801ed1a:	fb0a b303 	mla	r3, sl, r3, fp
 801ed1e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801ed22:	454f      	cmp	r7, r9
 801ed24:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801ed28:	d805      	bhi.n	801ed36 <__multiply+0x124>
 801ed2a:	f8c8 3004 	str.w	r3, [r8, #4]
 801ed2e:	3504      	adds	r5, #4
 801ed30:	e79b      	b.n	801ec6a <__multiply+0x58>
 801ed32:	46d4      	mov	ip, sl
 801ed34:	e7b3      	b.n	801ec9e <__multiply+0x8c>
 801ed36:	46e0      	mov	r8, ip
 801ed38:	e7dd      	b.n	801ecf6 <__multiply+0xe4>
 801ed3a:	3e01      	subs	r6, #1
 801ed3c:	e799      	b.n	801ec72 <__multiply+0x60>
	...

0801ed40 <__pow5mult>:
 801ed40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ed44:	4615      	mov	r5, r2
 801ed46:	f012 0203 	ands.w	r2, r2, #3
 801ed4a:	4606      	mov	r6, r0
 801ed4c:	460f      	mov	r7, r1
 801ed4e:	d007      	beq.n	801ed60 <__pow5mult+0x20>
 801ed50:	3a01      	subs	r2, #1
 801ed52:	4c21      	ldr	r4, [pc, #132]	; (801edd8 <__pow5mult+0x98>)
 801ed54:	2300      	movs	r3, #0
 801ed56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ed5a:	f7ff fec8 	bl	801eaee <__multadd>
 801ed5e:	4607      	mov	r7, r0
 801ed60:	10ad      	asrs	r5, r5, #2
 801ed62:	d035      	beq.n	801edd0 <__pow5mult+0x90>
 801ed64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801ed66:	b93c      	cbnz	r4, 801ed78 <__pow5mult+0x38>
 801ed68:	2010      	movs	r0, #16
 801ed6a:	f7ff fe6d 	bl	801ea48 <malloc>
 801ed6e:	6270      	str	r0, [r6, #36]	; 0x24
 801ed70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ed74:	6004      	str	r4, [r0, #0]
 801ed76:	60c4      	str	r4, [r0, #12]
 801ed78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ed7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ed80:	b94c      	cbnz	r4, 801ed96 <__pow5mult+0x56>
 801ed82:	f240 2171 	movw	r1, #625	; 0x271
 801ed86:	4630      	mov	r0, r6
 801ed88:	f7ff ff3a 	bl	801ec00 <__i2b>
 801ed8c:	2300      	movs	r3, #0
 801ed8e:	f8c8 0008 	str.w	r0, [r8, #8]
 801ed92:	4604      	mov	r4, r0
 801ed94:	6003      	str	r3, [r0, #0]
 801ed96:	f04f 0800 	mov.w	r8, #0
 801ed9a:	07eb      	lsls	r3, r5, #31
 801ed9c:	d50a      	bpl.n	801edb4 <__pow5mult+0x74>
 801ed9e:	4639      	mov	r1, r7
 801eda0:	4622      	mov	r2, r4
 801eda2:	4630      	mov	r0, r6
 801eda4:	f7ff ff35 	bl	801ec12 <__multiply>
 801eda8:	4639      	mov	r1, r7
 801edaa:	4681      	mov	r9, r0
 801edac:	4630      	mov	r0, r6
 801edae:	f7ff fe87 	bl	801eac0 <_Bfree>
 801edb2:	464f      	mov	r7, r9
 801edb4:	106d      	asrs	r5, r5, #1
 801edb6:	d00b      	beq.n	801edd0 <__pow5mult+0x90>
 801edb8:	6820      	ldr	r0, [r4, #0]
 801edba:	b938      	cbnz	r0, 801edcc <__pow5mult+0x8c>
 801edbc:	4622      	mov	r2, r4
 801edbe:	4621      	mov	r1, r4
 801edc0:	4630      	mov	r0, r6
 801edc2:	f7ff ff26 	bl	801ec12 <__multiply>
 801edc6:	6020      	str	r0, [r4, #0]
 801edc8:	f8c0 8000 	str.w	r8, [r0]
 801edcc:	4604      	mov	r4, r0
 801edce:	e7e4      	b.n	801ed9a <__pow5mult+0x5a>
 801edd0:	4638      	mov	r0, r7
 801edd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801edd6:	bf00      	nop
 801edd8:	08022da8 	.word	0x08022da8

0801eddc <__lshift>:
 801eddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ede0:	460c      	mov	r4, r1
 801ede2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ede6:	6923      	ldr	r3, [r4, #16]
 801ede8:	6849      	ldr	r1, [r1, #4]
 801edea:	eb0a 0903 	add.w	r9, sl, r3
 801edee:	68a3      	ldr	r3, [r4, #8]
 801edf0:	4607      	mov	r7, r0
 801edf2:	4616      	mov	r6, r2
 801edf4:	f109 0501 	add.w	r5, r9, #1
 801edf8:	42ab      	cmp	r3, r5
 801edfa:	db32      	blt.n	801ee62 <__lshift+0x86>
 801edfc:	4638      	mov	r0, r7
 801edfe:	f7ff fe2b 	bl	801ea58 <_Balloc>
 801ee02:	2300      	movs	r3, #0
 801ee04:	4680      	mov	r8, r0
 801ee06:	f100 0114 	add.w	r1, r0, #20
 801ee0a:	461a      	mov	r2, r3
 801ee0c:	4553      	cmp	r3, sl
 801ee0e:	db2b      	blt.n	801ee68 <__lshift+0x8c>
 801ee10:	6920      	ldr	r0, [r4, #16]
 801ee12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ee16:	f104 0314 	add.w	r3, r4, #20
 801ee1a:	f016 021f 	ands.w	r2, r6, #31
 801ee1e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ee22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ee26:	d025      	beq.n	801ee74 <__lshift+0x98>
 801ee28:	f1c2 0e20 	rsb	lr, r2, #32
 801ee2c:	2000      	movs	r0, #0
 801ee2e:	681e      	ldr	r6, [r3, #0]
 801ee30:	468a      	mov	sl, r1
 801ee32:	4096      	lsls	r6, r2
 801ee34:	4330      	orrs	r0, r6
 801ee36:	f84a 0b04 	str.w	r0, [sl], #4
 801ee3a:	f853 0b04 	ldr.w	r0, [r3], #4
 801ee3e:	459c      	cmp	ip, r3
 801ee40:	fa20 f00e 	lsr.w	r0, r0, lr
 801ee44:	d814      	bhi.n	801ee70 <__lshift+0x94>
 801ee46:	6048      	str	r0, [r1, #4]
 801ee48:	b108      	cbz	r0, 801ee4e <__lshift+0x72>
 801ee4a:	f109 0502 	add.w	r5, r9, #2
 801ee4e:	3d01      	subs	r5, #1
 801ee50:	4638      	mov	r0, r7
 801ee52:	f8c8 5010 	str.w	r5, [r8, #16]
 801ee56:	4621      	mov	r1, r4
 801ee58:	f7ff fe32 	bl	801eac0 <_Bfree>
 801ee5c:	4640      	mov	r0, r8
 801ee5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee62:	3101      	adds	r1, #1
 801ee64:	005b      	lsls	r3, r3, #1
 801ee66:	e7c7      	b.n	801edf8 <__lshift+0x1c>
 801ee68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801ee6c:	3301      	adds	r3, #1
 801ee6e:	e7cd      	b.n	801ee0c <__lshift+0x30>
 801ee70:	4651      	mov	r1, sl
 801ee72:	e7dc      	b.n	801ee2e <__lshift+0x52>
 801ee74:	3904      	subs	r1, #4
 801ee76:	f853 2b04 	ldr.w	r2, [r3], #4
 801ee7a:	f841 2f04 	str.w	r2, [r1, #4]!
 801ee7e:	459c      	cmp	ip, r3
 801ee80:	d8f9      	bhi.n	801ee76 <__lshift+0x9a>
 801ee82:	e7e4      	b.n	801ee4e <__lshift+0x72>

0801ee84 <__mcmp>:
 801ee84:	6903      	ldr	r3, [r0, #16]
 801ee86:	690a      	ldr	r2, [r1, #16]
 801ee88:	1a9b      	subs	r3, r3, r2
 801ee8a:	b530      	push	{r4, r5, lr}
 801ee8c:	d10c      	bne.n	801eea8 <__mcmp+0x24>
 801ee8e:	0092      	lsls	r2, r2, #2
 801ee90:	3014      	adds	r0, #20
 801ee92:	3114      	adds	r1, #20
 801ee94:	1884      	adds	r4, r0, r2
 801ee96:	4411      	add	r1, r2
 801ee98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ee9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801eea0:	4295      	cmp	r5, r2
 801eea2:	d003      	beq.n	801eeac <__mcmp+0x28>
 801eea4:	d305      	bcc.n	801eeb2 <__mcmp+0x2e>
 801eea6:	2301      	movs	r3, #1
 801eea8:	4618      	mov	r0, r3
 801eeaa:	bd30      	pop	{r4, r5, pc}
 801eeac:	42a0      	cmp	r0, r4
 801eeae:	d3f3      	bcc.n	801ee98 <__mcmp+0x14>
 801eeb0:	e7fa      	b.n	801eea8 <__mcmp+0x24>
 801eeb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801eeb6:	e7f7      	b.n	801eea8 <__mcmp+0x24>

0801eeb8 <__mdiff>:
 801eeb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eebc:	460d      	mov	r5, r1
 801eebe:	4607      	mov	r7, r0
 801eec0:	4611      	mov	r1, r2
 801eec2:	4628      	mov	r0, r5
 801eec4:	4614      	mov	r4, r2
 801eec6:	f7ff ffdd 	bl	801ee84 <__mcmp>
 801eeca:	1e06      	subs	r6, r0, #0
 801eecc:	d108      	bne.n	801eee0 <__mdiff+0x28>
 801eece:	4631      	mov	r1, r6
 801eed0:	4638      	mov	r0, r7
 801eed2:	f7ff fdc1 	bl	801ea58 <_Balloc>
 801eed6:	2301      	movs	r3, #1
 801eed8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801eedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eee0:	bfa4      	itt	ge
 801eee2:	4623      	movge	r3, r4
 801eee4:	462c      	movge	r4, r5
 801eee6:	4638      	mov	r0, r7
 801eee8:	6861      	ldr	r1, [r4, #4]
 801eeea:	bfa6      	itte	ge
 801eeec:	461d      	movge	r5, r3
 801eeee:	2600      	movge	r6, #0
 801eef0:	2601      	movlt	r6, #1
 801eef2:	f7ff fdb1 	bl	801ea58 <_Balloc>
 801eef6:	692b      	ldr	r3, [r5, #16]
 801eef8:	60c6      	str	r6, [r0, #12]
 801eefa:	6926      	ldr	r6, [r4, #16]
 801eefc:	f105 0914 	add.w	r9, r5, #20
 801ef00:	f104 0214 	add.w	r2, r4, #20
 801ef04:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801ef08:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801ef0c:	f100 0514 	add.w	r5, r0, #20
 801ef10:	f04f 0e00 	mov.w	lr, #0
 801ef14:	f852 ab04 	ldr.w	sl, [r2], #4
 801ef18:	f859 4b04 	ldr.w	r4, [r9], #4
 801ef1c:	fa1e f18a 	uxtah	r1, lr, sl
 801ef20:	b2a3      	uxth	r3, r4
 801ef22:	1ac9      	subs	r1, r1, r3
 801ef24:	0c23      	lsrs	r3, r4, #16
 801ef26:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801ef2a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801ef2e:	b289      	uxth	r1, r1
 801ef30:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801ef34:	45c8      	cmp	r8, r9
 801ef36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801ef3a:	4694      	mov	ip, r2
 801ef3c:	f845 3b04 	str.w	r3, [r5], #4
 801ef40:	d8e8      	bhi.n	801ef14 <__mdiff+0x5c>
 801ef42:	45bc      	cmp	ip, r7
 801ef44:	d304      	bcc.n	801ef50 <__mdiff+0x98>
 801ef46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801ef4a:	b183      	cbz	r3, 801ef6e <__mdiff+0xb6>
 801ef4c:	6106      	str	r6, [r0, #16]
 801ef4e:	e7c5      	b.n	801eedc <__mdiff+0x24>
 801ef50:	f85c 1b04 	ldr.w	r1, [ip], #4
 801ef54:	fa1e f381 	uxtah	r3, lr, r1
 801ef58:	141a      	asrs	r2, r3, #16
 801ef5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ef5e:	b29b      	uxth	r3, r3
 801ef60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ef64:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801ef68:	f845 3b04 	str.w	r3, [r5], #4
 801ef6c:	e7e9      	b.n	801ef42 <__mdiff+0x8a>
 801ef6e:	3e01      	subs	r6, #1
 801ef70:	e7e9      	b.n	801ef46 <__mdiff+0x8e>

0801ef72 <__d2b>:
 801ef72:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ef76:	460e      	mov	r6, r1
 801ef78:	2101      	movs	r1, #1
 801ef7a:	ec59 8b10 	vmov	r8, r9, d0
 801ef7e:	4615      	mov	r5, r2
 801ef80:	f7ff fd6a 	bl	801ea58 <_Balloc>
 801ef84:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801ef88:	4607      	mov	r7, r0
 801ef8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ef8e:	bb34      	cbnz	r4, 801efde <__d2b+0x6c>
 801ef90:	9301      	str	r3, [sp, #4]
 801ef92:	f1b8 0300 	subs.w	r3, r8, #0
 801ef96:	d027      	beq.n	801efe8 <__d2b+0x76>
 801ef98:	a802      	add	r0, sp, #8
 801ef9a:	f840 3d08 	str.w	r3, [r0, #-8]!
 801ef9e:	f7ff fe00 	bl	801eba2 <__lo0bits>
 801efa2:	9900      	ldr	r1, [sp, #0]
 801efa4:	b1f0      	cbz	r0, 801efe4 <__d2b+0x72>
 801efa6:	9a01      	ldr	r2, [sp, #4]
 801efa8:	f1c0 0320 	rsb	r3, r0, #32
 801efac:	fa02 f303 	lsl.w	r3, r2, r3
 801efb0:	430b      	orrs	r3, r1
 801efb2:	40c2      	lsrs	r2, r0
 801efb4:	617b      	str	r3, [r7, #20]
 801efb6:	9201      	str	r2, [sp, #4]
 801efb8:	9b01      	ldr	r3, [sp, #4]
 801efba:	61bb      	str	r3, [r7, #24]
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	bf14      	ite	ne
 801efc0:	2102      	movne	r1, #2
 801efc2:	2101      	moveq	r1, #1
 801efc4:	6139      	str	r1, [r7, #16]
 801efc6:	b1c4      	cbz	r4, 801effa <__d2b+0x88>
 801efc8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801efcc:	4404      	add	r4, r0
 801efce:	6034      	str	r4, [r6, #0]
 801efd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801efd4:	6028      	str	r0, [r5, #0]
 801efd6:	4638      	mov	r0, r7
 801efd8:	b003      	add	sp, #12
 801efda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801efde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801efe2:	e7d5      	b.n	801ef90 <__d2b+0x1e>
 801efe4:	6179      	str	r1, [r7, #20]
 801efe6:	e7e7      	b.n	801efb8 <__d2b+0x46>
 801efe8:	a801      	add	r0, sp, #4
 801efea:	f7ff fdda 	bl	801eba2 <__lo0bits>
 801efee:	9b01      	ldr	r3, [sp, #4]
 801eff0:	617b      	str	r3, [r7, #20]
 801eff2:	2101      	movs	r1, #1
 801eff4:	6139      	str	r1, [r7, #16]
 801eff6:	3020      	adds	r0, #32
 801eff8:	e7e5      	b.n	801efc6 <__d2b+0x54>
 801effa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801effe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f002:	6030      	str	r0, [r6, #0]
 801f004:	6918      	ldr	r0, [r3, #16]
 801f006:	f7ff fdad 	bl	801eb64 <__hi0bits>
 801f00a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801f00e:	e7e1      	b.n	801efd4 <__d2b+0x62>

0801f010 <_calloc_r>:
 801f010:	b538      	push	{r3, r4, r5, lr}
 801f012:	fb02 f401 	mul.w	r4, r2, r1
 801f016:	4621      	mov	r1, r4
 801f018:	f000 f856 	bl	801f0c8 <_malloc_r>
 801f01c:	4605      	mov	r5, r0
 801f01e:	b118      	cbz	r0, 801f028 <_calloc_r+0x18>
 801f020:	4622      	mov	r2, r4
 801f022:	2100      	movs	r1, #0
 801f024:	f7fd ff25 	bl	801ce72 <memset>
 801f028:	4628      	mov	r0, r5
 801f02a:	bd38      	pop	{r3, r4, r5, pc}

0801f02c <_free_r>:
 801f02c:	b538      	push	{r3, r4, r5, lr}
 801f02e:	4605      	mov	r5, r0
 801f030:	2900      	cmp	r1, #0
 801f032:	d045      	beq.n	801f0c0 <_free_r+0x94>
 801f034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f038:	1f0c      	subs	r4, r1, #4
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	bfb8      	it	lt
 801f03e:	18e4      	addlt	r4, r4, r3
 801f040:	f000 fbd8 	bl	801f7f4 <__malloc_lock>
 801f044:	4a1f      	ldr	r2, [pc, #124]	; (801f0c4 <_free_r+0x98>)
 801f046:	6813      	ldr	r3, [r2, #0]
 801f048:	4610      	mov	r0, r2
 801f04a:	b933      	cbnz	r3, 801f05a <_free_r+0x2e>
 801f04c:	6063      	str	r3, [r4, #4]
 801f04e:	6014      	str	r4, [r2, #0]
 801f050:	4628      	mov	r0, r5
 801f052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f056:	f000 bbce 	b.w	801f7f6 <__malloc_unlock>
 801f05a:	42a3      	cmp	r3, r4
 801f05c:	d90c      	bls.n	801f078 <_free_r+0x4c>
 801f05e:	6821      	ldr	r1, [r4, #0]
 801f060:	1862      	adds	r2, r4, r1
 801f062:	4293      	cmp	r3, r2
 801f064:	bf04      	itt	eq
 801f066:	681a      	ldreq	r2, [r3, #0]
 801f068:	685b      	ldreq	r3, [r3, #4]
 801f06a:	6063      	str	r3, [r4, #4]
 801f06c:	bf04      	itt	eq
 801f06e:	1852      	addeq	r2, r2, r1
 801f070:	6022      	streq	r2, [r4, #0]
 801f072:	6004      	str	r4, [r0, #0]
 801f074:	e7ec      	b.n	801f050 <_free_r+0x24>
 801f076:	4613      	mov	r3, r2
 801f078:	685a      	ldr	r2, [r3, #4]
 801f07a:	b10a      	cbz	r2, 801f080 <_free_r+0x54>
 801f07c:	42a2      	cmp	r2, r4
 801f07e:	d9fa      	bls.n	801f076 <_free_r+0x4a>
 801f080:	6819      	ldr	r1, [r3, #0]
 801f082:	1858      	adds	r0, r3, r1
 801f084:	42a0      	cmp	r0, r4
 801f086:	d10b      	bne.n	801f0a0 <_free_r+0x74>
 801f088:	6820      	ldr	r0, [r4, #0]
 801f08a:	4401      	add	r1, r0
 801f08c:	1858      	adds	r0, r3, r1
 801f08e:	4282      	cmp	r2, r0
 801f090:	6019      	str	r1, [r3, #0]
 801f092:	d1dd      	bne.n	801f050 <_free_r+0x24>
 801f094:	6810      	ldr	r0, [r2, #0]
 801f096:	6852      	ldr	r2, [r2, #4]
 801f098:	605a      	str	r2, [r3, #4]
 801f09a:	4401      	add	r1, r0
 801f09c:	6019      	str	r1, [r3, #0]
 801f09e:	e7d7      	b.n	801f050 <_free_r+0x24>
 801f0a0:	d902      	bls.n	801f0a8 <_free_r+0x7c>
 801f0a2:	230c      	movs	r3, #12
 801f0a4:	602b      	str	r3, [r5, #0]
 801f0a6:	e7d3      	b.n	801f050 <_free_r+0x24>
 801f0a8:	6820      	ldr	r0, [r4, #0]
 801f0aa:	1821      	adds	r1, r4, r0
 801f0ac:	428a      	cmp	r2, r1
 801f0ae:	bf04      	itt	eq
 801f0b0:	6811      	ldreq	r1, [r2, #0]
 801f0b2:	6852      	ldreq	r2, [r2, #4]
 801f0b4:	6062      	str	r2, [r4, #4]
 801f0b6:	bf04      	itt	eq
 801f0b8:	1809      	addeq	r1, r1, r0
 801f0ba:	6021      	streq	r1, [r4, #0]
 801f0bc:	605c      	str	r4, [r3, #4]
 801f0be:	e7c7      	b.n	801f050 <_free_r+0x24>
 801f0c0:	bd38      	pop	{r3, r4, r5, pc}
 801f0c2:	bf00      	nop
 801f0c4:	2000796c 	.word	0x2000796c

0801f0c8 <_malloc_r>:
 801f0c8:	b570      	push	{r4, r5, r6, lr}
 801f0ca:	1ccd      	adds	r5, r1, #3
 801f0cc:	f025 0503 	bic.w	r5, r5, #3
 801f0d0:	3508      	adds	r5, #8
 801f0d2:	2d0c      	cmp	r5, #12
 801f0d4:	bf38      	it	cc
 801f0d6:	250c      	movcc	r5, #12
 801f0d8:	2d00      	cmp	r5, #0
 801f0da:	4606      	mov	r6, r0
 801f0dc:	db01      	blt.n	801f0e2 <_malloc_r+0x1a>
 801f0de:	42a9      	cmp	r1, r5
 801f0e0:	d903      	bls.n	801f0ea <_malloc_r+0x22>
 801f0e2:	230c      	movs	r3, #12
 801f0e4:	6033      	str	r3, [r6, #0]
 801f0e6:	2000      	movs	r0, #0
 801f0e8:	bd70      	pop	{r4, r5, r6, pc}
 801f0ea:	f000 fb83 	bl	801f7f4 <__malloc_lock>
 801f0ee:	4a21      	ldr	r2, [pc, #132]	; (801f174 <_malloc_r+0xac>)
 801f0f0:	6814      	ldr	r4, [r2, #0]
 801f0f2:	4621      	mov	r1, r4
 801f0f4:	b991      	cbnz	r1, 801f11c <_malloc_r+0x54>
 801f0f6:	4c20      	ldr	r4, [pc, #128]	; (801f178 <_malloc_r+0xb0>)
 801f0f8:	6823      	ldr	r3, [r4, #0]
 801f0fa:	b91b      	cbnz	r3, 801f104 <_malloc_r+0x3c>
 801f0fc:	4630      	mov	r0, r6
 801f0fe:	f000 facf 	bl	801f6a0 <_sbrk_r>
 801f102:	6020      	str	r0, [r4, #0]
 801f104:	4629      	mov	r1, r5
 801f106:	4630      	mov	r0, r6
 801f108:	f000 faca 	bl	801f6a0 <_sbrk_r>
 801f10c:	1c43      	adds	r3, r0, #1
 801f10e:	d124      	bne.n	801f15a <_malloc_r+0x92>
 801f110:	230c      	movs	r3, #12
 801f112:	6033      	str	r3, [r6, #0]
 801f114:	4630      	mov	r0, r6
 801f116:	f000 fb6e 	bl	801f7f6 <__malloc_unlock>
 801f11a:	e7e4      	b.n	801f0e6 <_malloc_r+0x1e>
 801f11c:	680b      	ldr	r3, [r1, #0]
 801f11e:	1b5b      	subs	r3, r3, r5
 801f120:	d418      	bmi.n	801f154 <_malloc_r+0x8c>
 801f122:	2b0b      	cmp	r3, #11
 801f124:	d90f      	bls.n	801f146 <_malloc_r+0x7e>
 801f126:	600b      	str	r3, [r1, #0]
 801f128:	50cd      	str	r5, [r1, r3]
 801f12a:	18cc      	adds	r4, r1, r3
 801f12c:	4630      	mov	r0, r6
 801f12e:	f000 fb62 	bl	801f7f6 <__malloc_unlock>
 801f132:	f104 000b 	add.w	r0, r4, #11
 801f136:	1d23      	adds	r3, r4, #4
 801f138:	f020 0007 	bic.w	r0, r0, #7
 801f13c:	1ac3      	subs	r3, r0, r3
 801f13e:	d0d3      	beq.n	801f0e8 <_malloc_r+0x20>
 801f140:	425a      	negs	r2, r3
 801f142:	50e2      	str	r2, [r4, r3]
 801f144:	e7d0      	b.n	801f0e8 <_malloc_r+0x20>
 801f146:	428c      	cmp	r4, r1
 801f148:	684b      	ldr	r3, [r1, #4]
 801f14a:	bf16      	itet	ne
 801f14c:	6063      	strne	r3, [r4, #4]
 801f14e:	6013      	streq	r3, [r2, #0]
 801f150:	460c      	movne	r4, r1
 801f152:	e7eb      	b.n	801f12c <_malloc_r+0x64>
 801f154:	460c      	mov	r4, r1
 801f156:	6849      	ldr	r1, [r1, #4]
 801f158:	e7cc      	b.n	801f0f4 <_malloc_r+0x2c>
 801f15a:	1cc4      	adds	r4, r0, #3
 801f15c:	f024 0403 	bic.w	r4, r4, #3
 801f160:	42a0      	cmp	r0, r4
 801f162:	d005      	beq.n	801f170 <_malloc_r+0xa8>
 801f164:	1a21      	subs	r1, r4, r0
 801f166:	4630      	mov	r0, r6
 801f168:	f000 fa9a 	bl	801f6a0 <_sbrk_r>
 801f16c:	3001      	adds	r0, #1
 801f16e:	d0cf      	beq.n	801f110 <_malloc_r+0x48>
 801f170:	6025      	str	r5, [r4, #0]
 801f172:	e7db      	b.n	801f12c <_malloc_r+0x64>
 801f174:	2000796c 	.word	0x2000796c
 801f178:	20007970 	.word	0x20007970

0801f17c <__ssputs_r>:
 801f17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f180:	688e      	ldr	r6, [r1, #8]
 801f182:	429e      	cmp	r6, r3
 801f184:	4682      	mov	sl, r0
 801f186:	460c      	mov	r4, r1
 801f188:	4690      	mov	r8, r2
 801f18a:	4699      	mov	r9, r3
 801f18c:	d837      	bhi.n	801f1fe <__ssputs_r+0x82>
 801f18e:	898a      	ldrh	r2, [r1, #12]
 801f190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f194:	d031      	beq.n	801f1fa <__ssputs_r+0x7e>
 801f196:	6825      	ldr	r5, [r4, #0]
 801f198:	6909      	ldr	r1, [r1, #16]
 801f19a:	1a6f      	subs	r7, r5, r1
 801f19c:	6965      	ldr	r5, [r4, #20]
 801f19e:	2302      	movs	r3, #2
 801f1a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f1a4:	fb95 f5f3 	sdiv	r5, r5, r3
 801f1a8:	f109 0301 	add.w	r3, r9, #1
 801f1ac:	443b      	add	r3, r7
 801f1ae:	429d      	cmp	r5, r3
 801f1b0:	bf38      	it	cc
 801f1b2:	461d      	movcc	r5, r3
 801f1b4:	0553      	lsls	r3, r2, #21
 801f1b6:	d530      	bpl.n	801f21a <__ssputs_r+0x9e>
 801f1b8:	4629      	mov	r1, r5
 801f1ba:	f7ff ff85 	bl	801f0c8 <_malloc_r>
 801f1be:	4606      	mov	r6, r0
 801f1c0:	b950      	cbnz	r0, 801f1d8 <__ssputs_r+0x5c>
 801f1c2:	230c      	movs	r3, #12
 801f1c4:	f8ca 3000 	str.w	r3, [sl]
 801f1c8:	89a3      	ldrh	r3, [r4, #12]
 801f1ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f1ce:	81a3      	strh	r3, [r4, #12]
 801f1d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f1d8:	463a      	mov	r2, r7
 801f1da:	6921      	ldr	r1, [r4, #16]
 801f1dc:	f7fd fe25 	bl	801ce2a <memcpy>
 801f1e0:	89a3      	ldrh	r3, [r4, #12]
 801f1e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f1e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f1ea:	81a3      	strh	r3, [r4, #12]
 801f1ec:	6126      	str	r6, [r4, #16]
 801f1ee:	6165      	str	r5, [r4, #20]
 801f1f0:	443e      	add	r6, r7
 801f1f2:	1bed      	subs	r5, r5, r7
 801f1f4:	6026      	str	r6, [r4, #0]
 801f1f6:	60a5      	str	r5, [r4, #8]
 801f1f8:	464e      	mov	r6, r9
 801f1fa:	454e      	cmp	r6, r9
 801f1fc:	d900      	bls.n	801f200 <__ssputs_r+0x84>
 801f1fe:	464e      	mov	r6, r9
 801f200:	4632      	mov	r2, r6
 801f202:	4641      	mov	r1, r8
 801f204:	6820      	ldr	r0, [r4, #0]
 801f206:	f7fd fe1b 	bl	801ce40 <memmove>
 801f20a:	68a3      	ldr	r3, [r4, #8]
 801f20c:	1b9b      	subs	r3, r3, r6
 801f20e:	60a3      	str	r3, [r4, #8]
 801f210:	6823      	ldr	r3, [r4, #0]
 801f212:	441e      	add	r6, r3
 801f214:	6026      	str	r6, [r4, #0]
 801f216:	2000      	movs	r0, #0
 801f218:	e7dc      	b.n	801f1d4 <__ssputs_r+0x58>
 801f21a:	462a      	mov	r2, r5
 801f21c:	f000 faec 	bl	801f7f8 <_realloc_r>
 801f220:	4606      	mov	r6, r0
 801f222:	2800      	cmp	r0, #0
 801f224:	d1e2      	bne.n	801f1ec <__ssputs_r+0x70>
 801f226:	6921      	ldr	r1, [r4, #16]
 801f228:	4650      	mov	r0, sl
 801f22a:	f7ff feff 	bl	801f02c <_free_r>
 801f22e:	e7c8      	b.n	801f1c2 <__ssputs_r+0x46>

0801f230 <_svfiprintf_r>:
 801f230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f234:	461d      	mov	r5, r3
 801f236:	898b      	ldrh	r3, [r1, #12]
 801f238:	061f      	lsls	r7, r3, #24
 801f23a:	b09d      	sub	sp, #116	; 0x74
 801f23c:	4680      	mov	r8, r0
 801f23e:	460c      	mov	r4, r1
 801f240:	4616      	mov	r6, r2
 801f242:	d50f      	bpl.n	801f264 <_svfiprintf_r+0x34>
 801f244:	690b      	ldr	r3, [r1, #16]
 801f246:	b96b      	cbnz	r3, 801f264 <_svfiprintf_r+0x34>
 801f248:	2140      	movs	r1, #64	; 0x40
 801f24a:	f7ff ff3d 	bl	801f0c8 <_malloc_r>
 801f24e:	6020      	str	r0, [r4, #0]
 801f250:	6120      	str	r0, [r4, #16]
 801f252:	b928      	cbnz	r0, 801f260 <_svfiprintf_r+0x30>
 801f254:	230c      	movs	r3, #12
 801f256:	f8c8 3000 	str.w	r3, [r8]
 801f25a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f25e:	e0c8      	b.n	801f3f2 <_svfiprintf_r+0x1c2>
 801f260:	2340      	movs	r3, #64	; 0x40
 801f262:	6163      	str	r3, [r4, #20]
 801f264:	2300      	movs	r3, #0
 801f266:	9309      	str	r3, [sp, #36]	; 0x24
 801f268:	2320      	movs	r3, #32
 801f26a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f26e:	2330      	movs	r3, #48	; 0x30
 801f270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f274:	9503      	str	r5, [sp, #12]
 801f276:	f04f 0b01 	mov.w	fp, #1
 801f27a:	4637      	mov	r7, r6
 801f27c:	463d      	mov	r5, r7
 801f27e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f282:	b10b      	cbz	r3, 801f288 <_svfiprintf_r+0x58>
 801f284:	2b25      	cmp	r3, #37	; 0x25
 801f286:	d13e      	bne.n	801f306 <_svfiprintf_r+0xd6>
 801f288:	ebb7 0a06 	subs.w	sl, r7, r6
 801f28c:	d00b      	beq.n	801f2a6 <_svfiprintf_r+0x76>
 801f28e:	4653      	mov	r3, sl
 801f290:	4632      	mov	r2, r6
 801f292:	4621      	mov	r1, r4
 801f294:	4640      	mov	r0, r8
 801f296:	f7ff ff71 	bl	801f17c <__ssputs_r>
 801f29a:	3001      	adds	r0, #1
 801f29c:	f000 80a4 	beq.w	801f3e8 <_svfiprintf_r+0x1b8>
 801f2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f2a2:	4453      	add	r3, sl
 801f2a4:	9309      	str	r3, [sp, #36]	; 0x24
 801f2a6:	783b      	ldrb	r3, [r7, #0]
 801f2a8:	2b00      	cmp	r3, #0
 801f2aa:	f000 809d 	beq.w	801f3e8 <_svfiprintf_r+0x1b8>
 801f2ae:	2300      	movs	r3, #0
 801f2b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f2b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f2b8:	9304      	str	r3, [sp, #16]
 801f2ba:	9307      	str	r3, [sp, #28]
 801f2bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f2c0:	931a      	str	r3, [sp, #104]	; 0x68
 801f2c2:	462f      	mov	r7, r5
 801f2c4:	2205      	movs	r2, #5
 801f2c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 801f2ca:	4850      	ldr	r0, [pc, #320]	; (801f40c <_svfiprintf_r+0x1dc>)
 801f2cc:	f7e1 f810 	bl	80002f0 <memchr>
 801f2d0:	9b04      	ldr	r3, [sp, #16]
 801f2d2:	b9d0      	cbnz	r0, 801f30a <_svfiprintf_r+0xda>
 801f2d4:	06d9      	lsls	r1, r3, #27
 801f2d6:	bf44      	itt	mi
 801f2d8:	2220      	movmi	r2, #32
 801f2da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f2de:	071a      	lsls	r2, r3, #28
 801f2e0:	bf44      	itt	mi
 801f2e2:	222b      	movmi	r2, #43	; 0x2b
 801f2e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f2e8:	782a      	ldrb	r2, [r5, #0]
 801f2ea:	2a2a      	cmp	r2, #42	; 0x2a
 801f2ec:	d015      	beq.n	801f31a <_svfiprintf_r+0xea>
 801f2ee:	9a07      	ldr	r2, [sp, #28]
 801f2f0:	462f      	mov	r7, r5
 801f2f2:	2000      	movs	r0, #0
 801f2f4:	250a      	movs	r5, #10
 801f2f6:	4639      	mov	r1, r7
 801f2f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f2fc:	3b30      	subs	r3, #48	; 0x30
 801f2fe:	2b09      	cmp	r3, #9
 801f300:	d94d      	bls.n	801f39e <_svfiprintf_r+0x16e>
 801f302:	b1b8      	cbz	r0, 801f334 <_svfiprintf_r+0x104>
 801f304:	e00f      	b.n	801f326 <_svfiprintf_r+0xf6>
 801f306:	462f      	mov	r7, r5
 801f308:	e7b8      	b.n	801f27c <_svfiprintf_r+0x4c>
 801f30a:	4a40      	ldr	r2, [pc, #256]	; (801f40c <_svfiprintf_r+0x1dc>)
 801f30c:	1a80      	subs	r0, r0, r2
 801f30e:	fa0b f000 	lsl.w	r0, fp, r0
 801f312:	4318      	orrs	r0, r3
 801f314:	9004      	str	r0, [sp, #16]
 801f316:	463d      	mov	r5, r7
 801f318:	e7d3      	b.n	801f2c2 <_svfiprintf_r+0x92>
 801f31a:	9a03      	ldr	r2, [sp, #12]
 801f31c:	1d11      	adds	r1, r2, #4
 801f31e:	6812      	ldr	r2, [r2, #0]
 801f320:	9103      	str	r1, [sp, #12]
 801f322:	2a00      	cmp	r2, #0
 801f324:	db01      	blt.n	801f32a <_svfiprintf_r+0xfa>
 801f326:	9207      	str	r2, [sp, #28]
 801f328:	e004      	b.n	801f334 <_svfiprintf_r+0x104>
 801f32a:	4252      	negs	r2, r2
 801f32c:	f043 0302 	orr.w	r3, r3, #2
 801f330:	9207      	str	r2, [sp, #28]
 801f332:	9304      	str	r3, [sp, #16]
 801f334:	783b      	ldrb	r3, [r7, #0]
 801f336:	2b2e      	cmp	r3, #46	; 0x2e
 801f338:	d10c      	bne.n	801f354 <_svfiprintf_r+0x124>
 801f33a:	787b      	ldrb	r3, [r7, #1]
 801f33c:	2b2a      	cmp	r3, #42	; 0x2a
 801f33e:	d133      	bne.n	801f3a8 <_svfiprintf_r+0x178>
 801f340:	9b03      	ldr	r3, [sp, #12]
 801f342:	1d1a      	adds	r2, r3, #4
 801f344:	681b      	ldr	r3, [r3, #0]
 801f346:	9203      	str	r2, [sp, #12]
 801f348:	2b00      	cmp	r3, #0
 801f34a:	bfb8      	it	lt
 801f34c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f350:	3702      	adds	r7, #2
 801f352:	9305      	str	r3, [sp, #20]
 801f354:	4d2e      	ldr	r5, [pc, #184]	; (801f410 <_svfiprintf_r+0x1e0>)
 801f356:	7839      	ldrb	r1, [r7, #0]
 801f358:	2203      	movs	r2, #3
 801f35a:	4628      	mov	r0, r5
 801f35c:	f7e0 ffc8 	bl	80002f0 <memchr>
 801f360:	b138      	cbz	r0, 801f372 <_svfiprintf_r+0x142>
 801f362:	2340      	movs	r3, #64	; 0x40
 801f364:	1b40      	subs	r0, r0, r5
 801f366:	fa03 f000 	lsl.w	r0, r3, r0
 801f36a:	9b04      	ldr	r3, [sp, #16]
 801f36c:	4303      	orrs	r3, r0
 801f36e:	3701      	adds	r7, #1
 801f370:	9304      	str	r3, [sp, #16]
 801f372:	7839      	ldrb	r1, [r7, #0]
 801f374:	4827      	ldr	r0, [pc, #156]	; (801f414 <_svfiprintf_r+0x1e4>)
 801f376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f37a:	2206      	movs	r2, #6
 801f37c:	1c7e      	adds	r6, r7, #1
 801f37e:	f7e0 ffb7 	bl	80002f0 <memchr>
 801f382:	2800      	cmp	r0, #0
 801f384:	d038      	beq.n	801f3f8 <_svfiprintf_r+0x1c8>
 801f386:	4b24      	ldr	r3, [pc, #144]	; (801f418 <_svfiprintf_r+0x1e8>)
 801f388:	bb13      	cbnz	r3, 801f3d0 <_svfiprintf_r+0x1a0>
 801f38a:	9b03      	ldr	r3, [sp, #12]
 801f38c:	3307      	adds	r3, #7
 801f38e:	f023 0307 	bic.w	r3, r3, #7
 801f392:	3308      	adds	r3, #8
 801f394:	9303      	str	r3, [sp, #12]
 801f396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f398:	444b      	add	r3, r9
 801f39a:	9309      	str	r3, [sp, #36]	; 0x24
 801f39c:	e76d      	b.n	801f27a <_svfiprintf_r+0x4a>
 801f39e:	fb05 3202 	mla	r2, r5, r2, r3
 801f3a2:	2001      	movs	r0, #1
 801f3a4:	460f      	mov	r7, r1
 801f3a6:	e7a6      	b.n	801f2f6 <_svfiprintf_r+0xc6>
 801f3a8:	2300      	movs	r3, #0
 801f3aa:	3701      	adds	r7, #1
 801f3ac:	9305      	str	r3, [sp, #20]
 801f3ae:	4619      	mov	r1, r3
 801f3b0:	250a      	movs	r5, #10
 801f3b2:	4638      	mov	r0, r7
 801f3b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f3b8:	3a30      	subs	r2, #48	; 0x30
 801f3ba:	2a09      	cmp	r2, #9
 801f3bc:	d903      	bls.n	801f3c6 <_svfiprintf_r+0x196>
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	d0c8      	beq.n	801f354 <_svfiprintf_r+0x124>
 801f3c2:	9105      	str	r1, [sp, #20]
 801f3c4:	e7c6      	b.n	801f354 <_svfiprintf_r+0x124>
 801f3c6:	fb05 2101 	mla	r1, r5, r1, r2
 801f3ca:	2301      	movs	r3, #1
 801f3cc:	4607      	mov	r7, r0
 801f3ce:	e7f0      	b.n	801f3b2 <_svfiprintf_r+0x182>
 801f3d0:	ab03      	add	r3, sp, #12
 801f3d2:	9300      	str	r3, [sp, #0]
 801f3d4:	4622      	mov	r2, r4
 801f3d6:	4b11      	ldr	r3, [pc, #68]	; (801f41c <_svfiprintf_r+0x1ec>)
 801f3d8:	a904      	add	r1, sp, #16
 801f3da:	4640      	mov	r0, r8
 801f3dc:	f7fd fdd8 	bl	801cf90 <_printf_float>
 801f3e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801f3e4:	4681      	mov	r9, r0
 801f3e6:	d1d6      	bne.n	801f396 <_svfiprintf_r+0x166>
 801f3e8:	89a3      	ldrh	r3, [r4, #12]
 801f3ea:	065b      	lsls	r3, r3, #25
 801f3ec:	f53f af35 	bmi.w	801f25a <_svfiprintf_r+0x2a>
 801f3f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f3f2:	b01d      	add	sp, #116	; 0x74
 801f3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3f8:	ab03      	add	r3, sp, #12
 801f3fa:	9300      	str	r3, [sp, #0]
 801f3fc:	4622      	mov	r2, r4
 801f3fe:	4b07      	ldr	r3, [pc, #28]	; (801f41c <_svfiprintf_r+0x1ec>)
 801f400:	a904      	add	r1, sp, #16
 801f402:	4640      	mov	r0, r8
 801f404:	f7fe f866 	bl	801d4d4 <_printf_i>
 801f408:	e7ea      	b.n	801f3e0 <_svfiprintf_r+0x1b0>
 801f40a:	bf00      	nop
 801f40c:	08022db4 	.word	0x08022db4
 801f410:	08022dba 	.word	0x08022dba
 801f414:	08022dbe 	.word	0x08022dbe
 801f418:	0801cf91 	.word	0x0801cf91
 801f41c:	0801f17d 	.word	0x0801f17d

0801f420 <__sfputc_r>:
 801f420:	6893      	ldr	r3, [r2, #8]
 801f422:	3b01      	subs	r3, #1
 801f424:	2b00      	cmp	r3, #0
 801f426:	b410      	push	{r4}
 801f428:	6093      	str	r3, [r2, #8]
 801f42a:	da08      	bge.n	801f43e <__sfputc_r+0x1e>
 801f42c:	6994      	ldr	r4, [r2, #24]
 801f42e:	42a3      	cmp	r3, r4
 801f430:	db01      	blt.n	801f436 <__sfputc_r+0x16>
 801f432:	290a      	cmp	r1, #10
 801f434:	d103      	bne.n	801f43e <__sfputc_r+0x1e>
 801f436:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f43a:	f7fe ba0d 	b.w	801d858 <__swbuf_r>
 801f43e:	6813      	ldr	r3, [r2, #0]
 801f440:	1c58      	adds	r0, r3, #1
 801f442:	6010      	str	r0, [r2, #0]
 801f444:	7019      	strb	r1, [r3, #0]
 801f446:	4608      	mov	r0, r1
 801f448:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f44c:	4770      	bx	lr

0801f44e <__sfputs_r>:
 801f44e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f450:	4606      	mov	r6, r0
 801f452:	460f      	mov	r7, r1
 801f454:	4614      	mov	r4, r2
 801f456:	18d5      	adds	r5, r2, r3
 801f458:	42ac      	cmp	r4, r5
 801f45a:	d101      	bne.n	801f460 <__sfputs_r+0x12>
 801f45c:	2000      	movs	r0, #0
 801f45e:	e007      	b.n	801f470 <__sfputs_r+0x22>
 801f460:	463a      	mov	r2, r7
 801f462:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f466:	4630      	mov	r0, r6
 801f468:	f7ff ffda 	bl	801f420 <__sfputc_r>
 801f46c:	1c43      	adds	r3, r0, #1
 801f46e:	d1f3      	bne.n	801f458 <__sfputs_r+0xa>
 801f470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f474 <_vfiprintf_r>:
 801f474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f478:	460c      	mov	r4, r1
 801f47a:	b09d      	sub	sp, #116	; 0x74
 801f47c:	4617      	mov	r7, r2
 801f47e:	461d      	mov	r5, r3
 801f480:	4606      	mov	r6, r0
 801f482:	b118      	cbz	r0, 801f48c <_vfiprintf_r+0x18>
 801f484:	6983      	ldr	r3, [r0, #24]
 801f486:	b90b      	cbnz	r3, 801f48c <_vfiprintf_r+0x18>
 801f488:	f7ff f9e2 	bl	801e850 <__sinit>
 801f48c:	4b7c      	ldr	r3, [pc, #496]	; (801f680 <_vfiprintf_r+0x20c>)
 801f48e:	429c      	cmp	r4, r3
 801f490:	d158      	bne.n	801f544 <_vfiprintf_r+0xd0>
 801f492:	6874      	ldr	r4, [r6, #4]
 801f494:	89a3      	ldrh	r3, [r4, #12]
 801f496:	0718      	lsls	r0, r3, #28
 801f498:	d55e      	bpl.n	801f558 <_vfiprintf_r+0xe4>
 801f49a:	6923      	ldr	r3, [r4, #16]
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	d05b      	beq.n	801f558 <_vfiprintf_r+0xe4>
 801f4a0:	2300      	movs	r3, #0
 801f4a2:	9309      	str	r3, [sp, #36]	; 0x24
 801f4a4:	2320      	movs	r3, #32
 801f4a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f4aa:	2330      	movs	r3, #48	; 0x30
 801f4ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f4b0:	9503      	str	r5, [sp, #12]
 801f4b2:	f04f 0b01 	mov.w	fp, #1
 801f4b6:	46b8      	mov	r8, r7
 801f4b8:	4645      	mov	r5, r8
 801f4ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f4be:	b10b      	cbz	r3, 801f4c4 <_vfiprintf_r+0x50>
 801f4c0:	2b25      	cmp	r3, #37	; 0x25
 801f4c2:	d154      	bne.n	801f56e <_vfiprintf_r+0xfa>
 801f4c4:	ebb8 0a07 	subs.w	sl, r8, r7
 801f4c8:	d00b      	beq.n	801f4e2 <_vfiprintf_r+0x6e>
 801f4ca:	4653      	mov	r3, sl
 801f4cc:	463a      	mov	r2, r7
 801f4ce:	4621      	mov	r1, r4
 801f4d0:	4630      	mov	r0, r6
 801f4d2:	f7ff ffbc 	bl	801f44e <__sfputs_r>
 801f4d6:	3001      	adds	r0, #1
 801f4d8:	f000 80c2 	beq.w	801f660 <_vfiprintf_r+0x1ec>
 801f4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f4de:	4453      	add	r3, sl
 801f4e0:	9309      	str	r3, [sp, #36]	; 0x24
 801f4e2:	f898 3000 	ldrb.w	r3, [r8]
 801f4e6:	2b00      	cmp	r3, #0
 801f4e8:	f000 80ba 	beq.w	801f660 <_vfiprintf_r+0x1ec>
 801f4ec:	2300      	movs	r3, #0
 801f4ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f4f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f4f6:	9304      	str	r3, [sp, #16]
 801f4f8:	9307      	str	r3, [sp, #28]
 801f4fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f4fe:	931a      	str	r3, [sp, #104]	; 0x68
 801f500:	46a8      	mov	r8, r5
 801f502:	2205      	movs	r2, #5
 801f504:	f818 1b01 	ldrb.w	r1, [r8], #1
 801f508:	485e      	ldr	r0, [pc, #376]	; (801f684 <_vfiprintf_r+0x210>)
 801f50a:	f7e0 fef1 	bl	80002f0 <memchr>
 801f50e:	9b04      	ldr	r3, [sp, #16]
 801f510:	bb78      	cbnz	r0, 801f572 <_vfiprintf_r+0xfe>
 801f512:	06d9      	lsls	r1, r3, #27
 801f514:	bf44      	itt	mi
 801f516:	2220      	movmi	r2, #32
 801f518:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f51c:	071a      	lsls	r2, r3, #28
 801f51e:	bf44      	itt	mi
 801f520:	222b      	movmi	r2, #43	; 0x2b
 801f522:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f526:	782a      	ldrb	r2, [r5, #0]
 801f528:	2a2a      	cmp	r2, #42	; 0x2a
 801f52a:	d02a      	beq.n	801f582 <_vfiprintf_r+0x10e>
 801f52c:	9a07      	ldr	r2, [sp, #28]
 801f52e:	46a8      	mov	r8, r5
 801f530:	2000      	movs	r0, #0
 801f532:	250a      	movs	r5, #10
 801f534:	4641      	mov	r1, r8
 801f536:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f53a:	3b30      	subs	r3, #48	; 0x30
 801f53c:	2b09      	cmp	r3, #9
 801f53e:	d969      	bls.n	801f614 <_vfiprintf_r+0x1a0>
 801f540:	b360      	cbz	r0, 801f59c <_vfiprintf_r+0x128>
 801f542:	e024      	b.n	801f58e <_vfiprintf_r+0x11a>
 801f544:	4b50      	ldr	r3, [pc, #320]	; (801f688 <_vfiprintf_r+0x214>)
 801f546:	429c      	cmp	r4, r3
 801f548:	d101      	bne.n	801f54e <_vfiprintf_r+0xda>
 801f54a:	68b4      	ldr	r4, [r6, #8]
 801f54c:	e7a2      	b.n	801f494 <_vfiprintf_r+0x20>
 801f54e:	4b4f      	ldr	r3, [pc, #316]	; (801f68c <_vfiprintf_r+0x218>)
 801f550:	429c      	cmp	r4, r3
 801f552:	bf08      	it	eq
 801f554:	68f4      	ldreq	r4, [r6, #12]
 801f556:	e79d      	b.n	801f494 <_vfiprintf_r+0x20>
 801f558:	4621      	mov	r1, r4
 801f55a:	4630      	mov	r0, r6
 801f55c:	f7fe f9dc 	bl	801d918 <__swsetup_r>
 801f560:	2800      	cmp	r0, #0
 801f562:	d09d      	beq.n	801f4a0 <_vfiprintf_r+0x2c>
 801f564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f568:	b01d      	add	sp, #116	; 0x74
 801f56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f56e:	46a8      	mov	r8, r5
 801f570:	e7a2      	b.n	801f4b8 <_vfiprintf_r+0x44>
 801f572:	4a44      	ldr	r2, [pc, #272]	; (801f684 <_vfiprintf_r+0x210>)
 801f574:	1a80      	subs	r0, r0, r2
 801f576:	fa0b f000 	lsl.w	r0, fp, r0
 801f57a:	4318      	orrs	r0, r3
 801f57c:	9004      	str	r0, [sp, #16]
 801f57e:	4645      	mov	r5, r8
 801f580:	e7be      	b.n	801f500 <_vfiprintf_r+0x8c>
 801f582:	9a03      	ldr	r2, [sp, #12]
 801f584:	1d11      	adds	r1, r2, #4
 801f586:	6812      	ldr	r2, [r2, #0]
 801f588:	9103      	str	r1, [sp, #12]
 801f58a:	2a00      	cmp	r2, #0
 801f58c:	db01      	blt.n	801f592 <_vfiprintf_r+0x11e>
 801f58e:	9207      	str	r2, [sp, #28]
 801f590:	e004      	b.n	801f59c <_vfiprintf_r+0x128>
 801f592:	4252      	negs	r2, r2
 801f594:	f043 0302 	orr.w	r3, r3, #2
 801f598:	9207      	str	r2, [sp, #28]
 801f59a:	9304      	str	r3, [sp, #16]
 801f59c:	f898 3000 	ldrb.w	r3, [r8]
 801f5a0:	2b2e      	cmp	r3, #46	; 0x2e
 801f5a2:	d10e      	bne.n	801f5c2 <_vfiprintf_r+0x14e>
 801f5a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 801f5a8:	2b2a      	cmp	r3, #42	; 0x2a
 801f5aa:	d138      	bne.n	801f61e <_vfiprintf_r+0x1aa>
 801f5ac:	9b03      	ldr	r3, [sp, #12]
 801f5ae:	1d1a      	adds	r2, r3, #4
 801f5b0:	681b      	ldr	r3, [r3, #0]
 801f5b2:	9203      	str	r2, [sp, #12]
 801f5b4:	2b00      	cmp	r3, #0
 801f5b6:	bfb8      	it	lt
 801f5b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f5bc:	f108 0802 	add.w	r8, r8, #2
 801f5c0:	9305      	str	r3, [sp, #20]
 801f5c2:	4d33      	ldr	r5, [pc, #204]	; (801f690 <_vfiprintf_r+0x21c>)
 801f5c4:	f898 1000 	ldrb.w	r1, [r8]
 801f5c8:	2203      	movs	r2, #3
 801f5ca:	4628      	mov	r0, r5
 801f5cc:	f7e0 fe90 	bl	80002f0 <memchr>
 801f5d0:	b140      	cbz	r0, 801f5e4 <_vfiprintf_r+0x170>
 801f5d2:	2340      	movs	r3, #64	; 0x40
 801f5d4:	1b40      	subs	r0, r0, r5
 801f5d6:	fa03 f000 	lsl.w	r0, r3, r0
 801f5da:	9b04      	ldr	r3, [sp, #16]
 801f5dc:	4303      	orrs	r3, r0
 801f5de:	f108 0801 	add.w	r8, r8, #1
 801f5e2:	9304      	str	r3, [sp, #16]
 801f5e4:	f898 1000 	ldrb.w	r1, [r8]
 801f5e8:	482a      	ldr	r0, [pc, #168]	; (801f694 <_vfiprintf_r+0x220>)
 801f5ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f5ee:	2206      	movs	r2, #6
 801f5f0:	f108 0701 	add.w	r7, r8, #1
 801f5f4:	f7e0 fe7c 	bl	80002f0 <memchr>
 801f5f8:	2800      	cmp	r0, #0
 801f5fa:	d037      	beq.n	801f66c <_vfiprintf_r+0x1f8>
 801f5fc:	4b26      	ldr	r3, [pc, #152]	; (801f698 <_vfiprintf_r+0x224>)
 801f5fe:	bb1b      	cbnz	r3, 801f648 <_vfiprintf_r+0x1d4>
 801f600:	9b03      	ldr	r3, [sp, #12]
 801f602:	3307      	adds	r3, #7
 801f604:	f023 0307 	bic.w	r3, r3, #7
 801f608:	3308      	adds	r3, #8
 801f60a:	9303      	str	r3, [sp, #12]
 801f60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f60e:	444b      	add	r3, r9
 801f610:	9309      	str	r3, [sp, #36]	; 0x24
 801f612:	e750      	b.n	801f4b6 <_vfiprintf_r+0x42>
 801f614:	fb05 3202 	mla	r2, r5, r2, r3
 801f618:	2001      	movs	r0, #1
 801f61a:	4688      	mov	r8, r1
 801f61c:	e78a      	b.n	801f534 <_vfiprintf_r+0xc0>
 801f61e:	2300      	movs	r3, #0
 801f620:	f108 0801 	add.w	r8, r8, #1
 801f624:	9305      	str	r3, [sp, #20]
 801f626:	4619      	mov	r1, r3
 801f628:	250a      	movs	r5, #10
 801f62a:	4640      	mov	r0, r8
 801f62c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f630:	3a30      	subs	r2, #48	; 0x30
 801f632:	2a09      	cmp	r2, #9
 801f634:	d903      	bls.n	801f63e <_vfiprintf_r+0x1ca>
 801f636:	2b00      	cmp	r3, #0
 801f638:	d0c3      	beq.n	801f5c2 <_vfiprintf_r+0x14e>
 801f63a:	9105      	str	r1, [sp, #20]
 801f63c:	e7c1      	b.n	801f5c2 <_vfiprintf_r+0x14e>
 801f63e:	fb05 2101 	mla	r1, r5, r1, r2
 801f642:	2301      	movs	r3, #1
 801f644:	4680      	mov	r8, r0
 801f646:	e7f0      	b.n	801f62a <_vfiprintf_r+0x1b6>
 801f648:	ab03      	add	r3, sp, #12
 801f64a:	9300      	str	r3, [sp, #0]
 801f64c:	4622      	mov	r2, r4
 801f64e:	4b13      	ldr	r3, [pc, #76]	; (801f69c <_vfiprintf_r+0x228>)
 801f650:	a904      	add	r1, sp, #16
 801f652:	4630      	mov	r0, r6
 801f654:	f7fd fc9c 	bl	801cf90 <_printf_float>
 801f658:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801f65c:	4681      	mov	r9, r0
 801f65e:	d1d5      	bne.n	801f60c <_vfiprintf_r+0x198>
 801f660:	89a3      	ldrh	r3, [r4, #12]
 801f662:	065b      	lsls	r3, r3, #25
 801f664:	f53f af7e 	bmi.w	801f564 <_vfiprintf_r+0xf0>
 801f668:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f66a:	e77d      	b.n	801f568 <_vfiprintf_r+0xf4>
 801f66c:	ab03      	add	r3, sp, #12
 801f66e:	9300      	str	r3, [sp, #0]
 801f670:	4622      	mov	r2, r4
 801f672:	4b0a      	ldr	r3, [pc, #40]	; (801f69c <_vfiprintf_r+0x228>)
 801f674:	a904      	add	r1, sp, #16
 801f676:	4630      	mov	r0, r6
 801f678:	f7fd ff2c 	bl	801d4d4 <_printf_i>
 801f67c:	e7ec      	b.n	801f658 <_vfiprintf_r+0x1e4>
 801f67e:	bf00      	nop
 801f680:	08022c74 	.word	0x08022c74
 801f684:	08022db4 	.word	0x08022db4
 801f688:	08022c94 	.word	0x08022c94
 801f68c:	08022c54 	.word	0x08022c54
 801f690:	08022dba 	.word	0x08022dba
 801f694:	08022dbe 	.word	0x08022dbe
 801f698:	0801cf91 	.word	0x0801cf91
 801f69c:	0801f44f 	.word	0x0801f44f

0801f6a0 <_sbrk_r>:
 801f6a0:	b538      	push	{r3, r4, r5, lr}
 801f6a2:	4c06      	ldr	r4, [pc, #24]	; (801f6bc <_sbrk_r+0x1c>)
 801f6a4:	2300      	movs	r3, #0
 801f6a6:	4605      	mov	r5, r0
 801f6a8:	4608      	mov	r0, r1
 801f6aa:	6023      	str	r3, [r4, #0]
 801f6ac:	f7e2 fcae 	bl	800200c <_sbrk>
 801f6b0:	1c43      	adds	r3, r0, #1
 801f6b2:	d102      	bne.n	801f6ba <_sbrk_r+0x1a>
 801f6b4:	6823      	ldr	r3, [r4, #0]
 801f6b6:	b103      	cbz	r3, 801f6ba <_sbrk_r+0x1a>
 801f6b8:	602b      	str	r3, [r5, #0]
 801f6ba:	bd38      	pop	{r3, r4, r5, pc}
 801f6bc:	2000ba58 	.word	0x2000ba58

0801f6c0 <__sread>:
 801f6c0:	b510      	push	{r4, lr}
 801f6c2:	460c      	mov	r4, r1
 801f6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f6c8:	f000 f8bc 	bl	801f844 <_read_r>
 801f6cc:	2800      	cmp	r0, #0
 801f6ce:	bfab      	itete	ge
 801f6d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f6d2:	89a3      	ldrhlt	r3, [r4, #12]
 801f6d4:	181b      	addge	r3, r3, r0
 801f6d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f6da:	bfac      	ite	ge
 801f6dc:	6563      	strge	r3, [r4, #84]	; 0x54
 801f6de:	81a3      	strhlt	r3, [r4, #12]
 801f6e0:	bd10      	pop	{r4, pc}

0801f6e2 <__swrite>:
 801f6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6e6:	461f      	mov	r7, r3
 801f6e8:	898b      	ldrh	r3, [r1, #12]
 801f6ea:	05db      	lsls	r3, r3, #23
 801f6ec:	4605      	mov	r5, r0
 801f6ee:	460c      	mov	r4, r1
 801f6f0:	4616      	mov	r6, r2
 801f6f2:	d505      	bpl.n	801f700 <__swrite+0x1e>
 801f6f4:	2302      	movs	r3, #2
 801f6f6:	2200      	movs	r2, #0
 801f6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f6fc:	f000 f868 	bl	801f7d0 <_lseek_r>
 801f700:	89a3      	ldrh	r3, [r4, #12]
 801f702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f70a:	81a3      	strh	r3, [r4, #12]
 801f70c:	4632      	mov	r2, r6
 801f70e:	463b      	mov	r3, r7
 801f710:	4628      	mov	r0, r5
 801f712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f716:	f000 b817 	b.w	801f748 <_write_r>

0801f71a <__sseek>:
 801f71a:	b510      	push	{r4, lr}
 801f71c:	460c      	mov	r4, r1
 801f71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f722:	f000 f855 	bl	801f7d0 <_lseek_r>
 801f726:	1c43      	adds	r3, r0, #1
 801f728:	89a3      	ldrh	r3, [r4, #12]
 801f72a:	bf15      	itete	ne
 801f72c:	6560      	strne	r0, [r4, #84]	; 0x54
 801f72e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f736:	81a3      	strheq	r3, [r4, #12]
 801f738:	bf18      	it	ne
 801f73a:	81a3      	strhne	r3, [r4, #12]
 801f73c:	bd10      	pop	{r4, pc}

0801f73e <__sclose>:
 801f73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f742:	f000 b813 	b.w	801f76c <_close_r>
	...

0801f748 <_write_r>:
 801f748:	b538      	push	{r3, r4, r5, lr}
 801f74a:	4c07      	ldr	r4, [pc, #28]	; (801f768 <_write_r+0x20>)
 801f74c:	4605      	mov	r5, r0
 801f74e:	4608      	mov	r0, r1
 801f750:	4611      	mov	r1, r2
 801f752:	2200      	movs	r2, #0
 801f754:	6022      	str	r2, [r4, #0]
 801f756:	461a      	mov	r2, r3
 801f758:	f7e2 fc07 	bl	8001f6a <_write>
 801f75c:	1c43      	adds	r3, r0, #1
 801f75e:	d102      	bne.n	801f766 <_write_r+0x1e>
 801f760:	6823      	ldr	r3, [r4, #0]
 801f762:	b103      	cbz	r3, 801f766 <_write_r+0x1e>
 801f764:	602b      	str	r3, [r5, #0]
 801f766:	bd38      	pop	{r3, r4, r5, pc}
 801f768:	2000ba58 	.word	0x2000ba58

0801f76c <_close_r>:
 801f76c:	b538      	push	{r3, r4, r5, lr}
 801f76e:	4c06      	ldr	r4, [pc, #24]	; (801f788 <_close_r+0x1c>)
 801f770:	2300      	movs	r3, #0
 801f772:	4605      	mov	r5, r0
 801f774:	4608      	mov	r0, r1
 801f776:	6023      	str	r3, [r4, #0]
 801f778:	f7e2 fc13 	bl	8001fa2 <_close>
 801f77c:	1c43      	adds	r3, r0, #1
 801f77e:	d102      	bne.n	801f786 <_close_r+0x1a>
 801f780:	6823      	ldr	r3, [r4, #0]
 801f782:	b103      	cbz	r3, 801f786 <_close_r+0x1a>
 801f784:	602b      	str	r3, [r5, #0]
 801f786:	bd38      	pop	{r3, r4, r5, pc}
 801f788:	2000ba58 	.word	0x2000ba58

0801f78c <_fstat_r>:
 801f78c:	b538      	push	{r3, r4, r5, lr}
 801f78e:	4c07      	ldr	r4, [pc, #28]	; (801f7ac <_fstat_r+0x20>)
 801f790:	2300      	movs	r3, #0
 801f792:	4605      	mov	r5, r0
 801f794:	4608      	mov	r0, r1
 801f796:	4611      	mov	r1, r2
 801f798:	6023      	str	r3, [r4, #0]
 801f79a:	f7e2 fc0e 	bl	8001fba <_fstat>
 801f79e:	1c43      	adds	r3, r0, #1
 801f7a0:	d102      	bne.n	801f7a8 <_fstat_r+0x1c>
 801f7a2:	6823      	ldr	r3, [r4, #0]
 801f7a4:	b103      	cbz	r3, 801f7a8 <_fstat_r+0x1c>
 801f7a6:	602b      	str	r3, [r5, #0]
 801f7a8:	bd38      	pop	{r3, r4, r5, pc}
 801f7aa:	bf00      	nop
 801f7ac:	2000ba58 	.word	0x2000ba58

0801f7b0 <_isatty_r>:
 801f7b0:	b538      	push	{r3, r4, r5, lr}
 801f7b2:	4c06      	ldr	r4, [pc, #24]	; (801f7cc <_isatty_r+0x1c>)
 801f7b4:	2300      	movs	r3, #0
 801f7b6:	4605      	mov	r5, r0
 801f7b8:	4608      	mov	r0, r1
 801f7ba:	6023      	str	r3, [r4, #0]
 801f7bc:	f7e2 fc0d 	bl	8001fda <_isatty>
 801f7c0:	1c43      	adds	r3, r0, #1
 801f7c2:	d102      	bne.n	801f7ca <_isatty_r+0x1a>
 801f7c4:	6823      	ldr	r3, [r4, #0]
 801f7c6:	b103      	cbz	r3, 801f7ca <_isatty_r+0x1a>
 801f7c8:	602b      	str	r3, [r5, #0]
 801f7ca:	bd38      	pop	{r3, r4, r5, pc}
 801f7cc:	2000ba58 	.word	0x2000ba58

0801f7d0 <_lseek_r>:
 801f7d0:	b538      	push	{r3, r4, r5, lr}
 801f7d2:	4c07      	ldr	r4, [pc, #28]	; (801f7f0 <_lseek_r+0x20>)
 801f7d4:	4605      	mov	r5, r0
 801f7d6:	4608      	mov	r0, r1
 801f7d8:	4611      	mov	r1, r2
 801f7da:	2200      	movs	r2, #0
 801f7dc:	6022      	str	r2, [r4, #0]
 801f7de:	461a      	mov	r2, r3
 801f7e0:	f7e2 fc06 	bl	8001ff0 <_lseek>
 801f7e4:	1c43      	adds	r3, r0, #1
 801f7e6:	d102      	bne.n	801f7ee <_lseek_r+0x1e>
 801f7e8:	6823      	ldr	r3, [r4, #0]
 801f7ea:	b103      	cbz	r3, 801f7ee <_lseek_r+0x1e>
 801f7ec:	602b      	str	r3, [r5, #0]
 801f7ee:	bd38      	pop	{r3, r4, r5, pc}
 801f7f0:	2000ba58 	.word	0x2000ba58

0801f7f4 <__malloc_lock>:
 801f7f4:	4770      	bx	lr

0801f7f6 <__malloc_unlock>:
 801f7f6:	4770      	bx	lr

0801f7f8 <_realloc_r>:
 801f7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7fa:	4607      	mov	r7, r0
 801f7fc:	4614      	mov	r4, r2
 801f7fe:	460e      	mov	r6, r1
 801f800:	b921      	cbnz	r1, 801f80c <_realloc_r+0x14>
 801f802:	4611      	mov	r1, r2
 801f804:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f808:	f7ff bc5e 	b.w	801f0c8 <_malloc_r>
 801f80c:	b922      	cbnz	r2, 801f818 <_realloc_r+0x20>
 801f80e:	f7ff fc0d 	bl	801f02c <_free_r>
 801f812:	4625      	mov	r5, r4
 801f814:	4628      	mov	r0, r5
 801f816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f818:	f000 f826 	bl	801f868 <_malloc_usable_size_r>
 801f81c:	42a0      	cmp	r0, r4
 801f81e:	d20f      	bcs.n	801f840 <_realloc_r+0x48>
 801f820:	4621      	mov	r1, r4
 801f822:	4638      	mov	r0, r7
 801f824:	f7ff fc50 	bl	801f0c8 <_malloc_r>
 801f828:	4605      	mov	r5, r0
 801f82a:	2800      	cmp	r0, #0
 801f82c:	d0f2      	beq.n	801f814 <_realloc_r+0x1c>
 801f82e:	4631      	mov	r1, r6
 801f830:	4622      	mov	r2, r4
 801f832:	f7fd fafa 	bl	801ce2a <memcpy>
 801f836:	4631      	mov	r1, r6
 801f838:	4638      	mov	r0, r7
 801f83a:	f7ff fbf7 	bl	801f02c <_free_r>
 801f83e:	e7e9      	b.n	801f814 <_realloc_r+0x1c>
 801f840:	4635      	mov	r5, r6
 801f842:	e7e7      	b.n	801f814 <_realloc_r+0x1c>

0801f844 <_read_r>:
 801f844:	b538      	push	{r3, r4, r5, lr}
 801f846:	4c07      	ldr	r4, [pc, #28]	; (801f864 <_read_r+0x20>)
 801f848:	4605      	mov	r5, r0
 801f84a:	4608      	mov	r0, r1
 801f84c:	4611      	mov	r1, r2
 801f84e:	2200      	movs	r2, #0
 801f850:	6022      	str	r2, [r4, #0]
 801f852:	461a      	mov	r2, r3
 801f854:	f7e2 fb6c 	bl	8001f30 <_read>
 801f858:	1c43      	adds	r3, r0, #1
 801f85a:	d102      	bne.n	801f862 <_read_r+0x1e>
 801f85c:	6823      	ldr	r3, [r4, #0]
 801f85e:	b103      	cbz	r3, 801f862 <_read_r+0x1e>
 801f860:	602b      	str	r3, [r5, #0]
 801f862:	bd38      	pop	{r3, r4, r5, pc}
 801f864:	2000ba58 	.word	0x2000ba58

0801f868 <_malloc_usable_size_r>:
 801f868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f86c:	1f18      	subs	r0, r3, #4
 801f86e:	2b00      	cmp	r3, #0
 801f870:	bfbc      	itt	lt
 801f872:	580b      	ldrlt	r3, [r1, r0]
 801f874:	18c0      	addlt	r0, r0, r3
 801f876:	4770      	bx	lr

0801f878 <_init>:
 801f878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f87a:	bf00      	nop
 801f87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f87e:	bc08      	pop	{r3}
 801f880:	469e      	mov	lr, r3
 801f882:	4770      	bx	lr

0801f884 <_fini>:
 801f884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f886:	bf00      	nop
 801f888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f88a:	bc08      	pop	{r3}
 801f88c:	469e      	mov	lr, r3
 801f88e:	4770      	bx	lr
