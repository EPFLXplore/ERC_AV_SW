
XploreAvionics_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eed4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0800f178  0800f178  0001f178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f4c0  0800f4c0  0001f4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f4c8  0800f4c8  0001f4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f4d0  0800f4d0  0001f4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  0800f4d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006c84  200001e8  0800f6bc  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20006e6c  0800f6bc  00026e6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00056943  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000893d  00000000  00000000  00076b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002738  00000000  00000000  0007f498  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000023f0  00000000  00000000  00081bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004b30a  00000000  00000000  00083fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002f0c9  00000000  00000000  000cf2ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001b36cd  00000000  00000000  000fe393  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002b1a60  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ad1c  00000000  00000000  002b1adc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e8 	.word	0x200001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f15c 	.word	0x0800f15c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001ec 	.word	0x200001ec
 80002dc:	0800f15c 	.word	0x0800f15c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <SystemInit+0x104>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a3e      	ldr	r2, [pc, #248]	; (8000794 <SystemInit+0x104>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <SystemInit+0x104>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <SystemInit+0x104>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b0:	4b39      	ldr	r3, [pc, #228]	; (8000798 <SystemInit+0x108>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d807      	bhi.n	80006cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <SystemInit+0x108>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 030f 	bic.w	r3, r3, #15
 80006c4:	4a34      	ldr	r2, [pc, #208]	; (8000798 <SystemInit+0x108>)
 80006c6:	f043 0307 	orr.w	r3, r3, #7
 80006ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <SystemInit+0x10c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a32      	ldr	r2, [pc, #200]	; (800079c <SystemInit+0x10c>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d8:	4b30      	ldr	r3, [pc, #192]	; (800079c <SystemInit+0x10c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <SystemInit+0x10c>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	492e      	ldr	r1, [pc, #184]	; (800079c <SystemInit+0x10c>)
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <SystemInit+0x110>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <SystemInit+0x108>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d907      	bls.n	8000706 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemInit+0x108>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 030f 	bic.w	r3, r3, #15
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <SystemInit+0x108>)
 8000700:	f043 0307 	orr.w	r3, r3, #7
 8000704:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemInit+0x10c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemInit+0x10c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemInit+0x10c>)
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <SystemInit+0x114>)
 800071c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemInit+0x10c>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemInit+0x118>)
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <SystemInit+0x10c>)
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x11c>)
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <SystemInit+0x10c>)
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <SystemInit+0x11c>)
 8000734:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <SystemInit+0x10c>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <SystemInit+0x10c>)
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <SystemInit+0x11c>)
 8000740:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <SystemInit+0x10c>)
 8000744:	2200      	movs	r2, #0
 8000746:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <SystemInit+0x10c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <SystemInit+0x10c>)
 800074e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000752:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x10c>)
 8000756:	2200      	movs	r2, #0
 8000758:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <SystemInit+0x120>)
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <SystemInit+0x120>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <SystemInit+0x124>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x128>)
 800076c:	4013      	ands	r3, r2
 800076e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000772:	d202      	bcs.n	800077a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x12c>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x130>)
 800077c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000780:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SystemInit+0x104>)
 8000784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000788:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	52002000 	.word	0x52002000
 800079c:	58024400 	.word	0x58024400
 80007a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a4:	02020200 	.word	0x02020200
 80007a8:	01ff0000 	.word	0x01ff0000
 80007ac:	01010280 	.word	0x01010280
 80007b0:	580000c0 	.word	0x580000c0
 80007b4:	5c001000 	.word	0x5c001000
 80007b8:	ffff0000 	.word	0xffff0000
 80007bc:	51008108 	.word	0x51008108
 80007c0:	52004000 	.word	0x52004000

080007c4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_CRC_Init+0x3c>)
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <MX_CRC_Init+0x40>)
 80007cc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_CRC_Init+0x3c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_CRC_Init+0x3c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_CRC_Init+0x3c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_CRC_Init+0x3c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_CRC_Init+0x3c>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_CRC_Init+0x3c>)
 80007ee:	f002 f989 	bl	8002b04 <HAL_CRC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007f8:	f000 fce4 	bl	80011c4 <Error_Handler>
  }

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20005eec 	.word	0x20005eec
 8000804:	58024c00 	.word	0x58024c00

08000808 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <HAL_CRC_MspInit+0x3c>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d10e      	bne.n	8000838 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_CRC_MspInit+0x40>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000820:	4a09      	ldr	r2, [pc, #36]	; (8000848 <HAL_CRC_MspInit+0x40>)
 8000822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <HAL_CRC_MspInit+0x40>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	58024c00 	.word	0x58024c00
 8000848:	58024400 	.word	0x58024400

0800084c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000852:	4b41      	ldr	r3, [pc, #260]	; (8000958 <MX_DMA_Init+0x10c>)
 8000854:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000858:	4a3f      	ldr	r2, [pc, #252]	; (8000958 <MX_DMA_Init+0x10c>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000862:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <MX_DMA_Init+0x10c>)
 8000864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000870:	4b39      	ldr	r3, [pc, #228]	; (8000958 <MX_DMA_Init+0x10c>)
 8000872:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000876:	4a38      	ldr	r2, [pc, #224]	; (8000958 <MX_DMA_Init+0x10c>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000880:	4b35      	ldr	r3, [pc, #212]	; (8000958 <MX_DMA_Init+0x10c>)
 8000882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	200d      	movs	r0, #13
 8000894:	f002 f882 	bl	800299c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000898:	200d      	movs	r0, #13
 800089a:	f002 f899 	bl	80029d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	200e      	movs	r0, #14
 80008a4:	f002 f87a 	bl	800299c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008a8:	200e      	movs	r0, #14
 80008aa:	f002 f891 	bl	80029d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	200f      	movs	r0, #15
 80008b4:	f002 f872 	bl	800299c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80008b8:	200f      	movs	r0, #15
 80008ba:	f002 f889 	bl	80029d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	2010      	movs	r0, #16
 80008c4:	f002 f86a 	bl	800299c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008c8:	2010      	movs	r0, #16
 80008ca:	f002 f881 	bl	80029d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	2011      	movs	r0, #17
 80008d4:	f002 f862 	bl	800299c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008d8:	2011      	movs	r0, #17
 80008da:	f002 f879 	bl	80029d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2105      	movs	r1, #5
 80008e2:	202f      	movs	r0, #47	; 0x2f
 80008e4:	f002 f85a 	bl	800299c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80008e8:	202f      	movs	r0, #47	; 0x2f
 80008ea:	f002 f871 	bl	80029d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2105      	movs	r1, #5
 80008f2:	2038      	movs	r0, #56	; 0x38
 80008f4:	f002 f852 	bl	800299c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008f8:	2038      	movs	r0, #56	; 0x38
 80008fa:	f002 f869 	bl	80029d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2105      	movs	r1, #5
 8000902:	2039      	movs	r0, #57	; 0x39
 8000904:	f002 f84a 	bl	800299c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000908:	2039      	movs	r0, #57	; 0x39
 800090a:	f002 f861 	bl	80029d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2105      	movs	r1, #5
 8000912:	203c      	movs	r0, #60	; 0x3c
 8000914:	f002 f842 	bl	800299c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000918:	203c      	movs	r0, #60	; 0x3c
 800091a:	f002 f859 	bl	80029d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2105      	movs	r1, #5
 8000922:	2044      	movs	r0, #68	; 0x44
 8000924:	f002 f83a 	bl	800299c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000928:	2044      	movs	r0, #68	; 0x44
 800092a:	f002 f851 	bl	80029d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2105      	movs	r1, #5
 8000932:	2045      	movs	r0, #69	; 0x45
 8000934:	f002 f832 	bl	800299c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000938:	2045      	movs	r0, #69	; 0x45
 800093a:	f002 f849 	bl	80029d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2105      	movs	r1, #5
 8000942:	2046      	movs	r0, #70	; 0x46
 8000944:	f002 f82a 	bl	800299c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000948:	2046      	movs	r0, #70	; 0x46
 800094a:	f002 f841 	bl	80029d0 <HAL_NVIC_EnableIRQ>

}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	58024400 	.word	0x58024400

0800095c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* Create the thread(s) */
  /* creation of watchdog */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initCortexM7();
 8000960:	f00c fab6 	bl	800ced0 <initCortexM7>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	; 0x24
 800096c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096e:	4b3f      	ldr	r3, [pc, #252]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000974:	4a3d      	ldr	r2, [pc, #244]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800097e:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000984:	f003 0310 	and.w	r3, r3, #16
 8000988:	61fb      	str	r3, [r7, #28]
 800098a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098c:	4b37      	ldr	r3, [pc, #220]	; (8000a6c <MX_GPIO_Init+0x104>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000992:	4a36      	ldr	r2, [pc, #216]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099c:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <MX_GPIO_Init+0x104>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a2:	f003 0320 	and.w	r3, r3, #32
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	4b30      	ldr	r3, [pc, #192]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b0:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c8:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ce:	4a27      	ldr	r2, [pc, #156]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	4a1f      	ldr	r2, [pc, #124]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_GPIO_Init+0x104>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0a:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a28:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

}
 8000a5e:	bf00      	nop
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	58024400 	.word	0x58024400

08000a70 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a76:	4a1d      	ldr	r2, [pc, #116]	; (8000aec <MX_I2C1_Init+0x7c>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401242;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a7c:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <MX_I2C1_Init+0x80>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aaa:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000aac:	f004 fb32 	bl	8005114 <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 fb85 	bl	80011c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000abe:	f004 fbb9 	bl	8005234 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 fb7c 	bl	80011c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000ad0:	f004 fbfb 	bl	80052ca <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fb73 	bl	80011c4 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f004 fc40 	bl	8005364 <HAL_I2CEx_EnableFastModePlus>

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20005f5c 	.word	0x20005f5c
 8000aec:	40005400 	.word	0x40005400
 8000af0:	00401242 	.word	0x00401242

08000af4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000afa:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <MX_I2C2_Init+0x78>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b00:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <MX_I2C2_Init+0x7c>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b2e:	480e      	ldr	r0, [pc, #56]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b30:	f004 faf0 	bl	8005114 <HAL_I2C_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b3a:	f000 fb43 	bl	80011c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b42:	f004 fb77 	bl	8005234 <HAL_I2CEx_ConfigAnalogFilter>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b4c:	f000 fb3a 	bl	80011c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b50:	2100      	movs	r1, #0
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b54:	f004 fbb9 	bl	80052ca <HAL_I2CEx_ConfigDigitalFilter>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b5e:	f000 fb31 	bl	80011c4 <Error_Handler>
  }

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20005fa8 	.word	0x20005fa8
 8000b6c:	40005800 	.word	0x40005800
 8000b70:	10c0ecff 	.word	0x10c0ecff

08000b74 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <MX_I2C3_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <MX_I2C3_Init+0x7c>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bae:	480e      	ldr	r0, [pc, #56]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000bb0:	f004 fab0 	bl	8005114 <HAL_I2C_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000bba:	f000 fb03 	bl	80011c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000bc2:	f004 fb37 	bl	8005234 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000bcc:	f000 fafa 	bl	80011c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_I2C3_Init+0x74>)
 8000bd4:	f004 fb79 	bl	80052ca <HAL_I2CEx_ConfigDigitalFilter>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000bde:	f000 faf1 	bl	80011c4 <Error_Handler>
  }

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20005f10 	.word	0x20005f10
 8000bec:	40005c00 	.word	0x40005c00
 8000bf0:	10c0ecff 	.word	0x10c0ecff

08000bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a4f      	ldr	r2, [pc, #316]	; (8000d50 <HAL_I2C_MspInit+0x15c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d10f      	bne.n	8000c36 <HAL_I2C_MspInit+0x42>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c16:	4b4f      	ldr	r3, [pc, #316]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	4a4d      	ldr	r2, [pc, #308]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c26:	4b4b      	ldr	r3, [pc, #300]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c30:	623b      	str	r3, [r7, #32]
 8000c32:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c34:	e088      	b.n	8000d48 <HAL_I2C_MspInit+0x154>
  else if(i2cHandle->Instance==I2C2)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a47      	ldr	r2, [pc, #284]	; (8000d58 <HAL_I2C_MspInit+0x164>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d12f      	bne.n	8000ca0 <HAL_I2C_MspInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c40:	4b44      	ldr	r3, [pc, #272]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a43      	ldr	r2, [pc, #268]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b40      	ldr	r3, [pc, #256]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c64:	2312      	movs	r3, #18
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c70:	2304      	movs	r3, #4
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4838      	ldr	r0, [pc, #224]	; (8000d5c <HAL_I2C_MspInit+0x168>)
 8000c7c:	f004 f86c 	bl	8004d58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c80:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c86:	4a33      	ldr	r2, [pc, #204]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c90:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000c92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
}
 8000c9e:	e053      	b.n	8000d48 <HAL_I2C_MspInit+0x154>
  else if(i2cHandle->Instance==I2C3)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a2e      	ldr	r2, [pc, #184]	; (8000d60 <HAL_I2C_MspInit+0x16c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d14e      	bne.n	8000d48 <HAL_I2C_MspInit+0x154>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	4a28      	ldr	r2, [pc, #160]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cba:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cec:	2312      	movs	r3, #18
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	4818      	ldr	r0, [pc, #96]	; (8000d64 <HAL_I2C_MspInit+0x170>)
 8000d04:	f004 f828 	bl	8004d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0e:	2312      	movs	r3, #18
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	4810      	ldr	r0, [pc, #64]	; (8000d68 <HAL_I2C_MspInit+0x174>)
 8000d26:	f004 f817 	bl	8004d58 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d30:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000d32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_I2C_MspInit+0x160>)
 8000d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3738      	adds	r7, #56	; 0x38
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40005400 	.word	0x40005400
 8000d54:	58024400 	.word	0x58024400
 8000d58:	40005800 	.word	0x40005800
 8000d5c:	58020400 	.word	0x58020400
 8000d60:	40005c00 	.word	0x40005c00
 8000d64:	58020800 	.word	0x58020800
 8000d68:	58020000 	.word	0x58020000

08000d6c <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  hiwdg1.Instance = IWDG1;
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_IWDG1_Init+0x34>)
 8000d72:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <MX_IWDG1_Init+0x38>)
 8000d74:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <MX_IWDG1_Init+0x34>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_IWDG1_Init+0x34>)
 8000d7e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d82:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 4095;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_IWDG1_Init+0x34>)
 8000d86:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d8a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_IWDG1_Init+0x34>)
 8000d8e:	f004 fb0d 	bl	80053ac <HAL_IWDG_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8000d98:	f000 fa14 	bl	80011c4 <Error_Handler>
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20005ff4 	.word	0x20005ff4
 8000da4:	58004800 	.word	0x58004800

08000da8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000db0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <SCB_EnableICache+0x3c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000dbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dc0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <SCB_EnableICache+0x3c>)
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <SCB_EnableICache+0x3c>)
 8000dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dd4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <SCB_EnableDCache+0x7c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000df6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <SCB_EnableDCache+0x7c>)
 8000dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e00:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0b5b      	lsrs	r3, r3, #13
 8000e06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e0a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	08db      	lsrs	r3, r3, #3
 8000e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e14:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	015a      	lsls	r2, r3, #5
 8000e1a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e1e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e24:	490f      	ldr	r1, [pc, #60]	; (8000e64 <SCB_EnableDCache+0x7c>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1e5a      	subs	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1ef      	bne.n	8000e16 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	1e5a      	subs	r2, r3, #1
 8000e3a:	60fa      	str	r2, [r7, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1e5      	bne.n	8000e0c <SCB_EnableDCache+0x24>
 8000e40:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <SCB_EnableDCache+0x7c>)
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <SCB_EnableDCache+0x7c>)
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4e:	6153      	str	r3, [r2, #20]
 8000e50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e54:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e6e:	f000 f94f 	bl	8001110 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000e72:	f7ff ff99 	bl	8000da8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000e76:	f7ff ffb7 	bl	8000de8 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e80:	bf00      	nop
 8000e82:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <main+0xe8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d004      	beq.n	8000e98 <main+0x30>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	1e5a      	subs	r2, r3, #1
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	dcf4      	bgt.n	8000e82 <main+0x1a>
  if ( timeout < 0 )
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da01      	bge.n	8000ea2 <main+0x3a>
  {
  Error_Handler();
 8000e9e:	f000 f991 	bl	80011c4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea2:	f001 fc5b 	bl	800275c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea6:	f000 f855 	bl	8000f54 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <main+0xe8>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <main+0xe8>)
 8000eb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <main+0xe8>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f004 f8f5 	bl	80050b8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f004 f90b 	bl	80050ec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eda:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000edc:	bf00      	nop
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <main+0xe8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d104      	bne.n	8000ef4 <main+0x8c>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	1e5a      	subs	r2, r3, #1
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dcf4      	bgt.n	8000ede <main+0x76>
if ( timeout < 0 )
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	da01      	bge.n	8000efe <main+0x96>
{
Error_Handler();
 8000efa:	f000 f963 	bl	80011c4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f7ff fd33 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f02:	f7ff fca3 	bl	800084c <MX_DMA_Init>
  MX_CRC_Init();
 8000f06:	f7ff fc5d 	bl	80007c4 <MX_CRC_Init>
  MX_I2C1_Init();
 8000f0a:	f7ff fdb1 	bl	8000a70 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f0e:	f7ff fdf1 	bl	8000af4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000f12:	f7ff fe2f 	bl	8000b74 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 8000f16:	f000 f959 	bl	80011cc <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000f1a:	f000 fa85 	bl	8001428 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000f1e:	f000 fad9 	bl	80014d4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000f22:	f000 fb2d 	bl	8001580 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000f26:	f000 fb81 	bl	800162c <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000f2a:	f001 f837 	bl	8001f9c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f2e:	f001 f881 	bl	8002034 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f32:	f001 f8cb 	bl	80020cc <MX_USART3_UART_Init>
  MX_IWDG1_Init();
 8000f36:	f7ff ff19 	bl	8000d6c <MX_IWDG1_Init>
  MX_USART6_UART_Init();
 8000f3a:	f001 f913 	bl	8002164 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000f3e:	f000 fa31 	bl	80013a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f42:	f008 ff23 	bl	8009d8c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f46:	f7ff fd09 	bl	800095c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000f4a:	f008 ff53 	bl	8009df4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <main+0xe6>
 8000f50:	58024400 	.word	0x58024400

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b0cc      	sub	sp, #304	; 0x130
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f5e:	224c      	movs	r2, #76	; 0x4c
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00c f8ce 	bl	800d104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f00c f8c7 	bl	800d104 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	23bc      	movs	r3, #188	; 0xbc
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2100      	movs	r1, #0
 8000f82:	f00c f8bf 	bl	800d104 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f86:	2004      	movs	r0, #4
 8000f88:	f004 fa66 	bl	8005458 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	4b5c      	ldr	r3, [pc, #368]	; (8001104 <SystemClock_Config+0x1b0>)
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	4a5b      	ldr	r2, [pc, #364]	; (8001104 <SystemClock_Config+0x1b0>)
 8000f98:	f023 0301 	bic.w	r3, r3, #1
 8000f9c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f9e:	4b59      	ldr	r3, [pc, #356]	; (8001104 <SystemClock_Config+0x1b0>)
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <SystemClock_Config+0x1b4>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a56      	ldr	r2, [pc, #344]	; (8001108 <SystemClock_Config+0x1b4>)
 8000fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b54      	ldr	r3, [pc, #336]	; (8001108 <SystemClock_Config+0x1b4>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fc6:	bf00      	nop
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <SystemClock_Config+0x1b4>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fd4:	d1f8      	bne.n	8000fc8 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000fd6:	230b      	movs	r3, #11
 8000fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fea:	2340      	movs	r3, #64	; 0x40
 8000fec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001008:	2340      	movs	r3, #64	; 0x40
 800100a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800100e:	2302      	movs	r3, #2
 8001010:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001020:	230c      	movs	r3, #12
 8001022:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001036:	4618      	mov	r0, r3
 8001038:	f004 fb22 	bl	8005680 <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001042:	f000 f8bf 	bl	80011c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	233f      	movs	r3, #63	; 0x3f
 8001048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104c:	2303      	movs	r3, #3
 800104e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001058:	2308      	movs	r3, #8
 800105a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800105e:	2340      	movs	r3, #64	; 0x40
 8001060:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001064:	2340      	movs	r3, #64	; 0x40
 8001066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800106a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001072:	2340      	movs	r3, #64	; 0x40
 8001074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001078:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f004 ff0e 	bl	8005ea0 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x13a>
  {
    Error_Handler();
 800108a:	f000 f89b 	bl	80011c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	4a1e      	ldr	r2, [pc, #120]	; (800110c <SystemClock_Config+0x1b8>)
 8001094:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_QSPI;
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2200      	movs	r2, #0
 800109c:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	2200      	movs	r2, #0
 80010a4:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2200      	movs	r2, #0
 80010ac:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	2200      	movs	r2, #0
 80010b4:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	2203      	movs	r2, #3
 80010bc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	2218      	movs	r2, #24
 80010c4:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	2200      	movs	r2, #0
 80010d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 fa9e 	bl	800662c <HAL_RCCEx_PeriphCLKConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x1a6>
  {
    Error_Handler();
 80010f6:	f000 f865 	bl	80011c4 <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	58000400 	.word	0x58000400
 8001108:	58024800 	.word	0x58024800
 800110c:	0240b01b 	.word	0x0240b01b

08001110 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001122:	f001 fc63 	bl	80029ec <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001126:	2301      	movs	r3, #1
 8001128:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800112a:	2300      	movs	r3, #0
 800112c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MPU_Config+0x8c>)
 8001130:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001132:	230e      	movs	r3, #14
 8001134:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001136:	2300      	movs	r3, #0
 8001138:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800113a:	2301      	movs	r3, #1
 800113c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800113e:	2303      	movs	r3, #3
 8001140:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001142:	2301      	movs	r3, #1
 8001144:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001152:	463b      	mov	r3, r7
 8001154:	4618      	mov	r0, r3
 8001156:	f001 fc7d 	bl	8002a54 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800115a:	2301      	movs	r3, #1
 800115c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800115e:	2301      	movs	r3, #1
 8001160:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MPU_Config+0x8c>)
 8001164:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001166:	2307      	movs	r3, #7
 8001168:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800116a:	2300      	movs	r3, #0
 800116c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800116e:	2300      	movs	r3, #0
 8001170:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001172:	2303      	movs	r3, #3
 8001174:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001176:	2301      	movs	r3, #1
 8001178:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800117a:	2301      	movs	r3, #1
 800117c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001186:	463b      	mov	r3, r7
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fc63 	bl	8002a54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800118e:	2004      	movs	r0, #4
 8001190:	f001 fc42 	bl	8002a18 <HAL_MPU_Enable>

}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	30040000 	.word	0x30040000

080011a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011b2:	f001 fb0f 	bl	80027d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40001400 	.word	0x40001400

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ca:	e7fe      	b.n	80011ca <Error_Handler+0x6>

080011cc <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011d2:	4a13      	ldr	r2, [pc, #76]	; (8001220 <MX_QUADSPI_Init+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011d8:	22ff      	movs	r2, #255	; 0xff
 80011da:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011de:	2201      	movs	r2, #1
 80011e0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_QUADSPI_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_QUADSPI_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_QUADSPI_Init+0x50>)
 8001208:	f004 f980 	bl	800550c <HAL_QSPI_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001212:	f7ff ffd7 	bl	80011c4 <Error_Handler>
  }

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20006004 	.word	0x20006004
 8001220:	52005000 	.word	0x52005000

08001224 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_QSPI_MspInit+0x168>)
 8001242:	4293      	cmp	r3, r2
 8001244:	f040 809e 	bne.w	8001384 <HAL_QSPI_MspInit+0x160>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001248:	4b51      	ldr	r3, [pc, #324]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 800124a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800124e:	4a50      	ldr	r2, [pc, #320]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001258:	4b4d      	ldr	r3, [pc, #308]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 800125a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4a48      	ldr	r2, [pc, #288]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b46      	ldr	r3, [pc, #280]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001284:	4b42      	ldr	r3, [pc, #264]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	4a41      	ldr	r2, [pc, #260]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 800128c:	f043 0320 	orr.w	r3, r3, #32
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001294:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	4a39      	ldr	r2, [pc, #228]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c0:	4b33      	ldr	r3, [pc, #204]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	4a32      	ldr	r2, [pc, #200]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 80012c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d0:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <HAL_QSPI_MspInit+0x16c>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012de:	2304      	movs	r3, #4
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012ee:	2309      	movs	r3, #9
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4826      	ldr	r0, [pc, #152]	; (8001394 <HAL_QSPI_MspInit+0x170>)
 80012fa:	f003 fd2d 	bl	8004d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80012fe:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001310:	2309      	movs	r3, #9
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	481f      	ldr	r0, [pc, #124]	; (8001398 <HAL_QSPI_MspInit+0x174>)
 800131c:	f003 fd1c 	bl	8004d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001332:	230a      	movs	r3, #10
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4619      	mov	r1, r3
 800133c:	4816      	ldr	r0, [pc, #88]	; (8001398 <HAL_QSPI_MspInit+0x174>)
 800133e:	f003 fd0b 	bl	8004d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001354:	2309      	movs	r3, #9
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	4619      	mov	r1, r3
 800135e:	480f      	ldr	r0, [pc, #60]	; (800139c <HAL_QSPI_MspInit+0x178>)
 8001360:	f003 fcfa 	bl	8004d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001364:	2340      	movs	r3, #64	; 0x40
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001374:	230a      	movs	r3, #10
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	4808      	ldr	r0, [pc, #32]	; (80013a0 <HAL_QSPI_MspInit+0x17c>)
 8001380:	f003 fcea 	bl	8004d58 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	; 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	52005000 	.word	0x52005000
 8001390:	58024400 	.word	0x58024400
 8001394:	58021000 	.word	0x58021000
 8001398:	58021400 	.word	0x58021400
 800139c:	58020c00 	.word	0x58020c00
 80013a0:	58021800 	.word	0x58021800

080013a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_RTC_Init+0x48>)
 80013aa:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <MX_RTC_Init+0x4c>)
 80013ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_RTC_Init+0x48>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_RTC_Init+0x48>)
 80013b6:	227f      	movs	r2, #127	; 0x7f
 80013b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_RTC_Init+0x48>)
 80013bc:	22ff      	movs	r2, #255	; 0xff
 80013be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <MX_RTC_Init+0x48>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_RTC_Init+0x48>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <MX_RTC_Init+0x48>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_RTC_Init+0x48>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_RTC_Init+0x48>)
 80013da:	f006 fc27 	bl	8007c2c <HAL_RTC_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80013e4:	f7ff feee 	bl	80011c4 <Error_Handler>
  }

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20006050 	.word	0x20006050
 80013f0:	58004000 	.word	0x58004000

080013f4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <HAL_RTC_MspInit+0x2c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d105      	bne.n	8001412 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <HAL_RTC_MspInit+0x30>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_RTC_MspInit+0x30>)
 800140c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	58004000 	.word	0x58004000
 8001424:	58024400 	.word	0x58024400

08001428 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <MX_SPI1_Init+0xa4>)
 800142e:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <MX_SPI1_Init+0xa8>)
 8001430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001434:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800143a:	4b24      	ldr	r3, [pc, #144]	; (80014cc <MX_SPI1_Init+0xa4>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001442:	2203      	movs	r2, #3
 8001444:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <MX_SPI1_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001454:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001458:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_SPI1_Init+0xa4>)
 800145c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001460:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_SPI1_Init+0xa4>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001470:	2200      	movs	r2, #0
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001476:	2200      	movs	r2, #0
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_SPI1_Init+0xa4>)
 800147c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001484:	2200      	movs	r2, #0
 8001486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_SPI1_Init+0xa4>)
 800148a:	2200      	movs	r2, #0
 800148c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <MX_SPI1_Init+0xa4>)
 8001496:	2200      	movs	r2, #0
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_SPI1_Init+0xa4>)
 800149c:	2200      	movs	r2, #0
 800149e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <MX_SPI1_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_SPI1_Init+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <MX_SPI1_Init+0xa4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_SPI1_Init+0xa4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_SPI1_Init+0xa4>)
 80014ba:	f006 fcc3 	bl	8007e44 <HAL_SPI_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80014c4:	f7ff fe7e 	bl	80011c4 <Error_Handler>
  }

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200063ec 	.word	0x200063ec
 80014d0:	40013000 	.word	0x40013000

080014d4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <MX_SPI2_Init+0xa4>)
 80014da:	4a28      	ldr	r2, [pc, #160]	; (800157c <MX_SPI2_Init+0xa8>)
 80014dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <MX_SPI2_Init+0xa4>)
 80014e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <MX_SPI2_Init+0xa4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MX_SPI2_Init+0xa4>)
 80014ee:	2203      	movs	r2, #3
 80014f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_SPI2_Init+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_SPI2_Init+0xa4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001500:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001504:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800150c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_SPI2_Init+0xa4>)
 800151c:	2200      	movs	r2, #0
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001522:	2200      	movs	r2, #0
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001530:	2200      	movs	r2, #0
 8001532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001536:	2200      	movs	r2, #0
 8001538:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_SPI2_Init+0xa4>)
 800153c:	2200      	movs	r2, #0
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001542:	2200      	movs	r2, #0
 8001544:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001548:	2200      	movs	r2, #0
 800154a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <MX_SPI2_Init+0xa4>)
 800154e:	2200      	movs	r2, #0
 8001550:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001554:	2200      	movs	r2, #0
 8001556:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <MX_SPI2_Init+0xa4>)
 800155a:	2200      	movs	r2, #0
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001560:	2200      	movs	r2, #0
 8001562:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_SPI2_Init+0xa4>)
 8001566:	f006 fc6d 	bl	8007e44 <HAL_SPI_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001570:	f7ff fe28 	bl	80011c4 <Error_Handler>
  }

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20006074 	.word	0x20006074
 800157c:	40003800 	.word	0x40003800

08001580 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <MX_SPI3_Init+0xa4>)
 8001586:	4a28      	ldr	r2, [pc, #160]	; (8001628 <MX_SPI3_Init+0xa8>)
 8001588:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <MX_SPI3_Init+0xa4>)
 800158c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001590:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <MX_SPI3_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <MX_SPI3_Init+0xa4>)
 800159a:	2203      	movs	r2, #3
 800159c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015b0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_SPI3_Init+0xa4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_SPI3_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_SPI3_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_SPI3_Init+0xa4>)
 800160c:	2200      	movs	r2, #0
 800160e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_SPI3_Init+0xa4>)
 8001612:	f006 fc17 	bl	8007e44 <HAL_SPI_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800161c:	f7ff fdd2 	bl	80011c4 <Error_Handler>
  }

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200061ec 	.word	0x200061ec
 8001628:	40003c00 	.word	0x40003c00

0800162c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001632:	4a28      	ldr	r2, [pc, #160]	; (80016d4 <MX_SPI4_Init+0xa8>)
 8001634:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001638:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800163c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001646:	2203      	movs	r2, #3
 8001648:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <MX_SPI4_Init+0xa4>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001658:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800165c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001660:	2200      	movs	r2, #0
 8001662:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001666:	2200      	movs	r2, #0
 8001668:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <MX_SPI4_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_SPI4_Init+0xa4>)
 800167e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001682:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001686:	2200      	movs	r2, #0
 8001688:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_SPI4_Init+0xa4>)
 800168c:	2200      	movs	r2, #0
 800168e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001692:	2200      	movs	r2, #0
 8001694:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_SPI4_Init+0xa4>)
 8001698:	2200      	movs	r2, #0
 800169a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_SPI4_Init+0xa4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_SPI4_Init+0xa4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_SPI4_Init+0xa4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_SPI4_Init+0xa4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_SPI4_Init+0xa4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_SPI4_Init+0xa4>)
 80016bc:	f006 fbc2 	bl	8007e44 <HAL_SPI_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80016c6:	f7ff fd7d 	bl	80011c4 <Error_Handler>
  }

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20006364 	.word	0x20006364
 80016d4:	40013400 	.word	0x40013400

080016d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b090      	sub	sp, #64	; 0x40
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a93      	ldr	r2, [pc, #588]	; (8001944 <HAL_SPI_MspInit+0x26c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d16b      	bne.n	80017d2 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fa:	4b93      	ldr	r3, [pc, #588]	; (8001948 <HAL_SPI_MspInit+0x270>)
 80016fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001700:	4a91      	ldr	r2, [pc, #580]	; (8001948 <HAL_SPI_MspInit+0x270>)
 8001702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001706:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800170a:	4b8f      	ldr	r3, [pc, #572]	; (8001948 <HAL_SPI_MspInit+0x270>)
 800170c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
 8001716:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001718:	4b8c      	ldr	r3, [pc, #560]	; (800194c <HAL_SPI_MspInit+0x274>)
 800171a:	4a8d      	ldr	r2, [pc, #564]	; (8001950 <HAL_SPI_MspInit+0x278>)
 800171c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800171e:	4b8b      	ldr	r3, [pc, #556]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001720:	2225      	movs	r2, #37	; 0x25
 8001722:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001724:	4b89      	ldr	r3, [pc, #548]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800172a:	4b88      	ldr	r3, [pc, #544]	; (800194c <HAL_SPI_MspInit+0x274>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001730:	4b86      	ldr	r3, [pc, #536]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001736:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001738:	4b84      	ldr	r3, [pc, #528]	; (800194c <HAL_SPI_MspInit+0x274>)
 800173a:	2200      	movs	r2, #0
 800173c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800173e:	4b83      	ldr	r3, [pc, #524]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001744:	4b81      	ldr	r3, [pc, #516]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800174a:	4b80      	ldr	r3, [pc, #512]	; (800194c <HAL_SPI_MspInit+0x274>)
 800174c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001750:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001752:	4b7e      	ldr	r3, [pc, #504]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001754:	2200      	movs	r2, #0
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001758:	487c      	ldr	r0, [pc, #496]	; (800194c <HAL_SPI_MspInit+0x274>)
 800175a:	f001 fabd 	bl	8002cd8 <HAL_DMA_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_SPI_MspInit+0x90>
    {
      Error_Handler();
 8001764:	f7ff fd2e 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a78      	ldr	r2, [pc, #480]	; (800194c <HAL_SPI_MspInit+0x274>)
 800176c:	67da      	str	r2, [r3, #124]	; 0x7c
 800176e:	4a77      	ldr	r2, [pc, #476]	; (800194c <HAL_SPI_MspInit+0x274>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8001774:	4b77      	ldr	r3, [pc, #476]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 8001776:	4a78      	ldr	r2, [pc, #480]	; (8001958 <HAL_SPI_MspInit+0x280>)
 8001778:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800177a:	4b76      	ldr	r3, [pc, #472]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 800177c:	2226      	movs	r2, #38	; 0x26
 800177e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001780:	4b74      	ldr	r3, [pc, #464]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 8001782:	2240      	movs	r2, #64	; 0x40
 8001784:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001786:	4b73      	ldr	r3, [pc, #460]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800178c:	4b71      	ldr	r3, [pc, #452]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 800178e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001792:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001794:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 8001796:	2200      	movs	r2, #0
 8001798:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179a:	4b6e      	ldr	r3, [pc, #440]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017a0:	4b6c      	ldr	r3, [pc, #432]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017a6:	4b6b      	ldr	r3, [pc, #428]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 80017a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017ac:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ae:	4b69      	ldr	r3, [pc, #420]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017b4:	4867      	ldr	r0, [pc, #412]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 80017b6:	f001 fa8f 	bl	8002cd8 <HAL_DMA_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 80017c0:	f7ff fd00 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a63      	ldr	r2, [pc, #396]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 80017c8:	679a      	str	r2, [r3, #120]	; 0x78
 80017ca:	4a62      	ldr	r2, [pc, #392]	; (8001954 <HAL_SPI_MspInit+0x27c>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80017d0:	e222      	b.n	8001c18 <HAL_SPI_MspInit+0x540>
  else if(spiHandle->Instance==SPI2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a61      	ldr	r2, [pc, #388]	; (800195c <HAL_SPI_MspInit+0x284>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	f040 80cd 	bne.w	8001978 <HAL_SPI_MspInit+0x2a0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017de:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_SPI_MspInit+0x270>)
 80017e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017e4:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_SPI_MspInit+0x270>)
 80017e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017ee:	4b56      	ldr	r3, [pc, #344]	; (8001948 <HAL_SPI_MspInit+0x270>)
 80017f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fc:	4b52      	ldr	r3, [pc, #328]	; (8001948 <HAL_SPI_MspInit+0x270>)
 80017fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001802:	4a51      	ldr	r2, [pc, #324]	; (8001948 <HAL_SPI_MspInit+0x270>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800180c:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <HAL_SPI_MspInit+0x270>)
 800180e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	623b      	str	r3, [r7, #32]
 8001818:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b4b      	ldr	r3, [pc, #300]	; (8001948 <HAL_SPI_MspInit+0x270>)
 800181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001820:	4a49      	ldr	r2, [pc, #292]	; (8001948 <HAL_SPI_MspInit+0x270>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_SPI_MspInit+0x270>)
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001838:	230c      	movs	r3, #12
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001848:	2305      	movs	r3, #5
 800184a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001850:	4619      	mov	r1, r3
 8001852:	4843      	ldr	r0, [pc, #268]	; (8001960 <HAL_SPI_MspInit+0x288>)
 8001854:	f003 fa80 	bl	8004d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800186a:	2305      	movs	r3, #5
 800186c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001872:	4619      	mov	r1, r3
 8001874:	483b      	ldr	r0, [pc, #236]	; (8001964 <HAL_SPI_MspInit+0x28c>)
 8001876:	f003 fa6f 	bl	8004d58 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream2;
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <HAL_SPI_MspInit+0x290>)
 800187c:	4a3b      	ldr	r2, [pc, #236]	; (800196c <HAL_SPI_MspInit+0x294>)
 800187e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_SPI_MspInit+0x290>)
 8001882:	2227      	movs	r2, #39	; 0x27
 8001884:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_SPI_MspInit+0x290>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_SPI_MspInit+0x290>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001892:	4b35      	ldr	r3, [pc, #212]	; (8001968 <HAL_SPI_MspInit+0x290>)
 8001894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001898:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800189a:	4b33      	ldr	r3, [pc, #204]	; (8001968 <HAL_SPI_MspInit+0x290>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a0:	4b31      	ldr	r3, [pc, #196]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80018ac:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018b2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b4:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80018ba:	482b      	ldr	r0, [pc, #172]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018bc:	f001 fa0c 	bl	8002cd8 <HAL_DMA_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_SPI_MspInit+0x1f2>
      Error_Handler();
 80018c6:	f7ff fc7d 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a26      	ldr	r2, [pc, #152]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80018d0:	4a25      	ldr	r2, [pc, #148]	; (8001968 <HAL_SPI_MspInit+0x290>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream3;
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018d8:	4a26      	ldr	r2, [pc, #152]	; (8001974 <HAL_SPI_MspInit+0x29c>)
 80018da:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018de:	2228      	movs	r2, #40	; 0x28
 80018e0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018e2:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018e4:	2240      	movs	r2, #64	; 0x40
 80018e6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018f4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_SPI_MspInit+0x298>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_SPI_MspInit+0x298>)
 8001904:	2200      	movs	r2, #0
 8001906:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_SPI_MspInit+0x298>)
 800190a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800190e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_SPI_MspInit+0x298>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001916:	4816      	ldr	r0, [pc, #88]	; (8001970 <HAL_SPI_MspInit+0x298>)
 8001918:	f001 f9de 	bl	8002cd8 <HAL_DMA_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_SPI_MspInit+0x24e>
      Error_Handler();
 8001922:	f7ff fc4f 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a11      	ldr	r2, [pc, #68]	; (8001970 <HAL_SPI_MspInit+0x298>)
 800192a:	679a      	str	r2, [r3, #120]	; 0x78
 800192c:	4a10      	ldr	r2, [pc, #64]	; (8001970 <HAL_SPI_MspInit+0x298>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2105      	movs	r1, #5
 8001936:	2024      	movs	r0, #36	; 0x24
 8001938:	f001 f830 	bl	800299c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800193c:	2024      	movs	r0, #36	; 0x24
 800193e:	f001 f847 	bl	80029d0 <HAL_NVIC_EnableIRQ>
}
 8001942:	e169      	b.n	8001c18 <HAL_SPI_MspInit+0x540>
 8001944:	40013000 	.word	0x40013000
 8001948:	58024400 	.word	0x58024400
 800194c:	20006474 	.word	0x20006474
 8001950:	40020010 	.word	0x40020010
 8001954:	20006564 	.word	0x20006564
 8001958:	40020028 	.word	0x40020028
 800195c:	40003800 	.word	0x40003800
 8001960:	58020800 	.word	0x58020800
 8001964:	58020000 	.word	0x58020000
 8001968:	200060fc 	.word	0x200060fc
 800196c:	40020040 	.word	0x40020040
 8001970:	200064ec 	.word	0x200064ec
 8001974:	40020058 	.word	0x40020058
  else if(spiHandle->Instance==SPI3)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4aa8      	ldr	r2, [pc, #672]	; (8001c20 <HAL_SPI_MspInit+0x548>)
 800197e:	4293      	cmp	r3, r2
 8001980:	f040 80b3 	bne.w	8001aea <HAL_SPI_MspInit+0x412>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001984:	4ba7      	ldr	r3, [pc, #668]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800198a:	4aa6      	ldr	r2, [pc, #664]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 800198c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001990:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001994:	4ba3      	ldr	r3, [pc, #652]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800199a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800199e:	61bb      	str	r3, [r7, #24]
 80019a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	4ba0      	ldr	r3, [pc, #640]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a8:	4a9e      	ldr	r2, [pc, #632]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b2:	4b9c      	ldr	r3, [pc, #624]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c0:	4b98      	ldr	r3, [pc, #608]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 80019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c6:	4a97      	ldr	r2, [pc, #604]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d0:	4b94      	ldr	r3, [pc, #592]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 80019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019de:	2304      	movs	r3, #4
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80019ee:	2307      	movs	r3, #7
 80019f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f6:	4619      	mov	r1, r3
 80019f8:	488b      	ldr	r0, [pc, #556]	; (8001c28 <HAL_SPI_MspInit+0x550>)
 80019fa:	f003 f9ad 	bl	8004d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a10:	2306      	movs	r3, #6
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4884      	ldr	r0, [pc, #528]	; (8001c2c <HAL_SPI_MspInit+0x554>)
 8001a1c:	f003 f99c 	bl	8004d58 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream4;
 8001a20:	4b83      	ldr	r3, [pc, #524]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a22:	4a84      	ldr	r2, [pc, #528]	; (8001c34 <HAL_SPI_MspInit+0x55c>)
 8001a24:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8001a26:	4b82      	ldr	r3, [pc, #520]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a28:	223d      	movs	r2, #61	; 0x3d
 8001a2a:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2c:	4b80      	ldr	r3, [pc, #512]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a32:	4b7f      	ldr	r3, [pc, #508]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a38:	4b7d      	ldr	r3, [pc, #500]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3e:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a40:	4b7b      	ldr	r3, [pc, #492]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a46:	4b7a      	ldr	r3, [pc, #488]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001a4c:	4b78      	ldr	r3, [pc, #480]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a52:	4b77      	ldr	r3, [pc, #476]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a58:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5a:	4b75      	ldr	r3, [pc, #468]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001a60:	4873      	ldr	r0, [pc, #460]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a62:	f001 f939 	bl	8002cd8 <HAL_DMA_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_SPI_MspInit+0x398>
      Error_Handler();
 8001a6c:	f7ff fbaa 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a6f      	ldr	r2, [pc, #444]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a74:	67da      	str	r2, [r3, #124]	; 0x7c
 8001a76:	4a6e      	ldr	r2, [pc, #440]	; (8001c30 <HAL_SPI_MspInit+0x558>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001a7c:	4b6e      	ldr	r3, [pc, #440]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001a7e:	4a6f      	ldr	r2, [pc, #444]	; (8001c3c <HAL_SPI_MspInit+0x564>)
 8001a80:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001a82:	4b6d      	ldr	r3, [pc, #436]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001a84:	223e      	movs	r2, #62	; 0x3e
 8001a86:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a88:	4b6b      	ldr	r3, [pc, #428]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001a8a:	2240      	movs	r2, #64	; 0x40
 8001a8c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a8e:	4b6a      	ldr	r3, [pc, #424]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a94:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a9a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a9c:	4b66      	ldr	r3, [pc, #408]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001aa8:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001aae:	4b62      	ldr	r3, [pc, #392]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001ab0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ab4:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ab6:	4b60      	ldr	r3, [pc, #384]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001abc:	485e      	ldr	r0, [pc, #376]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001abe:	f001 f90b 	bl	8002cd8 <HAL_DMA_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_SPI_MspInit+0x3f4>
      Error_Handler();
 8001ac8:	f7ff fb7c 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a5a      	ldr	r2, [pc, #360]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001ad0:	679a      	str	r2, [r3, #120]	; 0x78
 8001ad2:	4a59      	ldr	r2, [pc, #356]	; (8001c38 <HAL_SPI_MspInit+0x560>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2105      	movs	r1, #5
 8001adc:	2033      	movs	r0, #51	; 0x33
 8001ade:	f000 ff5d 	bl	800299c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001ae2:	2033      	movs	r0, #51	; 0x33
 8001ae4:	f000 ff74 	bl	80029d0 <HAL_NVIC_EnableIRQ>
}
 8001ae8:	e096      	b.n	8001c18 <HAL_SPI_MspInit+0x540>
  else if(spiHandle->Instance==SPI4)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a54      	ldr	r2, [pc, #336]	; (8001c40 <HAL_SPI_MspInit+0x568>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	f040 8091 	bne.w	8001c18 <HAL_SPI_MspInit+0x540>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001af6:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001afc:	4a49      	ldr	r2, [pc, #292]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001afe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b06:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b14:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1a:	4a42      	ldr	r2, [pc, #264]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001b1c:	f043 0310 	orr.w	r3, r3, #16
 8001b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b24:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_SPI_MspInit+0x54c>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8001b32:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b44:	2305      	movs	r3, #5
 8001b46:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	483d      	ldr	r0, [pc, #244]	; (8001c44 <HAL_SPI_MspInit+0x56c>)
 8001b50:	f003 f902 	bl	8004d58 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA1_Stream6;
 8001b54:	4b3c      	ldr	r3, [pc, #240]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b56:	4a3d      	ldr	r2, [pc, #244]	; (8001c4c <HAL_SPI_MspInit+0x574>)
 8001b58:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b5c:	2253      	movs	r2, #83	; 0x53
 8001b5e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b60:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b66:	4b38      	ldr	r3, [pc, #224]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b6c:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b72:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b7a:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001b80:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b86:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b8c:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001b92:	482d      	ldr	r0, [pc, #180]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001b94:	f001 f8a0 	bl	8002cd8 <HAL_DMA_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_SPI_MspInit+0x4ca>
      Error_Handler();
 8001b9e:	f7ff fb11 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a28      	ldr	r2, [pc, #160]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001ba6:	67da      	str	r2, [r3, #124]	; 0x7c
 8001ba8:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <HAL_SPI_MspInit+0x570>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA1_Stream7;
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bb0:	4a28      	ldr	r2, [pc, #160]	; (8001c54 <HAL_SPI_MspInit+0x57c>)
 8001bb2:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001bb4:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bb6:	2254      	movs	r2, #84	; 0x54
 8001bb8:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bba:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bbc:	2240      	movs	r2, #64	; 0x40
 8001bbe:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bcc:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001bec:	4818      	ldr	r0, [pc, #96]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001bee:	f001 f873 	bl	8002cd8 <HAL_DMA_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_SPI_MspInit+0x524>
      Error_Handler();
 8001bf8:	f7ff fae4 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001c00:	679a      	str	r2, [r3, #120]	; 0x78
 8001c02:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <HAL_SPI_MspInit+0x578>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2105      	movs	r1, #5
 8001c0c:	2054      	movs	r0, #84	; 0x54
 8001c0e:	f000 fec5 	bl	800299c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001c12:	2054      	movs	r0, #84	; 0x54
 8001c14:	f000 fedc 	bl	80029d0 <HAL_NVIC_EnableIRQ>
}
 8001c18:	bf00      	nop
 8001c1a:	3740      	adds	r7, #64	; 0x40
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40003c00 	.word	0x40003c00
 8001c24:	58024400 	.word	0x58024400
 8001c28:	58020400 	.word	0x58020400
 8001c2c:	58020800 	.word	0x58020800
 8001c30:	200065dc 	.word	0x200065dc
 8001c34:	40020070 	.word	0x40020070
 8001c38:	20006274 	.word	0x20006274
 8001c3c:	40020088 	.word	0x40020088
 8001c40:	40013400 	.word	0x40013400
 8001c44:	58021000 	.word	0x58021000
 8001c48:	20006174 	.word	0x20006174
 8001c4c:	400200a0 	.word	0x400200a0
 8001c50:	200062ec 	.word	0x200062ec
 8001c54:	400200b8 	.word	0x400200b8

08001c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_MspInit+0x38>)
 8001c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_MspInit+0x38>)
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_MspInit+0x38>)
 8001c70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f06f 0001 	mvn.w	r0, #1
 8001c84:	f000 fe8a 	bl	800299c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	58024400 	.word	0x58024400

08001c94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b090      	sub	sp, #64	; 0x40
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b0f      	cmp	r3, #15
 8001ca0:	d827      	bhi.n	8001cf2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	2037      	movs	r0, #55	; 0x37
 8001ca8:	f000 fe78 	bl	800299c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cac:	2037      	movs	r0, #55	; 0x37
 8001cae:	f000 fe8f 	bl	80029d0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001cb2:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <HAL_InitTick+0xc4>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001cb8:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <HAL_InitTick+0xc8>)
 8001cba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cbe:	4a27      	ldr	r2, [pc, #156]	; (8001d5c <HAL_InitTick+0xc8>)
 8001cc0:	f043 0320 	orr.w	r3, r3, #32
 8001cc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_InitTick+0xc8>)
 8001cca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cd6:	f107 0210 	add.w	r2, r7, #16
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f004 fc61 	bl	80065a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d106      	bne.n	8001cfe <HAL_InitTick+0x6a>
 8001cf0:	e001      	b.n	8001cf6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e02b      	b.n	8001d4e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cf6:	f004 fc2b 	bl	8006550 <HAL_RCC_GetPCLK1Freq>
 8001cfa:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001cfc:	e004      	b.n	8001d08 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cfe:	f004 fc27 	bl	8006550 <HAL_RCC_GetPCLK1Freq>
 8001d02:	4603      	mov	r3, r0
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d0a:	4a15      	ldr	r2, [pc, #84]	; (8001d60 <HAL_InitTick+0xcc>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	0c9b      	lsrs	r3, r3, #18
 8001d12:	3b01      	subs	r3, #1
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d18:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <HAL_InitTick+0xd4>)
 8001d1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d22:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d28:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001d36:	480b      	ldr	r0, [pc, #44]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d38:	f006 fc5b 	bl	80085f2 <HAL_TIM_Base_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d104      	bne.n	8001d4c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001d42:	4808      	ldr	r0, [pc, #32]	; (8001d64 <HAL_InitTick+0xd0>)
 8001d44:	f006 fcb6 	bl	80086b4 <HAL_TIM_Base_Start_IT>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	e000      	b.n	8001d4e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3740      	adds	r7, #64	; 0x40
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	58024400 	.word	0x58024400
 8001d60:	431bde83 	.word	0x431bde83
 8001d64:	20006654 	.word	0x20006654
 8001d68:	40001400 	.word	0x40001400

08001d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <NMI_Handler+0x4>

08001d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <MemManage_Handler+0x4>

08001d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <DMA1_Stream2_IRQHandler+0x10>)
 8001d9e:	f001 fd3b 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200060fc 	.word	0x200060fc

08001dac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <DMA1_Stream3_IRQHandler+0x10>)
 8001db2:	f001 fd31 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200064ec 	.word	0x200064ec

08001dc0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <DMA1_Stream4_IRQHandler+0x10>)
 8001dc6:	f001 fd27 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200065dc 	.word	0x200065dc

08001dd4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <DMA1_Stream5_IRQHandler+0x10>)
 8001dda:	f001 fd1d 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20006274 	.word	0x20006274

08001de8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <DMA1_Stream6_IRQHandler+0x10>)
 8001dee:	f001 fd13 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20006174 	.word	0x20006174

08001dfc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <SPI2_IRQHandler+0x10>)
 8001e02:	f006 f917 	bl	8008034 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20006074 	.word	0x20006074

08001e10 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <DMA1_Stream7_IRQHandler+0x10>)
 8001e16:	f001 fcff 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200062ec 	.word	0x200062ec

08001e24 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <SPI3_IRQHandler+0x10>)
 8001e2a:	f006 f903 	bl	8008034 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200061ec 	.word	0x200061ec

08001e38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <TIM7_IRQHandler+0x10>)
 8001e3e:	f006 fc6f 	bl	8008720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20006654 	.word	0x20006654

08001e4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <DMA2_Stream0_IRQHandler+0x10>)
 8001e52:	f001 fce1 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200069fc 	.word	0x200069fc

08001e60 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <DMA2_Stream1_IRQHandler+0x10>)
 8001e66:	f001 fcd7 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000690c 	.word	0x2000690c

08001e74 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <DMA2_Stream4_IRQHandler+0x10>)
 8001e7a:	f001 fccd 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200066a0 	.word	0x200066a0

08001e88 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <ETH_IRQHandler+0x10>)
 8001e8e:	f002 fe29 	bl	8004ae4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20006d80 	.word	0x20006d80

08001e9c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <DMA2_Stream5_IRQHandler+0x10>)
 8001ea2:	f001 fcb9 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20006a74 	.word	0x20006a74

08001eb0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <DMA2_Stream6_IRQHandler+0x10>)
 8001eb6:	f001 fcaf 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20006718 	.word	0x20006718

08001ec4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <DMA2_Stream7_IRQHandler+0x10>)
 8001eca:	f001 fca5 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20006984 	.word	0x20006984

08001ed8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <SPI4_IRQHandler+0x10>)
 8001ede:	f006 f8a9 	bl	8008034 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20006364 	.word	0x20006364

08001eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
	return 1;
 8001ef0:	2301      	movs	r3, #1
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_kill>:

int _kill(int pid, int sig)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f06:	f00b f89d 	bl	800d044 <__errno>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	2316      	movs	r3, #22
 8001f0e:	6013      	str	r3, [r2, #0]
	return -1;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_exit>:

void _exit (int status)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ffe7 	bl	8001efc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f2e:	e7fe      	b.n	8001f2e <_exit+0x12>

08001f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f38:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <_sbrk+0x5c>)
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <_sbrk+0x60>)
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f44:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d102      	bne.n	8001f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <_sbrk+0x64>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <_sbrk+0x68>)
 8001f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d207      	bcs.n	8001f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f60:	f00b f870 	bl	800d044 <__errno>
 8001f64:	4602      	mov	r2, r0
 8001f66:	230c      	movs	r3, #12
 8001f68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f6e:	e009      	b.n	8001f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <_sbrk+0x64>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <_sbrk+0x64>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <_sbrk+0x64>)
 8001f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f82:	68fb      	ldr	r3, [r7, #12]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20020000 	.word	0x20020000
 8001f90:	00000400 	.word	0x00000400
 8001f94:	20000204 	.word	0x20000204
 8001f98:	20006e70 	.word	0x20006e70

08001f9c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <MX_USART1_UART_Init+0x90>)
 8001fa2:	4a23      	ldr	r2, [pc, #140]	; (8002030 <MX_USART1_UART_Init+0x94>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fa6:	4b21      	ldr	r3, [pc, #132]	; (800202c <MX_USART1_UART_Init+0x90>)
 8001fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <MX_USART1_UART_Init+0x90>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <MX_USART1_UART_Init+0x90>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <MX_USART1_UART_Init+0x90>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	; (800202c <MX_USART1_UART_Init+0x90>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <MX_USART1_UART_Init+0x90>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <MX_USART1_UART_Init+0x90>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <MX_USART1_UART_Init+0x90>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <MX_USART1_UART_Init+0x90>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <MX_USART1_UART_Init+0x90>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fe4:	4811      	ldr	r0, [pc, #68]	; (800202c <MX_USART1_UART_Init+0x90>)
 8001fe6:	f006 fd9b 	bl	8008b20 <HAL_UART_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ff0:	f7ff f8e8 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	480d      	ldr	r0, [pc, #52]	; (800202c <MX_USART1_UART_Init+0x90>)
 8001ff8:	f007 fdcb 	bl	8009b92 <HAL_UARTEx_SetTxFifoThreshold>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002002:	f7ff f8df 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002006:	2100      	movs	r1, #0
 8002008:	4808      	ldr	r0, [pc, #32]	; (800202c <MX_USART1_UART_Init+0x90>)
 800200a:	f007 fe00 	bl	8009c0e <HAL_UARTEx_SetRxFifoThreshold>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002014:	f7ff f8d6 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002018:	4804      	ldr	r0, [pc, #16]	; (800202c <MX_USART1_UART_Init+0x90>)
 800201a:	f007 fd81 	bl	8009b20 <HAL_UARTEx_DisableFifoMode>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002024:	f7ff f8ce 	bl	80011c4 <Error_Handler>
  }

}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20006aec 	.word	0x20006aec
 8002030:	40011000 	.word	0x40011000

08002034 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002038:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 800203a:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <MX_USART2_UART_Init+0x94>)
 800203c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800203e:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 8002040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002046:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002052:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002058:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 800205a:	220c      	movs	r2, #12
 800205c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800207c:	4811      	ldr	r0, [pc, #68]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 800207e:	f006 fd4f 	bl	8008b20 <HAL_UART_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002088:	f7ff f89c 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800208c:	2100      	movs	r1, #0
 800208e:	480d      	ldr	r0, [pc, #52]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 8002090:	f007 fd7f 	bl	8009b92 <HAL_UARTEx_SetTxFifoThreshold>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800209a:	f7ff f893 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800209e:	2100      	movs	r1, #0
 80020a0:	4808      	ldr	r0, [pc, #32]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 80020a2:	f007 fdb4 	bl	8009c0e <HAL_UARTEx_SetRxFifoThreshold>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020ac:	f7ff f88a 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_USART2_UART_Init+0x90>)
 80020b2:	f007 fd35 	bl	8009b20 <HAL_UARTEx_DisableFifoMode>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80020bc:	f7ff f882 	bl	80011c4 <Error_Handler>
  }

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20006c04 	.word	0x20006c04
 80020c8:	40004400 	.word	0x40004400

080020cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <MX_USART3_UART_Init+0x90>)
 80020d2:	4a23      	ldr	r2, [pc, #140]	; (8002160 <MX_USART3_UART_Init+0x94>)
 80020d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <MX_USART3_UART_Init+0x90>)
 80020d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020de:	4b1f      	ldr	r3, [pc, #124]	; (800215c <MX_USART3_UART_Init+0x90>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <MX_USART3_UART_Init+0x90>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <MX_USART3_UART_Init+0x90>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MX_USART3_UART_Init+0x90>)
 80020f2:	220c      	movs	r2, #12
 80020f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <MX_USART3_UART_Init+0x90>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fc:	4b17      	ldr	r3, [pc, #92]	; (800215c <MX_USART3_UART_Init+0x90>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <MX_USART3_UART_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <MX_USART3_UART_Init+0x90>)
 800210a:	2200      	movs	r2, #0
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <MX_USART3_UART_Init+0x90>)
 8002110:	2200      	movs	r2, #0
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002114:	4811      	ldr	r0, [pc, #68]	; (800215c <MX_USART3_UART_Init+0x90>)
 8002116:	f006 fd03 	bl	8008b20 <HAL_UART_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002120:	f7ff f850 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002124:	2100      	movs	r1, #0
 8002126:	480d      	ldr	r0, [pc, #52]	; (800215c <MX_USART3_UART_Init+0x90>)
 8002128:	f007 fd33 	bl	8009b92 <HAL_UARTEx_SetTxFifoThreshold>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002132:	f7ff f847 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002136:	2100      	movs	r1, #0
 8002138:	4808      	ldr	r0, [pc, #32]	; (800215c <MX_USART3_UART_Init+0x90>)
 800213a:	f007 fd68 	bl	8009c0e <HAL_UARTEx_SetRxFifoThreshold>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002144:	f7ff f83e 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002148:	4804      	ldr	r0, [pc, #16]	; (800215c <MX_USART3_UART_Init+0x90>)
 800214a:	f007 fce9 	bl	8009b20 <HAL_UARTEx_DisableFifoMode>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002154:	f7ff f836 	bl	80011c4 <Error_Handler>
  }

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20006808 	.word	0x20006808
 8002160:	40004800 	.word	0x40004800

08002164 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002168:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 800216a:	4a23      	ldr	r2, [pc, #140]	; (80021f8 <MX_USART6_UART_Init+0x94>)
 800216c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800216e:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 8002170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002174:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002176:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 800218a:	220c      	movs	r2, #12
 800218c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002194:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021ac:	4811      	ldr	r0, [pc, #68]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 80021ae:	f006 fcb7 	bl	8008b20 <HAL_UART_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80021b8:	f7ff f804 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021bc:	2100      	movs	r1, #0
 80021be:	480d      	ldr	r0, [pc, #52]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 80021c0:	f007 fce7 	bl	8009b92 <HAL_UARTEx_SetTxFifoThreshold>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80021ca:	f7fe fffb 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021ce:	2100      	movs	r1, #0
 80021d0:	4808      	ldr	r0, [pc, #32]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 80021d2:	f007 fd1c 	bl	8009c0e <HAL_UARTEx_SetRxFifoThreshold>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80021dc:	f7fe fff2 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80021e0:	4804      	ldr	r0, [pc, #16]	; (80021f4 <MX_USART6_UART_Init+0x90>)
 80021e2:	f007 fc9d 	bl	8009b20 <HAL_UARTEx_DisableFifoMode>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80021ec:	f7fe ffea 	bl	80011c4 <Error_Handler>
  }

}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20006b78 	.word	0x20006b78
 80021f8:	40011400 	.word	0x40011400

080021fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b090      	sub	sp, #64	; 0x40
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a9f      	ldr	r2, [pc, #636]	; (8002498 <HAL_UART_MspInit+0x29c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	f040 808c 	bne.w	8002338 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002220:	4b9e      	ldr	r3, [pc, #632]	; (800249c <HAL_UART_MspInit+0x2a0>)
 8002222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002226:	4a9d      	ldr	r2, [pc, #628]	; (800249c <HAL_UART_MspInit+0x2a0>)
 8002228:	f043 0310 	orr.w	r3, r3, #16
 800222c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002230:	4b9a      	ldr	r3, [pc, #616]	; (800249c <HAL_UART_MspInit+0x2a0>)
 8002232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	4b97      	ldr	r3, [pc, #604]	; (800249c <HAL_UART_MspInit+0x2a0>)
 8002240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002244:	4a95      	ldr	r2, [pc, #596]	; (800249c <HAL_UART_MspInit+0x2a0>)
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800224e:	4b93      	ldr	r3, [pc, #588]	; (800249c <HAL_UART_MspInit+0x2a0>)
 8002250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800225c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800226e:	2304      	movs	r3, #4
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002276:	4619      	mov	r1, r3
 8002278:	4889      	ldr	r0, [pc, #548]	; (80024a0 <HAL_UART_MspInit+0x2a4>)
 800227a:	f002 fd6d 	bl	8004d58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 800227e:	4b89      	ldr	r3, [pc, #548]	; (80024a4 <HAL_UART_MspInit+0x2a8>)
 8002280:	4a89      	ldr	r2, [pc, #548]	; (80024a8 <HAL_UART_MspInit+0x2ac>)
 8002282:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002284:	4b87      	ldr	r3, [pc, #540]	; (80024a4 <HAL_UART_MspInit+0x2a8>)
 8002286:	2229      	movs	r2, #41	; 0x29
 8002288:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800228a:	4b86      	ldr	r3, [pc, #536]	; (80024a4 <HAL_UART_MspInit+0x2a8>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002290:	4b84      	ldr	r3, [pc, #528]	; (80024a4 <HAL_UART_MspInit+0x2a8>)
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002296:	4b83      	ldr	r3, [pc, #524]	; (80024a4 <HAL_UART_MspInit+0x2a8>)
 8002298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800229c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800229e:	4b81      	ldr	r3, [pc, #516]	; (80024a4 <HAL_UART_MspInit+0x2a8>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022a4:	4b7f      	ldr	r3, [pc, #508]	; (80024a4 <HAL_UART_MspInit+0x2a8>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80022aa:	4b7e      	ldr	r3, [pc, #504]	; (80024a4 <HAL_UART_MspInit+0x2a8>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80022b0:	4b7c      	ldr	r3, [pc, #496]	; (80024a4 <HAL_UART_MspInit+0x2a8>)
 80022b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80022b6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b8:	4b7a      	ldr	r3, [pc, #488]	; (80024a4 <HAL_UART_MspInit+0x2a8>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022be:	4879      	ldr	r0, [pc, #484]	; (80024a4 <HAL_UART_MspInit+0x2a8>)
 80022c0:	f000 fd0a 	bl	8002cd8 <HAL_DMA_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80022ca:	f7fe ff7b 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a74      	ldr	r2, [pc, #464]	; (80024a4 <HAL_UART_MspInit+0x2a8>)
 80022d2:	679a      	str	r2, [r3, #120]	; 0x78
 80022d4:	4a73      	ldr	r2, [pc, #460]	; (80024a4 <HAL_UART_MspInit+0x2a8>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream1;
 80022da:	4b74      	ldr	r3, [pc, #464]	; (80024ac <HAL_UART_MspInit+0x2b0>)
 80022dc:	4a74      	ldr	r2, [pc, #464]	; (80024b0 <HAL_UART_MspInit+0x2b4>)
 80022de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80022e0:	4b72      	ldr	r3, [pc, #456]	; (80024ac <HAL_UART_MspInit+0x2b0>)
 80022e2:	222a      	movs	r2, #42	; 0x2a
 80022e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022e6:	4b71      	ldr	r3, [pc, #452]	; (80024ac <HAL_UART_MspInit+0x2b0>)
 80022e8:	2240      	movs	r2, #64	; 0x40
 80022ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ec:	4b6f      	ldr	r3, [pc, #444]	; (80024ac <HAL_UART_MspInit+0x2b0>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022f2:	4b6e      	ldr	r3, [pc, #440]	; (80024ac <HAL_UART_MspInit+0x2b0>)
 80022f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022fa:	4b6c      	ldr	r3, [pc, #432]	; (80024ac <HAL_UART_MspInit+0x2b0>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002300:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <HAL_UART_MspInit+0x2b0>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002306:	4b69      	ldr	r3, [pc, #420]	; (80024ac <HAL_UART_MspInit+0x2b0>)
 8002308:	2200      	movs	r2, #0
 800230a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800230c:	4b67      	ldr	r3, [pc, #412]	; (80024ac <HAL_UART_MspInit+0x2b0>)
 800230e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002312:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002314:	4b65      	ldr	r3, [pc, #404]	; (80024ac <HAL_UART_MspInit+0x2b0>)
 8002316:	2200      	movs	r2, #0
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800231a:	4864      	ldr	r0, [pc, #400]	; (80024ac <HAL_UART_MspInit+0x2b0>)
 800231c:	f000 fcdc 	bl	8002cd8 <HAL_DMA_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002326:	f7fe ff4d 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a5f      	ldr	r2, [pc, #380]	; (80024ac <HAL_UART_MspInit+0x2b0>)
 800232e:	675a      	str	r2, [r3, #116]	; 0x74
 8002330:	4a5e      	ldr	r2, [pc, #376]	; (80024ac <HAL_UART_MspInit+0x2b0>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002336:	e1ca      	b.n	80026ce <HAL_UART_MspInit+0x4d2>
  else if(uartHandle->Instance==USART2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a5d      	ldr	r2, [pc, #372]	; (80024b4 <HAL_UART_MspInit+0x2b8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	f040 80c6 	bne.w	80024d0 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002344:	4b55      	ldr	r3, [pc, #340]	; (800249c <HAL_UART_MspInit+0x2a0>)
 8002346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800234a:	4a54      	ldr	r2, [pc, #336]	; (800249c <HAL_UART_MspInit+0x2a0>)
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002354:	4b51      	ldr	r3, [pc, #324]	; (800249c <HAL_UART_MspInit+0x2a0>)
 8002356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	623b      	str	r3, [r7, #32]
 8002360:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b4e      	ldr	r3, [pc, #312]	; (800249c <HAL_UART_MspInit+0x2a0>)
 8002364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002368:	4a4c      	ldr	r2, [pc, #304]	; (800249c <HAL_UART_MspInit+0x2a0>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_UART_MspInit+0x2a0>)
 8002374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002380:	4b46      	ldr	r3, [pc, #280]	; (800249c <HAL_UART_MspInit+0x2a0>)
 8002382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002386:	4a45      	ldr	r2, [pc, #276]	; (800249c <HAL_UART_MspInit+0x2a0>)
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002390:	4b42      	ldr	r3, [pc, #264]	; (800249c <HAL_UART_MspInit+0x2a0>)
 8002392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800239e:	2308      	movs	r3, #8
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ae:	2307      	movs	r3, #7
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b6:	4619      	mov	r1, r3
 80023b8:	483f      	ldr	r0, [pc, #252]	; (80024b8 <HAL_UART_MspInit+0x2bc>)
 80023ba:	f002 fccd 	bl	8004d58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023be:	2320      	movs	r3, #32
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ca:	2300      	movs	r3, #0
 80023cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ce:	2307      	movs	r3, #7
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d6:	4619      	mov	r1, r3
 80023d8:	4838      	ldr	r0, [pc, #224]	; (80024bc <HAL_UART_MspInit+0x2c0>)
 80023da:	f002 fcbd 	bl	8004d58 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Stream4;
 80023de:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <HAL_UART_MspInit+0x2c4>)
 80023e0:	4a38      	ldr	r2, [pc, #224]	; (80024c4 <HAL_UART_MspInit+0x2c8>)
 80023e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80023e4:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_UART_MspInit+0x2c4>)
 80023e6:	222b      	movs	r2, #43	; 0x2b
 80023e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ea:	4b35      	ldr	r3, [pc, #212]	; (80024c0 <HAL_UART_MspInit+0x2c4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f0:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <HAL_UART_MspInit+0x2c4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023f6:	4b32      	ldr	r3, [pc, #200]	; (80024c0 <HAL_UART_MspInit+0x2c4>)
 80023f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023fe:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_UART_MspInit+0x2c4>)
 8002400:	2200      	movs	r2, #0
 8002402:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002404:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <HAL_UART_MspInit+0x2c4>)
 8002406:	2200      	movs	r2, #0
 8002408:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_UART_MspInit+0x2c4>)
 800240c:	2200      	movs	r2, #0
 800240e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002410:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <HAL_UART_MspInit+0x2c4>)
 8002412:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002416:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002418:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <HAL_UART_MspInit+0x2c4>)
 800241a:	2200      	movs	r2, #0
 800241c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800241e:	4828      	ldr	r0, [pc, #160]	; (80024c0 <HAL_UART_MspInit+0x2c4>)
 8002420:	f000 fc5a 	bl	8002cd8 <HAL_DMA_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_UART_MspInit+0x232>
      Error_Handler();
 800242a:	f7fe fecb 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <HAL_UART_MspInit+0x2c4>)
 8002432:	679a      	str	r2, [r3, #120]	; 0x78
 8002434:	4a22      	ldr	r2, [pc, #136]	; (80024c0 <HAL_UART_MspInit+0x2c4>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream5;
 800243a:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_UART_MspInit+0x2cc>)
 800243c:	4a23      	ldr	r2, [pc, #140]	; (80024cc <HAL_UART_MspInit+0x2d0>)
 800243e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <HAL_UART_MspInit+0x2cc>)
 8002442:	222c      	movs	r2, #44	; 0x2c
 8002444:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_UART_MspInit+0x2cc>)
 8002448:	2240      	movs	r2, #64	; 0x40
 800244a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HAL_UART_MspInit+0x2cc>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_UART_MspInit+0x2cc>)
 8002454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002458:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800245a:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_UART_MspInit+0x2cc>)
 800245c:	2200      	movs	r2, #0
 800245e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_UART_MspInit+0x2cc>)
 8002462:	2200      	movs	r2, #0
 8002464:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_UART_MspInit+0x2cc>)
 8002468:	2200      	movs	r2, #0
 800246a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800246c:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <HAL_UART_MspInit+0x2cc>)
 800246e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002472:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_UART_MspInit+0x2cc>)
 8002476:	2200      	movs	r2, #0
 8002478:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800247a:	4813      	ldr	r0, [pc, #76]	; (80024c8 <HAL_UART_MspInit+0x2cc>)
 800247c:	f000 fc2c 	bl	8002cd8 <HAL_DMA_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8002486:	f7fe fe9d 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a0e      	ldr	r2, [pc, #56]	; (80024c8 <HAL_UART_MspInit+0x2cc>)
 800248e:	675a      	str	r2, [r3, #116]	; 0x74
 8002490:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <HAL_UART_MspInit+0x2cc>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002496:	e11a      	b.n	80026ce <HAL_UART_MspInit+0x4d2>
 8002498:	40011000 	.word	0x40011000
 800249c:	58024400 	.word	0x58024400
 80024a0:	58020400 	.word	0x58020400
 80024a4:	200069fc 	.word	0x200069fc
 80024a8:	40020410 	.word	0x40020410
 80024ac:	2000690c 	.word	0x2000690c
 80024b0:	40020428 	.word	0x40020428
 80024b4:	40004400 	.word	0x40004400
 80024b8:	58020000 	.word	0x58020000
 80024bc:	58020c00 	.word	0x58020c00
 80024c0:	200066a0 	.word	0x200066a0
 80024c4:	40020470 	.word	0x40020470
 80024c8:	20006a74 	.word	0x20006a74
 80024cc:	40020488 	.word	0x40020488
  else if(uartHandle->Instance==USART3)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a80      	ldr	r2, [pc, #512]	; (80026d8 <HAL_UART_MspInit+0x4dc>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d16b      	bne.n	80025b2 <HAL_UART_MspInit+0x3b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024da:	4b80      	ldr	r3, [pc, #512]	; (80026dc <HAL_UART_MspInit+0x4e0>)
 80024dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024e0:	4a7e      	ldr	r2, [pc, #504]	; (80026dc <HAL_UART_MspInit+0x4e0>)
 80024e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024ea:	4b7c      	ldr	r3, [pc, #496]	; (80026dc <HAL_UART_MspInit+0x4e0>)
 80024ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	697b      	ldr	r3, [r7, #20]
    hdma_usart3_rx.Instance = DMA2_Stream2;
 80024f8:	4b79      	ldr	r3, [pc, #484]	; (80026e0 <HAL_UART_MspInit+0x4e4>)
 80024fa:	4a7a      	ldr	r2, [pc, #488]	; (80026e4 <HAL_UART_MspInit+0x4e8>)
 80024fc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80024fe:	4b78      	ldr	r3, [pc, #480]	; (80026e0 <HAL_UART_MspInit+0x4e4>)
 8002500:	222d      	movs	r2, #45	; 0x2d
 8002502:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002504:	4b76      	ldr	r3, [pc, #472]	; (80026e0 <HAL_UART_MspInit+0x4e4>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800250a:	4b75      	ldr	r3, [pc, #468]	; (80026e0 <HAL_UART_MspInit+0x4e4>)
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002510:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <HAL_UART_MspInit+0x4e4>)
 8002512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002516:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002518:	4b71      	ldr	r3, [pc, #452]	; (80026e0 <HAL_UART_MspInit+0x4e4>)
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800251e:	4b70      	ldr	r3, [pc, #448]	; (80026e0 <HAL_UART_MspInit+0x4e4>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002524:	4b6e      	ldr	r3, [pc, #440]	; (80026e0 <HAL_UART_MspInit+0x4e4>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800252a:	4b6d      	ldr	r3, [pc, #436]	; (80026e0 <HAL_UART_MspInit+0x4e4>)
 800252c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002530:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002532:	4b6b      	ldr	r3, [pc, #428]	; (80026e0 <HAL_UART_MspInit+0x4e4>)
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002538:	4869      	ldr	r0, [pc, #420]	; (80026e0 <HAL_UART_MspInit+0x4e4>)
 800253a:	f000 fbcd 	bl	8002cd8 <HAL_DMA_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8002544:	f7fe fe3e 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a65      	ldr	r2, [pc, #404]	; (80026e0 <HAL_UART_MspInit+0x4e4>)
 800254c:	679a      	str	r2, [r3, #120]	; 0x78
 800254e:	4a64      	ldr	r2, [pc, #400]	; (80026e0 <HAL_UART_MspInit+0x4e4>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA2_Stream3;
 8002554:	4b64      	ldr	r3, [pc, #400]	; (80026e8 <HAL_UART_MspInit+0x4ec>)
 8002556:	4a65      	ldr	r2, [pc, #404]	; (80026ec <HAL_UART_MspInit+0x4f0>)
 8002558:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_UART_MspInit+0x4ec>)
 800255c:	222e      	movs	r2, #46	; 0x2e
 800255e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002560:	4b61      	ldr	r3, [pc, #388]	; (80026e8 <HAL_UART_MspInit+0x4ec>)
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002566:	4b60      	ldr	r3, [pc, #384]	; (80026e8 <HAL_UART_MspInit+0x4ec>)
 8002568:	2200      	movs	r2, #0
 800256a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800256c:	4b5e      	ldr	r3, [pc, #376]	; (80026e8 <HAL_UART_MspInit+0x4ec>)
 800256e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002572:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002574:	4b5c      	ldr	r3, [pc, #368]	; (80026e8 <HAL_UART_MspInit+0x4ec>)
 8002576:	2200      	movs	r2, #0
 8002578:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800257a:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_UART_MspInit+0x4ec>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002580:	4b59      	ldr	r3, [pc, #356]	; (80026e8 <HAL_UART_MspInit+0x4ec>)
 8002582:	2200      	movs	r2, #0
 8002584:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002586:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <HAL_UART_MspInit+0x4ec>)
 8002588:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800258c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800258e:	4b56      	ldr	r3, [pc, #344]	; (80026e8 <HAL_UART_MspInit+0x4ec>)
 8002590:	2200      	movs	r2, #0
 8002592:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002594:	4854      	ldr	r0, [pc, #336]	; (80026e8 <HAL_UART_MspInit+0x4ec>)
 8002596:	f000 fb9f 	bl	8002cd8 <HAL_DMA_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_UART_MspInit+0x3a8>
      Error_Handler();
 80025a0:	f7fe fe10 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a50      	ldr	r2, [pc, #320]	; (80026e8 <HAL_UART_MspInit+0x4ec>)
 80025a8:	675a      	str	r2, [r3, #116]	; 0x74
 80025aa:	4a4f      	ldr	r2, [pc, #316]	; (80026e8 <HAL_UART_MspInit+0x4ec>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025b0:	e08d      	b.n	80026ce <HAL_UART_MspInit+0x4d2>
  else if(uartHandle->Instance==USART6)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a4e      	ldr	r2, [pc, #312]	; (80026f0 <HAL_UART_MspInit+0x4f4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	f040 8088 	bne.w	80026ce <HAL_UART_MspInit+0x4d2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_UART_MspInit+0x4e0>)
 80025c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025c4:	4a45      	ldr	r2, [pc, #276]	; (80026dc <HAL_UART_MspInit+0x4e0>)
 80025c6:	f043 0320 	orr.w	r3, r3, #32
 80025ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025ce:	4b43      	ldr	r3, [pc, #268]	; (80026dc <HAL_UART_MspInit+0x4e0>)
 80025d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025dc:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <HAL_UART_MspInit+0x4e0>)
 80025de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e2:	4a3e      	ldr	r2, [pc, #248]	; (80026dc <HAL_UART_MspInit+0x4e0>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ec:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <HAL_UART_MspInit+0x4e0>)
 80025ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025fa:	23c0      	movs	r3, #192	; 0xc0
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2302      	movs	r3, #2
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2300      	movs	r3, #0
 8002608:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800260a:	2307      	movs	r3, #7
 800260c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002612:	4619      	mov	r1, r3
 8002614:	4837      	ldr	r0, [pc, #220]	; (80026f4 <HAL_UART_MspInit+0x4f8>)
 8002616:	f002 fb9f 	bl	8004d58 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream6;
 800261a:	4b37      	ldr	r3, [pc, #220]	; (80026f8 <HAL_UART_MspInit+0x4fc>)
 800261c:	4a37      	ldr	r2, [pc, #220]	; (80026fc <HAL_UART_MspInit+0x500>)
 800261e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8002620:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <HAL_UART_MspInit+0x4fc>)
 8002622:	2247      	movs	r2, #71	; 0x47
 8002624:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002626:	4b34      	ldr	r3, [pc, #208]	; (80026f8 <HAL_UART_MspInit+0x4fc>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800262c:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <HAL_UART_MspInit+0x4fc>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002632:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_UART_MspInit+0x4fc>)
 8002634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002638:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800263a:	4b2f      	ldr	r3, [pc, #188]	; (80026f8 <HAL_UART_MspInit+0x4fc>)
 800263c:	2200      	movs	r2, #0
 800263e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002640:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <HAL_UART_MspInit+0x4fc>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002646:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <HAL_UART_MspInit+0x4fc>)
 8002648:	2200      	movs	r2, #0
 800264a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800264c:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <HAL_UART_MspInit+0x4fc>)
 800264e:	2200      	movs	r2, #0
 8002650:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002652:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_UART_MspInit+0x4fc>)
 8002654:	2200      	movs	r2, #0
 8002656:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002658:	4827      	ldr	r0, [pc, #156]	; (80026f8 <HAL_UART_MspInit+0x4fc>)
 800265a:	f000 fb3d 	bl	8002cd8 <HAL_DMA_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_UART_MspInit+0x46c>
      Error_Handler();
 8002664:	f7fe fdae 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <HAL_UART_MspInit+0x4fc>)
 800266c:	679a      	str	r2, [r3, #120]	; 0x78
 800266e:	4a22      	ldr	r2, [pc, #136]	; (80026f8 <HAL_UART_MspInit+0x4fc>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 8002674:	4b22      	ldr	r3, [pc, #136]	; (8002700 <HAL_UART_MspInit+0x504>)
 8002676:	4a23      	ldr	r2, [pc, #140]	; (8002704 <HAL_UART_MspInit+0x508>)
 8002678:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 800267a:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_UART_MspInit+0x504>)
 800267c:	2248      	movs	r2, #72	; 0x48
 800267e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002680:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <HAL_UART_MspInit+0x504>)
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_UART_MspInit+0x504>)
 8002688:	2200      	movs	r2, #0
 800268a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800268c:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <HAL_UART_MspInit+0x504>)
 800268e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002692:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <HAL_UART_MspInit+0x504>)
 8002696:	2200      	movs	r2, #0
 8002698:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800269a:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_UART_MspInit+0x504>)
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80026a0:	4b17      	ldr	r3, [pc, #92]	; (8002700 <HAL_UART_MspInit+0x504>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_UART_MspInit+0x504>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <HAL_UART_MspInit+0x504>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80026b2:	4813      	ldr	r0, [pc, #76]	; (8002700 <HAL_UART_MspInit+0x504>)
 80026b4:	f000 fb10 	bl	8002cd8 <HAL_DMA_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_UART_MspInit+0x4c6>
      Error_Handler();
 80026be:	f7fe fd81 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <HAL_UART_MspInit+0x504>)
 80026c6:	675a      	str	r2, [r3, #116]	; 0x74
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <HAL_UART_MspInit+0x504>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80026ce:	bf00      	nop
 80026d0:	3740      	adds	r7, #64	; 0x40
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40004800 	.word	0x40004800
 80026dc:	58024400 	.word	0x58024400
 80026e0:	20006790 	.word	0x20006790
 80026e4:	40020440 	.word	0x40020440
 80026e8:	20006894 	.word	0x20006894
 80026ec:	40020458 	.word	0x40020458
 80026f0:	40011400 	.word	0x40011400
 80026f4:	58020800 	.word	0x58020800
 80026f8:	20006718 	.word	0x20006718
 80026fc:	400204a0 	.word	0x400204a0
 8002700:	20006984 	.word	0x20006984
 8002704:	400204b8 	.word	0x400204b8

08002708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002740 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800270c:	f7fd ffc0 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002710:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002712:	e003      	b.n	800271c <LoopCopyDataInit>

08002714 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002716:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002718:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800271a:	3104      	adds	r1, #4

0800271c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800271c:	480a      	ldr	r0, [pc, #40]	; (8002748 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002720:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002722:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002724:	d3f6      	bcc.n	8002714 <CopyDataInit>
  ldr  r2, =_sbss
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002728:	e002      	b.n	8002730 <LoopFillZerobss>

0800272a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800272a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800272c:	f842 3b04 	str.w	r3, [r2], #4

08002730 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002732:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002734:	d3f9      	bcc.n	800272a <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8002736:	f00a fc8b 	bl	800d050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800273a:	f7fe fb95 	bl	8000e68 <main>
  bx  lr    
 800273e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002740:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002744:	0800f4d4 	.word	0x0800f4d4
  ldr  r0, =_sdata
 8002748:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800274c:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8002750:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002754:	20006e6c 	.word	0x20006e6c

08002758 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002758:	e7fe      	b.n	8002758 <ADC3_IRQHandler>
	...

0800275c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002762:	2003      	movs	r0, #3
 8002764:	f000 f90f 	bl	8002986 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002768:	f003 fd50 	bl	800620c <HAL_RCC_GetSysClockFreq>
 800276c:	4601      	mov	r1, r0
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_Init+0x68>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <HAL_Init+0x6c>)
 800277a:	5cd3      	ldrb	r3, [r2, r3]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	fa21 f303 	lsr.w	r3, r1, r3
 8002784:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002786:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <HAL_Init+0x68>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <HAL_Init+0x6c>)
 8002790:	5cd3      	ldrb	r3, [r2, r3]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <HAL_Init+0x70>)
 800279e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <HAL_Init+0x74>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7ff fa74 	bl	8001c94 <HAL_InitTick>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e002      	b.n	80027bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027b6:	f7ff fa4f 	bl	8001c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	58024400 	.word	0x58024400
 80027c8:	0800f1b4 	.word	0x0800f1b4
 80027cc:	20000004 	.word	0x20000004
 80027d0:	20000000 	.word	0x20000000

080027d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_IncTick+0x20>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x24>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_IncTick+0x24>)
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	2000000c 	.word	0x2000000c
 80027f8:	20006c90 	.word	0x20006c90

080027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_GetTick+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20006c90 	.word	0x20006c90

08002814 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_GetREVID+0x14>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0c1b      	lsrs	r3, r3, #16
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	5c001000 	.word	0x5c001000

0800282c <__NVIC_SetPriorityGrouping>:
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <__NVIC_SetPriorityGrouping+0x40>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002848:	4013      	ands	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <__NVIC_SetPriorityGrouping+0x44>)
 8002856:	4313      	orrs	r3, r2
 8002858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285a:	4a04      	ldr	r2, [pc, #16]	; (800286c <__NVIC_SetPriorityGrouping+0x40>)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	60d3      	str	r3, [r2, #12]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00
 8002870:	05fa0000 	.word	0x05fa0000

08002874 <__NVIC_GetPriorityGrouping>:
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <__NVIC_GetPriorityGrouping+0x18>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	f003 0307 	and.w	r3, r3, #7
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_EnableIRQ>:
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800289a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	db0b      	blt.n	80028ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	4907      	ldr	r1, [pc, #28]	; (80028c8 <__NVIC_EnableIRQ+0x38>)
 80028aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	2001      	movs	r0, #1
 80028b2:	fa00 f202 	lsl.w	r2, r0, r2
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000e100 	.word	0xe000e100

080028cc <__NVIC_SetPriority>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db0a      	blt.n	80028f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	490c      	ldr	r1, [pc, #48]	; (8002918 <__NVIC_SetPriority+0x4c>)
 80028e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ea:	0112      	lsls	r2, r2, #4
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	440b      	add	r3, r1
 80028f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028f4:	e00a      	b.n	800290c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4908      	ldr	r1, [pc, #32]	; (800291c <__NVIC_SetPriority+0x50>)
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3b04      	subs	r3, #4
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	440b      	add	r3, r1
 800290a:	761a      	strb	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000e100 	.word	0xe000e100
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <NVIC_EncodePriority>:
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f1c3 0307 	rsb	r3, r3, #7
 800293a:	2b04      	cmp	r3, #4
 800293c:	bf28      	it	cs
 800293e:	2304      	movcs	r3, #4
 8002940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3304      	adds	r3, #4
 8002946:	2b06      	cmp	r3, #6
 8002948:	d902      	bls.n	8002950 <NVIC_EncodePriority+0x30>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b03      	subs	r3, #3
 800294e:	e000      	b.n	8002952 <NVIC_EncodePriority+0x32>
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	401a      	ands	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002968:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43d9      	mvns	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	4313      	orrs	r3, r2
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	; 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff ff4c 	bl	800282c <__NVIC_SetPriorityGrouping>
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029aa:	f7ff ff63 	bl	8002874 <__NVIC_GetPriorityGrouping>
 80029ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	6978      	ldr	r0, [r7, #20]
 80029b6:	f7ff ffb3 	bl	8002920 <NVIC_EncodePriority>
 80029ba:	4602      	mov	r2, r0
 80029bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff82 	bl	80028cc <__NVIC_SetPriority>
}
 80029c8:	bf00      	nop
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ff56 	bl	8002890 <__NVIC_EnableIRQ>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80029f0:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_MPU_Disable+0x24>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <HAL_MPU_Disable+0x24>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fe:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <HAL_MPU_Disable+0x28>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	605a      	str	r2, [r3, #4]
}
 8002a06:	bf00      	nop
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00
 8002a14:	e000ed90 	.word	0xe000ed90

08002a18 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002a20:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <HAL_MPU_Enable+0x34>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_MPU_Enable+0x38>)
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	4a08      	ldr	r2, [pc, #32]	; (8002a50 <HAL_MPU_Enable+0x38>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002a36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a3a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	e000ed90 	.word	0xe000ed90
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	785a      	ldrb	r2, [r3, #1]
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_MPU_ConfigRegion+0x84>)
 8002a62:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d029      	beq.n	8002ac0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002a6c:	4a1a      	ldr	r2, [pc, #104]	; (8002ad8 <HAL_MPU_ConfigRegion+0x84>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7b1b      	ldrb	r3, [r3, #12]
 8002a78:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7adb      	ldrb	r3, [r3, #11]
 8002a7e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7a9b      	ldrb	r3, [r3, #10]
 8002a86:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7b5b      	ldrb	r3, [r3, #13]
 8002a8e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7b9b      	ldrb	r3, [r3, #14]
 8002a96:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7bdb      	ldrb	r3, [r3, #15]
 8002a9e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002aa0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7a5b      	ldrb	r3, [r3, #9]
 8002aa6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002aa8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7a1b      	ldrb	r3, [r3, #8]
 8002aae:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ab0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	7812      	ldrb	r2, [r2, #0]
 8002ab6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ab8:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002aba:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002abc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002abe:	e005      	b.n	8002acc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_MPU_ConfigRegion+0x84>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <HAL_MPU_ConfigRegion+0x84>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed90 	.word	0xe000ed90

08002adc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <HAL_GetCurrentCPUID+0x24>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	2b07      	cmp	r3, #7
 8002aec:	d101      	bne.n	8002af2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e000      	b.n	8002af4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002af2:	2301      	movs	r3, #1
  }
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e054      	b.n	8002bc0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	7f5b      	ldrb	r3, [r3, #29]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fd fe6e 	bl	8000808 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	791b      	ldrb	r3, [r3, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10c      	bne.n	8002b54 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <HAL_CRC_Init+0xc4>)
 8002b40:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0218 	bic.w	r2, r2, #24
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	e00c      	b.n	8002b6e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6899      	ldr	r1, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f834 	bl	8002bcc <HAL_CRCEx_Polynomial_Set>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e028      	b.n	8002bc0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	795b      	ldrb	r3, [r3, #5]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b7e:	611a      	str	r2, [r3, #16]
 8002b80:	e004      	b.n	8002b8c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6912      	ldr	r2, [r2, #16]
 8002b8a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699a      	ldr	r2, [r3, #24]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	04c11db7 	.word	0x04c11db7

08002bcc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002bdc:	231f      	movs	r3, #31
 8002bde:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002be0:	bf00      	nop
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1e5a      	subs	r2, r3, #1
 8002be6:	613a      	str	r2, [r7, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d009      	beq.n	8002c00 <HAL_CRCEx_Polynomial_Set+0x34>
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b18      	cmp	r3, #24
 8002c04:	d846      	bhi.n	8002c94 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c9b 	.word	0x08002c9b
 8002c10:	08002c95 	.word	0x08002c95
 8002c14:	08002c95 	.word	0x08002c95
 8002c18:	08002c95 	.word	0x08002c95
 8002c1c:	08002c95 	.word	0x08002c95
 8002c20:	08002c95 	.word	0x08002c95
 8002c24:	08002c95 	.word	0x08002c95
 8002c28:	08002c95 	.word	0x08002c95
 8002c2c:	08002c89 	.word	0x08002c89
 8002c30:	08002c95 	.word	0x08002c95
 8002c34:	08002c95 	.word	0x08002c95
 8002c38:	08002c95 	.word	0x08002c95
 8002c3c:	08002c95 	.word	0x08002c95
 8002c40:	08002c95 	.word	0x08002c95
 8002c44:	08002c95 	.word	0x08002c95
 8002c48:	08002c95 	.word	0x08002c95
 8002c4c:	08002c7d 	.word	0x08002c7d
 8002c50:	08002c95 	.word	0x08002c95
 8002c54:	08002c95 	.word	0x08002c95
 8002c58:	08002c95 	.word	0x08002c95
 8002c5c:	08002c95 	.word	0x08002c95
 8002c60:	08002c95 	.word	0x08002c95
 8002c64:	08002c95 	.word	0x08002c95
 8002c68:	08002c95 	.word	0x08002c95
 8002c6c:	08002c71 	.word	0x08002c71
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d913      	bls.n	8002c9e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c7a:	e010      	b.n	8002c9e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b07      	cmp	r3, #7
 8002c80:	d90f      	bls.n	8002ca2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c86:	e00c      	b.n	8002ca2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b0f      	cmp	r3, #15
 8002c8c:	d90b      	bls.n	8002ca6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c92:	e008      	b.n	8002ca6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	75fb      	strb	r3, [r7, #23]
      break;
 8002c98:	e006      	b.n	8002ca8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e004      	b.n	8002ca8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e002      	b.n	8002ca8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e000      	b.n	8002ca8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ca6:	bf00      	nop
  }
  if (status == HAL_OK)
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10d      	bne.n	8002cca <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 0118 	bic.w	r1, r3, #24
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ce0:	f7ff fd8c 	bl	80027fc <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e316      	b.n	800331e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a66      	ldr	r2, [pc, #408]	; (8002e90 <HAL_DMA_Init+0x1b8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d04a      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a65      	ldr	r2, [pc, #404]	; (8002e94 <HAL_DMA_Init+0x1bc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d045      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a63      	ldr	r2, [pc, #396]	; (8002e98 <HAL_DMA_Init+0x1c0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d040      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a62      	ldr	r2, [pc, #392]	; (8002e9c <HAL_DMA_Init+0x1c4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d03b      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a60      	ldr	r2, [pc, #384]	; (8002ea0 <HAL_DMA_Init+0x1c8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d036      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5f      	ldr	r2, [pc, #380]	; (8002ea4 <HAL_DMA_Init+0x1cc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d031      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a5d      	ldr	r2, [pc, #372]	; (8002ea8 <HAL_DMA_Init+0x1d0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d02c      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a5c      	ldr	r2, [pc, #368]	; (8002eac <HAL_DMA_Init+0x1d4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d027      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a5a      	ldr	r2, [pc, #360]	; (8002eb0 <HAL_DMA_Init+0x1d8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d022      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a59      	ldr	r2, [pc, #356]	; (8002eb4 <HAL_DMA_Init+0x1dc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d01d      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a57      	ldr	r2, [pc, #348]	; (8002eb8 <HAL_DMA_Init+0x1e0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d018      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a56      	ldr	r2, [pc, #344]	; (8002ebc <HAL_DMA_Init+0x1e4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d013      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a54      	ldr	r2, [pc, #336]	; (8002ec0 <HAL_DMA_Init+0x1e8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00e      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a53      	ldr	r2, [pc, #332]	; (8002ec4 <HAL_DMA_Init+0x1ec>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d009      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a51      	ldr	r2, [pc, #324]	; (8002ec8 <HAL_DMA_Init+0x1f0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_DMA_Init+0xb8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a50      	ldr	r2, [pc, #320]	; (8002ecc <HAL_DMA_Init+0x1f4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d101      	bne.n	8002d94 <HAL_DMA_Init+0xbc>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <HAL_DMA_Init+0xbe>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 813b 	beq.w	8003012 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a37      	ldr	r2, [pc, #220]	; (8002e90 <HAL_DMA_Init+0x1b8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d04a      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a36      	ldr	r2, [pc, #216]	; (8002e94 <HAL_DMA_Init+0x1bc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d045      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a34      	ldr	r2, [pc, #208]	; (8002e98 <HAL_DMA_Init+0x1c0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d040      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a33      	ldr	r2, [pc, #204]	; (8002e9c <HAL_DMA_Init+0x1c4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d03b      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a31      	ldr	r2, [pc, #196]	; (8002ea0 <HAL_DMA_Init+0x1c8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d036      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a30      	ldr	r2, [pc, #192]	; (8002ea4 <HAL_DMA_Init+0x1cc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d031      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a2e      	ldr	r2, [pc, #184]	; (8002ea8 <HAL_DMA_Init+0x1d0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d02c      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a2d      	ldr	r2, [pc, #180]	; (8002eac <HAL_DMA_Init+0x1d4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d027      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a2b      	ldr	r2, [pc, #172]	; (8002eb0 <HAL_DMA_Init+0x1d8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d022      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <HAL_DMA_Init+0x1dc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d01d      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <HAL_DMA_Init+0x1e0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d018      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <HAL_DMA_Init+0x1e4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <HAL_DMA_Init+0x1e8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <HAL_DMA_Init+0x1ec>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <HAL_DMA_Init+0x1f0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_DMA_Init+0x174>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a21      	ldr	r2, [pc, #132]	; (8002ecc <HAL_DMA_Init+0x1f4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d108      	bne.n	8002e5e <HAL_DMA_Init+0x186>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e007      	b.n	8002e6e <HAL_DMA_Init+0x196>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e6e:	e02f      	b.n	8002ed0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e70:	f7ff fcc4 	bl	80027fc <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d928      	bls.n	8002ed0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2203      	movs	r2, #3
 8002e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e246      	b.n	800331e <HAL_DMA_Init+0x646>
 8002e90:	40020010 	.word	0x40020010
 8002e94:	40020028 	.word	0x40020028
 8002e98:	40020040 	.word	0x40020040
 8002e9c:	40020058 	.word	0x40020058
 8002ea0:	40020070 	.word	0x40020070
 8002ea4:	40020088 	.word	0x40020088
 8002ea8:	400200a0 	.word	0x400200a0
 8002eac:	400200b8 	.word	0x400200b8
 8002eb0:	40020410 	.word	0x40020410
 8002eb4:	40020428 	.word	0x40020428
 8002eb8:	40020440 	.word	0x40020440
 8002ebc:	40020458 	.word	0x40020458
 8002ec0:	40020470 	.word	0x40020470
 8002ec4:	40020488 	.word	0x40020488
 8002ec8:	400204a0 	.word	0x400204a0
 8002ecc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1c8      	bne.n	8002e70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4b83      	ldr	r3, [pc, #524]	; (80030f8 <HAL_DMA_Init+0x420>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002ef6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d107      	bne.n	8002f34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f34:	4b71      	ldr	r3, [pc, #452]	; (80030fc <HAL_DMA_Init+0x424>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b71      	ldr	r3, [pc, #452]	; (8003100 <HAL_DMA_Init+0x428>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f40:	d328      	bcc.n	8002f94 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b28      	cmp	r3, #40	; 0x28
 8002f48:	d903      	bls.n	8002f52 <HAL_DMA_Init+0x27a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b2e      	cmp	r3, #46	; 0x2e
 8002f50:	d917      	bls.n	8002f82 <HAL_DMA_Init+0x2aa>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b3e      	cmp	r3, #62	; 0x3e
 8002f58:	d903      	bls.n	8002f62 <HAL_DMA_Init+0x28a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b42      	cmp	r3, #66	; 0x42
 8002f60:	d90f      	bls.n	8002f82 <HAL_DMA_Init+0x2aa>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b46      	cmp	r3, #70	; 0x46
 8002f68:	d903      	bls.n	8002f72 <HAL_DMA_Init+0x29a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b48      	cmp	r3, #72	; 0x48
 8002f70:	d907      	bls.n	8002f82 <HAL_DMA_Init+0x2aa>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b4e      	cmp	r3, #78	; 0x4e
 8002f78:	d905      	bls.n	8002f86 <HAL_DMA_Init+0x2ae>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b52      	cmp	r3, #82	; 0x52
 8002f80:	d801      	bhi.n	8002f86 <HAL_DMA_Init+0x2ae>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_DMA_Init+0x2b0>
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f92:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f023 0307 	bic.w	r3, r3, #7
 8002faa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d117      	bne.n	8002fee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00e      	beq.n	8002fee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f001 fbfd 	bl	80047d0 <DMA_CheckFifoParam>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2240      	movs	r2, #64	; 0x40
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e197      	b.n	800331e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f001 fb38 	bl	800466c <DMA_CalcBaseAndBitshift>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	223f      	movs	r2, #63	; 0x3f
 800300a:	409a      	lsls	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	e0cd      	b.n	80031ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a3b      	ldr	r2, [pc, #236]	; (8003104 <HAL_DMA_Init+0x42c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d022      	beq.n	8003062 <HAL_DMA_Init+0x38a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a39      	ldr	r2, [pc, #228]	; (8003108 <HAL_DMA_Init+0x430>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01d      	beq.n	8003062 <HAL_DMA_Init+0x38a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a38      	ldr	r2, [pc, #224]	; (800310c <HAL_DMA_Init+0x434>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d018      	beq.n	8003062 <HAL_DMA_Init+0x38a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a36      	ldr	r2, [pc, #216]	; (8003110 <HAL_DMA_Init+0x438>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_DMA_Init+0x38a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a35      	ldr	r2, [pc, #212]	; (8003114 <HAL_DMA_Init+0x43c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00e      	beq.n	8003062 <HAL_DMA_Init+0x38a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a33      	ldr	r2, [pc, #204]	; (8003118 <HAL_DMA_Init+0x440>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d009      	beq.n	8003062 <HAL_DMA_Init+0x38a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a32      	ldr	r2, [pc, #200]	; (800311c <HAL_DMA_Init+0x444>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d004      	beq.n	8003062 <HAL_DMA_Init+0x38a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a30      	ldr	r2, [pc, #192]	; (8003120 <HAL_DMA_Init+0x448>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d101      	bne.n	8003066 <HAL_DMA_Init+0x38e>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_DMA_Init+0x390>
 8003066:	2300      	movs	r3, #0
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8097 	beq.w	800319c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a24      	ldr	r2, [pc, #144]	; (8003104 <HAL_DMA_Init+0x42c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d021      	beq.n	80030bc <HAL_DMA_Init+0x3e4>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a22      	ldr	r2, [pc, #136]	; (8003108 <HAL_DMA_Init+0x430>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01c      	beq.n	80030bc <HAL_DMA_Init+0x3e4>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a21      	ldr	r2, [pc, #132]	; (800310c <HAL_DMA_Init+0x434>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d017      	beq.n	80030bc <HAL_DMA_Init+0x3e4>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <HAL_DMA_Init+0x438>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d012      	beq.n	80030bc <HAL_DMA_Init+0x3e4>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1e      	ldr	r2, [pc, #120]	; (8003114 <HAL_DMA_Init+0x43c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00d      	beq.n	80030bc <HAL_DMA_Init+0x3e4>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <HAL_DMA_Init+0x440>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d008      	beq.n	80030bc <HAL_DMA_Init+0x3e4>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1b      	ldr	r2, [pc, #108]	; (800311c <HAL_DMA_Init+0x444>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d003      	beq.n	80030bc <HAL_DMA_Init+0x3e4>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <HAL_DMA_Init+0x448>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_DMA_Init+0x44c>)
 80030da:	4013      	ands	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d020      	beq.n	8003128 <HAL_DMA_Init+0x450>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b80      	cmp	r3, #128	; 0x80
 80030ec:	d102      	bne.n	80030f4 <HAL_DMA_Init+0x41c>
 80030ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030f2:	e01a      	b.n	800312a <HAL_DMA_Init+0x452>
 80030f4:	2300      	movs	r3, #0
 80030f6:	e018      	b.n	800312a <HAL_DMA_Init+0x452>
 80030f8:	fe10803f 	.word	0xfe10803f
 80030fc:	5c001000 	.word	0x5c001000
 8003100:	ffff0000 	.word	0xffff0000
 8003104:	58025408 	.word	0x58025408
 8003108:	5802541c 	.word	0x5802541c
 800310c:	58025430 	.word	0x58025430
 8003110:	58025444 	.word	0x58025444
 8003114:	58025458 	.word	0x58025458
 8003118:	5802546c 	.word	0x5802546c
 800311c:	58025480 	.word	0x58025480
 8003120:	58025494 	.word	0x58025494
 8003124:	fffe000f 	.word	0xfffe000f
 8003128:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68d2      	ldr	r2, [r2, #12]
 800312e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003130:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003140:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003148:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003150:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003158:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	4b6e      	ldr	r3, [pc, #440]	; (8003328 <HAL_DMA_Init+0x650>)
 8003170:	4413      	add	r3, r2
 8003172:	4a6e      	ldr	r2, [pc, #440]	; (800332c <HAL_DMA_Init+0x654>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	009a      	lsls	r2, r3, #2
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f001 fa73 	bl	800466c <DMA_CalcBaseAndBitshift>
 8003186:	4603      	mov	r3, r0
 8003188:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	2201      	movs	r2, #1
 8003194:	409a      	lsls	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	e008      	b.n	80031ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2240      	movs	r2, #64	; 0x40
 80031a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2203      	movs	r2, #3
 80031a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e0b7      	b.n	800331e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a5f      	ldr	r2, [pc, #380]	; (8003330 <HAL_DMA_Init+0x658>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d072      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a5d      	ldr	r2, [pc, #372]	; (8003334 <HAL_DMA_Init+0x65c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d06d      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a5c      	ldr	r2, [pc, #368]	; (8003338 <HAL_DMA_Init+0x660>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d068      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a5a      	ldr	r2, [pc, #360]	; (800333c <HAL_DMA_Init+0x664>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d063      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a59      	ldr	r2, [pc, #356]	; (8003340 <HAL_DMA_Init+0x668>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d05e      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a57      	ldr	r2, [pc, #348]	; (8003344 <HAL_DMA_Init+0x66c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d059      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a56      	ldr	r2, [pc, #344]	; (8003348 <HAL_DMA_Init+0x670>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d054      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a54      	ldr	r2, [pc, #336]	; (800334c <HAL_DMA_Init+0x674>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d04f      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a53      	ldr	r2, [pc, #332]	; (8003350 <HAL_DMA_Init+0x678>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d04a      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a51      	ldr	r2, [pc, #324]	; (8003354 <HAL_DMA_Init+0x67c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d045      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a50      	ldr	r2, [pc, #320]	; (8003358 <HAL_DMA_Init+0x680>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d040      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a4e      	ldr	r2, [pc, #312]	; (800335c <HAL_DMA_Init+0x684>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d03b      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a4d      	ldr	r2, [pc, #308]	; (8003360 <HAL_DMA_Init+0x688>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d036      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a4b      	ldr	r2, [pc, #300]	; (8003364 <HAL_DMA_Init+0x68c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d031      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a4a      	ldr	r2, [pc, #296]	; (8003368 <HAL_DMA_Init+0x690>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d02c      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a48      	ldr	r2, [pc, #288]	; (800336c <HAL_DMA_Init+0x694>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d027      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a47      	ldr	r2, [pc, #284]	; (8003370 <HAL_DMA_Init+0x698>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d022      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a45      	ldr	r2, [pc, #276]	; (8003374 <HAL_DMA_Init+0x69c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01d      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a44      	ldr	r2, [pc, #272]	; (8003378 <HAL_DMA_Init+0x6a0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d018      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a42      	ldr	r2, [pc, #264]	; (800337c <HAL_DMA_Init+0x6a4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a41      	ldr	r2, [pc, #260]	; (8003380 <HAL_DMA_Init+0x6a8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a3f      	ldr	r2, [pc, #252]	; (8003384 <HAL_DMA_Init+0x6ac>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a3e      	ldr	r2, [pc, #248]	; (8003388 <HAL_DMA_Init+0x6b0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_DMA_Init+0x5c6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a3c      	ldr	r2, [pc, #240]	; (800338c <HAL_DMA_Init+0x6b4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_DMA_Init+0x5ca>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_DMA_Init+0x5cc>
 80032a2:	2300      	movs	r3, #0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d032      	beq.n	800330e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f001 fb0d 	bl	80048c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b80      	cmp	r3, #128	; 0x80
 80032b4:	d102      	bne.n	80032bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d010      	beq.n	80032fc <HAL_DMA_Init+0x624>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d80c      	bhi.n	80032fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f001 fb8a 	bl	80049fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	e008      	b.n	800330e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	a7fdabf8 	.word	0xa7fdabf8
 800332c:	cccccccd 	.word	0xcccccccd
 8003330:	40020010 	.word	0x40020010
 8003334:	40020028 	.word	0x40020028
 8003338:	40020040 	.word	0x40020040
 800333c:	40020058 	.word	0x40020058
 8003340:	40020070 	.word	0x40020070
 8003344:	40020088 	.word	0x40020088
 8003348:	400200a0 	.word	0x400200a0
 800334c:	400200b8 	.word	0x400200b8
 8003350:	40020410 	.word	0x40020410
 8003354:	40020428 	.word	0x40020428
 8003358:	40020440 	.word	0x40020440
 800335c:	40020458 	.word	0x40020458
 8003360:	40020470 	.word	0x40020470
 8003364:	40020488 	.word	0x40020488
 8003368:	400204a0 	.word	0x400204a0
 800336c:	400204b8 	.word	0x400204b8
 8003370:	58025408 	.word	0x58025408
 8003374:	5802541c 	.word	0x5802541c
 8003378:	58025430 	.word	0x58025430
 800337c:	58025444 	.word	0x58025444
 8003380:	58025458 	.word	0x58025458
 8003384:	5802546c 	.word	0x5802546c
 8003388:	58025480 	.word	0x58025480
 800338c:	58025494 	.word	0x58025494

08003390 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e205      	b.n	80037ae <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d004      	beq.n	80033b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2280      	movs	r2, #128	; 0x80
 80033b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e1fa      	b.n	80037ae <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a8c      	ldr	r2, [pc, #560]	; (80035f0 <HAL_DMA_Abort_IT+0x260>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d04a      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a8b      	ldr	r2, [pc, #556]	; (80035f4 <HAL_DMA_Abort_IT+0x264>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d045      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a89      	ldr	r2, [pc, #548]	; (80035f8 <HAL_DMA_Abort_IT+0x268>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d040      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a88      	ldr	r2, [pc, #544]	; (80035fc <HAL_DMA_Abort_IT+0x26c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d03b      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a86      	ldr	r2, [pc, #536]	; (8003600 <HAL_DMA_Abort_IT+0x270>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d036      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a85      	ldr	r2, [pc, #532]	; (8003604 <HAL_DMA_Abort_IT+0x274>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d031      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a83      	ldr	r2, [pc, #524]	; (8003608 <HAL_DMA_Abort_IT+0x278>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d02c      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a82      	ldr	r2, [pc, #520]	; (800360c <HAL_DMA_Abort_IT+0x27c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d027      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a80      	ldr	r2, [pc, #512]	; (8003610 <HAL_DMA_Abort_IT+0x280>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d022      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a7f      	ldr	r2, [pc, #508]	; (8003614 <HAL_DMA_Abort_IT+0x284>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d01d      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a7d      	ldr	r2, [pc, #500]	; (8003618 <HAL_DMA_Abort_IT+0x288>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d018      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a7c      	ldr	r2, [pc, #496]	; (800361c <HAL_DMA_Abort_IT+0x28c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d013      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a7a      	ldr	r2, [pc, #488]	; (8003620 <HAL_DMA_Abort_IT+0x290>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00e      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a79      	ldr	r2, [pc, #484]	; (8003624 <HAL_DMA_Abort_IT+0x294>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d009      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a77      	ldr	r2, [pc, #476]	; (8003628 <HAL_DMA_Abort_IT+0x298>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d004      	beq.n	8003458 <HAL_DMA_Abort_IT+0xc8>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a76      	ldr	r2, [pc, #472]	; (800362c <HAL_DMA_Abort_IT+0x29c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d101      	bne.n	800345c <HAL_DMA_Abort_IT+0xcc>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <HAL_DMA_Abort_IT+0xce>
 800345c:	2300      	movs	r3, #0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d065      	beq.n	800352e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2204      	movs	r2, #4
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a60      	ldr	r2, [pc, #384]	; (80035f0 <HAL_DMA_Abort_IT+0x260>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d04a      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a5e      	ldr	r2, [pc, #376]	; (80035f4 <HAL_DMA_Abort_IT+0x264>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d045      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a5d      	ldr	r2, [pc, #372]	; (80035f8 <HAL_DMA_Abort_IT+0x268>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d040      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5b      	ldr	r2, [pc, #364]	; (80035fc <HAL_DMA_Abort_IT+0x26c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d03b      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a5a      	ldr	r2, [pc, #360]	; (8003600 <HAL_DMA_Abort_IT+0x270>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d036      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a58      	ldr	r2, [pc, #352]	; (8003604 <HAL_DMA_Abort_IT+0x274>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a57      	ldr	r2, [pc, #348]	; (8003608 <HAL_DMA_Abort_IT+0x278>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d02c      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a55      	ldr	r2, [pc, #340]	; (800360c <HAL_DMA_Abort_IT+0x27c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d027      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a54      	ldr	r2, [pc, #336]	; (8003610 <HAL_DMA_Abort_IT+0x280>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a52      	ldr	r2, [pc, #328]	; (8003614 <HAL_DMA_Abort_IT+0x284>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a51      	ldr	r2, [pc, #324]	; (8003618 <HAL_DMA_Abort_IT+0x288>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a4f      	ldr	r2, [pc, #316]	; (800361c <HAL_DMA_Abort_IT+0x28c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a4e      	ldr	r2, [pc, #312]	; (8003620 <HAL_DMA_Abort_IT+0x290>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a4c      	ldr	r2, [pc, #304]	; (8003624 <HAL_DMA_Abort_IT+0x294>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a4b      	ldr	r2, [pc, #300]	; (8003628 <HAL_DMA_Abort_IT+0x298>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_Abort_IT+0x17a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a49      	ldr	r2, [pc, #292]	; (800362c <HAL_DMA_Abort_IT+0x29c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d108      	bne.n	800351c <HAL_DMA_Abort_IT+0x18c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e147      	b.n	80037ac <HAL_DMA_Abort_IT+0x41c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e13e      	b.n	80037ac <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 020e 	bic.w	r2, r2, #14
 800353c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2b      	ldr	r2, [pc, #172]	; (80035f0 <HAL_DMA_Abort_IT+0x260>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d04a      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a29      	ldr	r2, [pc, #164]	; (80035f4 <HAL_DMA_Abort_IT+0x264>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d045      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <HAL_DMA_Abort_IT+0x268>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d040      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a26      	ldr	r2, [pc, #152]	; (80035fc <HAL_DMA_Abort_IT+0x26c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d03b      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a25      	ldr	r2, [pc, #148]	; (8003600 <HAL_DMA_Abort_IT+0x270>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d036      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a23      	ldr	r2, [pc, #140]	; (8003604 <HAL_DMA_Abort_IT+0x274>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d031      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a22      	ldr	r2, [pc, #136]	; (8003608 <HAL_DMA_Abort_IT+0x278>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d02c      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a20      	ldr	r2, [pc, #128]	; (800360c <HAL_DMA_Abort_IT+0x27c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d027      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <HAL_DMA_Abort_IT+0x280>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <HAL_DMA_Abort_IT+0x284>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01d      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <HAL_DMA_Abort_IT+0x288>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d018      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1a      	ldr	r2, [pc, #104]	; (800361c <HAL_DMA_Abort_IT+0x28c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a19      	ldr	r2, [pc, #100]	; (8003620 <HAL_DMA_Abort_IT+0x290>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a17      	ldr	r2, [pc, #92]	; (8003624 <HAL_DMA_Abort_IT+0x294>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a16      	ldr	r2, [pc, #88]	; (8003628 <HAL_DMA_Abort_IT+0x298>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_DMA_Abort_IT+0x24e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a14      	ldr	r2, [pc, #80]	; (800362c <HAL_DMA_Abort_IT+0x29c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d128      	bne.n	8003630 <HAL_DMA_Abort_IT+0x2a0>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0201 	bic.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e027      	b.n	8003640 <HAL_DMA_Abort_IT+0x2b0>
 80035f0:	40020010 	.word	0x40020010
 80035f4:	40020028 	.word	0x40020028
 80035f8:	40020040 	.word	0x40020040
 80035fc:	40020058 	.word	0x40020058
 8003600:	40020070 	.word	0x40020070
 8003604:	40020088 	.word	0x40020088
 8003608:	400200a0 	.word	0x400200a0
 800360c:	400200b8 	.word	0x400200b8
 8003610:	40020410 	.word	0x40020410
 8003614:	40020428 	.word	0x40020428
 8003618:	40020440 	.word	0x40020440
 800361c:	40020458 	.word	0x40020458
 8003620:	40020470 	.word	0x40020470
 8003624:	40020488 	.word	0x40020488
 8003628:	400204a0 	.word	0x400204a0
 800362c:	400204b8 	.word	0x400204b8
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a5c      	ldr	r2, [pc, #368]	; (80037b8 <HAL_DMA_Abort_IT+0x428>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d072      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a5b      	ldr	r2, [pc, #364]	; (80037bc <HAL_DMA_Abort_IT+0x42c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d06d      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a59      	ldr	r2, [pc, #356]	; (80037c0 <HAL_DMA_Abort_IT+0x430>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d068      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a58      	ldr	r2, [pc, #352]	; (80037c4 <HAL_DMA_Abort_IT+0x434>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d063      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a56      	ldr	r2, [pc, #344]	; (80037c8 <HAL_DMA_Abort_IT+0x438>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d05e      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a55      	ldr	r2, [pc, #340]	; (80037cc <HAL_DMA_Abort_IT+0x43c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d059      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a53      	ldr	r2, [pc, #332]	; (80037d0 <HAL_DMA_Abort_IT+0x440>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d054      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a52      	ldr	r2, [pc, #328]	; (80037d4 <HAL_DMA_Abort_IT+0x444>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d04f      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a50      	ldr	r2, [pc, #320]	; (80037d8 <HAL_DMA_Abort_IT+0x448>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d04a      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a4f      	ldr	r2, [pc, #316]	; (80037dc <HAL_DMA_Abort_IT+0x44c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d045      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a4d      	ldr	r2, [pc, #308]	; (80037e0 <HAL_DMA_Abort_IT+0x450>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d040      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a4c      	ldr	r2, [pc, #304]	; (80037e4 <HAL_DMA_Abort_IT+0x454>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d03b      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a4a      	ldr	r2, [pc, #296]	; (80037e8 <HAL_DMA_Abort_IT+0x458>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d036      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a49      	ldr	r2, [pc, #292]	; (80037ec <HAL_DMA_Abort_IT+0x45c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d031      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a47      	ldr	r2, [pc, #284]	; (80037f0 <HAL_DMA_Abort_IT+0x460>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d02c      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a46      	ldr	r2, [pc, #280]	; (80037f4 <HAL_DMA_Abort_IT+0x464>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d027      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a44      	ldr	r2, [pc, #272]	; (80037f8 <HAL_DMA_Abort_IT+0x468>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d022      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a43      	ldr	r2, [pc, #268]	; (80037fc <HAL_DMA_Abort_IT+0x46c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d01d      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a41      	ldr	r2, [pc, #260]	; (8003800 <HAL_DMA_Abort_IT+0x470>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d018      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a40      	ldr	r2, [pc, #256]	; (8003804 <HAL_DMA_Abort_IT+0x474>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d013      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a3e      	ldr	r2, [pc, #248]	; (8003808 <HAL_DMA_Abort_IT+0x478>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00e      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a3d      	ldr	r2, [pc, #244]	; (800380c <HAL_DMA_Abort_IT+0x47c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d009      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a3b      	ldr	r2, [pc, #236]	; (8003810 <HAL_DMA_Abort_IT+0x480>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_DMA_Abort_IT+0x3a0>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a3a      	ldr	r2, [pc, #232]	; (8003814 <HAL_DMA_Abort_IT+0x484>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_DMA_Abort_IT+0x3a4>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <HAL_DMA_Abort_IT+0x3a6>
 8003734:	2300      	movs	r3, #0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d028      	beq.n	800378c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003748:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	2201      	movs	r2, #1
 800375a:	409a      	lsls	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003768:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00c      	beq.n	800378c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003780:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800378a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40020010 	.word	0x40020010
 80037bc:	40020028 	.word	0x40020028
 80037c0:	40020040 	.word	0x40020040
 80037c4:	40020058 	.word	0x40020058
 80037c8:	40020070 	.word	0x40020070
 80037cc:	40020088 	.word	0x40020088
 80037d0:	400200a0 	.word	0x400200a0
 80037d4:	400200b8 	.word	0x400200b8
 80037d8:	40020410 	.word	0x40020410
 80037dc:	40020428 	.word	0x40020428
 80037e0:	40020440 	.word	0x40020440
 80037e4:	40020458 	.word	0x40020458
 80037e8:	40020470 	.word	0x40020470
 80037ec:	40020488 	.word	0x40020488
 80037f0:	400204a0 	.word	0x400204a0
 80037f4:	400204b8 	.word	0x400204b8
 80037f8:	58025408 	.word	0x58025408
 80037fc:	5802541c 	.word	0x5802541c
 8003800:	58025430 	.word	0x58025430
 8003804:	58025444 	.word	0x58025444
 8003808:	58025458 	.word	0x58025458
 800380c:	5802546c 	.word	0x5802546c
 8003810:	58025480 	.word	0x58025480
 8003814:	58025494 	.word	0x58025494

08003818 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003824:	4b67      	ldr	r3, [pc, #412]	; (80039c4 <HAL_DMA_IRQHandler+0x1ac>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a67      	ldr	r2, [pc, #412]	; (80039c8 <HAL_DMA_IRQHandler+0x1b0>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0a9b      	lsrs	r3, r3, #10
 8003830:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a5f      	ldr	r2, [pc, #380]	; (80039cc <HAL_DMA_IRQHandler+0x1b4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d04a      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a5d      	ldr	r2, [pc, #372]	; (80039d0 <HAL_DMA_IRQHandler+0x1b8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d045      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a5c      	ldr	r2, [pc, #368]	; (80039d4 <HAL_DMA_IRQHandler+0x1bc>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d040      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5a      	ldr	r2, [pc, #360]	; (80039d8 <HAL_DMA_IRQHandler+0x1c0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d03b      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a59      	ldr	r2, [pc, #356]	; (80039dc <HAL_DMA_IRQHandler+0x1c4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d036      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a57      	ldr	r2, [pc, #348]	; (80039e0 <HAL_DMA_IRQHandler+0x1c8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d031      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a56      	ldr	r2, [pc, #344]	; (80039e4 <HAL_DMA_IRQHandler+0x1cc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d02c      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a54      	ldr	r2, [pc, #336]	; (80039e8 <HAL_DMA_IRQHandler+0x1d0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d027      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a53      	ldr	r2, [pc, #332]	; (80039ec <HAL_DMA_IRQHandler+0x1d4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d022      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a51      	ldr	r2, [pc, #324]	; (80039f0 <HAL_DMA_IRQHandler+0x1d8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01d      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a50      	ldr	r2, [pc, #320]	; (80039f4 <HAL_DMA_IRQHandler+0x1dc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d018      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a4e      	ldr	r2, [pc, #312]	; (80039f8 <HAL_DMA_IRQHandler+0x1e0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a4d      	ldr	r2, [pc, #308]	; (80039fc <HAL_DMA_IRQHandler+0x1e4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00e      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a4b      	ldr	r2, [pc, #300]	; (8003a00 <HAL_DMA_IRQHandler+0x1e8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d009      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a4a      	ldr	r2, [pc, #296]	; (8003a04 <HAL_DMA_IRQHandler+0x1ec>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d004      	beq.n	80038ea <HAL_DMA_IRQHandler+0xd2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a48      	ldr	r2, [pc, #288]	; (8003a08 <HAL_DMA_IRQHandler+0x1f0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d101      	bne.n	80038ee <HAL_DMA_IRQHandler+0xd6>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_DMA_IRQHandler+0xd8>
 80038ee:	2300      	movs	r3, #0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 842b 	beq.w	800414c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	f003 031f 	and.w	r3, r3, #31
 80038fe:	2208      	movs	r2, #8
 8003900:	409a      	lsls	r2, r3
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80a2 	beq.w	8003a50 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2e      	ldr	r2, [pc, #184]	; (80039cc <HAL_DMA_IRQHandler+0x1b4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d04a      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a2d      	ldr	r2, [pc, #180]	; (80039d0 <HAL_DMA_IRQHandler+0x1b8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d045      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <HAL_DMA_IRQHandler+0x1bc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d040      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2a      	ldr	r2, [pc, #168]	; (80039d8 <HAL_DMA_IRQHandler+0x1c0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d03b      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a28      	ldr	r2, [pc, #160]	; (80039dc <HAL_DMA_IRQHandler+0x1c4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d036      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a27      	ldr	r2, [pc, #156]	; (80039e0 <HAL_DMA_IRQHandler+0x1c8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d031      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a25      	ldr	r2, [pc, #148]	; (80039e4 <HAL_DMA_IRQHandler+0x1cc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d02c      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a24      	ldr	r2, [pc, #144]	; (80039e8 <HAL_DMA_IRQHandler+0x1d0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d027      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a22      	ldr	r2, [pc, #136]	; (80039ec <HAL_DMA_IRQHandler+0x1d4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d022      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a21      	ldr	r2, [pc, #132]	; (80039f0 <HAL_DMA_IRQHandler+0x1d8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d01d      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1f      	ldr	r2, [pc, #124]	; (80039f4 <HAL_DMA_IRQHandler+0x1dc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d018      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <HAL_DMA_IRQHandler+0x1e0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d013      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <HAL_DMA_IRQHandler+0x1e4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00e      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1b      	ldr	r2, [pc, #108]	; (8003a00 <HAL_DMA_IRQHandler+0x1e8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d009      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a19      	ldr	r2, [pc, #100]	; (8003a04 <HAL_DMA_IRQHandler+0x1ec>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_DMA_IRQHandler+0x194>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a18      	ldr	r2, [pc, #96]	; (8003a08 <HAL_DMA_IRQHandler+0x1f0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d12f      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x1f4>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf14      	ite	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	2300      	moveq	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	e02e      	b.n	8003a20 <HAL_DMA_IRQHandler+0x208>
 80039c2:	bf00      	nop
 80039c4:	20000000 	.word	0x20000000
 80039c8:	1b4e81b5 	.word	0x1b4e81b5
 80039cc:	40020010 	.word	0x40020010
 80039d0:	40020028 	.word	0x40020028
 80039d4:	40020040 	.word	0x40020040
 80039d8:	40020058 	.word	0x40020058
 80039dc:	40020070 	.word	0x40020070
 80039e0:	40020088 	.word	0x40020088
 80039e4:	400200a0 	.word	0x400200a0
 80039e8:	400200b8 	.word	0x400200b8
 80039ec:	40020410 	.word	0x40020410
 80039f0:	40020428 	.word	0x40020428
 80039f4:	40020440 	.word	0x40020440
 80039f8:	40020458 	.word	0x40020458
 80039fc:	40020470 	.word	0x40020470
 8003a00:	40020488 	.word	0x40020488
 8003a04:	400204a0 	.word	0x400204a0
 8003a08:	400204b8 	.word	0x400204b8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bf14      	ite	ne
 8003a1a:	2301      	movne	r3, #1
 8003a1c:	2300      	moveq	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d015      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0204 	bic.w	r2, r2, #4
 8003a32:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	f043 0201 	orr.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d06e      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a69      	ldr	r2, [pc, #420]	; (8003c10 <HAL_DMA_IRQHandler+0x3f8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d04a      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a67      	ldr	r2, [pc, #412]	; (8003c14 <HAL_DMA_IRQHandler+0x3fc>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d045      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a66      	ldr	r2, [pc, #408]	; (8003c18 <HAL_DMA_IRQHandler+0x400>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d040      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a64      	ldr	r2, [pc, #400]	; (8003c1c <HAL_DMA_IRQHandler+0x404>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d03b      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a63      	ldr	r2, [pc, #396]	; (8003c20 <HAL_DMA_IRQHandler+0x408>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d036      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a61      	ldr	r2, [pc, #388]	; (8003c24 <HAL_DMA_IRQHandler+0x40c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d031      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a60      	ldr	r2, [pc, #384]	; (8003c28 <HAL_DMA_IRQHandler+0x410>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d02c      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a5e      	ldr	r2, [pc, #376]	; (8003c2c <HAL_DMA_IRQHandler+0x414>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d027      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a5d      	ldr	r2, [pc, #372]	; (8003c30 <HAL_DMA_IRQHandler+0x418>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d022      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a5b      	ldr	r2, [pc, #364]	; (8003c34 <HAL_DMA_IRQHandler+0x41c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01d      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a5a      	ldr	r2, [pc, #360]	; (8003c38 <HAL_DMA_IRQHandler+0x420>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d018      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a58      	ldr	r2, [pc, #352]	; (8003c3c <HAL_DMA_IRQHandler+0x424>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a57      	ldr	r2, [pc, #348]	; (8003c40 <HAL_DMA_IRQHandler+0x428>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00e      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a55      	ldr	r2, [pc, #340]	; (8003c44 <HAL_DMA_IRQHandler+0x42c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d009      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a54      	ldr	r2, [pc, #336]	; (8003c48 <HAL_DMA_IRQHandler+0x430>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d004      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2ee>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a52      	ldr	r2, [pc, #328]	; (8003c4c <HAL_DMA_IRQHandler+0x434>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d10a      	bne.n	8003b1c <HAL_DMA_IRQHandler+0x304>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf14      	ite	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	2300      	moveq	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	e003      	b.n	8003b24 <HAL_DMA_IRQHandler+0x30c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00d      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2201      	movs	r2, #1
 8003b32:	409a      	lsls	r2, r3
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3c:	f043 0202 	orr.w	r2, r3, #2
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 808f 	beq.w	8003c78 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2c      	ldr	r2, [pc, #176]	; (8003c10 <HAL_DMA_IRQHandler+0x3f8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d04a      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2a      	ldr	r2, [pc, #168]	; (8003c14 <HAL_DMA_IRQHandler+0x3fc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d045      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a29      	ldr	r2, [pc, #164]	; (8003c18 <HAL_DMA_IRQHandler+0x400>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d040      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a27      	ldr	r2, [pc, #156]	; (8003c1c <HAL_DMA_IRQHandler+0x404>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d03b      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a26      	ldr	r2, [pc, #152]	; (8003c20 <HAL_DMA_IRQHandler+0x408>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d036      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a24      	ldr	r2, [pc, #144]	; (8003c24 <HAL_DMA_IRQHandler+0x40c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d031      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a23      	ldr	r2, [pc, #140]	; (8003c28 <HAL_DMA_IRQHandler+0x410>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d02c      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a21      	ldr	r2, [pc, #132]	; (8003c2c <HAL_DMA_IRQHandler+0x414>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d027      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a20      	ldr	r2, [pc, #128]	; (8003c30 <HAL_DMA_IRQHandler+0x418>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d022      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1e      	ldr	r2, [pc, #120]	; (8003c34 <HAL_DMA_IRQHandler+0x41c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01d      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1d      	ldr	r2, [pc, #116]	; (8003c38 <HAL_DMA_IRQHandler+0x420>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d018      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1b      	ldr	r2, [pc, #108]	; (8003c3c <HAL_DMA_IRQHandler+0x424>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d013      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1a      	ldr	r2, [pc, #104]	; (8003c40 <HAL_DMA_IRQHandler+0x428>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00e      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <HAL_DMA_IRQHandler+0x42c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d009      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a17      	ldr	r2, [pc, #92]	; (8003c48 <HAL_DMA_IRQHandler+0x430>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d004      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x3e2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <HAL_DMA_IRQHandler+0x434>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d12a      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x438>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e023      	b.n	8003c58 <HAL_DMA_IRQHandler+0x440>
 8003c10:	40020010 	.word	0x40020010
 8003c14:	40020028 	.word	0x40020028
 8003c18:	40020040 	.word	0x40020040
 8003c1c:	40020058 	.word	0x40020058
 8003c20:	40020070 	.word	0x40020070
 8003c24:	40020088 	.word	0x40020088
 8003c28:	400200a0 	.word	0x400200a0
 8003c2c:	400200b8 	.word	0x400200b8
 8003c30:	40020410 	.word	0x40020410
 8003c34:	40020428 	.word	0x40020428
 8003c38:	40020440 	.word	0x40020440
 8003c3c:	40020458 	.word	0x40020458
 8003c40:	40020470 	.word	0x40020470
 8003c44:	40020488 	.word	0x40020488
 8003c48:	400204a0 	.word	0x400204a0
 8003c4c:	400204b8 	.word	0x400204b8
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2300      	movs	r3, #0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00d      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2204      	movs	r2, #4
 8003c66:	409a      	lsls	r2, r3
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	f043 0204 	orr.w	r2, r3, #4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	2210      	movs	r2, #16
 8003c82:	409a      	lsls	r2, r3
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80a6 	beq.w	8003dda <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a85      	ldr	r2, [pc, #532]	; (8003ea8 <HAL_DMA_IRQHandler+0x690>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d04a      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a83      	ldr	r2, [pc, #524]	; (8003eac <HAL_DMA_IRQHandler+0x694>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d045      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a82      	ldr	r2, [pc, #520]	; (8003eb0 <HAL_DMA_IRQHandler+0x698>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d040      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a80      	ldr	r2, [pc, #512]	; (8003eb4 <HAL_DMA_IRQHandler+0x69c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d03b      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a7f      	ldr	r2, [pc, #508]	; (8003eb8 <HAL_DMA_IRQHandler+0x6a0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d036      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a7d      	ldr	r2, [pc, #500]	; (8003ebc <HAL_DMA_IRQHandler+0x6a4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d031      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a7c      	ldr	r2, [pc, #496]	; (8003ec0 <HAL_DMA_IRQHandler+0x6a8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d02c      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a7a      	ldr	r2, [pc, #488]	; (8003ec4 <HAL_DMA_IRQHandler+0x6ac>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d027      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a79      	ldr	r2, [pc, #484]	; (8003ec8 <HAL_DMA_IRQHandler+0x6b0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d022      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a77      	ldr	r2, [pc, #476]	; (8003ecc <HAL_DMA_IRQHandler+0x6b4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d01d      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a76      	ldr	r2, [pc, #472]	; (8003ed0 <HAL_DMA_IRQHandler+0x6b8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d018      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a74      	ldr	r2, [pc, #464]	; (8003ed4 <HAL_DMA_IRQHandler+0x6bc>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a73      	ldr	r2, [pc, #460]	; (8003ed8 <HAL_DMA_IRQHandler+0x6c0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00e      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a71      	ldr	r2, [pc, #452]	; (8003edc <HAL_DMA_IRQHandler+0x6c4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d009      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a70      	ldr	r2, [pc, #448]	; (8003ee0 <HAL_DMA_IRQHandler+0x6c8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x516>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a6e      	ldr	r2, [pc, #440]	; (8003ee4 <HAL_DMA_IRQHandler+0x6cc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10a      	bne.n	8003d44 <HAL_DMA_IRQHandler+0x52c>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e009      	b.n	8003d58 <HAL_DMA_IRQHandler+0x540>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bf14      	ite	ne
 8003d52:	2301      	movne	r3, #1
 8003d54:	2300      	moveq	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d03e      	beq.n	8003dda <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	2210      	movs	r2, #16
 8003d66:	409a      	lsls	r2, r3
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d018      	beq.n	8003dac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d108      	bne.n	8003d9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d024      	beq.n	8003dda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4798      	blx	r3
 8003d98:	e01f      	b.n	8003dda <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01b      	beq.n	8003dda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
 8003daa:	e016      	b.n	8003dda <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d107      	bne.n	8003dca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0208 	bic.w	r2, r2, #8
 8003dc8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	2220      	movs	r2, #32
 8003de4:	409a      	lsls	r2, r3
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8110 	beq.w	8004010 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a2c      	ldr	r2, [pc, #176]	; (8003ea8 <HAL_DMA_IRQHandler+0x690>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d04a      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2b      	ldr	r2, [pc, #172]	; (8003eac <HAL_DMA_IRQHandler+0x694>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d045      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a29      	ldr	r2, [pc, #164]	; (8003eb0 <HAL_DMA_IRQHandler+0x698>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d040      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a28      	ldr	r2, [pc, #160]	; (8003eb4 <HAL_DMA_IRQHandler+0x69c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d03b      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a26      	ldr	r2, [pc, #152]	; (8003eb8 <HAL_DMA_IRQHandler+0x6a0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d036      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a25      	ldr	r2, [pc, #148]	; (8003ebc <HAL_DMA_IRQHandler+0x6a4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d031      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a23      	ldr	r2, [pc, #140]	; (8003ec0 <HAL_DMA_IRQHandler+0x6a8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d02c      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a22      	ldr	r2, [pc, #136]	; (8003ec4 <HAL_DMA_IRQHandler+0x6ac>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d027      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a20      	ldr	r2, [pc, #128]	; (8003ec8 <HAL_DMA_IRQHandler+0x6b0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d022      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ecc <HAL_DMA_IRQHandler+0x6b4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d01d      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <HAL_DMA_IRQHandler+0x6b8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d018      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <HAL_DMA_IRQHandler+0x6bc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d013      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a1a      	ldr	r2, [pc, #104]	; (8003ed8 <HAL_DMA_IRQHandler+0x6c0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00e      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a19      	ldr	r2, [pc, #100]	; (8003edc <HAL_DMA_IRQHandler+0x6c4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d009      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a17      	ldr	r2, [pc, #92]	; (8003ee0 <HAL_DMA_IRQHandler+0x6c8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d004      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x678>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <HAL_DMA_IRQHandler+0x6cc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d12b      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0x6d0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bf14      	ite	ne
 8003e9e:	2301      	movne	r3, #1
 8003ea0:	2300      	moveq	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	e02a      	b.n	8003efc <HAL_DMA_IRQHandler+0x6e4>
 8003ea6:	bf00      	nop
 8003ea8:	40020010 	.word	0x40020010
 8003eac:	40020028 	.word	0x40020028
 8003eb0:	40020040 	.word	0x40020040
 8003eb4:	40020058 	.word	0x40020058
 8003eb8:	40020070 	.word	0x40020070
 8003ebc:	40020088 	.word	0x40020088
 8003ec0:	400200a0 	.word	0x400200a0
 8003ec4:	400200b8 	.word	0x400200b8
 8003ec8:	40020410 	.word	0x40020410
 8003ecc:	40020428 	.word	0x40020428
 8003ed0:	40020440 	.word	0x40020440
 8003ed4:	40020458 	.word	0x40020458
 8003ed8:	40020470 	.word	0x40020470
 8003edc:	40020488 	.word	0x40020488
 8003ee0:	400204a0 	.word	0x400204a0
 8003ee4:	400204b8 	.word	0x400204b8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bf14      	ite	ne
 8003ef6:	2301      	movne	r3, #1
 8003ef8:	2300      	moveq	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8087 	beq.w	8004010 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d139      	bne.n	8003f92 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0216 	bic.w	r2, r2, #22
 8003f2c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f3c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <HAL_DMA_IRQHandler+0x736>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0208 	bic.w	r2, r2, #8
 8003f5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	223f      	movs	r2, #63	; 0x3f
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 834a 	beq.w	800461c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
          }
          return;
 8003f90:	e344      	b.n	800461c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d018      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d108      	bne.n	8003fc0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d02c      	beq.n	8004010 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
 8003fbe:	e027      	b.n	8004010 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d023      	beq.n	8004010 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
 8003fd0:	e01e      	b.n	8004010 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10f      	bne.n	8004000 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0210 	bic.w	r2, r2, #16
 8003fee:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8306 	beq.w	8004626 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 8088 	beq.w	8004138 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2204      	movs	r2, #4
 800402c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a7a      	ldr	r2, [pc, #488]	; (8004220 <HAL_DMA_IRQHandler+0xa08>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d04a      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a79      	ldr	r2, [pc, #484]	; (8004224 <HAL_DMA_IRQHandler+0xa0c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d045      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a77      	ldr	r2, [pc, #476]	; (8004228 <HAL_DMA_IRQHandler+0xa10>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d040      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a76      	ldr	r2, [pc, #472]	; (800422c <HAL_DMA_IRQHandler+0xa14>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d03b      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a74      	ldr	r2, [pc, #464]	; (8004230 <HAL_DMA_IRQHandler+0xa18>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d036      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a73      	ldr	r2, [pc, #460]	; (8004234 <HAL_DMA_IRQHandler+0xa1c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d031      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a71      	ldr	r2, [pc, #452]	; (8004238 <HAL_DMA_IRQHandler+0xa20>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d02c      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a70      	ldr	r2, [pc, #448]	; (800423c <HAL_DMA_IRQHandler+0xa24>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d027      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a6e      	ldr	r2, [pc, #440]	; (8004240 <HAL_DMA_IRQHandler+0xa28>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d022      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a6d      	ldr	r2, [pc, #436]	; (8004244 <HAL_DMA_IRQHandler+0xa2c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d01d      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a6b      	ldr	r2, [pc, #428]	; (8004248 <HAL_DMA_IRQHandler+0xa30>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d018      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a6a      	ldr	r2, [pc, #424]	; (800424c <HAL_DMA_IRQHandler+0xa34>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d013      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a68      	ldr	r2, [pc, #416]	; (8004250 <HAL_DMA_IRQHandler+0xa38>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00e      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a67      	ldr	r2, [pc, #412]	; (8004254 <HAL_DMA_IRQHandler+0xa3c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d009      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a65      	ldr	r2, [pc, #404]	; (8004258 <HAL_DMA_IRQHandler+0xa40>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x8b8>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a64      	ldr	r2, [pc, #400]	; (800425c <HAL_DMA_IRQHandler+0xa44>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d108      	bne.n	80040e2 <HAL_DMA_IRQHandler+0x8ca>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	e007      	b.n	80040f2 <HAL_DMA_IRQHandler+0x8da>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3301      	adds	r3, #1
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d307      	bcc.n	800410e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f2      	bne.n	80040f2 <HAL_DMA_IRQHandler+0x8da>
 800410c:	e000      	b.n	8004110 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800410e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2203      	movs	r2, #3
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800412e:	e003      	b.n	8004138 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8272 	beq.w	8004626 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
 800414a:	e26c      	b.n	8004626 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a43      	ldr	r2, [pc, #268]	; (8004260 <HAL_DMA_IRQHandler+0xa48>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d022      	beq.n	800419c <HAL_DMA_IRQHandler+0x984>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a42      	ldr	r2, [pc, #264]	; (8004264 <HAL_DMA_IRQHandler+0xa4c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d01d      	beq.n	800419c <HAL_DMA_IRQHandler+0x984>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a40      	ldr	r2, [pc, #256]	; (8004268 <HAL_DMA_IRQHandler+0xa50>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d018      	beq.n	800419c <HAL_DMA_IRQHandler+0x984>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a3f      	ldr	r2, [pc, #252]	; (800426c <HAL_DMA_IRQHandler+0xa54>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d013      	beq.n	800419c <HAL_DMA_IRQHandler+0x984>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a3d      	ldr	r2, [pc, #244]	; (8004270 <HAL_DMA_IRQHandler+0xa58>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00e      	beq.n	800419c <HAL_DMA_IRQHandler+0x984>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a3c      	ldr	r2, [pc, #240]	; (8004274 <HAL_DMA_IRQHandler+0xa5c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d009      	beq.n	800419c <HAL_DMA_IRQHandler+0x984>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a3a      	ldr	r2, [pc, #232]	; (8004278 <HAL_DMA_IRQHandler+0xa60>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_DMA_IRQHandler+0x984>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a39      	ldr	r2, [pc, #228]	; (800427c <HAL_DMA_IRQHandler+0xa64>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <HAL_DMA_IRQHandler+0x988>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <HAL_DMA_IRQHandler+0x98a>
 80041a0:	2300      	movs	r3, #0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 823f 	beq.w	8004626 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	2204      	movs	r2, #4
 80041ba:	409a      	lsls	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80cd 	beq.w	8004360 <HAL_DMA_IRQHandler+0xb48>
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80c7 	beq.w	8004360 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	2204      	movs	r2, #4
 80041dc:	409a      	lsls	r2, r3
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d049      	beq.n	8004280 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8210 	beq.w	8004620 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004208:	e20a      	b.n	8004620 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8206 	beq.w	8004620 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800421c:	e200      	b.n	8004620 <HAL_DMA_IRQHandler+0xe08>
 800421e:	bf00      	nop
 8004220:	40020010 	.word	0x40020010
 8004224:	40020028 	.word	0x40020028
 8004228:	40020040 	.word	0x40020040
 800422c:	40020058 	.word	0x40020058
 8004230:	40020070 	.word	0x40020070
 8004234:	40020088 	.word	0x40020088
 8004238:	400200a0 	.word	0x400200a0
 800423c:	400200b8 	.word	0x400200b8
 8004240:	40020410 	.word	0x40020410
 8004244:	40020428 	.word	0x40020428
 8004248:	40020440 	.word	0x40020440
 800424c:	40020458 	.word	0x40020458
 8004250:	40020470 	.word	0x40020470
 8004254:	40020488 	.word	0x40020488
 8004258:	400204a0 	.word	0x400204a0
 800425c:	400204b8 	.word	0x400204b8
 8004260:	58025408 	.word	0x58025408
 8004264:	5802541c 	.word	0x5802541c
 8004268:	58025430 	.word	0x58025430
 800426c:	58025444 	.word	0x58025444
 8004270:	58025458 	.word	0x58025458
 8004274:	5802546c 	.word	0x5802546c
 8004278:	58025480 	.word	0x58025480
 800427c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d160      	bne.n	800434c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a8c      	ldr	r2, [pc, #560]	; (80044c0 <HAL_DMA_IRQHandler+0xca8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d04a      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a8a      	ldr	r2, [pc, #552]	; (80044c4 <HAL_DMA_IRQHandler+0xcac>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d045      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a89      	ldr	r2, [pc, #548]	; (80044c8 <HAL_DMA_IRQHandler+0xcb0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d040      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a87      	ldr	r2, [pc, #540]	; (80044cc <HAL_DMA_IRQHandler+0xcb4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d03b      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a86      	ldr	r2, [pc, #536]	; (80044d0 <HAL_DMA_IRQHandler+0xcb8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d036      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a84      	ldr	r2, [pc, #528]	; (80044d4 <HAL_DMA_IRQHandler+0xcbc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d031      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a83      	ldr	r2, [pc, #524]	; (80044d8 <HAL_DMA_IRQHandler+0xcc0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d02c      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a81      	ldr	r2, [pc, #516]	; (80044dc <HAL_DMA_IRQHandler+0xcc4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d027      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a80      	ldr	r2, [pc, #512]	; (80044e0 <HAL_DMA_IRQHandler+0xcc8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d022      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a7e      	ldr	r2, [pc, #504]	; (80044e4 <HAL_DMA_IRQHandler+0xccc>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01d      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a7d      	ldr	r2, [pc, #500]	; (80044e8 <HAL_DMA_IRQHandler+0xcd0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d018      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a7b      	ldr	r2, [pc, #492]	; (80044ec <HAL_DMA_IRQHandler+0xcd4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a7a      	ldr	r2, [pc, #488]	; (80044f0 <HAL_DMA_IRQHandler+0xcd8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00e      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a78      	ldr	r2, [pc, #480]	; (80044f4 <HAL_DMA_IRQHandler+0xcdc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d009      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a77      	ldr	r2, [pc, #476]	; (80044f8 <HAL_DMA_IRQHandler+0xce0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_DMA_IRQHandler+0xb12>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a75      	ldr	r2, [pc, #468]	; (80044fc <HAL_DMA_IRQHandler+0xce4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d108      	bne.n	800433c <HAL_DMA_IRQHandler+0xb24>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0208 	bic.w	r2, r2, #8
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	e007      	b.n	800434c <HAL_DMA_IRQHandler+0xb34>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0204 	bic.w	r2, r2, #4
 800434a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8165 	beq.w	8004620 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800435e:	e15f      	b.n	8004620 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	2202      	movs	r2, #2
 800436a:	409a      	lsls	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	4013      	ands	r3, r2
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80c5 	beq.w	8004500 <HAL_DMA_IRQHandler+0xce8>
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80bf 	beq.w	8004500 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	2202      	movs	r2, #2
 800438c:	409a      	lsls	r2, r3
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d018      	beq.n	80043ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d109      	bne.n	80043ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 813a 	beq.w	8004624 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043b8:	e134      	b.n	8004624 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8130 	beq.w	8004624 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043cc:	e12a      	b.n	8004624 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d168      	bne.n	80044aa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a38      	ldr	r2, [pc, #224]	; (80044c0 <HAL_DMA_IRQHandler+0xca8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d04a      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a37      	ldr	r2, [pc, #220]	; (80044c4 <HAL_DMA_IRQHandler+0xcac>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d045      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a35      	ldr	r2, [pc, #212]	; (80044c8 <HAL_DMA_IRQHandler+0xcb0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d040      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a34      	ldr	r2, [pc, #208]	; (80044cc <HAL_DMA_IRQHandler+0xcb4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d03b      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a32      	ldr	r2, [pc, #200]	; (80044d0 <HAL_DMA_IRQHandler+0xcb8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d036      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a31      	ldr	r2, [pc, #196]	; (80044d4 <HAL_DMA_IRQHandler+0xcbc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d031      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a2f      	ldr	r2, [pc, #188]	; (80044d8 <HAL_DMA_IRQHandler+0xcc0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d02c      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2e      	ldr	r2, [pc, #184]	; (80044dc <HAL_DMA_IRQHandler+0xcc4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d027      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a2c      	ldr	r2, [pc, #176]	; (80044e0 <HAL_DMA_IRQHandler+0xcc8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d022      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2b      	ldr	r2, [pc, #172]	; (80044e4 <HAL_DMA_IRQHandler+0xccc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d01d      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a29      	ldr	r2, [pc, #164]	; (80044e8 <HAL_DMA_IRQHandler+0xcd0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d018      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a28      	ldr	r2, [pc, #160]	; (80044ec <HAL_DMA_IRQHandler+0xcd4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d013      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a26      	ldr	r2, [pc, #152]	; (80044f0 <HAL_DMA_IRQHandler+0xcd8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00e      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a25      	ldr	r2, [pc, #148]	; (80044f4 <HAL_DMA_IRQHandler+0xcdc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d009      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a23      	ldr	r2, [pc, #140]	; (80044f8 <HAL_DMA_IRQHandler+0xce0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <HAL_DMA_IRQHandler+0xc60>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a22      	ldr	r2, [pc, #136]	; (80044fc <HAL_DMA_IRQHandler+0xce4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d108      	bne.n	800448a <HAL_DMA_IRQHandler+0xc72>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0214 	bic.w	r2, r2, #20
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e007      	b.n	800449a <HAL_DMA_IRQHandler+0xc82>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 020a 	bic.w	r2, r2, #10
 8004498:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80b8 	beq.w	8004624 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044bc:	e0b2      	b.n	8004624 <HAL_DMA_IRQHandler+0xe0c>
 80044be:	bf00      	nop
 80044c0:	40020010 	.word	0x40020010
 80044c4:	40020028 	.word	0x40020028
 80044c8:	40020040 	.word	0x40020040
 80044cc:	40020058 	.word	0x40020058
 80044d0:	40020070 	.word	0x40020070
 80044d4:	40020088 	.word	0x40020088
 80044d8:	400200a0 	.word	0x400200a0
 80044dc:	400200b8 	.word	0x400200b8
 80044e0:	40020410 	.word	0x40020410
 80044e4:	40020428 	.word	0x40020428
 80044e8:	40020440 	.word	0x40020440
 80044ec:	40020458 	.word	0x40020458
 80044f0:	40020470 	.word	0x40020470
 80044f4:	40020488 	.word	0x40020488
 80044f8:	400204a0 	.word	0x400204a0
 80044fc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	2208      	movs	r2, #8
 800450a:	409a      	lsls	r2, r3
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 8088 	beq.w	8004626 <HAL_DMA_IRQHandler+0xe0e>
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8082 	beq.w	8004626 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a41      	ldr	r2, [pc, #260]	; (800462c <HAL_DMA_IRQHandler+0xe14>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d04a      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a3f      	ldr	r2, [pc, #252]	; (8004630 <HAL_DMA_IRQHandler+0xe18>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d045      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a3e      	ldr	r2, [pc, #248]	; (8004634 <HAL_DMA_IRQHandler+0xe1c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d040      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a3c      	ldr	r2, [pc, #240]	; (8004638 <HAL_DMA_IRQHandler+0xe20>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d03b      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a3b      	ldr	r2, [pc, #236]	; (800463c <HAL_DMA_IRQHandler+0xe24>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d036      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a39      	ldr	r2, [pc, #228]	; (8004640 <HAL_DMA_IRQHandler+0xe28>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d031      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a38      	ldr	r2, [pc, #224]	; (8004644 <HAL_DMA_IRQHandler+0xe2c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d02c      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a36      	ldr	r2, [pc, #216]	; (8004648 <HAL_DMA_IRQHandler+0xe30>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d027      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a35      	ldr	r2, [pc, #212]	; (800464c <HAL_DMA_IRQHandler+0xe34>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d022      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a33      	ldr	r2, [pc, #204]	; (8004650 <HAL_DMA_IRQHandler+0xe38>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01d      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a32      	ldr	r2, [pc, #200]	; (8004654 <HAL_DMA_IRQHandler+0xe3c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d018      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a30      	ldr	r2, [pc, #192]	; (8004658 <HAL_DMA_IRQHandler+0xe40>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a2f      	ldr	r2, [pc, #188]	; (800465c <HAL_DMA_IRQHandler+0xe44>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00e      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a2d      	ldr	r2, [pc, #180]	; (8004660 <HAL_DMA_IRQHandler+0xe48>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d009      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2c      	ldr	r2, [pc, #176]	; (8004664 <HAL_DMA_IRQHandler+0xe4c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xdaa>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a2a      	ldr	r2, [pc, #168]	; (8004668 <HAL_DMA_IRQHandler+0xe50>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d108      	bne.n	80045d4 <HAL_DMA_IRQHandler+0xdbc>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 021c 	bic.w	r2, r2, #28
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	e007      	b.n	80045e4 <HAL_DMA_IRQHandler+0xdcc>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 020e 	bic.w	r2, r2, #14
 80045e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	2201      	movs	r2, #1
 80045ee:	409a      	lsls	r2, r3
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	4798      	blx	r3
 800461a:	e004      	b.n	8004626 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800461c:	bf00      	nop
 800461e:	e002      	b.n	8004626 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004620:	bf00      	nop
 8004622:	e000      	b.n	8004626 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004624:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004626:	3728      	adds	r7, #40	; 0x28
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40020010 	.word	0x40020010
 8004630:	40020028 	.word	0x40020028
 8004634:	40020040 	.word	0x40020040
 8004638:	40020058 	.word	0x40020058
 800463c:	40020070 	.word	0x40020070
 8004640:	40020088 	.word	0x40020088
 8004644:	400200a0 	.word	0x400200a0
 8004648:	400200b8 	.word	0x400200b8
 800464c:	40020410 	.word	0x40020410
 8004650:	40020428 	.word	0x40020428
 8004654:	40020440 	.word	0x40020440
 8004658:	40020458 	.word	0x40020458
 800465c:	40020470 	.word	0x40020470
 8004660:	40020488 	.word	0x40020488
 8004664:	400204a0 	.word	0x400204a0
 8004668:	400204b8 	.word	0x400204b8

0800466c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a42      	ldr	r2, [pc, #264]	; (8004784 <DMA_CalcBaseAndBitshift+0x118>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d04a      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a41      	ldr	r2, [pc, #260]	; (8004788 <DMA_CalcBaseAndBitshift+0x11c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d045      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a3f      	ldr	r2, [pc, #252]	; (800478c <DMA_CalcBaseAndBitshift+0x120>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d040      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a3e      	ldr	r2, [pc, #248]	; (8004790 <DMA_CalcBaseAndBitshift+0x124>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d03b      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a3c      	ldr	r2, [pc, #240]	; (8004794 <DMA_CalcBaseAndBitshift+0x128>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d036      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a3b      	ldr	r2, [pc, #236]	; (8004798 <DMA_CalcBaseAndBitshift+0x12c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d031      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a39      	ldr	r2, [pc, #228]	; (800479c <DMA_CalcBaseAndBitshift+0x130>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d02c      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a38      	ldr	r2, [pc, #224]	; (80047a0 <DMA_CalcBaseAndBitshift+0x134>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d027      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a36      	ldr	r2, [pc, #216]	; (80047a4 <DMA_CalcBaseAndBitshift+0x138>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d022      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a35      	ldr	r2, [pc, #212]	; (80047a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d01d      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a33      	ldr	r2, [pc, #204]	; (80047ac <DMA_CalcBaseAndBitshift+0x140>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d018      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a32      	ldr	r2, [pc, #200]	; (80047b0 <DMA_CalcBaseAndBitshift+0x144>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a30      	ldr	r2, [pc, #192]	; (80047b4 <DMA_CalcBaseAndBitshift+0x148>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00e      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a2f      	ldr	r2, [pc, #188]	; (80047b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2d      	ldr	r2, [pc, #180]	; (80047bc <DMA_CalcBaseAndBitshift+0x150>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <DMA_CalcBaseAndBitshift+0xa8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <DMA_CalcBaseAndBitshift+0x154>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d101      	bne.n	8004718 <DMA_CalcBaseAndBitshift+0xac>
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <DMA_CalcBaseAndBitshift+0xae>
 8004718:	2300      	movs	r3, #0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d024      	beq.n	8004768 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3b10      	subs	r3, #16
 8004726:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <DMA_CalcBaseAndBitshift+0x158>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	091b      	lsrs	r3, r3, #4
 800472e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	4a24      	ldr	r2, [pc, #144]	; (80047c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004738:	5cd3      	ldrb	r3, [r2, r3]
 800473a:	461a      	mov	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b03      	cmp	r3, #3
 8004744:	d908      	bls.n	8004758 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	4b1f      	ldr	r3, [pc, #124]	; (80047cc <DMA_CalcBaseAndBitshift+0x160>)
 800474e:	4013      	ands	r3, r2
 8004750:	1d1a      	adds	r2, r3, #4
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	659a      	str	r2, [r3, #88]	; 0x58
 8004756:	e00d      	b.n	8004774 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <DMA_CalcBaseAndBitshift+0x160>)
 8004760:	4013      	ands	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6593      	str	r3, [r2, #88]	; 0x58
 8004766:	e005      	b.n	8004774 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	40020010 	.word	0x40020010
 8004788:	40020028 	.word	0x40020028
 800478c:	40020040 	.word	0x40020040
 8004790:	40020058 	.word	0x40020058
 8004794:	40020070 	.word	0x40020070
 8004798:	40020088 	.word	0x40020088
 800479c:	400200a0 	.word	0x400200a0
 80047a0:	400200b8 	.word	0x400200b8
 80047a4:	40020410 	.word	0x40020410
 80047a8:	40020428 	.word	0x40020428
 80047ac:	40020440 	.word	0x40020440
 80047b0:	40020458 	.word	0x40020458
 80047b4:	40020470 	.word	0x40020470
 80047b8:	40020488 	.word	0x40020488
 80047bc:	400204a0 	.word	0x400204a0
 80047c0:	400204b8 	.word	0x400204b8
 80047c4:	aaaaaaab 	.word	0xaaaaaaab
 80047c8:	0800f1c4 	.word	0x0800f1c4
 80047cc:	fffffc00 	.word	0xfffffc00

080047d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d120      	bne.n	8004826 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d858      	bhi.n	800489e <DMA_CheckFifoParam+0xce>
 80047ec:	a201      	add	r2, pc, #4	; (adr r2, 80047f4 <DMA_CheckFifoParam+0x24>)
 80047ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f2:	bf00      	nop
 80047f4:	08004805 	.word	0x08004805
 80047f8:	08004817 	.word	0x08004817
 80047fc:	08004805 	.word	0x08004805
 8004800:	0800489f 	.word	0x0800489f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d048      	beq.n	80048a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004814:	e045      	b.n	80048a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800481e:	d142      	bne.n	80048a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004824:	e03f      	b.n	80048a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800482e:	d123      	bne.n	8004878 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	2b03      	cmp	r3, #3
 8004836:	d838      	bhi.n	80048aa <DMA_CheckFifoParam+0xda>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <DMA_CheckFifoParam+0x70>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004851 	.word	0x08004851
 8004844:	08004857 	.word	0x08004857
 8004848:	08004851 	.word	0x08004851
 800484c:	08004869 	.word	0x08004869
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
        break;
 8004854:	e030      	b.n	80048b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d025      	beq.n	80048ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004866:	e022      	b.n	80048ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004870:	d11f      	bne.n	80048b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004876:	e01c      	b.n	80048b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	2b02      	cmp	r3, #2
 800487e:	d902      	bls.n	8004886 <DMA_CheckFifoParam+0xb6>
 8004880:	2b03      	cmp	r3, #3
 8004882:	d003      	beq.n	800488c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004884:	e018      	b.n	80048b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	73fb      	strb	r3, [r7, #15]
        break;
 800488a:	e015      	b.n	80048b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00e      	beq.n	80048b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
    break;
 800489c:	e00b      	b.n	80048b6 <DMA_CheckFifoParam+0xe6>
        break;
 800489e:	bf00      	nop
 80048a0:	e00a      	b.n	80048b8 <DMA_CheckFifoParam+0xe8>
        break;
 80048a2:	bf00      	nop
 80048a4:	e008      	b.n	80048b8 <DMA_CheckFifoParam+0xe8>
        break;
 80048a6:	bf00      	nop
 80048a8:	e006      	b.n	80048b8 <DMA_CheckFifoParam+0xe8>
        break;
 80048aa:	bf00      	nop
 80048ac:	e004      	b.n	80048b8 <DMA_CheckFifoParam+0xe8>
        break;
 80048ae:	bf00      	nop
 80048b0:	e002      	b.n	80048b8 <DMA_CheckFifoParam+0xe8>
        break;
 80048b2:	bf00      	nop
 80048b4:	e000      	b.n	80048b8 <DMA_CheckFifoParam+0xe8>
    break;
 80048b6:	bf00      	nop
    }
  }

  return status;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop

080048c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a38      	ldr	r2, [pc, #224]	; (80049bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d022      	beq.n	8004926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a36      	ldr	r2, [pc, #216]	; (80049c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d01d      	beq.n	8004926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a35      	ldr	r2, [pc, #212]	; (80049c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d018      	beq.n	8004926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a33      	ldr	r2, [pc, #204]	; (80049c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d013      	beq.n	8004926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a32      	ldr	r2, [pc, #200]	; (80049cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00e      	beq.n	8004926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a30      	ldr	r2, [pc, #192]	; (80049d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d009      	beq.n	8004926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2f      	ldr	r2, [pc, #188]	; (80049d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d004      	beq.n	8004926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2d      	ldr	r2, [pc, #180]	; (80049d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800492a:	2300      	movs	r3, #0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01a      	beq.n	8004966 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	3b08      	subs	r3, #8
 8004938:	4a28      	ldr	r2, [pc, #160]	; (80049dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	461a      	mov	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a24      	ldr	r2, [pc, #144]	; (80049e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004954:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	2201      	movs	r2, #1
 800495e:	409a      	lsls	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004964:	e024      	b.n	80049b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	3b10      	subs	r3, #16
 800496e:	4a1e      	ldr	r2, [pc, #120]	; (80049e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4a1c      	ldr	r2, [pc, #112]	; (80049ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d806      	bhi.n	800498e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4a1b      	ldr	r2, [pc, #108]	; (80049f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d902      	bls.n	800498e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3308      	adds	r3, #8
 800498c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4b18      	ldr	r3, [pc, #96]	; (80049f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	461a      	mov	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a16      	ldr	r2, [pc, #88]	; (80049f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80049a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2201      	movs	r2, #1
 80049aa:	409a      	lsls	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	58025408 	.word	0x58025408
 80049c0:	5802541c 	.word	0x5802541c
 80049c4:	58025430 	.word	0x58025430
 80049c8:	58025444 	.word	0x58025444
 80049cc:	58025458 	.word	0x58025458
 80049d0:	5802546c 	.word	0x5802546c
 80049d4:	58025480 	.word	0x58025480
 80049d8:	58025494 	.word	0x58025494
 80049dc:	cccccccd 	.word	0xcccccccd
 80049e0:	16009600 	.word	0x16009600
 80049e4:	58025880 	.word	0x58025880
 80049e8:	aaaaaaab 	.word	0xaaaaaaab
 80049ec:	400204b8 	.word	0x400204b8
 80049f0:	4002040f 	.word	0x4002040f
 80049f4:	10008200 	.word	0x10008200
 80049f8:	40020880 	.word	0x40020880

080049fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d04a      	beq.n	8004aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d847      	bhi.n	8004aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a25      	ldr	r2, [pc, #148]	; (8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d022      	beq.n	8004a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a24      	ldr	r2, [pc, #144]	; (8004ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d01d      	beq.n	8004a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a22      	ldr	r2, [pc, #136]	; (8004abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d018      	beq.n	8004a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1f      	ldr	r2, [pc, #124]	; (8004ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00e      	beq.n	8004a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d009      	beq.n	8004a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1b      	ldr	r2, [pc, #108]	; (8004ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d101      	bne.n	8004a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004a84:	671a      	str	r2, [r3, #112]	; 0x70
 8004a86:	e009      	b.n	8004a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	461a      	mov	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a11      	ldr	r2, [pc, #68]	; (8004ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004a9a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	409a      	lsls	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	58025408 	.word	0x58025408
 8004ab8:	5802541c 	.word	0x5802541c
 8004abc:	58025430 	.word	0x58025430
 8004ac0:	58025444 	.word	0x58025444
 8004ac4:	58025458 	.word	0x58025458
 8004ac8:	5802546c 	.word	0x5802546c
 8004acc:	58025480 	.word	0x58025480
 8004ad0:	58025494 	.word	0x58025494
 8004ad4:	1600963f 	.word	0x1600963f
 8004ad8:	58025940 	.word	0x58025940
 8004adc:	1000823f 	.word	0x1000823f
 8004ae0:	40020940 	.word	0x40020940

08004ae4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afa:	2b40      	cmp	r3, #64	; 0x40
 8004afc:	d113      	bne.n	8004b26 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	f241 1334 	movw	r3, #4404	; 0x1134
 8004b06:	4413      	add	r3, r2
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d109      	bne.n	8004b26 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f005 f922 	bl	8009d5c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004b20:	f248 0240 	movw	r2, #32832	; 0x8040
 8004b24:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d113      	bne.n	8004b60 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	f241 1334 	movw	r3, #4404	; 0x1134
 8004b40:	4413      	add	r3, r2
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d109      	bne.n	8004b60 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f8c7 	bl	8004ce0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004b5a:	f248 0201 	movw	r2, #32769	; 0x8001
 8004b5e:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b72:	d149      	bne.n	8004c08 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	f241 1334 	movw	r3, #4404	; 0x1134
 8004b7c:	4413      	add	r3, r2
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b88:	d13e      	bne.n	8004c08 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8e:	f043 0208 	orr.w	r2, r3, #8
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba8:	d11b      	bne.n	8004be2 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	f241 1302 	movw	r3, #4354	; 0x1102
 8004bb8:	4013      	ands	r3, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	f241 1334 	movw	r3, #4404	; 0x1134
 8004bc6:	4413      	add	r3, r2
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6811      	ldr	r1, [r2, #0]
 8004bce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bd2:	f241 1334 	movw	r3, #4404	; 0x1134
 8004bd6:	440b      	add	r3, r1
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	22e0      	movs	r2, #224	; 0xe0
 8004bde:	655a      	str	r2, [r3, #84]	; 0x54
 8004be0:	e00f      	b.n	8004c02 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004bfc:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8004c00:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f876 	bl	8004cf4 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c10:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8004c14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c18:	d10e      	bne.n	8004c38 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	22e0      	movs	r2, #224	; 0xe0
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f86b 	bl	8004d08 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d10d      	bne.n	8004c64 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c50:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f85f 	bl	8004d1c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d10d      	bne.n	8004c90 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c7c:	f003 020f 	and.w	r2, r3, #15
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f853 	bl	8004d30 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004c90:	f7fd ff24 	bl	8002adc <HAL_GetCurrentCPUID>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d10d      	bne.n	8004cb6 <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004c9a:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <HAL_ETH_IRQHandler+0x1f4>)
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d014      	beq.n	8004cd0 <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <HAL_ETH_IRQHandler+0x1f4>)
 8004ca8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004cac:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f848 	bl	8004d44 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8004cb4:	e00c      	b.n	8004cd0 <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004cb6:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <HAL_ETH_IRQHandler+0x1f8>)
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d006      	beq.n	8004cd0 <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_ETH_IRQHandler+0x1f8>)
 8004cc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004cc8:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f83a 	bl	8004d44 <HAL_ETH_WakeUpCallback>
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	58000080 	.word	0x58000080
 8004cdc:	580000c0 	.word	0x580000c0

08004ce0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b089      	sub	sp, #36	; 0x24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d66:	4b89      	ldr	r3, [pc, #548]	; (8004f8c <HAL_GPIO_Init+0x234>)
 8004d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d6a:	e194      	b.n	8005096 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	2101      	movs	r1, #1
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	fa01 f303 	lsl.w	r3, r1, r3
 8004d78:	4013      	ands	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8186 	beq.w	8005090 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d00b      	beq.n	8004da4 <HAL_GPIO_Init+0x4c>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d007      	beq.n	8004da4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d98:	2b11      	cmp	r3, #17
 8004d9a:	d003      	beq.n	8004da4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b12      	cmp	r3, #18
 8004da2:	d130      	bne.n	8004e06 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	2203      	movs	r2, #3
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dda:	2201      	movs	r2, #1
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	43db      	mvns	r3, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4013      	ands	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	091b      	lsrs	r3, r3, #4
 8004df0:	f003 0201 	and.w	r2, r3, #1
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	2203      	movs	r2, #3
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d003      	beq.n	8004e46 <HAL_GPIO_Init+0xee>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b12      	cmp	r3, #18
 8004e44:	d123      	bne.n	8004e8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	08da      	lsrs	r2, r3, #3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3208      	adds	r2, #8
 8004e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	220f      	movs	r2, #15
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43db      	mvns	r3, r3
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4013      	ands	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	08da      	lsrs	r2, r3, #3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3208      	adds	r2, #8
 8004e88:	69b9      	ldr	r1, [r7, #24]
 8004e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	2203      	movs	r2, #3
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 0203 	and.w	r2, r3, #3
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 80e0 	beq.w	8005090 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ed0:	4b2f      	ldr	r3, [pc, #188]	; (8004f90 <HAL_GPIO_Init+0x238>)
 8004ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ed6:	4a2e      	ldr	r2, [pc, #184]	; (8004f90 <HAL_GPIO_Init+0x238>)
 8004ed8:	f043 0302 	orr.w	r3, r3, #2
 8004edc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ee0:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <HAL_GPIO_Init+0x238>)
 8004ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eee:	4a29      	ldr	r2, [pc, #164]	; (8004f94 <HAL_GPIO_Init+0x23c>)
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	089b      	lsrs	r3, r3, #2
 8004ef4:	3302      	adds	r3, #2
 8004ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	220f      	movs	r2, #15
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a20      	ldr	r2, [pc, #128]	; (8004f98 <HAL_GPIO_Init+0x240>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d052      	beq.n	8004fc0 <HAL_GPIO_Init+0x268>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a1f      	ldr	r2, [pc, #124]	; (8004f9c <HAL_GPIO_Init+0x244>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d031      	beq.n	8004f86 <HAL_GPIO_Init+0x22e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1e      	ldr	r2, [pc, #120]	; (8004fa0 <HAL_GPIO_Init+0x248>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d02b      	beq.n	8004f82 <HAL_GPIO_Init+0x22a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <HAL_GPIO_Init+0x24c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d025      	beq.n	8004f7e <HAL_GPIO_Init+0x226>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <HAL_GPIO_Init+0x250>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01f      	beq.n	8004f7a <HAL_GPIO_Init+0x222>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a1b      	ldr	r2, [pc, #108]	; (8004fac <HAL_GPIO_Init+0x254>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d019      	beq.n	8004f76 <HAL_GPIO_Init+0x21e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a1a      	ldr	r2, [pc, #104]	; (8004fb0 <HAL_GPIO_Init+0x258>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <HAL_GPIO_Init+0x21a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <HAL_GPIO_Init+0x25c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00d      	beq.n	8004f6e <HAL_GPIO_Init+0x216>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <HAL_GPIO_Init+0x260>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d007      	beq.n	8004f6a <HAL_GPIO_Init+0x212>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a17      	ldr	r2, [pc, #92]	; (8004fbc <HAL_GPIO_Init+0x264>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d101      	bne.n	8004f66 <HAL_GPIO_Init+0x20e>
 8004f62:	2309      	movs	r3, #9
 8004f64:	e02d      	b.n	8004fc2 <HAL_GPIO_Init+0x26a>
 8004f66:	230a      	movs	r3, #10
 8004f68:	e02b      	b.n	8004fc2 <HAL_GPIO_Init+0x26a>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	e029      	b.n	8004fc2 <HAL_GPIO_Init+0x26a>
 8004f6e:	2307      	movs	r3, #7
 8004f70:	e027      	b.n	8004fc2 <HAL_GPIO_Init+0x26a>
 8004f72:	2306      	movs	r3, #6
 8004f74:	e025      	b.n	8004fc2 <HAL_GPIO_Init+0x26a>
 8004f76:	2305      	movs	r3, #5
 8004f78:	e023      	b.n	8004fc2 <HAL_GPIO_Init+0x26a>
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	e021      	b.n	8004fc2 <HAL_GPIO_Init+0x26a>
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e01f      	b.n	8004fc2 <HAL_GPIO_Init+0x26a>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e01d      	b.n	8004fc2 <HAL_GPIO_Init+0x26a>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e01b      	b.n	8004fc2 <HAL_GPIO_Init+0x26a>
 8004f8a:	bf00      	nop
 8004f8c:	58000080 	.word	0x58000080
 8004f90:	58024400 	.word	0x58024400
 8004f94:	58000400 	.word	0x58000400
 8004f98:	58020000 	.word	0x58020000
 8004f9c:	58020400 	.word	0x58020400
 8004fa0:	58020800 	.word	0x58020800
 8004fa4:	58020c00 	.word	0x58020c00
 8004fa8:	58021000 	.word	0x58021000
 8004fac:	58021400 	.word	0x58021400
 8004fb0:	58021800 	.word	0x58021800
 8004fb4:	58021c00 	.word	0x58021c00
 8004fb8:	58022000 	.word	0x58022000
 8004fbc:	58022400 	.word	0x58022400
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	f002 0203 	and.w	r2, r2, #3
 8004fc8:	0092      	lsls	r2, r2, #2
 8004fca:	4093      	lsls	r3, r2
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fd2:	4938      	ldr	r1, [pc, #224]	; (80050b4 <HAL_GPIO_Init+0x35c>)
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	089b      	lsrs	r3, r3, #2
 8004fd8:	3302      	adds	r3, #2
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4013      	ands	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	43db      	mvns	r3, r3
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	4013      	ands	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800505a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	43db      	mvns	r3, r3
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4013      	ands	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	3301      	adds	r3, #1
 8005094:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f47f ae63 	bne.w	8004d6c <HAL_GPIO_Init+0x14>
  }
}
 80050a6:	bf00      	nop
 80050a8:	3724      	adds	r7, #36	; 0x24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	58000400 	.word	0x58000400

080050b8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80050c0:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <HAL_HSEM_FastTake+0x2c>)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3320      	adds	r3, #32
 80050c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ca:	4a07      	ldr	r2, [pc, #28]	; (80050e8 <HAL_HSEM_FastTake+0x30>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d101      	bne.n	80050d4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	e000      	b.n	80050d6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	58026400 	.word	0x58026400
 80050e8:	80000300 	.word	0x80000300

080050ec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80050f6:	4906      	ldr	r1, [pc, #24]	; (8005110 <HAL_HSEM_Release+0x24>)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	58026400 	.word	0x58026400

08005114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e07f      	b.n	8005226 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fb fd5a 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2224      	movs	r2, #36	; 0x24
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005164:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005174:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d107      	bne.n	800518e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800518a:	609a      	str	r2, [r3, #8]
 800518c:	e006      	b.n	800519c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800519a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d104      	bne.n	80051ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6859      	ldr	r1, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <HAL_I2C_Init+0x11c>)
 80051ba:	430b      	orrs	r3, r1
 80051bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	ea42 0103 	orr.w	r1, r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	021a      	lsls	r2, r3, #8
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	69d9      	ldr	r1, [r3, #28]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1a      	ldr	r2, [r3, #32]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	02008000 	.word	0x02008000

08005234 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b20      	cmp	r3, #32
 8005248:	d138      	bne.n	80052bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005254:	2302      	movs	r3, #2
 8005256:	e032      	b.n	80052be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	; 0x24
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0201 	bic.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005286:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6819      	ldr	r1, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e000      	b.n	80052be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d139      	bne.n	8005354 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e033      	b.n	8005356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2224      	movs	r2, #36	; 0x24
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800531c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	e000      	b.n	8005356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005354:	2302      	movs	r3, #2
  }
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800536c:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800536e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005372:	4a0c      	ldr	r2, [pc, #48]	; (80053a4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005374:	f043 0302 	orr.w	r3, r3, #2
 8005378:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800537c:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800537e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800538a:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	4906      	ldr	r1, [pc, #24]	; (80053a8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4313      	orrs	r3, r2
 8005394:	604b      	str	r3, [r1, #4]
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	58024400 	.word	0x58024400
 80053a8:	58000400 	.word	0x58000400

080053ac <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e038      	b.n	8005430 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80053c6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f245 5255 	movw	r2, #21845	; 0x5555
 80053d0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6852      	ldr	r2, [r2, #4]
 80053da:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6892      	ldr	r2, [r2, #8]
 80053e4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80053e6:	f7fd fa09 	bl	80027fc <HAL_GetTick>
 80053ea:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80053ec:	e008      	b.n	8005400 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80053ee:	f7fd fa05 	bl	80027fc <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b30      	cmp	r3, #48	; 0x30
 80053fa:	d901      	bls.n	8005400 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e017      	b.n	8005430 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f1      	bne.n	80053ee <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	429a      	cmp	r2, r3
 8005416:	d005      	beq.n	8005424 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	68d2      	ldr	r2, [r2, #12]
 8005420:	611a      	str	r2, [r3, #16]
 8005422:	e004      	b.n	800542e <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800542c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005448:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005460:	4b29      	ldr	r3, [pc, #164]	; (8005508 <HAL_PWREx_ConfigSupply+0xb0>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	2b06      	cmp	r3, #6
 800546a:	d00a      	beq.n	8005482 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800546c:	4b26      	ldr	r3, [pc, #152]	; (8005508 <HAL_PWREx_ConfigSupply+0xb0>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	429a      	cmp	r2, r3
 8005478:	d001      	beq.n	800547e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e040      	b.n	8005500 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	e03e      	b.n	8005500 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005482:	4b21      	ldr	r3, [pc, #132]	; (8005508 <HAL_PWREx_ConfigSupply+0xb0>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800548a:	491f      	ldr	r1, [pc, #124]	; (8005508 <HAL_PWREx_ConfigSupply+0xb0>)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4313      	orrs	r3, r2
 8005490:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005492:	f7fd f9b3 	bl	80027fc <HAL_GetTick>
 8005496:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005498:	e009      	b.n	80054ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800549a:	f7fd f9af 	bl	80027fc <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054a8:	d901      	bls.n	80054ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e028      	b.n	8005500 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054ae:	4b16      	ldr	r3, [pc, #88]	; (8005508 <HAL_PWREx_ConfigSupply+0xb0>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ba:	d1ee      	bne.n	800549a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b1e      	cmp	r3, #30
 80054c0:	d008      	beq.n	80054d4 <HAL_PWREx_ConfigSupply+0x7c>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b2e      	cmp	r3, #46	; 0x2e
 80054c6:	d005      	beq.n	80054d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b1d      	cmp	r3, #29
 80054cc:	d002      	beq.n	80054d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b2d      	cmp	r3, #45	; 0x2d
 80054d2:	d114      	bne.n	80054fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80054d4:	f7fd f992 	bl	80027fc <HAL_GetTick>
 80054d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80054da:	e009      	b.n	80054f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80054dc:	f7fd f98e 	bl	80027fc <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ea:	d901      	bls.n	80054f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e007      	b.n	8005500 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <HAL_PWREx_ConfigSupply+0xb0>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fc:	d1ee      	bne.n	80054dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	58024800 	.word	0x58024800

0800550c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af02      	add	r7, sp, #8
 8005512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005514:	f7fd f972 	bl	80027fc <HAL_GetTick>
 8005518:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e05f      	b.n	80055e4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d107      	bne.n	8005540 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7fb fe77 	bl	8001224 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005536:	f241 3188 	movw	r1, #5000	; 0x1388
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f85a 	bl	80055f4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	3b01      	subs	r3, #1
 8005550:	021a      	lsls	r2, r3, #8
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	2120      	movs	r1, #32
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f852 	bl	8005610 <QSPI_WaitFlagStateUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005570:	7afb      	ldrb	r3, [r7, #11]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d135      	bne.n	80055e2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	4b1b      	ldr	r3, [pc, #108]	; (80055ec <HAL_QSPI_Init+0xe0>)
 800557e:	4013      	ands	r3, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6852      	ldr	r2, [r2, #4]
 8005584:	0611      	lsls	r1, r2, #24
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68d2      	ldr	r2, [r2, #12]
 800558a:	4311      	orrs	r1, r2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	69d2      	ldr	r2, [r2, #28]
 8005590:	4311      	orrs	r1, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6a12      	ldr	r2, [r2, #32]
 8005596:	4311      	orrs	r1, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	430b      	orrs	r3, r1
 800559e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <HAL_QSPI_Init+0xe4>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6912      	ldr	r2, [r2, #16]
 80055ae:	0411      	lsls	r1, r2, #16
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6952      	ldr	r2, [r2, #20]
 80055b4:	4311      	orrs	r1, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6992      	ldr	r2, [r2, #24]
 80055ba:	4311      	orrs	r1, r2
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80055e2:	7afb      	ldrb	r3, [r7, #11]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	00ffff2f 	.word	0x00ffff2f
 80055f0:	ffe0f8fe 	.word	0xffe0f8fe

080055f4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005620:	e01a      	b.n	8005658 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005628:	d016      	beq.n	8005658 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562a:	f7fd f8e7 	bl	80027fc <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	429a      	cmp	r2, r3
 8005638:	d302      	bcc.n	8005640 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10b      	bne.n	8005658 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2204      	movs	r2, #4
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564c:	f043 0201 	orr.w	r2, r3, #1
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e00e      	b.n	8005676 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	4013      	ands	r3, r2
 8005662:	2b00      	cmp	r3, #0
 8005664:	bf14      	ite	ne
 8005666:	2301      	movne	r3, #1
 8005668:	2300      	moveq	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	429a      	cmp	r2, r3
 8005672:	d1d6      	bne.n	8005622 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08c      	sub	sp, #48	; 0x30
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e3ff      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8087 	beq.w	80057ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056a0:	4b99      	ldr	r3, [pc, #612]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056aa:	4b97      	ldr	r3, [pc, #604]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d007      	beq.n	80056c6 <HAL_RCC_OscConfig+0x46>
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	2b18      	cmp	r3, #24
 80056ba:	d110      	bne.n	80056de <HAL_RCC_OscConfig+0x5e>
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d10b      	bne.n	80056de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c6:	4b90      	ldr	r3, [pc, #576]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d06c      	beq.n	80057ac <HAL_RCC_OscConfig+0x12c>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d168      	bne.n	80057ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e3d9      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e6:	d106      	bne.n	80056f6 <HAL_RCC_OscConfig+0x76>
 80056e8:	4b87      	ldr	r3, [pc, #540]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a86      	ldr	r2, [pc, #536]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80056ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	e02e      	b.n	8005754 <HAL_RCC_OscConfig+0xd4>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10c      	bne.n	8005718 <HAL_RCC_OscConfig+0x98>
 80056fe:	4b82      	ldr	r3, [pc, #520]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a81      	ldr	r2, [pc, #516]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	4b7f      	ldr	r3, [pc, #508]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a7e      	ldr	r2, [pc, #504]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	e01d      	b.n	8005754 <HAL_RCC_OscConfig+0xd4>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005720:	d10c      	bne.n	800573c <HAL_RCC_OscConfig+0xbc>
 8005722:	4b79      	ldr	r3, [pc, #484]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a78      	ldr	r2, [pc, #480]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	4b76      	ldr	r3, [pc, #472]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a75      	ldr	r2, [pc, #468]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	e00b      	b.n	8005754 <HAL_RCC_OscConfig+0xd4>
 800573c:	4b72      	ldr	r3, [pc, #456]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a71      	ldr	r2, [pc, #452]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	4b6f      	ldr	r3, [pc, #444]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a6e      	ldr	r2, [pc, #440]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 800574e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d013      	beq.n	8005784 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fd f84e 	bl	80027fc <HAL_GetTick>
 8005760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005764:	f7fd f84a 	bl	80027fc <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b64      	cmp	r3, #100	; 0x64
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e38d      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005776:	4b64      	ldr	r3, [pc, #400]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0xe4>
 8005782:	e014      	b.n	80057ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005784:	f7fd f83a 	bl	80027fc <HAL_GetTick>
 8005788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800578c:	f7fd f836 	bl	80027fc <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b64      	cmp	r3, #100	; 0x64
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e379      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800579e:	4b5a      	ldr	r3, [pc, #360]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <HAL_RCC_OscConfig+0x10c>
 80057aa:	e000      	b.n	80057ae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 80ae 	beq.w	8005918 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057bc:	4b52      	ldr	r3, [pc, #328]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057c6:	4b50      	ldr	r3, [pc, #320]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <HAL_RCC_OscConfig+0x162>
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	2b18      	cmp	r3, #24
 80057d6:	d13a      	bne.n	800584e <HAL_RCC_OscConfig+0x1ce>
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d135      	bne.n	800584e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057e2:	4b49      	ldr	r3, [pc, #292]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <HAL_RCC_OscConfig+0x17a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e34b      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fa:	f7fd f80b 	bl	8002814 <HAL_GetREVID>
 80057fe:	4602      	mov	r2, r0
 8005800:	f241 0303 	movw	r3, #4099	; 0x1003
 8005804:	429a      	cmp	r2, r3
 8005806:	d817      	bhi.n	8005838 <HAL_RCC_OscConfig+0x1b8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d108      	bne.n	8005822 <HAL_RCC_OscConfig+0x1a2>
 8005810:	4b3d      	ldr	r3, [pc, #244]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005818:	4a3b      	ldr	r2, [pc, #236]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 800581a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800581e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005820:	e07a      	b.n	8005918 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005822:	4b39      	ldr	r3, [pc, #228]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	031b      	lsls	r3, r3, #12
 8005830:	4935      	ldr	r1, [pc, #212]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005832:	4313      	orrs	r3, r2
 8005834:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005836:	e06f      	b.n	8005918 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005838:	4b33      	ldr	r3, [pc, #204]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	061b      	lsls	r3, r3, #24
 8005846:	4930      	ldr	r1, [pc, #192]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005848:	4313      	orrs	r3, r2
 800584a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800584c:	e064      	b.n	8005918 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d045      	beq.n	80058e2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005856:	4b2c      	ldr	r3, [pc, #176]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f023 0219 	bic.w	r2, r3, #25
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	4929      	ldr	r1, [pc, #164]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005864:	4313      	orrs	r3, r2
 8005866:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fc ffc8 	bl	80027fc <HAL_GetTick>
 800586c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005870:	f7fc ffc4 	bl	80027fc <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e307      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005882:	4b21      	ldr	r3, [pc, #132]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800588e:	f7fc ffc1 	bl	8002814 <HAL_GetREVID>
 8005892:	4602      	mov	r2, r0
 8005894:	f241 0303 	movw	r3, #4099	; 0x1003
 8005898:	429a      	cmp	r2, r3
 800589a:	d817      	bhi.n	80058cc <HAL_RCC_OscConfig+0x24c>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	2b40      	cmp	r3, #64	; 0x40
 80058a2:	d108      	bne.n	80058b6 <HAL_RCC_OscConfig+0x236>
 80058a4:	4b18      	ldr	r3, [pc, #96]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80058ac:	4a16      	ldr	r2, [pc, #88]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80058ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b2:	6053      	str	r3, [r2, #4]
 80058b4:	e030      	b.n	8005918 <HAL_RCC_OscConfig+0x298>
 80058b6:	4b14      	ldr	r3, [pc, #80]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	031b      	lsls	r3, r3, #12
 80058c4:	4910      	ldr	r1, [pc, #64]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	604b      	str	r3, [r1, #4]
 80058ca:	e025      	b.n	8005918 <HAL_RCC_OscConfig+0x298>
 80058cc:	4b0e      	ldr	r3, [pc, #56]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	061b      	lsls	r3, r3, #24
 80058da:	490b      	ldr	r1, [pc, #44]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	604b      	str	r3, [r1, #4]
 80058e0:	e01a      	b.n	8005918 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058e2:	4b09      	ldr	r3, [pc, #36]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a08      	ldr	r2, [pc, #32]	; (8005908 <HAL_RCC_OscConfig+0x288>)
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fc ff85 	bl	80027fc <HAL_GetTick>
 80058f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058f4:	e00a      	b.n	800590c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058f6:	f7fc ff81 	bl	80027fc <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d903      	bls.n	800590c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e2c4      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
 8005908:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800590c:	4ba4      	ldr	r3, [pc, #656]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1ee      	bne.n	80058f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 80a9 	beq.w	8005a78 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005926:	4b9e      	ldr	r3, [pc, #632]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800592e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005930:	4b9b      	ldr	r3, [pc, #620]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b08      	cmp	r3, #8
 800593a:	d007      	beq.n	800594c <HAL_RCC_OscConfig+0x2cc>
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b18      	cmp	r3, #24
 8005940:	d13a      	bne.n	80059b8 <HAL_RCC_OscConfig+0x338>
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f003 0303 	and.w	r3, r3, #3
 8005948:	2b01      	cmp	r3, #1
 800594a:	d135      	bne.n	80059b8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800594c:	4b94      	ldr	r3, [pc, #592]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCC_OscConfig+0x2e4>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	2b80      	cmp	r3, #128	; 0x80
 800595e:	d001      	beq.n	8005964 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e296      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005964:	f7fc ff56 	bl	8002814 <HAL_GetREVID>
 8005968:	4602      	mov	r2, r0
 800596a:	f241 0303 	movw	r3, #4099	; 0x1003
 800596e:	429a      	cmp	r2, r3
 8005970:	d817      	bhi.n	80059a2 <HAL_RCC_OscConfig+0x322>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	2b20      	cmp	r3, #32
 8005978:	d108      	bne.n	800598c <HAL_RCC_OscConfig+0x30c>
 800597a:	4b89      	ldr	r3, [pc, #548]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005982:	4a87      	ldr	r2, [pc, #540]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005988:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800598a:	e075      	b.n	8005a78 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800598c:	4b84      	ldr	r3, [pc, #528]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	069b      	lsls	r3, r3, #26
 800599a:	4981      	ldr	r1, [pc, #516]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 800599c:	4313      	orrs	r3, r2
 800599e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059a0:	e06a      	b.n	8005a78 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059a2:	4b7f      	ldr	r3, [pc, #508]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	061b      	lsls	r3, r3, #24
 80059b0:	497b      	ldr	r1, [pc, #492]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059b6:	e05f      	b.n	8005a78 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d042      	beq.n	8005a46 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80059c0:	4b77      	ldr	r3, [pc, #476]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a76      	ldr	r2, [pc, #472]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 80059c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059cc:	f7fc ff16 	bl	80027fc <HAL_GetTick>
 80059d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80059d4:	f7fc ff12 	bl	80027fc <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e255      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059e6:	4b6e      	ldr	r3, [pc, #440]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059f2:	f7fc ff0f 	bl	8002814 <HAL_GetREVID>
 80059f6:	4602      	mov	r2, r0
 80059f8:	f241 0303 	movw	r3, #4099	; 0x1003
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d817      	bhi.n	8005a30 <HAL_RCC_OscConfig+0x3b0>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d108      	bne.n	8005a1a <HAL_RCC_OscConfig+0x39a>
 8005a08:	4b65      	ldr	r3, [pc, #404]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005a10:	4a63      	ldr	r2, [pc, #396]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005a12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a16:	6053      	str	r3, [r2, #4]
 8005a18:	e02e      	b.n	8005a78 <HAL_RCC_OscConfig+0x3f8>
 8005a1a:	4b61      	ldr	r3, [pc, #388]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	069b      	lsls	r3, r3, #26
 8005a28:	495d      	ldr	r1, [pc, #372]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	604b      	str	r3, [r1, #4]
 8005a2e:	e023      	b.n	8005a78 <HAL_RCC_OscConfig+0x3f8>
 8005a30:	4b5b      	ldr	r3, [pc, #364]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	061b      	lsls	r3, r3, #24
 8005a3e:	4958      	ldr	r1, [pc, #352]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60cb      	str	r3, [r1, #12]
 8005a44:	e018      	b.n	8005a78 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a46:	4b56      	ldr	r3, [pc, #344]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a55      	ldr	r2, [pc, #340]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a52:	f7fc fed3 	bl	80027fc <HAL_GetTick>
 8005a56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005a5a:	f7fc fecf 	bl	80027fc <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e212      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a6c:	4b4c      	ldr	r3, [pc, #304]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1f0      	bne.n	8005a5a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d036      	beq.n	8005af2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d019      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a8c:	4b44      	ldr	r3, [pc, #272]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a90:	4a43      	ldr	r2, [pc, #268]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a98:	f7fc feb0 	bl	80027fc <HAL_GetTick>
 8005a9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aa0:	f7fc feac 	bl	80027fc <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e1ef      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ab2:	4b3b      	ldr	r3, [pc, #236]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x420>
 8005abe:	e018      	b.n	8005af2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ac0:	4b37      	ldr	r3, [pc, #220]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac4:	4a36      	ldr	r2, [pc, #216]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005acc:	f7fc fe96 	bl	80027fc <HAL_GetTick>
 8005ad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ad4:	f7fc fe92 	bl	80027fc <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e1d5      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ae6:	4b2e      	ldr	r3, [pc, #184]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0320 	and.w	r3, r3, #32
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d036      	beq.n	8005b6c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d019      	beq.n	8005b3a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b06:	4b26      	ldr	r3, [pc, #152]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a25      	ldr	r2, [pc, #148]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005b0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b12:	f7fc fe73 	bl	80027fc <HAL_GetTick>
 8005b16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005b1a:	f7fc fe6f 	bl	80027fc <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e1b2      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0f0      	beq.n	8005b1a <HAL_RCC_OscConfig+0x49a>
 8005b38:	e018      	b.n	8005b6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b3a:	4b19      	ldr	r3, [pc, #100]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a18      	ldr	r2, [pc, #96]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b46:	f7fc fe59 	bl	80027fc <HAL_GetTick>
 8005b4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005b4e:	f7fc fe55 	bl	80027fc <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e198      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b60:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <HAL_RCC_OscConfig+0x520>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f0      	bne.n	8005b4e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8085 	beq.w	8005c84 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <HAL_RCC_OscConfig+0x524>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <HAL_RCC_OscConfig+0x524>)
 8005b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b86:	f7fc fe39 	bl	80027fc <HAL_GetTick>
 8005b8a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b8c:	e00c      	b.n	8005ba8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b8e:	f7fc fe35 	bl	80027fc <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b64      	cmp	r3, #100	; 0x64
 8005b9a:	d905      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e178      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ba8:	4b96      	ldr	r3, [pc, #600]	; (8005e04 <HAL_RCC_OscConfig+0x784>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0ec      	beq.n	8005b8e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d106      	bne.n	8005bca <HAL_RCC_OscConfig+0x54a>
 8005bbc:	4b92      	ldr	r3, [pc, #584]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc0:	4a91      	ldr	r2, [pc, #580]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005bc2:	f043 0301 	orr.w	r3, r3, #1
 8005bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc8:	e02d      	b.n	8005c26 <HAL_RCC_OscConfig+0x5a6>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10c      	bne.n	8005bec <HAL_RCC_OscConfig+0x56c>
 8005bd2:	4b8d      	ldr	r3, [pc, #564]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	4a8c      	ldr	r2, [pc, #560]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005bd8:	f023 0301 	bic.w	r3, r3, #1
 8005bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bde:	4b8a      	ldr	r3, [pc, #552]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	4a89      	ldr	r2, [pc, #548]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005be4:	f023 0304 	bic.w	r3, r3, #4
 8005be8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bea:	e01c      	b.n	8005c26 <HAL_RCC_OscConfig+0x5a6>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b05      	cmp	r3, #5
 8005bf2:	d10c      	bne.n	8005c0e <HAL_RCC_OscConfig+0x58e>
 8005bf4:	4b84      	ldr	r3, [pc, #528]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf8:	4a83      	ldr	r2, [pc, #524]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005bfa:	f043 0304 	orr.w	r3, r3, #4
 8005bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8005c00:	4b81      	ldr	r3, [pc, #516]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	4a80      	ldr	r2, [pc, #512]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005c06:	f043 0301 	orr.w	r3, r3, #1
 8005c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c0c:	e00b      	b.n	8005c26 <HAL_RCC_OscConfig+0x5a6>
 8005c0e:	4b7e      	ldr	r3, [pc, #504]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c12:	4a7d      	ldr	r2, [pc, #500]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	6713      	str	r3, [r2, #112]	; 0x70
 8005c1a:	4b7b      	ldr	r3, [pc, #492]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	4a7a      	ldr	r2, [pc, #488]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005c20:	f023 0304 	bic.w	r3, r3, #4
 8005c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d015      	beq.n	8005c5a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2e:	f7fc fde5 	bl	80027fc <HAL_GetTick>
 8005c32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c34:	e00a      	b.n	8005c4c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c36:	f7fc fde1 	bl	80027fc <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e122      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c4c:	4b6e      	ldr	r3, [pc, #440]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0ee      	beq.n	8005c36 <HAL_RCC_OscConfig+0x5b6>
 8005c58:	e014      	b.n	8005c84 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5a:	f7fc fdcf 	bl	80027fc <HAL_GetTick>
 8005c5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c60:	e00a      	b.n	8005c78 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c62:	f7fc fdcb 	bl	80027fc <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e10c      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c78:	4b63      	ldr	r3, [pc, #396]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1ee      	bne.n	8005c62 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 8101 	beq.w	8005e90 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c8e:	4b5e      	ldr	r3, [pc, #376]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c96:	2b18      	cmp	r3, #24
 8005c98:	f000 80bc 	beq.w	8005e14 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	f040 8095 	bne.w	8005dd0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca6:	4b58      	ldr	r3, [pc, #352]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a57      	ldr	r2, [pc, #348]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005cac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb2:	f7fc fda3 	bl	80027fc <HAL_GetTick>
 8005cb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cba:	f7fc fd9f 	bl	80027fc <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e0e2      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ccc:	4b4e      	ldr	r3, [pc, #312]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f0      	bne.n	8005cba <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cd8:	4b4b      	ldr	r3, [pc, #300]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cdc:	4b4b      	ldr	r3, [pc, #300]	; (8005e0c <HAL_RCC_OscConfig+0x78c>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005ce8:	0112      	lsls	r2, r2, #4
 8005cea:	430a      	orrs	r2, r1
 8005cec:	4946      	ldr	r1, [pc, #280]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	628b      	str	r3, [r1, #40]	; 0x28
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d00:	3b01      	subs	r3, #1
 8005d02:	025b      	lsls	r3, r3, #9
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	041b      	lsls	r3, r3, #16
 8005d10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	061b      	lsls	r3, r3, #24
 8005d1e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d22:	4939      	ldr	r1, [pc, #228]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005d28:	4b37      	ldr	r3, [pc, #220]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	4a36      	ldr	r2, [pc, #216]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d34:	4b34      	ldr	r3, [pc, #208]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d38:	4b35      	ldr	r3, [pc, #212]	; (8005e10 <HAL_RCC_OscConfig+0x790>)
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005d40:	00d2      	lsls	r2, r2, #3
 8005d42:	4931      	ldr	r1, [pc, #196]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d48:	4b2f      	ldr	r3, [pc, #188]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	f023 020c 	bic.w	r2, r3, #12
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	492c      	ldr	r1, [pc, #176]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d5a:	4b2b      	ldr	r3, [pc, #172]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	f023 0202 	bic.w	r2, r3, #2
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d66:	4928      	ldr	r1, [pc, #160]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d6c:	4b26      	ldr	r3, [pc, #152]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d78:	4b23      	ldr	r3, [pc, #140]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	4a22      	ldr	r2, [pc, #136]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d84:	4b20      	ldr	r3, [pc, #128]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	4a1f      	ldr	r2, [pc, #124]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005d90:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d9c:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a19      	ldr	r2, [pc, #100]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fc fd28 	bl	80027fc <HAL_GetTick>
 8005dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db0:	f7fc fd24 	bl	80027fc <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e067      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005dc2:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f0      	beq.n	8005db0 <HAL_RCC_OscConfig+0x730>
 8005dce:	e05f      	b.n	8005e90 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd0:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a0c      	ldr	r2, [pc, #48]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ddc:	f7fc fd0e 	bl	80027fc <HAL_GetTick>
 8005de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de4:	f7fc fd0a 	bl	80027fc <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e04d      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005df6:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <HAL_RCC_OscConfig+0x788>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f0      	bne.n	8005de4 <HAL_RCC_OscConfig+0x764>
 8005e02:	e045      	b.n	8005e90 <HAL_RCC_OscConfig+0x810>
 8005e04:	58024800 	.word	0x58024800
 8005e08:	58024400 	.word	0x58024400
 8005e0c:	fffffc0c 	.word	0xfffffc0c
 8005e10:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005e14:	4b21      	ldr	r3, [pc, #132]	; (8005e9c <HAL_RCC_OscConfig+0x81c>)
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005e1a:	4b20      	ldr	r3, [pc, #128]	; (8005e9c <HAL_RCC_OscConfig+0x81c>)
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d031      	beq.n	8005e8c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f003 0203 	and.w	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d12a      	bne.n	8005e8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d122      	bne.n	8005e8c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d11a      	bne.n	8005e8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	0a5b      	lsrs	r3, r3, #9
 8005e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e62:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d111      	bne.n	8005e8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	0c1b      	lsrs	r3, r3, #16
 8005e6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d108      	bne.n	8005e8c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	0e1b      	lsrs	r3, r3, #24
 8005e7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e86:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d001      	beq.n	8005e90 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3730      	adds	r7, #48	; 0x30
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	58024400 	.word	0x58024400

08005ea0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e19c      	b.n	80061ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005eb4:	4b8a      	ldr	r3, [pc, #552]	; (80060e0 <HAL_RCC_ClockConfig+0x240>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d910      	bls.n	8005ee4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ec2:	4b87      	ldr	r3, [pc, #540]	; (80060e0 <HAL_RCC_ClockConfig+0x240>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f023 020f 	bic.w	r2, r3, #15
 8005eca:	4985      	ldr	r1, [pc, #532]	; (80060e0 <HAL_RCC_ClockConfig+0x240>)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ed2:	4b83      	ldr	r3, [pc, #524]	; (80060e0 <HAL_RCC_ClockConfig+0x240>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d001      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e184      	b.n	80061ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d010      	beq.n	8005f12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	4b7b      	ldr	r3, [pc, #492]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d908      	bls.n	8005f12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f00:	4b78      	ldr	r3, [pc, #480]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	4975      	ldr	r1, [pc, #468]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d010      	beq.n	8005f40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695a      	ldr	r2, [r3, #20]
 8005f22:	4b70      	ldr	r3, [pc, #448]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d908      	bls.n	8005f40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f2e:	4b6d      	ldr	r3, [pc, #436]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	496a      	ldr	r1, [pc, #424]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d010      	beq.n	8005f6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699a      	ldr	r2, [r3, #24]
 8005f50:	4b64      	ldr	r3, [pc, #400]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d908      	bls.n	8005f6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f5c:	4b61      	ldr	r3, [pc, #388]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	495e      	ldr	r1, [pc, #376]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d010      	beq.n	8005f9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69da      	ldr	r2, [r3, #28]
 8005f7e:	4b59      	ldr	r3, [pc, #356]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d908      	bls.n	8005f9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005f8a:	4b56      	ldr	r3, [pc, #344]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	4953      	ldr	r1, [pc, #332]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d010      	beq.n	8005fca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	4b4d      	ldr	r3, [pc, #308]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d908      	bls.n	8005fca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fb8:	4b4a      	ldr	r3, [pc, #296]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f023 020f 	bic.w	r2, r3, #15
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	4947      	ldr	r1, [pc, #284]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d055      	beq.n	8006082 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005fd6:	4b43      	ldr	r3, [pc, #268]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	4940      	ldr	r1, [pc, #256]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d107      	bne.n	8006000 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ff0:	4b3c      	ldr	r3, [pc, #240]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d121      	bne.n	8006040 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e0f6      	b.n	80061ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b03      	cmp	r3, #3
 8006006:	d107      	bne.n	8006018 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006008:	4b36      	ldr	r3, [pc, #216]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d115      	bne.n	8006040 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0ea      	b.n	80061ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d107      	bne.n	8006030 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006020:	4b30      	ldr	r3, [pc, #192]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006028:	2b00      	cmp	r3, #0
 800602a:	d109      	bne.n	8006040 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e0de      	b.n	80061ee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006030:	4b2c      	ldr	r3, [pc, #176]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0304 	and.w	r3, r3, #4
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0d6      	b.n	80061ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006040:	4b28      	ldr	r3, [pc, #160]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	f023 0207 	bic.w	r2, r3, #7
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4925      	ldr	r1, [pc, #148]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 800604e:	4313      	orrs	r3, r2
 8006050:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006052:	f7fc fbd3 	bl	80027fc <HAL_GetTick>
 8006056:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006058:	e00a      	b.n	8006070 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800605a:	f7fc fbcf 	bl	80027fc <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	f241 3288 	movw	r2, #5000	; 0x1388
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e0be      	b.n	80061ee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006070:	4b1c      	ldr	r3, [pc, #112]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	429a      	cmp	r2, r3
 8006080:	d1eb      	bne.n	800605a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d010      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	f003 030f 	and.w	r3, r3, #15
 800609a:	429a      	cmp	r2, r3
 800609c:	d208      	bcs.n	80060b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800609e:	4b11      	ldr	r3, [pc, #68]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	f023 020f 	bic.w	r2, r3, #15
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	490e      	ldr	r1, [pc, #56]	; (80060e4 <HAL_RCC_ClockConfig+0x244>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <HAL_RCC_ClockConfig+0x240>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d214      	bcs.n	80060e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060be:	4b08      	ldr	r3, [pc, #32]	; (80060e0 <HAL_RCC_ClockConfig+0x240>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f023 020f 	bic.w	r2, r3, #15
 80060c6:	4906      	ldr	r1, [pc, #24]	; (80060e0 <HAL_RCC_ClockConfig+0x240>)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ce:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <HAL_RCC_ClockConfig+0x240>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 030f 	and.w	r3, r3, #15
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d005      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e086      	b.n	80061ee <HAL_RCC_ClockConfig+0x34e>
 80060e0:	52002000 	.word	0x52002000
 80060e4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d010      	beq.n	8006116 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	4b3f      	ldr	r3, [pc, #252]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006100:	429a      	cmp	r2, r3
 8006102:	d208      	bcs.n	8006116 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006104:	4b3c      	ldr	r3, [pc, #240]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	4939      	ldr	r1, [pc, #228]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 8006112:	4313      	orrs	r3, r2
 8006114:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d010      	beq.n	8006144 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	695a      	ldr	r2, [r3, #20]
 8006126:	4b34      	ldr	r3, [pc, #208]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800612e:	429a      	cmp	r2, r3
 8006130:	d208      	bcs.n	8006144 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006132:	4b31      	ldr	r3, [pc, #196]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	492e      	ldr	r1, [pc, #184]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 8006140:	4313      	orrs	r3, r2
 8006142:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b00      	cmp	r3, #0
 800614e:	d010      	beq.n	8006172 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699a      	ldr	r2, [r3, #24]
 8006154:	4b28      	ldr	r3, [pc, #160]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800615c:	429a      	cmp	r2, r3
 800615e:	d208      	bcs.n	8006172 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006160:	4b25      	ldr	r3, [pc, #148]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	4922      	ldr	r1, [pc, #136]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 800616e:	4313      	orrs	r3, r2
 8006170:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d010      	beq.n	80061a0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69da      	ldr	r2, [r3, #28]
 8006182:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800618a:	429a      	cmp	r2, r3
 800618c:	d208      	bcs.n	80061a0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800618e:	4b1a      	ldr	r3, [pc, #104]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	4917      	ldr	r1, [pc, #92]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 800619c:	4313      	orrs	r3, r2
 800619e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061a0:	f000 f834 	bl	800620c <HAL_RCC_GetSysClockFreq>
 80061a4:	4601      	mov	r1, r0
 80061a6:	4b14      	ldr	r3, [pc, #80]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	0a1b      	lsrs	r3, r3, #8
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	4a12      	ldr	r2, [pc, #72]	; (80061fc <HAL_RCC_ClockConfig+0x35c>)
 80061b2:	5cd3      	ldrb	r3, [r2, r3]
 80061b4:	f003 031f 	and.w	r3, r3, #31
 80061b8:	fa21 f303 	lsr.w	r3, r1, r3
 80061bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061be:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <HAL_RCC_ClockConfig+0x358>)
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	4a0d      	ldr	r2, [pc, #52]	; (80061fc <HAL_RCC_ClockConfig+0x35c>)
 80061c8:	5cd3      	ldrb	r3, [r2, r3]
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	fa22 f303 	lsr.w	r3, r2, r3
 80061d4:	4a0a      	ldr	r2, [pc, #40]	; (8006200 <HAL_RCC_ClockConfig+0x360>)
 80061d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061d8:	4a0a      	ldr	r2, [pc, #40]	; (8006204 <HAL_RCC_ClockConfig+0x364>)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80061de:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <HAL_RCC_ClockConfig+0x368>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fb fd56 	bl	8001c94 <HAL_InitTick>
 80061e8:	4603      	mov	r3, r0
 80061ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	58024400 	.word	0x58024400
 80061fc:	0800f1b4 	.word	0x0800f1b4
 8006200:	20000004 	.word	0x20000004
 8006204:	20000000 	.word	0x20000000
 8006208:	20000008 	.word	0x20000008

0800620c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800620c:	b480      	push	{r7}
 800620e:	b089      	sub	sp, #36	; 0x24
 8006210:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006212:	4baf      	ldr	r3, [pc, #700]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800621a:	2b18      	cmp	r3, #24
 800621c:	f200 814e 	bhi.w	80064bc <HAL_RCC_GetSysClockFreq+0x2b0>
 8006220:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	0800628d 	.word	0x0800628d
 800622c:	080064bd 	.word	0x080064bd
 8006230:	080064bd 	.word	0x080064bd
 8006234:	080064bd 	.word	0x080064bd
 8006238:	080064bd 	.word	0x080064bd
 800623c:	080064bd 	.word	0x080064bd
 8006240:	080064bd 	.word	0x080064bd
 8006244:	080064bd 	.word	0x080064bd
 8006248:	080062b3 	.word	0x080062b3
 800624c:	080064bd 	.word	0x080064bd
 8006250:	080064bd 	.word	0x080064bd
 8006254:	080064bd 	.word	0x080064bd
 8006258:	080064bd 	.word	0x080064bd
 800625c:	080064bd 	.word	0x080064bd
 8006260:	080064bd 	.word	0x080064bd
 8006264:	080064bd 	.word	0x080064bd
 8006268:	080062b9 	.word	0x080062b9
 800626c:	080064bd 	.word	0x080064bd
 8006270:	080064bd 	.word	0x080064bd
 8006274:	080064bd 	.word	0x080064bd
 8006278:	080064bd 	.word	0x080064bd
 800627c:	080064bd 	.word	0x080064bd
 8006280:	080064bd 	.word	0x080064bd
 8006284:	080064bd 	.word	0x080064bd
 8006288:	080062bf 	.word	0x080062bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800628c:	4b90      	ldr	r3, [pc, #576]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d009      	beq.n	80062ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006298:	4b8d      	ldr	r3, [pc, #564]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	08db      	lsrs	r3, r3, #3
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	4a8c      	ldr	r2, [pc, #560]	; (80064d4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80062a4:	fa22 f303 	lsr.w	r3, r2, r3
 80062a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80062aa:	e10a      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80062ac:	4b89      	ldr	r3, [pc, #548]	; (80064d4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80062ae:	61bb      	str	r3, [r7, #24]
    break;
 80062b0:	e107      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80062b2:	4b89      	ldr	r3, [pc, #548]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80062b4:	61bb      	str	r3, [r7, #24]
    break;
 80062b6:	e104      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80062b8:	4b88      	ldr	r3, [pc, #544]	; (80064dc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80062ba:	61bb      	str	r3, [r7, #24]
    break;
 80062bc:	e101      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062be:	4b84      	ldr	r3, [pc, #528]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80062c8:	4b81      	ldr	r3, [pc, #516]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80062d4:	4b7e      	ldr	r3, [pc, #504]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80062de:	4b7c      	ldr	r3, [pc, #496]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e2:	08db      	lsrs	r3, r3, #3
 80062e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	fb02 f303 	mul.w	r3, r2, r3
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 80da 	beq.w	80064b6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d05a      	beq.n	80063be <HAL_RCC_GetSysClockFreq+0x1b2>
 8006308:	2b01      	cmp	r3, #1
 800630a:	d302      	bcc.n	8006312 <HAL_RCC_GetSysClockFreq+0x106>
 800630c:	2b02      	cmp	r3, #2
 800630e:	d078      	beq.n	8006402 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006310:	e099      	b.n	8006446 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006312:	4b6f      	ldr	r3, [pc, #444]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d02d      	beq.n	800637a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800631e:	4b6c      	ldr	r3, [pc, #432]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	08db      	lsrs	r3, r3, #3
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	4a6a      	ldr	r2, [pc, #424]	; (80064d4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800632a:	fa22 f303 	lsr.w	r3, r2, r3
 800632e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	ee07 3a90 	vmov	s15, r3
 8006340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006348:	4b61      	ldr	r3, [pc, #388]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006350:	ee07 3a90 	vmov	s15, r3
 8006354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006358:	ed97 6a02 	vldr	s12, [r7, #8]
 800635c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80064e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006360:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006364:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800636c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006374:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006378:	e087      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	ee07 3a90 	vmov	s15, r3
 8006380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006384:	eddf 6a57 	vldr	s13, [pc, #348]	; 80064e4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800638c:	4b50      	ldr	r3, [pc, #320]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006394:	ee07 3a90 	vmov	s15, r3
 8006398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639c:	ed97 6a02 	vldr	s12, [r7, #8]
 80063a0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80064e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80063a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063bc:	e065      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	ee07 3a90 	vmov	s15, r3
 80063c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c8:	eddf 6a47 	vldr	s13, [pc, #284]	; 80064e8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80063cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d0:	4b3f      	ldr	r3, [pc, #252]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d8:	ee07 3a90 	vmov	s15, r3
 80063dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80063e4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80064e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80063e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006400:	e043      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	ee07 3a90 	vmov	s15, r3
 8006408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640c:	eddf 6a37 	vldr	s13, [pc, #220]	; 80064ec <HAL_RCC_GetSysClockFreq+0x2e0>
 8006410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006414:	4b2e      	ldr	r3, [pc, #184]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641c:	ee07 3a90 	vmov	s15, r3
 8006420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006424:	ed97 6a02 	vldr	s12, [r7, #8]
 8006428:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80064e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800642c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800643c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006440:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006444:	e021      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	ee07 3a90 	vmov	s15, r3
 800644c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006450:	eddf 6a25 	vldr	s13, [pc, #148]	; 80064e8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006458:	4b1d      	ldr	r3, [pc, #116]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006460:	ee07 3a90 	vmov	s15, r3
 8006464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006468:	ed97 6a02 	vldr	s12, [r7, #8]
 800646c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80064e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800647c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006484:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006488:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800648a:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	0a5b      	lsrs	r3, r3, #9
 8006490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006494:	3301      	adds	r3, #1
 8006496:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80064a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ae:	ee17 3a90 	vmov	r3, s15
 80064b2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80064b4:	e005      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61bb      	str	r3, [r7, #24]
    break;
 80064ba:	e002      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80064bc:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80064be:	61bb      	str	r3, [r7, #24]
    break;
 80064c0:	bf00      	nop
  }

  return sysclockfreq;
 80064c2:	69bb      	ldr	r3, [r7, #24]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3724      	adds	r7, #36	; 0x24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	58024400 	.word	0x58024400
 80064d4:	03d09000 	.word	0x03d09000
 80064d8:	003d0900 	.word	0x003d0900
 80064dc:	017d7840 	.word	0x017d7840
 80064e0:	46000000 	.word	0x46000000
 80064e4:	4c742400 	.word	0x4c742400
 80064e8:	4a742400 	.word	0x4a742400
 80064ec:	4bbebc20 	.word	0x4bbebc20

080064f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064f6:	f7ff fe89 	bl	800620c <HAL_RCC_GetSysClockFreq>
 80064fa:	4601      	mov	r1, r0
 80064fc:	4b10      	ldr	r3, [pc, #64]	; (8006540 <HAL_RCC_GetHCLKFreq+0x50>)
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	0a1b      	lsrs	r3, r3, #8
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	4a0f      	ldr	r2, [pc, #60]	; (8006544 <HAL_RCC_GetHCLKFreq+0x54>)
 8006508:	5cd3      	ldrb	r3, [r2, r3]
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	fa21 f303 	lsr.w	r3, r1, r3
 8006512:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006514:	4b0a      	ldr	r3, [pc, #40]	; (8006540 <HAL_RCC_GetHCLKFreq+0x50>)
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	f003 030f 	and.w	r3, r3, #15
 800651c:	4a09      	ldr	r2, [pc, #36]	; (8006544 <HAL_RCC_GetHCLKFreq+0x54>)
 800651e:	5cd3      	ldrb	r3, [r2, r3]
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	fa22 f303 	lsr.w	r3, r2, r3
 800652a:	4a07      	ldr	r2, [pc, #28]	; (8006548 <HAL_RCC_GetHCLKFreq+0x58>)
 800652c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800652e:	4a07      	ldr	r2, [pc, #28]	; (800654c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006534:	4b04      	ldr	r3, [pc, #16]	; (8006548 <HAL_RCC_GetHCLKFreq+0x58>)
 8006536:	681b      	ldr	r3, [r3, #0]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	58024400 	.word	0x58024400
 8006544:	0800f1b4 	.word	0x0800f1b4
 8006548:	20000004 	.word	0x20000004
 800654c:	20000000 	.word	0x20000000

08006550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006554:	f7ff ffcc 	bl	80064f0 <HAL_RCC_GetHCLKFreq>
 8006558:	4601      	mov	r1, r0
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	091b      	lsrs	r3, r3, #4
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	4a04      	ldr	r2, [pc, #16]	; (8006578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006566:	5cd3      	ldrb	r3, [r2, r3]
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006570:	4618      	mov	r0, r3
 8006572:	bd80      	pop	{r7, pc}
 8006574:	58024400 	.word	0x58024400
 8006578:	0800f1b4 	.word	0x0800f1b4

0800657c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006580:	f7ff ffb6 	bl	80064f0 <HAL_RCC_GetHCLKFreq>
 8006584:	4601      	mov	r1, r0
 8006586:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	0a1b      	lsrs	r3, r3, #8
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	4a04      	ldr	r2, [pc, #16]	; (80065a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006592:	5cd3      	ldrb	r3, [r2, r3]
 8006594:	f003 031f 	and.w	r3, r3, #31
 8006598:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800659c:	4618      	mov	r0, r3
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	58024400 	.word	0x58024400
 80065a4:	0800f1b4 	.word	0x0800f1b4

080065a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	223f      	movs	r2, #63	; 0x3f
 80065b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065b8:	4b1a      	ldr	r3, [pc, #104]	; (8006624 <HAL_RCC_GetClockConfig+0x7c>)
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f003 0207 	and.w	r2, r3, #7
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80065c4:	4b17      	ldr	r3, [pc, #92]	; (8006624 <HAL_RCC_GetClockConfig+0x7c>)
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80065d0:	4b14      	ldr	r3, [pc, #80]	; (8006624 <HAL_RCC_GetClockConfig+0x7c>)
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	f003 020f 	and.w	r2, r3, #15
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80065dc:	4b11      	ldr	r3, [pc, #68]	; (8006624 <HAL_RCC_GetClockConfig+0x7c>)
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80065e8:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <HAL_RCC_GetClockConfig+0x7c>)
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_RCC_GetClockConfig+0x7c>)
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006600:	4b08      	ldr	r3, [pc, #32]	; (8006624 <HAL_RCC_GetClockConfig+0x7c>)
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <HAL_RCC_GetClockConfig+0x80>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 020f 	and.w	r2, r3, #15
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	601a      	str	r2, [r3, #0]
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	58024400 	.word	0x58024400
 8006628:	52002000 	.word	0x52002000

0800662c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006634:	2300      	movs	r3, #0
 8006636:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006638:	2300      	movs	r3, #0
 800663a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d03d      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800664c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006650:	d013      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006656:	d802      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800665c:	e01f      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800665e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006662:	d013      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006664:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006668:	d01c      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800666a:	e018      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800666c:	4baf      	ldr	r3, [pc, #700]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	4aae      	ldr	r2, [pc, #696]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006676:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006678:	e015      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3304      	adds	r3, #4
 800667e:	2102      	movs	r1, #2
 8006680:	4618      	mov	r0, r3
 8006682:	f001 f96f 	bl	8007964 <RCCEx_PLL2_Config>
 8006686:	4603      	mov	r3, r0
 8006688:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800668a:	e00c      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3324      	adds	r3, #36	; 0x24
 8006690:	2102      	movs	r1, #2
 8006692:	4618      	mov	r0, r3
 8006694:	f001 fa18 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800669c:	e003      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	75fb      	strb	r3, [r7, #23]
      break;
 80066a2:	e000      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80066a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d109      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80066ac:	4b9f      	ldr	r3, [pc, #636]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066b8:	499c      	ldr	r1, [pc, #624]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	650b      	str	r3, [r1, #80]	; 0x50
 80066be:	e001      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
 80066c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d03d      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	d826      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80066d8:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80066da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066de:	bf00      	nop
 80066e0:	080066f5 	.word	0x080066f5
 80066e4:	08006703 	.word	0x08006703
 80066e8:	08006715 	.word	0x08006715
 80066ec:	0800672d 	.word	0x0800672d
 80066f0:	0800672d 	.word	0x0800672d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f4:	4b8d      	ldr	r3, [pc, #564]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	4a8c      	ldr	r2, [pc, #560]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006700:	e015      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3304      	adds	r3, #4
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f001 f92b 	bl	8007964 <RCCEx_PLL2_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006712:	e00c      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3324      	adds	r3, #36	; 0x24
 8006718:	2100      	movs	r1, #0
 800671a:	4618      	mov	r0, r3
 800671c:	f001 f9d4 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006724:	e003      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	75fb      	strb	r3, [r7, #23]
      break;
 800672a:	e000      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800672c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d109      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006734:	4b7d      	ldr	r3, [pc, #500]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006738:	f023 0207 	bic.w	r2, r3, #7
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006740:	497a      	ldr	r1, [pc, #488]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006742:	4313      	orrs	r3, r2
 8006744:	650b      	str	r3, [r1, #80]	; 0x50
 8006746:	e001      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006754:	2b00      	cmp	r3, #0
 8006756:	d03e      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800675c:	2b80      	cmp	r3, #128	; 0x80
 800675e:	d01c      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006760:	2b80      	cmp	r3, #128	; 0x80
 8006762:	d804      	bhi.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006768:	2b40      	cmp	r3, #64	; 0x40
 800676a:	d00d      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800676c:	e01e      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x180>
 800676e:	2bc0      	cmp	r3, #192	; 0xc0
 8006770:	d01f      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006776:	d01e      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006778:	e018      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800677a:	4b6c      	ldr	r3, [pc, #432]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	4a6b      	ldr	r2, [pc, #428]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006784:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006786:	e017      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3304      	adds	r3, #4
 800678c:	2100      	movs	r1, #0
 800678e:	4618      	mov	r0, r3
 8006790:	f001 f8e8 	bl	8007964 <RCCEx_PLL2_Config>
 8006794:	4603      	mov	r3, r0
 8006796:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006798:	e00e      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3324      	adds	r3, #36	; 0x24
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f001 f991 	bl	8007ac8 <RCCEx_PLL3_Config>
 80067a6:	4603      	mov	r3, r0
 80067a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80067aa:	e005      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	75fb      	strb	r3, [r7, #23]
      break;
 80067b0:	e002      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80067b2:	bf00      	nop
 80067b4:	e000      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80067b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80067be:	4b5b      	ldr	r3, [pc, #364]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ca:	4958      	ldr	r1, [pc, #352]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	650b      	str	r3, [r1, #80]	; 0x50
 80067d0:	e001      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d044      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ec:	d01f      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80067ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067f2:	d805      	bhi.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80067f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067fc:	d00e      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80067fe:	e01f      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006800:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006804:	d01f      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006806:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800680a:	d01e      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800680c:	e018      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800680e:	4b47      	ldr	r3, [pc, #284]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	4a46      	ldr	r2, [pc, #280]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006818:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800681a:	e017      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f001 f89e 	bl	8007964 <RCCEx_PLL2_Config>
 8006828:	4603      	mov	r3, r0
 800682a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800682c:	e00e      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3324      	adds	r3, #36	; 0x24
 8006832:	2100      	movs	r1, #0
 8006834:	4618      	mov	r0, r3
 8006836:	f001 f947 	bl	8007ac8 <RCCEx_PLL3_Config>
 800683a:	4603      	mov	r3, r0
 800683c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800683e:	e005      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	75fb      	strb	r3, [r7, #23]
      break;
 8006844:	e002      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006846:	bf00      	nop
 8006848:	e000      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800684a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006852:	4b36      	ldr	r3, [pc, #216]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006856:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006860:	4932      	ldr	r1, [pc, #200]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006862:	4313      	orrs	r3, r2
 8006864:	658b      	str	r3, [r1, #88]	; 0x58
 8006866:	e001      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006868:	7dfb      	ldrb	r3, [r7, #23]
 800686a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006874:	2b00      	cmp	r3, #0
 8006876:	d044      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800687e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006882:	d01f      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006888:	d805      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800688e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006892:	d00e      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006894:	e01f      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006896:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800689a:	d01f      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800689c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068a0:	d01e      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80068a2:	e018      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a4:	4b21      	ldr	r3, [pc, #132]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	4a20      	ldr	r2, [pc, #128]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068b0:	e017      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3304      	adds	r3, #4
 80068b6:	2100      	movs	r1, #0
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 f853 	bl	8007964 <RCCEx_PLL2_Config>
 80068be:	4603      	mov	r3, r0
 80068c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80068c2:	e00e      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3324      	adds	r3, #36	; 0x24
 80068c8:	2100      	movs	r1, #0
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 f8fc 	bl	8007ac8 <RCCEx_PLL3_Config>
 80068d0:	4603      	mov	r3, r0
 80068d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068d4:	e005      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	75fb      	strb	r3, [r7, #23]
      break;
 80068da:	e002      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80068dc:	bf00      	nop
 80068de:	e000      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80068e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80068e8:	4b10      	ldr	r3, [pc, #64]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80068f6:	490d      	ldr	r1, [pc, #52]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	658b      	str	r3, [r1, #88]	; 0x58
 80068fc:	e001      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
 8006900:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d035      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006912:	2b10      	cmp	r3, #16
 8006914:	d00c      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006916:	2b10      	cmp	r3, #16
 8006918:	d802      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01b      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800691e:	e017      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006920:	2b20      	cmp	r3, #32
 8006922:	d00c      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006924:	2b30      	cmp	r3, #48	; 0x30
 8006926:	d018      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006928:	e012      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800692a:	bf00      	nop
 800692c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006930:	4baf      	ldr	r3, [pc, #700]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	4aae      	ldr	r2, [pc, #696]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800693a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800693c:	e00e      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3304      	adds	r3, #4
 8006942:	2102      	movs	r1, #2
 8006944:	4618      	mov	r0, r3
 8006946:	f001 f80d 	bl	8007964 <RCCEx_PLL2_Config>
 800694a:	4603      	mov	r3, r0
 800694c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800694e:	e005      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	75fb      	strb	r3, [r7, #23]
      break;
 8006954:	e002      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006956:	bf00      	nop
 8006958:	e000      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800695a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006962:	4ba3      	ldr	r3, [pc, #652]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006966:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696e:	49a0      	ldr	r1, [pc, #640]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006970:	4313      	orrs	r3, r2
 8006972:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006974:	e001      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d042      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698e:	d01f      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006994:	d805      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800699a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699e:	d00e      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x392>
 80069a0:	e01f      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80069a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069a6:	d01f      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80069a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ac:	d01e      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80069ae:	e018      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b0:	4b8f      	ldr	r3, [pc, #572]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	4a8e      	ldr	r2, [pc, #568]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80069bc:	e017      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	3304      	adds	r3, #4
 80069c2:	2100      	movs	r1, #0
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 ffcd 	bl	8007964 <RCCEx_PLL2_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80069ce:	e00e      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3324      	adds	r3, #36	; 0x24
 80069d4:	2100      	movs	r1, #0
 80069d6:	4618      	mov	r0, r3
 80069d8:	f001 f876 	bl	8007ac8 <RCCEx_PLL3_Config>
 80069dc:	4603      	mov	r3, r0
 80069de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80069e0:	e005      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	75fb      	strb	r3, [r7, #23]
      break;
 80069e6:	e002      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80069e8:	bf00      	nop
 80069ea:	e000      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80069ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d109      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80069f4:	4b7e      	ldr	r3, [pc, #504]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a00:	497b      	ldr	r1, [pc, #492]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	650b      	str	r3, [r1, #80]	; 0x50
 8006a06:	e001      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d042      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a20:	d01b      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a26:	d805      	bhi.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d022      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a30:	d00a      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006a32:	e01b      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006a34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a38:	d01d      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a3e:	d01c      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006a40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a44:	d01b      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006a46:	e011      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 ff88 	bl	8007964 <RCCEx_PLL2_Config>
 8006a54:	4603      	mov	r3, r0
 8006a56:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006a58:	e012      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3324      	adds	r3, #36	; 0x24
 8006a5e:	2101      	movs	r1, #1
 8006a60:	4618      	mov	r0, r3
 8006a62:	f001 f831 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006a66:	4603      	mov	r3, r0
 8006a68:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006a6a:	e009      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a70:	e006      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006a72:	bf00      	nop
 8006a74:	e004      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006a76:	bf00      	nop
 8006a78:	e002      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006a7a:	bf00      	nop
 8006a7c:	e000      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d109      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a86:	4b5a      	ldr	r3, [pc, #360]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a92:	4957      	ldr	r1, [pc, #348]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	650b      	str	r3, [r1, #80]	; 0x50
 8006a98:	e001      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d044      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab4:	d01b      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aba:	d805      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d022      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006ac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ac4:	d00a      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006ac6:	e01b      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006acc:	d01d      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ad2:	d01c      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006ad4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ad8:	d01b      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006ada:	e011      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 ff3e 	bl	8007964 <RCCEx_PLL2_Config>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006aec:	e012      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3324      	adds	r3, #36	; 0x24
 8006af2:	2101      	movs	r1, #1
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 ffe7 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006afa:	4603      	mov	r3, r0
 8006afc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006afe:	e009      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	75fb      	strb	r3, [r7, #23]
      break;
 8006b04:	e006      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006b06:	bf00      	nop
 8006b08:	e004      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006b0a:	bf00      	nop
 8006b0c:	e002      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006b1a:	4b35      	ldr	r3, [pc, #212]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b28:	4931      	ldr	r1, [pc, #196]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	658b      	str	r3, [r1, #88]	; 0x58
 8006b2e:	e001      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d02d      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b48:	d005      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b4e:	d009      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d013      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006b54:	e00f      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b56:	4b26      	ldr	r3, [pc, #152]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	4a25      	ldr	r2, [pc, #148]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006b62:	e00c      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3304      	adds	r3, #4
 8006b68:	2101      	movs	r1, #1
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fefa 	bl	8007964 <RCCEx_PLL2_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006b74:	e003      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	75fb      	strb	r3, [r7, #23]
      break;
 8006b7a:	e000      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d109      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b84:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b90:	4917      	ldr	r1, [pc, #92]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	650b      	str	r3, [r1, #80]	; 0x50
 8006b96:	e001      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d035      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d81b      	bhi.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006bb0:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb6:	bf00      	nop
 8006bb8:	08006bf5 	.word	0x08006bf5
 8006bbc:	08006bc9 	.word	0x08006bc9
 8006bc0:	08006bd7 	.word	0x08006bd7
 8006bc4:	08006bf5 	.word	0x08006bf5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc8:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	4a08      	ldr	r2, [pc, #32]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006bd4:	e00f      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	2102      	movs	r1, #2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fec1 	bl	8007964 <RCCEx_PLL2_Config>
 8006be2:	4603      	mov	r3, r0
 8006be4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006be6:	e006      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	75fb      	strb	r3, [r7, #23]
      break;
 8006bec:	e003      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006bee:	bf00      	nop
 8006bf0:	58024400 	.word	0x58024400
      break;
 8006bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d109      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006bfc:	4bba      	ldr	r3, [pc, #744]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c00:	f023 0203 	bic.w	r2, r3, #3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c08:	49b7      	ldr	r1, [pc, #732]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c0e:	e001      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
 8006c12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8086 	beq.w	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c22:	4bb2      	ldr	r3, [pc, #712]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4ab1      	ldr	r2, [pc, #708]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c2e:	f7fb fde5 	bl	80027fc <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c34:	e009      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c36:	f7fb fde1 	bl	80027fc <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b64      	cmp	r3, #100	; 0x64
 8006c42:	d902      	bls.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	75fb      	strb	r3, [r7, #23]
        break;
 8006c48:	e005      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c4a:	4ba8      	ldr	r3, [pc, #672]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0ef      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d166      	bne.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c5c:	4ba2      	ldr	r3, [pc, #648]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c66:	4053      	eors	r3, r2
 8006c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d013      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c70:	4b9d      	ldr	r3, [pc, #628]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c78:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c7a:	4b9b      	ldr	r3, [pc, #620]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7e:	4a9a      	ldr	r2, [pc, #616]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c84:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c86:	4b98      	ldr	r3, [pc, #608]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8a:	4a97      	ldr	r2, [pc, #604]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c90:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c92:	4a95      	ldr	r2, [pc, #596]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca2:	d115      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca4:	f7fb fdaa 	bl	80027fc <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006caa:	e00b      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cac:	f7fb fda6 	bl	80027fc <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d902      	bls.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	75fb      	strb	r3, [r7, #23]
            break;
 8006cc2:	e005      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cc4:	4b88      	ldr	r3, [pc, #544]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d0ed      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d126      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce4:	d10d      	bne.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8006ce6:	4b80      	ldr	r3, [pc, #512]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cf4:	0919      	lsrs	r1, r3, #4
 8006cf6:	4b7e      	ldr	r3, [pc, #504]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006cf8:	400b      	ands	r3, r1
 8006cfa:	497b      	ldr	r1, [pc, #492]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	610b      	str	r3, [r1, #16]
 8006d00:	e005      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006d02:	4b79      	ldr	r3, [pc, #484]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	4a78      	ldr	r2, [pc, #480]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006d0c:	6113      	str	r3, [r2, #16]
 8006d0e:	4b76      	ldr	r3, [pc, #472]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d1c:	4972      	ldr	r1, [pc, #456]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	670b      	str	r3, [r1, #112]	; 0x70
 8006d22:	e004      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	75bb      	strb	r3, [r7, #22]
 8006d28:	e001      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
 8006d2c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d07d      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d3e:	2b28      	cmp	r3, #40	; 0x28
 8006d40:	d866      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006d42:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006e17 	.word	0x08006e17
 8006d4c:	08006e11 	.word	0x08006e11
 8006d50:	08006e11 	.word	0x08006e11
 8006d54:	08006e11 	.word	0x08006e11
 8006d58:	08006e11 	.word	0x08006e11
 8006d5c:	08006e11 	.word	0x08006e11
 8006d60:	08006e11 	.word	0x08006e11
 8006d64:	08006e11 	.word	0x08006e11
 8006d68:	08006ded 	.word	0x08006ded
 8006d6c:	08006e11 	.word	0x08006e11
 8006d70:	08006e11 	.word	0x08006e11
 8006d74:	08006e11 	.word	0x08006e11
 8006d78:	08006e11 	.word	0x08006e11
 8006d7c:	08006e11 	.word	0x08006e11
 8006d80:	08006e11 	.word	0x08006e11
 8006d84:	08006e11 	.word	0x08006e11
 8006d88:	08006dff 	.word	0x08006dff
 8006d8c:	08006e11 	.word	0x08006e11
 8006d90:	08006e11 	.word	0x08006e11
 8006d94:	08006e11 	.word	0x08006e11
 8006d98:	08006e11 	.word	0x08006e11
 8006d9c:	08006e11 	.word	0x08006e11
 8006da0:	08006e11 	.word	0x08006e11
 8006da4:	08006e11 	.word	0x08006e11
 8006da8:	08006e17 	.word	0x08006e17
 8006dac:	08006e11 	.word	0x08006e11
 8006db0:	08006e11 	.word	0x08006e11
 8006db4:	08006e11 	.word	0x08006e11
 8006db8:	08006e11 	.word	0x08006e11
 8006dbc:	08006e11 	.word	0x08006e11
 8006dc0:	08006e11 	.word	0x08006e11
 8006dc4:	08006e11 	.word	0x08006e11
 8006dc8:	08006e17 	.word	0x08006e17
 8006dcc:	08006e11 	.word	0x08006e11
 8006dd0:	08006e11 	.word	0x08006e11
 8006dd4:	08006e11 	.word	0x08006e11
 8006dd8:	08006e11 	.word	0x08006e11
 8006ddc:	08006e11 	.word	0x08006e11
 8006de0:	08006e11 	.word	0x08006e11
 8006de4:	08006e11 	.word	0x08006e11
 8006de8:	08006e17 	.word	0x08006e17
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3304      	adds	r3, #4
 8006df0:	2101      	movs	r1, #1
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fdb6 	bl	8007964 <RCCEx_PLL2_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006dfc:	e00c      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3324      	adds	r3, #36	; 0x24
 8006e02:	2101      	movs	r1, #1
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fe5f 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006e0e:	e003      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	75fb      	strb	r3, [r7, #23]
      break;
 8006e14:	e000      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006e1e:	4b32      	ldr	r3, [pc, #200]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e22:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e2a:	492f      	ldr	r1, [pc, #188]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	654b      	str	r3, [r1, #84]	; 0x54
 8006e30:	e001      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d037      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e46:	2b05      	cmp	r3, #5
 8006e48:	d820      	bhi.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e93 	.word	0x08006e93
 8006e54:	08006e69 	.word	0x08006e69
 8006e58:	08006e7b 	.word	0x08006e7b
 8006e5c:	08006e93 	.word	0x08006e93
 8006e60:	08006e93 	.word	0x08006e93
 8006e64:	08006e93 	.word	0x08006e93
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fd78 	bl	8007964 <RCCEx_PLL2_Config>
 8006e74:	4603      	mov	r3, r0
 8006e76:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e78:	e00c      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3324      	adds	r3, #36	; 0x24
 8006e7e:	2101      	movs	r1, #1
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 fe21 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e8a:	e003      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e90:	e000      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e9a:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9e:	f023 0207 	bic.w	r2, r3, #7
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ea6:	4910      	ldr	r1, [pc, #64]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	654b      	str	r3, [r1, #84]	; 0x54
 8006eac:	e001      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
 8006eb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d040      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec4:	2b05      	cmp	r3, #5
 8006ec6:	d827      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006ec8:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006f1f 	.word	0x08006f1f
 8006ed4:	08006ef5 	.word	0x08006ef5
 8006ed8:	08006f07 	.word	0x08006f07
 8006edc:	08006f1f 	.word	0x08006f1f
 8006ee0:	08006f1f 	.word	0x08006f1f
 8006ee4:	08006f1f 	.word	0x08006f1f
 8006ee8:	58024400 	.word	0x58024400
 8006eec:	58024800 	.word	0x58024800
 8006ef0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	2101      	movs	r1, #1
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fd32 	bl	8007964 <RCCEx_PLL2_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006f04:	e00c      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3324      	adds	r3, #36	; 0x24
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fddb 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006f16:	e003      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1c:	e000      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f26:	4bb2      	ldr	r3, [pc, #712]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2a:	f023 0207 	bic.w	r2, r3, #7
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f34:	49ae      	ldr	r1, [pc, #696]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	658b      	str	r3, [r1, #88]	; 0x58
 8006f3a:	e001      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d044      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f56:	d01b      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f5c:	d805      	bhi.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d022      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f66:	d00a      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006f68:	e01b      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6e:	d01d      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f74:	d01c      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006f76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f7a:	d01b      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006f7c:	e011      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3304      	adds	r3, #4
 8006f82:	2100      	movs	r1, #0
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 fced 	bl	8007964 <RCCEx_PLL2_Config>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f8e:	e012      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3324      	adds	r3, #36	; 0x24
 8006f94:	2102      	movs	r1, #2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fd96 	bl	8007ac8 <RCCEx_PLL3_Config>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006fa0:	e009      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa6:	e006      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006fa8:	bf00      	nop
 8006faa:	e004      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006fac:	bf00      	nop
 8006fae:	e002      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006fb0:	bf00      	nop
 8006fb2:	e000      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10a      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fbc:	4b8c      	ldr	r3, [pc, #560]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fca:	4989      	ldr	r1, [pc, #548]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	654b      	str	r3, [r1, #84]	; 0x54
 8006fd0:	e001      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d044      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fec:	d01b      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff2:	d805      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d022      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ffc:	d00a      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006ffe:	e01b      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007004:	d01d      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007006:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800700a:	d01c      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800700c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007010:	d01b      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007012:	e011      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fca2 	bl	8007964 <RCCEx_PLL2_Config>
 8007020:	4603      	mov	r3, r0
 8007022:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007024:	e012      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3324      	adds	r3, #36	; 0x24
 800702a:	2102      	movs	r1, #2
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fd4b 	bl	8007ac8 <RCCEx_PLL3_Config>
 8007032:	4603      	mov	r3, r0
 8007034:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007036:	e009      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	75fb      	strb	r3, [r7, #23]
      break;
 800703c:	e006      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800703e:	bf00      	nop
 8007040:	e004      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007042:	bf00      	nop
 8007044:	e002      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007046:	bf00      	nop
 8007048:	e000      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800704a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10a      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007052:	4b67      	ldr	r3, [pc, #412]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007056:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007060:	4963      	ldr	r1, [pc, #396]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007062:	4313      	orrs	r3, r2
 8007064:	658b      	str	r3, [r1, #88]	; 0x58
 8007066:	e001      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007074:	2b00      	cmp	r3, #0
 8007076:	d044      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800707e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007082:	d01b      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007088:	d805      	bhi.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d022      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800708e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007092:	d00a      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007094:	e01b      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800709a:	d01d      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800709c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80070a0:	d01c      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80070a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80070a6:	d01b      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80070a8:	e011      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3304      	adds	r3, #4
 80070ae:	2100      	movs	r1, #0
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 fc57 	bl	8007964 <RCCEx_PLL2_Config>
 80070b6:	4603      	mov	r3, r0
 80070b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80070ba:	e012      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3324      	adds	r3, #36	; 0x24
 80070c0:	2102      	movs	r1, #2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fd00 	bl	8007ac8 <RCCEx_PLL3_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80070cc:	e009      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	75fb      	strb	r3, [r7, #23]
      break;
 80070d2:	e006      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80070d4:	bf00      	nop
 80070d6:	e004      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80070d8:	bf00      	nop
 80070da:	e002      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80070dc:	bf00      	nop
 80070de:	e000      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80070e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80070e8:	4b41      	ldr	r3, [pc, #260]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80070ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070f6:	493e      	ldr	r1, [pc, #248]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	658b      	str	r3, [r1, #88]	; 0x58
 80070fc:	e001      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
 8007100:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d01a      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007118:	d10a      	bne.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3324      	adds	r3, #36	; 0x24
 800711e:	2102      	movs	r1, #2
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fcd1 	bl	8007ac8 <RCCEx_PLL3_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007130:	4b2f      	ldr	r3, [pc, #188]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007134:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800713e:	492c      	ldr	r1, [pc, #176]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007140:	4313      	orrs	r3, r2
 8007142:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01a      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800715a:	d10a      	bne.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3324      	adds	r3, #36	; 0x24
 8007160:	2102      	movs	r1, #2
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fcb0 	bl	8007ac8 <RCCEx_PLL3_Config>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007172:	4b1f      	ldr	r3, [pc, #124]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007176:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007180:	491b      	ldr	r1, [pc, #108]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007182:	4313      	orrs	r3, r2
 8007184:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d032      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800719c:	d00d      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800719e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071a2:	d016      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d111      	bne.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3304      	adds	r3, #4
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fbd8 	bl	8007964 <RCCEx_PLL2_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80071b8:	e00c      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3324      	adds	r3, #36	; 0x24
 80071be:	2102      	movs	r1, #2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fc81 	bl	8007ac8 <RCCEx_PLL3_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80071ca:	e003      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	75fb      	strb	r3, [r7, #23]
      break;
 80071d0:	e000      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80071d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10c      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071da:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80071dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80071e8:	4901      	ldr	r1, [pc, #4]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	658b      	str	r3, [r1, #88]	; 0x58
 80071ee:	e003      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80071f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d02f      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800720a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800720e:	d00c      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007210:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007214:	d015      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800721a:	d10f      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800721c:	4b79      	ldr	r3, [pc, #484]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	4a78      	ldr	r2, [pc, #480]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007226:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007228:	e00c      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3324      	adds	r3, #36	; 0x24
 800722e:	2101      	movs	r1, #1
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fc49 	bl	8007ac8 <RCCEx_PLL3_Config>
 8007236:	4603      	mov	r3, r0
 8007238:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800723a:	e003      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	75fb      	strb	r3, [r7, #23]
      break;
 8007240:	e000      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007244:	7dfb      	ldrb	r3, [r7, #23]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800724a:	4b6e      	ldr	r3, [pc, #440]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800724c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007258:	496a      	ldr	r1, [pc, #424]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800725a:	4313      	orrs	r3, r2
 800725c:	654b      	str	r3, [r1, #84]	; 0x54
 800725e:	e001      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d029      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800727c:	d007      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800727e:	e00f      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007280:	4b60      	ldr	r3, [pc, #384]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	4a5f      	ldr	r2, [pc, #380]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800728a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800728c:	e00b      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3304      	adds	r3, #4
 8007292:	2102      	movs	r1, #2
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fb65 	bl	8007964 <RCCEx_PLL2_Config>
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800729e:	e002      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	75fb      	strb	r3, [r7, #23]
      break;
 80072a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d109      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80072ac:	4b55      	ldr	r3, [pc, #340]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b8:	4952      	ldr	r1, [pc, #328]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072be:	e001      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3324      	adds	r3, #36	; 0x24
 80072d4:	2102      	movs	r1, #2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fbf6 	bl	8007ac8 <RCCEx_PLL3_Config>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d02f      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fa:	d00c      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80072fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007300:	d802      	bhi.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d011      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007306:	e00d      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800730c:	d00f      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800730e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007312:	d00e      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007314:	e006      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007316:	4b3b      	ldr	r3, [pc, #236]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731a:	4a3a      	ldr	r2, [pc, #232]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800731c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007320:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007322:	e007      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	75fb      	strb	r3, [r7, #23]
      break;
 8007328:	e004      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800732a:	bf00      	nop
 800732c:	e002      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800732e:	bf00      	nop
 8007330:	e000      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800733a:	4b32      	ldr	r3, [pc, #200]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800733c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007346:	492f      	ldr	r1, [pc, #188]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007348:	4313      	orrs	r3, r2
 800734a:	654b      	str	r3, [r1, #84]	; 0x54
 800734c:	e001      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800734e:	7dfb      	ldrb	r3, [r7, #23]
 8007350:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d008      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800735e:	4b29      	ldr	r3, [pc, #164]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007362:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736a:	4926      	ldr	r1, [pc, #152]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800736c:	4313      	orrs	r3, r2
 800736e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d009      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800737c:	4b21      	ldr	r3, [pc, #132]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800738a:	491e      	ldr	r1, [pc, #120]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800738c:	4313      	orrs	r3, r2
 800738e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d008      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800739c:	4b19      	ldr	r3, [pc, #100]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800739e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073a8:	4916      	ldr	r1, [pc, #88]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00d      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073ba:	4b12      	ldr	r3, [pc, #72]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	4a11      	ldr	r2, [pc, #68]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80073c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073c4:	6113      	str	r3, [r2, #16]
 80073c6:	4b0f      	ldr	r3, [pc, #60]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80073c8:	691a      	ldr	r2, [r3, #16]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80073d0:	490c      	ldr	r1, [pc, #48]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	da08      	bge.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073de:	4b09      	ldr	r3, [pc, #36]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80073e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ea:	4906      	ldr	r1, [pc, #24]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80073f0:	7dbb      	ldrb	r3, [r7, #22]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	e000      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	58024400 	.word	0x58024400

08007408 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800740c:	f7ff f870 	bl	80064f0 <HAL_RCC_GetHCLKFreq>
 8007410:	4601      	mov	r1, r0
 8007412:	4b06      	ldr	r3, [pc, #24]	; (800742c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	091b      	lsrs	r3, r3, #4
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	4a04      	ldr	r2, [pc, #16]	; (8007430 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800741e:	5cd3      	ldrb	r3, [r2, r3]
 8007420:	f003 031f 	and.w	r3, r3, #31
 8007424:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007428:	4618      	mov	r0, r3
 800742a:	bd80      	pop	{r7, pc}
 800742c:	58024400 	.word	0x58024400
 8007430:	0800f1b4 	.word	0x0800f1b4

08007434 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007434:	b480      	push	{r7}
 8007436:	b089      	sub	sp, #36	; 0x24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800743c:	4b9d      	ldr	r3, [pc, #628]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007446:	4b9b      	ldr	r3, [pc, #620]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744a:	0b1b      	lsrs	r3, r3, #12
 800744c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007450:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007452:	4b98      	ldr	r3, [pc, #608]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007456:	091b      	lsrs	r3, r3, #4
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800745e:	4b95      	ldr	r3, [pc, #596]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007462:	08db      	lsrs	r3, r3, #3
 8007464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	fb02 f303 	mul.w	r3, r2, r3
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007476:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 810a 	beq.w	8007696 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d05a      	beq.n	800753e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007488:	2b01      	cmp	r3, #1
 800748a:	d302      	bcc.n	8007492 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800748c:	2b02      	cmp	r3, #2
 800748e:	d078      	beq.n	8007582 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007490:	e099      	b.n	80075c6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007492:	4b88      	ldr	r3, [pc, #544]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b00      	cmp	r3, #0
 800749c:	d02d      	beq.n	80074fa <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800749e:	4b85      	ldr	r3, [pc, #532]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	08db      	lsrs	r3, r3, #3
 80074a4:	f003 0303 	and.w	r3, r3, #3
 80074a8:	4a83      	ldr	r2, [pc, #524]	; (80076b8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80074aa:	fa22 f303 	lsr.w	r3, r2, r3
 80074ae:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	ee07 3a90 	vmov	s15, r3
 80074c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c8:	4b7a      	ldr	r3, [pc, #488]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d0:	ee07 3a90 	vmov	s15, r3
 80074d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80074dc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80076bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80074e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074f8:	e087      	b.n	800760a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007504:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80076c0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750c:	4b69      	ldr	r3, [pc, #420]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007514:	ee07 3a90 	vmov	s15, r3
 8007518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007520:	eddf 5a66 	vldr	s11, [pc, #408]	; 80076bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007538:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800753c:	e065      	b.n	800760a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	ee07 3a90 	vmov	s15, r3
 8007544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007548:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800754c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007550:	4b58      	ldr	r3, [pc, #352]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007558:	ee07 3a90 	vmov	s15, r3
 800755c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007560:	ed97 6a03 	vldr	s12, [r7, #12]
 8007564:	eddf 5a55 	vldr	s11, [pc, #340]	; 80076bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007580:	e043      	b.n	800760a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	ee07 3a90 	vmov	s15, r3
 8007588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007594:	4b47      	ldr	r3, [pc, #284]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80076bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80075ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075c4:	e021      	b.n	800760a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	ee07 3a90 	vmov	s15, r3
 80075cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80075d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d8:	4b36      	ldr	r3, [pc, #216]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e0:	ee07 3a90 	vmov	s15, r3
 80075e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ec:	eddf 5a33 	vldr	s11, [pc, #204]	; 80076bc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80075f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007604:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007608:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800760a:	4b2a      	ldr	r3, [pc, #168]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	0a5b      	lsrs	r3, r3, #9
 8007610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007614:	ee07 3a90 	vmov	s15, r3
 8007618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007620:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007624:	edd7 6a07 	vldr	s13, [r7, #28]
 8007628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800762c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007630:	ee17 2a90 	vmov	r2, s15
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007638:	4b1e      	ldr	r3, [pc, #120]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	0c1b      	lsrs	r3, r3, #16
 800763e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800764e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007652:	edd7 6a07 	vldr	s13, [r7, #28]
 8007656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800765a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800765e:	ee17 2a90 	vmov	r2, s15
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007666:	4b13      	ldr	r3, [pc, #76]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766a:	0e1b      	lsrs	r3, r3, #24
 800766c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007670:	ee07 3a90 	vmov	s15, r3
 8007674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800767c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007680:	edd7 6a07 	vldr	s13, [r7, #28]
 8007684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800768c:	ee17 2a90 	vmov	r2, s15
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007694:	e008      	b.n	80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	609a      	str	r2, [r3, #8]
}
 80076a8:	bf00      	nop
 80076aa:	3724      	adds	r7, #36	; 0x24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	58024400 	.word	0x58024400
 80076b8:	03d09000 	.word	0x03d09000
 80076bc:	46000000 	.word	0x46000000
 80076c0:	4c742400 	.word	0x4c742400
 80076c4:	4a742400 	.word	0x4a742400
 80076c8:	4bbebc20 	.word	0x4bbebc20

080076cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b089      	sub	sp, #36	; 0x24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076d4:	4b9d      	ldr	r3, [pc, #628]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80076de:	4b9b      	ldr	r3, [pc, #620]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e2:	0d1b      	lsrs	r3, r3, #20
 80076e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076ea:	4b98      	ldr	r3, [pc, #608]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ee:	0a1b      	lsrs	r3, r3, #8
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80076f6:	4b95      	ldr	r3, [pc, #596]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fa:	08db      	lsrs	r3, r3, #3
 80076fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	fb02 f303 	mul.w	r3, r2, r3
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 810a 	beq.w	800792e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d05a      	beq.n	80077d6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007720:	2b01      	cmp	r3, #1
 8007722:	d302      	bcc.n	800772a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007724:	2b02      	cmp	r3, #2
 8007726:	d078      	beq.n	800781a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007728:	e099      	b.n	800785e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800772a:	4b88      	ldr	r3, [pc, #544]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0320 	and.w	r3, r3, #32
 8007732:	2b00      	cmp	r3, #0
 8007734:	d02d      	beq.n	8007792 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007736:	4b85      	ldr	r3, [pc, #532]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	08db      	lsrs	r3, r3, #3
 800773c:	f003 0303 	and.w	r3, r3, #3
 8007740:	4a83      	ldr	r2, [pc, #524]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007742:	fa22 f303 	lsr.w	r3, r2, r3
 8007746:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	ee07 3a90 	vmov	s15, r3
 8007758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007760:	4b7a      	ldr	r3, [pc, #488]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007768:	ee07 3a90 	vmov	s15, r3
 800776c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007770:	ed97 6a03 	vldr	s12, [r7, #12]
 8007774:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007778:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007780:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007784:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007790:	e087      	b.n	80078a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	ee07 3a90 	vmov	s15, r3
 8007798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80077a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a4:	4b69      	ldr	r3, [pc, #420]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ac:	ee07 3a90 	vmov	s15, r3
 80077b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80077bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077d4:	e065      	b.n	80078a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	ee07 3a90 	vmov	s15, r3
 80077dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80077e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e8:	4b58      	ldr	r3, [pc, #352]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f0:	ee07 3a90 	vmov	s15, r3
 80077f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007800:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007804:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007808:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800780c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007814:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007818:	e043      	b.n	80078a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	ee07 3a90 	vmov	s15, r3
 8007820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007824:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800782c:	4b47      	ldr	r3, [pc, #284]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800782e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007834:	ee07 3a90 	vmov	s15, r3
 8007838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007840:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007844:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800784c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007858:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800785c:	e021      	b.n	80078a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	ee07 3a90 	vmov	s15, r3
 8007864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007868:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800786c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007870:	4b36      	ldr	r3, [pc, #216]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007878:	ee07 3a90 	vmov	s15, r3
 800787c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007880:	ed97 6a03 	vldr	s12, [r7, #12]
 8007884:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007888:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800788c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007890:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007894:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078a0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80078a2:	4b2a      	ldr	r3, [pc, #168]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	0a5b      	lsrs	r3, r3, #9
 80078a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ac:	ee07 3a90 	vmov	s15, r3
 80078b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80078c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c8:	ee17 2a90 	vmov	r2, s15
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80078d0:	4b1e      	ldr	r3, [pc, #120]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	0c1b      	lsrs	r3, r3, #16
 80078d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f6:	ee17 2a90 	vmov	r2, s15
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80078fe:	4b13      	ldr	r3, [pc, #76]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	0e1b      	lsrs	r3, r3, #24
 8007904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007908:	ee07 3a90 	vmov	s15, r3
 800790c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007910:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007914:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007918:	edd7 6a07 	vldr	s13, [r7, #28]
 800791c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007924:	ee17 2a90 	vmov	r2, s15
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800792c:	e008      	b.n	8007940 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	609a      	str	r2, [r3, #8]
}
 8007940:	bf00      	nop
 8007942:	3724      	adds	r7, #36	; 0x24
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	58024400 	.word	0x58024400
 8007950:	03d09000 	.word	0x03d09000
 8007954:	46000000 	.word	0x46000000
 8007958:	4c742400 	.word	0x4c742400
 800795c:	4a742400 	.word	0x4a742400
 8007960:	4bbebc20 	.word	0x4bbebc20

08007964 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007972:	4b53      	ldr	r3, [pc, #332]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	2b03      	cmp	r3, #3
 800797c:	d101      	bne.n	8007982 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e099      	b.n	8007ab6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007982:	4b4f      	ldr	r3, [pc, #316]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a4e      	ldr	r2, [pc, #312]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007988:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800798c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800798e:	f7fa ff35 	bl	80027fc <HAL_GetTick>
 8007992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007994:	e008      	b.n	80079a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007996:	f7fa ff31 	bl	80027fc <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d901      	bls.n	80079a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e086      	b.n	8007ab6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079a8:	4b45      	ldr	r3, [pc, #276]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1f0      	bne.n	8007996 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80079b4:	4b42      	ldr	r3, [pc, #264]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 80079b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	031b      	lsls	r3, r3, #12
 80079c2:	493f      	ldr	r1, [pc, #252]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 80079c4:	4313      	orrs	r3, r2
 80079c6:	628b      	str	r3, [r1, #40]	; 0x28
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	025b      	lsls	r3, r3, #9
 80079da:	b29b      	uxth	r3, r3
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	3b01      	subs	r3, #1
 80079e4:	041b      	lsls	r3, r3, #16
 80079e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	061b      	lsls	r3, r3, #24
 80079f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079f8:	4931      	ldr	r1, [pc, #196]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079fe:	4b30      	ldr	r3, [pc, #192]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	492d      	ldr	r1, [pc, #180]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a10:	4b2b      	ldr	r3, [pc, #172]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	f023 0220 	bic.w	r2, r3, #32
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	4928      	ldr	r1, [pc, #160]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a22:	4b27      	ldr	r3, [pc, #156]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	4a26      	ldr	r2, [pc, #152]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a28:	f023 0310 	bic.w	r3, r3, #16
 8007a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a2e:	4b24      	ldr	r3, [pc, #144]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a32:	4b24      	ldr	r3, [pc, #144]	; (8007ac4 <RCCEx_PLL2_Config+0x160>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	69d2      	ldr	r2, [r2, #28]
 8007a3a:	00d2      	lsls	r2, r2, #3
 8007a3c:	4920      	ldr	r1, [pc, #128]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a42:	4b1f      	ldr	r3, [pc, #124]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	4a1e      	ldr	r2, [pc, #120]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a48:	f043 0310 	orr.w	r3, r3, #16
 8007a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d106      	bne.n	8007a62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a54:	4b1a      	ldr	r3, [pc, #104]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4a19      	ldr	r2, [pc, #100]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a60:	e00f      	b.n	8007a82 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d106      	bne.n	8007a76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a68:	4b15      	ldr	r3, [pc, #84]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	4a14      	ldr	r2, [pc, #80]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a74:	e005      	b.n	8007a82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a76:	4b12      	ldr	r3, [pc, #72]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	4a11      	ldr	r2, [pc, #68]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a82:	4b0f      	ldr	r3, [pc, #60]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a0e      	ldr	r2, [pc, #56]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007a88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a8e:	f7fa feb5 	bl	80027fc <HAL_GetTick>
 8007a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a94:	e008      	b.n	8007aa8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007a96:	f7fa feb1 	bl	80027fc <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d901      	bls.n	8007aa8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e006      	b.n	8007ab6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007aa8:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <RCCEx_PLL2_Config+0x15c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d0f0      	beq.n	8007a96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	58024400 	.word	0x58024400
 8007ac4:	ffff0007 	.word	0xffff0007

08007ac8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ad6:	4b53      	ldr	r3, [pc, #332]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d101      	bne.n	8007ae6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e099      	b.n	8007c1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ae6:	4b4f      	ldr	r3, [pc, #316]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a4e      	ldr	r2, [pc, #312]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007af2:	f7fa fe83 	bl	80027fc <HAL_GetTick>
 8007af6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007af8:	e008      	b.n	8007b0c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007afa:	f7fa fe7f 	bl	80027fc <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e086      	b.n	8007c1a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b0c:	4b45      	ldr	r3, [pc, #276]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1f0      	bne.n	8007afa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b18:	4b42      	ldr	r3, [pc, #264]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	051b      	lsls	r3, r3, #20
 8007b26:	493f      	ldr	r1, [pc, #252]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	628b      	str	r3, [r1, #40]	; 0x28
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	025b      	lsls	r3, r3, #9
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	431a      	orrs	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	041b      	lsls	r3, r3, #16
 8007b4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	061b      	lsls	r3, r3, #24
 8007b58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b5c:	4931      	ldr	r1, [pc, #196]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b62:	4b30      	ldr	r3, [pc, #192]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	492d      	ldr	r1, [pc, #180]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b74:	4b2b      	ldr	r3, [pc, #172]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	4928      	ldr	r1, [pc, #160]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b86:	4b27      	ldr	r3, [pc, #156]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8a:	4a26      	ldr	r2, [pc, #152]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b92:	4b24      	ldr	r3, [pc, #144]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b96:	4b24      	ldr	r3, [pc, #144]	; (8007c28 <RCCEx_PLL3_Config+0x160>)
 8007b98:	4013      	ands	r3, r2
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	69d2      	ldr	r2, [r2, #28]
 8007b9e:	00d2      	lsls	r2, r2, #3
 8007ba0:	4920      	ldr	r1, [pc, #128]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007ba6:	4b1f      	ldr	r3, [pc, #124]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007baa:	4a1e      	ldr	r2, [pc, #120]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d106      	bne.n	8007bc6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007bb8:	4b1a      	ldr	r3, [pc, #104]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	4a19      	ldr	r2, [pc, #100]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bc4:	e00f      	b.n	8007be6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d106      	bne.n	8007bda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007bcc:	4b15      	ldr	r3, [pc, #84]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	4a14      	ldr	r2, [pc, #80]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007bd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bd8:	e005      	b.n	8007be6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007bda:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bde:	4a11      	ldr	r2, [pc, #68]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007be4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007be6:	4b0f      	ldr	r3, [pc, #60]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a0e      	ldr	r2, [pc, #56]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bf2:	f7fa fe03 	bl	80027fc <HAL_GetTick>
 8007bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bf8:	e008      	b.n	8007c0c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007bfa:	f7fa fdff 	bl	80027fc <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d901      	bls.n	8007c0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e006      	b.n	8007c1a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c0c:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <RCCEx_PLL3_Config+0x15c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0f0      	beq.n	8007bfa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	58024400 	.word	0x58024400
 8007c28:	ffff0007 	.word	0xffff0007

08007c2c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d067      	beq.n	8007d0e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d106      	bne.n	8007c58 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7f9 fbce 	bl	80013f4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	22ca      	movs	r2, #202	; 0xca
 8007c66:	625a      	str	r2, [r3, #36]	; 0x24
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2253      	movs	r2, #83	; 0x53
 8007c6e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f879 	bl	8007d68 <RTC_EnterInitMode>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d13b      	bne.n	8007cf8 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6899      	ldr	r1, [r3, #8]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	4b23      	ldr	r3, [pc, #140]	; (8007d18 <HAL_RTC_Init+0xec>)
 8007c8c:	400b      	ands	r3, r1
 8007c8e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6899      	ldr	r1, [r3, #8]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	431a      	orrs	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	0419      	lsls	r1, r3, #16
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f881 	bl	8007dc8 <RTC_ExitInitMode>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d113      	bne.n	8007cf8 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0203 	bic.w	r2, r2, #3
 8007cde:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	69da      	ldr	r2, [r3, #28]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	22ff      	movs	r2, #255	; 0xff
 8007cfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d103      	bne.n	8007d0e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	ff8fffbf 	.word	0xff8fffbf

08007d1c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d32:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8007d34:	f7fa fd62 	bl	80027fc <HAL_GetTick>
 8007d38:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d3a:	e009      	b.n	8007d50 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d3c:	f7fa fd5e 	bl	80027fc <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d4a:	d901      	bls.n	8007d50 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e007      	b.n	8007d60 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d0ee      	beq.n	8007d3c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d11d      	bne.n	8007dbe <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d8a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007d8c:	f7fa fd36 	bl	80027fc <HAL_GetTick>
 8007d90:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d92:	e00d      	b.n	8007db0 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007d94:	f7fa fd32 	bl	80027fc <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007da2:	d905      	bls.n	8007db0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2203      	movs	r2, #3
 8007dac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0ea      	beq.n	8007d94 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8007dd4:	4b1a      	ldr	r3, [pc, #104]	; (8007e40 <RTC_ExitInitMode+0x78>)
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	4a19      	ldr	r2, [pc, #100]	; (8007e40 <RTC_ExitInitMode+0x78>)
 8007dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dde:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007de0:	4b17      	ldr	r3, [pc, #92]	; (8007e40 <RTC_ExitInitMode+0x78>)
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10c      	bne.n	8007e06 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff ff95 	bl	8007d1c <HAL_RTC_WaitForSynchro>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d01e      	beq.n	8007e36 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	73fb      	strb	r3, [r7, #15]
 8007e04:	e017      	b.n	8007e36 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e06:	4b0e      	ldr	r3, [pc, #56]	; (8007e40 <RTC_ExitInitMode+0x78>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	4a0d      	ldr	r2, [pc, #52]	; (8007e40 <RTC_ExitInitMode+0x78>)
 8007e0c:	f023 0320 	bic.w	r3, r3, #32
 8007e10:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff ff82 	bl	8007d1c <HAL_RTC_WaitForSynchro>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d005      	beq.n	8007e2a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2203      	movs	r2, #3
 8007e22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e2a:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <RTC_ExitInitMode+0x78>)
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	4a04      	ldr	r2, [pc, #16]	; (8007e40 <RTC_ExitInitMode+0x78>)
 8007e30:	f043 0320 	orr.w	r3, r3, #32
 8007e34:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	58004000 	.word	0x58004000

08007e44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e0e2      	b.n	8008020 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a70      	ldr	r2, [pc, #448]	; (8008028 <HAL_SPI_Init+0x1e4>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00f      	beq.n	8007e8a <HAL_SPI_Init+0x46>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a6f      	ldr	r2, [pc, #444]	; (800802c <HAL_SPI_Init+0x1e8>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00a      	beq.n	8007e8a <HAL_SPI_Init+0x46>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a6d      	ldr	r2, [pc, #436]	; (8008030 <HAL_SPI_Init+0x1ec>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d005      	beq.n	8007e8a <HAL_SPI_Init+0x46>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	2b0f      	cmp	r3, #15
 8007e84:	d901      	bls.n	8007e8a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e0ca      	b.n	8008020 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fb96 	bl	80085bc <SPI_GetPacketSize>
 8007e90:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a64      	ldr	r2, [pc, #400]	; (8008028 <HAL_SPI_Init+0x1e4>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d00c      	beq.n	8007eb6 <HAL_SPI_Init+0x72>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a62      	ldr	r2, [pc, #392]	; (800802c <HAL_SPI_Init+0x1e8>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d007      	beq.n	8007eb6 <HAL_SPI_Init+0x72>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a61      	ldr	r2, [pc, #388]	; (8008030 <HAL_SPI_Init+0x1ec>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d002      	beq.n	8007eb6 <HAL_SPI_Init+0x72>
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b08      	cmp	r3, #8
 8007eb4:	d811      	bhi.n	8007eda <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007eba:	4a5b      	ldr	r2, [pc, #364]	; (8008028 <HAL_SPI_Init+0x1e4>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d009      	beq.n	8007ed4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a59      	ldr	r2, [pc, #356]	; (800802c <HAL_SPI_Init+0x1e8>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d004      	beq.n	8007ed4 <HAL_SPI_Init+0x90>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a58      	ldr	r2, [pc, #352]	; (8008030 <HAL_SPI_Init+0x1ec>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d104      	bne.n	8007ede <HAL_SPI_Init+0x9a>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b10      	cmp	r3, #16
 8007ed8:	d901      	bls.n	8007ede <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e0a0      	b.n	8008020 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7f9 fbf0 	bl	80016d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0201 	bic.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f18:	d110      	bne.n	8007f3c <HAL_SPI_Init+0xf8>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f22:	d10b      	bne.n	8007f3c <HAL_SPI_Init+0xf8>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d107      	bne.n	8007f3c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f3a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f44:	431a      	orrs	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4e:	ea42 0103 	orr.w	r1, r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68da      	ldr	r2, [r3, #12]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	431a      	orrs	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f9c:	ea42 0103 	orr.w	r1, r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d113      	bne.n	8007fdc <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fc6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fda:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0201 	bic.w	r2, r2, #1
 8007fea:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00a      	beq.n	800800e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	40013000 	.word	0x40013000
 800802c:	40003800 	.word	0x40003800
 8008030:	40003c00 	.word	0x40003c00

08008034 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08a      	sub	sp, #40	; 0x28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800804c:	6a3a      	ldr	r2, [r7, #32]
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	4013      	ands	r3, r2
 8008052:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800805c:	2300      	movs	r3, #0
 800805e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008066:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3330      	adds	r3, #48	; 0x30
 800806e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008076:	2b00      	cmp	r3, #0
 8008078:	d113      	bne.n	80080a2 <HAL_SPI_IRQHandler+0x6e>
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	f003 0320 	and.w	r3, r3, #32
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10e      	bne.n	80080a2 <HAL_SPI_IRQHandler+0x6e>
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	f003 0304 	and.w	r3, r3, #4
 800808a:	2b00      	cmp	r3, #0
 800808c:	d009      	beq.n	80080a2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	4798      	blx	r3
    handled = 1UL;
 800809e:	2301      	movs	r3, #1
 80080a0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10f      	bne.n	80080cc <HAL_SPI_IRQHandler+0x98>
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <HAL_SPI_IRQHandler+0x98>
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	f003 0304 	and.w	r3, r3, #4
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d105      	bne.n	80080cc <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	4798      	blx	r3
    handled = 1UL;
 80080c8:	2301      	movs	r3, #1
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10f      	bne.n	80080f6 <HAL_SPI_IRQHandler+0xc2>
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00a      	beq.n	80080f6 <HAL_SPI_IRQHandler+0xc2>
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	f003 0304 	and.w	r3, r3, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d105      	bne.n	80080f6 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
    handled = 1UL;
 80080f2:	2301      	movs	r3, #1
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f040 8170 	bne.w	80083de <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	f003 0308 	and.w	r3, r3, #8
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 80a0 	beq.w	800824a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	699a      	ldr	r2, [r3, #24]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f042 0208 	orr.w	r2, r2, #8
 8008118:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	699a      	ldr	r2, [r3, #24]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0210 	orr.w	r2, r2, #16
 8008128:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	699a      	ldr	r2, [r3, #24]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008138:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	691a      	ldr	r2, [r3, #16]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0208 	bic.w	r2, r2, #8
 8008148:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00f      	beq.n	8008174 <HAL_SPI_IRQHandler+0x140>
 8008154:	7cfb      	ldrb	r3, [r7, #19]
 8008156:	2b04      	cmp	r3, #4
 8008158:	d004      	beq.n	8008164 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d007      	beq.n	8008174 <HAL_SPI_IRQHandler+0x140>
 8008164:	7cfb      	ldrb	r3, [r7, #19]
 8008166:	2b03      	cmp	r3, #3
 8008168:	d059      	beq.n	800821e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d154      	bne.n	800821e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d13d      	bne.n	80081fe <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8008182:	e036      	b.n	80081f2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	2b0f      	cmp	r3, #15
 800818a:	d90b      	bls.n	80081a4 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008194:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008196:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800819c:	1d1a      	adds	r2, r3, #4
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	665a      	str	r2, [r3, #100]	; 0x64
 80081a2:	e01d      	b.n	80081e0 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	2b07      	cmp	r3, #7
 80081aa:	d90b      	bls.n	80081c4 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	8812      	ldrh	r2, [r2, #0]
 80081b4:	b292      	uxth	r2, r2
 80081b6:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081bc:	1c9a      	adds	r2, r3, #2
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	665a      	str	r2, [r3, #100]	; 0x64
 80081c2:	e00d      	b.n	80081e0 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081d0:	7812      	ldrb	r2, [r2, #0]
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	3b01      	subs	r3, #1
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1c2      	bne.n	8008184 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f93c 	bl	800847c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f90c 	bl	8008434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800821c:	e0e4      	b.n	80083e8 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800821e:	7cfb      	ldrb	r3, [r7, #19]
 8008220:	2b05      	cmp	r3, #5
 8008222:	d103      	bne.n	800822c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f8fb 	bl	8008420 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 800822a:	e0da      	b.n	80083e2 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800822c:	7cfb      	ldrb	r3, [r7, #19]
 800822e:	2b04      	cmp	r3, #4
 8008230:	d103      	bne.n	800823a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f8ea 	bl	800840c <HAL_SPI_RxCpltCallback>
    return;
 8008238:	e0d3      	b.n	80083e2 <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800823a:	7cfb      	ldrb	r3, [r7, #19]
 800823c:	2b03      	cmp	r3, #3
 800823e:	f040 80d0 	bne.w	80083e2 <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f8d8 	bl	80083f8 <HAL_SPI_TxCpltCallback>
    return;
 8008248:	e0cb      	b.n	80083e2 <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00d      	beq.n	8008270 <HAL_SPI_IRQHandler+0x23c>
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	f003 0308 	and.w	r3, r3, #8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d008      	beq.n	8008270 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	699a      	ldr	r2, [r3, #24]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800826c:	619a      	str	r2, [r3, #24]

    return;
 800826e:	e0bb      	b.n	80083e8 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 80b6 	beq.w	80083e8 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00f      	beq.n	80082a6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800828c:	f043 0204 	orr.w	r2, r3, #4
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	699a      	ldr	r2, [r3, #24]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082a4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00f      	beq.n	80082d0 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082b6:	f043 0201 	orr.w	r2, r3, #1
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	699a      	ldr	r2, [r3, #24]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082ce:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00f      	beq.n	80082fa <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082e0:	f043 0208 	orr.w	r2, r3, #8
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	699a      	ldr	r2, [r3, #24]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082f8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	f003 0320 	and.w	r3, r3, #32
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00f      	beq.n	8008324 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800830a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0220 	orr.w	r2, r2, #32
 8008322:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800832a:	2b00      	cmp	r3, #0
 800832c:	d05b      	beq.n	80083e6 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0201 	bic.w	r2, r2, #1
 800833c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6919      	ldr	r1, [r3, #16]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	4b29      	ldr	r3, [pc, #164]	; (80083f0 <HAL_SPI_IRQHandler+0x3bc>)
 800834a:	400b      	ands	r3, r1
 800834c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008354:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008358:	d138      	bne.n	80083cc <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008368:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d013      	beq.n	800839a <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008376:	4a1f      	ldr	r2, [pc, #124]	; (80083f4 <HAL_SPI_IRQHandler+0x3c0>)
 8008378:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800837e:	4618      	mov	r0, r3
 8008380:	f7fb f806 	bl	8003390 <HAL_DMA_Abort_IT>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008390:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d021      	beq.n	80083e6 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083a6:	4a13      	ldr	r2, [pc, #76]	; (80083f4 <HAL_SPI_IRQHandler+0x3c0>)
 80083a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fa ffee 	bl	8003390 <HAL_DMA_Abort_IT>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d015      	beq.n	80083e6 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80083ca:	e00c      	b.n	80083e6 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f82d 	bl	8008434 <HAL_SPI_ErrorCallback>
    return;
 80083da:	bf00      	nop
 80083dc:	e003      	b.n	80083e6 <HAL_SPI_IRQHandler+0x3b2>
    return;
 80083de:	bf00      	nop
 80083e0:	e002      	b.n	80083e8 <HAL_SPI_IRQHandler+0x3b4>
    return;
 80083e2:	bf00      	nop
 80083e4:	e000      	b.n	80083e8 <HAL_SPI_IRQHandler+0x3b4>
    return;
 80083e6:	bf00      	nop
  }
}
 80083e8:	3728      	adds	r7, #40	; 0x28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	fffffc94 	.word	0xfffffc94
 80083f4:	08008449 	.word	0x08008449

080083f8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008454:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f7ff ffe0 	bl	8008434 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008474:	bf00      	nop
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699a      	ldr	r2, [r3, #24]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0208 	orr.w	r2, r2, #8
 800849a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0210 	orr.w	r2, r2, #16
 80084aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f022 0201 	bic.w	r2, r2, #1
 80084ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6919      	ldr	r1, [r3, #16]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	4b3c      	ldr	r3, [pc, #240]	; (80085b8 <SPI_CloseTransfer+0x13c>)
 80084c8:	400b      	ands	r3, r1
 80084ca:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689a      	ldr	r2, [r3, #8]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80084da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d014      	beq.n	8008512 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f003 0320 	and.w	r3, r3, #32
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00f      	beq.n	8008512 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	699a      	ldr	r2, [r3, #24]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f042 0220 	orr.w	r2, r2, #32
 8008510:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b03      	cmp	r3, #3
 800851c:	d014      	beq.n	8008548 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00f      	beq.n	8008548 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800852e:	f043 0204 	orr.w	r2, r3, #4
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699a      	ldr	r2, [r3, #24]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008546:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00f      	beq.n	8008572 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008558:	f043 0201 	orr.w	r2, r3, #1
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	699a      	ldr	r2, [r3, #24]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008570:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00f      	beq.n	800859c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008582:	f043 0208 	orr.w	r2, r3, #8
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699a      	ldr	r2, [r3, #24]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800859a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80085ac:	bf00      	nop
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	fffffc90 	.word	0xfffffc90

080085bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c8:	095b      	lsrs	r3, r3, #5
 80085ca:	3301      	adds	r3, #1
 80085cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	3301      	adds	r3, #1
 80085d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	3307      	adds	r3, #7
 80085da:	08db      	lsrs	r3, r3, #3
 80085dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e049      	b.n	8008698 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	d106      	bne.n	800861e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f841 	bl	80086a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2202      	movs	r2, #2
 8008622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3304      	adds	r3, #4
 800862e:	4619      	mov	r1, r3
 8008630:	4610      	mov	r0, r2
 8008632:	f000 f9bd 	bl	80089b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d001      	beq.n	80086cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e021      	b.n	8008710 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0201 	orr.w	r2, r2, #1
 80086e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689a      	ldr	r2, [r3, #8]
 80086ea:	4b0c      	ldr	r3, [pc, #48]	; (800871c <HAL_TIM_Base_Start_IT+0x68>)
 80086ec:	4013      	ands	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b06      	cmp	r3, #6
 80086f4:	d00b      	beq.n	800870e <HAL_TIM_Base_Start_IT+0x5a>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086fc:	d007      	beq.n	800870e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f042 0201 	orr.w	r2, r2, #1
 800870c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	00010007 	.word	0x00010007

08008720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b02      	cmp	r3, #2
 8008734:	d122      	bne.n	800877c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f003 0302 	and.w	r3, r3, #2
 8008740:	2b02      	cmp	r3, #2
 8008742:	d11b      	bne.n	800877c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f06f 0202 	mvn.w	r2, #2
 800874c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f905 	bl	8008972 <HAL_TIM_IC_CaptureCallback>
 8008768:	e005      	b.n	8008776 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f8f7 	bl	800895e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f908 	bl	8008986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	f003 0304 	and.w	r3, r3, #4
 8008786:	2b04      	cmp	r3, #4
 8008788:	d122      	bne.n	80087d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f003 0304 	and.w	r3, r3, #4
 8008794:	2b04      	cmp	r3, #4
 8008796:	d11b      	bne.n	80087d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f06f 0204 	mvn.w	r2, #4
 80087a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2202      	movs	r2, #2
 80087a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f8db 	bl	8008972 <HAL_TIM_IC_CaptureCallback>
 80087bc:	e005      	b.n	80087ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f8cd 	bl	800895e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f8de 	bl	8008986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f003 0308 	and.w	r3, r3, #8
 80087da:	2b08      	cmp	r3, #8
 80087dc:	d122      	bne.n	8008824 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f003 0308 	and.w	r3, r3, #8
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d11b      	bne.n	8008824 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f06f 0208 	mvn.w	r2, #8
 80087f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2204      	movs	r2, #4
 80087fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	f003 0303 	and.w	r3, r3, #3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f8b1 	bl	8008972 <HAL_TIM_IC_CaptureCallback>
 8008810:	e005      	b.n	800881e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f8a3 	bl	800895e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f8b4 	bl	8008986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	f003 0310 	and.w	r3, r3, #16
 800882e:	2b10      	cmp	r3, #16
 8008830:	d122      	bne.n	8008878 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f003 0310 	and.w	r3, r3, #16
 800883c:	2b10      	cmp	r3, #16
 800883e:	d11b      	bne.n	8008878 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f06f 0210 	mvn.w	r2, #16
 8008848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2208      	movs	r2, #8
 800884e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f887 	bl	8008972 <HAL_TIM_IC_CaptureCallback>
 8008864:	e005      	b.n	8008872 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f879 	bl	800895e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f88a 	bl	8008986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b01      	cmp	r3, #1
 8008884:	d10e      	bne.n	80088a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b01      	cmp	r3, #1
 8008892:	d107      	bne.n	80088a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f06f 0201 	mvn.w	r2, #1
 800889c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7f8 fc7e 	bl	80011a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ae:	2b80      	cmp	r3, #128	; 0x80
 80088b0:	d10e      	bne.n	80088d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088bc:	2b80      	cmp	r3, #128	; 0x80
 80088be:	d107      	bne.n	80088d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f914 	bl	8008af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088de:	d10e      	bne.n	80088fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ea:	2b80      	cmp	r3, #128	; 0x80
 80088ec:	d107      	bne.n	80088fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f907 	bl	8008b0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008908:	2b40      	cmp	r3, #64	; 0x40
 800890a:	d10e      	bne.n	800892a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008916:	2b40      	cmp	r3, #64	; 0x40
 8008918:	d107      	bne.n	800892a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f838 	bl	800899a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	f003 0320 	and.w	r3, r3, #32
 8008934:	2b20      	cmp	r3, #32
 8008936:	d10e      	bne.n	8008956 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	f003 0320 	and.w	r3, r3, #32
 8008942:	2b20      	cmp	r3, #32
 8008944:	d107      	bne.n	8008956 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f06f 0220 	mvn.w	r2, #32
 800894e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f8c7 	bl	8008ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008956:	bf00      	nop
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008986:	b480      	push	{r7}
 8008988:	b083      	sub	sp, #12
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800898e:	bf00      	nop
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089a2:	bf00      	nop
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
	...

080089b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a40      	ldr	r2, [pc, #256]	; (8008ac4 <TIM_Base_SetConfig+0x114>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d013      	beq.n	80089f0 <TIM_Base_SetConfig+0x40>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ce:	d00f      	beq.n	80089f0 <TIM_Base_SetConfig+0x40>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a3d      	ldr	r2, [pc, #244]	; (8008ac8 <TIM_Base_SetConfig+0x118>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d00b      	beq.n	80089f0 <TIM_Base_SetConfig+0x40>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a3c      	ldr	r2, [pc, #240]	; (8008acc <TIM_Base_SetConfig+0x11c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d007      	beq.n	80089f0 <TIM_Base_SetConfig+0x40>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a3b      	ldr	r2, [pc, #236]	; (8008ad0 <TIM_Base_SetConfig+0x120>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d003      	beq.n	80089f0 <TIM_Base_SetConfig+0x40>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a3a      	ldr	r2, [pc, #232]	; (8008ad4 <TIM_Base_SetConfig+0x124>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d108      	bne.n	8008a02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a2f      	ldr	r2, [pc, #188]	; (8008ac4 <TIM_Base_SetConfig+0x114>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d01f      	beq.n	8008a4a <TIM_Base_SetConfig+0x9a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a10:	d01b      	beq.n	8008a4a <TIM_Base_SetConfig+0x9a>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a2c      	ldr	r2, [pc, #176]	; (8008ac8 <TIM_Base_SetConfig+0x118>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d017      	beq.n	8008a4a <TIM_Base_SetConfig+0x9a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a2b      	ldr	r2, [pc, #172]	; (8008acc <TIM_Base_SetConfig+0x11c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d013      	beq.n	8008a4a <TIM_Base_SetConfig+0x9a>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a2a      	ldr	r2, [pc, #168]	; (8008ad0 <TIM_Base_SetConfig+0x120>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d00f      	beq.n	8008a4a <TIM_Base_SetConfig+0x9a>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a29      	ldr	r2, [pc, #164]	; (8008ad4 <TIM_Base_SetConfig+0x124>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d00b      	beq.n	8008a4a <TIM_Base_SetConfig+0x9a>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a28      	ldr	r2, [pc, #160]	; (8008ad8 <TIM_Base_SetConfig+0x128>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d007      	beq.n	8008a4a <TIM_Base_SetConfig+0x9a>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a27      	ldr	r2, [pc, #156]	; (8008adc <TIM_Base_SetConfig+0x12c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d003      	beq.n	8008a4a <TIM_Base_SetConfig+0x9a>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a26      	ldr	r2, [pc, #152]	; (8008ae0 <TIM_Base_SetConfig+0x130>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d108      	bne.n	8008a5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a10      	ldr	r2, [pc, #64]	; (8008ac4 <TIM_Base_SetConfig+0x114>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d00f      	beq.n	8008aa8 <TIM_Base_SetConfig+0xf8>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a12      	ldr	r2, [pc, #72]	; (8008ad4 <TIM_Base_SetConfig+0x124>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d00b      	beq.n	8008aa8 <TIM_Base_SetConfig+0xf8>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a11      	ldr	r2, [pc, #68]	; (8008ad8 <TIM_Base_SetConfig+0x128>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d007      	beq.n	8008aa8 <TIM_Base_SetConfig+0xf8>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a10      	ldr	r2, [pc, #64]	; (8008adc <TIM_Base_SetConfig+0x12c>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d003      	beq.n	8008aa8 <TIM_Base_SetConfig+0xf8>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a0f      	ldr	r2, [pc, #60]	; (8008ae0 <TIM_Base_SetConfig+0x130>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d103      	bne.n	8008ab0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	691a      	ldr	r2, [r3, #16]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	615a      	str	r2, [r3, #20]
}
 8008ab6:	bf00      	nop
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	40010000 	.word	0x40010000
 8008ac8:	40000400 	.word	0x40000400
 8008acc:	40000800 	.word	0x40000800
 8008ad0:	40000c00 	.word	0x40000c00
 8008ad4:	40010400 	.word	0x40010400
 8008ad8:	40014000 	.word	0x40014000
 8008adc:	40014400 	.word	0x40014400
 8008ae0:	40014800 	.word	0x40014800

08008ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e042      	b.n	8008bb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d106      	bne.n	8008b4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7f9 fb59 	bl	80021fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2224      	movs	r2, #36	; 0x24
 8008b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f022 0201 	bic.w	r2, r2, #1
 8008b60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f8c2 	bl	8008cec <UART_SetConfig>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d101      	bne.n	8008b72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e022      	b.n	8008bb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fe66 	bl	800984c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689a      	ldr	r2, [r3, #8]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f042 0201 	orr.w	r2, r2, #1
 8008bae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 feed 	bl	8009990 <UART_CheckIdleState>
 8008bb6:	4603      	mov	r3, r0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08a      	sub	sp, #40	; 0x28
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	f040 8083 	bne.w	8008ce2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <HAL_UART_Transmit+0x28>
 8008be2:	88fb      	ldrh	r3, [r7, #6]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e07b      	b.n	8008ce4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d101      	bne.n	8008bfa <HAL_UART_Transmit+0x3a>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e074      	b.n	8008ce4 <HAL_UART_Transmit+0x124>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2221      	movs	r2, #33	; 0x21
 8008c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008c12:	f7f9 fdf3 	bl	80027fc <HAL_GetTick>
 8008c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	88fa      	ldrh	r2, [r7, #6]
 8008c1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	88fa      	ldrh	r2, [r7, #6]
 8008c24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c30:	d108      	bne.n	8008c44 <HAL_UART_Transmit+0x84>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d104      	bne.n	8008c44 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	61bb      	str	r3, [r7, #24]
 8008c42:	e003      	b.n	8008c4c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8008c54:	e02c      	b.n	8008cb0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2180      	movs	r1, #128	; 0x80
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 fedd 	bl	8009a20 <UART_WaitOnFlagUntilTimeout>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e039      	b.n	8008ce4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10b      	bne.n	8008c8e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	3302      	adds	r3, #2
 8008c8a:	61bb      	str	r3, [r7, #24]
 8008c8c:	e007      	b.n	8008c9e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	781a      	ldrb	r2, [r3, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1cc      	bne.n	8008c56 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	2140      	movs	r1, #64	; 0x40
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 feaa 	bl	8009a20 <UART_WaitOnFlagUntilTimeout>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e006      	b.n	8008ce4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	e000      	b.n	8008ce4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008ce2:	2302      	movs	r3, #2
  }
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3720      	adds	r7, #32
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008cf0:	b08e      	sub	sp, #56	; 0x38
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	431a      	orrs	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	4bc1      	ldr	r3, [pc, #772]	; (800902c <UART_SetConfig+0x340>)
 8008d26:	4013      	ands	r3, r2
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	6812      	ldr	r2, [r2, #0]
 8008d2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d2e:	430b      	orrs	r3, r1
 8008d30:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	68da      	ldr	r2, [r3, #12]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	430a      	orrs	r2, r1
 8008d46:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4ab7      	ldr	r2, [pc, #732]	; (8009030 <UART_SetConfig+0x344>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d004      	beq.n	8008d62 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689a      	ldr	r2, [r3, #8]
 8008d68:	4bb2      	ldr	r3, [pc, #712]	; (8009034 <UART_SetConfig+0x348>)
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6812      	ldr	r2, [r2, #0]
 8008d70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d72:	430b      	orrs	r3, r1
 8008d74:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	f023 010f 	bic.w	r1, r3, #15
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4aa9      	ldr	r2, [pc, #676]	; (8009038 <UART_SetConfig+0x34c>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d177      	bne.n	8008e86 <UART_SetConfig+0x19a>
 8008d96:	4ba9      	ldr	r3, [pc, #676]	; (800903c <UART_SetConfig+0x350>)
 8008d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d9e:	2b28      	cmp	r3, #40	; 0x28
 8008da0:	d86c      	bhi.n	8008e7c <UART_SetConfig+0x190>
 8008da2:	a201      	add	r2, pc, #4	; (adr r2, 8008da8 <UART_SetConfig+0xbc>)
 8008da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da8:	08008e4d 	.word	0x08008e4d
 8008dac:	08008e7d 	.word	0x08008e7d
 8008db0:	08008e7d 	.word	0x08008e7d
 8008db4:	08008e7d 	.word	0x08008e7d
 8008db8:	08008e7d 	.word	0x08008e7d
 8008dbc:	08008e7d 	.word	0x08008e7d
 8008dc0:	08008e7d 	.word	0x08008e7d
 8008dc4:	08008e7d 	.word	0x08008e7d
 8008dc8:	08008e55 	.word	0x08008e55
 8008dcc:	08008e7d 	.word	0x08008e7d
 8008dd0:	08008e7d 	.word	0x08008e7d
 8008dd4:	08008e7d 	.word	0x08008e7d
 8008dd8:	08008e7d 	.word	0x08008e7d
 8008ddc:	08008e7d 	.word	0x08008e7d
 8008de0:	08008e7d 	.word	0x08008e7d
 8008de4:	08008e7d 	.word	0x08008e7d
 8008de8:	08008e5d 	.word	0x08008e5d
 8008dec:	08008e7d 	.word	0x08008e7d
 8008df0:	08008e7d 	.word	0x08008e7d
 8008df4:	08008e7d 	.word	0x08008e7d
 8008df8:	08008e7d 	.word	0x08008e7d
 8008dfc:	08008e7d 	.word	0x08008e7d
 8008e00:	08008e7d 	.word	0x08008e7d
 8008e04:	08008e7d 	.word	0x08008e7d
 8008e08:	08008e65 	.word	0x08008e65
 8008e0c:	08008e7d 	.word	0x08008e7d
 8008e10:	08008e7d 	.word	0x08008e7d
 8008e14:	08008e7d 	.word	0x08008e7d
 8008e18:	08008e7d 	.word	0x08008e7d
 8008e1c:	08008e7d 	.word	0x08008e7d
 8008e20:	08008e7d 	.word	0x08008e7d
 8008e24:	08008e7d 	.word	0x08008e7d
 8008e28:	08008e6d 	.word	0x08008e6d
 8008e2c:	08008e7d 	.word	0x08008e7d
 8008e30:	08008e7d 	.word	0x08008e7d
 8008e34:	08008e7d 	.word	0x08008e7d
 8008e38:	08008e7d 	.word	0x08008e7d
 8008e3c:	08008e7d 	.word	0x08008e7d
 8008e40:	08008e7d 	.word	0x08008e7d
 8008e44:	08008e7d 	.word	0x08008e7d
 8008e48:	08008e75 	.word	0x08008e75
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e52:	e233      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008e54:	2304      	movs	r3, #4
 8008e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e5a:	e22f      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008e5c:	2308      	movs	r3, #8
 8008e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e62:	e22b      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008e64:	2310      	movs	r3, #16
 8008e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e6a:	e227      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008e6c:	2320      	movs	r3, #32
 8008e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e72:	e223      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008e74:	2340      	movs	r3, #64	; 0x40
 8008e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e7a:	e21f      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008e7c:	2380      	movs	r3, #128	; 0x80
 8008e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e82:	bf00      	nop
 8008e84:	e21a      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a6d      	ldr	r2, [pc, #436]	; (8009040 <UART_SetConfig+0x354>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d132      	bne.n	8008ef6 <UART_SetConfig+0x20a>
 8008e90:	4b6a      	ldr	r3, [pc, #424]	; (800903c <UART_SetConfig+0x350>)
 8008e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e94:	f003 0307 	and.w	r3, r3, #7
 8008e98:	2b05      	cmp	r3, #5
 8008e9a:	d827      	bhi.n	8008eec <UART_SetConfig+0x200>
 8008e9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <UART_SetConfig+0x1b8>)
 8008e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea2:	bf00      	nop
 8008ea4:	08008ebd 	.word	0x08008ebd
 8008ea8:	08008ec5 	.word	0x08008ec5
 8008eac:	08008ecd 	.word	0x08008ecd
 8008eb0:	08008ed5 	.word	0x08008ed5
 8008eb4:	08008edd 	.word	0x08008edd
 8008eb8:	08008ee5 	.word	0x08008ee5
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ec2:	e1fb      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008ec4:	2304      	movs	r3, #4
 8008ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eca:	e1f7      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008ecc:	2308      	movs	r3, #8
 8008ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ed2:	e1f3      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008ed4:	2310      	movs	r3, #16
 8008ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eda:	e1ef      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008edc:	2320      	movs	r3, #32
 8008ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ee2:	e1eb      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008ee4:	2340      	movs	r3, #64	; 0x40
 8008ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eea:	e1e7      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008eec:	2380      	movs	r3, #128	; 0x80
 8008eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ef2:	bf00      	nop
 8008ef4:	e1e2      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a52      	ldr	r2, [pc, #328]	; (8009044 <UART_SetConfig+0x358>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d132      	bne.n	8008f66 <UART_SetConfig+0x27a>
 8008f00:	4b4e      	ldr	r3, [pc, #312]	; (800903c <UART_SetConfig+0x350>)
 8008f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f04:	f003 0307 	and.w	r3, r3, #7
 8008f08:	2b05      	cmp	r3, #5
 8008f0a:	d827      	bhi.n	8008f5c <UART_SetConfig+0x270>
 8008f0c:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <UART_SetConfig+0x228>)
 8008f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f12:	bf00      	nop
 8008f14:	08008f2d 	.word	0x08008f2d
 8008f18:	08008f35 	.word	0x08008f35
 8008f1c:	08008f3d 	.word	0x08008f3d
 8008f20:	08008f45 	.word	0x08008f45
 8008f24:	08008f4d 	.word	0x08008f4d
 8008f28:	08008f55 	.word	0x08008f55
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f32:	e1c3      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008f34:	2304      	movs	r3, #4
 8008f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f3a:	e1bf      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008f3c:	2308      	movs	r3, #8
 8008f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f42:	e1bb      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008f44:	2310      	movs	r3, #16
 8008f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f4a:	e1b7      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008f4c:	2320      	movs	r3, #32
 8008f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f52:	e1b3      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008f54:	2340      	movs	r3, #64	; 0x40
 8008f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f5a:	e1af      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008f5c:	2380      	movs	r3, #128	; 0x80
 8008f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f62:	bf00      	nop
 8008f64:	e1aa      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a37      	ldr	r2, [pc, #220]	; (8009048 <UART_SetConfig+0x35c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d132      	bne.n	8008fd6 <UART_SetConfig+0x2ea>
 8008f70:	4b32      	ldr	r3, [pc, #200]	; (800903c <UART_SetConfig+0x350>)
 8008f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f74:	f003 0307 	and.w	r3, r3, #7
 8008f78:	2b05      	cmp	r3, #5
 8008f7a:	d827      	bhi.n	8008fcc <UART_SetConfig+0x2e0>
 8008f7c:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <UART_SetConfig+0x298>)
 8008f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f82:	bf00      	nop
 8008f84:	08008f9d 	.word	0x08008f9d
 8008f88:	08008fa5 	.word	0x08008fa5
 8008f8c:	08008fad 	.word	0x08008fad
 8008f90:	08008fb5 	.word	0x08008fb5
 8008f94:	08008fbd 	.word	0x08008fbd
 8008f98:	08008fc5 	.word	0x08008fc5
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa2:	e18b      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008fa4:	2304      	movs	r3, #4
 8008fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008faa:	e187      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008fac:	2308      	movs	r3, #8
 8008fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb2:	e183      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008fb4:	2310      	movs	r3, #16
 8008fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fba:	e17f      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008fbc:	2320      	movs	r3, #32
 8008fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc2:	e17b      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008fc4:	2340      	movs	r3, #64	; 0x40
 8008fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fca:	e177      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008fcc:	2380      	movs	r3, #128	; 0x80
 8008fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd2:	bf00      	nop
 8008fd4:	e172      	b.n	80092bc <UART_SetConfig+0x5d0>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a1c      	ldr	r2, [pc, #112]	; (800904c <UART_SetConfig+0x360>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d144      	bne.n	800906a <UART_SetConfig+0x37e>
 8008fe0:	4b16      	ldr	r3, [pc, #88]	; (800903c <UART_SetConfig+0x350>)
 8008fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe4:	f003 0307 	and.w	r3, r3, #7
 8008fe8:	2b05      	cmp	r3, #5
 8008fea:	d839      	bhi.n	8009060 <UART_SetConfig+0x374>
 8008fec:	a201      	add	r2, pc, #4	; (adr r2, 8008ff4 <UART_SetConfig+0x308>)
 8008fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff2:	bf00      	nop
 8008ff4:	0800900d 	.word	0x0800900d
 8008ff8:	08009015 	.word	0x08009015
 8008ffc:	0800901d 	.word	0x0800901d
 8009000:	08009025 	.word	0x08009025
 8009004:	08009051 	.word	0x08009051
 8009008:	08009059 	.word	0x08009059
 800900c:	2300      	movs	r3, #0
 800900e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009012:	e153      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009014:	2304      	movs	r3, #4
 8009016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800901a:	e14f      	b.n	80092bc <UART_SetConfig+0x5d0>
 800901c:	2308      	movs	r3, #8
 800901e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009022:	e14b      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009024:	2310      	movs	r3, #16
 8009026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800902a:	e147      	b.n	80092bc <UART_SetConfig+0x5d0>
 800902c:	cfff69f3 	.word	0xcfff69f3
 8009030:	58000c00 	.word	0x58000c00
 8009034:	11fff4ff 	.word	0x11fff4ff
 8009038:	40011000 	.word	0x40011000
 800903c:	58024400 	.word	0x58024400
 8009040:	40004400 	.word	0x40004400
 8009044:	40004800 	.word	0x40004800
 8009048:	40004c00 	.word	0x40004c00
 800904c:	40005000 	.word	0x40005000
 8009050:	2320      	movs	r3, #32
 8009052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009056:	e131      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009058:	2340      	movs	r3, #64	; 0x40
 800905a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800905e:	e12d      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009060:	2380      	movs	r3, #128	; 0x80
 8009062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009066:	bf00      	nop
 8009068:	e128      	b.n	80092bc <UART_SetConfig+0x5d0>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4ab6      	ldr	r2, [pc, #728]	; (8009348 <UART_SetConfig+0x65c>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d178      	bne.n	8009166 <UART_SetConfig+0x47a>
 8009074:	4bb5      	ldr	r3, [pc, #724]	; (800934c <UART_SetConfig+0x660>)
 8009076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009078:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800907c:	2b28      	cmp	r3, #40	; 0x28
 800907e:	d86d      	bhi.n	800915c <UART_SetConfig+0x470>
 8009080:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <UART_SetConfig+0x39c>)
 8009082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009086:	bf00      	nop
 8009088:	0800912d 	.word	0x0800912d
 800908c:	0800915d 	.word	0x0800915d
 8009090:	0800915d 	.word	0x0800915d
 8009094:	0800915d 	.word	0x0800915d
 8009098:	0800915d 	.word	0x0800915d
 800909c:	0800915d 	.word	0x0800915d
 80090a0:	0800915d 	.word	0x0800915d
 80090a4:	0800915d 	.word	0x0800915d
 80090a8:	08009135 	.word	0x08009135
 80090ac:	0800915d 	.word	0x0800915d
 80090b0:	0800915d 	.word	0x0800915d
 80090b4:	0800915d 	.word	0x0800915d
 80090b8:	0800915d 	.word	0x0800915d
 80090bc:	0800915d 	.word	0x0800915d
 80090c0:	0800915d 	.word	0x0800915d
 80090c4:	0800915d 	.word	0x0800915d
 80090c8:	0800913d 	.word	0x0800913d
 80090cc:	0800915d 	.word	0x0800915d
 80090d0:	0800915d 	.word	0x0800915d
 80090d4:	0800915d 	.word	0x0800915d
 80090d8:	0800915d 	.word	0x0800915d
 80090dc:	0800915d 	.word	0x0800915d
 80090e0:	0800915d 	.word	0x0800915d
 80090e4:	0800915d 	.word	0x0800915d
 80090e8:	08009145 	.word	0x08009145
 80090ec:	0800915d 	.word	0x0800915d
 80090f0:	0800915d 	.word	0x0800915d
 80090f4:	0800915d 	.word	0x0800915d
 80090f8:	0800915d 	.word	0x0800915d
 80090fc:	0800915d 	.word	0x0800915d
 8009100:	0800915d 	.word	0x0800915d
 8009104:	0800915d 	.word	0x0800915d
 8009108:	0800914d 	.word	0x0800914d
 800910c:	0800915d 	.word	0x0800915d
 8009110:	0800915d 	.word	0x0800915d
 8009114:	0800915d 	.word	0x0800915d
 8009118:	0800915d 	.word	0x0800915d
 800911c:	0800915d 	.word	0x0800915d
 8009120:	0800915d 	.word	0x0800915d
 8009124:	0800915d 	.word	0x0800915d
 8009128:	08009155 	.word	0x08009155
 800912c:	2301      	movs	r3, #1
 800912e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009132:	e0c3      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009134:	2304      	movs	r3, #4
 8009136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800913a:	e0bf      	b.n	80092bc <UART_SetConfig+0x5d0>
 800913c:	2308      	movs	r3, #8
 800913e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009142:	e0bb      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009144:	2310      	movs	r3, #16
 8009146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800914a:	e0b7      	b.n	80092bc <UART_SetConfig+0x5d0>
 800914c:	2320      	movs	r3, #32
 800914e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009152:	e0b3      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009154:	2340      	movs	r3, #64	; 0x40
 8009156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800915a:	e0af      	b.n	80092bc <UART_SetConfig+0x5d0>
 800915c:	2380      	movs	r3, #128	; 0x80
 800915e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009162:	bf00      	nop
 8009164:	e0aa      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a79      	ldr	r2, [pc, #484]	; (8009350 <UART_SetConfig+0x664>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d132      	bne.n	80091d6 <UART_SetConfig+0x4ea>
 8009170:	4b76      	ldr	r3, [pc, #472]	; (800934c <UART_SetConfig+0x660>)
 8009172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009174:	f003 0307 	and.w	r3, r3, #7
 8009178:	2b05      	cmp	r3, #5
 800917a:	d827      	bhi.n	80091cc <UART_SetConfig+0x4e0>
 800917c:	a201      	add	r2, pc, #4	; (adr r2, 8009184 <UART_SetConfig+0x498>)
 800917e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009182:	bf00      	nop
 8009184:	0800919d 	.word	0x0800919d
 8009188:	080091a5 	.word	0x080091a5
 800918c:	080091ad 	.word	0x080091ad
 8009190:	080091b5 	.word	0x080091b5
 8009194:	080091bd 	.word	0x080091bd
 8009198:	080091c5 	.word	0x080091c5
 800919c:	2300      	movs	r3, #0
 800919e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091a2:	e08b      	b.n	80092bc <UART_SetConfig+0x5d0>
 80091a4:	2304      	movs	r3, #4
 80091a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091aa:	e087      	b.n	80092bc <UART_SetConfig+0x5d0>
 80091ac:	2308      	movs	r3, #8
 80091ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091b2:	e083      	b.n	80092bc <UART_SetConfig+0x5d0>
 80091b4:	2310      	movs	r3, #16
 80091b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ba:	e07f      	b.n	80092bc <UART_SetConfig+0x5d0>
 80091bc:	2320      	movs	r3, #32
 80091be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091c2:	e07b      	b.n	80092bc <UART_SetConfig+0x5d0>
 80091c4:	2340      	movs	r3, #64	; 0x40
 80091c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ca:	e077      	b.n	80092bc <UART_SetConfig+0x5d0>
 80091cc:	2380      	movs	r3, #128	; 0x80
 80091ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091d2:	bf00      	nop
 80091d4:	e072      	b.n	80092bc <UART_SetConfig+0x5d0>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a5e      	ldr	r2, [pc, #376]	; (8009354 <UART_SetConfig+0x668>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d132      	bne.n	8009246 <UART_SetConfig+0x55a>
 80091e0:	4b5a      	ldr	r3, [pc, #360]	; (800934c <UART_SetConfig+0x660>)
 80091e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e4:	f003 0307 	and.w	r3, r3, #7
 80091e8:	2b05      	cmp	r3, #5
 80091ea:	d827      	bhi.n	800923c <UART_SetConfig+0x550>
 80091ec:	a201      	add	r2, pc, #4	; (adr r2, 80091f4 <UART_SetConfig+0x508>)
 80091ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f2:	bf00      	nop
 80091f4:	0800920d 	.word	0x0800920d
 80091f8:	08009215 	.word	0x08009215
 80091fc:	0800921d 	.word	0x0800921d
 8009200:	08009225 	.word	0x08009225
 8009204:	0800922d 	.word	0x0800922d
 8009208:	08009235 	.word	0x08009235
 800920c:	2300      	movs	r3, #0
 800920e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009212:	e053      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009214:	2304      	movs	r3, #4
 8009216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800921a:	e04f      	b.n	80092bc <UART_SetConfig+0x5d0>
 800921c:	2308      	movs	r3, #8
 800921e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009222:	e04b      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009224:	2310      	movs	r3, #16
 8009226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800922a:	e047      	b.n	80092bc <UART_SetConfig+0x5d0>
 800922c:	2320      	movs	r3, #32
 800922e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009232:	e043      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009234:	2340      	movs	r3, #64	; 0x40
 8009236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923a:	e03f      	b.n	80092bc <UART_SetConfig+0x5d0>
 800923c:	2380      	movs	r3, #128	; 0x80
 800923e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009242:	bf00      	nop
 8009244:	e03a      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a43      	ldr	r2, [pc, #268]	; (8009358 <UART_SetConfig+0x66c>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d132      	bne.n	80092b6 <UART_SetConfig+0x5ca>
 8009250:	4b3e      	ldr	r3, [pc, #248]	; (800934c <UART_SetConfig+0x660>)
 8009252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009254:	f003 0307 	and.w	r3, r3, #7
 8009258:	2b05      	cmp	r3, #5
 800925a:	d827      	bhi.n	80092ac <UART_SetConfig+0x5c0>
 800925c:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <UART_SetConfig+0x578>)
 800925e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009262:	bf00      	nop
 8009264:	0800927d 	.word	0x0800927d
 8009268:	08009285 	.word	0x08009285
 800926c:	0800928d 	.word	0x0800928d
 8009270:	08009295 	.word	0x08009295
 8009274:	0800929d 	.word	0x0800929d
 8009278:	080092a5 	.word	0x080092a5
 800927c:	2302      	movs	r3, #2
 800927e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009282:	e01b      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009284:	2304      	movs	r3, #4
 8009286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800928a:	e017      	b.n	80092bc <UART_SetConfig+0x5d0>
 800928c:	2308      	movs	r3, #8
 800928e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009292:	e013      	b.n	80092bc <UART_SetConfig+0x5d0>
 8009294:	2310      	movs	r3, #16
 8009296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929a:	e00f      	b.n	80092bc <UART_SetConfig+0x5d0>
 800929c:	2320      	movs	r3, #32
 800929e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a2:	e00b      	b.n	80092bc <UART_SetConfig+0x5d0>
 80092a4:	2340      	movs	r3, #64	; 0x40
 80092a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092aa:	e007      	b.n	80092bc <UART_SetConfig+0x5d0>
 80092ac:	2380      	movs	r3, #128	; 0x80
 80092ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092b2:	bf00      	nop
 80092b4:	e002      	b.n	80092bc <UART_SetConfig+0x5d0>
 80092b6:	2380      	movs	r3, #128	; 0x80
 80092b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a25      	ldr	r2, [pc, #148]	; (8009358 <UART_SetConfig+0x66c>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	f040 80b8 	bne.w	8009438 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d019      	beq.n	8009304 <UART_SetConfig+0x618>
 80092d0:	2b08      	cmp	r3, #8
 80092d2:	dc04      	bgt.n	80092de <UART_SetConfig+0x5f2>
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d009      	beq.n	80092ec <UART_SetConfig+0x600>
 80092d8:	2b04      	cmp	r3, #4
 80092da:	d00b      	beq.n	80092f4 <UART_SetConfig+0x608>
 80092dc:	e042      	b.n	8009364 <UART_SetConfig+0x678>
 80092de:	2b20      	cmp	r3, #32
 80092e0:	d02b      	beq.n	800933a <UART_SetConfig+0x64e>
 80092e2:	2b40      	cmp	r3, #64	; 0x40
 80092e4:	d02c      	beq.n	8009340 <UART_SetConfig+0x654>
 80092e6:	2b10      	cmp	r3, #16
 80092e8:	d014      	beq.n	8009314 <UART_SetConfig+0x628>
 80092ea:	e03b      	b.n	8009364 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80092ec:	f7fe f88c 	bl	8007408 <HAL_RCCEx_GetD3PCLK1Freq>
 80092f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80092f2:	e03d      	b.n	8009370 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092f4:	f107 0314 	add.w	r3, r7, #20
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fe f89b 	bl	8007434 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009302:	e035      	b.n	8009370 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009304:	f107 0308 	add.w	r3, r7, #8
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe f9df 	bl	80076cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009312:	e02d      	b.n	8009370 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009314:	4b0d      	ldr	r3, [pc, #52]	; (800934c <UART_SetConfig+0x660>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0320 	and.w	r3, r3, #32
 800931c:	2b00      	cmp	r3, #0
 800931e:	d009      	beq.n	8009334 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009320:	4b0a      	ldr	r3, [pc, #40]	; (800934c <UART_SetConfig+0x660>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	08db      	lsrs	r3, r3, #3
 8009326:	f003 0303 	and.w	r3, r3, #3
 800932a:	4a0c      	ldr	r2, [pc, #48]	; (800935c <UART_SetConfig+0x670>)
 800932c:	fa22 f303 	lsr.w	r3, r2, r3
 8009330:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009332:	e01d      	b.n	8009370 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8009334:	4b09      	ldr	r3, [pc, #36]	; (800935c <UART_SetConfig+0x670>)
 8009336:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009338:	e01a      	b.n	8009370 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800933a:	4b09      	ldr	r3, [pc, #36]	; (8009360 <UART_SetConfig+0x674>)
 800933c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800933e:	e017      	b.n	8009370 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009346:	e013      	b.n	8009370 <UART_SetConfig+0x684>
 8009348:	40011400 	.word	0x40011400
 800934c:	58024400 	.word	0x58024400
 8009350:	40007800 	.word	0x40007800
 8009354:	40007c00 	.word	0x40007c00
 8009358:	58000c00 	.word	0x58000c00
 800935c:	03d09000 	.word	0x03d09000
 8009360:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800936e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 824d 	beq.w	8009812 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	4aad      	ldr	r2, [pc, #692]	; (8009634 <UART_SetConfig+0x948>)
 800937e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009382:	461a      	mov	r2, r3
 8009384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009386:	fbb3 f3f2 	udiv	r3, r3, r2
 800938a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	4613      	mov	r3, r2
 8009392:	005b      	lsls	r3, r3, #1
 8009394:	4413      	add	r3, r2
 8009396:	6a3a      	ldr	r2, [r7, #32]
 8009398:	429a      	cmp	r2, r3
 800939a:	d305      	bcc.n	80093a8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093a2:	6a3a      	ldr	r2, [r7, #32]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d903      	bls.n	80093b0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80093ae:	e230      	b.n	8009812 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b2:	4618      	mov	r0, r3
 80093b4:	f04f 0100 	mov.w	r1, #0
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093bc:	4a9d      	ldr	r2, [pc, #628]	; (8009634 <UART_SetConfig+0x948>)
 80093be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	f04f 0400 	mov.w	r4, #0
 80093c8:	461a      	mov	r2, r3
 80093ca:	4623      	mov	r3, r4
 80093cc:	f7f6 ffe0 	bl	8000390 <__aeabi_uldivmod>
 80093d0:	4603      	mov	r3, r0
 80093d2:	460c      	mov	r4, r1
 80093d4:	4619      	mov	r1, r3
 80093d6:	4622      	mov	r2, r4
 80093d8:	f04f 0300 	mov.w	r3, #0
 80093dc:	f04f 0400 	mov.w	r4, #0
 80093e0:	0214      	lsls	r4, r2, #8
 80093e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80093e6:	020b      	lsls	r3, r1, #8
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	6852      	ldr	r2, [r2, #4]
 80093ec:	0852      	lsrs	r2, r2, #1
 80093ee:	4611      	mov	r1, r2
 80093f0:	f04f 0200 	mov.w	r2, #0
 80093f4:	eb13 0b01 	adds.w	fp, r3, r1
 80093f8:	eb44 0c02 	adc.w	ip, r4, r2
 80093fc:	4658      	mov	r0, fp
 80093fe:	4661      	mov	r1, ip
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f04f 0400 	mov.w	r4, #0
 8009408:	461a      	mov	r2, r3
 800940a:	4623      	mov	r3, r4
 800940c:	f7f6 ffc0 	bl	8000390 <__aeabi_uldivmod>
 8009410:	4603      	mov	r3, r0
 8009412:	460c      	mov	r4, r1
 8009414:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800941c:	d308      	bcc.n	8009430 <UART_SetConfig+0x744>
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009424:	d204      	bcs.n	8009430 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800942c:	60da      	str	r2, [r3, #12]
 800942e:	e1f0      	b.n	8009812 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009436:	e1ec      	b.n	8009812 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009440:	f040 8100 	bne.w	8009644 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8009444:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009448:	2b40      	cmp	r3, #64	; 0x40
 800944a:	f200 80b7 	bhi.w	80095bc <UART_SetConfig+0x8d0>
 800944e:	a201      	add	r2, pc, #4	; (adr r2, 8009454 <UART_SetConfig+0x768>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	08009559 	.word	0x08009559
 8009458:	08009561 	.word	0x08009561
 800945c:	080095bd 	.word	0x080095bd
 8009460:	080095bd 	.word	0x080095bd
 8009464:	08009569 	.word	0x08009569
 8009468:	080095bd 	.word	0x080095bd
 800946c:	080095bd 	.word	0x080095bd
 8009470:	080095bd 	.word	0x080095bd
 8009474:	08009579 	.word	0x08009579
 8009478:	080095bd 	.word	0x080095bd
 800947c:	080095bd 	.word	0x080095bd
 8009480:	080095bd 	.word	0x080095bd
 8009484:	080095bd 	.word	0x080095bd
 8009488:	080095bd 	.word	0x080095bd
 800948c:	080095bd 	.word	0x080095bd
 8009490:	080095bd 	.word	0x080095bd
 8009494:	08009589 	.word	0x08009589
 8009498:	080095bd 	.word	0x080095bd
 800949c:	080095bd 	.word	0x080095bd
 80094a0:	080095bd 	.word	0x080095bd
 80094a4:	080095bd 	.word	0x080095bd
 80094a8:	080095bd 	.word	0x080095bd
 80094ac:	080095bd 	.word	0x080095bd
 80094b0:	080095bd 	.word	0x080095bd
 80094b4:	080095bd 	.word	0x080095bd
 80094b8:	080095bd 	.word	0x080095bd
 80094bc:	080095bd 	.word	0x080095bd
 80094c0:	080095bd 	.word	0x080095bd
 80094c4:	080095bd 	.word	0x080095bd
 80094c8:	080095bd 	.word	0x080095bd
 80094cc:	080095bd 	.word	0x080095bd
 80094d0:	080095bd 	.word	0x080095bd
 80094d4:	080095af 	.word	0x080095af
 80094d8:	080095bd 	.word	0x080095bd
 80094dc:	080095bd 	.word	0x080095bd
 80094e0:	080095bd 	.word	0x080095bd
 80094e4:	080095bd 	.word	0x080095bd
 80094e8:	080095bd 	.word	0x080095bd
 80094ec:	080095bd 	.word	0x080095bd
 80094f0:	080095bd 	.word	0x080095bd
 80094f4:	080095bd 	.word	0x080095bd
 80094f8:	080095bd 	.word	0x080095bd
 80094fc:	080095bd 	.word	0x080095bd
 8009500:	080095bd 	.word	0x080095bd
 8009504:	080095bd 	.word	0x080095bd
 8009508:	080095bd 	.word	0x080095bd
 800950c:	080095bd 	.word	0x080095bd
 8009510:	080095bd 	.word	0x080095bd
 8009514:	080095bd 	.word	0x080095bd
 8009518:	080095bd 	.word	0x080095bd
 800951c:	080095bd 	.word	0x080095bd
 8009520:	080095bd 	.word	0x080095bd
 8009524:	080095bd 	.word	0x080095bd
 8009528:	080095bd 	.word	0x080095bd
 800952c:	080095bd 	.word	0x080095bd
 8009530:	080095bd 	.word	0x080095bd
 8009534:	080095bd 	.word	0x080095bd
 8009538:	080095bd 	.word	0x080095bd
 800953c:	080095bd 	.word	0x080095bd
 8009540:	080095bd 	.word	0x080095bd
 8009544:	080095bd 	.word	0x080095bd
 8009548:	080095bd 	.word	0x080095bd
 800954c:	080095bd 	.word	0x080095bd
 8009550:	080095bd 	.word	0x080095bd
 8009554:	080095b5 	.word	0x080095b5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009558:	f7fc fffa 	bl	8006550 <HAL_RCC_GetPCLK1Freq>
 800955c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800955e:	e033      	b.n	80095c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009560:	f7fd f80c 	bl	800657c <HAL_RCC_GetPCLK2Freq>
 8009564:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009566:	e02f      	b.n	80095c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009568:	f107 0314 	add.w	r3, r7, #20
 800956c:	4618      	mov	r0, r3
 800956e:	f7fd ff61 	bl	8007434 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009576:	e027      	b.n	80095c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009578:	f107 0308 	add.w	r3, r7, #8
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe f8a5 	bl	80076cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009586:	e01f      	b.n	80095c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009588:	4b2b      	ldr	r3, [pc, #172]	; (8009638 <UART_SetConfig+0x94c>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b00      	cmp	r3, #0
 8009592:	d009      	beq.n	80095a8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009594:	4b28      	ldr	r3, [pc, #160]	; (8009638 <UART_SetConfig+0x94c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	08db      	lsrs	r3, r3, #3
 800959a:	f003 0303 	and.w	r3, r3, #3
 800959e:	4a27      	ldr	r2, [pc, #156]	; (800963c <UART_SetConfig+0x950>)
 80095a0:	fa22 f303 	lsr.w	r3, r2, r3
 80095a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095a6:	e00f      	b.n	80095c8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80095a8:	4b24      	ldr	r3, [pc, #144]	; (800963c <UART_SetConfig+0x950>)
 80095aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095ac:	e00c      	b.n	80095c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095ae:	4b24      	ldr	r3, [pc, #144]	; (8009640 <UART_SetConfig+0x954>)
 80095b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095b2:	e009      	b.n	80095c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095ba:	e005      	b.n	80095c8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80095c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8121 	beq.w	8009812 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	4a17      	ldr	r2, [pc, #92]	; (8009634 <UART_SetConfig+0x948>)
 80095d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095da:	461a      	mov	r2, r3
 80095dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095de:	fbb3 f3f2 	udiv	r3, r3, r2
 80095e2:	005a      	lsls	r2, r3, #1
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	085b      	lsrs	r3, r3, #1
 80095ea:	441a      	add	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fa:	2b0f      	cmp	r3, #15
 80095fc:	d916      	bls.n	800962c <UART_SetConfig+0x940>
 80095fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009604:	d212      	bcs.n	800962c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009608:	b29b      	uxth	r3, r3
 800960a:	f023 030f 	bic.w	r3, r3, #15
 800960e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009612:	085b      	lsrs	r3, r3, #1
 8009614:	b29b      	uxth	r3, r3
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	b29a      	uxth	r2, r3
 800961c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800961e:	4313      	orrs	r3, r2
 8009620:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009628:	60da      	str	r2, [r3, #12]
 800962a:	e0f2      	b.n	8009812 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009632:	e0ee      	b.n	8009812 <UART_SetConfig+0xb26>
 8009634:	0800f1cc 	.word	0x0800f1cc
 8009638:	58024400 	.word	0x58024400
 800963c:	03d09000 	.word	0x03d09000
 8009640:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8009644:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009648:	2b40      	cmp	r3, #64	; 0x40
 800964a:	f200 80b7 	bhi.w	80097bc <UART_SetConfig+0xad0>
 800964e:	a201      	add	r2, pc, #4	; (adr r2, 8009654 <UART_SetConfig+0x968>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	08009759 	.word	0x08009759
 8009658:	08009761 	.word	0x08009761
 800965c:	080097bd 	.word	0x080097bd
 8009660:	080097bd 	.word	0x080097bd
 8009664:	08009769 	.word	0x08009769
 8009668:	080097bd 	.word	0x080097bd
 800966c:	080097bd 	.word	0x080097bd
 8009670:	080097bd 	.word	0x080097bd
 8009674:	08009779 	.word	0x08009779
 8009678:	080097bd 	.word	0x080097bd
 800967c:	080097bd 	.word	0x080097bd
 8009680:	080097bd 	.word	0x080097bd
 8009684:	080097bd 	.word	0x080097bd
 8009688:	080097bd 	.word	0x080097bd
 800968c:	080097bd 	.word	0x080097bd
 8009690:	080097bd 	.word	0x080097bd
 8009694:	08009789 	.word	0x08009789
 8009698:	080097bd 	.word	0x080097bd
 800969c:	080097bd 	.word	0x080097bd
 80096a0:	080097bd 	.word	0x080097bd
 80096a4:	080097bd 	.word	0x080097bd
 80096a8:	080097bd 	.word	0x080097bd
 80096ac:	080097bd 	.word	0x080097bd
 80096b0:	080097bd 	.word	0x080097bd
 80096b4:	080097bd 	.word	0x080097bd
 80096b8:	080097bd 	.word	0x080097bd
 80096bc:	080097bd 	.word	0x080097bd
 80096c0:	080097bd 	.word	0x080097bd
 80096c4:	080097bd 	.word	0x080097bd
 80096c8:	080097bd 	.word	0x080097bd
 80096cc:	080097bd 	.word	0x080097bd
 80096d0:	080097bd 	.word	0x080097bd
 80096d4:	080097af 	.word	0x080097af
 80096d8:	080097bd 	.word	0x080097bd
 80096dc:	080097bd 	.word	0x080097bd
 80096e0:	080097bd 	.word	0x080097bd
 80096e4:	080097bd 	.word	0x080097bd
 80096e8:	080097bd 	.word	0x080097bd
 80096ec:	080097bd 	.word	0x080097bd
 80096f0:	080097bd 	.word	0x080097bd
 80096f4:	080097bd 	.word	0x080097bd
 80096f8:	080097bd 	.word	0x080097bd
 80096fc:	080097bd 	.word	0x080097bd
 8009700:	080097bd 	.word	0x080097bd
 8009704:	080097bd 	.word	0x080097bd
 8009708:	080097bd 	.word	0x080097bd
 800970c:	080097bd 	.word	0x080097bd
 8009710:	080097bd 	.word	0x080097bd
 8009714:	080097bd 	.word	0x080097bd
 8009718:	080097bd 	.word	0x080097bd
 800971c:	080097bd 	.word	0x080097bd
 8009720:	080097bd 	.word	0x080097bd
 8009724:	080097bd 	.word	0x080097bd
 8009728:	080097bd 	.word	0x080097bd
 800972c:	080097bd 	.word	0x080097bd
 8009730:	080097bd 	.word	0x080097bd
 8009734:	080097bd 	.word	0x080097bd
 8009738:	080097bd 	.word	0x080097bd
 800973c:	080097bd 	.word	0x080097bd
 8009740:	080097bd 	.word	0x080097bd
 8009744:	080097bd 	.word	0x080097bd
 8009748:	080097bd 	.word	0x080097bd
 800974c:	080097bd 	.word	0x080097bd
 8009750:	080097bd 	.word	0x080097bd
 8009754:	080097b5 	.word	0x080097b5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009758:	f7fc fefa 	bl	8006550 <HAL_RCC_GetPCLK1Freq>
 800975c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800975e:	e033      	b.n	80097c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009760:	f7fc ff0c 	bl	800657c <HAL_RCC_GetPCLK2Freq>
 8009764:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009766:	e02f      	b.n	80097c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009768:	f107 0314 	add.w	r3, r7, #20
 800976c:	4618      	mov	r0, r3
 800976e:	f7fd fe61 	bl	8007434 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009776:	e027      	b.n	80097c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009778:	f107 0308 	add.w	r3, r7, #8
 800977c:	4618      	mov	r0, r3
 800977e:	f7fd ffa5 	bl	80076cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009786:	e01f      	b.n	80097c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009788:	4b2c      	ldr	r3, [pc, #176]	; (800983c <UART_SetConfig+0xb50>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0320 	and.w	r3, r3, #32
 8009790:	2b00      	cmp	r3, #0
 8009792:	d009      	beq.n	80097a8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009794:	4b29      	ldr	r3, [pc, #164]	; (800983c <UART_SetConfig+0xb50>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	08db      	lsrs	r3, r3, #3
 800979a:	f003 0303 	and.w	r3, r3, #3
 800979e:	4a28      	ldr	r2, [pc, #160]	; (8009840 <UART_SetConfig+0xb54>)
 80097a0:	fa22 f303 	lsr.w	r3, r2, r3
 80097a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097a6:	e00f      	b.n	80097c8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80097a8:	4b25      	ldr	r3, [pc, #148]	; (8009840 <UART_SetConfig+0xb54>)
 80097aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097ac:	e00c      	b.n	80097c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097ae:	4b25      	ldr	r3, [pc, #148]	; (8009844 <UART_SetConfig+0xb58>)
 80097b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097b2:	e009      	b.n	80097c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097ba:	e005      	b.n	80097c8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80097c6:	bf00      	nop
    }

    if (pclk != 0U)
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d021      	beq.n	8009812 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d2:	4a1d      	ldr	r2, [pc, #116]	; (8009848 <UART_SetConfig+0xb5c>)
 80097d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097d8:	461a      	mov	r2, r3
 80097da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	085b      	lsrs	r3, r3, #1
 80097e6:	441a      	add	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	2b0f      	cmp	r3, #15
 80097f8:	d908      	bls.n	800980c <UART_SetConfig+0xb20>
 80097fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009800:	d204      	bcs.n	800980c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009808:	60da      	str	r2, [r3, #12]
 800980a:	e002      	b.n	8009812 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800982e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009832:	4618      	mov	r0, r3
 8009834:	3738      	adds	r7, #56	; 0x38
 8009836:	46bd      	mov	sp, r7
 8009838:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800983c:	58024400 	.word	0x58024400
 8009840:	03d09000 	.word	0x03d09000
 8009844:	003d0900 	.word	0x003d0900
 8009848:	0800f1cc 	.word	0x0800f1cc

0800984c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00a      	beq.n	8009876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987a:	f003 0302 	and.w	r3, r3, #2
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00a      	beq.n	8009898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	430a      	orrs	r2, r1
 8009896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989c:	f003 0304 	and.w	r3, r3, #4
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00a      	beq.n	80098ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098be:	f003 0308 	and.w	r3, r3, #8
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00a      	beq.n	80098dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	430a      	orrs	r2, r1
 80098da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e0:	f003 0310 	and.w	r3, r3, #16
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00a      	beq.n	80098fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00a      	beq.n	8009920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	430a      	orrs	r2, r1
 800991e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009928:	2b00      	cmp	r3, #0
 800992a:	d01a      	beq.n	8009962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	430a      	orrs	r2, r1
 8009940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800994a:	d10a      	bne.n	8009962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00a      	beq.n	8009984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	430a      	orrs	r2, r1
 8009982:	605a      	str	r2, [r3, #4]
  }
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af02      	add	r7, sp, #8
 8009996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80099a0:	f7f8 ff2c 	bl	80027fc <HAL_GetTick>
 80099a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 0308 	and.w	r3, r3, #8
 80099b0:	2b08      	cmp	r3, #8
 80099b2:	d10e      	bne.n	80099d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f82c 	bl	8009a20 <UART_WaitOnFlagUntilTimeout>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e022      	b.n	8009a18 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 0304 	and.w	r3, r3, #4
 80099dc:	2b04      	cmp	r3, #4
 80099de:	d10e      	bne.n	80099fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f816 	bl	8009a20 <UART_WaitOnFlagUntilTimeout>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e00c      	b.n	8009a18 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2220      	movs	r2, #32
 8009a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a30:	e062      	b.n	8009af8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a38:	d05e      	beq.n	8009af8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a3a:	f7f8 fedf 	bl	80027fc <HAL_GetTick>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	69ba      	ldr	r2, [r7, #24]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d302      	bcc.n	8009a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d11d      	bne.n	8009a8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a5e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689a      	ldr	r2, [r3, #8]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 0201 	bic.w	r2, r2, #1
 8009a6e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2220      	movs	r2, #32
 8009a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2220      	movs	r2, #32
 8009a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e045      	b.n	8009b18 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 0304 	and.w	r3, r3, #4
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d02e      	beq.n	8009af8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aa8:	d126      	bne.n	8009af8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ab2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ac2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689a      	ldr	r2, [r3, #8]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f022 0201 	bic.w	r2, r2, #1
 8009ad2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2220      	movs	r2, #32
 8009ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e00f      	b.n	8009b18 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	69da      	ldr	r2, [r3, #28]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	4013      	ands	r3, r2
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	bf0c      	ite	eq
 8009b08:	2301      	moveq	r3, #1
 8009b0a:	2300      	movne	r3, #0
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	461a      	mov	r2, r3
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d08d      	beq.n	8009a32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d101      	bne.n	8009b36 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b32:	2302      	movs	r3, #2
 8009b34:	e027      	b.n	8009b86 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2224      	movs	r2, #36	; 0x24
 8009b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f022 0201 	bic.w	r2, r2, #1
 8009b5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2220      	movs	r2, #32
 8009b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d101      	bne.n	8009baa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e02d      	b.n	8009c06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2224      	movs	r2, #36	; 0x24
 8009bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f022 0201 	bic.w	r2, r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f850 	bl	8009c8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2220      	movs	r2, #32
 8009bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d101      	bne.n	8009c26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c22:	2302      	movs	r3, #2
 8009c24:	e02d      	b.n	8009c82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2224      	movs	r2, #36	; 0x24
 8009c32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f022 0201 	bic.w	r2, r2, #1
 8009c4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f812 	bl	8009c8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2220      	movs	r2, #32
 8009c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b089      	sub	sp, #36	; 0x24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009c94:	4a2f      	ldr	r2, [pc, #188]	; (8009d54 <UARTEx_SetNbDataToProcess+0xc8>)
 8009c96:	f107 0314 	add.w	r3, r7, #20
 8009c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c9e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009ca2:	4a2d      	ldr	r2, [pc, #180]	; (8009d58 <UARTEx_SetNbDataToProcess+0xcc>)
 8009ca4:	f107 030c 	add.w	r3, r7, #12
 8009ca8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009cac:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d108      	bne.n	8009cca <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cc8:	e03d      	b.n	8009d46 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cca:	2310      	movs	r3, #16
 8009ccc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cce:	2310      	movs	r3, #16
 8009cd0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	0e5b      	lsrs	r3, r3, #25
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	f003 0307 	and.w	r3, r3, #7
 8009ce0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	0f5b      	lsrs	r3, r3, #29
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	f003 0307 	and.w	r3, r3, #7
 8009cf0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009cf2:	7fbb      	ldrb	r3, [r7, #30]
 8009cf4:	7f3a      	ldrb	r2, [r7, #28]
 8009cf6:	f107 0120 	add.w	r1, r7, #32
 8009cfa:	440a      	add	r2, r1
 8009cfc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009d00:	fb02 f303 	mul.w	r3, r2, r3
 8009d04:	7f3a      	ldrb	r2, [r7, #28]
 8009d06:	f107 0120 	add.w	r1, r7, #32
 8009d0a:	440a      	add	r2, r1
 8009d0c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009d10:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009d1c:	7ffb      	ldrb	r3, [r7, #31]
 8009d1e:	7f7a      	ldrb	r2, [r7, #29]
 8009d20:	f107 0120 	add.w	r1, r7, #32
 8009d24:	440a      	add	r2, r1
 8009d26:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009d2a:	fb02 f303 	mul.w	r3, r2, r3
 8009d2e:	7f7a      	ldrb	r2, [r7, #29]
 8009d30:	f107 0120 	add.w	r1, r7, #32
 8009d34:	440a      	add	r2, r1
 8009d36:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009d3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d46:	bf00      	nop
 8009d48:	3724      	adds	r7, #36	; 0x24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	0800f178 	.word	0x0800f178
 8009d58:	0800f180 	.word	0x0800f180

08009d5c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009d64:	4b04      	ldr	r3, [pc, #16]	; (8009d78 <HAL_ETH_RxCpltCallback+0x1c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 f9eb 	bl	800a144 <osSemaphoreRelease>
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20000208 	.word	0x20000208

08009d7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009d7c:	b480      	push	{r7}
 8009d7e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009d80:	bf00      	nop
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
	...

08009d8c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d92:	f3ef 8305 	mrs	r3, IPSR
 8009d96:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10f      	bne.n	8009dbe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8009da2:	607b      	str	r3, [r7, #4]
  return(result);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d105      	bne.n	8009db6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009daa:	f3ef 8311 	mrs	r3, BASEPRI
 8009dae:	603b      	str	r3, [r7, #0]
  return(result);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d007      	beq.n	8009dc6 <osKernelInitialize+0x3a>
 8009db6:	4b0e      	ldr	r3, [pc, #56]	; (8009df0 <osKernelInitialize+0x64>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d103      	bne.n	8009dc6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009dbe:	f06f 0305 	mvn.w	r3, #5
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	e00c      	b.n	8009de0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009dc6:	4b0a      	ldr	r3, [pc, #40]	; (8009df0 <osKernelInitialize+0x64>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d105      	bne.n	8009dda <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009dce:	4b08      	ldr	r3, [pc, #32]	; (8009df0 <osKernelInitialize+0x64>)
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	e002      	b.n	8009de0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dde:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009de0:	68fb      	ldr	r3, [r7, #12]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	2000020c 	.word	0x2000020c

08009df4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dfa:	f3ef 8305 	mrs	r3, IPSR
 8009dfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10f      	bne.n	8009e26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e06:	f3ef 8310 	mrs	r3, PRIMASK
 8009e0a:	607b      	str	r3, [r7, #4]
  return(result);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d105      	bne.n	8009e1e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e12:	f3ef 8311 	mrs	r3, BASEPRI
 8009e16:	603b      	str	r3, [r7, #0]
  return(result);
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d007      	beq.n	8009e2e <osKernelStart+0x3a>
 8009e1e:	4b0f      	ldr	r3, [pc, #60]	; (8009e5c <osKernelStart+0x68>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d103      	bne.n	8009e2e <osKernelStart+0x3a>
    stat = osErrorISR;
 8009e26:	f06f 0305 	mvn.w	r3, #5
 8009e2a:	60fb      	str	r3, [r7, #12]
 8009e2c:	e010      	b.n	8009e50 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e2e:	4b0b      	ldr	r3, [pc, #44]	; (8009e5c <osKernelStart+0x68>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d109      	bne.n	8009e4a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e36:	f7ff ffa1 	bl	8009d7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e3a:	4b08      	ldr	r3, [pc, #32]	; (8009e5c <osKernelStart+0x68>)
 8009e3c:	2202      	movs	r2, #2
 8009e3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009e40:	f001 fef8 	bl	800bc34 <vTaskStartScheduler>
      stat = osOK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	60fb      	str	r3, [r7, #12]
 8009e48:	e002      	b.n	8009e50 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009e50:	68fb      	ldr	r3, [r7, #12]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	2000020c 	.word	0x2000020c

08009e60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b090      	sub	sp, #64	; 0x40
 8009e64:	af04      	add	r7, sp, #16
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e70:	f3ef 8305 	mrs	r3, IPSR
 8009e74:	61fb      	str	r3, [r7, #28]
  return(result);
 8009e76:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f040 8090 	bne.w	8009f9e <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e82:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d105      	bne.n	8009e96 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8009e8e:	617b      	str	r3, [r7, #20]
  return(result);
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d003      	beq.n	8009e9e <osThreadNew+0x3e>
 8009e96:	4b44      	ldr	r3, [pc, #272]	; (8009fa8 <osThreadNew+0x148>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d07f      	beq.n	8009f9e <osThreadNew+0x13e>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d07c      	beq.n	8009f9e <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8009ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009eaa:	2318      	movs	r3, #24
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009eb6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d045      	beq.n	8009f4a <osThreadNew+0xea>
      if (attr->name != NULL) {
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d002      	beq.n	8009ecc <osThreadNew+0x6c>
        name = attr->name;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d008      	beq.n	8009ef2 <osThreadNew+0x92>
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee2:	2b38      	cmp	r3, #56	; 0x38
 8009ee4:	d805      	bhi.n	8009ef2 <osThreadNew+0x92>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <osThreadNew+0x96>
        return (NULL);
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e054      	b.n	8009fa0 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	695b      	ldr	r3, [r3, #20]
 8009f02:	089b      	lsrs	r3, r3, #2
 8009f04:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00e      	beq.n	8009f2c <osThreadNew+0xcc>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	2b5b      	cmp	r3, #91	; 0x5b
 8009f14:	d90a      	bls.n	8009f2c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d006      	beq.n	8009f2c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d002      	beq.n	8009f2c <osThreadNew+0xcc>
        mem = 1;
 8009f26:	2301      	movs	r3, #1
 8009f28:	623b      	str	r3, [r7, #32]
 8009f2a:	e010      	b.n	8009f4e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10c      	bne.n	8009f4e <osThreadNew+0xee>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d108      	bne.n	8009f4e <osThreadNew+0xee>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d104      	bne.n	8009f4e <osThreadNew+0xee>
          mem = 0;
 8009f44:	2300      	movs	r3, #0
 8009f46:	623b      	str	r3, [r7, #32]
 8009f48:	e001      	b.n	8009f4e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009f4e:	6a3b      	ldr	r3, [r7, #32]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d110      	bne.n	8009f76 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f5c:	9202      	str	r2, [sp, #8]
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f001 fc90 	bl	800b890 <xTaskCreateStatic>
 8009f70:	4603      	mov	r3, r0
 8009f72:	613b      	str	r3, [r7, #16]
 8009f74:	e013      	b.n	8009f9e <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d110      	bne.n	8009f9e <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	f107 0310 	add.w	r3, r7, #16
 8009f84:	9301      	str	r3, [sp, #4]
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f001 fcd8 	bl	800b944 <xTaskCreate>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d001      	beq.n	8009f9e <osThreadNew+0x13e>
          hTask = NULL;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f9e:	693b      	ldr	r3, [r7, #16]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3730      	adds	r7, #48	; 0x30
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	2000020c 	.word	0x2000020c

08009fac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fb4:	f3ef 8305 	mrs	r3, IPSR
 8009fb8:	613b      	str	r3, [r7, #16]
  return(result);
 8009fba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10f      	bne.n	8009fe0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8009fc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d105      	bne.n	8009fd8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8009fd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d007      	beq.n	8009fe8 <osDelay+0x3c>
 8009fd8:	4b0a      	ldr	r3, [pc, #40]	; (800a004 <osDelay+0x58>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d103      	bne.n	8009fe8 <osDelay+0x3c>
    stat = osErrorISR;
 8009fe0:	f06f 0305 	mvn.w	r3, #5
 8009fe4:	617b      	str	r3, [r7, #20]
 8009fe6:	e007      	b.n	8009ff8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d002      	beq.n	8009ff8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f001 fdea 	bl	800bbcc <vTaskDelay>
    }
  }

  return (stat);
 8009ff8:	697b      	ldr	r3, [r7, #20]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	2000020c 	.word	0x2000020c

0800a008 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08c      	sub	sp, #48	; 0x30
 800a00c:	af02      	add	r7, sp, #8
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a014:	2300      	movs	r3, #0
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a018:	f3ef 8305 	mrs	r3, IPSR
 800a01c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a01e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a020:	2b00      	cmp	r3, #0
 800a022:	f040 8087 	bne.w	800a134 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a026:	f3ef 8310 	mrs	r3, PRIMASK
 800a02a:	617b      	str	r3, [r7, #20]
  return(result);
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d105      	bne.n	800a03e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a032:	f3ef 8311 	mrs	r3, BASEPRI
 800a036:	613b      	str	r3, [r7, #16]
  return(result);
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d003      	beq.n	800a046 <osSemaphoreNew+0x3e>
 800a03e:	4b40      	ldr	r3, [pc, #256]	; (800a140 <osSemaphoreNew+0x138>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b02      	cmp	r3, #2
 800a044:	d076      	beq.n	800a134 <osSemaphoreNew+0x12c>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d073      	beq.n	800a134 <osSemaphoreNew+0x12c>
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	429a      	cmp	r2, r3
 800a052:	d86f      	bhi.n	800a134 <osSemaphoreNew+0x12c>
    mem = -1;
 800a054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a058:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d015      	beq.n	800a08c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d006      	beq.n	800a076 <osSemaphoreNew+0x6e>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	2b4f      	cmp	r3, #79	; 0x4f
 800a06e:	d902      	bls.n	800a076 <osSemaphoreNew+0x6e>
        mem = 1;
 800a070:	2301      	movs	r3, #1
 800a072:	623b      	str	r3, [r7, #32]
 800a074:	e00c      	b.n	800a090 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d108      	bne.n	800a090 <osSemaphoreNew+0x88>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d104      	bne.n	800a090 <osSemaphoreNew+0x88>
          mem = 0;
 800a086:	2300      	movs	r3, #0
 800a088:	623b      	str	r3, [r7, #32]
 800a08a:	e001      	b.n	800a090 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800a090:	6a3b      	ldr	r3, [r7, #32]
 800a092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a096:	d04d      	beq.n	800a134 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d129      	bne.n	800a0f2 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d10b      	bne.n	800a0bc <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	689a      	ldr	r2, [r3, #8]
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	2001      	movs	r0, #1
 800a0b4:	f000 fe04 	bl	800acc0 <xQueueGenericCreateStatic>
 800a0b8:	6278      	str	r0, [r7, #36]	; 0x24
 800a0ba:	e005      	b.n	800a0c8 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800a0bc:	2203      	movs	r2, #3
 800a0be:	2100      	movs	r1, #0
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	f000 fe70 	bl	800ada6 <xQueueGenericCreate>
 800a0c6:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d022      	beq.n	800a114 <osSemaphoreNew+0x10c>
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d01f      	beq.n	800a114 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2100      	movs	r1, #0
 800a0da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0dc:	f000 ff2c 	bl	800af38 <xQueueGenericSend>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d016      	beq.n	800a114 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800a0e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0e8:	f001 fa1a 	bl	800b520 <vQueueDelete>
            hSemaphore = NULL;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a0f0:	e010      	b.n	800a114 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d108      	bne.n	800a10a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	68b9      	ldr	r1, [r7, #8]
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 feb2 	bl	800ae6a <xQueueCreateCountingSemaphoreStatic>
 800a106:	6278      	str	r0, [r7, #36]	; 0x24
 800a108:	e004      	b.n	800a114 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a10a:	68b9      	ldr	r1, [r7, #8]
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 fee1 	bl	800aed4 <xQueueCreateCountingSemaphore>
 800a112:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00c      	beq.n	800a134 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d003      	beq.n	800a128 <osSemaphoreNew+0x120>
          name = attr->name;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	61fb      	str	r3, [r7, #28]
 800a126:	e001      	b.n	800a12c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800a128:	2300      	movs	r3, #0
 800a12a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a12c:	69f9      	ldr	r1, [r7, #28]
 800a12e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a130:	f001 fb28 	bl	800b784 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a136:	4618      	mov	r0, r3
 800a138:	3728      	adds	r7, #40	; 0x28
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	2000020c 	.word	0x2000020c

0800a144 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a150:	2300      	movs	r3, #0
 800a152:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d103      	bne.n	800a162 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a15a:	f06f 0303 	mvn.w	r3, #3
 800a15e:	61fb      	str	r3, [r7, #28]
 800a160:	e03e      	b.n	800a1e0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a162:	f3ef 8305 	mrs	r3, IPSR
 800a166:	617b      	str	r3, [r7, #20]
  return(result);
 800a168:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10f      	bne.n	800a18e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a16e:	f3ef 8310 	mrs	r3, PRIMASK
 800a172:	613b      	str	r3, [r7, #16]
  return(result);
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d105      	bne.n	800a186 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a17a:	f3ef 8311 	mrs	r3, BASEPRI
 800a17e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d01e      	beq.n	800a1c4 <osSemaphoreRelease+0x80>
 800a186:	4b19      	ldr	r3, [pc, #100]	; (800a1ec <osSemaphoreRelease+0xa8>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d11a      	bne.n	800a1c4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800a18e:	2300      	movs	r3, #0
 800a190:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a192:	f107 0308 	add.w	r3, r7, #8
 800a196:	4619      	mov	r1, r3
 800a198:	69b8      	ldr	r0, [r7, #24]
 800a19a:	f001 f85b 	bl	800b254 <xQueueGiveFromISR>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d003      	beq.n	800a1ac <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800a1a4:	f06f 0302 	mvn.w	r3, #2
 800a1a8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a1aa:	e018      	b.n	800a1de <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d015      	beq.n	800a1de <osSemaphoreRelease+0x9a>
 800a1b2:	4b0f      	ldr	r3, [pc, #60]	; (800a1f0 <osSemaphoreRelease+0xac>)
 800a1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a1c2:	e00c      	b.n	800a1de <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	69b8      	ldr	r0, [r7, #24]
 800a1cc:	f000 feb4 	bl	800af38 <xQueueGenericSend>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d004      	beq.n	800a1e0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800a1d6:	f06f 0302 	mvn.w	r3, #2
 800a1da:	61fb      	str	r3, [r7, #28]
 800a1dc:	e000      	b.n	800a1e0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a1de:	bf00      	nop
    }
  }

  return (stat);
 800a1e0:	69fb      	ldr	r3, [r7, #28]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3720      	adds	r7, #32
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	2000020c 	.word	0x2000020c
 800a1f0:	e000ed04 	.word	0xe000ed04

0800a1f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4a07      	ldr	r2, [pc, #28]	; (800a220 <vApplicationGetIdleTaskMemory+0x2c>)
 800a204:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	4a06      	ldr	r2, [pc, #24]	; (800a224 <vApplicationGetIdleTaskMemory+0x30>)
 800a20a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a212:	601a      	str	r2, [r3, #0]
}
 800a214:	bf00      	nop
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	20000210 	.word	0x20000210
 800a224:	2000026c 	.word	0x2000026c

0800a228 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4a07      	ldr	r2, [pc, #28]	; (800a254 <vApplicationGetTimerTaskMemory+0x2c>)
 800a238:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	4a06      	ldr	r2, [pc, #24]	; (800a258 <vApplicationGetTimerTaskMemory+0x30>)
 800a23e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a246:	601a      	str	r2, [r3, #0]
}
 800a248:	bf00      	nop
 800a24a:	3714      	adds	r7, #20
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	20000a6c 	.word	0x20000a6c
 800a258:	20000ac8 	.word	0x20000ac8

0800a25c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b08a      	sub	sp, #40	; 0x28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a264:	2300      	movs	r3, #0
 800a266:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a268:	f001 fd48 	bl	800bcfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a26c:	4b57      	ldr	r3, [pc, #348]	; (800a3cc <pvPortMalloc+0x170>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a274:	f000 f90c 	bl	800a490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a278:	4b55      	ldr	r3, [pc, #340]	; (800a3d0 <pvPortMalloc+0x174>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4013      	ands	r3, r2
 800a280:	2b00      	cmp	r3, #0
 800a282:	f040 808c 	bne.w	800a39e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01c      	beq.n	800a2c6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a28c:	2208      	movs	r2, #8
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4413      	add	r3, r2
 800a292:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f003 0307 	and.w	r3, r3, #7
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d013      	beq.n	800a2c6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f023 0307 	bic.w	r3, r3, #7
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f003 0307 	and.w	r3, r3, #7
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d009      	beq.n	800a2c6 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	617b      	str	r3, [r7, #20]
 800a2c4:	e7fe      	b.n	800a2c4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d068      	beq.n	800a39e <pvPortMalloc+0x142>
 800a2cc:	4b41      	ldr	r3, [pc, #260]	; (800a3d4 <pvPortMalloc+0x178>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d863      	bhi.n	800a39e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2d6:	4b40      	ldr	r3, [pc, #256]	; (800a3d8 <pvPortMalloc+0x17c>)
 800a2d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2da:	4b3f      	ldr	r3, [pc, #252]	; (800a3d8 <pvPortMalloc+0x17c>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2e0:	e004      	b.n	800a2ec <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d903      	bls.n	800a2fe <pvPortMalloc+0xa2>
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1f1      	bne.n	800a2e2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2fe:	4b33      	ldr	r3, [pc, #204]	; (800a3cc <pvPortMalloc+0x170>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a304:	429a      	cmp	r2, r3
 800a306:	d04a      	beq.n	800a39e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2208      	movs	r2, #8
 800a30e:	4413      	add	r3, r2
 800a310:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	1ad2      	subs	r2, r2, r3
 800a322:	2308      	movs	r3, #8
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	429a      	cmp	r2, r3
 800a328:	d91e      	bls.n	800a368 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a32a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4413      	add	r3, r2
 800a330:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	f003 0307 	and.w	r3, r3, #7
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d009      	beq.n	800a350 <pvPortMalloc+0xf4>
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	613b      	str	r3, [r7, #16]
 800a34e:	e7fe      	b.n	800a34e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	1ad2      	subs	r2, r2, r3
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a362:	69b8      	ldr	r0, [r7, #24]
 800a364:	f000 f8f6 	bl	800a554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a368:	4b1a      	ldr	r3, [pc, #104]	; (800a3d4 <pvPortMalloc+0x178>)
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	4a18      	ldr	r2, [pc, #96]	; (800a3d4 <pvPortMalloc+0x178>)
 800a374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a376:	4b17      	ldr	r3, [pc, #92]	; (800a3d4 <pvPortMalloc+0x178>)
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	4b18      	ldr	r3, [pc, #96]	; (800a3dc <pvPortMalloc+0x180>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d203      	bcs.n	800a38a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a382:	4b14      	ldr	r3, [pc, #80]	; (800a3d4 <pvPortMalloc+0x178>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a15      	ldr	r2, [pc, #84]	; (800a3dc <pvPortMalloc+0x180>)
 800a388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	685a      	ldr	r2, [r3, #4]
 800a38e:	4b10      	ldr	r3, [pc, #64]	; (800a3d0 <pvPortMalloc+0x174>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	431a      	orrs	r2, r3
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39a:	2200      	movs	r2, #0
 800a39c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a39e:	f001 fcbb 	bl	800bd18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	f003 0307 	and.w	r3, r3, #7
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d009      	beq.n	800a3c0 <pvPortMalloc+0x164>
 800a3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	60fb      	str	r3, [r7, #12]
 800a3be:	e7fe      	b.n	800a3be <pvPortMalloc+0x162>
	return pvReturn;
 800a3c0:	69fb      	ldr	r3, [r7, #28]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3728      	adds	r7, #40	; 0x28
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	200056d0 	.word	0x200056d0
 800a3d0:	200056dc 	.word	0x200056dc
 800a3d4:	200056d4 	.word	0x200056d4
 800a3d8:	200056c8 	.word	0x200056c8
 800a3dc:	200056d8 	.word	0x200056d8

0800a3e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d046      	beq.n	800a480 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3f2:	2308      	movs	r3, #8
 800a3f4:	425b      	negs	r3, r3
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	4b20      	ldr	r3, [pc, #128]	; (800a488 <vPortFree+0xa8>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4013      	ands	r3, r2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d109      	bne.n	800a422 <vPortFree+0x42>
 800a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	e7fe      	b.n	800a420 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d009      	beq.n	800a43e <vPortFree+0x5e>
 800a42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	60bb      	str	r3, [r7, #8]
 800a43c:	e7fe      	b.n	800a43c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	4b11      	ldr	r3, [pc, #68]	; (800a488 <vPortFree+0xa8>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4013      	ands	r3, r2
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d019      	beq.n	800a480 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d115      	bne.n	800a480 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	685a      	ldr	r2, [r3, #4]
 800a458:	4b0b      	ldr	r3, [pc, #44]	; (800a488 <vPortFree+0xa8>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	43db      	mvns	r3, r3
 800a45e:	401a      	ands	r2, r3
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a464:	f001 fc4a 	bl	800bcfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	4b07      	ldr	r3, [pc, #28]	; (800a48c <vPortFree+0xac>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4413      	add	r3, r2
 800a472:	4a06      	ldr	r2, [pc, #24]	; (800a48c <vPortFree+0xac>)
 800a474:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a476:	6938      	ldr	r0, [r7, #16]
 800a478:	f000 f86c 	bl	800a554 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a47c:	f001 fc4c 	bl	800bd18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a480:	bf00      	nop
 800a482:	3718      	adds	r7, #24
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	200056dc 	.word	0x200056dc
 800a48c:	200056d4 	.word	0x200056d4

0800a490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a496:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a49a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a49c:	4b27      	ldr	r3, [pc, #156]	; (800a53c <prvHeapInit+0xac>)
 800a49e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f003 0307 	and.w	r3, r3, #7
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00c      	beq.n	800a4c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3307      	adds	r3, #7
 800a4ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f023 0307 	bic.w	r3, r3, #7
 800a4b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	4a1f      	ldr	r2, [pc, #124]	; (800a53c <prvHeapInit+0xac>)
 800a4c0:	4413      	add	r3, r2
 800a4c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4c8:	4a1d      	ldr	r2, [pc, #116]	; (800a540 <prvHeapInit+0xb0>)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4ce:	4b1c      	ldr	r3, [pc, #112]	; (800a540 <prvHeapInit+0xb0>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	4413      	add	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4dc:	2208      	movs	r2, #8
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	1a9b      	subs	r3, r3, r2
 800a4e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 0307 	bic.w	r3, r3, #7
 800a4ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4a15      	ldr	r2, [pc, #84]	; (800a544 <prvHeapInit+0xb4>)
 800a4f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4f2:	4b14      	ldr	r3, [pc, #80]	; (800a544 <prvHeapInit+0xb4>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4fa:	4b12      	ldr	r3, [pc, #72]	; (800a544 <prvHeapInit+0xb4>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2200      	movs	r2, #0
 800a500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	1ad2      	subs	r2, r2, r3
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a510:	4b0c      	ldr	r3, [pc, #48]	; (800a544 <prvHeapInit+0xb4>)
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	4a0a      	ldr	r2, [pc, #40]	; (800a548 <prvHeapInit+0xb8>)
 800a51e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	4a09      	ldr	r2, [pc, #36]	; (800a54c <prvHeapInit+0xbc>)
 800a526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a528:	4b09      	ldr	r3, [pc, #36]	; (800a550 <prvHeapInit+0xc0>)
 800a52a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a52e:	601a      	str	r2, [r3, #0]
}
 800a530:	bf00      	nop
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	20001ac8 	.word	0x20001ac8
 800a540:	200056c8 	.word	0x200056c8
 800a544:	200056d0 	.word	0x200056d0
 800a548:	200056d8 	.word	0x200056d8
 800a54c:	200056d4 	.word	0x200056d4
 800a550:	200056dc 	.word	0x200056dc

0800a554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a55c:	4b28      	ldr	r3, [pc, #160]	; (800a600 <prvInsertBlockIntoFreeList+0xac>)
 800a55e:	60fb      	str	r3, [r7, #12]
 800a560:	e002      	b.n	800a568 <prvInsertBlockIntoFreeList+0x14>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	60fb      	str	r3, [r7, #12]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d8f7      	bhi.n	800a562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	4413      	add	r3, r2
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	429a      	cmp	r2, r3
 800a582:	d108      	bne.n	800a596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	685a      	ldr	r2, [r3, #4]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	441a      	add	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	441a      	add	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d118      	bne.n	800a5dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	4b15      	ldr	r3, [pc, #84]	; (800a604 <prvInsertBlockIntoFreeList+0xb0>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d00d      	beq.n	800a5d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685a      	ldr	r2, [r3, #4]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	441a      	add	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	e008      	b.n	800a5e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5d2:	4b0c      	ldr	r3, [pc, #48]	; (800a604 <prvInsertBlockIntoFreeList+0xb0>)
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	e003      	b.n	800a5e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d002      	beq.n	800a5f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5f2:	bf00      	nop
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	200056c8 	.word	0x200056c8
 800a604:	200056d0 	.word	0x200056d0

0800a608 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f103 0208 	add.w	r2, r3, #8
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a620:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f103 0208 	add.w	r2, r3, #8
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f103 0208 	add.w	r2, r3, #8
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a656:	bf00      	nop
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a662:	b480      	push	{r7}
 800a664:	b085      	sub	sp, #20
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	689a      	ldr	r2, [r3, #8]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	683a      	ldr	r2, [r7, #0]
 800a686:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	1c5a      	adds	r2, r3, #1
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	601a      	str	r2, [r3, #0]
}
 800a69e:	bf00      	nop
 800a6a0:	3714      	adds	r7, #20
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b085      	sub	sp, #20
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6c0:	d103      	bne.n	800a6ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	60fb      	str	r3, [r7, #12]
 800a6c8:	e00c      	b.n	800a6e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	3308      	adds	r3, #8
 800a6ce:	60fb      	str	r3, [r7, #12]
 800a6d0:	e002      	b.n	800a6d8 <vListInsert+0x2e>
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	60fb      	str	r3, [r7, #12]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d2f6      	bcs.n	800a6d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	601a      	str	r2, [r3, #0]
}
 800a710:	bf00      	nop
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	6892      	ldr	r2, [r2, #8]
 800a732:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	6852      	ldr	r2, [r2, #4]
 800a73c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	429a      	cmp	r2, r3
 800a746:	d103      	bne.n	800a750 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689a      	ldr	r2, [r3, #8]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	1e5a      	subs	r2, r3, #1
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3b04      	subs	r3, #4
 800a780:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3b04      	subs	r3, #4
 800a78e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	f023 0201 	bic.w	r2, r3, #1
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3b04      	subs	r3, #4
 800a79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7a0:	4a0c      	ldr	r2, [pc, #48]	; (800a7d4 <pxPortInitialiseStack+0x64>)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3b14      	subs	r3, #20
 800a7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3b04      	subs	r3, #4
 800a7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f06f 0202 	mvn.w	r2, #2
 800a7be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3b20      	subs	r3, #32
 800a7c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	0800a7d9 	.word	0x0800a7d9

0800a7d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7e2:	4b11      	ldr	r3, [pc, #68]	; (800a828 <prvTaskExitError+0x50>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7ea:	d009      	beq.n	800a800 <prvTaskExitError+0x28>
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	60fb      	str	r3, [r7, #12]
 800a7fe:	e7fe      	b.n	800a7fe <prvTaskExitError+0x26>
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a812:	bf00      	nop
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d0fc      	beq.n	800a814 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a81a:	bf00      	nop
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	20000010 	.word	0x20000010
 800a82c:	00000000 	.word	0x00000000

0800a830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a830:	4b07      	ldr	r3, [pc, #28]	; (800a850 <pxCurrentTCBConst2>)
 800a832:	6819      	ldr	r1, [r3, #0]
 800a834:	6808      	ldr	r0, [r1, #0]
 800a836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83a:	f380 8809 	msr	PSP, r0
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f04f 0000 	mov.w	r0, #0
 800a846:	f380 8811 	msr	BASEPRI, r0
 800a84a:	4770      	bx	lr
 800a84c:	f3af 8000 	nop.w

0800a850 <pxCurrentTCBConst2>:
 800a850:	200056e8 	.word	0x200056e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a854:	bf00      	nop
 800a856:	bf00      	nop

0800a858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a858:	4808      	ldr	r0, [pc, #32]	; (800a87c <prvPortStartFirstTask+0x24>)
 800a85a:	6800      	ldr	r0, [r0, #0]
 800a85c:	6800      	ldr	r0, [r0, #0]
 800a85e:	f380 8808 	msr	MSP, r0
 800a862:	f04f 0000 	mov.w	r0, #0
 800a866:	f380 8814 	msr	CONTROL, r0
 800a86a:	b662      	cpsie	i
 800a86c:	b661      	cpsie	f
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	df00      	svc	0
 800a878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a87a:	bf00      	nop
 800a87c:	e000ed08 	.word	0xe000ed08

0800a880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a886:	4b44      	ldr	r3, [pc, #272]	; (800a998 <xPortStartScheduler+0x118>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a44      	ldr	r2, [pc, #272]	; (800a99c <xPortStartScheduler+0x11c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d109      	bne.n	800a8a4 <xPortStartScheduler+0x24>
 800a890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a894:	f383 8811 	msr	BASEPRI, r3
 800a898:	f3bf 8f6f 	isb	sy
 800a89c:	f3bf 8f4f 	dsb	sy
 800a8a0:	613b      	str	r3, [r7, #16]
 800a8a2:	e7fe      	b.n	800a8a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a8a4:	4b3c      	ldr	r3, [pc, #240]	; (800a998 <xPortStartScheduler+0x118>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a3d      	ldr	r2, [pc, #244]	; (800a9a0 <xPortStartScheduler+0x120>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d109      	bne.n	800a8c2 <xPortStartScheduler+0x42>
 800a8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	e7fe      	b.n	800a8c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8c2:	4b38      	ldr	r3, [pc, #224]	; (800a9a4 <xPortStartScheduler+0x124>)
 800a8c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	22ff      	movs	r2, #255	; 0xff
 800a8d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8dc:	78fb      	ldrb	r3, [r7, #3]
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a8e4:	b2da      	uxtb	r2, r3
 800a8e6:	4b30      	ldr	r3, [pc, #192]	; (800a9a8 <xPortStartScheduler+0x128>)
 800a8e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8ea:	4b30      	ldr	r3, [pc, #192]	; (800a9ac <xPortStartScheduler+0x12c>)
 800a8ec:	2207      	movs	r2, #7
 800a8ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8f0:	e009      	b.n	800a906 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a8f2:	4b2e      	ldr	r3, [pc, #184]	; (800a9ac <xPortStartScheduler+0x12c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	4a2c      	ldr	r2, [pc, #176]	; (800a9ac <xPortStartScheduler+0x12c>)
 800a8fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8fc:	78fb      	ldrb	r3, [r7, #3]
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	005b      	lsls	r3, r3, #1
 800a902:	b2db      	uxtb	r3, r3
 800a904:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a906:	78fb      	ldrb	r3, [r7, #3]
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a90e:	2b80      	cmp	r3, #128	; 0x80
 800a910:	d0ef      	beq.n	800a8f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a912:	4b26      	ldr	r3, [pc, #152]	; (800a9ac <xPortStartScheduler+0x12c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f1c3 0307 	rsb	r3, r3, #7
 800a91a:	2b04      	cmp	r3, #4
 800a91c:	d009      	beq.n	800a932 <xPortStartScheduler+0xb2>
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	60bb      	str	r3, [r7, #8]
 800a930:	e7fe      	b.n	800a930 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a932:	4b1e      	ldr	r3, [pc, #120]	; (800a9ac <xPortStartScheduler+0x12c>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	021b      	lsls	r3, r3, #8
 800a938:	4a1c      	ldr	r2, [pc, #112]	; (800a9ac <xPortStartScheduler+0x12c>)
 800a93a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a93c:	4b1b      	ldr	r3, [pc, #108]	; (800a9ac <xPortStartScheduler+0x12c>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a944:	4a19      	ldr	r2, [pc, #100]	; (800a9ac <xPortStartScheduler+0x12c>)
 800a946:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a950:	4b17      	ldr	r3, [pc, #92]	; (800a9b0 <xPortStartScheduler+0x130>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a16      	ldr	r2, [pc, #88]	; (800a9b0 <xPortStartScheduler+0x130>)
 800a956:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a95a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a95c:	4b14      	ldr	r3, [pc, #80]	; (800a9b0 <xPortStartScheduler+0x130>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a13      	ldr	r2, [pc, #76]	; (800a9b0 <xPortStartScheduler+0x130>)
 800a962:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a966:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a968:	f000 f8d6 	bl	800ab18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a96c:	4b11      	ldr	r3, [pc, #68]	; (800a9b4 <xPortStartScheduler+0x134>)
 800a96e:	2200      	movs	r2, #0
 800a970:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a972:	f000 f8f5 	bl	800ab60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a976:	4b10      	ldr	r3, [pc, #64]	; (800a9b8 <xPortStartScheduler+0x138>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a0f      	ldr	r2, [pc, #60]	; (800a9b8 <xPortStartScheduler+0x138>)
 800a97c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a980:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a982:	f7ff ff69 	bl	800a858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a986:	f001 fb2b 	bl	800bfe0 <vTaskSwitchContext>
	prvTaskExitError();
 800a98a:	f7ff ff25 	bl	800a7d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3718      	adds	r7, #24
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	e000ed00 	.word	0xe000ed00
 800a99c:	410fc271 	.word	0x410fc271
 800a9a0:	410fc270 	.word	0x410fc270
 800a9a4:	e000e400 	.word	0xe000e400
 800a9a8:	200056e0 	.word	0x200056e0
 800a9ac:	200056e4 	.word	0x200056e4
 800a9b0:	e000ed20 	.word	0xe000ed20
 800a9b4:	20000010 	.word	0x20000010
 800a9b8:	e000ef34 	.word	0xe000ef34

0800a9bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9d4:	4b0e      	ldr	r3, [pc, #56]	; (800aa10 <vPortEnterCritical+0x54>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	4a0d      	ldr	r2, [pc, #52]	; (800aa10 <vPortEnterCritical+0x54>)
 800a9dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9de:	4b0c      	ldr	r3, [pc, #48]	; (800aa10 <vPortEnterCritical+0x54>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d10e      	bne.n	800aa04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9e6:	4b0b      	ldr	r3, [pc, #44]	; (800aa14 <vPortEnterCritical+0x58>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d009      	beq.n	800aa04 <vPortEnterCritical+0x48>
 800a9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	603b      	str	r3, [r7, #0]
 800aa02:	e7fe      	b.n	800aa02 <vPortEnterCritical+0x46>
	}
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	20000010 	.word	0x20000010
 800aa14:	e000ed04 	.word	0xe000ed04

0800aa18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa1e:	4b11      	ldr	r3, [pc, #68]	; (800aa64 <vPortExitCritical+0x4c>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d109      	bne.n	800aa3a <vPortExitCritical+0x22>
 800aa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	607b      	str	r3, [r7, #4]
 800aa38:	e7fe      	b.n	800aa38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800aa3a:	4b0a      	ldr	r3, [pc, #40]	; (800aa64 <vPortExitCritical+0x4c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	4a08      	ldr	r2, [pc, #32]	; (800aa64 <vPortExitCritical+0x4c>)
 800aa42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa44:	4b07      	ldr	r3, [pc, #28]	; (800aa64 <vPortExitCritical+0x4c>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d104      	bne.n	800aa56 <vPortExitCritical+0x3e>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa56:	bf00      	nop
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	20000010 	.word	0x20000010
	...

0800aa70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa70:	f3ef 8009 	mrs	r0, PSP
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	4b15      	ldr	r3, [pc, #84]	; (800aad0 <pxCurrentTCBConst>)
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	f01e 0f10 	tst.w	lr, #16
 800aa80:	bf08      	it	eq
 800aa82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8a:	6010      	str	r0, [r2, #0]
 800aa8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa94:	f380 8811 	msr	BASEPRI, r0
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f001 fa9e 	bl	800bfe0 <vTaskSwitchContext>
 800aaa4:	f04f 0000 	mov.w	r0, #0
 800aaa8:	f380 8811 	msr	BASEPRI, r0
 800aaac:	bc09      	pop	{r0, r3}
 800aaae:	6819      	ldr	r1, [r3, #0]
 800aab0:	6808      	ldr	r0, [r1, #0]
 800aab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab6:	f01e 0f10 	tst.w	lr, #16
 800aaba:	bf08      	it	eq
 800aabc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aac0:	f380 8809 	msr	PSP, r0
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	f3af 8000 	nop.w

0800aad0 <pxCurrentTCBConst>:
 800aad0:	200056e8 	.word	0x200056e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aad4:	bf00      	nop
 800aad6:	bf00      	nop

0800aad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aaf0:	f001 f9be 	bl	800be70 <xTaskIncrementTick>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aafa:	4b06      	ldr	r3, [pc, #24]	; (800ab14 <SysTick_Handler+0x3c>)
 800aafc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab00:	601a      	str	r2, [r3, #0]
 800ab02:	2300      	movs	r3, #0
 800ab04:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab0c:	bf00      	nop
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	e000ed04 	.word	0xe000ed04

0800ab18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab18:	b480      	push	{r7}
 800ab1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab1c:	4b0b      	ldr	r3, [pc, #44]	; (800ab4c <vPortSetupTimerInterrupt+0x34>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab22:	4b0b      	ldr	r3, [pc, #44]	; (800ab50 <vPortSetupTimerInterrupt+0x38>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab28:	4b0a      	ldr	r3, [pc, #40]	; (800ab54 <vPortSetupTimerInterrupt+0x3c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a0a      	ldr	r2, [pc, #40]	; (800ab58 <vPortSetupTimerInterrupt+0x40>)
 800ab2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab32:	099b      	lsrs	r3, r3, #6
 800ab34:	4a09      	ldr	r2, [pc, #36]	; (800ab5c <vPortSetupTimerInterrupt+0x44>)
 800ab36:	3b01      	subs	r3, #1
 800ab38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab3a:	4b04      	ldr	r3, [pc, #16]	; (800ab4c <vPortSetupTimerInterrupt+0x34>)
 800ab3c:	2207      	movs	r2, #7
 800ab3e:	601a      	str	r2, [r3, #0]
}
 800ab40:	bf00      	nop
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	e000e010 	.word	0xe000e010
 800ab50:	e000e018 	.word	0xe000e018
 800ab54:	20000000 	.word	0x20000000
 800ab58:	10624dd3 	.word	0x10624dd3
 800ab5c:	e000e014 	.word	0xe000e014

0800ab60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab70 <vPortEnableVFP+0x10>
 800ab64:	6801      	ldr	r1, [r0, #0]
 800ab66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab6a:	6001      	str	r1, [r0, #0]
 800ab6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab6e:	bf00      	nop
 800ab70:	e000ed88 	.word	0xe000ed88

0800ab74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab7a:	f3ef 8305 	mrs	r3, IPSR
 800ab7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2b0f      	cmp	r3, #15
 800ab84:	d913      	bls.n	800abae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab86:	4a16      	ldr	r2, [pc, #88]	; (800abe0 <vPortValidateInterruptPriority+0x6c>)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab90:	4b14      	ldr	r3, [pc, #80]	; (800abe4 <vPortValidateInterruptPriority+0x70>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	7afa      	ldrb	r2, [r7, #11]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d209      	bcs.n	800abae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	607b      	str	r3, [r7, #4]
 800abac:	e7fe      	b.n	800abac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abae:	4b0e      	ldr	r3, [pc, #56]	; (800abe8 <vPortValidateInterruptPriority+0x74>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800abb6:	4b0d      	ldr	r3, [pc, #52]	; (800abec <vPortValidateInterruptPriority+0x78>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d909      	bls.n	800abd2 <vPortValidateInterruptPriority+0x5e>
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	603b      	str	r3, [r7, #0]
 800abd0:	e7fe      	b.n	800abd0 <vPortValidateInterruptPriority+0x5c>
	}
 800abd2:	bf00      	nop
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	e000e3f0 	.word	0xe000e3f0
 800abe4:	200056e0 	.word	0x200056e0
 800abe8:	e000ed0c 	.word	0xe000ed0c
 800abec:	200056e4 	.word	0x200056e4

0800abf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d109      	bne.n	800ac18 <xQueueGenericReset+0x28>
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	60bb      	str	r3, [r7, #8]
 800ac16:	e7fe      	b.n	800ac16 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ac18:	f7ff fed0 	bl	800a9bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac24:	68f9      	ldr	r1, [r7, #12]
 800ac26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac28:	fb01 f303 	mul.w	r3, r1, r3
 800ac2c:	441a      	add	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	68f9      	ldr	r1, [r7, #12]
 800ac4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac4e:	fb01 f303 	mul.w	r3, r1, r3
 800ac52:	441a      	add	r2, r3
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	22ff      	movs	r2, #255	; 0xff
 800ac5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	22ff      	movs	r2, #255	; 0xff
 800ac64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d114      	bne.n	800ac98 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d01a      	beq.n	800acac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	3310      	adds	r3, #16
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f001 fa5a 	bl	800c134 <xTaskRemoveFromEventList>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d012      	beq.n	800acac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac86:	4b0d      	ldr	r3, [pc, #52]	; (800acbc <xQueueGenericReset+0xcc>)
 800ac88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	e009      	b.n	800acac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	3310      	adds	r3, #16
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7ff fcb3 	bl	800a608 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	3324      	adds	r3, #36	; 0x24
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7ff fcae 	bl	800a608 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800acac:	f7ff feb4 	bl	800aa18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800acb0:	2301      	movs	r3, #1
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	e000ed04 	.word	0xe000ed04

0800acc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08e      	sub	sp, #56	; 0x38
 800acc4:	af02      	add	r7, sp, #8
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d109      	bne.n	800ace8 <xQueueGenericCreateStatic+0x28>
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	62bb      	str	r3, [r7, #40]	; 0x28
 800ace6:	e7fe      	b.n	800ace6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d109      	bne.n	800ad02 <xQueueGenericCreateStatic+0x42>
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	627b      	str	r3, [r7, #36]	; 0x24
 800ad00:	e7fe      	b.n	800ad00 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d002      	beq.n	800ad0e <xQueueGenericCreateStatic+0x4e>
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <xQueueGenericCreateStatic+0x52>
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e000      	b.n	800ad14 <xQueueGenericCreateStatic+0x54>
 800ad12:	2300      	movs	r3, #0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d109      	bne.n	800ad2c <xQueueGenericCreateStatic+0x6c>
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	623b      	str	r3, [r7, #32]
 800ad2a:	e7fe      	b.n	800ad2a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <xQueueGenericCreateStatic+0x78>
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <xQueueGenericCreateStatic+0x7c>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e000      	b.n	800ad3e <xQueueGenericCreateStatic+0x7e>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d109      	bne.n	800ad56 <xQueueGenericCreateStatic+0x96>
 800ad42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	61fb      	str	r3, [r7, #28]
 800ad54:	e7fe      	b.n	800ad54 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad56:	2350      	movs	r3, #80	; 0x50
 800ad58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	2b50      	cmp	r3, #80	; 0x50
 800ad5e:	d009      	beq.n	800ad74 <xQueueGenericCreateStatic+0xb4>
 800ad60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	61bb      	str	r3, [r7, #24]
 800ad72:	e7fe      	b.n	800ad72 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ad7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00d      	beq.n	800ad9c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad88:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ad8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	4613      	mov	r3, r2
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	68b9      	ldr	r1, [r7, #8]
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 f844 	bl	800ae24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3730      	adds	r7, #48	; 0x30
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b08a      	sub	sp, #40	; 0x28
 800adaa:	af02      	add	r7, sp, #8
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	4613      	mov	r3, r2
 800adb2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d109      	bne.n	800adce <xQueueGenericCreate+0x28>
 800adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	613b      	str	r3, [r7, #16]
 800adcc:	e7fe      	b.n	800adcc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d102      	bne.n	800adda <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800add4:	2300      	movs	r3, #0
 800add6:	61fb      	str	r3, [r7, #28]
 800add8:	e004      	b.n	800ade4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	fb02 f303 	mul.w	r3, r2, r3
 800ade2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	3350      	adds	r3, #80	; 0x50
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff fa37 	bl	800a25c <pvPortMalloc>
 800adee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d011      	beq.n	800ae1a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	3350      	adds	r3, #80	; 0x50
 800adfe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae08:	79fa      	ldrb	r2, [r7, #7]
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	9300      	str	r3, [sp, #0]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	697a      	ldr	r2, [r7, #20]
 800ae12:	68b9      	ldr	r1, [r7, #8]
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f000 f805 	bl	800ae24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae1a:	69bb      	ldr	r3, [r7, #24]
	}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3720      	adds	r7, #32
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
 800ae30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d103      	bne.n	800ae40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	69ba      	ldr	r2, [r7, #24]
 800ae3c:	601a      	str	r2, [r3, #0]
 800ae3e:	e002      	b.n	800ae46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae52:	2101      	movs	r1, #1
 800ae54:	69b8      	ldr	r0, [r7, #24]
 800ae56:	f7ff fecb 	bl	800abf0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	78fa      	ldrb	r2, [r7, #3]
 800ae5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae62:	bf00      	nop
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b08a      	sub	sp, #40	; 0x28
 800ae6e:	af02      	add	r7, sp, #8
 800ae70:	60f8      	str	r0, [r7, #12]
 800ae72:	60b9      	str	r1, [r7, #8]
 800ae74:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d109      	bne.n	800ae90 <xQueueCreateCountingSemaphoreStatic+0x26>
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	61bb      	str	r3, [r7, #24]
 800ae8e:	e7fe      	b.n	800ae8e <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d909      	bls.n	800aeac <xQueueCreateCountingSemaphoreStatic+0x42>
 800ae98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	617b      	str	r3, [r7, #20]
 800aeaa:	e7fe      	b.n	800aeaa <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aeac:	2302      	movs	r3, #2
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f7ff ff02 	bl	800acc0 <xQueueGenericCreateStatic>
 800aebc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aeca:	69fb      	ldr	r3, [r7, #28]
	}
 800aecc:	4618      	mov	r0, r3
 800aece:	3720      	adds	r7, #32
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d109      	bne.n	800aef8 <xQueueCreateCountingSemaphore+0x24>
 800aee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee8:	f383 8811 	msr	BASEPRI, r3
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	613b      	str	r3, [r7, #16]
 800aef6:	e7fe      	b.n	800aef6 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d909      	bls.n	800af14 <xQueueCreateCountingSemaphore+0x40>
 800af00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	60fb      	str	r3, [r7, #12]
 800af12:	e7fe      	b.n	800af12 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800af14:	2202      	movs	r2, #2
 800af16:	2100      	movs	r1, #0
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f7ff ff44 	bl	800ada6 <xQueueGenericCreate>
 800af1e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	683a      	ldr	r2, [r7, #0]
 800af2a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800af2c:	697b      	ldr	r3, [r7, #20]
	}
 800af2e:	4618      	mov	r0, r3
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b08e      	sub	sp, #56	; 0x38
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
 800af44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af46:	2300      	movs	r3, #0
 800af48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	2b00      	cmp	r3, #0
 800af52:	d109      	bne.n	800af68 <xQueueGenericSend+0x30>
 800af54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	62bb      	str	r3, [r7, #40]	; 0x28
 800af66:	e7fe      	b.n	800af66 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d103      	bne.n	800af76 <xQueueGenericSend+0x3e>
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af72:	2b00      	cmp	r3, #0
 800af74:	d101      	bne.n	800af7a <xQueueGenericSend+0x42>
 800af76:	2301      	movs	r3, #1
 800af78:	e000      	b.n	800af7c <xQueueGenericSend+0x44>
 800af7a:	2300      	movs	r3, #0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d109      	bne.n	800af94 <xQueueGenericSend+0x5c>
 800af80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	627b      	str	r3, [r7, #36]	; 0x24
 800af92:	e7fe      	b.n	800af92 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	2b02      	cmp	r3, #2
 800af98:	d103      	bne.n	800afa2 <xQueueGenericSend+0x6a>
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d101      	bne.n	800afa6 <xQueueGenericSend+0x6e>
 800afa2:	2301      	movs	r3, #1
 800afa4:	e000      	b.n	800afa8 <xQueueGenericSend+0x70>
 800afa6:	2300      	movs	r3, #0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d109      	bne.n	800afc0 <xQueueGenericSend+0x88>
 800afac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb0:	f383 8811 	msr	BASEPRI, r3
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	623b      	str	r3, [r7, #32]
 800afbe:	e7fe      	b.n	800afbe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afc0:	f001 fa6e 	bl	800c4a0 <xTaskGetSchedulerState>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d102      	bne.n	800afd0 <xQueueGenericSend+0x98>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d101      	bne.n	800afd4 <xQueueGenericSend+0x9c>
 800afd0:	2301      	movs	r3, #1
 800afd2:	e000      	b.n	800afd6 <xQueueGenericSend+0x9e>
 800afd4:	2300      	movs	r3, #0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d109      	bne.n	800afee <xQueueGenericSend+0xb6>
 800afda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afde:	f383 8811 	msr	BASEPRI, r3
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	61fb      	str	r3, [r7, #28]
 800afec:	e7fe      	b.n	800afec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afee:	f7ff fce5 	bl	800a9bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800affa:	429a      	cmp	r2, r3
 800affc:	d302      	bcc.n	800b004 <xQueueGenericSend+0xcc>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b02      	cmp	r3, #2
 800b002:	d129      	bne.n	800b058 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b00a:	f000 faab 	bl	800b564 <prvCopyDataToQueue>
 800b00e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b014:	2b00      	cmp	r3, #0
 800b016:	d010      	beq.n	800b03a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01a:	3324      	adds	r3, #36	; 0x24
 800b01c:	4618      	mov	r0, r3
 800b01e:	f001 f889 	bl	800c134 <xTaskRemoveFromEventList>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d013      	beq.n	800b050 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b028:	4b3f      	ldr	r3, [pc, #252]	; (800b128 <xQueueGenericSend+0x1f0>)
 800b02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	e00a      	b.n	800b050 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d007      	beq.n	800b050 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b040:	4b39      	ldr	r3, [pc, #228]	; (800b128 <xQueueGenericSend+0x1f0>)
 800b042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b050:	f7ff fce2 	bl	800aa18 <vPortExitCritical>
				return pdPASS;
 800b054:	2301      	movs	r3, #1
 800b056:	e063      	b.n	800b120 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d103      	bne.n	800b066 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b05e:	f7ff fcdb 	bl	800aa18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b062:	2300      	movs	r3, #0
 800b064:	e05c      	b.n	800b120 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d106      	bne.n	800b07a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b06c:	f107 0314 	add.w	r3, r7, #20
 800b070:	4618      	mov	r0, r3
 800b072:	f001 f8c1 	bl	800c1f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b076:	2301      	movs	r3, #1
 800b078:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b07a:	f7ff fccd 	bl	800aa18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b07e:	f000 fe3d 	bl	800bcfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b082:	f7ff fc9b 	bl	800a9bc <vPortEnterCritical>
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b08c:	b25b      	sxtb	r3, r3
 800b08e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b092:	d103      	bne.n	800b09c <xQueueGenericSend+0x164>
 800b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0a2:	b25b      	sxtb	r3, r3
 800b0a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0a8:	d103      	bne.n	800b0b2 <xQueueGenericSend+0x17a>
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0b2:	f7ff fcb1 	bl	800aa18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0b6:	1d3a      	adds	r2, r7, #4
 800b0b8:	f107 0314 	add.w	r3, r7, #20
 800b0bc:	4611      	mov	r1, r2
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f001 f8b0 	bl	800c224 <xTaskCheckForTimeOut>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d124      	bne.n	800b114 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b0ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0cc:	f000 fb42 	bl	800b754 <prvIsQueueFull>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d018      	beq.n	800b108 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	3310      	adds	r3, #16
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	4611      	mov	r1, r2
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 ffda 	bl	800c098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b0e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0e6:	f000 facd 	bl	800b684 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b0ea:	f000 fe15 	bl	800bd18 <xTaskResumeAll>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f47f af7c 	bne.w	800afee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b0f6:	4b0c      	ldr	r3, [pc, #48]	; (800b128 <xQueueGenericSend+0x1f0>)
 800b0f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	e772      	b.n	800afee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b10a:	f000 fabb 	bl	800b684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b10e:	f000 fe03 	bl	800bd18 <xTaskResumeAll>
 800b112:	e76c      	b.n	800afee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b116:	f000 fab5 	bl	800b684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b11a:	f000 fdfd 	bl	800bd18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b11e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b120:	4618      	mov	r0, r3
 800b122:	3738      	adds	r7, #56	; 0x38
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	e000ed04 	.word	0xe000ed04

0800b12c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08e      	sub	sp, #56	; 0x38
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b140:	2b00      	cmp	r3, #0
 800b142:	d109      	bne.n	800b158 <xQueueGenericSendFromISR+0x2c>
 800b144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	627b      	str	r3, [r7, #36]	; 0x24
 800b156:	e7fe      	b.n	800b156 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d103      	bne.n	800b166 <xQueueGenericSendFromISR+0x3a>
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b162:	2b00      	cmp	r3, #0
 800b164:	d101      	bne.n	800b16a <xQueueGenericSendFromISR+0x3e>
 800b166:	2301      	movs	r3, #1
 800b168:	e000      	b.n	800b16c <xQueueGenericSendFromISR+0x40>
 800b16a:	2300      	movs	r3, #0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d109      	bne.n	800b184 <xQueueGenericSendFromISR+0x58>
 800b170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	623b      	str	r3, [r7, #32]
 800b182:	e7fe      	b.n	800b182 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	2b02      	cmp	r3, #2
 800b188:	d103      	bne.n	800b192 <xQueueGenericSendFromISR+0x66>
 800b18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d101      	bne.n	800b196 <xQueueGenericSendFromISR+0x6a>
 800b192:	2301      	movs	r3, #1
 800b194:	e000      	b.n	800b198 <xQueueGenericSendFromISR+0x6c>
 800b196:	2300      	movs	r3, #0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d109      	bne.n	800b1b0 <xQueueGenericSendFromISR+0x84>
 800b19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a0:	f383 8811 	msr	BASEPRI, r3
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	61fb      	str	r3, [r7, #28]
 800b1ae:	e7fe      	b.n	800b1ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1b0:	f7ff fce0 	bl	800ab74 <vPortValidateInterruptPriority>
	__asm volatile
 800b1b4:	f3ef 8211 	mrs	r2, BASEPRI
 800b1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1bc:	f383 8811 	msr	BASEPRI, r3
 800b1c0:	f3bf 8f6f 	isb	sy
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	61ba      	str	r2, [r7, #24]
 800b1ca:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b1cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d302      	bcc.n	800b1e2 <xQueueGenericSendFromISR+0xb6>
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d12c      	bne.n	800b23c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1ec:	683a      	ldr	r2, [r7, #0]
 800b1ee:	68b9      	ldr	r1, [r7, #8]
 800b1f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1f2:	f000 f9b7 	bl	800b564 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b1f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b1fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1fe:	d112      	bne.n	800b226 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b204:	2b00      	cmp	r3, #0
 800b206:	d016      	beq.n	800b236 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20a:	3324      	adds	r3, #36	; 0x24
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 ff91 	bl	800c134 <xTaskRemoveFromEventList>
 800b212:	4603      	mov	r3, r0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00e      	beq.n	800b236 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00b      	beq.n	800b236 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	e007      	b.n	800b236 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b226:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b22a:	3301      	adds	r3, #1
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	b25a      	sxtb	r2, r3
 800b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b236:	2301      	movs	r3, #1
 800b238:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b23a:	e001      	b.n	800b240 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b23c:	2300      	movs	r3, #0
 800b23e:	637b      	str	r3, [r7, #52]	; 0x34
 800b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b242:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3738      	adds	r7, #56	; 0x38
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b08e      	sub	sp, #56	; 0x38
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b264:	2b00      	cmp	r3, #0
 800b266:	d109      	bne.n	800b27c <xQueueGiveFromISR+0x28>
	__asm volatile
 800b268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26c:	f383 8811 	msr	BASEPRI, r3
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	623b      	str	r3, [r7, #32]
 800b27a:	e7fe      	b.n	800b27a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b280:	2b00      	cmp	r3, #0
 800b282:	d009      	beq.n	800b298 <xQueueGiveFromISR+0x44>
 800b284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b288:	f383 8811 	msr	BASEPRI, r3
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	61fb      	str	r3, [r7, #28]
 800b296:	e7fe      	b.n	800b296 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d103      	bne.n	800b2a8 <xQueueGiveFromISR+0x54>
 800b2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <xQueueGiveFromISR+0x58>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e000      	b.n	800b2ae <xQueueGiveFromISR+0x5a>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d109      	bne.n	800b2c6 <xQueueGiveFromISR+0x72>
 800b2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b6:	f383 8811 	msr	BASEPRI, r3
 800b2ba:	f3bf 8f6f 	isb	sy
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	61bb      	str	r3, [r7, #24]
 800b2c4:	e7fe      	b.n	800b2c4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2c6:	f7ff fc55 	bl	800ab74 <vPortValidateInterruptPriority>
	__asm volatile
 800b2ca:	f3ef 8211 	mrs	r2, BASEPRI
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	617a      	str	r2, [r7, #20]
 800b2e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b2e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d22b      	bcs.n	800b34e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	1c5a      	adds	r2, r3, #1
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b308:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b30c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b310:	d112      	bne.n	800b338 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	2b00      	cmp	r3, #0
 800b318:	d016      	beq.n	800b348 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31c:	3324      	adds	r3, #36	; 0x24
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 ff08 	bl	800c134 <xTaskRemoveFromEventList>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00e      	beq.n	800b348 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00b      	beq.n	800b348 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2201      	movs	r2, #1
 800b334:	601a      	str	r2, [r3, #0]
 800b336:	e007      	b.n	800b348 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b33c:	3301      	adds	r3, #1
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	b25a      	sxtb	r2, r3
 800b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b348:	2301      	movs	r3, #1
 800b34a:	637b      	str	r3, [r7, #52]	; 0x34
 800b34c:	e001      	b.n	800b352 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b34e:	2300      	movs	r3, #0
 800b350:	637b      	str	r3, [r7, #52]	; 0x34
 800b352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b354:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3738      	adds	r7, #56	; 0x38
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
	...

0800b368 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b08c      	sub	sp, #48	; 0x30
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b374:	2300      	movs	r3, #0
 800b376:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d109      	bne.n	800b396 <xQueueReceive+0x2e>
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	623b      	str	r3, [r7, #32]
 800b394:	e7fe      	b.n	800b394 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d103      	bne.n	800b3a4 <xQueueReceive+0x3c>
 800b39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <xQueueReceive+0x40>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e000      	b.n	800b3aa <xQueueReceive+0x42>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d109      	bne.n	800b3c2 <xQueueReceive+0x5a>
 800b3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b2:	f383 8811 	msr	BASEPRI, r3
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	61fb      	str	r3, [r7, #28]
 800b3c0:	e7fe      	b.n	800b3c0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b3c2:	f001 f86d 	bl	800c4a0 <xTaskGetSchedulerState>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d102      	bne.n	800b3d2 <xQueueReceive+0x6a>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d101      	bne.n	800b3d6 <xQueueReceive+0x6e>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e000      	b.n	800b3d8 <xQueueReceive+0x70>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d109      	bne.n	800b3f0 <xQueueReceive+0x88>
 800b3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e0:	f383 8811 	msr	BASEPRI, r3
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	61bb      	str	r3, [r7, #24]
 800b3ee:	e7fe      	b.n	800b3ee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3f0:	f7ff fae4 	bl	800a9bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d01f      	beq.n	800b440 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b400:	68b9      	ldr	r1, [r7, #8]
 800b402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b404:	f000 f918 	bl	800b638 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40a:	1e5a      	subs	r2, r3, #1
 800b40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00f      	beq.n	800b438 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41a:	3310      	adds	r3, #16
 800b41c:	4618      	mov	r0, r3
 800b41e:	f000 fe89 	bl	800c134 <xTaskRemoveFromEventList>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d007      	beq.n	800b438 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b428:	4b3c      	ldr	r3, [pc, #240]	; (800b51c <xQueueReceive+0x1b4>)
 800b42a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b42e:	601a      	str	r2, [r3, #0]
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b438:	f7ff faee 	bl	800aa18 <vPortExitCritical>
				return pdPASS;
 800b43c:	2301      	movs	r3, #1
 800b43e:	e069      	b.n	800b514 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d103      	bne.n	800b44e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b446:	f7ff fae7 	bl	800aa18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b44a:	2300      	movs	r3, #0
 800b44c:	e062      	b.n	800b514 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b450:	2b00      	cmp	r3, #0
 800b452:	d106      	bne.n	800b462 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b454:	f107 0310 	add.w	r3, r7, #16
 800b458:	4618      	mov	r0, r3
 800b45a:	f000 fecd 	bl	800c1f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b45e:	2301      	movs	r3, #1
 800b460:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b462:	f7ff fad9 	bl	800aa18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b466:	f000 fc49 	bl	800bcfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b46a:	f7ff faa7 	bl	800a9bc <vPortEnterCritical>
 800b46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b474:	b25b      	sxtb	r3, r3
 800b476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b47a:	d103      	bne.n	800b484 <xQueueReceive+0x11c>
 800b47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47e:	2200      	movs	r2, #0
 800b480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b48a:	b25b      	sxtb	r3, r3
 800b48c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b490:	d103      	bne.n	800b49a <xQueueReceive+0x132>
 800b492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b494:	2200      	movs	r2, #0
 800b496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b49a:	f7ff fabd 	bl	800aa18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b49e:	1d3a      	adds	r2, r7, #4
 800b4a0:	f107 0310 	add.w	r3, r7, #16
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 febc 	bl	800c224 <xTaskCheckForTimeOut>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d123      	bne.n	800b4fa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4b4:	f000 f938 	bl	800b728 <prvIsQueueEmpty>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d017      	beq.n	800b4ee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c0:	3324      	adds	r3, #36	; 0x24
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	4611      	mov	r1, r2
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f000 fde6 	bl	800c098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4ce:	f000 f8d9 	bl	800b684 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b4d2:	f000 fc21 	bl	800bd18 <xTaskResumeAll>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d189      	bne.n	800b3f0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b4dc:	4b0f      	ldr	r3, [pc, #60]	; (800b51c <xQueueReceive+0x1b4>)
 800b4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	e780      	b.n	800b3f0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b4ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4f0:	f000 f8c8 	bl	800b684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4f4:	f000 fc10 	bl	800bd18 <xTaskResumeAll>
 800b4f8:	e77a      	b.n	800b3f0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b4fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4fc:	f000 f8c2 	bl	800b684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b500:	f000 fc0a 	bl	800bd18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b506:	f000 f90f 	bl	800b728 <prvIsQueueEmpty>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f43f af6f 	beq.w	800b3f0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b512:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b514:	4618      	mov	r0, r3
 800b516:	3730      	adds	r7, #48	; 0x30
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	e000ed04 	.word	0xe000ed04

0800b520 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d109      	bne.n	800b546 <vQueueDelete+0x26>
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	60bb      	str	r3, [r7, #8]
 800b544:	e7fe      	b.n	800b544 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	f000 f944 	bl	800b7d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b552:	2b00      	cmp	r3, #0
 800b554:	d102      	bne.n	800b55c <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f7fe ff42 	bl	800a3e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b55c:	bf00      	nop
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b570:	2300      	movs	r3, #0
 800b572:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b578:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d10d      	bne.n	800b59e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d14d      	bne.n	800b626 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 ffa4 	bl	800c4dc <xTaskPriorityDisinherit>
 800b594:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	609a      	str	r2, [r3, #8]
 800b59c:	e043      	b.n	800b626 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d119      	bne.n	800b5d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6858      	ldr	r0, [r3, #4]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	68b9      	ldr	r1, [r7, #8]
 800b5b0:	f001 fd84 	bl	800d0bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	685a      	ldr	r2, [r3, #4]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5bc:	441a      	add	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	685a      	ldr	r2, [r3, #4]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d32b      	bcc.n	800b626 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	605a      	str	r2, [r3, #4]
 800b5d6:	e026      	b.n	800b626 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	68d8      	ldr	r0, [r3, #12]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	68b9      	ldr	r1, [r7, #8]
 800b5e4:	f001 fd6a 	bl	800d0bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	68da      	ldr	r2, [r3, #12]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f0:	425b      	negs	r3, r3
 800b5f2:	441a      	add	r2, r3
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	68da      	ldr	r2, [r3, #12]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	d207      	bcs.n	800b614 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	689a      	ldr	r2, [r3, #8]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60c:	425b      	negs	r3, r3
 800b60e:	441a      	add	r2, r3
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b02      	cmp	r3, #2
 800b618:	d105      	bne.n	800b626 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d002      	beq.n	800b626 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	3b01      	subs	r3, #1
 800b624:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	1c5a      	adds	r2, r3, #1
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b62e:	697b      	ldr	r3, [r7, #20]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b646:	2b00      	cmp	r3, #0
 800b648:	d018      	beq.n	800b67c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68da      	ldr	r2, [r3, #12]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b652:	441a      	add	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	68da      	ldr	r2, [r3, #12]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	429a      	cmp	r2, r3
 800b662:	d303      	bcc.n	800b66c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	68d9      	ldr	r1, [r3, #12]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b674:	461a      	mov	r2, r3
 800b676:	6838      	ldr	r0, [r7, #0]
 800b678:	f001 fd20 	bl	800d0bc <memcpy>
	}
}
 800b67c:	bf00      	nop
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b68c:	f7ff f996 	bl	800a9bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b696:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b698:	e011      	b.n	800b6be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d012      	beq.n	800b6c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	3324      	adds	r3, #36	; 0x24
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f000 fd44 	bl	800c134 <xTaskRemoveFromEventList>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b6b2:	f000 fe17 	bl	800c2e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b6b6:	7bfb      	ldrb	r3, [r7, #15]
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	dce9      	bgt.n	800b69a <prvUnlockQueue+0x16>
 800b6c6:	e000      	b.n	800b6ca <prvUnlockQueue+0x46>
					break;
 800b6c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	22ff      	movs	r2, #255	; 0xff
 800b6ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b6d2:	f7ff f9a1 	bl	800aa18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b6d6:	f7ff f971 	bl	800a9bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6e2:	e011      	b.n	800b708 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d012      	beq.n	800b712 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	3310      	adds	r3, #16
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fd1f 	bl	800c134 <xTaskRemoveFromEventList>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b6fc:	f000 fdf2 	bl	800c2e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b700:	7bbb      	ldrb	r3, [r7, #14]
 800b702:	3b01      	subs	r3, #1
 800b704:	b2db      	uxtb	r3, r3
 800b706:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	dce9      	bgt.n	800b6e4 <prvUnlockQueue+0x60>
 800b710:	e000      	b.n	800b714 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b712:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	22ff      	movs	r2, #255	; 0xff
 800b718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b71c:	f7ff f97c 	bl	800aa18 <vPortExitCritical>
}
 800b720:	bf00      	nop
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b730:	f7ff f944 	bl	800a9bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d102      	bne.n	800b742 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b73c:	2301      	movs	r3, #1
 800b73e:	60fb      	str	r3, [r7, #12]
 800b740:	e001      	b.n	800b746 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b742:	2300      	movs	r3, #0
 800b744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b746:	f7ff f967 	bl	800aa18 <vPortExitCritical>

	return xReturn;
 800b74a:	68fb      	ldr	r3, [r7, #12]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b75c:	f7ff f92e 	bl	800a9bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b768:	429a      	cmp	r2, r3
 800b76a:	d102      	bne.n	800b772 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b76c:	2301      	movs	r3, #1
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	e001      	b.n	800b776 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b772:	2300      	movs	r3, #0
 800b774:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b776:	f7ff f94f 	bl	800aa18 <vPortExitCritical>

	return xReturn;
 800b77a:	68fb      	ldr	r3, [r7, #12]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b78e:	2300      	movs	r3, #0
 800b790:	60fb      	str	r3, [r7, #12]
 800b792:	e014      	b.n	800b7be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b794:	4a0e      	ldr	r2, [pc, #56]	; (800b7d0 <vQueueAddToRegistry+0x4c>)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d10b      	bne.n	800b7b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b7a0:	490b      	ldr	r1, [pc, #44]	; (800b7d0 <vQueueAddToRegistry+0x4c>)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	683a      	ldr	r2, [r7, #0]
 800b7a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b7aa:	4a09      	ldr	r2, [pc, #36]	; (800b7d0 <vQueueAddToRegistry+0x4c>)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	4413      	add	r3, r2
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b7b6:	e005      	b.n	800b7c4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	60fb      	str	r3, [r7, #12]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b07      	cmp	r3, #7
 800b7c2:	d9e7      	bls.n	800b794 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b7c4:	bf00      	nop
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	20006e24 	.word	0x20006e24

0800b7d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7dc:	2300      	movs	r3, #0
 800b7de:	60fb      	str	r3, [r7, #12]
 800b7e0:	e016      	b.n	800b810 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b7e2:	4a10      	ldr	r2, [pc, #64]	; (800b824 <vQueueUnregisterQueue+0x50>)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	00db      	lsls	r3, r3, #3
 800b7e8:	4413      	add	r3, r2
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d10b      	bne.n	800b80a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b7f2:	4a0c      	ldr	r2, [pc, #48]	; (800b824 <vQueueUnregisterQueue+0x50>)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b7fc:	4a09      	ldr	r2, [pc, #36]	; (800b824 <vQueueUnregisterQueue+0x50>)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	00db      	lsls	r3, r3, #3
 800b802:	4413      	add	r3, r2
 800b804:	2200      	movs	r2, #0
 800b806:	605a      	str	r2, [r3, #4]
				break;
 800b808:	e005      	b.n	800b816 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	3301      	adds	r3, #1
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2b07      	cmp	r3, #7
 800b814:	d9e5      	bls.n	800b7e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b816:	bf00      	nop
 800b818:	3714      	adds	r7, #20
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	20006e24 	.word	0x20006e24

0800b828 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b838:	f7ff f8c0 	bl	800a9bc <vPortEnterCritical>
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b842:	b25b      	sxtb	r3, r3
 800b844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b848:	d103      	bne.n	800b852 <vQueueWaitForMessageRestricted+0x2a>
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b858:	b25b      	sxtb	r3, r3
 800b85a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b85e:	d103      	bne.n	800b868 <vQueueWaitForMessageRestricted+0x40>
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	2200      	movs	r2, #0
 800b864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b868:	f7ff f8d6 	bl	800aa18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b870:	2b00      	cmp	r3, #0
 800b872:	d106      	bne.n	800b882 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	3324      	adds	r3, #36	; 0x24
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	68b9      	ldr	r1, [r7, #8]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f000 fc2f 	bl	800c0e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b882:	6978      	ldr	r0, [r7, #20]
 800b884:	f7ff fefe 	bl	800b684 <prvUnlockQueue>
	}
 800b888:	bf00      	nop
 800b88a:	3718      	adds	r7, #24
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b890:	b580      	push	{r7, lr}
 800b892:	b08e      	sub	sp, #56	; 0x38
 800b894:	af04      	add	r7, sp, #16
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
 800b89c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d109      	bne.n	800b8b8 <xTaskCreateStatic+0x28>
 800b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	623b      	str	r3, [r7, #32]
 800b8b6:	e7fe      	b.n	800b8b6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d109      	bne.n	800b8d2 <xTaskCreateStatic+0x42>
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	61fb      	str	r3, [r7, #28]
 800b8d0:	e7fe      	b.n	800b8d0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8d2:	235c      	movs	r3, #92	; 0x5c
 800b8d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	2b5c      	cmp	r3, #92	; 0x5c
 800b8da:	d009      	beq.n	800b8f0 <xTaskCreateStatic+0x60>
 800b8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	61bb      	str	r3, [r7, #24]
 800b8ee:	e7fe      	b.n	800b8ee <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b8f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d01e      	beq.n	800b936 <xTaskCreateStatic+0xa6>
 800b8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d01b      	beq.n	800b936 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b900:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b906:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90a:	2202      	movs	r2, #2
 800b90c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b910:	2300      	movs	r3, #0
 800b912:	9303      	str	r3, [sp, #12]
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	9302      	str	r3, [sp, #8]
 800b918:	f107 0314 	add.w	r3, r7, #20
 800b91c:	9301      	str	r3, [sp, #4]
 800b91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	68b9      	ldr	r1, [r7, #8]
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f000 f850 	bl	800b9ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b92e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b930:	f000 f8dc 	bl	800baec <prvAddNewTaskToReadyList>
 800b934:	e001      	b.n	800b93a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b936:	2300      	movs	r3, #0
 800b938:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b93a:	697b      	ldr	r3, [r7, #20]
	}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3728      	adds	r7, #40	; 0x28
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08c      	sub	sp, #48	; 0x30
 800b948:	af04      	add	r7, sp, #16
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	603b      	str	r3, [r7, #0]
 800b950:	4613      	mov	r3, r2
 800b952:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b954:	88fb      	ldrh	r3, [r7, #6]
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fe fc7f 	bl	800a25c <pvPortMalloc>
 800b95e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00e      	beq.n	800b984 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b966:	205c      	movs	r0, #92	; 0x5c
 800b968:	f7fe fc78 	bl	800a25c <pvPortMalloc>
 800b96c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d003      	beq.n	800b97c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	631a      	str	r2, [r3, #48]	; 0x30
 800b97a:	e005      	b.n	800b988 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b97c:	6978      	ldr	r0, [r7, #20]
 800b97e:	f7fe fd2f 	bl	800a3e0 <vPortFree>
 800b982:	e001      	b.n	800b988 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b984:	2300      	movs	r3, #0
 800b986:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d017      	beq.n	800b9be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	2200      	movs	r2, #0
 800b992:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b996:	88fa      	ldrh	r2, [r7, #6]
 800b998:	2300      	movs	r3, #0
 800b99a:	9303      	str	r3, [sp, #12]
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	9302      	str	r3, [sp, #8]
 800b9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a2:	9301      	str	r3, [sp, #4]
 800b9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	68b9      	ldr	r1, [r7, #8]
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f000 f80e 	bl	800b9ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9b2:	69f8      	ldr	r0, [r7, #28]
 800b9b4:	f000 f89a 	bl	800baec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	61bb      	str	r3, [r7, #24]
 800b9bc:	e002      	b.n	800b9c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b9be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b9c4:	69bb      	ldr	r3, [r7, #24]
	}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3720      	adds	r7, #32
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b088      	sub	sp, #32
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	60f8      	str	r0, [r7, #12]
 800b9d6:	60b9      	str	r1, [r7, #8]
 800b9d8:	607a      	str	r2, [r7, #4]
 800b9da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	21a5      	movs	r1, #165	; 0xa5
 800b9e8:	f001 fb8c 	bl	800d104 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9f0:	6879      	ldr	r1, [r7, #4]
 800b9f2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b9f6:	440b      	add	r3, r1
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4413      	add	r3, r2
 800b9fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	f023 0307 	bic.w	r3, r3, #7
 800ba04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	f003 0307 	and.w	r3, r3, #7
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d009      	beq.n	800ba24 <prvInitialiseNewTask+0x56>
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	617b      	str	r3, [r7, #20]
 800ba22:	e7fe      	b.n	800ba22 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d01f      	beq.n	800ba6a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	61fb      	str	r3, [r7, #28]
 800ba2e:	e012      	b.n	800ba56 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	4413      	add	r3, r2
 800ba36:	7819      	ldrb	r1, [r3, #0]
 800ba38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	3334      	adds	r3, #52	; 0x34
 800ba40:	460a      	mov	r2, r1
 800ba42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	4413      	add	r3, r2
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d006      	beq.n	800ba5e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	3301      	adds	r3, #1
 800ba54:	61fb      	str	r3, [r7, #28]
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	2b0f      	cmp	r3, #15
 800ba5a:	d9e9      	bls.n	800ba30 <prvInitialiseNewTask+0x62>
 800ba5c:	e000      	b.n	800ba60 <prvInitialiseNewTask+0x92>
			{
				break;
 800ba5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba68:	e003      	b.n	800ba72 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba74:	2b37      	cmp	r3, #55	; 0x37
 800ba76:	d901      	bls.n	800ba7c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba78:	2337      	movs	r3, #55	; 0x37
 800ba7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	3304      	adds	r3, #4
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fe fdd8 	bl	800a648 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	3318      	adds	r3, #24
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7fe fdd3 	bl	800a648 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800baa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baa6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800baae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bab6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	2200      	movs	r2, #0
 800babc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	2200      	movs	r2, #0
 800bac2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bac6:	683a      	ldr	r2, [r7, #0]
 800bac8:	68f9      	ldr	r1, [r7, #12]
 800baca:	69b8      	ldr	r0, [r7, #24]
 800bacc:	f7fe fe50 	bl	800a770 <pxPortInitialiseStack>
 800bad0:	4602      	mov	r2, r0
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d002      	beq.n	800bae2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800badc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bae0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bae2:	bf00      	nop
 800bae4:	3720      	adds	r7, #32
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
	...

0800baec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800baf4:	f7fe ff62 	bl	800a9bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800baf8:	4b2d      	ldr	r3, [pc, #180]	; (800bbb0 <prvAddNewTaskToReadyList+0xc4>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	3301      	adds	r3, #1
 800bafe:	4a2c      	ldr	r2, [pc, #176]	; (800bbb0 <prvAddNewTaskToReadyList+0xc4>)
 800bb00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb02:	4b2c      	ldr	r3, [pc, #176]	; (800bbb4 <prvAddNewTaskToReadyList+0xc8>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d109      	bne.n	800bb1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb0a:	4a2a      	ldr	r2, [pc, #168]	; (800bbb4 <prvAddNewTaskToReadyList+0xc8>)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb10:	4b27      	ldr	r3, [pc, #156]	; (800bbb0 <prvAddNewTaskToReadyList+0xc4>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d110      	bne.n	800bb3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb18:	f000 fc08 	bl	800c32c <prvInitialiseTaskLists>
 800bb1c:	e00d      	b.n	800bb3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb1e:	4b26      	ldr	r3, [pc, #152]	; (800bbb8 <prvAddNewTaskToReadyList+0xcc>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d109      	bne.n	800bb3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb26:	4b23      	ldr	r3, [pc, #140]	; (800bbb4 <prvAddNewTaskToReadyList+0xc8>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d802      	bhi.n	800bb3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb34:	4a1f      	ldr	r2, [pc, #124]	; (800bbb4 <prvAddNewTaskToReadyList+0xc8>)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb3a:	4b20      	ldr	r3, [pc, #128]	; (800bbbc <prvAddNewTaskToReadyList+0xd0>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	4a1e      	ldr	r2, [pc, #120]	; (800bbbc <prvAddNewTaskToReadyList+0xd0>)
 800bb42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bb44:	4b1d      	ldr	r3, [pc, #116]	; (800bbbc <prvAddNewTaskToReadyList+0xd0>)
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb50:	4b1b      	ldr	r3, [pc, #108]	; (800bbc0 <prvAddNewTaskToReadyList+0xd4>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d903      	bls.n	800bb60 <prvAddNewTaskToReadyList+0x74>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5c:	4a18      	ldr	r2, [pc, #96]	; (800bbc0 <prvAddNewTaskToReadyList+0xd4>)
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb64:	4613      	mov	r3, r2
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	4413      	add	r3, r2
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4a15      	ldr	r2, [pc, #84]	; (800bbc4 <prvAddNewTaskToReadyList+0xd8>)
 800bb6e:	441a      	add	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	3304      	adds	r3, #4
 800bb74:	4619      	mov	r1, r3
 800bb76:	4610      	mov	r0, r2
 800bb78:	f7fe fd73 	bl	800a662 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb7c:	f7fe ff4c 	bl	800aa18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb80:	4b0d      	ldr	r3, [pc, #52]	; (800bbb8 <prvAddNewTaskToReadyList+0xcc>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00e      	beq.n	800bba6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb88:	4b0a      	ldr	r3, [pc, #40]	; (800bbb4 <prvAddNewTaskToReadyList+0xc8>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d207      	bcs.n	800bba6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb96:	4b0c      	ldr	r3, [pc, #48]	; (800bbc8 <prvAddNewTaskToReadyList+0xdc>)
 800bb98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb9c:	601a      	str	r2, [r3, #0]
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bba6:	bf00      	nop
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20005bbc 	.word	0x20005bbc
 800bbb4:	200056e8 	.word	0x200056e8
 800bbb8:	20005bc8 	.word	0x20005bc8
 800bbbc:	20005bd8 	.word	0x20005bd8
 800bbc0:	20005bc4 	.word	0x20005bc4
 800bbc4:	200056ec 	.word	0x200056ec
 800bbc8:	e000ed04 	.word	0xe000ed04

0800bbcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d016      	beq.n	800bc0c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bbde:	4b13      	ldr	r3, [pc, #76]	; (800bc2c <vTaskDelay+0x60>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d009      	beq.n	800bbfa <vTaskDelay+0x2e>
 800bbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	60bb      	str	r3, [r7, #8]
 800bbf8:	e7fe      	b.n	800bbf8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800bbfa:	f000 f87f 	bl	800bcfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbfe:	2100      	movs	r1, #0
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fcd7 	bl	800c5b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bc06:	f000 f887 	bl	800bd18 <xTaskResumeAll>
 800bc0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d107      	bne.n	800bc22 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800bc12:	4b07      	ldr	r3, [pc, #28]	; (800bc30 <vTaskDelay+0x64>)
 800bc14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc18:	601a      	str	r2, [r3, #0]
 800bc1a:	f3bf 8f4f 	dsb	sy
 800bc1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20005be4 	.word	0x20005be4
 800bc30:	e000ed04 	.word	0xe000ed04

0800bc34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08a      	sub	sp, #40	; 0x28
 800bc38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc42:	463a      	mov	r2, r7
 800bc44:	1d39      	adds	r1, r7, #4
 800bc46:	f107 0308 	add.w	r3, r7, #8
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fe fad2 	bl	800a1f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	9202      	str	r2, [sp, #8]
 800bc58:	9301      	str	r3, [sp, #4]
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	2300      	movs	r3, #0
 800bc60:	460a      	mov	r2, r1
 800bc62:	4920      	ldr	r1, [pc, #128]	; (800bce4 <vTaskStartScheduler+0xb0>)
 800bc64:	4820      	ldr	r0, [pc, #128]	; (800bce8 <vTaskStartScheduler+0xb4>)
 800bc66:	f7ff fe13 	bl	800b890 <xTaskCreateStatic>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	4b1f      	ldr	r3, [pc, #124]	; (800bcec <vTaskStartScheduler+0xb8>)
 800bc6e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc70:	4b1e      	ldr	r3, [pc, #120]	; (800bcec <vTaskStartScheduler+0xb8>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d002      	beq.n	800bc7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	617b      	str	r3, [r7, #20]
 800bc7c:	e001      	b.n	800bc82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d102      	bne.n	800bc8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc88:	f000 fce8 	bl	800c65c <xTimerCreateTimerTask>
 800bc8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d115      	bne.n	800bcc0 <vTaskStartScheduler+0x8c>
 800bc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc98:	f383 8811 	msr	BASEPRI, r3
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bca6:	4b12      	ldr	r3, [pc, #72]	; (800bcf0 <vTaskStartScheduler+0xbc>)
 800bca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bcae:	4b11      	ldr	r3, [pc, #68]	; (800bcf4 <vTaskStartScheduler+0xc0>)
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bcb4:	4b10      	ldr	r3, [pc, #64]	; (800bcf8 <vTaskStartScheduler+0xc4>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bcba:	f7fe fde1 	bl	800a880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bcbe:	e00d      	b.n	800bcdc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcc6:	d109      	bne.n	800bcdc <vTaskStartScheduler+0xa8>
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	60fb      	str	r3, [r7, #12]
 800bcda:	e7fe      	b.n	800bcda <vTaskStartScheduler+0xa6>
}
 800bcdc:	bf00      	nop
 800bcde:	3718      	adds	r7, #24
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	0800f188 	.word	0x0800f188
 800bce8:	0800c2fd 	.word	0x0800c2fd
 800bcec:	20005be0 	.word	0x20005be0
 800bcf0:	20005bdc 	.word	0x20005bdc
 800bcf4:	20005bc8 	.word	0x20005bc8
 800bcf8:	20005bc0 	.word	0x20005bc0

0800bcfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bd00:	4b04      	ldr	r3, [pc, #16]	; (800bd14 <vTaskSuspendAll+0x18>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	3301      	adds	r3, #1
 800bd06:	4a03      	ldr	r2, [pc, #12]	; (800bd14 <vTaskSuspendAll+0x18>)
 800bd08:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bd0a:	bf00      	nop
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	20005be4 	.word	0x20005be4

0800bd18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd22:	2300      	movs	r3, #0
 800bd24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd26:	4b41      	ldr	r3, [pc, #260]	; (800be2c <xTaskResumeAll+0x114>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d109      	bne.n	800bd42 <xTaskResumeAll+0x2a>
 800bd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	603b      	str	r3, [r7, #0]
 800bd40:	e7fe      	b.n	800bd40 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd42:	f7fe fe3b 	bl	800a9bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd46:	4b39      	ldr	r3, [pc, #228]	; (800be2c <xTaskResumeAll+0x114>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	4a37      	ldr	r2, [pc, #220]	; (800be2c <xTaskResumeAll+0x114>)
 800bd4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd50:	4b36      	ldr	r3, [pc, #216]	; (800be2c <xTaskResumeAll+0x114>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d162      	bne.n	800be1e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd58:	4b35      	ldr	r3, [pc, #212]	; (800be30 <xTaskResumeAll+0x118>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d05e      	beq.n	800be1e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd60:	e02f      	b.n	800bdc2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd62:	4b34      	ldr	r3, [pc, #208]	; (800be34 <xTaskResumeAll+0x11c>)
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3318      	adds	r3, #24
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fe fcd4 	bl	800a71c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	3304      	adds	r3, #4
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7fe fccf 	bl	800a71c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd82:	4b2d      	ldr	r3, [pc, #180]	; (800be38 <xTaskResumeAll+0x120>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d903      	bls.n	800bd92 <xTaskResumeAll+0x7a>
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8e:	4a2a      	ldr	r2, [pc, #168]	; (800be38 <xTaskResumeAll+0x120>)
 800bd90:	6013      	str	r3, [r2, #0]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd96:	4613      	mov	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	4a27      	ldr	r2, [pc, #156]	; (800be3c <xTaskResumeAll+0x124>)
 800bda0:	441a      	add	r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3304      	adds	r3, #4
 800bda6:	4619      	mov	r1, r3
 800bda8:	4610      	mov	r0, r2
 800bdaa:	f7fe fc5a 	bl	800a662 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb2:	4b23      	ldr	r3, [pc, #140]	; (800be40 <xTaskResumeAll+0x128>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d302      	bcc.n	800bdc2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bdbc:	4b21      	ldr	r3, [pc, #132]	; (800be44 <xTaskResumeAll+0x12c>)
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdc2:	4b1c      	ldr	r3, [pc, #112]	; (800be34 <xTaskResumeAll+0x11c>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d1cb      	bne.n	800bd62 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d001      	beq.n	800bdd4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bdd0:	f000 fb46 	bl	800c460 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bdd4:	4b1c      	ldr	r3, [pc, #112]	; (800be48 <xTaskResumeAll+0x130>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d010      	beq.n	800be02 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bde0:	f000 f846 	bl	800be70 <xTaskIncrementTick>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d002      	beq.n	800bdf0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bdea:	4b16      	ldr	r3, [pc, #88]	; (800be44 <xTaskResumeAll+0x12c>)
 800bdec:	2201      	movs	r2, #1
 800bdee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1f1      	bne.n	800bde0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800bdfc:	4b12      	ldr	r3, [pc, #72]	; (800be48 <xTaskResumeAll+0x130>)
 800bdfe:	2200      	movs	r2, #0
 800be00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be02:	4b10      	ldr	r3, [pc, #64]	; (800be44 <xTaskResumeAll+0x12c>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d009      	beq.n	800be1e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be0a:	2301      	movs	r3, #1
 800be0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be0e:	4b0f      	ldr	r3, [pc, #60]	; (800be4c <xTaskResumeAll+0x134>)
 800be10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be14:	601a      	str	r2, [r3, #0]
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be1e:	f7fe fdfb 	bl	800aa18 <vPortExitCritical>

	return xAlreadyYielded;
 800be22:	68bb      	ldr	r3, [r7, #8]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	20005be4 	.word	0x20005be4
 800be30:	20005bbc 	.word	0x20005bbc
 800be34:	20005b7c 	.word	0x20005b7c
 800be38:	20005bc4 	.word	0x20005bc4
 800be3c:	200056ec 	.word	0x200056ec
 800be40:	200056e8 	.word	0x200056e8
 800be44:	20005bd0 	.word	0x20005bd0
 800be48:	20005bcc 	.word	0x20005bcc
 800be4c:	e000ed04 	.word	0xe000ed04

0800be50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be56:	4b05      	ldr	r3, [pc, #20]	; (800be6c <xTaskGetTickCount+0x1c>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be5c:	687b      	ldr	r3, [r7, #4]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	20005bc0 	.word	0x20005bc0

0800be70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be76:	2300      	movs	r3, #0
 800be78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be7a:	4b4e      	ldr	r3, [pc, #312]	; (800bfb4 <xTaskIncrementTick+0x144>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f040 8088 	bne.w	800bf94 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be84:	4b4c      	ldr	r3, [pc, #304]	; (800bfb8 <xTaskIncrementTick+0x148>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	3301      	adds	r3, #1
 800be8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be8c:	4a4a      	ldr	r2, [pc, #296]	; (800bfb8 <xTaskIncrementTick+0x148>)
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d11f      	bne.n	800bed8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800be98:	4b48      	ldr	r3, [pc, #288]	; (800bfbc <xTaskIncrementTick+0x14c>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d009      	beq.n	800beb6 <xTaskIncrementTick+0x46>
 800bea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	603b      	str	r3, [r7, #0]
 800beb4:	e7fe      	b.n	800beb4 <xTaskIncrementTick+0x44>
 800beb6:	4b41      	ldr	r3, [pc, #260]	; (800bfbc <xTaskIncrementTick+0x14c>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	60fb      	str	r3, [r7, #12]
 800bebc:	4b40      	ldr	r3, [pc, #256]	; (800bfc0 <xTaskIncrementTick+0x150>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a3e      	ldr	r2, [pc, #248]	; (800bfbc <xTaskIncrementTick+0x14c>)
 800bec2:	6013      	str	r3, [r2, #0]
 800bec4:	4a3e      	ldr	r2, [pc, #248]	; (800bfc0 <xTaskIncrementTick+0x150>)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6013      	str	r3, [r2, #0]
 800beca:	4b3e      	ldr	r3, [pc, #248]	; (800bfc4 <xTaskIncrementTick+0x154>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	3301      	adds	r3, #1
 800bed0:	4a3c      	ldr	r2, [pc, #240]	; (800bfc4 <xTaskIncrementTick+0x154>)
 800bed2:	6013      	str	r3, [r2, #0]
 800bed4:	f000 fac4 	bl	800c460 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bed8:	4b3b      	ldr	r3, [pc, #236]	; (800bfc8 <xTaskIncrementTick+0x158>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	693a      	ldr	r2, [r7, #16]
 800bede:	429a      	cmp	r2, r3
 800bee0:	d349      	bcc.n	800bf76 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bee2:	4b36      	ldr	r3, [pc, #216]	; (800bfbc <xTaskIncrementTick+0x14c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d104      	bne.n	800bef6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beec:	4b36      	ldr	r3, [pc, #216]	; (800bfc8 <xTaskIncrementTick+0x158>)
 800beee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bef2:	601a      	str	r2, [r3, #0]
					break;
 800bef4:	e03f      	b.n	800bf76 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bef6:	4b31      	ldr	r3, [pc, #196]	; (800bfbc <xTaskIncrementTick+0x14c>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf06:	693a      	ldr	r2, [r7, #16]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d203      	bcs.n	800bf16 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf0e:	4a2e      	ldr	r2, [pc, #184]	; (800bfc8 <xTaskIncrementTick+0x158>)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf14:	e02f      	b.n	800bf76 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	3304      	adds	r3, #4
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7fe fbfe 	bl	800a71c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d004      	beq.n	800bf32 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	3318      	adds	r3, #24
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7fe fbf5 	bl	800a71c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf36:	4b25      	ldr	r3, [pc, #148]	; (800bfcc <xTaskIncrementTick+0x15c>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d903      	bls.n	800bf46 <xTaskIncrementTick+0xd6>
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf42:	4a22      	ldr	r2, [pc, #136]	; (800bfcc <xTaskIncrementTick+0x15c>)
 800bf44:	6013      	str	r3, [r2, #0]
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	4413      	add	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4a1f      	ldr	r2, [pc, #124]	; (800bfd0 <xTaskIncrementTick+0x160>)
 800bf54:	441a      	add	r2, r3
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	3304      	adds	r3, #4
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	f7fe fb80 	bl	800a662 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf66:	4b1b      	ldr	r3, [pc, #108]	; (800bfd4 <xTaskIncrementTick+0x164>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d3b8      	bcc.n	800bee2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800bf70:	2301      	movs	r3, #1
 800bf72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf74:	e7b5      	b.n	800bee2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf76:	4b17      	ldr	r3, [pc, #92]	; (800bfd4 <xTaskIncrementTick+0x164>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7c:	4914      	ldr	r1, [pc, #80]	; (800bfd0 <xTaskIncrementTick+0x160>)
 800bf7e:	4613      	mov	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4413      	add	r3, r2
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	440b      	add	r3, r1
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d907      	bls.n	800bf9e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	617b      	str	r3, [r7, #20]
 800bf92:	e004      	b.n	800bf9e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bf94:	4b10      	ldr	r3, [pc, #64]	; (800bfd8 <xTaskIncrementTick+0x168>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	4a0f      	ldr	r2, [pc, #60]	; (800bfd8 <xTaskIncrementTick+0x168>)
 800bf9c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bf9e:	4b0f      	ldr	r3, [pc, #60]	; (800bfdc <xTaskIncrementTick+0x16c>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bfaa:	697b      	ldr	r3, [r7, #20]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3718      	adds	r7, #24
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	20005be4 	.word	0x20005be4
 800bfb8:	20005bc0 	.word	0x20005bc0
 800bfbc:	20005b74 	.word	0x20005b74
 800bfc0:	20005b78 	.word	0x20005b78
 800bfc4:	20005bd4 	.word	0x20005bd4
 800bfc8:	20005bdc 	.word	0x20005bdc
 800bfcc:	20005bc4 	.word	0x20005bc4
 800bfd0:	200056ec 	.word	0x200056ec
 800bfd4:	200056e8 	.word	0x200056e8
 800bfd8:	20005bcc 	.word	0x20005bcc
 800bfdc:	20005bd0 	.word	0x20005bd0

0800bfe0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bfe6:	4b27      	ldr	r3, [pc, #156]	; (800c084 <vTaskSwitchContext+0xa4>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d003      	beq.n	800bff6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bfee:	4b26      	ldr	r3, [pc, #152]	; (800c088 <vTaskSwitchContext+0xa8>)
 800bff0:	2201      	movs	r2, #1
 800bff2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bff4:	e040      	b.n	800c078 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800bff6:	4b24      	ldr	r3, [pc, #144]	; (800c088 <vTaskSwitchContext+0xa8>)
 800bff8:	2200      	movs	r2, #0
 800bffa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bffc:	4b23      	ldr	r3, [pc, #140]	; (800c08c <vTaskSwitchContext+0xac>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	60fb      	str	r3, [r7, #12]
 800c002:	e00f      	b.n	800c024 <vTaskSwitchContext+0x44>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d109      	bne.n	800c01e <vTaskSwitchContext+0x3e>
 800c00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	607b      	str	r3, [r7, #4]
 800c01c:	e7fe      	b.n	800c01c <vTaskSwitchContext+0x3c>
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3b01      	subs	r3, #1
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	491a      	ldr	r1, [pc, #104]	; (800c090 <vTaskSwitchContext+0xb0>)
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	4613      	mov	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	4413      	add	r3, r2
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	440b      	add	r3, r1
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d0e5      	beq.n	800c004 <vTaskSwitchContext+0x24>
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	4613      	mov	r3, r2
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	4413      	add	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4a13      	ldr	r2, [pc, #76]	; (800c090 <vTaskSwitchContext+0xb0>)
 800c044:	4413      	add	r3, r2
 800c046:	60bb      	str	r3, [r7, #8]
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	685a      	ldr	r2, [r3, #4]
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	605a      	str	r2, [r3, #4]
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	685a      	ldr	r2, [r3, #4]
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	3308      	adds	r3, #8
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d104      	bne.n	800c068 <vTaskSwitchContext+0x88>
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	605a      	str	r2, [r3, #4]
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	4a09      	ldr	r2, [pc, #36]	; (800c094 <vTaskSwitchContext+0xb4>)
 800c070:	6013      	str	r3, [r2, #0]
 800c072:	4a06      	ldr	r2, [pc, #24]	; (800c08c <vTaskSwitchContext+0xac>)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6013      	str	r3, [r2, #0]
}
 800c078:	bf00      	nop
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr
 800c084:	20005be4 	.word	0x20005be4
 800c088:	20005bd0 	.word	0x20005bd0
 800c08c:	20005bc4 	.word	0x20005bc4
 800c090:	200056ec 	.word	0x200056ec
 800c094:	200056e8 	.word	0x200056e8

0800c098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d109      	bne.n	800c0bc <vTaskPlaceOnEventList+0x24>
 800c0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	60fb      	str	r3, [r7, #12]
 800c0ba:	e7fe      	b.n	800c0ba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0bc:	4b07      	ldr	r3, [pc, #28]	; (800c0dc <vTaskPlaceOnEventList+0x44>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	3318      	adds	r3, #24
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7fe faf0 	bl	800a6aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0ca:	2101      	movs	r1, #1
 800c0cc:	6838      	ldr	r0, [r7, #0]
 800c0ce:	f000 fa71 	bl	800c5b4 <prvAddCurrentTaskToDelayedList>
}
 800c0d2:	bf00      	nop
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	200056e8 	.word	0x200056e8

0800c0e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d109      	bne.n	800c106 <vTaskPlaceOnEventListRestricted+0x26>
 800c0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f6:	f383 8811 	msr	BASEPRI, r3
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	617b      	str	r3, [r7, #20]
 800c104:	e7fe      	b.n	800c104 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c106:	4b0a      	ldr	r3, [pc, #40]	; (800c130 <vTaskPlaceOnEventListRestricted+0x50>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	3318      	adds	r3, #24
 800c10c:	4619      	mov	r1, r3
 800c10e:	68f8      	ldr	r0, [r7, #12]
 800c110:	f7fe faa7 	bl	800a662 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d002      	beq.n	800c120 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800c11a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c11e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c120:	6879      	ldr	r1, [r7, #4]
 800c122:	68b8      	ldr	r0, [r7, #8]
 800c124:	f000 fa46 	bl	800c5b4 <prvAddCurrentTaskToDelayedList>
	}
 800c128:	bf00      	nop
 800c12a:	3718      	adds	r7, #24
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	200056e8 	.word	0x200056e8

0800c134 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d109      	bne.n	800c15e <xTaskRemoveFromEventList+0x2a>
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	60fb      	str	r3, [r7, #12]
 800c15c:	e7fe      	b.n	800c15c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	3318      	adds	r3, #24
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe fada 	bl	800a71c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c168:	4b1d      	ldr	r3, [pc, #116]	; (800c1e0 <xTaskRemoveFromEventList+0xac>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d11d      	bne.n	800c1ac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	3304      	adds	r3, #4
 800c174:	4618      	mov	r0, r3
 800c176:	f7fe fad1 	bl	800a71c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c17e:	4b19      	ldr	r3, [pc, #100]	; (800c1e4 <xTaskRemoveFromEventList+0xb0>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	429a      	cmp	r2, r3
 800c184:	d903      	bls.n	800c18e <xTaskRemoveFromEventList+0x5a>
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18a:	4a16      	ldr	r2, [pc, #88]	; (800c1e4 <xTaskRemoveFromEventList+0xb0>)
 800c18c:	6013      	str	r3, [r2, #0]
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c192:	4613      	mov	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4413      	add	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4a13      	ldr	r2, [pc, #76]	; (800c1e8 <xTaskRemoveFromEventList+0xb4>)
 800c19c:	441a      	add	r2, r3
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	3304      	adds	r3, #4
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	4610      	mov	r0, r2
 800c1a6:	f7fe fa5c 	bl	800a662 <vListInsertEnd>
 800c1aa:	e005      	b.n	800c1b8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	3318      	adds	r3, #24
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	480e      	ldr	r0, [pc, #56]	; (800c1ec <xTaskRemoveFromEventList+0xb8>)
 800c1b4:	f7fe fa55 	bl	800a662 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1bc:	4b0c      	ldr	r3, [pc, #48]	; (800c1f0 <xTaskRemoveFromEventList+0xbc>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d905      	bls.n	800c1d2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c1ca:	4b0a      	ldr	r3, [pc, #40]	; (800c1f4 <xTaskRemoveFromEventList+0xc0>)
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	601a      	str	r2, [r3, #0]
 800c1d0:	e001      	b.n	800c1d6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c1d6:	697b      	ldr	r3, [r7, #20]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3718      	adds	r7, #24
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	20005be4 	.word	0x20005be4
 800c1e4:	20005bc4 	.word	0x20005bc4
 800c1e8:	200056ec 	.word	0x200056ec
 800c1ec:	20005b7c 	.word	0x20005b7c
 800c1f0:	200056e8 	.word	0x200056e8
 800c1f4:	20005bd0 	.word	0x20005bd0

0800c1f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c200:	4b06      	ldr	r3, [pc, #24]	; (800c21c <vTaskInternalSetTimeOutState+0x24>)
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c208:	4b05      	ldr	r3, [pc, #20]	; (800c220 <vTaskInternalSetTimeOutState+0x28>)
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	605a      	str	r2, [r3, #4]
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	20005bd4 	.word	0x20005bd4
 800c220:	20005bc0 	.word	0x20005bc0

0800c224 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b088      	sub	sp, #32
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d109      	bne.n	800c248 <xTaskCheckForTimeOut+0x24>
 800c234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	613b      	str	r3, [r7, #16]
 800c246:	e7fe      	b.n	800c246 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d109      	bne.n	800c262 <xTaskCheckForTimeOut+0x3e>
 800c24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	60fb      	str	r3, [r7, #12]
 800c260:	e7fe      	b.n	800c260 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c262:	f7fe fbab 	bl	800a9bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c266:	4b1d      	ldr	r3, [pc, #116]	; (800c2dc <xTaskCheckForTimeOut+0xb8>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	69ba      	ldr	r2, [r7, #24]
 800c272:	1ad3      	subs	r3, r2, r3
 800c274:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c27e:	d102      	bne.n	800c286 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c280:	2300      	movs	r3, #0
 800c282:	61fb      	str	r3, [r7, #28]
 800c284:	e023      	b.n	800c2ce <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	4b15      	ldr	r3, [pc, #84]	; (800c2e0 <xTaskCheckForTimeOut+0xbc>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d007      	beq.n	800c2a2 <xTaskCheckForTimeOut+0x7e>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	69ba      	ldr	r2, [r7, #24]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d302      	bcc.n	800c2a2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c29c:	2301      	movs	r3, #1
 800c29e:	61fb      	str	r3, [r7, #28]
 800c2a0:	e015      	b.n	800c2ce <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	697a      	ldr	r2, [r7, #20]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d20b      	bcs.n	800c2c4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	1ad2      	subs	r2, r2, r3
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f7ff ff9d 	bl	800c1f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	61fb      	str	r3, [r7, #28]
 800c2c2:	e004      	b.n	800c2ce <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c2ce:	f7fe fba3 	bl	800aa18 <vPortExitCritical>

	return xReturn;
 800c2d2:	69fb      	ldr	r3, [r7, #28]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3720      	adds	r7, #32
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	20005bc0 	.word	0x20005bc0
 800c2e0:	20005bd4 	.word	0x20005bd4

0800c2e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c2e8:	4b03      	ldr	r3, [pc, #12]	; (800c2f8 <vTaskMissedYield+0x14>)
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	601a      	str	r2, [r3, #0]
}
 800c2ee:	bf00      	nop
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr
 800c2f8:	20005bd0 	.word	0x20005bd0

0800c2fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c304:	f000 f852 	bl	800c3ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c308:	4b06      	ldr	r3, [pc, #24]	; (800c324 <prvIdleTask+0x28>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d9f9      	bls.n	800c304 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c310:	4b05      	ldr	r3, [pc, #20]	; (800c328 <prvIdleTask+0x2c>)
 800c312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c316:	601a      	str	r2, [r3, #0]
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c320:	e7f0      	b.n	800c304 <prvIdleTask+0x8>
 800c322:	bf00      	nop
 800c324:	200056ec 	.word	0x200056ec
 800c328:	e000ed04 	.word	0xe000ed04

0800c32c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c332:	2300      	movs	r3, #0
 800c334:	607b      	str	r3, [r7, #4]
 800c336:	e00c      	b.n	800c352 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	4613      	mov	r3, r2
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	4a12      	ldr	r2, [pc, #72]	; (800c38c <prvInitialiseTaskLists+0x60>)
 800c344:	4413      	add	r3, r2
 800c346:	4618      	mov	r0, r3
 800c348:	f7fe f95e 	bl	800a608 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	3301      	adds	r3, #1
 800c350:	607b      	str	r3, [r7, #4]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b37      	cmp	r3, #55	; 0x37
 800c356:	d9ef      	bls.n	800c338 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c358:	480d      	ldr	r0, [pc, #52]	; (800c390 <prvInitialiseTaskLists+0x64>)
 800c35a:	f7fe f955 	bl	800a608 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c35e:	480d      	ldr	r0, [pc, #52]	; (800c394 <prvInitialiseTaskLists+0x68>)
 800c360:	f7fe f952 	bl	800a608 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c364:	480c      	ldr	r0, [pc, #48]	; (800c398 <prvInitialiseTaskLists+0x6c>)
 800c366:	f7fe f94f 	bl	800a608 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c36a:	480c      	ldr	r0, [pc, #48]	; (800c39c <prvInitialiseTaskLists+0x70>)
 800c36c:	f7fe f94c 	bl	800a608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c370:	480b      	ldr	r0, [pc, #44]	; (800c3a0 <prvInitialiseTaskLists+0x74>)
 800c372:	f7fe f949 	bl	800a608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c376:	4b0b      	ldr	r3, [pc, #44]	; (800c3a4 <prvInitialiseTaskLists+0x78>)
 800c378:	4a05      	ldr	r2, [pc, #20]	; (800c390 <prvInitialiseTaskLists+0x64>)
 800c37a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c37c:	4b0a      	ldr	r3, [pc, #40]	; (800c3a8 <prvInitialiseTaskLists+0x7c>)
 800c37e:	4a05      	ldr	r2, [pc, #20]	; (800c394 <prvInitialiseTaskLists+0x68>)
 800c380:	601a      	str	r2, [r3, #0]
}
 800c382:	bf00      	nop
 800c384:	3708      	adds	r7, #8
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	200056ec 	.word	0x200056ec
 800c390:	20005b4c 	.word	0x20005b4c
 800c394:	20005b60 	.word	0x20005b60
 800c398:	20005b7c 	.word	0x20005b7c
 800c39c:	20005b90 	.word	0x20005b90
 800c3a0:	20005ba8 	.word	0x20005ba8
 800c3a4:	20005b74 	.word	0x20005b74
 800c3a8:	20005b78 	.word	0x20005b78

0800c3ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3b2:	e019      	b.n	800c3e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c3b4:	f7fe fb02 	bl	800a9bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3b8:	4b0f      	ldr	r3, [pc, #60]	; (800c3f8 <prvCheckTasksWaitingTermination+0x4c>)
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7fe f9a9 	bl	800a71c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c3ca:	4b0c      	ldr	r3, [pc, #48]	; (800c3fc <prvCheckTasksWaitingTermination+0x50>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	4a0a      	ldr	r2, [pc, #40]	; (800c3fc <prvCheckTasksWaitingTermination+0x50>)
 800c3d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c3d4:	4b0a      	ldr	r3, [pc, #40]	; (800c400 <prvCheckTasksWaitingTermination+0x54>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	4a09      	ldr	r2, [pc, #36]	; (800c400 <prvCheckTasksWaitingTermination+0x54>)
 800c3dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c3de:	f7fe fb1b 	bl	800aa18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f80e 	bl	800c404 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3e8:	4b05      	ldr	r3, [pc, #20]	; (800c400 <prvCheckTasksWaitingTermination+0x54>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1e1      	bne.n	800c3b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c3f0:	bf00      	nop
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	20005b90 	.word	0x20005b90
 800c3fc:	20005bbc 	.word	0x20005bbc
 800c400:	20005ba4 	.word	0x20005ba4

0800c404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c412:	2b00      	cmp	r3, #0
 800c414:	d108      	bne.n	800c428 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fd ffe0 	bl	800a3e0 <vPortFree>
				vPortFree( pxTCB );
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f7fd ffdd 	bl	800a3e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c426:	e017      	b.n	800c458 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d103      	bne.n	800c43a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7fd ffd4 	bl	800a3e0 <vPortFree>
	}
 800c438:	e00e      	b.n	800c458 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c440:	2b02      	cmp	r3, #2
 800c442:	d009      	beq.n	800c458 <prvDeleteTCB+0x54>
 800c444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	60fb      	str	r3, [r7, #12]
 800c456:	e7fe      	b.n	800c456 <prvDeleteTCB+0x52>
	}
 800c458:	bf00      	nop
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c466:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <prvResetNextTaskUnblockTime+0x38>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d104      	bne.n	800c47a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c470:	4b0a      	ldr	r3, [pc, #40]	; (800c49c <prvResetNextTaskUnblockTime+0x3c>)
 800c472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c476:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c478:	e008      	b.n	800c48c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c47a:	4b07      	ldr	r3, [pc, #28]	; (800c498 <prvResetNextTaskUnblockTime+0x38>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	68db      	ldr	r3, [r3, #12]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	4a04      	ldr	r2, [pc, #16]	; (800c49c <prvResetNextTaskUnblockTime+0x3c>)
 800c48a:	6013      	str	r3, [r2, #0]
}
 800c48c:	bf00      	nop
 800c48e:	370c      	adds	r7, #12
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr
 800c498:	20005b74 	.word	0x20005b74
 800c49c:	20005bdc 	.word	0x20005bdc

0800c4a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c4a6:	4b0b      	ldr	r3, [pc, #44]	; (800c4d4 <xTaskGetSchedulerState+0x34>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d102      	bne.n	800c4b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	607b      	str	r3, [r7, #4]
 800c4b2:	e008      	b.n	800c4c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4b4:	4b08      	ldr	r3, [pc, #32]	; (800c4d8 <xTaskGetSchedulerState+0x38>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d102      	bne.n	800c4c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4bc:	2302      	movs	r3, #2
 800c4be:	607b      	str	r3, [r7, #4]
 800c4c0:	e001      	b.n	800c4c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c4c6:	687b      	ldr	r3, [r7, #4]
	}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	20005bc8 	.word	0x20005bc8
 800c4d8:	20005be4 	.word	0x20005be4

0800c4dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d054      	beq.n	800c59c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c4f2:	4b2d      	ldr	r3, [pc, #180]	; (800c5a8 <xTaskPriorityDisinherit+0xcc>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	693a      	ldr	r2, [r7, #16]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d009      	beq.n	800c510 <xTaskPriorityDisinherit+0x34>
 800c4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	60fb      	str	r3, [r7, #12]
 800c50e:	e7fe      	b.n	800c50e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c514:	2b00      	cmp	r3, #0
 800c516:	d109      	bne.n	800c52c <xTaskPriorityDisinherit+0x50>
 800c518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	60bb      	str	r3, [r7, #8]
 800c52a:	e7fe      	b.n	800c52a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c530:	1e5a      	subs	r2, r3, #1
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c53e:	429a      	cmp	r2, r3
 800c540:	d02c      	beq.n	800c59c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c546:	2b00      	cmp	r3, #0
 800c548:	d128      	bne.n	800c59c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	3304      	adds	r3, #4
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fe f8e4 	bl	800a71c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c560:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c56c:	4b0f      	ldr	r3, [pc, #60]	; (800c5ac <xTaskPriorityDisinherit+0xd0>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	429a      	cmp	r2, r3
 800c572:	d903      	bls.n	800c57c <xTaskPriorityDisinherit+0xa0>
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c578:	4a0c      	ldr	r2, [pc, #48]	; (800c5ac <xTaskPriorityDisinherit+0xd0>)
 800c57a:	6013      	str	r3, [r2, #0]
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c580:	4613      	mov	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4413      	add	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4a09      	ldr	r2, [pc, #36]	; (800c5b0 <xTaskPriorityDisinherit+0xd4>)
 800c58a:	441a      	add	r2, r3
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	3304      	adds	r3, #4
 800c590:	4619      	mov	r1, r3
 800c592:	4610      	mov	r0, r2
 800c594:	f7fe f865 	bl	800a662 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c598:	2301      	movs	r3, #1
 800c59a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c59c:	697b      	ldr	r3, [r7, #20]
	}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	200056e8 	.word	0x200056e8
 800c5ac:	20005bc4 	.word	0x20005bc4
 800c5b0:	200056ec 	.word	0x200056ec

0800c5b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c5be:	4b21      	ldr	r3, [pc, #132]	; (800c644 <prvAddCurrentTaskToDelayedList+0x90>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5c4:	4b20      	ldr	r3, [pc, #128]	; (800c648 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fe f8a6 	bl	800a71c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5d6:	d10a      	bne.n	800c5ee <prvAddCurrentTaskToDelayedList+0x3a>
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d007      	beq.n	800c5ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5de:	4b1a      	ldr	r3, [pc, #104]	; (800c648 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	4819      	ldr	r0, [pc, #100]	; (800c64c <prvAddCurrentTaskToDelayedList+0x98>)
 800c5e8:	f7fe f83b 	bl	800a662 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c5ec:	e026      	b.n	800c63c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5f6:	4b14      	ldr	r3, [pc, #80]	; (800c648 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	429a      	cmp	r2, r3
 800c604:	d209      	bcs.n	800c61a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c606:	4b12      	ldr	r3, [pc, #72]	; (800c650 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	4b0f      	ldr	r3, [pc, #60]	; (800c648 <prvAddCurrentTaskToDelayedList+0x94>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	3304      	adds	r3, #4
 800c610:	4619      	mov	r1, r3
 800c612:	4610      	mov	r0, r2
 800c614:	f7fe f849 	bl	800a6aa <vListInsert>
}
 800c618:	e010      	b.n	800c63c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c61a:	4b0e      	ldr	r3, [pc, #56]	; (800c654 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	4b0a      	ldr	r3, [pc, #40]	; (800c648 <prvAddCurrentTaskToDelayedList+0x94>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3304      	adds	r3, #4
 800c624:	4619      	mov	r1, r3
 800c626:	4610      	mov	r0, r2
 800c628:	f7fe f83f 	bl	800a6aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c62c:	4b0a      	ldr	r3, [pc, #40]	; (800c658 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	429a      	cmp	r2, r3
 800c634:	d202      	bcs.n	800c63c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c636:	4a08      	ldr	r2, [pc, #32]	; (800c658 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	6013      	str	r3, [r2, #0]
}
 800c63c:	bf00      	nop
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	20005bc0 	.word	0x20005bc0
 800c648:	200056e8 	.word	0x200056e8
 800c64c:	20005ba8 	.word	0x20005ba8
 800c650:	20005b78 	.word	0x20005b78
 800c654:	20005b74 	.word	0x20005b74
 800c658:	20005bdc 	.word	0x20005bdc

0800c65c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b08a      	sub	sp, #40	; 0x28
 800c660:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c662:	2300      	movs	r3, #0
 800c664:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c666:	f000 faff 	bl	800cc68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c66a:	4b1c      	ldr	r3, [pc, #112]	; (800c6dc <xTimerCreateTimerTask+0x80>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d021      	beq.n	800c6b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c672:	2300      	movs	r3, #0
 800c674:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c676:	2300      	movs	r3, #0
 800c678:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c67a:	1d3a      	adds	r2, r7, #4
 800c67c:	f107 0108 	add.w	r1, r7, #8
 800c680:	f107 030c 	add.w	r3, r7, #12
 800c684:	4618      	mov	r0, r3
 800c686:	f7fd fdcf 	bl	800a228 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c68a:	6879      	ldr	r1, [r7, #4]
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	9202      	str	r2, [sp, #8]
 800c692:	9301      	str	r3, [sp, #4]
 800c694:	2302      	movs	r3, #2
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	2300      	movs	r3, #0
 800c69a:	460a      	mov	r2, r1
 800c69c:	4910      	ldr	r1, [pc, #64]	; (800c6e0 <xTimerCreateTimerTask+0x84>)
 800c69e:	4811      	ldr	r0, [pc, #68]	; (800c6e4 <xTimerCreateTimerTask+0x88>)
 800c6a0:	f7ff f8f6 	bl	800b890 <xTaskCreateStatic>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	4b10      	ldr	r3, [pc, #64]	; (800c6e8 <xTimerCreateTimerTask+0x8c>)
 800c6a8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c6aa:	4b0f      	ldr	r3, [pc, #60]	; (800c6e8 <xTimerCreateTimerTask+0x8c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d001      	beq.n	800c6b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d109      	bne.n	800c6d0 <xTimerCreateTimerTask+0x74>
 800c6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c0:	f383 8811 	msr	BASEPRI, r3
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	613b      	str	r3, [r7, #16]
 800c6ce:	e7fe      	b.n	800c6ce <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c6d0:	697b      	ldr	r3, [r7, #20]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3718      	adds	r7, #24
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	20005c18 	.word	0x20005c18
 800c6e0:	0800f190 	.word	0x0800f190
 800c6e4:	0800c81d 	.word	0x0800c81d
 800c6e8:	20005c1c 	.word	0x20005c1c

0800c6ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08a      	sub	sp, #40	; 0x28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
 800c6f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d109      	bne.n	800c718 <xTimerGenericCommand+0x2c>
 800c704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c708:	f383 8811 	msr	BASEPRI, r3
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	623b      	str	r3, [r7, #32]
 800c716:	e7fe      	b.n	800c716 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c718:	4b19      	ldr	r3, [pc, #100]	; (800c780 <xTimerGenericCommand+0x94>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d02a      	beq.n	800c776 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2b05      	cmp	r3, #5
 800c730:	dc18      	bgt.n	800c764 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c732:	f7ff feb5 	bl	800c4a0 <xTaskGetSchedulerState>
 800c736:	4603      	mov	r3, r0
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d109      	bne.n	800c750 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c73c:	4b10      	ldr	r3, [pc, #64]	; (800c780 <xTimerGenericCommand+0x94>)
 800c73e:	6818      	ldr	r0, [r3, #0]
 800c740:	f107 0110 	add.w	r1, r7, #16
 800c744:	2300      	movs	r3, #0
 800c746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c748:	f7fe fbf6 	bl	800af38 <xQueueGenericSend>
 800c74c:	6278      	str	r0, [r7, #36]	; 0x24
 800c74e:	e012      	b.n	800c776 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c750:	4b0b      	ldr	r3, [pc, #44]	; (800c780 <xTimerGenericCommand+0x94>)
 800c752:	6818      	ldr	r0, [r3, #0]
 800c754:	f107 0110 	add.w	r1, r7, #16
 800c758:	2300      	movs	r3, #0
 800c75a:	2200      	movs	r2, #0
 800c75c:	f7fe fbec 	bl	800af38 <xQueueGenericSend>
 800c760:	6278      	str	r0, [r7, #36]	; 0x24
 800c762:	e008      	b.n	800c776 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c764:	4b06      	ldr	r3, [pc, #24]	; (800c780 <xTimerGenericCommand+0x94>)
 800c766:	6818      	ldr	r0, [r3, #0]
 800c768:	f107 0110 	add.w	r1, r7, #16
 800c76c:	2300      	movs	r3, #0
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	f7fe fcdc 	bl	800b12c <xQueueGenericSendFromISR>
 800c774:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3728      	adds	r7, #40	; 0x28
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	20005c18 	.word	0x20005c18

0800c784 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af02      	add	r7, sp, #8
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c78e:	4b22      	ldr	r3, [pc, #136]	; (800c818 <prvProcessExpiredTimer+0x94>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	3304      	adds	r3, #4
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7fd ffbd 	bl	800a71c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7a8:	f003 0304 	and.w	r3, r3, #4
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d021      	beq.n	800c7f4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	699a      	ldr	r2, [r3, #24]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	18d1      	adds	r1, r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	683a      	ldr	r2, [r7, #0]
 800c7bc:	6978      	ldr	r0, [r7, #20]
 800c7be:	f000 f8d1 	bl	800c964 <prvInsertTimerInActiveList>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d01e      	beq.n	800c806 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	6978      	ldr	r0, [r7, #20]
 800c7d4:	f7ff ff8a 	bl	800c6ec <xTimerGenericCommand>
 800c7d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d112      	bne.n	800c806 <prvProcessExpiredTimer+0x82>
 800c7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e4:	f383 8811 	msr	BASEPRI, r3
 800c7e8:	f3bf 8f6f 	isb	sy
 800c7ec:	f3bf 8f4f 	dsb	sy
 800c7f0:	60fb      	str	r3, [r7, #12]
 800c7f2:	e7fe      	b.n	800c7f2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7fa:	f023 0301 	bic.w	r3, r3, #1
 800c7fe:	b2da      	uxtb	r2, r3
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	6a1b      	ldr	r3, [r3, #32]
 800c80a:	6978      	ldr	r0, [r7, #20]
 800c80c:	4798      	blx	r3
}
 800c80e:	bf00      	nop
 800c810:	3718      	adds	r7, #24
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	20005c10 	.word	0x20005c10

0800c81c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c824:	f107 0308 	add.w	r3, r7, #8
 800c828:	4618      	mov	r0, r3
 800c82a:	f000 f857 	bl	800c8dc <prvGetNextExpireTime>
 800c82e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	4619      	mov	r1, r3
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f000 f803 	bl	800c840 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c83a:	f000 f8d5 	bl	800c9e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c83e:	e7f1      	b.n	800c824 <prvTimerTask+0x8>

0800c840 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c84a:	f7ff fa57 	bl	800bcfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c84e:	f107 0308 	add.w	r3, r7, #8
 800c852:	4618      	mov	r0, r3
 800c854:	f000 f866 	bl	800c924 <prvSampleTimeNow>
 800c858:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d130      	bne.n	800c8c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d10a      	bne.n	800c87c <prvProcessTimerOrBlockTask+0x3c>
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d806      	bhi.n	800c87c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c86e:	f7ff fa53 	bl	800bd18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c872:	68f9      	ldr	r1, [r7, #12]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff ff85 	bl	800c784 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c87a:	e024      	b.n	800c8c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d008      	beq.n	800c894 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c882:	4b13      	ldr	r3, [pc, #76]	; (800c8d0 <prvProcessTimerOrBlockTask+0x90>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d101      	bne.n	800c890 <prvProcessTimerOrBlockTask+0x50>
 800c88c:	2301      	movs	r3, #1
 800c88e:	e000      	b.n	800c892 <prvProcessTimerOrBlockTask+0x52>
 800c890:	2300      	movs	r3, #0
 800c892:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c894:	4b0f      	ldr	r3, [pc, #60]	; (800c8d4 <prvProcessTimerOrBlockTask+0x94>)
 800c896:	6818      	ldr	r0, [r3, #0]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	1ad3      	subs	r3, r2, r3
 800c89e:	683a      	ldr	r2, [r7, #0]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	f7fe ffc1 	bl	800b828 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c8a6:	f7ff fa37 	bl	800bd18 <xTaskResumeAll>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10a      	bne.n	800c8c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c8b0:	4b09      	ldr	r3, [pc, #36]	; (800c8d8 <prvProcessTimerOrBlockTask+0x98>)
 800c8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8b6:	601a      	str	r2, [r3, #0]
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	f3bf 8f6f 	isb	sy
}
 800c8c0:	e001      	b.n	800c8c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c8c2:	f7ff fa29 	bl	800bd18 <xTaskResumeAll>
}
 800c8c6:	bf00      	nop
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	20005c14 	.word	0x20005c14
 800c8d4:	20005c18 	.word	0x20005c18
 800c8d8:	e000ed04 	.word	0xe000ed04

0800c8dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c8e4:	4b0e      	ldr	r3, [pc, #56]	; (800c920 <prvGetNextExpireTime+0x44>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d101      	bne.n	800c8f2 <prvGetNextExpireTime+0x16>
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	e000      	b.n	800c8f4 <prvGetNextExpireTime+0x18>
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d105      	bne.n	800c90c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c900:	4b07      	ldr	r3, [pc, #28]	; (800c920 <prvGetNextExpireTime+0x44>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	60fb      	str	r3, [r7, #12]
 800c90a:	e001      	b.n	800c910 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c90c:	2300      	movs	r3, #0
 800c90e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c910:	68fb      	ldr	r3, [r7, #12]
}
 800c912:	4618      	mov	r0, r3
 800c914:	3714      	adds	r7, #20
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	20005c10 	.word	0x20005c10

0800c924 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c92c:	f7ff fa90 	bl	800be50 <xTaskGetTickCount>
 800c930:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c932:	4b0b      	ldr	r3, [pc, #44]	; (800c960 <prvSampleTimeNow+0x3c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d205      	bcs.n	800c948 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c93c:	f000 f930 	bl	800cba0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2201      	movs	r2, #1
 800c944:	601a      	str	r2, [r3, #0]
 800c946:	e002      	b.n	800c94e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c94e:	4a04      	ldr	r2, [pc, #16]	; (800c960 <prvSampleTimeNow+0x3c>)
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c954:	68fb      	ldr	r3, [r7, #12]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	20005c20 	.word	0x20005c20

0800c964 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b086      	sub	sp, #24
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
 800c970:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c972:	2300      	movs	r3, #0
 800c974:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	429a      	cmp	r2, r3
 800c988:	d812      	bhi.n	800c9b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	1ad2      	subs	r2, r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	699b      	ldr	r3, [r3, #24]
 800c994:	429a      	cmp	r2, r3
 800c996:	d302      	bcc.n	800c99e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c998:	2301      	movs	r3, #1
 800c99a:	617b      	str	r3, [r7, #20]
 800c99c:	e01b      	b.n	800c9d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c99e:	4b10      	ldr	r3, [pc, #64]	; (800c9e0 <prvInsertTimerInActiveList+0x7c>)
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	3304      	adds	r3, #4
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	4610      	mov	r0, r2
 800c9aa:	f7fd fe7e 	bl	800a6aa <vListInsert>
 800c9ae:	e012      	b.n	800c9d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d206      	bcs.n	800c9c6 <prvInsertTimerInActiveList+0x62>
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d302      	bcc.n	800c9c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	617b      	str	r3, [r7, #20]
 800c9c4:	e007      	b.n	800c9d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9c6:	4b07      	ldr	r3, [pc, #28]	; (800c9e4 <prvInsertTimerInActiveList+0x80>)
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	f7fd fe6a 	bl	800a6aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c9d6:	697b      	ldr	r3, [r7, #20]
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3718      	adds	r7, #24
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	20005c14 	.word	0x20005c14
 800c9e4:	20005c10 	.word	0x20005c10

0800c9e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08e      	sub	sp, #56	; 0x38
 800c9ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9ee:	e0c6      	b.n	800cb7e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	da17      	bge.n	800ca26 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c9f6:	1d3b      	adds	r3, r7, #4
 800c9f8:	3304      	adds	r3, #4
 800c9fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d109      	bne.n	800ca16 <prvProcessReceivedCommands+0x2e>
 800ca02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca06:	f383 8811 	msr	BASEPRI, r3
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	61fb      	str	r3, [r7, #28]
 800ca14:	e7fe      	b.n	800ca14 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca1c:	6850      	ldr	r0, [r2, #4]
 800ca1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca20:	6892      	ldr	r2, [r2, #8]
 800ca22:	4611      	mov	r1, r2
 800ca24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	f2c0 80a7 	blt.w	800cb7c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca34:	695b      	ldr	r3, [r3, #20]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d004      	beq.n	800ca44 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fd fe6c 	bl	800a71c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca44:	463b      	mov	r3, r7
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7ff ff6c 	bl	800c924 <prvSampleTimeNow>
 800ca4c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b09      	cmp	r3, #9
 800ca52:	f200 8094 	bhi.w	800cb7e <prvProcessReceivedCommands+0x196>
 800ca56:	a201      	add	r2, pc, #4	; (adr r2, 800ca5c <prvProcessReceivedCommands+0x74>)
 800ca58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca5c:	0800ca85 	.word	0x0800ca85
 800ca60:	0800ca85 	.word	0x0800ca85
 800ca64:	0800ca85 	.word	0x0800ca85
 800ca68:	0800caf7 	.word	0x0800caf7
 800ca6c:	0800cb0b 	.word	0x0800cb0b
 800ca70:	0800cb53 	.word	0x0800cb53
 800ca74:	0800ca85 	.word	0x0800ca85
 800ca78:	0800ca85 	.word	0x0800ca85
 800ca7c:	0800caf7 	.word	0x0800caf7
 800ca80:	0800cb0b 	.word	0x0800cb0b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca8a:	f043 0301 	orr.w	r3, r3, #1
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9a:	699b      	ldr	r3, [r3, #24]
 800ca9c:	18d1      	adds	r1, r2, r3
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caa4:	f7ff ff5e 	bl	800c964 <prvInsertTimerInActiveList>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d067      	beq.n	800cb7e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800caae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab0:	6a1b      	ldr	r3, [r3, #32]
 800cab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cab4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cabc:	f003 0304 	and.w	r3, r3, #4
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d05c      	beq.n	800cb7e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cac4:	68ba      	ldr	r2, [r7, #8]
 800cac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac8:	699b      	ldr	r3, [r3, #24]
 800caca:	441a      	add	r2, r3
 800cacc:	2300      	movs	r3, #0
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	2300      	movs	r3, #0
 800cad2:	2100      	movs	r1, #0
 800cad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cad6:	f7ff fe09 	bl	800c6ec <xTimerGenericCommand>
 800cada:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cadc:	6a3b      	ldr	r3, [r7, #32]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d14d      	bne.n	800cb7e <prvProcessReceivedCommands+0x196>
 800cae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	61bb      	str	r3, [r7, #24]
 800caf4:	e7fe      	b.n	800caf4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800caf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cafc:	f023 0301 	bic.w	r3, r3, #1
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cb08:	e039      	b.n	800cb7e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb10:	f043 0301 	orr.w	r3, r3, #1
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb24:	699b      	ldr	r3, [r3, #24]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d109      	bne.n	800cb3e <prvProcessReceivedCommands+0x156>
 800cb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2e:	f383 8811 	msr	BASEPRI, r3
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	f3bf 8f4f 	dsb	sy
 800cb3a:	617b      	str	r3, [r7, #20]
 800cb3c:	e7fe      	b.n	800cb3c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb40:	699a      	ldr	r2, [r3, #24]
 800cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb44:	18d1      	adds	r1, r2, r3
 800cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb4c:	f7ff ff0a 	bl	800c964 <prvInsertTimerInActiveList>
					break;
 800cb50:	e015      	b.n	800cb7e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb58:	f003 0302 	and.w	r3, r3, #2
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d103      	bne.n	800cb68 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800cb60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb62:	f7fd fc3d 	bl	800a3e0 <vPortFree>
 800cb66:	e00a      	b.n	800cb7e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb6e:	f023 0301 	bic.w	r3, r3, #1
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cb7a:	e000      	b.n	800cb7e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cb7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb7e:	4b07      	ldr	r3, [pc, #28]	; (800cb9c <prvProcessReceivedCommands+0x1b4>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	1d39      	adds	r1, r7, #4
 800cb84:	2200      	movs	r2, #0
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7fe fbee 	bl	800b368 <xQueueReceive>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	f47f af2e 	bne.w	800c9f0 <prvProcessReceivedCommands+0x8>
	}
}
 800cb94:	bf00      	nop
 800cb96:	3730      	adds	r7, #48	; 0x30
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	20005c18 	.word	0x20005c18

0800cba0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b088      	sub	sp, #32
 800cba4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cba6:	e047      	b.n	800cc38 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cba8:	4b2d      	ldr	r3, [pc, #180]	; (800cc60 <prvSwitchTimerLists+0xc0>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbb2:	4b2b      	ldr	r3, [pc, #172]	; (800cc60 <prvSwitchTimerLists+0xc0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fd fdab 	bl	800a71c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6a1b      	ldr	r3, [r3, #32]
 800cbca:	68f8      	ldr	r0, [r7, #12]
 800cbcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbd4:	f003 0304 	and.w	r3, r3, #4
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d02d      	beq.n	800cc38 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	699b      	ldr	r3, [r3, #24]
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d90e      	bls.n	800cc0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	68ba      	ldr	r2, [r7, #8]
 800cbf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cbfa:	4b19      	ldr	r3, [pc, #100]	; (800cc60 <prvSwitchTimerLists+0xc0>)
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	3304      	adds	r3, #4
 800cc02:	4619      	mov	r1, r3
 800cc04:	4610      	mov	r0, r2
 800cc06:	f7fd fd50 	bl	800a6aa <vListInsert>
 800cc0a:	e015      	b.n	800cc38 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	2300      	movs	r3, #0
 800cc12:	693a      	ldr	r2, [r7, #16]
 800cc14:	2100      	movs	r1, #0
 800cc16:	68f8      	ldr	r0, [r7, #12]
 800cc18:	f7ff fd68 	bl	800c6ec <xTimerGenericCommand>
 800cc1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d109      	bne.n	800cc38 <prvSwitchTimerLists+0x98>
 800cc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc28:	f383 8811 	msr	BASEPRI, r3
 800cc2c:	f3bf 8f6f 	isb	sy
 800cc30:	f3bf 8f4f 	dsb	sy
 800cc34:	603b      	str	r3, [r7, #0]
 800cc36:	e7fe      	b.n	800cc36 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc38:	4b09      	ldr	r3, [pc, #36]	; (800cc60 <prvSwitchTimerLists+0xc0>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1b2      	bne.n	800cba8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cc42:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <prvSwitchTimerLists+0xc0>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cc48:	4b06      	ldr	r3, [pc, #24]	; (800cc64 <prvSwitchTimerLists+0xc4>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a04      	ldr	r2, [pc, #16]	; (800cc60 <prvSwitchTimerLists+0xc0>)
 800cc4e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cc50:	4a04      	ldr	r2, [pc, #16]	; (800cc64 <prvSwitchTimerLists+0xc4>)
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	6013      	str	r3, [r2, #0]
}
 800cc56:	bf00      	nop
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	20005c10 	.word	0x20005c10
 800cc64:	20005c14 	.word	0x20005c14

0800cc68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cc6e:	f7fd fea5 	bl	800a9bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cc72:	4b15      	ldr	r3, [pc, #84]	; (800ccc8 <prvCheckForValidListAndQueue+0x60>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d120      	bne.n	800ccbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cc7a:	4814      	ldr	r0, [pc, #80]	; (800cccc <prvCheckForValidListAndQueue+0x64>)
 800cc7c:	f7fd fcc4 	bl	800a608 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc80:	4813      	ldr	r0, [pc, #76]	; (800ccd0 <prvCheckForValidListAndQueue+0x68>)
 800cc82:	f7fd fcc1 	bl	800a608 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc86:	4b13      	ldr	r3, [pc, #76]	; (800ccd4 <prvCheckForValidListAndQueue+0x6c>)
 800cc88:	4a10      	ldr	r2, [pc, #64]	; (800cccc <prvCheckForValidListAndQueue+0x64>)
 800cc8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cc8c:	4b12      	ldr	r3, [pc, #72]	; (800ccd8 <prvCheckForValidListAndQueue+0x70>)
 800cc8e:	4a10      	ldr	r2, [pc, #64]	; (800ccd0 <prvCheckForValidListAndQueue+0x68>)
 800cc90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc92:	2300      	movs	r3, #0
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	4b11      	ldr	r3, [pc, #68]	; (800ccdc <prvCheckForValidListAndQueue+0x74>)
 800cc98:	4a11      	ldr	r2, [pc, #68]	; (800cce0 <prvCheckForValidListAndQueue+0x78>)
 800cc9a:	2110      	movs	r1, #16
 800cc9c:	200a      	movs	r0, #10
 800cc9e:	f7fe f80f 	bl	800acc0 <xQueueGenericCreateStatic>
 800cca2:	4602      	mov	r2, r0
 800cca4:	4b08      	ldr	r3, [pc, #32]	; (800ccc8 <prvCheckForValidListAndQueue+0x60>)
 800cca6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cca8:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <prvCheckForValidListAndQueue+0x60>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d005      	beq.n	800ccbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ccb0:	4b05      	ldr	r3, [pc, #20]	; (800ccc8 <prvCheckForValidListAndQueue+0x60>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	490b      	ldr	r1, [pc, #44]	; (800cce4 <prvCheckForValidListAndQueue+0x7c>)
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fe fd64 	bl	800b784 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ccbc:	f7fd feac 	bl	800aa18 <vPortExitCritical>
}
 800ccc0:	bf00      	nop
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	20005c18 	.word	0x20005c18
 800cccc:	20005be8 	.word	0x20005be8
 800ccd0:	20005bfc 	.word	0x20005bfc
 800ccd4:	20005c10 	.word	0x20005c10
 800ccd8:	20005c14 	.word	0x20005c14
 800ccdc:	20005cc4 	.word	0x20005cc4
 800cce0:	20005c24 	.word	0x20005c24
 800cce4:	0800f198 	.word	0x0800f198

0800cce8 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:
#include <cmsis_os2.h>




Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	601a      	str	r2, [r3, #0]
	console_uart = uart;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	683a      	ldr	r2, [r7, #0]
 800ccfc:	601a      	str	r2, [r3, #0]

	console_semaphore = osSemaphoreNew(256, 1, nullptr);
 800ccfe:	2200      	movs	r2, #0
 800cd00:	2101      	movs	r1, #1
 800cd02:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cd06:	f7fd f97f 	bl	800a008 <osSemaphoreNew>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	605a      	str	r2, [r3, #4]

	printf("\x1b[2J\x1b[H");
 800cd10:	4904      	ldr	r1, [pc, #16]	; (800cd24 <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x3c>)
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 f81d 	bl	800cd52 <_ZN7Console6printfEPKcz>
}
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	0800f1a0 	.word	0x0800f1a0

0800cd28 <_ZN7Console8transmitEPhm>:

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd34:	b672      	cpsid	i
	__disable_irq();
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6818      	ldr	r0, [r3, #0]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800cd42:	68b9      	ldr	r1, [r7, #8]
 800cd44:	f7fb ff3c 	bl	8008bc0 <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 800cd48:	b662      	cpsie	i
	__enable_irq();
}
 800cd4a:	bf00      	nop
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <_ZN7Console6printfEPKcz>:

int Console::printf(const char *format, ...) {
 800cd52:	b40e      	push	{r1, r2, r3}
 800cd54:	b590      	push	{r4, r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, format);
 800cd5c:	f107 0320 	add.w	r3, r7, #32
 800cd60:	60fb      	str	r3, [r7, #12]

	if(vsprintf(buffer, format, args) > 0) {
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	3308      	adds	r3, #8
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	69f9      	ldr	r1, [r7, #28]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f000 fe66 	bl	800da3c <vsiprintf>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	bfcc      	ite	gt
 800cd76:	2301      	movgt	r3, #1
 800cd78:	2300      	movle	r3, #0
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00d      	beq.n	800cd9c <_ZN7Console6printfEPKcz+0x4a>
		transmit((uint8_t*) buffer, strlen(buffer));
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f103 0408 	add.w	r4, r3, #8
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	3308      	adds	r3, #8
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7f3 faa8 	bl	80002e0 <strlen>
 800cd90:	4603      	mov	r3, r0
 800cd92:	461a      	mov	r2, r3
 800cd94:	4621      	mov	r1, r4
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f7ff ffc6 	bl	800cd28 <_ZN7Console8transmitEPhm>
	}

	va_end(args);

	return 0;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800cda8:	b003      	add	sp, #12
 800cdaa:	4770      	bx	lr

0800cdac <_Z41__static_initialization_and_destruction_0ii>:
#include <usart.h>


Console console(&huart3);
Monitor monitor;
Profiler profiler;
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d108      	bne.n	800cdce <_Z41__static_initialization_and_destruction_0ii+0x22>
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d103      	bne.n	800cdce <_Z41__static_initialization_and_destruction_0ii+0x22>
Console console(&huart3);
 800cdc6:	4904      	ldr	r1, [pc, #16]	; (800cdd8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800cdc8:	4804      	ldr	r0, [pc, #16]	; (800cddc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800cdca:	f7ff ff8d 	bl	800cce8 <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
Profiler profiler;
 800cdce:	bf00      	nop
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	20006808 	.word	0x20006808
 800cddc:	20005d14 	.word	0x20005d14

0800cde0 <_GLOBAL__sub_I_console>:
 800cde0:	b580      	push	{r7, lr}
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cde8:	2001      	movs	r0, #1
 800cdea:	f7ff ffdf 	bl	800cdac <_Z41__static_initialization_and_destruction_0ii>
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <_ZN14WatchdogThread4initEv>:
#include <string.h>
#include "iwdg.h"

#include "usart.h"

void WatchdogThread::init() {
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]

}
 800cdf8:	bf00      	nop
 800cdfa:	370c      	adds	r7, #12
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <_ZN14WatchdogThread4loopEv>:

uint8_t i = 0;

void WatchdogThread::loop() {
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(watchdog_handle);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7f8 fb11 	bl	8005438 <HAL_IWDG_Refresh>
	#ifdef CORE_CM7
	i++;
 800ce16:	4b0a      	ldr	r3, [pc, #40]	; (800ce40 <_ZN14WatchdogThread4loopEv+0x3c>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	4b08      	ldr	r3, [pc, #32]	; (800ce40 <_ZN14WatchdogThread4loopEv+0x3c>)
 800ce20:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, &i, 1, 1000);
 800ce22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ce26:	2201      	movs	r2, #1
 800ce28:	4905      	ldr	r1, [pc, #20]	; (800ce40 <_ZN14WatchdogThread4loopEv+0x3c>)
 800ce2a:	4806      	ldr	r0, [pc, #24]	; (800ce44 <_ZN14WatchdogThread4loopEv+0x40>)
 800ce2c:	f7fb fec8 	bl	8008bc0 <HAL_UART_Transmit>
#endif
	osDelay(100);
 800ce30:	2064      	movs	r0, #100	; 0x64
 800ce32:	f7fd f8bb 	bl	8009fac <osDelay>
}
 800ce36:	bf00      	nop
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	20005e1c 	.word	0x20005e1c
 800ce44:	20006808 	.word	0x20006808

0800ce48 <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority_t priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority_t priority, uint32_t stackSize);
	~Thread() {};
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	4a04      	ldr	r2, [pc, #16]	; (800ce64 <_ZN6ThreadD1Ev+0x1c>)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	601a      	str	r2, [r3, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	370c      	adds	r7, #12
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr
 800ce64:	0800f1fc 	.word	0x0800f1fc

0800ce68 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>:

#include "../Thread.h"

class WatchdogThread : Thread {
public:
	WatchdogThread(IWDG_HandleTypeDef* hiwdg) : Thread("Watchdog"), watchdog_handle(hiwdg) {}
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4907      	ldr	r1, [pc, #28]	; (800ce94 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x2c>)
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 f86c 	bl	800cf54 <_ZN6ThreadC1EPKc>
 800ce7c:	4a06      	ldr	r2, [pc, #24]	; (800ce98 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef+0x30>)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	601a      	str	r2, [r3, #0]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	683a      	ldr	r2, [r7, #0]
 800ce86:	62da      	str	r2, [r3, #44]	; 0x2c
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3708      	adds	r7, #8
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	0800f1a8 	.word	0x0800f1a8
 800ce98:	0800f1ec 	.word	0x0800f1ec

0800ce9c <_ZN14WatchdogThreadD1Ev>:
class WatchdogThread : Thread {
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	4a05      	ldr	r2, [pc, #20]	; (800cebc <_ZN14WatchdogThreadD1Ev+0x20>)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7ff ffcb 	bl	800ce48 <_ZN6ThreadD1Ev>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	0800f1ec 	.word	0x0800f1ec

0800cec0 <__tcf_0>:
}
#endif

#ifdef CORE_CM7
void initCortexM7() {
	static WatchdogThread watchdog(&hiwdg1);
 800cec0:	b580      	push	{r7, lr}
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	4801      	ldr	r0, [pc, #4]	; (800cecc <__tcf_0+0xc>)
 800cec6:	f7ff ffe9 	bl	800ce9c <_ZN14WatchdogThreadD1Ev>
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	20005e20 	.word	0x20005e20

0800ced0 <initCortexM7>:
void initCortexM7() {
 800ced0:	b580      	push	{r7, lr}
 800ced2:	af00      	add	r7, sp, #0
	static WatchdogThread watchdog(&hiwdg1);
 800ced4:	4b12      	ldr	r3, [pc, #72]	; (800cf20 <initCortexM7+0x50>)
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	f3bf 8f5b 	dmb	ish
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	f003 0301 	and.w	r3, r3, #1
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	bf0c      	ite	eq
 800cee6:	2301      	moveq	r3, #1
 800cee8:	2300      	movne	r3, #0
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d014      	beq.n	800cf1a <initCortexM7+0x4a>
 800cef0:	480b      	ldr	r0, [pc, #44]	; (800cf20 <initCortexM7+0x50>)
 800cef2:	f000 f877 	bl	800cfe4 <__cxa_guard_acquire>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	bf14      	ite	ne
 800cefc:	2301      	movne	r3, #1
 800cefe:	2300      	moveq	r3, #0
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d009      	beq.n	800cf1a <initCortexM7+0x4a>
 800cf06:	4907      	ldr	r1, [pc, #28]	; (800cf24 <initCortexM7+0x54>)
 800cf08:	4807      	ldr	r0, [pc, #28]	; (800cf28 <initCortexM7+0x58>)
 800cf0a:	f7ff ffad 	bl	800ce68 <_ZN14WatchdogThreadC1EP18IWDG_HandleTypeDef>
 800cf0e:	4804      	ldr	r0, [pc, #16]	; (800cf20 <initCortexM7+0x50>)
 800cf10:	f000 f874 	bl	800cffc <__cxa_guard_release>
 800cf14:	4805      	ldr	r0, [pc, #20]	; (800cf2c <initCortexM7+0x5c>)
 800cf16:	f000 f88f 	bl	800d038 <atexit>
}
 800cf1a:	bf00      	nop
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	20005e50 	.word	0x20005e50
 800cf24:	20005ff4 	.word	0x20005ff4
 800cf28:	20005e20 	.word	0x20005e20
 800cf2c:	0800cec1 	.word	0x0800cec1

0800cf30 <_Z10__task_runPv>:

#include "usart.h"
#define DEFAULT_STACK_SIZE (512)


void __task_run(void* arg) {
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	60fb      	str	r3, [r7, #12]

	thread->init();
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	4798      	blx	r3

	while(true) {
		thread->loop();
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	3304      	adds	r3, #4
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	68f8      	ldr	r0, [r7, #12]
 800cf50:	4798      	blx	r3
 800cf52:	e7f8      	b.n	800cf46 <_Z10__task_runPv+0x16>

0800cf54 <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority_t) osPriorityNormal) {
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
 800cf5e:	2218      	movs	r2, #24
 800cf60:	6839      	ldr	r1, [r7, #0]
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 f805 	bl	800cf72 <_ZN6ThreadC1EPKc12osPriority_t>
	;
}
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3708      	adds	r7, #8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <_ZN6ThreadC1EPKc12osPriority_t>:

Thread::Thread(const char* name, osPriority_t priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	60f8      	str	r0, [r7, #12]
 800cf7a:	60b9      	str	r1, [r7, #8]
 800cf7c:	607a      	str	r2, [r7, #4]
 800cf7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	68b9      	ldr	r1, [r7, #8]
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f000 f806 	bl	800cf98 <_ZN6ThreadC1EPKc12osPriority_tm>
	;
}
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
	...

0800cf98 <_ZN6ThreadC1EPKc12osPriority_tm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority_t) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority_t priority, uint32_t stackSize) {
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
 800cfa4:	603b      	str	r3, [r7, #0]
 800cfa6:	4a0d      	ldr	r2, [pc, #52]	; (800cfdc <_ZN6ThreadC1EPKc12osPriority_tm+0x44>)
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	601a      	str	r2, [r3, #0]
	attributes.name = name;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	605a      	str	r2, [r3, #4]
	attributes.priority = priority;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	61da      	str	r2, [r3, #28]
	attributes.stack_size = stackSize;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	683a      	ldr	r2, [r7, #0]
 800cfbc:	619a      	str	r2, [r3, #24]

	this->handle = osThreadNew(__task_run, this, &attributes);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	3304      	adds	r3, #4
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	68f9      	ldr	r1, [r7, #12]
 800cfc6:	4806      	ldr	r0, [pc, #24]	; (800cfe0 <_ZN6ThreadC1EPKc12osPriority_tm+0x48>)
 800cfc8:	f7fc ff4a 	bl	8009e60 <osThreadNew>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	0800f1fc 	.word	0x0800f1fc
 800cfe0:	0800cf31 	.word	0x0800cf31

0800cfe4 <__cxa_guard_acquire>:
 800cfe4:	6803      	ldr	r3, [r0, #0]
 800cfe6:	07db      	lsls	r3, r3, #31
 800cfe8:	d406      	bmi.n	800cff8 <__cxa_guard_acquire+0x14>
 800cfea:	7843      	ldrb	r3, [r0, #1]
 800cfec:	b103      	cbz	r3, 800cff0 <__cxa_guard_acquire+0xc>
 800cfee:	deff      	udf	#255	; 0xff
 800cff0:	2301      	movs	r3, #1
 800cff2:	7043      	strb	r3, [r0, #1]
 800cff4:	4618      	mov	r0, r3
 800cff6:	4770      	bx	lr
 800cff8:	2000      	movs	r0, #0
 800cffa:	4770      	bx	lr

0800cffc <__cxa_guard_release>:
 800cffc:	2301      	movs	r3, #1
 800cffe:	6003      	str	r3, [r0, #0]
 800d000:	4770      	bx	lr

0800d002 <__cxa_pure_virtual>:
 800d002:	b508      	push	{r3, lr}
 800d004:	f000 f80c 	bl	800d020 <_ZSt9terminatev>

0800d008 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d008:	b508      	push	{r3, lr}
 800d00a:	4780      	blx	r0
 800d00c:	f000 f80d 	bl	800d02a <abort>

0800d010 <_ZSt13get_terminatev>:
 800d010:	4b02      	ldr	r3, [pc, #8]	; (800d01c <_ZSt13get_terminatev+0xc>)
 800d012:	6818      	ldr	r0, [r3, #0]
 800d014:	f3bf 8f5b 	dmb	ish
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	20000014 	.word	0x20000014

0800d020 <_ZSt9terminatev>:
 800d020:	b508      	push	{r3, lr}
 800d022:	f7ff fff5 	bl	800d010 <_ZSt13get_terminatev>
 800d026:	f7ff ffef 	bl	800d008 <_ZN10__cxxabiv111__terminateEPFvvE>

0800d02a <abort>:
 800d02a:	b508      	push	{r3, lr}
 800d02c:	2006      	movs	r0, #6
 800d02e:	f000 fcd3 	bl	800d9d8 <raise>
 800d032:	2001      	movs	r0, #1
 800d034:	f7f4 ff72 	bl	8001f1c <_exit>

0800d038 <atexit>:
 800d038:	2300      	movs	r3, #0
 800d03a:	4601      	mov	r1, r0
 800d03c:	461a      	mov	r2, r3
 800d03e:	4618      	mov	r0, r3
 800d040:	f000 bd14 	b.w	800da6c <__register_exitproc>

0800d044 <__errno>:
 800d044:	4b01      	ldr	r3, [pc, #4]	; (800d04c <__errno+0x8>)
 800d046:	6818      	ldr	r0, [r3, #0]
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	20000018 	.word	0x20000018

0800d050 <__libc_init_array>:
 800d050:	b570      	push	{r4, r5, r6, lr}
 800d052:	4e0d      	ldr	r6, [pc, #52]	; (800d088 <__libc_init_array+0x38>)
 800d054:	4c0d      	ldr	r4, [pc, #52]	; (800d08c <__libc_init_array+0x3c>)
 800d056:	1ba4      	subs	r4, r4, r6
 800d058:	10a4      	asrs	r4, r4, #2
 800d05a:	2500      	movs	r5, #0
 800d05c:	42a5      	cmp	r5, r4
 800d05e:	d109      	bne.n	800d074 <__libc_init_array+0x24>
 800d060:	4e0b      	ldr	r6, [pc, #44]	; (800d090 <__libc_init_array+0x40>)
 800d062:	4c0c      	ldr	r4, [pc, #48]	; (800d094 <__libc_init_array+0x44>)
 800d064:	f002 f87a 	bl	800f15c <_init>
 800d068:	1ba4      	subs	r4, r4, r6
 800d06a:	10a4      	asrs	r4, r4, #2
 800d06c:	2500      	movs	r5, #0
 800d06e:	42a5      	cmp	r5, r4
 800d070:	d105      	bne.n	800d07e <__libc_init_array+0x2e>
 800d072:	bd70      	pop	{r4, r5, r6, pc}
 800d074:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d078:	4798      	blx	r3
 800d07a:	3501      	adds	r5, #1
 800d07c:	e7ee      	b.n	800d05c <__libc_init_array+0xc>
 800d07e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d082:	4798      	blx	r3
 800d084:	3501      	adds	r5, #1
 800d086:	e7f2      	b.n	800d06e <__libc_init_array+0x1e>
 800d088:	0800f4c8 	.word	0x0800f4c8
 800d08c:	0800f4c8 	.word	0x0800f4c8
 800d090:	0800f4c8 	.word	0x0800f4c8
 800d094:	0800f4d0 	.word	0x0800f4d0

0800d098 <__ascii_mbtowc>:
 800d098:	b082      	sub	sp, #8
 800d09a:	b901      	cbnz	r1, 800d09e <__ascii_mbtowc+0x6>
 800d09c:	a901      	add	r1, sp, #4
 800d09e:	b142      	cbz	r2, 800d0b2 <__ascii_mbtowc+0x1a>
 800d0a0:	b14b      	cbz	r3, 800d0b6 <__ascii_mbtowc+0x1e>
 800d0a2:	7813      	ldrb	r3, [r2, #0]
 800d0a4:	600b      	str	r3, [r1, #0]
 800d0a6:	7812      	ldrb	r2, [r2, #0]
 800d0a8:	1c10      	adds	r0, r2, #0
 800d0aa:	bf18      	it	ne
 800d0ac:	2001      	movne	r0, #1
 800d0ae:	b002      	add	sp, #8
 800d0b0:	4770      	bx	lr
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	e7fb      	b.n	800d0ae <__ascii_mbtowc+0x16>
 800d0b6:	f06f 0001 	mvn.w	r0, #1
 800d0ba:	e7f8      	b.n	800d0ae <__ascii_mbtowc+0x16>

0800d0bc <memcpy>:
 800d0bc:	b510      	push	{r4, lr}
 800d0be:	1e43      	subs	r3, r0, #1
 800d0c0:	440a      	add	r2, r1
 800d0c2:	4291      	cmp	r1, r2
 800d0c4:	d100      	bne.n	800d0c8 <memcpy+0xc>
 800d0c6:	bd10      	pop	{r4, pc}
 800d0c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0d0:	e7f7      	b.n	800d0c2 <memcpy+0x6>

0800d0d2 <memmove>:
 800d0d2:	4288      	cmp	r0, r1
 800d0d4:	b510      	push	{r4, lr}
 800d0d6:	eb01 0302 	add.w	r3, r1, r2
 800d0da:	d807      	bhi.n	800d0ec <memmove+0x1a>
 800d0dc:	1e42      	subs	r2, r0, #1
 800d0de:	4299      	cmp	r1, r3
 800d0e0:	d00a      	beq.n	800d0f8 <memmove+0x26>
 800d0e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d0ea:	e7f8      	b.n	800d0de <memmove+0xc>
 800d0ec:	4283      	cmp	r3, r0
 800d0ee:	d9f5      	bls.n	800d0dc <memmove+0xa>
 800d0f0:	1881      	adds	r1, r0, r2
 800d0f2:	1ad2      	subs	r2, r2, r3
 800d0f4:	42d3      	cmn	r3, r2
 800d0f6:	d100      	bne.n	800d0fa <memmove+0x28>
 800d0f8:	bd10      	pop	{r4, pc}
 800d0fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d102:	e7f7      	b.n	800d0f4 <memmove+0x22>

0800d104 <memset>:
 800d104:	4402      	add	r2, r0
 800d106:	4603      	mov	r3, r0
 800d108:	4293      	cmp	r3, r2
 800d10a:	d100      	bne.n	800d10e <memset+0xa>
 800d10c:	4770      	bx	lr
 800d10e:	f803 1b01 	strb.w	r1, [r3], #1
 800d112:	e7f9      	b.n	800d108 <memset+0x4>

0800d114 <__cvt>:
 800d114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d116:	ed2d 8b02 	vpush	{d8}
 800d11a:	eeb0 8b40 	vmov.f64	d8, d0
 800d11e:	b085      	sub	sp, #20
 800d120:	4617      	mov	r7, r2
 800d122:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d124:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d126:	ee18 2a90 	vmov	r2, s17
 800d12a:	f025 0520 	bic.w	r5, r5, #32
 800d12e:	2a00      	cmp	r2, #0
 800d130:	bfb6      	itet	lt
 800d132:	222d      	movlt	r2, #45	; 0x2d
 800d134:	2200      	movge	r2, #0
 800d136:	eeb1 8b40 	vneglt.f64	d8, d0
 800d13a:	2d46      	cmp	r5, #70	; 0x46
 800d13c:	460c      	mov	r4, r1
 800d13e:	701a      	strb	r2, [r3, #0]
 800d140:	d004      	beq.n	800d14c <__cvt+0x38>
 800d142:	2d45      	cmp	r5, #69	; 0x45
 800d144:	d100      	bne.n	800d148 <__cvt+0x34>
 800d146:	3401      	adds	r4, #1
 800d148:	2102      	movs	r1, #2
 800d14a:	e000      	b.n	800d14e <__cvt+0x3a>
 800d14c:	2103      	movs	r1, #3
 800d14e:	ab03      	add	r3, sp, #12
 800d150:	9301      	str	r3, [sp, #4]
 800d152:	ab02      	add	r3, sp, #8
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	4622      	mov	r2, r4
 800d158:	4633      	mov	r3, r6
 800d15a:	eeb0 0b48 	vmov.f64	d0, d8
 800d15e:	f000 fd77 	bl	800dc50 <_dtoa_r>
 800d162:	2d47      	cmp	r5, #71	; 0x47
 800d164:	d101      	bne.n	800d16a <__cvt+0x56>
 800d166:	07fb      	lsls	r3, r7, #31
 800d168:	d51e      	bpl.n	800d1a8 <__cvt+0x94>
 800d16a:	2d46      	cmp	r5, #70	; 0x46
 800d16c:	eb00 0304 	add.w	r3, r0, r4
 800d170:	d10c      	bne.n	800d18c <__cvt+0x78>
 800d172:	7802      	ldrb	r2, [r0, #0]
 800d174:	2a30      	cmp	r2, #48	; 0x30
 800d176:	d107      	bne.n	800d188 <__cvt+0x74>
 800d178:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d180:	bf1c      	itt	ne
 800d182:	f1c4 0401 	rsbne	r4, r4, #1
 800d186:	6034      	strne	r4, [r6, #0]
 800d188:	6832      	ldr	r2, [r6, #0]
 800d18a:	4413      	add	r3, r2
 800d18c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d194:	d007      	beq.n	800d1a6 <__cvt+0x92>
 800d196:	2130      	movs	r1, #48	; 0x30
 800d198:	9a03      	ldr	r2, [sp, #12]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d204      	bcs.n	800d1a8 <__cvt+0x94>
 800d19e:	1c54      	adds	r4, r2, #1
 800d1a0:	9403      	str	r4, [sp, #12]
 800d1a2:	7011      	strb	r1, [r2, #0]
 800d1a4:	e7f8      	b.n	800d198 <__cvt+0x84>
 800d1a6:	9303      	str	r3, [sp, #12]
 800d1a8:	9b03      	ldr	r3, [sp, #12]
 800d1aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1ac:	1a1b      	subs	r3, r3, r0
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	b005      	add	sp, #20
 800d1b2:	ecbd 8b02 	vpop	{d8}
 800d1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d1b8 <__exponent>:
 800d1b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1ba:	2900      	cmp	r1, #0
 800d1bc:	4604      	mov	r4, r0
 800d1be:	bfba      	itte	lt
 800d1c0:	4249      	neglt	r1, r1
 800d1c2:	232d      	movlt	r3, #45	; 0x2d
 800d1c4:	232b      	movge	r3, #43	; 0x2b
 800d1c6:	2909      	cmp	r1, #9
 800d1c8:	f804 2b02 	strb.w	r2, [r4], #2
 800d1cc:	7043      	strb	r3, [r0, #1]
 800d1ce:	dd20      	ble.n	800d212 <__exponent+0x5a>
 800d1d0:	f10d 0307 	add.w	r3, sp, #7
 800d1d4:	461f      	mov	r7, r3
 800d1d6:	260a      	movs	r6, #10
 800d1d8:	fb91 f5f6 	sdiv	r5, r1, r6
 800d1dc:	fb06 1115 	mls	r1, r6, r5, r1
 800d1e0:	3130      	adds	r1, #48	; 0x30
 800d1e2:	2d09      	cmp	r5, #9
 800d1e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d1e8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800d1ec:	4629      	mov	r1, r5
 800d1ee:	dc09      	bgt.n	800d204 <__exponent+0x4c>
 800d1f0:	3130      	adds	r1, #48	; 0x30
 800d1f2:	3b02      	subs	r3, #2
 800d1f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d1f8:	42bb      	cmp	r3, r7
 800d1fa:	4622      	mov	r2, r4
 800d1fc:	d304      	bcc.n	800d208 <__exponent+0x50>
 800d1fe:	1a10      	subs	r0, r2, r0
 800d200:	b003      	add	sp, #12
 800d202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d204:	4613      	mov	r3, r2
 800d206:	e7e7      	b.n	800d1d8 <__exponent+0x20>
 800d208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d20c:	f804 2b01 	strb.w	r2, [r4], #1
 800d210:	e7f2      	b.n	800d1f8 <__exponent+0x40>
 800d212:	2330      	movs	r3, #48	; 0x30
 800d214:	4419      	add	r1, r3
 800d216:	7083      	strb	r3, [r0, #2]
 800d218:	1d02      	adds	r2, r0, #4
 800d21a:	70c1      	strb	r1, [r0, #3]
 800d21c:	e7ef      	b.n	800d1fe <__exponent+0x46>
	...

0800d220 <_printf_float>:
 800d220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d224:	b08d      	sub	sp, #52	; 0x34
 800d226:	460c      	mov	r4, r1
 800d228:	4616      	mov	r6, r2
 800d22a:	461f      	mov	r7, r3
 800d22c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d230:	4605      	mov	r5, r0
 800d232:	f001 fa59 	bl	800e6e8 <_localeconv_r>
 800d236:	f8d0 b000 	ldr.w	fp, [r0]
 800d23a:	4658      	mov	r0, fp
 800d23c:	f7f3 f850 	bl	80002e0 <strlen>
 800d240:	2300      	movs	r3, #0
 800d242:	930a      	str	r3, [sp, #40]	; 0x28
 800d244:	f8d8 3000 	ldr.w	r3, [r8]
 800d248:	9005      	str	r0, [sp, #20]
 800d24a:	3307      	adds	r3, #7
 800d24c:	f023 0307 	bic.w	r3, r3, #7
 800d250:	f103 0108 	add.w	r1, r3, #8
 800d254:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d258:	6822      	ldr	r2, [r4, #0]
 800d25a:	f8c8 1000 	str.w	r1, [r8]
 800d25e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d262:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d266:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800d4f0 <_printf_float+0x2d0>
 800d26a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d26e:	eeb0 6bc0 	vabs.f64	d6, d0
 800d272:	eeb4 6b47 	vcmp.f64	d6, d7
 800d276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d27a:	dd24      	ble.n	800d2c6 <_printf_float+0xa6>
 800d27c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d284:	d502      	bpl.n	800d28c <_printf_float+0x6c>
 800d286:	232d      	movs	r3, #45	; 0x2d
 800d288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d28c:	499a      	ldr	r1, [pc, #616]	; (800d4f8 <_printf_float+0x2d8>)
 800d28e:	4b9b      	ldr	r3, [pc, #620]	; (800d4fc <_printf_float+0x2dc>)
 800d290:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d294:	bf8c      	ite	hi
 800d296:	4688      	movhi	r8, r1
 800d298:	4698      	movls	r8, r3
 800d29a:	f022 0204 	bic.w	r2, r2, #4
 800d29e:	2303      	movs	r3, #3
 800d2a0:	6123      	str	r3, [r4, #16]
 800d2a2:	6022      	str	r2, [r4, #0]
 800d2a4:	f04f 0a00 	mov.w	sl, #0
 800d2a8:	9700      	str	r7, [sp, #0]
 800d2aa:	4633      	mov	r3, r6
 800d2ac:	aa0b      	add	r2, sp, #44	; 0x2c
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	f000 f9e1 	bl	800d678 <_printf_common>
 800d2b6:	3001      	adds	r0, #1
 800d2b8:	f040 8089 	bne.w	800d3ce <_printf_float+0x1ae>
 800d2bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2c0:	b00d      	add	sp, #52	; 0x34
 800d2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c6:	eeb4 0b40 	vcmp.f64	d0, d0
 800d2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ce:	d702      	bvc.n	800d2d6 <_printf_float+0xb6>
 800d2d0:	498b      	ldr	r1, [pc, #556]	; (800d500 <_printf_float+0x2e0>)
 800d2d2:	4b8c      	ldr	r3, [pc, #560]	; (800d504 <_printf_float+0x2e4>)
 800d2d4:	e7dc      	b.n	800d290 <_printf_float+0x70>
 800d2d6:	6861      	ldr	r1, [r4, #4]
 800d2d8:	1c4b      	adds	r3, r1, #1
 800d2da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d2de:	ab0a      	add	r3, sp, #40	; 0x28
 800d2e0:	a809      	add	r0, sp, #36	; 0x24
 800d2e2:	d13b      	bne.n	800d35c <_printf_float+0x13c>
 800d2e4:	2106      	movs	r1, #6
 800d2e6:	6061      	str	r1, [r4, #4]
 800d2e8:	f04f 0c00 	mov.w	ip, #0
 800d2ec:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800d2f0:	e9cd 0900 	strd	r0, r9, [sp]
 800d2f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d2f8:	6022      	str	r2, [r4, #0]
 800d2fa:	6861      	ldr	r1, [r4, #4]
 800d2fc:	4628      	mov	r0, r5
 800d2fe:	f7ff ff09 	bl	800d114 <__cvt>
 800d302:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800d306:	2b47      	cmp	r3, #71	; 0x47
 800d308:	4680      	mov	r8, r0
 800d30a:	d109      	bne.n	800d320 <_printf_float+0x100>
 800d30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d30e:	1cd8      	adds	r0, r3, #3
 800d310:	db02      	blt.n	800d318 <_printf_float+0xf8>
 800d312:	6862      	ldr	r2, [r4, #4]
 800d314:	4293      	cmp	r3, r2
 800d316:	dd47      	ble.n	800d3a8 <_printf_float+0x188>
 800d318:	f1a9 0902 	sub.w	r9, r9, #2
 800d31c:	fa5f f989 	uxtb.w	r9, r9
 800d320:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d324:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d326:	d824      	bhi.n	800d372 <_printf_float+0x152>
 800d328:	3901      	subs	r1, #1
 800d32a:	464a      	mov	r2, r9
 800d32c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d330:	9109      	str	r1, [sp, #36]	; 0x24
 800d332:	f7ff ff41 	bl	800d1b8 <__exponent>
 800d336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d338:	1813      	adds	r3, r2, r0
 800d33a:	2a01      	cmp	r2, #1
 800d33c:	4682      	mov	sl, r0
 800d33e:	6123      	str	r3, [r4, #16]
 800d340:	dc02      	bgt.n	800d348 <_printf_float+0x128>
 800d342:	6822      	ldr	r2, [r4, #0]
 800d344:	07d1      	lsls	r1, r2, #31
 800d346:	d501      	bpl.n	800d34c <_printf_float+0x12c>
 800d348:	3301      	adds	r3, #1
 800d34a:	6123      	str	r3, [r4, #16]
 800d34c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d350:	2b00      	cmp	r3, #0
 800d352:	d0a9      	beq.n	800d2a8 <_printf_float+0x88>
 800d354:	232d      	movs	r3, #45	; 0x2d
 800d356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d35a:	e7a5      	b.n	800d2a8 <_printf_float+0x88>
 800d35c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800d360:	f000 8178 	beq.w	800d654 <_printf_float+0x434>
 800d364:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d368:	d1be      	bne.n	800d2e8 <_printf_float+0xc8>
 800d36a:	2900      	cmp	r1, #0
 800d36c:	d1bc      	bne.n	800d2e8 <_printf_float+0xc8>
 800d36e:	2101      	movs	r1, #1
 800d370:	e7b9      	b.n	800d2e6 <_printf_float+0xc6>
 800d372:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d376:	d119      	bne.n	800d3ac <_printf_float+0x18c>
 800d378:	2900      	cmp	r1, #0
 800d37a:	6863      	ldr	r3, [r4, #4]
 800d37c:	dd0c      	ble.n	800d398 <_printf_float+0x178>
 800d37e:	6121      	str	r1, [r4, #16]
 800d380:	b913      	cbnz	r3, 800d388 <_printf_float+0x168>
 800d382:	6822      	ldr	r2, [r4, #0]
 800d384:	07d2      	lsls	r2, r2, #31
 800d386:	d502      	bpl.n	800d38e <_printf_float+0x16e>
 800d388:	3301      	adds	r3, #1
 800d38a:	440b      	add	r3, r1
 800d38c:	6123      	str	r3, [r4, #16]
 800d38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d390:	65a3      	str	r3, [r4, #88]	; 0x58
 800d392:	f04f 0a00 	mov.w	sl, #0
 800d396:	e7d9      	b.n	800d34c <_printf_float+0x12c>
 800d398:	b913      	cbnz	r3, 800d3a0 <_printf_float+0x180>
 800d39a:	6822      	ldr	r2, [r4, #0]
 800d39c:	07d0      	lsls	r0, r2, #31
 800d39e:	d501      	bpl.n	800d3a4 <_printf_float+0x184>
 800d3a0:	3302      	adds	r3, #2
 800d3a2:	e7f3      	b.n	800d38c <_printf_float+0x16c>
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e7f1      	b.n	800d38c <_printf_float+0x16c>
 800d3a8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d3ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	db05      	blt.n	800d3c0 <_printf_float+0x1a0>
 800d3b4:	6822      	ldr	r2, [r4, #0]
 800d3b6:	6123      	str	r3, [r4, #16]
 800d3b8:	07d1      	lsls	r1, r2, #31
 800d3ba:	d5e8      	bpl.n	800d38e <_printf_float+0x16e>
 800d3bc:	3301      	adds	r3, #1
 800d3be:	e7e5      	b.n	800d38c <_printf_float+0x16c>
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	bfd4      	ite	le
 800d3c4:	f1c3 0302 	rsble	r3, r3, #2
 800d3c8:	2301      	movgt	r3, #1
 800d3ca:	4413      	add	r3, r2
 800d3cc:	e7de      	b.n	800d38c <_printf_float+0x16c>
 800d3ce:	6823      	ldr	r3, [r4, #0]
 800d3d0:	055a      	lsls	r2, r3, #21
 800d3d2:	d407      	bmi.n	800d3e4 <_printf_float+0x1c4>
 800d3d4:	6923      	ldr	r3, [r4, #16]
 800d3d6:	4642      	mov	r2, r8
 800d3d8:	4631      	mov	r1, r6
 800d3da:	4628      	mov	r0, r5
 800d3dc:	47b8      	blx	r7
 800d3de:	3001      	adds	r0, #1
 800d3e0:	d12a      	bne.n	800d438 <_printf_float+0x218>
 800d3e2:	e76b      	b.n	800d2bc <_printf_float+0x9c>
 800d3e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d3e8:	f240 80de 	bls.w	800d5a8 <_printf_float+0x388>
 800d3ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d3f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f8:	d133      	bne.n	800d462 <_printf_float+0x242>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	4a42      	ldr	r2, [pc, #264]	; (800d508 <_printf_float+0x2e8>)
 800d3fe:	4631      	mov	r1, r6
 800d400:	4628      	mov	r0, r5
 800d402:	47b8      	blx	r7
 800d404:	3001      	adds	r0, #1
 800d406:	f43f af59 	beq.w	800d2bc <_printf_float+0x9c>
 800d40a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d40e:	429a      	cmp	r2, r3
 800d410:	db02      	blt.n	800d418 <_printf_float+0x1f8>
 800d412:	6823      	ldr	r3, [r4, #0]
 800d414:	07d8      	lsls	r0, r3, #31
 800d416:	d50f      	bpl.n	800d438 <_printf_float+0x218>
 800d418:	9b05      	ldr	r3, [sp, #20]
 800d41a:	465a      	mov	r2, fp
 800d41c:	4631      	mov	r1, r6
 800d41e:	4628      	mov	r0, r5
 800d420:	47b8      	blx	r7
 800d422:	3001      	adds	r0, #1
 800d424:	f43f af4a 	beq.w	800d2bc <_printf_float+0x9c>
 800d428:	f04f 0800 	mov.w	r8, #0
 800d42c:	f104 091a 	add.w	r9, r4, #26
 800d430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d432:	3b01      	subs	r3, #1
 800d434:	4543      	cmp	r3, r8
 800d436:	dc09      	bgt.n	800d44c <_printf_float+0x22c>
 800d438:	6823      	ldr	r3, [r4, #0]
 800d43a:	079b      	lsls	r3, r3, #30
 800d43c:	f100 8105 	bmi.w	800d64a <_printf_float+0x42a>
 800d440:	68e0      	ldr	r0, [r4, #12]
 800d442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d444:	4298      	cmp	r0, r3
 800d446:	bfb8      	it	lt
 800d448:	4618      	movlt	r0, r3
 800d44a:	e739      	b.n	800d2c0 <_printf_float+0xa0>
 800d44c:	2301      	movs	r3, #1
 800d44e:	464a      	mov	r2, r9
 800d450:	4631      	mov	r1, r6
 800d452:	4628      	mov	r0, r5
 800d454:	47b8      	blx	r7
 800d456:	3001      	adds	r0, #1
 800d458:	f43f af30 	beq.w	800d2bc <_printf_float+0x9c>
 800d45c:	f108 0801 	add.w	r8, r8, #1
 800d460:	e7e6      	b.n	800d430 <_printf_float+0x210>
 800d462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d464:	2b00      	cmp	r3, #0
 800d466:	dc2b      	bgt.n	800d4c0 <_printf_float+0x2a0>
 800d468:	2301      	movs	r3, #1
 800d46a:	4a27      	ldr	r2, [pc, #156]	; (800d508 <_printf_float+0x2e8>)
 800d46c:	4631      	mov	r1, r6
 800d46e:	4628      	mov	r0, r5
 800d470:	47b8      	blx	r7
 800d472:	3001      	adds	r0, #1
 800d474:	f43f af22 	beq.w	800d2bc <_printf_float+0x9c>
 800d478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d47a:	b923      	cbnz	r3, 800d486 <_printf_float+0x266>
 800d47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d47e:	b913      	cbnz	r3, 800d486 <_printf_float+0x266>
 800d480:	6823      	ldr	r3, [r4, #0]
 800d482:	07d9      	lsls	r1, r3, #31
 800d484:	d5d8      	bpl.n	800d438 <_printf_float+0x218>
 800d486:	9b05      	ldr	r3, [sp, #20]
 800d488:	465a      	mov	r2, fp
 800d48a:	4631      	mov	r1, r6
 800d48c:	4628      	mov	r0, r5
 800d48e:	47b8      	blx	r7
 800d490:	3001      	adds	r0, #1
 800d492:	f43f af13 	beq.w	800d2bc <_printf_float+0x9c>
 800d496:	f04f 0900 	mov.w	r9, #0
 800d49a:	f104 0a1a 	add.w	sl, r4, #26
 800d49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a0:	425b      	negs	r3, r3
 800d4a2:	454b      	cmp	r3, r9
 800d4a4:	dc01      	bgt.n	800d4aa <_printf_float+0x28a>
 800d4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4a8:	e795      	b.n	800d3d6 <_printf_float+0x1b6>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	4652      	mov	r2, sl
 800d4ae:	4631      	mov	r1, r6
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	47b8      	blx	r7
 800d4b4:	3001      	adds	r0, #1
 800d4b6:	f43f af01 	beq.w	800d2bc <_printf_float+0x9c>
 800d4ba:	f109 0901 	add.w	r9, r9, #1
 800d4be:	e7ee      	b.n	800d49e <_printf_float+0x27e>
 800d4c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	bfa8      	it	ge
 800d4c8:	461a      	movge	r2, r3
 800d4ca:	2a00      	cmp	r2, #0
 800d4cc:	4691      	mov	r9, r2
 800d4ce:	dd07      	ble.n	800d4e0 <_printf_float+0x2c0>
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	4631      	mov	r1, r6
 800d4d4:	4642      	mov	r2, r8
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	47b8      	blx	r7
 800d4da:	3001      	adds	r0, #1
 800d4dc:	f43f aeee 	beq.w	800d2bc <_printf_float+0x9c>
 800d4e0:	f104 031a 	add.w	r3, r4, #26
 800d4e4:	f04f 0a00 	mov.w	sl, #0
 800d4e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d4ec:	9307      	str	r3, [sp, #28]
 800d4ee:	e017      	b.n	800d520 <_printf_float+0x300>
 800d4f0:	ffffffff 	.word	0xffffffff
 800d4f4:	7fefffff 	.word	0x7fefffff
 800d4f8:	0800f212 	.word	0x0800f212
 800d4fc:	0800f20e 	.word	0x0800f20e
 800d500:	0800f21a 	.word	0x0800f21a
 800d504:	0800f216 	.word	0x0800f216
 800d508:	0800f21e 	.word	0x0800f21e
 800d50c:	2301      	movs	r3, #1
 800d50e:	9a07      	ldr	r2, [sp, #28]
 800d510:	4631      	mov	r1, r6
 800d512:	4628      	mov	r0, r5
 800d514:	47b8      	blx	r7
 800d516:	3001      	adds	r0, #1
 800d518:	f43f aed0 	beq.w	800d2bc <_printf_float+0x9c>
 800d51c:	f10a 0a01 	add.w	sl, sl, #1
 800d520:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d522:	9306      	str	r3, [sp, #24]
 800d524:	eba3 0309 	sub.w	r3, r3, r9
 800d528:	4553      	cmp	r3, sl
 800d52a:	dcef      	bgt.n	800d50c <_printf_float+0x2ec>
 800d52c:	9b06      	ldr	r3, [sp, #24]
 800d52e:	4498      	add	r8, r3
 800d530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d534:	429a      	cmp	r2, r3
 800d536:	db15      	blt.n	800d564 <_printf_float+0x344>
 800d538:	6823      	ldr	r3, [r4, #0]
 800d53a:	07da      	lsls	r2, r3, #31
 800d53c:	d412      	bmi.n	800d564 <_printf_float+0x344>
 800d53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d540:	9a06      	ldr	r2, [sp, #24]
 800d542:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d544:	1a9a      	subs	r2, r3, r2
 800d546:	eba3 0a01 	sub.w	sl, r3, r1
 800d54a:	4592      	cmp	sl, r2
 800d54c:	bfa8      	it	ge
 800d54e:	4692      	movge	sl, r2
 800d550:	f1ba 0f00 	cmp.w	sl, #0
 800d554:	dc0e      	bgt.n	800d574 <_printf_float+0x354>
 800d556:	f04f 0800 	mov.w	r8, #0
 800d55a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d55e:	f104 091a 	add.w	r9, r4, #26
 800d562:	e019      	b.n	800d598 <_printf_float+0x378>
 800d564:	9b05      	ldr	r3, [sp, #20]
 800d566:	465a      	mov	r2, fp
 800d568:	4631      	mov	r1, r6
 800d56a:	4628      	mov	r0, r5
 800d56c:	47b8      	blx	r7
 800d56e:	3001      	adds	r0, #1
 800d570:	d1e5      	bne.n	800d53e <_printf_float+0x31e>
 800d572:	e6a3      	b.n	800d2bc <_printf_float+0x9c>
 800d574:	4653      	mov	r3, sl
 800d576:	4642      	mov	r2, r8
 800d578:	4631      	mov	r1, r6
 800d57a:	4628      	mov	r0, r5
 800d57c:	47b8      	blx	r7
 800d57e:	3001      	adds	r0, #1
 800d580:	d1e9      	bne.n	800d556 <_printf_float+0x336>
 800d582:	e69b      	b.n	800d2bc <_printf_float+0x9c>
 800d584:	2301      	movs	r3, #1
 800d586:	464a      	mov	r2, r9
 800d588:	4631      	mov	r1, r6
 800d58a:	4628      	mov	r0, r5
 800d58c:	47b8      	blx	r7
 800d58e:	3001      	adds	r0, #1
 800d590:	f43f ae94 	beq.w	800d2bc <_printf_float+0x9c>
 800d594:	f108 0801 	add.w	r8, r8, #1
 800d598:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d59c:	1a9b      	subs	r3, r3, r2
 800d59e:	eba3 030a 	sub.w	r3, r3, sl
 800d5a2:	4543      	cmp	r3, r8
 800d5a4:	dcee      	bgt.n	800d584 <_printf_float+0x364>
 800d5a6:	e747      	b.n	800d438 <_printf_float+0x218>
 800d5a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5aa:	2a01      	cmp	r2, #1
 800d5ac:	dc01      	bgt.n	800d5b2 <_printf_float+0x392>
 800d5ae:	07db      	lsls	r3, r3, #31
 800d5b0:	d539      	bpl.n	800d626 <_printf_float+0x406>
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	4642      	mov	r2, r8
 800d5b6:	4631      	mov	r1, r6
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	47b8      	blx	r7
 800d5bc:	3001      	adds	r0, #1
 800d5be:	f43f ae7d 	beq.w	800d2bc <_printf_float+0x9c>
 800d5c2:	9b05      	ldr	r3, [sp, #20]
 800d5c4:	465a      	mov	r2, fp
 800d5c6:	4631      	mov	r1, r6
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	47b8      	blx	r7
 800d5cc:	3001      	adds	r0, #1
 800d5ce:	f108 0801 	add.w	r8, r8, #1
 800d5d2:	f43f ae73 	beq.w	800d2bc <_printf_float+0x9c>
 800d5d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d5da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d5e8:	d018      	beq.n	800d61c <_printf_float+0x3fc>
 800d5ea:	4642      	mov	r2, r8
 800d5ec:	4631      	mov	r1, r6
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	47b8      	blx	r7
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	d10e      	bne.n	800d614 <_printf_float+0x3f4>
 800d5f6:	e661      	b.n	800d2bc <_printf_float+0x9c>
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	464a      	mov	r2, r9
 800d5fc:	4631      	mov	r1, r6
 800d5fe:	4628      	mov	r0, r5
 800d600:	47b8      	blx	r7
 800d602:	3001      	adds	r0, #1
 800d604:	f43f ae5a 	beq.w	800d2bc <_printf_float+0x9c>
 800d608:	f108 0801 	add.w	r8, r8, #1
 800d60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d60e:	3b01      	subs	r3, #1
 800d610:	4543      	cmp	r3, r8
 800d612:	dcf1      	bgt.n	800d5f8 <_printf_float+0x3d8>
 800d614:	4653      	mov	r3, sl
 800d616:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d61a:	e6dd      	b.n	800d3d8 <_printf_float+0x1b8>
 800d61c:	f04f 0800 	mov.w	r8, #0
 800d620:	f104 091a 	add.w	r9, r4, #26
 800d624:	e7f2      	b.n	800d60c <_printf_float+0x3ec>
 800d626:	2301      	movs	r3, #1
 800d628:	e7df      	b.n	800d5ea <_printf_float+0x3ca>
 800d62a:	2301      	movs	r3, #1
 800d62c:	464a      	mov	r2, r9
 800d62e:	4631      	mov	r1, r6
 800d630:	4628      	mov	r0, r5
 800d632:	47b8      	blx	r7
 800d634:	3001      	adds	r0, #1
 800d636:	f43f ae41 	beq.w	800d2bc <_printf_float+0x9c>
 800d63a:	f108 0801 	add.w	r8, r8, #1
 800d63e:	68e3      	ldr	r3, [r4, #12]
 800d640:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d642:	1a9b      	subs	r3, r3, r2
 800d644:	4543      	cmp	r3, r8
 800d646:	dcf0      	bgt.n	800d62a <_printf_float+0x40a>
 800d648:	e6fa      	b.n	800d440 <_printf_float+0x220>
 800d64a:	f04f 0800 	mov.w	r8, #0
 800d64e:	f104 0919 	add.w	r9, r4, #25
 800d652:	e7f4      	b.n	800d63e <_printf_float+0x41e>
 800d654:	2900      	cmp	r1, #0
 800d656:	f43f ae8a 	beq.w	800d36e <_printf_float+0x14e>
 800d65a:	f04f 0c00 	mov.w	ip, #0
 800d65e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800d662:	e9cd 0900 	strd	r0, r9, [sp]
 800d666:	6022      	str	r2, [r4, #0]
 800d668:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d66c:	4628      	mov	r0, r5
 800d66e:	f7ff fd51 	bl	800d114 <__cvt>
 800d672:	4680      	mov	r8, r0
 800d674:	e64a      	b.n	800d30c <_printf_float+0xec>
 800d676:	bf00      	nop

0800d678 <_printf_common>:
 800d678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d67c:	4691      	mov	r9, r2
 800d67e:	461f      	mov	r7, r3
 800d680:	688a      	ldr	r2, [r1, #8]
 800d682:	690b      	ldr	r3, [r1, #16]
 800d684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d688:	4293      	cmp	r3, r2
 800d68a:	bfb8      	it	lt
 800d68c:	4613      	movlt	r3, r2
 800d68e:	f8c9 3000 	str.w	r3, [r9]
 800d692:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d696:	4606      	mov	r6, r0
 800d698:	460c      	mov	r4, r1
 800d69a:	b112      	cbz	r2, 800d6a2 <_printf_common+0x2a>
 800d69c:	3301      	adds	r3, #1
 800d69e:	f8c9 3000 	str.w	r3, [r9]
 800d6a2:	6823      	ldr	r3, [r4, #0]
 800d6a4:	0699      	lsls	r1, r3, #26
 800d6a6:	bf42      	ittt	mi
 800d6a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d6ac:	3302      	addmi	r3, #2
 800d6ae:	f8c9 3000 	strmi.w	r3, [r9]
 800d6b2:	6825      	ldr	r5, [r4, #0]
 800d6b4:	f015 0506 	ands.w	r5, r5, #6
 800d6b8:	d107      	bne.n	800d6ca <_printf_common+0x52>
 800d6ba:	f104 0a19 	add.w	sl, r4, #25
 800d6be:	68e3      	ldr	r3, [r4, #12]
 800d6c0:	f8d9 2000 	ldr.w	r2, [r9]
 800d6c4:	1a9b      	subs	r3, r3, r2
 800d6c6:	42ab      	cmp	r3, r5
 800d6c8:	dc28      	bgt.n	800d71c <_printf_common+0xa4>
 800d6ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d6ce:	6822      	ldr	r2, [r4, #0]
 800d6d0:	3300      	adds	r3, #0
 800d6d2:	bf18      	it	ne
 800d6d4:	2301      	movne	r3, #1
 800d6d6:	0692      	lsls	r2, r2, #26
 800d6d8:	d42d      	bmi.n	800d736 <_printf_common+0xbe>
 800d6da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6de:	4639      	mov	r1, r7
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	47c0      	blx	r8
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	d020      	beq.n	800d72a <_printf_common+0xb2>
 800d6e8:	6823      	ldr	r3, [r4, #0]
 800d6ea:	68e5      	ldr	r5, [r4, #12]
 800d6ec:	f8d9 2000 	ldr.w	r2, [r9]
 800d6f0:	f003 0306 	and.w	r3, r3, #6
 800d6f4:	2b04      	cmp	r3, #4
 800d6f6:	bf08      	it	eq
 800d6f8:	1aad      	subeq	r5, r5, r2
 800d6fa:	68a3      	ldr	r3, [r4, #8]
 800d6fc:	6922      	ldr	r2, [r4, #16]
 800d6fe:	bf0c      	ite	eq
 800d700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d704:	2500      	movne	r5, #0
 800d706:	4293      	cmp	r3, r2
 800d708:	bfc4      	itt	gt
 800d70a:	1a9b      	subgt	r3, r3, r2
 800d70c:	18ed      	addgt	r5, r5, r3
 800d70e:	f04f 0900 	mov.w	r9, #0
 800d712:	341a      	adds	r4, #26
 800d714:	454d      	cmp	r5, r9
 800d716:	d11a      	bne.n	800d74e <_printf_common+0xd6>
 800d718:	2000      	movs	r0, #0
 800d71a:	e008      	b.n	800d72e <_printf_common+0xb6>
 800d71c:	2301      	movs	r3, #1
 800d71e:	4652      	mov	r2, sl
 800d720:	4639      	mov	r1, r7
 800d722:	4630      	mov	r0, r6
 800d724:	47c0      	blx	r8
 800d726:	3001      	adds	r0, #1
 800d728:	d103      	bne.n	800d732 <_printf_common+0xba>
 800d72a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d732:	3501      	adds	r5, #1
 800d734:	e7c3      	b.n	800d6be <_printf_common+0x46>
 800d736:	18e1      	adds	r1, r4, r3
 800d738:	1c5a      	adds	r2, r3, #1
 800d73a:	2030      	movs	r0, #48	; 0x30
 800d73c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d740:	4422      	add	r2, r4
 800d742:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d746:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d74a:	3302      	adds	r3, #2
 800d74c:	e7c5      	b.n	800d6da <_printf_common+0x62>
 800d74e:	2301      	movs	r3, #1
 800d750:	4622      	mov	r2, r4
 800d752:	4639      	mov	r1, r7
 800d754:	4630      	mov	r0, r6
 800d756:	47c0      	blx	r8
 800d758:	3001      	adds	r0, #1
 800d75a:	d0e6      	beq.n	800d72a <_printf_common+0xb2>
 800d75c:	f109 0901 	add.w	r9, r9, #1
 800d760:	e7d8      	b.n	800d714 <_printf_common+0x9c>
	...

0800d764 <_printf_i>:
 800d764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d768:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d76c:	460c      	mov	r4, r1
 800d76e:	7e09      	ldrb	r1, [r1, #24]
 800d770:	b085      	sub	sp, #20
 800d772:	296e      	cmp	r1, #110	; 0x6e
 800d774:	4617      	mov	r7, r2
 800d776:	4606      	mov	r6, r0
 800d778:	4698      	mov	r8, r3
 800d77a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d77c:	f000 80b3 	beq.w	800d8e6 <_printf_i+0x182>
 800d780:	d822      	bhi.n	800d7c8 <_printf_i+0x64>
 800d782:	2963      	cmp	r1, #99	; 0x63
 800d784:	d036      	beq.n	800d7f4 <_printf_i+0x90>
 800d786:	d80a      	bhi.n	800d79e <_printf_i+0x3a>
 800d788:	2900      	cmp	r1, #0
 800d78a:	f000 80b9 	beq.w	800d900 <_printf_i+0x19c>
 800d78e:	2958      	cmp	r1, #88	; 0x58
 800d790:	f000 8083 	beq.w	800d89a <_printf_i+0x136>
 800d794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d798:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d79c:	e032      	b.n	800d804 <_printf_i+0xa0>
 800d79e:	2964      	cmp	r1, #100	; 0x64
 800d7a0:	d001      	beq.n	800d7a6 <_printf_i+0x42>
 800d7a2:	2969      	cmp	r1, #105	; 0x69
 800d7a4:	d1f6      	bne.n	800d794 <_printf_i+0x30>
 800d7a6:	6820      	ldr	r0, [r4, #0]
 800d7a8:	6813      	ldr	r3, [r2, #0]
 800d7aa:	0605      	lsls	r5, r0, #24
 800d7ac:	f103 0104 	add.w	r1, r3, #4
 800d7b0:	d52a      	bpl.n	800d808 <_printf_i+0xa4>
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	6011      	str	r1, [r2, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	da03      	bge.n	800d7c2 <_printf_i+0x5e>
 800d7ba:	222d      	movs	r2, #45	; 0x2d
 800d7bc:	425b      	negs	r3, r3
 800d7be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d7c2:	486f      	ldr	r0, [pc, #444]	; (800d980 <_printf_i+0x21c>)
 800d7c4:	220a      	movs	r2, #10
 800d7c6:	e039      	b.n	800d83c <_printf_i+0xd8>
 800d7c8:	2973      	cmp	r1, #115	; 0x73
 800d7ca:	f000 809d 	beq.w	800d908 <_printf_i+0x1a4>
 800d7ce:	d808      	bhi.n	800d7e2 <_printf_i+0x7e>
 800d7d0:	296f      	cmp	r1, #111	; 0x6f
 800d7d2:	d020      	beq.n	800d816 <_printf_i+0xb2>
 800d7d4:	2970      	cmp	r1, #112	; 0x70
 800d7d6:	d1dd      	bne.n	800d794 <_printf_i+0x30>
 800d7d8:	6823      	ldr	r3, [r4, #0]
 800d7da:	f043 0320 	orr.w	r3, r3, #32
 800d7de:	6023      	str	r3, [r4, #0]
 800d7e0:	e003      	b.n	800d7ea <_printf_i+0x86>
 800d7e2:	2975      	cmp	r1, #117	; 0x75
 800d7e4:	d017      	beq.n	800d816 <_printf_i+0xb2>
 800d7e6:	2978      	cmp	r1, #120	; 0x78
 800d7e8:	d1d4      	bne.n	800d794 <_printf_i+0x30>
 800d7ea:	2378      	movs	r3, #120	; 0x78
 800d7ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d7f0:	4864      	ldr	r0, [pc, #400]	; (800d984 <_printf_i+0x220>)
 800d7f2:	e055      	b.n	800d8a0 <_printf_i+0x13c>
 800d7f4:	6813      	ldr	r3, [r2, #0]
 800d7f6:	1d19      	adds	r1, r3, #4
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6011      	str	r1, [r2, #0]
 800d7fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d804:	2301      	movs	r3, #1
 800d806:	e08c      	b.n	800d922 <_printf_i+0x1be>
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	6011      	str	r1, [r2, #0]
 800d80c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d810:	bf18      	it	ne
 800d812:	b21b      	sxthne	r3, r3
 800d814:	e7cf      	b.n	800d7b6 <_printf_i+0x52>
 800d816:	6813      	ldr	r3, [r2, #0]
 800d818:	6825      	ldr	r5, [r4, #0]
 800d81a:	1d18      	adds	r0, r3, #4
 800d81c:	6010      	str	r0, [r2, #0]
 800d81e:	0628      	lsls	r0, r5, #24
 800d820:	d501      	bpl.n	800d826 <_printf_i+0xc2>
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	e002      	b.n	800d82c <_printf_i+0xc8>
 800d826:	0668      	lsls	r0, r5, #25
 800d828:	d5fb      	bpl.n	800d822 <_printf_i+0xbe>
 800d82a:	881b      	ldrh	r3, [r3, #0]
 800d82c:	4854      	ldr	r0, [pc, #336]	; (800d980 <_printf_i+0x21c>)
 800d82e:	296f      	cmp	r1, #111	; 0x6f
 800d830:	bf14      	ite	ne
 800d832:	220a      	movne	r2, #10
 800d834:	2208      	moveq	r2, #8
 800d836:	2100      	movs	r1, #0
 800d838:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d83c:	6865      	ldr	r5, [r4, #4]
 800d83e:	60a5      	str	r5, [r4, #8]
 800d840:	2d00      	cmp	r5, #0
 800d842:	f2c0 8095 	blt.w	800d970 <_printf_i+0x20c>
 800d846:	6821      	ldr	r1, [r4, #0]
 800d848:	f021 0104 	bic.w	r1, r1, #4
 800d84c:	6021      	str	r1, [r4, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d13d      	bne.n	800d8ce <_printf_i+0x16a>
 800d852:	2d00      	cmp	r5, #0
 800d854:	f040 808e 	bne.w	800d974 <_printf_i+0x210>
 800d858:	4665      	mov	r5, ip
 800d85a:	2a08      	cmp	r2, #8
 800d85c:	d10b      	bne.n	800d876 <_printf_i+0x112>
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	07db      	lsls	r3, r3, #31
 800d862:	d508      	bpl.n	800d876 <_printf_i+0x112>
 800d864:	6923      	ldr	r3, [r4, #16]
 800d866:	6862      	ldr	r2, [r4, #4]
 800d868:	429a      	cmp	r2, r3
 800d86a:	bfde      	ittt	le
 800d86c:	2330      	movle	r3, #48	; 0x30
 800d86e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d872:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d876:	ebac 0305 	sub.w	r3, ip, r5
 800d87a:	6123      	str	r3, [r4, #16]
 800d87c:	f8cd 8000 	str.w	r8, [sp]
 800d880:	463b      	mov	r3, r7
 800d882:	aa03      	add	r2, sp, #12
 800d884:	4621      	mov	r1, r4
 800d886:	4630      	mov	r0, r6
 800d888:	f7ff fef6 	bl	800d678 <_printf_common>
 800d88c:	3001      	adds	r0, #1
 800d88e:	d14d      	bne.n	800d92c <_printf_i+0x1c8>
 800d890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d894:	b005      	add	sp, #20
 800d896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d89a:	4839      	ldr	r0, [pc, #228]	; (800d980 <_printf_i+0x21c>)
 800d89c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d8a0:	6813      	ldr	r3, [r2, #0]
 800d8a2:	6821      	ldr	r1, [r4, #0]
 800d8a4:	1d1d      	adds	r5, r3, #4
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	6015      	str	r5, [r2, #0]
 800d8aa:	060a      	lsls	r2, r1, #24
 800d8ac:	d50b      	bpl.n	800d8c6 <_printf_i+0x162>
 800d8ae:	07ca      	lsls	r2, r1, #31
 800d8b0:	bf44      	itt	mi
 800d8b2:	f041 0120 	orrmi.w	r1, r1, #32
 800d8b6:	6021      	strmi	r1, [r4, #0]
 800d8b8:	b91b      	cbnz	r3, 800d8c2 <_printf_i+0x15e>
 800d8ba:	6822      	ldr	r2, [r4, #0]
 800d8bc:	f022 0220 	bic.w	r2, r2, #32
 800d8c0:	6022      	str	r2, [r4, #0]
 800d8c2:	2210      	movs	r2, #16
 800d8c4:	e7b7      	b.n	800d836 <_printf_i+0xd2>
 800d8c6:	064d      	lsls	r5, r1, #25
 800d8c8:	bf48      	it	mi
 800d8ca:	b29b      	uxthmi	r3, r3
 800d8cc:	e7ef      	b.n	800d8ae <_printf_i+0x14a>
 800d8ce:	4665      	mov	r5, ip
 800d8d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8d4:	fb02 3311 	mls	r3, r2, r1, r3
 800d8d8:	5cc3      	ldrb	r3, [r0, r3]
 800d8da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d8de:	460b      	mov	r3, r1
 800d8e0:	2900      	cmp	r1, #0
 800d8e2:	d1f5      	bne.n	800d8d0 <_printf_i+0x16c>
 800d8e4:	e7b9      	b.n	800d85a <_printf_i+0xf6>
 800d8e6:	6813      	ldr	r3, [r2, #0]
 800d8e8:	6825      	ldr	r5, [r4, #0]
 800d8ea:	6961      	ldr	r1, [r4, #20]
 800d8ec:	1d18      	adds	r0, r3, #4
 800d8ee:	6010      	str	r0, [r2, #0]
 800d8f0:	0628      	lsls	r0, r5, #24
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	d501      	bpl.n	800d8fa <_printf_i+0x196>
 800d8f6:	6019      	str	r1, [r3, #0]
 800d8f8:	e002      	b.n	800d900 <_printf_i+0x19c>
 800d8fa:	066a      	lsls	r2, r5, #25
 800d8fc:	d5fb      	bpl.n	800d8f6 <_printf_i+0x192>
 800d8fe:	8019      	strh	r1, [r3, #0]
 800d900:	2300      	movs	r3, #0
 800d902:	6123      	str	r3, [r4, #16]
 800d904:	4665      	mov	r5, ip
 800d906:	e7b9      	b.n	800d87c <_printf_i+0x118>
 800d908:	6813      	ldr	r3, [r2, #0]
 800d90a:	1d19      	adds	r1, r3, #4
 800d90c:	6011      	str	r1, [r2, #0]
 800d90e:	681d      	ldr	r5, [r3, #0]
 800d910:	6862      	ldr	r2, [r4, #4]
 800d912:	2100      	movs	r1, #0
 800d914:	4628      	mov	r0, r5
 800d916:	f7f2 fceb 	bl	80002f0 <memchr>
 800d91a:	b108      	cbz	r0, 800d920 <_printf_i+0x1bc>
 800d91c:	1b40      	subs	r0, r0, r5
 800d91e:	6060      	str	r0, [r4, #4]
 800d920:	6863      	ldr	r3, [r4, #4]
 800d922:	6123      	str	r3, [r4, #16]
 800d924:	2300      	movs	r3, #0
 800d926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d92a:	e7a7      	b.n	800d87c <_printf_i+0x118>
 800d92c:	6923      	ldr	r3, [r4, #16]
 800d92e:	462a      	mov	r2, r5
 800d930:	4639      	mov	r1, r7
 800d932:	4630      	mov	r0, r6
 800d934:	47c0      	blx	r8
 800d936:	3001      	adds	r0, #1
 800d938:	d0aa      	beq.n	800d890 <_printf_i+0x12c>
 800d93a:	6823      	ldr	r3, [r4, #0]
 800d93c:	079b      	lsls	r3, r3, #30
 800d93e:	d413      	bmi.n	800d968 <_printf_i+0x204>
 800d940:	68e0      	ldr	r0, [r4, #12]
 800d942:	9b03      	ldr	r3, [sp, #12]
 800d944:	4298      	cmp	r0, r3
 800d946:	bfb8      	it	lt
 800d948:	4618      	movlt	r0, r3
 800d94a:	e7a3      	b.n	800d894 <_printf_i+0x130>
 800d94c:	2301      	movs	r3, #1
 800d94e:	464a      	mov	r2, r9
 800d950:	4639      	mov	r1, r7
 800d952:	4630      	mov	r0, r6
 800d954:	47c0      	blx	r8
 800d956:	3001      	adds	r0, #1
 800d958:	d09a      	beq.n	800d890 <_printf_i+0x12c>
 800d95a:	3501      	adds	r5, #1
 800d95c:	68e3      	ldr	r3, [r4, #12]
 800d95e:	9a03      	ldr	r2, [sp, #12]
 800d960:	1a9b      	subs	r3, r3, r2
 800d962:	42ab      	cmp	r3, r5
 800d964:	dcf2      	bgt.n	800d94c <_printf_i+0x1e8>
 800d966:	e7eb      	b.n	800d940 <_printf_i+0x1dc>
 800d968:	2500      	movs	r5, #0
 800d96a:	f104 0919 	add.w	r9, r4, #25
 800d96e:	e7f5      	b.n	800d95c <_printf_i+0x1f8>
 800d970:	2b00      	cmp	r3, #0
 800d972:	d1ac      	bne.n	800d8ce <_printf_i+0x16a>
 800d974:	7803      	ldrb	r3, [r0, #0]
 800d976:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d97a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d97e:	e76c      	b.n	800d85a <_printf_i+0xf6>
 800d980:	0800f220 	.word	0x0800f220
 800d984:	0800f231 	.word	0x0800f231

0800d988 <_raise_r>:
 800d988:	291f      	cmp	r1, #31
 800d98a:	b538      	push	{r3, r4, r5, lr}
 800d98c:	4604      	mov	r4, r0
 800d98e:	460d      	mov	r5, r1
 800d990:	d904      	bls.n	800d99c <_raise_r+0x14>
 800d992:	2316      	movs	r3, #22
 800d994:	6003      	str	r3, [r0, #0]
 800d996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d99a:	bd38      	pop	{r3, r4, r5, pc}
 800d99c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d99e:	b112      	cbz	r2, 800d9a6 <_raise_r+0x1e>
 800d9a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9a4:	b94b      	cbnz	r3, 800d9ba <_raise_r+0x32>
 800d9a6:	4620      	mov	r0, r4
 800d9a8:	f000 f830 	bl	800da0c <_getpid_r>
 800d9ac:	462a      	mov	r2, r5
 800d9ae:	4601      	mov	r1, r0
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9b6:	f000 b817 	b.w	800d9e8 <_kill_r>
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d00a      	beq.n	800d9d4 <_raise_r+0x4c>
 800d9be:	1c59      	adds	r1, r3, #1
 800d9c0:	d103      	bne.n	800d9ca <_raise_r+0x42>
 800d9c2:	2316      	movs	r3, #22
 800d9c4:	6003      	str	r3, [r0, #0]
 800d9c6:	2001      	movs	r0, #1
 800d9c8:	e7e7      	b.n	800d99a <_raise_r+0x12>
 800d9ca:	2400      	movs	r4, #0
 800d9cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	4798      	blx	r3
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	e7e0      	b.n	800d99a <_raise_r+0x12>

0800d9d8 <raise>:
 800d9d8:	4b02      	ldr	r3, [pc, #8]	; (800d9e4 <raise+0xc>)
 800d9da:	4601      	mov	r1, r0
 800d9dc:	6818      	ldr	r0, [r3, #0]
 800d9de:	f7ff bfd3 	b.w	800d988 <_raise_r>
 800d9e2:	bf00      	nop
 800d9e4:	20000018 	.word	0x20000018

0800d9e8 <_kill_r>:
 800d9e8:	b538      	push	{r3, r4, r5, lr}
 800d9ea:	4c07      	ldr	r4, [pc, #28]	; (800da08 <_kill_r+0x20>)
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	4605      	mov	r5, r0
 800d9f0:	4608      	mov	r0, r1
 800d9f2:	4611      	mov	r1, r2
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	f7f4 fa81 	bl	8001efc <_kill>
 800d9fa:	1c43      	adds	r3, r0, #1
 800d9fc:	d102      	bne.n	800da04 <_kill_r+0x1c>
 800d9fe:	6823      	ldr	r3, [r4, #0]
 800da00:	b103      	cbz	r3, 800da04 <_kill_r+0x1c>
 800da02:	602b      	str	r3, [r5, #0]
 800da04:	bd38      	pop	{r3, r4, r5, pc}
 800da06:	bf00      	nop
 800da08:	20006e64 	.word	0x20006e64

0800da0c <_getpid_r>:
 800da0c:	f7f4 ba6e 	b.w	8001eec <_getpid>

0800da10 <_vsiprintf_r>:
 800da10:	b500      	push	{lr}
 800da12:	b09b      	sub	sp, #108	; 0x6c
 800da14:	9100      	str	r1, [sp, #0]
 800da16:	9104      	str	r1, [sp, #16]
 800da18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da1c:	9105      	str	r1, [sp, #20]
 800da1e:	9102      	str	r1, [sp, #8]
 800da20:	4905      	ldr	r1, [pc, #20]	; (800da38 <_vsiprintf_r+0x28>)
 800da22:	9103      	str	r1, [sp, #12]
 800da24:	4669      	mov	r1, sp
 800da26:	f001 fa61 	bl	800eeec <_svfiprintf_r>
 800da2a:	9b00      	ldr	r3, [sp, #0]
 800da2c:	2200      	movs	r2, #0
 800da2e:	701a      	strb	r2, [r3, #0]
 800da30:	b01b      	add	sp, #108	; 0x6c
 800da32:	f85d fb04 	ldr.w	pc, [sp], #4
 800da36:	bf00      	nop
 800da38:	ffff0208 	.word	0xffff0208

0800da3c <vsiprintf>:
 800da3c:	4613      	mov	r3, r2
 800da3e:	460a      	mov	r2, r1
 800da40:	4601      	mov	r1, r0
 800da42:	4802      	ldr	r0, [pc, #8]	; (800da4c <vsiprintf+0x10>)
 800da44:	6800      	ldr	r0, [r0, #0]
 800da46:	f7ff bfe3 	b.w	800da10 <_vsiprintf_r>
 800da4a:	bf00      	nop
 800da4c:	20000018 	.word	0x20000018

0800da50 <__ascii_wctomb>:
 800da50:	b149      	cbz	r1, 800da66 <__ascii_wctomb+0x16>
 800da52:	2aff      	cmp	r2, #255	; 0xff
 800da54:	bf85      	ittet	hi
 800da56:	238a      	movhi	r3, #138	; 0x8a
 800da58:	6003      	strhi	r3, [r0, #0]
 800da5a:	700a      	strbls	r2, [r1, #0]
 800da5c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800da60:	bf98      	it	ls
 800da62:	2001      	movls	r0, #1
 800da64:	4770      	bx	lr
 800da66:	4608      	mov	r0, r1
 800da68:	4770      	bx	lr
	...

0800da6c <__register_exitproc>:
 800da6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da70:	4d2c      	ldr	r5, [pc, #176]	; (800db24 <__register_exitproc+0xb8>)
 800da72:	682c      	ldr	r4, [r5, #0]
 800da74:	4607      	mov	r7, r0
 800da76:	460e      	mov	r6, r1
 800da78:	4691      	mov	r9, r2
 800da7a:	4698      	mov	r8, r3
 800da7c:	b934      	cbnz	r4, 800da8c <__register_exitproc+0x20>
 800da7e:	4b2a      	ldr	r3, [pc, #168]	; (800db28 <__register_exitproc+0xbc>)
 800da80:	4c2a      	ldr	r4, [pc, #168]	; (800db2c <__register_exitproc+0xc0>)
 800da82:	602c      	str	r4, [r5, #0]
 800da84:	b113      	cbz	r3, 800da8c <__register_exitproc+0x20>
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800da8c:	6863      	ldr	r3, [r4, #4]
 800da8e:	2b1f      	cmp	r3, #31
 800da90:	dd3d      	ble.n	800db0e <__register_exitproc+0xa2>
 800da92:	4b27      	ldr	r3, [pc, #156]	; (800db30 <__register_exitproc+0xc4>)
 800da94:	b91b      	cbnz	r3, 800da9e <__register_exitproc+0x32>
 800da96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da9e:	208c      	movs	r0, #140	; 0x8c
 800daa0:	f000 fe30 	bl	800e704 <malloc>
 800daa4:	4604      	mov	r4, r0
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d0f5      	beq.n	800da96 <__register_exitproc+0x2a>
 800daaa:	2300      	movs	r3, #0
 800daac:	682a      	ldr	r2, [r5, #0]
 800daae:	6002      	str	r2, [r0, #0]
 800dab0:	6043      	str	r3, [r0, #4]
 800dab2:	6028      	str	r0, [r5, #0]
 800dab4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800dab8:	b30f      	cbz	r7, 800dafe <__register_exitproc+0x92>
 800daba:	f44f 7084 	mov.w	r0, #264	; 0x108
 800dabe:	f000 fe21 	bl	800e704 <malloc>
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d0e7      	beq.n	800da96 <__register_exitproc+0x2a>
 800dac6:	2300      	movs	r3, #0
 800dac8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800dacc:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800dad0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800dad4:	6862      	ldr	r2, [r4, #4]
 800dad6:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 800dada:	2301      	movs	r3, #1
 800dadc:	4093      	lsls	r3, r2
 800dade:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800dae2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800dae6:	431a      	orrs	r2, r3
 800dae8:	2f02      	cmp	r7, #2
 800daea:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 800daee:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 800daf2:	bf02      	ittt	eq
 800daf4:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800daf8:	4313      	orreq	r3, r2
 800dafa:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800dafe:	6863      	ldr	r3, [r4, #4]
 800db00:	1c5a      	adds	r2, r3, #1
 800db02:	3302      	adds	r3, #2
 800db04:	6062      	str	r2, [r4, #4]
 800db06:	2000      	movs	r0, #0
 800db08:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800db0c:	e7c5      	b.n	800da9a <__register_exitproc+0x2e>
 800db0e:	2f00      	cmp	r7, #0
 800db10:	d0f5      	beq.n	800dafe <__register_exitproc+0x92>
 800db12:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800db16:	2800      	cmp	r0, #0
 800db18:	d1dc      	bne.n	800dad4 <__register_exitproc+0x68>
 800db1a:	4b05      	ldr	r3, [pc, #20]	; (800db30 <__register_exitproc+0xc4>)
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d0ba      	beq.n	800da96 <__register_exitproc+0x2a>
 800db20:	e7cb      	b.n	800daba <__register_exitproc+0x4e>
 800db22:	bf00      	nop
 800db24:	20005ee0 	.word	0x20005ee0
 800db28:	00000000 	.word	0x00000000
 800db2c:	20005e54 	.word	0x20005e54
 800db30:	0800e705 	.word	0x0800e705

0800db34 <quorem>:
 800db34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db38:	6903      	ldr	r3, [r0, #16]
 800db3a:	690c      	ldr	r4, [r1, #16]
 800db3c:	42a3      	cmp	r3, r4
 800db3e:	4680      	mov	r8, r0
 800db40:	f2c0 8082 	blt.w	800dc48 <quorem+0x114>
 800db44:	3c01      	subs	r4, #1
 800db46:	f101 0714 	add.w	r7, r1, #20
 800db4a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800db4e:	f100 0614 	add.w	r6, r0, #20
 800db52:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800db56:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800db5a:	eb06 030c 	add.w	r3, r6, ip
 800db5e:	3501      	adds	r5, #1
 800db60:	eb07 090c 	add.w	r9, r7, ip
 800db64:	9301      	str	r3, [sp, #4]
 800db66:	fbb0 f5f5 	udiv	r5, r0, r5
 800db6a:	b395      	cbz	r5, 800dbd2 <quorem+0x9e>
 800db6c:	f04f 0a00 	mov.w	sl, #0
 800db70:	4638      	mov	r0, r7
 800db72:	46b6      	mov	lr, r6
 800db74:	46d3      	mov	fp, sl
 800db76:	f850 2b04 	ldr.w	r2, [r0], #4
 800db7a:	b293      	uxth	r3, r2
 800db7c:	fb05 a303 	mla	r3, r5, r3, sl
 800db80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db84:	b29b      	uxth	r3, r3
 800db86:	ebab 0303 	sub.w	r3, fp, r3
 800db8a:	0c12      	lsrs	r2, r2, #16
 800db8c:	f8de b000 	ldr.w	fp, [lr]
 800db90:	fb05 a202 	mla	r2, r5, r2, sl
 800db94:	fa13 f38b 	uxtah	r3, r3, fp
 800db98:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800db9c:	fa1f fb82 	uxth.w	fp, r2
 800dba0:	f8de 2000 	ldr.w	r2, [lr]
 800dba4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800dba8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbb2:	4581      	cmp	r9, r0
 800dbb4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800dbb8:	f84e 3b04 	str.w	r3, [lr], #4
 800dbbc:	d2db      	bcs.n	800db76 <quorem+0x42>
 800dbbe:	f856 300c 	ldr.w	r3, [r6, ip]
 800dbc2:	b933      	cbnz	r3, 800dbd2 <quorem+0x9e>
 800dbc4:	9b01      	ldr	r3, [sp, #4]
 800dbc6:	3b04      	subs	r3, #4
 800dbc8:	429e      	cmp	r6, r3
 800dbca:	461a      	mov	r2, r3
 800dbcc:	d330      	bcc.n	800dc30 <quorem+0xfc>
 800dbce:	f8c8 4010 	str.w	r4, [r8, #16]
 800dbd2:	4640      	mov	r0, r8
 800dbd4:	f000 ffb4 	bl	800eb40 <__mcmp>
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	db25      	blt.n	800dc28 <quorem+0xf4>
 800dbdc:	3501      	adds	r5, #1
 800dbde:	4630      	mov	r0, r6
 800dbe0:	f04f 0c00 	mov.w	ip, #0
 800dbe4:	f857 2b04 	ldr.w	r2, [r7], #4
 800dbe8:	f8d0 e000 	ldr.w	lr, [r0]
 800dbec:	b293      	uxth	r3, r2
 800dbee:	ebac 0303 	sub.w	r3, ip, r3
 800dbf2:	0c12      	lsrs	r2, r2, #16
 800dbf4:	fa13 f38e 	uxtah	r3, r3, lr
 800dbf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dbfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc06:	45b9      	cmp	r9, r7
 800dc08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dc0c:	f840 3b04 	str.w	r3, [r0], #4
 800dc10:	d2e8      	bcs.n	800dbe4 <quorem+0xb0>
 800dc12:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800dc16:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800dc1a:	b92a      	cbnz	r2, 800dc28 <quorem+0xf4>
 800dc1c:	3b04      	subs	r3, #4
 800dc1e:	429e      	cmp	r6, r3
 800dc20:	461a      	mov	r2, r3
 800dc22:	d30b      	bcc.n	800dc3c <quorem+0x108>
 800dc24:	f8c8 4010 	str.w	r4, [r8, #16]
 800dc28:	4628      	mov	r0, r5
 800dc2a:	b003      	add	sp, #12
 800dc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc30:	6812      	ldr	r2, [r2, #0]
 800dc32:	3b04      	subs	r3, #4
 800dc34:	2a00      	cmp	r2, #0
 800dc36:	d1ca      	bne.n	800dbce <quorem+0x9a>
 800dc38:	3c01      	subs	r4, #1
 800dc3a:	e7c5      	b.n	800dbc8 <quorem+0x94>
 800dc3c:	6812      	ldr	r2, [r2, #0]
 800dc3e:	3b04      	subs	r3, #4
 800dc40:	2a00      	cmp	r2, #0
 800dc42:	d1ef      	bne.n	800dc24 <quorem+0xf0>
 800dc44:	3c01      	subs	r4, #1
 800dc46:	e7ea      	b.n	800dc1e <quorem+0xea>
 800dc48:	2000      	movs	r0, #0
 800dc4a:	e7ee      	b.n	800dc2a <quorem+0xf6>
 800dc4c:	0000      	movs	r0, r0
	...

0800dc50 <_dtoa_r>:
 800dc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc54:	ec57 6b10 	vmov	r6, r7, d0
 800dc58:	b095      	sub	sp, #84	; 0x54
 800dc5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dc5c:	9108      	str	r1, [sp, #32]
 800dc5e:	4604      	mov	r4, r0
 800dc60:	920a      	str	r2, [sp, #40]	; 0x28
 800dc62:	9311      	str	r3, [sp, #68]	; 0x44
 800dc64:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800dc68:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800dc6c:	b93d      	cbnz	r5, 800dc7e <_dtoa_r+0x2e>
 800dc6e:	2010      	movs	r0, #16
 800dc70:	f000 fd48 	bl	800e704 <malloc>
 800dc74:	6260      	str	r0, [r4, #36]	; 0x24
 800dc76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dc7a:	6005      	str	r5, [r0, #0]
 800dc7c:	60c5      	str	r5, [r0, #12]
 800dc7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc80:	6819      	ldr	r1, [r3, #0]
 800dc82:	b151      	cbz	r1, 800dc9a <_dtoa_r+0x4a>
 800dc84:	685a      	ldr	r2, [r3, #4]
 800dc86:	604a      	str	r2, [r1, #4]
 800dc88:	2301      	movs	r3, #1
 800dc8a:	4093      	lsls	r3, r2
 800dc8c:	608b      	str	r3, [r1, #8]
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f000 fd74 	bl	800e77c <_Bfree>
 800dc94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc96:	2200      	movs	r2, #0
 800dc98:	601a      	str	r2, [r3, #0]
 800dc9a:	1e3b      	subs	r3, r7, #0
 800dc9c:	bfb9      	ittee	lt
 800dc9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dca2:	9303      	strlt	r3, [sp, #12]
 800dca4:	2300      	movge	r3, #0
 800dca6:	f8c8 3000 	strge.w	r3, [r8]
 800dcaa:	9d03      	ldr	r5, [sp, #12]
 800dcac:	4bac      	ldr	r3, [pc, #688]	; (800df60 <_dtoa_r+0x310>)
 800dcae:	bfbc      	itt	lt
 800dcb0:	2201      	movlt	r2, #1
 800dcb2:	f8c8 2000 	strlt.w	r2, [r8]
 800dcb6:	43ab      	bics	r3, r5
 800dcb8:	d11b      	bne.n	800dcf2 <_dtoa_r+0xa2>
 800dcba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dcbc:	f242 730f 	movw	r3, #9999	; 0x270f
 800dcc0:	6013      	str	r3, [r2, #0]
 800dcc2:	9b02      	ldr	r3, [sp, #8]
 800dcc4:	b923      	cbnz	r3, 800dcd0 <_dtoa_r+0x80>
 800dcc6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dcca:	2d00      	cmp	r5, #0
 800dccc:	f000 84dd 	beq.w	800e68a <_dtoa_r+0xa3a>
 800dcd0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dcd2:	b953      	cbnz	r3, 800dcea <_dtoa_r+0x9a>
 800dcd4:	4ba3      	ldr	r3, [pc, #652]	; (800df64 <_dtoa_r+0x314>)
 800dcd6:	e020      	b.n	800dd1a <_dtoa_r+0xca>
 800dcd8:	4ba3      	ldr	r3, [pc, #652]	; (800df68 <_dtoa_r+0x318>)
 800dcda:	9304      	str	r3, [sp, #16]
 800dcdc:	3308      	adds	r3, #8
 800dcde:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dce0:	6013      	str	r3, [r2, #0]
 800dce2:	9804      	ldr	r0, [sp, #16]
 800dce4:	b015      	add	sp, #84	; 0x54
 800dce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcea:	4b9e      	ldr	r3, [pc, #632]	; (800df64 <_dtoa_r+0x314>)
 800dcec:	9304      	str	r3, [sp, #16]
 800dcee:	3303      	adds	r3, #3
 800dcf0:	e7f5      	b.n	800dcde <_dtoa_r+0x8e>
 800dcf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcf6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dcfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcfe:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dd02:	d10c      	bne.n	800dd1e <_dtoa_r+0xce>
 800dd04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dd06:	2301      	movs	r3, #1
 800dd08:	6013      	str	r3, [r2, #0]
 800dd0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f000 84b9 	beq.w	800e684 <_dtoa_r+0xa34>
 800dd12:	4b96      	ldr	r3, [pc, #600]	; (800df6c <_dtoa_r+0x31c>)
 800dd14:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dd16:	6013      	str	r3, [r2, #0]
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	9304      	str	r3, [sp, #16]
 800dd1c:	e7e1      	b.n	800dce2 <_dtoa_r+0x92>
 800dd1e:	a913      	add	r1, sp, #76	; 0x4c
 800dd20:	aa12      	add	r2, sp, #72	; 0x48
 800dd22:	ed9d 0b04 	vldr	d0, [sp, #16]
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 ff81 	bl	800ec2e <__d2b>
 800dd2c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800dd30:	9001      	str	r0, [sp, #4]
 800dd32:	9912      	ldr	r1, [sp, #72]	; 0x48
 800dd34:	2e00      	cmp	r6, #0
 800dd36:	d046      	beq.n	800ddc6 <_dtoa_r+0x176>
 800dd38:	9805      	ldr	r0, [sp, #20]
 800dd3a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800dd3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd42:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800dd46:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd4a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800dd4e:	2700      	movs	r7, #0
 800dd50:	ee07 aa90 	vmov	s15, sl
 800dd54:	ec43 2b16 	vmov	d6, r2, r3
 800dd58:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800dd5c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800df48 <_dtoa_r+0x2f8>
 800dd60:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800dd64:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dd68:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800df50 <_dtoa_r+0x300>
 800dd6c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800dd70:	eeb0 7b46 	vmov.f64	d7, d6
 800dd74:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800df58 <_dtoa_r+0x308>
 800dd78:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dd7c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800dd80:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800dd84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd88:	ee16 ba90 	vmov	fp, s13
 800dd8c:	d508      	bpl.n	800dda0 <_dtoa_r+0x150>
 800dd8e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800dd92:	eeb4 6b47 	vcmp.f64	d6, d7
 800dd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd9a:	bf18      	it	ne
 800dd9c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800dda0:	f1bb 0f16 	cmp.w	fp, #22
 800dda4:	d834      	bhi.n	800de10 <_dtoa_r+0x1c0>
 800dda6:	4b72      	ldr	r3, [pc, #456]	; (800df70 <_dtoa_r+0x320>)
 800dda8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ddac:	ed93 7b00 	vldr	d7, [r3]
 800ddb0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ddb4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ddb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddbc:	dd01      	ble.n	800ddc2 <_dtoa_r+0x172>
 800ddbe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	e025      	b.n	800de12 <_dtoa_r+0x1c2>
 800ddc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ddc8:	eb01 0a03 	add.w	sl, r1, r3
 800ddcc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800ddd0:	2b20      	cmp	r3, #32
 800ddd2:	dd17      	ble.n	800de04 <_dtoa_r+0x1b4>
 800ddd4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800ddd8:	9a02      	ldr	r2, [sp, #8]
 800ddda:	409d      	lsls	r5, r3
 800dddc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800dde0:	fa22 f303 	lsr.w	r3, r2, r3
 800dde4:	432b      	orrs	r3, r5
 800dde6:	ee07 3a90 	vmov	s15, r3
 800ddea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ddee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ddf2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ddf6:	9805      	ldr	r0, [sp, #20]
 800ddf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddfc:	2701      	movs	r7, #1
 800ddfe:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800de02:	e7a5      	b.n	800dd50 <_dtoa_r+0x100>
 800de04:	9a02      	ldr	r2, [sp, #8]
 800de06:	f1c3 0320 	rsb	r3, r3, #32
 800de0a:	fa02 f303 	lsl.w	r3, r2, r3
 800de0e:	e7ea      	b.n	800dde6 <_dtoa_r+0x196>
 800de10:	2301      	movs	r3, #1
 800de12:	eba1 0a0a 	sub.w	sl, r1, sl
 800de16:	9310      	str	r3, [sp, #64]	; 0x40
 800de18:	f1ba 0301 	subs.w	r3, sl, #1
 800de1c:	9307      	str	r3, [sp, #28]
 800de1e:	bf43      	ittte	mi
 800de20:	2300      	movmi	r3, #0
 800de22:	f1ca 0a01 	rsbmi	sl, sl, #1
 800de26:	9307      	strmi	r3, [sp, #28]
 800de28:	f04f 0a00 	movpl.w	sl, #0
 800de2c:	f1bb 0f00 	cmp.w	fp, #0
 800de30:	db19      	blt.n	800de66 <_dtoa_r+0x216>
 800de32:	9b07      	ldr	r3, [sp, #28]
 800de34:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800de38:	445b      	add	r3, fp
 800de3a:	9307      	str	r3, [sp, #28]
 800de3c:	f04f 0800 	mov.w	r8, #0
 800de40:	9b08      	ldr	r3, [sp, #32]
 800de42:	2b09      	cmp	r3, #9
 800de44:	d866      	bhi.n	800df14 <_dtoa_r+0x2c4>
 800de46:	2b05      	cmp	r3, #5
 800de48:	bfc4      	itt	gt
 800de4a:	3b04      	subgt	r3, #4
 800de4c:	9308      	strgt	r3, [sp, #32]
 800de4e:	9b08      	ldr	r3, [sp, #32]
 800de50:	f1a3 0302 	sub.w	r3, r3, #2
 800de54:	bfcc      	ite	gt
 800de56:	2500      	movgt	r5, #0
 800de58:	2501      	movle	r5, #1
 800de5a:	2b03      	cmp	r3, #3
 800de5c:	d866      	bhi.n	800df2c <_dtoa_r+0x2dc>
 800de5e:	e8df f003 	tbb	[pc, r3]
 800de62:	5755      	.short	0x5755
 800de64:	4909      	.short	0x4909
 800de66:	2300      	movs	r3, #0
 800de68:	ebaa 0a0b 	sub.w	sl, sl, fp
 800de6c:	f1cb 0800 	rsb	r8, fp, #0
 800de70:	930b      	str	r3, [sp, #44]	; 0x2c
 800de72:	e7e5      	b.n	800de40 <_dtoa_r+0x1f0>
 800de74:	2301      	movs	r3, #1
 800de76:	9309      	str	r3, [sp, #36]	; 0x24
 800de78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	dd59      	ble.n	800df32 <_dtoa_r+0x2e2>
 800de7e:	9306      	str	r3, [sp, #24]
 800de80:	4699      	mov	r9, r3
 800de82:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800de84:	2200      	movs	r2, #0
 800de86:	6072      	str	r2, [r6, #4]
 800de88:	2204      	movs	r2, #4
 800de8a:	f102 0014 	add.w	r0, r2, #20
 800de8e:	4298      	cmp	r0, r3
 800de90:	6871      	ldr	r1, [r6, #4]
 800de92:	d953      	bls.n	800df3c <_dtoa_r+0x2ec>
 800de94:	4620      	mov	r0, r4
 800de96:	f000 fc3d 	bl	800e714 <_Balloc>
 800de9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de9c:	6030      	str	r0, [r6, #0]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	9304      	str	r3, [sp, #16]
 800dea2:	f1b9 0f0e 	cmp.w	r9, #14
 800dea6:	f200 80c2 	bhi.w	800e02e <_dtoa_r+0x3de>
 800deaa:	2d00      	cmp	r5, #0
 800deac:	f000 80bf 	beq.w	800e02e <_dtoa_r+0x3de>
 800deb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800deb4:	f1bb 0f00 	cmp.w	fp, #0
 800deb8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800debc:	f340 80e6 	ble.w	800e08c <_dtoa_r+0x43c>
 800dec0:	4a2b      	ldr	r2, [pc, #172]	; (800df70 <_dtoa_r+0x320>)
 800dec2:	f00b 030f 	and.w	r3, fp, #15
 800dec6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800deca:	ed93 7b00 	vldr	d7, [r3]
 800dece:	ea4f 132b 	mov.w	r3, fp, asr #4
 800ded2:	06da      	lsls	r2, r3, #27
 800ded4:	f140 80d8 	bpl.w	800e088 <_dtoa_r+0x438>
 800ded8:	4a26      	ldr	r2, [pc, #152]	; (800df74 <_dtoa_r+0x324>)
 800deda:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800dede:	ed92 6b08 	vldr	d6, [r2, #32]
 800dee2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800dee6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800deea:	f003 030f 	and.w	r3, r3, #15
 800deee:	2203      	movs	r2, #3
 800def0:	4920      	ldr	r1, [pc, #128]	; (800df74 <_dtoa_r+0x324>)
 800def2:	e04a      	b.n	800df8a <_dtoa_r+0x33a>
 800def4:	2301      	movs	r3, #1
 800def6:	9309      	str	r3, [sp, #36]	; 0x24
 800def8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800defa:	445b      	add	r3, fp
 800defc:	f103 0901 	add.w	r9, r3, #1
 800df00:	9306      	str	r3, [sp, #24]
 800df02:	464b      	mov	r3, r9
 800df04:	2b01      	cmp	r3, #1
 800df06:	bfb8      	it	lt
 800df08:	2301      	movlt	r3, #1
 800df0a:	e7ba      	b.n	800de82 <_dtoa_r+0x232>
 800df0c:	2300      	movs	r3, #0
 800df0e:	e7b2      	b.n	800de76 <_dtoa_r+0x226>
 800df10:	2300      	movs	r3, #0
 800df12:	e7f0      	b.n	800def6 <_dtoa_r+0x2a6>
 800df14:	2501      	movs	r5, #1
 800df16:	2300      	movs	r3, #0
 800df18:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800df1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df20:	9306      	str	r3, [sp, #24]
 800df22:	4699      	mov	r9, r3
 800df24:	2200      	movs	r2, #0
 800df26:	2312      	movs	r3, #18
 800df28:	920a      	str	r2, [sp, #40]	; 0x28
 800df2a:	e7aa      	b.n	800de82 <_dtoa_r+0x232>
 800df2c:	2301      	movs	r3, #1
 800df2e:	9309      	str	r3, [sp, #36]	; 0x24
 800df30:	e7f4      	b.n	800df1c <_dtoa_r+0x2cc>
 800df32:	2301      	movs	r3, #1
 800df34:	9306      	str	r3, [sp, #24]
 800df36:	4699      	mov	r9, r3
 800df38:	461a      	mov	r2, r3
 800df3a:	e7f5      	b.n	800df28 <_dtoa_r+0x2d8>
 800df3c:	3101      	adds	r1, #1
 800df3e:	6071      	str	r1, [r6, #4]
 800df40:	0052      	lsls	r2, r2, #1
 800df42:	e7a2      	b.n	800de8a <_dtoa_r+0x23a>
 800df44:	f3af 8000 	nop.w
 800df48:	636f4361 	.word	0x636f4361
 800df4c:	3fd287a7 	.word	0x3fd287a7
 800df50:	8b60c8b3 	.word	0x8b60c8b3
 800df54:	3fc68a28 	.word	0x3fc68a28
 800df58:	509f79fb 	.word	0x509f79fb
 800df5c:	3fd34413 	.word	0x3fd34413
 800df60:	7ff00000 	.word	0x7ff00000
 800df64:	0800f34c 	.word	0x0800f34c
 800df68:	0800f343 	.word	0x0800f343
 800df6c:	0800f21f 	.word	0x0800f21f
 800df70:	0800f3d8 	.word	0x0800f3d8
 800df74:	0800f3b0 	.word	0x0800f3b0
 800df78:	07de      	lsls	r6, r3, #31
 800df7a:	d504      	bpl.n	800df86 <_dtoa_r+0x336>
 800df7c:	ed91 6b00 	vldr	d6, [r1]
 800df80:	3201      	adds	r2, #1
 800df82:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df86:	105b      	asrs	r3, r3, #1
 800df88:	3108      	adds	r1, #8
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d1f4      	bne.n	800df78 <_dtoa_r+0x328>
 800df8e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800df92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800df96:	ed8d 7b02 	vstr	d7, [sp, #8]
 800df9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	f000 80a7 	beq.w	800e0f0 <_dtoa_r+0x4a0>
 800dfa2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dfa6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dfaa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dfae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfb2:	f140 809d 	bpl.w	800e0f0 <_dtoa_r+0x4a0>
 800dfb6:	f1b9 0f00 	cmp.w	r9, #0
 800dfba:	f000 8099 	beq.w	800e0f0 <_dtoa_r+0x4a0>
 800dfbe:	9b06      	ldr	r3, [sp, #24]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	dd30      	ble.n	800e026 <_dtoa_r+0x3d6>
 800dfc4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800dfc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dfcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dfd0:	9d06      	ldr	r5, [sp, #24]
 800dfd2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800dfd6:	3201      	adds	r2, #1
 800dfd8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dfdc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800dfe0:	ee07 2a90 	vmov	s15, r2
 800dfe4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dfe8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800dfec:	ed8d 5b02 	vstr	d5, [sp, #8]
 800dff0:	9a03      	ldr	r2, [sp, #12]
 800dff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dff6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800dffa:	2d00      	cmp	r5, #0
 800dffc:	d17b      	bne.n	800e0f6 <_dtoa_r+0x4a6>
 800dffe:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e002:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e006:	ec41 0b17 	vmov	d7, r0, r1
 800e00a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e012:	f300 8253 	bgt.w	800e4bc <_dtoa_r+0x86c>
 800e016:	eeb1 7b47 	vneg.f64	d7, d7
 800e01a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e022:	f100 8249 	bmi.w	800e4b8 <_dtoa_r+0x868>
 800e026:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e02a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e02e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e030:	2b00      	cmp	r3, #0
 800e032:	f2c0 8119 	blt.w	800e268 <_dtoa_r+0x618>
 800e036:	f1bb 0f0e 	cmp.w	fp, #14
 800e03a:	f300 8115 	bgt.w	800e268 <_dtoa_r+0x618>
 800e03e:	4bc3      	ldr	r3, [pc, #780]	; (800e34c <_dtoa_r+0x6fc>)
 800e040:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e044:	ed93 6b00 	vldr	d6, [r3]
 800e048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	f280 80ba 	bge.w	800e1c4 <_dtoa_r+0x574>
 800e050:	f1b9 0f00 	cmp.w	r9, #0
 800e054:	f300 80b6 	bgt.w	800e1c4 <_dtoa_r+0x574>
 800e058:	f040 822d 	bne.w	800e4b6 <_dtoa_r+0x866>
 800e05c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e060:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e064:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e068:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e070:	464d      	mov	r5, r9
 800e072:	464f      	mov	r7, r9
 800e074:	f280 8204 	bge.w	800e480 <_dtoa_r+0x830>
 800e078:	9b04      	ldr	r3, [sp, #16]
 800e07a:	9a04      	ldr	r2, [sp, #16]
 800e07c:	1c5e      	adds	r6, r3, #1
 800e07e:	2331      	movs	r3, #49	; 0x31
 800e080:	7013      	strb	r3, [r2, #0]
 800e082:	f10b 0b01 	add.w	fp, fp, #1
 800e086:	e1ff      	b.n	800e488 <_dtoa_r+0x838>
 800e088:	2202      	movs	r2, #2
 800e08a:	e731      	b.n	800def0 <_dtoa_r+0x2a0>
 800e08c:	d02e      	beq.n	800e0ec <_dtoa_r+0x49c>
 800e08e:	f1cb 0300 	rsb	r3, fp, #0
 800e092:	4aae      	ldr	r2, [pc, #696]	; (800e34c <_dtoa_r+0x6fc>)
 800e094:	f003 010f 	and.w	r1, r3, #15
 800e098:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e09c:	ed92 7b00 	vldr	d7, [r2]
 800e0a0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800e0a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e0a8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e0ac:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800e0b0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e0b4:	49a6      	ldr	r1, [pc, #664]	; (800e350 <_dtoa_r+0x700>)
 800e0b6:	111b      	asrs	r3, r3, #4
 800e0b8:	2000      	movs	r0, #0
 800e0ba:	2202      	movs	r2, #2
 800e0bc:	b93b      	cbnz	r3, 800e0ce <_dtoa_r+0x47e>
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	f43f af6b 	beq.w	800df9a <_dtoa_r+0x34a>
 800e0c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e0c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0cc:	e765      	b.n	800df9a <_dtoa_r+0x34a>
 800e0ce:	07dd      	lsls	r5, r3, #31
 800e0d0:	d509      	bpl.n	800e0e6 <_dtoa_r+0x496>
 800e0d2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e0d6:	ed91 7b00 	vldr	d7, [r1]
 800e0da:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e0de:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e0e2:	3201      	adds	r2, #1
 800e0e4:	2001      	movs	r0, #1
 800e0e6:	105b      	asrs	r3, r3, #1
 800e0e8:	3108      	adds	r1, #8
 800e0ea:	e7e7      	b.n	800e0bc <_dtoa_r+0x46c>
 800e0ec:	2202      	movs	r2, #2
 800e0ee:	e754      	b.n	800df9a <_dtoa_r+0x34a>
 800e0f0:	465b      	mov	r3, fp
 800e0f2:	464d      	mov	r5, r9
 800e0f4:	e770      	b.n	800dfd8 <_dtoa_r+0x388>
 800e0f6:	4a95      	ldr	r2, [pc, #596]	; (800e34c <_dtoa_r+0x6fc>)
 800e0f8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800e0fc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e102:	ec41 0b17 	vmov	d7, r0, r1
 800e106:	b35a      	cbz	r2, 800e160 <_dtoa_r+0x510>
 800e108:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e10c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e110:	9e04      	ldr	r6, [sp, #16]
 800e112:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e116:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e11a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e11e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e122:	ee14 2a90 	vmov	r2, s9
 800e126:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e12a:	3230      	adds	r2, #48	; 0x30
 800e12c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e130:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e138:	f806 2b01 	strb.w	r2, [r6], #1
 800e13c:	d43b      	bmi.n	800e1b6 <_dtoa_r+0x566>
 800e13e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e142:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e14a:	d472      	bmi.n	800e232 <_dtoa_r+0x5e2>
 800e14c:	9a04      	ldr	r2, [sp, #16]
 800e14e:	1ab2      	subs	r2, r6, r2
 800e150:	4295      	cmp	r5, r2
 800e152:	f77f af68 	ble.w	800e026 <_dtoa_r+0x3d6>
 800e156:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e15a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e15e:	e7de      	b.n	800e11e <_dtoa_r+0x4ce>
 800e160:	9a04      	ldr	r2, [sp, #16]
 800e162:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e166:	1956      	adds	r6, r2, r5
 800e168:	4611      	mov	r1, r2
 800e16a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e16e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e172:	ee14 2a90 	vmov	r2, s9
 800e176:	3230      	adds	r2, #48	; 0x30
 800e178:	f801 2b01 	strb.w	r2, [r1], #1
 800e17c:	42b1      	cmp	r1, r6
 800e17e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e182:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e186:	d11a      	bne.n	800e1be <_dtoa_r+0x56e>
 800e188:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e18c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e190:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e198:	dc4b      	bgt.n	800e232 <_dtoa_r+0x5e2>
 800e19a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e19e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a6:	f57f af3e 	bpl.w	800e026 <_dtoa_r+0x3d6>
 800e1aa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e1ae:	2a30      	cmp	r2, #48	; 0x30
 800e1b0:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800e1b4:	d001      	beq.n	800e1ba <_dtoa_r+0x56a>
 800e1b6:	469b      	mov	fp, r3
 800e1b8:	e02a      	b.n	800e210 <_dtoa_r+0x5c0>
 800e1ba:	460e      	mov	r6, r1
 800e1bc:	e7f5      	b.n	800e1aa <_dtoa_r+0x55a>
 800e1be:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e1c2:	e7d4      	b.n	800e16e <_dtoa_r+0x51e>
 800e1c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1c8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e1cc:	9e04      	ldr	r6, [sp, #16]
 800e1ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e1d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e1d6:	ee15 3a10 	vmov	r3, s10
 800e1da:	3330      	adds	r3, #48	; 0x30
 800e1dc:	f806 3b01 	strb.w	r3, [r6], #1
 800e1e0:	9b04      	ldr	r3, [sp, #16]
 800e1e2:	1af3      	subs	r3, r6, r3
 800e1e4:	4599      	cmp	r9, r3
 800e1e6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e1ea:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e1ee:	d133      	bne.n	800e258 <_dtoa_r+0x608>
 800e1f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e1f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1fc:	dc18      	bgt.n	800e230 <_dtoa_r+0x5e0>
 800e1fe:	eeb4 7b46 	vcmp.f64	d7, d6
 800e202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e206:	d103      	bne.n	800e210 <_dtoa_r+0x5c0>
 800e208:	ee15 3a10 	vmov	r3, s10
 800e20c:	07db      	lsls	r3, r3, #31
 800e20e:	d40f      	bmi.n	800e230 <_dtoa_r+0x5e0>
 800e210:	9901      	ldr	r1, [sp, #4]
 800e212:	4620      	mov	r0, r4
 800e214:	f000 fab2 	bl	800e77c <_Bfree>
 800e218:	2300      	movs	r3, #0
 800e21a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e21c:	7033      	strb	r3, [r6, #0]
 800e21e:	f10b 0301 	add.w	r3, fp, #1
 800e222:	6013      	str	r3, [r2, #0]
 800e224:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e226:	2b00      	cmp	r3, #0
 800e228:	f43f ad5b 	beq.w	800dce2 <_dtoa_r+0x92>
 800e22c:	601e      	str	r6, [r3, #0]
 800e22e:	e558      	b.n	800dce2 <_dtoa_r+0x92>
 800e230:	465b      	mov	r3, fp
 800e232:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e236:	2939      	cmp	r1, #57	; 0x39
 800e238:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800e23c:	d106      	bne.n	800e24c <_dtoa_r+0x5fc>
 800e23e:	9904      	ldr	r1, [sp, #16]
 800e240:	4291      	cmp	r1, r2
 800e242:	d107      	bne.n	800e254 <_dtoa_r+0x604>
 800e244:	2230      	movs	r2, #48	; 0x30
 800e246:	700a      	strb	r2, [r1, #0]
 800e248:	3301      	adds	r3, #1
 800e24a:	460a      	mov	r2, r1
 800e24c:	7811      	ldrb	r1, [r2, #0]
 800e24e:	3101      	adds	r1, #1
 800e250:	7011      	strb	r1, [r2, #0]
 800e252:	e7b0      	b.n	800e1b6 <_dtoa_r+0x566>
 800e254:	4616      	mov	r6, r2
 800e256:	e7ec      	b.n	800e232 <_dtoa_r+0x5e2>
 800e258:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e25c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e264:	d1b3      	bne.n	800e1ce <_dtoa_r+0x57e>
 800e266:	e7d3      	b.n	800e210 <_dtoa_r+0x5c0>
 800e268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e26a:	2a00      	cmp	r2, #0
 800e26c:	f000 808d 	beq.w	800e38a <_dtoa_r+0x73a>
 800e270:	9a08      	ldr	r2, [sp, #32]
 800e272:	2a01      	cmp	r2, #1
 800e274:	dc72      	bgt.n	800e35c <_dtoa_r+0x70c>
 800e276:	2f00      	cmp	r7, #0
 800e278:	d06c      	beq.n	800e354 <_dtoa_r+0x704>
 800e27a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e27e:	4645      	mov	r5, r8
 800e280:	4656      	mov	r6, sl
 800e282:	9a07      	ldr	r2, [sp, #28]
 800e284:	2101      	movs	r1, #1
 800e286:	441a      	add	r2, r3
 800e288:	4620      	mov	r0, r4
 800e28a:	449a      	add	sl, r3
 800e28c:	9207      	str	r2, [sp, #28]
 800e28e:	f000 fb15 	bl	800e8bc <__i2b>
 800e292:	4607      	mov	r7, r0
 800e294:	2e00      	cmp	r6, #0
 800e296:	dd0b      	ble.n	800e2b0 <_dtoa_r+0x660>
 800e298:	9b07      	ldr	r3, [sp, #28]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	dd08      	ble.n	800e2b0 <_dtoa_r+0x660>
 800e29e:	42b3      	cmp	r3, r6
 800e2a0:	9a07      	ldr	r2, [sp, #28]
 800e2a2:	bfa8      	it	ge
 800e2a4:	4633      	movge	r3, r6
 800e2a6:	ebaa 0a03 	sub.w	sl, sl, r3
 800e2aa:	1af6      	subs	r6, r6, r3
 800e2ac:	1ad3      	subs	r3, r2, r3
 800e2ae:	9307      	str	r3, [sp, #28]
 800e2b0:	f1b8 0f00 	cmp.w	r8, #0
 800e2b4:	d01d      	beq.n	800e2f2 <_dtoa_r+0x6a2>
 800e2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d06a      	beq.n	800e392 <_dtoa_r+0x742>
 800e2bc:	b18d      	cbz	r5, 800e2e2 <_dtoa_r+0x692>
 800e2be:	4639      	mov	r1, r7
 800e2c0:	462a      	mov	r2, r5
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f000 fb9a 	bl	800e9fc <__pow5mult>
 800e2c8:	9a01      	ldr	r2, [sp, #4]
 800e2ca:	4601      	mov	r1, r0
 800e2cc:	4607      	mov	r7, r0
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	f000 fafd 	bl	800e8ce <__multiply>
 800e2d4:	9901      	ldr	r1, [sp, #4]
 800e2d6:	900c      	str	r0, [sp, #48]	; 0x30
 800e2d8:	4620      	mov	r0, r4
 800e2da:	f000 fa4f 	bl	800e77c <_Bfree>
 800e2de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2e0:	9301      	str	r3, [sp, #4]
 800e2e2:	ebb8 0205 	subs.w	r2, r8, r5
 800e2e6:	d004      	beq.n	800e2f2 <_dtoa_r+0x6a2>
 800e2e8:	9901      	ldr	r1, [sp, #4]
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	f000 fb86 	bl	800e9fc <__pow5mult>
 800e2f0:	9001      	str	r0, [sp, #4]
 800e2f2:	2101      	movs	r1, #1
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	f000 fae1 	bl	800e8bc <__i2b>
 800e2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2fc:	4605      	mov	r5, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f000 81ca 	beq.w	800e698 <_dtoa_r+0xa48>
 800e304:	461a      	mov	r2, r3
 800e306:	4601      	mov	r1, r0
 800e308:	4620      	mov	r0, r4
 800e30a:	f000 fb77 	bl	800e9fc <__pow5mult>
 800e30e:	9b08      	ldr	r3, [sp, #32]
 800e310:	2b01      	cmp	r3, #1
 800e312:	4605      	mov	r5, r0
 800e314:	dc44      	bgt.n	800e3a0 <_dtoa_r+0x750>
 800e316:	9b02      	ldr	r3, [sp, #8]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d13c      	bne.n	800e396 <_dtoa_r+0x746>
 800e31c:	9b03      	ldr	r3, [sp, #12]
 800e31e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e322:	2b00      	cmp	r3, #0
 800e324:	d137      	bne.n	800e396 <_dtoa_r+0x746>
 800e326:	9b03      	ldr	r3, [sp, #12]
 800e328:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e32c:	0d1b      	lsrs	r3, r3, #20
 800e32e:	051b      	lsls	r3, r3, #20
 800e330:	2b00      	cmp	r3, #0
 800e332:	d033      	beq.n	800e39c <_dtoa_r+0x74c>
 800e334:	9b07      	ldr	r3, [sp, #28]
 800e336:	3301      	adds	r3, #1
 800e338:	f10a 0a01 	add.w	sl, sl, #1
 800e33c:	9307      	str	r3, [sp, #28]
 800e33e:	f04f 0801 	mov.w	r8, #1
 800e342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e344:	bb73      	cbnz	r3, 800e3a4 <_dtoa_r+0x754>
 800e346:	2001      	movs	r0, #1
 800e348:	e034      	b.n	800e3b4 <_dtoa_r+0x764>
 800e34a:	bf00      	nop
 800e34c:	0800f3d8 	.word	0x0800f3d8
 800e350:	0800f3b0 	.word	0x0800f3b0
 800e354:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e356:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e35a:	e790      	b.n	800e27e <_dtoa_r+0x62e>
 800e35c:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 800e360:	45a8      	cmp	r8, r5
 800e362:	bfbf      	itttt	lt
 800e364:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800e366:	eba5 0808 	sublt.w	r8, r5, r8
 800e36a:	4443      	addlt	r3, r8
 800e36c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800e36e:	bfb6      	itet	lt
 800e370:	46a8      	movlt	r8, r5
 800e372:	eba8 0505 	subge.w	r5, r8, r5
 800e376:	2500      	movlt	r5, #0
 800e378:	f1b9 0f00 	cmp.w	r9, #0
 800e37c:	bfb9      	ittee	lt
 800e37e:	ebaa 0609 	sublt.w	r6, sl, r9
 800e382:	2300      	movlt	r3, #0
 800e384:	4656      	movge	r6, sl
 800e386:	464b      	movge	r3, r9
 800e388:	e77b      	b.n	800e282 <_dtoa_r+0x632>
 800e38a:	4645      	mov	r5, r8
 800e38c:	4656      	mov	r6, sl
 800e38e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e390:	e780      	b.n	800e294 <_dtoa_r+0x644>
 800e392:	4642      	mov	r2, r8
 800e394:	e7a8      	b.n	800e2e8 <_dtoa_r+0x698>
 800e396:	f04f 0800 	mov.w	r8, #0
 800e39a:	e7d2      	b.n	800e342 <_dtoa_r+0x6f2>
 800e39c:	4698      	mov	r8, r3
 800e39e:	e7d0      	b.n	800e342 <_dtoa_r+0x6f2>
 800e3a0:	f04f 0800 	mov.w	r8, #0
 800e3a4:	692b      	ldr	r3, [r5, #16]
 800e3a6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e3aa:	6918      	ldr	r0, [r3, #16]
 800e3ac:	f000 fa38 	bl	800e820 <__hi0bits>
 800e3b0:	f1c0 0020 	rsb	r0, r0, #32
 800e3b4:	9b07      	ldr	r3, [sp, #28]
 800e3b6:	4418      	add	r0, r3
 800e3b8:	f010 001f 	ands.w	r0, r0, #31
 800e3bc:	d047      	beq.n	800e44e <_dtoa_r+0x7fe>
 800e3be:	f1c0 0320 	rsb	r3, r0, #32
 800e3c2:	2b04      	cmp	r3, #4
 800e3c4:	dd3b      	ble.n	800e43e <_dtoa_r+0x7ee>
 800e3c6:	9b07      	ldr	r3, [sp, #28]
 800e3c8:	f1c0 001c 	rsb	r0, r0, #28
 800e3cc:	4482      	add	sl, r0
 800e3ce:	4406      	add	r6, r0
 800e3d0:	4403      	add	r3, r0
 800e3d2:	9307      	str	r3, [sp, #28]
 800e3d4:	f1ba 0f00 	cmp.w	sl, #0
 800e3d8:	dd05      	ble.n	800e3e6 <_dtoa_r+0x796>
 800e3da:	4652      	mov	r2, sl
 800e3dc:	9901      	ldr	r1, [sp, #4]
 800e3de:	4620      	mov	r0, r4
 800e3e0:	f000 fb5a 	bl	800ea98 <__lshift>
 800e3e4:	9001      	str	r0, [sp, #4]
 800e3e6:	9b07      	ldr	r3, [sp, #28]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	dd05      	ble.n	800e3f8 <_dtoa_r+0x7a8>
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f000 fb51 	bl	800ea98 <__lshift>
 800e3f6:	4605      	mov	r5, r0
 800e3f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e3fa:	b353      	cbz	r3, 800e452 <_dtoa_r+0x802>
 800e3fc:	4629      	mov	r1, r5
 800e3fe:	9801      	ldr	r0, [sp, #4]
 800e400:	f000 fb9e 	bl	800eb40 <__mcmp>
 800e404:	2800      	cmp	r0, #0
 800e406:	da24      	bge.n	800e452 <_dtoa_r+0x802>
 800e408:	2300      	movs	r3, #0
 800e40a:	220a      	movs	r2, #10
 800e40c:	9901      	ldr	r1, [sp, #4]
 800e40e:	4620      	mov	r0, r4
 800e410:	f000 f9cb 	bl	800e7aa <__multadd>
 800e414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e416:	9001      	str	r0, [sp, #4]
 800e418:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f000 8142 	beq.w	800e6a6 <_dtoa_r+0xa56>
 800e422:	2300      	movs	r3, #0
 800e424:	4639      	mov	r1, r7
 800e426:	220a      	movs	r2, #10
 800e428:	4620      	mov	r0, r4
 800e42a:	f000 f9be 	bl	800e7aa <__multadd>
 800e42e:	9b06      	ldr	r3, [sp, #24]
 800e430:	2b00      	cmp	r3, #0
 800e432:	4607      	mov	r7, r0
 800e434:	dc4b      	bgt.n	800e4ce <_dtoa_r+0x87e>
 800e436:	9b08      	ldr	r3, [sp, #32]
 800e438:	2b02      	cmp	r3, #2
 800e43a:	dd48      	ble.n	800e4ce <_dtoa_r+0x87e>
 800e43c:	e011      	b.n	800e462 <_dtoa_r+0x812>
 800e43e:	d0c9      	beq.n	800e3d4 <_dtoa_r+0x784>
 800e440:	9a07      	ldr	r2, [sp, #28]
 800e442:	331c      	adds	r3, #28
 800e444:	441a      	add	r2, r3
 800e446:	449a      	add	sl, r3
 800e448:	441e      	add	r6, r3
 800e44a:	4613      	mov	r3, r2
 800e44c:	e7c1      	b.n	800e3d2 <_dtoa_r+0x782>
 800e44e:	4603      	mov	r3, r0
 800e450:	e7f6      	b.n	800e440 <_dtoa_r+0x7f0>
 800e452:	f1b9 0f00 	cmp.w	r9, #0
 800e456:	dc34      	bgt.n	800e4c2 <_dtoa_r+0x872>
 800e458:	9b08      	ldr	r3, [sp, #32]
 800e45a:	2b02      	cmp	r3, #2
 800e45c:	dd31      	ble.n	800e4c2 <_dtoa_r+0x872>
 800e45e:	f8cd 9018 	str.w	r9, [sp, #24]
 800e462:	9b06      	ldr	r3, [sp, #24]
 800e464:	b963      	cbnz	r3, 800e480 <_dtoa_r+0x830>
 800e466:	4629      	mov	r1, r5
 800e468:	2205      	movs	r2, #5
 800e46a:	4620      	mov	r0, r4
 800e46c:	f000 f99d 	bl	800e7aa <__multadd>
 800e470:	4601      	mov	r1, r0
 800e472:	4605      	mov	r5, r0
 800e474:	9801      	ldr	r0, [sp, #4]
 800e476:	f000 fb63 	bl	800eb40 <__mcmp>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	f73f adfc 	bgt.w	800e078 <_dtoa_r+0x428>
 800e480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e482:	9e04      	ldr	r6, [sp, #16]
 800e484:	ea6f 0b03 	mvn.w	fp, r3
 800e488:	f04f 0900 	mov.w	r9, #0
 800e48c:	4629      	mov	r1, r5
 800e48e:	4620      	mov	r0, r4
 800e490:	f000 f974 	bl	800e77c <_Bfree>
 800e494:	2f00      	cmp	r7, #0
 800e496:	f43f aebb 	beq.w	800e210 <_dtoa_r+0x5c0>
 800e49a:	f1b9 0f00 	cmp.w	r9, #0
 800e49e:	d005      	beq.n	800e4ac <_dtoa_r+0x85c>
 800e4a0:	45b9      	cmp	r9, r7
 800e4a2:	d003      	beq.n	800e4ac <_dtoa_r+0x85c>
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	f000 f968 	bl	800e77c <_Bfree>
 800e4ac:	4639      	mov	r1, r7
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	f000 f964 	bl	800e77c <_Bfree>
 800e4b4:	e6ac      	b.n	800e210 <_dtoa_r+0x5c0>
 800e4b6:	2500      	movs	r5, #0
 800e4b8:	462f      	mov	r7, r5
 800e4ba:	e7e1      	b.n	800e480 <_dtoa_r+0x830>
 800e4bc:	469b      	mov	fp, r3
 800e4be:	462f      	mov	r7, r5
 800e4c0:	e5da      	b.n	800e078 <_dtoa_r+0x428>
 800e4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4c4:	f8cd 9018 	str.w	r9, [sp, #24]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f000 80f3 	beq.w	800e6b4 <_dtoa_r+0xa64>
 800e4ce:	2e00      	cmp	r6, #0
 800e4d0:	dd05      	ble.n	800e4de <_dtoa_r+0x88e>
 800e4d2:	4639      	mov	r1, r7
 800e4d4:	4632      	mov	r2, r6
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f000 fade 	bl	800ea98 <__lshift>
 800e4dc:	4607      	mov	r7, r0
 800e4de:	f1b8 0f00 	cmp.w	r8, #0
 800e4e2:	d04c      	beq.n	800e57e <_dtoa_r+0x92e>
 800e4e4:	6879      	ldr	r1, [r7, #4]
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f000 f914 	bl	800e714 <_Balloc>
 800e4ec:	693a      	ldr	r2, [r7, #16]
 800e4ee:	3202      	adds	r2, #2
 800e4f0:	4606      	mov	r6, r0
 800e4f2:	0092      	lsls	r2, r2, #2
 800e4f4:	f107 010c 	add.w	r1, r7, #12
 800e4f8:	300c      	adds	r0, #12
 800e4fa:	f7fe fddf 	bl	800d0bc <memcpy>
 800e4fe:	2201      	movs	r2, #1
 800e500:	4631      	mov	r1, r6
 800e502:	4620      	mov	r0, r4
 800e504:	f000 fac8 	bl	800ea98 <__lshift>
 800e508:	9b02      	ldr	r3, [sp, #8]
 800e50a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e50e:	f003 0301 	and.w	r3, r3, #1
 800e512:	46b9      	mov	r9, r7
 800e514:	9307      	str	r3, [sp, #28]
 800e516:	4607      	mov	r7, r0
 800e518:	4629      	mov	r1, r5
 800e51a:	9801      	ldr	r0, [sp, #4]
 800e51c:	f7ff fb0a 	bl	800db34 <quorem>
 800e520:	4649      	mov	r1, r9
 800e522:	4606      	mov	r6, r0
 800e524:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e528:	9801      	ldr	r0, [sp, #4]
 800e52a:	f000 fb09 	bl	800eb40 <__mcmp>
 800e52e:	463a      	mov	r2, r7
 800e530:	9002      	str	r0, [sp, #8]
 800e532:	4629      	mov	r1, r5
 800e534:	4620      	mov	r0, r4
 800e536:	f000 fb1d 	bl	800eb74 <__mdiff>
 800e53a:	68c3      	ldr	r3, [r0, #12]
 800e53c:	4602      	mov	r2, r0
 800e53e:	bb03      	cbnz	r3, 800e582 <_dtoa_r+0x932>
 800e540:	4601      	mov	r1, r0
 800e542:	9009      	str	r0, [sp, #36]	; 0x24
 800e544:	9801      	ldr	r0, [sp, #4]
 800e546:	f000 fafb 	bl	800eb40 <__mcmp>
 800e54a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e54c:	4603      	mov	r3, r0
 800e54e:	4611      	mov	r1, r2
 800e550:	4620      	mov	r0, r4
 800e552:	9309      	str	r3, [sp, #36]	; 0x24
 800e554:	f000 f912 	bl	800e77c <_Bfree>
 800e558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e55a:	b9a3      	cbnz	r3, 800e586 <_dtoa_r+0x936>
 800e55c:	9a08      	ldr	r2, [sp, #32]
 800e55e:	b992      	cbnz	r2, 800e586 <_dtoa_r+0x936>
 800e560:	9a07      	ldr	r2, [sp, #28]
 800e562:	b982      	cbnz	r2, 800e586 <_dtoa_r+0x936>
 800e564:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e568:	d029      	beq.n	800e5be <_dtoa_r+0x96e>
 800e56a:	9b02      	ldr	r3, [sp, #8]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	dd01      	ble.n	800e574 <_dtoa_r+0x924>
 800e570:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800e574:	f10a 0601 	add.w	r6, sl, #1
 800e578:	f88a 8000 	strb.w	r8, [sl]
 800e57c:	e786      	b.n	800e48c <_dtoa_r+0x83c>
 800e57e:	4638      	mov	r0, r7
 800e580:	e7c2      	b.n	800e508 <_dtoa_r+0x8b8>
 800e582:	2301      	movs	r3, #1
 800e584:	e7e3      	b.n	800e54e <_dtoa_r+0x8fe>
 800e586:	9a02      	ldr	r2, [sp, #8]
 800e588:	2a00      	cmp	r2, #0
 800e58a:	db04      	blt.n	800e596 <_dtoa_r+0x946>
 800e58c:	d124      	bne.n	800e5d8 <_dtoa_r+0x988>
 800e58e:	9a08      	ldr	r2, [sp, #32]
 800e590:	bb12      	cbnz	r2, 800e5d8 <_dtoa_r+0x988>
 800e592:	9a07      	ldr	r2, [sp, #28]
 800e594:	bb02      	cbnz	r2, 800e5d8 <_dtoa_r+0x988>
 800e596:	2b00      	cmp	r3, #0
 800e598:	ddec      	ble.n	800e574 <_dtoa_r+0x924>
 800e59a:	2201      	movs	r2, #1
 800e59c:	9901      	ldr	r1, [sp, #4]
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f000 fa7a 	bl	800ea98 <__lshift>
 800e5a4:	4629      	mov	r1, r5
 800e5a6:	9001      	str	r0, [sp, #4]
 800e5a8:	f000 faca 	bl	800eb40 <__mcmp>
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	dc03      	bgt.n	800e5b8 <_dtoa_r+0x968>
 800e5b0:	d1e0      	bne.n	800e574 <_dtoa_r+0x924>
 800e5b2:	f018 0f01 	tst.w	r8, #1
 800e5b6:	d0dd      	beq.n	800e574 <_dtoa_r+0x924>
 800e5b8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e5bc:	d1d8      	bne.n	800e570 <_dtoa_r+0x920>
 800e5be:	2339      	movs	r3, #57	; 0x39
 800e5c0:	f10a 0601 	add.w	r6, sl, #1
 800e5c4:	f88a 3000 	strb.w	r3, [sl]
 800e5c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e5cc:	2b39      	cmp	r3, #57	; 0x39
 800e5ce:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800e5d2:	d04c      	beq.n	800e66e <_dtoa_r+0xa1e>
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	e051      	b.n	800e67c <_dtoa_r+0xa2c>
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	f10a 0601 	add.w	r6, sl, #1
 800e5de:	dd05      	ble.n	800e5ec <_dtoa_r+0x99c>
 800e5e0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e5e4:	d0eb      	beq.n	800e5be <_dtoa_r+0x96e>
 800e5e6:	f108 0801 	add.w	r8, r8, #1
 800e5ea:	e7c5      	b.n	800e578 <_dtoa_r+0x928>
 800e5ec:	9b04      	ldr	r3, [sp, #16]
 800e5ee:	9a06      	ldr	r2, [sp, #24]
 800e5f0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800e5f4:	1af3      	subs	r3, r6, r3
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d021      	beq.n	800e63e <_dtoa_r+0x9ee>
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	220a      	movs	r2, #10
 800e5fe:	9901      	ldr	r1, [sp, #4]
 800e600:	4620      	mov	r0, r4
 800e602:	f000 f8d2 	bl	800e7aa <__multadd>
 800e606:	45b9      	cmp	r9, r7
 800e608:	9001      	str	r0, [sp, #4]
 800e60a:	f04f 0300 	mov.w	r3, #0
 800e60e:	f04f 020a 	mov.w	r2, #10
 800e612:	4649      	mov	r1, r9
 800e614:	4620      	mov	r0, r4
 800e616:	d105      	bne.n	800e624 <_dtoa_r+0x9d4>
 800e618:	f000 f8c7 	bl	800e7aa <__multadd>
 800e61c:	4681      	mov	r9, r0
 800e61e:	4607      	mov	r7, r0
 800e620:	46b2      	mov	sl, r6
 800e622:	e779      	b.n	800e518 <_dtoa_r+0x8c8>
 800e624:	f000 f8c1 	bl	800e7aa <__multadd>
 800e628:	4639      	mov	r1, r7
 800e62a:	4681      	mov	r9, r0
 800e62c:	2300      	movs	r3, #0
 800e62e:	220a      	movs	r2, #10
 800e630:	4620      	mov	r0, r4
 800e632:	f000 f8ba 	bl	800e7aa <__multadd>
 800e636:	4607      	mov	r7, r0
 800e638:	e7f2      	b.n	800e620 <_dtoa_r+0x9d0>
 800e63a:	f04f 0900 	mov.w	r9, #0
 800e63e:	2201      	movs	r2, #1
 800e640:	9901      	ldr	r1, [sp, #4]
 800e642:	4620      	mov	r0, r4
 800e644:	f000 fa28 	bl	800ea98 <__lshift>
 800e648:	4629      	mov	r1, r5
 800e64a:	9001      	str	r0, [sp, #4]
 800e64c:	f000 fa78 	bl	800eb40 <__mcmp>
 800e650:	2800      	cmp	r0, #0
 800e652:	dcb9      	bgt.n	800e5c8 <_dtoa_r+0x978>
 800e654:	d102      	bne.n	800e65c <_dtoa_r+0xa0c>
 800e656:	f018 0f01 	tst.w	r8, #1
 800e65a:	d1b5      	bne.n	800e5c8 <_dtoa_r+0x978>
 800e65c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e660:	2b30      	cmp	r3, #48	; 0x30
 800e662:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800e666:	f47f af11 	bne.w	800e48c <_dtoa_r+0x83c>
 800e66a:	4616      	mov	r6, r2
 800e66c:	e7f6      	b.n	800e65c <_dtoa_r+0xa0c>
 800e66e:	9b04      	ldr	r3, [sp, #16]
 800e670:	4293      	cmp	r3, r2
 800e672:	d105      	bne.n	800e680 <_dtoa_r+0xa30>
 800e674:	9a04      	ldr	r2, [sp, #16]
 800e676:	f10b 0b01 	add.w	fp, fp, #1
 800e67a:	2331      	movs	r3, #49	; 0x31
 800e67c:	7013      	strb	r3, [r2, #0]
 800e67e:	e705      	b.n	800e48c <_dtoa_r+0x83c>
 800e680:	4616      	mov	r6, r2
 800e682:	e7a1      	b.n	800e5c8 <_dtoa_r+0x978>
 800e684:	4b16      	ldr	r3, [pc, #88]	; (800e6e0 <_dtoa_r+0xa90>)
 800e686:	f7ff bb48 	b.w	800dd1a <_dtoa_r+0xca>
 800e68a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f47f ab23 	bne.w	800dcd8 <_dtoa_r+0x88>
 800e692:	4b14      	ldr	r3, [pc, #80]	; (800e6e4 <_dtoa_r+0xa94>)
 800e694:	f7ff bb41 	b.w	800dd1a <_dtoa_r+0xca>
 800e698:	9b08      	ldr	r3, [sp, #32]
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	f77f ae3b 	ble.w	800e316 <_dtoa_r+0x6c6>
 800e6a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800e6a4:	e64f      	b.n	800e346 <_dtoa_r+0x6f6>
 800e6a6:	9b06      	ldr	r3, [sp, #24]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	dc03      	bgt.n	800e6b4 <_dtoa_r+0xa64>
 800e6ac:	9b08      	ldr	r3, [sp, #32]
 800e6ae:	2b02      	cmp	r3, #2
 800e6b0:	f73f aed7 	bgt.w	800e462 <_dtoa_r+0x812>
 800e6b4:	9e04      	ldr	r6, [sp, #16]
 800e6b6:	9801      	ldr	r0, [sp, #4]
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	f7ff fa3b 	bl	800db34 <quorem>
 800e6be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e6c2:	f806 8b01 	strb.w	r8, [r6], #1
 800e6c6:	9b04      	ldr	r3, [sp, #16]
 800e6c8:	9a06      	ldr	r2, [sp, #24]
 800e6ca:	1af3      	subs	r3, r6, r3
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	ddb4      	ble.n	800e63a <_dtoa_r+0x9ea>
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	220a      	movs	r2, #10
 800e6d4:	9901      	ldr	r1, [sp, #4]
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f000 f867 	bl	800e7aa <__multadd>
 800e6dc:	9001      	str	r0, [sp, #4]
 800e6de:	e7ea      	b.n	800e6b6 <_dtoa_r+0xa66>
 800e6e0:	0800f21e 	.word	0x0800f21e
 800e6e4:	0800f343 	.word	0x0800f343

0800e6e8 <_localeconv_r>:
 800e6e8:	4b04      	ldr	r3, [pc, #16]	; (800e6fc <_localeconv_r+0x14>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	6a18      	ldr	r0, [r3, #32]
 800e6ee:	4b04      	ldr	r3, [pc, #16]	; (800e700 <_localeconv_r+0x18>)
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	bf08      	it	eq
 800e6f4:	4618      	moveq	r0, r3
 800e6f6:	30f0      	adds	r0, #240	; 0xf0
 800e6f8:	4770      	bx	lr
 800e6fa:	bf00      	nop
 800e6fc:	20000018 	.word	0x20000018
 800e700:	2000007c 	.word	0x2000007c

0800e704 <malloc>:
 800e704:	4b02      	ldr	r3, [pc, #8]	; (800e710 <malloc+0xc>)
 800e706:	4601      	mov	r1, r0
 800e708:	6818      	ldr	r0, [r3, #0]
 800e70a:	f000 bb3b 	b.w	800ed84 <_malloc_r>
 800e70e:	bf00      	nop
 800e710:	20000018 	.word	0x20000018

0800e714 <_Balloc>:
 800e714:	b570      	push	{r4, r5, r6, lr}
 800e716:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e718:	4604      	mov	r4, r0
 800e71a:	460e      	mov	r6, r1
 800e71c:	b93d      	cbnz	r5, 800e72e <_Balloc+0x1a>
 800e71e:	2010      	movs	r0, #16
 800e720:	f7ff fff0 	bl	800e704 <malloc>
 800e724:	6260      	str	r0, [r4, #36]	; 0x24
 800e726:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e72a:	6005      	str	r5, [r0, #0]
 800e72c:	60c5      	str	r5, [r0, #12]
 800e72e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e730:	68eb      	ldr	r3, [r5, #12]
 800e732:	b183      	cbz	r3, 800e756 <_Balloc+0x42>
 800e734:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e736:	68db      	ldr	r3, [r3, #12]
 800e738:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e73c:	b9b8      	cbnz	r0, 800e76e <_Balloc+0x5a>
 800e73e:	2101      	movs	r1, #1
 800e740:	fa01 f506 	lsl.w	r5, r1, r6
 800e744:	1d6a      	adds	r2, r5, #5
 800e746:	0092      	lsls	r2, r2, #2
 800e748:	4620      	mov	r0, r4
 800e74a:	f000 fabf 	bl	800eccc <_calloc_r>
 800e74e:	b160      	cbz	r0, 800e76a <_Balloc+0x56>
 800e750:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e754:	e00e      	b.n	800e774 <_Balloc+0x60>
 800e756:	2221      	movs	r2, #33	; 0x21
 800e758:	2104      	movs	r1, #4
 800e75a:	4620      	mov	r0, r4
 800e75c:	f000 fab6 	bl	800eccc <_calloc_r>
 800e760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e762:	60e8      	str	r0, [r5, #12]
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1e4      	bne.n	800e734 <_Balloc+0x20>
 800e76a:	2000      	movs	r0, #0
 800e76c:	bd70      	pop	{r4, r5, r6, pc}
 800e76e:	6802      	ldr	r2, [r0, #0]
 800e770:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e774:	2300      	movs	r3, #0
 800e776:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e77a:	e7f7      	b.n	800e76c <_Balloc+0x58>

0800e77c <_Bfree>:
 800e77c:	b570      	push	{r4, r5, r6, lr}
 800e77e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e780:	4606      	mov	r6, r0
 800e782:	460d      	mov	r5, r1
 800e784:	b93c      	cbnz	r4, 800e796 <_Bfree+0x1a>
 800e786:	2010      	movs	r0, #16
 800e788:	f7ff ffbc 	bl	800e704 <malloc>
 800e78c:	6270      	str	r0, [r6, #36]	; 0x24
 800e78e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e792:	6004      	str	r4, [r0, #0]
 800e794:	60c4      	str	r4, [r0, #12]
 800e796:	b13d      	cbz	r5, 800e7a8 <_Bfree+0x2c>
 800e798:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e79a:	686a      	ldr	r2, [r5, #4]
 800e79c:	68db      	ldr	r3, [r3, #12]
 800e79e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e7a2:	6029      	str	r1, [r5, #0]
 800e7a4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e7a8:	bd70      	pop	{r4, r5, r6, pc}

0800e7aa <__multadd>:
 800e7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ae:	690d      	ldr	r5, [r1, #16]
 800e7b0:	461f      	mov	r7, r3
 800e7b2:	4606      	mov	r6, r0
 800e7b4:	460c      	mov	r4, r1
 800e7b6:	f101 0c14 	add.w	ip, r1, #20
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	f8dc 0000 	ldr.w	r0, [ip]
 800e7c0:	b281      	uxth	r1, r0
 800e7c2:	fb02 7101 	mla	r1, r2, r1, r7
 800e7c6:	0c0f      	lsrs	r7, r1, #16
 800e7c8:	0c00      	lsrs	r0, r0, #16
 800e7ca:	fb02 7000 	mla	r0, r2, r0, r7
 800e7ce:	b289      	uxth	r1, r1
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e7d6:	429d      	cmp	r5, r3
 800e7d8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e7dc:	f84c 1b04 	str.w	r1, [ip], #4
 800e7e0:	dcec      	bgt.n	800e7bc <__multadd+0x12>
 800e7e2:	b1d7      	cbz	r7, 800e81a <__multadd+0x70>
 800e7e4:	68a3      	ldr	r3, [r4, #8]
 800e7e6:	42ab      	cmp	r3, r5
 800e7e8:	dc12      	bgt.n	800e810 <__multadd+0x66>
 800e7ea:	6861      	ldr	r1, [r4, #4]
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	3101      	adds	r1, #1
 800e7f0:	f7ff ff90 	bl	800e714 <_Balloc>
 800e7f4:	6922      	ldr	r2, [r4, #16]
 800e7f6:	3202      	adds	r2, #2
 800e7f8:	f104 010c 	add.w	r1, r4, #12
 800e7fc:	4680      	mov	r8, r0
 800e7fe:	0092      	lsls	r2, r2, #2
 800e800:	300c      	adds	r0, #12
 800e802:	f7fe fc5b 	bl	800d0bc <memcpy>
 800e806:	4621      	mov	r1, r4
 800e808:	4630      	mov	r0, r6
 800e80a:	f7ff ffb7 	bl	800e77c <_Bfree>
 800e80e:	4644      	mov	r4, r8
 800e810:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e814:	3501      	adds	r5, #1
 800e816:	615f      	str	r7, [r3, #20]
 800e818:	6125      	str	r5, [r4, #16]
 800e81a:	4620      	mov	r0, r4
 800e81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e820 <__hi0bits>:
 800e820:	0c02      	lsrs	r2, r0, #16
 800e822:	0412      	lsls	r2, r2, #16
 800e824:	4603      	mov	r3, r0
 800e826:	b9b2      	cbnz	r2, 800e856 <__hi0bits+0x36>
 800e828:	0403      	lsls	r3, r0, #16
 800e82a:	2010      	movs	r0, #16
 800e82c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e830:	bf04      	itt	eq
 800e832:	021b      	lsleq	r3, r3, #8
 800e834:	3008      	addeq	r0, #8
 800e836:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e83a:	bf04      	itt	eq
 800e83c:	011b      	lsleq	r3, r3, #4
 800e83e:	3004      	addeq	r0, #4
 800e840:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e844:	bf04      	itt	eq
 800e846:	009b      	lsleq	r3, r3, #2
 800e848:	3002      	addeq	r0, #2
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	db06      	blt.n	800e85c <__hi0bits+0x3c>
 800e84e:	005b      	lsls	r3, r3, #1
 800e850:	d503      	bpl.n	800e85a <__hi0bits+0x3a>
 800e852:	3001      	adds	r0, #1
 800e854:	4770      	bx	lr
 800e856:	2000      	movs	r0, #0
 800e858:	e7e8      	b.n	800e82c <__hi0bits+0xc>
 800e85a:	2020      	movs	r0, #32
 800e85c:	4770      	bx	lr

0800e85e <__lo0bits>:
 800e85e:	6803      	ldr	r3, [r0, #0]
 800e860:	f013 0207 	ands.w	r2, r3, #7
 800e864:	4601      	mov	r1, r0
 800e866:	d00b      	beq.n	800e880 <__lo0bits+0x22>
 800e868:	07da      	lsls	r2, r3, #31
 800e86a:	d423      	bmi.n	800e8b4 <__lo0bits+0x56>
 800e86c:	0798      	lsls	r0, r3, #30
 800e86e:	bf49      	itett	mi
 800e870:	085b      	lsrmi	r3, r3, #1
 800e872:	089b      	lsrpl	r3, r3, #2
 800e874:	2001      	movmi	r0, #1
 800e876:	600b      	strmi	r3, [r1, #0]
 800e878:	bf5c      	itt	pl
 800e87a:	600b      	strpl	r3, [r1, #0]
 800e87c:	2002      	movpl	r0, #2
 800e87e:	4770      	bx	lr
 800e880:	b298      	uxth	r0, r3
 800e882:	b9a8      	cbnz	r0, 800e8b0 <__lo0bits+0x52>
 800e884:	0c1b      	lsrs	r3, r3, #16
 800e886:	2010      	movs	r0, #16
 800e888:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e88c:	bf04      	itt	eq
 800e88e:	0a1b      	lsreq	r3, r3, #8
 800e890:	3008      	addeq	r0, #8
 800e892:	071a      	lsls	r2, r3, #28
 800e894:	bf04      	itt	eq
 800e896:	091b      	lsreq	r3, r3, #4
 800e898:	3004      	addeq	r0, #4
 800e89a:	079a      	lsls	r2, r3, #30
 800e89c:	bf04      	itt	eq
 800e89e:	089b      	lsreq	r3, r3, #2
 800e8a0:	3002      	addeq	r0, #2
 800e8a2:	07da      	lsls	r2, r3, #31
 800e8a4:	d402      	bmi.n	800e8ac <__lo0bits+0x4e>
 800e8a6:	085b      	lsrs	r3, r3, #1
 800e8a8:	d006      	beq.n	800e8b8 <__lo0bits+0x5a>
 800e8aa:	3001      	adds	r0, #1
 800e8ac:	600b      	str	r3, [r1, #0]
 800e8ae:	4770      	bx	lr
 800e8b0:	4610      	mov	r0, r2
 800e8b2:	e7e9      	b.n	800e888 <__lo0bits+0x2a>
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	4770      	bx	lr
 800e8b8:	2020      	movs	r0, #32
 800e8ba:	4770      	bx	lr

0800e8bc <__i2b>:
 800e8bc:	b510      	push	{r4, lr}
 800e8be:	460c      	mov	r4, r1
 800e8c0:	2101      	movs	r1, #1
 800e8c2:	f7ff ff27 	bl	800e714 <_Balloc>
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	6144      	str	r4, [r0, #20]
 800e8ca:	6102      	str	r2, [r0, #16]
 800e8cc:	bd10      	pop	{r4, pc}

0800e8ce <__multiply>:
 800e8ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d2:	4614      	mov	r4, r2
 800e8d4:	690a      	ldr	r2, [r1, #16]
 800e8d6:	6923      	ldr	r3, [r4, #16]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	bfb8      	it	lt
 800e8dc:	460b      	movlt	r3, r1
 800e8de:	4688      	mov	r8, r1
 800e8e0:	bfbc      	itt	lt
 800e8e2:	46a0      	movlt	r8, r4
 800e8e4:	461c      	movlt	r4, r3
 800e8e6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e8ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e8ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e8f6:	eb07 0609 	add.w	r6, r7, r9
 800e8fa:	42b3      	cmp	r3, r6
 800e8fc:	bfb8      	it	lt
 800e8fe:	3101      	addlt	r1, #1
 800e900:	f7ff ff08 	bl	800e714 <_Balloc>
 800e904:	f100 0514 	add.w	r5, r0, #20
 800e908:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e90c:	462b      	mov	r3, r5
 800e90e:	2200      	movs	r2, #0
 800e910:	4573      	cmp	r3, lr
 800e912:	d316      	bcc.n	800e942 <__multiply+0x74>
 800e914:	f104 0214 	add.w	r2, r4, #20
 800e918:	f108 0114 	add.w	r1, r8, #20
 800e91c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e920:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e924:	9300      	str	r3, [sp, #0]
 800e926:	9b00      	ldr	r3, [sp, #0]
 800e928:	9201      	str	r2, [sp, #4]
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d80c      	bhi.n	800e948 <__multiply+0x7a>
 800e92e:	2e00      	cmp	r6, #0
 800e930:	dd03      	ble.n	800e93a <__multiply+0x6c>
 800e932:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e936:	2b00      	cmp	r3, #0
 800e938:	d05d      	beq.n	800e9f6 <__multiply+0x128>
 800e93a:	6106      	str	r6, [r0, #16]
 800e93c:	b003      	add	sp, #12
 800e93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e942:	f843 2b04 	str.w	r2, [r3], #4
 800e946:	e7e3      	b.n	800e910 <__multiply+0x42>
 800e948:	f8b2 b000 	ldrh.w	fp, [r2]
 800e94c:	f1bb 0f00 	cmp.w	fp, #0
 800e950:	d023      	beq.n	800e99a <__multiply+0xcc>
 800e952:	4689      	mov	r9, r1
 800e954:	46ac      	mov	ip, r5
 800e956:	f04f 0800 	mov.w	r8, #0
 800e95a:	f859 4b04 	ldr.w	r4, [r9], #4
 800e95e:	f8dc a000 	ldr.w	sl, [ip]
 800e962:	b2a3      	uxth	r3, r4
 800e964:	fa1f fa8a 	uxth.w	sl, sl
 800e968:	fb0b a303 	mla	r3, fp, r3, sl
 800e96c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e970:	f8dc 4000 	ldr.w	r4, [ip]
 800e974:	4443      	add	r3, r8
 800e976:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e97a:	fb0b 840a 	mla	r4, fp, sl, r8
 800e97e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e982:	46e2      	mov	sl, ip
 800e984:	b29b      	uxth	r3, r3
 800e986:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e98a:	454f      	cmp	r7, r9
 800e98c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e990:	f84a 3b04 	str.w	r3, [sl], #4
 800e994:	d82b      	bhi.n	800e9ee <__multiply+0x120>
 800e996:	f8cc 8004 	str.w	r8, [ip, #4]
 800e99a:	9b01      	ldr	r3, [sp, #4]
 800e99c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e9a0:	3204      	adds	r2, #4
 800e9a2:	f1ba 0f00 	cmp.w	sl, #0
 800e9a6:	d020      	beq.n	800e9ea <__multiply+0x11c>
 800e9a8:	682b      	ldr	r3, [r5, #0]
 800e9aa:	4689      	mov	r9, r1
 800e9ac:	46a8      	mov	r8, r5
 800e9ae:	f04f 0b00 	mov.w	fp, #0
 800e9b2:	f8b9 c000 	ldrh.w	ip, [r9]
 800e9b6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e9ba:	fb0a 440c 	mla	r4, sl, ip, r4
 800e9be:	445c      	add	r4, fp
 800e9c0:	46c4      	mov	ip, r8
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e9c8:	f84c 3b04 	str.w	r3, [ip], #4
 800e9cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800e9d0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e9d4:	0c1b      	lsrs	r3, r3, #16
 800e9d6:	fb0a b303 	mla	r3, sl, r3, fp
 800e9da:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e9de:	454f      	cmp	r7, r9
 800e9e0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e9e4:	d805      	bhi.n	800e9f2 <__multiply+0x124>
 800e9e6:	f8c8 3004 	str.w	r3, [r8, #4]
 800e9ea:	3504      	adds	r5, #4
 800e9ec:	e79b      	b.n	800e926 <__multiply+0x58>
 800e9ee:	46d4      	mov	ip, sl
 800e9f0:	e7b3      	b.n	800e95a <__multiply+0x8c>
 800e9f2:	46e0      	mov	r8, ip
 800e9f4:	e7dd      	b.n	800e9b2 <__multiply+0xe4>
 800e9f6:	3e01      	subs	r6, #1
 800e9f8:	e799      	b.n	800e92e <__multiply+0x60>
	...

0800e9fc <__pow5mult>:
 800e9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea00:	4615      	mov	r5, r2
 800ea02:	f012 0203 	ands.w	r2, r2, #3
 800ea06:	4606      	mov	r6, r0
 800ea08:	460f      	mov	r7, r1
 800ea0a:	d007      	beq.n	800ea1c <__pow5mult+0x20>
 800ea0c:	3a01      	subs	r2, #1
 800ea0e:	4c21      	ldr	r4, [pc, #132]	; (800ea94 <__pow5mult+0x98>)
 800ea10:	2300      	movs	r3, #0
 800ea12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ea16:	f7ff fec8 	bl	800e7aa <__multadd>
 800ea1a:	4607      	mov	r7, r0
 800ea1c:	10ad      	asrs	r5, r5, #2
 800ea1e:	d035      	beq.n	800ea8c <__pow5mult+0x90>
 800ea20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ea22:	b93c      	cbnz	r4, 800ea34 <__pow5mult+0x38>
 800ea24:	2010      	movs	r0, #16
 800ea26:	f7ff fe6d 	bl	800e704 <malloc>
 800ea2a:	6270      	str	r0, [r6, #36]	; 0x24
 800ea2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea30:	6004      	str	r4, [r0, #0]
 800ea32:	60c4      	str	r4, [r0, #12]
 800ea34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ea38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea3c:	b94c      	cbnz	r4, 800ea52 <__pow5mult+0x56>
 800ea3e:	f240 2171 	movw	r1, #625	; 0x271
 800ea42:	4630      	mov	r0, r6
 800ea44:	f7ff ff3a 	bl	800e8bc <__i2b>
 800ea48:	2300      	movs	r3, #0
 800ea4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea4e:	4604      	mov	r4, r0
 800ea50:	6003      	str	r3, [r0, #0]
 800ea52:	f04f 0800 	mov.w	r8, #0
 800ea56:	07eb      	lsls	r3, r5, #31
 800ea58:	d50a      	bpl.n	800ea70 <__pow5mult+0x74>
 800ea5a:	4639      	mov	r1, r7
 800ea5c:	4622      	mov	r2, r4
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f7ff ff35 	bl	800e8ce <__multiply>
 800ea64:	4639      	mov	r1, r7
 800ea66:	4681      	mov	r9, r0
 800ea68:	4630      	mov	r0, r6
 800ea6a:	f7ff fe87 	bl	800e77c <_Bfree>
 800ea6e:	464f      	mov	r7, r9
 800ea70:	106d      	asrs	r5, r5, #1
 800ea72:	d00b      	beq.n	800ea8c <__pow5mult+0x90>
 800ea74:	6820      	ldr	r0, [r4, #0]
 800ea76:	b938      	cbnz	r0, 800ea88 <__pow5mult+0x8c>
 800ea78:	4622      	mov	r2, r4
 800ea7a:	4621      	mov	r1, r4
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	f7ff ff26 	bl	800e8ce <__multiply>
 800ea82:	6020      	str	r0, [r4, #0]
 800ea84:	f8c0 8000 	str.w	r8, [r0]
 800ea88:	4604      	mov	r4, r0
 800ea8a:	e7e4      	b.n	800ea56 <__pow5mult+0x5a>
 800ea8c:	4638      	mov	r0, r7
 800ea8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea92:	bf00      	nop
 800ea94:	0800f4a0 	.word	0x0800f4a0

0800ea98 <__lshift>:
 800ea98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea9c:	460c      	mov	r4, r1
 800ea9e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eaa2:	6923      	ldr	r3, [r4, #16]
 800eaa4:	6849      	ldr	r1, [r1, #4]
 800eaa6:	eb0a 0903 	add.w	r9, sl, r3
 800eaaa:	68a3      	ldr	r3, [r4, #8]
 800eaac:	4607      	mov	r7, r0
 800eaae:	4616      	mov	r6, r2
 800eab0:	f109 0501 	add.w	r5, r9, #1
 800eab4:	42ab      	cmp	r3, r5
 800eab6:	db32      	blt.n	800eb1e <__lshift+0x86>
 800eab8:	4638      	mov	r0, r7
 800eaba:	f7ff fe2b 	bl	800e714 <_Balloc>
 800eabe:	2300      	movs	r3, #0
 800eac0:	4680      	mov	r8, r0
 800eac2:	f100 0114 	add.w	r1, r0, #20
 800eac6:	461a      	mov	r2, r3
 800eac8:	4553      	cmp	r3, sl
 800eaca:	db2b      	blt.n	800eb24 <__lshift+0x8c>
 800eacc:	6920      	ldr	r0, [r4, #16]
 800eace:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ead2:	f104 0314 	add.w	r3, r4, #20
 800ead6:	f016 021f 	ands.w	r2, r6, #31
 800eada:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eade:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eae2:	d025      	beq.n	800eb30 <__lshift+0x98>
 800eae4:	f1c2 0e20 	rsb	lr, r2, #32
 800eae8:	2000      	movs	r0, #0
 800eaea:	681e      	ldr	r6, [r3, #0]
 800eaec:	468a      	mov	sl, r1
 800eaee:	4096      	lsls	r6, r2
 800eaf0:	4330      	orrs	r0, r6
 800eaf2:	f84a 0b04 	str.w	r0, [sl], #4
 800eaf6:	f853 0b04 	ldr.w	r0, [r3], #4
 800eafa:	459c      	cmp	ip, r3
 800eafc:	fa20 f00e 	lsr.w	r0, r0, lr
 800eb00:	d814      	bhi.n	800eb2c <__lshift+0x94>
 800eb02:	6048      	str	r0, [r1, #4]
 800eb04:	b108      	cbz	r0, 800eb0a <__lshift+0x72>
 800eb06:	f109 0502 	add.w	r5, r9, #2
 800eb0a:	3d01      	subs	r5, #1
 800eb0c:	4638      	mov	r0, r7
 800eb0e:	f8c8 5010 	str.w	r5, [r8, #16]
 800eb12:	4621      	mov	r1, r4
 800eb14:	f7ff fe32 	bl	800e77c <_Bfree>
 800eb18:	4640      	mov	r0, r8
 800eb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb1e:	3101      	adds	r1, #1
 800eb20:	005b      	lsls	r3, r3, #1
 800eb22:	e7c7      	b.n	800eab4 <__lshift+0x1c>
 800eb24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	e7cd      	b.n	800eac8 <__lshift+0x30>
 800eb2c:	4651      	mov	r1, sl
 800eb2e:	e7dc      	b.n	800eaea <__lshift+0x52>
 800eb30:	3904      	subs	r1, #4
 800eb32:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb36:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb3a:	459c      	cmp	ip, r3
 800eb3c:	d8f9      	bhi.n	800eb32 <__lshift+0x9a>
 800eb3e:	e7e4      	b.n	800eb0a <__lshift+0x72>

0800eb40 <__mcmp>:
 800eb40:	6903      	ldr	r3, [r0, #16]
 800eb42:	690a      	ldr	r2, [r1, #16]
 800eb44:	1a9b      	subs	r3, r3, r2
 800eb46:	b530      	push	{r4, r5, lr}
 800eb48:	d10c      	bne.n	800eb64 <__mcmp+0x24>
 800eb4a:	0092      	lsls	r2, r2, #2
 800eb4c:	3014      	adds	r0, #20
 800eb4e:	3114      	adds	r1, #20
 800eb50:	1884      	adds	r4, r0, r2
 800eb52:	4411      	add	r1, r2
 800eb54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eb58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eb5c:	4295      	cmp	r5, r2
 800eb5e:	d003      	beq.n	800eb68 <__mcmp+0x28>
 800eb60:	d305      	bcc.n	800eb6e <__mcmp+0x2e>
 800eb62:	2301      	movs	r3, #1
 800eb64:	4618      	mov	r0, r3
 800eb66:	bd30      	pop	{r4, r5, pc}
 800eb68:	42a0      	cmp	r0, r4
 800eb6a:	d3f3      	bcc.n	800eb54 <__mcmp+0x14>
 800eb6c:	e7fa      	b.n	800eb64 <__mcmp+0x24>
 800eb6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb72:	e7f7      	b.n	800eb64 <__mcmp+0x24>

0800eb74 <__mdiff>:
 800eb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb78:	460d      	mov	r5, r1
 800eb7a:	4607      	mov	r7, r0
 800eb7c:	4611      	mov	r1, r2
 800eb7e:	4628      	mov	r0, r5
 800eb80:	4614      	mov	r4, r2
 800eb82:	f7ff ffdd 	bl	800eb40 <__mcmp>
 800eb86:	1e06      	subs	r6, r0, #0
 800eb88:	d108      	bne.n	800eb9c <__mdiff+0x28>
 800eb8a:	4631      	mov	r1, r6
 800eb8c:	4638      	mov	r0, r7
 800eb8e:	f7ff fdc1 	bl	800e714 <_Balloc>
 800eb92:	2301      	movs	r3, #1
 800eb94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800eb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb9c:	bfa4      	itt	ge
 800eb9e:	4623      	movge	r3, r4
 800eba0:	462c      	movge	r4, r5
 800eba2:	4638      	mov	r0, r7
 800eba4:	6861      	ldr	r1, [r4, #4]
 800eba6:	bfa6      	itte	ge
 800eba8:	461d      	movge	r5, r3
 800ebaa:	2600      	movge	r6, #0
 800ebac:	2601      	movlt	r6, #1
 800ebae:	f7ff fdb1 	bl	800e714 <_Balloc>
 800ebb2:	692b      	ldr	r3, [r5, #16]
 800ebb4:	60c6      	str	r6, [r0, #12]
 800ebb6:	6926      	ldr	r6, [r4, #16]
 800ebb8:	f105 0914 	add.w	r9, r5, #20
 800ebbc:	f104 0214 	add.w	r2, r4, #20
 800ebc0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ebc4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ebc8:	f100 0514 	add.w	r5, r0, #20
 800ebcc:	f04f 0e00 	mov.w	lr, #0
 800ebd0:	f852 ab04 	ldr.w	sl, [r2], #4
 800ebd4:	f859 4b04 	ldr.w	r4, [r9], #4
 800ebd8:	fa1e f18a 	uxtah	r1, lr, sl
 800ebdc:	b2a3      	uxth	r3, r4
 800ebde:	1ac9      	subs	r1, r1, r3
 800ebe0:	0c23      	lsrs	r3, r4, #16
 800ebe2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ebe6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ebea:	b289      	uxth	r1, r1
 800ebec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ebf0:	45c8      	cmp	r8, r9
 800ebf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ebf6:	4694      	mov	ip, r2
 800ebf8:	f845 3b04 	str.w	r3, [r5], #4
 800ebfc:	d8e8      	bhi.n	800ebd0 <__mdiff+0x5c>
 800ebfe:	45bc      	cmp	ip, r7
 800ec00:	d304      	bcc.n	800ec0c <__mdiff+0x98>
 800ec02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ec06:	b183      	cbz	r3, 800ec2a <__mdiff+0xb6>
 800ec08:	6106      	str	r6, [r0, #16]
 800ec0a:	e7c5      	b.n	800eb98 <__mdiff+0x24>
 800ec0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ec10:	fa1e f381 	uxtah	r3, lr, r1
 800ec14:	141a      	asrs	r2, r3, #16
 800ec16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec20:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ec24:	f845 3b04 	str.w	r3, [r5], #4
 800ec28:	e7e9      	b.n	800ebfe <__mdiff+0x8a>
 800ec2a:	3e01      	subs	r6, #1
 800ec2c:	e7e9      	b.n	800ec02 <__mdiff+0x8e>

0800ec2e <__d2b>:
 800ec2e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec32:	460e      	mov	r6, r1
 800ec34:	2101      	movs	r1, #1
 800ec36:	ec59 8b10 	vmov	r8, r9, d0
 800ec3a:	4615      	mov	r5, r2
 800ec3c:	f7ff fd6a 	bl	800e714 <_Balloc>
 800ec40:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ec44:	4607      	mov	r7, r0
 800ec46:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec4a:	bb34      	cbnz	r4, 800ec9a <__d2b+0x6c>
 800ec4c:	9301      	str	r3, [sp, #4]
 800ec4e:	f1b8 0300 	subs.w	r3, r8, #0
 800ec52:	d027      	beq.n	800eca4 <__d2b+0x76>
 800ec54:	a802      	add	r0, sp, #8
 800ec56:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ec5a:	f7ff fe00 	bl	800e85e <__lo0bits>
 800ec5e:	9900      	ldr	r1, [sp, #0]
 800ec60:	b1f0      	cbz	r0, 800eca0 <__d2b+0x72>
 800ec62:	9a01      	ldr	r2, [sp, #4]
 800ec64:	f1c0 0320 	rsb	r3, r0, #32
 800ec68:	fa02 f303 	lsl.w	r3, r2, r3
 800ec6c:	430b      	orrs	r3, r1
 800ec6e:	40c2      	lsrs	r2, r0
 800ec70:	617b      	str	r3, [r7, #20]
 800ec72:	9201      	str	r2, [sp, #4]
 800ec74:	9b01      	ldr	r3, [sp, #4]
 800ec76:	61bb      	str	r3, [r7, #24]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	bf14      	ite	ne
 800ec7c:	2102      	movne	r1, #2
 800ec7e:	2101      	moveq	r1, #1
 800ec80:	6139      	str	r1, [r7, #16]
 800ec82:	b1c4      	cbz	r4, 800ecb6 <__d2b+0x88>
 800ec84:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ec88:	4404      	add	r4, r0
 800ec8a:	6034      	str	r4, [r6, #0]
 800ec8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec90:	6028      	str	r0, [r5, #0]
 800ec92:	4638      	mov	r0, r7
 800ec94:	b003      	add	sp, #12
 800ec96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec9e:	e7d5      	b.n	800ec4c <__d2b+0x1e>
 800eca0:	6179      	str	r1, [r7, #20]
 800eca2:	e7e7      	b.n	800ec74 <__d2b+0x46>
 800eca4:	a801      	add	r0, sp, #4
 800eca6:	f7ff fdda 	bl	800e85e <__lo0bits>
 800ecaa:	9b01      	ldr	r3, [sp, #4]
 800ecac:	617b      	str	r3, [r7, #20]
 800ecae:	2101      	movs	r1, #1
 800ecb0:	6139      	str	r1, [r7, #16]
 800ecb2:	3020      	adds	r0, #32
 800ecb4:	e7e5      	b.n	800ec82 <__d2b+0x54>
 800ecb6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ecba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ecbe:	6030      	str	r0, [r6, #0]
 800ecc0:	6918      	ldr	r0, [r3, #16]
 800ecc2:	f7ff fdad 	bl	800e820 <__hi0bits>
 800ecc6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ecca:	e7e1      	b.n	800ec90 <__d2b+0x62>

0800eccc <_calloc_r>:
 800eccc:	b538      	push	{r3, r4, r5, lr}
 800ecce:	fb02 f401 	mul.w	r4, r2, r1
 800ecd2:	4621      	mov	r1, r4
 800ecd4:	f000 f856 	bl	800ed84 <_malloc_r>
 800ecd8:	4605      	mov	r5, r0
 800ecda:	b118      	cbz	r0, 800ece4 <_calloc_r+0x18>
 800ecdc:	4622      	mov	r2, r4
 800ecde:	2100      	movs	r1, #0
 800ece0:	f7fe fa10 	bl	800d104 <memset>
 800ece4:	4628      	mov	r0, r5
 800ece6:	bd38      	pop	{r3, r4, r5, pc}

0800ece8 <_free_r>:
 800ece8:	b538      	push	{r3, r4, r5, lr}
 800ecea:	4605      	mov	r5, r0
 800ecec:	2900      	cmp	r1, #0
 800ecee:	d045      	beq.n	800ed7c <_free_r+0x94>
 800ecf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecf4:	1f0c      	subs	r4, r1, #4
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	bfb8      	it	lt
 800ecfa:	18e4      	addlt	r4, r4, r3
 800ecfc:	f000 f9fe 	bl	800f0fc <__malloc_lock>
 800ed00:	4a1f      	ldr	r2, [pc, #124]	; (800ed80 <_free_r+0x98>)
 800ed02:	6813      	ldr	r3, [r2, #0]
 800ed04:	4610      	mov	r0, r2
 800ed06:	b933      	cbnz	r3, 800ed16 <_free_r+0x2e>
 800ed08:	6063      	str	r3, [r4, #4]
 800ed0a:	6014      	str	r4, [r2, #0]
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed12:	f000 b9f4 	b.w	800f0fe <__malloc_unlock>
 800ed16:	42a3      	cmp	r3, r4
 800ed18:	d90c      	bls.n	800ed34 <_free_r+0x4c>
 800ed1a:	6821      	ldr	r1, [r4, #0]
 800ed1c:	1862      	adds	r2, r4, r1
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	bf04      	itt	eq
 800ed22:	681a      	ldreq	r2, [r3, #0]
 800ed24:	685b      	ldreq	r3, [r3, #4]
 800ed26:	6063      	str	r3, [r4, #4]
 800ed28:	bf04      	itt	eq
 800ed2a:	1852      	addeq	r2, r2, r1
 800ed2c:	6022      	streq	r2, [r4, #0]
 800ed2e:	6004      	str	r4, [r0, #0]
 800ed30:	e7ec      	b.n	800ed0c <_free_r+0x24>
 800ed32:	4613      	mov	r3, r2
 800ed34:	685a      	ldr	r2, [r3, #4]
 800ed36:	b10a      	cbz	r2, 800ed3c <_free_r+0x54>
 800ed38:	42a2      	cmp	r2, r4
 800ed3a:	d9fa      	bls.n	800ed32 <_free_r+0x4a>
 800ed3c:	6819      	ldr	r1, [r3, #0]
 800ed3e:	1858      	adds	r0, r3, r1
 800ed40:	42a0      	cmp	r0, r4
 800ed42:	d10b      	bne.n	800ed5c <_free_r+0x74>
 800ed44:	6820      	ldr	r0, [r4, #0]
 800ed46:	4401      	add	r1, r0
 800ed48:	1858      	adds	r0, r3, r1
 800ed4a:	4282      	cmp	r2, r0
 800ed4c:	6019      	str	r1, [r3, #0]
 800ed4e:	d1dd      	bne.n	800ed0c <_free_r+0x24>
 800ed50:	6810      	ldr	r0, [r2, #0]
 800ed52:	6852      	ldr	r2, [r2, #4]
 800ed54:	605a      	str	r2, [r3, #4]
 800ed56:	4401      	add	r1, r0
 800ed58:	6019      	str	r1, [r3, #0]
 800ed5a:	e7d7      	b.n	800ed0c <_free_r+0x24>
 800ed5c:	d902      	bls.n	800ed64 <_free_r+0x7c>
 800ed5e:	230c      	movs	r3, #12
 800ed60:	602b      	str	r3, [r5, #0]
 800ed62:	e7d3      	b.n	800ed0c <_free_r+0x24>
 800ed64:	6820      	ldr	r0, [r4, #0]
 800ed66:	1821      	adds	r1, r4, r0
 800ed68:	428a      	cmp	r2, r1
 800ed6a:	bf04      	itt	eq
 800ed6c:	6811      	ldreq	r1, [r2, #0]
 800ed6e:	6852      	ldreq	r2, [r2, #4]
 800ed70:	6062      	str	r2, [r4, #4]
 800ed72:	bf04      	itt	eq
 800ed74:	1809      	addeq	r1, r1, r0
 800ed76:	6021      	streq	r1, [r4, #0]
 800ed78:	605c      	str	r4, [r3, #4]
 800ed7a:	e7c7      	b.n	800ed0c <_free_r+0x24>
 800ed7c:	bd38      	pop	{r3, r4, r5, pc}
 800ed7e:	bf00      	nop
 800ed80:	20005ee4 	.word	0x20005ee4

0800ed84 <_malloc_r>:
 800ed84:	b570      	push	{r4, r5, r6, lr}
 800ed86:	1ccd      	adds	r5, r1, #3
 800ed88:	f025 0503 	bic.w	r5, r5, #3
 800ed8c:	3508      	adds	r5, #8
 800ed8e:	2d0c      	cmp	r5, #12
 800ed90:	bf38      	it	cc
 800ed92:	250c      	movcc	r5, #12
 800ed94:	2d00      	cmp	r5, #0
 800ed96:	4606      	mov	r6, r0
 800ed98:	db01      	blt.n	800ed9e <_malloc_r+0x1a>
 800ed9a:	42a9      	cmp	r1, r5
 800ed9c:	d903      	bls.n	800eda6 <_malloc_r+0x22>
 800ed9e:	230c      	movs	r3, #12
 800eda0:	6033      	str	r3, [r6, #0]
 800eda2:	2000      	movs	r0, #0
 800eda4:	bd70      	pop	{r4, r5, r6, pc}
 800eda6:	f000 f9a9 	bl	800f0fc <__malloc_lock>
 800edaa:	4a21      	ldr	r2, [pc, #132]	; (800ee30 <_malloc_r+0xac>)
 800edac:	6814      	ldr	r4, [r2, #0]
 800edae:	4621      	mov	r1, r4
 800edb0:	b991      	cbnz	r1, 800edd8 <_malloc_r+0x54>
 800edb2:	4c20      	ldr	r4, [pc, #128]	; (800ee34 <_malloc_r+0xb0>)
 800edb4:	6823      	ldr	r3, [r4, #0]
 800edb6:	b91b      	cbnz	r3, 800edc0 <_malloc_r+0x3c>
 800edb8:	4630      	mov	r0, r6
 800edba:	f000 f98f 	bl	800f0dc <_sbrk_r>
 800edbe:	6020      	str	r0, [r4, #0]
 800edc0:	4629      	mov	r1, r5
 800edc2:	4630      	mov	r0, r6
 800edc4:	f000 f98a 	bl	800f0dc <_sbrk_r>
 800edc8:	1c43      	adds	r3, r0, #1
 800edca:	d124      	bne.n	800ee16 <_malloc_r+0x92>
 800edcc:	230c      	movs	r3, #12
 800edce:	6033      	str	r3, [r6, #0]
 800edd0:	4630      	mov	r0, r6
 800edd2:	f000 f994 	bl	800f0fe <__malloc_unlock>
 800edd6:	e7e4      	b.n	800eda2 <_malloc_r+0x1e>
 800edd8:	680b      	ldr	r3, [r1, #0]
 800edda:	1b5b      	subs	r3, r3, r5
 800eddc:	d418      	bmi.n	800ee10 <_malloc_r+0x8c>
 800edde:	2b0b      	cmp	r3, #11
 800ede0:	d90f      	bls.n	800ee02 <_malloc_r+0x7e>
 800ede2:	600b      	str	r3, [r1, #0]
 800ede4:	50cd      	str	r5, [r1, r3]
 800ede6:	18cc      	adds	r4, r1, r3
 800ede8:	4630      	mov	r0, r6
 800edea:	f000 f988 	bl	800f0fe <__malloc_unlock>
 800edee:	f104 000b 	add.w	r0, r4, #11
 800edf2:	1d23      	adds	r3, r4, #4
 800edf4:	f020 0007 	bic.w	r0, r0, #7
 800edf8:	1ac3      	subs	r3, r0, r3
 800edfa:	d0d3      	beq.n	800eda4 <_malloc_r+0x20>
 800edfc:	425a      	negs	r2, r3
 800edfe:	50e2      	str	r2, [r4, r3]
 800ee00:	e7d0      	b.n	800eda4 <_malloc_r+0x20>
 800ee02:	428c      	cmp	r4, r1
 800ee04:	684b      	ldr	r3, [r1, #4]
 800ee06:	bf16      	itet	ne
 800ee08:	6063      	strne	r3, [r4, #4]
 800ee0a:	6013      	streq	r3, [r2, #0]
 800ee0c:	460c      	movne	r4, r1
 800ee0e:	e7eb      	b.n	800ede8 <_malloc_r+0x64>
 800ee10:	460c      	mov	r4, r1
 800ee12:	6849      	ldr	r1, [r1, #4]
 800ee14:	e7cc      	b.n	800edb0 <_malloc_r+0x2c>
 800ee16:	1cc4      	adds	r4, r0, #3
 800ee18:	f024 0403 	bic.w	r4, r4, #3
 800ee1c:	42a0      	cmp	r0, r4
 800ee1e:	d005      	beq.n	800ee2c <_malloc_r+0xa8>
 800ee20:	1a21      	subs	r1, r4, r0
 800ee22:	4630      	mov	r0, r6
 800ee24:	f000 f95a 	bl	800f0dc <_sbrk_r>
 800ee28:	3001      	adds	r0, #1
 800ee2a:	d0cf      	beq.n	800edcc <_malloc_r+0x48>
 800ee2c:	6025      	str	r5, [r4, #0]
 800ee2e:	e7db      	b.n	800ede8 <_malloc_r+0x64>
 800ee30:	20005ee4 	.word	0x20005ee4
 800ee34:	20005ee8 	.word	0x20005ee8

0800ee38 <__ssputs_r>:
 800ee38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee3c:	688e      	ldr	r6, [r1, #8]
 800ee3e:	429e      	cmp	r6, r3
 800ee40:	4682      	mov	sl, r0
 800ee42:	460c      	mov	r4, r1
 800ee44:	4690      	mov	r8, r2
 800ee46:	4699      	mov	r9, r3
 800ee48:	d837      	bhi.n	800eeba <__ssputs_r+0x82>
 800ee4a:	898a      	ldrh	r2, [r1, #12]
 800ee4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee50:	d031      	beq.n	800eeb6 <__ssputs_r+0x7e>
 800ee52:	6825      	ldr	r5, [r4, #0]
 800ee54:	6909      	ldr	r1, [r1, #16]
 800ee56:	1a6f      	subs	r7, r5, r1
 800ee58:	6965      	ldr	r5, [r4, #20]
 800ee5a:	2302      	movs	r3, #2
 800ee5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee60:	fb95 f5f3 	sdiv	r5, r5, r3
 800ee64:	f109 0301 	add.w	r3, r9, #1
 800ee68:	443b      	add	r3, r7
 800ee6a:	429d      	cmp	r5, r3
 800ee6c:	bf38      	it	cc
 800ee6e:	461d      	movcc	r5, r3
 800ee70:	0553      	lsls	r3, r2, #21
 800ee72:	d530      	bpl.n	800eed6 <__ssputs_r+0x9e>
 800ee74:	4629      	mov	r1, r5
 800ee76:	f7ff ff85 	bl	800ed84 <_malloc_r>
 800ee7a:	4606      	mov	r6, r0
 800ee7c:	b950      	cbnz	r0, 800ee94 <__ssputs_r+0x5c>
 800ee7e:	230c      	movs	r3, #12
 800ee80:	f8ca 3000 	str.w	r3, [sl]
 800ee84:	89a3      	ldrh	r3, [r4, #12]
 800ee86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee8a:	81a3      	strh	r3, [r4, #12]
 800ee8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee94:	463a      	mov	r2, r7
 800ee96:	6921      	ldr	r1, [r4, #16]
 800ee98:	f7fe f910 	bl	800d0bc <memcpy>
 800ee9c:	89a3      	ldrh	r3, [r4, #12]
 800ee9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eea6:	81a3      	strh	r3, [r4, #12]
 800eea8:	6126      	str	r6, [r4, #16]
 800eeaa:	6165      	str	r5, [r4, #20]
 800eeac:	443e      	add	r6, r7
 800eeae:	1bed      	subs	r5, r5, r7
 800eeb0:	6026      	str	r6, [r4, #0]
 800eeb2:	60a5      	str	r5, [r4, #8]
 800eeb4:	464e      	mov	r6, r9
 800eeb6:	454e      	cmp	r6, r9
 800eeb8:	d900      	bls.n	800eebc <__ssputs_r+0x84>
 800eeba:	464e      	mov	r6, r9
 800eebc:	4632      	mov	r2, r6
 800eebe:	4641      	mov	r1, r8
 800eec0:	6820      	ldr	r0, [r4, #0]
 800eec2:	f7fe f906 	bl	800d0d2 <memmove>
 800eec6:	68a3      	ldr	r3, [r4, #8]
 800eec8:	1b9b      	subs	r3, r3, r6
 800eeca:	60a3      	str	r3, [r4, #8]
 800eecc:	6823      	ldr	r3, [r4, #0]
 800eece:	441e      	add	r6, r3
 800eed0:	6026      	str	r6, [r4, #0]
 800eed2:	2000      	movs	r0, #0
 800eed4:	e7dc      	b.n	800ee90 <__ssputs_r+0x58>
 800eed6:	462a      	mov	r2, r5
 800eed8:	f000 f912 	bl	800f100 <_realloc_r>
 800eedc:	4606      	mov	r6, r0
 800eede:	2800      	cmp	r0, #0
 800eee0:	d1e2      	bne.n	800eea8 <__ssputs_r+0x70>
 800eee2:	6921      	ldr	r1, [r4, #16]
 800eee4:	4650      	mov	r0, sl
 800eee6:	f7ff feff 	bl	800ece8 <_free_r>
 800eeea:	e7c8      	b.n	800ee7e <__ssputs_r+0x46>

0800eeec <_svfiprintf_r>:
 800eeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef0:	461d      	mov	r5, r3
 800eef2:	898b      	ldrh	r3, [r1, #12]
 800eef4:	061f      	lsls	r7, r3, #24
 800eef6:	b09d      	sub	sp, #116	; 0x74
 800eef8:	4680      	mov	r8, r0
 800eefa:	460c      	mov	r4, r1
 800eefc:	4616      	mov	r6, r2
 800eefe:	d50f      	bpl.n	800ef20 <_svfiprintf_r+0x34>
 800ef00:	690b      	ldr	r3, [r1, #16]
 800ef02:	b96b      	cbnz	r3, 800ef20 <_svfiprintf_r+0x34>
 800ef04:	2140      	movs	r1, #64	; 0x40
 800ef06:	f7ff ff3d 	bl	800ed84 <_malloc_r>
 800ef0a:	6020      	str	r0, [r4, #0]
 800ef0c:	6120      	str	r0, [r4, #16]
 800ef0e:	b928      	cbnz	r0, 800ef1c <_svfiprintf_r+0x30>
 800ef10:	230c      	movs	r3, #12
 800ef12:	f8c8 3000 	str.w	r3, [r8]
 800ef16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef1a:	e0c8      	b.n	800f0ae <_svfiprintf_r+0x1c2>
 800ef1c:	2340      	movs	r3, #64	; 0x40
 800ef1e:	6163      	str	r3, [r4, #20]
 800ef20:	2300      	movs	r3, #0
 800ef22:	9309      	str	r3, [sp, #36]	; 0x24
 800ef24:	2320      	movs	r3, #32
 800ef26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef2a:	2330      	movs	r3, #48	; 0x30
 800ef2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef30:	9503      	str	r5, [sp, #12]
 800ef32:	f04f 0b01 	mov.w	fp, #1
 800ef36:	4637      	mov	r7, r6
 800ef38:	463d      	mov	r5, r7
 800ef3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ef3e:	b10b      	cbz	r3, 800ef44 <_svfiprintf_r+0x58>
 800ef40:	2b25      	cmp	r3, #37	; 0x25
 800ef42:	d13e      	bne.n	800efc2 <_svfiprintf_r+0xd6>
 800ef44:	ebb7 0a06 	subs.w	sl, r7, r6
 800ef48:	d00b      	beq.n	800ef62 <_svfiprintf_r+0x76>
 800ef4a:	4653      	mov	r3, sl
 800ef4c:	4632      	mov	r2, r6
 800ef4e:	4621      	mov	r1, r4
 800ef50:	4640      	mov	r0, r8
 800ef52:	f7ff ff71 	bl	800ee38 <__ssputs_r>
 800ef56:	3001      	adds	r0, #1
 800ef58:	f000 80a4 	beq.w	800f0a4 <_svfiprintf_r+0x1b8>
 800ef5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef5e:	4453      	add	r3, sl
 800ef60:	9309      	str	r3, [sp, #36]	; 0x24
 800ef62:	783b      	ldrb	r3, [r7, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	f000 809d 	beq.w	800f0a4 <_svfiprintf_r+0x1b8>
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef74:	9304      	str	r3, [sp, #16]
 800ef76:	9307      	str	r3, [sp, #28]
 800ef78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef7c:	931a      	str	r3, [sp, #104]	; 0x68
 800ef7e:	462f      	mov	r7, r5
 800ef80:	2205      	movs	r2, #5
 800ef82:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ef86:	4850      	ldr	r0, [pc, #320]	; (800f0c8 <_svfiprintf_r+0x1dc>)
 800ef88:	f7f1 f9b2 	bl	80002f0 <memchr>
 800ef8c:	9b04      	ldr	r3, [sp, #16]
 800ef8e:	b9d0      	cbnz	r0, 800efc6 <_svfiprintf_r+0xda>
 800ef90:	06d9      	lsls	r1, r3, #27
 800ef92:	bf44      	itt	mi
 800ef94:	2220      	movmi	r2, #32
 800ef96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ef9a:	071a      	lsls	r2, r3, #28
 800ef9c:	bf44      	itt	mi
 800ef9e:	222b      	movmi	r2, #43	; 0x2b
 800efa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800efa4:	782a      	ldrb	r2, [r5, #0]
 800efa6:	2a2a      	cmp	r2, #42	; 0x2a
 800efa8:	d015      	beq.n	800efd6 <_svfiprintf_r+0xea>
 800efaa:	9a07      	ldr	r2, [sp, #28]
 800efac:	462f      	mov	r7, r5
 800efae:	2000      	movs	r0, #0
 800efb0:	250a      	movs	r5, #10
 800efb2:	4639      	mov	r1, r7
 800efb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efb8:	3b30      	subs	r3, #48	; 0x30
 800efba:	2b09      	cmp	r3, #9
 800efbc:	d94d      	bls.n	800f05a <_svfiprintf_r+0x16e>
 800efbe:	b1b8      	cbz	r0, 800eff0 <_svfiprintf_r+0x104>
 800efc0:	e00f      	b.n	800efe2 <_svfiprintf_r+0xf6>
 800efc2:	462f      	mov	r7, r5
 800efc4:	e7b8      	b.n	800ef38 <_svfiprintf_r+0x4c>
 800efc6:	4a40      	ldr	r2, [pc, #256]	; (800f0c8 <_svfiprintf_r+0x1dc>)
 800efc8:	1a80      	subs	r0, r0, r2
 800efca:	fa0b f000 	lsl.w	r0, fp, r0
 800efce:	4318      	orrs	r0, r3
 800efd0:	9004      	str	r0, [sp, #16]
 800efd2:	463d      	mov	r5, r7
 800efd4:	e7d3      	b.n	800ef7e <_svfiprintf_r+0x92>
 800efd6:	9a03      	ldr	r2, [sp, #12]
 800efd8:	1d11      	adds	r1, r2, #4
 800efda:	6812      	ldr	r2, [r2, #0]
 800efdc:	9103      	str	r1, [sp, #12]
 800efde:	2a00      	cmp	r2, #0
 800efe0:	db01      	blt.n	800efe6 <_svfiprintf_r+0xfa>
 800efe2:	9207      	str	r2, [sp, #28]
 800efe4:	e004      	b.n	800eff0 <_svfiprintf_r+0x104>
 800efe6:	4252      	negs	r2, r2
 800efe8:	f043 0302 	orr.w	r3, r3, #2
 800efec:	9207      	str	r2, [sp, #28]
 800efee:	9304      	str	r3, [sp, #16]
 800eff0:	783b      	ldrb	r3, [r7, #0]
 800eff2:	2b2e      	cmp	r3, #46	; 0x2e
 800eff4:	d10c      	bne.n	800f010 <_svfiprintf_r+0x124>
 800eff6:	787b      	ldrb	r3, [r7, #1]
 800eff8:	2b2a      	cmp	r3, #42	; 0x2a
 800effa:	d133      	bne.n	800f064 <_svfiprintf_r+0x178>
 800effc:	9b03      	ldr	r3, [sp, #12]
 800effe:	1d1a      	adds	r2, r3, #4
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	9203      	str	r2, [sp, #12]
 800f004:	2b00      	cmp	r3, #0
 800f006:	bfb8      	it	lt
 800f008:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f00c:	3702      	adds	r7, #2
 800f00e:	9305      	str	r3, [sp, #20]
 800f010:	4d2e      	ldr	r5, [pc, #184]	; (800f0cc <_svfiprintf_r+0x1e0>)
 800f012:	7839      	ldrb	r1, [r7, #0]
 800f014:	2203      	movs	r2, #3
 800f016:	4628      	mov	r0, r5
 800f018:	f7f1 f96a 	bl	80002f0 <memchr>
 800f01c:	b138      	cbz	r0, 800f02e <_svfiprintf_r+0x142>
 800f01e:	2340      	movs	r3, #64	; 0x40
 800f020:	1b40      	subs	r0, r0, r5
 800f022:	fa03 f000 	lsl.w	r0, r3, r0
 800f026:	9b04      	ldr	r3, [sp, #16]
 800f028:	4303      	orrs	r3, r0
 800f02a:	3701      	adds	r7, #1
 800f02c:	9304      	str	r3, [sp, #16]
 800f02e:	7839      	ldrb	r1, [r7, #0]
 800f030:	4827      	ldr	r0, [pc, #156]	; (800f0d0 <_svfiprintf_r+0x1e4>)
 800f032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f036:	2206      	movs	r2, #6
 800f038:	1c7e      	adds	r6, r7, #1
 800f03a:	f7f1 f959 	bl	80002f0 <memchr>
 800f03e:	2800      	cmp	r0, #0
 800f040:	d038      	beq.n	800f0b4 <_svfiprintf_r+0x1c8>
 800f042:	4b24      	ldr	r3, [pc, #144]	; (800f0d4 <_svfiprintf_r+0x1e8>)
 800f044:	bb13      	cbnz	r3, 800f08c <_svfiprintf_r+0x1a0>
 800f046:	9b03      	ldr	r3, [sp, #12]
 800f048:	3307      	adds	r3, #7
 800f04a:	f023 0307 	bic.w	r3, r3, #7
 800f04e:	3308      	adds	r3, #8
 800f050:	9303      	str	r3, [sp, #12]
 800f052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f054:	444b      	add	r3, r9
 800f056:	9309      	str	r3, [sp, #36]	; 0x24
 800f058:	e76d      	b.n	800ef36 <_svfiprintf_r+0x4a>
 800f05a:	fb05 3202 	mla	r2, r5, r2, r3
 800f05e:	2001      	movs	r0, #1
 800f060:	460f      	mov	r7, r1
 800f062:	e7a6      	b.n	800efb2 <_svfiprintf_r+0xc6>
 800f064:	2300      	movs	r3, #0
 800f066:	3701      	adds	r7, #1
 800f068:	9305      	str	r3, [sp, #20]
 800f06a:	4619      	mov	r1, r3
 800f06c:	250a      	movs	r5, #10
 800f06e:	4638      	mov	r0, r7
 800f070:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f074:	3a30      	subs	r2, #48	; 0x30
 800f076:	2a09      	cmp	r2, #9
 800f078:	d903      	bls.n	800f082 <_svfiprintf_r+0x196>
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d0c8      	beq.n	800f010 <_svfiprintf_r+0x124>
 800f07e:	9105      	str	r1, [sp, #20]
 800f080:	e7c6      	b.n	800f010 <_svfiprintf_r+0x124>
 800f082:	fb05 2101 	mla	r1, r5, r1, r2
 800f086:	2301      	movs	r3, #1
 800f088:	4607      	mov	r7, r0
 800f08a:	e7f0      	b.n	800f06e <_svfiprintf_r+0x182>
 800f08c:	ab03      	add	r3, sp, #12
 800f08e:	9300      	str	r3, [sp, #0]
 800f090:	4622      	mov	r2, r4
 800f092:	4b11      	ldr	r3, [pc, #68]	; (800f0d8 <_svfiprintf_r+0x1ec>)
 800f094:	a904      	add	r1, sp, #16
 800f096:	4640      	mov	r0, r8
 800f098:	f7fe f8c2 	bl	800d220 <_printf_float>
 800f09c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f0a0:	4681      	mov	r9, r0
 800f0a2:	d1d6      	bne.n	800f052 <_svfiprintf_r+0x166>
 800f0a4:	89a3      	ldrh	r3, [r4, #12]
 800f0a6:	065b      	lsls	r3, r3, #25
 800f0a8:	f53f af35 	bmi.w	800ef16 <_svfiprintf_r+0x2a>
 800f0ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0ae:	b01d      	add	sp, #116	; 0x74
 800f0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b4:	ab03      	add	r3, sp, #12
 800f0b6:	9300      	str	r3, [sp, #0]
 800f0b8:	4622      	mov	r2, r4
 800f0ba:	4b07      	ldr	r3, [pc, #28]	; (800f0d8 <_svfiprintf_r+0x1ec>)
 800f0bc:	a904      	add	r1, sp, #16
 800f0be:	4640      	mov	r0, r8
 800f0c0:	f7fe fb50 	bl	800d764 <_printf_i>
 800f0c4:	e7ea      	b.n	800f09c <_svfiprintf_r+0x1b0>
 800f0c6:	bf00      	nop
 800f0c8:	0800f4ac 	.word	0x0800f4ac
 800f0cc:	0800f4b2 	.word	0x0800f4b2
 800f0d0:	0800f4b6 	.word	0x0800f4b6
 800f0d4:	0800d221 	.word	0x0800d221
 800f0d8:	0800ee39 	.word	0x0800ee39

0800f0dc <_sbrk_r>:
 800f0dc:	b538      	push	{r3, r4, r5, lr}
 800f0de:	4c06      	ldr	r4, [pc, #24]	; (800f0f8 <_sbrk_r+0x1c>)
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	4605      	mov	r5, r0
 800f0e4:	4608      	mov	r0, r1
 800f0e6:	6023      	str	r3, [r4, #0]
 800f0e8:	f7f2 ff22 	bl	8001f30 <_sbrk>
 800f0ec:	1c43      	adds	r3, r0, #1
 800f0ee:	d102      	bne.n	800f0f6 <_sbrk_r+0x1a>
 800f0f0:	6823      	ldr	r3, [r4, #0]
 800f0f2:	b103      	cbz	r3, 800f0f6 <_sbrk_r+0x1a>
 800f0f4:	602b      	str	r3, [r5, #0]
 800f0f6:	bd38      	pop	{r3, r4, r5, pc}
 800f0f8:	20006e64 	.word	0x20006e64

0800f0fc <__malloc_lock>:
 800f0fc:	4770      	bx	lr

0800f0fe <__malloc_unlock>:
 800f0fe:	4770      	bx	lr

0800f100 <_realloc_r>:
 800f100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f102:	4607      	mov	r7, r0
 800f104:	4614      	mov	r4, r2
 800f106:	460e      	mov	r6, r1
 800f108:	b921      	cbnz	r1, 800f114 <_realloc_r+0x14>
 800f10a:	4611      	mov	r1, r2
 800f10c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f110:	f7ff be38 	b.w	800ed84 <_malloc_r>
 800f114:	b922      	cbnz	r2, 800f120 <_realloc_r+0x20>
 800f116:	f7ff fde7 	bl	800ece8 <_free_r>
 800f11a:	4625      	mov	r5, r4
 800f11c:	4628      	mov	r0, r5
 800f11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f120:	f000 f814 	bl	800f14c <_malloc_usable_size_r>
 800f124:	42a0      	cmp	r0, r4
 800f126:	d20f      	bcs.n	800f148 <_realloc_r+0x48>
 800f128:	4621      	mov	r1, r4
 800f12a:	4638      	mov	r0, r7
 800f12c:	f7ff fe2a 	bl	800ed84 <_malloc_r>
 800f130:	4605      	mov	r5, r0
 800f132:	2800      	cmp	r0, #0
 800f134:	d0f2      	beq.n	800f11c <_realloc_r+0x1c>
 800f136:	4631      	mov	r1, r6
 800f138:	4622      	mov	r2, r4
 800f13a:	f7fd ffbf 	bl	800d0bc <memcpy>
 800f13e:	4631      	mov	r1, r6
 800f140:	4638      	mov	r0, r7
 800f142:	f7ff fdd1 	bl	800ece8 <_free_r>
 800f146:	e7e9      	b.n	800f11c <_realloc_r+0x1c>
 800f148:	4635      	mov	r5, r6
 800f14a:	e7e7      	b.n	800f11c <_realloc_r+0x1c>

0800f14c <_malloc_usable_size_r>:
 800f14c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f150:	1f18      	subs	r0, r3, #4
 800f152:	2b00      	cmp	r3, #0
 800f154:	bfbc      	itt	lt
 800f156:	580b      	ldrlt	r3, [r1, r0]
 800f158:	18c0      	addlt	r0, r0, r3
 800f15a:	4770      	bx	lr

0800f15c <_init>:
 800f15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f15e:	bf00      	nop
 800f160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f162:	bc08      	pop	{r3}
 800f164:	469e      	mov	lr, r3
 800f166:	4770      	bx	lr

0800f168 <_fini>:
 800f168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f16a:	bf00      	nop
 800f16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f16e:	bc08      	pop	{r3}
 800f170:	469e      	mov	lr, r3
 800f172:	4770      	bx	lr
